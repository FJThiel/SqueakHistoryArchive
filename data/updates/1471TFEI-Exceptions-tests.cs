'From Squeak 2.5 of August 6, 1999 on 19 August 1999 at 1:54:50 am'!Object subclass: #ExceptionTester	instanceVariableNames: 'log suiteLog '	classVariableNames: ''	poolDictionaries: ''	category: 'TFEI-Exceptions-Tests'!!ExceptionTester methodsFor: 'pseudo actions' stamp: 'tfei 6/8/1999 09:13'!doSomething	self log: self doSomethingString! !!ExceptionTester methodsFor: 'pseudo actions' stamp: 'tfei 6/8/1999 09:14'!doSomethingElse	self log: self doSomethingElseString! !!ExceptionTester methodsFor: 'pseudo actions' stamp: 'tfei 6/8/1999 09:14'!doSomethingExceptional	self log: self doSomethingExceptionalString! !!ExceptionTester methodsFor: 'pseudo actions' stamp: 'tfei 6/8/1999 09:15'!doYetAnotherThing	self log: self doYetAnotherThingString! !!ExceptionTester methodsFor: 'pseudo actions' stamp: 'tfei 6/8/1999 09:16'!methodWithError	MyTestError signal: self testString! !!ExceptionTester methodsFor: 'pseudo actions' stamp: 'tfei 6/8/1999 09:16'!methodWithNotification	MyTestNotification signal: self testString! !!ExceptionTester methodsFor: 'logging' stamp: 'tfei 6/8/1999 09:17'!clearLog	log := nil! !!ExceptionTester methodsFor: 'logging' stamp: 'tfei 6/7/1999 15:16'!contents	^( self log		inject: (WriteStream on: (String new: 80))		into: 			[:result :item |			result 				cr; 				nextPutAll: item;				yourself] ) contents! !!ExceptionTester methodsFor: 'logging' stamp: 'tfei 6/7/1999 15:03'!log: aString	self log add: aString! !!ExceptionTester methodsFor: 'logging' stamp: 'tfei 6/12/1999 23:07'!logTest: aSelector	self suiteLog add: aSelector! !!ExceptionTester methodsFor: 'logging' stamp: 'tfei 6/8/1999 09:38'!logTestResult: aString	| index |	index := self suiteLog size.	self suiteLog 		at: index		put: ((self suiteLog at: index), ' ', aString)! !!ExceptionTester methodsFor: 'suites' stamp: 'tfei 6/13/1999 01:25'!runAllTests	"ExceptionTester new runAllTests"	self		runBasicTests;		runBasicANSISignaledExceptionTests! !!ExceptionTester methodsFor: 'suites' stamp: 'tfei 6/12/1999 23:54'!runBasicANSISignaledExceptionTests	self basicANSISignaledExceptionTestSelectors		do:			[:eachTestSelector |			self runTest: eachTestSelector]! !!ExceptionTester methodsFor: 'suites' stamp: 'tfei 6/9/1999 16:06'!runBasicTests	self basicTestSelectors		do:			[:eachTestSelector |			self runTest: eachTestSelector]! !!ExceptionTester methodsFor: 'testing' stamp: 'tfei 8/19/1999 03:10'!runTest: aSelector	| expectedResult |	[expectedResult := self perform: (aSelector, #Results) asSymbol.	self logTest: aSelector.	self clearLog.	self perform: aSelector.	] on: MyTestError	  do: 		[ :ex |		self log: 'Unhandled Exception'.		ex return: nil].	self log = expectedResult		ifTrue: [self logTestResult: 'succeeded']		ifFalse: [self logTestResult: 'failed']! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 6/7/1999 13:43'!nonResumableFallOffTheEndHandler		[self doSomething.	MyTestError signal.	self doSomethingElse]		on: MyTestError		do: [:ex | self doSomethingExceptional].	self doYetAnotherThing! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 6/9/1999 16:07'!resumableFallOffTheEndHandler	[self doSomething.	MyTestNotification signal.	self doSomethingElse]		on: MyTestNotification		do: [:ex | self doSomethingExceptional].	self doYetAnotherThing! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 8/19/1999 01:39'!signalFromHandlerActionTest	[self doSomething.	MyTestError signal.	self doSomethingElse]		on: MyTestError		do:			[self doYetAnotherThing.			MyTestError signal]! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 6/8/1999 09:44'!simpleEnsureTest	[self doSomething.	self doSomethingElse]		ensure:			[self doYetAnotherThing].	! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 6/8/1999 12:50'!simpleEnsureTestWithError	[self doSomething.	MyTestError signal.	self doSomethingElse]		ensure:			[self doYetAnotherThing].	! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 6/8/1999 10:15'!simpleEnsureTestWithNotification	[self doSomething.	self methodWithNotification.	self doSomethingElse]		ensure:			[self doYetAnotherThing].	! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 6/9/1999 16:04'!simpleEnsureTestWithUparrow	[self doSomething.	true ifTrue: [^nil].	self doSomethingElse]		ensure:			[self doYetAnotherThing].	! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 6/7/1999 14:28'!warningTest	self log: 'About to signal warning.'.	Warning signal: 'Ouch'.	self log: 'Warning signal handled and resumed.'! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 6/8/1999 09:21'!nonResumableFallOffTheEndHandlerResults	^OrderedCollection new		add: self doSomethingString;		add: self doSomethingExceptionalString;		add: self doYetAnotherThingString;		yourself! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 8/19/1999 02:39'!resumableFallOffTheEndHandlerResults	^OrderedCollection new		add: self doSomethingString;		add: self doSomethingExceptionalString;		add: self doYetAnotherThingString;		yourself! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 8/19/1999 01:51'!signalFromHandlerActionTestResults	^OrderedCollection new		add: self doSomethingString;		add: self doYetAnotherThingString;		add: 'Unhandled Exception';		yourself! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 6/8/1999 09:47'!simpleEnsureTestResults	^OrderedCollection new		add: self doSomethingString;		add: self doSomethingElseString;		add: self doYetAnotherThingString;		yourself! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 6/9/1999 17:44'!simpleEnsureTestWithErrorResults	^OrderedCollection new		add: self doSomethingString;		add: 'Unhandled Exception';		add: self doYetAnotherThingString;		yourself! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 6/8/1999 10:13'!simpleEnsureTestWithNotificationResults	^OrderedCollection new		add: self doSomethingString;		add: self doSomethingElseString;		add: self doYetAnotherThingString;		yourself! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 6/8/1999 18:55'!simpleEnsureTestWithUparrowResults	^OrderedCollection new		add: self doSomethingString;"		add: self doSomethingElseString;"		add: self doYetAnotherThingString;		yourself! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/12/1999 23:59'!basicANSISignaledExceptionTestSelectors	^#( simpleIsNestedTest simpleOuterTest simplePassTest simpleResignalAsTest simpleResumeTest simpleRetryTest simpleRetryUsingTest simpleReturnTest)! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 8/19/1999 01:37'!basicTestSelectors	^#( simpleEnsureTest simpleEnsureTestWithNotification simpleEnsureTestWithUparrow simpleEnsureTestWithError signalFromHandlerActionTest		resumableFallOffTheEndHandler nonResumableFallOffTheEndHandler )! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/8/1999 09:14'!doSomethingElseString	^'Do something else.'! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/8/1999 09:14'!doSomethingExceptionalString	^'Do something exceptional.'! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/8/1999 09:13'!doSomethingString	^'Do something.'! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/8/1999 09:15'!doYetAnotherThingString	^'Do yet another thing.'! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/7/1999 15:03'!log	log == nil		ifTrue: [log := OrderedCollection new].	^log! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/8/1999 09:30'!suiteLog	suiteLog == nil		ifTrue: [suiteLog := OrderedCollection new].	^suiteLog! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 6/8/1999 09:15'!testString	^'This is only a test.'! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 01:27'!simpleIsNestedTest	"uses resignalAs:"	[self doSomething.	MyTestError signal.	self doSomethingElse]		on: MyTestError		do:			[:ex |			ex isNested "expecting to detect handler in #runTest:"				ifTrue:					[self doYetAnotherThing.					ex resignalAs: MyTestNotification new]]! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 00:36'!simpleOuterTest	"uses #resume"	[[self doSomething.	MyTestNotification signal.	self doSomethingElse]		on: MyTestNotification		do: [:ex | ex outer]]				on: MyTestNotification				do: [:ex | self doYetAnotherThing. ex resume]! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 00:37'!simplePassTest	[self doSomething.	MyTestError signal.	self doSomethingElse]		on: MyTestError		do:			[:ex |			self doYetAnotherThing.			ex pass "expecting handler in #runTest:"]! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 02:12'!simpleResignalAsTest	"ExceptionTester new simpleResignalAsTest"	[self doSomething.	MyTestNotification signal.	self doSomethingElse]		on: MyTestNotification		do:			[:ex | ex resignalAs: MyTestError new]! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 00:56'!simpleResumeTest	| it |	[self doSomething.	it := MyResumableTestError signal.	it = 3 ifTrue: [self doSomethingElse]]		on: MyResumableTestError		do:			[:ex |			self doYetAnotherThing.			ex resume: 3]! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 01:02'!simpleRetryTest	| theMeaningOfLife |	theMeaningOfLife := nil.	[self doSomething.	theMeaningOfLife == nil		ifTrue: [MyTestError signal]		ifFalse: [self doSomethingElse]]			on: MyTestError			do:				[:ex |				theMeaningOfLife := 42.				self doYetAnotherThing.				ex retry]! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 01:03'!simpleRetryUsingTest	[self doSomething.	MyTestError signal.	self doSomethingElse]		on: MyTestError		do:			[:ex | ex retryUsing: [self doYetAnotherThing]]! !!ExceptionTester methodsFor: 'signaledException tests' stamp: 'tfei 6/13/1999 00:59'!simpleReturnTest	| it |	it :=		[self doSomething.		MyTestError signal.		self doSomethingElse]			on: MyTestError			do: [:ex | ex return: 3].	it = 3 ifTrue: [self doYetAnotherThing]! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 01:09'!simpleIsNestedTestResults	^OrderedCollection new		add: self doSomethingString;		add: self doYetAnotherThingString;		add: self doSomethingElseString;		yourself! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 01:10'!simpleOuterTestResults	^OrderedCollection new		add: self doSomethingString;		add: self doYetAnotherThingString;		add: self doSomethingElseString;		yourself! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 01:10'!simplePassTestResults	^OrderedCollection new		add: self doSomethingString;		add: self doYetAnotherThingString;		add: 'Unhandled Exception';		yourself! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 01:11'!simpleResignalAsTestResults	^OrderedCollection new		add: self doSomethingString;		add: 'Unhandled Exception';		yourself! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 01:19'!simpleResumeTestResults	^OrderedCollection new			add: self doSomethingString;			add: self doYetAnotherThingString;			add: self doSomethingElseString;			yourself! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 01:23'!simpleRetryTestResults	^OrderedCollection new			add: self doSomethingString;			add: self doYetAnotherThingString;			add: self doSomethingString;			add: self doSomethingElseString;			yourself! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 01:23'!simpleRetryUsingTestResults	^OrderedCollection new			add: self doSomethingString;			add: self doYetAnotherThingString;			yourself! !!ExceptionTester methodsFor: 'signaledException results' stamp: 'tfei 6/13/1999 02:22'!simpleReturnTestResults	^OrderedCollection new		add: self doSomethingString;		add: self doYetAnotherThingString;		yourself! !Error subclass: #MyResumableTestError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TFEI-Exceptions-Tests'!!MyResumableTestError methodsFor: 'exceptionDescription' stamp: 'tfei 6/13/1999 00:46'!isResumable	^true! !Error subclass: #MyTestError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TFEI-Exceptions-Tests'!Notification subclass: #MyTestNotification	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TFEI-Exceptions-Tests'!