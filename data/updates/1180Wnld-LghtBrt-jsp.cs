'From Squeak 2.4b of April 23, 1999 on 30 April 1999 at 2:38:44 pm'!"Change Set:		Wnld-LghtBrt-jspDate:			30 April 1999Author:			Jeff PierceAdds verification to light creation, and adds the set/getBrightness functionality to lights."!!Wonderland methodsFor: 'creating' stamp: 'jsp 4/29/1999 15:13'!makeLight: lightType	"Create a light of the specified type and add it to the Wonderland"	| theLight name |	"Make sure the user gave us a type of light"	[ WonderlandVerifier VerifyLight: lightType ]		ifError: [ :msg :rcvr |			self reportErrorToUser:				'Squeak could not determine the type of light to create because ', msg.			^ nil ].	"The user gave us a valid type type, so proceed"	(lightType = ambient)		ifTrue: [ theLight _ WonderlandAmbientLight createFor: self. ]		ifFalse: [ (lightType = positional)			ifTrue: [ theLight _ WonderlandPositionalLight createFor: self. ]			ifFalse: [ (lightType = directional)				ifTrue: [ theLight _ WonderlandDirectionalLight createFor: self. ]				ifFalse: [ theLight _ WonderlandSpotLight createFor: self. ]					]				].	name _ self uniqueNameFrom: 'light'.	theLight setName: name.	myNamespace at: name put: theLight.	scriptEditor updateActorBrowser.	lightList addLast: theLight.	^ theLight.! !!WonderlandLightSource methodsFor: 'get property' stamp: 'jsp 4/30/1999 11:32'!getBrightness	"Returns the brightness of the light as a value between 0 and 1."	^ ((myColor red) max: (myColor green)) max: (myColor blue).! !!WonderlandLightSource methodsFor: 'set property' stamp: 'jsp 4/30/1999 11:33'!setBrightness: aNumber	"Sets the brightness of the light between 0 and 1 by varying the color of the light."	"The parameter checks out, so run the animation"	self setBrightness: aNumber duration: 1.0.! !!WonderlandLightSource methodsFor: 'set property' stamp: 'jsp 4/30/1999 11:37'!setBrightness: aNumber duration: aDuration	"Sets the brightness of the light between 0 and 1 by varying the color of the light."	| r g b scale currentBrightness |	"First verify our arguments"	[ WonderlandVerifier Verify0To1Number: aNumber ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser:				'Squeak could not the brightness to make the light because ', msg.			^ nil ].	[ WonderlandVerifier VerifyDuration: aDuration ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser:				'Squeak could not determine the duration to use for changing the brightness of the light because ', msg.			^ nil ].	currentBrightness _ self getBrightness.	(currentBrightness = 0)		ifTrue: [					r _ aNumber.					g _ aNumber.					b _ aNumber.				]		ifFalse: [					scale _ (aNumber / (self getBrightness)).					r _ (myColor red) * scale.					g _ (myColor green) * scale.					b _ (myColor blue) * scale.				].	"Our parameters check out, so run the animation"	self setColor: { r. g. b } duration: aDuration.! !!WonderlandSpotLight methodsFor: 'converting' stamp: 'jsp 4/29/1999 15:46'!transformedBy: aTransformer	^(super transformedBy: aTransformer) 		target: (aTransformer transformPosition: target).! !!WonderlandVerifier class methodsFor: 'parameter parsing' stamp: 'jsp 4/29/1999 15:11'!VerifyLight: parameter	"If the parameter is a valid type of light this method returns true, otherwise it throws an exception"	((((parameter = ambient) or: [parameter = positional]) or: [parameter = directional])			or: [parameter = spotlight])		ifTrue: [ ^ true ]		ifFalse: [ self error: (parameter asString) , ' is not a valid type of light. ' ].! !