'From Squeak2.9alpha of 13 June 2000 [latest update: #3036] on 20 November 2000 at 10:49:47 pm'!"Change Set:		B3DStackBalance-arDate:			20 November 2000Author:			Andreas RaabFixes two prims that didn't pop the appropriate number of items from the stack."!!B3DClipperPlugin methodsFor: 'primitives' stamp: 'ar 11/20/2000 22:47'!b3dClipPolygon	"Primitive. Clip the polygon given in the vertexArray using the temporary vertex array which is assumed to have sufficient size."	| outMask vtxCount vtxArray tempVtxArray count |	self export: true.	self inline: false.	self var: #vtxArray declareC:'int *vtxArray'.	self var: #tempVtxArray declareC:'int *tempVtxArray'.	interpreterProxy methodArgumentCount = 4		ifFalse:[^interpreterProxy primitiveFail].	outMask _ interpreterProxy stackIntegerValue: 0.	vtxCount _ interpreterProxy stackIntegerValue: 2.	vtxArray _ self stackPrimitiveVertexArray: 3 ofSize: vtxCount + 4.	tempVtxArray _ self stackPrimitiveVertexArray: 1 ofSize: vtxCount + 4.	(vtxArray == nil or:[tempVtxArray == nil or:[interpreterProxy failed]])		ifTrue:[^interpreterProxy primitiveFail].	"Hack pointers for one-based indexes"	vtxArray _ vtxArray - PrimVertexSize.	tempVtxArray _ tempVtxArray - PrimVertexSize.	count _ self clipPolygon: vtxArray count: vtxCount with: tempVtxArray mask: outMask.	interpreterProxy pop: 5.	interpreterProxy pushInteger: count.! !!B3DVertexBufferPlugin methodsFor: 'primitives' stamp: 'ar 11/20/2000 22:48'!b3dLoadVertexBuffer	"Primitive. Load the data into the given vertex buffer.	NOTE: dstStart is a zero-based index."	| defaultVtx defaultNormal defaultTexCoords defaultColor count texPtr colorPtr normalPtr vtxPtr dstStart dstPtr pVtx |	self export: true.	self inline: false.	self var: #defaultVtx declareC:'int *defaultVtx'.	self var: #defaultNormal declareC:'int *defaultNormal'.	self var: #defaultTexCoords declareC:'int *defaultTexCoords'.	self var: #defaultColor declareC:'int *defaultColor'.	self var: #texPtr declareC:'int *texPtr'.	self var: #colorPtr declareC:'int *colorPtr'.	self var: #normalPtr declareC:'int *normalPtr'.	self var: #vtxPtr declareC:'int *vtxPtr'.	self var: #dstPtr declareC:'int *dstPtr'.	self var: #pVtx declareC:'int *pVtx'.	defaultVtx _ self stackPrimitiveVertex: 0.	count _ interpreterProxy stackIntegerValue: 1.	texPtr _ self vbLoadArray: (interpreterProxy stackObjectValue: 2) 				size: 2*count.	colorPtr _ self vbLoadArray: (interpreterProxy stackObjectValue: 3) 				size: count.	normalPtr _ self vbLoadArray: (interpreterProxy stackObjectValue: 4) 				size: 3*count.	vtxPtr _ self vbLoadArray: (interpreterProxy stackObjectValue: 5) 				size: 3*count.	dstStart _ interpreterProxy stackIntegerValue: 6.	dstPtr _ self stackPrimitiveVertexArray: 7 ofSize: dstStart + count.	"Check for all problems above"	(dstPtr = nil or:[defaultVtx == nil or:[interpreterProxy failed]]) 		ifTrue:[^interpreterProxy primitiveFail].	"Install default values"	normalPtr = nil		ifTrue:[defaultNormal _ defaultVtx + PrimVtxNormal]		ifFalse:[defaultNormal _ normalPtr].	texPtr = nil		ifTrue:[defaultTexCoords _ defaultVtx + PrimVtxTexCoords]		ifFalse:[defaultTexCoords _ texPtr].	colorPtr = nil		ifTrue:[defaultColor _ defaultVtx + PrimVtxColor32]		ifFalse:[defaultColor _ colorPtr].	"Do the actual stuff"	pVtx _ dstPtr + (dstStart * PrimVertexSize).	0 to: count-1 do:[:i|		pVtx at: PrimVtxPositionX put: (vtxPtr at: 0).		pVtx at: PrimVtxPositionY put: (vtxPtr at: 1).		pVtx at: PrimVtxPositionZ put: (vtxPtr at: 2).		pVtx at: PrimVtxNormalX put: (defaultNormal at: 0).		pVtx at: PrimVtxNormalY put: (defaultNormal at: 1).		pVtx at: PrimVtxNormalZ put: (defaultNormal at: 2).		pVtx at: PrimVtxColor32 put: (defaultColor at: 0).		pVtx at: PrimVtxTexCoordU put: (defaultTexCoords at: 0).		pVtx at: PrimVtxTexCoordV put: (defaultTexCoords at: 1).		"And go to the next vertex"		pVtx _ pVtx + PrimVertexSize.		vtxPtr _ vtxPtr + 3.		normalPtr = nil ifFalse:[defaultNormal _ defaultNormal + 3].		colorPtr = nil ifFalse:[defaultColor _ defaultColor + 1].		texPtr = nil ifFalse:[defaultTexCoords _ defaultTexCoords + 2].	].	"Clean up stack"	interpreterProxy pop: 9. "Pop args+rcvr"	interpreterProxy pushInteger: count.! !