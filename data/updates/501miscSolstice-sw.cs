'From Squeak 2.3 beta of Nov 25, 1998 on 21 December 1998 at 4:14:42 pm'!"Change Set:		miscSolstice-swDate:			21 December 1998Author:			Scott WallaceA miscellany of cold-weather improvements:* Display preamble in the code pane of change sorters when no class is selected.* Fixes a nasty bug relating to dropping a boolean tile.* Fixes a bug relating to doing book transitions for objects not yet in a world.* Don't let the thumbnail for any object be taller than the object itself.* Allow FillInTheBlankMorph to work properly in an mvc project"!!ChangeSorter methodsFor: 'code pane' stamp: 'sw 12/7/1998 14:10'!contents: aString notifying: aController 	"Compile the code in aString. Notify aController of any syntax errors. 	Create an error if the category of the selected message is unknown. 	Answer false if the compilation fails. Otherwise, if the compilation 	created a new method, deselect the current selection. Then answer true."	| category selector class oldSelector |	(class _ self selectedClassOrMetaClass) ifNil:		[(myChangeSet preambleString == nil or: [aString size == 0]) ifTrue: [ ^ false].		myChangeSet preambleString: aString.		self currentSelector: nil.  "forces update with no 'unsubmitted chgs' feedback"		^ true].	oldSelector _ self selectedMessageName.	category _ class organization categoryOfElement: oldSelector.	selector _ class compile: aString				classified: category				notifying: aController.	selector ifNil: [^ false].	(self messageList includes: selector)		ifTrue: [self currentSelector: selector]		ifFalse: [self currentSelector: oldSelector].	self update.	^ true! !!ChangeSorter methodsFor: 'code pane' stamp: 'sw 12/7/1998 13:32'!setContents	"return the source code that shows in the bottom pane"	| sel class strm changeType |	self clearUserEditFlag.	currentClassName ifNil: [^ contents _ myChangeSet preambleString ifNil: ['']].	class _ self selectedClassOrMetaClass.	(sel _ currentSelector) == nil		ifFalse: [changeType _ (myChangeSet atSelector: (sel _ sel asSymbol) class: class).			changeType == #remove				ifTrue: [^ contents _ 'Method has been removed (see versions)'].			changeType == #addedThenRemoved				ifTrue: [^ contents _ 'Added then removed (see versions)'].			class ifNil: [^ contents _ 'Method was added, but cannot be found!!'].			(class includesSelector: sel)				ifFalse: [^ contents _ 'Method was added, but cannot be found!!'].			contents _ class sourceCodeAt: sel.			Preferences browseWithPrettyPrint ifTrue:				[contents _ class compilerClass new					format: contents in: class notifying: nil].			^ contents _ contents asText makeSelectorBoldIn: class]		ifTrue: [strm _ WriteStream on: (String new: 100).			(myChangeSet classChangeAt: currentClassName) do: [:each |				each = #remove ifTrue: [strm nextPutAll: 'Entire class was removed.'; cr].				each = #add ifTrue: [strm nextPutAll: 'Entire class was added.'; cr].				each = #change ifTrue: [strm nextPutAll: 'Class definition was changed.'; cr].				each = #comment ifTrue: [strm nextPutAll: 'New class comment.'; cr]].			^ contents _ strm contents].! !!FillInTheBlankMorph class methodsFor: 'instance creation' stamp: 'sw 12/21/1998 13:21'!request: queryString initialAnswer: defaultAnswer centerAt: aPoint	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts. Answer the empty string if the user cancels.	This variant is only for calling from within a Morphic project."	"FillInTheBlankMorph		request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: Display center"	 ^ self request: queryString initialAnswer: defaultAnswer centerAt: aPoint inWorld: World! !!FillInTheBlankMorph class methodsFor: 'instance creation' stamp: 'sw 12/21/1998 13:20'!request: queryString initialAnswer: defaultAnswer centerAt: aPoint inWorld: aWorld	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts. Answer the empty string if the user cancels."	"FillInTheBlankMorph		request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: Display center"	| m |	m _ self new		setQuery: queryString		initialAnswer: defaultAnswer		answerHeight: 50.	aWorld addMorph: m centeredNear: aPoint.	^ m getUserResponse! !!Morph methodsFor: 'thumbnail' stamp: 'sw 12/21/1998 14:20'!representativeNoTallerThan: maxHeight norWiderThan: maxWidth thumbnailHeight: thumbnailHeight	"Return a morph representing the receiver but which is no taller than aHeight.  If the receiver is already small enough, just return it, else return a MorphThumbnail companioned to the receiver, enforcing the maxWidth"	(self height <= maxHeight and: [self width <= maxWidth]) ifTrue: [^ self].	^ MorphThumbnail new extent: maxWidth @ (thumbnailHeight min: self height); morphRepresented: self! !!BooklikeMorph methodsFor: 'misc' stamp: 'sw 12/21/1998 11:11'!playPageFlipSound: soundName	| presenter |	(presenter _ self presenter) ifNil: [^ self].  "Avoid failures when called too early"	(presenter soundsEnabled "user-controllable" and:		[PageFlipSoundOn])  "mechanism to suppress sounds at init time"			ifTrue: [self playSoundNamed: soundName].! !!PhraseTileMorph methodsFor: 'all' stamp: 'sw 12/21/1998 12:10'!isCommand	"Answer whether the receiver is a true line of phrase-command.  If not, it is a fragment that will not be able to serve as a line of script on its own"	| rcvrTile pad |	pad _ submorphs first.	(pad isKindOf: TilePadMorph) ifTrue:		[(submorphs second isKindOf: AssignmentTileMorph) ifTrue: [^ true].		(((rcvrTile _ pad submorphs first) isKindOf: TileMorph) and: [rcvrTile isPossessive]) ifTrue: [^ false]].	^ true! !