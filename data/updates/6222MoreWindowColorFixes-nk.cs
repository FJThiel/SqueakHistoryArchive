'From Squeak3.8alpha of ''17 July 2004'' [latest update: #6211] on 22 September 2004 at 9:21:52 pm'!"Change Set:		MoreWindowColorFixes-nkDate:			10 June 2004Author:			Ned KonzThis fixes the coloring of SystemWindow subclasses that are their own models (or whose models are nil). It fixes both ArchiveViewer and SMLoader windows.It also lets you set the default color for windows with no other color preference using the standard window colors dialog.It includes the appropriate changes in[FIX] reposted: Problem coloring ArchiveViewer and others.sysWindowColors-asm22708 andSMLoader-sysWindowColors-asm [FIX] reposted: Problem coloring SMLoader 22711"!!Object class methodsFor: 'window color' stamp: 'nk 6/10/2004 08:10'!windowColorSpecification	"Answer a WindowColorSpec object that declares my preference.	This is a backstop for classes that don't otherwise define a preference."	^ WindowColorSpec classSymbol: self name		wording: 'Default' brightColor: #white		pastelColor: #white		helpMessage: 'Other windows without color preferences.'! !!SystemWindow methodsFor: 'panes' stamp: 'asm 6/29/2003 22:36'!paneColor	| cc |	(cc := self valueOfProperty: #paneColor) ifNotNil: [^cc].	Display depth > 2 		ifTrue: 			[model ifNotNil: 					[model isInMemory 						ifTrue: 							[cc := Color colorFrom: model defaultBackgroundColor.							Preferences alternativeWindowLook 								ifTrue: 									[cc := (cc = Color lightYellow or: [cc = Color white]) 										ifTrue: [Color gray: 0.67]										ifFalse: [cc duller]]]].			cc 				ifNil: [cc := paneMorphs isEmptyOrNil ifFalse: [paneMorphs first color]]].	cc ifNil: [cc := self defaultBackgroundColor].	self paneColor: cc.	^cc! !!ArchiveViewer methodsFor: 'archive operations' stamp: 'nk 2/24/2001 13:27'!openNewArchive	| menu result |	menu _ StandardFileMenu oldFileMenu: (FileDirectory default) withPattern: '*.zip'.	result := menu startUpWithCaption: 'Select Zip archive to open...'.	result ifNil: [ ^self ].	self fileName: (result directory fullNameFor: result name).! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:16'!archive: aZipArchive	archive _ aZipArchive.	self model: aZipArchive.	self setLabel: 'New Zip Archive'.	self memberIndex: 0.	self changed: #memberList! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:58'!buttonColor	^self defaultBackgroundColor darker! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:59'!buttonOffColor	^self defaultBackgroundColor darker! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:59'!buttonOnColor	^self defaultBackgroundColor! !!ArchiveViewer methodsFor: 'initialization' stamp: 'kfr 9/22/2004 21:19'!createButtonBar	| bar button narrowFont registeredFonts |	registeredFonts _ OrderedCollection new.	TextStyle knownTextStylesWithoutDefault do:		[:st | (TextStyle named: st) fonts do: [:f | registeredFonts addLast: f]].			narrowFont := registeredFonts detectMin:			[:ea | ea widthOfString: 'Contents' from: 1 to: 8].	bar := AlignmentMorph newRow.	bar		color: self defaultBackgroundColor;		rubberBandCells: false;		vResizing: #shrinkWrap;		cellInset: 6 @ 0.	#(#('New\Archive' #canCreateNewArchive #createNewArchive 'Create a new, empty archive and discard this one') #('Load\Archive' #canOpenNewArchive #openNewArchive 'Open another archive and discard this one') #('Save\Archive As' #canSaveArchive #saveArchive 'Save this archive under a new name') #('Extract\All' #canExtractAll #extractAll 'Extract all this archive''s members into a directory') #('Add\File' #canAddMember #addMember 'Add a file to this archive') #('Add from\Clipboard' #canAddMember #addMemberFromClipboard 'Add the contents of the clipboard as a new file') #('Add\Directory' #canAddMember #addDirectory 'Add the entire contents of a directory, with all of its subdirectories') #('Extract\Member As' #canExtractMember #extractMember 'Extract the selected member to a file') #('Delete\Member' #canDeleteMember #deleteMember 'Remove the selected member from this archive') #('Rename\Member' #canRenameMember #renameMember 'Rename the selected member') #('View All\Contents' #canViewAllContents #changeViewAllContents 'Toggle the view of all the selected member''s contents')) 		do: 			[:arr | 			| buttonLabel |			buttonLabel := (TextMorph new)						string: arr first withCRs							fontName: narrowFont familyName							size: narrowFont pointSize							wrap: false;						hResizing: #shrinkWrap;						lock;						yourself.			(button := PluggableButtonMorph 						on: self						getState: arr second						action: arr third)				vResizing: #shrinkWrap;				hResizing: #spaceFill;				onColor: self buttonOnColor offColor: self buttonOffColor;				label: buttonLabel;				setBalloonText: arr fourth.			bar addMorphBack: button.			buttonLabel composeToBounds].	^bar! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:59'!createListHeadingUsingFont: font	| sm |	sm _ StringMorph contents: '  uncomp     comp   CRC-32       date     time  file name'.	font ifNotNil: [ sm font: font ].	^(AlignmentMorph newColumn)		color: self defaultBackgroundColor;		addMorph: sm;		yourself.! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:59'!createWindow	| list heading font text buttonBar |	font _ (TextStyle named: #DefaultFixedTextStyle)		ifNotNilDo: [ :ts | ts fontArray first].	buttonBar _ self createButtonBar.	self addMorph: buttonBar		fullFrame: (LayoutFrame fractions: (0@0 corner: 1.0@0.0) offsets: (0@0 corner: 0@44)).	self minimumExtent: (buttonBar fullBounds width + 20) @ 230.	self extent: self minimumExtent.	heading _ self createListHeadingUsingFont: font.	self addMorph: heading		fullFrame: (LayoutFrame fractions: (0@0 corner: 1.0@0.0) offsets: (0@44 corner: 0@60)).	(list _ PluggableListMorph new)		on: self list: #memberList		selected: #memberIndex changeSelected: #memberIndex:		menu: #memberMenu:shifted: keystroke: nil.	list color: self defaultBackgroundColor.	font ifNotNil: [list font: font].	self addMorph: list		fullFrame: (LayoutFrame fractions: (0@0 corner: 1.0@0.8) offsets: (0@60 corner: 0@0)).	text _ PluggableTextMorph on: self 			text: #contents accept: nil			readSelection: nil menu: nil.	self addMorph: text		frame: (0@0.8 corner: 1.0@1.0).	text lock.	self setLabel: 'Ned''s Zip Viewer'! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:16'!initialize	super initialize.	memberIndex _ 0.	viewAllContents _ false.! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:29'!stream: aStream	archive _ ZipArchive new readFrom: aStream.	self setLabel: aStream fullName.	self memberIndex:  0.	self changed: #memberList! !!ArchiveViewer methodsFor: 'initialization' stamp: 'nk 6/10/2004 08:15'!windowIsClosing	archive ifNotNil: [ archive close ].! !SMLoader removeSelector: #paneColor!ArchiveViewer removeSelector: #backgroundColor!ArchiveViewer removeSelector: #defaultBackgroundColor!ArchiveViewer removeSelector: #paneColor!ArchiveViewer removeSelector: #paneColorToUse!!Object class reorganize!('instance creation' categoryForUniclasses chooseUniqueClassName initialInstance initializedInstance instanceOfUniqueClass instanceOfUniqueClassWithInstVarString:andClassInstVarString: isUniClass newFrom: newUniqueClassInstVars:classInstVars: newUserInstance readCarefullyFrom: readFrom:)('documentation' howToModifyPrimitives whatIsAPrimitive)('private' releaseExternalSettings)('objects from disk' createFrom:size:version:)('plugin generation' ccg:emitLoadFor:from:on: ccg:generateCoerceToOopFrom:on: ccg:generateCoerceToValueFrom:on: ccg:prolog:expr:index: ccgCanConvertFrom: ccgDeclareCForVar:)('class initialization' flushDependents flushEvents initialize initializeDependentsFields reInitializeDependentsFields)('window color' windowColorSpecification)('file list services' fileReaderServicesForDirectory: fileReaderServicesForFile:suffix:)!