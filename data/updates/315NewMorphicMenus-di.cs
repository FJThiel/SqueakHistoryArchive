'From Squeak 2.2beta of Sept 16, 1998 on 23 September 1998 at 2:16:37 am'!"Change Set:		NewMorphicMenus-diDate:			22 September 1998Author:			Dan IngallsAn attempt to make all the Morphic screen menus parallel those of MVC.Fixed a bug in DictionaryInspectors triggered during stepping.Fixed DictionaryInspector menu in Morphic to give references.Fixed RealEstateAgent so it uses all of display for Morphic."!!HandMorph reorganize!('initialization' initForEvents initialize)('classification' isHandMorph)('accessing' argument colorForInsets lastEvent setArgument: showTemporaryCursor: showTemporaryCursor:hotSpotOffset: targetOffset userInitials userInitials:)('geometry' changed fullBounds invalidRect: position position:)('drawing' drawOn: fullDrawOn: hasChanged needsToBeDrawn nonCachingFullDrawOn: restoreSavedPatchOn: savePatchFrom: shadowOffset trailMorph updateCacheCanvasDepth:)('event dispatching' addMouseOverMorph: gridPointRaw handleDragOver: handleEvent: handleMouseDown: handleMouseMove: handleMouseOver: handleMouseUp: keyboardFocus mouseOverList: newKeyboardFocus: newMouseFocus: processEvents recipientForMouseDown: transformEvent: updateMouseDownTransform)('double click support' checkForDoubleClick: resetClickState waitForClicksOrDrag:event:)('grabbing/dropping' attachMorph: dropMorphsEvent: dropTargetFor:event: grabMorphFromMenu: grabMorph:)('event reporting' startReportingEventsTo: stopReportingEventsTo:)('world menu' buildWorldMenu changesDo debugDo helpDo newMorph openWindow remoteDo scriptingDo windowsDo)('world menu commands' argumentOrNil beThisWorldsModel browseChangedMessages browseMorphClass browsePlayerClass buildDebugHandleMenuFor: buildMorphHandleMenuFor: buildMorphMenuFor: callTempCommand changeBackgroundColor changeColor changeColorTarget:selector: changeVariableType chooseActorName chooseColor chooseMorphInCategory: chooseMorphicCategory chooseNewCostumeForArgument chooseNewFormForSketchMorph chooseTargetSubmorphOf:caption: classOfPasteBuffer closeUnchangedWindows collapseAll copyToPasteBuffer detachableScriptingSpace dismissMorph drawingClass duplicateMorph embedMorph exitWorld expandAll findDirtyBrowsers findDirtyWindows findWindow goBehind grabDrawingFromScreen grabModel grabMorph importImageFromDisk inspectArgument inspectArgumentInMorphic inspectArgumentsPlayerInMorphic inspectMorph inspectMorphInMorphic inspectPlayer inspectWorldModel invokeMenu:event: invokeMetaMenu: jumpToProject lockMorph makeAliasForArgument makeNewDrawing maybeDuplicateMorph menuTargetOffset nameMorph newMorphOfClass:event: newVariable objectToPaste openBrowser openChangeSorter: openChangesLog openConstructionProject openEmail openFileList openIRC openMorphicProject openMVCProject openRecentChanges openViewerForArgument openWebBrowser openWorkspace operateOnSubmorph:event: pasteMorph placeArgumentIn potentialEmbeddingTargets projectThumbnail quitSession resizeMorph saveAndQuit saveAs saveAsPrototype saveOnFile savePictureOfWorld saveSession saveWorldInFile selectEmbedTargetMorph: selectSubmorphToOperateOn:sending:event: setDisplayDepth setGridding showActions startMessageTally subclassMorph submorphNameFor: unlockContents unlockOneSubpart updateFromServer writeInitMethodForModel)('special gestures' specialDrag: specialGesture:)('halos' addHalo chooseHaloSubmorphOf:caption: invokeMetaMenuFor: mouseOverHalosOff mouseOverHalosOn moveHaloToSubmorphFrom: popUpHaloFromClick: popUpHalo:)('remote morphic' cleanupDeadConnections connectRemoteUser disconnectAllRemoteUsers disconnectRemoteUser readyToTransmit reportLocalAddress startTransmittingEventsTo: stopTransmittingEventsTo: transmitEvent:)('from EToyHand' clearPaletteArea endDisplaySuppression flushViewerCache formerOwner formerPosition inspectMorphicModel makeNewDrawingInBounds:pasteUpMorph: makeNewPlayerInstance rejectDropMorph:event: roundUpStrayObjects showHiders startDisplaySuppression suppressDisplay toggleColoredTiles unlockWorldContents)!!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 01:36'!buildWorldMenu	"Build the meta menu for the world."	| menu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'previous project' target: owner action: #goBack.	menu add: 'jump to project...' action: #jumpToProject.	menu add: 'restore display' target: World action: #fullRepaintNeeded.	menu addLine.	menu add: 'new morph...' action: #newMorph.	menu add: 'scripting...' action: #scriptingDo.	menu add: 'remote...' action: #remoteDo.	menu add: 'debug...' action: #debugDo.	menu addLine.	menu add: 'open window...' action: #openWindow.	menu add: 'windows...' action: #windowsDo.	menu add: 'changes...' action: #changesDo.	menu add: 'help...' action: #helpDo.	menu add: 'do...' target: Utilities action: #offerCommonRequests.	menu addLine.	menu add: 'save' action: #saveSession.	menu add: 'save as...' action: #saveAs.	menu add: 'save and quit' action: #saveAndQuit.	menu add: 'quit' action: #quitSession.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 00:54'!changesDo	"Build the changes menu for the world."	| menu |	menu _ (MenuMorph entitled: 'Change management') defaultTarget: self.	menu addStayUpItem.	menu add: 'file out changes' target: ScreenController new action: #fileOutChanges.	menu add: 'create new change set...' target: ChangeSorter action: #newChangeSet.	menu add: 'browse changed methods' action: #browseChangedMessages.	menu addLine.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu addLine.	menu add: 'browse recent submissions' action: #openRecentChanges.	menu add: 'recent change log' action: #openChangesLog.	menu addLine.	menu add: 'save world as morph file' action: #saveWorldInFile.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 01:09'!debugDo	"Build the scripting menu for the world."	| menu |	menu _ (MenuMorph entitled: 'Debugging...') defaultTarget: self.	menu addStayUpItem.	menu add: 'inspect world' target: owner action: #inspect.	menu add: 'inspect model' action: #inspectWorldModel.	menu add: 'start MessageTally' action: #startMessageTally.	menu add: 'call #tempCommand' action: #callTempCommand.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 02:08'!helpDo	"Build the help menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'General help') defaultTarget: self.	menu addStayUpItem.	menu add: 'edit preferences...' target: Preferences action: #openPreferencesInspector.	menu add: 'command-key help' target: Utilities action: #openCommandKeyHelp.	menu add: 'font size summary' target: Utilities action: #fontSizeSummary.	menu add: 'useful expressions' target: Utilities action: #openStandardWorkspace.	menu add: 'view image imports' target: Smalltalk action: #viewImageImports.	menu addLine.	menu add: 'full screen on' target: screenCtrl action: #fullScreenOn.	menu add: 'full screen off' target: screenCtrl action: #fullScreenOff.	menu add: 'set display depth...' action: #setDisplayDepth.	menu add: 'set desktop color...' action: #changeBackgroundColor.	menu add: 'use texture background' target: self world action: #setStandardTexture.	gridOn		ifTrue: [menu add: 'turn gridding off' action: #setGridding]		ifFalse: [menu add: 'turn gridding on' action: #setGridding].	menu add: ((Preferences valueOfFlag: #disableSounds)							ifTrue: ['turn sound on']							ifFalse: ['turn sound off'])		target: screenCtrl action: #soundOnOrOff.	menu addLine.	menu add: 'update code from server' action: #updateFromServer.	menu add: 'about this system' target: screenCtrl action: #aboutThisSystem.	menu add: 'set author initials...' target: screenCtrl action: #setAuthorInitials.	menu add: 'vm statistics' target: screenCtrl action: #vmStatistics.	menu add: 'space left' target: screenCtrl action: #garbageCollect.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 00:32'!newMorph	| menu subMenu catDict shortCat class |	menu _ (MenuMorph entitled: 'Add a new morph') defaultTarget: self.	menu addStayUpItem.	menu add: 'from paste buffer' action: #pasteMorph.	menu add: 'grab patch from screen' action: #grabDrawingFromScreen.	menu add: 'make new drawing' target: self presenter associatedMorph action: #makeNewDrawingWithin.	menu addLine.	catDict _ Dictionary new.	SystemOrganization categories do:		[:cat |		((cat beginsWith: 'Morphic-')				and: [(#('Morphic-Menus' 'Morphic-Support') includes: cat) not])		ifTrue:			[shortCat _ cat copyFrom: 'Morphic-' size+1 to: cat size.			(SystemOrganization listAtCategoryNamed: cat) do:				[:cName | class _ Smalltalk at: cName.				((class inheritsFrom: Morph)					and: [class includeInNewMorphMenu])					ifTrue:					[(catDict includesKey: shortCat) 					ifTrue: [(catDict at: shortCat) addLast: class]					ifFalse: [catDict at: shortCat put: (OrderedCollection with: class)]]]]].	catDict keys asSortedCollection do:		[:categ |		subMenu _ MenuMorph new.		((catDict at: categ) asSortedCollection: [:c1 :c2 | c1 name < c2 name]) do:			[:cl | subMenu add: cl name					target: self					selector: #newMorphOfClass:event:					argument: cl].		menu add: categ subMenu: subMenu].	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 02:15'!openWindow	"Build the open window menu for the world."	| menu |	menu _ (MenuMorph entitled: 'Open a new window') defaultTarget: self.	menu addStayUpItem.	menu add: 'browser' action: #openBrowser.	menu add: 'workspace' action: #openWorkspace.	menu add: 'file list' action: #openFileList.	menu add: 'transcript' target: Transcript action: #open.	menu add: 'selector finder' target: ScreenController new action: #openSelectorBrowser.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu addLine.	menu add: 'email reader' action: #openEmail.	menu add: 'web browser' action: #openWebBrowser.	menu add: 'IRC chat' action: #openIRC.	menu addLine.	menu add: 'project (mvc)' action: #openMVCProject.	menu add: 'project (morphic)' action: #openMorphicProject.	menu add: 'project (construction)' action: #openConstructionProject.	menu add: 'project link...' action: #projectThumbnail.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 00:48'!remoteDo	"Build the Telemorphic menu for the world."	| menu |	menu _ (MenuMorph entitled: 'Telemorphic') defaultTarget: self.	menu addStayUpItem.	menu add: 'local host address' action: #reportLocalAddress.	menu add: 'connect remote user' action: #connectRemoteUser.	menu add: 'disconnect remote user' action: #disconnectRemoteUser.	menu add: 'disconnect all remote users' action: #disconnectAllRemoteUsers.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 01:02'!scriptingDo	"Build the scripting menu for the world."	| menu |	menu _ (MenuMorph entitled: 'scripting...') defaultTarget: self.	menu addStayUpItem.	menu add: 'detachable scripting space' target: self action: #detachableScriptingSpace.	menu add: 'default parts bin' target: self presenter action: #createStandardPartsBin.	menu add: 'custom parts bin' target: self presenter action: #launchMyPartsBin.	menu add: 'control panel' target: self presenter action: #createControlPanel.	menu add: 'add stop, step, and go buttons' target: self presenter action: #addStopStepGoButtons.	menu addLine.	menu add: 'flush viewer cache' action: #flushViewerCache.	menu add: 'unlock contents' action: #unlockWorldContents.	menu add: 'unhide hidden objects' action: #showHiders.	menu add: 'round up stray objects' action: #roundUpStrayObjects.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/23/1998 01:35'!windowsDo	"Build the windows menu for the world."	| menu |	menu _ (MenuMorph entitled: 'Window management') defaultTarget: self.	menu addStayUpItem.	menu add: 'find window' action: #findWindow.	menu add: 'find changed browsers...' action: #findDirtyBrowsers.	menu add: 'find changed windows...' action: #findDirtyWindows.	menu addLine.	menu add: 'collapse all windows' action: #collapseAll.	menu add: 'expand all windows' action: #expandAll.	menu add: 'close unchanged windows' action: #closeUnchangedWindows.	menu addLine.	menu add: ((Preferences valueOfFlag: #reverseWindowStagger)							ifTrue: ['tile windows']							ifFalse: ['stagger windows'])		target: ScreenController new action: #changeWindowPolicy.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/23/1998 01:33'!closeUnchangedWindows	"Present a menu of window titles for all windows with changes,	and activate the one that gets chosen."	(SelectionMenu confirm:'Do you really want to close all windowsexcept those with unaccepted edits?')		ifFalse: [^ self].	(SystemWindow windowsIn: self world satisfying: [:w | w model canDiscardEdits])		do: [:w | w delete]! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/23/1998 01:29'!findDirtyBrowsers	"Present a menu of window titles for browsers with changes,	and activate the one that gets chosen."	| menu |	menu _ MenuMorph new.	(SystemWindow windowsIn: self world		satisfying: [:w | (w model isKindOf: Browser) and: [w model canDiscardEdits not]])		do: [:w | menu add: w label target: w action: #activate].	self invokeMenu: menu event: lastEvent! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/23/1998 01:30'!findDirtyWindows	"Present a menu of window titles for all windows with changes,	and activate the one that gets chosen."	| menu |	menu _ MenuMorph new.	(SystemWindow windowsIn: self world		satisfying: [:w | w model canDiscardEdits not])		do: [:w | menu add: w label target: w action: #activate].	self invokeMenu: menu event: lastEvent! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/22/1998 22:07'!jumpToProject	(Project buildJumpToMenu: (MenuMorph new defaultTarget: Project))		popUpAt: self position forHand: self! !!Inspector methodsFor: 'accessing' stamp: 'di 9/22/1998 21:28'!step	"Continuously update the value of the selected item"	| newText |	contents ifNotNil: [ contents size > 1000 ifTrue: [ 		"too much text--forget the automatic updating"		^self  ] ].	newText _ self contentsIsString		ifTrue: [self selection]		ifFalse: [self selection printString].	newText = contents ifFalse:		[contents _ newText.		self changed: #contents]! !!Inspector methodsFor: 'selecting' stamp: 'di 9/22/1998 21:24'!contentsIsString	"Hacked so contents empty when deselected and = long printString when item 2"	^ (selectionIndex = 2) | (selectionIndex = 0)! !!Inspector methodsFor: 'selecting' stamp: 'di 9/22/1998 21:29'!toggleIndex: anInteger	"The receiver has a list of variables of its inspected object. One of these 	is selected. If anInteger is the index of this variable, then deselect it. 	Otherwise, make the variable whose index is anInteger be the selected 	item."	selectionIndex = anInteger		ifTrue: 			["same index, turn off selection"			selectionIndex _ 0.			contents _ '']		ifFalse:			["different index, new selection"			selectionIndex _ anInteger.			self contentsIsString				ifTrue: [contents _ self selection]				ifFalse: [contents _ self selection printString]].	self changed: #selection.	self changed: #contents.	self changed: #selectionIndex.! !!DictionaryInspector methodsFor: 'selecting' stamp: 'di 9/22/1998 21:25'!contentsIsString	"Hacked so contents empty when deselected"	^ (selectionIndex = 0)! !!Inspector class methodsFor: 'instance creation' stamp: 'di 9/22/1998 21:43'!openAsMorphOn: anObject	"(Inspector openAsMorphOn: SystemOrganization) openInMVC"	| window inspector |	inspector _ self inspect: anObject.	window _ (SystemWindow labelled: anObject defaultLabelForInspector)				model: inspector.	window addMorph: (PluggableListMorph on: inspector list: #fieldList				selected: #selectionIndex changeSelected: #toggleIndex:				menu: ((inspector isMemberOf: DictionaryInspector)						ifTrue: [#dictionaryMenu:]						ifFalse: [#fieldListMenu:])				keystroke: #inspectorKey:from:)		frame: (0@0 corner: 0.3@0.7).	window addMorph: (PluggableTextMorph on: inspector text: #contents accept: #accept:				readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0.3@0 corner: 1@0.7).	window addMorph: ((PluggableTextMorph on: inspector text: #trash accept: #trash:				readSelection: #contentsSelection menu: #codePaneMenu:shifted:)					askBeforeDiscardingEdits: false)		frame: (0@0.7 corner: 1@1).	window position: 16@0.  "Room for scroll bar."	^ window! !!MenuMorph methodsFor: 'construction' stamp: 'di 9/22/1998 20:29'!addStayUpItem	"Append a menu item that can be used to toggle this menu's persistent."	self add: 'keep this menu up'		target: self		selector: #toggleStayUp:		argumentList: EmptyArray.	self addLine! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 9/22/1998 20:59'!initialFrameFor: aView	"Find a plausible initial screen area for the supplied view, which should be a StandardSystemView, taking into account the 'reverseWindowStagger' Preference, the size needed, and other windows currently on the screen.  5/22/96 sw"	| allOrigins screenRight screenBottom initialExtent putativeOrigin putativeFrame allowedArea staggerOrigin |	Preferences reverseWindowStagger ifTrue:		[^ self strictlyStaggeredInitialFrameFor: aView].	allowedArea _ Display usableArea.	screenRight _ allowedArea right.	screenBottom _ allowedArea bottom.	initialExtent _ aView initialExtent.	allOrigins _ ScheduledControllers windowOriginsInUse.	self standardPositions do:  "First see if one of the standard positions is free"		[:aPosition | (allOrigins includes: aPosition)			ifFalse:				[^ (aPosition extent: initialExtent) squishedWithin: allowedArea]].	staggerOrigin _ self standardPositions first.  "Fallback: try offsetting from top left"	putativeOrigin _ staggerOrigin.	[putativeOrigin _ putativeOrigin + StaggerOffset.	putativeFrame _ putativeOrigin extent: initialExtent.	(putativeFrame bottom < screenBottom) and:					[putativeFrame right < screenRight]]				whileTrue:					[(allOrigins includes: putativeOrigin)						ifFalse:							[^ (putativeOrigin extent: initialExtent) squishedWithin: allowedArea]].	^ (self scrollBarSetback @ self screenTopSetback extent: initialExtent) squishedWithin: allowedArea! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 9/22/1998 21:43'!initialize	"Initialize the class variables in the receiver.  5/22/96 sw"	"RealEstateAgent initialize"	StaggerOffset _ 6 @ 20.	ReverseStaggerOffset _ -6 @ 20.	StaggerOrigin _ 200 @ 30.! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 9/22/1998 20:58'!screenTopSetback	Smalltalk isMorphic		ifTrue: [^ 0]		ifFalse: [^ 18]! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 9/22/1998 20:58'!scrollBarSetback	Smalltalk isMorphic		ifTrue: [^ 16-3]  "width = 16; inset from border by 3"		ifFalse: [^ 24]! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 9/22/1998 21:00'!standardPositions	"Return a list of standard window positions -- this may have one, two, or four of them, depending on the size and shape of the display screen.  "	| anArea aList  midX midY |	anArea _ Display usableArea.	midX _ self scrollBarSetback +   ((anArea width - self scrollBarSetback)  // 2).	midY _ self screenTopSetback + ((anArea height - self screenTopSetback) // 2).	aList _ OrderedCollection with: (self scrollBarSetback @ self screenTopSetback).	self windowColumnsDesired > 1		ifTrue:			[aList add: (midX @ self screenTopSetback)].	self windowRowsDesired > 1		ifTrue:			[aList add: (self scrollBarSetback @ (midY+self screenTopSetback)).			self windowColumnsDesired > 1 ifTrue:				[aList add: (midX @ (midY+self screenTopSetback))]].	^ aList! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 9/22/1998 21:01'!standardWindowExtent	"Answer the standard default extent for new windows.  "	| effectiveExtent width strips height grid allowedArea maxLevel |	effectiveExtent _ Display usableArea extent					- (self scrollBarSetback @ self screenTopSetback).	Preferences reverseWindowStagger ifTrue:		["NOTE: following copied from strictlyStaggeredInitialFrameFor:"		allowedArea _ self scrollBarSetback @ self screenTopSetback						corner: Display usableArea bottomRight.		"Number to be staggered at each corner (less on small screens)"		maxLevel _ allowedArea area > 300000 ifTrue: [3] ifFalse: [2].		"Amount by which to stagger (less on small screens)"		grid _ allowedArea area > 500000 ifTrue: [40] ifFalse: [20].		^ (allowedArea extent - (grid*(maxLevel+1*2) + (grid//2))) min: 600@400].	width _ (strips _ self windowColumnsDesired) > 1		ifTrue:			[effectiveExtent x // strips]		ifFalse:			[(3 * effectiveExtent x) // 4].	height _ (strips _ self windowRowsDesired) > 1		ifTrue:			[effectiveExtent y // strips]		ifFalse:			[(3 * effectiveExtent y) //4].	^ width @ height"RealEstateAgent standardWindowExtent"! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 9/22/1998 21:01'!strictlyStaggeredInitialFrameFor: aStandardSystemView	"This method implements a staggered window placement policy that I like.	Basically it provides for up to 4 windows, staggered from each of the 4 corners.	The windows are staggered so that there will always be a corner visible.	"	| allowedArea grid initialFrame otherFrames cornerSel corner delta putativeCorner free maxLevel |	allowedArea _ self scrollBarSetback @ self screenTopSetback					corner: Display usableArea bottomRight.	"Number to be staggered at each corner (less on small screens)"	maxLevel _ allowedArea area > 300000 ifTrue: [3] ifFalse: [2].	"Amount by which to stagger (less on small screens)"	grid _ allowedArea area > 500000 ifTrue: [40] ifFalse: [20].	initialFrame _ 0@0 extent: ((aStandardSystemView initialExtent							"min: (allowedArea extent - (grid*(maxLevel+1*2) + (grid//2))))							min: 600@400")).	otherFrames _ Smalltalk isMorphic		ifTrue: [(SystemWindow windowsIn: World satisfying: [:w | w isCollapsed not])					collect: [:w | w bounds]]		ifFalse: [ScheduledControllers scheduledWindowControllers				select: [:aController | aController view ~~ nil]				thenCollect: [:aController | aController view isCollapsed								ifTrue: [aController view expandedFrame]								ifFalse: [aController view displayBox]]].	0 to: maxLevel do:		[:level | 		1 to: 4 do:			[:ci | cornerSel _ #(topLeft topRight bottomRight bottomLeft) at: ci.			corner _ allowedArea perform: cornerSel.			"The extra grid//2 in delta helps to keep title tabs distinct"			delta _ (maxLevel-level*grid+(grid//2)) @ (level*grid).			1 to: ci-1 do: [:i | delta _ delta rotateBy: #right centerAt: 0@0]. "slow way"			putativeCorner _ corner + delta.			free _ true.			otherFrames do:				[:w |				free _ free & ((w perform: cornerSel) ~= putativeCorner)].			free ifTrue:				[^ (initialFrame align: (initialFrame perform: cornerSel)								with: putativeCorner)						 squishedWithin: allowedArea]]].	"If all else fails..."	^ (self scrollBarSetback @ self screenTopSetback extent: initialFrame extent)		squishedWithin: allowedArea! !!ScreenController methodsFor: 'menu messages' stamp: 'di 9/23/1998 02:06'!fontSizeSummary	Utilities fontSizeSummary! !!ScreenController methodsFor: 'nested menus' stamp: 'di 9/23/1998 02:07'!helpMenu 	"Answer the help menu to be put up as a screen submenu"	^ SelectionMenu labelList:		#(	'keep this menu up'			'edit preferences...'			'command-key help'			'font size summary'			'useful expressions'			'view image imports'			'full screen on'			'full screen off'			'set display depth...'			'set desktop color...' ) , 			(Array with: ((Preferences valueOfFlag: #disableSounds)							ifTrue: ['turn sound on']							ifFalse: ['turn sound off'])) ,		#(	'update code from server'			'about this system'			'set author initials...'			'vm statistics'			'space left')		lines: #(1 6 11)		selections: #(durableHelpMenueditPreferences  openCommandKeyHelp fontSizeSummary openStandardWorkspace viewImageImportsfullScreenOn fullScreenOff setDisplayDepth setDesktopColor soundOnOrOffabsorbUpdatesFromServer aboutThisSystem setAuthorInitials vmStatistics garbageCollect)"ScreenController new helpMenu startUp"! !!ScreenController methodsFor: 'nested menus' stamp: 'di 9/22/1998 22:46'!projectScreenMenu	"Answer the project screen menu."	^ SelectionMenu labelList:		#(	'keep this menu up'			'previous project'			'jump to project...'			'restore display'			'open window...'			'windows...'			'changes...'			'help...'			'do...'			'save'			'save as...'			'save and quit'			'quit')		lines: #(1 4 9)		selections: #(durableScreenMenureturnToPreviousProject jumpToProject restoreDisplaypresentOpenMenu presentWindowMenu presentChangesMenu presentHelpMenu commonRequestssnapshot saveAs snapshotAndQuit quit )"ScreenController new projectScreenMenu startUp"! !!Utilities class methodsFor: 'support windows' stamp: 'di 9/23/1998 01:53'!openCommandKeyHelp	"Open a window giving command key help."	"Utilities openCommandKeyHelp"	(StringHolder new contents: self commandKeyMappings)		openLabel: 'Command Key Actions'! !!Utilities class methodsFor: 'support windows' stamp: 'di 9/23/1998 02:02'!openStandardWorkspace 	"Open up a throwaway workspace with useful expressions in it.  1/22/96 sw"	"Utilities openStandardWorkspace"	(StringHolder new contents: self standardWorkspaceContents)		openLabel: 'Useful Expressions ', Date today printString! !!Utilities class methodsFor: 'summer97 additions' stamp: 'di 9/23/1998 02:03'!fontSizeSummary	"Utilities fontSizeSummary"	| aStream aList |	aStream _ ReadWriteStream on: ''.	aList _ Utilities knownTextStyles.	aList do: [:aStyleName |		aStream nextPutAll:			aStyleName, '  ',			(Utilities fontSizesFor: aStyleName) asArray storeString.		aStream cr].	(StringHolder new contents: aStream contents)		openLabel: 'Font styles and sizes'! !Object subclass: #RealEstateAgent	instanceVariableNames: ''	classVariableNames: 'ReverseStaggerOffset StaggerOffset StaggerOrigin StandardWindowOrigins '	poolDictionaries: ''	category: 'Interface-Support'!HandMorph removeSelector: #inspectWorld!HandMorph removeSelector: #openSelectorBrowser!HandMorph removeSelector: #findDirtyWindow!HandMorph removeSelector: #fullScreen!HandMorph removeSelector: #openTranscript!HandMorph removeSelector: #restoreDisplay!HandMorph removeSelector: #showSpaceLeft!HandMorph removeSelector: #findDirtyBrowser!HandMorph removeSelector: #readMorphFile!DictionaryInspector removeSelector: #toggleIndex:!RealEstateAgent initialize!