'From Squeak 2.4c of May 10, 1999 on 6 July 1999 at 10:18:37 am'!"Change Set:		newEtoyEnv-swDate:			6 July 1999Author:			Scott WallaceRevised etoy UI as per Alan's 6/99 suggestions:*  If preference #viewersInFlaps is true, then viewers for objects appear in flaps adhering to the right edge of the screen, with tabs derived from the object's own appearance.*  If preference #oneViewerFlapAtATime is true, then when you open up one viewer flap, any currently-open viewer flap is closed, so that you see at most one at a time.*  #automaticViewing option available in world.*  Adds a protocol for determining whether a given morph is a likely candidate for automatic viewing (windows and menus and viewers themselves are good examples of things that are NOT).*  Some fresh heuristics for mouse-over halos.  Special rules apply for the World -- if it has mouse-over-halos turned on, they only pop up over objects that reside on the world at large and which are either SketchMorphs or have players.  For smaller-than-the-world playfields, the existing rules prevail."!FlapTab subclass: #ViewerFlapTab	instanceVariableNames: 'scriptedPlayer '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Palettes'!!Morph methodsFor: 'halos and balloon help' stamp: 'sw 7/3/1999 20:05'!isLikelyRecipientForMouseOverHalos	^ self player ~~ nil! !!Morph methodsFor: 'e-toy support' stamp: 'sw 6/30/1999 20:29'!isCandidateForAutomaticViewing	^ true! !!HandleMorph methodsFor: 'events' stamp: 'sw 6/30/1999 20:40'!isCandidateForAutomaticViewing	^ false! !!MenuMorph methodsFor: 'control' stamp: 'sw 6/30/1999 20:30'!isCandidateForAutomaticViewing	^ false! !!PaintBoxMorph methodsFor: 'other' stamp: 'sw 6/30/1999 20:33'!isCandidateForAutomaticViewing	^ false! !!PaintInvokingMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/30/1999 20:31'!isCandidateForAutomaticViewing	^ self isPartsDonor not! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 6/30/1999 13:13'!acceptDroppingMorph: aMorph event: evt	| slotSpecs aValue incomingName nameObtained |	self isWorldMorph		ifTrue:			["Add the given morph to this world and start stepping it if it wants to be."			self addMorphFront: aMorph.			(aMorph fullBounds intersects: (0@0 extent: self viewBox extent)) ifFalse:				[self beep.  aMorph position: self bounds center]]		ifFalse:			[self privateAddMorph: aMorph atIndex: (self insertionIndexFor: aMorph).			self changed.			self layoutChanged].	incomingName _ aMorph knownName.	aMorph submorphsDo: [:m | (m isKindOf: HaloMorph) ifTrue: [m delete]].	self autoLineLayout ifTrue: [self fixLayout].	self world startSteppingSubmorphsOf: aMorph.	self presenter morph: aMorph droppedIntoPasteUpMorph: self.	slotSpecs _ aMorph slotSpecifications.  "A Fabrik component, for example.  Just a hook at this time"	slotSpecs size > 0 ifTrue:		[self assuredPlayer.		slotSpecs do:			[:tuple |				aValue _ aMorph initialValueFor: tuple first.				nameObtained _ self player addSlotNamedLike: tuple first withValue: aValue.				nameObtained ~= incomingName ifTrue:					[aMorph setNameTo: nameObtained]].		self player updateAllViewers]! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 7/6/1999 08:39'!automaticViewing	^ self hasProperty: #automaticViewing! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 7/6/1999 08:36'!playfieldOptionsMenu	| aMenu isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'save on file...' action: #saveOnFile.	aMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	(self valueOfProperty: #classAndMethod) ifNotNil:		[aMenu add: 'broadcast as documentation' action: #saveDocPane].	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'].	aMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing.	aMenu balloonTextForLastItem:  'governs whether, when an object is touched inside me, a viewer should automatically be launched for it.'.	isWorld ifFalse:		[aMenu add: 'behave like a Holder' action: #becomeLikeAHolder.		aMenu balloonTextForLastItem: 'Set properties to make this object nicely set up to hold frames of a scripted animation.'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	presenter ifNil:		[aMenu add: 'make detachable' action: #makeDetachable.		aMenu balloonTextForLastItem: 'Allow this area to be separately governed by its own controls.'].	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'playfield options...'.	^ aMenu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 7/3/1999 20:15'!wantsHaloFor: aSubMorph	^ (self visible and: [(isPartsBin ~~ true and: [openToDragNDrop ~~ false]) and:		[self wantsMouseOverHalos]]) and:			[self isWorldMorph not or: [aSubMorph renderedMorph isLikelyRecipientForMouseOverHalos]]! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 6/25/1999 22:44'!hideViewerFlapsOtherThanFor: aPlayer	self flapTabs do:		[:aTab | (aTab isKindOf: ViewerFlapTab)			ifTrue:				[aTab scriptedPlayer == aPlayer					ifFalse:						[aTab hideFlap]]]! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 7/1/1999 11:55'!viewerFlapTabFor: aMorph	"Open up a Viewer on aMorph in its own flap, creating it if necessary"	| bottomMost aPlayer aFlapTab |	bottomMost _ 0.	aPlayer _ aMorph assuredPlayer.	self flapTabs do:		[:aTab | (aTab isKindOf: ViewerFlapTab)			ifTrue:				[bottomMost _ aTab bottom max: bottomMost.				aTab scriptedPlayer == aPlayer					ifTrue:						[^ aTab]]].	"Not found; make a new one"	aFlapTab _ (Utilities newFlapTitled: aMorph externalName onEdge: #right) as: ViewerFlapTab.	aFlapTab initializeFor: aPlayer topAt: bottomMost + 2.	aFlapTab referent color: (Color green muchLighter alpha: 0.5).	self addMorphFront: aFlapTab.	aFlapTab adaptToWorld: self.	^ aFlapTab! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 6/25/1999 21:35'!paintingFlapTab	"If the receiver has a flap which has a paintbox, return it, else return nil"	self flapTabs do:		[:aTab | aTab referent submorphsDo:			[:aMorph | (aMorph isKindOf: PaintBoxMorph) ifTrue: [^ aTab]]].	^ nil! !!Presenter methodsFor: 'viewer' stamp: 'sw 7/6/1999 08:40'!viewMorph: aMorph	| aPlayer aViewer aPalette aRect aPoint nominalHeight aFlapTab |	Sensor leftShiftDown ifFalse:		[((aPalette _ aMorph standardPalette) ~~ nil and: [aPalette isInWorld])			ifTrue:	[^ aPalette viewMorph: aMorph]].	aPlayer _ aMorph assuredPlayer.	associatedMorph addMorph: (aViewer _ self nascentPartsViewer).	(Preferences viewersInFlaps) ifTrue:		[aViewer initializeFor: aPlayer barHeight: 0 includeDismissButton: false.		aViewer enforceTileColorPolicy.		associatedMorph world hideViewerFlapsOtherThanFor: aPlayer.		aFlapTab _ associatedMorph world viewerFlapTabFor: aMorph.		 aFlapTab referent removeAllMorphs; addMorph: aViewer beSticky.		aViewer visible: true.		aFlapTab applyThickness: aViewer width + 25.		aFlapTab showFlap. 		aViewer position: aFlapTab referent position.		^ associatedMorph world startSteppingSubmorphsOf: aViewer].			aViewer initializeFor: aPlayer barHeight: 6.	aViewer enforceTileColorPolicy.	Preferences automaticViewerPlacement ifTrue:		[aPoint _ aMorph bounds right @ 			(aMorph center y - ((nominalHeight _ aViewer initialHeightToAllow) // 2)).		aRect _ (aPoint extent: (aViewer width @ nominalHeight)) translatedToBeWithin: associatedMorph world bounds.		aViewer position: aRect topLeft.		aViewer visible: true.		associatedMorph world startSteppingSubmorphsOf: aViewer.		"it's already in the world, somewhat coincidentally"		^ self].	aMorph primaryHand attachMorph: (aViewer visible: true)! !!Presenter methodsFor: 'misc' stamp: 'sw 6/30/1999 20:25'!drawingJustCompleted: aSketchMorph	| aPaintBox aPaintTab aWorld |	(aPaintTab _ (aWorld _ associatedMorph world) paintingFlapTab)		ifNotNil:			[aPaintTab hideFlap]		ifNil:			[(aPaintBox _ aWorld paintBox) ifNotNil:				[aPaintBox delete]].	(aWorld hasProperty: #automaticFlapViewing)		ifTrue:			[^ aWorld presenter viewMorph: aSketchMorph].	(aSketchMorph pasteUpMorph hasProperty: #automaticViewing)		ifTrue:			[self viewMorph: aSketchMorph]! !!Presenter methodsFor: 'misc' stamp: 'sw 6/30/1999 20:31'!morph: aMorph droppedIntoPasteUpMorph: aPasteUpMorph	aPasteUpMorph automaticViewing ifTrue:		[aMorph isCandidateForAutomaticViewing ifTrue:			[self viewMorph: aMorph]]! !!SketchMorph methodsFor: 'menu' stamp: 'sw 7/1/1999 21:55'!editDrawingIn: aPasteUpMorph forBackground: forBackground	| w oldRotation bnds sketchEditor pal aPaintTab aWorld aPaintBox |	(self world findA: SketchEditorMorph) ifNotNil:		[^ self inform: 'Sorry, you can only paint oneobject at a time'].	w _ aPasteUpMorph world.	w stopRunningAll; abandonAllHalos.	w displayWorld.	oldRotation _ rotationDegrees.	forBackground		ifTrue:			[bnds _ aPasteUpMorph boundsInWorld]		ifFalse:			[bnds _ (self boundsInWorld expandBy: (60 @ 60)) intersect: self world bounds.			bnds _ (aPasteUpMorph paintingBoundsAround: bnds center) merge: bnds].	sketchEditor _ SketchEditorMorph new.	forBackground ifTrue: [sketchEditor setProperty: #background toValue: true].	w addMorphFront: sketchEditor.	sketchEditor initializeFor: self inBounds: bnds pasteUpMorph: aPasteUpMorph.		"self rotationDegrees: 0.  inside the init"	self rotationDegrees: oldRotation.  "restore old rotation so that cancel leaves it right"	sketchEditor		afterNewPicDo: [:aForm :aRect |			self form: aForm.			self topRendererOrSelf position: aRect origin.			self rotationStyle: sketchEditor rotationStyle.			self setupAngle: sketchEditor forwardDirection.			self rotationDegrees: sketchEditor forwardDirection.			self presenter drawingJustCompleted: self.			forBackground ifTrue: [self goBehind]]  "shouldn't be necessary"		ifNoBits: ["If no bits drawn.  Must keep old pic.  Can't have no picture"			aWorld _ self world.			((pal _ aPasteUpMorph standardPalette) notNil and: [pal isInWorld])				ifTrue:					[(aPaintBox _ aWorld paintBox) ifNotNil: [aPaintBox delete].					pal viewMorph: self]				ifFalse:					[(aPaintTab _ aWorld paintingFlapTab)						ifNotNil:							[aPaintTab hideFlap]						ifNil:							[(aPaintBox _ aWorld paintBox) ifNotNil: [aPaintBox delete]]]]! !!SketchMorph methodsFor: 'other' stamp: 'sw 7/3/1999 20:06'!isLikelyRecipientForMouseOverHalos	^ true! !!ColorPickerMorph methodsFor: 'other' stamp: 'sw 7/6/1999 09:00'!isCandidateForAutomaticViewing	^ false! !!ColorPickerMorph methodsFor: 'other' stamp: 'sw 7/6/1999 09:07'!isLikelyRecipientForMouseOverHalos	^ false! !!SystemWindow methodsFor: 'events' stamp: 'sw 6/30/1999 20:30'!isCandidateForAutomaticViewing	^ false! !!Viewer methodsFor: 'as yet unclassified' stamp: 'sw 7/6/1999 08:43'!isCandidateForAutomaticViewing	^ false! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 6/25/1999 23:02'!addHeaderMorphWithBarHeight: anInteger	^ self addHeaderMorphWithBarHeight: anInteger includeDismissButton: true! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 6/25/1999 23:02'!addHeaderMorphWithBarHeight: anInteger includeDismissButton: aBoolean	| header aFont aButton aTextMorph nail wrpr costs headWrapper |	header _ AlignmentMorph newRow color: self color muchLighter; centering: #center.	aFont _ ScriptingSystem fontForScriptorButtons.	aBoolean ifTrue:		[header addMorph: (aButton _ SimpleButtonMorph new label: 'X' font: aFont).		aButton target: self;				color:  Color lightRed;				actionSelector: #dismiss;				setBalloonText: 'Delete'.		header addTransparentSpacerOfSize: 4@1].	header addMorphBack: (aButton _ SimpleButtonMorph new label: '+' font: aFont).	aButton target: self; beTransparent; borderWidth: 0;			actionSelector: #addCategoryViewer;			setBalloonText: 'click here to addanother viewer'.	header addTransparentSpacerOfSize: 4@1.	costs _ scriptedPlayer costumes.	costs ifNotNil:	[(costs size > 1 or: [costs size = 1 and: [costs first ~~ scriptedPlayer costume]]) ifTrue:		[header addUpDownArrowsFor: self.		(wrpr _ header submorphs last) submorphs second setBalloonText: 'switch to previous costume'.			wrpr submorphs first  setBalloonText: 'switch to next costume']].		nail _ ThumbnailMorph new objectToView: scriptedPlayer viewSelector: #costume.	nail on: #mouseDown send: #thumbnailMenuEvt:forMorph: to: scriptedPlayer.	header addMorphBack: nail.	nail setBalloonText: 'click here to get a menuto specify new costume,tear off a tile, etc..'.	nail borderWidth: 3; borderColor: #raised.	"nail addDropShadow.	nail owner color: Color gray."	header addTransparentSpacerOfSize: 5@5."	aButton _ SimpleButtonMorph new target: self; actionSelector: #newEmptyScript; label: 'S' font: (aFont _ StrikeFont familyName: #ComicBold size: 16);  color: Color transparent; borderWidth: 0; actWhen: #buttonDown.	aButton setBalloonText: 'drag from here tocreate a new scriptfor this object'.		header addMorphBack: aButton.	header addTransparentSpacerOfSize: 8@5.	aButton _ SimpleButtonMorph new target: scriptedPlayer; actionSelector: #addInstanceVariable; label: 'I' font: aFont;  color: Color transparent; borderWidth: 0; actWhen: #buttonUp.	aButton setBalloonText: 'click here to addan instance variableto this object.'.	header addMorphBack: aButton.	header addTransparentSpacerOfSize: 5@5."	scriptedPlayer costume assureExternalName.	aTextMorph _ UpdatingStringMorph new		useStringFormat;		target:  scriptedPlayer;		getSelector: #getName;		putSelector: #setName:;		setNameTo: 'name';		font: ScriptingSystem fontForNameEditingInScriptor.	aTextMorph setProperty: #okToTextEdit toValue: true.	aTextMorph step.	header  addMorphBack: aTextMorph.	aTextMorph setBalloonText: 'Click here to edit the player''s nameuse backspace to delete unwanted characters'.		header beSticky.	anInteger > 0		ifTrue:			[headWrapper _ AlignmentMorph newColumn color: self color.			headWrapper addTransparentSpacerOfSize: (0 @ anInteger).			headWrapper addMorphBack: header.			self addMorph: headWrapper]		ifFalse:			[self addMorph: header]! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 6/25/1999 23:03'!initializeFlapVersionFor: aPlayer	scriptedPlayer _ aPlayer.	self orientation: #vertical;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		borderWidth: 1.	self color: self standardViewerColor.	self addHeaderMorphWithBarHeight: 0 includeDismissButton: false.	self addCategoryViewer.    "#1"	self addCategoryViewer.    "#2"! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 6/25/1999 23:04'!initializeFor: aPlayer barHeight: anInteger	^ self initializeFor: aPlayer barHeight: anInteger includeDismissButton: true! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 6/25/1999 23:04'!initializeFor: aPlayer barHeight: anInteger includeDismissButton: aBoolean	scriptedPlayer _ aPlayer.	self orientation: #vertical;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		borderWidth: 1.	self color: self standardViewerColor.	self addHeaderMorphWithBarHeight: anInteger includeDismissButton: aBoolean.	self addCategoryViewer.    "#1"	self addCategoryViewer.    "#2"! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'sw 7/1/1999 11:53'!initializeFor: aPlayer topAt: aTop	| aGraphic |	scriptedPlayer _ aPlayer.	aGraphic _ aPlayer costume newThumbnailOfHeight: (aPlayer costume height min: 30).	aGraphic _ aGraphic representativeNoTallerThan: aPlayer costume height norWiderThan: (aPlayer costume width min: 25) thumbnailHeight: 30.	self  setProperty: #priorGraphic toValue: aGraphic rotatedForm.		self useGraphicalTab.	self top: aTop! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'sw 6/25/1999 22:07'!scriptedPlayer	^ scriptedPlayer! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'sw 6/30/1999 20:10'!showFlap	super showFlap.	Preferences oneViewerFlapAtATime ifTrue:		[self world hideViewerFlapsOtherThanFor: scriptedPlayer]! !!ViewerFlapTab class methodsFor: 'as yet unclassified' stamp: 'sw 7/1/1999 11:39'!defaultNameStemForInstances	^ 'viewerFlapTab'! !"Postscript:"Preferences initializeAddedPreferences.Preferences callHelpMessageInitializers.Utilities replaceMenuFlap.!