'From Squeak 2.3 beta of Nov 25, 1998 on 4 December 1998 at 1:48:42 am'!!BookMorph methodsFor: 'accessing' stamp: 'tk 12/3/1998 23:18'!pageNumberOf: aMorph	"Modified so that if the page IS in memory, other pages don't have to be brought in."	| ii pp |	ii _ 0.	1 to: pages size do: [:jj |		(pp _ pages at: jj) isInMemory = aMorph isInMemory ifTrue: [			pp = aMorph ifTrue: [ii _ jj]]].		"If MorphObjectOut would resolve to an existing page, might 		 give the wrong answer, but users of this method should tolerate this."	^ ii! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/4/1998 01:46'!getStemUrl	"Try to find the old place where this book was stored.  Confirm with the user.  Else ask for new place."| initial pg url ll |initial _ ''.(pg _ currentPage valueOfProperty: #SqueakPage) ifNotNil: [	pg contentsMorph == currentPage ifTrue: [		initial _ pg url]].	"If this page has a url"pages doWithIndex: [:aPage :ind |	initial size = 0 ifTrue: [		aPage isInMemory ifTrue: [			(pg _ aPage valueOfProperty: #SqueakPage) ifNotNil: [				initial _ pg url]]]].	"any page with a url"initial size = 0 ifTrue: [initial _ 'ftp://server/books/myBook/page1.sp'].url _ FillInTheBlank 		request: 'url of the place to store a typical page in this book.Must begin with file:// or ftp://' 		initialAnswer: initial.ll _ url findLast: [:char | char == $.].ll = 0 ifFalse: [url _ url copyFrom: 1 to: ll-1].	"remove .sp"url _ (url stemAndNumericSuffix) at: 1.		"remove trailing number"[url last == $x] whileTrue: [url _ url allButLast].^ url! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/2/1998 19:28'!invokeBookMenu	"Invoke the book's control panel menu."	| aMenu sel |	aMenu _ MVCMenuMorph new.	aMenu addList:	#(			('sort pages'				sortPages)			('make bookmark'		bookmarkForThisPage)			('make thumbnail'		thumbnailForThisPage)			('remove control panel'	hidePageControls)		).	(self primaryHand classOfPasteBuffer isKindOf: PasteUpMorph class) ifTrue:		[aMenu add: 'paste book page'	action: #pasteBookPage].	aMenu add: 'save as new-page prototype' action: #setNewPagePrototype.	newPagePrototype ifNotNil: [		aMenu add: 'clear new-page prototype' action: #clearNewPagePrototype].	aMenu add: (openToDragNDrop ifTrue: ['close'] ifFalse: ['open']) , ' dragNdrop'			action: #openCloseDragNDrop.	aMenu add: 'send other pages to server' action: #savePagesOnURL.	aMenu add: 'keep in one file' action: #keepTogether.	sel _ aMenu invokeAt: self primaryHand position in: self world.	sel ifNotNil: [self perform: sel].! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/2/1998 19:31'!keepTogether	"Mark this book so that each page will not go into a separate file.  Do this when pages share referenes to a common Player.  Don't want many copies of that Player when bring in.  Do not write pages of book out.  Write the PasteUpMorph that the entire book lives in."	self setProperty: #keepTogether toValue: true.! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/4/1998 01:13'!reload	"Fetch the pages of this book from the server again.  For all pages that have not been modified, keep current ones.  Use new pages.  For each, look up in cache, if time there is equal to time of new, and its in, use the current morph.	Later do fancy things when a page has changed here, and also on the server."	| url onServer onPgs sq |	(url _ self valueOfProperty: #url) ifNil: [		url _ FillInTheBlank 			request: 'url of the place where this book''s index is stored.Must begin with file:// or ftp://' 			initialAnswer: 'ftp://server/books/myBook/aBook.bo'.		self setProperty: #url toValue: url].	url size = 0 ifTrue: [^ self].	onServer _ self class fromURL: url.	"Later: test book times?"	onPgs _ onServer pages collect: [:out |		sq _ SqueakPageCache pageCache at: out xxxUrl ifAbsent: [nil].		(sq ~~ nil and: [sq contentsMorph isInMemory])			ifTrue: [out xxxPage lastChangeTime > sq lastChangeTime 						ifTrue: [out] ifFalse: [sq contentsMorph]]			ifFalse: [out]].	self newPages: onPgs currentIndex: 1.		"later stay at current page"! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/4/1998 01:29'!saveAsNumberedURLs	"Write out all pages in this book that are not showing, onto a server.  The local disk could be the server.  For any page that does not have a SqueakPage and a url already, name that page file by its page number.  Any pages that are already totally out will stay that way."	| pg stem |stem _ self getStemUrl.	"user must approve"stem size = 0 ifTrue: [^ self].pages doWithIndex: [:aPage :ind | 	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		pg _ aPage saveOnURL: stem,(ind printString),'.sp'.		]].pages do: [:aPage |	"does write the current page too"	(aPage isInMemory and: [(currentPage == aPage) not]) ifTrue: [		pg _ aPage valueOfProperty: #SqueakPage.		pg purge]].	"recover the space"self saveIndexOnURL.! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/4/1998 01:02'!saveIndexOnURL	"Make up an index to the pages of this book, with thumbnails, and store it on the server.  (aDictionary, aMorphObjectOut, aMorphObjectOut, aMorphObjectOut).  The last part corresponds exactly to what pages looks like when they are all out."	| dict list pg holder mine sf remoteFile |	pages size = 0 ifTrue: [^ self].	dict _ Dictionary new.  dict at: #modTime put: Time totalSeconds.	list _ pages copy.	"paste dict on front below"	"Fix up the entries, should already be done"	list doWithIndex: [:out :ind |		out isInMemory ifTrue: [  			(pg _ out valueOfProperty: #SqueakPage) ifNil: [				out saveOnURLbasic].			pg _ (out valueOfProperty: #SqueakPage) copy.			holder _ MorphObjectOut new xxxSetUrl: pg url page: pg.			pg contentsMorph: holder.			list at: ind put: holder]].	list _ (Array with: dict), list.	mine _ self valueOfProperty: #url.	mine ifNil: [mine _ self getStemUrl, '.bo'.		self setProperty: #url toValue: mine].	sf _ ServerDirectory new fullPath: mine.	Cursor wait showWhile: [		remoteFile _ sf newFileNamed: mine.		remoteFile fileOutClass: nil andObject: list.		remoteFile close].! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/3/1998 18:18'!savePagesOnURL	"Write out all pages in this book that are not showing, onto a server.  The local disk could be the server.  For any page that does not have a SqueakPage and a url already, ask the user for one.  Give the option of naming all page files by page number.  Any pages that are already totally out will stay that way."	| response curr pg |	(self valueOfProperty: #keepTogether) ifNotNil: [		self inform: 'This book is marked ''keep in one file''. Several pages use a common Player.Save the owner of the book instead.'.		^ self].	response _ (PopUpMenu labels: 'Use page numbers\Type in file names\Save in a new place (using page numbers)\Save in a new place (typing names)' withCRs)			startUpWithCaption: 'Each page will be a file on the server.  \Do you want to page numbers be the names of the files? \or name each one yourself?' withCRs.	response = 1 ifTrue: [self saveAsNumberedURLs. ^ self].	response = 3 ifTrue: [self forgetURLs; saveAsNumberedURLs. ^ self].	response = 4 ifTrue: [self forgetURLs].	response = 0 ifTrue: [^ self].curr _ currentPage.pages do: [:aPage |	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		"self goToPageMorph: aPage."		aPage saveOnURLbasic.	"ask user if no url"		]].self goToPageMorph: curr.pages do: [:aPage |	"does write the current page too"	(aPage isInMemory and: [(curr == aPage) not]) ifTrue: [		pg _ aPage valueOfProperty: #SqueakPage.		pg purge]].	"recover the space"self saveIndexOnURL.! !!BookMorph class methodsFor: 'all' stamp: 'tk 12/4/1998 01:04'!fromURL: url	"Make a book from an index and a bunch of pages on a server."	| bk strm remote |	Cursor wait showWhile: [		strm _ (ServerFile new fullPath: url) asStream].	strm class == String ifTrue: [self inform: 'Sorry, ',strm. ^ nil].	remote _ strm fileInObjectAndCode.	bk _ self new.	bk initialize.	bk newPages: (remote copyFrom: 2 to: remote size) currentIndex: 1.	bk setProperty: #modTime toValue: ((remote at: 1) at: #modTime).	^ bk! !!BookMorph class methodsFor: 'all' stamp: 'tk 12/3/1998 18:59'!grabURL: aURLString	"Create a BookMorph for this url and put it in the hand."	World primaryHand attachMorph: (self fromURL: aURLString)! !!BookMorph class methodsFor: 'all' stamp: 'tk 12/2/1998 19:51'!savePagesOfAllBooks	"Enumerate the BookMorphs and store all their pages on files on the disk.  Be sure to set 'keepTogether' for books whose pages share players."| pg |BookMorph allInstancesDo: [:bk |(bk valueOfProperty: #keepTogether) ifNil: [bk saveAsNumberedURLs.bk pages do: [:aPage |	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		aPage saveOnURLbasic.	"ask user if no url"		]].bk pages do: [:aPage |	"does write the current page too"	aPage isInMemory ifTrue: [		pg _ aPage valueOfProperty: #SqueakPage.		pg purge]].	"recover the space"]].! !!ObjectOut methodsFor: 'access' stamp: 'tk 12/4/1998 01:05'!xxxPage	^ page! !!SqueakPage methodsFor: 'accessing' stamp: 'tk 12/4/1998 01:00'!lastChangeTime	^ lastChangeTime! !!SqueakPage methodsFor: 'saving' stamp: 'tk 12/4/1998 01:48'!urlNoOverwrite: suggested	"Look in the directory.  If there is a file of this name, create a new name.  Keep track of highest numbers used as a hint."	| dir ll stem num local trial |	dir _ ServerFile new fullPath: suggested.	(dir includesKey: dir fileName) ifFalse: [^ url _ suggested].	"File already exists!!  Create a new name"	"Find the stem file name"	ll _ suggested findLast: [:char | char == $.].	ll = 0 ifFalse: [stem _ suggested copyFrom: 1 to: ll-1].	"remove .sp"	stem _ (stem stemAndNumericSuffix) at: 1.		"remove trailing number"	[stem last == $x] whileTrue: [stem _ stem allButLast].	num _ stem = RecentStem ifTrue: [RecentMaxNum+1] ifFalse: [1].	local _ dir fileName.	"ugh, take stem again..."	ll _ local findLast: [:char | char == $.].	ll = 0 ifFalse: [local _ local copyFrom: 1 to: ll-1].	"remove .sp"	local _ (local splitInteger) at: 1.		"remove trailing number"	local last == $x ifFalse: [local _ local , 'x'].	[trial _ local, num printString, '.sp'.		dir includesKey: trial] whileTrue: [num _ num + 1].	RecentStem _ stem.  RecentMaxNum _ num.	^ url _ stem, 'x', num printString, '.sp'! !