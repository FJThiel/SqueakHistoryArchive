'From Squeak 2.3 of January 14, 1999 on 8 March 1999 at 10:42:29 pm'!"Change Set:		menuTitle-swDate:			6 March 1999Author:			Scott WallaceMakes the titles of the standard morphic screen submenus be the same as the items that invoked them, e.g., the menu brought up by invoking 'open...' now has 'open...' as its menu title (rather than more elaborate text as formerly.) "!!HandMorph methodsFor: 'world menu' stamp: 'sw 3/6/1999 02:30'!changesMenu	"Build the changes menu for the world."	| menu |	menu _ (MenuMorph entitled: 'changes...') defaultTarget: self.	menu addStayUpItem.	menu add: 'file out changes' target: Utilities action: #fileOutChanges.	menu balloonTextForLastItem: 'Write the current change set out to a file whose name reflects the change set name and the current date & time.'.	menu add: 'create new change set...' target: ChangeSorter action: #newChangeSet.	menu balloonTextForLastItem: 'Create a new change set and make it the current one.'.	menu add: 'browse changed methods' action: #browseChangedMessages.	menu balloonTextForLastItem: 'Open a message-list browser showing all methods in the current change set'.	menu add: 'check for slips' target: Smalltalk changes action: #lookForSlips.	menu balloonTextForLastItem: 'Check the current change set for halts, references to the Transcript, etc., and if any such thing is found, open up a message-list browser detailing all possible slips.'.	menu addLine.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu balloonTextForLastItem: 'Open a change sorter that allows you to view one change set at a time.'.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu balloonTextForLastItem: 'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'.	menu addLine.	menu add: 'browse recent submissions' action: #openRecentChanges.	menu balloonTextForLastItem: 'Open a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'.	menu add: 'recent change log' action: #openChangesLog.	menu balloonTextForLastItem: 'Open a change-list browser on the latter part of the changes log.'.	menu addLine.	menu add: 'save world as morph file' action: #saveWorldInFile.	menu balloonTextForLastItem: 'Save a file that, when reloaded, reconstitutes the current World.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 3/6/1999 02:32'!debugMenu	"Build the scripting menu for the world."	| menu |	menu _ (MenuMorph entitled: 'debug...') defaultTarget: self.	menu addStayUpItem.	menu add: 'inspect world' target: owner action: #inspect.	menu add: 'inspect model' action: #inspectWorldModel.	menu add: 'start MessageTally' action: #startMessageTally.	menu addLine.	menu add: 'call #tempCommand' action: #callTempCommand.	menu add: 'define #tempCommand' action: #defineTempCommand.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 3/6/1999 02:30'!helpMenu	"Build the help menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'help...') defaultTarget: self.	menu addStayUpItem.	menu add: 'edit preferences...' target: Preferences action: #openPreferencesInspector.	menu add: 'command-key help' target: Utilities action: #openCommandKeyHelp.	menu add: 'world menu help' target: self action: #worldMenuHelp.	menu add: 'info about flaps' target: Utilities action: #explainFlaps.	menu add: 'font size summary' target: Utilities action: #fontSizeSummary.	menu add: 'useful expressions' target: Utilities action: #openStandardWorkspace.	menu add: 'view image imports' target: Smalltalk action: #viewImageImports.	menu addLine.	menu add: 'full screen on' target: screenCtrl action: #fullScreenOn.	menu add: 'full screen off' target: screenCtrl action: #fullScreenOff.	menu add: 'set display depth...' action: #setDisplayDepth.	menu add: 'set desktop color...' action: #changeBackgroundColor.	menu add: 'use texture background' target: self world action: #setStandardTexture.	gridOn		ifTrue: [menu add: 'turn gridding off' action: #setGridding]		ifFalse: [menu add: 'turn gridding on' action: #setGridding].	menu add: ((Preferences valueOfFlag: #disableSounds)							ifTrue: ['turn sound on']							ifFalse: ['turn sound off'])		target: screenCtrl action: #soundOnOrOff.	menu addLine.	menu add: 'update code from server' action: #absorbUpdatesFromServer.	menu add: 'about this system' target: Smalltalk action: #aboutThisSystem.	menu add: 'set author initials...' target: screenCtrl action: #setAuthorInitials.	menu add: 'vm statistics' target: screenCtrl action: #vmStatistics.	menu add: 'space left' target: screenCtrl action: #garbageCollect.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 3/6/1999 02:30'!openMenu	"Build the open window menu for the world."	| menu |	menu _ (MenuMorph entitled: 'open...') defaultTarget: self.	menu addStayUpItem.	menu add: 'browser' action: #openBrowser.	menu add: 'workspace' action: #openWorkspace.	menu add: 'file list' action: #openFileList.	menu add: 'transcript' target: Transcript action: #open.	menu add: 'selector finder' target: ScreenController new action: #openSelectorBrowser.	menu addLine.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu addLine.	menu add: 'email reader' action: #openEmail.	menu add: 'web browser' action: #openWebBrowser.	menu add: 'IRC chat' action: #openIRC.	menu addLine.	menu add: 'project (mvc)' action: #openMVCProject.	menu add: 'project (morphic)' action: #openMorphicProject.	menu add: 'project (construction)' action: #openConstructionProject.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 3/6/1999 09:43'!windowsMenu	"Build the windows menu for the world."	| menu |	menu _ (MenuMorph entitled: 'windows...') defaultTarget: self.	menu addStayUpItem.	menu add: 'find window' action: #findWindow.	menu balloonTextForLastItem: 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'.	menu add: 'find changed browsers...' action: #findDirtyBrowsers.	menu balloonTextForLastItem: 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'.	menu add: 'find changed windows...' action: #findDirtyWindows.	menu balloonTextForLastItem: 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'.	menu addLine.	menu add: 'collapse all windows' action: #collapseAll.	menu add: 'expand all windows' action: #expandAll.	menu addLine.	menu add: 'delete unchanged windows' action: #closeUnchangedWindows.	menu balloonTextForLastItem: 'Deletes all windows that do not have unsaved text edits.'.	menu add: 'delete non-windows' action: #deleteNonWindows.	menu balloonTextForLastItem: 'Deletes all non-window morphs lying on the world.'.	menu add: 'delete both of the above' action: #cleanUpWorld.	menu balloonTextForLastItem: 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'.	menu addLine.	menu add: ((Preferences valueOfFlag: #reverseWindowStagger)							ifTrue: ['tile windows']							ifFalse: ['stagger windows'])		target: ScreenController new action: #changeWindowPolicy.	menu add: 'flaps...' action: #offerFlapsMenu.	menu balloonTextForLastItem: 'Offers a menu of options relating to the use of flaps.'.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 3/6/1999 09:54'!cleanUpWorld	(SelectionMenu confirm:'This will remove all windows except thosecontaining unsubmitted text edits, and willalso remove all non-window morphs (otherthan flaps) found on the desktop.  Are yousure you want to do this?')		ifFalse: [^ self].	self world allNonFlapRelatedSubmorphs do:		[:m | m delete].	(SystemWindow windowsIn: self world satisfying: [:w | w model canDiscardEdits])		do: [:w | w delete]! !