Model subclass: #TestRunner	instanceVariableNames: 'result details passFail failures errors tests testSuite passFailText detailsText lastPass testsList selectedFailureTest selectedErrorTest selectedSuite '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-UI'!!TestRunner methodsFor: 'test processing' stamp: 'jp 3/17/2003 14:00'!errorLog	^SUnitNameResolver defaultLogDevice! !!TestRunner methodsFor: 'test processing' stamp: 'jp 3/17/2003 14:00'!showResult	self errorLog cr;cr; show: '==== SUnit ======== Start ===='.	self		showResultSummary;		showResultDefects.	self errorLog cr; show: '==== SUnit ========== End ===='; cr.! !!TestRunner methodsFor: 'test processing' stamp: 'jp 3/17/2003 14:00'!showResultDefects	(self result failureCount > 0)		ifTrue: [			self errorLog cr; show: '---- SUnit ----- Failures ----'.			self result failures do: [:failure |				self errorLog crtab; show: failure printString]].	(self result errorCount > 0)		ifTrue: [			self errorLog cr; show: '---- SUnit ------- Errors ----'.			self result errors do: [:error |				self errorLog crtab; show: error printString]].! !!TestRunner methodsFor: 'test processing' stamp: 'jp 3/17/2003 14:01'!showResultSummary	| message summary |	message := (self result runCount = self result correctCount)		ifTrue: [self successMessage]		ifFalse: [self failureMessage].	self errorLog crtab; show: message.	summary :=		self result runCount printString, ' run, ',		self result failureCount printString, ' failed, ',		self result errorCount printString, ' errors (',		self duration printString, ' ms)'.	self errorLog crtab; show: summary.! !!TestRunner methodsFor: 'constants' stamp: 'SSS 7/5/2000 13:53'!debugButtonLabel        ^ 'DEBUG'! !!TestRunner methodsFor: 'constants' stamp: 'SSS 7/5/2000 14:08'!debugState        ^true! !!TestRunner methodsFor: 'constants' stamp: 'Sames 4/11/2000 19:13'!errorColor        ^ Color red! !!TestRunner methodsFor: 'constants' stamp: 'Sames 4/11/2000 19:13'!failColor        ^ Color yellow! !!TestRunner methodsFor: 'constants' stamp: 'Sames 4/11/2000 19:13'!passColor        ^ Color green! !!TestRunner methodsFor: 'constants' stamp: 'SSS 7/5/2000 13:53'!refreshButtonLabel        ^ 'REFRESH'! !!TestRunner methodsFor: 'constants' stamp: 'SSS 7/5/2000 13:59'!refreshButtonState        ^true! !!TestRunner methodsFor: 'constants' stamp: 'SSS 7/5/2000 14:30'!resetColor        ^ Color white! !!TestRunner methodsFor: 'constants' stamp: 'Sames 4/11/2000 19:32'!runButtonColor        ^ Color yellow! !!TestRunner methodsFor: 'constants' stamp: 'Sames 4/11/2000 18:14'!runButtonLabel        ^ 'RUN ALL'! !!TestRunner methodsFor: 'constants' stamp: 'Sames 4/11/2000 17:32'!runButtonState        ^true! !!TestRunner methodsFor: 'constants' stamp: 'Sames 4/11/2000 18:17'!runOneButtonLabel        ^ 'RUN'! !!TestRunner methodsFor: 'constants' stamp: 'jp 8/26/2002 20:01'!windowLabel        ^'SUnit Camp Smalltalk ', TestCase sunitVersion, ' Test Runner'! !!TestRunner methodsFor: 'processing' stamp: 'rew 8/23/2000 20:44'!debugErrorTest: anInteger        selectedErrorTest _ anInteger.  "added rew"        selectedFailureTest _ 0.                        "added rew"        self changed: #selectedFailureTest.             "added rew"        self changed: #selectedErrorTest.               "added rew"        (anInteger ~= 0)                ifTrue: [(result errors at: anInteger) debug]! !!TestRunner methodsFor: 'processing' stamp: 'jp 3/17/2003 10:46'!debugFailureTest: anInteger        (anInteger ~= 0)                ifTrue: [(self failures at: anInteger) debugAsFailure].        selectedFailureTest _ anInteger.        selectedErrorTest _ 0.        self changed: #selectedErrorTest.        self changed: #selectedFailureTest.! !!TestRunner methodsFor: 'processing' stamp: 'SSS 7/5/2000 13:59'!debugTest! !!TestRunner methodsFor: 'processing' stamp: 'rew 8/23/2000 20:47'!refreshTests        tests _ (TestCase allSubclasses collect: [:each | each name])		asSortedCollection:[:a :b| a name asString <= b name asString].        self changed: #tests.        testSuite := nil.        selectedSuite _ 0.        selectedFailureTest _ 0.        selectedErrorTest _ 0.        self changed: #selectedFailureTest.             "added rew"        self changed: #selectedErrorTest.               "added rew"        self changed: #selectedSuite.        self refreshWindow! !!TestRunner methodsFor: 'processing' stamp: 'Sames 2/22/2001 10:19'!runOneTest        Cursor execute showWhile:                [testSuite notNil                        ifTrue:                                [self runWindow.                                result _ testSuite asSymbol sunitAsClass suite run.                                self updateWindow: result]                        ifFalse:                                [self runWindow.                                self displayPassFail: 'No Test Suite Selected']]! !!TestRunner methodsFor: 'processing' stamp: 'jp 3/20/2003 10:05'!runTests	Cursor execute showWhile:[		self runWindow.		result := TestResult new.		self suite tests do:[:each|			self displayPassFail: 'Running ', each name.			World displayWorld.			each run: result.			self updateWindow: result.		].	].! !!TestRunner methodsFor: 'processing' stamp: 'rew 5/15/2000 21:08'!selectedErrorTest        ^selectedErrorTest! !!TestRunner methodsFor: 'processing' stamp: 'rew 8/23/2000 21:01'!selectedFailureTest        ^selectedFailureTest! !!TestRunner methodsFor: 'processing' stamp: 'rew 5/15/2000 21:08'!selectedSuite        ^selectedSuite! !!TestRunner methodsFor: 'processing' stamp: 'rew 8/23/2000 20:52'!selectedSuite: anInteger        anInteger ~= 0 ifTrue: [testSuite _ tests at: anInteger].        selectedSuite _ selectedSuite = anInteger                                        ifTrue:[0]                                        ifFalse:[anInteger].        selectedFailureTest _ 0.        selectedErrorTest _ 0.        self changed: #selectedFailureTest.             "added rew"        self changed: #selectedErrorTest.               "added rew"         self changed: #selectedSuite.! !!TestRunner methodsFor: 'interface opening' stamp: 'jp 3/17/2003 13:50'!openAsMorph        "TestRunner new openAsMorph"        "=== build the parts ... ==="        | topWindow runButton errorsList failuresList runOneButtonrefreshButton |        Smalltalk isMorphic                ifFalse: [^self open].        (topWindow _ SystemWindow labelled: self windowLabel) model: self.        runButton _ PluggableButtonMorph                                on: self                                getState: #runButtonState                                action: #runTests                                label: #runButtonLabel.        runButton color: self runButtonColor.        runButton onColor: self runButtonColor offColor: self runButtonColor.        runOneButton _ PluggableButtonMorph                                on: self                                getState: #runButtonState                                action: #runOneTest                                label: #runOneButtonLabel.        runOneButton color: self runButtonColor.        runOneButton onColor: self runButtonColor offColor: selfrunButtonColor.        refreshButton _ PluggableButtonMorph                                on: self                                getState: #refreshButtonState                                action: #refreshTests                                label: #refreshButtonLabel.        refreshButton color: self runButtonColor.        refreshButton onColor: self runButtonColor offColor: selfrunButtonColor.        passFailText _ PluggableTextMorph                                on: self                                text: #passFail                                accept: nil.        passFailText retractable: true.        detailsText _ PluggableTextMorph                                on: self                                text: #details                                accept: nil.        detailsText retractable: true.        testsList _ PluggableListMorph                                on: self                                list: #tests                                selected: #selectedSuite                                changeSelected: #selectedSuite:.        testsList autoDeselect: false.        failuresList _ PluggableListMorph                                on: self                                list: #failuresList                                selected: #selectedFailureTest                                changeSelected: #debugFailureTest:.        errorsList _ PluggableListMorph                                on: self                                list: #errorsList                                selected: #selectedErrorTest                                changeSelected: #debugErrorTest:.        "=== assemble the whole ... ==="        topWindow addMorph: refreshButton frame: (0.0 @ 0.0 extent: 0.2 @ 0.2).        topWindow addMorph: testsList frame: (0.2 @ 0.0 extent: 0.6 @ 0.2).        topWindow addMorph: runOneButton frame: (0.8 @ 0.0 extent: 0.2 @ 0.1).        topWindow addMorph: runButton frame: (0.8 @ 0.1 extent: 0.2 @ 0.1).        topWindow addMorph: passFailText frame: (0.0 @ 0.2 extent: 1.0 @ 0.1).        topWindow addMorph: detailsText frame: (0.0 @ 0.3 extent: 1.0 @ 0.1).        topWindow addMorph: failuresList frame: (0.0 @ 0.4 extent: 1.0 @ 0.3).        topWindow addMorph: errorsList frame: (0.0 @ 0.7 extent: 1.0 @ 0.3).        "=== open it ... ==="        topWindow openInWorldExtent: 400 @ 200.        self refreshWindow.        ^ topWindow! !!TestRunner methodsFor: 'accessing' stamp: 'Sames 4/11/2000 17:25'!details        ^details! !!TestRunner methodsFor: 'accessing' stamp: 'jp 3/17/2003 13:49'!errors        ^errors! !!TestRunner methodsFor: 'accessing' stamp: 'jp 3/17/2003 13:48'!errorsList        ^self errors collect: [:error | error printString]! !!TestRunner methodsFor: 'accessing' stamp: 'Sames 4/11/2000 17:26'!failures        ^failures! !!TestRunner methodsFor: 'accessing' stamp: 'Sames 4/12/2000 18:12'!formatTime: aTime        aTime hours > 0 ifTrue: [^aTime hours printString , 'h'].        aTime minutes > 0 ifTrue: [^aTime minutes printString , 'min'].        ^aTime seconds printString , ' sec'! !!TestRunner methodsFor: 'accessing' stamp: 'Sames 4/11/2000 17:26'!passFail        ^passFail! !!TestRunner methodsFor: 'accessing' stamp: 'Sames 2/22/2001 10:14'!suite        ^TestCase buildSuite! !!TestRunner methodsFor: 'accessing' stamp: 'Sames 4/11/2000 18:39'!tests        ^ tests! !!TestRunner methodsFor: 'accessing' stamp: 'Sames 4/12/2000 18:19'!timeSinceLastPassAsString: aResult        (lastPass isNil or: [aResult hasPassed not]) ifTrue: [^ ''].        ^ ', ' , (self formatTime: (Time now subtractTime: lastPass)) , 'since last Pass'! !!TestRunner methodsFor: 'initialize' stamp: 'jp 3/20/2003 10:15'!initialize        result _ TestResult new.        passFail _ 'N/A'.        details _ '...'.        failures _ OrderedCollection new.        errors _ OrderedCollection new.        tests _ (TestCase allSubclasses collect: [:each | each name])		asSortedCollection:[:a :b| a name asString <= b name asString].        selectedSuite _ 0.        selectedFailureTest _ 0.        selectedErrorTest _ 0.! !!TestRunner methodsFor: 'updating' stamp: 'Sames 4/11/2000 17:38'!displayDetails: aString        details := aString.        self changed: #details! !!TestRunner methodsFor: 'updating' stamp: 'jp 3/17/2003 13:49'!displayErrors: anOrderedCollection        errors := anOrderedCollection.        self changed: #errorsList! !!TestRunner methodsFor: 'updating' stamp: 'jp 3/17/2003 10:51'!displayFailures: anOrderedCollection        failures := anOrderedCollection.        self changed: #failuresList! !!TestRunner methodsFor: 'updating' stamp: 'Sames 4/11/2000 17:36'!displayPassFail: aString        passFail := aString.        self changed: #passFail! !!TestRunner methodsFor: 'updating' stamp: 'jp 3/17/2003 13:49'!failuresList	^self failures collect: [:failure | failure printString]! !!TestRunner methodsFor: 'updating' stamp: 'SSS 7/5/2000 14:31'!refreshWindow        passFailText isMorph                ifTrue:                        [passFailText color: Color white.                        detailsText color: Color white]                ifFalse:                        [passFailText insideColor: Color white.                        detailsText insideColor: Color white].        self updateErrors: TestResult new.        self updateFailures: TestResult new.        self displayPassFail: 'N/A'.        self displayDetails: '...'! !!TestRunner methodsFor: 'updating' stamp: 'Sames 4/12/2000 18:52'!runWindow        passFailText isMorph                ifTrue:                        [passFailText color: Color white.                        detailsText color: Color white]                ifFalse:                        [passFailText insideColor: Color white.                        detailsText insideColor: Color white].        self updateErrors: TestResult new.        self updateFailures: TestResult new.        self displayPassFail: 'Running...'.        self displayDetails: '...'! !!TestRunner methodsFor: 'updating' stamp: 'Sames 4/12/2000 18:20'!updateDetails: aTestResult        self displayDetails: aTestResult printString , (selftimeSinceLastPassAsString: aTestResult).        aTestResult hasPassed ifTrue: [lastPass _ Time now]! !!TestRunner methodsFor: 'updating' stamp: 'jp 3/17/2003 13:49'!updateErrors: aTestResult        self displayErrors: aTestResult errors! !!TestRunner methodsFor: 'updating' stamp: 'jp 3/17/2003 10:52'!updateFailures: aTestResult        self displayFailures: aTestResult failures asOrderedCollection! !!TestRunner methodsFor: 'updating' stamp: 'Sames 4/12/2000 18:57'!updatePartColors: aColor        passFailText isMorph                ifTrue:                        [passFailText color: aColor.                        detailsText color: aColor]                ifFalse:                        [passFailText insideColor: aColor.                        detailsText insideColor: aColor]! !!TestRunner methodsFor: 'updating' stamp: 'Sames 4/11/2000 18:27'!updatePassFail: aTestResult        | message |        message _ aTestResult hasPassed                                ifTrue: ['Pass']                                ifFalse: ['Fail'].        self displayPassFail: message! !!TestRunner methodsFor: 'updating' stamp: 'Sames 4/12/2000 18:54'!updateWindow: aTestResult        aTestResult errors size + aTestResult failures size = 0                ifTrue: [self updatePartColors: self passColor]                ifFalse: [aTestResult errors size > 0                                ifTrue: [self updatePartColors: selferrorColor]                                ifFalse: [self updatePartColors: selffailColor]].        self updatePassFail: aTestResult.        self updateDetails: aTestResult.        self updateFailures: aTestResult.        self updateErrors: aTestResult! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestRunner class	instanceVariableNames: ''!!TestRunner class methodsFor: 'instance creation' stamp: 'Sames 4/11/200017:33'!new        ^super new initialize! !!TestRunner class methodsFor: 'instance creation' stamp: 'jp 3/20/2003 12:07'!open	"TestRunner open"        ^super new initialize openAsMorph! !"Postscript:"(TheWorldMenu respondsTo: #registerOpenCommand:)
	ifTrue: [TheWorldMenu registerOpenCommand: {'Test Runner'. {TestRunner. #open}}]."Register 'SUnit' 3.1 package as installed"SMSqueakMap default noteInstalledPackage: '26bea8bf-733f-4715-b188-fa6d848984ad' version: '3.1'.!