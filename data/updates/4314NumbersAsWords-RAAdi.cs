'From Squeak3.1alpha of 5 February 2001 [latest update: #4304] on 4 September 2001 at 1:45:13 pm'!"Change Set:		NumbersAsWordsDate:			24 August 2001Author:			Bob Arning, Dan IngallsBob: Defines #asWords for Integers.For example, SmallInteger maxVal asWords ==> 'one billion, seventy-three million, seven hundred forty-one thousand, eight hundred twenty-three'Dan: Also includes a couple of fixes so that Speaker does a reasonable job of pronouncing these numbers."!!Integer methodsFor: 'printing' stamp: 'di 8/24/2001 12:14'!asWords	"SmallInteger maxVal asWords"	| mils minus three num answer milCount |	self = 0 ifTrue: [^'zero'].	mils _ #('' ' thousand' ' million' ' billion' ' trillion' ' quadrillion' ' quintillion' ' sextillion' ' septillion' ' octillion' ' nonillion' ' decillion' ' undecillion' ' duodecillion' ' tredecillion' ' quattuordecillion' ' quindecillion' ' sexdecillion' ' septendecillion' ' octodecillion' ' novemdecillion' ' vigintillion').	num _ self.	minus _ ''.	self < 0 ifTrue: [		minus _ 'a negative '.		num _ num negated.	].	answer _ String new.	milCount _ 1.	[num > 0] whileTrue: [		three _ (num \\ 1000) threeDigitName.		num _ num // 1000.		three isEmpty ifFalse: [			answer isEmpty ifFalse: [				answer _ ', ',answer			].			answer _ three,(mils at: milCount),answer.		].		milCount _ milCount + 1.	].	^minus,answer! !!PhoneticTranscriber class methodsFor: 'examples' stamp: 'len 8/24/2001 13:48'!englishLexicon	^ Dictionary new		add: 'HOW' -> 'HH AW1';		add: 'YOU' -> 'Y UW1';		add: 'ARE' -> 'AA1 R';		add: 'DOING' -> 'D UW1 IH0 NG';		add: 'THIS' -> 'DH IH1 S';		add: 'IS' -> 'IH1 Z';		add: 'MY' -> 'M AY1';		add: 'HI' -> 'HH AY1';		add: 'VOICE' -> 'V OY1 S';		add: 'FAST' -> 'F AE1 S T';		add: 'SLOW' -> 'S L OW1';		add: 'I' -> 'AY1';		add: 'AM' -> 'AE1 M';		add: 'A' -> 'AH0';		add: 'AN' ->  'AE1 N';		add: 'LOW' -> 'L OW1';		add: 'SPEAKER' -> 'S P IY1 K ER0';		add: 'ANSWER' -> 'AE1 N S ER0';		add: 'RECEIVER' -> 'R AH0 S IY1 V ER0';		add: 'OBJECT' -> 'AA1 B JH EH0 K T';		add: 'READ' -> 'R IY1 D';		add: 'WRITE' -> 'R AY1 T';		add: 'SQUEAK' -> 'S K W IY1 K';		add: 'SMALLTALK' -> ' S M AO1 L T AO2 K';		add: 'CLASS' -> 'K L AE1 S';		add: 'WOMAN' -> 'W UH1 M AH0 N';		add: 'BICYCLIC' ->  'B AY1 S IH0 K L IH0 K';		add: 'LISTEN' -> 'L IH1 S AH0 N';		add: 'ZERO' -> 'Z IY1 R OW';		add: 'SEVEN' -> 'S EH1 V EH N';		add: 'ELEVEN' -> 'EH1 L EH1 V EH N';		add: 'SEVENTEEN' -> 'S EH1 V EH N T IY N';		add: 'SEVENTY' -> 'S EH1 V EH N T IH';		add: 'NINETEEN' -> 'N AH1 N T IY N';		add: 'NINETY' -> 'N AH1 N T IH';		yourself! !!SmallInteger methodsFor: 'printing' stamp: 'RAA 8/24/2001 13:59'!threeDigitName	| units answer |	self = 0 ifTrue: [^''].	units _ #('one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine' 'ten' 		'eleven' 'twelve' 'thirteen' 'fourteen' 'fifteen' 'sixteen' 'seventeen' 		'eighteen' 'nineteen').	self > 99 ifTrue: [		answer _ (units at: self // 100),' hundred'.		(self \\ 100) = 0 ifFalse: [			answer _ answer,' ',(self \\ 100) threeDigitName		].		^answer	].	self < 20 ifTrue: [		^units at: self	].	answer _ #('twenty' 'thirty' 'forty' 'fifty' 'sixty' 'seventy' 'eighty' 'ninety')			at: self // 10 - 1.	(self \\ 10) = 0 ifFalse: [		answer _ answer,'-',(units at: self \\ 10)	].	^answer! !!Speaker methodsFor: 'playing' stamp: 'di 8/25/2001 16:00'!say: aString	| events stream string |	events _ CompositeEvent new.	stream _ ReadStream on: ((aString copyReplaceAll: '-' with: ' ' asTokens: false)								findTokens: '?' keep: '?').	[stream atEnd]		whileFalse: [string _ stream next.					stream atEnd ifFalse: [string _ string, stream next].					events addAll: (self eventsFromString: string)].	events playOn: self voice delayed: events duration * 1000.	self voice flush! !