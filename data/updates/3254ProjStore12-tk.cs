'From Squeak2.9alpha of 16 June 2000 [latest update: #3306] on 28 January 2001 at 10:19:03 pm'!"Change Set:		ProjStore12-tkDate:			28 January 2001Author:			Ted Kaehler	Hack to allow Player to guess what world they are in when they are on a card in a stack that is not showing.  (Waiting for ActiveWorld to be implemented.)	Second fix to veryDeepCopying of Morphs and their properties.  I'm trying for a record of the most bugs per line of code."!!SyntaxMorph commentStamp: 'tk 1/26/2001 12:06' prior: 0!A single class of morph that holds any piece of Smalltalk, and allows it to be a tile.  Tiles can be dragged in or out of a method. In the message list pane of a Browser, choose 'tile scriptor'.  Bring up a second one to steal parts from.  Clicking multiple times selects enclosing phrases of code.  Dragging lets you take away a copy.  Any tile may be replaced by dropping on it.  Shift-click to edit the text of any tile.  Change variable and message names, but do not change the part-of-speech (objects to selector).Each SyntaxMorph holds a ParseNode.  After editing, the parseNode is only good as a part-of-speech indicator.  Only the classes of the parseNodes are important.  It's state is not kept up to date with the tile edits (but maybe it should be).The correspondence between SyntaxMorphs and parseNodes in the real parse tree is not one-to-one.  Several extra levels of SyntaxMorph were added as aligners to make the horizontal and vertical layout right.  These sometimes have nil for the parseNode.When accept the method, we pass over the tree of SyntaxMorphs, gathering their printStrings and inserting punctuation.  See (SyntaxMorph>>printOn:indent:).  We send the result to the compiler.  (We do not use the parse tree we already have.)!!CategoryViewer methodsFor: 'entries' stamp: 'tk 1/27/2001 12:06'!phraseForSlot: slotSpec	"Return a PhraseTileMorph representing a variable belonging to the player"	"The slot spec if a tuple with the following structure:		1	#slot		2	slot name		3	balloon help		4	slot type		5	#readOnly,# readWrite, or #writeOnly		6	getter receiver indicator		7	getter selector		8	setter receiver indicator		9	setter selector	NB:	all are symbols except #3, which is a string"	| r anArrow slotName getterButton ut cover inner |	r _ ViewerRow newRow		color: self color;		beSticky;		elementSymbol: (slotName _ slotSpec second);		wrapCentering: #center;		cellPositioning: #leftCenter.	r addMorphBack: (self slotHeaderFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: (self infoButtonFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	ut _ scriptedPlayer isUniversalTiles.	ut ifTrue: [inner _ self newTilesFor: scriptedPlayer getter: slotSpec.			cover _ (Morph new) color: Color transparent.			cover extent: inner fullBounds extent.			(getterButton _ cover copy) addMorph: cover; addMorphBack: inner.			cover on: #mouseDown send: #newMakeGetter:from:forPart:					to: self withValue: slotSpec]		ifFalse: [r addMorphBack: self tileForSelf bePossessive.			r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"			getterButton _ self getterButtonFor: slotName type: slotSpec fourth].	r addMorphBack: getterButton.	getterButton setBalloonText: slotSpec third.	(slotName == #isOverColor) ifTrue: [		self addIsOverColorDetailTo: r.		^ r	].	(slotName == #touchesA) ifTrue: [		self addTouchesADetailTo: r.		^ r	].	(slotSpec fifth == #readOnly) ifFalse:		[r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"		anArrow _ ut 			ifTrue: [self arrowSetterButton: #newMakeSetter:from:forPart:						args: slotSpec]			ifFalse: [self arrowSetterButton: #makeSetter:from:forPart:						args: (Array with: slotName with: slotSpec fourth)].		r addMorphBack: anArrow.		].	r addMorphBack: (AlignmentMorph new beTransparent).  "flexible spacer"	(#(colorSees playerSeeingColor copy touchesA) includes: slotName) ifFalse: 		[r addMorphBack: (self readoutFor: slotName type: slotSpec fourth readOnly: slotSpec fifth getSelector: slotSpec seventh putSelector: slotSpec ninth)].	anArrow ifNotNil: [anArrow step].	^ r! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'tk 1/26/2001 13:02'!newTilesFor: aPlayer getter: aSpec	| ms argTile argArray |	"Return universal tiles for a getter on this property.  Record who self is."	ms _ MessageSend receiver: aPlayer selector: aSpec seventh arguments: #().	aSpec second == #colorSees ifTrue: [		ms selector: #color:sees:.		argTile _ aPlayer tileForArgType: #color inViewer: nil.		argArray _ Array with: argTile colorSwatch color with: argTile colorSwatch color copy. 		ms arguments: argArray].	aSpec second == #isOverColor ifTrue: [		ms selector: #seesColor:.		argTile _ aPlayer tileForArgType: #color inViewer: nil.		ms arguments: (Array with: argTile colorSwatch color)].	aSpec second == #touchesA ifTrue: [		ms selector: #touchesA:.		argTile _ aPlayer tileForArgType: #player inViewer: nil.		ms arguments: (Array with: argTile actualObject)].	^ ms asTilesIn: aPlayer class! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'tk 1/26/2001 12:44'!newTilesFor: aPlayer setter: aSpec	| ms  argValue |	"Return universal tiles for a getter on this property.  Record who self is."	argValue _ aPlayer perform: (ScriptingSystem getterSelectorFor: aSpec second asSymbol).	ms _ MessageSend receiver: aPlayer selector: aSpec ninth arguments: (Array with: argValue).	^ ms asTilesIn: aPlayer class! !!MorphExtension methodsFor: 'copying' stamp: 'tk 1/28/2001 22:13'!veryDeepInner: deepCopier	| list values vv |	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  This is special code for the dictionary.  See DeepCopier."	super veryDeepInner: deepCopier.	locked _ locked veryDeepCopyWith: deepCopier. 	visible _ visible veryDeepCopyWith: deepCopier. 	sticky _ sticky veryDeepCopyWith: deepCopier. 	balloonText _ balloonText veryDeepCopyWith: deepCopier. 	balloonTextSelector _ balloonTextSelector veryDeepCopyWith: deepCopier. 	externalName _ externalName veryDeepCopyWith: deepCopier. 	isPartsDonor _ isPartsDonor veryDeepCopyWith: deepCopier. 	actorState _ actorState veryDeepCopyWith: deepCopier. 	player _ player veryDeepCopyWith: deepCopier.	"Do copy the player of this morph" 	eventHandler _ eventHandler veryDeepCopyWith: deepCopier.	"has its own restrictions"	otherProperties ifNotNil: [		otherProperties _ otherProperties copy.		list _ self copyWeakly.	"Properties whose values are only copied weakly"		values _ list collect: [:pp | 			vv _ otherProperties at: pp ifAbsent: [nil].			vv ifNotNil: [otherProperties at: pp put: nil]. "zap it"			vv].	 	otherProperties _ otherProperties veryDeepCopyWith: deepCopier.		1 to: list size do: [:ii | "put old values back"			(values at: ii) ifNotNil: [otherProperties at: (list at: ii) put: (values at: ii)]]].!]style[(25 153 10 1164)f1b,f1,f1LDeepCopier Comment;,f1! !!Player methodsFor: 'scripts-kernel' stamp: 'tk 1/27/2001 12:08'!commandPhraseFor: commandSpec inViewer: aViewer	"Translate commandSpec into a PhraseTileMorph.  Put appropriate balloon help into the phrase"	| aRow resultType cmd names argType argTile selfTile aPhrase balloonTextSelector stat inst ut |	names _ self class namedTileScriptSelectors.	resultType _ (commandSpec at: 1).	cmd _ (commandSpec at: 2).	(ut _ self isUniversalTiles)		ifTrue: [aPhrase _ (CategoryViewer new) newTilesFor: self command: commandSpec]		ifFalse: [commandSpec size = 3			ifTrue:				[aPhrase _ PhraseTileMorph new setOperator: cmd					type: resultType					rcvrType: #player]			ifFalse: "commandSpec size is four"				[argType _ commandSpec at: 4.				aPhrase _ PhraseTileMorph new setOperator: cmd					type: resultType					rcvrType: #player					argType: argType.				argTile _ self tileForArgType: argType inViewer: aViewer.				argTile position: aPhrase lastSubmorph position.				aPhrase lastSubmorph addMorph: argTile]].	(self slotInfo includesKey: cmd)		ifTrue: [balloonTextSelector _ #userSlot].	(self belongsToUniClass and:			[self class includesSelector: cmd])		ifTrue: [balloonTextSelector _ #userScript].	(ut ifTrue: [aPhrase submorphs second] ifFalse: [aPhrase operatorTile]) balloonTextSelector: 			(balloonTextSelector ifNil: [cmd]).	aPhrase markAsPartsDonor.	cmd == #emptyScript ifTrue:[		aPhrase setProperty: #newPermanentScript toValue: true.		aPhrase setProperty: #newPermanentPlayer toValue: self].	ut ifFalse: [		selfTile _ aViewer tileForSelf.		selfTile position: aPhrase firstSubmorph position.		aPhrase firstSubmorph addMorph: selfTile].	aRow _ ViewerRow newRow borderWidth: 0; color: aViewer color.	aRow elementSymbol: cmd asSymbol.	aRow addMorphBack: (ScriptingSystem tryButtonFor: aPhrase).	aRow addMorphBack: (Morph new extent: 4@2; beTransparent).	aRow addMorphBack: (aViewer infoButtonFor: cmd).	aRow addMorphBack: aPhrase.	(names includes: cmd) ifTrue:		[aPhrase userScriptSelector: cmd.		aPhrase beTransparent.		aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.		aRow addMorphBack: (stat _ (inst _ self scriptInstantiationForSelector: cmd) statusControlMorph).		inst updateStatusMorph: stat.].	aRow beSticky; disableDragNDrop.	^ aRow! !!Player methodsFor: 'scripts-kernel' stamp: 'tk 1/27/2001 12:05'!isUniversalTiles	| ww |	"Return true if I (my world) uses universal tiles.  This message can be called in places where the current World is not known, such as when writing out a project."	^ (ww _ costume world)	 "new tiles?"		ifNil: [costume valueOfProperty: #universalTiles ifAbsent: [false]				"cached there by ViewerFlapTab>>hibernate"]		ifNotNil: [ww valueOfProperty: #universalTiles ifAbsent: [false]]! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'tk 1/27/2001 12:19'!showSourceInScriptor	"Remove tile panes, if any, and show textual source instead"	| aCodePane |	self isTextuallyCoded ifFalse: [self becomeTextuallyCoded].		"Mostly to fix up grandfathered ScriptEditors"	self submorphs allButFirst do: [:m | m delete].	aCodePane _ MethodHolder 		isolatedCodePaneForClass: playerScripted class 		selector: scriptName.	aCodePane		hResizing: #spaceFill;		vResizing: #spaceFill;		minHeight: 100.	self 		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	self addMorphBack: aCodePane.	self fullBounds.	self 		listDirection: #topToBottom;		hResizing: #rigid;		vResizing: #rigid;		rubberBandCells: true;		minWidth: self width.	showingMethodPane _ true.	(self bestGuessOfCurrentWorld valueOfProperty: #universalTiles ifAbsent: [false]) 		ifTrue: [self useNewTilesNow].	"grab aCodePane, get model, and remove it" 	self currentWorld startSteppingSubmorphsOf: self! !!SyntaxMorph methodsFor: 'accessing' stamp: 'tk 1/26/2001 12:38'!actualObject	| sub |	"Who is self in these tiles?  Usually a Player."	(self nodeClassIs: VariableNode) ifTrue: [		(sub _ self findA: StringMorph) ifNil: [^ nil].		^ References at: sub contents asSymbol ifAbsent: [nil]].	(self nodeClassIs: LiteralNode) ifTrue: [		(sub _ self findA: StringMorph) ifNil: [^ nil].		^ Compiler evaluate: sub contents				for: nil				logged: false].	(sub _ self findA: SyntaxMorph) ifNil: [^ nil].	^ sub actualObject	"receiver"! !!SyntaxMorph methodsFor: 'layout' stamp: 'tk 1/26/2001 12:44'!try	"Evaluate me once"	(parseNode class == MessageNode) | (parseNode class == LiteralNode) ifFalse: [^ self].	^ Compiler evaluate: self decompile				for: self actualObject				logged: false.	"should do something to the player"! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'tk 1/27/2001 11:46'!hibernate	| ut |	"drop my viewer to save space when writing to the disk."	ut _ self world valueOfProperty: #universalTiles ifAbsent: [false].	referent submorphs do: 		[:m | (m isKindOf: Viewer) ifTrue: [			"Remember what kind of tiles we use"			ut ifTrue: [m scriptedPlayer costume setProperty: #universalTiles toValue: true].			m delete]].! !SyntaxMorph removeSelector: #veryDeepCopyWith:!