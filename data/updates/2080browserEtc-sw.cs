'From Squeak2.8alpha of 13 January 2000 [latest update: #2076] on 8 May 2000 at 3:14:54 pm'!"Change Set:		browserEtc-swDate:			8 May 2000Author:			Scott WallaceFurther steps on the road to harmonizing class-list and method-list menus in the various tools.Regarding command-key mappings, standardizes on cmd-i for inheritance and cmd-h for hierarchy (there had been some conflicting uses.)  Makes these short-cuts available uniformly.Makes method-list and class-list menus in ChangeSorter conform more closely with those in Browser, as to location, order, wording, and cmd-key mappings.Allows use of cmd-x over a class-list pane to request removal of the class, and cmd-x over a mesage-list pane to request removal of the method.  Though this may appear dangerous, remember that you are prompted for confirmation before actual removals takes place."!!HandMorph methodsFor: 'world menu commands' stamp: 'sw 5/8/2000 14:38'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	menu add: 'delete' action: #dismissMorph.	menu addLine.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	menu add: 'copy Postscript' target: argMorph action: #clipPostscript.	menu add: 'print PS to file...' target: argMorph action: #printPSToFile.	menu addLine.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	"Give the argument control over what should be done about fill styles"	argMorph addFillStyleMenuItems: menu hand: self.	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	World ifNil:		[menu add: 'inspect (in MVC)' action: #inspectMorph.		menu add: 'inspect' action: #inspectMorphInMorphic]		ifNotNil:		[menu add: 'inspect' action: #inspectMorph].	menu add: 'explore' target: argument action: #explore.	menu add: 'browse hierarchy' target: argument action: #browseHierarchy.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	(argMorph hasProperty: #resourceFilePath)		ifTrue: [((argMorph valueOfProperty: #resourceFilePath) endsWith: '.morph')				ifTrue: [menu add: 'save as resource' target: argMorph action: #saveAsResource].				menu add: 'update from resource' target: argMorph action: #updateFromResource]		ifFalse: [menu add: 'attach to resource' target: argMorph action: #attachToResource].	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 5/8/2000 02:16'!classListKey: aChar from: view 	"Respond to a Command key.  I am a model with a list of classes and a 	code pane, and I also have a listView that has a list of methods.  The 	view knows how to get the list and selection."	aChar == $f ifTrue: [^ self findMethod].	aChar == $r ifTrue: [^ self recent].	aChar == $h ifTrue: [^ self spawnHierarchy].	aChar == $x ifTrue: [^ self removeClass].	^ self messageListKey: aChar from: view! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 5/8/2000 02:59'!messageListKey: aChar from: view	"Respond to a Command key.  I am a model with a code pane, and I also	have a listView that has a list of methods.  The view knows how to get	the list and selection."	| sel class |	(class _ self selectedClassOrMetaClass) ifNil: [^ self arrowKey: aChar from: view].	sel _ self selectedMessageName.	aChar == $b ifTrue: [^ Browser fullOnClass: class selector: sel].	aChar == $N ifTrue: [^ self browseClassRefs].	aChar == $i ifTrue: [^ self methodHierarchy].	aChar == $h ifTrue: [^ self classHierarchy].	sel ifNotNil: 		[aChar == $m ifTrue: [^ Smalltalk browseAllImplementorsOf: sel].		aChar == $n ifTrue: [^ Smalltalk browseAllCallsOn: sel].		aChar == $v ifTrue: [^ self browseVersions].		aChar == $O ifTrue: [^ self openSingleMessageBrowser].		aChar == $x ifTrue: [^ self removeMessage]].	^ self arrowKey: aChar from: view! !!CodeHolder methodsFor: 'as yet unclassified' stamp: 'sw 5/8/2000 03:18'!spawnHierarchy	"Create and schedule a new class hierarchy browser on the currently selected class or meta."	| newBrowser aSymbol aBehavior messageCatIndex selectedClassOrMetaClass |	(selectedClassOrMetaClass _ self selectedClassOrMetaClass) ifNil: [^ self].	newBrowser _ HierarchyBrowser new initHierarchyForClass: selectedClassOrMetaClass.	(aSymbol _ self selectedMessageName) ifNotNil:		[aBehavior _ selectedClassOrMetaClass.		messageCatIndex _ aBehavior organization numberOfCategoryOfElement: aSymbol.		newBrowser messageCategoryListIndex: messageCatIndex + 1.		newBrowser messageListIndex:			((aBehavior organization listAtCategoryNumber: messageCatIndex)						indexOf: aSymbol)].	Browser openBrowserView: (newBrowser openSystemCatEditString: nil)		label: self selectedClassName , ' hierarchy'! !!CodeHolder methodsFor: 'as yet unclassified' stamp: 'sw 5/8/2000 14:24'!spawnProtocol	| aClassOrMetaclass |	"Create and schedule a new protocol browser on the currently selected class or meta."	(aClassOrMetaclass _ self selectedClassOrMetaClass) ifNotNil:       	[ProtocolBrowser openSubProtocolForClass: aClassOrMetaclass]! !!Browser methodsFor: 'class functions' stamp: 'sw 5/8/2000 14:25'!classListMenu: aMenu 	^ aMenu addList: #(		-		('browse full (b)'			browseMethodFull)		('browse hierarchy (h)'		spawnHierarchy)		('browse protocol'			spawnProtocol)		-		('printOut'					printOutClass)		('fileOut'					fileOutClass)		-		('show hierarchy'			hierarchy)		('show definition'			editClass)		('show comment'			editComment)		-		('inst var refs...'			browseInstVarRefs)		('inst var defs...'			browseInstVarDefs)		-		('class var refs...'			browseClassVarRefs)		('class vars'					browseClassVariables)		('class refs (N)'				browseClassRefs)		-		('rename class ...'			renameClass)		('copy class'				copyClass)		('remove class (x)'			removeClass)		-		('unsent methods'			browseUnusedMethods)		('unreferenced inst vars'	showUnreferencedInstVars)		('subclass template'			makeNewSubclass)		('sample instance'			ÃmakeSampleInstance)		-		('find method...'				findMethod)		('fetch documentation'		fetchClassDocPane))! !!Browser methodsFor: 'message functions' stamp: 'sw 5/8/2000 12:57'!messageListMenu: aMenu shifted: shifted	| aList |	aList _ shifted		ifFalse: [#(			('browse full (b)' 						browseMethodFull)			('browse hierarchy (h)'					classHierarchy)			('browse method (O)'					openSingleMessageBrowser)			-			('fileOut'								fileOutMessage)			('printOut'								printOutMessage)			-			('senders of... (n)'						browseSendersOfMessages)			('implementors of... (m)'					browseMessages)			('inheritance (i)'						methodHierarchy)			('versions (v)'							browseVersions)			-			('inst var refs...'						browseInstVarRefs)			('inst var defs...'						browseInstVarDefs)			('class var refs...'						browseClassVarRefs)			('class variables'						browseClassVariables)			('class refs (N)'							browseClassRefs)			-			('remove method (x)'					removeMessage)			-			('more...'								shiftedYellowButtonActivity))]		ifTrue: [#(			('method pane' 							makeIsolatedCodePane)			"('make a scriptor'						makeScriptor)"			('toggle diffing'							toggleDiffing)			('implementors of sent messages'			browseAllMessages)			-			('sample instance'						makeSampleInstance)			('inspect instances'						inspectInstances)			('inspect subinstances'					inspectSubInstances)			-			('remove from this browser'				removeMessageFromBrowser)			('change category...'					changeCategory)			-			('change sets with this method'			findMethodInChangeSets)			('revert to previous version'				revertToPreviousVersion)			('remove from current change set'		removeFromCurrentChanges)			('revert and forget'						revertAndForget)			-			('fetch documentation'					fetchDocPane)			('more...' 								unshiftedYellowButtonActivity))].	^ aMenu addList: aList! !!ChangeSorter methodsFor: 'class list' stamp: 'sw 5/8/2000 14:20'!classMenu: aMenu	"Set up aMenu for the class-lis."	parent ifNotNil:	[aMenu addList: #(  "These two only apply to dual change sorters"		('copy class chgs to other side'			copyClassToOther)			('move class chgs to other side'			moveClassToOther))].	aMenu addList: #(		('delete class chgs from this change set'	forgetClass)		-		('browse full (b)'						browseMethodFull)		('browse hierarchy (h)'					spawnHierarchy)		('browse protocol'						spawnProtocol)		-		('printOut'								printOutClass)		('fileOut'								fileOutClass)		-		('inst var refs...'						browseInstVarRefs)		('inst var defs...'						browseInstVarDefs)		('class var refs...'						browseClassVarRefs)		('class vars'								browseClassVariables)		('class refs (N)'							browseClassRefs)		-		('unsent methods'						browseUnusedMethods)		('unreferenced inst vars'				showUnreferencedInstVars)		('sample instance'						ÃmakeSampleInstance)).	^ aMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 5/8/2000 13:01'!messageMenu: aMenu shifted: shifted	"Could be for a single or double changeSorter"	shifted ifTrue: [^ self shiftedMessageMenu: aMenu].	parent ifNotNil:		[aMenu addList: #(			('copy method to other side'			copyMethodToOther)			('move method to other side'			moveMethodToOther))].	aMenu addList: #(			('delete method from change set'		forget)			-			('remove method from system (x)'	removeMessage)				-			('browse full (b)'					browseMethodFull)			('browse hierarchy (h)'				spawnHierarchy)			('browse method (O)'				openSingleMessageBrowser)			-			('fileOut'							fileOutMessage)			('printOut'							printOutMessage)			-			('senders of... (n)'					browseSendersOfMessages)			('implementors of... (m)'				browseMessages)			('inheritance (i)'					methodHierarchy)			('versions (v)'						browseVersions)			-			('more...'							shiftedYellowButtonActivity)).	^ aMenu! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 5/8/2000 15:13'!shiftedMessageMenu: aMenu	^ aMenu addList: #(		-		('method pane' 						makeIsolatedCodePane)		('implementors of sent messages'		browseAllMessages)		('change category...'				changeCategory)			-		('sample instance'					makeSampleInstance)		('inspect instances'					inspectInstances)		('inspect subinstances'				inspectSubInstances)		-		('change sets with this method'		findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion)		('revert and forget'					revertAndForget)		-		('more...' 							unshiftedYellowButtonActivity))! !!Debugger methodsFor: 'context stack menu' stamp: 'sw 5/8/2000 03:02'!contextStackMenu: aMenu shifted: shifted	^ shifted ifFalse: [aMenu labels: 'fullStack (f)restart (r)proceed (p)step (t)send (e)where (w)peel to first like thissenders of... (n)implementors of... (m)inheritance (i)versions (v)inst var refs...inst var defs...class var refs...class variablesclass refs (N)browse full (b)file out more...'	lines: #(7 11 13 16 18)	selections: #(fullStack restart proceed doStep send where peelToFirstbrowseSendersOfMessages browseMessages methodHierarchy browseVersionsbrowseInstVarRefs browseInstVarDefsbrowseClassVarRefs browseClassVariables browseClassRefsbrowseMethodFull fileOutMessageshiftedYellowButtonActivity)]	ifTrue: [aMenu labels: 'browse class hierarchybrowse classbrowse method (O)implementors of sent messageschange sets with this methodinspect instancesinspect subinstancesrevert to previous versionremove from current change setrevert and forgetmore...' 	lines: #(5 7 10)	selections: #(classHierarchy browseClass 		openSingleMessageBrowser browseAllMessages findMethodInChangeSets 		inspectInstances inspectSubInstances		revertToPreviousVersion 		removeFromCurrentChanges revertAndForget		unshiftedYellowButtonActivity)]! !Browser removeSelector: #spawnHierarchy!Browser removeSelector: #spawnProtocol!