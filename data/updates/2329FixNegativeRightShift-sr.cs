'From Squeak2.8alpha of 4 February 2000 [latest update: #2310] on 12 June 2000 at 1:00:34 pm'!"Change Set:		144FixNegativeRightShift-srDate:			10 June 2000Author:			Stephan RudlofUnifies semantics of *right* shifts for *negative* Integers.*Before* applying this changeset there is two-complement semantics for negative SmallIntegers and magnitude semantics for LargeNegativeIntegers.*After* applying this changeset we have unified- two-complement semantics (>>bitShift:). or- magnitude semanics (>>bitShiftOfMagnitude),for both.Note: in the other three cases- left shift positive Integer,- right shift positive Integer, and- left shift negative Integer,two-complement shifts and magnitude shifts produce the same - as Integer interpreted - result.Preconditions: LargeIntegersPlugin-update v1.1Best is *using* module LargeIntegers v1.1 (or higher) compiled from the plugin. You can check this by	LargeIntegersTest getModuleName.. Should return 'v1.1'; if it returns nil, then there is an earlier version or no module.This changeset is also compatible with the first 'official' module, which is compilable from changeset 2163LargeIntegersPlugin, but then shift operations are slower as before.Public methodsInteger>>anyBitOfMagnitudeFromTo:	Tests for any magnitude bits in the given interval;Integer>>bitShiftMagnitude:	Answer an Integer whose value (in magnitude representation) is  	the receiver's value (in magnitude representation) shifted left by  	the number of bits indicated by the argument. Negative arguments	shift right. Zeros are shifted in from the right in left shifts.Integer>>bitShift:	Answer an Integer whose value (in twos-complement representation) is  	the receiver's value (in twos-complement representation) shifted left by 	the number of bits indicated by the argument. Negative arguments  	shift right. Zeros are shifted in from the right in left shifts.Evaluate	LargePositiveInteger testTwoComplementRightShiftbefore and after applying this changeset."!!Integer methodsFor: 'bit manipulation' stamp: 'sr 6/9/2000 10:14'!anyBitOfMagnitudeFrom: start to: stopArg 	"Tests for any magnitude bits in the interval from start to stopArg."	| magnitude firstDigitIx lastDigitIx rightShift leftShift stop |	<primitive: 'primAnyBitFromTo' module:'LargeIntegers'>	start < 1 | (stopArg < 1) ifTrue: [^ self error: 'out of range'].	magnitude _ self abs.	stop _ stopArg min: magnitude highBit.	start > stop ifTrue: [^ false].	firstDigitIx _ start - 1 // 8 + 1.	lastDigitIx _ stop - 1 // 8 + 1.	rightShift _ (start - 1 \\ 8) negated.	leftShift _ 7 - (stop - 1 \\ 8).	firstDigitIx = lastDigitIx		ifTrue: 			[| digit mask | 			mask _ (255 bitShift: rightShift negated)						bitAnd: (255 bitShift: leftShift negated).			digit _ magnitude digitAt: firstDigitIx.			^ (digit bitAnd: mask)				~= 0].	((magnitude digitAt: firstDigitIx)		bitShift: rightShift)		~= 0 ifTrue: [^ true].	firstDigitIx + 1 to: lastDigitIx - 1 do: [:ix | (magnitude digitAt: ix)			~= 0 ifTrue: [^ true]].	((magnitude digitAt: lastDigitIx)		bitShift: leftShift)		~= 0 ifTrue: [^ true].	^ false! !!Integer methodsFor: 'bit manipulation' stamp: 'sr 6/9/2000 10:09'!bitShift: shiftCount 	"Answer an Integer whose value (in twos-complement representation) is  	the receiver's value (in twos-complement representation) shifted left by 	the number of bits indicated by the argument. Negative arguments  	shift right. Zeros are shifted in from the right in left shifts."	| magnitudeShift |	magnitudeShift _ self bitShiftMagnitude: shiftCount.	^ ((self negative and: [shiftCount negative])		and: [self anyBitOfMagnitudeFrom: 1 to: shiftCount negated])		ifTrue: [magnitudeShift - 1]		ifFalse: [magnitudeShift]! !!Integer methodsFor: 'bit manipulation' stamp: 'sr 6/9/2000 14:02'!bitShiftMagnitude: shiftCount 	"Answer an Integer whose value (in magnitude representation) is  	the receiver's value (in magnitude representation) shifted left by  	the number of bits indicated by the argument. Negative arguments	shift right. Zeros are shifted in from the right in left shifts."	| rShift |	<primitive: 'primDigitBitShiftMagnitude' module:'LargeIntegers'>	shiftCount >= 0 ifTrue: [^ self digitLshift: shiftCount].	rShift _ 0 - shiftCount.	^ (self		digitRshift: (rShift bitAnd: 7)		bytes: (rShift bitShift: -3)		lookfirst: self digitLength) normalize! !