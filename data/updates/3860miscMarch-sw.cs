'From Squeak3.1alpha of 28 February 2001 [latest update: #3868] on 20 March 2001 at 10:47:37 pm'!"Change Set:		miscMarch-swDate:			20 March 2001Author:			Scott Wallace¥ Makes the optional menu button in the optional button pane be an iconic one.¥ Elevates optionalButtonRow and optionalButtonPairs to CodeHolder, from Browser.¥ Extends Color.colorFrom: such that it can make reasonable sense if it is fed a collection of symbols, as in 'Color colorFrom: #(blue lighter lighter)'¥ Corrects two of the five occurrences of 'the the' in the image.¥ Removes a disused BookPageSorterMorph method.¥ Puts in a workaround for an intractable condition that can arise if a ChangeSorter somehow gets its myChangeSet set to nil"!!CodeHolder methodsFor: 'commands' stamp: 'sw 3/20/2001 01:00'!abbreviatedWordingFor: aButtonSelector	"Answer the abbreviated form of wording, from a static table which you're welcome to edit.  Answer nil if there is no entry -- in which case the long firm will be used on the corresponding browser button."	#(	(browseSendersOfMessages	   	'senders')	(browseMessages				'impls')	(browseVersions					'versions')	(methodHierarchy				'inher')	(classHierarchy					'hierch')	(browseInstVarRefs				'iVars')	(browseClassVarRefs				'cVars')	(offerMenu						'm')) do:		[:pair | pair first == aButtonSelector ifTrue: [^ pair second]].	^ nil! !!CodeHolder methodsFor: 'controls' stamp: 'sw 3/19/2001 11:24'!optionalButtonPairs	"Answer a tuple (formerly pairs) defining buttons, in the format:			button label			selector to send			help message"	| aList |	aList _ #(	('senders' 			browseSendersOfMessages	'browse senders of...')	('implementors'		browseMessages				'browse implementors of...')	('versions'			browseVersions				'browse versions')), 	(Preferences decorateBrowserButtons		ifTrue:			[{#('inheritance'		methodHierarchy 'browse method inheritancegreen: sends to supertan: has override(s)mauve: both of the above' )}]		ifFalse:			[{#('inheritance'		methodHierarchy			'browse method inheritance')}]),	#(	('hierarchy'		classHierarchy				'browse class hierarchy')	('inst vars'			browseInstVarRefs			'inst var refs...')	('class vars'			browseClassVarRefs			'class var refs...')).	^ aList! !!CodeHolder methodsFor: 'controls' stamp: 'sw 3/19/2001 11:39'!optionalButtonRow	"Answer a row of control buttons"	| aRow aButton aLabel |	aRow _ AlignmentMorph newRow.	aRow setNameTo: 'buttonPane'.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow wrapCentering: #center; cellPositioning: #leftCenter.	aRow clipSubmorphs: true.	(Smalltalk isMorphic and: [Preferences menuButtonInToolPane])		ifTrue:			[aRow addMorphFront: self menuButton].	self optionalButtonPairs  do:		[:tuple |			aButton _ PluggableButtonMorph				on: self				getState: nil				action: tuple second.			aButton 				useRoundedCorners;				hResizing: #spaceFill;				vResizing: #spaceFill;				onColor: Color transparent offColor: Color transparent.			aLabel _ Preferences abbreviatedBrowserButtons 				ifTrue: [self abbreviatedWordingFor: tuple second]				ifFalse: [nil].			aButton label: (aLabel ifNil: [tuple first asString]).			tuple size > 2 ifTrue: [aButton setBalloonText: tuple third].			aRow addMorphBack: aButton.			aRow addTransparentSpacerOfSize: (3 @ 0)].	self addSourceTogglesTo: aRow.	^ aRow! !!CodeHolder methodsFor: 'misc' stamp: 'sw 3/19/2001 11:08'!menuButton	"Answer a button that brings up a menu.  Useful when adding new features, but at present is between uses"	| aButton |	aButton _ IconicButton new target: self;		borderWidth: 0;		labelGraphic: (ScriptingSystem formAtKey: #Menu);		color: Color transparent; 		actWhen: #buttonDown;		actionSelector: #offerMenu;		yourself.	aButton setBalloonText: 'click here to get a menu with further options'.	^ aButton! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 3/19/2001 12:21'!updateIfNecessary	"Recompute all of my panes."	| newList |	self okToChange ifFalse: [^ self].	myChangeSet ifNil: [^ self].  "Has been known to happen though shouldn't"	myChangeSet isMoribund ifTrue: [^ self showChangeSet: Smalltalk changes].	newList _ self changeSetList.	(priorChangeSetList == nil or: [priorChangeSetList ~= newList])		ifTrue:			[priorChangeSetList _ newList.			self changed: #changeSetList].	self showChangeSet: myChangeSet! !!Color class methodsFor: 'instance creation' stamp: 'sw 3/19/2001 10:51'!colorFrom: parm	"Return an instantiated color from parm.  If parm is already a color, return it, else return the result of my performing it if it's a symbol or, if it is a list, it better be a list of symbols, the first of which is sent the to me and then the others of which are in turn sent to the prior result.  Else just return the thing"	| aColor |	(parm isKindOf: Color) ifTrue: [^ parm].	(parm isKindOf: Symbol) ifTrue: [^ self perform: parm].	((parm isKindOf: SequenceableCollection) and: [parm size > 0])		ifTrue:			[aColor _ self colorFrom: parm first.			parm doWithIndex:				[:sym :ind | ind > 1 ifTrue:					[aColor _ aColor perform: sym]].			^ aColor].	^ parm"Color colorFrom: #(blue darker)"! !!Morph class methodsFor: 'scripting' stamp: 'sw 3/20/2001 01:12'!additionsToViewerCategories	"Answer a list of (<categoryName> <list of category specs>) pairs that characterize the phrases this kind of morph wishes to add to various Viewer categories."	^ #(		(#basic (			(slot x 'The x coordinate' number readWrite player getX player setX:)			(slot y  	'The y coordinate' number readWrite	player 	getY player setY:)			(slot heading  'Which direction the object is facing.  0 is straight up' number readWrite player getHeading player setHeading:)			(command forward: 'Moves the object forward in the direction it is heading' number)			(command turn: 'Change the heading of the object by the specified amount' number)			(command beep: 'Make the specified sound' sound)))		"note: if you change the thing below you also need to change #tileScriptCommands."		(#scripts (			(command emptyScript 'an empty script'))		)		(#'color & border' (			(slot color 'The color of the object' color readWrite player getColor  player  setColor:)			(slot colorUnder 'The color under the center of the object' color readOnly player getColorUnder unused  unused )			(slot luminanceUnder 'The luminance under the center of the object' number readOnly player getLuminanceUnder unused unused)			(slot saturationUnder 'The saturation under the center of the object' number readOnly player getSaturationUnder unused unused)			(slot brightnessUnder 'The brightness under the center of the object' number readOnly player getBrightnessUnder unused unused)			(slot borderColor 'The color of the object''s border' color readWrite player getBorderColor player  setBorderColor:)			(slot borderWidth 'The width of the object''s border' number readWrite player getBorderWidth player setBorderWidth:)			(slot roundedCorners 'Whether corners should be rounded' boolean readWrite player getRoundedCorners player setRoundedCorners:)))		(geometry (			(slot  scaleFactor 'The factor by which the object is magnified' number readWrite player getScaleFactor player setScaleFactor:)			(slot  left   'The left edge' number readWrite player getLeft  player  setLeft:)			(slot right  'The right edge' number readWrite player getRight  player  setRight:)			(slot  top  'The top edge' number readWrite player getTop  player  setTop:) 			(slot  bottom  'The bottom edge' number readWrite player getBottom  player  setBottom:) 			(slot  width  'The width' number readWrite player getWidth  player  setWidth:)			(slot  height  'The height' number readWrite player getHeight  player  setHeight:) 			(slot x   'The x coordinate' number readWrite player  getX   player setX:)			(slot y   'The y coordinate' number readWrite player  getY  player setY:)			(slot heading  'Which direction the object is facing.  0 is straight up' number readWrite player getHeading  player setHeading:)			(slot distance 'The length of the vector connecting the origin to the object''s position' number readWrite player getDistance player setDistance:)			(slot theta 'The angle between the positive x-axis and the vector connecting the origin to the object''s position' number readWrite player getTheta player setTheta: )))		(miscellaneous (			(command doMenuItem: 'do the menu item' menu)			(command show 'make the object visible')			(command hide 'make the object invisible')			(command wearCostumeOf: 'wear the costume of...' player)			(command startScript: 'start the given script ticking' string)			(command stopScript: 'make the given script be "normal"' string)			(command pauseScript: 'make the given script be "paused"' string)			(command tellAllSiblings: 'send a message to all siblings' string)			(command fire 'trigger any and all of this object''s button actions')			(slot copy 'returns a copy of this object' player readOnly player getNewClone	 unused unused)			(slot elementNumber 'my index in my container' number readWrite player getIndexInOwner player setIndexInOwner:)))		(motion (			(slot x 'The x coordinate' number readWrite player getX player setX:)			(slot y  	'The y coordinate' number readWrite	player 	getY player setY:)			(slot heading  'Which direction the object is facing.  0 is straight up' number readWrite player getHeading player setHeading:)			(command forward: 'Moves the object forward in the direction it is heading' number)			(slot obtrudes 'whether the object sticks out over its container''s edge' boolean readOnly player getObtrudes unused unused) 			(command moveToward: 'move toward the given object' player) 			(command turn: 'Change the heading of the object by the specified amount' number)			(command bounce: 'bounce off the edge if hit' sound) 			(command wrap 'wrap off the edge if appropriate') 			(command followPath 'follow the yellow brick road') 			(command goToRightOf: 'place this object to the right of another' player)))		(#'pen use' (			(slot penColor 'the color of ink used by the pen' color readWrite player getPenColor player setPenColor:) 			(slot penSize 'the width of the pen' number readWrite player getPenSize player setPenSize:) 			(slot penDown 'whether the pen is currently down' boolean readWrite player getPenDown player setPenDown:)			(command clearOwnersPenTrails 'clear all pen trails in my containing playfield')))		(#tests (			(slot isOverColor 'whether any part of the object is over the given color' boolean	readOnly player seesColor: unused unused) 			(slot isUnderMouse 'whether the object is under the current mouse position' boolean readOnly	player getIsUnderMouse unused unused)			(slot colorSees	'whether the given color sees the given color' boolean readOnly	player color:sees:	unused	unused)			(slot touchesA	'whether I touch something that looks like...' boolean readOnly player touchesA:	unused	unused)			(slot obtrudes 'whether the object sticks out over its container''s edge' boolean readOnly player getObtrudes unused unused))))! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 3/20/2001 01:11'!changesMenu        "Build the changes menu for the world."        | menu |        menu _ self menu: 'changes...'.        self fillIn: menu from: {                { 'file out current change set' . { Utilities . #fileOutChanges}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'create new change set...' . { ChangeSorter . #newChangeSet}. 'Create a new change set and make it the current one.'}.                { 'browse changed methods' . { Smalltalk . #browseChangedMessages}.  'Open a message-list browser showing all methods in the current change set'}.                { 'check change set for slips' . { Smalltalk changes . #lookForSlips}.                                'Check the current change set for halts, references to the Transcript, etc., and if any such thing is found, open up a message-list browser detailing all possible slips.'}.                nil.                { 'simple change sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'dual change sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.               { 'find a change sorter (C)' . { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window'}.                nil.                { 'browse recent submissions' . { Utilities . #browseRecentSubmissions}.                                'Open a new recent-submissions browser.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'}.                { 'find recent submissions (R)' . { #myWorld . #openRecentSubmissionsBrowser:}.                                'Make an open recent-submissions browser be the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.			nil.                { 'recently logged changes...' . { ChangeList . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.'}.                { 'recent log file...' . { Smalltalk . #writeRecentToFile}.                                'Create a file holding the logged changes (going as far back as you wish), and open a window on that file.'}.                nil.                { 'save world as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.                nil.        }.        self projectForMyWorld isIsolated ifTrue: [                self fillIn: menu from: {                         { 'propagate changes upward' . {self. #propagateChanges}.                                'The changes made in this isolated project will propagate to projects up to the next isolation layer.'}.                }.        ] ifFalse: [                self fillIn: menu from: {                         { 'isolate changes of this project' . {self. #beIsolated}.                                'Isolate this project and its subprojects from the rest of the system.  Changes to methods here will be revoked when you leave this project.'}.                }.        ].        ^ menu! !Browser removeSelector: #optionalButtonPairs!Browser removeSelector: #optionalButtonRow!BookPageSorterMorph removeSelector: #forBook:!