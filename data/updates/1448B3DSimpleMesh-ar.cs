'From Squeak 2.5 of August 6, 1999 on 16 September 1999 at 2:55:22 pm'!"Change Set:		B3DSimpleMesh-arDate:			16 September 1999Author:			Andreas RaabThis change set contains a simple mesh class allowing for easier construction/manipulation of meshes."!B3DGeometry variableSubclass: #B3DSimpleMesh	instanceVariableNames: 'bBox '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon-3D-Meshes'!B3DGeometry variableSubclass: #B3DSimpleMeshFace	instanceVariableNames: 'normal '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon-3D-Meshes'!Object subclass: #B3DSimpleMeshVertex	instanceVariableNames: 'position normal color texCoord '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon-3D-Meshes'!!B3DIndexedMesh methodsFor: 'accessing' stamp: 'ar 9/16/1999 14:49'!vertexColors	^vtxColors! !!B3DIndexedMesh methodsFor: 'accessing' stamp: 'ar 9/16/1999 14:50'!vertexColors: aB3DColor4Array	vtxColors _ aB3DColor4Array! !!B3DIndexedMesh methodsFor: 'converting' stamp: 'ar 9/14/1999 22:24'!asSimpleMesh	"Convert the receiver into a very simple mesh representation"	| simpleFaces oldFace newVtx newFace newVertices |	simpleFaces _ WriteStream on: (Array new: faces size).	newVertices _ WriteStream on: (Array new: 10).	1 to: faces size do:[:i|		oldFace _ faces at: i.		newVertices reset.		oldFace readOnlyDo:[:pos|			newVtx _ B3DSimpleMeshVertex new.			newVtx position: (vertices at: pos).			vtxNormals == nil ifFalse:[newVtx normal: (vtxNormals at: pos)].			vtxColors == nil ifFalse:[newVtx color: (vtxColors at: pos)].			vtxTexCoords == nil ifFalse:[newVtx texCoord: (vtxTexCoords at: pos)].			newVertices nextPut: newVtx].		newFace _ B3DSimpleMeshFace withAll: newVertices contents.		simpleFaces nextPut: newFace].	^B3DSimpleMesh withAll: simpleFaces contents! !!B3DSimpleMesh methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:54'!boundingBox	^bBox ifNil:[bBox _ self computeBoundingBox]! !!B3DSimpleMesh methodsFor: 'accessing' stamp: 'ar 9/14/1999 22:53'!colorOfVertex: vtx	^vtx color! !!B3DSimpleMesh methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:55'!computeBoundingBox	| min max |	min _ max _ nil.	self vertexPositionsDo:[:vtx|		min ifNil:[min _ vtx] ifNotNil:[min _ min min: vtx].		max ifNil:[max _ vtx] ifNotNil:[max _ max max: vtx].	].	^Rectangle origin: min corner: max! !!B3DSimpleMesh methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:54'!faces	^self! !!B3DSimpleMesh methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:54'!faces: aCollection	^self shouldNotImplement! !!B3DSimpleMesh methodsFor: 'accessing' stamp: 'ar 9/14/1999 22:53'!normalOfVertex: vtx	^vtx normal! !!B3DSimpleMesh methodsFor: 'accessing' stamp: 'ar 9/14/1999 22:54'!texCoordOfVertex: vtx	^vtx texCoord! !!B3DSimpleMesh methodsFor: 'testing' stamp: 'ar 9/14/1999 22:53'!hasTextureCoords	1 to: self size do:[:i|		(self at: i) hasTextureCoords ifFalse:[^false]].	^true! !!B3DSimpleMesh methodsFor: 'testing' stamp: 'ar 9/14/1999 22:52'!hasVertexColors	1 to: self size do:[:i|		(self at: i) hasVertexColors ifFalse:[^false]].	^true! !!B3DSimpleMesh methodsFor: 'enumerating' stamp: 'ar 9/14/1999 22:02'!trianglesDo: aBlock	1 to: self size do:[:i|		(self at: i) trianglesDo: aBlock.	].! !!B3DSimpleMesh methodsFor: 'enumerating' stamp: 'ar 9/14/1999 21:56'!vertexPositionsDo: aBlock	1 to: self size do:[:i|		(self at: i) vertexPositionsDo: aBlock.	]! !!B3DSimpleMesh methodsFor: 'converting' stamp: 'ar 9/14/1999 22:26'!asIndexedMesh	"Convert the receiver into (the more compact) indexed representation"	^self asIndexedTriangleMesh! !!B3DSimpleMesh methodsFor: 'converting' stamp: 'ar 9/14/1999 22:17'!asIndexedTriangleMesh	"Convert the receiver into (the more compact) indexed triangle representation"	| map faces face vtx nrm tex col mesh |	map _ Dictionary new: (self size * 4). "Need some space for the vertices"	faces _ WriteStream on: (B3DIndexedTriangleArray new: self size).	self trianglesDo:[:tri|		tri assureVertexNormals.		face _ B3DIndexedTriangle					with: (map at: tri first ifAbsentPut:[map size + 1])					with: (map at: tri second ifAbsentPut:[map size + 1])					with: (map at: tri third ifAbsentPut:[map size + 1]).		faces nextPut: face].	faces _ faces contents.	vtx _ B3DVector3Array new: map size.	nrm _ B3DVector3Array new: map size.	self hasTextureCoords ifTrue:[tex _ B3DTexture2Array new: map size].	self hasVertexColors ifTrue:[col _ B3DColor4Array new: map size].	map keysAndValuesDo:[:vertex :idx|		vtx at: idx put: vertex position.		nrm at: idx put: vertex normal.		tex == nil ifFalse:[tex at: idx put: vertex texCoord].		col == nil ifFalse:[col at: idx put: vertex color].	].	mesh _ B3DIndexedTriangleMesh new.	mesh faces: faces.	mesh vertices: vtx.	mesh texCoords: tex.	mesh vertexColors: col.	mesh vertexNormals: nrm.	^mesh! !!B3DSimpleMesh methodsFor: 'converting' stamp: 'ar 9/14/1999 22:05'!asSimpleMesh	^self! !!B3DSimpleMesh methodsFor: 'rendering' stamp: 'ar 9/14/1999 22:27'!renderOn: aRenderer	1 to: self size do:[:i|		(self at: i) renderOn: aRenderer.	].! !!B3DSimpleMesh methodsFor: 'private' stamp: 'ar 9/14/1999 23:01'!withAll: aCollection	1 to: self size do:[:i|		self at: i put: (aCollection at: i).	].! !!B3DSimpleMesh class methodsFor: 'instance creation' stamp: 'ar 9/14/1999 23:00'!withAll: aCollection	^(self new: aCollection size) withAll: aCollection! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 22:50'!first	^self at: 1! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 22:50'!fourth	^self at: 4! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:51'!normal	^normal ifNil:[normal _ self computeFaceNormal].! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:53'!normal: aB3DVector3	normal _ aB3DVector3! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 22:50'!second	^self at: 2! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 22:50'!third	^self at: 3! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:53'!vertices	^self! !!B3DSimpleMeshFace methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:53'!vertices: aCollection	^self shouldNotImplement.! !!B3DSimpleMeshFace methodsFor: 'testing' stamp: 'ar 9/14/1999 23:05'!hasTextureCoords	1 to: self size do:[:i|		(self at: i) hasTextureCoords ifFalse:[^false]].	^true! !!B3DSimpleMeshFace methodsFor: 'testing' stamp: 'ar 9/14/1999 23:05'!hasVertexColors	1 to: self size do:[:i|		(self at: i) hasVertexColors ifFalse:[^false]].	^true! !!B3DSimpleMeshFace methodsFor: 'enumerating' stamp: 'ar 9/14/1999 22:01'!trianglesDo: aBlock	"Evaluate aBlock with triangular faces"	| face |	self size = 3		ifTrue:[^aBlock value: self].	3 to: self size do:[:i|		face _ self class with: (self at: 1) with: (self at: i-1) with: (self at: i).		aBlock value: face].! !!B3DSimpleMeshFace methodsFor: 'enumerating' stamp: 'ar 9/14/1999 21:56'!vertexPositionsDo: aBlock	1 to: self size do:[:i|		(self at: i) vertexPositionsDo: aBlock.	]! !!B3DSimpleMeshFace methodsFor: 'rendering' stamp: 'ar 9/14/1999 21:58'!renderOn: aRenderer	aRenderer drawPolygonAfter:[		aRenderer normal: self normal.		1 to: self size do:[:i| (self at: i) renderOn: aRenderer].	].! !!B3DSimpleMeshFace methodsFor: 'private' stamp: 'ar 9/14/1999 23:09'!computeFaceNormal	| d1 d2 nrml |	self size < 3 ifTrue:[^B3DVector3 zero].	d1 _ (self at: 1) position - (self at: 2) position.	d2 _ (self at: 3) position - (self at: 2) position.	d1 safelyNormalize.	d2 safelyNormalize.	nrml _ d1 cross: d2.	^nrml safelyNormalize! !!B3DSimpleMeshFace methodsFor: 'private' stamp: 'ar 9/14/1999 22:04'!with: v1 with: v2 with: v3	self at: 1 put: v1;		at: 2 put: v2;		at: 3 put: v3! !!B3DSimpleMeshFace methodsFor: 'private' stamp: 'ar 9/14/1999 22:04'!with: v1 with: v2 with: v3 with: v4	self at: 1 put: v1;		at: 2 put: v2;		at: 3 put: v3;		at: 4 put: v4! !!B3DSimpleMeshFace methodsFor: 'private' stamp: 'ar 9/14/1999 22:05'!withAll: aCollection	1 to: self size do:[:i|		self at: i put: (aCollection at: i).	].! !!B3DSimpleMeshFace methodsFor: 'misc' stamp: 'ar 9/14/1999 22:51'!assureVertexNormals	| vtx |	1 to: self size do:[:i|		vtx _ self at: i.		vtx normal == nil ifTrue:[			vtx _ vtx copy.			vtx normal: self normal.			self at: i put: vtx]].! !!B3DSimpleMeshFace class methodsFor: 'instance creation' stamp: 'ar 9/14/1999 22:03'!with: v0 with: v1 with: v2	^(self new: 3) with: v0 with: v1 with: v2! !!B3DSimpleMeshFace class methodsFor: 'instance creation' stamp: 'ar 9/14/1999 22:03'!with: v0 with: v1 with: v2 with: v3	^(self new: 4) with: v0 with: v1 with: v2 with: v3! !!B3DSimpleMeshFace class methodsFor: 'instance creation' stamp: 'ar 9/14/1999 22:03'!withAll: aCollection	^(self new: aCollection size) withAll: aCollection! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:46'!color	^color! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:46'!color: aB3DColor4	color _ aB3DColor4! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:45'!normal	^normal! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:46'!normal: aB3DVector3	normal _ aB3DVector3! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:45'!position	^position! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:45'!position: aB3DVector3	position _ aB3DVector3! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:46'!texCoord	^texCoord! !!B3DSimpleMeshVertex methodsFor: 'accessing' stamp: 'ar 9/14/1999 21:46'!texCoord: aB3DVector2	texCoord _ aB3DVector2! !!B3DSimpleMeshVertex methodsFor: 'testing' stamp: 'ar 9/14/1999 23:06'!hasTextureCoords	^texCoord notNil! !!B3DSimpleMeshVertex methodsFor: 'testing' stamp: 'ar 9/14/1999 23:06'!hasVertexColors	^color notNil! !!B3DSimpleMeshVertex methodsFor: 'comparing' stamp: 'ar 9/14/1999 21:48'!= aVertex	^self class == aVertex class		and:[self position = aVertex position			and:[self normal = aVertex normal				and:[self color = aVertex color					and:[self texCoord = aVertex texCoord]]]]! !!B3DSimpleMeshVertex methodsFor: 'comparing' stamp: 'ar 9/14/1999 21:49'!hash	"Hash is re-implemented because #= is re-implemented"	^(position hash bitXor: texCoord hash) bitXor:		(normal hash bitXor: color hash)! !!B3DSimpleMeshVertex methodsFor: 'enumerating' stamp: 'ar 9/14/1999 21:56'!vertexPositionsDo: aBlock	position vertexPositionsDo: aBlock.! !!B3DSimpleMeshVertex methodsFor: 'rendering' stamp: 'ar 9/14/1999 21:59'!renderOn: aRenderer	color == nil ifFalse:[aRenderer color: color].	texCoord == nil ifFalse:[aRenderer texCoord: texCoord].	normal == nil ifFalse:[aRenderer normal: normal].	aRenderer vertex: position.! !!B3DVertexTransformer methodsFor: 'public' stamp: 'ar 8/19/1999 16:31'!transformDirection: aVector3	| zero one |	zero _ B3DVector3 new.	one _ zero + aVector3.	zero _ self transformPosition: zero.	one _ self transformPosition: one.	^one - zero! !