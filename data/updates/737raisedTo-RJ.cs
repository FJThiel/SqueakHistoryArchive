'From Squeak 2.3 of January 14, 1999 on 15 March 1999 at 7:35:46 pm'!!Number methodsFor: 'mathematical functions' stamp: 'RJ 3/15/1999 19:35'!raisedTo: aNumber 	"Answer the receiver raised to aNumber."	aNumber isInteger ifTrue:		["Do the special case of integer power"		^ self raisedToInteger: aNumber].	self < 0 ifTrue:		[ self error: self printString, ' raised to a non-integer power' ].	aNumber = 0 ifTrue: [^ 1].		"Special case of exponent=0"	(self = 0) | (aNumber = 1) ifTrue:		[^ self].						"Special case of exponent=1"	^ (aNumber * self ln) exp		"Otherwise use logarithms"! !!Number methodsFor: 'mathematical functions' stamp: 'RJ 3/15/1999 19:32'!raisedToInteger: anInteger 	"Answer the receiver raised to the power anInteger where the argument 	must be a kind of Integer. This is a special case of raisedTo:."	anInteger isInteger ifFalse:		[^self error: 'raisedToInteger: only works for integral arguments'].	anInteger = 0 ifTrue: [^ 1].	(self = 0) | (anInteger = 1) ifTrue: [^ self].	anInteger > 1 ifTrue:		[^ (self * self raisedToInteger: anInteger // 2)					* (self raisedToInteger: anInteger \\ 2)].	^ (self raisedToInteger: anInteger negated) reciprocal! !!Float methodsFor: 'mathematical functions' stamp: 'RJ 3/15/1999 19:35'!raisedTo: aNumber	"Answer the receiver raised to aNumber."	aNumber isInteger ifTrue:		["Do the special case of integer power"		^ self raisedToInteger: aNumber].	self < 0.0 ifTrue:		[ self error: self printString, ' raised to a non-integer power' ].	0.0 = aNumber ifTrue: [^ 1.0].				"special case for exponent = 0.0"	(self= 0.0) | (aNumber = 1.0) ifTrue: [^ self].	"special case for self = 1.0"	^ (self ln * aNumber asFloat) exp			"otherwise use logarithms"! !