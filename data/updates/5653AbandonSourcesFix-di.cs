'From Squeak3.7alpha of ''11 September 2003'' [latest update: #5595] on 7 January 2004 at 3:42:09 pm'!"Change Set:		CompressedTempsDate:			5 January 2004Author:			Dan IngallsPrevents errors from occurring during the compression process.  The initial message now reflects the fact that some temp names (beyond about 400 characters) may be lost.  New logic retains as many temp names as possible when this limit is exceded."!!CompiledMethod methodsFor: 'source code management' stamp: 'di 1/7/2004 15:32'!copyWithTempNames: tempNames	| tempStr compressed |	tempStr _ String streamContents:		[:strm | tempNames do: [:n | strm nextPutAll: n; space]].	compressed := self qCompress: tempStr firstTry: true.	compressed ifNil:		["failure case (tempStr too big) will just decompile with tNN names"		^ self copyWithTrailerBytes: #(0 0 0 0)].	^ self copyWithTrailerBytes: compressed! !!CompiledMethod methodsFor: 'source code management' stamp: 'di 1/7/2004 15:32'!qCompress: str firstTry: firstTry	"A very simple text compression routine designed for method temp names.	Most common 12 chars get values 0-11 packed in one 4-bit nibble;	others get values 12-15 (2 bits) * 16 plus next nibble.	Last char of str must be a space so it may be dropped without	consequence if output ends on odd nibble.	Normal call is with firstTry == true."	| charTable odd ix oddNibble names shorterStr maybe |	charTable _  "Character encoding table must match qDecompress:"	' eatrnoislcm bdfghjkpquvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.	^ ByteArray streamContents:		[:strm | odd _ true.  "Flag for odd or even nibble out"		oddNibble _ nil.		str do:			[:char | ix _ (charTable indexOf: char) - 1.			(ix <= 12 ifTrue: [Array with: ix]				ifFalse: [Array with: ix//16+12 with: ix\\16])				do:				[:nibble | (odd _ odd not)					ifTrue: [strm nextPut: oddNibble*16 + nibble]					ifFalse: [oddNibble _ nibble]]].		strm position > 251 ifTrue:			["Only values 1...251 are available for the flag byte			that signals compressed temps. See the logic in endPC."			"Before giving up completely, we attempt to encode most of			the temps, but with the last few shortened to tNN-style names."			firstTry ifFalse: [^ nil "already tried --give up now"].			names _ str findTokens: ' '.			names size < 8 ifTrue: [^ nil  "weird case -- give up now"].			4 to: names size//2 by: 4 do:				[:i | shorterStr _ String streamContents:					[:s |					1 to: names size - i do: [:j | s nextPutAll: (names at: j); space].					1 to: i do: [:j | s nextPutAll: 't' , j printString; space]].				(maybe _ self qCompress: shorterStr firstTry: false) ifNotNil: [^ maybe]].			^ nil].		strm nextPut: strm position]"  | m s |  m _ CompiledMethod new.s _ 'charTable odd ix oddNibble '.^ Array with: s size with: (m qCompress: s) size	with: (m qDecompress: (m qCompress: s))"! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 1/7/2004 15:39'!abandonSources    "Smalltalk abandonSources"	"Replaces every method by a copy with the 4-byte source pointer 	replaced by a string of all arg and temp names, followed by its length.	These names can then be used to inform the decompiler.  See stats below"	"wod 11/3/1998: zap the organization before rather than after condensing changes."	 | oldCodeString argsAndTemps oldMethods newMethods m bTotal bCount |	(self confirm:'This method will preserve most temp names(up to about 400 characters) while allowingthe sources file to be discarded.-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning source code files, choose Yes.If you have any doubts, you may choose Noto back out with no harm done.')		==  true ifFalse: [^ self inform: 'Okay - no harm done'].	Smalltalk forgetDoIts.	oldMethods _ OrderedCollection new: CompiledMethod instanceCount.	newMethods _ OrderedCollection new: CompiledMethod instanceCount.	bTotal _ 0.  bCount _ 0.	self systemNavigation allBehaviorsDo: [: b | bTotal _ bTotal + 1].'Saving temp names for better decompilation...'	displayProgressAt: Sensor cursorPoint	from: 0 to: bTotal	during: [:bar |	self systemNavigation allBehaviorsDo:    "for test:  (Array with: Arc with: Arc class) do: "			[:cl |  bar value: (bCount _ bCount + 1).			cl selectors do: [:selector |				m _ cl compiledMethodAt: selector.				m fileIndex > 0 ifTrue:				[oldCodeString _ cl sourceCodeAt: selector.				argsAndTemps _ (cl compilerClass new					parse: oldCodeString in: cl notifying: nil)					tempNames.				oldMethods addLast: m.				newMethods addLast: (m copyWithTempNames: argsAndTemps)]]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	self systemNavigation allBehaviorsDo: [:b | b zapOrganization].	Smalltalk condenseChanges.	Preferences disable: #warnIfNoSourcesFile."In a system with 7780 methods, we got 83k of temp names, or around 100k with spaces between.  The order of letter frequency was eatrnoislcmdgpSub, with about 60k falling in the first 11.  This suggests that we could encode in 4 bits, with 0-11 beng most common chars, and 12-15 contributing 2 bits to the next nibble for 6 bits, enough to cover all alphaNumeric with upper and lower case.  If we get 3/4 in 4 bits and 1/4 in 8, then we get 5 bits per char, or about 38% savings (=38k in this case).Summary: about 13 bytes of temp names per method, or 8 with simple compression, plus 1 for the size.  This would be 5 bytes more than the current 4-byte trailer."! !CompiledMethod removeSelector: #qCompress:!