'From Squeak2.9alpha of 13 June 2000 [latest update: #2426] on 25 June 2000 at 4:49:09 pm'!"Change Set:		175AsortedCelesteFixes-dvfDate:			12-17 June 2000Author:			Daniel VainsencherFix a couple of bugs with adding attachments, pinpointed by Steve Elkins (blank line making attachment illegal, and premature linewrap making atttachment name unknown).Merge old changesets with mdr contribution (return the menu options parts... (for saving attachments) and edit category filter)--------Subvert the Custom Filter button to work in a new mode -When a message is already selected, Celeste will try to turn on that custom filter that would fit this message (showing just messages like it). If no message is selected, it'll work as usual, allowing the usual functions, including deleting filters and the like.--------Make the custom filter buttons smart - if a message is selected, they will only offer the filters that match, and if only one filter matches, they won't ask.cmd-c turns on a custom filter,cmd-m moves according to a custom filter."!!Celeste methodsFor: 'categories pane' stamp: 'dvf 6/12/2000 00:16'!categoryMenu: aMenu	"Answer the menu for the categories pane."	aMenu add: 'save'  action: #save.	aMenu balloonTextForLastItem: 'Save the database'.	aMenu addLine.	aMenu add: 'fetch mail'  action: #fetchMail.	aMenu balloonTextForLastItem: 'Fetch new mail from the server'.	aMenu add: 'send queued mail'  action: #sendQueuedMail.	aMenu balloonTextForLastItem: 'Send newly written mail'.	aMenu addLine.	aMenu add: 'add category'  action: #addCategory.	aMenu balloonTextForLastItem: 'Add a new organizational category'.	currentCategory notNil ifTrue: [			aMenu add: 'view all messages'  action: #viewAllMessages.			aMenu balloonTextForLastItem: 'View all the messages'.			].	"add extra commands if a normal category is selected"	((currentCategory notNil) and:	 [(currentCategory ~= '.all.') & (currentCategory ~= '.unclassified.')])		ifTrue: [			aMenu add: 'edit category filter'  action: #editCategoryFilter.			aMenu balloonTextForLastItem: 'Edit a custom filter for this category'.			aMenu add: 'rename category'  action: #renameCategory.			aMenu balloonTextForLastItem: 'Rename this organizational category'.			aMenu add: 'remove category'  action: #removeCategory.			aMenu balloonTextForLastItem: 'Remove this organizational category(NB: all messages will be safely available in other categories)'.			aMenu addLine.			aMenu add: 'import into category'  action: #importIntoCategory.			aMenu balloonTextForLastItem: 'Import messages from a Unix/Eudora file into this category'.			aMenu add: 'export category (Celeste)'  action: #exportCategory.			aMenu balloonTextForLastItem: 'Copy all messages from this category to another Celeste database'.			aMenu add: 'export category (Unix/Eudora)'  action: #exportCategoryUnix.			aMenu balloonTextForLastItem: 'Write a copy of all messages from this category to a Unix/Eudora file'.			].	aMenu addLine.	aMenu add: 'empty trash'  action: #emptyTrash.	aMenu balloonTextForLastItem: 'Completely remove all messages in the category .trash. from Celeste'.	aMenu add: 'salvage & compact'  action: #compact.	aMenu balloonTextForLastItem: 'Salvage any work done since the last database save & recover space used by old deleted messages.(This may be a bit slow)'.	aMenu add: 'find duplicates'  action: #findDuplicates.	aMenu balloonTextForLastItem: 'Find messages which are exact duplicates'.	aMenu addLine.	aMenu add: 'toggle headers'  action: #toggleSuppressHeaders.	aMenu balloonTextForLastItem: 'Show either a complete or an easy-to-read message header'.	aMenu addLine.	aMenu add: 'set user name'  action: #setUserName.	aMenu balloonTextForLastItem: 'Specify the ''From:'' user name for new messages'.	aMenu add: 'set cc: list'  action: #setCCList.	aMenu balloonTextForLastItem: 'Specify a cc: list that is added to each new message'.	aMenu add: 'set POP server'  action: #setPopServer.	aMenu balloonTextForLastItem: 'Specify which (POP3) server to check for new messages'.	aMenu add: 'set POP username'  action: #setPopUserName.	aMenu balloonTextForLastItem: 'Specify the username to use when checking for new messages'.	aMenu add: 'set SMTP server'  action: #setSmtpServer.	aMenu balloonTextForLastItem: 'Specify which (SMTP) server to use when sending messages'.	aMenu addLine.	"add toggle for whether to delete messages on download"	DeleteInboxAfterFetching		ifTrue: [			aMenu add: 'leave messages on server'  action: #keepMessagesOnServer.			aMenu balloonTextForLastItem: 'Don''t delete messages from the server when you retreive them (typically used for testing only)'.			]		ifFalse: [			aMenu add: 'don''t leave messages on server'  action: #deleteMessagesAfterFetching.			aMenu balloonTextForLastItem: 'Automatically remove messages from the server after you retreive them'.			].	^ aMenu! !!Celeste methodsFor: 'table of contents pane' stamp: 'dvf 6/17/2000 22:30'!tocKeystroke: aCharacter	aCharacter = Character backspace ifTrue: [self deleteMessage].	aCharacter asciiValue = 30 ifTrue: [self previousMessage].	aCharacter asciiValue = 31 ifTrue: [self nextMessage].	aCharacter = $c ifTrue: [self customFilterOn].	aCharacter = $m ifTrue: [self customFilterMove].! !!Celeste methodsFor: 'table of contents pane' stamp: 'dvf 6/12/2000 00:00'!tocMenu: aMenu 	"Answer the menu for the table of contents pane."	| messageSelected |	currentCategory ifNil: [^ nil].	messageSelected _ currentMsgID isNil not.	messageSelected		ifTrue: 			[aMenu add: 'delete' action: #deleteMessage.			aMenu balloonTextForLastItem: 'Move this message to the .trash. category'.			aMenu addLine.			aMenu add: 'compose' action: #compose.			aMenu balloonTextForLastItem: 'Compose a new message'.			aMenu add: 'reply' action: #reply.			aMenu balloonTextForLastItem: 'Reply to this message'.			aMenu add: 'forward' action: #forward.			aMenu balloonTextForLastItem: 'Forward this message'.			self currentMessage body isMultipart				ifTrue: 					[aMenu add: 'parts...' action: #partsMenu.					aMenu balloonTextForLastItem: 'Forward this message'].			aMenu addLine.			lastCategory isEmpty				ifFalse: 					[aMenu add: 'file -> ' , lastCategory action: #fileAgain.					aMenu balloonTextForLastItem: 'Add this message also to the category ' , lastCategory.					aMenu add: 'move -> ' , lastCategory action: #moveAgain.					aMenu balloonTextForLastItem: 'Move this message to the category ' , lastCategory.					aMenu addLine].			aMenu add: 'file' action: #fileMessage.			aMenu balloonTextForLastItem: 'Add this message also to a different category'.			aMenu add: 'move' action: #moveMessage.			aMenu balloonTextForLastItem: 'Move this message to a different category'.			aMenu add: 'remove' action: #removeMessage.			aMenu balloonTextForLastItem: 'Remove this message from this category(NB: the message will be safely available in another category)'.			aMenu addLine]		ifFalse: 			[aMenu add: 'compose' action: #compose.			aMenu balloonTextForLastItem: 'Compose a new message'.			aMenu addLine].	"The following are common for all menus"	aMenu add: 'file all' action: #fileAll.	aMenu balloonTextForLastItem: 'Add all messages also to another category'.	aMenu add: 'move all' action: #moveAll.	aMenu balloonTextForLastItem: 'Move all messages to another category'.	aMenu add: 'remove all' action: #removeAll.	aMenu balloonTextForLastItem: 'Remove all messages from this catgegory(NB: each message will be safely available in other categories)'.	aMenu add: 'delete all' action: #deleteAll.	aMenu balloonTextForLastItem: 'Move all messages to the .trash. category'.	aMenu addLine.	messageSelected		ifTrue: 			[aMenu add: 'other categories' action: #otherCategories.			aMenu balloonTextForLastItem: 'Check which other categories also contain this message'.			aMenu add: 'save message' action: #saveMessage.			aMenu balloonTextForLastItem: 'Save this message'.			aMenu addLine].	aMenu add: 'search' action: #search.	aMenu balloonTextForLastItem: 'Search all messages in this category for something'.	^ aMenu! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:19'!chooseFilterFor: msgID from: filterNames	| res |	res _ self filtersFor: msgID from: filterNames.	res isEmpty ifTrue:[^nil].	res size = 1 ifTrue: [^res anyOne].	^self selectFilterFrom: res ! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:28'!customFilterMove	"Select or define and activate a custom filter."	| filterList filterName msgList |	filterList _ CustomFilters keys select: [:e | self categoryList includes: e].	filterName _ currentMsgID ifNil: [self selectFilterFrom: filterList] ifNotNil: [self chooseFilterFor: currentMsgID from: filterList].	((filterName isNil or: [filterName isEmpty]) or: [filterName = 'none']) ifTrue: [^ self].	customFilterBlock _ self customFilterNamed: filterName.	msgList _ self filteredMessagesIn: currentCategory.	mailDB removeAll: msgList fromCategory: currentCategory.	mailDB fileAll: msgList inCategory: filterName.	customFilterBlock _ nil.	self updateTOC! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:06'!customFilterNamed: filterName ^self makeFilterFor: (CustomFilters at: filterName)! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:08'!customFilterOn	"Select or define and activate a custom filter."	| filterName filterList |filterList _ CustomFilters keys.	filterName _ currentMsgID ifNil: [self selectFilterFrom: filterList] ifNotNil: [self chooseFilterFor: currentMsgID from: filterList].	filterName ifNil: [^self ].	filterName = 'none' ifTrue: [^self customFilterOff].	filterName isEmpty ifTrue: [^self].	customFilterBlock _ self customFilterNamed: filterName.	self updateTOC.	self changed: #isCustomFilterOn.! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:22'!editFilterNamed: filterName filterExpr: oldExpr	| newDefinition |	newDefinition _ FillInTheBlank		request:'Enter a filter definition where "m" is the message being testing. The expression can send"fromHas:", "toHas:", "ccHas:", "subjectHas:", "participantHas:", or "textHas:" to m to test forinclusion of a string--or one of an array of strings--in a field. It can also test m''s timeand/or date and can combine several tests with logical operators. Examples:      m fromHas: ''johnm''                       -- messages from johnm     m participantHas: ''johnm''                -- messages from, to, or cc-ing johnm     m textHas: #(squeak smalltalk java)      -- messages with any of these words     m subjectHas: #(0 1 2 3 4 5 6 7 8 9)       -- numbers in lists treated as strings NOTE: "textHas:" is very slow, since it must read the message from disk.'		initialAnswer: oldExpr.	newDefinition isEmpty ifTrue: [^''].	CustomFilters at: filterName put: newDefinition.	^filterName! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:08'!filtersFor: msgID from: filterNames	| |	^filterNames select: [:e | (self customFilterNamed: e) value: (mailDB getTOCentry: msgID)].! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:06'!makeFilterFor: filterExpr ^Compiler evaluate: '[ :m | ', filterExpr, ']'.! !!Celeste methodsFor: 'filtering' stamp: 'dvf 6/17/2000 22:24'!selectFilterFrom: filters	| filterName filterList |	filterList _ filters asSortedCollection asOrderedCollection.	filterList addFirst: '(none)'.	filterList addLast: '<define new filter...>'.	filterList addLast: '<edit exising filter...>'.	filterList addLast: '<delete a filter...>'.	filterName _ (CustomMenu selections: filterList)			startUpWithCaption: 'Select a filter:'.	(filterName isNil or: [filterName isEmpty]) ifTrue: [ ^nil ].	filterName = '(none)' ifTrue: [^'none'].	filterName = '<delete a filter...>' ifTrue: [ ^self deleteFilter].	filterName = '<edit exising filter...>'		ifTrue: [filterName _ self editFilter]		ifFalse: [			filterName = '<define new filter...>'				ifTrue: [filterName _ self defineFilter]].	^filterName! !!MailMessage methodsFor: 'printing/formatting' stamp: 'dvf 6/14/2000 00:29'!asSendableText	"break lines in the given string into shorter lines"	| result start end pastHeader atAttachment width aString |	width _ 72.	aString _ self text.	result _ WriteStream on: (String new: aString size * 50 // 49).	pastHeader _ false.	atAttachment _ false.	aString asString		linesDo: 			[:line | 			line isEmpty ifTrue: [pastHeader _ true].			pastHeader				ifTrue: 					["(line beginsWith: '--==')						ifTrue: [atAttachment _ true]."					atAttachment						ifTrue: 							["at or after an attachment line; no more 							wrapping for the rest of the message"							result nextPutAll: line.							result cr]						ifFalse: [(line beginsWith: '>')								ifTrue: 									["it's quoted text; don't wrap it"									result nextPutAll: line.									result cr]								ifFalse: 									["regular old line.  Wrap it to multiple 									lines "									start _ 1.									"output one shorter line each time 									through this loop"									[start + width <= line size]										whileTrue: 											["find the end of the line"											end _ start + width - 1.											[end >= start and: [(line at: end + 1) isSeparator not]]												whileTrue: [end _ end - 1].											end < start ifTrue: ["a word spans the entire 												width!! "												end _ start + width - 1].											"copy the line to the output"											result nextPutAll: (line copyFrom: start to: end).											result cr.											"get ready for next iteration"											start _ end + 1.											(line at: start) isSeparator ifTrue: [start _ start + 1]].									"write out the final part of the line"									result nextPutAll: (line copyFrom: start to: line size).									result cr]]]				ifFalse: 					[result nextPutAll: line.					result cr]].	^ result contents! !!MailMessage methodsFor: 'multipart' stamp: 'dvf 6/11/2000 22:47'!asTextEncodingNewPart: aStream named: aName 	"Return a multipart mime-formatted text otherwise equivalent to this      	message, with the contents of aStream attached (base64 encoded)."	| strm |	strm _ WriteStream on: (String new: 100).	strm nextPutAll: self asMultipartText;	" cr; this bungled changeset mailouts. don't restore unless you know what you're doing."	 nextPutAll: 'Content-Type: application/octet-stream; name="' , aName , '"';	 cr;	 nextPutAll: 'Content-Disposition: attachment; filename="' , aName , '"';	 cr;	 nextPutAll: 'Content-Transfer-Encoding: base64';	 cr;	 cr.	Base64MimeConverter new dataStream: aStream;	 mimeStream: strm;	 mimeEncode.	strm cr; nextPutAll: '--' , self attachmentSeparator; cr.	^ strm contents! !Celeste removeSelector: #chooseFilterFor:!Celeste removeSelector: #filtersFor:!