'From Squeak2.8alpha of 4 February 2000 [latest update: #2005] on 22 April 2000 at 5:39:18 pm'!"Change Set:		1028CPPPluginEnh-rmfDate:			20 April 2000Author:			Robert M FureWARNING: I didn't test this enhancement --smaHere's a very small file-in that gives C++-generation capability to the CCodeGenerator and friends. I wrote it while developing a plug-in that interfaces to a C++ DLL. How does it differ from the ordinary mode? Mostly just two things:   1) Places generated code in a file with a .cpp suffix.   2) Puts extern ''C'' in the right places so that the plug-in's exported Routines have the names that the Squeak plug-in mechanism expects them to.To create a C++ plug-in, just do the usual thing, adding the trivial class method	isCPP		^ trueto your plug-in class (the one that actually gets translated into C/C++)."!Object subclass: #CCodeGenerator	instanceVariableNames: 'translationDict inlineList constants variables variableDeclarations methods variablesSetCache headerFiles isCPP '	classVariableNames: 'UseRightShiftForDivide '	poolDictionaries: ''	category: 'VMConstruction-Translation to C'!!CCodeGenerator methodsFor: 'public' stamp: 'RMF 3/27/2000 09:53'!initialize	translationDict _ Dictionary new.	inlineList _ Array new.	constants _ Dictionary new: 100.	variables _ OrderedCollection new: 100.	variableDeclarations _ Dictionary new: 100.	methods _ Dictionary new: 500.	self initializeCTranslationDictionary.	headerFiles _ OrderedCollection new.	isCPP _ false! !!CCodeGenerator methodsFor: 'public' stamp: 'sma 4/22/2000 12:33'!isCPP: aBoolean	isCPP _ aBoolean! !!CCodeGenerator methodsFor: 'C code generator' stamp: 'RMF 3/27/2000 09:55'!emitCFunctionPrototypesOn: aStream 	"Store prototype declarations for all non-inlined methods on the given stream."	| exporting |	aStream nextPutAll: '/*** Function Prototypes ***/'; cr.	isCPP ifTrue: [aStream nextPutAll: 'extern "C" {'; cr].	exporting _ false.	methods do: [:m | 		m export			ifTrue: [exporting					ifFalse: 						[aStream nextPutAll: '#pragma export on'; cr.						exporting _ true]]			ifFalse: [exporting					ifTrue: 						[aStream nextPutAll: '#pragma export off'; cr.						exporting _ false]].		m emitCFunctionPrototype: aStream generator: self.		aStream nextPutAll: ';'; cr].	exporting ifTrue: [aStream nextPutAll: '#pragma export off'; cr].	isCPP ifTrue: [aStream nextPutAll: '}'; cr]! !!InterpreterPlugin class methodsFor: 'accessing' stamp: 'RMF 3/27/2000 09:39'!isCPP	^ false! !!InterpreterPlugin class methodsFor: 'accessing' stamp: 'sma 4/22/2000 12:32'!moduleExtension	^ self isCPP ifTrue: ['.cpp'] ifFalse: ['.c']! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'sma 4/22/2000 12:29'!translate: fileName doInlining: inlineFlag 	"Time millisecondsToRun: [ 		FloatArrayPlugin translate: 'SqFloatArray.c' doInlining: true. 		Smalltalk beep]"	| cg theClass |	self initialize.	cg _ PluggableCodeGenerator new initialize.	cg isCPP: self isCPP.	theClass _ self.	[theClass == Object]		whileFalse: 			[cg addClass: theClass.			theClass declareCVarsIn: cg.			theClass _ theClass superclass].	cg storeCodeOnFile: fileName doInlining: inlineFlag! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'sma 4/22/2000 12:32'!translateDoInlining: inlineFlag 	"Time millisecondsToRun: [ 		FloatArrayPlugin translateDoInlining: true. 		Smalltalk beep]"	^ self translate: self moduleName , self moduleExtension doInlining: inlineFlag! !