'From Squeak 2.4c of May 10, 1999 on 11 June 1999 at 10:05:00 pm'!"Change Set:		smartMenuItems-swDate:			11 June 1999Author:			Scott WallaceAdds a new kind of MenuItemMorph that regularly checks to make sure its wording is still appropriate, and updates itself as necessary.This new facility is used to keep menu items up to date in the world Help and Windows menus and in the Playfield Options menus.A slight restructuring the Help menu is made -- the three most vital items are moved to the top.  And balloon help is provided for everything in the Help menu.MVC screen menus are changed to stay in synch with the morphic menus, and the relevant menu items in the mvc 'durable' menus are made self-updating as well."!MenuItemMorph subclass: #UpdatingMenuItemMorph	instanceVariableNames: 'wordingProvider wordingSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!SimpleButtonMorph subclass: #UpdatingSimpleButtonMorph	instanceVariableNames: 'wordingProvider wordingSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!Morph methodsFor: 'geometry' stamp: 'sw 6/11/1999 18:48'!center: aPoint	self position: (aPoint - (self extent // 2))! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/11/1999 17:14'!gridOnString	^ gridOn		ifTrue:			['turn gridding off']		ifFalse:			['turn gridding on']! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/11/1999 18:09'!helpMenu	"Build the help menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'help...') defaultTarget: self.	menu addStayUpItem.	menu add: 'about this system...' target: Smalltalk action: #aboutThisSystem.	menu balloonTextForLastItem: 'current version information.'.	menu add: 'update code from server' action: #absorbUpdatesFromServer.	menu balloonTextForLastItem: 'load latest code updates via the internet'.	menu add: 'preferences...' target: Preferences action: #openPreferencesInspector.	menu balloonTextForLastItem: 'view and change various options.'.	menu addLine.	menu add: 'command-key help' target: Utilities action: #openCommandKeyHelp.	menu balloonTextForLastItem: 'summary of keyboard shortcuts.'.	menu add: 'world menu help' target: self action: #worldMenuHelp.	menu balloonTextForLastItem: 'helps find menu items buried in submenus.'.	menu add: 'info about flaps' target: Utilities action: #explainFlaps.	menu balloonTextForLastItem: 'describes how to enable and use flaps.'.	menu add: 'font size summary' target: Utilities action: #fontSizeSummary.	menu balloonTextForLastItem: 'summary of names and sizes of available fonts.'.	menu add: 'useful expressions' target: Utilities action: #openStandardWorkspace.	menu balloonTextForLastItem: 'a window full of useful expressions.'.	menu add: 'view image imports' target: Smalltalk action: #viewImageImports.	menu balloonTextForLastItem: 'lets you look at graphical imports.'.	menu addLine.	menu add: 'full screen on' target: screenCtrl action: #fullScreenOn.	menu balloonTextForLastItem: 'puts you in full-screen mode, if not already there.'.	menu add: 'full screen off' target: screenCtrl action: #fullScreenOff.	menu balloonTextForLastItem: 'if in full-screen mode, takes you out of it.'.	menu add: 'set display depth...' action: #setDisplayDepth.	menu balloonTextForLastItem: 'choose how many bits per pixel.'.	menu add: 'set desktop color...' action: #changeBackgroundColor.	menu balloonTextForLastItem: 'choose a uniform color to use as desktop background.'.	menu add: 'use texture background' target: self world action: #setStandardTexture.	menu balloonTextForLastItem: 'apply a graph-paper-like texture background to the desktop.'.	menu addUpdating: #gridOnString action: #setGridding.	menu balloonTextForLastItem: 'turn gridding on or off.'.	menu addUpdating: #soundEnablingString target: Preferences action: #toggleSoundEnabling.	menu balloonTextForLastItem: 'turn sound on or off.'.	menu addLine.	menu add: 'set author initials...' target: screenCtrl action: #setAuthorInitials.	menu balloonTextForLastItem: 'supply initials to be used to identify the author of code and other content.'.	menu add: 'vm statistics' target: screenCtrl action: #vmStatistics.	menu balloonTextForLastItem: 'obtain some intriguing data about the vm.'.	menu add: 'space left' target: screenCtrl action: #garbageCollect.	menu balloonTextForLastItem: 'perform a full garbage-collection and report how many bytes of space remain in the image.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/11/1999 21:22'!scriptingMenu	"Build the scripting menu for the world."	| menu |	menu _ (MenuMorph entitled: 'authoring tools') defaultTarget: self.	menu addStayUpItem.	menu add: 'standard parts bin' target: self presenter action: #createStandardPartsBin.	menu balloonTextForLastItem: 'A bin of standard parts, from which you can drag out useful morphs.'.	menu add: 'custom parts bin' target: self presenter action: #launchCustomPartsBin.	menu balloonTextForLastItem: 'A customized bin of parts.  To define what the custom parts bin is, edit any existing parts bin and tell it to be saved as the custom parts bin.'.	menu add: 'view trash contents' target: self action: #openScrapsBook.	menu balloonTextForLastItem: 'The place where all your trashed morphs go.'.	menu add: 'empty trash can' target: Utilities action: #emptyScrapsBook.	menu balloonTextForLastItem: 'Empty out all the morphs that have accumulated in the trash can.'.	menu add: 'new scripting area' target: self action: #detachableScriptingSpace.	menu balloonTextForLastItem: 'A window set up for simple scripting.'.	menu addLine.	menu add: 'unlock locked objects' action: #unlockWorldContents.	menu balloonTextForLastItem: 'If any items on the world desktop are currently locked, unlock them.'.	menu add: 'unhide hidden objects' action: #showHiders.	menu balloonTextForLastItem: 'If any items on the world desktop are currently hidden, make them visible.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/11/1999 20:59'!windowsMenu	"Build the windows menu for the world."	| menu |	menu _ (MenuMorph entitled: 'windows...') defaultTarget: self.	menu addStayUpItem.	menu add: 'find window' action: #findWindow.	menu balloonTextForLastItem: 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'.	menu add: 'find changed browsers...' action: #findDirtyBrowsers.	menu balloonTextForLastItem: 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'.	menu add: 'find changed windows...' action: #findDirtyWindows.	menu balloonTextForLastItem: 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'.	menu addLine.	menu add: 'collapse all windows' action: #collapseAll.	menu add: 'expand all windows' action: #expandAll.	menu addLine.	menu add: 'delete unchanged windows' action: #closeUnchangedWindows.	menu balloonTextForLastItem: 'Deletes all windows that do not have unsaved text edits.'.	menu add: 'delete non-windows' action: #deleteNonWindows.	menu balloonTextForLastItem: 'Deletes all non-window morphs lying on the world.'.	menu add: 'delete both of the above' action: #cleanUpWorld.	menu balloonTextForLastItem: 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'.	menu addLine.	menu addUpdating: #staggerPolicyString target: Preferences action: #toggleWindowPolicy.	menu balloonTextForLastItem: 'stagger: new windows positioned so you can see a portion of each one.tile: new windows positioned so that they do not overlap others, if possible.'.	menu add: 'flaps...' action: #offerFlapsMenu.	menu balloonTextForLastItem: 'Offers a menu of options relating to the use of flaps.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/11/1999 17:43'!worldMenuHelp	| aList aMenu cnts explanation |	"HandMorph new worldMenuHelp"	aList _ OrderedCollection new.	#(helpMenu changesMenu openMenu debugMenu remoteMenu scriptingMenu windowsMenu) 		with:	#('help' 'changes' 'open' 'debug' 'remote' 'authoring tools' 'windows')do:		[:sel :title | aMenu _ self perform: sel.			aMenu items do:				[:it | (((cnts _ it contents) = 'keep this menu up') or: [cnts size = 0])					ifFalse: [aList add: (cnts, ' - ', title)]]].	aList _ aList asSortedCollection: [:a :b | a asLowercase < b asLowercase].	explanation _ ReadWriteStream on: ''.	aList do:		[:anItem | explanation nextPutAll: anItem; cr].	(StringHolder new contents: explanation contents)		openLabel: 'Where in the world menu is...'! !!MenuMorph methodsFor: 'construction' stamp: 'sw 6/11/1999 16:49'!addUpdating: aWordingSelector action: aSymbol	self addUpdating: aWordingSelector target: defaultTarget selector: aSymbol argumentList: EmptyArray! !!MenuMorph methodsFor: 'construction' stamp: 'sw 6/11/1999 17:26'!addUpdating: aWordingSelector target: aTarget action: aSymbol	self addUpdating: aWordingSelector target: aTarget selector: aSymbol argumentList: EmptyArray! !!MenuMorph methodsFor: 'construction' stamp: 'sw 6/11/1999 16:46'!addUpdating: wordingSelector target: target selector: aSymbol argumentList: argList	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object with the given arguments. If the selector takes one more argument than the number of arguments in the given list, then the triggering event is supplied as as the last argument.  In this variant, the wording of the menu item is obtained by sending the wordingSelector to the target"	| item |	item _ UpdatingMenuItemMorph new		target: target;		selector: aSymbol;		wordingProvider: target wordingSelector: wordingSelector;		arguments: argList asArray.	self addMorphBack: item.! !!MenuMorph methodsFor: 'control' stamp: 'sw 6/11/1999 21:08'!popUpAdjacentTo: rightOrLeftPoint forHand: hand from: sourceItem	"Present this menu at the given point under control of the given hand."	| selectedItem delta tryToPlace selectedOffset |	hand world startSteppingSubmorphsOf: self.	popUpOwner _ sourceItem.	originalEvent _ hand lastEvent.	selectedItem _ self items detect: [:each | each == lastSelection]							ifNone: [self items first].	self fullBounds.  "ensure layout is current"	selectedOffset := selectedItem position - self position.	tryToPlace :=		[ :where :mustFit |		self position: where - selectedOffset.		delta _ self fullBoundsInWorld amountToTranslateWithin: hand worldBounds.		(delta x = 0 or: [mustFit]) ifTrue:			[delta = (0@0) ifFalse: [self position: self position + delta].			sourceItem owner owner addMorphFront: self.			^ self]].	tryToPlace 		value: rightOrLeftPoint first value: false;		value: rightOrLeftPoint last  - (self width @ 0) value: false;		value: rightOrLeftPoint first value: true	! !!MenuMorph methodsFor: 'control' stamp: 'sw 6/11/1999 17:24'!popUpAt: aPoint forHand: hand 	"Present this menu at the given point under control of the given hand."	| selectedItem i yOffset sub delta |	popUpOwner _ hand.	originalEvent _ hand lastEvent.	selectedItem _ self items detect: [:each | each == lastSelection]				ifNone: [self items isEmpty						ifTrue: [^ self]						ifFalse: [self items first]].	"Note: items may not be laid out yet (I found them all to be at 0@0), 	so have to add up heights of items above the selected item."	i _ 0.	yOffset _ 0.	[(sub _ self submorphs at: (i _ i + 1)) == selectedItem]		whileFalse: [yOffset _ yOffset + sub height].	self position: aPoint - (2 @ (yOffset + 8)).	delta _ self bounds amountToTranslateWithin: hand worldBounds.	delta = (0 @ 0) ifFalse: [self position: self position + delta].	hand world addMorphFront: self; startSteppingSubmorphsOf: self.	hand newMouseFocus: selectedItem.	self changed! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 21:20'!addPlayfieldMenuItems: menu hand: aHandMorph	| subMenu hasPalette |	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'save on file...' action: #saveOnFile.	subMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	(self valueOfProperty: #classAndMethod) ifNotNil: [		subMenu add: 'broadcast as documentation' action: #saveDocPane].	subMenu add: 'round up strays' action: #roundUpStrays.	subMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout)		(resizeToFitString		toggleResizeToFit)		(indicateCursorString	toggleIndicateCursor)		(isPartsBinString		toggleIsPartsBin)		(mouseOverHalosString	toggleMouseOverHalos)		(autoExpansionString	toggleAutomaticPhraseExpansion)		(showThumbnailString	toggleAlwaysShowThumbnail)) do:			[:duplet |				subMenu addUpdating: duplet first action: duplet second]. 	(self hasProperty: #alwaysShowThumbnail) ifTrue:		[subMenu add: 'set thumbnail height...' action: #setThumbnailHeight].	(hasPalette _ self standardPalette ~~ nil) ifTrue:		[subMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing].	subMenu addLine.	hasPalette ifTrue: [subMenu add: 'clear palette area' action: #clearPaletteArea].	(self resizeToFit & self indicateCursor & self autoLineLayout) ifFalse:		[subMenu add: 'behave like a Holder' action: #behaveLikeHolder].	self backgroundSketch ifNotNil: [subMenu add: 'delete background painting' action: #deleteBackgroundPainting].	presenter ifNil:		[subMenu add: 'make detachable' action: #makeDetachable].	subMenu addLine.	subMenu add: 'use standard texture' action: #setStandardTexture.	subMenu add: 'make graph paper...' action: #makeGraphPaper.	subMenu addTitle: 'Playfield options'.	menu add: 'playfield options...' subMenu: subMenu.! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 16:55'!autoExpansionString	^ (self hasProperty: #automaticPhraseExpansion)		ifTrue:			['stop automatic-phrase-expansion']		ifFalse:			['start automatic-phrase-expansion']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 16:58'!autoLineLayoutString	^ self autoLineLayout		ifTrue:			['stop doing auto-line-layout']		ifFalse:			['start doing auto-line-layout']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 17:05'!autoViewingString	^ self automaticViewing		ifTrue:			['stop automatic viewing']		ifFalse:			['start automatic viewing']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 16:54'!indicateCursorString	^ self indicateCursor		ifTrue:			['stop indicating cursor']		ifFalse:			['start indicating cursor']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 16:55'!isPartsBinString	^ self isPartsBin		ifTrue:			['stop being a parts bin']		ifFalse:			['start being a parts bin']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 15:05'!mouseOverHalosString	^ self wantsMouseOverHalos		ifTrue:			['stop using mouse-over halos']		ifFalse:			['start using mouse-over halos']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 16:57'!resizeToFitString	^ self resizeToFit		ifTrue:			['stop doing resize-to-fit']		ifFalse:			['start doing resize-to-fit']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/11/1999 16:56'!showThumbnailString	^( self hasProperty: #alwaysShowThumbnail)		ifTrue:			['stop showing thumbnails']		ifFalse:			['start showing thumbnails']! !!Preferences class methodsFor: 'misc' stamp: 'sw 6/11/1999 17:20'!soundEnablingString	^ (self valueOfFlag: #disableSounds)		ifTrue:			['turn sound on']		ifFalse:			['turn sound off']! !!Preferences class methodsFor: 'misc' stamp: 'sw 6/11/1999 20:53'!staggerPolicyString	^ (self valueOfFlag: #reverseWindowStagger)		ifTrue: ['switch to tiling']		ifFalse: ['switch to staggering']! !!Preferences class methodsFor: 'misc' stamp: 'sw 6/11/1999 17:17'!toggleSoundEnabling	self togglePreference: #disableSounds! !!Preferences class methodsFor: 'misc' stamp: 'sw 6/11/1999 20:49'!toggleWindowPolicy	self togglePreference: #reverseWindowStagger! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 6/11/1999 20:25'!bitCachingString	^ StandardSystemView cachingBits		ifTrue: ['don''t save bits (compact)']		ifFalse: ['save bits (fast)']! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 6/11/1999 20:50'!changeWindowPolicy	Preferences toggleWindowPolicy! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 6/11/1999 20:01'!durableHelpMenu 	| aMenu selectionList labelList targetList i wordingList colorPattern |	aMenu _ self helpMenu.	selectionList _ aMenu selections.	labelList _ (1 to: selectionList size) collect:		[:ind | aMenu labelString lineNumber: ind].	targetList _  (1 to: selectionList size) collect: [:ind | self].	(i _ labelList indexOf: 'keep this menu up') > 0 ifTrue:		[selectionList _ selectionList copyReplaceFrom: i to: i with: Array new.		labelList _ labelList copyReplaceFrom: i to: i with: Array new.		targetList _ targetList copyReplaceFrom: i to: i with: Array new].	colorPattern _ #(lightRed lightGreen lightBlue lightYellow lightGray lightCyan lightMagenta lightOrange).	wordingList _ selectionList collect:		[:aSelection |			(aSelection == #soundOnOrOff) ifTrue: [#soundEnablingString] ifFalse: [nil]].	^ Utilities windowMenuWithLabels: labelList colorPattern: colorPattern  targets: targetList selections: selectionList wordingSelectors: wordingList title: 'Help'! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 6/11/1999 20:28'!durableWindowMenu 	| aMenu selectionList labelList targetList i wordingList colorPattern |	aMenu _ self windowMenu.	selectionList _ aMenu selections.	labelList _ (1 to: selectionList size) collect:		[:ind | aMenu labelString lineNumber: ind].	targetList _  (1 to: selectionList size) collect: [:ind | self].	(i _ labelList indexOf: 'keep this menu up') > 0 ifTrue:		[selectionList _ selectionList copyReplaceFrom: i to: i with: Array new.		labelList _ labelList copyReplaceFrom: i to: i with: Array new.		targetList _ targetList copyReplaceFrom: i to: i with: Array new].	colorPattern _ #(lightRed lightGreen lightBlue lightYellow lightGray lightCyan lightMagenta lightOrange).	wordingList _ selectionList collect:		[:aSelection |			(#(fastWindows changeWindowPolicy) includes: aSelection)				ifFalse:					[nil]				ifTrue:					[aSelection == #fastWindows						ifFalse:							[#staggerPolicyString]						ifTrue:							[#bitCachingString]]].	^ Utilities windowMenuWithLabels: labelList colorPattern: colorPattern  targets: targetList selections: selectionList wordingSelectors: wordingList title: 'windows'! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 6/11/1999 20:01'!soundEnablingString	^ Preferences soundEnablingString! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 6/11/1999 20:23'!staggerPolicyString	^ Preferences staggerPolicyString! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 6/11/1999 18:02'!helpMenu 	"Answer the help menu to be put up as a screen submenu"	^ SelectionMenu labelList:		#(	'keep this menu up'			'about this system'			'update code from server'			'edit preferences...'			'command-key help'			'font size summary'			'useful expressions'			'view image imports'			'full screen on'			'full screen off'			'set display depth...'			'set desktop color...' ) , 			(Array with: ((Preferences valueOfFlag: #disableSounds)							ifTrue: ['turn sound on']							ifFalse: ['turn sound off'])) ,		#(	'set author initials...'			'vm statistics'			'space left')		lines: #(1 4 8 13)		selections: #(durableHelpMenu aboutThisSystem absorbUpdatesFromServereditPreferences  openCommandKeyHelp fontSizeSummary openStandardWorkspace viewImageImportsfullScreenOn fullScreenOff setDisplayDepth setDesktopColor soundOnOrOff  setAuthorInitials vmStatistics garbageCollect)"ScreenController new helpMenu startUp"! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 6/11/1999 20:25'!windowMenu	"Answer a menu for windows-related items.  "	^ SelectionMenu labelList:		#(	'keep this menu up'			'find window...'			'find changed browsers...'			'find changed windows...'			'collapse all windows'			'expand all windows'			'close unchanged windows' ) , 			(Array				with: self bitCachingString				with: self staggerPolicyString)		lines: #(1 4 7)		selections: #(durableWindowMenufindWindow chooseDirtyBrowser chooseDirtyWindowcollapseAll expandAll closeUnchangedWindowsfastWindows changeWindowPolicy)"ScreenController new windowMenu startUp"! !!SimpleButtonMorph methodsFor: 'accessing' stamp: 'sw 6/11/1999 18:45'!fitContents	| aMorph aCenter |	aCenter _ self center.	submorphs size = 0 ifTrue: [^ self].	aMorph _ submorphs first.	self extent: aMorph extent + (borderWidth + 6).	self center: aCenter.	aMorph position: aCenter - (aMorph extent // 2)! !!SimpleButtonMorph methodsFor: 'accessing' stamp: 'sw 6/11/1999 18:40'!labelString: aString	| existingLabel |	(existingLabel _ self findA: StringMorph)		ifNil:			[self label: aString]		ifNotNil:			[existingLabel contents: aString.			self fitContents]! !!UpdatingMenuItemMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/11/1999 15:21'!step	| newString |	newString _ wordingProvider perform: wordingSelector.	newString = contents ifFalse: [self contents: newString].! !!UpdatingMenuItemMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/11/1999 18:31'!stepTime	^ 1200! !!UpdatingMenuItemMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/11/1999 15:12'!wordingProvider: aProvider wordingSelector: aSelector	wordingProvider _ aProvider.	wordingSelector _ aSelector! !!UpdatingSimpleButtonMorph commentStamp: 'sw 6/11/1999 18:27' prior: 0!Adds to SimpleButtonMorph the ability to keep its own wording up to date by send a given message (indicated by its wordingSelector) to a given object (indicated by its wordingTarget, and normally the same as its target.)!!UpdatingSimpleButtonMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/11/1999 20:05'!step	| newString |	newString _ wordingProvider perform: wordingSelector.	newString = self label ifFalse: [self labelString: newString; changed].! !!UpdatingSimpleButtonMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/11/1999 20:32'!stepTime	^ 800! !!UpdatingSimpleButtonMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/11/1999 18:30'!wordingSelector: aSelector	wordingSelector _ aSelector.	wordingProvider ifNil: [wordingProvider _ target]! !!Utilities class methodsFor: 'durable menus' stamp: 'sw 6/11/1999 20:12'!windowMenuWithLabels: labelList colorPattern: colorPattern  targets: targetList selections: selectionList wordingSelectors: wordingList title: aTitle	| aWorld colorList  pos delta aButton  rightmost widthToUse wordingSelector |	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	aWorld _ PasteUpMorph newWorldForProject: nil.	colorList _  (1 to: labelList size) collect:		[:ind | Color colorFrom: (colorPattern at: (ind \\ colorPattern size + 1))].				pos _ 4 @ 6.	delta _ 0 @ 30.	rightmost _ 0.	1 to: labelList size do:		[:index |			wordingSelector _ wordingList at: index.			aButton _ wordingSelector				ifNil:					[SimpleButtonMorph new]				ifNotNil:					[UpdatingSimpleButtonMorph new].			aButton label: (labelList at: index); 				color: (colorList at: index); 				target: (targetList at: index);				actionSelector: (selectionList at: index);				position: pos.			wordingSelector ifNotNil: [aButton wordingSelector: wordingSelector].			rightmost _ rightmost max: aButton right.			pos _ pos + delta.			aWorld addMorphBack: aButton].	widthToUse _ rightmost + 10.	aWorld startSteppingSubmorphsOf: aWorld.	aWorld submorphs do:		[:m | m position: (((widthToUse - m width) // 2) @ m position y)].	aWorld setProperty: #initialExtent toValue: (widthToUse @ (aButton bottom + 10)).	aWorld openWithTitle: aTitle cautionOnClose: false! !