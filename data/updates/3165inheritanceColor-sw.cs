'From Squeak2.9alpha of 5 August 2000 [latest update: #3223] on 4 January 2001 at 4:04:09 pm'!"Change Set:		inheritanceColor-swDate:			4 January 2001Author:			Scott WallaceRecolors the 'inheritance' button seen in optional morphic button panes to draw attention to the two primary reasons why the user might be interested in using such a button, namely that the current method sends to super and that the current method has overrides in one or more subclasses, according to the following coloring scheme (which cries out for aesthetic improvement):	green: sends to super	brown: has override(s)	blue: sends to super *and* has override(s)NB: this change set has a postscript."!!CodeHolder methodsFor: 'commands' stamp: 'sw 12/28/2000 19:47'!decorateForInheritance	"Check to see if the currently-viewed method has a super send or an override, and if so, change screen feedback"	| aWindow aColor aPane aButton |	((aWindow _ self containingWindow) isKindOf: SystemWindow) ifFalse: [^ self].	(aPane _ aWindow submorphNamed: 'buttonPane') ifNil: [^ self].	aButton _ aPane submorphThat: [:m | (m isKindOf: PluggableButtonMorph) and:		[m actionSelector == #methodHierarchy]] ifNone: [^ self].	aColor _ currentCompiledMethod		ifNil:			[Color transparent]		ifNotNil:			[currentCompiledMethod sendsToSuper				ifTrue:					[self isThereAnOverride						ifTrue:							[Color blue muchLighter]						ifFalse:							[Color green muchLighter ]]				ifFalse:					[self isThereAnOverride						ifTrue:							[Color tan lighter]						ifFalse:							[Color transparent]]].	aButton offColor: aColor! !!CodeHolder methodsFor: 'commands' stamp: 'sw 12/28/2000 16:43'!isThereAnOverride	"Answer whether any subclass of my selected class implements my selected selector"	| aName aList aClass |	(aName _ self selectedMessageName) ifNil: [^ false].	aList _ Smalltalk allImplementorsOf: aName.	aClass _ self selectedClassOrMetaClass.	aList do:		[:element | MessageSet parse: element toClassAndSelector:			[:cl :sel | (cl inheritsFrom: aClass) ifTrue: [^ true]]].	^ false! !!CodeHolder methodsFor: 'categories' stamp: 'sw 12/28/2000 19:48'!containingWindow	"Answer the window that holds the receiver.  The dependents technique is odious and may not be airtight."	^ self dependents detect:		[:d | (d isKindOf: SystemWindow orOf: StandardSystemView) and: [d model == self]] ifNone: [nil]! !!Browser methodsFor: 'initialize-release' stamp: 'sw 1/4/2001 15:55'!buildOptionalButtonsView	"Build the view for the optional buttons (mvc)"	| aView buttonView offset bWidth bHeight first previousView |	aView _ View new model: self.	bHeight _ self optionalButtonHeight.	aView window: (0 @ 0 extent: 200 @ bHeight).	offset _ 0.	first _ true.	previousView _ nil.	self optionalButtonPairs do: [:pair |		buttonView _ PluggableButtonView on: self			getState: nil			action: pair second.		buttonView			label: pair first asParagraph.		bWidth _ buttonView label boundingBox width // 2.  "Need something more deterministic."		buttonView window: (offset@0 extent: bWidth@bHeight).		offset _ offset + bWidth + 0.		first			ifTrue:				[aView addSubView: buttonView.				first _ false]			ifFalse:				[buttonView borderWidthLeft: 1 right: 0 top: 0 bottom: 0.				aView addSubView: buttonView toRightOf: previousView]. 		previousView _ buttonView].	^ aView! !!Browser methodsFor: 'initialize-release' stamp: 'sw 12/28/2000 17:42'!optionalButtonPairs	"Answer a tuple (formerly pairs) defining buttons, in the format:			button label			selector to send			help message"	^ #(	('senders' 			browseSendersOfMessages	'browse senders of...')	('implementors'		browseMessages				'browse implementors of...')	('versions'			browseVersions				'browse versions')	('inheritance'		methodHierarchy			'browse method inheritancegreen: sends to supertan: has override(s)mauve: both of the above')	('hierarchy'		classHierarchy				'browse class hierarchy')	('inst vars'			browseInstVarRefs			'inst var refs...')	('class vars'			browseClassVarRefs			'class var refs...'))! !!Browser methodsFor: 'message list' stamp: 'sw 12/28/2000 16:48'!messageListIndex: anInteger 	"Set the selected message selector to be the one indexed by anInteger."	messageListIndex _ anInteger.	editSelection _ 		anInteger = 0			ifTrue: [#newMessage]			ifFalse: [#editMessage].	contents _ nil.	self changed: #messageListIndex.	"update my selection"	self contentsChanged.	self decorateForInheritance! !!Debugger methodsFor: 'initialize' stamp: 'sw 1/3/2001 12:23'!optionalButtonRow	"Answer a button pane affording the user one-touch access to certain functions; the pane is given the formal name 'buttonPane' by which it can be retrieved by code wishing to send messages to widgets residing on the pane"	| aRow aButton |	aRow _ AlignmentMorph newRow beSticky.	aRow setNameTo: 'buttonPane'.	aRow clipSubmorphs: true.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightRed; borderWidth: 1; borderColor: Color red darker.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs do:		[:pair |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: pair second.				aButton useRoundedCorners;					label: pair first asString;					askBeforeChanging: true;					onColor: Color transparent offColor: Color transparent.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!MessageSet methodsFor: 'message list' stamp: 'sw 12/28/2000 18:15'!messageListIndex: anInteger 	"Set the index of the selected item to be anInteger."	messageListIndex _ anInteger.	contents _ 		messageListIndex ~= 0			ifTrue: [self selectedMessage]			ifFalse: [''].	self changed: #messageListIndex.	 "update my selection"	editSelection _ #editMessage.	self contentsChanged.	(messageListIndex ~= 0 and: [autoSelectString notNil])		ifTrue: [self changed: #autoSelect].	self decorateForInheritance! !!PluggableButtonMorph methodsFor: 'accessing' stamp: 'sw 12/28/2000 16:17'!actionSelector	"Answer the receiver's actionSelector"	^ actionSelector! !!PluggableButtonMorph methodsFor: 'accessing' stamp: 'sw 12/28/2000 16:19'!offColor: colorWhenOff	"Set the fill colors to be used when this button is off."	self onColor: onColor offColor: colorWhenOff! !"Postscript:"Utilities replaceBrowserInToolsFlap.!