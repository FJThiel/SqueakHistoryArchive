'From Squeak 2.4b of April 23, 1999 on 1 May 1999 at 5:27:09 am'!"Change Set:		WeakSymbolsDate:			1 May 1999Author:			Andreas RaabChanges symbols to be stored in weak arrays."!!Collection methodsFor: 'enumerating' stamp: 'ar 5/1/1999 05:00'!do: aBlock without: anItem	"Enumerate all elements in the receiver.	Execute aBlock for those elements that are not equal to the given item"	^self do:[:el| anItem = el ifFalse:[aBlock value: el]].! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'ar 5/1/1999 05:01'!do: aBlock without: anItem	"Enumerate all elements in the receiver.	Execute aBlock for those elements that are not equal to the given item"	"Refer to the comment in Collection|do:."	1 to: self size do:		[:index | anItem = (self at: index) ifFalse:[aBlock value: (self at: index)]]! !!String methodsFor: 'converting' stamp: 'ar 5/1/1999 05:01'!correctAgainst: wordList continuedFrom: oldCollection	"Like correctAgainst:.  Use when you want to correct against several lists, give nil as the first oldCollection, and nil as the last wordList."	^ wordList isNil		ifTrue: [ self correctAgainstEnumerator: nil					continuedFrom: oldCollection ]		ifFalse: [ self correctAgainstEnumerator: [ :action | wordList do: action without: nil]					continuedFrom: oldCollection ]! !!Symbol class methodsFor: 'instance creation' stamp: 'ar 5/1/1999 05:15'!intern: aString 	"Answer a unique Symbol whose characters are those of aString."	| ascii table mainTable index sym numArgs symbol lastNilIndex |	ascii _ (aString at: 1) asciiValue.	aString size = 1 ifTrue: [ascii < 128 ifTrue: 		[^ SingleCharSymbols at: ascii + 1]].	table _ ((ascii >= "$a asciiValue" 97) and:		[(ascii <= "$z asciiValue" 122) and:		[(numArgs _ aString numArgs) >= 0]])			ifTrue: [(mainTable _ SelectorTables									at: (numArgs + 1 min: SelectorTables size))						at: (index _ ascii - "($a asciiValue - 1)" 96)]			ifFalse: [(mainTable _ OtherTable)						at: (index _ aString stringhash \\ OtherTable size + 1)].	1 to: table size do: [:i |		symbol _ table at: i.		symbol isNil 			ifTrue:[lastNilIndex _ i]			ifFalse:[(aString size = symbol size and:[aString = symbol])						ifTrue:[^symbol]]	].	sym _ (aString isMemberOf: Symbol)		ifTrue: [aString]	"putting old symbol in new table"		ifFalse: [(Symbol new: aString size) string: aString]. "create a new one"	lastNilIndex isNil		ifTrue:[mainTable at: index put: (table copyWith: sym)]		ifFalse:[table at: lastNilIndex put: sym].	^sym! !!Symbol class methodsFor: 'private' stamp: 'ar 5/1/1999 05:21'!fastRehash		"Symbol fastRehash"	"Rebuild the hash table, reclaiming unreferenced Symbols.	Note: This requires the symbols to be held in weak arrays."	| count oldCount |	oldCount _ Symbol instanceCount.	"Since we've got all the symbols in weak arrays do a big GC"	Smalltalk garbageCollect.	"And get rid of any nil entries"	SelectorTables _ SelectorTables collect:[:table| 			table collect:[:subTable| subTable copyWithout: nil]].	OtherTable _ OtherTable collect:[:table| table copyWithout: nil].	count _ Symbol instanceCount.	^(oldCount - count) printString , ' reclaimed'! !!Symbol class methodsFor: 'private' stamp: 'ar 5/1/1999 04:56'!hasInterned: aString ifTrue: symBlock 	"Answer with false if aString hasnt been interned (into a Symbol), 	otherwise supply the symbol to symBlock and return true."	| table ascii numArgs symbol |	ascii _ (aString at: 1) asciiValue.	aString size = 1 ifTrue: [ascii < 128 ifTrue: 		[symBlock value: (SingleCharSymbols at: ascii + 1).		^true]].	table _ ((ascii >= "$a asciiValue" 97) and:		[(ascii <= "$z asciiValue" 122) and:		[(numArgs _ aString numArgs) >= 0]])			ifTrue: [(SelectorTables at: (numArgs + 1 min: SelectorTables size))						at: ascii - "($a asciiValue - 1)" 96]			ifFalse: [OtherTable at: aString stringhash \\ OtherTable size + 1].	1 to: table size do: [:i | 		symbol _ table at: i.		(symbol notNil and:[aString size = symbol size and: [aString = symbol]]) ifTrue: [			symBlock value: symbol.			^true]	].	^false! !!Symbol class methodsFor: 'private' stamp: 'ar 5/1/1999 05:21'!rehash		"Symbol rehash"	"Rebuild the hash table, reclaiming unreferenced Symbols."	^SelectorTables first first class == (Smalltalk at: #WeakArray ifAbsent:[nil])		ifTrue:[self fastRehash]		ifFalse:[self slowRehash].! !!Symbol class methodsFor: 'private' stamp: 'ar 5/1/1999 05:19'!slowRehash		"Symbol slowRehash"	"Rebuild the hash table, reclaiming unreferenced Symbols."	| count oldCount |	SelectorTables _ (1 to: 6) collect: [ :i | (1 to: 26) collect: [ :j | Array new: 0 ] ].	OtherTable _ (1 to: 51) collect: [:k | Array new: 0].	oldCount _ Symbol instanceCount.	count _ 0.	'Rebuilding Symbol Tables...'		displayProgressAt: Sensor cursorPoint		from: 0 to: oldCount		during:			[:bar |			Smalltalk garbageCollect.			Symbol allInstancesDo:				[ :sym |				self intern: sym.				bar value: (count _ count + 1)]].	^ (oldCount - count) printString , ' reclaimed'! !!Symbol class methodsFor: 'private' stamp: 'ar 5/1/1999 05:11'!useArrayTables	"Symbol useArrayTables"	"Use arrays for referencing the symbols"	SelectorTables _ SelectorTables collect:[:table| 			table collect:[:subTable| (subTable as: Array) copyWithout: nil]].	OtherTable _ OtherTable collect:[:table| (table as: Array) copyWithout: nil].! !!Symbol class methodsFor: 'private' stamp: 'ar 5/1/1999 05:09'!useWeakArrayTables "Symbol useWeakArrayTables"	"Use weak arrays for referencing the symbols"	SelectorTables _ SelectorTables collect:[:table| 			table collect:[:subTable| subTable as: WeakArray]].	OtherTable _ OtherTable collect:[:table| table as: WeakArray].! !"Postscript:Make the system use weak arrays for the symbols"Symbol useWeakArrayTables.!