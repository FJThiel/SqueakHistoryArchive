'From Squeak 2.4b of April 23, 1999 on 2 June 1999 at 10:39:26 pm'!"Change Set:		FlashProjectZoom-arDate:			2 June 1999Author:			Andreas RaabThis change set adds Flash animations for project transitions. To use a Flash animation:* Load it into Squeak* Open an inspector on the Player (NOT the window)* Create a (directed) transition by using	FlashPlayerMorph>>beTransitionFrom: srcProjectName	FlashPlayerMorph>>beTransitionTo: dstProjectName	FlashPlayerMorph>>beTransitionFrom: srcProjectName to: dstProjectName.(the first two versions use the current project as reference).For adding a project target [project target: an object that is filled with the project being entered in the transition] in a flash animation select the FlashCharacter to use (which must contain a single character with a single bitmap fill) and choose 'add project target' from its red halo menu.Some additional notes:1) A Flash player which is used as a transition will be removed from its window (it has to live in different worlds) - the best thing is to actually delete the window after assigning the project zooms.2) The flash player is *NOT* automatically resized to be full-screen unless #beFullScreenTransition: true is sent to it.3) To get the transition between two projects use:	FlashPlayerMorph transitionFrom: srcProjectName.	FlashPlayerMorph transitionTo: dstProjectName.	FlashPlayerMorph transitionFrom: srcProjectName to: dstProjectName.	E.g., do something like		(FlashPlayerMorph transitionTo:'TestProject') openInWorld.4) The project transitions are only shown if the preference #showProjectZoom is set to true.5) For best effects, set the background color of the player to transparent, e.g.,	(FlashPlayerMorph transitionTo:'TestProject') color: Color transparent."!!FlashMorph methodsFor: 'classification' stamp: 'ar 6/2/1999 03:15'!isFlashShape	^false! !!FlashCharacterMorph methodsFor: 'menu' stamp: 'ar 6/2/1999 04:17'!addCustomMenuItems: aMenu hand: aHand	super addCustomMenuItems: aMenu hand: aHand.	aMenu add:'add project target' action: #addProjectTarget.	aMenu add:'remove project target' action: #removeProjectTarget.! !!FlashCharacterMorph methodsFor: 'menu' stamp: 'ar 6/2/1999 04:18'!addProjectTarget	| player fill |	player _ self flashPlayer.	player ifNil:[^self inform:'I must be in a flash player for this'].	(submorphs size = 1 and:[submorphs first isFlashShape])		ifFalse:[^self inform:'Cannot use me as a project target'].	fill _ submorphs first fillForProjectTarget.	fill ifNil:[^self inform:'No suitable fill style found'].	player addFillForProjectTarget: fill.! !!FlashCharacterMorph methodsFor: 'menu' stamp: 'ar 6/2/1999 04:18'!removeProjectTarget	| player fill |	player _ self flashPlayer.	player ifNil:[^self inform:'I must be in a flash player for this'].	(submorphs size = 1 and:[submorphs first isFlashShape])		ifFalse:[^self inform:'Cannot use me as a project target'].	fill _ submorphs first fillForProjectTarget.	fill ifNil:[^self inform:'No suitable fill style found'].	player removeFillForProjectTarget: fill.! !!FlashPlayerMorph methodsFor: 'geometry' stamp: 'ar 6/2/1999 02:41'!containsPoint: aPoint	^self bounds containsPoint: aPoint! !!FlashPlayerMorph methodsFor: 'menu' stamp: 'ar 6/2/1999 06:11'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'open sorter' action: #openSorter.	aCustomMenu add: 'make controls' action: #makeControls.	"aCustomMenu add:'Toggle deferring' action: #toggleDeferred."	"aCustomMenu addLine.	aCustomMenu add: 'make controls' action: #makeControls.	aCustomMenu addLine.	aCustomMenu add: 'Low Quality' action: #drawFastest.	aCustomMenu add: 'Med Quality' action: #drawMedium.	aCustomMenu add: 'High Quality' action: #drawNicest."	"aCustomMenu add: 'make slider' action: #makeSlider."	aCustomMenu addLine.! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 04:56'!addFillForProjectTarget: aFillStyle	| fillStyles |	fillStyles _ self valueOfProperty: #projectTargetFills ifAbsent:[IdentityDictionary new].	(fillStyles includesKey: aFillStyle) ifTrue:[^self].	fillStyles at: aFillStyle put: aFillStyle form.	self setProperty: #projectTargetFills toValue: fillStyles.	self updateProjectFillsFrom: Project current.	self changed.! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 05:59'!beFullScreenTransition: aBoolean	"Make the receiver a full-screen transition if requested"	self setProperty: #fullScreenTransition toValue: true.! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 05:37'!beTransitionFrom: srcProjectName	^self beTransitionFrom: srcProjectName to: Project current name! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 05:35'!beTransitionFrom: srcProjectName to: dstProjectName	"Make the receiver the animation between the two projects"	| srcProject dstProject |	srcProject _ Project named: srcProjectName.	dstProject _ Project named: dstProjectName.	(dstProject projectParameters at: #flashTransition ifAbsentPut:[IdentityDictionary new])		at: srcProject put: self.! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 05:38'!beTransitionTo: dstProjectName	^self beTransitionFrom: Project current name to: dstProjectName! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 06:00'!playProjectEntering: aProject	"Enter the given project"	World ifNil:[^self]. "Not in MVC"	self stopPlaying.	owner ifNotNil:[		self stopStepping.		owner privateRemoveMorph: self.		owner _ nil].	self updateProjectFillsFrom: aProject.	self frameNumber: 1.	self loopFrames: false.	(self valueOfProperty: #fullScreenTransition ifAbsent:[false])		ifTrue:[self bounds: World bounds].	World addMorphFront: self.	self startStepping.	self startPlaying.	[playing] whileTrue:[World doOneCycleNow].	self stopPlaying.	self stopStepping.	owner privateRemoveMorph: self.	owner _ nil.	Display deferUpdates: true.	World fullDrawOn: (FormCanvas on: Display).	Display deferUpdates: false.! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 04:43'!removeFillForProjectTarget: aFillStyle	| fillStyles |	fillStyles _ self valueOfProperty: #projectTargetFills ifAbsent:[^self].	aFillStyle form: (fillStyles at: aFillStyle ifAbsent:[^self]).	fillStyles removeKey: aFillStyle.	self updateProjectFillsFrom: Project current.	self changed.! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'ar 6/2/1999 05:00'!updateProjectFillsFrom: aProject	"Update all the project target fills from the given project"	| fillStyles projImage |	fillStyles _ self valueOfProperty: #projectTargetFills ifAbsent:[^self].	fillStyles isEmpty ifTrue:[^self].	projImage _ aProject imageFormOfSize: Display extent depth: 8.	fillStyles keysDo:[:fs| fs form: projImage].	"Note: We must issue a full GC here for cleaning up the old bitmaps"	Smalltalk garbageCollect.! !!FlashPlayerMorph class methodsFor: 'project transition' stamp: 'ar 6/2/1999 06:07'!transitionFrom: srcProjectName	^self transitionFrom: srcProjectName to: Project current name! !!FlashPlayerMorph class methodsFor: 'project transition' stamp: 'ar 6/2/1999 06:07'!transitionFrom: srcProjectName to: dstProjectName	"Return the transition between the two projects"	| srcProject dstProject |	srcProject _ Project named: srcProjectName.	dstProject _ Project named: dstProjectName.	^dstProject projectParameters at: #flashTransition ifPresent:[:dict|		dict at: srcProject ifAbsent:[nil]].! !!FlashPlayerMorph class methodsFor: 'project transition' stamp: 'ar 6/2/1999 06:08'!transitionTo: dstProjectName	^self transitionFrom: Project current name to: dstProjectName! !!FlashShapeMorph methodsFor: 'accessing' stamp: 'ar 6/2/1999 04:38'!fillForProjectTarget	"Find a fill style that is suitable for a project target."	shape fillStyles do:[:fs| fs isBitmapFill ifTrue:[^fs]].	^nil! !!FlashShapeMorph methodsFor: 'classification' stamp: 'ar 6/2/1999 03:15'!isFlashShape	^true! !!Project methodsFor: 'menu messages' stamp: 'ar 6/2/1999 05:39'!enter	"Enter the new project"	self enter: (CurrentProject parent == self).! !!Project methodsFor: 'menu messages' stamp: 'ar 6/2/1999 22:33'!enter: returningFlag	"Install my ChangeSet, Transcript, and scheduled views as current globals. If returningFlag is true, we are return to the project from whence the current project was entered; don't change its previousProject link in this case."	| showZoom recorderOrNil |	self == CurrentProject ifTrue: [^ self].	"Check the guards"	guards ifNotNil:[		guards _ guards reject:[:obj| obj isNil].		guards do:[:obj| obj okayToEnterProject ifFalse:[^self]]].	"Update the display depth and make a thumbnail of the current project"	CurrentProject displayDepth: Display depth.	CurrentProject makeThumbnail.	"Show the project transition.	Note: The project zoom is run in the context of the old project,		so that eventual errors can be handled accordingly"	displayDepth == nil ifTrue:[displayDepth _ Display depth].	Display newDepthNoRestore: displayDepth.	showZoom _ Preferences showProjectZoom		and: ["Only show zoom if there is room for the both displays plus a megabyte"			Smalltalk garbageCollectMost > (Display boundingBox area*displayDepth//8+1000000)].	showZoom ifTrue:[self displayZoom: CurrentProject parent ~~ self].	Smalltalk at: #ScorePlayer ifPresent: [:playerClass |		playerClass allInstancesDo: [:player | player pause]].	returningFlag		ifTrue: [nextProject _ CurrentProject]		ifFalse: [previousProject _ CurrentProject].	CurrentProject saveState.	CurrentProject _ self.	Smalltalk newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Sensor flushKeyboard.	World isMorph ifTrue:[recorderOrNil _ World pauseEventRecorder].	world isMorph ifTrue: [		World _ world.  "Signifies Morphic"		world install.		recorderOrNil ifNotNil: [recorderOrNil resumeIn: World].		self spawnNewProcessAndTerminateOld: true.	] ifFalse:[		World _ nil.  "Signifies MVC"		Smalltalk at: #ScheduledControllers put: world.		ScheduledControllers restore.		ScheduledControllers searchForActiveController.	].! !!Project methodsFor: 'menu messages' stamp: 'ar 6/2/1999 02:32'!saveState	"Save the current state in me prior to leaving this project"	changeSet _ Smalltalk changes.	world isMorph		ifTrue: [world _ World.				self dependents do:					[:d | (d isKindOf: SystemWindow)						ifTrue: [d label ~= changeSet name ifTrue: [self changed: #relabel]]].				world sleep "Release all space possible in old world"]		ifFalse: [world _ ScheduledControllers.				ScheduledControllers unCacheWindows.				self dependents do:					[:d | (d isKindOf: StandardSystemView)						ifTrue: [d label ~= changeSet name ifTrue: [self changed: #relabel]]]].	transcript _ Transcript.	"displayDepth _ Display depth." "ar 6/2/1999: The Display HAS already changed!!"	activeProcess _ nil! !!Project methodsFor: 'project parameters' stamp: 'ar 6/2/1999 05:29'!removeParameter: aKey	projectParameters ifNil:[^self].	projectParameters removeKey: aKey ifAbsent:[].! !!Project methodsFor: 'displaying' stamp: 'ar 6/2/1999 05:45'!displayZoom: entering	"Show the project transition when entering a new project"	| newDisplay vanishingPoint |	"Play the flash transition if any."	self projectParameters at: #flashTransition ifPresent:[:dict|		dict at: CurrentProject ifPresent:[:player| ^player playProjectEntering: self]].	"Show animated zoom to new display"	newDisplay _ self imageForm.	entering		ifTrue: [vanishingPoint _ Sensor cursorPoint]		ifFalse: [vanishingPoint _ self viewLocFor: CurrentProject].	Display zoomIn: entering orOutTo: newDisplay at: 0@0			vanishingPoint: vanishingPoint.	Display copyFrom: newDisplay.! !!Project methodsFor: 'displaying' stamp: 'ar 6/2/1999 01:58'!imageForm	^self imageFormOfSize: Display extent		depth: (displayDepth ifNil:[Display depth])! !!Project methodsFor: 'displaying' stamp: 'ar 6/1/1999 23:06'!imageFormOfSize: extentPoint depth: d	| newDisplay |	newDisplay _ DisplayScreen extent: extentPoint depth: d.	Display replacedBy: newDisplay do:[		world isMorph 			ifTrue:[world fullDrawOn: (FormCanvas on: Display)] "Morphic"			ifFalse:[world restore]. "MVC"	].	^newDisplay! !!Project class methodsFor: 'utilities' stamp: 'ar 6/2/1999 05:24'!enter: aString	"Enter the project with the given name"	^(self named: aString) enter! !