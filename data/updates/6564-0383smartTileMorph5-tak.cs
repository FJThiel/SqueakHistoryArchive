'From Squeakland 3.8.5976 of 25 August 2004 [latest update: #381] on 4 January 2005 at 3:02:38 am'!"Change Set:		smartTileMorph5-takDate:			4 January 2005Author:			Takashi YamamiyaCleanup of mouse=handling in TileMorph and its subclasses, including:Click on current-value for any type with enumerated textual values (and also on numeric assignment tiles) uniformly brings up a pop-up of the list of alternatives.- Fix for http://bugs.impara.de/view.php?id=189 (floatPrecision was not saved when extension arrow was hit).- Fix for bug that you could type in to the readout portion of a boolean readout tile.- Some redundancies in SymbolListTile removed.This version is for Squeakland 3.8.A couple of small fixes made and some changes to the preamble wording done by sw 04Jan05"!TestCase subclass: #TileMorphTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic-Tests'!!ScriptEditorMorph methodsFor: 'buttons' stamp: 'tak 12/22/2004 12:59'!buttonRowForEditor	"Answer a row of buttons that comprise the header at the top of the Scriptor"	| aRow aString buttonFont aStatusMorph aButton aColumn aTile |	buttonFont _ Preferences standardButtonFont.	aRow _ AlignmentMorph newRow color: Color transparent; layoutInset: 0.	aRow hResizing: #shrinkWrap.	aRow vResizing: #shrinkWrap.	self hasParameter ifFalse:		[aRow addMorphFront:			(SimpleButtonMorph new				label: '!!' font: Preferences standardEToysFont;				target: self;				color: Color yellow;				borderWidth: 0;				actWhen: #whilePressed;				actionSelector: #tryMe;				balloonTextSelector: #tryMe).		aRow addTransparentSpacerOfSize: 6@10].	self addDismissButtonTo: aRow.	aRow addTransparentSpacerOfSize: 6@1.	aColumn _ AlignmentMorph newColumn beTransparent.	aColumn addTransparentSpacerOfSize: 0@4.	aButton _ UpdatingThreePhaseButtonMorph checkBox.	aButton		target: self;		actionSelector: #toggleWhetherShowingTiles;		getSelector: #showingMethodPane.	aButton setBalloonText: 'toggle between showing tiles and showing textual code' translated.	aColumn addMorphBack: aButton.	aRow addMorphBack: aColumn.	aRow addTransparentSpacerOfSize: 6@10.	aString _ playerScripted externalName.	aRow addMorphBack:		(aButton _ SimpleButtonMorph new useSquareCorners label: aString font: buttonFont; target: self; setNameTo: 'title').	aButton actWhen: #buttonDown; actionSelector: #offerScriptorMenu.	aButton		on: #mouseEnter send: #menuButtonMouseEnter: to: aButton;		on: #mouseLeave send: #menuButtonMouseLeave: to: aButton.	aButton borderColor: (Color fromRgbTriplet: #(0.065 0.258 1.0)).	aButton color: ScriptingSystem uniformTileInteriorColor.	aButton balloonTextSelector: #offerScriptorMenu.	aRow addTransparentSpacerOfSize: 4@1.	aButton _ (Preferences universalTiles ifTrue: [SyntaxUpdatingStringMorph] 					ifFalse: [UpdatingStringMorph]) new.	aButton useStringFormat;		target:  self;		getSelector: #scriptTitle;		setNameTo: 'script name';		font: ScriptingSystem fontForNameEditingInScriptor;		putSelector: #setScriptNameTo:;		setProperty: #okToTextEdit toValue: true;		step;		yourself.	aRow addMorphBack: aButton.	aButton setBalloonText: 'Click here to edit the name of the script.' translated.	aRow addTransparentSpacerOfSize: 6@0.	self hasParameter		ifTrue:			[aTile _ TypeListTile new choices: Vocabulary typeChoices dataType: nil.			aTile addArrows.			aTile setLiteral: #Number.	"(aButton _ SimpleButtonMorph new useSquareCorners label: 'parameter' translated font: buttonFont; target: self; setNameTo: 'parameter').			aButton actWhen: #buttonDown; actionSelector: #handUserParameterTile."			aRow addMorphBack: aTile.			aTile borderColor: Color red.			aTile color: ScriptingSystem uniformTileInteriorColor.			aTile setBalloonText: 'Drag from here to get a parameter tile' translated]		ifFalse:			[aRow addMorphBack: (aStatusMorph _ self scriptInstantiation statusControlMorph)].	aRow addTransparentSpacerOfSize: 6@1.	aRow addMorphBack:		(IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'AddTest'); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addYesNoToHand;			shedSelvedge;			balloonTextSelector: #addYesNoToHand).	aRow addTransparentSpacerOfSize: 12@10.	self addDestroyButtonTo: aRow.	(playerScripted existingScriptInstantiationForSelector: scriptName)		ifNotNilDo:			[:inst | inst updateStatusMorph: aStatusMorph].	^ aRow! !!TileMorph methodsFor: 'accessing' stamp: 'tak 12/6/2004 01:55'!literalFromContents	"Get value from StringMorph if it is needed. (See subclass)"	^ literal! !!TileMorph methodsFor: 'accessing' stamp: 'tak 12/5/2004 01:07'!options	"Answer the options of the tile for an arrow"	(type == #literal			and: [literal isKindOf: Boolean])		ifTrue: [^ {{true. false}. #('true' 'false' )}].	operatorOrExpression		ifNil: [^ nil].	(ScriptingSystem arithmeticalOperatorsAndHelpStrings first includes: operatorOrExpression)		ifTrue: [^ ScriptingSystem arithmeticalOperatorsAndHelpStrings].	(ScriptingSystem numericComparitorsAndHelpStrings first includes: operatorOrExpression)		ifTrue: [self receiverType = #Number				ifTrue: [^ ScriptingSystem numericComparitorsAndHelpStrings]				ifFalse: [^ #(#(#= #~=) #('equal' 'not equal') )]].	^ nil! !!TileMorph methodsFor: 'accessing' stamp: 'tak 1/4/2005 08:53'!receiverType	owner		ifNil: [^ nil].	owner submorphs size > 0		ifFalse: [^ nil].	^ (owner submorphs first respondsTo: #type)		ifTrue: [owner submorphs first type]! !!TileMorph methodsFor: 'accessing' stamp: 'tak 12/5/2004 00:30'!value	^ type == #literal		ifTrue: [literal]		ifFalse: [type == #objRef				ifTrue: [actualObject]				ifFalse: [operatorOrExpression]]! !!TileMorph methodsFor: 'accessing' stamp: 'tak 12/5/2004 01:35'!value: anObject 	type == #literal		ifTrue: [self literal: anObject]		ifFalse: [self setOperatorAndUseArrows: anObject asString].	self layoutChanged! !!TileMorph methodsFor: 'arrows' stamp: 'tak 12/5/2004 14:36'!arrowAction: delta 	"Do what is appropriate when an arrow on the tile is pressed; delta will  	be +1 or -1"	| index options |	(type == #literal			and: [literal isNumber])		ifTrue: [self value: literal + delta]		ifFalse: [options _ self options						ifNil: [^ self].			index _ (options first indexOf: self value)						+ delta.			self				value: (options first atWrap: index).			submorphs last				setBalloonText: (options second atWrap: index)]! !!TileMorph methodsFor: 'arrows' stamp: 'sw 1/4/2005 02:09'!phraseForOp: op arg: arg resultType: resultType	"Answer a numeric-valued phrase derived from the receiver, whose extension arrow has just been hit.  Pass along my float-precision."	| phrase srcLabel distLabel |	phrase _ self presenter				phraseForReceiver: literal				op: op				arg: 1				resultType: #Number.	srcLabel _ self findA: UpdatingStringMorph.	distLabel _ phrase submorphs first submorphs first findA: UpdatingStringMorph.	distLabel floatPrecision: srcLabel floatPrecision.	^ phrase! !!TileMorph methodsFor: 'arrows' stamp: 'tak 12/5/2004 15:33'!showSuffixChoices	"The suffix arrow has been hit, so respond appropriately"	| plusPhrase phrase pad outer num |	(phrase _ self ownerThatIsA: PhraseTileMorph) ifNil: [^ self].	(type == #literal) & (literal isNumber) ifTrue: ["Tile is a constant number"		phrase lastSubmorph == owner "pad"			ifTrue: ["we are adding the first time (at end of our phrase)"				plusPhrase _ self phraseForOp: #+ arg: 1 resultType: #Number.				plusPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: #+).				owner acceptDroppingMorph: plusPhrase event: self primaryHand lastEvent.				num _ plusPhrase firstSubmorph firstSubmorph.				num deleteSuffixArrow]].	type == #operator ifTrue: ["Tile is accessor of an expression"		phrase resultType == #Number ifTrue:			[outer _ phrase ownerThatIsA: PhraseTileMorph.			pad _ self ownerThatIsA: TilePadMorph.			outer ifNotNil:				[outer lastSubmorph == pad ifTrue: [ "first time"					plusPhrase _ self presenter phraseForReceiver: 1 							op: #+ arg: 1 resultType: #Number.					plusPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: #+).					pad acceptDroppingMorph: plusPhrase event: self primaryHand lastEvent.					plusPhrase firstSubmorph removeAllMorphs; addMorph: phrase.	"car's heading"					self deleteSuffixArrow.					pad topEditor install "recompile"]]]].	(phrase topEditor ifNil: [phrase]) enforceTileColorPolicy! !!TileMorph methodsFor: 'event handling' stamp: 'tak 12/6/2004 01:28'!mouseDown: evt 	self setProperty: #previousLiteral toValue: self literalFromContents.	self setProperty: #previousPoint toValue: evt position.	self currentHand releaseKeyboardFocus.	evt hand		waitForClicksOrDrag: self		event: evt		selectors: {#mouseStillDown:. nil. nil. #startDrag:}		threshold: 5.	^ super mouseDown: evt! !!TileMorph methodsFor: 'event handling' stamp: 'tak 12/5/2004 14:38'!mouseMove: evt 	self options		ifNotNil: [^ self showOptions].	(self hasProperty: #previousLiteral)		ifFalse: [^ self].	self currentHand releaseKeyboardFocus.	"Once reviving the value at drag start"	literal _ self valueOfProperty: #previousLiteral.	"Then applying delta"	self arrowAction: (self valueOfProperty: #previousPoint) y - evt position y * self arrowDelta abs.	^ super mouseMove: evt! !!TileMorph methodsFor: 'event handling' stamp: 'tak 12/6/2004 01:00'!mouseStillDown: evt 	"See if arrows are being pressed and call arrowAction:..."	| aPoint |	upArrow		ifNil: [^ super mouseStillDown: evt].	aPoint _ evt cursorPoint.	(upArrow containsPoint: aPoint)		ifTrue: [^ self				variableDelay: [self arrowAction: self arrowDelta]].	(downArrow containsPoint: aPoint)		ifTrue: [^ self				variableDelay: [self arrowAction: self arrowDelta negated]].	self options		ifNotNil: [^ self showOptions]! !!TileMorph methodsFor: 'event handling' stamp: 'tak 12/5/2004 13:54'!mouseUp: evt 	self removeProperty: #previousLiteral.	self removeProperty: #previousPoint.	suffixArrow		ifNotNil: [(suffixArrow bounds containsPoint: evt cursorPoint)				ifTrue: [self showSuffixChoices.					^ self]].	retractArrow		ifNotNil: [(retractArrow bounds containsPoint: evt cursorPoint)				ifTrue: [self deleteLastTwoTiles.					^ self]].	^ super mouseUp: evt! !!TileMorph methodsFor: 'event handling' stamp: 'tak 12/5/2004 01:30'!wantsKeyboardFocusFor: aSubmorph 	^ type == #literal		and: [(literal isKindOf: Boolean) not]! !!TileMorph methodsFor: 'mouse handling' stamp: 'tak 12/6/2004 01:00'!showOptions	"The receiver is a tile that represents an operator; a click on the 	receiver's label will pop up a menu of alternative operator choices"	| result |	(result _ (SelectionMenu selections: self options first) startUp)		ifNotNil: [self value: result.			self scriptEdited]! !!AssignmentTileMorph methodsFor: 'accessing' stamp: 'tak 12/5/2004 14:04'!options	^ {#(#: #Incr: #Decr: #Mult: ). {nil. nil. nil. nil}}! !!AssignmentTileMorph methodsFor: 'accessing' stamp: 'tak 12/5/2004 14:09'!value	^ assignmentSuffix! !!AssignmentTileMorph methodsFor: 'accessing' stamp: 'tak 12/5/2004 14:06'!value: anObject 	self setAssignmentSuffix: anObject.	self acceptNewLiteral! !!NumericReadoutTile methodsFor: 'accessing' stamp: 'tak 12/5/2004 15:13'!literal: anObject 	literal _ anObject.	self updateLiteralLabel.	submorphs last informTarget! !!NumericReadoutTile methodsFor: 'accessing' stamp: 'tak 12/6/2004 01:53'!literalFromContents	| label |	label _ self labelMorph				ifNil: [^ super literal].	label step.	^ literal _ label valueFromContents! !!SoundTile methodsFor: 'event handling' stamp: 'tak 12/5/2004 12:55'!options	| soundChoices |	soundChoices _ #('silence' ).	"default, if no SampledSound class"	Smalltalk		at: #SampledSound		ifPresent: [:sampledSound | soundChoices _ sampledSound soundNames].	^ {soundChoices. soundChoices}! !!SoundTile methodsFor: 'event handling' stamp: 'tak 12/5/2004 02:09'!value: anObject 	super value: anObject.	self playSoundNamed: anObject! !!SymbolListTile methodsFor: 'accessing' stamp: 'tak 12/6/2004 01:58'!options	^ {self choices. self choices		collect: [:each | ScriptingSystem helpStringForOperator: literal]}! !!SymbolListTile methodsFor: 'accessing' stamp: 'tak 12/7/2004 14:42'!value: anObject 	self acceptNewLiteral: anObject! !!SymbolListTile methodsFor: 'initialization' stamp: 'tak 12/6/2004 01:38'!initialize	super initialize.	literal _ #nothing! !!SymbolListTile methodsFor: 'user interface' stamp: 'sw 1/4/2005 00:16'!offerAllChoicesInAPopUp	"Retained in deference to pre-existing content that may have event handlers that send this message."	! !!TileMorphTest methodsFor: 'testing' stamp: 'tak 12/5/2004 18:58'!testArrowAction	"self debug: #testArrowAction"	| dummy tile |	dummy _ Morph new.	tile _ TileMorph new setOperator: '+'.	dummy addMorph: tile.	tile arrowAction: 1.	self assert: tile codeString = '-'.	tile _ TileMorph new setOperator: '<'.	dummy addMorph: tile.	tile arrowAction: 1.	"Because receiver is not tile"	self assert: tile codeString = '='.	tile _ true newTileMorphRepresentative.	dummy addMorph: tile.	tile arrowAction: 1.	self assert: tile codeString = '(false)'.! !!TileMorphTest methodsFor: 'testing' stamp: 'tak 12/5/2004 18:58'!testAssignmentTile	"self debug: #testAssignmentTile"	| player viewer tile phrase |	player _ Morph new assuredPlayer.	viewer _ CategoryViewer new invisiblySetPlayer: player.	viewer  makeSetter: #(#getX #Number) event: nil from: player costume.	phrase _ ActiveHand firstSubmorph.	ActiveHand removeAllMorphs.	tile _ phrase submorphs second.	self assert: tile codeString = 'setX: '.	tile arrowAction: 1.	self assert: tile codeString = 'setX: self getX + '.! !!TileMorphTest methodsFor: 'testing' stamp: 'tak 12/7/2004 14:53'!testSimbolListTile	! !!TileMorphTest methodsFor: 'testing' stamp: 'tak 12/5/2004 18:58'!testSoundTile	"self debug: #testSoundTile"	| tile dummy |	dummy _ Morph new.	tile _ SoundTile new literal: 'croak'.	dummy addMorph: tile.	tile arrowAction: 1.	self assert: tile codeString = '(''silence'')'.	! !!TypeListTile methodsFor: 'accessing' stamp: 'tak 12/6/2004 02:50'!value: anObject 	| scriptEditor |	super value: anObject.	(scriptEditor _ self ownerThatIsA: ScriptEditorMorph)		ifNotNil: [scriptEditor setParameterType: anObject]! !!TypeListTile methodsFor: 'arrows' stamp: 'tak 12/7/2004 14:28'!showSuffixChoices	"When the user clicks on the suffix arrow, put up the type-choices menu"	"A bit dirty hack, avoided testing whether the down arrow includes mouse point"	 super showOptions! !!TypeListTile methodsFor: 'menus' stamp: 'tak 12/7/2004 14:27'!addCustomMenuItems: aCustomMenu hand: aHandMorph	"Add morph-specific items to the given menu"	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'choose type...' action: #showSuffixChoices! !!TypeListTile methodsFor: 'mouse handling' stamp: 'tak 12/6/2004 02:43'!showOptions	| topScript |	suffixArrow		ifNotNil: [(suffixArrow bounds containsPoint: ActiveHand cursorPoint)				ifTrue: [^ super showOptions]].	topScript _ self				outermostMorphThat: [:m | m isKindOf: ScriptEditorMorph].	topScript		ifNotNil: [topScript handUserParameterTile]! !TypeListTile removeSelector: #arrowAction:!!TypeListTile reorganize!('accessing' value:)('arrows' addMenuIcon showSuffixChoices)('initialization' initialize)('menus' addCustomMenuItems:hand:)('mouse handling' showOptions)('user interface' acceptNewLiteral: adjustHelpMessage)!SymbolListTile removeSelector: #arrowAction:!SymbolListTile removeSelector: #mouseStillDown:!SoundTile removeSelector: #mouseDown:!SoundTile removeSelector: #mouseMove:!SoundTile removeSelector: #mouseStillDown:!NumericReadoutTile removeSelector: #mouseDown:!NumericReadoutTile removeSelector: #mouseStillDown:!AssignmentTileMorph removeSelector: #arrowAction:!!AssignmentTileMorph reorganize!('arrow' addArrowsIfAppropriate)('code generation' assignmentReceiverTile operatorForAssignmentSuffix: storeCodeOn:indent:)('initialization' computeOperatorOrExpression initialize setAssignmentSuffix: setRoot: setRoot:dataType: updateWordingToMatchVocabulary)('player viewer' assignmentRoot updateLiteralLabel)('accessing' options value value:)('as yet unclassified' fixLayout)!