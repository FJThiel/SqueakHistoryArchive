'From Squeak2.9alpha of 13 June 2000 [latest update: #2885] on 24 October 2000 at 6:52:13 pm'!"Change Set:		SharedHalosDate:			24 October 2000Author:			Andreas RaabImplements the new halo policy for shared environments. The halo is unique to some hand and no interaction of other users will remove the halo automatically. Halos can be obtained by user interaction with the halo."!!HaloMorph methodsFor: 'events' stamp: 'ar 10/24/2000 18:51'!blueButtonDown: event	"Transfer the halo to the next likely recipient"	target ifNil:[^self delete].	event hand obtainHalo: self.	positionOffset _ event position - target position.	"wait for drags or transfer"	event hand 		waitForClicksOrDrag: self 		event: event		selectors: { #transferHalo:. nil. #dragTarget:. }		threshold: 5.! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doDebug: evt with: menuHandle	"Ask hand to invoke the a debugging menu for my inner target.  If shift key is down, immediately put up an inspector on the inner target"	| menu |	evt hand obtainHalo: self.	self removeAllHandlesBut: nil.  "remove all handles"	self world displayWorld.	evt shiftPressed ifTrue: 		[self delete.		^ innerTarget inspectInMorphic: evt].	menu _ innerTarget buildDebugMenu: evt hand.	menu addTitle: innerTarget externalName.	menu popUpEvent: evt in: self world.! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doDirection: anEvent with: directionHandle	anEvent hand obtainHalo: self.	self removeAllHandlesBut: directionHandle! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doDrag: evt with: dragHandle	evt hand obtainHalo: self.	target setConstrainedPositionFrom:		(target griddedPoint: (evt cursorPoint - positionOffset)). "evt is local here"! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doDup: evt with: dupHandle	"Ask hand to duplicate my target."	evt hand obtainHalo: self.	(target isKindOf: SelectionMorph) ifTrue:		[^ target doDup: evt fromHalo: self handle: dupHandle].	self setTarget: (target duplicateMorph: evt).	self removeAllHandlesBut: dupHandle.	self step. "update position if necessary"	(dupHandle bounds containsPoint: evt position) ifFalse:[		target position: target position + (evt position - dupHandle bounds center)].	evt hand addMouseListener: self. "Listen for the drop"! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doGrab: evt with: grabHandle	"Ask hand to grab my target."	evt hand obtainHalo: self.	self removeAllHandlesBut: grabHandle.  "remove all other handles"	evt hand grabMorph: target.	self step. "update position if necessary"	(grabHandle bounds containsPoint: evt position) ifFalse:[		target position: target position + (evt position - grabHandle bounds center)].	evt hand addMouseListener: self. "Listen for the drop"! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doGrow: evt with: growHandle	"Called while the mouse is down in the grow handle"	| newExtent extentToUse |	evt hand obtainHalo: self.	newExtent _ (target pointFromWorld: (target griddedPoint: evt cursorPoint - positionOffset))								- target topLeft.	evt shiftPressed ifTrue: [newExtent _ (newExtent x max: newExtent y) asPoint].	target renderedMorph extent: (extentToUse _ newExtent max: target minExtent).	growHandle position: evt cursorPoint - (growHandle extent // 2).	self layoutChanged.	(self valueOfProperty: #commandInProgress) doIfNotNil:  		[:cmd | "Update the final extent"		cmd redoTarget: target selector: #extent: argument: extentToUse]! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doMenu: evt with: menuHandle	"Ask hand to invoke the halo menu for my inner target."	| menu |	evt hand obtainHalo: self.	self removeAllHandlesBut: nil.  "remove all handles"	self world displayWorld.	menu _ innerTarget buildHandleMenu: evt hand.	self showingDirectionHandles		ifTrue: [menu add: 'hide direction handles' target: self selector: #showDirectionHandles: argument: false]		ifFalse: [menu add: 'show direction handles' target: self selector: #showDirectionHandles: argument: true].	target addDropShadowItemsTo: menu hand: evt hand.	innerTarget addTitleForHaloMenu: menu.	menu popUpEvent: evt in: self world.! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doRecolor: evt with: aHandle	"Change the color of the target, if appropriate"	evt hand obtainHalo: self.	(aHandle containsPoint: evt cursorPoint)		ifFalse:  "only do it if mouse still in handle on mouse up"			[self delete.			target addHalo: evt]		ifTrue:			[innerTarget changeColor.			self showingDirectionHandles ifTrue: [self addHandles]]	! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doRot: evt with: rotHandle	"Update the rotation of my target if it is rotatable.  Keep the relevant command object up to date."	| degrees |	evt hand obtainHalo: self.	degrees _ (evt cursorPoint - (target pointInWorld: target referencePosition)) degrees.	degrees _ degrees - angleOffset degrees.	degrees _ degrees detentBy: 10.0 atMultiplesOf: 90.0 snap: false.	degrees = 0.0		ifTrue: [rotHandle color: Color lightBlue]		ifFalse: [rotHandle color: Color blue].	rotHandle submorphsDo:		[:m | m color: rotHandle color makeForegroundColor].	self removeAllHandlesBut: rotHandle.	self showingDirectionHandles ifFalse:		[self showDirectionHandles: true addHandles: false].	self addDirectionHandles.	target rotationDegrees: degrees.	rotHandle position: evt cursorPoint - (rotHandle extent // 2).	(self valueOfProperty: #commandInProgress) doIfNotNil:		[:cmd | "Update the final rotation"		cmd redoTarget: target selector: #rotationDegrees: argument: degrees].	self layoutChanged! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!doScale: evt with: scaleHandle	"Update the scale of my target if it is scalable."	| newHandlePos |	evt hand obtainHalo: self.	newHandlePos _ evt cursorPoint - (scaleHandle extent // 2).	target scaleToMatch: newHandlePos.	target scale = 1.0		ifTrue: [scaleHandle color: Color yellow]		ifFalse: [scaleHandle color: Color orange].	scaleHandle position: newHandlePos.	self layoutChanged.! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!maybeCollapse: evt with: collapseHandle	"Ask hand to collapse my target if mouse comes up in it."	evt hand obtainHalo: self.	(collapseHandle containsPoint: evt cursorPoint)		ifFalse:			[self delete.			target addHalo: evt]		ifTrue:			[self delete.			target collapse]! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:41'!maybeDismiss: evt with: dismissHandle	"Ask hand to dismiss my target if mouse comes up in it."	evt hand obtainHalo: self.	(dismissHandle containsPoint: evt cursorPoint)		ifFalse:			[self delete.			target addHalo: evt]		ifTrue:			[self delete.			target dismissViaHalo]! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:42'!maybeDoDup: evt with: dupHandle	evt hand obtainHalo: self.	^ target okayToDuplicate ifTrue:		[self doDup: evt with: dupHandle]! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:42'!mouseDownInCollapseHandle: evt with: collapseHandle	evt hand obtainHalo: self.	self removeAllHandlesBut: collapseHandle.	collapseHandle color: Color tan darker! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:42'!mouseDownInDimissHandle: evt with: dismissHandle	evt hand obtainHalo: self.	Preferences soundsEnabled ifTrue: [TrashCanMorph playMouseEnterSound].	self removeAllHandlesBut: dismissHandle.	dismissHandle color: Color darkGray.! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:42'!prepareToTrackCenterOfRotation: evt with: rotationHandle	evt hand obtainHalo: self.	self removeAllHandlesBut: rotationHandle.	evt hand showTemporaryCursor: Cursor blank! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:42'!setCenterOfRotation: evt with: rotationHandle	| localPt |	evt hand obtainHalo: self.	evt hand showTemporaryCursor: nil.	localPt _ innerTarget transformFromWorld globalPointToLocal: rotationHandle center.	innerTarget setRotationCenterFrom: localPt.	self endInteraction! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:42'!setDirection: anEvent with: directionHandle	"The user has let up after having dragged the direction arrow; now set the forward direction of the actual SketchMorph accordingly"	| delta degrees |	anEvent hand obtainHalo: self.	delta _ (innerTarget transformFromWorld globalPointToLocal: directionHandle center) - innerTarget referencePosition.	degrees _ delta degrees + 90.0.	target forwardDirection: (degrees \\ 360) rounded.	self endInteraction! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:42'!setDismissColor: evt with: dismissHandle	"Called on mouseStillDown in the dismiss handle; set the color appropriately."	| colorToUse |	evt hand obtainHalo: self.	colorToUse _  (dismissHandle containsPoint: evt cursorPoint)		ifFalse:			[Color red muchLighter]		ifTrue:			[Color lightGray].	dismissHandle color: colorToUse! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:43'!startDrag: evt with: dragHandle	| itsOwner |	"Drag my target without removing it from its owner."	evt hand obtainHalo: self.	self removeAllHandlesBut: dragHandle.	positionOffset _ dragHandle center - target position"InWorld".	 ((itsOwner _ target topRendererOrSelf owner) notNil and:			[itsOwner automaticViewing]) ifTrue:				[target openViewerForArgument]"Smalltalk at: #Q put: OrderedCollection new"! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:43'!startGrow: evt with: growHandle	| botRt |	"Initialize resizing of my target.  Launch a command representing it, to support Undo"	evt hand obtainHalo: self.	growingOrRotating _ true.	self removeAllHandlesBut: growHandle.  "remove all other handles"	botRt _ target pointInWorld: target bottomRight.	(self world viewBox containsPoint: botRt)		ifTrue: [positionOffset _ evt cursorPoint - botRt]		ifFalse: [positionOffset _ 0@0].	self setProperty: #commandInProgress toValue:		(Command new			cmdWording: 'resizing';			undoTarget: target selector: #extent: argument: target extent)! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:43'!startRot: evt with: rotHandle	"Initialize rotation of my target if it is rotatable.  Launch a command object to represent the action"	evt hand obtainHalo: self.	target isFlexMorph ifFalse: 		[target isInWorld ifFalse: [self setTarget: target player costume].		target addFlexShell].	growingOrRotating _ true.	self removeAllHandlesBut: rotHandle.  "remove all other handles"	angleOffset _ evt cursorPoint - (target pointInWorld: target referencePosition).	angleOffset _ Point			r: angleOffset r			degrees: angleOffset degrees - target rotationDegrees.	self setProperty: #commandInProgress toValue:		(Command new			cmdWording: 'rotating';			undoTarget: target selector: #rotationDegrees: argument: target rotationDegrees)! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:43'!startScale: evt with: scaleHandle	"Initialize scaling of my target."	evt hand obtainHalo: self.	target isFlexMorph ifFalse: [target addFlexShell].	growingOrRotating _ true.	self removeAllHandlesBut: scaleHandle.  "remove all other handles"	positionOffset _ 0@0.! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:43'!trackCenterOfRotation: anEvent with: rotationCenterHandle	anEvent hand obtainHalo: self.	rotationCenterHandle center: anEvent cursorPoint! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/24/2000 18:43'!trackDirectionArrow: anEvent with: shaft	anEvent hand obtainHalo: self.	shaft setVertices: {directionArrowAnchor. anEvent cursorPoint}.	self layoutChanged! !!HandMorph methodsFor: 'halo handling' stamp: 'ar 10/24/2000 18:40'!obtainHalo: aHalo	"Used for transfering halos between hands"	| formerOwner |	self halo == aHalo ifTrue:[^self].	"Find former owner"	formerOwner _ self world hands detect:[:h| h halo == aHalo] ifNone:[nil].	formerOwner ifNotNil:[formerOwner releaseHalo: aHalo].	self halo: aHalo! !!HandMorph methodsFor: 'halo handling' stamp: 'ar 10/24/2000 18:40'!releaseHalo: aHalo	"Used for transfering halos between hands"	self removeProperty: #halo! !