'From Squeak 2.3 of January 14, 1999 on 25 February 1999 at 4:44:38 pm'!"Change Set:		annotat-swDate:			24 February 1999Author:			Scott WallaceA variety of enhancements and cleanups for the annotation pane, including the addition of a direct-manipulation UI for specifying which annotations you want to use in annotation panes.An expression for opening a specify-annotations window (Preferences editAnnotations) is provided in the 'useful expressions' workspace, and a more direct way of initiating annotation-editing will be available in the forthcoming flaps update.The bug that made the annotation pane flash whenever a different method was chosen in an mvc-based method-list browser is fixed."!StringHolder subclass: #Browser	instanceVariableNames: 'systemOrganizer classOrganizer metaClassOrganizer systemCategoryListIndex classListIndex messageCategoryListIndex messageListIndex editSelection metaClassIndicated '	classVariableNames: 'RecentClasses '	poolDictionaries: ''	category: 'Interface-Browser'!SystemWindow subclass: #SystemWindowWithButton	instanceVariableNames: 'buttonInTitle '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!ChangeSorter class methodsFor: 'all' stamp: 'sw 2/15/1999 23:02'!mostRecentChangeSetWithChangeForClass: class selector: selector	| hits |	hits _ self gatherChangeSets select: 		[:cs | (cs atSelector: selector class: class) ~~ #none].	hits isEmpty ifTrue: [^ 'not in any change set'].	^ 'recent cs: ', hits last name! !!Morph methodsFor: 'e-toy support' stamp: 'sw 2/15/1999 22:28'!wrappedInWindow: aSystemWindow	| aWindow |	aWindow _ aSystemWindow model: MorphicModel new.	aWindow addMorph: self frame: (0@0 extent: 1@1).	aWindow extent: self extent.	^ aWindow! !!PluggableTextView methodsFor: 'updating' stamp: 'sw 2/24/1999 17:54'!update: aSymbol	"Refer to the comment in View|update:. Do nothing if the given symbol does not match any action."	aSymbol == #wantToChange ifTrue:			[self canDiscardEdits ifFalse: [self promptForCancel].  ^ self].	aSymbol == #flash ifTrue: [^ controller flash].	aSymbol == getTextSelector ifTrue: [^ self updateDisplayContents].	aSymbol == getSelectionSelector ifTrue: [^ self setSelection: self getSelection].	aSymbol == #clearUserEdits ifTrue: [^ self hasUnacceptedEdits: false].	(aSymbol == #autoSelect and: [getSelectionSelector ~~ nil]) ifTrue:			[^ controller setSearch: model autoSelectString;					againOrSame: true].	aSymbol == #appendEntry ifTrue:			[^ controller doOccluded: [controller appendEntry]].	aSymbol == #clearText ifTrue:			[^ controller doOccluded:				[controller changeText: Text new]].! !!Preferences class methodsFor: 'parameters' stamp: 'sw 2/24/1999 12:26'!acceptAnnotationsFrom: aSystemWindow	"This intricate extraction is based on the precise structure of the annotation-request window.  Kindly avert your eyes."	| aList |	aList _ aSystemWindow paneMorphs first firstSubmorph submorphs collect:		[:m |  m contents asSymbol].	self defaultAnnotationRequests: aList	! !!Preferences class methodsFor: 'parameters' stamp: 'sw 2/24/1999 14:37'!annotationInfo 	^ #(		(timeStamp			'The time stamp of the last submission fo the method.')		(messageCategory	'Which method category the method lies in')		(sendersCount		'A report of how many senders there of the message.')		(implementorsCount	'A report of how many implementors there are of the message.')		(recentChangeSet	'The most recent change set bearing the method.')		(allChangeSets		'A list of all change sets bearing the method.'))! !!Preferences class methodsFor: 'parameters' stamp: 'sw 2/17/1999 00:40'!defaultAnnotationRequests	^ Parameters at: #MethodAnnotations ifAbsent:		[self setDefaultAnnotationInfo]	"Preferences annotationInfo"! !!Preferences class methodsFor: 'parameters' stamp: 'sw 2/8/1999 10:14'!defaultAnnotationRequests: newList	^ Parameters at: #MethodAnnotations put: newList! !!Preferences class methodsFor: 'parameters' stamp: 'sw 2/24/1999 13:20'!editAnnotations	"Preferences editAnnotations"	| aPanel ins outs current aMorph aWindow aButton info pair |	Smalltalk isMorphic		ifFalse:			[^ self inform: 'Sorry, you must be in a morphicproject to use this feature.'].	aPanel _ AlignmentMorph newRow extent: 300 @ 100.	ins _ AlignmentMorph newColumn extent: 150 @ 100.	ins openToDragNDrop: true; beSticky.	ins color: Color green muchLighter.	outs _ ins fullCopy.	outs color: Color red muchLighter.	aPanel addMorph: outs; addMorphFront: ins.	outs position: (ins position + (200 @ 0)).	current _ self defaultAnnotationRequests.	info _ self annotationInfo.	current do:		[:sym | pair _ info detect: [:aPair | aPair first == sym].		aMorph _ StringMorph new contents: pair first.		aMorph setBalloonText: pair last.		ins addMorphBack: aMorph].	info do:		[:aPair | 			(current includes: aPair first) 				ifFalse:					[aMorph _ StringMorph new contents: aPair first.					aMorph setBalloonText: aPair last.					outs addMorph: aMorph]].	aPanel layoutChanged.	aWindow _ SystemWindowWithButton new setLabel: 'Annotations'.	aButton _ SimpleButtonMorph new target: Preferences;		actionSelector: #acceptAnnotationsFrom:; arguments: (Array with: aWindow); label: 'apply'; borderWidth: 0; borderColor: Color transparent; color: Color transparent.	aButton submorphs first color: Color blue.	aButton setBalloonText: 'After moving all the annotations you want to the left (green) side, and all the ones you do NOT want to the right (pink) side, hit this "apply" button to have your choices take effect.'.	aWindow buttonInTitle: aButton; adjustExtraButton.	self currentHand attachMorph: (aPanel wrappedInWindow: aWindow)! !!Preferences class methodsFor: 'parameters' stamp: 'sw 2/17/1999 00:41'!setDefaultAnnotationInfo	"Preferences setDefaultAnnotationInfo"	^ Parameters at: #MethodAnnotations put: #(timeStamp messageCategory implementorsCount allChangeSets)! !!StringHolder methodsFor: 'annotation pane' stamp: 'sw 2/24/1999 15:21'!annotation	"Provide a line of annotation material for a middle pane."	| stamp aMessage sendersCount implementorsCount toShow aCategory separator aString aList |	(aMessage _ self selectedMessageName)		ifNil:			[^ '------'].	toShow _ ReadWriteStream on: ''.	separator _ ' ¥ '.	self annotationRequests do:		[:aRequest |		(aRequest == #timeStamp) ifTrue:			[stamp _ self timeStamp.			toShow nextPutAll: (stamp size > 0				ifFalse:					['no timeStamp', separator]				ifTrue:					[stamp, separator])].		(aRequest == #messageCategory) ifTrue:			[aCategory _ self selectedClassOrMetaClass organization categoryOfElement: self selectedMessageName.			aCategory ifNotNil: "woud be nil for a method no longer present, e.g. in a recent-submissions browser"				[toShow nextPutAll: aCategory, separator]].		(aRequest == #sendersCount) ifTrue:			[sendersCount _ (Smalltalk allCallsOn: aMessage) size.			sendersCount _ sendersCount == 1				ifTrue:					['1 sender']				ifFalse:					[sendersCount printString, ' senders'].			toShow nextPutAll: sendersCount, separator].		(aRequest == #implementorsCount) ifTrue:			[implementorsCount _ (Smalltalk allImplementorsOf: aMessage) size.			implementorsCount _ implementorsCount == 1				ifTrue:					['1 implementor']				ifFalse:					[implementorsCount printString, ' implementors'].			toShow nextPutAll: implementorsCount,  separator].		(aRequest == #recentChangeSet) ifTrue:			[aString _ ChangeSorter mostRecentChangeSetWithChangeForClass: self selectedClassOrMetaClass selector: self selectedMessageName.			aString size > 0 ifTrue: [toShow nextPutAll: aString, separator]].		(aRequest == #allChangeSets) ifTrue:			[aList _ ChangeSorter allChangeSetsWithClass: self selectedClassOrMetaClass selector: self selectedMessageName.			aList size > 0				ifTrue:					[aList size == 1						ifTrue:							[toShow nextPutAll: 'only in change set ']						ifFalse:							[toShow nextPutAll: 'in change sets: '].					aList do:						[:aChangeSet | toShow nextPutAll: aChangeSet name, ' ']]				ifFalse:					[toShow nextPutAll: 'in no change set'].			toShow nextPutAll: separator]].			^ toShow contents! !!Browser methodsFor: 'message functions' stamp: 'sw 2/22/1999 09:54'!messageListMenu: aMenu shifted: shifted	^ shifted ifFalse: [aMenu labels:'browse full (b)fileOutprintOutsenders of... (n)implementors of... (m)method inheritanceversions (v)inst var refs...inst var defs...class var refs...class variablesclass refs (N)removemore...'	lines: #(3 7 12)	selections:		#(browseMethodFull fileOutMessage printOutMessage		browseSendersOfMessages browseMessages methodHierarchy browseVersions		browseInstVarRefs browseInstVarDefs browseClassVarRefs 			browseClassVariables browseClassRefs		removeMessage shiftedYellowButtonActivity )]	ifTrue: [aMenu labels: 'browse class hierarchybrowse classbrowse methodimplementors of sent messageschange sets with this methodinspect instancesinspect subinstancesremove from this browserchange category...revert to previous versionremove from current change setrevert and forgetfetch documentationmore...' 	lines: #(5 7 9 12)	selections: #(classHierarchy browseClass 		buildMessageBrowser browseAllMessages findMethodInChangeSets 		inspectInstances inspectSubInstances		removeMessageFromBrowser 		changeCategory		revertToPreviousVersion 		removeFromCurrentChanges revertAndForget 		fetchDocPane		unshiftedYellowButtonActivity)]! !!MessageSet methodsFor: 'contents' stamp: 'sw 2/15/1999 12:37'!contents: aString notifying: aController 	"Compile the code in aString. Notify aController of any syntax errors. 	Answer false if the compilation fails. Otherwise, if the compilation 	created a new method, deselect the current selection. Then answer true."	| category selector |	messageListIndex = 0 ifTrue: [^ false].	self setClassAndSelectorIn: [:class :oldSelector].	category _ class organization categoryOfElement: oldSelector.	selector _ class compile: aString				classified: category				notifying: aController.	selector == nil ifTrue: [^false].	selector == oldSelector ifFalse: [self messageListIndex: 0].	contents _ aString copy.	self changed: #annotation.	^ true! !!SystemWindow methodsFor: 'geometry' stamp: 'sw 2/16/1999 15:23'!paneMorphs	"Nominally private but a need for obtaining this from the outside arose"	^ paneMorphs copy! !!SystemWindowWithButton commentStamp: 'sw 2/15/1999 22:23' prior: 0!A SystemWindow with a single extra button in its title bar.!!SystemWindowWithButton reorganize!('all' adjustExtraButton buttonInTitle: extent:)!!SystemWindowWithButton methodsFor: 'all' stamp: 'sw 2/15/1999 23:23'!adjustExtraButton	buttonInTitle ifNil: [^ self].	buttonInTitle align: buttonInTitle topLeft with:  self innerBounds topLeft + (24@0).! !!SystemWindowWithButton methodsFor: 'all' stamp: 'sw 2/15/1999 22:41'!buttonInTitle: aButton	buttonInTitle _ aButton.	self addMorphFront: aButton! !!SystemWindowWithButton methodsFor: 'all' stamp: 'sw 2/15/1999 22:27'!extent: newExtent	super extent: (newExtent max: 100 @ 50).	self adjustExtraButton! !!Utilities class methodsFor: 'support windows' stamp: 'sw 2/24/1999 12:13'!standardWorkspaceContents	^ self class firstCommentAt: #standardWorkspaceContents	"Smalltalk recover: 5000.ChangeList browseRecentLog.ChangeList browseRecent: 2000.Preferences editAnnotations.Utilities reinstateDefaultFlaps. (FileStream oldFileNamed: 'Lives of the Wolves') edit.(FileStream oldFileNamed: 'tuesdayFixes.cs') fileInChangeList browseFile: 'myChanges.st'TextStyle default fontAt: 7 put: (StrikeFont new readMacFontHex: 'Cairo 18')StandardSystemView browseAllAccessesTo: 'maximumSize'.StandardSystemView doCacheBits  ""restore fast windows mode""Symbol selectorsContaining: 'rsCon'.Smalltalk browseMethodsWhoseNamesContain: 'screen'.Browser newOnClass: Utilities.Browser fullOnClass: SystemDictionary.FormView allInstances inspect.StandardSystemView someInstance inspect.Preferences editAnnotations.Utilities storeTextWindowContentsToFileNamed: 'TextWindows'Utilities reconstructTextWindowsFromFileNamed: 'TextWindows'ScriptingSystem resetStandardPartsBin.ScheduledControllers screenController openMorphicConstructionWorld.ScheduledControllers screenController openMorphicWorld.SystemOrganization categoryOfElement: #Controller. ParagraphEditor organization categoryOfElement: #changeEmphasis.Cursor wait showWhile: [Sensor waitButton].Smalltalk bytesLeft asStringWithCommas.Symbol instanceCount. Time millisecondsToRun:	[Smalltalk allCallsOn: #asOop]MessageTally spyOn: [Smalltalk allCallsOn: #asOop].""Utilities openStandardWorkspace"! !Browser removeSelector: #annotationRequests!Browser removeSelector: #chooseAnnotations!"Postscript:"Preferences setDefaultAnnotationInfo.!