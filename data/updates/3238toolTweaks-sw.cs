'From Squeak2.9alpha of 5 August 2000 [latest update: #3300] on 25 January 2001 at 8:52:23 am'!"Change Set:		toolTweaks-swDate:			25 January 2001Author:			Scott WallaceChanges the toggle-diffing cmd-key shortcut to cmd-shift-D rather than simple cmd-d, in order further to reduce the surprise of inadvertently having diffs invoked in a browser, and rescinds the diffsToggledByCmdD preference of very recent addition.Makes annotations appear in VersionsBrowser whether or not there is a current selection in the list pane, since the class and method of a VersionsBrowser are constant, whatever the selection."!!Preferences class methodsFor: 'factored pref panel' stamp: 'sw 1/25/2001 08:51'!openFactoredPanelWithWidth: aWidth 	"Open up a preferences panel of the given width"	"Preferences openFactoredPanelWithWidth: 325"	| tabbedPalette controlPage window playfield aColor aFont maxEntriesPerCategory tabsMorph anExtent aPanel |	aFont _ StrikeFont familyName: 'NewYork' size: 19.	aPanel _ PreferencesPanel new.	aColor _ aPanel defaultBackgroundColor.	tabbedPalette _ TabbedPalette newSticky.	(tabsMorph _ tabbedPalette tabsMorph) color: aColor darker;		 highlightColor: Color red regularColor: Color brown darker darker.	maxEntriesPerCategory _ 0.	"tabbedPalette addTabFor: self helpPaneForFactoredPanel font: aFont.  	LATER!!"	self factoredCategories		do: 			[:aCat | 			controlPage _ AlignmentMorph newColumn beSticky color: aColor.			controlPage borderColor: aColor;				 layoutInset: 4.			aCat second				do: [:aPrefSymbol | controlPage						addMorphBack: (Preferences								buttonRepresenting: aPrefSymbol								wording: aPrefSymbol								color: nil)].			controlPage setNameTo: aCat first asString.			aCat first == #halos				ifTrue: [aPanel addHaloControlsTo: controlPage].			tabbedPalette addTabFor: controlPage font: aFont.			aCat first = 'search results' ifTrue:				[(tabbedPalette tabNamed: aCat first) setBalloonText:					'Use cmd-f to find preferences by keyword; the results of your search will show up here'].			maxEntriesPerCategory _ maxEntriesPerCategory max: aCat second size].	tabbedPalette selectTabNamed: 'general'.	tabsMorph rowsNoWiderThan: aWidth.	playfield _ Morph newSticky.	anExtent _ aWidth @ (25 + tabsMorph height + (20 * maxEntriesPerCategory)).	playfield extent: anExtent.	playfield color: aColor.	playfield addMorphBack: tabbedPalette.	self couldOpenInMorphic		ifTrue: [window _ (SystemWindow labelled: 'Preferences')						model: aPanel.			window on: #keyStroke send: #keyStroke: to: aPanel.			window				bounds: (100 @ 100 - (0 @ window labelHeight + window borderWidth) extent: playfield extent + (2 * window borderWidth)).			window				addMorph: playfield				frame: (0 @ 0 extent: 1 @ 1).			window updatePaneColors.			window setProperty: #minimumExtent toValue: anExtent + (2 @ 2).			window position: 200 @ 20.			self currentHand attachMorph: window.			self currentWorld startSteppingSubmorphsOf: window]		ifFalse:			[(window _ MVCWiWPasteUpMorph newWorldForProject: nil) addMorph: playfield.			window startSteppingSubmorphsOf: playfield.			MorphWorldView				openOn: window				label: 'Preferences'				extent: playfield extent]! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 1/25/2001 07:28'!messageListKey: aChar from: view	"Respond to a Command key.  I am a model with a code pane, and I also	have a listView that has a list of methods.  The view knows how to get	the list and selection."	| sel class |	aChar == $D ifTrue: [^ self toggleDiffing].	(class _ self selectedClassOrMetaClass) ifNil: [^ self arrowKey: aChar from: view].	sel _ self selectedMessageName.	aChar == $b ifTrue: [^ Browser fullOnClass: class selector: sel].	aChar == $N ifTrue: [^ self browseClassRefs].	aChar == $i ifTrue: [^ self methodHierarchy].	aChar == $h ifTrue: [^ self classHierarchy].	aChar == $p ifTrue: [^ self browseFullProtocol].	sel ifNotNil: 		[aChar == $m ifTrue: [^ Smalltalk browseAllImplementorsOf: sel].		aChar == $n ifTrue: [^ Smalltalk browseAllCallsOn: sel].		aChar == $v ifTrue: [^ self browseVersions].		aChar == $O ifTrue: [^ self openSingleMessageBrowser].		aChar == $x ifTrue: [^ self removeMessage]].	^ self arrowKey: aChar from: view! !!CodeHolder methodsFor: 'annotation' stamp: 'sw 1/25/2001 06:40'!annotation	"Provide a line of content for an annotation pane, representing information about the method associated with the selected class and selector in the receiver."	|  aSelector aClass |	((aSelector _ self selectedMessageName) == nil or: [(aClass _ self selectedClassOrMetaClass) == nil])		ifTrue: [^ '------'].	^ self annotationForSelector: aSelector ofClass: aClass! !!CodeHolder methodsFor: 'annotation' stamp: 'sw 1/25/2001 06:17'!annotationForSelector: aSelector ofClass: aClass	"Provide a line of content for an annotation pane, representing information about the given selector and class"	| stamp  sendersCount implementorsCount toShow aCategory separator aString aList versionsCount  aComment |	toShow _ ReadWriteStream on: ''.	separator _ ' ¥ '.	self annotationRequests do:		[:aRequest |		(aRequest == #firstComment) ifTrue:			[aComment _ aClass firstCommentAt:  aSelector.			aComment isEmptyOrNil ifFalse:				[toShow nextPutAll: (aComment, separator)]].		(aRequest == #timeStamp) ifTrue:			[stamp _ self timeStamp.			toShow nextPutAll: (stamp size > 0				ifTrue: [stamp, separator]				ifFalse: ['no timeStamp', separator])].		(aRequest == #messageCategory) ifTrue:			[aCategory _ aClass organization categoryOfElement: aSelector.			aCategory ifNotNil: "woud be nil for a method no longer present, e.g. in a recent-submissions browser"				[toShow nextPutAll: aCategory, separator]].		(aRequest == #sendersCount) ifTrue:			[sendersCount _ (Smalltalk allCallsOn: aSelector) size.			sendersCount _ sendersCount == 1				ifTrue:					['1 sender']				ifFalse:					[sendersCount printString, ' senders'].			toShow nextPutAll: sendersCount, separator].		(aRequest == #implementorsCount) ifTrue:			[implementorsCount _ Smalltalk numberOfImplementorsOf: aSelector.			implementorsCount _ implementorsCount == 1				ifTrue:					['1 implementor']				ifFalse:					[implementorsCount printString, ' implementors'].			toShow nextPutAll: implementorsCount,  separator].		(aRequest == #priorVersionsCount) ifTrue:			[versionsCount _ VersionsBrowser versionCountForSelector: aSelector class: aClass.			toShow nextPutAll: 				((versionsCount > 1					ifTrue:						[versionsCount == 2 ifTrue:							['1 prior version']							ifFalse:								[versionsCount printString, ' prior versions']]					ifFalse:						['no prior versions']), separator)].		(aRequest == #priorTimeStamp) ifTrue:			[stamp _ VersionsBrowser timeStampFor: aSelector class: aClass reverseOrdinal: 2.			stamp ifNotNil: [toShow nextPutAll: 'prior time stamp: ', stamp, separator]].		(aRequest == #recentChangeSet) ifTrue:			[aString _ ChangeSorter mostRecentChangeSetWithChangeForClass: aClass selector: aSelector.			aString size > 0 ifTrue: [toShow nextPutAll: aString, separator]].		(aRequest == #allChangeSets) ifTrue:			[aList _ ChangeSorter allChangeSetsWithClass: aClass selector: aSelector.			aList size > 0				ifTrue:					[aList size = 1						ifTrue:							[toShow nextPutAll: 'only in change set ']						ifFalse:							[toShow nextPutAll: 'in change sets: '].					aList do:						[:aChangeSet | toShow nextPutAll: aChangeSet name, ' ']]				ifFalse:					[toShow nextPutAll: 'in no change set'].			toShow nextPutAll: separator]].			^ toShow contents! !!Browser methodsFor: 'message functions' stamp: 'sw 1/25/2001 07:24'!shiftedMessageListMenu: aMenu	"Fill aMenu with the items appropriate when the shift key is held down"	aMenu addList: #(		('method pane' 							makeIsolatedCodePane)		"('make a scriptor'						makeScriptor)"		('toggle diffing (D)'						toggleDiffing)		('implementors of sent messages'			browseAllMessages)		-		('spawn sub-protocol'					spawnProtocol)		('spawn full protocol'					spawnFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory)		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'				revertToPreviousVersion)		('remove from current change set'		removeFromCurrentChanges)		('revert & remove from changes'		revertAndForget)		('add to current change set'				adoptMessageInCurrentChangeset)		-		('fetch documentation'					fetchDocPane)		('more...' 								unshiftedYellowButtonActivity)).	^ aMenu! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 1/25/2001 07:22'!changeSetListKey: aChar from: view	"Respond to a Command key.  I am a model with a listView that has a list of changeSets."	aChar == $b ifTrue: [^ self browseChangeSet].	aChar == $f ifTrue: [^ self findCngSet].	aChar == $m ifTrue: [^ self newCurrent].	aChar == $n ifTrue: [^ self newSet].	aChar == $o ifTrue: [^ self fileOut].	aChar == $r ifTrue: [^ self rename].	aChar == $x ifTrue: [^ self remove].	aChar == $p ifTrue: [^ self addPreamble].	aChar == $c ifTrue: [^ self copyAllToOther].	aChar == $D ifTrue: [^ self toggleDiffing]. 	^ self messageListKey: aChar from: view! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 1/25/2001 07:25'!shiftedMessageMenu: aMenu	"Arm the menu so that it holds items appropriate to the message-list while the shift key is down.  Answer the menu."	^ aMenu addList: #(		-		('method pane'						makeIsolatedCodePane)		('toggle diffing (D)'					toggleDiffing)		('implementors of sent messages'		browseAllMessages)		('change category...'				changeCategory)			-		('sample instance'					makeSampleInstance)		('inspect instances'					inspectInstances)		('inspect subinstances'				inspectSubInstances)		-		('change sets with this method'		findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion)		('revert & remove from changes'	revertAndForget)		-		('more...'							unshiftedYellowButtonActivity))! !!FileList class methodsFor: 'instance creation' stamp: 'sw 1/25/2001 08:45'!open	"Open a view of an instance of me on the default directory."	"FileList open"	| dir aFileList topView volListView templateView fileListView fileContentsView underPane pHeight |	Smalltalk isMorphic ifTrue: [^ self openAsMorph].	dir _ FileDirectory default.	aFileList _ self new directory: dir.	topView _ StandardSystemView new.	topView		model: aFileList;		label: dir pathName;		minimumSize: 200@200.	topView borderWidth: 1.	volListView _ PluggableListView on: aFileList		list: #volumeList		selected: #volumeListIndex		changeSelected: #volumeListIndex:		menu: #volumeMenu:.	volListView autoDeselect: false.	volListView window: (0@0 extent: 80@45).	topView addSubView: volListView.	templateView _ PluggableTextView on: aFileList		text: #pattern		accept: #pattern:.	templateView askBeforeDiscardingEdits: false.	templateView window: (0@0 extent: 80@15).	topView addSubView: templateView below: volListView.	aFileList wantsOptionalButtons		ifTrue:			[underPane _ aFileList optionalButtonView.			underPane isNil				ifTrue: [pHeight _ 60]				ifFalse: [					topView addSubView: underPane toRightOf: volListView.					pHeight _ 60 - aFileList optionalButtonHeight]]		ifFalse:			[underPane _ nil.			pHeight _ 60].	fileListView _ PluggableListView on: aFileList		list: #fileList		selected: #fileListIndex		changeSelected: #fileListIndex:		menu: #fileListMenu:.	fileListView window: (0@0 extent: 120@pHeight).	underPane isNil		ifTrue: [topView addSubView: fileListView toRightOf: volListView]		ifFalse: [topView addSubView: fileListView below: underPane].	fileListView controller terminateDuringSelect: true.  "Pane to left may change under scrollbar"	fileContentsView _ PluggableTextView on: aFileList		text: #contents accept: #put:		readSelection: #contentsSelection menu: #fileContentsMenu:shifted:.	fileContentsView window: (0@0 extent: 200@140).	topView addSubView: fileContentsView below: templateView.	topView controller open! !!SystemDictionary methodsFor: 'retrieving' stamp: 'sw 1/8/2001 11:31'!numberOfImplementorsOf: aSelector  	"Answer a count of the implementors of the given selector found in the system"	| aCount |	aCount _ 0.	self allBehaviorsDo:		[:class |			(class includesSelector: aSelector)				ifTrue: [aCount _ aCount + 1]].	^ aCount"Smalltalk numberOfImplementorsOf: #contents.Smalltalk numberOfImplementorsOf: #nobodyImplementsThis. Smalltalk numberOfimplementorsOf: #numberOfImplementorsOf:."! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 1/25/2001 07:41'!versionsHelpString	^ 'Each entry in the list pane represents a version of the source code for the same method; the topmost entry is the current version, the next entry is the next most recent, etc.To revert to an earlier version, select it (in the list pane) and then do any of the following:  *  Choose "revert to this version" from the list pane menu.  *  Hit the "revert" button,  *  Type ENTER in the code pane  *  Type cmd-s (alt-s) in the code pane.The code pane shows the source for the selected version.  If "diffing" is in effect, then differences betwen the selected version and the version before it are pointed out in the pane.  Turn diffing on and off by choosing "toggle diffing" from the list pane menu, or hitting the "diffs" button, or hitting cmd-D when the cursor is over the list pane.To get a comparison between the selected version and the current version, choose "compare to current" from the list pane menu or hit the "compare to current" button.  (This is meaningless if the current version is selected, and is unnecessary if you''re interested in diffs from between the current version and the next-most-recent version, since the standard in-pane "diff" feature will give you that.)If further versions of the method in question have been submitted elsewhere since you launched a particular Versions Browser, it will still stay nicely up-to-date if you''re in Morphic and have asked that smart updating be maintained; if you''re in mvc or in morphic but with smart-updating turned off, a versions browser is only brought up to date when you activate its window (and when you issue "revert" from within it, of course,) and you can also use the "update list" command to make certain the versions list is up to date.Hit the "remove from changes" button, or choose the corresponding command in the list pane menu, to have the method in question deleted from the current change set.  This is useful if you''ve put debugging code into a method, and now want to strip it out and cleanse your current change set of all memory of the excursion.Note:  the annotation pane in versions browsers shows information about the *current* version of the method in the image, not about the selected version.'! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 1/25/2001 06:32'!versionsMenu: aMenu	"Fill aMenu with menu items appropriate to the receiver"	^ aMenu addList: #(		('compare to current'		compareToCurrentVersion)		('revert to this version'		fileInSelections)		('remove from changes'		removeMethodFromChanges)		('toggle diffing (D)'			toggleDiffing)		('update list'				reformulateList)		('help...'					offerVersionsHelp))! !!VersionsBrowser methodsFor: 'misc' stamp: 'sw 1/25/2001 07:03'!selectedClass	"Answer the class currently selected in the browser.  In the case of a VersionsBrowser, the class and selector are always the same, regardless of which version is selected and indeed whether or not any entry is selected in the list pane"	^ classOfMethod theNonMetaClass! !!VersionsBrowser methodsFor: 'misc' stamp: 'sw 1/25/2001 06:26'!selectedClassOrMetaClass	"Answer the class or metaclass currently selected in the browser.  In the case of a VersionsBrowser, the class and selector are always the same, regardless of which version is selected and indeed whether or not any entry is selected in the list pane"	^ classOfMethod! !!VersionsBrowser methodsFor: 'misc' stamp: 'sw 1/25/2001 06:10'!selectedMessageName	"Answer the message name currently selected in the browser.  In the case of a VersionsBrowser, the class and selector are always the same, regardless of which version is selected and indeed whether or not any entry is selected in the list pane"	^ selectorOfMethod! !StringHolder removeSelector: #addDiffingToggleItemTo:!Preferences class removeSelector: #diffsToggledByCmdD!Preferences class removeSelector: #helpMsgsAdditionbrowsingdiffsToggledByCmdD!Preferences class removeSelector: #initialValuesAdditionbrowsingdiffsToggledByCmdD!"Postscript:"Preferences deletePreference: #diffsToggledByCmdD.Preferences absorbAdditions.!