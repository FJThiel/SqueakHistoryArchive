'From Squeak2.8alpha of 4 February 2000 [latest update: #2210] on 1 June 2000 at 1:06:12 pm'!"Change Set:		100EmergencyEval-smaDate:			27 May 2000Author:			Stefan Matthias AustOne time too often, I got stuck in that black and white emergency stack listing while playing around with the UI stuff and I envied VisualWorks' because of its emergency evaluator.Fortunately, Squeak already has a similar feature, a Transcripter, which can be used to provide a basic real-eval-print loop to fix simple problem on a command line.  The attached change adds an option to the stack listing: *** Press CR to enter that evaluator ***Once in that evaluator, one may wish to evaluate 'Utilities revertLastMethodSubmission', a method suggested by Henrik Gedenryd, implemented by Scott Wallace, and included in this update.  The intent of calling this method is to revoke the last code submission.  The result will be:* If the most recent method submission was a method change, revert that change.* But if it was a brand-new method, remove that method.Caution: #revertLastMethodSubmission does nothing special regarding change sets"!!Object methodsFor: 'private' stamp: 'sma 5/27/2000 17:49'!primitiveError: aString 	"This method is called when the error handling results in a recursion in 	calling on error: or halt or halt:."	| context |	(String		streamContents: 			[:s |			s nextPutAll: '**System error handling failed**'.			s cr; nextPutAll: aString.			context _ thisContext sender sender.			20 timesRepeat: [context == nil ifFalse: [s cr; print: (context _ context sender)]].			s cr; nextPutAll: '**Type CR to enter an emergency evaluator.**'.			s cr; nextPutAll: '**Type any other character to restart.**'])		displayAt: 0 @ 0.	[Sensor keyboardPressed] whileFalse.	Sensor keyboard == Character cr ifTrue: [Transcripter emergencyEvaluator].	Smalltalk isMorphic ifTrue: [^ World install "To init hand events and redisplay world"].	ScheduledControllers searchForActiveController! !!Transcripter methodsFor: 'command line' stamp: 'sma 5/27/2000 17:53'!readEvalPrint	| line |	[#('quit' 'exit' 'done' ) includes: (line _ self request: '>')]		whileFalse: [self cr; show: ([Compiler evaluate: line]			ifError: [:err :ex | err])]! !!Transcripter class methodsFor: 'utilities' stamp: 'sma 5/27/2000 17:35'!emergencyEvaluator	(Transcripter newInFrame: (0@0 corner: 320@200))		show: 'type ''exit'' to exit the emergency evaluator';		readEvalPrint! !!Utilities class methodsFor: 'recent method submissions' stamp: 'sw 5/30/2000 09:58'!revertLastMethodSubmission	| changeRecords |	"If the most recent method submission was a method change, revert	that change, and if it was a submission of a brand-new method, 	remove that method."	RecentSubmissions isEmptyOrNil ifTrue: [^ self beep].	Utilities setClassAndSelectorFrom: RecentSubmissions last in:		[:aClass :aSelector |			aClass ifNil: [^ self beep].			changeRecords _ aClass changeRecordsAt: aSelector.			changeRecords isEmptyOrNil ifTrue: [^ self beep].			changeRecords size == 1				ifTrue:					["method has no prior version, so reverting in this case means removing"					aClass removeSelector: aSelector]				ifFalse:					[changeRecords second fileIn]]"Utilities revertLastMethodSubmission"! !!Transcripter class reorganize!('instance creation' newInFrame: startTranscriptProcess)('utilities' emergencyEvaluator)!