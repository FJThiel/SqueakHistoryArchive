'From Squeak 2.4b of April 23, 1999 on 24 July 1999 at 11:20:34 pm'!Object subclass: #BitBltSimulation	instanceVariableNames: 'destForm sourceForm halftoneForm combinationRule destX destY width height sourceX sourceY clipX clipY clipWidth clipHeight sourceBits sourceRaster sourcePixSize destBits destRaster destPixSize pixPerWord bitCount skew mask1 mask2 preload nWords destMask hDir vDir sourceIndex sourceDelta destIndex destDelta sx sy dx dy bbW bbH srcWidth srcHeight halftoneHeight noSource noHalftone halftoneBase colorMap sourceAlpha cmBitsPerColor srcBitIndex scanStart scanStop scanString scanRightX scanStopArray scanDisplayFlag scanXTable stopCode bitBltOop affectedL affectedR affectedT affectedB interpreterProxy opTable maskTable ditherMatrix4x4 ditherThresholds16 ditherValues16 '	classVariableNames: 'AllOnes BBClipHeightIndex BBClipWidthIndex BBClipXIndex BBClipYIndex BBColorMapIndex BBDestFormIndex BBDestXIndex BBDestYIndex BBHalftoneFormIndex BBHeightIndex BBLastIndex BBRuleIndex BBSourceFormIndex BBSourceXIndex BBSourceYIndex BBWarpBase BBWidthIndex BBXTableIndex BinaryPoint CrossedX EndOfRun FixedPt1 FormBitsIndex FormDepthIndex FormHeightIndex FormWidthIndex OpTable OpTableSize '	poolDictionaries: ''	category: 'Squeak-Interpreter'!!BitBltSimulation methodsFor: 'inner loop' stamp: 'ar 7/24/1999 21:16'!alphaSourceBlendBits16	"This version assumes 		combinationRule = 34		sourcePixSize = 32		destPixSize = 16		sourceForm ~= destForm.	"	| srcIndex dstIndex sourceWord srcAlpha destWord deltaX deltaY 	srcY dstY dstMask srcShift ditherBase ditherIndex ditherThreshold |	self inline: false. "This particular method should be optimized in itself"	deltaY _ bbH + 1. "So we can pre-decrement"	srcY _ sy.	dstY _ dy.	(dx bitAnd: 1) = 0 		ifTrue:[	mask1 _ 16r0000FFFF.				srcShift _ 16]		ifFalse:[mask1 _ 16rFFFF0000.				srcShift _ 0].	"This is the outer loop"	[(deltaY _ deltaY - 1) ~= 0] whileTrue:[		srcIndex _ (sourceBits + 4) + ((srcY * sourceRaster + sx) * 4).		dstIndex _ (destBits + 4) + ((dstY * destRaster + (dx // 2)) * 4).		ditherBase _ (dstY bitAnd: 3) * 4.		ditherIndex _ (sx bitAnd: 3) - 1. "For pre-increment"		deltaX _ bbW + 1. "So we can pre-decrement"		dstMask _ mask1.		dstMask = 16rFFFF ifTrue:[srcShift _ 16] ifFalse:[srcShift _ 0].		"This is the inner loop"		[(deltaX _ deltaX - 1) ~= 0] whileTrue:[			ditherThreshold _ ditherMatrix4x4 at: ditherBase + (ditherIndex _ ditherIndex + 1 bitAnd: 3).			sourceWord _ interpreterProxy longAt: srcIndex.			srcAlpha _ sourceWord >> 24.			"Treat srcAlpha >= 240 as opaque"			srcAlpha >= 240 ifTrue:[				"Dither from 32 to 16 bit"				sourceWord _ self dither32To16: sourceWord threshold: ditherThreshold.				sourceWord = 0 ifTrue:[sourceWord _ 1].				sourceWord _ sourceWord << srcShift.				destWord _ interpreterProxy longAt: dstIndex.				destWord _ destWord bitAnd: dstMask.				interpreterProxy longAt: dstIndex put: (sourceWord bitOr: destWord).			] ifFalse:[ "srcAlpha ~= 255"				srcAlpha <= 15 ifTrue:[					"Treat srcAlpha <= 15 as transparent"				] ifFalse:[ "0 < srcAlpha < 255"					"If we have to mix colors then just copy a single word"					destWord _ interpreterProxy longAt: dstIndex.					destWord _ destWord bitAnd: dstMask bitInvert32.					destWord _ destWord >> srcShift.					"Expand from 16 to 32 bit by adding zero bits"					destWord _ (((destWord bitAnd: 16r7C00) bitShift: 9) bitOr:									((destWord bitAnd: 16r3E0) bitShift: 6)) bitOr:								(((destWord bitAnd: 16r1F) bitShift: 3) bitOr:									16rFF000000).					"Mix colors"					sourceWord _ self alphaBlendScaled: sourceWord with: destWord.					"And dither"					sourceWord _ self dither32To16: sourceWord threshold: ditherThreshold.					sourceWord = 0 ifTrue:[sourceWord _ 1].					sourceWord _ sourceWord << srcShift.					destWord _ interpreterProxy longAt: dstIndex.					destWord _ destWord bitAnd: dstMask.					interpreterProxy longAt: dstIndex put: (sourceWord bitOr: destWord).				].			].			srcIndex _ srcIndex + 4.			srcShift = 0 ifTrue:[dstIndex _ dstIndex + 4].			srcShift _ srcShift bitXor: 16. "Toggle between 0 and 16"			dstMask _ dstMask bitInvert32. "Mask other half word"		].		srcY _ srcY + 1.		dstY _ dstY + 1.	].! !!BitBltSimulation methodsFor: 'pixel mapping' stamp: 'ar 7/24/1999 19:16'!dither32To16: srcWord threshold: ditherValue	"Dither the given 32bit word to 16 bit. Ignore alpha."	| pv threshold value out |	self inline: true. "You bet"	pv _ srcWord bitAnd: 255.	threshold _ ditherThresholds16 at: (pv bitAnd: 7).	value _ ditherValues16 at: (pv bitShift: -3).	ditherValue < threshold		ifTrue:[out _ value + 1]		ifFalse:[out _ value].	pv _ (srcWord bitShift: -8) bitAnd: 255.	threshold _ ditherThresholds16 at: (pv bitAnd: 7).	value _ ditherValues16 at: (pv bitShift: -3).	ditherValue < threshold		ifTrue:[out _ out bitOr: (value+1 bitShift:5)]		ifFalse:[out _ out bitOr: (value bitShift: 5)].	pv _ (srcWord bitShift: -16) bitAnd: 255.	threshold _ ditherThresholds16 at: (pv bitAnd: 7).	value _ ditherValues16 at: (pv bitShift: -3).	ditherValue < threshold		ifTrue:[out _ out bitOr: (value+1 bitShift:10)]		ifFalse:[out _ out bitOr: (value bitShift: 10)].	^out! !!BitBltSimulation class methodsFor: 'translation' stamp: 'ar 7/24/1999 21:01'!declareCVarsIn: aCCodeGenerator	aCCodeGenerator var: 'opTable'		declareC: 'int opTable[' , OpTableSize printString , ']'.	aCCodeGenerator var: 'maskTable'		declareC:'int maskTable[33] = {0, 1, 3, 0, 15, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 65535,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}'.	aCCodeGenerator var: 'ditherMatrix4x4'		declareC:'const int ditherMatrix4x4[16] = {0,	8,	2,	10,12,	4,	14,	6,3,	11,	1,	9,15,	7,	13,	5}'.	aCCodeGenerator var: 'ditherThresholds16'		declareC:'const int ditherThresholds16[8] = { 0, 2, 4, 6, 8, 12, 14, 16 }'.	aCCodeGenerator var: 'ditherValues16'		declareC:'const int ditherValues16[32] = {0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}'.! !!BitBltSimulator methodsFor: 'as yet unclassified' stamp: 'ar 7/24/1999 19:13'!initBBOpTable	opTable _ OpTable.	maskTable _ Array new: 32.	#(1 2 4 8 16 32) do:[:i| maskTable at: i put: (1 << i)-1].	self initializeDitherTables.! !!BitBltSimulator methodsFor: 'as yet unclassified' stamp: 'ar 7/24/1999 23:20'!initializeDitherTables	ditherMatrix4x4 _ CArrayAccessor on:		#(	0	8	2	10			12	4	14	6			3	11	1	9			15	7	13	5).	ditherThresholds16 _ CArrayAccessor on:#(0 2 4 6 8 10 12 14 16).	ditherValues16 _ CArrayAccessor on: 		#(0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14		15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30).! !