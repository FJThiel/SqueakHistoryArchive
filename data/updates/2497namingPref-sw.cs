'From Squeak2.9alpha of 26 July 2000 [latest update: #2496] on 16 August 2000 at 5:58:44 pm'!"Change Set:		namingPref-swDate:			16 August 2000Author:			Scott WallaceAdds a preference,  #uniqueNamesInHalos to, allow a behavior that seems needed for etoy users but may be regarded as wasteful by hardcore users..If this pref is true, then when you put up a halo for any morph, it is assigned a unique name (if it doesn't already have one) which will stick with it.  If it is false (the default), then unique names are only handed out in respone to more serious user gestures, such as editing a name in the halo, tearing off a tile, opening a viewer"!!Morph methodsFor: 'thumbnail' stamp: 'sw 8/16/2000 17:40'!morphRepresented	"If the receiver is an alias, answer the morph it represents; else answer self"	^ self! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/16/2000 17:41'!addHandlesForWorldHalos	"Add handles for world halos, like the man said"	| box |	self removeAllMorphs.  "remove old handles, if any"	self bounds: target bounds.	box _ self world bounds insetBy: 9.	target addWorldHandlesTo: self box: box.	Preferences uniqueNamesInHalos ifTrue:		[innerTarget assureExternalName].	self addNameBeneath: (box insetBy: (0@0 corner: 0@10)) string: innerTarget externalName.	growingOrRotating _ false.	self layoutChanged.	self changed.! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/16/2000 17:41'!addName	"Add a name readout at the bottom of the halo."	Preferences uniqueNamesInHalos ifTrue:		[target assureExternalName].	self addNameBeneath: self basicBox string: target externalName! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 8/16/2000 17:42'!duplicateMorph	"Make and return a duplicate of the receiver's target"	| newMorph aName |	aName _ self world nameForCopyIfAlreadyNamed: argument.	newMorph _ argument veryDeepCopy.	aName ifNotNil:		[newMorph setNameTo: aName].	self grabMorphFromMenu: newMorph.	"formerPosition _ argument position."	newMorph player ifNotNil: [newMorph player startRunning].	^ newMorph! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 8/16/2000 17:42'!rootForGrabOf: aMorph	"If open to drag-n-drop, allow submorph to be extracted. If parts bin, copy the submorph."	| root newMorph aName |	root _ aMorph.	[root = self] whileFalse:		[root owner == self ifTrue:			[self isPartsBin				ifTrue:					[newMorph _ (root renderedMorph isKindOf: MorphThumbnail)						ifTrue:							[root renderedMorph morphRepresented veryDeepCopy position: root renderedMorph position]						ifFalse:							[root topRendererOrSelf veryDeepCopy restoreSuspendedEventHandler].					(aName _ self world nameForCopyIfAlreadyNamed: newMorph) ifNotNil:						[newMorph setNameTo: aName].					^ newMorph].				"The above dance ensures that objects created by dragging already-named morphs from parts bin are given unique names in real life"			self dragNDropEnabled					ifTrue: [^ root]].		root _ root owner].	^ super rootForGrabOf: aMorph! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 8/16/2000 17:42'!nameForCopyIfAlreadyNamed: aMorph	"Answer a name to set for a copy of aMorph if aMorph itself is named, else nil"	| aName usedNames |	^ (aName _ aMorph knownName) ifNotNil:		[usedNames _ self allKnownNames.		Utilities keyLike: aName satisfying: [:f | (usedNames includes: f) not]]! !!IndexTabs methodsFor: 'initialization' stamp: 'sw 8/16/2000 17:40'!initialize	"Initialize the receiver.  Make sure it is not open to drag and drop"	super initialize.	padding _ 10.	verticalPadding _ 4.	basicHeight _ 14.	basicWidth _ 200.	color _ Color r: 0.0 g: 0.6 b: 0.6.	borderWidth _ 0.	self enableDragNDrop: false! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 8/16/2000 17:50'!customizeForEToyUsers: aBoolean	"If aBoolean is true, set things up for etoy users.  If it's false, unset some of those things.  Some things are set when switching into etoy mode but not reversed when switching out of etoy mode" 	#(			(balloonHelpEnabled			yes		dontReverse)		(debugHaloHandle			no		reverse)		(modalColorPickers			yes		dontReverse)		(noviceMode					yes		reverse)		(roundCornersWherePossible	yes		dontReverse)		(uniqueNamesInHalos		yes		reverse)		(useUndo					yes		dontReverse)		(warnIfNoChangesFile		no		reverse)		(warnIfNoSourcesFile		no		reverse)) do:			[:trip |				(aBoolean or: [trip third == #reverse]) ifTrue:					[Preferences enableOrDisable: trip first asPer:						((trip second == #yes) & aBoolean) | ((trip second == #no) & aBoolean not)]]! !"Postscript:"Preferences addPreference: #uniqueNamesInHalos category: #halos  default: false balloonHelp:'if true, then when you put up a halo for any morph, it is assigned a unique name (if it doesn''t already have one) which will stick with it.'!