'From Squeak3.9alpha of ''2 November 2004'' [latest update: #6474] on 30 November 2004 at 10:04:02 pm'!"Change Set:		KCPFixBrowserOrganizationDate:			30 November 2004Author:			stephane ducasseFixes all the direct references to SystemOrganization. This is a problem since organization is linked to systemDictionary and namespaces. So clients should use SystemDictionary and later namespaces to get their associate organization.Load KCP002SystemOrgInit before really important. Version 2 reordered by hand"!IdentityDictionary subclass: #SystemDictionary	instanceVariableNames: 'cachedClassNames organization '	classVariableNames: 'LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore MemoryHogs ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp SystemChanges '	poolDictionaries: ''	category: 'System-Support'!	!ClassDescription methodsFor: 'organization' stamp: 'sd 11/30/2004 21:10'!environmentOrganization	^ self environment organization! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sd 11/30/2004 21:08'!removeContainedInClassCategories	| matchExpression |	myChangeSet removePreamble.	matchExpression :=  FillInTheBlank request: 'Enter class category name (wildcard is ok)' initialAnswer: 'System-*'. 	(Smalltalk organization categories		select: [:each | matchExpression match: each])		do: [:eachCat | 			| classNames | 			classNames := Smalltalk organization listAtCategoryNamed: eachCat.			classNames				do: [:eachClassName | 					myChangeSet removeClassChanges: eachClassName.					myChangeSet removeClassChanges: eachClassName , ' class'].			self showChangeSet: myChangeSet]! !!ClassDescription methodsFor: 'organization' stamp: 'sd 11/30/2004 21:10'!category	"Answer the system organization category for the receiver."	^self environmentOrganization categoryOfElement: self name! !!ClassDescription methodsFor: 'organization' stamp: 'sd 11/30/2004 21:10'!category: cat 	"Categorize the receiver under the system category, cat, removing it from 	any previous categorization."	| oldCat |	oldCat := self category.	(cat isString)		ifTrue: [self environmentOrganization classify: self name under: cat asSymbol]		ifFalse: [self errorCategoryName].	SystemChangeNotifier uniqueInstance class: self recategorizedFrom: oldCat to: cat asSymbol! !!ClassDescription methodsFor: 'fileIn/Out' stamp: 'sd 11/30/2004 21:10'!definitionST80	"Answer a String that defines the receiver."	| aStream path |	aStream _ WriteStream on: (String new: 300).	superclass == nil		ifTrue: [aStream nextPutAll: 'ProtoObject']		ifFalse: [path _ ''.				self environment scopeFor: superclass name from: nil						envtAndPathIfFound: [:envt :remotePath | path _ remotePath].				aStream nextPutAll: path , superclass name].	aStream nextPutAll: self kindOfSubclass;			store: self name.	aStream cr; tab; nextPutAll: 'instanceVariableNames: ';			store: self instanceVariablesString.	aStream cr; tab; nextPutAll: 'classVariableNames: ';			store: self classVariablesString.	aStream cr; tab; nextPutAll: 'poolDictionaries: ';			store: self sharedPoolsString.	aStream cr; tab; nextPutAll: 'category: ';			store: (self environmentOrganization categoryOfElement: self name) asString.	superclass ifNil: [ 		aStream nextPutAll: '.'; cr.		aStream nextPutAll: self name.		aStream space; nextPutAll: 'superclass: nil'. ].	^ aStream contents! !!ClassDescription methodsFor: 'fileIn/Out' stamp: 'sd 11/30/2004 21:11'!definitionST80: isST80	"Answer a String that defines the receiver."	| aStream path |	isST80 ifTrue: [^ self definitionST80].	aStream _ WriteStream on: (String new: 300).	superclass == nil		ifTrue: [aStream nextPutAll: 'ProtoObject']		ifFalse: [path _ ''.				self environment scopeFor: superclass name from: nil						envtAndPathIfFound: [:envt :remotePath | path _ remotePath].				aStream nextPutAll: path , superclass name].	aStream nextPutKeyword: self kindOfSubclass			withArg: self name.	aStream cr; tab; nextPutKeyword: 'instanceVariableNames: '			withArg: self instanceVariablesString.	aStream cr; tab; nextPutKeyword: 'classVariableNames: 'withArg: self classVariablesString.	aStream cr; tab; nextPutKeyword: 'poolDictionaries: '			withArg: self sharedPoolsString.	aStream cr; tab; nextPutKeyword: 'category: '			withArg: (self environmentOrganization categoryOfElement: self name) asString.	superclass ifNil: [ 		aStream nextPutAll: '.'; cr.		aStream nextPutAll: self name.		aStream space; nextPutAll: 'superclass (nil)'. ].	^ aStream contents! !!ClassDescription methodsFor: 'accessing class hierarchy' stamp: 'sd 11/30/2004 21:10'!commentInventory	"Answer a string with a count of the classes with and without comments 	for all the classes in the package of which this class is a member."	"Morph commentInventory"	^ self environmentOrganization commentInventory: (self category copyUpTo: $-), '*'! !!Browser class methodsFor: 'instance creation' stamp: 'sd 11/30/2004 21:08'!new	^super new systemOrganizer: Smalltalk organization! !!CodeLoader class methodsFor: 'utilities' stamp: 'sd 11/30/2004 21:11'!exportCategories: catList to: aFileName	"CodeLoader exportCategories: #( 'Game-Animation' 'Game-Framework' ) to: 'Game-Framework'"	| list classList |	classList _ OrderedCollection new.	catList do: [:catName |		list _ Smalltalk organization listAtCategoryNamed: catName asSymbol.		list do: [:nm | classList add: (Smalltalk at: nm); add: (Smalltalk at: nm) class]].	self exportCodeSegment: aFileName classes: classList keepSource: true! !!CodeLoader class methodsFor: 'utilities' stamp: 'sd 11/30/2004 21:11'!exportCategoryNamed: catName	"CodeLoader exportCategoryNamed: 'OceanicPanic' "	| list |	list _ Smalltalk organization listAtCategoryNamed: catName asSymbol.	self exportClassesNamed: list to: catName! !!HierarchyBrowser methodsFor: 'initialization' stamp: 'sd 11/30/2004 21:19'!initAlphabeticListing	self systemOrganizer: Smalltalk organization.	metaClassIndicated _ false.	classList _ Smalltalk classNames.! !!HierarchyBrowser methodsFor: 'initialization' stamp: 'sd 11/30/2004 21:19'!initHierarchyForClass: aClassOrMetaClass	| tab stab index nonMetaClass |	centralClass _ aClassOrMetaClass.	nonMetaClass _ aClassOrMetaClass theNonMetaClass.	self systemOrganizer: Smalltalk organization.	metaClassIndicated _ aClassOrMetaClass isMeta.	classList _ OrderedCollection new.	tab _ ''.	nonMetaClass allSuperclasses reverseDo: 		[:aClass | 		classList add: tab , aClass name.		tab _ tab , '  '].	index _ classList size + 1.	nonMetaClass allSubclassesWithLevelDo:		[:aClass :level |		stab _ ''.  1 to: level do: [:i | stab _ stab , '  '].		classList add: tab , stab , aClass name]	 	startingLevel: 0.	self classListIndex: index! !!ClassListBrowser methodsFor: 'initialization' stamp: 'sd 11/30/2004 21:11'!initForClassesNamed: nameList title: aTitle	"Initialize the receiver for the class-name-list and title provided"	self systemOrganizer: Smalltalk organization.	metaClassIndicated _ false.	defaultTitle _ aTitle.	classList _ nameList copy.	self class openBrowserView:  (self openSystemCatEditString: nil)		label: aTitle	"ClassListBrowser new initForClassesNamed: #(Browser CategoryViewer) title: 'Frogs'"! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'sd 11/30/2004 21:19'!comeFullyUpOnReload: smartRefStream	"fix up the objects in the segment that changed size.  An object in the segment is the wrong size for the modern version of the class.  Construct a fake class that is the old size.  Replace the modern class with the old one in outPointers.  Load the segment.  Traverse the instances, making new instances by copying fields, and running conversion messages.  Keep the new instances.  Bulk forward become the old to the new.  Let go of the fake objects and classes.	After the install (below), arrayOfRoots is filled in.  Globalize new classes.  Caller may want to do some special install on certain objects in arrayOfRoots. 	May want to write the segment out to disk in its new form."	| mapFakeClassesToReal ccFixups receiverClasses rootsToUnhiberhate myProject m existing |	self flag: #bobconv.		RecentlyRenamedClasses _ nil.		"in case old data hanging around"	mapFakeClassesToReal _ smartRefStream reshapedClassesIn: outPointers.		"Dictionary of just the ones that change shape.  Substitute them in outPointers."	ccFixups _ self remapCompactClasses: mapFakeClassesToReal 				refStrm: smartRefStream.	ccFixups ifFalse: [^ self error: 'A class in the file is not compatible'].	endMarker _ segment nextObject. 	"for enumeration of objects"	endMarker == 0 ifTrue: [endMarker _ 'End' clone].	arrayOfRoots _ self loadSegmentFrom: segment outPointers: outPointers.		"Can't use install.  Not ready for rehashSets"	mapFakeClassesToReal isEmpty ifFalse: [		self reshapeClasses: mapFakeClassesToReal refStream: smartRefStream	].	arrayOfRoots do: [:importedObject |		(importedObject isKindOf: MultiString) ifTrue: [			importedObject mutateJISX0208StringToUnicode.			importedObject class = MultiSymbol ifTrue: [				"self halt."				MultiSymbol hasInternedALoadedSymbol: importedObject ifTrue: [:multiSymbol |					multiSymbol == importedObject ifFalse: [						multiSymbol becomeForward: importedObject.					].				].			].		].		(importedObject isKindOf: TTCFontSet) ifTrue: [			existing _ TTCFontSet familyName: importedObject familyName pointSize: importedObject pointSize.			existing ifNil: [existing _ TextStyle defaultFont].			importedObject becomeForward: existing		].	].	Smalltalk garbageCollect.	MultiSymbol rehash.	receiverClasses _ self restoreEndianness.		"rehash sets"	smartRefStream checkFatalReshape: receiverClasses.	"Classes in this segment."	arrayOfRoots do: [:importedObject | 		importedObject class class == Metaclass ifTrue: [self declare: importedObject]].	arrayOfRoots do: [:importedObject | 		(importedObject isKindOf: CompiledMethod) ifTrue: [			importedObject sourcePointer > 0 ifTrue: [importedObject zapSourcePointer]].		(importedObject isKindOf: Project) ifTrue: [			myProject _ importedObject.			importedObject ensureChangeSetNameUnique.			Project addingProject: importedObject.			importedObject restoreReferences.			self dependentsRestore: importedObject.			ScriptEditorMorph writingUniversalTiles: 				((importedObject projectPreferenceAt: #universalTiles) ifNil: [false])]].		rootsToUnhiberhate _ arrayOfRoots select: [:importedObject | 		importedObject respondsTo: #unhibernate	"ScriptEditors and ViewerFlapTabs"	].	myProject ifNotNil: [		myProject world setProperty: #thingsToUnhibernate toValue: rootsToUnhiberhate	].	mapFakeClassesToReal isEmpty ifFalse: [		mapFakeClassesToReal keys do: [:aFake | 			aFake indexIfCompact > 0 ifTrue: [aFake becomeUncompact].			aFake removeFromSystemUnlogged].		Smalltalk organization removeEmptyCategories].	"^ self"	MultiSymbol allInstances do: [:each | 		m _ MultiSymbol intern: each asString.		each == m ifFalse: [			"For a project from older m17n image, this is necessary."			"self halt."			m becomeForward: each.		].	].! !!ImageSegment class methodsFor: 'testing' stamp: 'sd 11/30/2004 21:48'!swapOutInactiveClasses  "ImageSegment swapOutInactiveClasses"  	"Make up segments by grouping unused classes by system category.	Read about, and execute discoverActiveClasses, and THEN execute this one."	| unused groups i roots |	ImageSegment recoverFromMDFault.	ImageSegmentRootStub recoverFromMDFault.	unused _ Smalltalk allClasses select: [:c | (c instVarNamed: 'methodDict') == nil].	unused do: [:c | c recoverFromMDFault].	groups _ Dictionary new.	Smalltalk organization categories do:		[:cat |		i _ (cat findLast: [:c | c = $-]) - 1.		i <= 0 ifTrue: [i _ cat size].		groups at: (cat copyFrom: 1 to: i)			put: (groups at: (cat copyFrom: 1 to: i) ifAbsent: [Array new]) ,			((Smalltalk organization superclassOrder: cat) select: [:c | 				unused includes: c]) asArray].	groups keys do:		[:cat | roots _ groups at: cat.		Transcript cr; cr; show: cat; cr; print: roots; endEntry.		roots _ roots , (roots collect: [:c | c class]).		(cat beginsWith: 'Sys' "something here breaks") ifFalse:			[(ImageSegment new copyFromRoots: roots sizeHint: 0) extract; 				writeToFile: cat].		Transcript cr; print: Smalltalk garbageCollect; endEntry]! !!PackageInfo methodsFor: 'testing' stamp: 'sd 11/30/2004 21:24'!includesClassNamed: aClassName	^ self includesSystemCategory: ((Smalltalk organization categoryOfElement: aClassName) ifNil: [^false])! !!PackageInfo methodsFor: 'listing' stamp: 'sd 11/30/2004 21:24'!classes	^(self systemCategories gather:		[:cat |		(Smalltalk organization listAtCategoryNamed: cat)			collect: [:className | Smalltalk at: className]])				sortBy: [:a :b | a className <= b className]! !!PackageInfo methodsFor: 'listing' stamp: 'sd 11/30/2004 21:24'!foreignClasses	| s |	s _ IdentitySet new.	self foreignSystemCategories		do: [:c | (Smalltalk organization listAtCategoryNamed: c)				do: [:cl | 					| cls | 					cls _ Smalltalk at: cl. 					s add: cls;					  add: cls class]].	^ s! !!PackageInfo methodsFor: 'listing' stamp: 'sd 11/30/2004 21:24'!foreignSystemCategories	^ Smalltalk organization categories		reject: [:cat | self includesSystemCategory: cat] ! !!PackageInfo methodsFor: 'listing' stamp: 'sd 11/30/2004 21:24'!systemCategories	^ Smalltalk organization categories select: [:cat | self includesSystemCategory: cat]! !!Player class methodsFor: 'housekeeping' stamp: 'sd 11/30/2004 21:24'!freeUnreferencedSubclasses	"Player classes may hold in their class instance variables referencesto instances of themselves that are housekeepingwise unreachable. Thismethod allows such loops to be garbage collected. This is done in threesteps:	1. Remove user-created subclasses from the 'subclasses' set and fromSmalltalk. Only remove classes whose name begins with 'Player' and whichhave no references.	2. Do a full garbage collection.	3. Enumerate all Metaclasses and find those whose soleInstance'ssuperclass is this class. Reset the subclasses set to this set ofclasses, and add back to Smalltalk."	"Player freeUnreferencedSubclasses"	| oldFree candidatesForRemoval class |	oldFree _ Smalltalk garbageCollect.	candidatesForRemoval _ self subclasses asOrderedCollection select:		[:aClass | (aClass name beginsWith: 'Player') and: [aClass nameendsWithDigit]].	"Break all system links and then perform garbage collection."	candidatesForRemoval do:		[:c | self removeSubclass: c.  "Break downward subclass pointers."		Smalltalk removeKey: c name ifAbsent: [].  "Break binding of globalname"].	candidatesForRemoval _ nil.	Smalltalk garbageCollect.  "Now this should reclaim all unusedsubclasses"	"Now reconstruct system links to subclasses with valid references."	"First restore any global references via associations"	(Association allSubInstances select:			[:assn | (assn key isMemberOf: Symbol)					and: [(assn key beginsWith: 'Player')					and: [assn key endsWithDigit]]])		do: [:assn | class _ assn value.			(class isKindOf: self class) ifTrue:				[self addSubclass: class.				Smalltalk add: assn]].	"Then restore any further direct references, creating newassociations."	(Metaclass allInstances select:			[:m | (m soleInstance name beginsWith: 'Player')					and: [m soleInstance name endsWithDigit]])		do: [:m | class _ m soleInstance.			((class isKindOf: self class) and: [(Smalltalk includesKey: classname) not]) ifTrue:				[self addSubclass: class.				Smalltalk at: class name put: class]].	Smalltalk organization removeMissingClasses.	^ Smalltalk garbageCollect - oldFree! !!Project methodsFor: 'file in/out' stamp: 'sd 11/30/2004 21:24'!exportSegmentWithCatagories: catList classes: classList fileName: aFileName directory: aDirectory	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."	| is str ans revertSeg roots holder |self halt.  "unused"	"world == World ifTrue: [^ false]."		"self inform: 'Can''t send the current world out'."	world isMorph ifFalse: [		self projectParameters at: #isMVC put: true.		^ false].	"Only Morphic projects for now"	world ifNil: [^ false].  world presenter ifNil: [^ false].	Utilities emptyScrapsBook.	world currentHand pasteBuffer: nil.	  "don't write the paste buffer."	world currentHand mouseOverHandler initialize.	  "forget about any references here"		"Display checkCurrentHandForObjectToPaste."	Command initialize.	world clearCommandHistory.	world fullReleaseCachedState; releaseViewers. 	world cleanseStepList.	world localFlapTabs size = world flapTabs size ifFalse: [		self error: 'Still holding onto Global flaps'].	world releaseSqueakPages.	ScriptEditorMorph writingUniversalTiles: (self projectParameterAt: #universalTiles ifAbsent: [false]).	holder _ Project allProjects.	"force them in to outPointers, where DiskProxys are made"	"Just export me, not my previous version"	revertSeg _ self projectParameters at: #revertToMe ifAbsent: [nil].	self projectParameters removeKey: #revertToMe ifAbsent: [].	roots _ OrderedCollection new.	roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.	roots add: world activeHand; addAll: classList; addAll: (classList collect: [:cls | cls class]).	roots _ roots reject: [ :x | x isNil].	"early saves may not have active hand or thumbnail"	catList do: [:sysCat | 		(Smalltalk organization listAtCategoryNamed: sysCat asSymbol) do: [:symb |			roots add: (Smalltalk at: symb); add: (Smalltalk at: symb) class]].	is _ ImageSegment new copySmartRootsExport: roots asArray.		"old way was (is _ ImageSegment new copyFromRootsForExport: roots asArray)"	is state = #tooBig ifTrue: [^ false].	str _ ''.	"considered legal to save a project that has never been entered"	(is outPointers includes: world) ifTrue: [		str _ str, '\Project''s own world is not in the segment.' withCRs].	str isEmpty ifFalse: [		ans _ (PopUpMenu labels: 'Do not write file	Write file anyway	Debug') startUpWithCaption: str.		ans = 1 ifTrue: [			revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].			^ false].		ans = 3 ifTrue: [self halt: 'Segment not written']].	is writeForExportWithSources: aFileName inDirectory: aDirectory.	revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].	holder.	world flapTabs do: [:ft | 			(ft respondsTo: #unhibernate) ifTrue: [ft unhibernate]].	is arrayOfRoots do: [:obj |		obj class == ScriptEditorMorph ifTrue: [obj unhibernate]].	^ true! !!ReleaseBuilder methodsFor: 'squeakland' stamp: 'sd 11/30/2004 21:25'!makeSqueaklandReleasePhaseStripping	"ReleaseBuilder new makeSqueaklandReleasePhaseStripping"	#(#Helvetica #Palatino #Courier #ComicSansMS )		do: [:n | TextConstants				removeKey: n				ifAbsent: []].	Smalltalk		at: #Player		ifPresent: [:superCls | superCls				allSubclassesDo: [:cls | 					cls isSystemDefined						ifFalse: [cls removeFromSystem].					cls := nil]].	Smalltalk garbageCollect.	Smalltalk discardFFI; discardSUnit; discardSpeech; yourself.	"discardMVC;"	Smalltalk organization removeEmptyCategories.	Smalltalk garbageCollect.	ScheduledControllers := nil.	Behavior flushObsoleteSubclasses.	Smalltalk garbageCollect; garbageCollect.	DataStream initialize.	Smalltalk fixObsoleteReferences! !!String class methodsFor: 'm17n' stamp: 'sd 11/30/2004 21:27'!conv0	ArrayedCollection subclass: #AbstractString		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Multilingual-BaseClasses'.	ClassBuilder new		name: #String		inEnvironment: String environment		subclassOf: (Smalltalk at: #AbstractString)		type: String typeOfClass		instanceVariableNames: String instanceVariablesString		classVariableNames: String classVariablesString		poolDictionaries: String sharedPoolsString		category: (Smalltalk organization categoryOfElement: #String) asString		unsafe: true.	String organization categories do: [:cat |		(Smalltalk at: #AbstractString) organization addCategory: cat	].! !!StringMorph class methodsFor: 'testing' stamp: 'sd 11/30/2004 21:27'!test	"Return a morph with lots of strings for testing display speed."	| c |	c _ AlignmentMorph newColumn.	Smalltalk organization categories do:		[:cat | c addMorph: (StringMorph new contents: cat)].	^ c! !!StringMorph class methodsFor: 'testing' stamp: 'sd 11/30/2004 21:28'!test2	"Return a morph with lots of strings for testing display speed."	| c r |	c _ AlignmentMorph newColumn.	Smalltalk organization categories reverseDo:		[:cat | c addMorph: (StringMorph new contents: cat)].	r _ RectangleMorph new extent: c fullBounds extent.	c submorphsDo: [:m | r addMorph: m].	^ r! !!SystemDictionary methodsFor: 'accessing' stamp: 'sd 11/30/2004 21:58'!organization: anOrganizer	organization := anOrganizer! !!SystemDictionary methodsFor: 'class names' stamp: 'sd 11/30/2004 21:32'!forgetClass: aClass logged: aBool 	"Delete the class, aClass, from the system.	Note that this doesn't do everything required to dispose of a class - to do that use Class>>removeFromSystem."	aBool ifTrue: [SystemChangeNotifier uniqueInstance classRemoved: aClass fromCategory: aClass category].			self organization removeElement: aClass name.	self removeFromStartUpList: aClass.	self removeFromShutDownList: aClass.	self removeKey: aClass name ifAbsent: [].	self flushClassNameCache! !!SystemDictionary methodsFor: 'class names' stamp: 'sd 11/30/2004 21:33'!renameClass: aClass as: newName 	"Rename the class, aClass, to have the title newName."	| oldref i oldName category |	oldName := aClass name.	category := aClass category.	self organization classify: newName under: aClass category.	self organization removeElement: aClass name.	oldref _ self associationAt: aClass name.	self removeKey: aClass name.	oldref key: newName.	self add: oldref.  "Old association preserves old refs"	(Array with: StartUpList with: ShutDownList) do:		[:list |  i _ list indexOf: aClass name ifAbsent: [0].		i > 0 ifTrue: [list at: i put: newName]].	self flushClassNameCache.	SystemChangeNotifier uniqueInstance classRenamed: aClass from: oldName to: newName inCategory: category! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 11/30/2004 21:32'!removeEmptyMessageCategories	"Smalltalk removeEmptyMessageCategories"	self garbageCollect.	(ClassOrganizer allInstances copyWith: self organization)		do: [:org | org removeEmptyCategories]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:48'!computeImageSegmentation	"Smalltalk computeImageSegmentation"	"Here's how the segmentation works:	For each partition, we collect the classes involved, and also all	messages no longer used in the absence of this partition. We	start by computing a 'Miscellaneous' segment of all the	unused classes in the system as is."	| partitions unusedCandM newClasses expandedCandM |	partitions := Dictionary new.	unusedCandM := self unusedClassesAndMethodsWithout: {{}. {}}.	partitions at: 'Miscellaneous' put: unusedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'VMConstruction-*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'VMConstruction' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'ST80-*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'ST80' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'Morphic-Games')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Games' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'Morphic-Remote')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Nebraska' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | ((self organization categoriesMatching: 'Network-*')						copyWithoutAll: #('Network-Kernel' 'Network-Url' 'Network-Protocols' 'Network-ObjectSocket' ))						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := Smalltalk unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Network' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'Balloon3D-*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Balloon3D' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'FFI-*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'FFI' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'Genie-*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Genie' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'Speech-*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Speech' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | #('Morphic-Components' )						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses copyWithoutAll: #(#ComponentLikeModel ).	expandedCandM := Smalltalk unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Components' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | #('Sound-Scores' 'Sound-Interface' )						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses , #(#WaveletCodec #Sonogram #FWT #AIFFFileReader ).	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Sound' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | ((self organization categoriesMatching: 'Tools-*')						copyWithout: 'Tools-Menus')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses copyWithoutAll: #(#Debugger #Inspector #ContextVariablesInspector #SyntaxError #ChangeSet #ChangeRecord #ClassChangeRecord #ChangeList #VersionsBrowser ).	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Tools' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'Balloon-MMFlash*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses , #(#ADPCMCodec ).	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Flash' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (self organization categoriesMatching: 'Balloon-TrueType*')						do: [:cat | (self organization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'TrueType' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Graphics-Files')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'GraphicFiles' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	#(#AliceConstants 'Balloon3D' #B3DEngineConstants 'Balloon3D' #WonderlandConstants 'Balloon3D' #FFIConstants 'FFI' #KlattResonatorIndices 'Speech' )		pairsDo: [:poolName :part | (partitions at: part) first add: poolName].	partitions		keysDo: [:k | k = 'Miscellaneous'				ifFalse: [(partitions at: 'Miscellaneous') first removeAllFoundIn: (partitions at: k) first]].	^ partitions! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:30'!discard3D	"Smalltalk discard3D"	"Discard 3D Support."	self discardWonderland.	self		removeKey: #B3DEngineConstants		ifAbsent: [].	self		at: #InterpolatingImageMorph		ifPresent: [:cls | cls removeFromSystem].	self organization removeCategoriesMatching: 'Graphics-FXBlt'.	self organization removeCategoriesMatching: 'Graphics-External'.	self organization removeCategoriesMatching: 'Balloon3D-*'.	self organization removeCategoriesMatching: 'Graphics-Tools-*'.	Color removeSelector: #asB3DColor.	Form removeSelector: #asTexture.	Morph removeSelector: #asTexture.	Morph removeSelector: #mapPrimitiveVertex:.	Morph removeSelector: #installAsWonderlandTextureOn:.	FileList removeSelector: #open3DSFile.	Point removeSelector: #@.	self		at: #BalloonCanvas		ifPresent: [:cc | cc removeSelector: #render:].	Stream removeSelector: #asVRMLStream.	SketchMorph removeSelector: #drawInterpolatedImage:on:.	SketchMorph removeSelector: #generateInterpolatedForm.	self		at: #B3DEnginePlugin		ifPresent: [:cls | cls				withAllSubclassesDo: [:each | each removeFromSystem]].	DataStream initialize! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:30'!discardFFI	"Discard the complete foreign function interface.	NOTE: Recreates specialObjectsArray to prevent obsolete	references. Has to specially remove external structure	hierarchy before ExternalType"	self		at: #ExternalStructure		ifPresent: [:cls | (ChangeSet superclassOrder: cls withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	self organization removeCategoriesMatching: 'FFI-*'.	self recreateSpecialObjectsArray.	"Remove obsolete refs"	ByteArray removeSelector: #asExternalPointer.	ByteArray removeSelector: #pointerAt:! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:30'!discardFlash	"Discard Flash support."	self organization removeCategoriesMatching: 'Balloon-MMFlash*'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:31'!discardMVC	"After suitable checks, strip out much of MVC from the system"	"Smalltalk discardMVC"	| keepers |	self flag: #bob.	"zapping projects"	self isMorphic		ifFalse: [self inform: 'You must be in a Morphic project to discard MVC.'.			^ self].	"Check that there are no MVC Projects"	(Project allProjects			allSatisfy: [:proj | proj isMorphic])		ifFalse: [(self confirm: 'Would you like a chance to remove yourMVC projects in an orderly manner?')				ifTrue: [^ self].			(self confirm: 'If you wish, I can remove all MVC projects,make this project be the top project, and placeall orphaned sub-projects of MVC parents here.Would you like be to do thisand proceed to discard all MVC classes?')				ifTrue: [self zapMVCprojects]				ifFalse: [^ self]].	self reclaimDependents.	"Remove old Paragraph classes and View classes."	self		at: #Paragraph		ifPresent: [:paraClass | (ChangeSet superclassOrder: paraClass withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	self		at: #View		ifPresent: [:viewClass | (ChangeSet superclassOrder: viewClass withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	"Get rid of ParagraphEditor's ScrollController dependence"	#(#markerDelta #viewDelta #scrollAmount #scrollBar #computeMarkerRegion )		do: [:sel | ParagraphEditor removeSelector: sel].	ParagraphEditor compile: 'updateMarker'.	"Reshape to MouseMenuController"	Compiler		evaluate: (ParagraphEditor definition copyReplaceAll: 'ScrollController' with: 'MouseMenuController').	"Get rid of all Controller classes not needed by	ParagraphEditor and ScreenController"	keepers := TextMorphEditor withAllSuperclasses copyWith: ScreenController.	(ChangeSet superclassOrder: Controller withAllSubclasses asArray)		reverseDo: [:c | (keepers includes: c)				ifFalse: [c removeFromSystem]].	self organization removeCategoriesMatching: 'ST80-Paths'.	self organization removeCategoriesMatching: 'ST80-Symbols'.	self organization removeCategoriesMatching: 'ST80-Pluggable Views'.	self removeClassNamed: 'FormButtonCache'.	self removeClassNamed: 'WindowingTransformation'.	self removeClassNamed: 'ControlManager'.	self removeClassNamed: 'DisplayTextView'.	ScheduledControllers := nil.	Undeclared removeUnreferencedKeys.	self organization removeEmptyCategories.	Symbol rehash! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:48'!discardMorphic	"Discard Morphic.	Updated for 2.8 TPR"	"Smalltalk discardMorphic"	"Check that we are in an MVC Project and that there are no	Morphic Projects	or WorldMorphViews."	| subs |	Flaps clobberFlapTabList.	self discardFlash.	self discardTrueType.	subs := OrderedCollection new.	Morph		allSubclassesWithLevelDo: [:c :i | subs addFirst: c]		startingLevel: 0.	subs		do: [:c | c removeFromSystem].	self removeClassNamed: #CornerRounder.	self		removeKey: #BalloonEngineConstants		ifAbsent: [].	self organization removeCategoriesMatching: 'Balloon-*'.	self organization removeCategoriesMatching: 'Morphic-*'.	self organization removeSystemCategory: 'Graphics-Transformations'.	self organization removeSystemCategory: 'ST80-Morphic'.	ScriptingSystem := nil! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:31'!discardNetworking	"Discard the support for TCP/IP networking."	self organization removeCategoriesMatching: 'Network-*'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:48'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently	used."	"Smalltalk discardOddsAndEnds"	self organization removeSystemCategory: 'System-Serial Port'.	self organization removeSystemCategory: 'ST80-Symbols'.	self organization removeSystemCategory: 'Tools-File Contents Browser'.	self organization removeSystemCategory: 'System-Compression'.	self organization removeSystemCategory: 'Tools-Explorer'.	self organization removeSystemCategory: 'System-Digital Signatures'.	Form removeSelector: #edit.	self		at: #FormView		ifPresent: [:c | c compile: 'defaultControllerClass  ^ NoController' classified: 'controller access'].	self removeClassNamed: #FormEditorView.	self removeClassNamed: #FormEditor.	self organization removeSystemCategory: 'ST80-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	self removeClassNamed: #FormButtonCache.	self removeClassNamed: #FormMenuController.	self removeClassNamed: #FormMenuView.	self removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	SystemDictionary removeSelector: #viewImageImports.	ScreenController removeSelector: #viewImageImports.	self removeClassNamed: #FormHolderView.	self removeClassNamed: #FormInspectView.	"experimental hand-drawn character recoginizer:"	ParagraphEditor removeSelector: #recognizeCharacters.	ParagraphEditor removeSelector: #recognizer:.	ParagraphEditor removeSelector: #recognizeCharactersWhileMouseIn:.	self removeClassNamed: #CharRecog.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	self removeClassNamed: #ObjectViewer.	self removeClassNamed: #ObjectTracer.	"miscellaneous classes:"	self removeClassNamed: #Array2D.	self removeClassNamed: #DriveACar.	self removeClassNamed: #EventRecorder.	self removeClassNamed: #FindTheLight.	self removeClassNamed: #PluggableTest.	self removeClassNamed: #SystemMonitor.	self removeClassNamed: #DocLibrary.	self removeClassNamed: #ProtocolBrowser.	self removeClassNamed: #ObjectExplorerWrapper.	self removeClassNamed: #HierarchyBrowser.	self removeClassNamed: #LinkedMessageSet.	self removeClassNamed: #ObjectExplorer.	self removeClassNamed: #PackageBrowser.	self removeClassNamed: #AbstractHierarchicalList.	self removeClassNamed: #ChangeList.	self removeClassNamed: #VersionsBrowser.	self removeClassNamed: #ChangeRecord.	self removeClassNamed: #SelectorBrowser.	self removeClassNamed: #HtmlFileStream.	self removeClassNamed: #CrLfFileStream.	self removeClassNamed: #FXGrafPort.	self removeClassNamed: #FXBlt.	self		at: #SampledSound		ifPresent: [:c | c initialize].	#(#Helvetica #Palatino #Courier #ComicBold #ComicPlain )		do: [:k | TextConstants				removeKey: k				ifAbsent: []].	Preferences		setButtonFontTo: (StrikeFont familyName: #NewYork size: 12).	Preferences		setFlapsFontTo: (StrikeFont familyName: #NewYork size: 12).	#(#GZipConstants #ZipConstants #KlattResonatorIndices )		do: [:k | self				removeKey: k				ifAbsent: []]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:31'!discardSUnit	"Smalltalk discardSUnit"	| oc |	oc := OrderedCollection new.	(self		at: #TestCase		ifAbsent: [^ self])		allSubclassesWithLevelDo: [:c :i | oc addFirst: c]		startingLevel: 0.	oc		do: [:c | c removeFromSystem].	self organization removeCategoriesMatching: 'SUnit-*'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:31'!discardSoundAndSpeech	"NOTE: This leaves 26 references to obsolete classes, one in	SystemDictionary class>>initialize, one in	ImageSegment>>restoreEndianness, one in DataStream	class>>initialize and 23 in Morphic and Flash classes."	self organization removeCategoriesMatching: 'Sound-*'.	self organization removeCategoriesMatching: 'Speech-*'.	self removeClassNamed: #KlattSynthesizerPlugin.	self removeSelector: #(#DigitalSignatureAlgorithm #randomBitsFromSoundInput: ).	self removeSelector: #(#Project #beep ).	Preferences setPreference: #soundsEnabled toValue: false! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:31'!discardSoundSynthesis	"Discard the sound synthesis facilities, and the methods and	classes that use it. This also discards MIDI."	self discardMIDI.	self discardSpeech.	self organization removeCategoriesMatching: 'Sound-Interface'.	self		at: #GraphMorph		ifPresent: [:graphMorph | #(#playOnce #readDataFromFile )				do: [:sel | graphMorph removeSelector: sel]].	self		at: #TrashCanMorph		ifPresent: [:trashMorph | 			trashMorph class removeSelector: #samplesForDelete.			trashMorph class removeSelector: #samplesForMouseEnter.			trashMorph class removeSelector: #samplesForMouseLeave].	self organization removeCategoriesMatching: 'Sound-Synthesis'.	self organization removeCategoriesMatching: 'Sound-Scores'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:31'!discardSpeech	"Discard support for speech synthesis"	self organization removeCategoriesMatching: 'Speech*'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:32'!discardTrueType	"Discard TrueType support."	self organization removeCategoriesMatching: 'Balloon-TrueType*'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:32'!discardWonderland	"Smalltalk discardWonderland"	"Discard 3D Support."	self		at: #Wonderland		ifPresent: [:cls | cls removeActorPrototypesFromSystem].	self		removeKey: #WonderlandConstants		ifAbsent: [].	self		removeKey: #AliceConstants		ifAbsent: [].	self organization removeCategoriesMatching: 'Balloon3D-Wonderland*'.	self organization removeCategoriesMatching: 'Balloon3D-Alice*'.	self organization removeCategoriesMatching: 'Balloon3D-Pooh*'.	self organization removeCategoriesMatching: 'Balloon3D-UserObjects'.	self		at: #VRMLWonderlandBuilder		ifPresent: [:cls | cls removeFromSystem]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:48'!lastRemoval	"Smalltalk lastRemoval"	"Some explicit removals - add unwanted methods keeping	other methods."	| oldDicts newDicts |	#(#abandonSources )		do: [:each | self class removeSelector: each].	"Get rid of all unsent methods."	[self removeAllUnSentMessages > 0] whileTrue.	"Shrink method dictionaries."	self garbageCollect.	oldDicts := MethodDictionary allInstances.	newDicts := Array new: oldDicts size.	oldDicts		withIndexDo: [:d :index | newDicts at: index put: d rehashWithoutBecome].	oldDicts elementsExchangeIdentityWith: newDicts.	oldDicts := newDicts := nil.	self		allClassesDo: [:c | c zapOrganization].	SystemOrganization := nil.	ChangeSet current initialize! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/30/2004 21:32'!majorShrink	"Undertake a major shrinkage of the image.	This method throws out lots of the system that is not needed	for, eg, operation in a hand-held PC. majorShrink produces a	999k image in Squeak 2.8	Smalltalk majorShrink; abandonSources; lastRemoval"	| oldDicts newDicts |	self isMorphic		ifTrue: [^ self error: 'You can only run majorShrink in MVC'].	Project current isTopProject		ifFalse: [^ self error: 'You can only run majorShrink in the top project'].	(self confirm: 'All sub-projects will be deleted from this image.You should already have made a backup copy,or you must save with a different name after shrinking.Shall we proceed to discard most of the content in this image?')		ifFalse: [^ self inform: 'No changes have been made.'].	"Remove all projects but the current one. - saves 522k"	ProjectView		allInstancesDo: [:pv | pv controller closeAndUnscheduleNoTerminate].	Project current setParent: Project current.	MorphWorldView		allInstancesDo: [:pv | pv topView controller closeAndUnscheduleNoTerminate].	self		at: #Wonderland		ifPresent: [:cls | cls removeActorPrototypesFromSystem].	Player freeUnreferencedSubclasses.	MorphicModel removeUninstantiatedModels.	Utilities classPool at: #ScrapsBook put: nil.	Utilities zapUpdateDownloader.	ProjectHistory currentHistory initialize.	Project rebuildAllProjects.	"Smalltalk discardVMConstruction."	"755k"	self discardSoundSynthesis.	"544k"	self discardOddsAndEnds.	"227k"	self discardNetworking.	"234k"	"Smalltalk discard3D."	"407k"	self discardFFI.	"33k"	self discardMorphic.	"1372k"	Symbol rehash.	"40k"	"Above by itself saves about 4,238k"	"Remove references to a few classes to be deleted, so that they	won't leave obsolete versions around."	ChangeSet class compile: 'defaultName		^ ''Changes'' ' classified: 'initialization'.	ScreenController removeSelector: #openChangeManager.	ScreenController removeSelector: #exitProject.	ScreenController removeSelector: #openProject.	ScreenController removeSelector: #viewImageImports.	"Now delete various other classes.."	self organization removeSystemCategory: 'Graphics-Files'.	self organization removeSystemCategory: 'System-Object Storage'.	self removeClassNamed: #ProjectController.	self removeClassNamed: #ProjectView.	"Smalltalk removeClassNamed: #Project."	self removeClassNamed: #Environment.	self removeClassNamed: #FormSetFont.	self removeClassNamed: #FontSet.	self removeClassNamed: #InstructionPrinter.	self removeClassNamed: #ChangeSorter.	self removeClassNamed: #DualChangeSorter.	self removeClassNamed: #EmphasizedMenu.	self removeClassNamed: #MessageTally.	StringHolder class removeSelector: #originalWorkspaceContents.	CompiledMethod removeSelector: #symbolic.	RemoteString removeSelector: #makeNewTextAttVersion.	Utilities class removeSelector: #absorbUpdatesFromServer.	self removeClassNamed: #PenPointRecorder.	self removeClassNamed: #Path.	self removeClassNamed: #Base64MimeConverter.	"Smalltalk removeClassNamed: #EToySystem. Dont bother - its	very small and used for timestamps etc"	self removeClassNamed: #RWBinaryOrTextStream.	self removeClassNamed: #AttributedTextStream.	self removeClassNamed: #WordNet.	self removeClassNamed: #SelectorBrowser.	TextStyle		allSubInstancesDo: [:ts | ts				newFontArray: (ts fontArray						copyFrom: 1						to: (2 min: ts fontArray size))].	ListParagraph initialize.	PopUpMenu initialize.	StandardSystemView initialize.	ChangeSet noChanges.	ChangeSorter classPool		at: #AllChangeSets		put: (OrderedCollection with: ChangeSet current).	SystemDictionary removeSelector: #majorShrink.	[self removeAllUnSentMessages > 0]		whileTrue: [Smalltalk unusedClasses				do: [:c | (Smalltalk at: c) removeFromSystem]].	self organization removeEmptyCategories.	self		allClassesDo: [:c | c zapOrganization].	self garbageCollect.	'Rehashing method dictionaries . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: MethodDictionary instanceCount		during: [:bar | 			oldDicts := MethodDictionary allInstances.			newDicts := Array new: oldDicts size.			oldDicts				withIndexDo: [:d :index | 					bar value: index.					newDicts at: index put: d rehashWithoutBecome].			oldDicts elementsExchangeIdentityWith: newDicts].	oldDicts := newDicts := nil.	Project rebuildAllProjects.	ChangeSet current initialize.	"seems to take more than one try to gc all the weak refs in	SymbolTable "	3		timesRepeat: [self garbageCollect.			Symbol compactSymbolTable]! !!SystemNavigation methodsFor: 'query' stamp: 'sd 11/30/2004 21:33'!allPrimitiveMethodsInCategories: aList 	"Answer an OrderedCollection of all the methods that are implemented by 	primitives in the given categories. 1/26/96 sw"	"SystemNavigation new allPrimitiveMethodsInCategories:  	#('Collections-Streams' 'Files-Streams' 'Files-Abstract' 'Files-Macintosh')"	| aColl method |	aColl _ OrderedCollection new: 200.	Cursor execute		showWhile: [self				allBehaviorsDo: [:aClass | (aList includes: (Smalltalk organization categoryOfElement: aClass theNonMetaClass name asString) asString)						ifTrue: [aClass								selectorsDo: [:sel | 									method _ aClass compiledMethodAt: sel.									method primitive ~= 0										ifTrue: [aColl addLast: aClass name , ' ' , sel , ' ' , method primitive printString]]]]].	^ aColl! !!SystemOrganizer methodsFor: 'fileIn/Out' stamp: 'sd 11/30/2004 21:50'!fileOut  	"Smalltalk organization fileOut"	| internalStream |	internalStream _ WriteStream on: (String new: 30000).	internalStream nextPutAll: 'Smalltalk organization changeFromCategorySpecs: #('; cr;		print: Smalltalk organization;  "ends with a cr"		nextPutAll: ')!!'; cr.	FileStream writeSourceCodeFrom: internalStream baseName: (FileDirectory default nextNameFor: 'SystemOrganization' extension: 'st') isSt: true useHtml: false! !!SystemOrganizer methodsFor: 'fileIn/Out' stamp: 'sd 11/30/2004 21:53'!objectForDataStream: refStrm	| dp |	"I am about to be written on an object file.  Write a path to me in the other system instead."self == Smalltalk organization ifTrue: [	dp _ DiskProxy global: #SystemOrganization selector: #yourself args: #().	"the previous line will break but I do not know how to fix it. -- sd"	refStrm replace: self with: dp.	^ dp].^ self! !!SystemOrganizer methodsFor: 'remove' stamp: 'sd 11/30/2004 21:50'!removeMissingClasses	"Remove any class names that are no longer in the Smalltalk dictionary. Used for cleaning up after garbage collecting user-generated classes."	"Smalltalk organization removeMissingClasses"	elementArray copy do: [:el |		(Smalltalk includesKey: el) ifFalse: [self removeElement: el]].! !!SystemOrganizer methodsFor: 'query' stamp: 'sd 11/30/2004 21:49'!commentInventory: categoryName	"Smalltalk organization commentInventory: 'Morphic*'"	| classes commentedClasses |	classes _ OrderedCollection new.	self categories withIndexCollect: [:cat :idx |		(categoryName match: cat)			ifTrue: [classes addAll: (self listAtCategoryNumber: idx)]			ifFalse: [nil]].	commentedClasses _ classes select: [:catCls | (Smalltalk at: catCls) hasComment].	^ 'There are ' , classes size asString , ' classes in ' , categoryName ,		' of which ' , commentedClasses size asString , ' have comments and ',		(classes size - commentedClasses size) asString , ' do not yet have comments.'! !!SystemOrganizer methodsFor: 'query' stamp: 'sd 11/30/2004 21:49'!uncommentedClassesIn: categoryName	"Smalltalk organization uncommentedClassesIn: 'Morphic*'"	| classes |	classes _ OrderedCollection new.	self categories withIndexCollect: [:cat :idx |		(categoryName match: cat)			ifTrue: [classes addAll: (self listAtCategoryNumber: idx)]			ifFalse: [nil]].	^ (classes collect: [:clsName | Smalltalk at: clsName]		thenSelect: [:cls | cls hasComment not]) asArray! !!TheWorldMenu methodsFor: 'construction' stamp: 'sd 11/30/2004 21:33'!newMorph	"The user requested 'new morph' from the world menu.  Put up a menu that allows many ways of obtaining new morphs.  If the preference #classicNewMorphMenu is true, the full form of yore is used; otherwise, a much shortened form is used."	| menu subMenu catDict shortCat class |	menu _ self menu: 'Add a new morph'.	menu 		add: 'from paste buffer' translated target: myHand action: #pasteMorph;		add: 'from alphabetical list' translated subMenu: self alphabeticalMorphMenu;		add: 'from a file...' translated target: self action: #readMorphFromAFile.	menu addLine.	menu add: 'grab rectangle from screen' translated target: myWorld action: #grabDrawingFromScreen:;		add: 'grab with lasso from screen' translated target: myWorld action: #grabLassoFromScreen:;		add: 'grab rubber band from screen' translated target: myWorld action: #grabRubberBandFromScreen:;		add: 'grab flood area from screen' translated target: myWorld action: #grabFloodFromScreen:.	menu addLine.	menu add: 'make new drawing' translated target: myWorld action: #newDrawingFromMenu:;		add: 'make link to project...' translated target: self action: #projectThumbnail.	Preferences classicNewMorphMenu ifTrue:		[menu addLine.		catDict _ Dictionary new.		Smalltalk organization categories do:			[:cat |			((cat beginsWith: 'Morphic-')					and: [(#('Morphic-Menus' 'Morphic-Support') includes: cat) not])			ifTrue:				[shortCat _ (cat copyFrom: 'Morphic-' size+1 to: cat size) translated.				(SystemOrganization listAtCategoryNamed: cat) do:					[:cName | class _ Smalltalk at: cName.					((class inheritsFrom: Morph)						and: [class includeInNewMorphMenu])						ifTrue:						[(catDict includesKey: shortCat) 						ifTrue: [(catDict at: shortCat) addLast: class]						ifFalse: [catDict at: shortCat put: (OrderedCollection with: class)]]]]].		catDict keys asSortedCollection do:			[:categ |			subMenu _ MenuMorph new.			((catDict at: categ) asSortedCollection: [:c1 :c2 | c1 name < c2 name]) do:				[:cl | subMenu add: cl name						target: self						selector: #newMorphOfClass:event:						argument: cl].			menu add: categ subMenu: subMenu]].	self doPopUp: menu.! !!Utilities class methodsFor: 'summer97 additions' stamp: 'sd 11/30/2004 21:33'!classCategoriesStartingWith: aPrefix	"Answer a list of system class categories beginning with the given prefix"	"Utilities classCategoriesStartingWith: 'Files'"	^ Smalltalk organization categories select:		[:aCat | (aCat asString findString:  aPrefix startingAt: 1) = 1]! !IdentityDictionary subclass: #SystemDictionary	instanceVariableNames: 'cachedClassNames organization'	classVariableNames: 'LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore MemoryHogs ShutDownList SourceFileVersionString SpecialSelectors StartUpList StartupStamp SystemChanges'	poolDictionaries: ''	category: 'System-Support'!