'From Squeakland 3.8.5976 of 25 August 2004 [latest update: #329] on 6 October 2004 at 11:49:28 am'!"Change Set:		VocabularySummaryFix-Squeakland-nkDate:			6 October 2004Author:			Ned KonzFixes bug#0000143, where you'd get a walkback in eToyFriendly mode when asking for a vocabulary summary from the authoring tools submenu.Also separates the 'connector' vocabulary displayed by Connectors themselves into two separate categories to avoid confusion:- 'connector': connector behavior and properties- 'connections to me': only displayed if the connector itself has been connected to by another Connector.The 'connections to me' vocabulary category is what is displayed by any Morphs that have been connected to by a Connector.THIS CS HAS BEEN REORDERED MANUALLY"!!Morph class methodsFor: '*flexiblevocabularies-scripting' stamp: 'nk 9/11/2004 17:30'!unfilteredCategoriesForViewer	"Answer a list of symbols representing the categories to offer in the viewer for one of my instances, in order of:	- masterOrderingOfCategorySymbols first	- others last in order by translated wording"	"	Morph unfilteredCategoriesForViewer	"	| aClass additions masterOrder |	aClass _ self.	additions _ OrderedCollection new.	[aClass == Morph superclass ] whileFalse: [		additions addAll: (aClass allAdditionsToViewerCategories keys			asSortedCollection: [ :a :b | a translated < b translated ]).		aClass _ aClass superclass ]. 	masterOrder := Vocabulary eToyVocabulary masterOrderingOfCategorySymbols.	^(masterOrder intersection: additions), (additions difference: masterOrder).! !!Object methodsFor: '*flexiblevocabularies-viewer' stamp: 'nk 9/11/2004 16:53'!methodInterfacesInPresentationOrderFrom: interfaceList forCategory: aCategory 	"Answer the interface list sorted in desired presentation order, using a 	static master-ordering list, q.v. The category parameter allows an 	escape in case one wants to apply different order strategies in different 	categories, but for now a single master-priority-ordering is used -- see 	the comment in method EToyVocabulary.masterOrderingOfPhraseSymbols"	| masterOrder ordered unordered index |	masterOrder := Vocabulary eToyVocabulary masterOrderingOfPhraseSymbols.	ordered := SortedCollection sortBlock: [:a :b | a key < b key].	unordered := SortedCollection sortBlock: [:a :b | a wording < b wording].	interfaceList do: [:interface | 		index := masterOrder indexOf: interface elementSymbol.		index isZero			ifTrue: [unordered add: interface]			ifFalse: [ordered add: index -> interface]].	^ Array		streamContents: [:stream | 			ordered do: [:assoc | stream nextPut: assoc value].			stream nextPutAll: unordered]! !!EToyVocabulary methodsFor: '*flexiblevocabularies-initialization' stamp: 'nk 9/11/2004 18:04'!initialize	"Initialize the receiver (automatically called when instances are created via 'new')"	|   classes aMethodCategory selector selectors categorySymbols aMethodInterface |	super initialize.	self vocabularyName: #eToy.	self documentation: '"EToy" is a vocabulary that provides the equivalent of the 1997-2000 etoy prototype'.	categorySymbols _ Set new.	classes _ self class morphClassesDeclaringViewerAdditions.	classes do:		[:aMorphClass | categorySymbols addAll: aMorphClass unfilteredCategoriesForViewer].	self addCustomCategoriesTo: categorySymbols.  "For benefit, e.g., of EToyVectorVocabulary"	categorySymbols asOrderedCollection do:		[:aCategorySymbol |			aMethodCategory _ ElementCategory new categoryName: aCategorySymbol.			selectors _ Set new.			classes do:				[:aMorphClass |					 (aMorphClass additionsToViewerCategory: aCategorySymbol) do:						[:anElement |						aMethodInterface _ self methodInterfaceFrom: anElement.						selectors add: (selector _ aMethodInterface selector).						(methodInterfaces includesKey: selector) ifFalse:							[methodInterfaces at: selector put: aMethodInterface].						self flag: #deferred.						"NB at present, the *setter* does not get its own method interface.  Need to revisit"].			(selectors copyWithout: #unused) asSortedArray do:				[:aSelector |					aMethodCategory elementAt: aSelector put: (methodInterfaces at: aSelector)]].				 			self addCategory: aMethodCategory].	self addCategoryNamed: ScriptingSystem nameForInstanceVariablesCategory.	self addCategoryNamed: ScriptingSystem nameForScriptsCategory.	self setCategoryDocumentationStrings.	(self respondsTo: #applyMasterOrdering)		ifTrue: [ self applyMasterOrdering ].! !!EToyVocabulary methodsFor: '*flexiblevocabularies-method list' stamp: 'nk 9/11/2004 15:41'!masterOrderingOfCategorySymbols	"Answer a dictatorially-imposed presentation list of category symbols.	This governs the order in which available vocabulary categories are presented in etoy viewers using the etoy vocabulary.	The default implementation is that any items that are in this list will occur first, in the order specified here; after that, all other items will come, in alphabetic order by their translated wording."	^#(basic #'color & border' geometry motion #'pen use' tests layout #'drag & drop' scripting observation button search miscellaneous)! !!EToyVocabulary methodsFor: '*flexiblevocabularies-method list' stamp: 'nk 9/11/2004 15:41'!masterOrderingOfPhraseSymbols	"Answer a dictatorially-imposed presentation list of phrase-symbols.	This governs the order in which suitable phrases are presented in etoy viewers using the etoy vocabulary.	For any given category, the default implementation is that any items that are in this list will occur first, in the order specified here; after that, all other items will come, in alphabetic order by their translated wording."	^ #(beep: forward: turn: getX getY  getHeading getScaleFactor		getLeft getRight getTop getBottom  		getLength getWidth 		getTheta getDistance getHeadingTheta		startScript: pauseScript: stopScript: startAll: pauseAll: stopAll: tellAllSiblings: doScript:		getColor getUseGradientFill getSecondColor  getRadialGradientFill  getBorderWidth getBorderColor getBorderStyle getRoundedCorners getDropShadow getShadowColor 		getGraphic getBaseGraphic)! !!EToyVocabulary class methodsFor: '*flexiblevocabularies-scripting' stamp: 'nk 9/11/2004 18:00'!vocabularySummary	"Answer a string describing all the vocabulary defined anywhere in the 	system."	"	(StringHolder new contents: EToyVocabulary vocabularySummary)  	openLabel: 'EToy Vocabulary' translated 	"	| etoyVocab rt interfaces allAdditions |	etoyVocab := Vocabulary eToyVocabulary.	etoyVocab initialize.		"just to make sure that it's unfiltered."	^ String streamContents: [:s |		self morphClassesDeclaringViewerAdditions do: [:cl | 			s nextPutAll: cl name; cr.			allAdditions := cl allAdditionsToViewerCategories.			cl unfilteredCategoriesForViewer do: [ :cat |				allAdditions at: cat ifPresent: [ :additions |					interfaces := ((etoyVocab categoryAt: cat) ifNil: [ ElementCategory new ]) elementsInOrder.					interfaces := interfaces								select: [:ea | additions										anySatisfy: [:tuple | (tuple first = #slot												ifTrue: [tuple at: 7]												ifFalse: [tuple at: 2])												= ea selector]].					s tab; nextPutAll: cat translated; cr.					interfaces						do: [:if | 							s tab: 2.							rt := if resultType.							rt = #unknown								ifTrue: [s nextPutAll: 'command' translated]								ifFalse: [s nextPutAll: 'property' translated;										 nextPut: $(;										 nextPutAll: (if companionSetterSelector											ifNil: ['RO']											ifNotNil: ['RW']) translated;										 space;										 nextPutAll: rt translated;										 nextPutAll: ') '].							s tab; print: if wording; space.							if argumentVariables								do: [:av | s nextPutAll: av variableName;										 nextPut: $(;										 nextPutAll: av variableType asString;										 nextPut: $)]								separatedBy: [s space].							s tab; nextPutAll: if helpMessage; cr]]]]]! !!Morph methodsFor: '*connectors-scripting' stamp: 'nk 8/21/2004 08:39'!wantsConnectionVocabulary	submorphs ifNil: [ ^true ].	"called from EToyVocabulary>>initialize after basicNew"	^ (Preferences valueOfFlag: #alwaysShowConnectionVocabulary)		or: [ self connections isEmpty not ]! !!Morph methodsFor: '*connectors-scripting' stamp: 'nk 9/10/2004 11:37'!wantsConnectorVocabulary	"Answer true if I want to show a 'connector' vocabulary"	^false! !!Morph methodsFor: '*connectors-scripting-override' stamp: 'nk 9/11/2004 18:19'!filterViewerCategoryDictionary: dict	"dict has keys of categories and values of priority.	You can re-order or remove categories here."	self wantsConnectionVocabulary		ifFalse: [ dict removeKey: #'connections to me' ifAbsent: [].			dict removeKey: #connection ifAbsent: []].	self wantsConnectorVocabulary		ifFalse: [ dict removeKey: #connector ifAbsent: [] ].	self wantsEmbeddingsVocabulary		ifFalse: [dict removeKey: #embeddings ifAbsent: []].	Preferences eToyFriendly		ifTrue: [dict removeKey: #layout ifAbsent: []].! !!Morph methodsFor: '*flexiblevocabularies-scripting' stamp: 'nk 9/11/2004 17:12'!categoriesForViewer	"Answer a list of symbols representing the categories to offer in the 	viewer, in order"	| dict aList |	dict := Dictionary new.	self unfilteredCategoriesForViewer		withIndexDo: [:cat :index | dict at: cat put: index].	self filterViewerCategoryDictionary: dict.	aList := SortedCollection				sortBlock: [:a :b | (dict at: a)						< (dict at: b)].	aList addAll: dict keys.	^ aList asArray! !!Morph methodsFor: '*flexiblevocabularies-scripting' stamp: 'nk 9/11/2004 17:31'!unfilteredCategoriesForViewer	"Answer a list of symbols representing the categories to offer in the viewer, in order of:	- masterOrderingOfCategorySymbols first	- others last in order by translated wording"	"	Morph basicNew unfilteredCategoriesForViewer	"	^self renderedMorph class unfilteredCategoriesForViewer.! !!Morph class methodsFor: '*connectors-scripting' stamp: 'nk 9/10/2004 11:34'!additionsToViewerCategoryConnection	"Answer viewer additions for the 'connection' category"	"Vocabulary initialize"	^{		#'connections to me'.		#(		(command tellAllPredecessors: 'Send a message to all graph predecessors' ScriptName)		(command tellAllSuccessors: 'Send a message to all graph predecessors' ScriptName)		(command tellAllIncomingConnections: 'Send a message to all the connectors whose destination end is connected to me' ScriptName)		(command tellAllOutgoingConnections: 'Send a message to all the connectors whose source end is connected to me' ScriptName)		(slot incomingConnectionCount 'The number of connectors whose destination end is connected to me' Number readOnly Player getIncomingConnectionCount unused unused)		(slot outgoingConnectionCount 'The number of connectors whose source end is connected to me' Number readOnly Player getOutgoingConnectionCount unused unused)		)	}! !!Morph class methodsFor: '*flexiblevocabularies-scripting' stamp: 'nk 9/11/2004 16:56'!allAdditionsToViewerCategories	"Answer a Dictionary of (<categoryName> <list of category specs>) that 	defines the phrases this kind of morph wishes to add to various Viewer categories. 	 	This version allows each category definition to be defined in one or more separate methods. 	 	Subclasses that have additions can either:	- override #additionsToViewerCategories, or	- (preferably) define one or more additionToViewerCategory* methods.	The advantage of the latter technique is that class extensions may be added by	external packages without having to re-define additionsToViewerCategories."	"	Morph allAdditionsToViewerCategories	"	| dict |	dict := IdentityDictionary new.	(self class includesSelector: #additionsToViewerCategories)		ifTrue: [self additionsToViewerCategories				do: [:group | group						pairsDo: [:key :list | (dict								at: key								ifAbsentPut: [OrderedCollection new])								addAll: list]]].	self class selectors		do: [:aSelector | ((aSelector beginsWith: 'additionsToViewerCategory')					and: [(aSelector at: 26 ifAbsent: []) ~= $:])				ifTrue: [(self perform: aSelector)						pairsDo: [:key :list | (dict								at: key								ifAbsentPut: [OrderedCollection new])								addAll: list]]].	^ dict! !