'From Squeak3.1alpha of 28 February 2001 [latest update: #4103] on 30 May 2001 at 2:45:58 pm'!"Change Set:		inheritedComment-swDate:			30 May 2001Author:			Scott WallaceAdds to the available annotations an element which reports the first precode comment of the method, or that of its super-method if missing.Also (unrelated) changes the code-pane provenance button to be transparent"!!CodeHolder methodsFor: 'annotation' stamp: 'sw 5/30/2001 11:07'!annotationForSelector: aSelector ofClass: aClass	"Provide a line of content for an annotation pane, representing information about the given selector and class"	| stamp  sendersCount implementorsCount aCategory separator aString aList  aComment aStream requestList |	aStream _ ReadWriteStream on: ''.	requestList _ self annotationRequests.	 	separator _ requestList size > 1		ifTrue:			[self annotationSeparator]		ifFalse:			[''].	requestList do:		[:aRequest |		aRequest == #firstComment ifTrue:			[aComment _ aClass firstCommentAt: aSelector.			aComment isEmptyOrNil ifFalse:				[aStream nextPutAll: aComment, separator]].		aRequest == #documentation ifTrue:			[aComment _ aClass precodeCommentOrInheritedCommentFor:   aSelector.			aComment isEmptyOrNil ifFalse:				[aStream nextPutAll: aComment, separator]].		aRequest == #timeStamp ifTrue:			[stamp _ self timeStamp.			aStream nextPutAll: (stamp size > 0				ifTrue: [stamp, separator]				ifFalse: ['no timeStamp', separator])].		aRequest == #messageCategory ifTrue:			[aCategory _ aClass organization categoryOfElement: aSelector.			aCategory ifNotNil: "woud be nil for a method no longer present, e.g. in a recent-submissions browser"				[aStream nextPutAll: aCategory, separator]].		aRequest == #sendersCount ifTrue:			[sendersCount _ (Smalltalk allCallsOn: aSelector) size.			sendersCount _ sendersCount == 1				ifTrue:					['1 sender']				ifFalse:					[sendersCount printString, ' senders'].			aStream nextPutAll: sendersCount, separator].		aRequest == #implementorsCount ifTrue:			[implementorsCount _ Smalltalk numberOfImplementorsOf: aSelector.			implementorsCount _ implementorsCount == 1				ifTrue:					['1 implementor']				ifFalse:					[implementorsCount printString, ' implementors'].			aStream nextPutAll: implementorsCount,  separator].		aRequest == #priorVersionsCount ifTrue:			[self addPriorVersionsCountForSelector: aSelector ofClass: aClass to: aStream].		aRequest == #priorTimeStamp ifTrue:			[stamp _ VersionsBrowser timeStampFor: aSelector class: aClass reverseOrdinal: 2.			stamp ifNotNil: [aStream nextPutAll: 'prior time stamp: ', stamp, separator]].		aRequest == #recentChangeSet ifTrue:			[aString _ ChangeSorter mostRecentChangeSetWithChangeForClass: aClass selector: aSelector.			aString size > 0 ifTrue: [aStream nextPutAll: aString, separator]].		aRequest == #allChangeSets ifTrue:			[aList _ ChangeSorter allChangeSetsWithClass: aClass selector: aSelector.			aList size > 0				ifTrue:					[aList size = 1						ifTrue:							[aStream nextPutAll: 'only in change set ']						ifFalse:							[aStream nextPutAll: 'in change sets: '].					aList do:						[:aChangeSet | aStream nextPutAll: aChangeSet name, ' ']]				ifFalse:					[aStream nextPutAll: 'in no change set'].			aStream nextPutAll: separator]].			^ aStream contents! !!CodeHolder methodsFor: 'controls' stamp: 'sw 5/30/2001 14:34'!codePaneProvenanceButton	"Answer a button that reports on, and allow the user to modify, the code-pane-provenance setting"	| aButton aWrapper |	aButton _ UpdatingSimpleButtonMorph newWithLabel: 'source'.	aButton setNameTo: 'codeProvenance'.	aButton useSquareCorners.	aButton target: self;		 wordingSelector: #codePaneProvenanceString;		 actionSelector: #offerWhatToShowMenu.	aButton setBalloonText: 'Governs what view is shown in the code pane.  Click here to change the view'.	aButton actWhen: #buttonDown.	aButton beTransparent.	aButton borderColor: Color black.	aWrapper _ AlignmentMorph newRow beTransparent.	aWrapper hResizing: #rigid; vResizing: #rigid.	aWrapper height: 22.	aWrapper addMorphBack: aButton.	"aWrapper cellPositioning: #leftCenter."	aButton cellPositioning: #topCenter.	aButton center: aWrapper center.	aWrapper cellPositioning: #topCenter.	^ aWrapper! !!Preferences class methodsFor: 'parameters' stamp: 'sw 5/30/2001 11:04'!annotationInfo 	"Answer a list of pairs characterizing all the available kinds of annotations; in each pair, the first element is a symbol representing the info type, and the second element is a string providing the corresponding balloon help"	^ #(		(timeStamp			'The time stamp of the last submission of the method.')		(firstComment		'The first comment in the method, if any.')		(documentation		'Comment at beginning of the method or, if it has none, comment at the beginning of a superclass''s implementation of the method')		(messageCategory	'Which method category the method lies in')		(sendersCount		'A report of how many senders there of the message.')		(implementorsCount	'A report of how many implementors there are of the message.')		(recentChangeSet	'The most recent change set bearing the method.')		(allChangeSets		'A list of all change sets bearing the method.')		(priorVersionsCount	'A report of how many previous versions there are of the method' )		(priorTimeStamp		'The time stamp of the penultimate submission of the method, if any'))! !!Preferences class methodsFor: 'parameters' stamp: 'sw 5/30/2001 14:27'!editAnnotations	"Put up a window that allows the user to edit annotation specifications"	"Preferences editAnnotations"	| aPanel ins outs current aMorph aWindow aButton info pair standardHeight |	standardHeight _ 140.	Smalltalk isMorphic		ifFalse:			[^ self inform: 'Sorry, you must be in a morphicproject to use this feature.'].	aPanel _ AlignmentMorph newRow extent: 300 @ standardHeight.	ins _ AlignmentMorph newColumn extent: 150 @ standardHeight.	ins color: Color green muchLighter.	ins enableDrop: true; beSticky.	outs _ AlignmentMorph newColumn extent: 150 @ standardHeight.	outs color: Color red muchLighter.	outs enableDrop: true; beSticky.	aPanel addMorph: outs; addMorphFront: ins.	outs position: (ins position + (200 @ 0)).	current _ self defaultAnnotationRequests.	info _ self annotationInfo.	current do:		[:sym | pair _ info detect: [:aPair | aPair first == sym].		aMorph _ StringMorph new contents: pair first.		aMorph setBalloonText: pair last.		aMorph enableDrag: true.		aMorph			on: #startDrag			send: #startDrag:with:			to: aMorph.		ins addMorphBack: aMorph].	info do:		[:aPair | 			(current includes: aPair first) 				ifFalse:					[aMorph _ StringMorph new contents: aPair first.					aMorph setBalloonText: aPair last.					aMorph enableDrag: true.					aMorph						on: #startDrag						send: #startDrag:with:						to: aMorph.					outs addMorph: aMorph]].	aPanel layoutChanged.	aWindow _ SystemWindowWithButton new setLabel: 'Annotations'.	aButton _ SimpleButtonMorph new target: Preferences;		actionSelector: #acceptAnnotationsFrom:; arguments: (Array with: aWindow); label: 'apply'; borderWidth: 0; borderColor: Color transparent; color: Color transparent.	aButton submorphs first color: Color blue.	aButton setBalloonText: 'After moving all the annotations you want to the left (green) side, and all the ones you do NOT want to the right (pink) side, hit this "apply" button to have your choices take effect.'.	aWindow buttonInTitle: aButton; adjustExtraButton.	self currentWorld addMorphCentered: (aPanel wrappedInWindow: aWindow).	aWindow activateAndForceLabelToShow! !