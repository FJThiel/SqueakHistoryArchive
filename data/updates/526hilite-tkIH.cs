'From Squeak 2.3 beta of Nov 25, 1998 on 4 January 1999 at 11:13:52 am'!"Change Set:		hilite-tkIHDate:			4 January 1999Author:			Ted KaehlerSearching text in BookMorphs:  If the text is found in a TextMorph, highlight it.Provides a default URL that is legal, and unique.  Users should edit ServerDirectory|defaultStemUrl to set a ServerDirectory of their local FTP server.Fixes a bug that prevented text searching in Alan's Master Images book.Does not complain if non PasteUpMorphs are book pages."!!Morph methodsFor: 'debug and other' stamp: 'tk 1/4/1999 11:04'!allStrings	"return an Array of strings of text in my submorphs"	| list string |	list _ OrderedCollection new.	self allMorphsDo: [:sub | 		(string _ sub userString) ifNotNil: [			(string isKindOf: String) 				ifTrue: [list add: string]				ifFalse: [list addAll: string]]].	^ list! !!Morph methodsFor: 'fileIn/out' stamp: 'tk 12/29/1998 22:47'!saveOnURLbasic	"Ask the user for a url and save myself on a SmartReferenceStream file.  Writes out the version and class structure.  The file is fileIn-able.  UniClasses will be filed out."	| url pg stamp pol |	(pg _ self valueOfProperty: #SqueakPage) ifNil: [pg _ SqueakPage new]		ifNotNil: [pg contentsMorph ~~ self ifTrue: [				self inform: 'morph''s SqueakPage property is out of date'.				pg _ SqueakPage new]].	(url _ pg url) ifNil: [		url _ ServerDirectory defaultStemUrl, '1.sp'.	"A new legal place"		url _ FillInTheBlank 				request: 'url of a place to store this object.Must begin with file:// or ftp://' 				initialAnswer: url.		url size == 0 ifTrue: [^ self beep]].	stamp _ Utilities authorInitialsPerSe ifNil: ['*'].	pg saveMorph: self author: stamp.	SqueakPageCache atURL: url put: pg.	"setProperty: #SqueakPage"	(pol _ pg policy) ifNil: [pol _ #neverWrite].	pg policy: #now; dirty: true.  pg write.	"force the write"	pg policy: pol.	^ pg! !!BookMorph commentStamp: 'tk 12/29/1998 22:54' prior: 0!Allows one or another "page" to show; orchestrates the page transitions; offers control panel for navigating among pages and for adding and deleting pages.To write a book out to the disk or to a file server, decide what folder it goes in.  Construct a url to a typical page:	file://myDisk/folder/myBook1.sp	ftp://aServer/folder/myBook1.spChoose "send all pages to server" from the book's menu (press the <> part of the controls).  Choose "use page numbers".  Paste in the url.To load an existing book, find its ".bo" file in the file list browser.  Choose "load as book".Multiple people may modify a book.  If other people may have changed a book you have on your screen, choose "reload all from server".Add or modify a page, and choose "send this page to server".The polite thing to do is to reload before changing a book.  Then write one or all pages soon after making your changes.  If you store a stale book, it will wipe out changes that other people made in the mean time.Text search:  allStrings collects text of fields, turn to page with all fragments on it and highlight the first one. Save the container and offset in properties: #searchContainer, #searchOffset, #searchKey.  Search again from there.  Clear those at each page turn, or change of search key.  !!BookMorph methodsFor: 'menu' stamp: 'tk 1/4/1999 10:24'!findText: wants	"Turn to the next page that has all of the strings mentioned on it.  Highlight where it is found.  allText and allTextUrls have been set.  Case insensitive search.	Resuming a search.  If container's text is still in the list and secondary keys are still in the page, (1) search rest of that container.  (2) search rest of containers on that page (3) pages till end of book, (4) from page 1 to this page again."	"Later sort wants so longest key is first"	| allText good thisWord here fromHereOn startToHere array stringToHilite index insideOf block container keys oldKey oldContainer oldIndex place |	allText _ self valueOfProperty: #allText ifAbsent: [#()].	here _ pages identityIndexOf: currentPage ifAbsent: [1].	stringToHilite _ wants at: 1.	fromHereOn _ here to: pages size.	startToHere _ 1 to: here.	block _ [:pageNo | "Just define block, do not execute yet!!!!!!!!"		array _ allText at: pageNo.		good _ true.		keys do: [:searchString | "each key"			good ifTrue: [thisWord _ false.				array do: [:longString |					(index _ longString findString: searchString startingAt: 1 						caseSensitive: false) > 0 ifTrue: [							thisWord _ true.							searchString == stringToHilite ifTrue: [								insideOf _ longString. place _ index]]].				good _ thisWord]].		good ifTrue: ["all are on this page"			self goToPage: pageNo.			container _ self highlightText: stringToHilite at: place in: insideOf.			self setProperty: #searchContainer toValue: container.			self setProperty: #searchOffset toValue: place.			self setProperty: #searchKey toValue: wants.			^ true]].	(oldKey _ self valueOfProperty: #searchKey) = wants ifTrue: [		"does page have the other keys?"		oldContainer _ self valueOfProperty: #searchContainer.		oldIndex _ self valueOfProperty: #searchOffset.		].	keys _ wants.	fromHereOn do: block.	startToHere do: block.	"if fail"	self setProperty: #searchContainer toValue: nil.	self setProperty: #searchOffset toValue: nil.	self setProperty: #searchKey toValue: nil.	^ false! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/29/1998 22:48'!getStemUrl	"Try to find the old place where this book was stored.  Confirm with the user.  Else ask for new place."| initial pg url ll knownURL |initial _ ''.(pg _ currentPage valueOfProperty: #SqueakPage) ifNotNil: [	pg contentsMorph == currentPage ifTrue: [		initial _ pg url.		knownURL _ true]].	"If this page has a url"pages doWithIndex: [:aPage :ind |	initial size = 0 ifTrue: [		aPage isInMemory ifTrue: [			(pg _ aPage valueOfProperty: #SqueakPage) ifNotNil: [				initial _ pg url]]]].	"any page with a url"initial size = 0 ifTrue: [initial _ ServerDirectory defaultStemUrl, '1.sp'].	"A new legal place"knownURL ifNil: [	url _ FillInTheBlank 			request: 'url of the place to store a typical page in this book.	Must begin with file:// or ftp://' 			initialAnswer: initial].knownURL ifNotNil: [url _ initial].ll _ url findLast: [:char | char == $.].ll = 0 ifFalse: [url _ url copyFrom: 1 to: ll-1].	"remove .sp"url _ (url stemAndNumericSuffix) at: 1.		"remove trailing number"[url last == $x] whileTrue: [url _ url allButLast].^ url! !!BookMorph methodsFor: 'menu' stamp: 'tk 1/4/1999 09:54'!highlightText: stringToHilite at: index in: insideOf	"Find the container with this text and highlight it.  May not be able to do it for stringMorphs."	"Find the container with that text"	| container |	self allMorphsDo: [:sub | 		insideOf == sub userString ifTrue: [container _ sub]].	container ifNil: [		self allMorphsDo: [:sub | 			insideOf = sub userString ifTrue: [container _ sub]]].	"any match"	container ifNil: [^ self].	"Order it highlighted"	(container isKindOf: TextMorph) ifTrue: [		container editor selectFrom: index to: stringToHilite size - 1 + index].	container changed.	^ container! !!ServerDirectory class methodsFor: 'misc' stamp: 'tk 12/29/1998 22:46'!defaultStemUrl	"For writing on an FTP directory.  Users should insert their own server url here.""ftp://jumbo.rd.wdi.disney.com/raid1/people/dani/Books/Grp/Grp""	ServerDirectory defaultStemUrl	"| rand dir |rand _ String new: 4.1 to: rand size do: [:ii |	rand at: ii put: ('bdfghklmnpqrstvwz' at: 17 atRandom)].dir _ self serverNamed: 'DaniOnJumbo'.^ 'ftp://', dir server, dir slashDirectory, '/BK', rand! !PasteUpMorph removeSelector: #allStrings!ServerDirectory class removeSelector: #defaultUrl!