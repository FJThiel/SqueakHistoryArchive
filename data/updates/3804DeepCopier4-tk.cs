'From Squeak3.1alpha of 4 February 2001 [latest update: #3812] on 8 March 2001 at 9:36:44 am'!"Change Set:		DeepCopier4-tkDate:			8 March 2001Author:			Ted KaehlerA Player class held in a variable was not being remapped in veryDeepCopy.DiskProxies that can't find their referent, now put it in Undeclared and put a message in the Transcript.  This may not help much, except when interpointing Players are sent over Nebraska one at a time."!!Object methodsFor: 'copying' stamp: 'tk 3/8/2001 09:02'!veryDeepCopyWith: deepCopier	"Copy me and the entire tree of objects I point to.  An object in the tree twice is copied once, and both references point to him.  deepCopier holds a dictionary of objects we have seen.  Some classes refuse to be copied.  Some classes are picky about which fields get deep copied."	| class index sub subAss new uc sup has mine |	deepCopier references at: self ifPresent: [:newer | ^ newer]. 	"already did him"	class _ self class.	class isMeta ifTrue: [^ self].		"a class"	new _ self clone.	class isSystemDefined ifFalse: [		uc _ deepCopier uniClasses at: class ifAbsent: [nil].		uc ifNil: [			deepCopier uniClasses at: class put: (uc _ self copyUniClassWith: deepCopier).			deepCopier references at: class put: uc].	"remember"		new _ uc new].	deepCopier references at: self put: new.	"remember"	(class isVariable and: [class isPointers]) ifTrue: 		[index _ self basicSize.		[index > 0] whileTrue: 			[sub _ self basicAt: index.			(subAss _ deepCopier references associationAt: sub ifAbsent: [nil])				ifNil: [new basicAt: index put: (sub veryDeepCopyWith: deepCopier)]				ifNotNil: [new basicAt: index put: subAss value].			index _ index - 1]].	"Ask each superclass if it wants to share (weak copy) any inst vars"	new veryDeepInner: deepCopier.		"does super a lot"	"other superclasses want all inst vars deep copied"	sup _ class.  index _ class instSize.	[has _ sup compiledMethodAt: #veryDeepInner: ifAbsent: [nil].	mine _ sup instVarNames.	has ifNotNil: [index _ index - mine size]		ifNil: [1 to: mine size do: [:xx |				sub _ self instVarAt: index.				(subAss _ deepCopier references associationAt: sub ifAbsent: [nil])						"use association, not value, so nil is an exceptional value"					ifNil: [new instVarAt: index put: 								(sub veryDeepCopyWith: deepCopier)]					ifNotNil: [new instVarAt: index put: subAss value].				index _ index - 1]].	(sup _ sup superclass) == nil] whileFalse.	new rehash.	"force Sets and Dictionaries to rehash"	^ new! !!DiskProxy methodsFor: 'as yet unclassified' stamp: 'tk 3/8/2001 09:33'!comeFullyUpOnReload: smartRefStream	"Internalize myself into a fully alive object after raw loading from a DataStream. (See my class comment.)  DataStream will substitute the object from this eval for the DiskProxy."	| globalObj symbol pr nn arrayIndex |	symbol _ globalObjectName.	"See if class is mapped to another name"	(smartRefStream respondsTo: #renamed) ifTrue: [		"If in outPointers in an ImageSegment, remember original class name.  		 See mapClass:installIn:.  Would be lost otherwise."		((thisContext sender sender sender sender sender sender 			sender sender receiver class == ImageSegment) and: [ 		thisContext sender sender sender sender method == 			(DataStream compiledMethodAt: #readArray)]) ifTrue: [				arrayIndex _ (thisContext sender sender sender sender) tempAt: 4.					"index var in readArray.  Later safer to find i on stack of context."				smartRefStream renamedConv at: arrayIndex put: symbol].	"save original name"		symbol _ smartRefStream renamed at: symbol ifAbsent: [symbol]].	"map"	globalObj _ Smalltalk at: symbol ifAbsent: [		preSelector == nil & (constructorSelector = #yourself) ifTrue: [			Transcript cr; show: symbol, ' is undeclared.'.			(Undeclared includesKey: symbol) ifTrue: [^ Undeclared at: symbol].			Undeclared at: symbol put: nil.			^ nil].		^ self error: 'Global "', symbol, '" not found'].	((symbol == #World) and: [Smalltalk isMorphic not]) ifTrue: [		self inform: 'These objects will work better if opened in a Morphic World.Dismiss and reopen all menus.'].	preSelector ifNotNil: [		Symbol hasInterned: preSelector ifTrue: [:selector |			globalObj _ globalObj perform: selector]].	symbol == #Project ifTrue: [		(constructorSelector = #fromUrl:) ifTrue: [			nn _ (constructorArgs first findTokens: '/') last.			nn _ (nn findTokens: '.|') first.			pr _ Project named: nn. 			^ pr ifNil: [self] ifNotNil: [pr]].		pr _ globalObj perform: constructorSelector withArguments: constructorArgs.		^ pr ifNil: [self] ifNotNil: [pr]].	"keep the Proxy if Project does not exist"	constructorSelector ifNil: [^ globalObj].	Symbol hasInterned: constructorSelector ifTrue: [:selector |		^ globalObj perform: selector				withArguments: constructorArgs].				"args not checked against Renamed"	^ nil 	"was not in proper form"! !