'From Squeak3.2gamma of 5 February 2002 [latest update: #4839] on 21 April 2002 at 7:44:31 am'!"Change Set:		themes-swDate:			21 April 2002Author:			Scott WallaceAdds a simple mechanism that allows groups of preference-settings and other system configuration parameters to be installed all at once, via a 'choose theme...' button now added to the Squeak flap; the command is also accessible from the appearance menu and on the help page of the Preferences panel.A few themes are supplied, including:¥ outOfTheBox - all of the out-of-the-box 3.2 settings of preferences.  Features the 'alternative' window and scroll-bar looks; scrollbars are NOT flop-out, and are positioned on the right.¥ smalltalk80 - as similar to the look and feel of smalltalk-80 as we can get; caution: Many features are disabled!!¥ brightSqueak - the classic Squeak look with our original candy-colored windows, flop-out scrollbars, Themes can be added by simply implementing theme-defining methods in category #themes of Preferences.  Two examples (magdeburg and paloAlto) of personalized themes are provided as examples."!!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 4/21/2002 07:13'!newSqueakFlap	"Answer a new default 'Squeak' flap for the left edge of the screen"	| aFlap aFlapTab aButton aClock buttonColor anOffset bb aFont |	aFlap _ PasteUpMorph newSticky borderWidth: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab setName: 'Squeak' edge: #left color: Color brown lighter lighter.	aFlapTab position: (0 @ ((Display height - aFlapTab height) // 2)).	aFlapTab setBalloonText: aFlapTab balloonTextForFlapsMenu.	aFlap cellInset: 14@14.	aFlap beFlap: true.	aFlap color: (Color brown muchLighter lighter "alpha: 0.3").	aFlap extent: 150 @ self currentWorld height.	aFlap layoutPolicy: TableLayout new.	aFlap wrapCentering: #topLeft.	aFlap layoutInset: 2.	aFlap listDirection: #topToBottom.	aFlap wrapDirection: #leftToRight.	"self addProjectNavigationButtonsTo: aFlap."	anOffset _ 16.	aClock _ ClockMorph newSticky.	aClock color: Color red.	aClock showSeconds: false.	aClock font: (TextStyle default fontAt: 3).	aClock step.	aClock setBalloonText: 'The time of day.  If you prefer to see seconds, check out my menu.'.	aFlap addCenteredAtBottom: aClock offset: anOffset.	buttonColor _  Color cyan muchLighter.	bb _ SimpleButtonMorph new target: Smalltalk.	bb color: buttonColor.	aButton _ bb copy.	aButton actionSelector: #saveSession.	aButton setBalloonText: 'Make a complete snapshot of the current state of the image onto disk.'.	aButton label: 'save' font: (aFont _ ScriptingSystem fontForTiles).	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #updateFromServer.	aButton label: 'load code updates' font: aFont.	aButton color: buttonColor.	aButton setBalloonText: 'Check the Squeak server for any new code updates, and load any that are found.'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ SimpleButtonMorph new target: Smalltalk; actionSelector: #aboutThisSystem;		label: 'about this system' font: aFont.	aButton color: buttonColor.	aButton setBalloonText: 'click here to find out version information'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aFlap addCenteredAtBottom: (Preferences themeChoiceButtonOfColor: buttonColor font: aFont) offset: anOffset.	aButton _ TrashCanMorph newSticky.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton startStepping.	^ aFlapTab"Flaps replaceGlobalFlapwithID: 'Squeak' "! !!Preferences class methodsFor: 'initialization' stamp: 'sw 4/21/2002 05:13'!setPreferencesFrom: listOfPairs	"Given a list of <preferenceName, value> pairs, set preference values.  This method is tolerent of the value being supplied either a Boolean or else one of the symbols #true and #false.  Also, a new-value of #noOpinion will result in that 'preference's value not being changed."	listOfPairs do:		[:aPair |			(aPair second == #noOpinion) ifFalse:				[Preferences setPreference: aPair first toValue: ((aPair second == #true) or: [aPair second == true])]]"Preferences setPreferencesFrom: #(( mouseOverForKeyboardFocus false))Preferences setPreferencesFrom: {{  #mouseOverForKeyboardFocus. true}}"! !!Preferences class methodsFor: 'misc' stamp: 'sw 4/21/2002 05:48'!defaultValueTableForCurrentRelease	"Answer a table defining default values for all the preferences in the release.  Returns a list of (pref-symbol, boolean-symbol) pairs"	^  #(		(abbreviatedBrowserButtons false)		(allowCelesteTell true)		(alternativeBrowseIt false)		(alternativeScrollbarLook true)		(alternativeWindowLook true)		(annotationPanes false)		(areaFillsAreTolerant false)		(areaFillsAreVeryTolerant false)		(autoAccessors false)		(automaticFlapLayout true)		(automaticKeyGeneration false)		(automaticPlatformSettings true)		(automaticViewerPlacement true)		(balloonHelpEnabled true)		(balloonHelpInMessageLists false)		(batchPenTrails false)		(browseWithDragNDrop false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying false)		(capitalizedReferences true)		(caseSensitiveFinds false)		(cautionBeforeClosing false)		(celesteHasStatusPane false)		(celesteShowsAttachmentsFlag false)		(changeSetVersionNumbers true)		(checkForSlips true)		(checkForUnsavedProjects true)		(classicNavigatorEnabled false)		(classicNewMorphMenu false)		(clickOnLabelToEdit false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(colorWhenPrettyPrinting false)		(compactViewerFlaps false)		(compressFlashImages false)		(confirmFirstUseOfStyle true)		(conversionMethodsAtFileOut false)		(cpuWatcherEnabled false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose false)		(dragNDropWithAnimation false)		(eToyFriendly false)		(eToyLoginEnabled false)		(enableLocalSave true)		(extractFlashInHighQuality true)		(extractFlashInHighestQuality false)		(fastDragWindowForMorphic true)		(fenceEnabled true)		(fullScreenLeavesDeskMargins true)		(haloTransitions false)		(hiddenScrollBars false)		(higherPerformance false)		(honorDesktopCmdKeys true)		(ignoreStyleIfOnlyBold true)		(inboardScrollbars true)		(includeSoundControlInNavigator false)		(infiniteUndo false)		(logDebuggerStackToFile true)		(magicHalos false)		(menuButtonInToolPane false)		(menuColorFromWorld false)		(menuKeyboardControl true)  		(modalColorPickers true)		(mouseOverForKeyboardFocus false)		(mouseOverHalos false)		(mvcProjectsAllowed true)		(navigatorOnLeftEdge true)		(noviceMode false)		(okToReinitializeFlaps true)		(optionalButtons true)		(passwordsOnPublish false)		(personalizedWorldMenu true)		(postscriptStoredAsEPS false)		(preserveTrash true)		(printAlternateSyntax false)		(projectViewsInWindows true)		(projectZoom true)		(projectsSentToDisk false)		(promptForUpdateServer true)		(propertySheetFromHalo false)		(readDocumentAtStartup true)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(roundedMenuCorners true)		(roundedWindowCorners true)		(scrollBarsNarrow false)		(scrollBarsOnRight true)		(scrollBarsWithoutMenuButton false)		(securityChecksEnabled false)		(selectiveHalos false)		(showBoundsInHalo false)		(showDirectionForSketches false)		(showDirectionHandles false)		(showFlapsWhenPublishing false)		(showProjectNavigator false)		(showSecurityStatus true)		(showSharedFlaps true)		(signProjectFiles true)		(simpleMenus false)		(smartUpdating true)		(soundQuickStart false)		(soundStopWhenDone false)		(soundsEnabled true)		(startInUntrustedDirectory false)		(systemWindowEmbedOK false)		(thoroughSenders true)		(tileTranslucentDrag true)		(timeStampsInMenuTitles true)		(turnOffPowerManager false)		(twentyFourHourFileStamps true)		(twoSidedPoohTextures true)		(typeCheckingInTileScripting true)		(uniTilesClassic true)		(uniqueNamesInHalos false)		(universalTiles false)		(unlimitedPaintArea false)		(updateSavesFile false)		(useButtonProprtiesToFire false)		(useUndo true)		(viewersInFlaps true)		(warnAboutInsecureContent true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))"Preferences defaultValueTableForCurrentRelease do:	[:pair | (Preferences preferenceAt: pair first ifAbsent: [nil]) ifNotNilDo:			[:pref | pref defaultValue: (pair last == #true)]].Preferences chooseInitialSettings."! !!Preferences class methodsFor: 'misc' stamp: 'sw 4/21/2002 07:38'!installTheme: aSymbol	"Install the theme represented by aSymbol.  The code that makes the theme-specific changes is lodged in a method of the same name as aSymbol, which must reside in category #themes in Preferences class"	self perform: aSymbol.	self inform: 'Theme ', aSymbol asString, ' is now installed.Many of the changes will only benoticeable in new windows that youcreate from now on.'! !!Preferences class methodsFor: 'misc' stamp: 'sw 4/21/2002 07:09'!offerThemesMenu	"Put up a menu offering the user a choice of themes.  Each theme is represented by a method in category #themes in Preferences class.  The comment at the front of each method is used as the balloon help for the theme"	"Preferences offerThemesMenu"	| selectors aMenu |	selectors _ self class allMethodsInCategory: #themes.	selectors _ selectors select: [:sel | sel numArgs = 0].	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: 'Choose a theme to install'.	selectors do:		[:sel |			aMenu add: sel target: self selector: #installTheme: argument: sel.			aMenu balloonTextForLastItem: (self class firstCommentAt: sel)].	aMenu popUpInWorld.	"(Workspace new contents: 'here is an example of a new window with your new theme installed') openLabel: 'Testing one two thr'"! !!Preferences class methodsFor: 'misc' stamp: 'sw 4/21/2002 07:20'!themeChoiceButtonOfColor: aColor font: aFont	"Answer a button inviting the user to choose a theme"	| aButton |	aButton _ SimpleButtonMorph new target: self; actionSelector: #offerThemesMenu.	aButton label: 'change theme...' font: aFont.	aButton color: aColor.	aButton setBalloonText: 'Numerous "Preferences" govern many things about the way Squeak looks and behaves.  Set individual preferences using a "Preferences" panel.  Set an entire "theme" of many Preferences all at the same time by pressing this "change theme" button and choosing a theme to install.  Look in category "themes" in Preferences class to see what each theme does; add your own methods to the "themes" category and they will show up in the list of theme choices.'.	^ aButton! !!Preferences class methodsFor: 'themes' stamp: 'sw 4/21/2002 07:02'!brightSqueak	"The classic bright Squeak look.  Windows have saturated colors and relatively low contrast; scroll-bars are of the flop-out variety and are on the left.  Many power-user features are enabled."	self setPreferencesFrom:	#(		(alternativeScrollbarLook false)		(alternativeWindowLook false)		(annotationPanes true)		(automaticFlapLayout true)		(balloonHelpEnabled true)		(balloonHelpInMessageLists false)		(browseWithDragNDrop true)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(classicNavigatorEnabled false)		(classicNewMorphMenu false)		(clickOnLabelToEdit false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(colorWhenPrettyPrinting false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dragNDropWithAnimation true)		(eToyFriendly false)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(haloTransitions false)		(hiddenScrollBars false)		(ignoreStyleIfOnlyBold true)		(inboardScrollbars false)		(logDebuggerStackToFile true)		(magicHalos false)		(menuButtonInToolPane false)		(menuColorFromWorld false)		(menuKeyboardControl true)  		(mouseOverForKeyboardFocus true)		(navigatorOnLeftEdge true)		(noviceMode false)		(optionalButtons true)		(personalizedWorldMenu true)		(preserveTrash true)		(printAlternateSyntax false)		(projectViewsInWindows true)		(projectZoom true)		(propertySheetFromHalo false)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(roundedMenuCorners true)		(roundedWindowCorners true)		(scrollBarsNarrow false)		(scrollBarsOnRight false)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(showProjectNavigator false)		(showSharedFlaps true)		(simpleMenus false)		(smartUpdating true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(timeStampsInMenuTitles true)		(universalTiles false)		(unlimitedPaintArea false)		(useButtonProprtiesToFire false)		(useUndo true)		(viewersInFlaps true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true)).	self installBrightWindowColors! !!Preferences class methodsFor: 'themes' stamp: 'sw 4/21/2002 07:27'!magdeburg	"Alternative window & scroll-bar looks, no desktop command keys, no keyboard menu control, no annotation panes..."	self setPreferencesFrom: #(		(alternativeScrollbarLook true)		(alternativeWindowLook true)		(annotationPanes false)		(browseWithDragNDrop true)		(canRecordWhilePlaying false)		(classicNavigatorEnabled true)		(conversionMethodsAtFileOut true)		(dragNDropWithAnimation true)		(haloTransitions true)		(honorDesktopCmdKeys false)		(magicHalos true)		(menuKeyboardControl false)  		(scrollBarsWithoutMenuButton true)).	self installBrightWindowColors! !!Preferences class methodsFor: 'themes' stamp: 'sw 4/21/2002 07:37'!outOfTheBox	"The default out-of-the-box preference settings for Squeak 3.2.  The 'alternative' window-look and scrollbar-look are used.  Button panes are used but not annotation panes.  Scrollbars are on the right and do not flop out."	self setPreferencesFrom: self defaultValueTableForCurrentRelease! !!Preferences class methodsFor: 'themes' stamp: 'sw 4/21/2002 07:34'!paloAlto	"Similar to the brightSqueak theme, but with a number of idiosyncratic personal settings favored in Palo Alto, California -- note thatmouseOverForKeyboardFocus &caseSensitiveFinds are both set to true"	self setPreferencesFrom:	#(		(alternativeScrollbarLook false)		(alternativeWindowLook false)		(annotationPanes true)		(autoAccessors false)		(balloonHelpEnabled true)		(balloonHelpInMessageLists false)		(browseWithDragNDrop false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(capitalizedReferences true)		(caseSensitiveFinds true)		(changeSetVersionNumbers true)		(checkForSlips true)		(classicNavigatorEnabled false)		(classicNewMorphMenu false)		(clickOnLabelToEdit false)		(cmdDotEnabled true)		(colorWhenPrettyPrinting false)		(compactViewerFlaps false)		(confirmFirstUseOfStyle true)		(conversionMethodsAtFileOut true)		(debugHaloHandle true)		(debugPrintSpaceLog true)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose true)		(dragNDropWithAnimation false)		(eToyFriendly false)		(enableLocalSave true)		(fastDragWindowForMorphic true)		(fullScreenLeavesDeskMargins true)		(haloTransitions false)		(hiddenScrollBars false)		(honorDesktopCmdKeys true)		(ignoreStyleIfOnlyBold true)		(inboardScrollbars false)		(includeSoundControlInNavigator true)		(infiniteUndo false)		(logDebuggerStackToFile true)		(magicHalos false)		(menuButtonInToolPane false)		(menuColorFromWorld false)		(menuKeyboardControl true)  		(modalColorPickers true)		(mouseOverForKeyboardFocus true)		(mouseOverHalos false)		(mvcProjectsAllowed true)		(navigatorOnLeftEdge true)		(noviceMode false)		(okToReinitializeFlaps true)		(optionalButtons true)		(personalizedWorldMenu true)		(preserveTrash true)		(printAlternateSyntax false)		(propertySheetFromHalo false)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(roundedMenuCorners true)		(roundedWindowCorners true)		(scrollBarsNarrow false)		(scrollBarsOnRight false)		(scrollBarsWithoutMenuButton false)		(selectiveHalos false)		(showBoundsInHalo false)		(showDirectionForSketches true)		(showDirectionHandles false)		(showProjectNavigator false)		(showSharedFlaps true)		(simpleMenus false)		(smartUpdating true)		(systemWindowEmbedOK false)		(thoroughSenders true)		(timeStampsInMenuTitles true)		(universalTiles fales)		(unlimitedPaintArea false)		(useButtonProprtiesToFire false)		(useUndo true)		(viewersInFlaps true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true)).	self installBrightWindowColors! !!Preferences class methodsFor: 'themes' stamp: 'sw 4/21/2002 06:15'!smalltalk80	"A traditional monochrome Smalltalk-80 look and feel, clean and austere, and lacking many features added to Squeak in recent years. Caution: this theme removes the standard Squeak flaps, turns off the 'smartUpdating' feature that keeps multiple browsers in synch, and much more."	self setPreferencesFrom:	#(			(alternativeScrollbarLook false)		(alternativeWindowLook false)		(annotationPanes false)		(autoAccessors false)		(balloonHelpEnabled false)		(balloonHelpInMessageLists false)		(batchPenTrails noOpinion)		(browseWithDragNDrop false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(caseSensitiveFinds true)		(checkForSlips false)		(classicNavigatorEnabled false)		(clickOnLabelToEdit true)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(colorWhenPrettyPrinting false)		(diffsInChangeList false)		(diffsWithPrettyPrint false)		(dragNDropWithAnimation false)		(eToyFriendly false)		(fastDragWindowForMorphic true)		(fenceEnabled noOpinion)		(honorDesktopCmdKeys false)		(ignoreStyleIfOnlyBold true)		(inboardScrollbars false)		(menuColorFromWorld false)		(menuKeyboardControl false)  		(mouseOverForKeyboardFocus true)		(mvcProjectsAllowed true)		(noviceMode false)		(okToReinitializeFlaps true)		(optionalButtons false)		(personalizedWorldMenu false)		(printAlternateSyntax false)		(projectViewsInWindows true)		(projectZoom true)		(restartAlsoProceeds false)		(roundedMenuCorners false)		(roundedWindowCorners false)		(scrollBarsNarrow false)		(scrollBarsOnRight false)		(scrollBarsWithoutMenuButton false)		(securityChecksEnabled noOpinion)		(showProjectNavigator false)		(showSharedFlaps false)		(simpleMenus false)		(smartUpdating false)		(thoroughSenders false)		(timeStampsInMenuTitles false)).	self installUniformWindowColors! !!PreferencesPanel methodsFor: 'find' stamp: 'sw 4/21/2002 07:18'!addHelpItemsTo: panelPage	"Add the items appropriate the the ? page of the receiver"	| aButton aTextMorph aMorph firstTextMorph |	panelPage hResizing: #shrinkWrap; vResizing: #shrinkWrap.	firstTextMorph _  TextMorph new contents: 'Search Preferences for:'.	firstTextMorph beAllFont: ((TextStyle default fontOfSize: 13) emphasized: 1).	panelPage addMorphBack: firstTextMorph lock.	panelPage addTransparentSpacerOfSize: 0@10.	aMorph _ RectangleMorph new clipSubmorphs: true; beTransparent; borderWidth: 2; borderColor: Color black; extent: 250 @ 36.	aMorph vResizing: #rigid; hResizing: #rigid.	aTextMorph _  PluggableTextMorph new				on: self				text: #searchString				accept: #setSearchStringTo:				readSelection: nil				menu: nil."	aTextMorph hResizing: #rigid."	aTextMorph borderWidth: 0.	aTextMorph font: ((TextStyle default fontOfSize: 21) emphasized: 1); setTextColor: Color red.	aMorph addMorphBack: aTextMorph.	aTextMorph acceptOnCR: true.	aTextMorph position: (aTextMorph position + (6@5)).	aMorph clipLayoutCells: true.	aTextMorph extent: 240 @ 25.	panelPage addMorphBack: aMorph.	aTextMorph setBalloonText: 'Type what you want to search for here, then hit the "Search" button, or else hit RETURN or ENTER'.	aTextMorph setTextMorphToSelectAllOnMouseEnter.	aTextMorph hideScrollBarIndefinitely.	panelPage addTransparentSpacerOfSize: 0@10.	aButton _ SimpleButtonMorph new target: self; color: Color transparent; actionSelector: #initiateSearch:; arguments: {aTextMorph}; label: 'Search'.	panelPage addMorphBack: aButton.	aButton setBalloonText: 'Type what you want to search for in the box above, then click here (or hit RETURN or ENTER) to start the search; results will appear in the "search results" category.'.	panelPage addTransparentSpacerOfSize: 0@40.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Restore all Default Preference Settings'; target: Preferences; actionSelector: #chooseInitialSettings; setBalloonText: 'Click here to reset all the preferences to their standard default values.'; yourself).	panelPage addTransparentSpacerOfSize: 0@14.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Save Current Settings as my Personal Preferences'; 		target: Preferences; actionSelector: #savePersonalPreferences; setBalloonText: 'Click here to save the current constellation of Preferences settings as your personal defaults; you can get them all reinstalled with a single gesture by clicking the "Restore my Personal Preferences".'; yourself).	panelPage addTransparentSpacerOfSize: 0@14.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Restore my Personal Preferences'; target: Preferences; actionSelector: #restorePersonalPreferences; setBalloonText: 'Click here to reset all the preferences to their values in your Personal Preferences.'; yourself).	panelPage addTransparentSpacerOfSize: 0@30.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Inspect Parameters'; target: Preferences; actionSelector: #inspectParameters; setBalloonText: 'Click here to view all the values stored in the system Parameters dictionary'; yourself).	panelPage addTransparentSpacerOfSize: 0@10.	panelPage addMorphBack: (Preferences themeChoiceButtonOfColor: Color transparent font: TextStyle defaultFont).	panelPage addTransparentSpacerOfSize: 0@10.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Help!!'; target: Preferences; actionSelector: #giveHelpWithPreferences; setBalloonText: 'Click here to get some hints on use of this Preferences Panel'; yourself).	panelPage wrapCentering: #center.! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 4/21/2002 06:07'!appearanceMenu	"Build the appearance menu for the world."	| screenCtrl |	screenCtrl _ ScreenController new.	^self fillIn: (self menu: 'appearance...') from: {		{'preferences...' . { Preferences . #openFactoredPanel} . 'Opens a "Preferences Panel" which allows you to alter many settings' } .		{'choose theme...' . { Preferences . #offerThemesMenu} . 'Presents you with a menu of themes; each item''s balloon-help will tell you about the theme.  If you choose a theme, many different preferences that come along with that theme are set at the same time; you can subsequently change any settings by using a Preferences Panel'} .		nil .		{'window colors...' . { Preferences . #windowSpecificationPanel} . 'Lets you specify colors for standard system windows.'}.		{'system fonts...' . { self . #standardFontDo} . 'Choose the standard fonts to use for code, lists, menus, window titles, etc.'}.		{'text highlight color...' . { Preferences . #chooseTextHighlightColor} . 'Choose which color should be used for text highlighting in Morphic.'}.		{'insertion point color...' . { Preferences . #chooseInsertionPointColor} . 'Choose which color to use for the text insertion point in Morphic.'}.		{'keyboard focus color' . { Preferences . #chooseKeyboardFocusColor} . 'Choose which color to use for highlighting which pane has the keyboard focus'}.		nil.		{#menuColorString . { Preferences . #toggleMenuColorPolicy} . 'Governs whether menu colors should be derived from the desktop color.'}.		{#roundedCornersString . { Preferences . #toggleRoundedCorners} . 'Governs whether morphic windows and menus should have rounded corners.'}.		nil.		{'full screen on' . { screenCtrl . #fullScreenOn} . 'puts you in full-screen mode, if not already there.'}.		{'full screen off' . { screenCtrl . #fullScreenOff} . 'if in full-screen mode, takes you out of it.'}.		nil.		{'set display depth...' . {self. #setDisplayDepth} . 'choose how many bits per pixel.'}.		{'set desktop color...' . {self. #changeBackgroundColor} . 'choose a uniform color to use as desktop background.'}.		{'set gradient color...' . {self. #setGradientColor} . 'choose second color to use as gradient for desktop background.'}.		{'use texture background' . { #myWorld . #setStandardTexture} . 'apply a graph-paper-like texture background to the desktop.'}.		nil.		{'clear turtle trails from desktop' . { #myWorld . #clearTurtleTrails} . 'remove any pigment laid down on the desktop by objects moving with their pens down.'}.	}! !Preferences class removeSelector: #importMyPreferences!"Postscript:"Flaps replaceGlobalFlapwithID: 'Squeak'.!