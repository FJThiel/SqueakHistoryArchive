'From Squeak2.9alpha of 13 June 2000 [latest update: #2990] on 9 November 2000 at 10:59:16 pm'!"Change Set:		AlignmentMorphCleanup-arDate:			9 November 2000Author:			Andreas RaabA first pass on cleanups within alignment morphs. Removes the inst vars and provides conversion methods. Also fixes some of the top-level #shrinkWrap alignments (more need to be found...)"!!BlockNode methodsFor: 'tiles' stamp: 'ar 11/9/2000 20:37'!asMorphicSyntaxIn: parent	| len shown row column |	(column _ parent addColumn: #block on: self) layoutInset: 2; minBorderWidth: 1.		"level _ 1 max: levelOrZero."	self addCommentToMorph: column.	len _ shown _ statements size.	column explanation: 'A block of ',len printString,' Smalltalk statements',(		arguments size = 0 ifTrue: [''] ifFalse: [' and ',arguments size printString,' arguments']	).		"(levelOrZero = 0 and: [statements last isReturnSelf]) ifTrue: [shown _ 1 max: shown - 1]."	arguments size = 0 ifFalse: [		row _ column addRow: #blockarg1 on: (BlockArgsNode new).		arguments do: [:arg | 			(arg asMorphicSyntaxIn: row) color: #blockarg2		].	].	(statements copyFrom: 1 to: shown) do: [ :each | 		(each asMorphicSyntaxIn: column) borderWidth: 1.		each addCommentToMorph: column.	] separatedBy: [		column addMorphBack: (			AlignmentMorph newRow 				vResizing: #rigid; 				color: Color transparent;				extent: 2@2		).			].	^column! !!CodeHolder methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:13'!diffButton	|  outerButton aButton |	"Return a checkbox that lets the user decide whether diffs should be shown or not"	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleDiff;		getSelector: #showDiffs.	outerButton addMorphBack: (StringMorph contents: 'diffs') lock.	outerButton setBalloonText: 'If checked, then code differences from the previous version, if any, will be shown.'.	^ outerButton! !!Browser methodsFor: 'initialize-release' stamp: 'ar 11/9/2000 20:38'!buildMorphicSwitches	| instanceSwitch commentSwitch classSwitch row aColor |	instanceSwitch _ PluggableButtonMorph		on: self		getState: #instanceMessagesIndicated		action: #indicateInstanceMessages.	instanceSwitch		label: 'instance';		askBeforeChanging: true.	commentSwitch _ PluggableButtonMorph		on: self		getState: #classCommentIndicated		action: #plusButtonHit.	commentSwitch		label: '?' asText allBold;		askBeforeChanging: true;		setBalloonText: 'class comment'.	classSwitch _ PluggableButtonMorph		on: self		getState: #classMessagesIndicated		action: #indicateClassMessages.	classSwitch		label: 'class';		askBeforeChanging: true.	row _ AlignmentMorph newRow		hResizing: #spaceFill;		vResizing: #spaceFill;		layoutInset: 0;		borderColor: Color transparent;		addMorphBack: instanceSwitch;		addMorphBack: commentSwitch;		addMorphBack: classSwitch.	aColor _ Color colorFrom: self defaultBackgroundColor.	row submorphs do:		[:m | m color: aColor.		m onColor: aColor darker offColor: aColor].	^ row! !!Browser methodsFor: 'initialize-release' stamp: 'ar 11/9/2000 21:12'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow wrapCentering: #center; cellPositioning: #leftCenter.	aRow clipSubmorphs: true.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs  do:			[:pair |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: pair second.				aButton useRoundedCorners;					label: pair first asString;					onColor: Color transparent offColor: Color transparent.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.	^ aRow! !!ChangeList methodsFor: 'menu actions' stamp: 'ar 11/9/2000 21:13'!buttonRowForChangeList	| aRow aButton |	aRow _ AlignmentMorph newRow.	aRow clipSubmorphs: true.	aRow addTransparentSpacerOfSize: (5@0).	aRow wrapCentering: #center; cellPositioning: #leftCenter.	self changeListButtonSpecs do:		[:triplet |			aButton _ PluggableButtonMorph				on: self				getState: nil				action: triplet second.			aButton useRoundedCorners;				label: triplet first asString;				askBeforeChanging: true;				onColor: Color transparent offColor: Color transparent.			aRow addMorphBack: aButton.			aRow addTransparentSpacerOfSize: (3 @ 0).			aButton setBalloonText: triplet third.			aRow addMorphBack: aButton.			aRow addTransparentSpacerOfSize: (3 @ 0).			aButton setBalloonText: triplet third.			aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.		^ aRow! !!Command class methodsFor: 'dog simple ui' stamp: 'ar 11/9/2000 20:38'!undoRedoButtons	"Answer a morph that offers undo and redo buttons"	| aButton wrapper |	"self currentHand attachMorph: Command undoRedoButtons"	wrapper _ AlignmentMorph newColumn.	wrapper color: Color veryVeryLightGray lighter;		borderWidth: 0;		layoutInset: 0;		vResizing: #shrinkWrap;		hResizing: #shrinkWrap.	#((CrudeUndo undoLastCommand 'undo last command done' undoEnabled CrudeUndoDisabled CrudeUndoDisabled) 	(CrudeRedo redoNextCommand 'redo last undone command' redoEnabled CrudeRedoDisabled CrudeRedoDisabled)) do:		[:tuple |			wrapper addTransparentSpacerOfSize: (8@0).			aButton _ UpdatingThreePhaseButtonMorph new.			aButton				onImage: (ScriptingSystem formAtKey: tuple first);				offImage: (ScriptingSystem formAtKey: tuple fifth);				pressedImage: (ScriptingSystem formAtKey: tuple sixth);				getSelector: tuple fourth;				color: Color transparent; 				target: self;				actionSelector: tuple second;				setNameTo: tuple second;				setBalloonText: tuple third;				extent: aButton onImage extent.			wrapper addMorphBack: aButton.			wrapper addTransparentSpacerOfSize: (8@0)].	^ wrapper! !!FancyCelesteComposition methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:14'!buttonWithAction: aSymbol label: labelString help: helpString	^self newColumn		wrapCentering: #center; cellPositioning: #topCenter;		addMorph: (			SimpleButtonMorph new 				color: self borderAndButtonColor;				target: self; 				actionSelector: aSymbol;				label: labelString;				setBalloonText: helpString		)			! !!FancyCelesteComposition methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:15'!openInMorphic	"open an interface for sending a mail message with the given initial 	text "	| buttonsList container toField subjectField |	buttonsList _ self newRow.	buttonsList wrapCentering: #center; cellPositioning: #leftCenter.	buttonsList		addMorphBack: (			(self 				buttonWithAction: #submit				label: 'send later'				help: 'add this to the queue of messages to be sent')		);		addMorphBack: (			(self 				buttonWithAction: #sendNow				label: 'send now'				help: 'send this message immediately')		);		addMorphBack: (			(self 				buttonWithAction: #forgetIt				label: 'forget it'				help: 'forget about sending this message')		).	morphicWindow _ container _ AlignmentMorphBob1 new		borderWidth: 8;		borderColor: self borderAndButtonColor;		color: Color white.	container heights: #(25 18 50 18 50 18 9999999).	container 		addMorphBack: buttonsList;		addMorphBack: (self simpleString: 'To:');		addMorphBack: (toField _ PluggableTextMorph			on: self			text: #to			accept: #to:		);		addMorphBack: (self simpleString: 'Subject:');		addMorphBack: (subjectField _ PluggableTextMorph			on: self			text: #subject			accept: #subject:		);		addMorphBack: (self simpleString: 'Message:');		addMorphBack: (textEditor _ PluggableTextMorph			on: self			text: #messageText			accept: #messageText:		).	textFields _ {toField. subjectField. textEditor}.	container 		extent: 300@400;		openInWorld.! !!FancyCelesteComposition methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:39'!simpleString: aString	^self newRow		layoutInset: 2;		addMorphBack: (StringMorph contents: aString) lock! !!FileList2 class methodsFor: 'blue ui' stamp: 'ar 11/9/2000 20:39'!blueButtonText: aString textColor: textColor inWindow: window	^(window fancyText: aString ofSize: 15 color: textColor)		hResizing: #rigid;		extent: 100@20;		layoutInset: 4;		borderWidth: 0;		useRoundedCorners! !!FileList2 class methodsFor: 'blue ui' stamp: 'ar 11/9/2000 22:46'!morphicViewGeneralLoaderInWorld: aWorld"FileList2 morphicViewGeneralLoaderInWorld: self currentWorld"	| window aFileList buttons treePane textColor1 fileListPane pane2a pane2b fileTypeInfo fileTypeButtons fileTypeRow actionRow |	fileTypeInfo _ self endingSpecs.	window _ AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	aFileList _ self new directory: FileDirectory default.	aFileList 		fileSelectionBlock: self projectOnlySelectionBlock;		modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: 4;		borderColor: (Color r: 0.355 g: 0.516 b: 1.0);		useRoundedCorners.	fileTypeButtons _ fileTypeInfo collect: [ :each |		(self blueButtonText: each first textColor: Color gray inWindow: window)			setProperty: #enabled toValue: true;			hResizing: #shrinkWrap	].	buttons _ #('OK' 'Cancel') collect: [ :each |		self blueButtonText: each textColor: textColor1 inWindow: window	].	treePane _ aFileList morphicDirectoryTreePane 		extent: 250@300; 		retractable: false;		borderWidth: 0.	fileListPane _ aFileList morphicFileListPane 		extent: 350@300; 		retractable: false;		borderWidth: 0.	window addARow: {window fancyText: 'Find...' ofSize: 21 color: textColor1}.	fileTypeRow _ window addARowCentered: fileTypeButtons.	actionRow _ window addARowCentered: {		buttons first. 		(Morph new extent: 30@5) color: Color transparent. 		buttons second	}.	window		addARow: {			(window inAColumn: {(pane2a _ window inARow: {window inAColumn: {treePane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.			(window inAColumn: {(pane2b _ window inARow: {window inAColumn: {fileListPane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.		}.	window fullBounds.	window fillWithRamp: self blueRamp1 oriented: 0.65.	pane2a fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	pane2b fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	fileTypeButtons do: [ :each | 		each 			on: #mouseUp 			send: #value:value: 			to: [ :evt :morph | 				self update: actionRow in: window fileTypeRow: fileTypeRow morphUp: morph.			] fixTemps	].	buttons first on: #mouseUp send: #okHit to: aFileList.	buttons second on: #mouseUp send: #cancelHit to: aFileList.	aFileList postOpen.	window position: aWorld topLeft + (aWorld extent - window extent // 2).	aFileList directoryChangeBlock: [ :newDir |		self enableTypeButtons: fileTypeButtons info: fileTypeInfo forDir: newDir	] fixTemps.	aFileList directory: aFileList directory.	^ window openInWorld: aWorld.! !!FileList2 class methodsFor: 'blue ui' stamp: 'ar 11/9/2000 22:46'!morphicViewProjectLoader2InWorld: aWorld reallyLoad: aBoolean	| window aFileList buttons treePane textColor1 fileListPane pane2a pane2b |	window _ AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	aFileList _ self new directory: FileDirectory default.	aFileList 		optionalButtonSpecs: self specsForProjectLoader;		fileSelectionBlock: self projectOnlySelectionBlock;		"dirSelectionBlock: self hideSqueakletDirectoryBlock;"		modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: 4;		borderColor: (Color r: 0.355 g: 0.516 b: 1.0);		useRoundedCorners.	buttons _ #('OK' 'Cancel') collect: [ :each |		self blueButtonText: each textColor: textColor1 inWindow: window	].	treePane _ aFileList morphicDirectoryTreePane 		extent: 250@300; 		retractable: false;		borderWidth: 0.	fileListPane _ aFileList morphicFileListPane 		extent: 350@300; 		retractable: false;		borderWidth: 0.	window		addARow: {			window fancyText: 'Load A Project' ofSize: 21 color: textColor1		};		addARowCentered: {			buttons first. 			(Morph new extent: 30@5) color: Color transparent. 			buttons second		};		addARow: {			window fancyText: 'Please select a project' ofSize: 21 color: Color blue		};		addARow: {			(window inAColumn: {(pane2a _ window inARow: {window inAColumn: {treePane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.			(window inAColumn: {(pane2b _ window inARow: {window inAColumn: {fileListPane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.		}.	window fullBounds.	window fillWithRamp: self blueRamp1 oriented: 0.65.	pane2a fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	pane2b fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	buttons first 		on: #mouseUp 		send: (aBoolean ifTrue: [#okHitForProjectLoader] ifFalse: [#okHit])		to: aFileList.	buttons second on: #mouseUp send: #cancelHit to: aFileList.	aFileList postOpen.	window position: aWorld topLeft + (aWorld extent - window extent // 2).	^ window openInWorld: aWorld.! !!FileList2 class methodsFor: 'blue ui' stamp: 'ar 11/9/2000 22:46'!morphicViewProjectSaverFor: aProject"(FileList2 morphicViewProjectSaverFor: Project current) openInWorld"	| window aFileList buttons treePane pane2 textColor1 |	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	aFileList _ self new directory: FileDirectory default.	aFileList dirSelectionBlock: self hideSqueakletDirectoryBlock.	window _ AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	aFileList modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: 4;		borderColor: (Color r: 0.355 g: 0.516 b: 1.0);		useRoundedCorners.	buttons _ #( ('OK' okHit) ('Cancel' cancelHit) ) collect: [ :each |		(self blueButtonText: each first textColor: textColor1 inWindow: window)			on: #mouseUp send: each second to: aFileList	].	treePane _ aFileList morphicDirectoryTreePane 		extent: 350@300; 		retractable: false;		borderWidth: 0.	window		addARowCentered: {			window fancyText: 'Publish This Project' ofSize: 21 color: textColor1		};		addARowCentered: {			buttons first. 			(Morph new extent: 30@5) color: Color transparent. 			buttons second		};		addARowCentered: { (window inAColumn: {(ProjectViewMorph on: aProject) lock}) layoutInset: 4};		addARowCentered: {			window fancyText: 'Please select a folder' ofSize: 21 color: Color blue		};		addARow: {			(				window inAColumn: {					(pane2 _ window inARow: {window inAColumn: {treePane}}) 						useRoundedCorners; layoutInset: 6				}			) layoutInset: 10		}.	window fullBounds.	window fillWithRamp: self blueRamp1 oriented: 0.65.	pane2 fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	window setProperty: #morphicLayerNumber toValue: 11.	aFileList postOpen.	^ window ! !!FileList2 class methodsFor: 'utility' stamp: 'ar 11/9/2000 21:26'!textRow: aString 	^AlignmentMorph newRow 		wrapCentering: #center; cellPositioning: #leftCenter;		layoutInset: 0;		addMorph: (			AlignmentMorph newColumn			wrapCentering: #center; cellPositioning: #topCenter;			color: Color transparent;			vResizing: #shrinkWrap;			layoutInset: 0;			addMorph: (				AlignmentMorph newRow				wrapCentering: #center; cellPositioning: #leftCenter;				color: Color transparent;				hResizing: #shrinkWrap;				vResizing: #shrinkWrap;				layoutInset: 0;				addMorph: ((StringMorph contents: aString) color: Color blue; lock)			)		)! !!FreeCellStatistics methodsFor: 'user interface' stamp: 'ar 11/9/2000 21:17'!buildButton: aButton target: aTarget label: aLabel selector: aSelector	"wrap a button or switch in an alignmentMorph to provide some space around the button"	| a |	aButton 		target: aTarget;		label: aLabel;		actionSelector: aSelector;		borderColor: #raised;		borderWidth: 2;		color: Color gray.	a _ AlignmentMorph newColumn		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: Color transparent;		layoutInset: 1.	a addMorph: aButton.	^ a! !!FreeCellStatistics methodsFor: 'user interface' stamp: 'ar 11/9/2000 21:18'!display	| panel |	(window notNil and: [window owner notNil]) ifTrue: [window activate. ^nil].	panel _ AlignmentMorph newColumn.	panel		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #rigid;		vResizing: #rigid;		extent: 250@150;		color: self color;		addMorphBack: self makeStatistics;		addMorphBack: self makeControls.	window _ panel openInWindowLabeled: 'FreeCell Statistics'.! !!FreeCellStatistics methodsFor: 'user interface' stamp: 'ar 11/9/2000 21:18'!makeControls	| row |	row _ AlignmentMorph newRow.	row		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: self color;		borderWidth: 2;		borderColor: #inset;		addMorphBack: self makeOkButton;		addMorphBack: self makeResetButton.	^row.! !!FreeCellStatistics methodsFor: 'user interface' stamp: 'ar 11/9/2000 21:26'!makeStatistics	| row |	row _ AlignmentMorph newRow.	row		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #spaceFill;		vResizing: #spaceFill;		color: self color;		borderWidth: 2;		borderColor: #inset;		addMorphBack: (AlignmentMorph newColumn			wrapCentering: #center; cellPositioning: #topCenter;			color: self color;			addMorph: (statsMorph _ TextMorph new contents: self statsText)).	^row.! !!GeePrinter methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:41'!doPrintPreview	| pageDisplay sz newPage subBounds pic align |	sz _ (85 @ 110) * 3.	self printSpecs landscapeFlag ifTrue: [		sz _ sz transposed	].	pageDisplay _ BookMorph new		color: Color paleYellow;		borderWidth: 1.	self allPages withIndexDo: [ :each :index |		pic _ ImageMorph new image: (each pageThumbnailOfSize: sz).		align _ AlignmentMorph newColumn			addMorph: pic;			borderWidth: 1;			layoutInset: 0;			borderColor: Color blue.		newPage _ pageDisplay 			insertPageLabel: 'Page ',index printString			morphs: {align}.		subBounds _ newPage boundingBoxOfSubmorphs.		newPage extent: subBounds corner - newPage topLeft + ((subBounds left - newPage left)@0).	].	pageDisplay 		goToPage: 1;		deletePageBasic;		position: Display extent - pageDisplay extent // 2;		openInWorld.! !!LiteralNode methodsFor: 'tiles' stamp: 'ar 11/9/2000 20:41'!asMorphicSyntaxIn: parent	| row |	row _ parent addColumn: #literal on: self.	(key isMemberOf: Association) ifFalse: [		row layoutInset: 1.		^ row addMorphBack: (StringMorph contents: key storeString)].	key key isNil ifTrue: [		^ row addTextRow: ('###',key value soleInstance name)	] ifFalse: [		^ row addTextRow: ('##', key key)	].	! !!Morph methodsFor: 'thumbnail' stamp: 'ar 11/9/2000 20:42'!readoutForField: fieldSym	"Provide a readout that will show the value of the slot/pseudoslot of the receiver generated by sending fieldSym to the receiver"	| aContainer |	"still need to get this right"	aContainer _ AlignmentMorph newColumn.	aContainer layoutInset: 0; hResizing: #rigid; vResizing: #shrinkWrap.	aContainer addMorphBack: (StringMorph new contents: (self perform: fieldSym) asString).	^ aContainer! !!Morph methodsFor: 'WiW support' stamp: 'ar 11/9/2000 20:42'!eToyRejectDropMorph: morphToDrop event: evt	| tm am |	tm _ TextMorph new 		beAllFont: ((TextStyle named: #ComicBold) fontOfSize: 24);		contents: 'GOT IT!!'.	(am _ AlignmentMorph new)		color: Color yellow;		layoutInset: 10;		useRoundedCorners;		vResizing: #shrinkWrap;		hResizing: #shrinkWrap;		addMorph: tm;		fullBounds;		position: (self bounds center - (am extent // 2));		openInWorld: self world.	(SampledSound soundNames includes: 'yum') ifFalse: [		(FileDirectory default fileExists: '') ifTrue: [			SampledSound addLibrarySoundNamed: 'yum' fromAIFFfileNamed: 'yum.aif'		].	].	(SampledSound soundNames includes: 'yum') ifTrue: [		SampledSound playSoundNamed: 'yum'	].	morphToDrop rejectDropMorphEvent: evt.		"send it back where it came from"	am delete! !!AlignmentMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 22:26'!initialize	super initialize.	borderWidth _ 0.	self layoutPolicy: TableLayout new.	self listDirection: #leftToRight.	self wrapCentering: #topLeft.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self layoutInset: 2.	color _ Color r: 0.8 g: 1.0 b: 0.8.	self rubberBandCells: true. "default"! !!AlignmentMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:34'!openInWindowLabeled: aString inWorld: aWorld	self layoutInset: 0.	^super openInWindowLabeled: aString inWorld: aWorld.! !!AlignmentMorph methodsFor: 'object fileIn' stamp: 'ar 11/9/2000 22:50'!convertbosfcebbochvimlp0: varDict bosfcebb0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."		"These are going away #('orientation' 'centering' 'hResizing' 'vResizing' 'inset' 'minCellSize' 'layoutNeeded' 'priorFullBounds').  Possibly store their info in another variable?"	| orientation centering hResizing vResizing inset minCellSize inAlignment |	orientation _ varDict at: 'orientation'.	centering _ varDict at: 'centering'.	hResizing _ varDict at: 'hResizing'.	vResizing _ varDict at: 'vResizing'.	inset _ varDict at: 'inset'.	minCellSize _ varDict at: 'minCellSize'.	(orientation == #horizontal or:[orientation == #vertical])		ifTrue:[self layoutPolicy: TableLayout new].	self cellPositioning: #topLeft.	self rubberBandCells: true.	orientation == #horizontal 		ifTrue:[self listDirection: #leftToRight].	orientation == #vertical 		ifTrue:[self listDirection: #topToBottom].	centering == #topLeft 		ifTrue:[self wrapCentering: #topLeft].	centering == #bottomRight 		ifTrue:[self wrapCentering: #bottomRight].	centering == #center 		ifTrue:[self wrapCentering: #center.				orientation == #horizontal					ifTrue:[self cellPositioning: #leftCenter]					ifFalse:[self cellPositioning: #topCenter]].	(inset isNumber or:[inset isPoint]) 		ifTrue:[self layoutInset: inset].	(minCellSize isNumber or:[minCellSize isPoint]) 		ifTrue:[self minCellSize: minCellSize].	(self hasProperty: #clipToOwnerWidth)		ifTrue:[self clipSubmorphs: true].	"now figure out if our owner was an AlignmentMorph, even if it is reshaped..."	inAlignment _ false.	(owner isKindOf: Morph) ifTrue:[		(owner isKindOf: AlignmentMorph) ifTrue:[inAlignment _ true].	] ifFalse:[		"e.g., owner may be reshaped"		(owner class instanceVariablesString findString: 'orientation centering hResizing vResizing')			> 0 ifTrue:["this was an alignment morph being reshaped"						inAlignment _ true].	].	"And check for containment in system windows"	(owner isKindOf: SystemWindow) ifTrue:[inAlignment _ true].	(hResizing == #spaceFill and:[inAlignment not])		ifTrue:[self hResizing: #shrinkWrap]		ifFalse:[self hResizing: hResizing].	(vResizing == #spaceFill and:[inAlignment not])		ifTrue:[self vResizing: #shrinkWrap]		ifFalse:[self vResizing: vResizing].! !!AlignmentMorph class methodsFor: 'instance creation' stamp: 'ar 11/9/2000 20:51'!newColumn	^ self new		listDirection: #topToBottom;		hResizing: #spaceFill;		extent: 1@1;		vResizing: #spaceFill! !!AlignmentMorph class methodsFor: 'instance creation' stamp: 'ar 11/9/2000 20:50'!newRow	^ self new		listDirection: #leftToRight;		hResizing: #spaceFill;		vResizing: #spaceFill;		extent: 1@1;		borderWidth: 0! !!AlignmentMorph class methodsFor: 'instance creation' stamp: 'ar 11/9/2000 20:37'!newSpacer: aColor	"Answer a space-filling instance of me of the given color."	^ self new		hResizing: #spaceFill;		vResizing: #spaceFill;		layoutInset: 0;		borderWidth: 0;		extent: 1@1;		color: aColor.! !!AlignmentMorph class methodsFor: 'instance creation' stamp: 'ar 11/9/2000 20:37'!newVariableTransparentSpacer	"Answer a space-filling instance of me of the given color."	^ self new		hResizing: #spaceFill;		vResizing: #spaceFill;		layoutInset: 0;		borderWidth: 0;		extent: 1@1;		color: Color transparent! !!AlignmentMorphBob1 methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:09'!addARowCentered: aCollectionOfMorphs	^(self addARow: aCollectionOfMorphs)		hResizing: #shrinkWrap;		wrapCentering: #center;		cellPositioning: #leftCenter! !!AlignmentMorphBob1 methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:10'!inAColumn: aCollectionOfMorphs	| col |	col _ AlignmentMorph newColumn		color: Color transparent;		vResizing: #shrinkWrap;		layoutInset: 1;		wrapCentering: #center;		cellPositioning: #topCenter.	aCollectionOfMorphs do: [ :each | col addMorphBack: each].	^col! !!AlignmentMorphBob1 methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:10'!inARow: aCollectionOfMorphs	| row |	row _ AlignmentMorph newRow		color: Color transparent;		vResizing: #shrinkWrap;		layoutInset: 1;		wrapCentering: #center;		cellPositioning: #leftCenter.	aCollectionOfMorphs do: [ :each | row addMorphBack: each].	^row! !!AlignmentMorphBob1 methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:51'!initialize	super initialize.	self listDirection: #topToBottom.	self layoutInset: 0.	borderWidth _ 0.	self hResizing: #rigid.	self vResizing: #rigid.	heights _ OrderedCollection new.! !!BookPageSorterMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:11'!addControls	| b r aButton str |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow color: Color transparent; borderWidth: 0; layoutInset: 0.	r wrapCentering: #center; cellPositioning: #topCenter; hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (self wrapperFor: (b fullCopy label: 'Okay';	actionSelector: #acceptSort)).	r addMorphBack: (self wrapperFor: (b fullCopy label: 'Cancel';	actionSelector: #delete)).	r addTransparentSpacerOfSize: 8 @ 0.	r addMorphBack: (self wrapperFor: (aButton _ UpdatingThreePhaseButtonMorph checkBox)).	aButton		target: self;		actionSelector: #togglePartsBinStatus;		arguments: #();		getSelector: #getPartsBinStatus.	str _ StringMorph contents: 'Parts bin'.	r addMorphBack: (self wrapperFor: str lock).	self addMorphFront: r.! !!BookPageSorterMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:11'!closeButtonOnly	"Replace my default control panel with one that has only a close button."	| b r |	self firstSubmorph delete.  "remove old control panel"	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r wrapCentering: #topLeft.	r addMorphBack: (b fullCopy label: 'Close'; actionSelector: #delete).	self addMorphFront: r.! !!BookPageSorterMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:11'!columnWith: aMorph	^AlignmentMorph newColumn		color: Color transparent;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		wrapCentering: #center;		cellPositioning: #topCenter;		layoutInset: 1;		addMorph: aMorph! !!BookPageSorterMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:11'!initialize	super initialize.	self extent: Display extent - 100;		listDirection: #topToBottom;		wrapCentering: #topLeft;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		layoutInset: 3;		color: Color lightGray;		borderWidth: 2.	pageHolder _ PasteUpMorph new behaveLikeHolder extent: self extent - borderWidth.	pageHolder cursor: 0.	self addControls.	self addMorphBack: pageHolder.! !!BookPageSorterMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:11'!rowWith: aMorph	^AlignmentMorph newColumn		color: Color transparent;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		wrapCentering: #center;		cellPositioning: #topCenter;		layoutInset: 1;		addMorph: aMorph! !!BooklikeMorph methodsFor: 'page controls' stamp: 'ar 11/9/2000 20:38'!makePageControlsFrom: controlSpecs	"From the controlSpecs, create a set of page control and return them -- this method does *not* add the controls to the receiver."	| c aButton col row b lastGuy |	c _ (color saturation > 0.1) ifTrue: [color slightlyLighter] ifFalse: [color slightlyDarker].	aButton _ SimpleButtonMorph new target: self; borderWidth: 1; borderColor: Color veryLightGray; color: c.	col _ AlignmentMorph newColumn.	col color: c; borderWidth: 0; layoutInset: 0.	col hResizing: #spaceFill; vResizing: #shrinkWrap; extent: 5@5.	row _ AlignmentMorph newRow.	row color: c; borderWidth: 0; layoutInset: 0.	row hResizing: #spaceFill; vResizing: #shrinkWrap; extent: 5@5.	controlSpecs do: [:spec |		spec == #spacer			ifTrue:				[row addTransparentSpacerOfSize: (10 @ 0)]			ifFalse:				[spec == #variableSpacer					ifTrue:						[row addMorphBack: AlignmentMorph newVariableTransparentSpacer]					ifFalse:						[b _ aButton fullCopy						label: spec first;						actionSelector: spec second;						borderWidth: 0;	 					setBalloonText: spec third.						row addMorphBack: b.						(((lastGuy _ spec last asLowercase) includesSubString: 'menu') or:								[lastGuy includesSubString: 'designations'])							ifTrue: [b actWhen: #buttonDown]]]].  "pop up menu on mouseDown"		col addMorphBack: row.	^ col! !!BooklikeMorph methodsFor: 'page controls' stamp: 'ar 11/9/2000 20:38'!showPageControls: controlSpecs 	| spacer pageControls anIndex |	self hidePageControls.	anIndex _ (submorphs size > 0 and: [submorphs first hasProperty: #header])		ifTrue:	[2]		ifFalse:	[1].	spacer _ Morph new color: color; extent: 0@10.	spacer  setProperty: #pageControl toValue: true.	self privateAddMorph: spacer atIndex: anIndex.	pageControls _ self makePageControlsFrom: controlSpecs.	pageControls borderWidth: 0; layoutInset: 4.	pageControls  setProperty: #pageControl toValue: true.	pageControls setNameTo: 'Page Controls'.	pageControls eventHandler: (EventHandler new on: #mouseDown send: #move to: self).	self privateAddMorph:  pageControls beSticky atIndex: anIndex! !!BookMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:10'!setInitialState	self listDirection: #topToBottom.	self wrapCentering: #topLeft.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self layoutInset: 5.	color _ Color white.							"pageSize _ 1060@800."	pageSize _ 160@300.		"back to the original since the pother was way too big"	self enableDragNDrop! !!BookMorph methodsFor: 'insert and delete' stamp: 'ar 11/9/2000 21:10'!insertPageLabel: labelString morphs: morphList	| m c labelAllowance |	self insertPage.	labelString ifNotNil:			[m _ (TextMorph new extent: currentPage width@20; contents: labelString).		m lock.		m position: currentPage position + (((currentPage width - m width) // 2) @ 5).		currentPage addMorph: m.		labelAllowance _ 40]		ifNil:			[labelAllowance _ 0].	"use a column to align the given morphs, then add them to the page"	c _ AlignmentMorph newColumn wrapCentering: #center; cellPositioning: #topCenter.	c addAllMorphs: morphList.	c position: currentPage position + (0 @ labelAllowance).	currentPage addAllMorphs: morphList.	^ currentPage! !!BookMorph methodsFor: 'navigation' stamp: 'ar 11/9/2000 20:37'!buildFloatingPageControls	| pageControls |	pageControls _ self makePageControlsFrom: self fullControlSpecs.	pageControls borderWidth: 0; layoutInset: 4.	pageControls  setProperty: #pageControl toValue: true.	pageControls setNameTo: 'Page Controls'.	pageControls color: Color yellow.	^FloatingBookControlsMorph new addMorph: pageControls.! !!BookMorph methodsFor: 'other' stamp: 'ar 11/9/2000 20:38'!makeMinimalControlsWithColor: aColor title: aString	| aButton aColumn aRow but |	aButton _ SimpleButtonMorph new target: self; borderColor: Color black; color: aColor; borderWidth: 0.	aColumn _ AlignmentMorph newColumn.	aColumn color: aButton color; borderWidth: 0; layoutInset: 0.	aColumn hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	aRow _ AlignmentMorph newRow.	aRow color: aButton color; borderWidth: 0; layoutInset: 0.	aRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	aRow addTransparentSpacerOfSize: 40@0.	aRow addMorphBack: (but _ aButton fullCopy label: ' < ' ; actionSelector: #previousPage).		"fullCopy is OK, since we just made it and it can't own any Players"	but setBalloonText: 'Go to previous page'.	aRow addTransparentSpacerOfSize: 82@0.	aRow addMorphBack: (StringMorph contents: aString) lock.	aRow addTransparentSpacerOfSize: 82@0.	aRow addMorphBack: (but _ aButton fullCopy label: ' > ' ; actionSelector: #nextPage).	but setBalloonText: 'Go to next page'.	aRow addTransparentSpacerOfSize: 40@0.	aColumn addMorphBack: aRow.	aColumn setNameTo: 'Page Controls'.		^ aColumn! !!CommandTilesMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:13'!initialize	super initialize.	self wrapCentering: #center; cellPositioning: #leftCenter.	self hResizing: #shrinkWrap.	borderWidth _ 0.	self layoutInset: 0.	self extent: 5@5.  "will grow to fit"! !!CompoundTileMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:52'!initialize	| r |	super initialize.	self color: Color orange muchLighter.	self borderWidth: 1.	self layoutInset: 2.	self listDirection: #topToBottom.	r _ AlignmentMorph newRow color: color; layoutInset: 0.	r setProperty: #demandsBoolean toValue: true.	r addMorphBack: (Morph new color: color; extent: 2@5).  "spacer"	r addMorphBack: (StringMorph new contents: 'Test').	r addMorphBack: (Morph new color: color; extent: 5@5).  "spacer"	r addMorphBack: (testPart _ BooleanScriptEditor new borderWidth: 0; layoutInset: 1).	testPart color: Color transparent.	self addMorphBack: r.	r _ AlignmentMorph newRow color: color; layoutInset: 0.	r addMorphBack: (Morph new color: color; extent: 30@5).  "spacer"	r addMorphBack: (StringMorph new contents: 'Yes').	r addMorphBack: (Morph new color: color; extent: 5@5).  "spacer"	r addMorphBack: (yesPart _ ScriptEditorMorph new borderWidth: 0; layoutInset: 2).	yesPart color: Color transparent.	self addMorphBack: r.	r _ AlignmentMorph newRow color: color; layoutInset: 0.	r addMorphBack: (Morph new color: color; extent: 35@5).  "spacer"	r addMorphBack: (StringMorph new contents: 'No').	r addMorphBack: (Morph new color: color; extent: 5@5).  "spacer"	r addMorphBack: (noPart _ ScriptEditorMorph new borderWidth: 0; layoutInset: 2).	noPart color: Color transparent.	self addMorphBack: r.	self extent: 5@5.  "will grow to fit"! !!CrosticPanel methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:38'!breakColumnAndResizeWithButtons: buttonRow	| placeToSplit indexToSplit |	"The column of clues has been laid out, and the crostic panel has been resized to that width and embedded as a submorph.  This method breaks the clues in two, placing the long part to the left of the crostic and the short one below it."	placeToSplit _ (self left + 5) @ (cluesPanel height + quotePanel height // 2 + self top).	indexToSplit _ cluesPanel submorphs findFirst: [:m | m containsPoint: placeToSplit].	cluesCol2 _ AlignmentMorph newColumn color: self color;		hResizing: #shrinkWrap; vResizing: #shrinkWrap; layoutInset: 0.	cluesCol2 addAllMorphs: (cluesPanel submorphs copyFrom: indexToSplit + 1							to: cluesPanel submorphs size).	cluesPanel position: self position + self borderWidth + (0 @ 4).	quotePanel position: self position + (quotePanel width @ 0).	cluesCol2 position: self position + quotePanel extent + (0 @ 4).	self addMorph: cluesCol2.	self addMorph: buttonRow.	buttonRow align: buttonRow topLeft with: cluesCol2 bottomLeft.	self extent: 100@100; bounds: ((self fullBounds topLeft - self borderWidth asPoint)							corner: (self fullBounds bottomRight - (2@0))).! !!CrosticPanel methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:38'!quote: indexableQuote clues: clueStrings answers: answerIndices quotePanel: panel	| row clue answer answerMorph letterMorph prev |	quote _ indexableQuote.	quotePanel _ panel.	clues _ clueStrings.	answers _ answerIndices.	cluesPanel _ AlignmentMorph newColumn color: self color;		hResizing: #shrinkWrap; vResizing: #shrinkWrap; layoutInset: 0.	letterMorphs _ Array new: quotePanel letterMorphs size.	1 to: clues size do:		[:i |  clue _ clues at: i.  answer _ answers at: i.		row _ AlignmentMorph newRow hResizing: #shrinkWrap; vResizing: #shrinkWrap.		row addMorphBack:			((TextMorph newBounds: (0@0 extent: 120@20) color: Color black)				string: (CrosticPanel oldStyle							ifTrue: [(($A to: $Z) at: i) asString , '.  ' , clue]							ifFalse: [clue])					fontName: 'ComicPlain' size: 13).		row addTransparentSpacerOfSize: (3 @ 0).		answerMorph _ AlignmentMorph newRow layoutInset: 0;			hResizing: #shrinkWrap; vResizing: #shrinkWrap.		prev _ nil.		answer do:			[:n | letterMorph _ WordGameLetterMorph new underlined						indexInQuote: n						id1: (CrosticPanel oldStyle ifTrue: [n printString] ifFalse: [nil]);						setLetter: Character space.			letterMorph on: #mouseDown send: #mouseDownEvent:letterMorph: to: self.			letterMorph on: #keyStroke send: #keyStrokeEvent:letterMorph: to: self.			letterMorph predecessor: prev.			prev ifNotNil: [prev successor: letterMorph].			prev _ letterMorph.			letterMorphs at: n put: letterMorph.			answerMorph addMorphBack: letterMorph].		answerMorph color: answerMorph firstSubmorph color.		row addMorphBack: answerMorph.		row color: answerMorph firstSubmorph color.		cluesPanel addMorphBack: row].	self addMorph: cluesPanel.cluesPanel imageForm.  "Needed for some sort of resizing!!"	self bounds: cluesPanel fullBounds.! !!EToyCommunicatorMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:39'!addGateKeeperMorphs	| list currentTime choices age row |	self setProperty: #gateKeeperCounterValue toValue: EToyGateKeeperMorph updateCounter.	choices _ #(		(60 'm' 'in the last minute')		(3600 'h' 'in the last hour')		(86400 'd' 'in the last day')	).	currentTime _ Time totalSeconds.	list _ EToyGateKeeperMorph knownIPAddresses.	list do: [ :each |		age _ each timeBetweenLastAccessAnd: currentTime.		age _ choices			detect: [ :x | age <= x first]			ifNone: [{0. '-'. (age // 86400) printString,'days ago'}].		row _ self addARow:		(EToyIncomingMessage allTypes collect: [ :type |				self toggleButtonFor: each attribute: type]		),		{			(self inAColumn: {				(StringMorph contents: age second) lock.			}) layoutInset: 2; hResizing: #shrinkWrap; setBalloonText: 'Last attempt was ',age third.			(self inAColumn: {				(StringMorph contents: each ipAddress) lock.			}) layoutInset: 2; hResizing: #shrinkWrap.			(self inAColumn: {				(StringMorph contents: each latestUserName) lock.			}) layoutInset: 2.		}.		row			color: (Color r: 0.6 g: 0.8 b: 1.0);			borderWidth: 1;			borderColor: #raised;			vResizing: #spaceFill;			"on: #mouseUp send: #mouseUp:in: to: self;"			setBalloonText: each fullInfoString	].! !!EToyChatMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:53'!initialize	super initialize.	acceptOnCR _ true.	self listDirection: #topToBottom.	color _ Color paleYellow.	self layoutInset: 0.	borderColor _ self standardBorderColor.	borderWidth _ 8.	self hResizing: #rigid.	self vResizing: #rigid.	minWidth _ minHeight _ 200.	bounds _ 400@100 extent:  200@150.	self rebuild.! !!EToyFridgeMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:53'!initialize	super initialize.	groupMode _ true.	color _ Color paleRed.	self listDirection: #topToBottom.	self layoutInset: 10.	borderColor _ #raised.	borderWidth _ 4.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self setProperty: #normalBorderColor toValue: borderColor.	self setProperty: #flashingColors toValue: {Color red. Color yellow}.	self rebuild.! !!EToyFridgeMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:35'!rebuild	| row filler fudge people maxPerRow |	updateCounter _ self class updateCounter.	self removeAllMorphs.	(self addARow: {		filler _ Morph new color: Color transparent; extent: 4@4.	}) vResizing: #shrinkWrap.	self addARow: {		(StringMorph contents: 'the Fridge') lock.		self groupToggleButton.	}.	row _ self addARow: {}.	people _ self class fridgeRecipients.	maxPerRow _ people size < 7 ifTrue: [2] ifFalse: [3].			"how big can this get before we need a different approach?"	people do: [ :each |		row submorphCount >= maxPerRow ifTrue: [row _ self addARow: {}].		row addMorphBack: (			groupMode ifTrue: [				(each userPicture scaledToSize: 35@35) asMorph lock			] ifFalse: [				each veryDeepCopy killExistingChat			]		)	].	fullBounds _ nil.	self fullBounds.	"htsBefore _ submorphs collect: [ :each | each height]."	fudge _ 20.	filler extent: 4 @ (self height - filler height * 0.37 - self layoutInset - borderWidth - fudge) truncated.	"self fixLayout.	htsAfter _ submorphs collect: [ :each | each height].	{htsBefore. htsAfter} explore."! !!EToyGateKeeperMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:53'!initialize	super initialize.	self listDirection: #topToBottom.	color _ Color lightGray.	self layoutInset: 4.	borderColor _ #raised "Color brown".	borderWidth _ 4.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self useRoundedCorners.	self rebuild.	! !!EToyListenerMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:53'!initialize	super initialize.	self listDirection: #topToBottom.	color _ Color lightBlue.	self layoutInset: 4.	borderColor _ Color blue.	borderWidth _ 4.	self rebuild.! !!EToyProjectHistoryMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:54'!initialize	super initialize.	self listDirection: #topToBottom.	color _ Color lightBrown.	self layoutInset: 4.	borderColor _ #raised "Color brown".	borderWidth _ 4.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self useRoundedCorners.	self rebuild.	! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:39'!setColorsAndBorder	color _ Color paleYellow.	borderWidth _ 8.	borderColor _ color darker.	self layoutInset: 4.	self useRoundedCorners.! !!EToyProjectQueryMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:39'!setColorsAndBorder	color _ Color r: 0.545 g: 0.47 b: 0.621.	borderWidth _ 8.	borderColor _ color darker.	self layoutInset: 4.	self useRoundedCorners. ! !!EToySenderMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:54'!initialize	Socket initializeNetwork.				"we may want our IP address"	Preferences defaultAuthorName.		"seems like a good place to insure we have a name"	super initialize.	self listDirection: #topToBottom.	color _ Color lightMagenta.	self layoutInset: 4.	borderColor _ Color magenta.	borderWidth _ 4.	self setProperty: #normalBorderColor toValue: borderColor.	self setProperty: #flashingColors toValue: {Color red. Color yellow}.! !!EventRecorderMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:14'!addButtons	| r b w |	caption ifNotNil:		["Special setup for play-only interface"		r _ AlignmentMorph newRow vResizing: #shrinkWrap;			 wrapCentering: #center; cellPositioning: #leftCenter;			 minCellSize: 4;			 color: Color blue.		r addMorphBack: (SimpleButtonMorph new target: self;	 							label: caption; actionSelector: #play).		r addMorphBack: (Morph new extent: 4@4; color: Color transparent).		r addMorphBack: (statusLight _ EllipseMorph new extent: 11 @ 11;								color: Color green; borderWidth: 0).		r addMorphBack: (Morph new extent: 4@4; color: Color transparent).		^ self addMorphBack: r].	"record - stop - play"	r _ AlignmentMorph newRow vResizing: #shrinkWrap;			 minCellSize: 4;			 color: Color blue.	r addMorphBack: (b _ self buttonFor: #record).	w _ b width.	r addMorphBack: (AlignmentMorph newSpacer: Color transparent).	r addMorphBack: ((self buttonFor: #stop) width: w).	r addMorphBack: (AlignmentMorph newSpacer: Color transparent).	r addMorphBack: ((self buttonFor: #play) width: w).	self addMorphBack: r.	"read file - write file"	r _ AlignmentMorph newRow vResizing: #shrinkWrap;			 minCellSize: 4;			 color: Color blue.	r addMorphBack: (b _ self buttonFor: #writeTape).	w _ b width.	r addMorphBack: (AlignmentMorph newSpacer: Color transparent).	r addMorphBack: ((self buttonFor: #readTape)			width: w).	self addMorphBack: r.	"rewind - light - reset"	r _ AlignmentMorph newRow vResizing: #shrinkWrap;			 wrapCentering: #center; cellPositioning: #leftCenter;			 minCellSize: 4;			 color: Color blue.	r addMorphBack: (b _ self buttonFor: #shrink).	w _ b width.	r addMorphBack: (AlignmentMorph newSpacer: Color transparent).	r addMorphBack: (statusLight _ EllipseMorph new extent: 11 @ 11;			color: Color green;		 	borderWidth: 0).	r addMorphBack: (AlignmentMorph newSpacer: Color transparent).	r addMorphBack: ((self buttonFor: #button)			width: w).	self addMorph: r! !!EventRecorderMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:14'!addVoiceControls 	| levelSlider r meterBox |	voiceRecorder _ SoundRecorder new		samplingRate: 11025.0;		codec: (ADPCMCodec new initializeForBitsPerSample: 4 samplesPerFrame: 0)..	levelSlider _ SimpleSliderMorph new		color: color;		extent: 100@2;		target: voiceRecorder;		actionSelector: #recordLevel:;		adjustToValue: voiceRecorder recordLevel.	r _ AlignmentMorph newRow		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #shrinkWrap;		vResizing: #rigid;		height: 24.	r addMorphBack: (StringMorph contents: '0 ').	r addMorphBack: levelSlider.	r addMorphBack: (StringMorph contents: ' 10').	self addMorphBack: r.	meterBox _ Morph new extent: 102@18; color: Color gray.	recordMeter _ Morph new extent: 1@16; color: Color yellow.	recordMeter position: meterBox topLeft + (1@1).	meterBox addMorph: recordMeter.	r _ AlignmentMorph newRow vResizing: #shrinkWrap.	r addMorphBack: meterBox.	self addMorphBack: r.! !!EventRecorderMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:14'!initialize	super initialize.	saved _ true.	borderWidth _ 2.	borderColor _ #raised.	color _ Color red.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self layoutInset: 2.	self minCellSize: 4.	self addButtons.! !!FlashSorterMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:40'!makeControls	| b r |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2.	r _ AlignmentMorph newRow.	r hResizing: #spaceFill; vResizing: #spaceFill; layoutInset: 2.	r addMorphBack: (b fullCopy label: 'Make movie';		actionSelector: #makeMovie).	^r! !!FloatingBookControlsMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:40'!initialize	super initialize.	borderWidth _ 1.	borderColor _ Color black.	self layoutInset: 0.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.! !!FreeCell methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:17'!initialize	super initialize.	Statistics newSession.	autoMoveRecursionCount _ 0.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self vResizing: #shrinkWrap.	self hResizing: #shrinkWrap.	self		color: self colorNearTop;		borderWidth: 2;		addMorph: self makeControls;		addMorph: self board;		newGame.! !!FreeCell methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:17'!makeControlBar	^AlignmentMorph newRow		color: self colorNearBottom;		borderColor: #inset;		borderWidth: 2;		layoutInset: 0;		hResizing: #spaceFill; vResizing: #shrinkWrap; wrapCentering: #center; cellPositioning: #leftCenter;		yourself.! !!FreeCell methodsFor: 'private' stamp: 'ar 11/9/2000 21:16'!buildButton: aButton target: aTarget label: aLabel selector: aSelector	"wrap a button or switch in an alignmentMorph to provide some space around the button"	| a |	aButton 		target: aTarget;		label: aLabel;		actionSelector: aSelector;		borderColor: #raised;		borderWidth: 2;		color: Color gray.	a _ AlignmentMorph newColumn		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		color: Color transparent;		layoutInset: 1.	a addMorph: aButton.	^ a! !!FreeCell methodsFor: 'private' stamp: 'ar 11/9/2000 21:17'!wrapPanel: anLedPanel label: aLabel	"wrap an LED panel in an alignmentMorph with a label to its left"	| a |	a _ AlignmentMorph newRow		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		borderWidth: 0;		layoutInset: 5;		color: Color transparent.	a addMorph: anLedPanel.	a addMorph: (StringMorph contents: aLabel). 	^ a! !!FreeCellBoard methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:54'!initialize	super initialize.	self listDirection: #topToBottom.	self hResizing: #shrinkWrap.	self vResizing: #rigid.	self height: 500.	borderWidth _ 0.	color _ Color green.	self layout.! !!FreeCellBoard methodsFor: 'layout' stamp: 'ar 11/9/2000 20:54'!cardCell	^PlayingCardDeck new		layout: #pile; 		listDirection: #topToBottom;		enableDragNDrop;		color: Color transparent;		borderColor: (Color gray alpha: 0.5);		borderWidth: 2;		yourself! !!FreeCellBoard methodsFor: 'layout' stamp: 'ar 11/9/2000 20:55'!stack	^ PlayingCardDeck new color: Color transparent;	 layout: #stagger;	 listDirection: #topToBottom;	 enableDragNDrop;	 stackingPolicy: #altStraight;	 stackingOrder: #descending;	 emptyDropPolicy: #any;	 target: self;	 cardDroppedSelector: #cardMoved;	 cardDraggedSelector: #dragCard:fromStack:;	 acceptCardSelector: #acceptCard:onStack:;	 cardDoubleClickSelector: #doubleClickInStack:OnCard:! !!FreeCellBoard methodsFor: 'layout' stamp: 'ar 11/9/2000 21:17'!stacksRow	| row |	row := (AlignmentMorph newRow)		vResizing: #spaceFill;		hResizing: #spaceFill;		wrapCentering: #topLeft;		color: Color transparent;		yourself.	self stacks do: [:stack |		row 			addMorphBack: AlignmentMorph newVariableTransparentSpacer;			addMorphBack: stack].	row addMorphBack: AlignmentMorph newVariableTransparentSpacer.	^row! !!GeePrinterDialogMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:41'!initialize	super initialize.	self vResizing: #shrinkWrap.	self hResizing: #shrinkWrap.	color _ Color paleYellow.	borderWidth _ 8.	borderColor _ color darker.	self layoutInset: 4.	self useRoundedCorners.	printSpecs ifNil: [printSpecs _ PrintSpecifications defaultSpecs].	self rebuild.! !!GraphicalMenu methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:18'!initializeFor: aTarget withForms: formList coexist: aBoolean	" World primaryHand attachMorph: (GraphicalMenu new initializeFor: nil 		withForms: Form allInstances coexist: true) "	| buttons b anIndex buttonCage imageWrapper |	target _ aTarget.	coexistWithOriginal _ aBoolean.	color _ Color white.	borderColor _ Color blue darker.	borderWidth _ 1.	formChoices _ formList.	currentIndex _ 1.	self hResizing: #shrinkWrap; vResizing: #shrinkWrap.	b _ SimpleButtonMorph new target: self; borderColor: Color black.	buttons _ AlignmentMorph newRow.	buttons borderWidth: 0; layoutInset: 0.	buttons hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	buttons wrapCentering: #topLeft.	buttonCage _ AlignmentMorph newColumn.	buttonCage hResizing: #shrinkWrap; vResizing: #spaceFill.	buttonCage addTransparentSpacerOfSize: (0 @ 10).	buttons addMorphBack: (b fullCopy label: 'Prev';	actionSelector: #downArrowHit; actWhen: #whilePressed).	buttons addTransparentSpacerOfSize: (9@0).	buttons addMorphBack: (b fullCopy label: 'Next';	actionSelector: #upArrowHit; actWhen: #whilePressed).	buttons addTransparentSpacerOfSize: (5@0).	buttons submorphs last color: Color white.	buttonCage addMorphBack: buttons.	buttonCage addTransparentSpacerOfSize: (0 @ 12).	buttons _ AlignmentMorph newRow.	buttons addMorphBack: (b fullCopy label: 'OK';	actionSelector: #okay).	buttons addTransparentSpacerOfSize: (5@0).	buttons addMorphBack: (b fullCopy label: 'Cancel';	actionSelector: #cancel).	buttonCage addMorphBack: buttons.	buttonCage addTransparentSpacerOfSize: (0 @ 10).	self addMorphFront: buttonCage.	imageWrapper _ Morph new color: Color transparent; extent: 102 @ 82.	imageWrapper addMorphBack: (formDisplayMorph _ ImageMorph new extent: 100 @ 100).	self addMorphBack: imageWrapper.	target ifNotNil: [(anIndex _ formList indexOf: target form ifAbsent: [nil]) ifNotNil:		[currentIndex _ anIndex]].	self updateThumbnail! !!GraphicalDictionaryMenu methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:18'!initializeFor: aTarget fromDictionary: aDictionary	|  imageWrapper anIndex aButton controlsWrapper asm |	self listDirection: #topToBottom.	self addMorphBack: (controlsWrapper _ AlignmentMorph newRow).	self baseDictionary: aDictionary.	target _ aTarget.	coexistWithOriginal _ true.	color _ Color white.	borderColor _ Color blue darker.	borderWidth _ 1.	self hResizing: #shrinkWrap; vResizing: #shrinkWrap.	controlsWrapper borderWidth: 0; layoutInset: 0; hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	controlsWrapper wrapCentering: #topLeft; color: Color white; vResizing: #spaceFill.	controlsWrapper addTransparentSpacerOfSize: (18@0).	controlsWrapper addMorphBack: (IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'Menu'); color: Color transparent; 			actWhen: #buttonDown;			actionSelector: #showMenu; target: self;			setBalloonText: 'menu').	controlsWrapper  addTransparentSpacerOfSize: (14@0).	aButton _ SimpleButtonMorph new target: self; borderColor: Color black.	controlsWrapper addMorphBack: (aButton fullCopy		label: 'Prev';		actionSelector: #downArrowHit;		actWhen: #whilePressed;		setBalloonText: 'show previous picture';		yourself).	controlsWrapper addTransparentSpacerOfSize: (15@0).	controlsWrapper addMorphBack: (aButton fullCopy label: 'Next';	actionSelector: #upArrowHit; actWhen: #whilePressed; setBalloonText: 'show next pictutre').	self addMorphBack: controlsWrapper.	self addTransparentSpacerOfSize: (0 @ 12).	self addMorphBack:  (asm _ UpdatingStringMorph new contents: ' '; target: self; putSelector: #renameGraphicTo:; getSelector: #truncatedNameOfGraphic; useStringFormat).	asm setBalloonText: 'The name of the current graphic'. 	self addTransparentSpacerOfSize: (0 @ 12).	self addMorphBack: (AlignmentMorph newRow height: 4; borderWidth: 0; color: Color black).	imageWrapper _ Morph new color: Color transparent; extent: 190 @ 82.	imageWrapper addMorphBack: (formDisplayMorph _ ImageMorph new extent: 100 @ 100).	self addMorphBack: imageWrapper.	target ifNotNil: [(anIndex _ formChoices indexOf: target form ifAbsent: [nil]) ifNotNil:		[currentIndex _ anIndex]].	self updateThumbnail! !!KeyboardMorphForInput methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:41'!addRecordingControls	| button switch playRow durRow articRow modRow |	button _ SimpleButtonMorph new target: self;		borderColor: #raised; borderWidth: 2; color: color.	switch _ SimpleSwitchMorph new target: self;		offColor: color; onColor: (Color r: 1.0 g: 0.6 b: 0.6); borderWidth: 2;		setSwitchState: false.	"Add chord, rest and delete buttons"	playRow _ AlignmentMorph newRow.	playRow color: color; borderWidth: 0; layoutInset: 0.	playRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	playRow addMorphBack: (switch fullCopy label: 'chord'; actionSelector: #buildChord:).	playRow addMorphBack: (button fullCopy label: '          rest          '; actionSelector: #emitRest).	playRow addMorphBack: (button fullCopy label: 'del'; actionSelector: #deleteNotes).	self addMorph: playRow.	playRow align: playRow bounds topCenter			with: self bounds bottomCenter.	"Add note duration buttons"	durRow _ AlignmentMorph newRow.	durRow color: color; borderWidth: 0; layoutInset: 0.	durRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	durRow addMorphBack: (switch fullCopy label: 'whole';				actionSelector: #duration:onOff:; arguments: #(1)).	durRow addMorphBack: (switch fullCopy label: 'half';				actionSelector: #duration:onOff:; arguments: #(2)).	durRow addMorphBack: (switch fullCopy label: 'quarter';				actionSelector: #duration:onOff:; arguments: #(4)).	durRow addMorphBack: (switch fullCopy label: 'eighth';				actionSelector: #duration:onOff:; arguments: #(8)).	durRow addMorphBack: (switch fullCopy label: 'sixteenth';				actionSelector: #duration:onOff:; arguments: #(16)).	self addMorph: durRow.	durRow align: durRow bounds topCenter			with: playRow bounds bottomCenter.	"Add note duration modifier buttons"	modRow _ AlignmentMorph newRow.	modRow color: color; borderWidth: 0; layoutInset: 0.	modRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	modRow addMorphBack: (switch fullCopy label: 'dotted';				actionSelector: #durMod:onOff:; arguments: #(dotted)).	modRow addMorphBack: (switch fullCopy label: 'normal';				actionSelector: #durMod:onOff:; arguments: #(normal)).	modRow addMorphBack: (switch fullCopy label: 'triplets';				actionSelector: #durMod:onOff:; arguments: #(triplets)).	modRow addMorphBack: (switch fullCopy label: 'quints';				actionSelector: #durMod:onOff:; arguments: #(quints)).	self addMorph: modRow.	modRow align: modRow bounds topCenter			with: durRow bounds bottomCenter.	"Add articulation buttons"	articRow _ AlignmentMorph newRow.	articRow color: color; borderWidth: 0; layoutInset: 0.	articRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	articRow addMorphBack: (switch fullCopy label: 'legato';				actionSelector: #articulation:onOff:; arguments: #(legato)).	articRow addMorphBack: (switch fullCopy label: 'normal';				actionSelector: #articulation:onOff:; arguments: #(normal)).	articRow addMorphBack: (switch fullCopy label: 'staccato';				actionSelector: #articulation:onOff:; arguments: #(staccato)).	self addMorph: articRow.	articRow align: articRow bounds topCenter			with: modRow bounds bottomCenter.	self bounds: (self fullBounds expandBy: (0@0 extent: 0@borderWidth))! !!KlattFrameMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:00'!addSlidersForParameters: params	| left right container current slider |	params size < 10		ifTrue: [left _ right _ self]		ifFalse: [container _ AlignmentMorph new color: self color; listDirection: #leftToRight.				left _ container clone listDirection: #topToBottom.				right _ left clone.				container addMorphBack: left; addMorphBack: right.				self addMorphBack: container].	params do: [ :each |		current _ current == left ifTrue: [right] ifFalse: [left].		slider _ self newSliderNamed: each min: (KlattFrame minimumForParameter: each) max: (KlattFrame maximumForParameter: each).		slider setBalloonText: (KlattFrame descriptionForParameter: each).		current addMorphBack: slider]! !!KlattFrameMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:55'!initialize	super initialize.	self listDirection: #topToBottom.	self color: (Color r: 0.452 g: 0.935 b: 0.548)! !!KlattFrameMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:18'!newSliderForParameter: parameter target: target min: min max: max description: description	| r slider m |	r _ AlignmentMorph newRow.	r color: self color; borderWidth: 0; layoutInset: 0.	r hResizing: #spaceFill; vResizing: #rigid; extent: 5@20; wrapCentering: #center; cellPositioning: #leftCenter.	slider _ SimpleSliderMorph new		color: (Color r: 0.065 g: 0.548 b: 0.645);		extent: 120@2;		target: target;		actionSelector: (parameter, ':') asSymbol;		minVal: min;		maxVal: max;		adjustToValue: (target perform: parameter asSymbol).	r addMorphBack: slider.	m _ StringMorph new contents: parameter, ': '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: target; getSelector: parameter asSymbol; putSelector: (parameter, ':') asSymbol;		width: 30; growable: false; floatPrecision: (max - min / 100.0 min: 1.0); step.	r addMorphBack: m.	r setBalloonText: description.	^ r! !!MIDIControllerMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:18'!initialize	| slider |	super initialize.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self color: (Color r: 0.484 g: 0.613 b: 0.0).	self borderWidth: 1.	channel _ 0.	controller _ 7.  "channel volume"	slider _ SimpleSliderMorph new		target: self;		actionSelector: #newSliderValue:;		minVal: 0;		maxVal: 127;		extent: 128@10.	self addMorphBack: slider.	self addMorphBack: (StringMorph contents: 'Midi Controller').	self updateLabel.! !!MenuMorph methodsFor: 'construction' stamp: 'ar 11/9/2000 21:19'!addTitle: aString updatingSelector: aSelector updateTarget: aTarget	"Add a title line at the top of this menu  Make aString its initial contents.  If aSelector is not nil, then periodically obtain fresh values for its contents by sending aSelector to aTarget.."	| title |	title _ AlignmentMorph new.	self setTitleParametersFor: title.	title vResizing: #shrinkWrap.	title listDirection: #topToBottom.	title wrapCentering: #center; cellPositioning: #topCenter.	aSelector		ifNotNil:			[title addMorphBack: (UpdatingStringMorph new lock; useStringFormat; target: aTarget; getSelector: aSelector)]		ifNil:			[(aString asString findTokens: String cr) do:				[:line | title addMorphBack: (StringMorph contents: line font: Preferences standardMenuFont)]].		self addMorphFront: title.! !!MenuMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:56'!initialize	super initialize.	bounds _ 0@0 corner: 40@10.	self setDefaultParameters.	self listDirection: #topToBottom.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	defaultTarget _ nil.	selectedItem _ nil.	stayUp _ false.	popUpOwner _ nil.	Preferences roundedMenuCorners ifTrue: [self useRoundedCorners]! !!MenuMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:41'!setDefaultParameters	| worldColor |	((Preferences menuColorFromWorld and: [Display depth > 4]) and: [(worldColor _ self currentWorld color) isColor])		ifTrue: [self setColor: (worldColor luminance > 0.7						ifTrue: [worldColor mixed: 0.8 with: Color black]						ifFalse: [worldColor mixed: 0.4 with: Color white])						"Think about whether alpha should be included."					borderWidth: Preferences menuBorderWidth					borderColor: #raised]		ifFalse: [self setColor: Preferences menuColor					borderWidth: Preferences menuBorderWidth					borderColor: Preferences menuBorderColor].	self layoutInset: 3.! !!MidiInputMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:41'!addChannelControlsFor: channelIndex	| r divider col |	r _ self makeRow		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	r addMorphBack: (self channelNumAndMuteButtonFor: channelIndex).	r addMorphBack: (Morph new extent: 10@5; color: color).  "spacer"	r addMorphBack: (self panAndVolControlsFor: channelIndex).	divider _ AlignmentMorph new		extent: 10@1;		borderWidth: 1;		layoutInset: 0;		borderColor: #raised;		color: color;		hResizing: #spaceFill;		vResizing: #rigid.	col _ self lastSubmorph.	col addMorphBack: divider.	col addMorphBack: r.! !!MidiInputMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:19'!initialize	super initialize.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self layoutInset: 3.	color _ Color veryLightGray.	self borderWidth: 2.	midiPortNumber _ nil.	midiSynth _ MIDISynth new.	instrumentSelector _ Array new: 16.	self removeAllMorphs.	self addMorphBack: self makeControls.	self addMorphBack:		(AlignmentMorph newColumn color: color; layoutInset: 0).	self addChannelControlsFor: 1.	self extent: 20@20.! !!MidiInputMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:41'!makeControls	| b r reverbSwitch onOffSwitch |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2;		color: color.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (		b fullCopy			label: '<>';			actWhen: #buttonDown;			actionSelector: #invokeMenu).	onOffSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'On';		actionSelector: #toggleOnOff;		target: self;		setSwitchState: false.	r addMorphBack: onOffSwitch.	reverbSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'Reverb Disable';		actionSelector: #disableReverb:;		target: self;		setSwitchState: SoundPlayer isReverbOn not.	r addMorphBack: reverbSwitch.	^ r! !!MidiInputMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:19'!makeRow	^ AlignmentMorph newRow		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap! !!MidiInputMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:19'!panAndVolControlsFor: channelIndex	| volSlider panSlider c r middleLine |	volSlider _ SimpleSliderMorph new		color: color;		extent: 101@2;		target: midiSynth;		arguments: (Array with: channelIndex);		actionSelector: #volumeForChannel:put:;		minVal: 0.0;		maxVal: 1.0;		adjustToValue: (midiSynth volumeForChannel: channelIndex).	panSlider _ volSlider fullCopy		actionSelector: #panForChannel:put:;		minVal: 0.0;		maxVal: 1.0;				adjustToValue: (midiSynth panForChannel: channelIndex).	c _ AlignmentMorph newColumn		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap.	middleLine _ Morph new  "center indicator for pan slider"		color: (Color r: 0.4 g: 0.4 b: 0.4);		extent: 1@(panSlider height - 4);		position: panSlider center x@(panSlider top + 2).	panSlider addMorphBack: middleLine.	r _ self makeRow.	r addMorphBack: (StringMorph contents: '0').	r addMorphBack: volSlider.	r addMorphBack: (StringMorph contents: '10').	c addMorphBack: r.	r _ self makeRow.	r addMorphBack: (StringMorph contents: 'L').	r addMorphBack: panSlider.	r addMorphBack: (StringMorph contents: 'R').	c addMorphBack: r.	^ c! !!MonthMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:56'!initialize	super initialize.	tileRect _ 0@0 extent: 23@19.	self layoutInset: 1;		color: Color red;		listDirection: #topToBottom;		vResizing: #shrinkWrap;		hResizing: #shrinkWrap;		month: Date today month! !!MonthMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:19'!initializeHeader	| title sep  frame button monthName |	title _ (self findA: WeekMorph) title.	monthName _ month name.	self width < 160 ifTrue:		[(#(6 7 9) includes: month index)			ifTrue: [monthName _ monthName copyFrom: 1 to: 4]			ifFalse: [monthName _ monthName copyFrom: 1 to: 3]].	sep _ Morph new color: Color transparent; extent: title width @ 1.	self		addMorph: sep;		addMorph: title;		addMorph: sep copy.	button _ SimpleButtonMorph new				target: self;				actWhen: #whilePressed;				color: (Color r: 0.8 g: 0.8 b: 0.8).	frame _ AlignmentMorph new		color: Color transparent;		listDirection: #leftToRight;		layoutInset: 0.	frame		addMorph:			(button				label: '>>';				actionSelector: #nextYear;				width: 15);		addMorph:			(button copy				label: '>';				actionSelector: #next;				width: 15);		addMorph:			((AlignmentMorph new				color: Color transparent;				listDirection: #topToBottom;				"hResizing: #shrinkWrap;"				wrapCentering: #center; cellPositioning: #topCenter;				extent: (title fullBounds width - (button width * 3)) @ title height)				addMorph:					(StringMorph new						contents:							monthName, ' ', month year printString));		addMorph:			(button copy				label: '<';				actionSelector: #previous;				width: 15);		addMorph:			(button copy				label: '<<';				actionSelector: #previousYear;				width: 15).	self addMorph: frame! !!MoviePlayerMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:42'!setInitialState	super setInitialState.	self layoutInset: 3.	self borderWidth: 2.	self color: Color veryLightGray.	pageSize _ frameSize _ 200@200.	frameDepth _ 8.	self disableDragNDrop! !!MoviePlayerMorph methodsFor: 'controls and layout' stamp: 'ar 11/9/2000 20:42'!showPageControls: controlSpecs 	| pageControls |	self hidePageControls.	pageControls _ self makePageControlsFrom: controlSpecs.	pageControls borderWidth: 0; layoutInset: 0; extent: pageControls width@14.	pageControls  setProperty: #pageControl toValue: true.	pageControls setNameTo: 'Page Controls'.	pageControls eventHandler: (EventHandler new on: #mouseDown send: #move to: self).	self addMorphBack: pageControls beSticky! !!PhonemeRecognizerMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:56'!initialize	| r |	super initialize.	borderWidth _ 2.	self listDirection: #topToBottom.	soundInput _ SoundInputStream new samplingRate: 22050.	phonemeRecords _ OrderedCollection new.	silentPhoneme _ PhonemeRecord new initialize name: '...'.	currentPhoneme _ silentPhoneme.  "the PhonemeRecord of the current match"	self addTitle.	self addButtonRows.	self addLevelSlider.	r _ AlignmentMorph newRow vResizing: #shrinkWrap.	r addMorphBack: self makeLevelMeter.	self addMorphBack: r.	self addPhonemeDisplay.	self extent: 10@10.  "make minimum size"! !!PhonemeRecognizerMorph methodsFor: 'private' stamp: 'ar 11/9/2000 21:20'!addLevelSlider	"Create and add a slider to set the sound input level. This level is used both when recognizing and adding phonemes."	| levelSlider r |	levelSlider _ SimpleSliderMorph new		color: color;		extent: 100@2;		target: soundInput;		actionSelector: #recordLevel:;		adjustToValue: soundInput recordLevel.	r _ AlignmentMorph newRow		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #shrinkWrap;		vResizing: #rigid;		height: 24.	r addMorphBack: (StringMorph contents: '0 ').	r addMorphBack: levelSlider.	r addMorphBack: (StringMorph contents: ' 10').	self addMorphBack: r.! !!PhonemeRecognizerMorph methodsFor: 'private' stamp: 'ar 11/9/2000 21:20'!addPhonemeDisplay	"Add a display to show the currently matching phoneme."	| font r |	font _ StrikeFont familyName: 'Helvetica' size: 36.	phonemeDisplay _ StringMorph contents: '...' font: font.	r _ AlignmentMorph newColumn		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #rigid;		height: 20.	r addMorphBack: phonemeDisplay.	self addMorphBack: (Morph new extent: 5@8; color: Color transparent).  "spacer"	self addMorphBack: r.! !!PhonemeRecognizerMorph methodsFor: 'private' stamp: 'ar 11/9/2000 21:20'!addTitle	"Add a title."	| font title r |	font _ StrikeFont familyName: 'ComicBold' size: 20.	title _ StringMorph contents: 'Phoneme Recognizer' font: font.	r _ AlignmentMorph newColumn		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #rigid;		height: 20.	r addMorphBack: title.	self addMorphBack: r.	self addMorphBack: (Morph new extent: 5@8; color: Color transparent).  "spacer"! !!PhraseTileMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:20'!initialize	super initialize.	resultType = #unknown.	brightenedOnEnter _ false.	self wrapCentering: #center; cellPositioning: #leftCenter.	self hResizing: #shrinkWrap.	borderWidth _ 0.	self layoutInset: 0.	self extent: 5@5.  "will grow to fit"! !!PhraseTileMorph methodsFor: 'mouse' stamp: 'ar 11/9/2000 21:05'!acceptDroppingMorph: aMorph event: evt	| m |	m _ self owner.	[m == nil] whileFalse: [		self flag: #priorityFix.		self flag: #arNote. "What the @#$% is this????????"		((m respondsTo: #orientation) and: [m orientation == #vertical]) ifTrue: [^ m acceptDroppingMorph: aMorph event: evt].		m _ m owner].	"| o |	self prepareToUndoDropOf: aMorph.	o _ owner.	self delete.	aMorph position: o position.	o addMorph: aMorph."! !!Player methodsFor: 'slots-user' stamp: 'ar 11/9/2000 20:42'!tearOffFancyWatcherFor: aSlotName	| aWatcher aTile getSel aLine aColor aTower precision |	aColor _ Color r: 0.387 g: 0.581 b: 1.0.	aLine _ AlignmentMorph newRow vResizing: #shrinkWrap; color: aColor.	aLine layoutInset: -1.	aLine borderWidth: 1; borderColor: aColor darker.	aLine addMorphBack: (self tileReferringToSelf borderWidth: 0; typeColor: aColor; color: aColor; bePossessive).	aLine addTransparentSpacerOfSize: (4@0).	aTower _ AlignmentMorph newColumn color: aColor.	aTower addTransparentSpacerOfSize: (0 @ 1).	aTower addMorphBack: (StringMorph contents: aSlotName, ' = ' font: ScriptingSystem fontForTiles).	aLine addMorphBack: aTower.	aTile _ NumericReadoutTile new typeColor: aColor.	aWatcher _ UpdatingStringMorph new.	(precision _ self defaultFloatPrecisionFor: (getSel _ ScriptingSystem getterSelectorFor: aSlotName)) ~= 1 ifTrue:		[aWatcher floatPrecision: precision].	aWatcher growable: true;		getSelector: getSel;		putSelector: (ScriptingSystem setterSelectorFor: aSlotName).	aWatcher target: self.	aTile addMorphBack: aWatcher.	aTile addArrows.	aTile setLiteralTo: (self perform: getSel) width: 30.	aLine addMorphBack: aTile.	aWatcher step; fitContents.	self currentHand attachMorph: aLine! !!PlayingCardDeck methodsFor: 'layout' stamp: 'ar 11/9/2000 21:05'!fixLayoutPile	| nextPlace |	self listDirection = #leftToRight		ifTrue: [nextPlace _ bounds left + self layoutInset + borderWidth]		ifFalse: [nextPlace _ bounds top + self layoutInset + borderWidth].	submorphs reverseDo: [:m |		self placeAndSize: m at: nextPlace padding: 0].! !!PlayingCardDeck methodsFor: 'layout' stamp: 'ar 11/9/2000 21:05'!fixLayoutStagger	| nextPlace |	self listDirection = #leftToRight		ifTrue: [nextPlace _ bounds left + self layoutInset + borderWidth]		ifFalse: [nextPlace _ bounds top + self layoutInset + borderWidth].	submorphs reverseDo: [:m |		self placeAndSize: m at: nextPlace padding: 0.		nextPlace _ nextPlace + self staggerOffset].! !!PlayingCardDeck methodsFor: 'layout' stamp: 'ar 11/9/2000 20:36'!xxxminHeight	"Return the minimum height for this morph."	| spaceNeeded |	self vResizing = #shrinkWrap ifFalse: [^super minHeight].	submorphs isEmpty ifTrue: [^ self minHeightWhenEmpty].	self orientation == #horizontal ifTrue: [^super minHeight].	self orientation == #vertical ifTrue:		[spaceNeeded _ 2 * (self layoutInset + borderWidth).		spaceNeeded _ spaceNeeded + (PlayingCardMorph height).		layout = #stagger ifTrue: [spaceNeeded _ spaceNeeded + 									((self submorphCount - 1) * self staggerOffset)]].	^ spaceNeeded! !!PlayingCardDeck methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:42'!initialize	super initialize.	layout _ #grid.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	borderWidth _ 0.	self layoutInset: 0.	stackingPolicy _ #stagger.	stackingOrder _ #ascending.	emptyDropPolicy _ #any.	self newSeed.	^self! !!PluggableButtonMorph methodsFor: 'initialize-release' stamp: 'ar 11/9/2000 21:20'!initialize 	super initialize.	self listDirection: #topToBottom.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self wrapCentering: #center; cellPositioning: #topCenter.	borderWidth _ 1.	model _ nil.	label _ nil.	getStateSelector _ nil.	actionSelector _ nil.	getLabelSelector _ nil.	getMenuSelector _ nil.	shortcutCharacter _ nil.	askBeforeChanging _ false.	triggerOnMouseDown _ false.	color _ Color lightGreen.	onColor _ color darker.	offColor _ color.	feedbackColor _ Color red.	showSelectionFeedback _ false.	allButtons _ nil.	self extent: 20@15.! !!PluggableButtonMorph methodsFor: 'accessing' stamp: 'ar 11/9/2000 21:21'!label: aStringOrTextOrMorph	"Label this button with the given string or morph."	| r |	self removeAllMorphs.	"nest label in a row for centering"	r _ AlignmentMorph newRow		borderWidth: 0;		layoutInset: 0;		color: Color transparent;		hResizing: #shrinkWrap;		vResizing: #spaceFill;		wrapCentering: #center; cellPositioning: #leftCenter.	aStringOrTextOrMorph isMorph		ifTrue: [			label _ aStringOrTextOrMorph.			r addMorph: aStringOrTextOrMorph]		ifFalse: [			label _ aStringOrTextOrMorph asString.			r addMorph: (StringMorph contents: label)].	self addMorph: r.! !!Preferences class methodsFor: 'factored pref panel' stamp: 'ar 11/9/2000 20:42'!openFactoredPanelWithWidth: aWidth 	"Preferences openFactoredPanelWithWidth: 325"	| tabbedPalette controlPage window playfield aColor aFont maxEntriesPerCategory tabsMorph anExtent |	aFont _ StrikeFont familyName: 'NewYork' size: 19.	aColor _ Color				r: 0.645				g: 1.0				b: 1.0.	tabbedPalette _ TabbedPalette newSticky.	(tabsMorph _ tabbedPalette tabsMorph) color: aColor darker;		 highlightColor: Color red regularColor: Color brown darker darker.	maxEntriesPerCategory _ 0.	"tabbedPalette addTabFor: self helpPaneForFactoredPanel font: aFont.  	LATER!!"	self factoredCategories		do: [:aCat | 			controlPage _ AlignmentMorph newColumn beSticky color: aColor.			controlPage borderColor: aColor;				 layoutInset: 4.			aCat second				do: [:aPrefSymbol | controlPage						addMorphBack: (Preferences								buttonRepresenting: aPrefSymbol								wording: aPrefSymbol								color: nil)].			controlPage setNameTo: aCat first asString.			aCat first == #halos				ifTrue: [self addHaloControlsTo: controlPage].			tabbedPalette addTabFor: controlPage font: aFont.			maxEntriesPerCategory _ maxEntriesPerCategory max: aCat second size].	tabbedPalette selectTabNamed: 'general'.	tabsMorph rowsNoWiderThan: aWidth.	playfield _ Morph newSticky.	anExtent _ aWidth @ (25 + tabsMorph height + (20 * maxEntriesPerCategory)).	playfield extent: anExtent.	playfield color: aColor.	playfield addMorphBack: tabbedPalette.	self couldOpenInMorphic		ifTrue: [window _ (SystemWindow labelled: 'Preferences')						model: nil.			window				bounds: (100 @ 100 - (0 @ window labelHeight + window borderWidth) extent: playfield extent + (2 * window borderWidth)).			window				addMorph: playfield				frame: (0 @ 0 extent: 1 @ 1).			window updatePaneColors.			window setProperty: #minimumExtent toValue: anExtent + (2 @ 2).			window position: 200 @ 20.			self currentHand attachMorph: window.			self currentWorld startSteppingSubmorphsOf: window]		ifFalse: [			(window _ MVCWiWPasteUpMorph newWorldForProject: nil) addMorph: playfield.			window startSteppingSubmorphsOf: playfield.			MorphWorldView				openOn: window				label: 'Preferences'				extent: playfield extent]! !!Presenter methodsFor: 'viewer' stamp: 'ar 11/9/2000 21:06'!updateViewer: aViewer forceToShow: aCategory	"Update the given viewer to make sure it is in step with various possible changes in the outside world, and when reshowing it be sure it shows the given category"	| aPlayer aPosition newViewer oldOwner wasSticky barHeight cats |	cats _ aViewer categoriesCurrentlyShowing asOrderedCollection.	aCategory ifNotNil: [(cats includes: aCategory) ifFalse: [cats addFirst: aCategory]].	aPlayer _ aViewer scriptedPlayer.	aPosition _ aViewer position.	wasSticky _ aViewer isSticky.	newViewer _ aViewer species new visible: false.	barHeight _ aViewer submorphs first listDirection == #topToBottom		ifTrue:			[aViewer submorphs first submorphs first height]		ifFalse:			[0].	newViewer initializeFor: aPlayer barHeight: barHeight includeDismissButton: aViewer hasDismissButton showCategories: cats.	wasSticky ifTrue: [newViewer beSticky].	oldOwner _ aViewer owner.	oldOwner ifNotNil:		[oldOwner replaceSubmorph: aViewer by: newViewer].		"It has happened that old readouts are still on steplist.  We may see again!!"	newViewer position: aPosition.	newViewer enforceTileColorPolicy.	newViewer visible: true.	newViewer world doIfNotNil: [:aWorld | aWorld startSteppingSubmorphsOf: newViewer].	newViewer layoutChanged! !!ProgressMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:21'!setupMorphs	| container  |	self initProgressMorph.	container _ AlignmentMorph newColumn.	container		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		color: Color transparent.	container addMorphBack: self labelMorph.	container addMorphBack: self subLabelMorph.	container addMorphBack: self progress.	self addMorph: container.	self borderWidth: 2.	self borderColor: Color black.	self extent: container extent.	self color: Color veryLightGray.	self align: self fullBounds center with: Display boundingBox center! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:42'!addButton: aString balloonText: anotherString for: aSymbol	| b a |	b _ self makeButton: aString balloonText: anotherString for: aSymbol.	a _ AlignmentMorph newColumn.	a color: Color transparent; borderWidth: 0; layoutInset: 2.	a hResizing: #shrinkWrap; vResizing: #shrinkWrap.	a addMorphBack: b.	self addMorphBack: a.! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:42'!initialize	super initialize.	self useRoundedCorners.	self layoutInset: 6.	color _ Color orange.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	mouseInside _ false.	self addButtons.! !!KidNavigationMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:41'!addButtons	(self addARow: {		self inAColumn: {self buttonFind}.		self transparentSpacerOfSize:6@6.		self transparentSpacerOfSize:6@6.		self inAColumn: {self buttonNewProject}.	}) layoutInset: 6.	self addARow: {		self transparentSpacerOfSize:0@6.	}.	(self addARow: {		self inAColumn: {self buttonPublish}.	}) layoutInset: 6.	self addARow: {		self transparentSpacerOfSize:0@18.	}.	(self addARow: {		self inAColumn: {self buttonQuit}.	}) layoutInset: 6.! !!KidNavigationMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:41'!initialize	| fill |	super initialize.	self layoutInset: 12.	fill _ GradientFillStyle ramp: {		0.0->(Color r: 0.032 g: 0.0 b: 0.484).		1.0->(Color r: 0.194 g: 0.032 b: 1.0)	}.	fill origin: self bounds topLeft.	fill direction: 0@200.	fill radial: false.	self fillStyle: fill.	self removeAllMorphs.	self addButtons.! !!RecordingControlsMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:58'!initialize	| r |	super initialize.	self hResizing: #shrinkWrap; vResizing: #shrinkWrap.	borderWidth _ 2.	self listDirection: #topToBottom.	recorder _ SoundRecorder new.	self addButtonRows.	self addRecordLevelSlider.	r _ AlignmentMorph newRow vResizing: #shrinkWrap.	r addMorphBack: self makeRecordMeter.	self addMorphBack: r.	self extent: 10@10.  "make minimum size"! !!RecordingControlsMorph methodsFor: 'other' stamp: 'ar 11/9/2000 21:21'!addRecordLevelSlider	| levelSlider r |	levelSlider _ SimpleSliderMorph new		color: color;		extent: 100@2;		target: recorder;		actionSelector: #recordLevel:;		adjustToValue: recorder recordLevel.	r _ AlignmentMorph newRow		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #shrinkWrap;		vResizing: #rigid;		height: 24.	r addMorphBack: (StringMorph contents: '0 ').	r addMorphBack: levelSlider.	r addMorphBack: (StringMorph contents: ' 10').	self addMorphBack: r.! !!SameGame methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:21'!buildButton: aButton target: aTarget label: aLabel selector: aSelector	"wrap a button or switch in an alignmentMorph to allow a row of buttons to fill space"	| a |	aButton 		target: aTarget;		label: aLabel;		actionSelector: aSelector;		borderColor: #raised;		borderWidth: 2;		color: color.	a _ AlignmentMorph newColumn		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		color: color.	a addMorph: aButton.	^ a! !!SameGame methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:21'!initialize	super initialize.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self vResizing: #shrinkWrap.	self hResizing: #spaceFill.	self layoutInset: 3.	color _ Color lightGray.	self addMorph: self makeControls.	self addMorph: self board.	helpText _ nil.	self newGame.! !!SameGame methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:22'!makeControls	| row |	row _ AlignmentMorph newRow		color: color;		borderWidth: 0;		layoutInset: 3.	row hResizing: #spaceFill; vResizing: #shrinkWrap; wrapCentering: #center; cellPositioning: #leftCenter; extent: 5@5.	row addMorph:		(self			buildButton: SimpleSwitchMorph new			target: self			label: 'Help'			selector: #help:).	row addMorph:		(self			buildButton: SimpleButtonMorph new			target: self			label: 'Quit'			selector: #delete).	row addMorph:		(self			buildButton: SimpleButtonMorph new			target: self board			label: 'Hint'			selector: #hint).	row addMorph:		(self			buildButton: SimpleButtonMorph new			target: self			label: 'New game'			selector: #newGame).	selectionDisplay _ LedMorph new		digits: 2;		extent: (2*10@15).	row addMorph: (self wrapPanel: selectionDisplay label: 'Selection:').	scoreDisplay _ LedMorph new		digits: 4;		extent: (4*10@15).	row addMorph: (self wrapPanel: scoreDisplay label: 'Score:').	^ row! !!SameGame methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:22'!wrapPanel: anLedPanel label: aLabel	"wrap an LED panel in an alignmentMorph with a label to its left"	| a |	a _ AlignmentMorph newRow		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		borderWidth: 0;		layoutInset: 3;		color: color lighter.	a addMorph: anLedPanel.	a addMorph: (StringMorph contents: aLabel). 	^ a! !!Scamper methodsFor: 'window definition' stamp: 'ar 11/9/2000 21:22'!buttonRowPane	"Create and return a pane of navigation buttons."	| buttonRow |	buttonRow _ AlignmentMorph new		borderWidth: 0;		layoutInset: 0;		hResizing: #spaceFill;		wrapCentering: #center; cellPositioning: #leftCenter;		clipSubmorphs: true;		addTransparentSpacerOfSize: (5@0).		buttonRow 		addMorphBack: (self simpleButtonNamed: 'Back' action: #back text: self backButtonText); 		addTransparentSpacerOfSize: (5@0);		addMorphBack: (self simpleButtonNamed: 'Forward' action: #forward text: self forwardButtonText); 		addTransparentSpacerOfSize: (5@0);		addMorphBack: (self simpleButtonNamed: 'History' action: #displayHistory text: self historyButtonText); 		addTransparentSpacerOfSize: (5@0);		addMorphBack: (self simpleButtonNamed: 'Reload' action: #reload text: self reloadButtonText); 		addTransparentSpacerOfSize: (5@0);		addMorphBack: (self simpleButtonNamed: 'Home' action: #visitStartPage text: self homeButtonText); 		addTransparentSpacerOfSize: (5@0);		addMorphBack: (self simpleButtonNamed: 'Stop!!' action: #stopEverything text: self stopButtonText); 		addTransparentSpacerOfSize: (5@0).	^buttonRow! !!ScorePlayerMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:22'!initialize	super initialize.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self layoutInset: 3.	color _ Color veryLightGray.	self borderWidth: 2.	self onScorePlayer: (ScorePlayer new initialize) title: ' '.	self extent: 20@20.! !!ScorePlayerMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:43'!onScorePlayer: aScorePlayer title: scoreName	| divider col r |	scorePlayer _ aScorePlayer.	scorePlayer ifNotNil:		[scorePlayer  reset.		instrumentSelector _ Array new: scorePlayer score tracks size].	divider _ AlignmentMorph new		extent: 10@1;		borderWidth: 1;		layoutInset: 0;		borderColor: #raised;		color: color;		hResizing: #spaceFill;		vResizing: #rigid.	self removeAllMorphs.	self addMorphBack: self makeControls.	scorePlayer ifNil: [^ self].	r _ self makeRow		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	r addMorphBack: self rateControl;		addMorphBack: (Morph newBounds: (0@0 extent: 20@0) color: Color transparent);		addMorphBack: self volumeControl.	self addMorphBack: r.	self addMorphBack: self scrollControl.	col _ AlignmentMorph newColumn color: color; layoutInset: 0.	self addMorphBack: col.	1 to: scorePlayer trackCount do: [:trackIndex |		col addMorphBack: divider fullCopy.		col addMorphBack: (self trackControlsFor: trackIndex)].	LastMIDIPort ifNotNil: [		"use the most recently set MIDI port"		scorePlayer openMIDIPort: LastMIDIPort].! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'ar 11/9/2000 20:43'!makeControls	| b r reverbSwitch repeatSwitch |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2;		color: color.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (b fullCopy label: '<>'; actWhen: #buttonDown;														actionSelector: #invokeMenu).	r addMorphBack: (b fullCopy label: 'Piano Roll';		actionSelector: #makePianoRoll).	r addMorphBack: (b fullCopy label: 'Rewind';		actionSelector: #rewind).	b target: scorePlayer.	r addMorphBack: (b fullCopy label: 'Play';			actionSelector: #resumePlaying).	r addMorphBack: (b fullCopy label: 'Pause';			actionSelector: #pause).	reverbSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'Reverb Disable';		actionSelector: #disableReverb:;		target: scorePlayer;		setSwitchState: SoundPlayer isReverbOn not.	r addMorphBack: reverbSwitch.	scorePlayer ifNotNil:		[repeatSwitch _ SimpleSwitchMorph new			offColor: color;			onColor: (Color r: 1.0 g: 0.6 b: 0.6);			borderWidth: 2;			label: 'Repeat';			actionSelector: #repeat:;			target: scorePlayer;			setSwitchState: scorePlayer repeat.		r addMorphBack: repeatSwitch].	b target: self.	^ r! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'ar 11/9/2000 21:23'!makeRow	^ AlignmentMorph newRow		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'ar 11/9/2000 21:23'!panAndVolControlsFor: trackIndex	| volSlider panSlider c r middleLine pianoRollColor |	pianoRollColor _ (Color wheel: scorePlayer score tracks size) at: trackIndex.	volSlider _ SimpleSliderMorph new		color: color;		sliderColor: pianoRollColor;		extent: 101@2;		target: scorePlayer;		arguments: (Array with: trackIndex);		actionSelector: #volumeForTrack:put:;		minVal: 0.0;		maxVal: 1.0;		adjustToValue: (scorePlayer volumeForTrack: trackIndex).	panSlider _ volSlider fullCopy		actionSelector: #panForTrack:put:;		minVal: 0.0;		maxVal: 1.0;				adjustToValue: (scorePlayer panForTrack: trackIndex).	c _ AlignmentMorph newColumn		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap.	middleLine _ Morph new  "center indicator for pan slider"		color: (Color r: 0.4 g: 0.4 b: 0.4);		extent: 1@(panSlider height - 4);		position: panSlider center x@(panSlider top + 2).	panSlider addMorphBack: middleLine.	r _ self makeRow.	r addMorphBack: (StringMorph contents: '0').	r addMorphBack: volSlider.	r addMorphBack: (StringMorph contents: '10').	c addMorphBack: r.	r _ self makeRow.	r addMorphBack: (StringMorph contents: 'L').	r addMorphBack: panSlider.	r addMorphBack: (StringMorph contents: 'R').	c addMorphBack: r.	^ c! !!ScriptEditorMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 22:04'!initialize	super initialize.	color _ ScriptingSystem colorBehindTiles.	self listDirection: #topToBottom.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self setDefaultBorderCharacteristics.	firstTileRow _ 1.  "index of first tile-carrying submorph"	self addNewRow.	showingMethodPane _ false.! !!ScriptEditorMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:43'!setDefaultBorderCharacteristics		borderWidth _ 1.	borderColor _ Color black.	self layoutInset: 2.	self useRoundedCorners! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'ar 11/9/2000 20:43'!buttonRowForEditor	"Answer a row of buttons that comprises the header at the top of the Scriptor"	| aRow aString aButtonMorph buttonFont aStatusMorph aButton aColumn |	buttonFont _ Preferences standardButtonFont.	aRow _ AlignmentMorph newRow color: Color transparent; layoutInset: 0.	aRow hResizing: #shrinkWrap.	aRow addMorphFront:		(SimpleButtonMorph new			label: '!!' font: (StrikeFont familyName: #ComicBold size: 16);			target: self;			color: Color yellow;			borderWidth: 0;			actWhen: #whilePressed;			actionSelector: #tryMe;			balloonTextSelector: #tryMe).	aRow addTransparentSpacerOfSize: 6@10.	self addDismissButtonTo: aRow.	aRow addTransparentSpacerOfSize: 6@1.	aColumn _ AlignmentMorph newColumn beTransparent.	aColumn addTransparentSpacerOfSize: 0@4.	aButton _ UpdatingThreePhaseButtonMorph checkBox.	aButton		target: self;		actionSelector: #toggleWhetherShowingTiles;		getSelector: #showingMethodPane.	aButton setBalloonText: 'toggle between showing tiles and showing textual code'.	aColumn addMorphBack: aButton.	aRow addMorphBack: aColumn.	aRow addTransparentSpacerOfSize: 6@10.	aString _ playerScripted externalName, ' ', self scriptTitle.	aRow addMorphBack:		(aButtonMorph _ SimpleButtonMorph new useSquareCorners label: aString font: buttonFont; target: self; setNameTo: 'title').	aButtonMorph actWhen: #buttonDown; actionSelector: #offerScriptorMenu.	aButtonMorph borderColor: (Color fromRgbTriplet: #(0.065 0.258 1.0)).	aButtonMorph color: (self isAnonymous ifTrue: [Color blue muchLighter] ifFalse: [ScriptingSystem uniformTileInteriorColor]).	aButtonMorph balloonTextSelector: #offerScriptorMenu.	aRow addMorphBack: (aStatusMorph _ self scriptInstantiation statusControlMorph).	aRow addTransparentSpacerOfSize: 6@1.	aRow addMorphBack:		(IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'AddTest'); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addYesNoToHand;			shedSelvedge;			balloonTextSelector: #addYesNoToHand).	aRow addTransparentSpacerOfSize: 12@10.	self addDestroyButtonTo: aRow.	self scriptInstantiation updateStatusMorph: aStatusMorph.	^ aRow! !!ScriptEditorMorph methodsFor: 'other' stamp: 'ar 11/9/2000 20:36'!xxxminHeight	| extra |	extra _ 2 * (self layoutInset + borderWidth).	^ (super minHeight - extra max: TileMorph defaultH) + extra! !!ScriptEditorMorph methodsFor: 'private' stamp: 'ar 11/9/2000 20:43'!addNewRow	| row |	row _ AlignmentMorph newRow		vResizing: #spaceFill;		layoutInset: 0;		borderWidth: 0;		extent: (bounds width)@(TileMorph defaultH);		color: Color transparent.	self addMorphBack: row.	^ row! !!ScriptEditorMorph methodsFor: 'private' stamp: 'ar 11/9/2000 20:43'!insertTileRow: tileList after: index	"Return a row to be used to insert an entire row of tiles."	| row |	row _ AlignmentMorph newRow		vResizing: #spaceFill;		layoutInset: 0;		extent: (bounds width)@(TileMorph defaultH);		color: Color transparent.	row addAllMorphs: tileList.	self privateAddMorph: row atIndex: index + 1.! !!ScriptEvaluatorMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:43'!initializeFor: aPhraseTileMorph	| lm aStatus |	self playerScripted: aPhraseTileMorph actualObject.	scriptName _ aPhraseTileMorph userScriptSelector.	self removeAllMorphs.	self addMorphFront: (lm _ AlignmentMorph newRow).	lm color: Color transparent; layoutInset: 0.	lm vResizing: #shrinkWrap.	lm addMorphBack: (ScriptingSystem tryButtonFor: aPhraseTileMorph).	lm addTransparentSpacerOfSize: 6@1.	lm addMorphBack: aPhraseTileMorph beSticky.	lm addTransparentSpacerOfSize: 4@1.		aStatus _ (playerScripted scriptInstantiationForSelector: scriptName) status.	lm addMorphBack:			(SimpleButtonMorph new label: aStatus font: Preferences standardButtonFont;				setNameTo: 'trigger';				target: self;				actWhen: #buttonDown;				actionSelector: #chooseTrigger).	lm addTransparentSpacerOfSize: 4@1.	self addDismissButtonTo: lm.	self disableDragNDrop.	lm enableDragNDrop! !!ScriptEvaluatorMorph methodsFor: 'display' stamp: 'ar 11/9/2000 20:43'!setDefaultBorderCharacteristics		borderWidth _ 2.	borderColor _ Color blue.	self layoutInset: 2.	self useRoundedCorners! !!SoundDemoMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:23'!initialize	super initialize.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self layoutInset: 3.	color _ Color lightGray.	self borderWidth: 2.	self addMorph: self makeControls.	soundColumn _ AlignmentMorph newColumn.	soundColumn enableDragNDrop.	self addMorphBack: soundColumn.	self extent: 118@150.! !!SoundDemoMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:43'!makeControls	| b r |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (b fullCopy label: 'V1';			actionSelector: #playV1).	r addMorphBack: (b fullCopy label: 'V2';			actionSelector: #playV2).	r addMorphBack: (b fullCopy label: 'V3';			actionSelector: #playV3).	r addMorphBack: (b fullCopy label: 'All';			actionSelector: #playAll).	r addMorphBack: (b fullCopy label: 'Stop';		actionSelector: #stopSound).	^ r! !!SoundSequencerMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:43'!makeControlPanel	| b |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	controlPanel _ AlignmentMorph newRow.	controlPanel color: b color; borderWidth: 0; layoutInset: 0.	controlPanel hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	controlPanel addMorphBack: (b fullCopy label: 'reset';	actionSelector: #reset).	controlPanel addMorphBack: (b fullCopy label: 'stop';		actionSelector: #stop).	controlPanel addMorphBack: (b fullCopy label: 'play';	actionSelector: #play).! !!Speaker methodsFor: 'editing' stamp: 'ar 11/9/2000 20:57'!edit	| answer buttons |	answer _ (self findAVoice: KlattVoice) editor.	buttons _ AlignmentMorph new listDirection: #leftToRight; color: answer color.	buttons		addMorphFront: (SimpleButtonMorph new target: self; actWhen: #buttonDown; actionSelector:  #newHead; labelString: 'new head');		addMorphFront: (SimpleButtonMorph new target: self; actWhen: #buttonDown; actionSelector:  #saySomething; labelString: 'test').	answer		addSliderForParameter: #speed target: self min: 0.1 max: 2.0 description: 'Speed';		addSliderForParameter: #loudness target: self min: 0.0 max: 1.0 description: 'Loudness';		addSliderForParameter: #range target: self min: 0.0 max: 1.0 description: 'Pitch Range';		addSliderForParameter: #pitch target: self min: 20.0 max: 800.0 description: 'Pitch';		addMorphFront: buttons;		openInWorld! !!SpectrumAnalyzerMorph methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:58'!initialize	super initialize.	borderWidth _ 2.	self listDirection: #topToBottom.	soundInput _ SoundInputStream new samplingRate: 22050.	fft _ FFT new: 512.	displayType _ 'sonogram'.	self addButtonRow.	self addLevelSlider.	self addMorphBack: self makeLevelMeter.	self addMorphBack: (Morph new extent: 10@10; color: Color transparent).  "spacer"	self resetDisplay.  "adds the display morph"! !!SpectrumAnalyzerMorph methodsFor: 'private' stamp: 'ar 11/9/2000 21:23'!addLevelSlider	| levelSlider r |	levelSlider _ SimpleSliderMorph new		color: color;		extent: 100@2;		target: soundInput;		actionSelector: #recordLevel:;		adjustToValue: soundInput recordLevel.	r _ AlignmentMorph newRow		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #leftCenter;		hResizing: #shrinkWrap;		vResizing: #rigid;		height: 24.	r addMorphBack: (StringMorph contents: '0 ').	r addMorphBack: levelSlider.	r addMorphBack: (StringMorph contents: ' 10').	self addMorphBack: r.! !!StackMorph class methodsFor: 'authoring prototype' stamp: 'ar 11/9/2000 20:43'!designationsExplainer	"Answer a morph that contains designation explanation"	| aMorph aSwatch aTextMorph |	aMorph _ AlignmentMorph newColumn color: Color black; layoutInset: 1.	#((green		'Shared items onBackground.Exact same itemshared by every card')	(orange'Data items onBackgroundEach card has itsown data')	(red'Instance-specificitemsuniqueto this card')) do:	[:aPair |		aSwatch _ AlignmentMorph new extent: 132 @80; color: (Color perform: aPair first); lock.		aSwatch hResizing: #rigid; vResizing: #rigid; layoutInset: 0.		aSwatch borderColor: Color black.		aTextMorph _ TextMorph new string: aPair second fontName: 'ComicBold' size: 18.		aTextMorph width: 130.		aTextMorph centered.		aSwatch addMorphBack: aTextMorph.		aMorph addMorphBack: aSwatch].	^ aMorph	"StackMorph designationsExplainer openInHand"! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'ar 11/9/2000 20:44'!holderWithAlphabet	"Answer a fully instantiated Holder that has submorphs that represent the letters of the uppercase alphabet, with each one having an 'index' slot which bears the letter's index in the alphabet -- 1 for A, 2 for B, etc.   A few special characters are provided as per ack request 10/00; for these the index provided is rather arbitrarily assigned"	| aMorph aPlayer newMorph oneCharString aContainer aWrapper |	"ScriptingSystem holderWithAlphabet openInHand"	aContainer _ self prototypicalHolder useRoundedCorners.	aContainer borderColor: Color blue lighter.	aWrapper _ AlignmentMorph new hResizing: #shrinkWrap; vResizing: #shrinkWrap; layoutInset: 0.	aWrapper addMorphBack: (aMorph _ TextMorph new contents: 'A').	aMorph beAllFont: ((TextStyle named: #ComicBold) fontOfSize: 24).	aMorph width: 14; lock.	aWrapper beTransparent; setNameTo: 'A'.	aPlayer _ aWrapper assuredPlayer.	aPlayer addInstanceVariableNamed: #index type: #number value: 1.	aContainer addMorphBack: aWrapper.	2 to: 26 do:		[:anIndex |			newMorph _ aWrapper usableSiblingInstance.			newMorph player perform: #setIndex: with: anIndex.			newMorph firstSubmorph contents: (oneCharString _ ($A asciiValue + anIndex - 1) asCharacter asString).			newMorph setNameTo: oneCharString.			aContainer addMorphBack: newMorph].	#(' ' '.' '#') with: #(27 28 29) do:		[:aString :anIndex |			newMorph _ aWrapper usableSiblingInstance.			newMorph player perform: #setIndex: with: anIndex.			newMorph firstSubmorph contents: aString.			aString = ' '				ifTrue:					[newMorph setNameTo: 'space'.					newMorph color: (Color gray alpha: 0.2)]				ifFalse:					[newMorph setNameTo: aString].			aContainer addMorphBack: newMorph].	aContainer setNameTo: 'alphabet'.	aContainer isPartsBin: true.	aContainer enableDrop: false.	aContainer indicateCursor: false; width: 162.	aContainer color: (Color r: 0.839 g: 1.0 b: 1.0).  "Color fromUser"	^ aContainer! !!SyntaxMorph methodsFor: 'layout' stamp: 'ar 11/9/2000 20:44'!addBlockArg: aMorph	| tempHolder tt var nn row |	"Add a temporary to a block or the method.  Return true if succeed"	owner parseNode class == MethodNode ifTrue: [		^ (self addTempVar: aMorph)].	"Node for them is not insided the block"		"If exists, drop the temp in this block and let use extend it."	tt _ self firstSubmorph.	tempHolder _ tt firstSubmorph class == SyntaxMorph 				ifTrue: [tt parseNode class == BlockArgsNode 							ifTrue: [tt] ifFalse: [nil]]				ifFalse: [nil].	nn _ (aMorph allMorphs detect: [:rr | rr class == StringMorph]) contents.	"name"	tempHolder ifNil: ["make whole row"		row _ self addRow: #blockarg1 on: (BlockArgsNode new).		self addMorphFront: row.		aMorph parseNode name: nn key: nn code: nil.		var _ row addColumn: #tempVariable on: aMorph parseNode.		var layoutInset: 1.		var addMorphBack: (StringMorph contents: nn).		^ true].	tempHolder ifNotNil: [		"If this variable is not present, add it"		tempHolder allMorphs do: [:rr | 					rr class == StringMorph ifTrue: [rr contents = nn ifTrue: [^ false]]].				"is present. caller adds the temp as a new line of code to be extended"		aMorph parseNode name: nn key: nn code: nil.		var _ tempHolder addColumn: #tempVariable on: aMorph parseNode.		var layoutInset: 1.		var addMorphBack: (StringMorph contents: nn).		^ true].! !!SyntaxMorph methodsFor: 'layout' stamp: 'ar 11/9/2000 20:44'!addColumn: aColorOrSymbol on: aNode	| col |	self addMorphBack: (col _ self class column: aColorOrSymbol on: aNode).	aColorOrSymbol == #keyword1 		ifTrue: [col layoutInset: 0]		ifFalse: [col layoutInset: -1].	^ col! !!SyntaxMorph methodsFor: 'layout' stamp: 'ar 11/9/2000 20:44'!addTempVar: aMorph 	| tempHolder ii tt var nn tempMorph |	"know we are a block inside a MethodNode" 	tempHolder _ (ii _ owner submorphIndexOf: self) = 1				ifFalse: [tt _ owner submorphs at: ii - 1.						(tt isSyntaxMorph and: [tt parseNode class == MethodTempsNode])					 		ifTrue: [tt] ifFalse: [nil]]				ifTrue: [nil].	nn _ (aMorph allMorphs detect: [:rr | rr class == StringMorph]) contents.	"name"	tempHolder ifNil: [		tempMorph _ owner addRow: #tempVariable on: MethodTempsNode new.		owner addMorph: tempMorph inFrontOf: self.		tempMorph color: tempMorph color darker;			 explanation: 'These temporary variables are defined for the duration of this method'.		aMorph parseNode name: nn key: nn code: nil.		aMorph parseNode asMorphicSyntaxIn: tempMorph.		^ true].	tempHolder ifNotNil: [		tempHolder allMorphs do: [:rr | 					rr class == StringMorph ifTrue: [rr contents = nn ifTrue: [^ false]]].		aMorph parseNode name: nn key: nn code: nil.		var _ tempHolder addColumn: #tempVariable on: aMorph parseNode.		var layoutInset: 1.		var addMorphBack: (StringMorph contents: nn).		^ true]! !!SyntaxMorph methodsFor: 'layout' stamp: 'ar 11/9/2000 21:24'!foldWideReceiver	"I am a message whose receiver is wide, and whose message part is a column.	Rearrange me so that the message part appears indented under the receiver part."	| messageRow |	messageRow _ SyntaxMorph row: #keyword1 on: parseNode.	messageRow addMorph: (Morph newBounds: (0@0 extent: 20@10) color: Color transparent);			addMorphBack: submorphs second.	self listDirection: #topToBottom;		wrapCentering: #topLeft;		addMorphBack: messageRow.! !!SyntaxMorph class methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:24'!column: aColor on: aParseNode	| c color |	color _ self translateColor: aColor.	(c _ self newColumn)		parseNode: aParseNode;		layoutInset: self standardInset;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		color: color;		borderWidth: 1;		borderColor: c stdBorderColor;		wrapCentering: #topLeft.	^c! !!SyntaxMorph class methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:24'!row: aColor on: aParseNode	| r color |	color _ self translateColor: aColor.	(r _ self newRow)		parseNode: aParseNode;		layoutInset: self standardInset;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		color: color;		borderWidth: 1;		borderColor: r stdBorderColor;		wrapCentering: #topLeft.	^r! !!TabSorterMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 21:24'!addControls	| b r |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r wrapCentering: #topLeft.	r addMorphBack: (b fullCopy label: 'Okay';	actionSelector: #acceptSort).	r addMorphBack: (b fullCopy label: 'Cancel';	actionSelector: #cancelSort).	self addMorphFront: r.! !!TabbedPalette methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:44'!setInitialState	super setInitialState.	self layoutInset: 0.	pageSize _ 156 @ 232! !!Tetris methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:24'!initialize	super initialize.	board _ TetrisBoard new game: self.	color _ Color lightGray.	self listDirection: #topToBottom.	self wrapCentering: #center.	self vResizing: #shrinkWrap.	self hResizing: #spaceFill.	self layoutInset: 3.	self 		addMorphBack: self makeGameControls;		addMorphBack: self makeMovementControls;		addMorphBack: self showScoreDisplay;		addMorphBack: board.	board newGame.! !!Tetris methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:24'!rowForButtons	^AlignmentMorph newRow		color: color;		borderWidth: 0;		layoutInset: 3;		vResizing: #shrinkWrap;		wrapCentering: #center! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:44'!addButton: aString balloonText: anotherString for: aSymbol	| b a |	b _ SimpleButtonMorph new 		target: self;		borderColor: #raised;		color: color darker;		label: aString;		setBalloonText: anotherString;		actionSelector: aSymbol.	a _ AlignmentMorph newColumn.	a color: Color transparent; borderWidth: 0; layoutInset: 2.	a hResizing: #shrinkWrap; vResizing: #shrinkWrap.	a addMorphBack: b.	self addMorphBack: a.! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 20:44'!initialize	super initialize.	self useRoundedCorners.	self layoutInset: 6.	color _ Color red lighter.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	listOfPages _ OrderedCollection new.	currentIndex _ 0.	self addButtons.! !!Utilities class methodsFor: 'flaps' stamp: 'ar 11/9/2000 21:24'!menuFlap	| aFlap aFlapTab aHolder verticalHolder aMenu |	aFlap _ PasteUpMorph newSticky color: Color transparent; extent: self currentWorld width @ 264; borderWidth: 0; padding: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab color: Color brown lighter.	aFlapTab assumeString: 'Menus' font: Preferences standardFlapFont orientation: #horizontal color: Color blue muchLighter.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab edgeToAdhereTo: #top; inboard: false.	aFlapTab position: ((Display width - aFlapTab width) // 2) @ 0.	aFlap beFlap: true.	aFlap color: (Color blue muchLighter alpha: 0.6).	aFlap extent: self currentWorld width @ 267.	aHolder _ AlignmentMorph newRow beSticky beTransparent.	#(openMenu helpMenu windowsMenu (changesMenu debugMenu ) (playfieldMenu scriptingMenu )) do:		[:elem |			(elem isKindOf: Array)				ifTrue:					[verticalHolder _ AlignmentMorph newColumn beSticky beTransparent.					verticalHolder hResizing: #shrinkWrap; layoutInset: 0; wrapCentering: #center; cellPositioning: #topCenter.					elem do:						[:aMenuSymbol |							verticalHolder addMorphBack: ((aMenu _ self currentWorld getWorldMenu: aMenuSymbol) beSticky; stayUp: true).							aMenu beSticky.							aMenu borderWidth: 1.							aMenu submorphs second delete].					aHolder addMorphBack: verticalHolder]				ifFalse:					[aHolder addMorphBack: ((aMenu _ self currentWorld getWorldMenu: elem) beSticky; stayUp: true).					aMenu submorphs second delete.					aMenu beSticky.					aMenu borderWidth: 1]].	aFlap addMorphBack: aHolder.	^ aFlapTab! !!Utilities class methodsFor: 'scraps' stamp: 'ar 11/9/2000 21:24'!scrapsBook	| header aButton label |	ScrapsBook ifNil:		[ScrapsBook _ BookMorph new pageSize: 200@300; setNameTo: 'scraps'.		ScrapsBook color: Color yellow muchLighter.		ScrapsBook borderColor: Color darkGray; borderWidth: 2.		ScrapsBook removeEverything; showPageControls; insertPage.		header _ AlignmentMorph newRow wrapCentering: #center; cellPositioning: #leftCenter.		header setProperty: #header toValue: true.		header addMorph: (aButton _ SimpleButtonMorph new label: 'O' font: Preferences standardButtonFont).		aButton target: ScrapsBook; color:  Color tan; actionSelector: #delete;				setBalloonText: 'Close the trashcan.(to view again later, click on any trashcan).'.		header addMorphBack: AlignmentMorph newVariableTransparentSpacer beSticky.		header addMorphBack: 	(label _ UpdatingStringMorph new target: self) beSticky.		label getSelector: #trashTitle; useStringFormat; step.		header addMorphBack: AlignmentMorph newVariableTransparentSpacer beSticky.		header addMorphBack: (aButton _ SimpleButtonMorph new label: 'E' font: Preferences standardButtonFont).		aButton target: Utilities; color:  Color veryLightGray; actionSelector: #maybeEmptyTrash;				setBalloonText: 'Click here to empty the trash.'.		ScrapsBook currentPage addMorph: (TextMorph new contents: 'Objects you drag into the trash will automatically be saved here, one object per page, in case you need them later.  To disable this feature set the "preserveTrash" Preference to false.You can individually expunge objects by hitting the - control, and you can empty out all the objects in the trash can by hitting the "E" button at top right.'			wrappedTo: 190).		ScrapsBook addMorphFront: header.		ScrapsBook setProperty: #scraps toValue: true].	^ ScrapsBook	"Utilities emptyScrapsBook"! !!VariableNode methodsFor: 'tiles' stamp: 'ar 11/9/2000 20:44'!asMorphicSyntaxIn: parent	| column |	column _ parent addColumn: #variable on: self.	column layoutInset: 1.	column addMorphBack: (StringMorph contents: name).	^column! !!TempVariableNode methodsFor: 'tiles' stamp: 'ar 11/9/2000 20:44'!asMorphicSyntaxIn: parent	| column |	column _ parent addColumn: #tempVariable on: self.	column layoutInset: 1.	column addMorphBack: (StringMorph contents: name).	^ column! !!Viewer methodsFor: 'as yet unclassified' stamp: 'ar 11/9/2000 22:00'!initialize	super initialize.	self useRoundedCorners.	self hResizing: #shrinkWrap; vResizing: #shrinkWrap.! !!CategoryViewer methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:52'!initializeFor: aPlayer categoryChoice: aChoice	"Initialize the receiver to be associated with the player and category specified"	self listDirection: #topToBottom;		hResizing: #spaceFill;		vResizing: #spaceFill;		borderWidth: 1;		beSticky.	self color: Color green muchLighter muchLighter.	scriptedPlayer _ aPlayer.	self addHeaderMorph.	self categoryChoice: aChoice asSymbol! !!CategoryViewer methodsFor: 'categories' stamp: 'ar 11/9/2000 20:52'!categoryChoice: aCategory	"Temporarily switch-hits in support of two competing ui designs for the list"	| bin actualPane |	((actualPane _ namePane renderedMorph) isKindOf: StringMorph)		ifTrue:			[namePane contents: aCategory; color: Color black]		ifFalse:			[(actualPane isKindOf: RectangleMorph)				ifTrue:	[actualPane firstSubmorph contents: aCategory; color: Color black.						actualPane extent: actualPane firstSubmorph extent]				ifFalse:					[actualPane selection: (scriptedPlayer categories indexOf: aCategory)]].	bin _ PhraseWrapperMorph new borderWidth: 0; listDirection: #topToBottom.	bin addAllMorphs:		((scriptedPlayer tilePhrasesForCategory: aCategory inViewer: self) collect:			[:aViewerRow | self viewerEntryFor: aViewerRow]).	bin enforceTileColorPolicy.	submorphs size < 2		ifTrue:			[self addMorphBack: bin]		ifFalse:			[self replaceSubmorph: self listPane by: bin].	self world ifNotNil: [self world startSteppingSubmorphsOf: self]! !!CategoryViewer methodsFor: 'header pane' stamp: 'ar 11/9/2000 21:12'!addHeaderMorph	"Add the header at the top of the viewer, with a control for choosing the category, etc."	| header aFont aButton wrpr |	header _ AlignmentMorph newRow color: self color; wrapCentering: #center; cellPositioning: #leftCenter.	aFont _ Preferences standardButtonFont.	header addMorph: (aButton _ SimpleButtonMorph new label: 'O' font: aFont).	aButton target: self;			color:  Color tan;			actionSelector: #delete;			setBalloonText: 'remove this pane from the screendon''t worry -- nothing will be lost!!.'.	header addTransparentSpacerOfSize: 5@5.	header addUpDownArrowsFor: self.	(wrpr _ header submorphs last) submorphs second setBalloonText: 'previous category'.		wrpr submorphs first  setBalloonText: 'next category'.	header beSticky.	self addMorph: header.	namePane _ RectangleMorph newSticky color: Color brown veryMuchLighter.	namePane borderWidth: 0.	aButton _ (StringButtonMorph contents: '-----' font: (StrikeFont familyName: #NewYork size: 12)) color: Color black.	aButton target: self; arguments: Array new; actionSelector: #chooseCategory.	aButton actWhen: #buttonDown.	namePane addMorph: aButton.	aButton position: namePane position.	namePane align: namePane topLeft with: (bounds topLeft + (50 @ 0)).	namePane setBalloonText: 'category (click here to choose a different one)'.	header addMorphBack: namePane.	(namePane isKindOf: RectangleMorph) ifTrue:		[namePane addDropShadow.		namePane shadowColor: Color gray].	self categoryChoice: #basic! !!CategoryViewer methodsFor: 'entries' stamp: 'ar 11/9/2000 21:13'!phraseForSlot: slotSpec	"Return a PhraseTileMorph representing a variable belonging to the player"	"The slot spec if a tuple with the following structure:		1	#slot		2	slot name		3	balloon help		4	slot type		5	#readOnly,# readWrite, or #writeOnly		6	getter receiver indicator		7	getter selector		8	setter receiver indicator		9	setter selector	NB:	all are symbols except #3, which is a string"	| r anArrow slotName getterButton |	r _ ViewerRow newRow		color: self color;		beSticky;		elementSymbol: (slotName _ slotSpec second);		wrapCentering: #center;		cellPositioning: #leftCenter.	r addMorphBack: (self slotHeaderFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: (self infoButtonFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: self tileForSelf bePossessive.	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: (getterButton _ self getterButtonFor: slotName type: slotSpec fourth).	getterButton setBalloonText: slotSpec third.	(slotName == #isOverColor)		ifTrue:			[self addIsOverColorDetailTo: r]		ifFalse:			[(slotSpec fifth == #readOnly) ifFalse:				[r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"				r addMorphBack: (anArrow _ self arrowSetterButtonFor: slotName type: slotSpec fourth)].			r addMorphBack: (AlignmentMorph new beTransparent).  "flexible spacer"			(#(colorSees playerSeeingColor copy) includes: slotName) ifFalse:		 		[r addMorphBack: (self readoutFor: slotName type: slotSpec fourth readOnly: slotSpec fifth getSelector: slotSpec seventh putSelector: slotSpec ninth)]].	anArrow ifNotNil: [anArrow step].	^ r! !!StandardViewer methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:23'!addHeaderMorphWithBarHeight: anInteger includeDismissButton: aBoolean	"Add the header morph to the receiver, using anInteger as a guide for its height, and if aBoolean is true, include a dismiss buton for it"	| header aFont aButton aTextMorph nail wrpr costs headWrapper inner |	header _ AlignmentMorph newRow color: self color muchLighter; wrapCentering: #center; cellPositioning: #leftCenter.	aFont _ Preferences standardButtonFont.	aBoolean ifTrue:		[header addMorph: (aButton _ SimpleButtonMorph new label: 'O' font: aFont).		aButton target: self;				color:  Color tan;				actionSelector: #dismiss;				setBalloonText: 'remove this entire Viewer from the screendon''t worry -- nothing will be lost!!.'.		header addTransparentSpacerOfSize: 4@1].	aButton _ IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: #AddCategoryViewer); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addCategoryViewer;			setBalloonText: 'click here to addanother category pane';			shedSelvedge.	header addMorphBack: aButton.	header addTransparentSpacerOfSize: 4@1.	costs _ scriptedPlayer costumes.	costs ifNotNil:	[(costs size > 1 or: [costs size = 1 and: [costs first ~~ scriptedPlayer costume]]) ifTrue:		[header addUpDownArrowsFor: self.		(wrpr _ header submorphs last) submorphs second setBalloonText: 'switch to previous costume'.			wrpr submorphs first  setBalloonText: 'switch to next costume']].		(self hasProperty: #noInteriorThumbnail)		ifFalse:			[nail _ ThumbnailMorph new objectToView: scriptedPlayer viewSelector: #costume]		ifTrue:			[inner _ ImageMorph new image: (ScriptingSystem formAtKey: 'Menu').			nail _ RectangleMorph new beTransparent extent: inner extent.			nail addMorph: inner lock].	nail on: #mouseDown send: #offerViewerMenuForEvt:morph: to: scriptedPlayer.	header addMorphBack: nail.	nail setBalloonText: 'click here to get a menuthat will allow you toadd an instance variable,,tear off a tile, etc..'.	(self hasProperty: #noInteriorThumbnail)		ifFalse:			[nail borderWidth: 3; borderColor: #raised].	header addTransparentSpacerOfSize: 5@5."	aButton _ SimpleButtonMorph new target: self; actionSelector: #newEmptyScript; label: 'S' font: (aFont _ StrikeFont familyName: #ComicBold size: 16);  color: Color transparent; borderWidth: 0; actWhen: #buttonDown.	aButton setBalloonText: 'drag from here tocreate a new scriptfor this object'.		header addMorphBack: aButton.	header addTransparentSpacerOfSize: 8@5.	aButton _ SimpleButtonMorph new target: scriptedPlayer; actionSelector: #addInstanceVariable; label: 'I' font: aFont;  color: Color transparent; borderWidth: 0; actWhen: #buttonUp.	aButton setBalloonText: 'click here to addan instance variableto this object.'.	header addMorphBack: aButton.	header addTransparentSpacerOfSize: 5@5."	self viewsMorph ifTrue: [scriptedPlayer costume assureExternalName].	aTextMorph _ UpdatingStringMorph new		useStringFormat;		target:  scriptedPlayer;		getSelector: #nameForViewer;		setNameTo: 'name';		font: ScriptingSystem fontForNameEditingInScriptor.	self viewsMorph ifTrue:		[aTextMorph putSelector: #setName:.		aTextMorph setProperty: #okToTextEdit toValue: true].	aTextMorph step.	header  addMorphBack: aTextMorph.	aTextMorph setBalloonText: 'Click here to edit the player''s name.'.		header beSticky.	anInteger > 0		ifTrue:			[headWrapper _ AlignmentMorph newColumn color: self color.			headWrapper addTransparentSpacerOfSize: (0 @ anInteger).			headWrapper addMorphBack: header.			self addMorph: headWrapper]		ifFalse:			[self addMorph: header]! !!StandardViewer methodsFor: 'initialization' stamp: 'ar 11/9/2000 22:02'!initializeFlapVersionFor: aPlayer	scriptedPlayer _ aPlayer.	self listDirection: #topToBottom;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		borderWidth: 1.	self color: self standardViewerColor.	self addHeaderMorphWithBarHeight: 0 includeDismissButton: false.	self addCategoryViewer.    "#1"	self addCategoryViewer.    "#2"! !!StandardViewer methodsFor: 'initialization' stamp: 'ar 11/9/2000 22:02'!initializeFor: aPlayer barHeight: anInteger includeDismissButton: aBoolean showCategories: cats	scriptedPlayer _ aPlayer.	self listDirection: #topToBottom;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		borderWidth: 1.	self color: self standardViewerColor.	self addHeaderMorphWithBarHeight: anInteger includeDismissButton: aBoolean.	cats isEmptyOrNil		ifFalse:			[cats do:				[:aCat | self addCategoryViewerFor: aCat]]		ifTrue:			[self addCategoryViewer.			self addCategoryViewer].! !!ViewerEntry methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:44'!initialize	super initialize.	color _ Color r: 1.0 g: 0.985 b: 0.985.	self layoutInset: 0! !!ViewerRow methodsFor: 'initialization' stamp: 'ar 11/9/2000 20:44'!initialize	super initialize.	self layoutInset: 1! !!WaveEditor methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:25'!addControls	| slider b r m |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r wrapCentering: #topLeft.	r addMorphBack: (b fullCopy label: 'X';					actionSelector: #delete).	r addMorphBack: (b fullCopy label: '<>'; actWhen: #buttonDown;															actionSelector: #invokeMenu).	r addMorphBack: (b fullCopy label: 'Play';				actionSelector: #play).	r addMorphBack: (b fullCopy label: 'Play Before';		actionSelector: #playBeforeCursor).	r addMorphBack: (b fullCopy label: 'Play After';			actionSelector: #playAfterCursor).	r addMorphBack: (b fullCopy label: 'Play Loop';			actionSelector: #playLoop).	r addMorphBack: (b fullCopy label: 'Test';				actionSelector: #playTestNote).	r addMorphBack: (b fullCopy label: 'Save';				actionSelector: #saveInstrument).	r addMorphBack: (b fullCopy label: 'Set Loop End';		actionSelector: #setLoopEnd).	r addMorphBack: (b fullCopy label: 'One Cycle';			actionSelector: #setOneCycle).	r addMorphBack: (b fullCopy label: 'Set Loop Start';		actionSelector: #setLoopStart).	self addMorphBack: r.	r _ AlignmentMorph newRow.	r color: self color; borderWidth: 0; layoutInset: 0.	r hResizing: #spaceFill; vResizing: #rigid; extent: 5@20; wrapCentering: #center; cellPositioning: #leftCenter.	m _ StringMorph new contents: 'Index: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: graph; getSelector: #cursor; putSelector: #cursor:;		growable: false; width: 71; step.	r addMorphBack: m.	m _ StringMorph new contents: 'Value: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: graph; getSelector: #valueAtCursor; putSelector: #valueAtCursor:;		growable: false; width: 50; step.	r addMorphBack: m.	slider _ SimpleSliderMorph new		color: color;		extent: 200@2;		target: self;		actionSelector: #scrollTime:.	r addMorphBack: slider.	m _ Morph new color: r color; extent: 10@5.  "spacer"	r addMorphBack: m.	m _ UpdatingStringMorph new		target: graph; getSelector: #startIndex; putSelector: #startIndex:;		width: 40; step.	r addMorphBack: m.	self addMorphBack: r.! !!WaveEditor methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:25'!addLoopPointControls	| r m |	r _ AlignmentMorph newRow.	r color: self color; borderWidth: 0; layoutInset: 0.	r hResizing: #spaceFill; vResizing: #rigid; extent: 5@20; wrapCentering: #center; cellPositioning: #leftCenter.	m _ StringMorph new contents: 'Loop end: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: self; getSelector: #loopEnd; putSelector: #loopEnd:;		growable: false; width: 50; step.	r addMorphBack: m.	m _ StringMorph new contents: 'Loop length: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: self; getSelector: #loopLength; putSelector: #loopLength:;		floatPrecision: 0.001;		growable: false; width: 50; step.	r addMorphBack: m.	m _ StringMorph new contents: 'Loop cycles: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: self; getSelector: #loopCycles; putSelector: #loopCycles:;		floatPrecision: 0.001;		growable: false; width: 50; step.	r addMorphBack: m.	m _ StringMorph new contents: 'Frequency: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: self; getSelector: #perceivedFrequency; putSelector: #perceivedFrequency:;		floatPrecision: 0.001;		growable: false; width: 50; step.	r addMorphBack: m.	self addMorphBack: r.! !!WaveEditor methodsFor: 'initialization' stamp: 'ar 11/9/2000 21:25'!initialize	super initialize.	samplingRate _ SoundPlayer samplingRate.	loopEnd _ loopLength _ 0.	loopCycles _ 1.	perceivedFrequency _ 0.  "zero means unknown"	self extent: 5@5;		listDirection: #topToBottom;		wrapCentering: #topLeft;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		layoutInset: 3;		color: Color lightGray;		borderWidth: 2.	graph _ GraphMorph new extent: 450@100.	graph cursor: 0.	graph cursorColorAtZeroCrossings: Color blue.	self addControls.	self addLoopPointControls.	self addMorphBack: graph.	self addMorphBack: (Morph newBounds: (0@0 extent: 0@3) color: Color transparent).	self addMorphBack: (keyboard _ PianoKeyboardMorph new).! !!WeekMorph methodsFor: 'all' stamp: 'ar 11/9/2000 20:59'!initializeForWeek: aWeek month: aMonth tileRect: rect model: aModel	super initialize.	tileRect _ rect.	self layoutInset: 0;		color: Color transparent;		listDirection: #leftToRight;		hResizing: #shrinkWrap;		disableDragNDrop;		height: tileRect height.	self week: aWeek month: aMonth model: aModel! !!WeekMorph methodsFor: 'all' stamp: 'ar 11/9/2000 20:59'!title	"Answer a title with the names of the days."	| title extent days |	title _ AlignmentMorph new		layoutInset: 0;		color: Color red;		listDirection: #leftToRight;		vResizing: #shrinkWarp;		height: tileRect height.		extent _ self tile extent.	days _ Week startMonday		ifTrue: [7 to: 1 by: -1]       "Original code, Mon-Sun."		ifFalse: [#(6 5 4 3 2 1 7)].   "Sun-Sat."	(days collect: [:each | Date nameOfDay: each]) do:		[:each |		title addMorph:			((self tileLabeled: (each copyFrom: 1 to: 2))				extent: extent)].	^ title	! !PianoRollScoreMorph removeSelector: #convertAlignment!MenuLineMorph removeSelector: #convertAlignment!MenuItemMorph removeSelector: #convertAlignment!AlignmentMorph removeSelector: #addCustomMenuItems:hand:!AlignmentMorph removeSelector: #centering:!AlignmentMorph removeSelector: #convertAlignment!AlignmentMorph removeSelector: #hResizing:!AlignmentMorph removeSelector: #inset!AlignmentMorph removeSelector: #inset:!AlignmentMorph removeSelector: #minCellSize:!AlignmentMorph removeSelector: #orientation!AlignmentMorph removeSelector: #orientation:!AlignmentMorph removeSelector: #ownerChanged!AlignmentMorph removeSelector: #vResizing:!Morph removeSelector: #convertAlignment!RectangleMorph subclass: #AlignmentMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!