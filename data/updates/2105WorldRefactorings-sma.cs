'From Squeak2.8alpha of 4 February 2000 [latest update: #2052] on 30 April 2000 at 10:21:53 am'!"Change Set:		015WorldRefactorings-smaDate:			30 April 2000Author:			Stefan Matthias AustReducing the number of global references to 'World' from 110 to 67.This refactoring changes all tests to nil into 'Smalltalk isMorphic'."!!DisplayScreen methodsFor: 'other' stamp: 'sma 4/30/2000 09:27'!restoreAfter: aBlock	"Evaluate the block, wait for a mouse click, and then restore the screen."	aBlock value.	Sensor waitButton.	Smalltalk isMorphic		ifTrue: [World fullRepaintNeeded]		ifFalse: [(ScheduledControllers restore; activeController) view emphasize]! !!DisplayScreen class methodsFor: 'display box access' stamp: 'sma 4/30/2000 09:25'!checkForNewScreenSize	Display extent = DisplayScreen actualScreenSize ifTrue: [^ self].	DisplayScreen startUp.	Smalltalk isMorphic		ifTrue: [World restoreDisplay]		ifFalse: [ScheduledControllers restore; searchForActiveController]! !!DisplayText methodsFor: 'private' stamp: 'sma 4/30/2000 09:28'!composeForm	| form1 |	Smalltalk isMorphic		ifTrue:			[form1 _ (TextMorph new contentsAsIs: text) imageFormDepth: 1.			form _ (ColorForm extent: form1 extent)				offset: offset;				colors: (Array					with: (backColor == nil ifTrue: [Color transparent] ifFalse: [backColor])					with: (foreColor == nil ifTrue: [Color black] ifFalse: [foreColor])).			form1 displayOn: form]		ifFalse: [form _ self asParagraph asForm]! !!HTTPSocket class methodsFor: 'get the page' stamp: 'sma 4/30/2000 09:50'!httpShowGif: url	"Display the picture retrieved from the given URL, which is assumed to be a GIF file.	See examples in httpGif:."	self showImage: (self httpGif: url) named: (url findTokens: '/') last! !!HTTPSocket class methodsFor: 'get the page' stamp: 'sma 4/30/2000 09:51'!httpShowJpeg: url	"Display the picture retrieved from the given URL, which is assumed to be a JPEG file.	See examples in httpGif:."	self showImage: (self httpJpeg: url) named: (url findTokens: '/') last! !!HTTPSocket class methodsFor: 'utilities' stamp: 'sma 4/30/2000 09:49'!showImage: image named: imageName	Smalltalk isMorphic		ifTrue: [World addMorph: (SketchMorph withForm: image)]		ifFalse: [FormView open: image named: imageName]! !!Model methodsFor: 'dependents' stamp: 'sma 4/30/2000 09:59'!topView	"Find the first top view on me. Is there any danger of their being two with the same model?  Any danger from ungarbage collected old views?  Ask if schedulled?"	dependents ifNil: [^ nil].	Smalltalk isMorphic ifTrue: [		dependents do:			[:v | ((v isKindOf: SystemWindow) and: [v isInWorld]) ifTrue: [^ v]].		^ nil].	dependents do: [:v | v superView ifNil: [v model == self ifTrue: [^ v]]].	^ nil! !!DualChangeSorter methodsFor: 'as yet unclassified' stamp: 'sma 4/30/2000 09:29'!open	| topView |	Smalltalk isMorphic | Sensor leftShiftDown ifTrue: [^ self openAsMorph].	leftCngSorter _ ChangeSorter new myChangeSet: Smalltalk changes.	leftCngSorter parent: self.	rightCngSorter _ ChangeSorter new myChangeSet: 			ChangeSorter secondaryChangeSet.	rightCngSorter parent: self.	topView _ (StandardSystemView new) model: self; borderWidth: 1.	topView label: leftCngSorter label.	topView minimumSize: 300 @ 200.	leftCngSorter openView: topView offsetBy: 0@0.	rightCngSorter openView: topView offsetBy: 360@0.	topView controller open.! !!Morph methodsFor: 'initialization' stamp: 'sma 4/30/2000 10:01'!openInWorld	"Add this morph to the world.  If in MVC, then provide a Morphic window for it."	Smalltalk isMorphic		ifTrue: [self openInWorld: World]		ifFalse: [self openInMVC]! !!Morph methodsFor: 'debug and other' stamp: 'sma 4/30/2000 10:00'!debuggingMenuFor: aHandMorph	| aMenu aPlayer |	aMenu _ MenuMorph new defaultTarget: self.	(self hasProperty: #errorOnDraw) ifTrue:		[aMenu add: 'start drawing again' action: #resumeAfterDrawError.		aMenu addLine].	(self hasProperty: #errorOnStep) ifTrue:		[aMenu add: 'start stepping again' action: #resumeAfterStepError.		aMenu addLine].	aMenu add: 'control-menu...' target: aHandMorph selector: #invokeMetaMenuFor: argument: self.	aMenu add: 'inspect morph' action: #inspectInMorphic.	Smalltalk isMorphic ifFalse:		[aMenu add: 'inspect morph (in MVC)' action: #inspect].     aMenu add: 'explore morph' target: aHandMorph selector: #exploreArgument.	aMenu add: 'browse morph class' target: aHandMorph selector: #browseMorphClassFor: argument: self.	(aPlayer _ self player) ifNotNil:		[aMenu add: 'inspect player' target: aPlayer action: #inspect.		Smalltalk isMorphic ifFalse: [aMenu add: 'inspect player (morphic)' action: #inspectArgumentsPlayerInMorphic].		aMenu add: 'browse player class' target: aPlayer action: #inspect].	aMenu add: 'make own subclass' target: aHandMorph action: #subclassMorph.	aMenu add: 'internal name ' action: #choosePartName.	aMenu add: 'save morph in file'  action: #saveOnFile.	aMenu addLine.	aMenu add: 'call #tempCommand' target: aHandMorph action: #callTempCommand.	aMenu add: 'define #tempCommand' target: aHandMorph action: #defineTempCommand.	aMenu addLine.	aMenu add: 'edit balloon help' action: #editBalloonHelpText.	^ aMenu! !!ChineseCheckers methodsFor: 'menu' stamp: 'sma 4/30/2000 09:23'!handlesMouseDown: evt	"Prevent stray clicks from picking up the whole game in MVC."	^ Smalltalk isMorphic not or: [evt yellowButtonPressed]! !!FlashPlayerMorph methodsFor: 'accessing' stamp: 'sma 4/30/2000 09:45'!loadedFrames: aNumber 	self isStreaming		ifTrue: 			[activationKeys _ self collectActivationKeys: aNumber.			aNumber = 1				ifTrue: 					[activeMorphs addAll: activationKeys first.					self changed].			progressValue contents: aNumber asFloat / maxFrames.			"Give others a chance"			Smalltalk isMorphic				ifTrue: [World doOneCycle]				ifFalse: [Processor yield]].	loadedFrames _ aNumber! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'sma 4/30/2000 09:45'!playProjectTransitionFrom: oldProject to: newProject entering: aBoolean	"Play the transition from the old to the new project."	Smalltalk isMorphic ifFalse: [^ self]. "Not in MVC"	self stopPlaying.	owner ifNotNil:[		self stopStepping.		owner privateRemoveMorph: self.		owner _ nil].	aBoolean ifTrue:[		self updateProjectFillsFrom: newProject.	] ifFalse:[		self updateProjectFillsFrom: oldProject.		self setProperty: #transitionBackground toValue: newProject imageForm.	].	self frameNumber: 1.	self loopFrames: false.	(self valueOfProperty: #fullScreenTransition ifAbsent:[false])		ifTrue:[self bounds: World bounds].	World addMorphFront: self.	self startStepping.	self startPlaying.	[playing] whileTrue:[World doOneCycleNow].	self stopPlaying.	self stopStepping.	owner privateRemoveMorph: self.	owner _ nil.	self removeProperty: #transitionBackground.	Display deferUpdates: true.	World fullDrawOn: (FormCanvas on: Display).	Display deferUpdates: false.! !!HandMorph methodsFor: 'world menu' stamp: 'sma 4/30/2000 09:55'!loadProject	| stdFileMenuResult fileStream |	"Put up a Menu and let the user choose a '.project' file to load.  Create a thumbnail and jump into the project."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	Smalltalk isMorphic ifFalse: [^ self inform:		'Later, allow jumping from MVC to Morphic Projects.'].	stdFileMenuResult _ ((StandardFileMenu new) pattern: '*.project'; 		oldFileFrom: FileDirectory default ) 			startUpWithCaption: 'Select a File:'.	stdFileMenuResult ifNil: [^ nil].	fileStream _ stdFileMenuResult directory oldFileNamed: stdFileMenuResult name.	ProjectViewMorph openFromFile: fileStream! !!HandMorph methodsFor: 'world menu commands' stamp: 'sma 4/30/2000 09:54'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	menu add: 'delete' action: #dismissMorph.	menu addLine.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	menu add: 'copy Postscript' target: argMorph action: #clipPostscript.	menu add: 'print PS to file...' target: argMorph action: #printPSToFile.	menu addLine.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	"Give the argument control over what should be done about fill styles"	argMorph addFillStyleMenuItems: menu hand: self.	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	Smalltalk isMorphic		ifTrue: [menu add: 'inspect' action: #inspectMorph]		ifFalse:			[menu add: 'inspect (in MVC)' action: #inspectMorph.			menu add: 'inspect' action: #inspectMorphInMorphic].	menu add: 'browse' action: #browseMorphClass.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	(argMorph hasProperty: #resourceFilePath)		ifTrue: [((argMorph valueOfProperty: #resourceFilePath) endsWith: '.morph')				ifTrue: [menu add: 'save as resource' target: argMorph action: #saveAsResource].				menu add: 'update from resource' target: argMorph action: #updateFromResource]		ifFalse: [menu add: 'attach to resource' target: argMorph action: #attachToResource].	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'sma 4/30/2000 09:57'!setDisplayDepth	"Let the user choose a new depth for the display. "	| result oldDepth |	oldDepth _ Display depth.	(result _ (SelectionMenu selections: Display supportedDisplayDepths) startUpWithCaption:'Choose a display depth(it is currently ' , oldDepth printString , ')') ifNotNil: [Display newDepth: result].	(Smalltalk isMorphic and: [(Display depth < 4) ~= (oldDepth < 4)])		ifTrue:			["Repaint windows since they look better all white in depth < 4"			(SystemWindow windowsIn: World satisfying: [:w | true]) do:				[:w |				oldDepth < 4					ifTrue: [w restoreDefaultPaneColor]					ifFalse: [w updatePaneColors]]]! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'sma 4/30/2000 09:57'!displayAt: aPoint during: aBlock	"Add this menu to the Morphic world during the execution of the given block."	Smalltalk isMorphic ifFalse: [^ self].	World addMorph: self centeredNear: aPoint.	World displayWorld.  "show myself"	aBlock value.	self delete! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'sma 4/30/2000 09:58'!informUserAt: aPoint during: aBlock	"Add this menu to the Morphic world during the execution of the given block."	| title |	Smalltalk isMorphic ifFalse: [^ self].	title _ submorphs first submorphs first.	self visible: false.	aBlock value:[:string|		self visible ifFalse:[			World addMorph: self centeredNear: aPoint.			self visible: true].		title contents: string.		self setConstrainedPositionFrom: Sensor cursorPoint.		self changed.		World displayWorld].  "show myself"	self delete.	World displayWorld! !!PopUpMenu methodsFor: 'basic control sequence' stamp: 'sma 4/30/2000 10:04'!startUpCenteredWithCaption: captionOrNil	"Differs from startUpWithCaption: by appearing with cursor in the menu,	and thus ready to act on mouseUp, without requiring user tweak to confirm"	| cursorPoint |	cursorPoint _ Smalltalk isMorphic 			ifTrue: [World cursorPoint]			ifFalse: [Sensor cursorPoint].	^ self startUpWithCaption: captionOrNil at: cursorPoint - (20@0)! !!PopUpMenu methodsFor: 'basic control sequence' stamp: 'sma 4/30/2000 10:05'!startUpWithCaption: captionOrNil	"Display the menu, slightly offset from the cursor,	so that a slight tweak is required to confirm any action."	^ self startUpWithCaption: captionOrNil		at: (Smalltalk isMorphic 			ifTrue: [World cursorPoint]			ifFalse: [Sensor cursorPoint])! !!PopUpMenu methodsFor: 'basic control sequence' stamp: 'sma 4/30/2000 10:07'!startUpWithCaption: captionOrNil at: location	"Display the menu, with caption if supplied. Wait for the mouse button to go down,	then track the selection as long as the button is pressed. When the button is released, 	answer the index of the current selection, or zero if the mouse is not released over 	any menu item. Location specifies the desired topLeft of the menu body rectangle."	| maxHeight |	maxHeight _ Display height*3//4.	self frameHeight > maxHeight ifTrue:		[^ self startUpSegmented: maxHeight withCaption: captionOrNil at: location].	Smalltalk isMorphic		ifTrue:			[selection _ Cursor normal showWhile:				[(MVCMenuMorph from: self title: captionOrNil) invokeAt: location in: World].			^ selection].	frame ifNil: [self computeForm].	Cursor normal showWhile:		[self displayAt: location			withCaption: captionOrNil			during: [ | didNotMove |					didNotMove _ true.					Sensor anyButtonPressed ifFalse:						[didNotMove _ false.						Sensor waitButton].					self manageMarker.					(didNotMove and: [selection = 0]) ifTrue:						[ | downPos |						downPos _ Sensor cursorPoint.						[didNotMove and: [Sensor anyButtonPressed]] whileTrue:							[(downPos dist: Sensor cursorPoint) < 2 ifFalse:								[didNotMove _ false]].						didNotMove ifTrue: [Sensor waitButton]].					[Sensor anyButtonPressed] whileTrue: [self manageMarker]]].	^ selection! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sma 4/30/2000 10:07'!noteThatFlag: prefSymbol justChangedTo: aBoolean	"Provides a hook so that a user's toggling of a preference might precipitate some immediate action"	| keep |	prefSymbol == #useGlobalFlaps ifTrue:		[aBoolean			ifFalse:		"Turning off use of flaps"				[keep _ self confirm:'Do you want to preserve the existingglobal flaps for future use?'.				Utilities globalFlapTabsIfAny do:					[:aFlapTab | Utilities removeFlapTab: aFlapTab keepInList: keep.					aFlapTab isInWorld ifTrue: [self error: 'Flap problem']].				keep ifFalse: [Utilities clobberFlapTabList]]			ifTrue:		"Turning on use of flaps"				[Smalltalk isMorphic ifTrue:					[self currentWorld addGlobalFlaps]]].	prefSymbol == #roundedWindowCorners ifTrue:		[Smalltalk isMorphic ifTrue: [World fullRepaintNeeded]].	prefSymbol == #optionalButtons ifTrue:		[Utilities replacePartSatisfying: [:el |  (el isKindOf: MorphThumbnail) and: [(el morphRepresented isKindOf: SystemWindow) and: [el morphRepresented model isKindOf: FileList]]]inGlobalFlapSatisfying: [:f1 | f1 wording = 'Tools'] with:  FileList openAsMorph applyModelExtent].	(prefSymbol == #optionalButtons  or: [prefSymbol == #annotationPanes]) ifTrue:		[Utilities replaceBrowserInToolsFlap].	(prefSymbol == #smartUpdating) ifTrue:		[SystemWindow allSubInstancesDo:			[:aWindow | aWindow amendSteppingStatus]]! !!Project methodsFor: 'menu messages' stamp: 'sma 4/30/2000 10:10'!enter: returningFlag revert: revertFlag saveForRevert: saveForRevert	"Install my ChangeSet, Transcript, and scheduled views as current globals. If returningFlag is true, we will return to the project from whence the current project was entered; don't change its previousProject link in this case.	If saveForRevert is true, save the ImageSegment of the project being left.	If revertFlag is true, make stubs for the world of the project being left.	If revertWithoutAsking is true in the project being left, then always revert."	| showZoom recorderOrNil old forceRevert response seg |	self == CurrentProject ifTrue: [^ self].	"Check the guards"	guards ifNotNil:		[guards _ guards reject: [:obj | obj isNil].		guards do: [:obj | obj okayToEnterProject ifFalse: [^ self]]].	forceRevert _ false.	CurrentProject rawParameters 		ifNil: [revertFlag ifTrue: [^ self inform: 'nothing to revert to']]		ifNotNil: [saveForRevert ifFalse: [				forceRevert _ CurrentProject projectParameters 								at: #revertWithoutAsking ifAbsent: [false]]].	forceRevert not & revertFlag ifTrue: [		response _ SelectionMenu confirm: 'Are you sure you want to destroy this Project\ and revert to an older version?\\(From the parent project, click on this project''s thumbnail.)' withCRs			trueChoice: 'Revert to saved version' 			falseChoice: 'Cancel'.		response ifFalse: [^ self]].	revertFlag | forceRevert 		ifTrue: [seg _ CurrentProject projectParameters at: #revertToMe ifAbsent: [					^ self inform: 'nothing to revert to']]		ifFalse: [CurrentProject makeThumbnail].	(revertFlag | saveForRevert | forceRevert) ifFalse: [		(Preferences valueOfFlag: #projectsSentToDisk) ifTrue: [			self storeToMakeRoom]].	Smalltalk isMorphic ifTrue: [World triggerClosingScripts].	"Update the display depth and make a thumbnail of the current project"	CurrentProject displayDepth: Display depth.	old _ CurrentProject.		"for later"	"Show the project transition.	Note: The project zoom is run in the context of the old project,		so that eventual errors can be handled accordingly"	displayDepth == nil ifTrue: [displayDepth _ Display depth].	Display newDepthNoRestore: displayDepth.	(showZoom _ self showZoom) ifTrue: [		self displayZoom: CurrentProject parent ~~ self].	(world isMorph and: [world hasProperty: #letTheMusicPlay])		ifTrue: [world removeProperty: #letTheMusicPlay]		ifFalse: [Smalltalk at: #ScorePlayer ifPresent: [:playerClass | 					playerClass allSubInstancesDo: [:player | player pause]]].	returningFlag		ifTrue: [nextProject _ CurrentProject]		ifFalse: [previousProject _ CurrentProject].	CurrentProject saveState.	CurrentProject isolationHead == self isolationHead ifFalse:		[self invokeFrom: CurrentProject].	CurrentProject _ self.	Smalltalk newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Sensor flushKeyboard.	Smalltalk isMorphic ifTrue: [recorderOrNil _ World pauseEventRecorder].	world isMorph		ifTrue:			[World _ world.  "Signifies Morphic"			world install.			"(revertFlag | saveForRevert | forceRevert) ifFalse: [				(Preferences valueOfFlag: #projectsSentToDisk) ifTrue: [					self storeSomeSegment]]."			recorderOrNil ifNotNil: [recorderOrNil resumeIn: World].			world triggerOpeningScripts]		ifFalse:			[World _ nil.  "Signifies MVC"			Smalltalk at: #ScheduledControllers put: world].	saveForRevert ifTrue: [		Smalltalk garbageCollect.	"let go of pointers"		old storeSegment.		"result _" old world isInMemory 			ifTrue: ['Can''t seem to write the project.']			ifFalse: [old projectParameters at: #revertToMe put: 					old world xxxSegment clone].				'Project written.'].			"original is for coming back in and continuing."	revertFlag | forceRevert ifTrue: [		seg clone revert].	"non-cloned one is for reverting again later"	self removeParameter: #exportState.	"Complete the enter: by launching a new process"	world isMorph		ifTrue:			[self spawnNewProcessAndTerminateOld: true]		ifFalse:			[showZoom ifFalse: [ScheduledControllers restore].			ScheduledControllers searchForActiveController]! !!Project methodsFor: 'menu messages' stamp: 'sma 4/30/2000 10:10'!enterForEmergencyRecovery	"This version of enter invokes an absolute minimum of mechanism.	An unrecoverable error has been detected in an isolated project.	It is assumed that the old changeSet has already been revoked.	No new process gets spawned here.  This will happen in the debugger."	self == CurrentProject ifTrue: [^ self].	CurrentProject saveState.	CurrentProject _ self.	Display newDepthNoRestore: displayDepth.	Smalltalk newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Smalltalk isMorphic ifTrue: [World pauseEventRecorder].	world isMorph		ifTrue:			["Entering a Morphic project"			World _ world.			world install.			world triggerOpeningScripts]		ifFalse:			["Entering an MVC project"			World _ nil.			Smalltalk at: #ScheduledControllers put: world.			ScheduledControllers restore].	activeProcess _ Processor activeProcess.! !!Project methodsFor: 'menu messages' stamp: 'sma 4/30/2000 10:11'!saveState	"Save the current state in me prior to leaving this project"	changeSet _ Smalltalk changes.	Smalltalk isMorphic		ifTrue:			[world _ World.			world sleep]		ifFalse:			[world _ ScheduledControllers.			ScheduledControllers unCacheWindows].	transcript _ Transcript.	activeProcess _ nil! !!Project class methodsFor: 'utilities' stamp: 'sma 4/30/2000 10:08'!thumbnailFromUrl: urlString	| preStream |	"Load the project, and make a thumbnail to it in the current project.Project thumbnailFromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/SqueakEasy.extSeg'."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	Smalltalk isMorphic ifFalse: [^ self inform: 			'Later, allow jumping from MVC to Morphic Projects.'].	preStream _ (ServerFile new fullPath: urlString) asStream.	ProjectViewMorph openFromFile: preStream! !!Project class methodsFor: 'squeaklet on server' stamp: 'sma 4/30/2000 10:08'!fromUrl: urlString	| serverFile pair pvm nn proj projViewer strm num triple |	"Load the project, and make a thumbnail to it in the current project.  Replace the old one if necessary.Project fromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/Squeak_Easy.pr.gz'."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	Smalltalk isMorphic ifFalse: [^ self inform: 			'Later, allow jumping from MVC to Morphic Projects.'].	serverFile _ ServerFile new fullPath: urlString.	(proj _ Project named: (nn _ (serverFile fileName findTokens: '|.') first))		ifNotNil: ["it appeared" ^ proj enter].	serverFile type == #http		ifTrue: [num _ (triple _ serverFile fileName findTokens: '|.') size >= 3 				ifTrue: [Base64MimeConverter decodeInteger: triple second unescapePercents]				ifFalse: [0].			pair _ Array with: serverFile fileName with: num]		ifFalse: [pair _ self mostRecent: serverFile localName onServer: serverFile].	pair first ifNil: ["If none, open a blank project"		pvm _ ProjectViewMorph newMorphicProjectOn: nil.		pvm _ pvm findA: ProjectViewMorph.		(proj _ pvm project) changeSet name: nn.		projViewer _ Project current findProjectView: nn.		proj setParent: Project current.		(projViewer owner isKindOf: SystemWindow) ifTrue: [				projViewer owner model: proj].		^ projViewer project: proj].	"Find parent project, go there, zap old thumbnail"	strm _ serverFile oldFileNamed: pair first encodeForHTTP.	Project current installRemoteFrom: strm named: nn! !!Scamper methodsFor: 'menus' stamp: 'sma 4/30/2000 10:12'!editStartPage	| win textMorph |	Smalltalk isMorphic ifFalse: [^ self inform: 'only works for morphic currently'].	win _ SystemWindow labelled: 'edit Bookmark page'.	textMorph _ PluggableTextMorph on: self text: #startPage  accept: #startPage:.	win addMorph: textMorph frame: (0@0 extent: 1@1).	win openInWorld.	^ true! !!ScreenController methodsFor: 'menu messages' stamp: 'sma 4/30/2000 10:13'!restoreDisplay 	"Clear the screen to gray and then redisplay all the scheduled views."	Smalltalk isMorphic ifTrue: [^ World restoreDisplay].	Display extent = DisplayScreen actualScreenSize		ifFalse:			[DisplayScreen startUp.			ScheduledControllers unCacheWindows].	ScheduledControllers restore! !!StandardFileMenu class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 10:14'!newFileMenu: aDirectory	Smalltalk isMorphic ifFalse: [^ PluggableFileList newFileMenu: aDirectory].	^ super new newFileFrom: aDirectory! !!StandardFileMenu class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 10:15'!oldFileMenu: aDirectory	Smalltalk isMorphic ifFalse: [^ PluggableFileList oldFileMenu: aDirectory].	^ super new oldFileFrom: aDirectory! !!StringHolder methodsFor: 'initialize-release' stamp: 'sma 4/30/2000 10:15'!openLabel: aString andTerminate: terminateBoolean	"Create a standard system view of the model, me, a StringHolder and open it.; do not terminate the active process if in mvc"	| topView codeView |	Smalltalk isMorphic ifTrue: [^ self openAsMorphLabel: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.	topView label: aString.	topView minimumSize: 100 @ 50.	codeView _ PluggableTextView on: self 			text: #contents accept: #acceptContents:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	codeView window: (0@0 extent: 200@200).	topView addSubView: codeView.	"self contents size > 0 ifTrue: [			codeView hasUnacceptedEdits: true].  Is it already saved or not??"	terminateBoolean		ifTrue:			[topView controller open]		ifFalse:			[topView controller openNoTerminate]! !!ApplescriptError class methodsFor: 'as yet unclassified' stamp: 'sma 4/30/2000 09:19'!open: aSyntaxError	"Answer a standard system view whose model is an instance of me."	| topView |	<primitive: 19> "Simulation guard"	Smalltalk isMorphic		ifTrue:			[self buildMorphicViewOn: aSyntaxError.			Project current spawnNewProcessIfThisIsUI: Processor activeProcess.			^ Processor activeProcess suspend].	topView _ self buildMVCViewOn: aSyntaxError.	topView controller openNoTerminateDisplayAt: Display extent // 2.	Cursor normal show.	Processor activeProcess suspend! !!Browser methodsFor: 'initialize-release' stamp: 'sma 4/30/2000 09:20'!openEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	| systemCategoryListView classListView 	messageCategoryListView messageListView browserCodeView topView switchView underPane y optionalButtonsView annotationPane |	Smalltalk isMorphic ifTrue: [^ self openAsMorphEditing: aString].	"Sensor leftShiftDown ifTrue: [^ self openAsMorphEditing: aString].		uncomment-out for testing morphic browser embedded in mvc project"	topView _ StandardSystemView new model: self.	topView borderWidth: 1. "label and minSize taken care of by caller"	systemCategoryListView _ PluggableListView on: self		list: #systemCategoryList		selected: #systemCategoryListIndex		changeSelected: #systemCategoryListIndex:		menu: #systemCategoryMenu:		keystroke: #systemCatListKey:from:.	systemCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: systemCategoryListView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 50 @ 62).	topView addSubView: classListView toRightOf: systemCategoryListView.	switchView _ self buildInstanceClassSwitchView.	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView window: (0 @ 0 extent: 50 @ 70).	messageListView menuTitleSelector: #messageListSelectorTitle.	topView addSubView: messageListView toRightOf: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: systemCategoryListView.			underPane _ annotationPane.			y _ 110 - self optionalAnnotationHeight]		ifFalse: [			underPane _ systemCategoryListView.			y _ 110].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sma 4/30/2000 09:20'!openMessageCatEditString: aString	"Create a pluggable version of the views for a Browser that just shows one message category."	| messageCategoryListView messageListView browserCodeView topView annotationPane underPane y optionalButtonsView |	Smalltalk isMorphic ifTrue: [^ self openAsMorphMsgCatEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	messageCategoryListView _ PluggableListView on: self		list: #messageCatListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: messageCategoryListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 200 @ 70).	topView addSubView: messageListView below: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageListView.			underPane _ annotationPane.			y _ (200 - 12 - 70) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageListView.			y _ (200 - 12 - 70)].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(messageCatListSingleton messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sma 4/30/2000 09:21'!openMessageEditString: aString	"Create a pluggable version of the views for a Browser that just shows one message."	| messageListView browserCodeView topView annotationPane underPane y |	Smalltalk isMorphic ifTrue: [^ self openAsMorphMessageEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	messageListView _ PluggableListView on: self		list: #messageListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #messageListMenu:shifted:.	messageListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: messageListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageListView.			underPane _ annotationPane.			y _ (200 - 12) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageListView.			y _ 200 - 12].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sma 4/30/2000 09:21'!openOnClassWithEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	| classListView messageCategoryListView messageListView browserCodeView topView switchView annotationPane underPane y optionalButtonsView |	Smalltalk isMorphic ifTrue: [^ self openAsMorphClassEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	classListView _ PluggableListView on: self		list: #classListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #classListMenu:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 100 @ 12).	topView addSubView: classListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 100 @ 70).	topView addSubView: messageCategoryListView below: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 100 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	switchView _ self buildInstanceClassSwitchView.	switchView borderWidth: 1.	switchView 		window: switchView window 		viewport: (classListView viewport topRight 					corner: messageListView viewport topRight).	topView addSubView: switchView toRightOf: classListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageCategoryListView.			underPane _ annotationPane.			y _ (200-12-70) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageCategoryListView.			y _ (200-12-70)].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(messageCategoryList messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sma 4/30/2000 09:21'!openSystemCatEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers.  The top list view is of the currently selected system class category--a single item list."	| systemCategoryListView classListView messageCategoryListView messageListView browserCodeView topView switchView y annotationPane underPane optionalButtonsView |	Smalltalk isMorphic ifTrue: [^ self openAsMorphSysCatEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	systemCategoryListView _ PluggableListView on: self		list: #systemCategorySingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #systemCatSingletonMenu:		keystroke: #systemCatSingletonKey:from:.	systemCategoryListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: systemCategoryListView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 67 @ 62).	topView addSubView: classListView below: systemCategoryListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 66 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	switchView _ self buildInstanceClassSwitchView.	switchView 		window: switchView window 		viewport: (classListView viewport bottomLeft 					corner: messageCategoryListView viewport bottomLeft).	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 67 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue: [			annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: switchView.			y _ 110 - 12 - self optionalAnnotationHeight.			underPane _ annotationPane]		ifFalse: [			y _ 110 - 12.			underPane _ switchView].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(classList messageCategoryList messageList).	^ topView! !!ChangeList class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 09:21'!open: aChangeList name: aString multiSelect: multiSelect	"Create a standard system view for the messageSet, whose label is aString.	The listView may be either single or multiple selection type"	| topView aBrowserCodeView aListView underPane pHeight |	Smalltalk isMorphic ifTrue: [^ self openAsMorph: aChangeList name: aString multiSelect: multiSelect].	topView _ (StandardSystemView new) model: aChangeList.	topView label: aString.	topView minimumSize: 180 @ 120.	topView borderWidth: 1.	Preferences optionalButtons		ifTrue:			[underPane _ aChangeList optionalButtonsView.			underPane isNil				ifTrue: [pHeight _ 100]				ifFalse:					[topView addSubView: underPane.					pHeight _ 100 - aChangeList optionalButtonHeight]]		ifFalse:			[underPane _ nil.			pHeight _ 100].	aListView _ (multiSelect					ifTrue: [PluggableListViewOfMany]					ifFalse: [PluggableListView])		on: aChangeList list: #list		selected: #listIndex changeSelected: #toggleListIndex:		menu: (aChangeList showsVersions ifTrue: [#versionsMenu:] ifFalse: [#changeListMenu:])		keystroke: #messageListKey:from:.	aListView window: (0 @ 0 extent: 180 @ pHeight).	underPane isNil		ifTrue: [topView addSubView: aListView]		ifFalse: [topView addSubView: aListView below: underPane].	aBrowserCodeView _ PluggableTextView on: aChangeList 			text: #contents accept: #contents:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	aBrowserCodeView controller: ReadOnlyTextController new.	aBrowserCodeView window: (0 @ 0 extent: 180 @ 300).	topView addSubView: aBrowserCodeView below: aListView.	topView controller open! !!ChangeSorter methodsFor: 'creation' stamp: 'sma 4/30/2000 09:29'!open	"ChangeSorterPluggable new open"	| topView |	Smalltalk isMorphic | Sensor leftShiftDown ifTrue: [^ self openAsMorph].	topView _ StandardSystemView new.	topView model: self.	myChangeSet ifNil: [self myChangeSet: Smalltalk changes]. 	topView label: self labelString.	topView borderWidth: 1; minimumSize: 360@360.	self openView: topView offsetBy: 0@0.	topView controller open.! !!Debugger methodsFor: 'initialize' stamp: 'sma 4/30/2000 09:24'!openNotifierContents: msgString label: label	"Create and schedule a notifier view with the given label and message. A notifier view shows just the message or the first several lines of the stack, with a menu that allows the user to open a full debugger if so desired."	"NOTE: When this method returns, a new process has been scheduled to run the windows, and thus this notifier, but the previous active porcess has not been suspended.  The sender will do this."	| msg topView p |	Sensor flushKeyboard.	savedCursor _ Sensor currentCursor.	Sensor currentCursor: Cursor normal.	msg _ msgString.	(label beginsWith: 'Space is low') ifTrue: [msg _ self lowSpaceChoices, msgString].	isolationHead ifNotNil:		["We have already revoked the isolation layer -- now jump to the parent project."		msg _ self isolationRecoveryAdvice, msgString.		failedProject _ Project current.		isolationHead parent enterForEmergencyRecovery].	Smalltalk isMorphic		ifTrue:			[self buildMorphicNotifierLabelled: label message: msg.			^ Project current spawnNewProcessIfThisIsUI: interruptedProcess].	Display fullScreen.	topView _ self buildMVCNotifierViewLabel: label message: msg minSize: 350@((14 * 5) + 16 + self optionalButtonHeight).	ScheduledControllers activeController		ifNil: [p _ Display boundingBox center]		ifNotNil: [p _ ScheduledControllers activeController view displayBox center].	topView controller openNoTerminateDisplayAt: (p max: (200@60)).	^ topView! !!Debugger methodsFor: 'notifier menu' stamp: 'sma 4/30/2000 09:24'!debug	"Open a full DebuggerView."	| topView |	topView _ self topView.	topView model: nil.  "so close won't release me."	Smalltalk isMorphic		ifTrue:			[self breakDependents.			self openFullMorphicLabel: topView label.			^ topView delete].	topView controller controlTerminate.	topView deEmphasizeView; erase.	self openFullNoSuspendLabel: topView label.	topView controller closeAndUnscheduleNoErase.	Processor terminateActive.! !!FileList methodsFor: 'file list menu' stamp: 'sma 4/30/2000 09:33'!openAsBackground	"Set an image as a background image.  Support Squeak's common file format 	(GIF, JPG, PNG, 'Form stoteOn: (run coded)' and BMP)"	| image |	image _ Form fromFileNamed: self fullName.	Smalltalk isMorphic 		ifTrue: [self currentWorld color: (InfiniteForm with: image)]		ifFalse:			[ScheduledControllers screenController model form: image.			Display restoreAfter: []]! !!FileList methodsFor: 'file list menu' stamp: 'sma 4/30/2000 09:41'!openBookFromFile	"Reconstitute a Morph from the selected file, presumed to be represent	a Morph saved via the SmartRefStream mechanism, and open it in an	appropriate Morphic world"	| book aFileStream |	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	aFileStream _ directory oldFileNamed: self fullName.	book _ BookMorph new.	book setProperty: #url toValue: aFileStream url.	book fromRemoteStream: aFileStream.	aFileStream close.	Smalltalk isMorphic 		ifTrue: [World addMorphsAndModel: book]		ifFalse:			[book isMorph ifFalse: [^ self errorMustBeMorph].			book openInWorld].	book goToPage: 1! !!FileList methodsFor: 'file list menu' stamp: 'sma 4/30/2000 09:38'!openImageInWindow	"Handle five file formats: GIF, JPG, PNG, Form stoteOn: (run coded), and BMP.	Fail if file format is not recognized."	| image |	image _ Form fromFileNamed: self fullName.	Smalltalk isMorphic		ifTrue: [World addMorph: (SketchMorph withForm: image)]		ifFalse: [FormView open: image named: fileName]! !!FileList methodsFor: 'file list menu' stamp: 'sma 4/30/2000 09:41'!openMorphFromFile	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved	via the SmartRefStream mechanism, and open it in an appropriate Morphic world" 	| aFileStream morphOrList |	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	aFileStream _ directory oldFileNamed: self fullName.	morphOrList _ aFileStream fileInObjectAndCode.	(morphOrList isKindOf: SqueakPage) ifTrue: [morphOrList _ morphOrList contentsMorph].	Smalltalk isMorphic		ifTrue: [World addMorphsAndModel: morphOrList]		ifFalse:			[morphOrList isMorph ifFalse: [^ self errorMustBeMorph].			morphOrList openInWorld]! !!FileList methodsFor: 'private' stamp: 'sma 4/30/2000 09:41'!errorMustBeMorph	self inform: 'Can only load a single morphinto an mvc project via this mechanism.'! !!FileList class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 09:30'!open	"Open a view of an instance of me on the default directory."	"FileList open"	| dir aFileList topView volListView templateView fileListView fileContentsView underPane pHeight |	Smalltalk isMorphic ifTrue: [^ self openAsMorph].	dir _ FileDirectory default.	aFileList _ self new directory: dir.	topView _ StandardSystemView new.	topView		model: aFileList;		label: dir pathName;		minimumSize: 200@200.	topView borderWidth: 1.	volListView _ PluggableListView on: aFileList		list: #volumeList		selected: #volumeListIndex		changeSelected: #volumeListIndex:		menu: #volumeMenu:.	volListView autoDeselect: false.	volListView window: (0@0 extent: 80@45).	topView addSubView: volListView.	templateView _ PluggableTextView on: aFileList		text: #pattern		accept: #pattern:.	templateView askBeforeDiscardingEdits: false.	templateView window: (0@0 extent: 80@15).	topView addSubView: templateView below: volListView.	Preferences optionalButtons		ifTrue: [			underPane _ aFileList optionalButtonView.			underPane isNil				ifTrue: [pHeight _ 60]				ifFalse: [					topView addSubView: underPane toRightOf: volListView.					pHeight _ 60 - aFileList optionalButtonHeight]]		ifFalse: [			underPane _ nil.			pHeight _ 60].	fileListView _ PluggableListView on: aFileList		list: #fileList		selected: #fileListIndex		changeSelected: #fileListIndex:		menu: #fileListMenu:.	fileListView window: (0@0 extent: 120@pHeight).	underPane isNil		ifTrue: [topView addSubView: fileListView toRightOf: volListView]		ifFalse: [topView addSubView: fileListView below: underPane].	fileListView controller terminateDuringSelect: true.  "Pane to left may change under scrollbar"	fileContentsView _ PluggableTextView on: aFileList		text: #contents accept: #put:		readSelection: #contentsSelection menu: #fileContentsMenu:shifted:.	fileContentsView window: (0@0 extent: 200@140).	topView addSubView: fileContentsView below: templateView.	topView controller open.! !!FileList class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 09:31'!openEditorOn: aFileStream editString: editString	"Open an editor on the given FileStream."	| fileModel topView fileContentsView |	Smalltalk isMorphic ifTrue: [^ (self openMorphOn: aFileStream editString: editString) openInWorld].	fileModel _ FileList new setFileStream: aFileStream.	"closes the stream"	topView _ StandardSystemView new.	topView		model: fileModel;		label: aFileStream fullName;		minimumSize: 180@120.	topView borderWidth: 1.	fileContentsView _ PluggableTextView on: fileModel 		text: #contents accept: #put:		readSelection: #contentsSelection menu: #fileContentsMenu:shifted:.	fileContentsView window: (0@0 extent: 180@120).	topView addSubView: fileContentsView.	editString ifNotNil: [fileContentsView editString: editString.			fileContentsView hasUnacceptedEdits: true].	topView controller open.! !!FillInTheBlank class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 09:43'!multiLineRequest: queryString centerAt: aPoint initialAnswer: defaultAnswer answerHeight: answerHeight	"Create a multi-line instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts.  Answer nil if the user cancels.  An empty string returned means that the ussr cleared the editing area and then hit 'accept'.  Because multiple lines are invited, we ask that the user use the ENTER key, or (in morphic anyway) hit the 'accept' button, to submit; that way, the return key can be typed to move to the next line."	"FillInTheBlank		multiLineRequest:'Enter several lines; end input by acceptingor canceling or typing the enter key'		centerAt: Display boundingBox center		initialAnswer: 'bozo!!'		answerHeight: 100"	| model fillInView savedArea |	Smalltalk isMorphic		ifTrue:			[^ FillInTheBlankMorph				request: queryString				initialAnswer: defaultAnswer				centerAt: aPoint				inWorld: self currentWorld				onCancelReturn: nil				acceptOnCR: false].	model _ self new initialize.	model contents: defaultAnswer.	model responseUponCancel: nil.	model acceptOnCR: false.	fillInView _		(Smalltalk at: #FillInTheBlankView)			multiLineOn: model			message: queryString			centerAt: aPoint			answerHeight: answerHeight.	savedArea _ Form fromDisplay: fillInView displayBox.	fillInView display.	defaultAnswer isEmpty		ifFalse: [fillInView lastSubView controller selectFrom: 1 to: defaultAnswer size].	(fillInView lastSubView containsPoint: Sensor cursorPoint)		ifFalse: [fillInView lastSubView controller centerCursorInView].	fillInView controller startUp.	fillInView release.	savedArea displayOn: Display at: fillInView viewport topLeft.	^ model contents! !!FillInTheBlank class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 09:43'!request: queryString initialAnswer: defaultAnswer centerAt: aPoint	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts. Answer the empty string if the user cancels."	"FillInTheBlank request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: Display center"	| model fillInView savedArea |	Smalltalk isMorphic		ifTrue:			[^ FillInTheBlankMorph				request: queryString				initialAnswer: defaultAnswer				centerAt: aPoint].	model _ self new initialize.	model contents: defaultAnswer.	fillInView _		FillInTheBlankView			on: model			message: queryString			centerAt: aPoint.	savedArea _ Form fromDisplay: fillInView displayBox.	fillInView display.	defaultAnswer isEmpty		ifFalse: [fillInView lastSubView controller selectFrom: 1 to: defaultAnswer size].	(fillInView lastSubView containsPoint: Sensor cursorPoint)		ifFalse: [fillInView lastSubView controller centerCursorInView].	fillInView controller startUp.	fillInView release.	savedArea displayOn: Display at: fillInView viewport topLeft.	^ model contents! !!MessageSet class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 09:58'!open: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	| topView aListView aBrowserCodeView aTextView underPane y buttonsView winWidth |	Smalltalk isMorphic ifTrue: [^ self openAsMorph: aMessageSet name: aString].	winWidth _ 200.	topView _ (StandardSystemView new) model: aMessageSet.	topView label: aString.	topView minimumSize: winWidth @ 120.	topView borderWidth: 1.	aListView _ PluggableListView on: aMessageSet		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	aListView  menuTitleSelector: #messageListSelectorTitle.	aListView window: (0 @ 0 extent: winWidth @ 100).	topView addSubView: aListView.	Preferences useAnnotationPanes		ifTrue: [			aTextView _ PluggableTextView on: aMessageSet 			text: #annotation accept: nil			readSelection: nil menu: nil.			aTextView window: (0 @ 0 extent: winWidth @ 24).			topView addSubView: aTextView below: aListView.			underPane _ aTextView.			y _ 300 - 24.			aTextView askBeforeDiscardingEdits: false]		ifFalse: [			underPane _ aListView.			y _ 300].	Preferences optionalButtons ifTrue: [		buttonsView _ aMessageSet buildOptionalButtonsView.		topView addSubView: buttonsView below: underPane.		underPane _ buttonsView.		y _ y - aMessageSet optionalButtonHeight].	aBrowserCodeView _ PluggableTextView on: aMessageSet 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	aBrowserCodeView window: (0 @ 0 extent: winWidth @ y).	topView addSubView: aBrowserCodeView below: underPane.	topView setUpdatablePanesFrom: #(messageList).	topView controller open! !!MessageSet class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 09:59'!openMessageList: messageList name: labelString autoSelect: autoSelectString	"Open a system view for a MessageSet on messageList. 	 1/24/96 sw: the there-are-no msg now supplied by my sender"	| messageSet |	messageSet _ self messageList: messageList.	messageSet autoSelectString: autoSelectString.	Smalltalk isMorphic ifTrue: [^ self openAsMorph: messageSet name: labelString].	ScheduledControllers scheduleActive: (self open: messageSet name: labelString)! !!ChangedMessageSet class methodsFor: 'as yet unclassified' stamp: 'sma 4/30/2000 09:22'!openMessageList: messageList name: labelString autoSelect: autoSelectString changeSet: aChangeSet	| messageSet |	messageSet _ self messageList: messageList.	messageSet changeSet: aChangeSet.	messageSet autoSelectString: autoSelectString.	Smalltalk isMorphic		ifTrue: [self openAsMorph: messageSet name: labelString]		ifFalse: [ScheduledControllers scheduleActive:  (self open: messageSet name: labelString)]! !!PackageBrowser methodsFor: 'package list' stamp: 'sma 4/30/2000 10:01'!openEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	"PackageBrowser openBrowser"	| packageListView systemCategoryListView classListView messageCategoryListView	  messageListView browserCodeView topView switchView annotationPane underPane y optionalButtonsView |	Smalltalk isMorphic ifTrue: [^ self openAsMorphEditing: aString].	topView := (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	packageListView := PluggableListView on: self		list: #packageList		selected: #packageListIndex		changeSelected: #packageListIndex:		menu: #packageMenu:.	packageListView window: (0 @ 0 extent: 20 @ 70).	topView addSubView: packageListView.	systemCategoryListView := PluggableListView on: self		list: #systemCategoryList		selected: #systemCategoryListIndex		changeSelected: #systemCategoryListIndex:		menu: #systemCategoryMenu:.	systemCategoryListView window: (20 @ 0 extent: 30 @ 70).	topView addSubView: systemCategoryListView.	classListView := PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:.	classListView window: (0 @ 0 extent: 50 @ 62).	topView addSubView: classListView toRightOf: systemCategoryListView.	switchView := self buildInstanceClassSwitchView.	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageCategoryListView := PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	messageListView := PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: packageListView.			underPane _ annotationPane.			y _ 110 - self optionalAnnotationHeight]		ifFalse: [			underPane _ packageListView.			y _ 110].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView := PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	^ topView! !!PluggableFileList methodsFor: 'StandardFileMenu' stamp: 'sma 4/30/2000 10:05'!startUpWithCaption: captionOrNil	"Display the menu, slightly offset from the cursor,	so that a slight tweak is required to confirm any action."	^ self startUpWithCaption: captionOrNil		at: (Smalltalk isMorphic 			ifTrue: [World cursorPoint]			ifFalse: [Sensor cursorPoint])! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'sma 4/30/2000 10:14'!open	"Create a Browser that lets you type part of a selector, shows a list of selectors,	shows the classes of the one you chose, and spwns a full browser on it.		SelectorBrowser new open	"	| selectorListView typeInView topView classListView exampleView |	Smalltalk isMorphic ifTrue: [^ self openAsMorph].	selectorIndex _ classListIndex _ 0.	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	typeInView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	typeInView window: (0@0 extent: 50@14);		askBeforeDiscardingEdits: false.	topView addSubView: typeInView.	selectorListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #selectorMenu:		keystroke: #messageListKey:from:.	selectorListView menuTitleSelector: #selectorMenuTitle.	selectorListView window: (0 @ 0 extent: 50 @ 46).	topView addSubView: selectorListView below: typeInView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: nil	"never anything selected"		keystroke: #arrowKey:from:.	classListView menuTitleSelector: #classListSelectorTitle.	classListView window: (0 @ 0 extent: 50 @ 60).	topView addSubView: classListView toRightOf: typeInView.	exampleView _ PluggableTextView on: self 			text: #byExample accept: #byExample:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	exampleView window: (0@0 extent: 100@40);		askBeforeDiscardingEdits: false.	topView addSubView: exampleView below: selectorListView.	topView label: 'Method Finder'.	topView minimumSize: 350@250; maximumSize: 350@250.	topView subViews do: [:each | each controller].	topView controller open.! !!StringHolderView class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 10:15'!open: aStringHolder label: labelString 	"NOTE this should be in the model class, and all senders so redirected,	in order that the view class can be discarded in a morphic world."	"Create a standard system view of the model, aStringHolder, as viewed by 	an instance of me. The label of the view is aString."	| aStringHolderView topView |	Smalltalk isMorphic ifTrue: [^ aStringHolder openAsMorphLabel: labelString].	aStringHolderView _ self container: aStringHolder.	topView _ StandardSystemView new.	topView model: aStringHolderView model.	topView addSubView: aStringHolderView.	topView label: labelString.	topView minimumSize: 100 @ 50.	topView controller open! !!SyntaxError class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 10:15'!open: aSyntaxError	"Answer a standard system view whose model is an instance of me."	| topView |	<primitive: 19> "Simulation guard"	Smalltalk isMorphic		ifTrue:			[self buildMorphicViewOn: aSyntaxError.			Project current spawnNewProcessIfThisIsUI: Processor activeProcess.			^ Processor activeProcess suspend].	topView _ self buildMVCViewOn: aSyntaxError.	topView controller openNoTerminateDisplayAt: Display extent // 2.	Cursor normal show.	Processor activeProcess suspend.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sma 4/30/2000 09:17'!isMorphic	"Answer true if the user interface is running in Morphic rathern than 	MVC.  By convention the gloabl variable World is set to nil when MVC is 	running.  ScheduledControllers could be set to nil when Morphic is 	running, but this symmetry is not yet in effect."	^ World ~~ nil! !!TTSampleFontMorph methodsFor: 'initialize' stamp: 'sma 4/30/2000 10:16'!openInWorld	Smalltalk isMorphic ifFalse: [^ self openInMVC].	World primaryHand attachMorph: self! !!TranscriptStream methodsFor: 'initialization' stamp: 'sma 4/30/2000 10:16'!openLabel: aString 	"Open a window on this transcriptStream"	| topView codeView |	Smalltalk isMorphic ifTrue: [^ (self openAsMorphLabel: aString) openInWorld].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.	topView label: aString.	topView minimumSize: 100 @ 50.	codeView _ PluggableTextView on: self text: nil accept: nil					readSelection: nil menu: #codePaneMenu:shifted:.	codeView window: (0@0 extent: 200@200).	topView addSubView: codeView.	topView controller open! !!Utilities class methodsFor: 'user interface' stamp: 'sma 4/30/2000 10:17'!informUser: aString during: aBlock	"Display a message above (or below if insufficient room) the cursor during execution of the given block."	"Utilities informUser: 'Just a sec!!' during: [(Delay forSeconds: 1) wait]"	Smalltalk isMorphic		ifTrue:			[(MVCMenuMorph from: (SelectionMenu labels: '') title: aString)				displayAt: Sensor cursorPoint during: [aBlock value].			^ self].	(SelectionMenu labels: '')		displayAt: Sensor cursorPoint		withCaption: aString		during: [aBlock value]! !!Utilities class methodsFor: 'user interface' stamp: 'sma 4/30/2000 10:18'!informUserDuring: aBlock	"Display a message above (or below if insufficient room) the cursor during execution of the given block."	"Utilities informUserDuring:[:bar|		#(one two three) do:[:info|			bar value: info.			(Delay forSeconds: 1) wait]]"	Smalltalk isMorphic		ifTrue:			[(MVCMenuMorph from: (SelectionMenu labels: '') title: '						')				informUserAt: Sensor cursorPoint during: aBlock.			^ self].	aBlock value:[:string| Transcript cr; show: string]! !!Utilities class methodsFor: 'miscellaneous' stamp: 'sma 4/30/2000 10:17'!emergencyCollapse	Smalltalk isMorphic ifTrue: [^ self].	ScheduledControllers screenController emergencyCollapse! !!Utilities class methodsFor: 'flaps' stamp: 'sma 4/30/2000 10:18'!replaceMenuFlap	"if there is a global menu flap, replace it with an updated one."	| aFlapTab |	aFlapTab _ self globalFlapTabsIfAny detect:		[:aTab | (aTab submorphs size > 0) and:  [(aTab submorphs first isKindOf: TextMorph) and: [(aTab submorphs first contents string copyWithout: $ ) = 'Menus']]] ifNone: [^ self].	self removeFlapTab: aFlapTab keepInList: false.	self addGlobalFlap: self menuFlap.	Smalltalk isMorphic ifTrue: [World addGlobalFlaps]"Utilities replaceMenuFlap"! !!WonderlandCameraMorph methodsFor: 'drag and drop' stamp: 'sma 4/30/2000 10:19'!acceptDroppingMorph: aMorph event: evt	"This message is sent when a morph is dropped onto a morph that has agreed to accept the dropped morph by responding 'true' to the wantsDroppedMorph:Event: message. This default implementation just adds the given morph to the receiver."	| actor |	actor _ myCamera pickAt: evt cursorPoint.	actor == nil ifTrue:[^self addMorphFront: aMorph]. "This should never happen."	myWonderland getUndoStack push: (UndoTextureChange for: actor from: actor getTexturePointer).	aMorph installAsWonderlandTextureOn: actor.	self world abandonAllHalos.	"AAAARRRRGGGGGHHHH!!!!!!!!"	aMorph owner ifNotNil:[aMorph owner privateRemoveMorph: aMorph].	aMorph privateOwner: self.	"Note: The above makes aMorph invisible to stupid HandMorph but keeps it in the world so it can continue stepping"	actor adjustToTextureIfNecessary.! !!WonderlandCameraMorph methodsFor: 'pooh' stamp: 'sma 4/30/2000 10:19'!paintMode	| temp clickedActor |	self mode: #paint.	temp _ myCamera pickObjectAndVertexAt: Sensor cursorPoint.	clickedActor _ temp key.	backup _ clickedActor getTexturePointer deepCopy.	palette _ self world paintBox.	palette position: self position + (self extent x @ 0); focusMorph: self.! !!WonderlandCameraMorph methodsFor: 'pooh' stamp: 'sma 4/30/2000 10:20'!paintModeFor: anActor	self mode: #paint.	(self world paintBox) position: self position + (self extent x @ 0); focusMorph: self.! !!HTTPSocket class reorganize!('class initialization' blabEmail: initialize)('get the page' httpFileIn: httpFileInNewChangeSet: httpGet: httpGet:accept: httpGet:args:accept: httpGetDocument: httpGetDocument:accept: httpGetDocument:args: httpGetDocument:args:accept: httpGetDocument:args:accept:request: httpGetNoError:args:accept: httpGif: httpJpeg: httpPost:args:accept: httpPostDocument:args: httpPostDocument:args:accept: httpPostDocument:args:accept:request: httpPostMultipart:args:accept:request: httpShowChunk: httpShowGif: httpShowJpeg: httpShowPage:)('proxy settings' proxyTestingComment stopUsingProxyServer useProxyServerNamed:port:)('utilities' argString: retry:asking:ifGiveUp: showImage:named:)('magic numbers' defaultPort)!