'From Squeak2.9alpha of 13 June 2000 [latest update: #2558] on 2 September 2000 at 7:32:16 pm'!"Change Set:		misc kfr changesDate:			2 September 2000Author:			kfrB3DScanner: adds method bitblt so Squeak3D works even if the plugin is not present, abheit veeeeeerrrrryyyy slow.ChangeSorter/Changesorter class: In the ChangeSorter's class/instance list there is a menu option fileOut but no method exist for that. This is a quick and dirty stab  at it. It creates a new changeset, with the classname.authors initials and copies the selected class/instance into that changeset, files it out and then deletes it. As I said quick and dirty, but very usefull and fast when you just want one class' changes filed out.MenuItemMorph: Adds a check to see if the menuItem is allready deselected, no need to do it several times as before, makes a difference on slow computers.PaintBoxMorph: When you move the paint tools the color chooser morph is not propely aligned. This fixes that.WonderlandActorBrowser: alt/option (yellow button ?)  clicking on the scene in the WonderlandBrowser created an MethodNotUnderstand error. Added a check to see if the item clicked was a scene.WonderlandCameraMorph: added a halo menu option to show/hide camera controlls."!!B3DScanner methodsFor: 'public' stamp: 'kfr 6/26/2000 14:50'!bitBlt	^bitBlt! !!ChangeSorter methodsFor: 'class list' stamp: 'kfr 6/16/2000 16:27'!fileOutClass	"this is a hack!!!! makes a new change set, called the class name, adds author initials to try to make a unique change set name, files it out and removes it. kfr 16 june 2000" 	| aSet |	"File out the selected class set."     aSet _ self class newChangeSet: currentClassName.	aSet absorbClass: self selectedClassOrMetaClass name from: myChangeSet.	aSet fileOut.	self class removeChangeSet: aSet.	parent modelWakeUp.	"notice object conversion methods created"! !!ChangeSorter class methodsFor: 'as yet unclassified' stamp: 'kfr 6/16/2000 16:30'!newChangeSet: aName	"makes a new change set called aName, adds author initials to try to ensure a unique change set name"	| newName newSet |	newName _ aName,FileDirectory dot, Utilities authorInitials.	(self changeSetNamed: newName) ifNotNil:			[self inform: 'Sorry that name is already used'.			^ nil].	newSet _ ChangeSet new initialize name: newName.	AllChangeSets add: newSet.		^ newSet ! !!MenuItemMorph methodsFor: 'events' stamp: 'kfr 8/18/2000 19:37'!mouseMove: evt	| m |	m _ evt hand recipientForMouseDown: evt hand lastEvent.	m == self		ifTrue: [isSelected ifFalse: [m selectFromHand: evt hand]]		ifFalse: [isSelected ifTrue:[self deselectForNewMorph: m].				((m isKindOf: MenuItemMorph) and: [m isInMenu]) ifTrue:					[m selectFromHand: evt hand]].! !!PaintBoxMorph methodsFor: '-- all --' stamp: 'kfr 9/1/2000 19:29'!eyedropper: aButton action: aSelector cursor: aCursor evt: evt 	"Take total control and pick up a color!!!!"	| pt feedbackColor |	aButton state: #on.	tool		ifNotNil: [tool state: #off].	currentCursor _ aCursor.	evt hand showTemporaryCursor: currentCursor hotSpotOffset: 6 negated @ 4 negated.	"<<<< the form was changed a bit??"	feedbackColor _ Display colorAt: Sensor cursorPoint.	colorMemory align: colorMemory bounds topRight with: colorMemoryThin bounds topRight.	self addMorphFront: colorMemory.	"Full color picker"	[Sensor anyButtonPressed]		whileFalse: [pt _ Sensor cursorPoint.			"deal with the fact that 32 bit displays may have garbage in the 			alpha bits"			feedbackColor _ Display depth = 32						ifTrue: [Color								colorFromPixelValue: ((Display pixelValueAt: pt)										bitOr: 4278190080)								depth: 32]						ifFalse: [Display colorAt: pt].			"the hand needs to be drawn"			evt hand position: pt.			self world displayWorldSafely].	Sensor waitNoButton.	evt hand showTemporaryCursor: nil hotSpotOffset: 0 @ 0.	self currentColor: feedbackColor evt: evt.	colorMemory delete.	tool		ifNotNil: [tool state: #on.			currentCursor _ tool arguments at: 3].	aButton state: #off! !!WonderlandActorBrowser methodsFor: 'actor list functions' stamp: 'kfr 7/18/2000 09:57'!actorMenu: aMenu	"Builds the menu to display when the user right clicks on an actor"	(selectedActor isKindOf: WonderlandScene) | (selectedActor = nil)	ifTrue: [ ^ aMenu ].	(selectedActor isFirstClass)		ifTrue: [			^ aMenu addList: {								{'Point camera at'. #pointAt}.								{'Turn around once'. #turnAround}.								{'Become part'. #becomePart }.								{'Stand up'. #standUp}.								{'Grow'. #grow}.								{'Shrink'. #shrink}.								{'Squash'. #squash}.								{'Stretch'. #stretch}.								{'Destroy'. #destroy}							  }.				]		ifFalse: [			^ aMenu addList: {								{'Point camera at'. #pointAt}.								{'Turn around once'. #turnAround}.								{'Become first class'. #becomeFirstClass }.								{'Stand up'. #standUp}.								{'Grow'. #grow}.								{'Shrink'. #shrink}.								{'Squash'. #squash}.								{'Stretch'. #stretch}.								{'Destroy'. #destroy}							  }.				].! !!WonderlandCameraMorph methodsFor: 'controls' stamp: 'kfr 8/7/2000 16:40'!deleteCameraControls	"Hide the camera controls for the camera rendering into this window"	(self submorphOfClass: WonderlandCameraControls)		ifNotNil: [myControls delete.			myControls _ nil]! !!WonderlandCameraMorph methodsFor: 'menu' stamp: 'kfr 8/7/2000 09:06'!addCustomMenuItems: aCustomMenu hand: aHandMorph 	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu addUpdating: #getDragAndDropState action: #toggleDragAndDropState.	(myControls == nil)				ifTrue:[aCustomMenu add: 'showCameraControls' action: #showCameraControls]ifFalse:[aCustomMenu add: 'hideCameraControls' action: #deleteCameraControls]			! !