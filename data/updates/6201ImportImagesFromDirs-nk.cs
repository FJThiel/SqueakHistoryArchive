'From Squeak3.7beta of ''1 April 2004'' [latest update: #5948] on 12 June 2004 at 1:25:58 pm'!"Change Set:		ImportImagesFromDirs-nkDate:			12 June 2004Author:			Ned KonzAdds the services of importing all the images from a directory and from a directory with its subdirectories.Requires FileListServicesForDirectories-nk loaded first."!!FileDirectory methodsFor: 'enumeration' stamp: 'nk 6/12/2004 12:39'!withAllSubdirectoriesCollect: aBlock	"Evaluate aBlock with each of the directories in the subtree of the file system whose root is this directory.	Answer the results of these evaluations."	| result todo dir |	result _ OrderedCollection new: 100.	todo _ OrderedCollection with: self.	[todo size > 0] whileTrue: [		dir _ todo removeFirst.		result add: (aBlock value: dir).		dir directoryNames do: [:n | todo add: (dir directoryNamed: n)]].	^ result! !!Form class methodsFor: 'fileIn/Out' stamp: 'nk 6/12/2004 12:47'!importImage: fullName	"Import the given image file and store the resulting Form in the default Imports.	The image is named with the short filename up to the first period, possibly with additions from the directory path to make it unique."	Imports default importImageFromFileNamed: fullName.! !!Form class methodsFor: 'fileIn/Out' stamp: 'nk 6/12/2004 13:08'!importImageDirectory: dir	"Import the given image file and store the resulting Form in the default Imports.	The image is named with the short filename up to the first period, possibly with additions from the directory path to make it unique."	Imports default importImageDirectory: dir! !!Form class methodsFor: 'fileIn/Out' stamp: 'nk 6/12/2004 12:55'!importImageDirectoryWithSubdirectories: dir	"Import the given image file and store the resulting Form in the default Imports.	The image is named with the short filename up to the first period, possibly with additions from the directory path to make it unique."	Imports default importImageDirectoryWithSubdirectories: dir! !!Form class methodsFor: 'file list services' stamp: 'nk 6/12/2004 12:56'!fileReaderServicesForDirectory: aFileDirectory	^{		self serviceImageImportDirectory.		self serviceImageImportDirectoryWithSubdirectories.	}! !!Form class methodsFor: 'file list services' stamp: 'nk 6/12/2004 13:16'!serviceImageImportDirectory	"Answer a service for reading a graphic into ImageImports"	^(SimpleServiceEntry			provider: self 			label: 'import all images from this directory'			selector: #importImageDirectory:			description: 'Load all graphics found in this directory, adding them to the ImageImports repository.'			buttonLabel: 'import dir')			argumentGetter: [ :fileList | fileList directory ];			yourself! !!Form class methodsFor: 'file list services' stamp: 'nk 6/12/2004 13:15'!serviceImageImportDirectoryWithSubdirectories	"Answer a service for reading all graphics from a directory and its subdirectories into ImageImports"	^(SimpleServiceEntry			provider: self 			label: 'import all images from here and subdirectories'			selector: #importImageDirectoryWithSubdirectories:			description: 'Load all graphics found in this directory and its subdirectories, adding them to the ImageImports repository.'			buttonLabel: 'import subdirs')			argumentGetter: [ :fileList | fileList directory ];			yourself! !!Imports methodsFor: 'images' stamp: 'nk 6/12/2004 12:49'!importImage: anImage named: aName 	imports		at: (Utilities				keyLike: aName				satisfying: [:ea | (imports includesKey: ea) not])		put: anImage! !!Imports methodsFor: 'icons' stamp: 'nk 6/12/2004 12:44'!importImageDirectory: directoryOrName 	| dir extensions forms |	dir := directoryOrName isString		ifFalse: [ directoryOrName ]		ifTrue: [ FileDirectory default directoryNamed: directoryOrName ].	dir exists		ifFalse: [self error: dir fullName , ' does not exist'. ^ #()].	extensions := (ImageReadWriter allTypicalFileExtensions add: 'form';				 yourself)				collect: [:ex | '.' , ex].	forms := OrderedCollection new.	dir fileNames		do: [:fileName | | fullName | (fileName endsWithAnyOf: extensions)				ifTrue: [fullName := dir fullNameFor: fileName.					(self importImageFromFileNamed: fullName)						ifNotNilDo: [:form | forms add: form]]].	^ forms! !!Imports methodsFor: 'icons' stamp: 'nk 6/12/2004 12:44'!importImageDirectoryWithSubdirectories: directoryOrName 	| dir forms |	dir := directoryOrName isString		ifFalse: [ directoryOrName ]		ifTrue: [ FileDirectory default directoryNamed: directoryOrName ].	dir exists		ifFalse: [self error: dir fullName , ' does not exist'. ^ #()].	forms := OrderedCollection new.	dir withAllSubdirectoriesCollect: [ :subdir | forms addAll: (self importImageDirectory: dir) ].	^ forms! !!Imports methodsFor: 'icons' stamp: 'nk 6/12/2004 12:25'!importImageFromFileNamed: fullName 	| localName pathParts form imageName |	FileDirectory		splitName: fullName		to: [:dirPath :lname | 			localName := lname.			pathParts := dirPath findTokens: FileDirectory slash].	form := [Form fromFileNamed: fullName]				on: Error				do: [:ex | ex return: nil].	form		ifNil: [^ nil].	imageName := FileDirectory baseNameFor: localName.	[imports includesKey: imageName]		whileTrue: [imageName := pathParts isEmpty						ifTrue: [Utilities								keyLike: imageName								satisfying: [:ea | (imports includesKey: ea) not]]						ifFalse: [pathParts removeLast , '-' , imageName]].	imports at: imageName put: form.	^ form! !!Form class reorganize!('instance creation' dotOfSize: extent: extent:depth: extent:depth:bits: extent:depth:fromArray:offset: extent:fromArray:offset: extent:fromStipple: extent:offset: fromBinaryStream: fromDisplay: fromDisplay:using: fromFileNamed: fromUser fromUser: fromUserWithExtent:)('mode constants' and blend blendAlpha erase erase1bitShape oldErase1bitShape oldPaint over paint paintAlpha reverse rgbMul under)('examples' exampleBorder exampleEdits exampleMagnify exampleShrink exampleSketch exampleSpaceFill makeStar toothpaste: xorHack:)('shut down' shutDown)('BMP file reading' fromBMPFile: fromBMPFileNamed:)('initialize-release' initialize)('fileIn/Out' importImage: importImageDirectory: importImageDirectoryWithSubdirectories:)('file list services' fileReaderServicesForDirectory: fileReaderServicesForFile:suffix: openAsBackground: openImageInWindow: serviceImageAsBackground serviceImageImportDirectory serviceImageImportDirectoryWithSubdirectories serviceImageImports serviceOpenImageInWindow services)('class initialization' unload)!