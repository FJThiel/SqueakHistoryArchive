'From Squeak2.8alpha of 4 February 2000 [latest update: #2098] on 12 May 2000 at 10:41:19 am'!"Change Set:		052SysWindowDnd-mirDate:			9 May 2000Author:			Michael RuegerThis changeset enables drag'n'drop events on passive system windows.Passive windows still stay locked, but if a window is not supposed to even receive dnd events the dnd has to be disabled explicitely."!!HandMorph methodsFor: 'event handling' stamp: 'mir 5/9/2000 15:23'!dragOverList: evt	| p roots mList mm root |	p _ evt cursorPoint.	roots _ self world rootMorphsAt: p.  "root morphs in world"	roots isEmpty		ifTrue: [^EmptyArray]		ifFalse: [root _ roots first].	mList _ root morphsAt: p.	mList size > 0 ifTrue:		["NOTE: We really only want the top morph and all its owners"		mm _ mList first.		mList _ OrderedCollection new.		[mm == root] whileFalse:			[mList addLast: mm.			mm _ mm owner].		mList add: root].	^ mList! !!HandMorph methodsFor: 'event handling' stamp: 'mir 5/9/2000 15:27'!dragOverListAt: p	|  roots mList mm root |	roots _ self world rootMorphsAt: p.  "root morphs in world"	roots isEmpty		ifTrue: [^EmptyArray]		ifFalse: [root _ roots first].	mList _ root morphsAt: p.	mList size > 0 ifTrue:		["NOTE: We really only want the top morph and all its owners"		mm _ mList first.		mList _ OrderedCollection new.		[mm == root] whileFalse:			[mList addLast: mm.			mm _ mm owner].		mList add: root].	^ mList! !!HandMorph methodsFor: 'event handling' stamp: 'mir 5/9/2000 15:28'!handleDragOver: evt	| mList allMouseOvers leftMorphs enteredMorphs |	owner ifNil: [^ self].  "this hand is not in a world"	"Start with a list consisting of the topmost unlocked morph in the	innermost frame (pasteUp), and all of its containers in that frame."	mList _ self dragOverList: evt.	"Make a list of all potential drag-overs..."	allMouseOvers _ mList select:		[:m | m handlesMouseOverDragging: (evt transformedBy: (m transformFrom: self))].	leftMorphs _ dragOverMorphs select: [:m | (allMouseOvers includes: m) not].	enteredMorphs _ allMouseOvers select: [:m | (dragOverMorphs includes: m) not].	"Notify and remove any morphs that have just been left..."	leftMorphs do: [:m |		dragOverMorphs remove: m.		m mouseLeaveDragging: (evt transformedBy: (m transformFrom: self))].	"Add any new mouse-overs and send mouseEnter:"	enteredMorphs do: [:m |		dragOverMorphs add: m.		mouseOverMorphs remove: m ifAbsent: [].  "Cant be in two places at once"		m mouseEnterDragging: (evt transformedBy: (m transformFrom: self))].! !