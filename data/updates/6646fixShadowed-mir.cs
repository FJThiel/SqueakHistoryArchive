'From Squeak3.8gamma of ''24 November 2004'' [latest update: #6643] on 13 April 2005 at 5:24:22 pm'!"Change Set:		fixShadowedDate:			13 April 2005Author:			Michael RuegerFixes a few places with shadowed variables"!!FtpUrl methodsFor: 'downloading' stamp: 'mir 6/27/2003 19:42'!retrieveContents	"currently assumes directories end in /, and things that don't end in / are files.  Also, doesn't handle errors real well...."	| server contents pathString listing auth idx fileName serverName userName password |	pathString _ self pathString.	pathString _ pathString copyFrom: 2 to: pathString size. "remove the leading /"	pathString last = $/ ifTrue:["directory?!!"		fileName _ nil.	] ifFalse:[		fileName _ pathString copyFrom: (pathString lastIndexOf: $/)+1 to: pathString size.		pathString _ pathString copyFrom: 1 to: (pathString lastIndexOf: $/) - 1.	].	auth _ self authority.	idx _ auth indexOf: $@.	idx > 0 ifTrue:[		serverName _ (auth copyFrom: idx+1 to: auth size).		userName _ (auth copyFrom: 1 to: idx-1).		password _ nil.	] ifFalse:[		serverName _ auth.		userName _ 'anonymous'.		password _ 'SqueakUser'.	].	server _ ServerDirectory servers 		detect:[:s| s isTypeFTP and:[s server asLowercase = serverName asLowercase]]		ifNone:[nil].	server ifNil:[		server _ ServerDirectory new.		server server: serverName.	] ifNotNil:[server _ server copy reset].	server user: userName.	password ifNotNil:[server password: password].	server directory: pathString.	fileName == nil ifFalse:[		"a file"		contents _ (server getFileNamed: fileName).		server sleep.		^MIMEDocument contentType: (MIMEDocument guessTypeFromName: self path last) content: contents].	"a directory?"	listing _ String streamContents: [ :stream |		stream nextPutAll: '<title>', self pathString, '</title>'; cr.		stream nextPutAll: '<h1>Listing for ', self pathString, '</h1>'; cr.		stream nextPutAll: '<ul>'; cr.		server entries do: [ :entry |			stream nextPutAll: '<li>';				nextPutAll: '<a href="', entry name encodeForHTTP.			entry isDirectory ifTrue: [ stream nextPut: $/ ].			stream nextPutAll: '">';				nextPutAll: entry name;				nextPutAll: '</a>';				cr ] ].	server sleep.	^MIMEDocument contentType: 'text/html' content: listing! !!HttpUrl methodsFor: 'downloading' stamp: 'ar 3/18/2001 00:54'!askNamePassword	"Authorization is required by the host site.  Ask the user for a userName and password.  Encode them and store under this realm.  Return false if the user wants to give up."	| user password |	(self confirm: 'Host ', self toText, 'wants a different user and password.  Type them now?' orCancel: [false])		ifFalse: [^ false].	"Note: When Scamper is converted to run under MVC, we'll have to pass in topView in order to decide which FillInTheBlank to call."	user _ FillInTheBlank request: 'User account name?' initialAnswer: '' 				centerAt: (ActiveHand ifNil:[Sensor]) cursorPoint - (50@0).	password _ FillInTheBlank requestPassword: 'Password?'.	Passwords at: realm put: (Authorizer new encode: user password: password).	^ true! !!PNMReadWriter methodsFor: 'reading' stamp: 'mir 4/13/2005 17:11'!r: r g: g b: b for: aDepth	"integer value according depth"	| val |	aDepth = 16 ifTrue: [		val _ (r << 10) + (g << 5) + b.	]	ifFalse:[		val _ (r << 16) + (g << 8) + b.	].	^val! !!PostscriptCanvas methodsFor: 'morph drawing' stamp: 'mir 4/13/2005 17:09'!writeTrailer: somePages 	target		print: '%%Trailer';		cr.	usedFonts isEmpty 		ifFalse: 			[target print: '%%DocumentFonts:'.			usedFonts values asSet do: 					[:f | 					target						space;						print: f].			target cr].	target print:'%%Pages: '; write: somePages; cr.	target		print: '%%EOF';		cr! !