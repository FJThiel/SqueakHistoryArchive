'From Squeak 2.3 beta of Nov 25, 1998 on 2 December 1998 at 9:16:55 am'!Object subclass: #RealEstateAgent	instanceVariableNames: ''	classVariableNames: 'ReverseStaggerOffset StaggerOffset StaggerOrigin StandardSize StandardWindowOrigins '	poolDictionaries: ''	category: 'Interface-Support'!!Object methodsFor: 'copying' stamp: 'tk 11/27/1998 09:00'!copyFrom: anotherObject	"Copy to myself all instance variables I have in common with anotherObject.  This is dangerous because it ignores an object's control over its own inst vars.  "	| mine his |	mine _ self class allInstVarNames.	his _ anotherObject class allInstVarNames.	1 to: (mine size min: his size) do: [:ind |		(mine at: ind) = (his at: ind) ifTrue: [			self instVarAt: ind put: (anotherObject instVarAt: ind)]].	self class isVariable & anotherObject class isVariable ifTrue: [		1 to: (self basicSize min: anotherObject basicSize) do: [:ind |			self basicAt: ind put: (anotherObject basicAt: ind)]].! !!HTTPSocket class reorganize!('class initialization' blabEmail: initialize)('get the page' httpFileIn: httpFileInNewChangeSet: httpGet: httpGet:accept: httpGet:args:accept: httpGetDocument: httpGetDocument:accept: httpGetDocument:args: httpGetDocument:args:accept: httpGetDocument:args:accept:request: httpGif: httpJpeg: httpPost:args:accept: httpPostDocument:args: httpPostDocument:args:accept: httpPostDocument:args:accept:request: httpShowChunk: httpShowGif: httpShowJpeg: httpShowPage: proxyTestingComment)('proxy settings' stopUsingProxyServer useProxyServerNamed:port:)('utilities' argString: retry:asking:ifGiveUp:)('magic numbers' defaultPort)!!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'tk 11/26/1998 09:34'!initialize	"Initialize the class variables in the receiver.  5/22/96 sw"	"RealEstateAgent initialize"	StaggerOffset _ 6 @ 20.	ReverseStaggerOffset _ -6 @ 20.	StaggerOrigin _ 200 @ 30.	StandardSize _ 600@400.! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'tk 11/26/1998 09:35'!standardWindowExtent	"Answer the standard default extent for new windows.  "	| effectiveExtent width strips height grid allowedArea maxLevel |	effectiveExtent _ Display usableArea extent					- (self scrollBarSetback @ self screenTopSetback).	Preferences reverseWindowStagger ifTrue:		["NOTE: following copied from strictlyStaggeredInitialFrameFor:"		allowedArea _ self scrollBarSetback @ self screenTopSetback						corner: Display usableArea bottomRight.		"Number to be staggered at each corner (less on small screens)"		maxLevel _ allowedArea area > 300000 ifTrue: [3] ifFalse: [2].		"Amount by which to stagger (less on small screens)"		grid _ allowedArea area > 500000 ifTrue: [40] ifFalse: [20].		^ (allowedArea extent - (grid*(maxLevel+1*2) + (grid//2))) min: StandardSize "600@400"].	width _ (strips _ self windowColumnsDesired) > 1		ifTrue:			[effectiveExtent x // strips]		ifFalse:			[(3 * effectiveExtent x) // 4].	height _ (strips _ self windowRowsDesired) > 1		ifTrue:			[effectiveExtent y // strips]		ifFalse:			[(3 * effectiveExtent y) //4].	^ width @ height"RealEstateAgent standardWindowExtent"! !!ServerDirectory methodsFor: 'do ftp' stamp: 'tk 11/26/1998 10:36'!getFileNamed: fileNameOnServer	"Just FTP a file from a server.  Return a stream.  (Later -- Use a proxy server if one has been registered.)"	| so dd resp rr |	so _ self openFTP.	"Open passive.  Do everything up to RETR or STOR"	so class == String ifTrue: ["error, was reported" ^ so].	so sendCommand: 'RETR ', fileNameOnServer.	dd _ so dataSocket.	dd connectTo: so remoteAddress port: dd portNum.	dd waitForConnectionUntil: FTPSocket standardDeadline.	Transcript show: 'retrieve from port ', dd portNum printString; space;		show: fileNameOnServer; cr.	resp _ dd getAllDataWhileWatching: so.	"Later use the length to pre-allocate the buffer"	(resp == #error:) ifTrue: [^ resp].	dd close.	(rr _ so responseOK) == true ifFalse: [^ rr].	"150 Opening binary conn on foo (3113 bytes)"	(rr _ so responseOK) == true ifFalse: [^ rr].	"226 Transfer complete."	so sendCommand: 'QUIT'.	(rr _ so responseOK) == true ifFalse: [^ rr].	"221"	so destroy.	"Always OK to destroy"	dd destroy.	^ resp	"a RWBinaryOrTextStream"! !!ServerDirectory methodsFor: 'do ftp' stamp: 'tk 11/26/1998 11:04'!getFileNamed: fileNameOnServer into: dataStream	"Just FTP a file from a server.  Return a stream.  (Later -- Use a proxy server if one has been registered.)"	| so dd resp rr |	type == #file ifTrue: [		dataStream nextPutAll: 			(resp _ FileStream oldFileNamed: server,(self serverDelimiter asString), 				self bareDirectory, (self serverDelimiter asString),				fileNameOnServer) contentsOfEntireFile.		^ resp].	type == #http ifTrue: [		resp _ HTTPSocket httpGet: (self fullNameFor: fileNameOnServer) 				accept: 'application/octet-stream'.		resp class == String ifTrue: [^ dataStream].	"error, no data"		dataStream copyFrom: resp.		^ dataStream].	type ifNil: [type _ #ftp].	"type == #ftp"	so _ self openFTP.	"Open passive.  Do everything up to RETR or STOR"	so class == String ifTrue: ["error, was reported" ^ so].	so sendCommand: 'RETR ', fileNameOnServer.	dd _ so dataSocket.	dd connectTo: so remoteAddress port: dd portNum.	dd waitForConnectionUntil: FTPSocket standardDeadline.	Transcript show: 'retrieve from port ', dd portNum printString; cr.	resp _ dd getDataTo: dataStream whileWatching: so.		"Later use the length to pre-allocate the buffer"	(resp == #error:) ifTrue: [^ resp].	dd close.	(rr _ so responseOK) == true ifFalse: [^ rr].	"150 Opening binary conn on foo (3113 bytes)"	(rr _ so responseOK) == true ifFalse: [^ rr].	"226 Transfer complete."	so sendCommand: 'QUIT'.	(rr _ so responseOK) == true ifFalse: [^ rr].	"221"	so destroy.	"Always OK to destroy"	dd destroy.	^ resp	"String with just the data"! !!ServerDirectory methodsFor: 'accessing' stamp: 'tk 11/26/1998 09:48'!fullPath: serverAndDirectory	"Parse and save a full path.  Convention:  if ftp://user@server/dir, then dir is relative to user's directory.  dir has no slash at beginning.  If ftp://server/dir, then dir is absolute to top of machine, give dir a slash at the beginning."	| start bare sz userAndServer both slash score match best sd |	bare _ serverAndDirectory.	sz _ serverAndDirectory size.	bare size > 0 ifTrue: [ 		start _ (bare copyFrom: 1 to: (8 min: sz)) asLowercase.		(start beginsWith: 'ftp:') 			ifTrue: [type _ #ftp.				bare _ bare copyFrom: (7 min: sz) to: bare size].		(start beginsWith: 'http:') 			ifTrue: [type _ #http.				bare _ bare copyFrom: (8 min: sz) to: serverAndDirectory size].		((start beginsWith: 'file:') or: [type == #file])			ifTrue: [type _ #file.				urlObject _ FileUrl absoluteFromText: serverAndDirectory.				^ self]].	userAndServer _ bare copyUpTo: self pathNameDelimiter.	both _ userAndServer findTokens: '@'.	slash _ both size.	"absolute = 1, relative = 2"	server _ both last.	both size > 1 ifTrue: [user _ both at: 1].	bare size > (userAndServer size + 1) 		ifTrue: [directory _ bare copyFrom: userAndServer size + slash to: bare size]		ifFalse: [directory _ ''].	"If this server is already known, copy in its userName and password"	type == #ftp ifFalse: [^ self].	score _ -1.	ServerDirectory serverNames do: [:name |		sd _ ServerDirectory serverNamed: name.		server = sd server ifTrue: [			match _ directory asLowercase charactersExactlyMatching: sd directory asLowercase.			match > score ifTrue: [score _ match.  best _ sd]]].	best 		ifNil: [self fromUser]		ifNotNil: [user _ best user.  self password: best password].! !!ServerDirectory methodsFor: 'initialize' stamp: 'tk 11/26/1998 09:50'!fromUser	"Ask the user for all data on a new server.  Save it in a named server."  ! !!SqueakPage methodsFor: 'saving' stamp: 'tk 11/25/1998 23:23'!urlNoOverwrite: suggested	"Look in the directory.  If there is a file of this name, create a new name.  Keep track of highest numbers used as a hint."	| dir ll stem num local trial |	dir _ ServerFile new fullPath: suggested.	(dir includesKey: dir fileName) ifFalse: [^ url _ suggested].	"File already exists!!  Create a new name"	"Find the stem file name"	ll _ suggested findLast: [:char | char == $.].	ll = 0 ifFalse: [stem _ suggested copyFrom: 1 to: ll-1].	"remove .sp"	stem _ (stem stemAndNumericSuffix) at: 1.		"remove trailing number"	stem last == $x ifTrue: [stem _ stem allButLast].	num _ stem = RecentStem ifTrue: [RecentMaxNum+1] ifFalse: [1].	local _ dir fileName.	"ugh, take stem again..."	ll _ local findLast: [:char | char == $.].	ll = 0 ifFalse: [local _ local copyFrom: 1 to: ll-1].	"remove .sp"	local _ (local splitInteger) at: 1.		"remove trailing number"	local last == $x ifFalse: [local _ local , 'x'].	[trial _ local, num printString, '.sp'.		dir includesKey: trial] whileTrue: [num _ num + 1].	RecentStem _ stem.  RecentMaxNum _ num.	^ url _ stem, 'x', num printString, '.sp'! !RealEstateAgent initialize!"Postscript:Rename a few categories."HTTPSocket class organization renameCategory: 'examples' toBe: 'get the page'.SystemOrganization renameCategory: 'Morphic-WebBooks' toBe: 'Network-SqueakPage'.!