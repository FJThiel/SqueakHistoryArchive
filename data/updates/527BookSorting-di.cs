'From Squeak 2.3 beta of Nov 25, 1998 on 4 January 1999 at 1:53 pm'!"Change Set:		BookSortingDate:			4 January 1999Author:			Dan IngallsA number of changes to sorting of Book Pages:Sorter automatically appears in world inset from screen bounds.Thumbnails store page references, not page numbers.Shift-clicking on a thumbnail in the sorter causes a page change.Given the above, accepting sorted contents does not cause a page change.All cached BookSorter thumbnails are updated dynamically."!!BookPageSorterMorph methodsFor: 'all' stamp: 'di 1/4/1999 12:02'!initialize	super initialize.	self extent: Display extent - 100;		orientation: #vertical;		centering: #topLeft;		hResizing: #spaceFill;		vResizing: #spaceFill;		inset: 3;		color: Color lightGray;		borderWidth: 2.	pageHolder _ PasteUpMorph new behaveLikeHolder extent: self extent - borderWidth.	pageHolder cursor: 0.	self addControls.	self addMorphBack: pageHolder.! !!BookPageThumbnailMorph methodsFor: 'all' stamp: 'di 1/4/1999 13:42'!computeThumbnail	| f scale |	f _ page imageForm.	scale _ (self height / f height).  "keep height invariant""(Sensor shiftPressed) ifTrue: [scale _ scale * 1.4]."	self form: (f magnify: f boundingBox by: scale@scale smoothing: 2).! !!BookPageThumbnailMorph methodsFor: 'all' stamp: 'di 1/4/1999 12:42'!doPageFlip	"Flip to this page"	bookMorph goToPageMorph: page				transitionSpec: (self valueOfProperty: #transitionSpec)! !!BookPageThumbnailMorph methodsFor: 'all' stamp: 'di 1/4/1999 12:19'!handlesMouseDown: event	^ event shiftPressed or: [flipOnClick and: [event controlKeyPressed not]]! !!BookPageThumbnailMorph methodsFor: 'all' stamp: 'di 1/4/1999 12:52'!inBook: book	bookMorph _ book! !!BookPageThumbnailMorph methodsFor: 'all' stamp: 'di 1/4/1999 13:39'!page: aMorph	page _ aMorph.	self computeThumbnail.	self setNameTo: aMorph externalName.	page fullReleaseCachedState.! !!BookPageThumbnailMorph methodsFor: 'all' stamp: 'di 1/4/1999 12:48'!pageMorph: pageMorph inBook: book	page _ pageMorph.	bookMorph _ book! !!BooklikeMorph methodsFor: 'menu commands' stamp: 'di 1/4/1999 12:11'!sortPages	| sorter |	sorter _ BookPageSorterMorph new		book: self morphsToSort: self morphsForPageSorter.	sorter pageHolder cursor: self indexOfCurrentPage.	"Default sorter size is inset by 50 from edge of screen"	self world addMorphFront: (sorter position: 50@50)."	self presentResultMorph: sorter"! !!BookMorph methodsFor: 'sorting' stamp: 'di 1/4/1999 13:27'!acceptSortedContentsFrom: aHolder	"Update my page list from the given page sorter."	| goodPages rejects toAdd |	goodPages _ OrderedCollection new.	rejects _ OrderedCollection new.	aHolder submorphs doWithIndex: [:m :i |		toAdd _ nil.		(m isKindOf: PasteUpMorph) ifTrue: [toAdd _ m].		(m isKindOf: BookPageThumbnailMorph) ifTrue: [toAdd _ m page].		toAdd ifNil: [rejects add: m]			ifNotNil: [goodPages add: toAdd]].	self newPages: goodPages.	goodPages size = 0 ifTrue: [self insertPage].	rejects size > 0 ifTrue: [self inform: rejects size printString, ' objects vanished in this process.']! !!BookMorph methodsFor: 'sorting' stamp: 'di 1/4/1999 12:53'!morphsForPageSorter	| i thumbnails |	'Assembling thumbnail images...'		displayProgressAt: Sensor cursorPoint		from: 0 to: pages size		during:			[:bar | i _ 0.			thumbnails _ pages collect:				[:p | bar value: (i_ i+1).				pages size > 40 					ifTrue: [p smallThumbnailForPageSorter inBook: self]					ifFalse: [p thumbnailForPageSorter inBook: self]]].	^ thumbnails! !!BookMorph methodsFor: 'sorting' stamp: 'di 1/4/1999 13:52'!sortPages	currentPage ifNotNil: [currentPage updateCachedThumbnail].	^ super sortPages! !!BookMorph methodsFor: 'sorting' stamp: 'di 1/4/1999 12:12'!sortPages: evt	^ self sortPages! !!BookMorph methodsFor: 'navigation' stamp: 'di 1/4/1999 12:40'!goToPage: pageNumber transitionSpec: transitionSpec	pages isEmpty ifTrue: [^ self].	^ self goToPageMorph: (pages atPin: pageNumber) transitionSpec: transitionSpec! !!BookMorph methodsFor: 'navigation' stamp: 'di 1/4/1999 12:37'!goToPageMorph: aMorph fromBookmark: aBookmark	"This protocol enables sensitivity to a transitionSpec on the bookmark"		self goToPageMorph: aMorph		transitionSpec: (aBookmark valueOfProperty: #transitionSpec).! !!BookMorph methodsFor: 'navigation' stamp: 'di 1/4/1999 13:46'!goToPageMorph: newPage transitionSpec: transitionSpec	| pageIndex  aWorld oldPageIndex ascending tSpec |	pages isEmpty ifTrue: [^ self].	pageIndex _ pages identityIndexOf: newPage ifAbsent: [^ self "abort"].	oldPageIndex _ pages identityIndexOf: currentPage ifAbsent: [nil].	ascending _ ((oldPageIndex == nil) or: [newPage == currentPage])			ifTrue: [nil]			ifFalse: [oldPageIndex < pageIndex].	tSpec _ transitionSpec ifNil:  "If transition not specified by requestor..."		[newPage valueOfProperty: #transitionSpec  " ... then consult new page"			ifAbsent: [self transitionSpecFor: self  " ... otherwise this is the default"]].	(aWorld _ self world) ifNotNil:		[self primaryHand newKeyboardFocus: nil].	currentPage ifNotNil: [currentPage updateThumbnail].	self currentPage ~~ nil		ifTrue:		[(((pages at: pageIndex) owner isKindOf: TransitionMorph)			and: [(pages at: pageIndex) isInWorld])			ifTrue: [^ self  "In the process of a prior pageTurn"].		self currentPlayerDo: [:aPlayer | aPlayer runAllClosingScripts].		ascending ifNotNil:			["Show appropriate page transition and start new page when done"			currentPage stopStepping.			(pages at: pageIndex) position: currentPage position.			^ (TransitionMorph					effect: tSpec second					direction: tSpec third					inverse: (ascending or: [transitionSpec notNil]) not)				showTransitionFrom: currentPage				to: (pages at: pageIndex)				in: self				whenStart: [self playPageFlipSound: tSpec first]				whenDone:					[currentPage delete; fullReleaseCachedState.					self addMorphBack: (currentPage _ pages at: pageIndex).					self snapToEdgeIfAppropriate.					aWorld ifNotNil: [self world startSteppingSubmorphsOf: currentPage].					self currentPlayerDo: [:aPlayer | aPlayer runAllOpeningScripts].					(aWorld _ self world) ifNotNil: ["WHY??" aWorld displayWorld]]].		"No transition, but at least decommission current page"		currentPage delete; fullReleaseCachedState].	self addMorphBack: (currentPage _ pages at: pageIndex).	self snapToEdgeIfAppropriate.	aWorld ifNotNil: [self world startSteppingSubmorphsOf: currentPage].	self currentPlayerDo: [:aPlayer | aPlayer runAllOpeningScripts].	(aWorld _ self world) ifNotNil: ["WHY??" aWorld displayWorld].! !!BookMorph methodsFor: 'menu' stamp: 'di 1/4/1999 12:49'!thumbnailForThisPage	self primaryHand attachMorph:		(currentPage thumbnailForPageSorter pageMorph: currentPage inBook: self)! !!PasteUpMorph methodsFor: 'misc' stamp: 'di 1/4/1999 13:44'!updateCachedThumbnail	"If I have a cached thumbnail, then update it."	| cachedThumbnail |	(cachedThumbnail _ self valueOfProperty: #cachedThumbnail) ifNotNil:		[cachedThumbnail computeThumbnail].! !"Postscript:Cause all thumbnails to be recreated."BookMorph allSubInstancesDo: [:b | b uncachePageSorter].!