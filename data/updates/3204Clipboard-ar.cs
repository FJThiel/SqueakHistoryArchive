'From Squeak2.9alpha of 13 June 2000 [latest update: #3266] on 15 January 2001 at 6:48:54 pm'!"Change Set:		Clipboard-arDate:			15 January 2001Author:			Andreas RaabIntroduces an explicit Clipboard class to decouple the dependencies from ParagraphEditor. Also removes lots of its uses when talking to the clipboard."!Object subclass: #Clipboard	instanceVariableNames: 'contents recent '	classVariableNames: 'Default '	poolDictionaries: ''	category: 'Kernel-ST80 Remnants'!!Clipboard commentStamp: 'ar 1/15/2001 18:42' prior: 0!The Clipboard class implements a basic buffering scheme for text. The currently selected text is also exported to the OS so that text can be copied from and to other applications. Commonly only a single instance is used (the default clipboard) but applications are free to use other than the default clipboard if necessary.!!BookMorph methodsFor: 'menu' stamp: 'ar 1/15/2001 18:37'!copyUrl	"Copy this page's url to the clipboard"	| str |	str _ currentPage url ifNil: [str _ 'Page does not have a url.  Send page to server first.'].	Clipboard clipboardText: str asText.! !!Clipboard methodsFor: 'initialize' stamp: 'ar 1/15/2001 18:34'!initialize	contents _ '' asText.	recent _ OrderedCollection new.! !!Clipboard methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:32'!chooseRecentClipping  "Clipboard chooseRecentClipping"	"Choose by menu from among the recent clippings"	recent ifNil: [^ nil].	^ (SelectionMenu		labelList: (recent collect: [:txt | ((txt asString contractTo: 50)									copyReplaceAll: Character cr asString with: '\')									copyReplaceAll: Character tab asString with: '|'])		selections: recent) startUp.! !!Clipboard methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:31'!clipboardText	"Return the text currently in the clipboard. If the system clipboard is empty, or if it differs from the Smalltalk clipboard text, use the Smalltalk clipboard. This is done since (a) the Mac clipboard gives up on very large chunks of text and (b) since not all platforms support the notion of a clipboard."	| s |	s _ self primitiveClipboardText.	(s isEmpty or: [s = contents string])		ifTrue: [^ contents]		ifFalse: [^ s asText]! !!Clipboard methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:40'!clipboardText: text	"Set text currently on the clipboard.  Also export to OS"	contents _ text.	self noteRecentClipping: text.	self primitiveClipboardText: text string! !!Clipboard methodsFor: 'primitives' stamp: 'ar 1/15/2001 18:28'!primitiveClipboardText	"Get the current clipboard text. Return the empty string if the primitive fails."	<primitive: 141>	^ ''! !!Clipboard methodsFor: 'primitives' stamp: 'ar 1/15/2001 18:30'!primitiveClipboardText: aString	"Set the current clipboard text to the given string."	<primitive: 141>	"don't fail if the primitive is not implemented"! !!Clipboard methodsFor: 'private' stamp: 'ar 1/15/2001 18:34'!noteRecentClipping: text	"Keep most recent clippings in a queue for pasteRecent (paste... command)"	text isEmpty ifTrue: [^ self].	text size > 50000 ifTrue: [^ self].	(recent includes: text) ifTrue: [^ self].	recent addFirst: text.	[recent size > 5] whileTrue: [recent removeLast].! !!Clipboard class methodsFor: 'instance creation' stamp: 'ar 1/15/2001 18:33'!new	^super new initialize.! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:45'!chooseRecentClipping  "Clipboard chooseRecentClipping"	"Choose by menu from among the recent clippings"	^self default chooseRecentClipping! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:35'!clipboardText "Clipboard clipboardText"	^self default clipboardText.! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:35'!clipboardText: aText 	^self default clipboardText: aText! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:33'!default	^Default ifNil:[Default _ self new].! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:48'!default: aClipboard	"So that clients can switch between different default clipboards"	Default _ aClipboard.! !!FormSetFont class methodsFor: 'examples' stamp: 'ar 1/15/2001 18:38'!copy: charForm toClipBoardAs: char ascent: ascent	Clipboard clipboardText:		(Text string: char asString			attribute: (TextFontReference toFont: 				(FormSetFont new					fromFormArray: (Array with: charForm)					asciiStart: char asciiValue					ascent: ascent)))"	The S in the Squeak welcome window was installed by doing the following	in a workspace (where the value of, eg, charForm will persist through BitEdit...	f _ TextStyle default fontAt: 4.	oldS _ f characterFormAt: $S.	charForm _ Form extent: oldS extent depth: 8.	oldS displayOn: charForm.	charForm bitEdit.	...Play around with the BitEditor, then accept and close...	FormSetFont copy: charForm toClipBoardAs: $S ascent: f ascent.	...Then do a paste into the Welcome window"! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'ar 1/15/2001 18:37'!clipboardText	^ Clipboard clipboardText! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'ar 1/15/2001 18:38'!clipboardText: text	^ Clipboard clipboardText: text! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'ar 1/15/2001 18:38'!clipboardTextPut: text	^ Clipboard clipboardText: text! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'ar 1/15/2001 18:36'!pasteRecent	"Paste an item chose from RecentClippings."	| clipping |	(clipping _ Clipboard chooseRecentClipping) ifNil: [^ self].	Clipboard clipboardText: clipping.	^ self paste! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'ar 1/15/2001 18:47'!initialize 	"Initialize the keyboard shortcut maps and the shared buffers	for copying text across views and managing again and undo.	Marked this method changed to trigger reinit"  	"ParagraphEditor initialize"	UndoSelection _ FindText _ ChangeText _ Text new.	UndoMessage _ Message selector: #halt.	self initializeCmdKeyShortcuts.	self initializeShiftCmdKeyShortcuts.	self initializeTextEditorMenus! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'ar 1/15/2001 18:36'!pasteRecent	"Paste an item chosen from RecentClippings."	| clipping |	(clipping _ Clipboard chooseRecentClipping) ifNil: [^ self].	Clipboard clipboardText: clipping.	^ self handleEdit: [textMorph editor paste]! !!StringHolder methodsFor: 'message list menu' stamp: 'ar 1/15/2001 18:39'!copyName	"Copy the current selector to the clipboard"	| selector |	(selector _ self selectedMessageName) ifNotNil:		[Clipboard clipboardText: selector asString asText]! !!FileList methodsFor: 'file list menu' stamp: 'ar 1/15/2001 18:38'!copyName	listIndex = 0 ifTrue: [^ self].	Clipboard clipboardText: self fullName asText.! !!Inspector methodsFor: 'menu commands' stamp: 'ar 1/15/2001 18:38'!copyName	"Copy the name of the current variable, so the user can paste it into the window below and work with is.  If collection, do (xxx at: 1). "	| sel aClass |	self selectionUnmodifiable ifTrue: [^ self changed: #flash].	(aClass _ self object class) isVariable ifTrue: [^ self changed: #flash].	sel _ aClass allInstVarNames at: selectionIndex - 2.	(self selection isKindOf: Collection) ifTrue: [sel _ '(',sel,' at: 1)'].	Clipboard clipboardText: sel asText.	"no undo allowed"! !!DictionaryInspector methodsFor: 'menu' stamp: 'ar 1/15/2001 18:37'!copyName	"Copy the name of the current variable, so the user can paste it into the window below and work with is.  If collection, do (xxx at: 1). "	| sel |	sel _ '(self at: ', 		(String streamContents: [:strm | (keyArray at: selectionIndex) storeOn: strm]) ,		')'.	Clipboard clipboardText: sel asText.	"no undo allowed"! !SystemDictionary removeSelector: #clipboardText!SystemDictionary removeSelector: #clipboardText:!ParagraphEditor class removeSelector: #chooseRecentClipping!ParagraphEditor class removeSelector: #clipboardContents!ParagraphEditor class removeSelector: #clipboardText!ParagraphEditor class removeSelector: #clipboardTextPut:!ParagraphEditor initialize!ParagraphEditor class removeSelector: #noteRecentClipping:!ScrollController subclass: #ParagraphEditor	instanceVariableNames: 'paragraph startBlock stopBlock beginTypeInBlock emphasisHere initialText selectionShowing otherInterval '	classVariableNames: 'ChangeText CmdActions FindText Keyboard ShiftCmdActions TextEditorYellowButtonMenu UndoInterval UndoMessage UndoParagraph UndoSelection Undone '	poolDictionaries: 'TextConstants '	category: 'Kernel-ST80 Remnants'!