'From Squeak 2.2beta of Sept 16, 1998 on 22 September 1998 at 12:37:12 am'!"Change Set:		ThreeMorePrefs-diDate:			21 September 1998Author:			Dan IngallsInstalls three new preferences...browseWithPrettyPrint [false]	Causes browsers to show code as formatted by the current prettyPrinter.fastDragWindowForMorphic [false]	Allows morphic windows to be dragged faster by only showing an outline.logDebuggerStackToFile [true]	Causes the debugger to log its call stack to a file before opening.Also inits showTimeStampsInMenuTitles to [false]."!!Browser methodsFor: 'message list' stamp: 'di 9/21/1998 23:12'!selectedMessage	"Answer a copy of the source code for the selected message selector."	| class selector method tempNames |	contents == nil ifFalse: [^ contents copy].	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	method _ class compiledMethodAt: selector.	(Sensor controlKeyPressed		or: [method fileIndex > 0 and: [(SourceFiles at: method fileIndex) == nil]])		ifTrue:		["Emergency or no source file -- decompile without temp names"		contents _ (class decompilerClass new decompile: selector in: class method: method)			decompileString.		^ contents copy].	Sensor leftShiftDown ifTrue:		["Special request to decompile -- get temps from source file"		tempNames _ (class compilerClass new						parse: method getSourceFromFile asString in: class notifying: nil)						tempNames.		contents _ ((class decompilerClass new withTempNames: tempNames)				decompile: selector in: class method: method) decompileString.		contents _ contents asText makeSelectorBoldIn: class.		^ contents copy].	contents _ class sourceCodeAt: selector.	Preferences browseWithPrettyPrint ifTrue:		[contents _ class compilerClass new			format: contents in: class notifying: nil].	contents _ contents asText makeSelectorBoldIn: class.	^ contents copy! !!ChangeSorter methodsFor: 'code pane' stamp: 'di 9/21/1998 23:57'!setContents	"return the source code that shows in the bottom pane"	| sel class strm changeType |	self clearUserEditFlag.	currentClassName ifNil: [^ contents _ ''].	class _ self selectedClassOrMetaClass.	(sel _ currentSelector) == nil		ifFalse: [changeType _ (myChangeSet atSelector: (sel _ sel asSymbol) class: class).			changeType == #remove				ifTrue: [^ contents _ 'Method has been removed (see versions)'].			changeType == #addedThenRemoved				ifTrue: [^ contents _ 'Added then removed (see versions)'].			class ifNil: [^ contents _ 'Method was added, but cannot be found!!'].			(class includesSelector: sel)				ifFalse: [^ contents _ 'Method was added, but cannot be found!!'].			contents _ class sourceCodeAt: sel.			Preferences browseWithPrettyPrint ifTrue:				[contents _ class compilerClass new					format: contents in: class notifying: nil].			^ contents _ contents asText makeSelectorBoldIn: class]		ifTrue: [strm _ WriteStream on: (String new: 100).			(myChangeSet classChangeAt: currentClassName) do: [:each |				each = #remove ifTrue: [strm nextPutAll: 'Entire class was removed.'; cr].				each = #add ifTrue: [strm nextPutAll: 'Entire class was added.'; cr].				each = #change ifTrue: [strm nextPutAll: 'Class definition was changed.'; cr].				each = #comment ifTrue: [strm nextPutAll: 'New class comment.'; cr]].			^ contents _ strm contents].! !!Debugger methodsFor: 'context stack (message list)' stamp: 'di 9/22/1998 00:26'!selectedMessage	"Answer the source code of the currently selected context."	contents _ self selectedContext sourceCode.	Preferences browseWithPrettyPrint ifTrue: [contents _ self selectedClass compilerClass new					format: contents					in: self selectedClass					notifying: nil].	^ contents _ contents asText makeSelectorBoldIn: self selectedClass! !!Debugger methodsFor: 'code pane' stamp: 'di 9/22/1998 00:21'!pcRange	"Answer the indices in the source code for the method corresponding to 	the selected context's program counter value."	| i methodNode pc end |	(selectingPC and: [contextStackIndex ~= 0])		ifFalse: [^1 to: 0].	sourceMap == nil ifTrue:		[methodNode _ self selectedClass compilerClass new			parse: contents			in: self selectedClass			notifying: nil.		sourceMap _ methodNode sourceMap.		tempNames _ methodNode tempNames.		self selectedContext method cacheTempNames: tempNames].	sourceMap size = 0 ifTrue: [^1 to: 0].	pc_ self selectedContext pc -		((externalInterrupt and: [contextStackIndex=1])			ifTrue: [1]			ifFalse: [2]).	i _ sourceMap indexForInserting: (Association key: pc value: nil).	i < 1 ifTrue: [^1 to: 0].	i > sourceMap size		ifTrue:			[end _ sourceMap inject: 0 into:				[:prev :this | prev max: this value last].			^ end+1 to: end].	^(sourceMap at: i) value! !!Debugger methodsFor: 'private' stamp: 'di 9/22/1998 00:21'!contextStackIndex: anInteger oldContextWas: oldContext	| newMethod |	contextStackIndex _ anInteger.	anInteger = 0		ifTrue:			[tempNames _ sourceMap _ contents _ nil.			self changed: #contextStackIndex.			self changed: #contents.			contextVariablesInspector object: nil.			receiverInspector object: self receiver.			^self].	(newMethod _ oldContext == nil or:		[oldContext method ~~ self selectedContext method])		ifTrue:			[tempNames _ sourceMap _ nil.			contents _ self selectedMessage.			self changed: #contents.			self pcRange "will compute tempNamesunless noFrills"].	self changed: #contextStackIndex.	tempNames == nil		ifTrue: [tempNames _ 					self selectedClassOrMetaClass parserClass new parseArgsAndTemps: contents notifying: nil].	contextVariablesInspector object: self selectedContext.	receiverInspector object: self receiver.	newMethod ifFalse: [self changed: #contentsSelection]! !!Debugger class methodsFor: 'opening' stamp: 'di 9/22/1998 00:35'!openContext: aContext label: aString contents: contentsString	"Open a notifier in response to an error, halt, or notify. A notifier view just shows a short view of the sender stack and provides a menu that lets the user open a full debugger."	| f |	<primitive: 19> "Simulation guard"	ErrorRecursion ifTrue:		[ErrorRecursion _ false.		self primitiveError: aString].	Preferences logDebuggerStackToFile ifTrue:		[FileDirectory default deleteFileNamed: 'SqueakDebug.log' ifAbsent: [].		f _ FileStream fileNamed: 'SqueakDebug.log'.		f nextPutAll: aString; cr.		aContext stack do: [:ctxt | f print: ctxt; cr].		f close].	ErrorRecursion _ true.	(Debugger context: aContext)		openNotifierContents: contentsString		label: aString.	ErrorRecursion _ false.	Processor activeProcess suspend.! !!MessageSet methodsFor: 'message list' stamp: 'di 9/21/1998 23:04'!selectedMessage	"Answer the source method for the currently selected message."	| source |	self setClassAndSelectorIn: [:class :selector | 		source _ class sourceMethodAt: selector ifAbsent: [^ 'Missing'].		Preferences browseWithPrettyPrint ifTrue:			[source _ class compilerClass new				format: source in: class notifying: nil].		^ source asText makeSelectorBoldIn: class]! !!LinkedMessageSet methodsFor: 'as yet unclassified' stamp: 'di 9/21/1998 23:03'!selectedMessage	"Answer the source method for the currently selected message.  Allow class comment, definition, and hierarchy."	| source |	self setClassAndSelectorIn: [:class :selector | 		selector first isUppercase ifFalse: [			source _ class sourceMethodAt: selector.			^ source asText makeSelectorBoldIn: self selectedClassOrMetaClass].		selector = #Comment ifTrue: [^ class comment].		selector = #Definition ifTrue: [^ class definition].		selector = #Hierarchy ifTrue: [^ class printHierarchy].		source _ class sourceMethodAt: selector.		Preferences browseWithPrettyPrint ifTrue:			[source _ class compilerClass new				format: source in: class notifying: nil].		^ source asText makeSelectorBoldIn: self selectedClassOrMetaClass]! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'di 9/21/1998 23:03'!prettyPrint	"Reformat the contents of the receiver's view, formatted, if the view is unlocked. "	| selectedClass aCompiler newText |	model messageListIndex = 0 ifTrue: [^view flash].	selectedClass _ model selectedClassOrMetaClass.		aCompiler _ selectedClass compilerClass new.		self deselect; selectInvisiblyFrom: 1 to: paragraph text size.		newText _ aCompiler			format: model contents			in: selectedClass			notifying: nil.		newText == nil ifFalse: 			[self replaceSelectionWith:				(newText asText makeSelectorBoldIn: selectedClass).			self selectAt: 1].! !!Preferences class methodsFor: 'initialization' stamp: 'di 9/21/1998 22:53'!chooseInitialSettings	"Restore the default choices for Preferences."	"Preferences chooseInitialSettings"	self setPreference: #browseWithPrettyPrint toValue: false.	self setPreference: #cautionBeforeClosing toValue: true.	self setPreference: #cmdDotEnabled toValue: true.	self setPreference: #confirmFirstUseOfStyle toValue: true.	self setPreference: #disableSounds toValue: false.	self setPreference: #editPlayerScriptsInPlace toValue: false.	self setPreference: #fastDragWindowForMorphic toValue: false.	self setPreference: #ignoreStyleIfOnlyBold toValue: true.	self setPreference: #logDebuggerStackToFile toValue: true.	self setPreference: #noviceMode toValue: false.	self setPreference: #reverseWindowStagger toValue: true.	self setPreference: #showDebugHaloHandle toValue: true.	self setPreference: #showTimeStampsInMenuTitles toValue: false.	self setPreference: #suppressCheckForSlips toValue: false.	self setPreference: #thoroughSenders toValue: true.	self setPreference: #uniformWindowColors toValue: false.	self setPreference: #warnIfNoChangesFile toValue: true.	self setPreference: #warnIfNoSourcesFile toValue: true."	self setPreference: #xxx toValue: true.	self setPreference: #xxx toValue: false."! !!SystemWindow methodsFor: 'events' stamp: 'di 9/21/1998 22:49'!handlesMouseDown: evt	"If I am not the topWindow, then my mouseDown action dominates"	Preferences fastDragWindowForMorphic ifTrue: [^ true].	^ self activeOnlyOnTop and: [self ~~ TopWindow]! !!SystemWindow methodsFor: 'events' stamp: 'di 9/21/1998 22:51'!mouseDown: evt	| cp offset newBounds |	self activate.	(Sensor redButtonPressed "If mouse is really still down after activate"		and: [self labelRect containsPoint: evt cursorPoint]) ifTrue:		[Preferences fastDragWindowForMorphic		ifTrue: [offset _ self position - Sensor cursorPoint.				newBounds _ self bounds newRectFrom:					[:f | Sensor cursorPoint + offset extent: self extent].				^ self position: newBounds topLeft]		ifFalse: [^ evt hand grabMorph: self]].	model windowActiveOnFirstClick ifTrue:		["Normally window keeps control of first click.		Need explicit transmission for first-click activity."		cp _ evt cursorPoint.		submorphs do: [:m | (m containsPoint: cp) ifTrue: [m mouseDown: evt]]]! !"Postscript:Install the default preferences..."Preferences chooseInitialSettings!