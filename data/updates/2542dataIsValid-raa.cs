'From Squeak2.9alpha of 17 July 2000 [latest update: #2540] on 30 August 2000 at 4:11:16 pm'!"Change Set:		dataIsValidDate:			30 August 2000Author:			Bob Arning- added #dataIsValid in a couple of places where bookmorphs write themselves to remote servers since these are essentially new files, even if they are not created exactly that way."!!BookMorph methodsFor: 'menu' stamp: 'RAA 8/30/2000 11:47'!saveIndexOnURL	"Make up an index to the pages of this book, with thumbnails, and store it on the server.  (aDictionary, aMorphObjectOut, aMorphObjectOut, aMorphObjectOut).  The last part corresponds exactly to what pages looks like when they are all out.  Each holds onto a SqueakPage, which holds a url and a thumbnail."	| dict list mine sf remoteFile urlList |	pages size = 0 ifTrue: [^ self].	dict _ Dictionary new.  dict at: #modTime put: Time totalSeconds.	"self getAllText MUST have been called at start of this operation."	dict at: #allText put: (self valueOfProperty: #allText).	#(color borderWidth borderColor pageSize) do: [:sel |		dict at: sel put: (self perform: sel)].	self reserveUrlsIfNeeded.	"should already be done"	list _ pages copy.	"paste dict on front below"	"Fix up the entries, should already be done"	list doWithIndex: [:out :ind |		out isInMemory ifTrue: [  			(out valueOfProperty: #SqueakPage) ifNil: [				out saveOnURLbasic].			list at: ind put: (out sqkPage copyForSaving)]].	urlList _ list collect: [:ppg | ppg url].	self setProperty: #allTextUrls toValue: urlList.	dict at: #allTextUrls put: urlList.	list _ (Array with: dict), list.	mine _ self valueOfProperty: #url.	mine ifNil: [mine _ self getStemUrl, '.bo'.		self setProperty: #url toValue: mine].	sf _ ServerDirectory new fullPath: mine.	Cursor wait showWhile: [		remoteFile _ sf fileNamed: mine.			remoteFile dataIsValid.		remoteFile fileOutClass: nil andObject: list.		"remoteFile close"].! !!SqueakPage methodsFor: 'saving' stamp: 'RAA 8/30/2000 11:43'!write	"Decide whether to write this page on the disk."	| sf remoteFile |	policy == #neverWrite ifTrue: [^ self].		"demo mode, or write only when user explicitly orders it"	"All other policies do write:   #now"	contentsMorph ifNil: [^ self].	dirty _ dirty | ((contentsMorph valueOfProperty: #pageDirty) == true).		"set by layoutChanged"	dirty == true ifTrue: [ 		sf _ ServerDirectory new fullPath: url.		"check for shared password"		"contentsMorph allMorphsDo: [:m | m prepareToBeSaved].				done in objectToStoreOnDataStream"		lastChangeAuthor _ Utilities authorInitialsPerSe ifNil: ['*'].		lastChangeTime _ Time totalSeconds.		Cursor wait showWhile: [			remoteFile _ sf fileNamed: url.	"no notification when overwriting"			remoteFile dataIsValid.			remoteFile fileOutClass: nil andObject: self.			"remoteFile close"].		contentsMorph setProperty: #pageDirty toValue: nil.		dirty _ false].! !