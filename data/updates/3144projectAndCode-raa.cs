'From Squeak2.9alpha of 17 July 2000 [latest update: #3201] on 22 December 2000 at 11:45:02 am'!"Change Set:		projectAndCodeDate:			22 December 2000Author:			Bob ArningAn EXPERIMENTAL change set that offers the option of also filing out the project change set when publishing a project. Selecting this option will permit a project that contains classes not defined in a normal image to be read in successfully.Steps to publish such a project:- File in this change set. It is experimental, so you may not want to save the image.- Go to the project you intend to publish.- Verify that the project change set contains any code required by the project which is not in the standard image.- Publish the project. - You will be asked if you want to include the changes in the change set. Answer 'Yes'"!!ImageSegment methodsFor: 'read/write segment' stamp: 'RAA 12/22/2000 11:16'!writeForExportWithSources: fName inDirectory: aDirectory changeSet: aChangeSetOrNil	"Write the segment on the disk with all info needed to reconstruct it in a new image.  For export.  Out pointers are encoded as normal objects on the disk.  Append the source code of any classes in roots.  Target system will quickly transfer the sources to its changes file."	"An experimental version to fileout a changeSet first so that a project can contain its own classes"	| fileStream temp tempFileName zipper allClassesInRoots classesToWriteEntirely methodsWithSource |	state = #activeCopy ifFalse: [self error: 'wrong state'].	(fName includes: $.) ifFalse: [		^ self inform: 'Please use ''.pr'' or ''.extSeg'' at the end of the file name'.].	temp _ endMarker.	endMarker _ nil.	tempFileName _ aDirectory nextNameFor: 'SqProject' extension: 'temp'.	zipper _ [		ProgressNotification signal: '3:uncompressedSaveComplete'.		(aDirectory oldFileNamed: tempFileName) compressFile.	"makes xxx.gz"		aDirectory 			rename: (tempFileName, FileDirectory dot, 'gz')			toBe: fName.		aDirectory			deleteFileNamed: tempFileName			ifAbsent: []	].	fileStream _ aDirectory newFileNamed: tempFileName.	fileStream fileOutChangeSet: aChangeSetOrNil andObject: self.		"remember extra structures.  Note class names."	endMarker _ temp.	"append sources"	allClassesInRoots _ arrayOfRoots select: [:cls | cls isKindOf: Behavior].	classesToWriteEntirely _ allClassesInRoots select: [ :cls | cls theNonMetaClass isSystemDefined].	methodsWithSource _ OrderedCollection new.	allClassesInRoots do: [ :cls |		(classesToWriteEntirely includes: cls) ifFalse: [			cls selectorsAndMethodsDo: [ :sel :meth |				meth sourcePointer = 0 ifFalse: [methodsWithSource add: {cls. sel. meth}].			].		].	].	(classesToWriteEntirely isEmpty and: [methodsWithSource isEmpty]) ifTrue: [zipper value. ^ self].	fileStream reopen; setToEnd.	fileStream nextPutAll: '\\!!ImageSegment new!!\\' withCRs.	methodsWithSource do: [ :each |		fileStream nextPut: $!!.	"try to pacify ImageSegment>>scanFrom:"		fileStream nextChunkPut: 'RenamedClassSourceReader formerClassName: ',				each first name printString,' methodsFor: ',				(each first organization categoryOfElement: each second) asString printString,				' stamp: ',(Utilities timeStampForMethod: each third) printString; cr.		fileStream nextChunkPut: (each third getSourceFor: each second in: each first) asString.		fileStream nextChunkPut: ' '; cr.	].	classesToWriteEntirely do: [:cls | 		cls isMeta ifFalse: [fileStream nextPutAll: 						(cls name, ' category: ''', cls category, '''.!!'); cr; cr].		cls organization			putCommentOnFile: fileStream			numbered: 0			moveSource: false			forClass: cls.	"does nothing if metaclass"		cls organization categories do: 			[:heading |			cls fileOutCategory: heading				on: fileStream				moveSource: false				toFile: 0]].	"no class initialization -- it came in as a real object"	fileStream close.	zipper value.! !!Project methodsFor: 'file in/out' stamp: 'RAA 12/22/2000 11:43'!exportSegmentFileName: aFileName directory: aDirectory	| exportChangeSet |	"An experimental version to fileout a changeSet first so that a project can contain its own classes"	"Store my project out on the disk as an *exported* ImageSegment.  Put all outPointers in a form that can be resolved in the target image.  Name it <project name>.extSeg.	Player classes are included automatically."	exportChangeSet _ nil.	(self confirm: 'Would you like to include all the changes in the change setas part of this publishing operation?') ifTrue: [exportChangeSet _ changeSet].	^ self 		exportSegmentWithChangeSet: exportChangeSet		fileName: aFileName 		directory: aDirectory! !!Project methodsFor: 'file in/out' stamp: 'RAA 12/22/2000 11:15'!exportSegmentWithChangeSet: aChangeSetOrNil fileName: aFileName directory: aDirectory	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."	| is str ans revertSeg roots holder |	"An experimental version to fileout a changeSet first so that a project can contain its own classes"world isMorph ifFalse: [	self projectParameters at: #isMVC put: true.	^ false].	"Only Morphic projects for now"world ifNil: [^ false].  world presenter ifNil: [^ false].Utilities emptyScrapsBook.world currentHand pasteBuffer: nil.	  "don't write the paste buffer."world currentHand mouseOverHandler initialize.	  "forget about any references here"	"Display checkCurrentHandForObjectToPaste."Command initialize.world clearCommandHistory.world fullReleaseCachedState; releaseViewers. world cleanseStepList.world localFlapTabs size = world flapTabs size ifFalse: [	self error: 'Still holding onto Global flaps'].world releaseSqueakPages.holder _ Project allProjects.	"force them in to outPointers, where DiskProxys are made""Just export me, not my previous version"revertSeg _ self projectParameters at: #revertToMe ifAbsent: [nil].self projectParameters removeKey: #revertToMe ifAbsent: [].roots _ OrderedCollection new.roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.roots add: world activeHand.	"; addAll: classList; addAll: (classList collect: [:cls | cls class])"roots _ roots reject: [ :x | x isNil].	"early saves may not have active hand or thumbnail"is _ ImageSegment new copySmartRootsExport: roots asArray.	"old way was (is _ ImageSegment new copyFromRootsForExport: roots asArray)"is state = #tooBig ifTrue: [^ false].str _ ''."considered legal to save a project that has never been entered"(is outPointers includes: world) ifTrue: [	str _ str, '\Project''s own world is not in the segment.' withCRs].str isEmpty ifFalse: [	ans _ (PopUpMenu labels: 'Do not write fileWrite file anywayDebug') startUpWithCaption: str.	ans = 1 ifTrue: [		revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].		^ false].	ans = 3 ifTrue: [self halt: 'Segment not written']].is writeForExportWithSources: aFileName inDirectory: aDirectory changeSet: aChangeSetOrNil.revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].holder.world flapTabs do: [:ft | 		(ft respondsTo: #unhibernate) ifTrue: [ft unhibernate]].^ true! !!ReadWriteStream methodsFor: 'fileIn/Out' stamp: 'RAA 12/22/2000 11:16'!fileOutChangeSet: aChangeSetOrNil andObject: theObject	"Write a file that has both the source code for the named class and an object as bits.  Any instance-specific object will get its class written automatically."	"An experimental version to fileout a changeSet first so that a project can contain its own classes"	self setFileTypeToObject.		"Type and Creator not to be text, so can attach correctly to an email msg"	self header; timeStamp.	aChangeSetOrNil ifNotNil: [		aChangeSetOrNil fileOutOn: self.	].	self trailer.	"Does nothing for normal files.  HTML streams will have trouble with object data"	"Append the object's raw data"	(SmartRefStream on: self)		nextPut: theObject;  "and all subobjects"		close.		"also closes me"! !