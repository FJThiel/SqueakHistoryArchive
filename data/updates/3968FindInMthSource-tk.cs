'From Squeak3.1alpha [latest update: #''Squeak3.1alpha'' of 28 February 2001 update 3961] on 2 May 2001 at 10:45:45 am'!"Change Set:		FindInMthSource-tkDate:			2 May 2001Author:			Ted KaehlerWhen searching all of the source code in the system (using Alt-E or 'method source with it'), also search the Class Comments.  Include them in the resulting MessageSet.  	Modified MessageSet to accept (aClass Comment) as a classAndSelector pair.  Since that is what class LinkedMessageSet did, remove LinkedMessageSet from the system.	Provide the command 'class comments with it' in the shift menu of all codePanes.  This searches just the comments of all classes for the selected text."!!CodeServer methodsFor: 'as yet unclassified' stamp: 'tk 5/1/2001 20:48'!chunk: request	"Return Smalltalk source code as a chunk from the changes file.  URL = machine:80/chunk.Point|min;  included are:  Point|at;   Point|Comment   Point|Hierarchy  Point|Definition   Point|class|x;y;	Meant to be received by a Squeak client, not a browser.  Reply not in HTML"	| classAndMethod set strm chunk |	classAndMethod _ request message atPin: 2.	classAndMethod _ classAndMethod copyReplaceAll: '|' with: ' '.	classAndMethod _ classAndMethod copyReplaceAll: ';' with: ':'.	set _ MessageSet messageList: (Array with: classAndMethod).	set messageListIndex: 1.	strm _ WriteStream on: (String new: 300).	strm nextChunkPutWithStyle: (set selectedMessage). "String or text"	chunk _ strm contents.	request reply: 'content-length: ', chunk size printString, PWS crlfcrlf.	request reply: chunk.! !!CodeServer methodsFor: 'as yet unclassified' stamp: 'tk 5/1/2001 20:48'!smtlk: request	"Return Smalltalk sourcecode in HTML.  URL = machine:80/myswiki.smtlk.Point|min;  included are:  Point|min;   Point|Comment   Point|Hierarchy  Point|Definition   Point|class|x;y;  NOTE: use ; instead of : in selector names!!!!!!"	| classAndMethod set |	classAndMethod _ request message atPin: 2.	classAndMethod _ classAndMethod copyReplaceAll: '|' with: ' '.	classAndMethod _ classAndMethod copyReplaceAll: ';' with: ':'.	set _ MessageSet messageList: (Array with: classAndMethod).	request reply: PWS crlf, (HTMLformatter 				evalEmbedded: (self fileContents: 'swiki',(ServerAction pathSeparator),'smtlk.html')				with: set).! !!Model methodsFor: 'text links' stamp: 'tk 5/1/2001 20:41'!addItem: classAndMethod	"Make a linked message list and put this method in it"	| list |	list _ OrderedCollection new.	list add: classAndMethod.	MessageSet openMessageList: list name: 'Linked by HyperText'.! !!MessageSet methodsFor: 'message list' stamp: 'tk 5/1/2001 18:14'!addItem: classAndMethod	"Append a classAndMethod string to the list.  Select the new item."	"Do some checks on the input?"	self okToChange ifFalse: [^ self].	messageList add: classAndMethod.	self changed: #messageList.	self messageListIndex: messageList size.! !!MessageSet methodsFor: 'contents' stamp: 'tk 5/1/2001 17:39'!selectedMessage	"Answer the source method for the currently selected message."	| source |	self setClassAndSelectorIn: [:class :selector | 		class ifNil: [^ 'Class vanished'].		selector first isUppercase ifTrue: [			selector == #Comment ifTrue: [^ class comment].			selector == #Definition ifTrue: [				^ class definitionST80: Preferences printAlternateSyntax not].			selector == #Hierarchy ifTrue: [^ class printHierarchy]].		source _ class sourceMethodAt: selector ifAbsent:			[currentCompiledMethod _ nil.			^ 'Missing'].		currentCompiledMethod _ class compiledMethodAt: selector ifAbsent: [nil].		self showingDocumentation ifTrue:			[^ self commentContents].		Preferences browseWithPrettyPrint ifTrue:			[source _ class compilerClass new				format: source in: class notifying: nil decorated: Preferences colorWhenPrettyPrinting].		self showDiffs ifTrue:			[source _ self diffFromPriorSourceFor: source].		^ source asText makeSelectorBoldIn: class]! !!MessageSet methodsFor: 'private' stamp: 'tk 5/1/2001 18:06'!contents: aString notifying: aController 	"Compile the code in aString. Notify aController of any syntax errors. 	Answer false if the compilation fails. Otherwise, if the compilation 	created a new method, deselect the current selection. Then answer true."	| category selector class oldSelector |	messageListIndex = 0 ifTrue: [^ false].	self okayToAccept ifFalse: [^ false].	self setClassAndSelectorIn: [:c :os | class_c.  oldSelector_os].	oldSelector first isUppercase ifTrue: [		oldSelector = #Comment ifTrue: [			class comment: aString. 			self clearUserEditFlag.			^ false].		oldSelector = #Definition ifTrue: [			"self defineClass: aString notifying: aController."			class subclassDefinerClass				evaluate: aString				notifying: aController				logged: true.			self clearUserEditFlag. 			^ false].		oldSelector = #Hierarchy ifTrue: [			self inform: 'To change the hierarchy, edit the class definitions'. 			^ false]].	"Normal method accept"	category _ class organization categoryOfElement: oldSelector.	selector _ class compile: aString				classified: category				notifying: aController.	selector == nil ifTrue: [^ false].	self noteAcceptanceOfCodeFor: selector.	selector == oldSelector ifFalse:		[self reformulateListNoting: selector].	contents _ aString copy.	self changed: #annotation.	^ true! !!MessageSet methodsFor: 'private' stamp: 'tk 5/1/2001 18:08'!initializeMessageList: anArray	"Initialize the message list from anArray, which must contain objects which, when sent #asString, answer a string in standard format such as 'Rectangle width'"	messageList _ anArray collect: [:each |		MessageSet parse: each asString toClassAndSelector: [:class :sel |			class ifNotNil: [class name , ' ' , sel , ' {' , 				((class organization categoryOfElement: sel) ifNil: ['']) , '}']]]		thenSelect:			[:each | each notNil].	messageListIndex _ 0.	contents _ ''! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'tk 5/1/2001 21:45'!classCommentsContainingIt	"Open a browser class comments which contain the current selection somewhere in them."	self lineSelectAndEmptyCheck: [^ self].	self terminateAndInitializeAround: [		Smalltalk browseClassCommentsWithString: self selection string]! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'tk 5/1/2001 21:33'!shiftedYellowButtonMenu	"Answer the menu to be presented when the yellow button is pressed while the shift key is down"	^ SelectionMenu fromArray: #(		('set font... (k)'					offerFontMenu)		('set style... (K)'					changeStyle)		('set alignment...'				chooseAlignment)		-		('explain'						explain)		('pretty print'					prettyPrint)		('pretty print with color'		prettyPrintWithColor)		('file it in (G)'					fileItIn)		('tiles from it'					selectionAsTiles)		('recognizer (r)'					recognizeCharacters)		('spawn (o)'						spawn)		-		('definition of word'				wordDefinition)		('verify spelling of word'		verifyWordSpelling)"		('spell check it'					spellCheckIt)	"		('translate it'					translateIt)		('choose language'				languagePrefs)		-		('browse it (b)'					browseIt)		('senders of it (n)'				sendersOfIt)		('implementors of it (m)'		implementorsOfIt)		('references to it (N)'			referencesToIt)		('selectors containing it (W)'		methodNamesContainingIt)		('method strings with it (E)'		methodStringsContainingit)		('method source with it'			methodSourceContainingIt)		('class comments with it'		classCommentsContainingIt)		-		('save contents to file...'			saveContentsInFile)		('send contents to printer'		sendContentsToPrinter)		('printer setup'					printerSetup)		-		('special menu...'				presentSpecialMenu)		('more...'						yellowButtonActivity))! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'tk 5/1/2001 21:37'!classCommentsContainingIt	self handleEdit: [textMorph editor classCommentsContainingIt]! !!SwikiAction methodsFor: 'URL processing' stamp: 'tk 5/1/2001 20:49'!smtlk: request	"Return Smalltalk sourcecode.  URL =machine:80/myswiki.smtlk.Point|at;  included are:  Point|at:Point|Comment   Point|Hierarchy  Point|Definition   Point|class|x;y;  NOTE:use ; instead of : in selector names!!!!!!"	| classAndMethod set |	classAndMethod _ request message atPin: 3.	classAndMethod _ classAndMethod copyReplaceAll: '|' with: ' '.	classAndMethod _ classAndMethod copyReplaceAll: ';' with: ':'.	set _ MessageSet messageList: (Array with: classAndMethod).	request reply: PWS crlf, ((self formatterFor: 'smtlk') format: set).! !!SystemDictionary methodsFor: 'browsing' stamp: 'tk 5/2/2001 10:43'!browseClassCommentsWithString: aString	"Smalltalk browseClassCommentsWithString: 'my instances' "	"Launch a message list browser on all class comments containing aString as a substring."	| caseSensitive suffix list |	(caseSensitive _ Sensor shiftPressed)		ifTrue: [suffix _ ' (case-sensitive)']		ifFalse: [suffix _ ' (use shift for case-sensitive)'].	list _ Set new.	Cursor wait showWhile: [		Smalltalk allClassesDo: [:class | 			(class organization classComment asString findString: aString 							startingAt: 1 caseSensitive: caseSensitive) > 0 ifTrue: [								list add: class name , ' Comment']]].	^ self browseMessageList: list asSortedCollection		name: 'Class comments containing ' , aString printString , suffix autoSelect: aString! !!SystemDictionary methodsFor: 'retrieving' stamp: 'tk 5/1/2001 21:16'!allMethodsWithSourceString: aString matchCase: caseSensitive	"Answer a SortedCollection of all the methods that contain, in source code, aString as a substring.  Search the class comments also"	| list classCount |	list _ Set new.'Searching all source code...'displayProgressAt: Sensor cursorPointfrom: 0 to: Smalltalk classNames sizeduring:	[:bar | classCount _ 0.	Smalltalk allClassesDo:		[:class | bar value: (classCount _ classCount + 1).		(Array with: class with: class class) do:			[:cl | 				cl selectorsDo: [:sel | 					((cl sourceCodeAt: sel) findString: aString 						startingAt: 1 caseSensitive: caseSensitive) > 0 ifTrue: [							sel == #DoIt ifFalse: [list add: cl name , ' ' , sel]]].				(cl organization classComment asString findString: aString 						startingAt: 1 caseSensitive: caseSensitive) > 0 ifTrue: [							list add: cl name , ' Comment'].			]]].	^ list asSortedCollection! !!TextLink methodsFor: 'as yet unclassified' stamp: 'tk 5/1/2001 18:17'!actOnClickFor: aMessageSet	"Add to the end of the list.  'aClass selector', 'aClass Comment', 'aClass Definition', 'aClass Hierarchy' are the formats allowed."	aMessageSet addItem: classAndMethod.	^ true! !Model removeSelector: #linkMethod:!Smalltalk removeClassNamed: #LinkedMessageSet!