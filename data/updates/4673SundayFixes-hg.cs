'From Squeak3.2alpha of 1 November 2001 [latest update: #4461] on 11 November 2001 at 9:26:32 pm'!!Module methodsFor: 'system conversion' stamp: 'hg 11/11/2001 19:43'!declareExternalRefs   	"Root declareExternalRefs"	"For all classes in this module, identify all references to unresolved globals.	For each of these, call another method to declare the global's defining module."	| n refsList |	refsList _ self deepUnresolvedRefs.	self resetOutOfScopeCache.	'Declaring all external references in source code...'		displayProgressAt: Sensor cursorPoint		from: 0 to: refsList size		during:		[:bar | n _ 0.		refsList do:			[:ref | bar value: (n_ n+1).			ref methodSymbol == #classCreationMessage ifFalse: [				ref actualClass module declareExternalRefsForSelector: ref methodSymbol inClass: ref actualClass]]].	self zeroOutOfScopeCache.	^refsList size! !!ModuleRefactorer methodsFor: 'public' stamp: 'hg 11/11/2001 21:03'!runRefactorings	"Trigger the whole set of refactorings in this class."	Preferences strongModules ifTrue: [		Module smalltalk newChanges: 			(ChangeSet basicNewNamed: self class name, ' Reorganization')].	self ensurePrerequisiteVersions.	self 		putAwayUnknownModules;		moveModules; 		reorderModules.	self moveGlobalsToModules.	self installModuleDeclarations.	self refactorClasses.	self convertPools.	self removeModules.	self installRepositories.		self incrementVersions.		Preferences strongModules 		ifTrue: [			Module root rewriteIndirectRefs.			Module smalltalk newChanges: (ChangeSet basicNewNamed: 'PostReorganization').			ChangeSorter initialize]! !!ModuleRefactorer methodsFor: 'moving modules' stamp: 'hg 11/11/2001 21:02'!knownSqueakSubmodules	"recognize all to do nothing by default"	^Module squeak submodules collect: [:mod | mod name]! !!ModuleRefactorer methodsFor: 'moving modules' stamp: 'hg 10/28/2001 20:33'!moveModule: mod toPath: path	| ref afterParentPath afterParent |	(Module fromPath: path forceCreate: false) ifNotNil: [		self error: 'Module at target path already exists'].	ref _ mod parentModule removeNeighborModule: mod.	afterParentPath _ path allButLast.	afterParent _ Module fromPath: afterParentPath forceCreate: true.	^afterParent 		submodule: mod name: path last 		version: ref specifiedVersion importNames: ref importNames! !!ModuleRefactorer methodsFor: 'moving modules' stamp: 'hg 10/28/2001 20:34'!moveModules		| moveList |	moveList _ self newPlacesForModules.	moveList pairsDo: [:before :after |		(Module fromPath: before forceCreate: false) doIfNotNil: [:mod |			self moveModule: mod toPath: after]].		! !!ModuleRefactorer methodsFor: 'moving modules' stamp: 'hg 11/11/2001 21:26'!putAwayUnknownModules	"move all modules that resulted for unknown (user-added) system categories to under Temporary"	| knownSubmodules parentPathForUnknowns newPath |	knownSubmodules _ self knownSqueakSubmodules.	parentPathForUnknowns _ #(Temporary).	Module squeak submodules do: [:mod |		(knownSubmodules includes: mod name) ifFalse: [			newPath _ parentPathForUnknowns copyWith: mod name.			Transcript cr; show: 'Unrecognized module (probably user-added system category) ', mod name, ' moved to ', newPath literalPrintString.			self moveModule: mod toPath: newPath]]! !!ModuleRefactorer methodsFor: 'converting pools' stamp: 'hg 11/11/2001 19:55'!convertPoolNamed: poolName inModule: homePath toPoolModule: poolModuleName	"pool dictionaries are now redundant, as modules can be used to collect shared variables. Change current pools to modules"	| poolModule users homeModule poolDictionary |	homeModule _ Module fromPath: homePath forceCreate: true.	poolDictionary _ homeModule definitionFor: poolName ifAbsent: [nil].	[poolModule _ Module fromPath: (homePath copyWith: poolModuleName) forceCreate: true]		on: Warning do: [:ex | ex resume: true].		poolModuleName = #Constants ifFalse: [		"Make pool module name reachable, e.g. TextConstants"		poolModule parentModule exportName: poolModuleName.		Module smalltalk redefineName: poolModuleName as: poolModule export: false].	poolName ~= poolModuleName ifTrue: [		homeModule removeName: poolName].	"use low-level method to avoid adding pool vars to Smalltalk"	poolDictionary associationsDo: [:ass |		poolModule addAssoc: ass key asSymbol->ass value export: true].	users _ Set new.	Module root deepClassesDo: [:class | 		(class sharedPools identityIncludes: poolDictionary) ifTrue: [users add: class]].	users do: [:class |		(class module hasNeighborModule: poolModule) ifFalse: [			class module externalModule: poolModule alias: nil version: nil importNames: true].		class privateRemoveSharedPool: poolDictionary].	"self testRecompileClasses: users."	"methodRefs _ Smalltalk allCallsOn: (Smalltalk associationAt: k)"! !!FromVersion0p0000to0001 methodsFor: 'moving modules' stamp: 'hg 11/11/2001 21:11'!knownSqueakSubmodules	"all but these are moved to under #(Temporary)"	^#(Kernel Collections Graphics Sound Speech Tools System Network VMConstruction ST80 Morphic Balloon Balloon3D FFI SUnit Framework SCAN Genie MPEG3 StarSqueak MPEG Protocols)! !