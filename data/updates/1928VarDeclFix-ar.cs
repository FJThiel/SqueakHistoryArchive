'From Squeak2.8alpha of 16 February 2000 [latest update: #1927] on 10 March 2000 at 6:01:07 pm'!"Change Set:		VarDeclFix-arDate:			10 March 2000Author:			Andreas RaabFixes a zillion problems trying to compile the VM after change set 1908 (hey, has anyone ever tested 1908?)."!!CCodeGenerator methodsFor: 'public' stamp: 'ar 3/10/2000 17:58'!var: varName declareC: declarationString	"Record the given C declaration for a global variable."	variableDeclarations at: varName asString put: declarationString.! !!CCodeGenerator methodsFor: 'inlining' stamp: 'ar 3/10/2000 17:59'!inlineDispatchesInMethodNamed: selector localizingVars: varsList	"Inline dispatches (case statements) in the method with the given name."	| m varString |	m _ self methodNamed: selector.	m = nil ifFalse: [		m inlineCaseStatementBranchesIn: self localizingVars: varsList.		m parseTree nodesDo: [ :n |			n isCaseStmt ifTrue: [				n customizeShortCasesForDispatchVar: #currentBytecode.			].		].	].	variables _ variables asOrderedCollection.	varsList do: [ :v |		varString _ v asString.		variables remove: varString ifAbsent: [].		(variableDeclarations includesKey: varString) ifTrue: [			m declarations at: v asString put: (variableDeclarations at: varString).			variableDeclarations removeKey: varString.		].	].! !!CCodeGenerator methodsFor: 'C code generator' stamp: 'ar 3/10/2000 17:58'!emitCVariablesOn: aStream	"Store the global variable declarations on the given stream."	| varString |	aStream nextPutAll: '/*** Variables ***/'; cr.	variables asSortedCollection do: [ :var |		varString _ var asString.		(variableDeclarations includesKey: varString) ifTrue: [			aStream nextPutAll: (variableDeclarations at: varString), ';'; cr.		] ifFalse: [			"default variable declaration"			aStream nextPutAll: 'int ', var, ';'; cr.		].	].	aStream cr.! !!TestCodeGenerator methodsFor: 'transforming' stamp: 'ar 3/10/2000 17:59'!var: varName as: aClass	"Record the given C declaration for a global variable"	variableDeclarations at: varName asString put: (aClass ccgDeclareCForVar: varName)! !