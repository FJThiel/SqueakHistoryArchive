'From Squeak 2.3 beta of Nov 25, 1998 on 4 January 1999 at 7:31:26 am'!"Change Set:		roundUp-swDate:			4 January 1999Author:			Scott WallaceDecouples the 'round up' operation from the pressing of STOP and STEP buttons.Adds phrases for 'round up strays' and 'unhide hidden objects' to the viewer for playfields.Fixes a bug in the creation of step buttons that made them sometimes not work."!!PasteUpMorph methodsFor: 'misc' stamp: 'sw 1/1/1999 16:08'!stepAll	self presenter allExtantPlayers do:		[:aPlayer | 			aPlayer startRunning; step; stopRunning]! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 1/1/1999 16:08'!stopRunningAll	"Stop running all scripted morphs.  Triggered by user hitting STOP button"	self presenter allExtantPlayers do: [:aPlayer |		aPlayer stopRunning].	self world updateStatusForAllScriptEditors! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 1/1/1999 16:04'!unhideHiddenObjects	self allMorphsDo:		[:m | m show]! !!Player methodsFor: 'slots-kernel' stamp: 'sw 1/1/1999 16:01'!tilePhrasesSpecsForCategory: aCategory	"Return an array of slot and script names and info for use in a viewer on the receiver.  These can be of two flavors - script and slot.		(slot		heading		number				readWrite	getHeading		setHeading:)		(script		command 	wearCostumeOf: 	player)"	| aList nameString isWorld |	isWorld _ self hasCostumeOfClass: WorldMorph.	(aCategory = 'instance variables') ifTrue:		[^ self slotNames collect: [:aName |		nameString _ aName asString capitalized.		Array			with:	#slot			with: 	aName 								"name"			with: 	(self typeForSlot: aName asSymbol)	"type"			with:	#readWrite							"r/w"			with:	('get', nameString) asSymbol		"get selector"			with:	('set', nameString, ':') asSymbol]].	"set selector"	(aCategory = 'scripts') ifTrue:		[^ self tileScriptCommands].	(aCategory = 'basic') ifTrue:		[aList _ isWorld			ifFalse:				[#((slot x) (slot y) (slot heading) (slot colorUnder) (script forward:) (script turn:) (script beep:))]			ifTrue:				[#((script beep:))]].	(aCategory = 'tests') ifTrue:		[aList _ isWorld			ifFalse:				[#((slot isOverColor) (slot isUnderMouse) (slot colorSees))]			ifTrue:				[#()]].	(aCategory = 'color & border') ifTrue:		[aList _ isWorld			ifFalse:				[#((slot color) (slot colorUnder) (slot borderColor) (slot borderWidth))]			ifTrue:				[#((slot color))]].	(aCategory = 'geometry') ifTrue:		[aList _ #((slot left) (slot right) (slot top) (slot bottom) (slot width) (slot height) (slot x) (slot y) (slot heading))].	(aCategory = 'miscellaneous') ifTrue:		[aList _ isWorld			ifFalse:				[#((script show) (script hide) (script wearCostumeOf:) (script startScript:) (script stopScript:) (script pauseScript:))]			ifTrue:				[#((script startScript:) (script stopScript:) (script pauseScript:))]].	(aCategory = 'motion') ifTrue:		[aList _ #((slot x) (slot y) (slot heading) (script forward:) (script moveToward:) (script turn:) (script bounce:) (script wrap) (script goToRightOf:))].	(aCategory = 'pen trails') ifTrue:		[aList _ #((script liftAllPens) (script lowerAllPens) (script clearTurtleTrails))].	(aCategory = 'pen use') ifTrue:		[aList _ #((slot penColor) (slot penSize) (slot penDown))].	(aCategory = 'card/stack') ifTrue:		[aList _ #((script goToNextCard) (script goToPreviousCard) (script deleteCard) (script newCard))].	(aCategory = 'joystick') ifTrue:		[aList _ #((slot amount) (slot angle) (slot leftRight) (slot upDown))].	(aCategory = 'playfield') ifTrue:		[aList _ #((script initiatePainting) (slot cursor) (slot valueAtCursor) (slot mouseX) (slot mouseY)(script roundUpStrays) (script unhideHiddenObjects))].	(aCategory = 'book navigation') ifTrue:		[aList _ #((script nextPage) (script previousPage) (script firstPage) (script lastPage) (script goto:))].	aList ifNil:		[^ (Player organization categories includes: aCategory)			ifTrue:				[self tilePhraseSpecsForPlayerCategory: aCategory]			ifFalse:				[self error: 'faulty category: ', aCategory.				Array new]].	^ aList collect: [:aPair | self phraseSpecFor: aPair]! !!Player methodsFor: 'misc' stamp: 'sw 1/1/1999 22:28'!roundUpStrays	self sendMessageToCostume: #roundUpStrays! !!Player methodsFor: 'misc' stamp: 'sw 1/1/1999 22:27'!unhideHiddenObjects	self sendMessageToCostume: #unhideHiddenObjects! !!StandardScriptingSystem methodsFor: 'universal slots & scripts' stamp: 'sw 1/1/1999 16:03'!initStandardScriptInfo	"ScriptingSystem initStandardScriptInfo"	StandardScriptInfo _ Dictionary new.	#(	(command beep: sound)		(command bounce: sound)		(command clearTurtleTrails)		(command forward: number)		(command goToNextCard)		(command goToPreviousCard)		(command goToRightOf: player)		(command hide)		(command initiatePainting)		(command liftAllPens)		(command lowerAllPens)		(command makeNewDrawingIn: player)		(command moveToward: player)		(command pauseScript: string)		(command roundUpStrays)		(command show)		(command startScript: string)		(command stopScript: string)		(command turn: number)		(command unhideHiddenObjects)		(command wearCostumeOf: player)		(command wrap)		(command newCard)		(command deleteCard)		(command initiatePainting)		(command nextPage)		(command previousPage)		(command firstPage)		(command lastPage)		(command goto: player ))	do:		[:anArray | StandardScriptInfo at: anArray second put: anArray]! !!StandardScriptingSystem methodsFor: 'script-control' stamp: 'sw 1/4/1999 07:31'!stepButton	| aButton |	self flag: #deferred.  "ambiguity about recipients"	aButton _ ThreePhaseButtonMorph new.		aButton			image:  (ScriptingSystem formAtKey: 'StepPicOn');			offImage: (ScriptingSystem formAtKey: 'StepPic');			pressedImage:  (ScriptingSystem formAtKey: 'StepPicOn');			arguments: (Array with: nil with: aButton);		 	actionSelector: #stepStillDown:with:; 			target: self;			setNameTo: 'Step Button'; 			setProperty: #scriptingControl toValue: true;			actWhen: #whilePressed;			on: #mouseDown send: #stepDown:with: to: self;			on: #mouseStillDown send: #stepStillDown:with: to: self;			on: #mouseUp send: #stepUp:with: to: self;			setBalloonText:'Run every paused script exactly once.  Keep the mouse button down over "Step" and everything will keep running until you release it'.	^ aButton! !"Postscript:"ScriptingSystem initStandardScriptInfo.ScriptingSystem resetStandardPartsBin.ScriptingSystem newStandardPartsBin!