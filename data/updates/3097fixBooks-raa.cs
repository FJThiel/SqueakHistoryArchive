'From Squeak2.9alpha of 13 June 2000 [latest update: #3151] on 9 December 2000 at 7:09:12 pm'!"Change Set:		fixBooksDate:			9 December 2000Author:			Bob Arning- fix up a discrepancy in piano roll protocols- restore bookmmorph thumbnail ability to drop into piano rolls"!!AbstractMediaEventMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 18:45'!justDroppedIntoPianoRoll: pianoRoll event: evt		| ambientEvent |	startTimeInScore _ pianoRoll timeForX: self left.	ambientEvent _ AmbientEvent new 		morph: self;		time: startTimeInScore.	pianoRoll score addAmbientEvent: ambientEvent.	"self endTime > pianoRoll scorePlayer durationInTicks ifTrue:		[pianoRoll scorePlayer updateDuration]"! !!BookPageThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 18:50'!addMorphsTo: morphList pianoRoll: pianoRoll eventTime: t betweenTime: leftTime and: rightTime	t > rightTime ifTrue: [^ self].  	t < leftTime ifTrue: [^ self].	morphList add: (self left: (pianoRoll xForTime: t)).! !!BookPageThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 19:05'!justDroppedInto: newOwner event: anEvent	super justDroppedInto: newOwner event: anEvent.	(newOwner isKindOf: PianoRollScoreMorph) ifTrue: [		self justDroppedIntoPianoRoll: newOwner event: anEvent	].! !!BookPageThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 19:03'!justDroppedIntoPianoRoll: pianoRoll event: evt		| ambientEvent startTimeInScore |	startTimeInScore _ pianoRoll timeForX: self left.	ambientEvent _ AmbientEvent new 		morph: self;		time: startTimeInScore.	pianoRoll score addAmbientEvent: ambientEvent.	"self endTime > pianoRoll scorePlayer durationInTicks ifTrue:		[pianoRoll scorePlayer updateDuration]"! !!BookPageThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 18:28'!pauseFrom: x! !!BookPageThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 18:29'!resetFrom: scorePlayer	"Ignored"! !!BookPageThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 18:30'!resumeFrom: scorePlayer	"Ignored"! !!PianoRollScoreMorph methodsFor: 'dropping/grabbing' stamp: 'RAA 12/9/2000 18:46'!acceptDroppingMorph: aMorph event: evt	"In addition to placing this morph in the pianoRoll, add a corresponding	event to the score so that it will always appear when played, in addition	to possibly triggering other actions"	| ambientEvent |	"due to some out-of-sync updating, this method is probably going away"	1 = 1 ifTrue: [		^super acceptDroppingMorph: aMorph event: evt.	].	ambientEvent _ AmbientEvent new morph: aMorph;							time: (self timeForX: aMorph left).	super acceptDroppingMorph: aMorph event: evt.	score addAmbientEvent: ambientEvent.! !!SoundEventMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/9/2000 18:48'!justDroppedIntoPianoRoll: newOwner event: evt		| startX lengthInTicks endX |	super justDroppedIntoPianoRoll: newOwner event: evt.	startTimeInScore _ newOwner timeForX: self left.	lengthInTicks _ newOwner scorePlayer ticksForMSecs: sound duration * 1000.0.	endTimeInScore _ startTimeInScore + lengthInTicks.	endTimeInScore > newOwner scorePlayer durationInTicks ifTrue:		[newOwner scorePlayer updateDuration].	startX _ newOwner xForTime: startTimeInScore.	endX _ newOwner xForTime: endTimeInScore.	self width: endX - startX.! !