'From Squeak 2.4b of April 23, 1999 on 19 July 1999 at 7:12:21 pm'!"Change Set:		ClassFixes-arDate:			19 July 1999Author:			Andreas RaabThis change set is only a doIt for fixing several problems in the class hierarchy. It does not fix all them though (this is to dangerous) but it fixes and reports a bunch of them."| classes metas cls obsolete meta obsClasses obsMetas uniClassList fixMe |"Step 1: Fix the Metaclass hierarchy for nil subclasses"Utilities informUser:'Fixing subclasses of nil' during:[	Smalltalk garbageCollect.	(Metaclass allInstances select:[:m| 		"Select subclasses of nil ..."		m soleInstance superclass == nil and:[			"... that are VALID meta classes..."			m soleInstance class == m and:[				"... where the metaclass is not a subclass of Class"				m superclass ~~ Class]]]) do:[:m|		m superclass: Class.		Class addSubclass: m.		Smalltalk changes changeClass: m from: m.	].]."Step 2: Fetch all behaviors in the system."classes _ IdentitySet new: 3000."Collect all behaviors in the system"Utilities informUser:'Collecting all behaviors in the system ...' during:[	Smalltalk garbageCollect.	"All all the known instances of Metaclasses"	Metaclass allInstancesDo:[:m|		classes add: m.		classes add: m soleInstance].	"Add the superclasses of these objects (the hard way)"	classes asArray do:[:c|		cls _ c.		[cls _ cls instVarAt: 1.		cls == nil] whileFalse:[classes add: cls]	].	metas _ (classes select:[:c| c isMeta]) asArray.	classes removeAll: metas.	classes _ classes asArray.]."Step 3: Now that we have all of them, check which ones are obsolete"Utilities informUser:'Collecting obsolete classes' during:[	obsolete _ IdentitySet new.	"First, only the non-meta classes"	1 to: classes size do:[:i|		cls _ classes at: i.		(Smalltalk at: cls name ifAbsent:[nil]) == cls			ifFalse:[obsolete add: cls; add: cls class]].	"Now the meta classes"	1 to: metas size do:[:i|		meta _ metas at: i.		cls _ meta soleInstance.		(cls == nil			or:[cls class ~~ meta				or:[obsolete includes: cls]])			ifTrue:[obsolete add: meta]].	"Reject Uniclasses"	uniClassList _ IdentitySet new.	obsolete asArray do:[:c|		c isMeta ifFalse:[			c isSystemDefined not ifTrue:[				uniClassList add: c; add: c class.				obsolete remove: c; remove: c class]]].	obsClasses _ (obsolete select:[:c| c isMeta not]).	obsMetas _ (obsolete select:[:m| m isMeta]).	classes _ classes reject:[:c| obsClasses includes: c].	metas _ metas reject:[:c| obsMetas includes: c].]."Step 4: Recreate the subclasses (but leave out all obsoletes)"Utilities informUser:'Recreating class hierarchy' during:[	fixMe _ false.	"Remove all subclasses"	classes do:[:c|		cls _ c subclasses.		cls do:[:sub| c removeSubclass: sub].		c subclasses isEmpty ifFalse:[			fixMe ifFalse:[				self notify:'Your seems to be seriously broken.Proceed to try repairing it.'.				fixMe _ true].			i _ c class allInstVarNames indexOf:'subclasses'.			i = 0 ifFalse:[c instVarAt: i put: nil]]].	"Recreate all subclasses"	classes do:[:c|		c superclass == nil			ifTrue:[Class addSubclass: c class]			ifFalse:[c superclass addSubclass: c]].]."Step 5: Find obsolete classes that are not marked"classes _ obsClasses reject:[:c| c name beginsWith: 'AnObsolete'].(classes isEmpty) ifFalse:[	fixMe _ self confirm:	'Your system contains obsolete classes that are not marked as obsolete. Shall I mark these classes as obsolete? (YES is recommended)'.	fixMe ifTrue:[classes do:[:c| c instVarAt: (c class allInstVarNames indexOf: 'name') put: 'AnObsolete',c name]].].obsClasses isEmpty ifFalse:[	self inform:'Note: Your system does contain a bunch of obsolete classes.You should try to track all the references to those down for a cleanup.'].!