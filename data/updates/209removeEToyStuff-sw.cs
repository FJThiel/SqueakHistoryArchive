'From Squeak 2.1 of June 30, 1998 on 22 August 1998 at 11:06:19 pm'!"Change Set:		removeEToyStuff-swDate:			22 August 1998Author:			Scott WallaceTakes the first steps toward jettisoning all EToyXXX classes, getting rid of everything other than EToySystem and EToyParameters, which will follow in due course.All residual stuff from EToySystem (class-side) has been moved (er, copied, for now) to the instance side of StandardScriptingSystem, whose lone instance is lodged in the global variable #ScriptingSystem.  In particular, guessDOLProxy and serverUrls are now found in StandardScriptingSystem.There's still work to be done about stripping out disney stuff for external release, and we need to choose some global flag or Preference or something to indicate whether we're in an internal or external system, etc."!!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 8/22/1998 22:13'!cleanupsForRelease	"Miscellaneous space cleanups to do before a release."	"EToySystem cleanupsForRelease"	Socket deadServer: ''.  "Don't reveal any specific server name"	HandMorph initialize.  "free cached ColorChart"	PaintBoxMorph releaseTemporaryForms.	PaintBoxMorph prototype stampHolder clear.  "clear stamps"	PaintBoxMorph prototype delete.  "break link to world, if any"	Smalltalk removeKey: #AA ifAbsent: [].	Smalltalk removeKey: #BB ifAbsent: [].	Smalltalk removeKey: #CC ifAbsent: [].	Smalltalk removeKey: #DD ifAbsent: [].	Smalltalk removeKey: #Temp ifAbsent: [].	ScriptingSystem reclaimSpace.	Smalltalk cleanOutUndeclared.	Smalltalk reclaimDependents.	Smalltalk forgetDoIts.	Smalltalk removeEmptyMessageCategories.	Symbol rehash! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 8/22/1998 22:09'!guessDOLProxy	"Decide if we need to go through the DOL proxy server to reach the EToy servers, and set the HTTPSocket proxy server appropriately."	| addr s |	Socket initializeNetwork.	"try several times with increasing timeout values"	#(10 20 40 80) do: [:seconds |		"can we see the DOL proxy server?"		addr _ NetNameResolver addressForName: 'web-proxy.online.disney.com' timeout: seconds.		addr ifNotNil: [			HTTPSocket useProxyServerNamed: 'web-proxy.online.disney.com' port: 8080.			^ self].		"can we connect to an EToy server?"		self serverUrls do: [:serverName |			addr _ NetNameResolver addressForName: (serverName copyUpTo: $/) timeout: seconds.			addr ifNotNil: [				s _ HTTPSocket new.				s connectTo: addr port: 80.				s waitForConnectionUntil: (Socket deadlineSecs: seconds).				s isConnected ifTrue: [					s destroy.					HTTPSocket stopUsingProxyServer.					^ self].				s destroy]]]! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 8/22/1998 22:12'!prepareForExternalReleaseNamed: aReleaseName	"ScriptingSystem prepareForExternalReleaseNamed: '2.2Beta'"	self stripMethodsForExternalRelease.	self class compile: 'guessDOLProxy	"deleted for external release"' classified: 'stripped'.	ScriptingSystem saveFormsToFileNamed: aReleaseName, '.Dis.Forms'.	ScriptingSystem stripGraphicsForExternalRelease.	ScriptingSystem cleanupsForRelease.	ScreenController initialize.! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 8/22/1998 22:14'!serverUrls	"Private to Disney; stripped before external release"	| list |	list _  #('doltest1.disney.com/squeak/'	'www.webpage.com/~kaehler2/').	(list includes: Socket deadServer) ifTrue: [		list _ list asOrderedCollection.		list remove: Socket deadServer ifAbsent: [].		list addLast: Socket deadServer].	^ list asArray! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 8/22/1998 22:12'!stripGraphicsForExternalRelease	"ScriptingSystem stripGraphicsForExternalRelease"	| aDict replacement |	aDict _ ScriptingSystem formDictionary.	replacement _ aDict at: 'Gets'.	#('BadgeMiniPic' 'BadgePic' 'Broom' 'CedarPic' 'CollagePic' 'CoverMain' 'CoverSpiral' 'CoverTexture' 'Fred' 'ImagiPic' 'KayaPic' 'StudioPic')		do:			[:aKey | aDict at: aKey put: replacement]! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sw 8/22/1998 22:41'!readDocumentFile	"Process system updates. Read a document file, if one was provided. Start application."	| fileName object |	self processUpdates.	fileName _ Smalltalk getSystemAttribute: 2.	((fileName ~~ nil) and: [fileName size > 0])		ifTrue: [			(fileName asLowercase beginsWith: 'http://')				ifTrue: [					"fetch remote file"					HTTPSocket httpFileIn: fileName]				ifFalse: [					"read local file"					object _ (FileStream oldFileNamed: fileName) fileInObjectAndCode.					"if launching a .sqo document, send open to the final object"					(fileName endsWith: '.sqo') ifTrue: [object open]]]		ifFalse: [			(Preferences valueOfFlag: #startImagineeringStudio)				ifTrue: [ScriptingSystem openImagineeringStudio]].! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sw 8/22/1998 22:38'!makeExternalRelease		"Smalltalk makeExternalRelease"	(self confirm: self version , 'Is this the correct version designation?If not, choose no, and fix it.') ifFalse: [^ self].	(Object classPool at: #DependentsFields) size > 1 ifTrue: [self halt].	Browser initialize.	Undeclared isEmpty ifFalse: [self halt].	Smalltalk garbageCollect.	Smalltalk obsoleteClasses isEmpty ifFalse: [self halt].	Display newDepth: 8.	Project allInstancesDo: [:p | p displayDepth: 8].	ScriptingSystem prepareForExternalReleaseNamed: 'Squeak2.1'.	Utilities removeDisney.	ScriptingSystem class removeSelector: #serverUrls.	#(Helvetica Palatino ComicAll) do:		[:k | TextConstants removeKey: k].	SystemDictionary removeSelector: #makeExternalRelease.	Symbol rehash.	self halt: 'Ready to condense sources'.	Smalltalk condenseSources! !!TrashCanMorph methodsFor: 'private' stamp: 'sw 8/22/1998 22:44'!findActivePaintBox	"If painting, return the active PaintBoxMorph. If not painting, or if the paint box cannot be found, return nil."	| w m |	w _ self world.	w ifNil: [^ nil].	(w findA: SketchEditorMorph) ifNil: [^ nil].  "not painting"	(m _ w findA: PaintBoxMorph) ifNotNil: [^ m].	^ nil! !!TrashCanMorph methodsFor: 'private' stamp: 'sw 8/22/1998 22:45'!openTrash	"User wants to see what is in the trash."	| paintBox |	"See if a stamp is being dropped into the trash. It is not held by the hand."	(paintBox _ self findActivePaintBox) ifNotNil: [		paintBox getSpecial == #stamp: ifTrue: [			paintBox deleteCurrentStamp.  "throw away stamp..."			self primaryHand showTemporaryCursor: nil.			^ self]].	  "... and don't open trash"! !!Utilities class methodsFor: 'fetching updates' stamp: 'sw 8/22/1998 22:10'!absorbUpdatesFromServer	"Go to two common servers and look for updates.  Do not bring themto the user's disk.  A file on the server called updates.list has the namesof the last N update files.  We look backwards for the first one we do nothave, and start there bringing them in.  tk 9/10/97""* To add a new update:  Name it starting with a new two-digit code.  * Do not use %, /, *, space, or more than one period in the name of an update file.* The update name does not need to have any relation to the version name.* Figure out which versions of the system the update makes sense for.* Add the name of the file to each version's category below.* Put this file and the update file on all of the servers.** To make a new version of the system:  Pick a name for it (no restrictions)* Put # and exactly that name on a new line at the end of this file.* During the release process, fill in exactly that name in the dialog box.* Put this file on the server.""wod 6/18/1998: stop after first failure""Utilities absorbUpdatesFromServer"| doc urls failed loaded str |Utilities chooseUpdateList ifFalse: [^ self].	"ask the user which kind of updates"Cursor wait showWhile: [	(Smalltalk includesKey: #EToySystem)		ifTrue: [ScriptingSystem guessDOLProxy].	urls _ self newUpdatesOn: 		(Utilities serverUrls collect: [:url | url, 'updates/']).	loaded _ 0.	failed _ nil.	urls do: [:this |		failed ifNil: [			doc _ HTTPSocket httpGet: this accept: 'application/octet-stream'.			"check here that it worked"			doc class == String				ifTrue: [failed _ this]	"an error loading"				ifFalse: [					doc reset; text.					doc peek asciiValue = 4	"pure object file"						ifTrue: [failed _ this]	"Must be fileIn, not pure object file"						ifFalse: [							"(this endsWith: '.html') ifTrue: [doc _ doc asHtml]."								"HTML source code not supported here yet"							ChangeSorter newChangesFromStream: doc								named: (this findTokens: '/') last.							self saveUpdate: doc onFile: (this findTokens: '/') last.	"if wanted"							loaded _ loaded + 1]]]].	].str _ 'Loaded ', loaded printString ,' new update files.'.failed ifNotNil: [str _ str, '\Could not load ' withCRs, (urls size - loaded) printString ,' update files.',					'\Starting with "' withCRs, failed, '".'].self inform: str.! !!WorldMorph methodsFor: 'painting support' stamp: 'sw 8/22/1998 22:45'!paintBox	"Return the painting controls widget (PaintBoxMorph) to be used for painting in this world. If there is not already a PaintBox morph, or if it has been deleted from this world, create a new one."	| newPaintBox refPoint aPalette |	self allMorphsDo: [:m | (m isKindOf: PaintBoxMorph) ifTrue: [^ m]].	refPoint _ (aPalette _ self standardPalette)		ifNotNil:			[aPalette showNoPalette.			aPalette topRight + (0 @ 12)]		ifNil:			[self topRight].	newPaintBox _ PaintBoxMorph new.	newPaintBox position: (refPoint - (newPaintBox width @ 0)). 	self addMorph: newPaintBox.	^ newPaintBox! !EToySystem class removeSelector: #patchOldTiles!EToySystem class removeSelector: #loadEToyFromServer!EToySystem class removeSelector: #openImagineeringStudio!EToySystem class removeSelector: #absorbFormsFromOutlyingClasses!EToySystem class removeSelector: #loadEToyFromDisk!EToySystem class removeSelector: #newEToy!EToySystem class removeSelector: #prepareForAlanDemo!EToySystem class removeSelector: #openDriveACar!ScreenController removeSelector: #openEToy!ScreenController removeSelector: #openImagineeringStudio!ScreenController class removeSelector: #initializeOpenMenuForInternalUse!Smalltalk removeClassNamed: #ActorDroneMorph!Smalltalk removeClassNamed: #EToyWorld!Smalltalk removeClassNamed: #EToyPlaceHolder!Smalltalk removeClassNamed: #MappedTabsMorph!Smalltalk removeClassNamed: #TabsMorph!Smalltalk removeClassNamed: #EToyPlayer!Smalltalk removeClassNamed: #EToyWorldView!Smalltalk removeClassNamed: #TabbedPaletteComplex!Smalltalk removeClassNamed: #EToyHolder!Smalltalk removeClassNamed: #DriveACar!Smalltalk removeClassNamed: #FindTheLight!Smalltalk removeClassNamed: #EToyPalette!