'From Squeak 2.2 of Sept 23, 1998 on 29 September 1998 at 10:24:05 pm'!"Change Set:		TweaksFor2.2-diDate:			29 September 1998Author:			Dan IngallsSeveral minor tweaks for the 2.2 release...Make lowSpaceWatcher work when Morphic has been removed.Amend the set of messages retained by majorShrink.Allow invalidRect: to propagate in an inactive WorldMorph.Allow quitting a system with a mail reader that has been moved away from its files.Make prettyPrinting work in ChangeSorters.Better (?) choice of colors for shift-prettyPrinting."!!MessageFile methodsFor: 'file operations' stamp: 'di 9/29/1998 16:01'!save	"Make sure the message file is flushed to disk. This is NOT atomic because MessageFiles can get large and there might not be enough disk space to save them atomically. Besides, it would be very slow."	file ifNil: [^ self].	file ensureOpen.	file closed  "Will still be closed if no file present"		ifFalse: [file setToEnd; close; reopen].! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'di 9/29/1998 20:09'!prettyPrint	"Reformat the contents of the receiver's view, formatted, if the view is unlocked. "	| selectedClass aCompiler newText |	model selectedMessageName ifNil: [^ view flash].	selectedClass _ model selectedClassOrMetaClass.		aCompiler _ selectedClass compilerClass new.		self deselect; selectInvisiblyFrom: 1 to: paragraph text size.		newText _ aCompiler			format: model contents			in: selectedClass			notifying: nil.		newText == nil ifFalse: 			[self replaceSelectionWith:				(newText asText makeSelectorBoldIn: selectedClass).			self selectAt: 1].! !!ParseNode methodsFor: 'printing' stamp: 'di 9/29/1998 22:08'!printCommentOn: aStream indent: indent 	| thisComment |	comment == nil ifTrue: [^ self].	"Show comments in red"	aStream withAttribute: (TextColor color: Color red)		do: [1 to: comment size do: 				[:index | 				index > 1 ifTrue: [aStream crtab: indent].				aStream nextPut: $".				thisComment _ comment at: index.				self printSingleComment: thisComment					on: aStream					indent: indent.				aStream nextPut: $"]].	comment _ nil! !!BlockNode methodsFor: 'printing' stamp: 'di 9/29/1998 22:11'!printArgumentsOn: aStream indent: level	arguments size = 0		ifFalse: 			[arguments do: 				[:arg | 				aStream nextPut: $:.				aStream withAttribute: (TextColor color: Color green)					do: [aStream nextPutAll: arg key].				aStream space].			aStream nextPutAll: '| '.			"If >0 args and >1 statement, put all statements on separate lines"			statements size > 1 ifTrue: [aStream crtab: level]]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/24/1998 14:00'!lastRemoval  "Smalltalk lastRemoval"	#(abandonSources browseAllSelect: printSpaceAnalysis browseObsoleteReferences  lastRemoval) do:		[:sel | SystemDictionary removeSelector: sel].	[self removeAllUnSentMessages > 0] whileTrue! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/24/1998 14:00'!removeAllUnSentMessages   "Smalltalk removeAllUnSentMessages" 	"Remove all implementations of unsent messages."	| sels n |	sels _ self allUnSentMessages.	"The following should be preserved for doIts, etc"	#(browseAllSelect: printSpaceAnalysis lastRemoval		dragon: hilberts: mandala: web test3 factorial benchmark benchFib		newDepth: restoreAfter: forgetDoIts		removeAllUnSentMessages abandonSources removeUnreferencedKeys		reclaimDependents zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerInterruptWatcher) do:		[:sel | sels remove: sel ifAbsent: []].	"The following may be sent by perform: in dispatchOnChar..."	(ParagraphEditor classPool at: #CmdActions) asSet do:		[:sel | sels remove: sel ifAbsent: []].	(ParagraphEditor classPool at: #ShiftCmdActions) asSet do:		[:sel | sels remove: sel ifAbsent: []].	sels size = 0 ifTrue: [^ 0].	n _ 0. Smalltalk allBehaviorsDo: [:x | n _ n+1].	'Removing ', sels size printString , ' messages . . .'		displayProgressAt: Sensor cursorPoint		from: 0 to: n		during:		[:bar |		n _ 0.		self allBehaviorsDo:			[:class | bar value: (n _ n+1).			sels do:				[:sel | class removeSelectorSimply: sel]]].	MethodDictionary allInstancesDo: [:d | d rehash].	^ sels size! !!SystemDictionary methodsFor: 'memory space' stamp: 'di 9/24/1998 16:33'!lowSpaceWatcher	"Wait until the low space semaphore is signalled, then take appropriate actions."	self garbageCollectMost <= self lowSpaceThreshold ifTrue: [		self garbageCollect <= self lowSpaceThreshold ifTrue: [			"free space must be above threshold before starting low space watcher"			^ self beep]].	LowSpaceSemaphore _ Semaphore new.	self primLowSpaceSemaphore: LowSpaceSemaphore.	self primSignalAtBytesLeft: self lowSpaceThreshold.  "enable low space interrupts"	LowSpaceSemaphore wait.  "wait for a low space condition..."	self primSignalAtBytesLeft: 0.  "disable low space interrupts"	self primLowSpaceSemaphore: nil.	LowSpaceProcess _ nil.	"Note: user now unprotected until the low space watcher is re-installed"	Smalltalk isMorphic			ifTrue: [Project current interruptName: 'Space is low']			ifFalse: [ScheduledControllers interruptName: 'Space is low']! !!VariableNode methodsFor: 'printing' stamp: 'di 9/29/1998 22:13'!printOn: aStream indent: level 	aStream withAttribute: (TextColor color: Color blue)		do: [aStream nextPutAll: name].! !!TempVariableNode methodsFor: 'printing' stamp: 'di 9/29/1998 22:06'!printOn: aStream indent: level 	aStream withAttribute: (TextColor color: Color green)			do: [aStream nextPutAll: name]! !!WorldMorph methodsFor: 'change reporting' stamp: 'di 9/29/1998 21:08'!invalidRect: damageRect	"Record the given rectangle in the damage list."	damageRecorder == nil ifTrue: [^ self].	damageRecorder recordInvalidRect: damageRect.! !