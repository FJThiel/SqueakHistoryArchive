'From Squeak 2.3 of January 14, 1999 on 18 April 1999 at 4:07:16 am'!"Change Set:		WnldPicking-arDate:			18 April 1999Author:			Andreas RaabThis change set contains support for picking operations in Wonderland."!!WonderlandActor methodsFor: 'drawing' stamp: 'ar 4/18/1999 00:28'!drawMesh: aRenderer	"Draw the mesh for this actor."	myMaterial ifNotNil: [			aRenderer pushMaterial.			aRenderer material: myMaterial.						].	myTexture ifNotNil: [			aRenderer pushTexture.			aRenderer texture: myTexture.						].	"Note: Using myMesh>>renderOn: here prevents meshes from being picked!!"	myMesh ifNotNil: [ myMesh renderOn: aRenderer ].	myTexture ifNotNil: [ aRenderer popTexture ].	myMaterial ifNotNil: [ aRenderer popMaterial ].! !!WonderlandActor methodsFor: 'drawing' stamp: 'ar 4/18/1999 00:26'!renderOn: aRenderer	"Draw the actor."	"Save the old transformation matrix"	aRenderer pushMatrix.	"Modify the matrix using our composite matrix for position and orientation"	aRenderer transformBy: composite.	"Save the new transformation matrix"	aRenderer pushMatrix.	"Modify the matrix using our scale matrix - we do this seperately to avoid scaling space"	aRenderer transformBy: scaleMatrix.	"Draw our mesh if the object is not hidden"	(hidden) ifFalse: [ self drawMesh: aRenderer ].	"Remove the scaling matrix"	aRenderer popMatrix.	"Draw our children.	Note: For correct picking it is important to use B3DRenderEngine>>render: here."	myChildren do: [:child | aRenderer render: child].	"Restore the old matrix"	aRenderer popMatrix.! !!WonderlandActor methodsFor: 'printing' stamp: 'ar 4/18/1999 00:49'!printOn: aStream	aStream 		nextPutAll: self class name;		nextPut:$<;		print: myName;		nextPut:$>.! !!WonderlandCamera methodsFor: 'rendering' stamp: 'ar 4/18/1999 03:17'!pickAt: aPoint	"Return the top object at the given point or nil"	^self render: (B3DRenderEngine defaultForPlatformOn: nil) new pickingAt: aPoint! !!WonderlandCamera methodsFor: 'rendering' stamp: 'ar 4/18/1999 00:10'!render: aRenderer	^self render: aRenderer pickingAt: nil.! !!WonderlandCamera methodsFor: 'rendering' stamp: 'ar 4/18/1999 00:47'!render: aRenderEngine pickingAt: aPointOrNil	"Render one frame of the Wonderland using this camera.	If aPointOrNil is not nil then return the top most object at this point.	Note: If picking, no objects are actually drawn."	| aRenderer pickedObject |	aRenderer _ aRenderEngine. "A couple of things must be set before we can pick!!"	aRenderer viewport: (myMorph bounds insetBy: 1@1).	(drawSceneBackground)		ifTrue: [ aRenderer clearViewport: (myWonderland getScene) getColorObject. ]		ifFalse: [ ].	aRenderer clearDepthBuffer.	aRenderer loadIdentity.	"Add any existing lights to the renderer for this camera"	(myWonderland getLights) do: [:light | aRenderer addLight: light ].	"Calculate our view matrix by inverting the camera's composite matrix and hand it	to the renderer - note that this will eventually have to walk up the tree"	viewMatrix _ self getMatrixToRoot.	aRenderer transformBy: viewMatrix.	aRenderer perspective: perspective.	"Initialize picking if necessary"	aPointOrNil ifNotNil:[aRenderer _ aRenderer asPickerAt: aPointOrNil].	"Now render the scene"	myWonderland renderWonderland: aRenderer.	"Force the renderer to draw to the screen"	aRenderer finish.	"Fetch the picked object"	aPointOrNil ifNotNil:[pickedObject _ aRenderer topMostObject].	aRenderer destroy.	^pickedObject "Will be nil if not picking"! !!WonderlandScene methodsFor: 'drawing' stamp: 'ar 4/18/1999 00:27'!renderOn: aRenderer	"Tell the Scene's children to draw themselves"	"Note: For correct picking, it is important to use B3DRenderEngine>>render: here."	myChildren do: [:child | aRenderer render: child ].! !