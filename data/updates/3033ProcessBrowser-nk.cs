'From Squeak2.9alpha of 17 July 2000 [latest update: #3056] on 1 December 2000 at 10:26:40 am'!"Change Set:		226ProcessBrowser-nkDate:			29 October 2000Author:			Ned KonzThis is a preliminary versionof my Process Browser.It works under 2.9 (CS 2774), and under2.8, but you have to have my DebuggerFixFor2.8-nk.1.cschange set loaded first for 2.8 to work.NOTE: as this is now being added to 2.9, I have removed the 2.8-only stuff - RAAThis is distributed under the Squeak License.email: ned@bike-nomad.comAdded 29 October:port for 2.8suspend/resume processmade an MVC versionfixed deferred UI updating under 2.8 and MVCrearranged menusadded pointer chasing/inspectionmisc. bug fixesmade it smarter about well-known processesmore safetyAdded 26 October: highlight pc in source codeAdded 27 October: added 'signal semaphore'added 'inspect receiver', 'explore receiver', 'message tally' to stack list menuadded 'find context', 'next context' to process list menuadded 'change priority' and 'debug' choices to process list menu27 October mods by Bob Arning:alters process display in Ned's ProcessBrowser to - show process priority- drop 'a Process in' that appears on each line- show in priority order- prettier names for known processes- fix to Utilities to forget update downloading process when it ends (1 less deadprocess)- correct stack dump for the active process"!StandardSystemController subclass: #DeferredActionStandardSystemController	instanceVariableNames: 'queue '	classVariableNames: ''	poolDictionaries: ''	category: 'NK-Process Browser'!!DeferredActionStandardSystemController commentStamp: '<historical>' prior: 0!This is a StandardSystemController that can queue up objects to be evaluated before its control loop.!Model subclass: #ProcessBrowser	instanceVariableNames: 'selectedProcess selectedContext methodText processList processListIndex stackList stackListIndex sourceMap selectedClass selectedSelector searchString autoUpdateProcess deferredMessageRecipient lastUpdate '	classVariableNames: 'SuspendedProcesses '	poolDictionaries: ''	category: 'NK-Process Browser'!!ProcessBrowser commentStamp: '<historical>' prior: 0!Change Set:		ProcessBrowserDate:			29 October 2000Author:			Ned KonzThis is a preliminary versionof my Process Browser.email: ned@bike-nomad.comThis is distributed under the Squeak License.Added 29 October:	MVC version	2.8, 2.7 compatibility	rearranged menus	added pointer inspection and chasing	added suspend/resume	recognized more well-known processes	misc. bug fixesAdded 26 October: highlight pc in source codeAdded 27 October: added 'signal semaphore'added 'inspect receiver', 'explore receiver', 'message tally' to stack list menuadded 'find context', 'next context' to process list menuadded 'change priority' and 'debug' choices to process list menu27 October mods by Bob Arning:alters process display in Ned's ProcessBrowser to - show process priority- drop 'a Process in' that appears on each line- show in priority order- prettier names for known processes- fix to Utilities to forget update downloading process when it ends (1 less deadprocess)- correct stack dump for the active process!!DeferredActionStandardSystemController methodsFor: 'as yet unclassified' stamp: 'nk 10/28/2000 22:28'!addDeferredUIMessage: valuableObject 	queue nextPut: valuableObject! !!DeferredActionStandardSystemController methodsFor: 'as yet unclassified' stamp: 'nk 10/28/2000 22:27'!controlActivity	[queue isEmpty]		whileFalse: [queue next value].	^super controlActivity! !!DeferredActionStandardSystemController methodsFor: 'as yet unclassified' stamp: 'nk 10/28/2000 22:28'!initialize	super initialize.	queue _ SharedQueue new.! !!InputSensor methodsFor: 'user interrupts' stamp: 'nk 10/29/2000 11:23'!inputProcess	"For non-event image compatibility"	^ nil! !!InputSensor methodsFor: 'user interrupts' stamp: 'nk 10/28/2000 20:33'!interruptWatcherProcess	"Answer my interrupt watcher process, if any"	^InterruptWatcherProcess! !!EventSensor methodsFor: 'accessing' stamp: 'RAA 12/1/2000 10:18'!inputProcess	^ inputProcess! !!MessageTally methodsFor: 'initialize-release' stamp: 'nk 10/27/2000 11:08'!spyEvery: millisecs onProcess: aProcess forMilliseconds: msecDuration 	"Create a spy and spy on the given process at the specified rate."	| myDelay time0 endTime sem |	(aProcess isKindOf: Process)		ifFalse: [self error: 'spy needs a Process here'].	self class: aProcess suspendedContext receiver class method: aProcess suspendedContext method.	"set up the probe"	ObservedProcess _ aProcess.	myDelay _ Delay forMilliseconds: millisecs.	time0 _ Time millisecondClockValue.	endTime _ time0 + msecDuration.	sem _ Semaphore new.	Timer _ [[| startTime | 			startTime _ Time millisecondClockValue.			myDelay wait.			self tally: ObservedProcess suspendedContext by: Time millisecondClockValue - startTime // millisecs.			startTime < endTime] whileTrue.			sem signal]				forkAt: (ObservedProcess priority + 1 min: Processor highestPriority).	"activate the probe and wait for it to finish"	sem wait.	time _ Time millisecondClockValue - time0! !!MessageTally class methodsFor: 'spying' stamp: 'nk 10/27/2000 11:20'!spyOnProcess: aProcess forMilliseconds: msecDuration 	"| p |  	p _ [100000 timesRepeat: [3.14159 printString]] fork.  	(Delay forMilliseconds: 100) wait.  	MessageTally spyOnProcess: p forMilliseconds: 1000"	| node |	node _ self new.	node		spyEvery: 10		onProcess: aProcess		forMilliseconds: msecDuration.	(StringHolder new		contents: (String				streamContents: [:s | node report: s;						 close]))		openLabel: 'Spy Results'! !!MessageTally class methodsFor: 'spying' stamp: 'nk 10/27/2000 11:19'!spyOnProcess: aProcess forMilliseconds: msecDuration toFileNamed: fileName 	"Spy on the evaluation of aProcess. Write the data collected on a file  	named fileName. Will overwrite fileName"	| file node |	node _ self new.	node		spyEvery: 10		onProcess: aProcess		forMilliseconds: msecDuration.	file _ FileStream fileNamed: fileName.	node report: file;		 close.	file close! !!Process methodsFor: 'accessing' stamp: 'nk 10/28/2000 19:55'!isSuspended	^myList isNil! !!Process methodsFor: 'printing' stamp: 'nk 10/28/2000 07:33'!browserPrintString	^self browserPrintStringWith: suspendedContext! !!Process methodsFor: 'printing' stamp: 'nk 10/31/2000 09:09'!browserPrintStringWith: anObject 	| stream |	stream _ WriteStream				on: (String new: 100).	stream nextPut: $(.	priority printOn: stream.	self isSuspended		ifTrue: [stream nextPut: $s].	stream nextPutAll: ') '.	stream		nextPutAll: ((self respondsTo: #processName)				ifTrue: [self processName]				ifFalse: [self hash asString forceTo: 5 paddingStartWith: $ ]).	stream space.	stream nextPutAll: anObject asString.	^ stream contents! !!Process methodsFor: 'debugging' stamp: 'nk 10/29/2000 13:43'!debug	self debugWithTitle: 'Debug'.! !!Process methodsFor: 'debugging' stamp: 'nk 10/29/2000 13:42'!debugWithTitle: title	"Open a debugger on me"	"Is this the UI process?"	self == Processor activeProcess		ifTrue: [Smalltalk isMorphic				ifTrue: [[Project interruptName: title] fork]				ifFalse: [[ScheduledControllers interruptName: title] fork].			^ self].	myList isNil		ifTrue: [^ self]		ifFalse: [myList				remove: self				ifAbsent: [].			self offList].	Debugger openInterrupt: title onProcess: self! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/27/2000 09:24'!exploreProcess	selectedProcess explore! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/27/2000 11:53'!findContext	| initialProcessIndex initialStackIndex found |	initialProcessIndex _ self processListIndex.	initialStackIndex _ self stackListIndex.	searchString _ FillInTheBlank request: 'Enter a string to search for in the process stack lists' initialAnswer: searchString.	searchString isEmpty		ifTrue: [^ false].	self processListIndex: 1.	self stackListIndex: 1.	found _ self nextContext.	found		ifFalse: [self processListIndex: initialProcessIndex.			self stackListIndex: initialStackIndex].	^ found! !!ProcessBrowser methodsFor: 'process list'!inspectProcess	selectedProcess inspect! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/27/2000 11:52'!nextContext	| initialProcessIndex initialStackIndex found |	searchString isEmpty ifTrue: [ ^false ].	initialProcessIndex _ self processListIndex.	initialStackIndex _ self stackListIndex.	found _ false.	initialProcessIndex		to: self processList size		do: [:pi | found				ifFalse: [self processListIndex: pi.					self stackNameList						withIndexDo: [:name :si | (found not									and: [pi ~= initialProcessIndex											or: [si > initialStackIndex]])								ifTrue: [(name includesSubString: searchString)										ifTrue: [self stackListIndex: si.											found _ true]]]]].	found		ifFalse: [self processListIndex: initialProcessIndex.			self stackListIndex: initialStackIndex].	^ found! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/28/2000 08:19'!notify: errorString at: location in: aStream 	"A syntax error happened when I was trying to highlight my pc. 	Raise a signal so that it can be ignored."	Warning signal: 'syntax error'!]style[(8 11 5 8 5 7 3 107 2 7 23)f1b,f1cblack;b,f1b,f1cblack;b,f1b,f1cblack;b,f1,f1c145043000,f1,f1cblack;,f1! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/28/2000 20:30'!prettyNameForProcess: aProcess 	| nameAndRules |	nameAndRules _ self nameAndRulesFor: aProcess.	^ aProcess browserPrintStringWith: nameAndRules first! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/29/2000 10:20'!processListKey: aKey from: aView 	^ aKey caseOf: {		[$i] -> [self inspectProcess].		[$I] -> [self exploreProcess].		[$c] -> [self chasePointers].		[$P] -> [self inspectPointers].		[$t] -> [self terminateProcess].		[$r] -> [self resumeProcess].		[$s] -> [self suspendProcess].		[$d] -> [self debugProcess].		[$p] -> [self changePriority].		[$m] -> [self messageTally].		[$f] -> [self findContext].		[$g] -> [self nextContext].		[$a] -> [self toggleAutoUpdate].		[$u] -> [self updateProcessList].		[$S] -> [self signalSemaphore].		[$k] -> [self moreStack]}		 otherwise: [self arrowKey: aKey from: aView]! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/29/2000 10:22'!processListMenu: menu 	selectedProcess		ifNotNil: [| nameAndRules | 			nameAndRules _ self nameAndRulesForSelectedProcess.			menu addList: {{'inspect (i)'. #inspectProcess}. {'explore (I)'. #exploreProcess}. {'inspect Pointers (P)'. #inspectPointers}}.	(Smalltalk includesKey: #PointerFinder)		ifTrue: [ menu add: 'chase pointers (c)' action: #chasePointers.  ].			nameAndRules second				ifTrue: [menu add: 'terminate (t)' action: #terminateProcess.					selectedProcess isSuspended						ifTrue: [menu add: 'resume (r)' action: #resumeProcess]						ifFalse: [menu add: 'suspend (s)' action: #suspendProcess]].			nameAndRules third				ifTrue: [menu addList: {{'change priority (p)'. #changePriority}. {'debug (d)'. #debugProcess}}].			menu addList: {{'profile messages (m)'. #messageTally}}.			(selectedProcess suspendingList isKindOf: Semaphore)				ifTrue: [menu add: 'signal Semaphore (S)' action: #signalSemaphore].			menu add: 'full stack (k)' action: #moreStack.			menu addLine].	menu addList: {{'find context... (f)'. #findContext}. {'find again (g)'. #nextContext}}.	menu addLine.	menu		add: (self isAutoUpdating				ifTrue: ['turn off auto-update (a)']				ifFalse: ['turn on auto-update (a)'])		action: #toggleAutoUpdate.	menu add: 'update list (u)' action: #updateProcessList.	^ menu! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/27/2000 18:23'!processNameList	"since processList is a WeakArray, we have to strengthen the result"	^ processList asOrderedCollection		collect: [:each | self prettyNameForProcess: each] ! !!ProcessBrowser methodsFor: 'process list' stamp: 'nk 10/30/2000 18:23'!updateProcessList	| oldSelectedProcess newIndex now |	now _ Time millisecondClockValue.	now - lastUpdate < 500		ifTrue: [^ self].	"Don't update too fast"	lastUpdate _ now.	oldSelectedProcess _ selectedProcess.	processList _ selectedProcess _ selectedSelector _ nil.	Smalltalk garbageCollect.	"lose defunct processes"	processList _ Process allSubInstances				reject: [:each | each suspendedContext isNil].	processList _ processList				sortBy: [:a :b | a priority >= b priority].	processList _ WeakArray withAll: processList.	newIndex _ processList				indexOf: oldSelectedProcess				ifAbsent: [0].	self changed: #processNameList.	self processListIndex: newIndex! !!ProcessBrowser methodsFor: 'initialize-release' stamp: 'nk 10/29/2000 10:50'!initialize	methodText _ ''.	stackListIndex _ 0.	searchString _ ''.	lastUpdate _ 0.	self updateProcessList; processListIndex: 1! !!ProcessBrowser methodsFor: 'initialize-release' stamp: 'nk 10/28/2000 20:53'!perform: selector orSendTo: otherTarget 	"Selector was just chosen from a menu by a user. If can respond, then  	perform it on myself. If not, send it to otherTarget, presumably the  	editPane from which the menu was invoked."	(self respondsTo: selector)		ifTrue: [^ self perform: selector]		ifFalse: [^ super perform: selector orSendTo: otherTarget]! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/28/2000 16:49'!browseContext	selectedContext		ifNil: [^ self].	Browser newOnClass: self selectedClass selector: self selectedSelector!]style[(13 30 4 4 7 42 4 17)f1b,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1! !!ProcessBrowser methodsFor: 'stack list' stamp: 'RAA 10/27/2000 15:21'!changeStackListTo: aCollection         stackList _ aCollection.        self changed: #stackNameList.        self stackListIndex: 0! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/27/2000 09:28'!exploreContext	selectedContext explore! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/27/2000 09:41'!exploreReceiver	selectedContext ifNotNil: [ selectedContext receiver explore ]! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 7/8/2000 20:23'!inspectContext	selectedContext inspect! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/27/2000 09:41'!inspectReceiver	selectedContext		ifNotNil: [selectedContext receiver inspect]! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/29/2000 14:25'!messageTally	| secString secs |	secString _ FillInTheBlank request: 'Profile for how many seconds?' initialAnswer: '4'.	secs _ secString asNumber asInteger.	(secs isNil			or: [secs isZero])		ifTrue: [^ self].	MessageTally spyOnProcess: selectedProcess forMilliseconds: secs * 1000! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/28/2000 12:13'!moreStack	self updateStackList: 2000! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/29/2000 14:18'!pcRange	"Answer the indices in the source code for the method corresponding to  	the selected context's program counter value."	| i methodNode pc end tempNames |	methodText isEmptyOrNil		ifTrue: [^ 1 to: 0].	sourceMap == nil		ifTrue: [self selectedClass == #unknown				ifTrue: [^ 1 to: 0].			[[methodNode _ self selectedClass compilerClass new						parse: methodText						in: self selectedClass						notifying: self ]				on: Warning				do: [:ex | 					methodText _ ('(syntax error) ' , ex description , String cr , methodText) asText.					ex return]]				on: Error				do: [:ex | 					methodText _ ('(parse error) ' , ex description , String cr , methodText) asText.					ex return].			methodNode				ifNil: [sourceMap _ nil.					^ 1 to: 0].			sourceMap _ methodNode sourceMap.			tempNames _ methodNode tempNames.			selectedContext method cacheTempNames: tempNames].	sourceMap size = 0		ifTrue: [^ 1 to: 0].	pc _ selectedContext pc.	pc		ifNil: [^ 1 to: 0].	pc _ pc - 2.	i _ sourceMap				indexForInserting: (Association key: pc value: nil).	i < 1		ifTrue: [^ 1 to: 0].	i > sourceMap size		ifTrue: [end _ sourceMap						inject: 0						into: [:prev :this | prev max: this value last].			^ end + 1 to: end].	^ (sourceMap at: i) value! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/28/2000 16:53'!stackListMenu: aMenu 	| menu |	selectedContext		ifNil: [^ aMenu].	menu _ aMenu				labels: 'inspect context (c)explore context (C)inspect receiver (i)explore receiver (I)browse (b)'				lines: #(2 4 )				selections: #(#inspectContext #exploreContext #inspectReceiver #exploreReceiver #browseContext ).	^ menu! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/28/2000 16:18'!stackNameList	^ stackList		ifNil: [#()]		ifNotNil: [stackList				collect: [:each | each asString]]! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 7/8/2000 20:24'!updateStackList	self updateStackList: 20! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 10/28/2000 09:00'!updateStackList: depth 	| suspendedContext oldHighlight |	selectedProcess		ifNil: [^ self changeStackListTo: nil].	(stackList notNil and: [ stackListIndex > 0 ])		ifTrue: [oldHighlight _ stackList at: stackListIndex].	selectedProcess == Processor activeProcess		ifTrue: [self				changeStackListTo: (thisContext stackOfSize: depth)]		ifFalse: [suspendedContext _ selectedProcess suspendedContext.			suspendedContext				ifNil: [self changeStackListTo: nil]				ifNotNil: [self						changeStackListTo: (suspendedContext stackOfSize: depth)]].	self		stackListIndex: (stackList				ifNil: [0]				ifNotNil: [stackList indexOf: oldHighlight])!]style[(17 5 4 30 4 15 13 4 20 3 29 14 3 4 12 12 3 9 5 14 4 15 4 9 26 4 25 11 14 5 15 16 3 15 22 16 13 4 20 3 17 4 27 16 14 5 6 4 20 9 13 1 17 9 10 12 2)f1b,f1cblack;b,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblue;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblue;,f1,f1cblack;,f1,f1cblack;,f1! !!ProcessBrowser methodsFor: 'accessing'!processList	^ processList! !!ProcessBrowser methodsFor: 'accessing'!processListIndex	^ processListIndex! !!ProcessBrowser methodsFor: 'accessing'!processListIndex: index 	processListIndex _ index.	selectedProcess _ processList				at: index				ifAbsent: [].	self updateStackList.	self changed: #processListIndex.! !!ProcessBrowser methodsFor: 'accessing' stamp: 'nk 10/26/2000 23:31'!selectedClass	"Answer the class in which the currently selected context's method was  	found."	^ selectedClass		ifNil: [selectedClass _ selectedContext receiver				ifNil: [| who | 					who _ selectedContext method who.					selectedSelector _ who last.					who first]				ifNotNil: [selectedContext mclass]]! !!ProcessBrowser methodsFor: 'accessing' stamp: 'nk 10/28/2000 08:30'!selectedMethod	^ methodText ifNil: [methodText _ selectedContext						ifNil: ['']						ifNotNil: [| pcRange | 							methodText _ selectedContext sourceCode.							pcRange _ self pcRange.							methodText asText								addAttribute: TextColor red								from: pcRange first								to: pcRange last;																addAttribute: TextEmphasis bold								from: pcRange first								to: pcRange last]]! !!ProcessBrowser methodsFor: 'accessing' stamp: 'nk 10/26/2000 23:31'!selectedSelector	"Answer the class in which the currently selected context's method was  	found."	^ selectedSelector		ifNil: [selectedSelector _ selectedContext receiver				ifNil: [| who | 					who _ selectedContext method.					selectedClass _ who first.					who last]				ifNotNil: [selectedContext selector]]! !!ProcessBrowser methodsFor: 'accessing'!stackList	^ stackList! !!ProcessBrowser methodsFor: 'accessing'!stackListIndex	^ stackListIndex! !!ProcessBrowser methodsFor: 'accessing' stamp: 'nk 10/28/2000 08:57'!stackListIndex: index 	stackListIndex _ index.	selectedContext _ nil.	(stackList notNil			and: [index > 0])		ifTrue: [selectedContext _ stackList						at: index						ifAbsent: []].	sourceMap _ nil.	selectedClass _ nil.	selectedSelector _ nil.	methodText _ nil.	self changed: #stackListIndex.	self changed: #selectedMethod! !!ProcessBrowser methodsFor: 'accessing' stamp: 'nk 10/28/2000 08:36'!text	^methodText! !!ProcessBrowser methodsFor: 'views' stamp: 'nk 10/28/2000 11:44'!hasView	^self dependents isEmptyOrNil not! !!ProcessBrowser methodsFor: 'views' stamp: 'nk 10/28/2000 22:32'!openAsMVC	"Create a pluggable version of me, answer a window"	| window processListView stackListView methodTextView |	window _ StandardSystemView new model: self controller: (deferredMessageRecipient _ DeferredActionStandardSystemController new).	window borderWidth: 1.	processListView _ PluggableListView				on: self				list: #processNameList				selected: #processListIndex				changeSelected: #processListIndex:				menu: #processListMenu:				keystroke: #processListKey:from:.	processListView		window: (0 @ 0 extent: 300 @ 200).	window addSubView: processListView.	stackListView _ PluggableListView				on: self				list: #stackNameList				selected: #stackListIndex				changeSelected: #stackListIndex:				menu: #stackListMenu:				keystroke: #stackListKey:from:.	stackListView		window: (300 @ 0 extent: 300 @ 200).	window addSubView: stackListView toRightOf: processListView.	methodTextView _ PluggableTextView				on: self				text: #selectedMethod				accept: nil				readSelection: nil				menu: nil.	methodTextView askBeforeDiscardingEdits: false.	methodTextView		window: (0 @ 200 corner: 600 @ 400).	window addSubView: methodTextView below: processListView.	window setUpdatablePanesFrom: #(#processNameList #stackNameList ).	window label: 'Process Browser'.	window minimumSize: 300 @ 200.	window subViews		do: [:each | each controller].	window controller open.	^ window! !!ProcessBrowser methodsFor: 'views' stamp: 'RAA 12/1/2000 10:18'!openAsMorph	"Create a pluggable version of me, answer a window"	| window aTextMorph |	window _ (SystemWindow labelled: 'later')				model: self.	deferredMessageRecipient _ WorldState.	window		addMorph: ((PluggableListMorph				on: self				list: #processNameList				selected: #processListIndex				changeSelected: #processListIndex:				menu: #processListMenu:				keystroke: #processListKey:from:)				enableDragNDrop: false)		frame: (0 @ 0 extent: 0.5 @ 0.5).	window		addMorph: ((PluggableListMorph				on: self				list: #stackNameList				selected: #stackListIndex				changeSelected: #stackListIndex:				menu: #stackListMenu:				keystroke: #stackListKey:from:)				enableDragNDrop: false)		frame: (0.5 @ 0.0 extent: 0.5 @ 0.5).	aTextMorph _ PluggableTextMorph				on: self				text: #selectedMethod				accept: nil				readSelection: nil				menu: nil.	aTextMorph askBeforeDiscardingEdits: false.	window		addMorph: aTextMorph		frame: (0 @ 0.5 corner: 1 @ 1).	window setUpdatablePanesFrom: #(#processNameList #stackNameList ).	(window setLabel: 'Process Browser') openInWorld.	^ window! !!ProcessBrowser methodsFor: 'views' stamp: 'nk 10/28/2000 16:53'!stackListKey: aKey from: aView 	^ aKey caseOf: {		[$c] -> [self inspectContext].		[$C] -> [self exploreContext].		[$i] -> [self inspectReceiver].		[$I] -> [self exploreReceiver].		[$b] -> [self browseContext]}		 otherwise: [self arrowKey: aKey from: aView]! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 11:44'!changePriority	| str newPriority nameAndRules |	nameAndRules _ self nameAndRulesForSelectedProcess.	nameAndRules third		ifFalse: [PopUpMenu inform: 'Nope, won''t change priority of ' , nameAndRules first.			^ self].	str _ FillInTheBlank request: 'New priority' initialAnswer: selectedProcess priority asString.	newPriority _ str asNumber asInteger.	newPriority		ifNil: [^ self].	(newPriority < 1			or: [newPriority > Processor highestPriority])		ifTrue: [PopUpMenu inform: 'Bad priority'.			^ self].	selectedProcess priority: newPriority.	self updateProcessList! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 10:18'!chasePointers	| saved |	selectedProcess		ifNil: [^ self].	saved _ selectedProcess.	[selectedProcess _ nil.	(Smalltalk includesKey: #PointerFinder)		ifTrue: [PointerFinder on: saved]		ifFalse: [self inspectPointers]]		ensure: [selectedProcess _ saved]! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 13:43'!debugProcess	| nameAndRules |	nameAndRules _ self nameAndRulesForSelectedProcess.	nameAndRules third		ifFalse: [PopUpMenu inform: 'Nope, won''t debug ' , nameAndRules first.			^ self].	selectedProcess debugWithTitle: 'Interrupted from the Process Browser'.! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 10:17'!inspectPointers	| tc pointers |	selectedProcess		ifNil: [^ self].	tc _ thisContext.			pointers _ Smalltalk pointersTo: selectedProcess except: {self processList. tc. self}.			pointers isEmpty				ifTrue: [^ self].			OrderedCollectionInspector				openOn: pointers				withEvalPane: false				withLabel: 'Objects pointing to ' , selectedProcess browserPrintString! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 08:38'!nameAndRulesFor: aProcess 	"Answer a nickname and two flags: allow-stop, and allow-debug"	(aProcess priority = Processor timingPriority			and: [aProcess suspendedContext receiver == Delay])		ifTrue: [^ {'the timer interrupt watcher'. false. false}].	^ aProcess caseOf: {		[] -> [{'no process'. false. false}].		[autoUpdateProcess] -> [{'my auto-update process'. true. true}].		[Smalltalk lowSpaceWatcherProcess] -> [{'the low space watcher'. false. false}].		[WeakArray runningFinalizationProcess] -> [{'the WeakArray finalization process'. false. false}].		[Processor activeProcess] -> [{'the UI process'. false. true}].		[Processor backgroundProcess] -> [{'the idle process'. false. false}].		[Sensor inputProcess] -> [{'the I/O process'. false. false}].		[Sensor interruptWatcherProcess] -> [{'the user interrupt watcher'. false. false}].		[Project uiProcess] -> [{'the inactive Morphic UI process'. false. false}].		[ScheduledControllers activeControllerProcess] -> [{'the inactive MVC controller process'. false. true}]}		 otherwise: [{aProcess suspendedContext asString. true. true}]! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/28/2000 20:31'!nameAndRulesForSelectedProcess	"Answer a nickname and two flags: allow-stop, and allow-debug"	^self nameAndRulesFor: selectedProcess! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 09:42'!resumeProcess	| priority |	selectedProcess		ifNil: [^ self].	priority _ self class suspendedProcesses				removeKey: selectedProcess				ifAbsent: [selectedProcess priority].	selectedProcess priority: priority.	selectedProcess resume.	self updateProcessList! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 09:58'!signalSemaphore	(selectedProcess suspendingList isKindOf: Semaphore)		ifFalse: [^ self].	[selectedProcess suspendingList signal] fork.	(Delay forMilliseconds: 300) wait.	"Hate to make the UI wait, but it's convenient..."	self updateProcessList! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 09:57'!suspendProcess	| nameAndRules priority |	selectedProcess isSuspended		ifTrue: [^ self].	nameAndRules _ self nameAndRulesForSelectedProcess.	nameAndRules second		ifFalse: [PopUpMenu inform: 'Nope, won''t suspend ' , nameAndRules first.			^ self].	priority _ selectedProcess priority.	self class suspendedProcesses at: selectedProcess put: priority.	"Need to take the priority down below mine so that I can keep control after signaling the Semaphore"	(selectedProcess suspendingList isKindOf: Semaphore)		ifTrue: [selectedProcess priority: 1.			selectedProcess suspendingList signal].	[selectedProcess suspend]		on: Error		do: [:ex | self class suspendedProcesses removeKey: selectedProcess].	selectedProcess priority: priority.	self updateProcessList! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 09:10'!terminateProcess	| nameAndRules |	nameAndRules _ self nameAndRulesForSelectedProcess.	nameAndRules second		ifFalse: [PopUpMenu inform: 'Nope, won''t kill ' , nameAndRules first.			^ self].	selectedProcess		ifNotNil: [self class suspendedProcesses		removeKey: selectedProcess		ifAbsent: [].selectedProcess terminate].		self updateProcessList! !!ProcessBrowser methodsFor: 'process actions' stamp: 'nk 10/29/2000 08:56'!wasProcessSuspendedByProcessBrowser: aProcess	^self class suspendedProcesses includesKey: aProcess! !!ProcessBrowser methodsFor: 'global actions' stamp: 'nk 10/28/2000 21:48'!isAutoUpdating	^autoUpdateProcess notNil and: [ autoUpdateProcess isSuspended  not ]! !!ProcessBrowser methodsFor: 'global actions' stamp: 'nk 10/29/2000 05:24'!startAutoUpdate	self isAutoUpdating		ifFalse: [| delay | 			delay _ Delay forSeconds: 2.			autoUpdateProcess _ [[self hasView]						whileTrue: [delay wait.							deferredMessageRecipient ifNotNil: [								deferredMessageRecipient addDeferredUIMessage: [self updateProcessList]]							ifNil: [ self updateProcessList ]].					autoUpdateProcess _ nil] fork].	self updateProcessList! !!ProcessBrowser methodsFor: 'global actions' stamp: 'nk 10/28/2000 21:49'!stopAutoUpdate	self isAutoUpdating		ifTrue: [autoUpdateProcess terminate.			autoUpdateProcess _ nil].	self updateProcessList! !!ProcessBrowser methodsFor: 'global actions' stamp: 'nk 10/28/2000 21:50'!toggleAutoUpdate	self isAutoUpdating		ifTrue: [ self stopAutoUpdate ]		ifFalse: [ self startAutoUpdate ].! !!ProcessBrowser class methodsFor: 'instance creation'!new	^super new initialize! !!ProcessBrowser class methodsFor: 'instance creation' stamp: 'nk 10/28/2000 11:18'!open	"ProcessBrowser open"	"Create and schedule a ProcessBrowser."	^ Smalltalk isMorphic		ifTrue: [ self new openAsMorph ]		ifFalse: [ self new openAsMVC ]! !!ProcessBrowser class methodsFor: 'accessing' stamp: 'nk 10/29/2000 08:55'!suspendedProcesses	"Answer a collection of processes that my instances have suspended.  	This is so that they don't get garbage collected."	^ SuspendedProcesses		ifNil: [SuspendedProcesses _ IdentityDictionary new]! !!ProcessorScheduler methodsFor: 'accessing' stamp: 'nk 10/27/2000 16:27'!backgroundProcess	"Answer the background process"	^ BackgroundProcess! !!SequenceableCollection methodsFor: 'copying' stamp: 'nk 10/31/2000 09:13'!forceTo: length paddingStartWith: elem 	"Force the length of the collection to length, padding  	the beginning of the result if necessary with elem.  	Note that this makes a copy."	| newCollection padLen |	newCollection _ self species new: length.	padLen _ length - self size max: 0.	newCollection		from: 1		to: padLen		put: elem.	newCollection		replaceFrom: padLen + 1		to: padLen + self size		with: self		startingAt:  1.	^ newCollection! !!SystemDictionary methodsFor: 'memory space' stamp: 'nk 10/28/2000 20:37'!lowSpaceWatcherProcess	^LowSpaceProcess! !!Utilities class methodsFor: 'fetching updates' stamp: 'nk 10/27/2000 18:26'!retrieveUrls: urls ontoQueue: queue withWaitSema: waitSema 	"download the given list of URLs. The queue will be loaded alternately  	with url's and with the retrieved contents. If a download fails, the  	contents will be #failed. If all goes well, a special pair with an empty  	URL and the contents #finished will be put on the queue. waitSema is  	waited on every time before a new document is downloaded; this keeps 	the downloader from getting too far  ahead of the main process"	"kill the existing downloader if there is one"	| doc |	UpdateDownloader		ifNotNil: [UpdateDownloader terminate].	"fork a new downloading process"	UpdateDownloader _ [urls				do: [:url | 					waitSema wait.					queue nextPut: url.					doc _ HTTPSocket httpGet: url accept: 'application/octet-stream'.					doc class == String						ifTrue: [queue nextPut: #failed.							Processor activeProcess terminate]						ifFalse: [queue nextPut: doc]].			queue nextPut: ''.			queue nextPut: #finished.			UpdateDownloader _ nil] newProcess.	UpdateDownloader priority: Processor userInterruptPriority.	"start the process running"	UpdateDownloader resume! !!WeakArray class methodsFor: 'accessing' stamp: 'nk 10/28/2000 20:26'!runningFinalizationProcess	"Answer the FinalizationProcess I am running, if any"	^FinalizationProcess! !"Postscript:This is for 2.8 compatibility; don't wantto hurt 2.9 images.REMOVED during 2.9 preparation""ProcessBrowser open."!