'From Squeak 2.4c of May 10, 1999 on 8 July 1999 at 4:09:36 pm'!"Change Set:		optionalButtons-swDate:			11 May 1999Author:			Scott WallaceAdds a few buttons to the morphic incarnations of changelist browser, debugger, and filelist.  They only appear if you have the preference #optionalMorphicButtons set to true."!!ChangeList methodsFor: 'initialization-release' stamp: 'sw 5/10/1999 15:58'!buttonRowForChangeList	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightBlue; borderWidth: 1; borderColor: Color blue darker.	aRow addTransparentSpacerOfSize: (5@0).	#(('select all' 		selectAll)	('deselect all'		deselectAll)	('select conflicts'	selectConflicts)	('file in selections' 	fileInSelections)"	('Send'		send)	('Step'		doStep)	('Full Stack'	fullStack)	('Where'	where)	('Browse full'	browseMethodFull)") do:			[:pair |				aButton _ aButton fullCopy.				aButton actionSelector: pair second.				aButton label: pair first.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!ChangeList class methodsFor: 'instance creation' stamp: 'sw 7/8/1999 15:16'!openAsMorph: aChangeList name: labelString multiSelect: multiSelect	"Open a morphic view for the messageSet, whose label is labelString.	The listView may be either single or multiple selection type"	| window boundary |	window _ (SystemWindow labelled: labelString) model: aChangeList.	(aChangeList showsVersions or: [Preferences optionalMorphicButtons not])		ifTrue:			[boundary _ 0]		ifFalse:			[boundary _ 0.08.			window addMorph: aChangeList buttonRowForChangeList frame: (0 @ 0 corner: 1 @ boundary)].	window addMorph: ((multiSelect ifTrue: [PluggableListMorphOfMany]									ifFalse: [PluggableListMorph])		on: aChangeList list: #list		selected: #listIndex changeSelected: #toggleListIndex:		menu: #changeListMenu: keystroke: #messageListKey:from:)		frame: (0@boundary corner: 1@0.4).	window addMorph: (AcceptableCleanTextMorph on: aChangeList 			text: #contents accept: #contents:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0@0.4 corner: 1@1).	^ window openInWorld! !!Debugger methodsFor: 'initialize' stamp: 'sw 7/8/1999 15:47'!buttonRowForDebugger	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightRed; borderWidth: 1; borderColor: Color red darker.	aRow addTransparentSpacerOfSize: (5@0).	#(('Proceed' proceed)	('Restart'	restart)	('Send'		send)	('Step'		doStep)	('Full Stack'	fullStack)	('Where'	where)	('Browse full'	browseMethodFull)) do:			[:pair |				aButton _ aButton fullCopy.				aButton actionSelector: pair second.				aButton label: pair first.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!Debugger methodsFor: 'initialize' stamp: 'sw 7/8/1999 15:20'!openFullMorphicLabel: labelString	| window aListMorph codeTop |	self expandStack.	window _ (SystemWindow labelled: labelString) model: self.	aListMorph _ PluggableListMorph on: self list: #contextStackList			selected: #contextStackIndex changeSelected: #toggleContextStackIndex:			menu: #contextStackMenu:shifted: keystroke: #contextStackKey:from:.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph		frame: (0@0 corner: 1@0.3).	codeTop _ 0.3.	Preferences optionalMorphicButtons ifTrue:		[window addMorph: self buttonRowForDebugger frame: ((0@0.3 corner: 1 @ 0.4)).		codeTop _ 0.4].	window addMorph: (PluggableTextMorph on: self			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0 @ codeTop corner: 1 @ 0.7).	window addMorph: (PluggableListMorph on: self receiverInspector list: #fieldList			selected: #selectionIndex changeSelected: #toggleIndex:			menu: #fieldListMenu: keystroke: #inspectorKey:from:)		frame: (0@0.7 corner: 0.2@1).	window addMorph: (PluggableTextMorph on: self receiverInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0.2@0.7 corner: 0.5@1).	window addMorph: (PluggableListMorph on: self contextVariablesInspector list: #fieldList			selected: #selectionIndex changeSelected: #toggleIndex:			menu: #fieldListMenu: keystroke: #inspectorKey:from:)		frame: (0.5@0.7 corner: 0.7@1).	window addMorph: (PluggableTextMorph on: self contextVariablesInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0.7@0.7 corner: 1@1).	^ window openInWorld! !!FileList methodsFor: 'initialization' stamp: 'sw 7/8/1999 16:03'!buttonRowForFileBrowser	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightMagenta; borderWidth: 1; borderColor: Color brown.	aRow addTransparentSpacerOfSize: (5@0).	#(	('Name' 		sortByName)		('Date'			sortByDate)		('Size'			sortBySize)		('Changes'		browseChanges)		('File-in'		fileInSelection)		('File-in to New'	fileIntoNewChangeSet)) do:			[:pair |				aButton actionSelector: pair second.				aButton label: pair first.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0).				aButton _ aButton fullCopy.				(pair second == #sortBySize)					ifTrue:						[aRow addTransparentSpacerOfSize: (4@0).						aButton borderColor: Color magenta darker]].	^ aRow! !!FileList methodsFor: 'file list menu' stamp: 'sw 7/8/1999 16:05'!browseChanges	"Browse the selected file in fileIn format."	fileName		ifNotNil:			[ChangeList browseStream: (directory oldFileNamed: fileName)]		ifNil:			[self beep].! !!FileList class methodsFor: 'instance creation' stamp: 'sw 7/8/1999 15:41'!openAsMorph     "FileList openAsMorph openInMVC"	"Open a morphic view of a FileList on the default directory."	| dir aFileList window fileListTop |	dir _ FileDirectory default.	aFileList _ self new directory: dir.	window _ (SystemWindow labelled: dir pathName) model: aFileList.	window addMorph: ((PluggableListMorph on: aFileList list: #volumeList selected: #volumeListIndex				changeSelected: #volumeListIndex: menu: #volumeMenu:) autoDeselect: false)		frame: (0@0 corner: 0.3@0.2).	window addMorph: (PluggableTextMorph on: aFileList text: #pattern accept: #pattern:)		frame: (0@0.2 corner: 0.3@0.3).	Preferences optionalMorphicButtons		ifTrue:			[window addMorph: aFileList buttonRowForFileBrowser frame: (0.3 @ 0 corner: 1 @ 0.08).			fileListTop _ 0.08]		ifFalse:			[fileListTop _ 0].	window addMorph: (PluggableListMorph on: aFileList list: #fileList selected: #fileListIndex				changeSelected: #fileListIndex: menu: #fileListMenu:)		frame: (0.3 @ fileListTop corner: 1@0.3).	window addMorph: (PluggableTextMorph on: aFileList text: #contents accept: #put:			readSelection: #contentsSelection menu: #fileContentsMenu:shifted:)		frame: (0@0.3 corner: 1@1).	^ window! !!FlapTab methodsFor: 'menu' stamp: 'sw 7/8/1999 15:44'!flapMenuTitle	^ 'flap: ', self wording! !!FlapTab methodsFor: 'menu' stamp: 'sw 7/8/1999 15:44'!wording	^ self isCurrentlyTextual		ifTrue:			[self existingWording]		ifFalse:			[self valueOfProperty: #priorWording ifAbsent: '---']! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sw 7/8/1999 15:44'!noteThatFlag: prefSymbol justChangedTo: aBoolean	"Provides a hook so that a user's toggling of a preference might precipitate some immediate action"	| keep |	prefSymbol == #useGlobalFlaps ifTrue:		[aBoolean			ifFalse:		"Turning off use of flaps"				[keep _ self confirm:'Do you want to preserve the existingglobal flaps for future use?'.				Utilities globalFlapTabsIfAny do:					[:aFlapTab | Utilities removeFlapTab: aFlapTab keepInList: keep.					aFlapTab isInWorld ifTrue: [self error: 'Flap problem']].				keep ifFalse: [Utilities clobberFlapTabList]]			ifTrue:		"Turning on use of flaps"				[Smalltalk isMorphic ifTrue:					[self currentWorld addGlobalFlaps]]].	prefSymbol == #roundedWindowCorners ifTrue:		[World ifNotNil: [World fullRepaintNeeded]].	prefSymbol == #optionalMorphicButtons ifTrue:		[Utilities replacePartSatisfying: [:el |  (el isKindOf: MorphThumbnail) and: [(el morphRepresented isKindOf: SystemWindow) and: [el morphRepresented model isKindOf: FileList]]]inGlobalFlapSatisfying: [:f1 | f1 wording = 'Tools'] with:  FileList openAsMorph applyModelExtent]! !!Preferences class methodsFor: 'help' stamp: 'sw 7/8/1999 15:11'!initHelpMsgsB	"Automatically called whenever you call   	Preferences initializeHelpMessages		or	Preferences callHelpMessageInitializersby virtue of its being in the 'help' category of Preferences class"	#((oneViewerFlapAtATime			'If true, opening up one viewer flap will close all other such flaps.')		(viewersInFlaps			'If true, viewers are projected into flaps along the right edge of the screen')		(optionalMorphicButtons			'If true, then optional buttons will be used in the morphic versions of certain standard tools, including fileLists, changeList browsers, and Debuggers')			) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!Preferences class methodsFor: 'standard preferences' stamp: 'programmatic 7/8/1999 15:26'!optionalMorphicButtons	^ self valueOfFlag: #optionalMorphicButtons! !!Preferences class methodsFor: 'initial values' stamp: 'sw 7/8/1999 15:09'!initialValuesA	"Another lot of initial values for prefs.  Simply placing methods of this sort here will assure that the initial values provided are ascribed to the preference when prefs are initialized"	^#(	(conversionMethodsAtFileOut			false)		(menuColorFromWorld				false)		(viewersInFlaps						true)		(oneViewerFlapAtATime				true)		(optionalMorphicButtons				false))! !"Postscript:"Preferences callHelpMessageInitializers.Preferences initializeAddedPreferences.!