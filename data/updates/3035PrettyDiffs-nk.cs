'From Squeak2.9alpha of 13 June 2000 [latest update: #2915] on 12 November 2000 at 11:32:20 am'!"Change Set:		228PrettyDiffs-nkDate:			29 October 2000Author:			Ned KonzI got tired of seeing major diffs just because someone reformatted a method or changed its spacing.This uses the source code formatting to provide pretty-printed diffs. Turn this on or off in Preferences/browser/diffsWithPrettyPrint."!TextDiffBuilder subclass: #PrettyTextDiffBuilder	instanceVariableNames: 'sourceClass '	classVariableNames: ''	poolDictionaries: ''	category: 'NK-PrettyDiffs'!!CodeHolder methodsFor: 'as yet unclassified' stamp: 'nk 10/29/2000 12:42'!diffFromPriorSourceFor: sourceCode 	"If there is a prior version of source for the selected method, return a 	diff, else just return the source code"	| prior |	^ (prior _ self priorSourceOrNil)		ifNil: [sourceCode]		ifNotNil: [TextDiffBuilder buildDisplayPatchFrom: prior to: sourceCode inClass: self selectedClass]! !!ChangeList methodsFor: 'menu actions' stamp: 'nk 10/29/2000 12:34'!compareToCurrentVersion	"If the current selection corresponds to a method in the system, 	then spawn a window showing the diffs as text"	| change class s1 s2 |	listIndex = 0		ifTrue: [^ self].	change _ changeList at: listIndex.	((class _ change methodClass) notNil			and: [class includesSelector: change methodSelector])		ifTrue: [s1 _ (class sourceCodeAt: change methodSelector) asString.			s2 _ change string.			s1 = s2				ifTrue: [^ self inform: 'Exact Match'].			(StringHolder new				textContents: (TextDiffBuilder buildDisplayPatchFrom: s1 to: s2 inClass: class))				openLabel: 'Comparison to Current Version']		ifFalse: [self flash]! !!ChangeList methodsFor: 'viewing access' stamp: 'nk 10/29/2000 12:38'!diffedVersionContents	| thisText change class |	(listIndex = 0			or: [changeList size < listIndex])		ifTrue: [^ ''].	change _ changeList at: listIndex.	thisText _ change text.	class _ change methodClass.	^ listIndex == changeList size		ifTrue: [thisText]		ifFalse: [TextDiffBuilder buildDisplayPatchFrom: (changeList at: listIndex + 1) text to: thisText inClass: class]! !!ChangeListForProjects methodsFor: 'as yet unclassified' stamp: 'nk 10/29/2000 12:39'!currentDiffedFromContents	| aChange aClass |	listIndex = 0		ifTrue: [^ ''].	aChange _ changeList at: listIndex.	^ ((aChange type == #method				and: [(aClass _ aChange methodClass) notNil])			and: [aClass includesSelector: aChange methodSelector])		ifTrue: [TextDiffBuilder				buildDisplayPatchFrom: aChange text				to: (aClass sourceCodeAt: aChange methodSelector)				inClass: aClass]		ifFalse: [(changeList at: listIndex) text]! !!FileContentsBrowser methodsFor: 'diffs' stamp: 'nk 10/29/2000 12:43'!methodDiffFor: aString class: aPseudoClass selector: selector meta: meta 	| theClass source |	theClass _ Smalltalk				at: aPseudoClass name				ifAbsent: [^ aString copy].	meta		ifTrue: [theClass _ theClass class].	(theClass includesSelector: selector)		ifFalse: [^ aString copy].	source _ theClass sourceCodeAt: selector.	^ Cursor wait		showWhile: [TextDiffBuilder buildDisplayPatchFrom: source to: aString inClass: theClass]! !!TextDiffBuilder methodsFor: 'initialize' stamp: 'nk 10/29/2000 12:15'!destString: aString 	realDst _ self split: aString asString.	dstLines _ OrderedCollection new.	dstMap _ OrderedCollection new.	realDst		doWithIndex: [:line :realIndex | 			dstLines				add: (self formatLine: line).			dstMap add: realIndex].	dstPos _ PluggableDictionary new: dstLines size.	dstPos hashBlock: self stringHashBlock.	dstLines		doWithIndex: [:line :index | (dstPos includesKey: line)				ifTrue: [(dstPos at: line)						add: index.					multipleMatches _ true]				ifFalse: [dstPos						at: line						put: (OrderedCollection with: index)]]! !!TextDiffBuilder methodsFor: 'initialize' stamp: 'nk 10/29/2000 12:15'!formatLine: aString	^aString! !!TextDiffBuilder methodsFor: 'initialize' stamp: 'nk 10/29/2000 12:15'!sourceString: aString 	realSrc _ self split: aString asString.	srcLines _ OrderedCollection new.	srcMap _ OrderedCollection new.	realSrc		doWithIndex: [:line :realIndex | 			srcLines				add: (self formatLine: line).			srcMap add: realIndex].	srcPos _ PluggableDictionary new: srcLines size.	srcPos hashBlock: self stringHashBlock.	srcLines		doWithIndex: [:line :index | (srcPos includesKey: line)				ifTrue: [(srcPos at: line)						add: index.					multipleMatches _ true]				ifFalse: [srcPos						at: line						put: (OrderedCollection with: index)]]! !!PrettyTextDiffBuilder methodsFor: 'initialize' stamp: 'nk 10/29/2000 12:16'!sourceClass: aClass	sourceClass _ aClass.! !!PrettyTextDiffBuilder methodsFor: 'initialize' stamp: 'nk 10/29/2000 12:20'!split: aString 	| formatted |	formatted _ sourceClass compilerClass newformat: aString				in: sourceClass				notifying: nil				decorated: false.	^super split: formatted! !!TextDiffBuilder class methodsFor: 'instance creation' stamp: 'nk 10/29/2000 12:38'!buildDisplayPatchFrom: srcString to: dstString inClass: srcClass 	^ ((srcClass notNil and: [ (Preferences valueOfFlag: #diffsWithPrettyPrint) ])		ifTrue: [PrettyTextDiffBuilder				from: srcString				to: dstString				inClass: srcClass]		ifFalse: [self from: srcString to: dstString]) buildDisplayPatch! !!PrettyTextDiffBuilder class methodsFor: 'instance creation' stamp: 'nk 10/29/2000 12:35'!from: srcString to: dstString inClass: srcClass 	^ (self new sourceClass: srcClass) from: srcString to: dstString		!]style[(6 9 5 9 10 8 6 4 18 8 8 9 5 9 3)f1b,f1cblack;b,f1b,f1cblack;b,f1b,f1cblack;b,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1,f1cblack;,f1! !!Utilities class methodsFor: 'miscellaneous' stamp: 'nk 10/29/2000 12:44'!methodDiffFor: aString class: aClass selector: aSelector 	^ (aClass includesSelector: aSelector)		ifTrue: [TextDiffBuilder				buildDisplayPatchFrom: (aClass sourceCodeAt: aSelector)				to: aStringinClass: aClass]		ifFalse: [aString copy]! !"Postscript:Create the preference flag, if needed."(Preferences allPreferenceFlagKeys includes: #diffsWithPrettyPrint)	ifFalse: [Preferences addPreference: #diffsWithPrettyPrint category: #browsing default: false balloonHelp: 'if true, displays of source code differences will be pretty-printed first' ].!