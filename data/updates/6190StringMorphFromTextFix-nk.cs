'From Squeak3.7alpha of 11 September 2003 [latest update: #5707] on 26 February 2004 at 1:43:28 pm'!"Change Set:		StringMorphFromTextFix-nkDate:			26 February 2004Author:			Ned KonzDoes these things:- lets StringMorph absorb text color, font size, and font style from Text instances passed to #contents: (in addition to emphasis).- makes Text>>asMorph return an unwrapped TextMorph instead of a StringMorph.- adds asStringMorph and asTextMorph for when you want to be more specific about what you get."!Object subclass: #StringMorphAttributeScanner	instanceVariableNames: 'fontNumber textColor emphasis alignment actualFont indent kern'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Text Support'!!StringMorphAttributeScanner commentStamp: '<historical>' prior: 0!A StringMorphAttributeScanner provides the interface of a CharacterScanner so that text attributes may be collected from a Text and used elsewhere, like in setting the attributes of a StringMorph.!]style[(2 195)cblack;,f3cblack;!!Object methodsFor: 'creation' stamp: 'nk 2/26/2004 13:33'!asMorph	"Open a morph, as best one can, on the receiver"	^ self asStringMorph	"234 asMorph(ScriptingSystem formAtKey: #TinyMenu) asMorph'fred' asMorph"! !!Object methodsFor: 'creation' stamp: 'nk 2/26/2004 13:35'!asStringMorph	"Open a StringMorph, as best one can, on the receiver"	^ self asStringOrText asStringMorph! !!Object methodsFor: 'creation' stamp: 'nk 2/26/2004 13:35'!asTextMorph	"Open a TextMorph, as best one can, on the receiver"	^ TextMorph new contentsAsIs: self asStringOrText! !!String methodsFor: 'converting' stamp: 'nk 2/26/2004 13:38'!asStringMorph 	"Answer the receiver as a StringMorph"	^ StringMorph contents: self"'bugs black blood' asStringMorph openInHand"! !!StringMorph methodsFor: 'accessing' stamp: 'nk 2/26/2004 13:15'!contents: newContents 	| scanner |	contents := newContents isText				ifTrue: [scanner := StringMorphAttributeScanner new initializeFromStringMorph: self.					(newContents attributesAt: 1 forStyle: self font textStyle)						do: [:attr | attr emphasizeScanner: scanner].					emphasis := scanner emphasis.					font := scanner font emphasis: emphasis.					color := scanner textColor.					newContents string]				ifFalse: [contents = newContents						ifTrue: [^ self].					"no substantive change"					newContents].	self fitContents! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 13:12'!actualFont	"Answer the value of actualFont"	^ actualFont ifNil: [ TextStyle defaultFont ]! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 12:34'!alignment	"Answer the value of alignment"	^ alignment! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 12:34'!emphasis	"Answer the value of emphasis"	^ emphasis! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 13:14'!font	"Answer the value of font"	^self textStyle fontAt: self fontNumber! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 13:11'!fontNumber	"Answer the value of font"	^ fontNumber! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 12:34'!indent	"Answer the value of indent"	^ indent! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 12:34'!kern	"Answer the value of kern"	^ kern! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 12:34'!textColor	"Answer the value of textColor"	^ textColor! !!StringMorphAttributeScanner methodsFor: 'accessing' stamp: 'nk 2/26/2004 13:12'!textStyle	^self actualFont textStyle ifNil: [ TextStyle default ]! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'nk 2/26/2004 12:40'!addEmphasis: anInteger	"Set the value of emphasis"	emphasis _ emphasis bitOr: anInteger! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'nk 2/26/2004 12:41'!addKern: kernDelta	"Set the current kern amount."	kern _ kern + kernDelta! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'nk 2/26/2004 12:37'!indentationLevel: anInteger	"Set the value of indent"	indent _ anInteger! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'nk 2/26/2004 13:09'!setActualFont: aFont	"Set the value of actualFont, from a TextFontReference"	actualFont _ aFont.	aFont textStyle ifNotNilDo: [ :ts | fontNumber _ ts fontIndexOf: aFont ]! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'nk 2/26/2004 12:39'!setAlignment: aSymbol	"Set the value of alignment"	alignment _ aSymbol! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'nk 2/26/2004 13:10'!setFont: fontNum	"Set the value of font"	fontNumber _ fontNum! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'nk 2/26/2004 12:34'!textColor: anObject	"Set the value of textColor"	textColor _ anObject! !!StringMorphAttributeScanner methodsFor: 'initialize-release' stamp: 'nk 2/26/2004 13:10'!initialize	emphasis _ 0.	indent _ 0.	kern _ 0.	fontNumber _ 1.	actualFont _ TextStyle defaultFont! !!StringMorphAttributeScanner methodsFor: 'string morph' stamp: 'nk 2/26/2004 13:09'!initializeFromStringMorph: aStringMorph	| style |	actualFont _ aStringMorph font ifNil: [ TextStyle defaultFont ].	style _ actualFont textStyle.	emphasis _ actualFont emphasis.	fontNumber _ (style fontIndexOf: actualFont) ifNil: [ 1 ].	textColor _ aStringMorph color.! !!Text methodsFor: 'converting' stamp: 'nk 2/26/2004 13:32'!asMorph	^ self asTextMorph! !!Text methodsFor: 'converting' stamp: 'nk 2/26/2004 13:31'!asStringMorph	^ StringMorph		contents: self string		font: (self fontAt: 1 withStyle: TextStyle default)		emphasis: (self emphasisAt: 1)! !!Text methodsFor: 'converting' stamp: 'nk 2/26/2004 13:32'!asTextMorph	^ TextMorph new contentsAsIs: self! !!Text reorganize!('*connectors-properties' asProperty)('accessing' append: at: at:put: embeddedMorphs embeddedMorphsFrom:to: findString:startingAt: findString:startingAt:caseSensitive: lineCount prepend: rangeOf:startingAt: rangeOf:startingAt:forStyle: replaceFrom:to:with: size string)('attributes' askIfAddStyle:req: basicType couldDeriveFromPrettyPrinting unembellished)('comparing' = hash howManyMatch: isText)('converting' asDisplayText asMorph asNumber asParagraph asString asStringMorph asStringOrText asText asTextMorph asUrl asUrlRelativeTo: isoToSqueak removeAttributesThat:replaceAttributesThat:by: replaceFrom:to:with:startingAt: reversed squeakToIso withSqueakLineEndings)('copying' copy copyFrom:to: copyReplaceFrom:to:with: copyReplaceTokens:with: deepCopy)('emphasis' addAttribute: addAttribute:from:to: alignmentAt:ifAbsent: allBold attributesAt: attributesAt:do: attributesAt:forStyle: emphasisAt: find: fontAt:withStyle: fontNumberAt: makeBoldFrom:to: makeSelectorBold makeSelectorBoldIn: removeAttribute:from:to: runLengthFor:)('printing' printOn: storeOn:)('private' runs setString:setRuns: setString:setRunsChecking:)!