'From Squeak3.1alpha of 28 February 2001 [latest update: #4132] on 4 June 2001 at 11:17:22 pm'!"Change Set:		vocabSymbol-swDate:			4 June 2001  **PATCHED 6 June 2001***Author:			Scott WallaceMakes objects that formerly held references to a vocabulary now hold on to a symbol representing that vocabulary.This patched version includes both of the methods subsequently published in update 4140; they are retrofitted here to preclude a failure that could occur when filing in the original version of this update into an image that had any Alice scripting going on in it"!TileLikeMorph subclass: #PhraseTileMorph	instanceVariableNames: 'resultType brightenedOnEnter userScriptSelector justGrabbedFromViewer vocabulary vocabularySymbol '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting Tiles'!RectangleMorph subclass: #TileMorph	instanceVariableNames: 'type slotName literal operatorOrExpression actualObject downArrow upArrow suffixArrow typeColor lastArrowTick nArrowTicks operatorReadoutString possessive retractArrow vocabulary vocabularySymbol '	classVariableNames: 'DownPicture RetractPicture SuffixArrowAllowance SuffixPicture UpArrowAllowance UpPicture UpdatingOperators '	poolDictionaries: ''	category: 'Morphic-Scripting Tiles'!!EToyVocabulary methodsFor: 'initialization' stamp: 'sw 6/4/2001 23:17'!setCategoryDocumentationStrings	"Initialize the documentation strings associated with the old etoy categories"	#(		(basic				'a few important things')		('color & border'	'matters concerning the colors and borders of objects')		(geometry 			'measurements and coordinates')		(motion 			'matters relating to motion')		('pen use' 			'use of an object''s "pen"')		(tests				'yes/no tests, to use in "Test" panes of scripts')		(miscellaneous 		'various commands')		(slider				'functions useful to sliders')		(scripts				'methods added by this object')		('instance variables'	'instance variables added by this object')) do:		[:aPair |			(self categoryAt: aPair first asSymbol) documentation: aPair second].! !!PasteUpMorph methodsFor: 'scripting' stamp: 'sw 6/4/2001 19:38'!currentVocabulary	"Answer the default Vocabulary object to be applied when scripting"	| aSym aVocab |	aSym _ self valueOfProperty: #currentVocabularySymbol.	aSym ifNil:		[aVocab _ self valueOfProperty: #currentVocabulary.		aVocab ifNotNil:			[aSym _ aVocab vocabularyName.			self setProperty: #currentVocabularySymbol toValue: aSym.			self removeProperty: #currentVocabulary]].	^ aSym		ifNotNil:			[Vocabulary vocabularyNamed: aSym]		ifNil:			[Vocabulary fullVocabulary]! !!PasteUpMorph methodsFor: 'scripting' stamp: 'sw 6/4/2001 18:17'!currentVocabularyFor: aScriptableObject	"Answer the Vocabulary object to be applied when scripting an object in the world."	| vocabSymbol vocab |	vocabSymbol _ self valueOfProperty: #currentVocabularySymbol ifAbsent:		[nil].	vocabSymbol		ifNil:			[vocab _ self valueOfProperty: #currentVocabulary ifAbsent: [nil].			vocab ifNotNil:				[vocabSymbol _ vocab vocabularyName.				self removeProperty: #currentVocabulary].	^ vocabSymbol		ifNotNil:			[Vocabulary vocabularyNamed: vocabSymbol]		ifNil:			[(aScriptableObject isKindOf: Player)				ifTrue:					[Vocabulary eToyVocabulary]				ifFalse:					[Vocabulary fullVocabulary]]]! !!PhraseTileMorph methodsFor: 'initialization' stamp: 'sw 6/4/2001 19:35'!currentVocabulary	"Answer the current vocabulary"	vocabulary "fix up old strutures"		ifNotNil: 			[vocabularySymbol _ vocabulary vocabularyName.			vocabulary _ nil].	^ vocabularySymbol		ifNotNil:			[Vocabulary vocabularyNamed: vocabularySymbol]		ifNil:			[super currentVocabulary]! !!PhraseTileMorph methodsFor: 'initialization' stamp: 'sw 6/4/2001 16:36'!vocabulary: aVocab	"Set the vocabulary"	vocabularySymbol _ (aVocab isKindOf: Symbol)		ifTrue:			[aVocab]		ifFalse:			[aVocab vocabularyName]! !!StandardViewer methodsFor: 'categories' stamp: 'sw 6/4/2001 18:05'!currentVocabulary	"Answer the vocabulary currently associated with the receiver"	| aSym aVocab |	aSym _ self valueOfProperty: #currentVocabularySymbol ifAbsent: [nil].	aSym ifNil:		[aVocab _ self valueOfProperty: #currentVocabulary ifAbsent: [nil].		aVocab ifNotNil:			[aSym _ aVocab vocabularyName.			self removeProperty: #currentVocabulary.			self setProperty: #currentVocabularySymbol toValue: aSym]].	^ aSym		ifNotNil:			[Vocabulary vocabularyNamed: aSym]		ifNil:			[(self world ifNil: [ActiveWorld]) currentVocabularyFor: scriptedPlayer]! !!StandardViewer methodsFor: 'initialization' stamp: 'sw 6/4/2001 18:06'!rawVocabulary: aVocabulary	"Mark the receiver as having aVocabulary as its vocabulary"	self setProperty: #currentVocabularySymbol toValue: aVocabulary vocabularyName! !!StandardViewer methodsFor: 'initialization' stamp: 'sw 6/4/2001 18:06'!switchToVocabulary: aVocabulary	"Make the receiver show categories and methods as dictated by aVocabulary.  If this constitutes a switch, then wipe out existing category viewers, which may be showing the wrong thing."	self adoptVocabulary: aVocabulary.  "for benefit of submorphs"	self setProperty: #currentVocabularySymbol toValue: aVocabulary vocabularyName.	((scriptedPlayer isKindOf: Player) and: [self isUniversalTiles not]) ifTrue:		[scriptedPlayer allScriptEditors do:			[:aScriptEditor |				aScriptEditor adoptVocabulary: aVocabulary]]! !!StandardViewer methodsFor: 'initialization' stamp: 'sw 6/4/2001 19:40'!useVocabulary: aVocabulary	"Make the receiver show categories and methods as dictated by aVocabulary"	| itsName |	((self valueOfProperty: #currentVocabularySymbol ifAbsent: [nil]) == (itsName _ aVocabulary vocabularyName)) ifFalse:		[self setProperty: #currentVocabularySymbol toValue: itsName.		self removeProperty: #currentVocabulary.  "grandfathered"		(self submorphs select: [:m | m isKindOf: CategoryViewer]) do: [:m | m delete]]! !!SyntaxMorph methodsFor: 'type checking' stamp: 'sw 6/4/2001 19:26'!currentVocabulary	"Answer the current vocabulary associated with the receiver.  If none is yet set, determine an appropriate vocabulary and cache it within my properties dictionary."	| aVocab aSym |	aSym _ self valueOfProperty: #currentVocabularySymbol ifAbsent: [nil].	aSym ifNil:		[aVocab _ self valueOfProperty: #currentVocabulary ifAbsent: [nil].		aVocab ifNotNil:			[aSym _ aVocab vocabularyName.			self removeProperty: #currentVocabulary.			self setProperty: #currentVocabularySymbol toValue: aSym]].	aSym ifNotNil:		[^ Vocabulary vocabularyNamed: aSym].	aVocab _ super currentVocabulary.	self setProperty: #currentVocabularySymbol toValue: aVocab vocabularyName.	^ aVocab! !!TileMorph methodsFor: 'initialization' stamp: 'sw 6/4/2001 16:48'!adoptVocabulary: aVocabulary	"Set the receiver's vocabulary"	vocabularySymbol _ aVocabulary vocabularyName.	self updateWordingToMatchVocabulary.	super adoptVocabulary: aVocabulary! !!TileMorph methodsFor: 'initialization' stamp: 'sw 6/4/2001 19:33'!currentVocabulary	"Answer the receiver's current vocabulary"	| outer aVocab |	vocabulary ifNotNil:  "old structures -- bring up to date"		[vocabularySymbol _ vocabulary vocabularyName.		vocabulary _ nil].	^ vocabularySymbol		ifNotNil:			[Vocabulary vocabularyNamed: vocabularySymbol]		ifNil:			[(outer _ self ownerThatIsA: StandardViewer orA: ScriptEditorMorph) 				ifNotNil:					[aVocab _ outer currentVocabulary.					vocabularySymbol _ aVocab vocabularyName.					aVocab]				ifNil:					[super currentVocabulary]]! !!TileMorph methodsFor: 'initialization' stamp: 'sw 6/5/2001 15:04'!rawVocabulary: aVocabulary	"Set the receiver's vocabulary, without side effects."	vocabularySymbol _ (aVocabulary isKindOf: Symbol)		ifTrue:			[aVocabulary]		ifFalse:			[aVocabulary vocabularyName]! !!TileMorph methodsFor: 'copying' stamp: 'sw 6/4/2001 16:45'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.type _ type veryDeepCopyWith: deepCopier.slotName _ slotName veryDeepCopyWith: deepCopier.literal _ literal veryDeepCopyWith: deepCopier.operatorOrExpression _ operatorOrExpression veryDeepCopyWith: deepCopier."actualObject _ actualObject.		Weakly copied"downArrow _ downArrow veryDeepCopyWith: deepCopier.upArrow _ upArrow veryDeepCopyWith: deepCopier.suffixArrow _ suffixArrow veryDeepCopyWith: deepCopier.typeColor _ typeColor veryDeepCopyWith: deepCopier.lastArrowTick _ lastArrowTick veryDeepCopyWith: deepCopier.nArrowTicks _ nArrowTicks veryDeepCopyWith: deepCopier.operatorReadoutString _ operatorReadoutString veryDeepCopyWith: deepCopier.possessive _ possessive veryDeepCopyWith: deepCopier.retractArrow _ retractArrow veryDeepCopyWith: deepCopier.vocabularySymbol _ vocabularySymbol.  "Weakly copied"vocabulary _ nil.   "obsolete - clobbered"! !!Vocabulary class methodsFor: 'class initialization' stamp: 'sw 6/4/2001 21:46'!cleanseVocabularyStructures	"Cleanse the image of possible redundant Vocabulary objects that might have arrived via the loading of old image segments or save-files"	"Vocabulary cleanseVocabularyStructures"	PhraseTileMorph allInstancesDo:		[:ph | ph currentVocabulary].	TileMorph allSubInstancesDo:		[:m | m currentVocabulary].	PasteUpMorph allInstancesDo:		[:m | m currentVocabularyFor: nil].	StandardViewer allInstancesDo:		[:m | m currentVocabulary].	SyntaxMorph allInstancesDo:		[:m | m currentVocabulary].! !!Vocabulary class methodsFor: 'standard vocabularies' stamp: 'sw 6/4/2001 16:33'!vocabularyFrom: aNameOrVocabulary	"Answer the standard vocabulary of the given name, or nil if none found,  For backward compatibilitythe parameter might be an actual vocabulary, in which case return it"	(aNameOrVocabulary isKindOf: Vocabulary) ifTrue: [^ aNameOrVocabulary].	^ self vocabularyNamed: aNameOrVocabulary! !	!Vocabulary class methodsFor: 'class initialization' stamp: 'sw 6/5/2001 15:08'!initializeStandardVocabularies	"Initialize a few standard vocabularies and place them in the AllVocabularies list."	AllVocabularies _ OrderedCollection new.	AllMethodInterfaces _ IdentityDictionary new.	self addVocabulary: EToyVocabulary new.	self addVocabulary: self newPublicVocabulary.	self addVocabulary: FullVocabulary new.	self addVocabulary: self newQuadVocabulary.	self addKiswahiliVocabulary.	self addGermanVocabulary.	self wonderlandVocabulary.  "creates it and adds it"	"self addVocabulary: self newNumberVocabulary."	"self addVocabulary: self newTestVocabulary."	"Vocabulary initialize"! !"Postscript:"Vocabulary initialize.Vocabulary cleanseVocabularyStructures.!