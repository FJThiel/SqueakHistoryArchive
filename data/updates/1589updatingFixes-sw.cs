'From Squeak2.6 of 11 October 1999 [latest update: #1587] on 31 October 1999 at 12:49:33 am'!"Change Set:		updatingFixes-swDate:			31 October 1999Author:			Scott WallaceMiscellaneous fixes to the smart-updating mechanism, including:The current selection in any list pane no longer is lost if the corresponding list gets changed, unless the revised list does not contain the element.Inspect lists now properly update *and* retain proper values when inspectee structure changes."!!Object methodsFor: 'updating' stamp: 'sw 10/31/1999 00:15'!noteSelectionIndex: anInteger for: aSymbol	"backstop"! !!CodeHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/19/1999 17:29'!didCodeChangeElsewhere	| aClass aSelector |	"Determine whether the code for the currently selected method and class has been changed somewhere else."	currentCompiledMethod ifNil: [^ false].	(aClass _ self selectedClassOrMetaClass) ifNil: [^ false].	(aSelector _ self selectedMessageName) ifNil: [^ false].	^ (aClass compiledMethodAt: aSelector ifAbsent: [nil]) ~~ currentCompiledMethod	! !!Browser methodsFor: 'accessing' stamp: 'sw 10/29/1999 20:25'!contents	"Depending on the current selection, different information is retrieved.	Answer a string description of that information. This information is the	method of the currently selected class and message."	| comment theClass latestCompiledMethod |	latestCompiledMethod _ currentCompiledMethod.	currentCompiledMethod _ nil.	editSelection == #none ifTrue: [^ ''].	editSelection == #editSystemCategories 		ifTrue: [^ systemOrganizer printString].	editSelection == #newClass 		ifTrue: [^ Class template: self selectedSystemCategoryName].	editSelection == #editClass 		ifTrue: [^ self selectedClassOrMetaClass definition].	editSelection == #editComment 		ifTrue: [(theClass _ self selectedClass) ifNil: [^ ''].				comment _ theClass comment.				comment size = 0				ifTrue: [^ 'This class has not yet been commented.']				ifFalse: [^ comment]].	editSelection == #hierarchy 		ifTrue: [^ self selectedClassOrMetaClass printHierarchy].	editSelection == #editMessageCategories 		ifTrue: [^ self classOrMetaClassOrganizer printString].	editSelection == #newMessage		ifTrue: [^ self selectedClassOrMetaClass sourceCodeTemplate].	editSelection == #editMessage		ifTrue:			[currentCompiledMethod _ latestCompiledMethod.			^ self selectedMessage].	editSelection == #byteCodes ifTrue:		[^ (self selectedClassOrMetaClass compiledMethodAt: self selectedMessageName)			symbolic asText].	self error: 'Browser internal error: unknown edit selection.'! !!Browser methodsFor: 'accessing' stamp: 'sw 10/30/1999 22:59'!noteSelectionIndex: anInteger for: aSymbol	aSymbol == #systemCategoryList		ifTrue:			[systemCategoryListIndex _ anInteger].	aSymbol == #classList		ifTrue:			[classListIndex _ anInteger].	aSymbol == #messageCategoryList		ifTrue:			[messageCategoryListIndex _ anInteger].	aSymbol == #messageList		ifTrue:			[messageListIndex _ anInteger].! !!Browser methodsFor: 'message list' stamp: 'sw 10/30/1999 23:52'!selectedMessage	"Answer a copy of the source code for the selected message selector."	| class selector method tempNames |	contents == nil ifFalse: [^ contents copy].	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	method _ class compiledMethodAt: selector ifAbsent: [nil].	currentCompiledMethod _ method.	(Sensor controlKeyPressed		or: [method fileIndex > 0 and: [(SourceFiles at: method fileIndex) == nil]])		ifTrue:		["Emergency or no source file -- decompile without temp names"		contents _ (class decompilerClass new decompile: selector in: class method: method)			decompileString.		^ contents copy].	Sensor leftShiftDown ifTrue:		["Special request to decompile -- get temps from source file"		tempNames _ (class compilerClass new						parse: method getSourceFromFile asString in: class notifying: nil)						tempNames.		contents _ ((class decompilerClass new withTempNames: tempNames)				decompile: selector in: class method: method) decompileString.		contents _ contents asText makeSelectorBoldIn: class.		^ contents copy].	contents _ class sourceCodeAt: selector.	Preferences browseWithPrettyPrint ifTrue:		[contents _ class compilerClass new			format: contents in: class notifying: nil].	self showDiffs ifTrue:		[contents _ self diffFromPriorSourceFor: contents].	contents _ contents asText makeSelectorBoldIn: class.	^ contents copy! !!Inspector methodsFor: 'accessing' stamp: 'sw 10/29/1999 22:10'!modelWakeUpIn: aWindow	| newText |	self updateListsAndCodeIn: aWindow.	newText _ self contentsIsString		ifTrue: [newText _ self selection]		ifFalse: ["keep it short to reduce time to compute it"			self selection printStringLimitedTo: 5000].	newText = contents ifFalse:		[contents _ newText.		self changed: #contents]! !!Inspector methodsFor: 'accessing' stamp: 'sw 10/30/1999 23:59'!noteSelectionIndex: anInteger for: aSymbol	aSymbol == #fieldList		ifTrue:			[selectionIndex _ anInteger]! !!PluggableListMorph methodsFor: 'selection' stamp: 'sw 10/30/1999 23:00'!selectionIndex: index	"Called internally to select the index-th item."	| theMorph range |	(index isNil or: [index > scroller submorphs size]) ifTrue: [^ self].	(theMorph _ index = 0 ifTrue: [nil] ifFalse: [scroller submorphs at: index])		ifNotNil:		[((theMorph bounds top - scroller offset y) >= 0			and: [(theMorph bounds bottom - scroller offset y) <= bounds height]) ifFalse:			["Scroll into view -- should be elsewhere"			range _ self leftoverScrollRange.			scrollBar value: (range > 0				ifTrue: [((index-1 * theMorph height) / self leftoverScrollRange)									truncateTo: scrollBar scrollDelta]				ifFalse: [0]).			scroller offset: -3 @ (range * scrollBar value)]].	self selectedMorph: theMorph! !!PluggableListMorph methodsFor: 'updating' stamp: 'sw 10/30/1999 23:00'!verifyContents	| newList existingSelection anIndex |	"Called periodically, or at least on window reactivation to react to possible structural changes.  Update contents if necessary."	newList _ self getList.	((list == newList) "fastest" or: [list = newList]) ifTrue: [^ self].	self flash.  "list has changed beneath us; could get annoying, but hell"	existingSelection _ selection.	self list: newList.	(anIndex _ newList indexOf: existingSelection ifAbsent: [nil])		ifNotNil:			[model noteSelectionIndex: anIndex for: getListSelector.			self selectionIndex: anIndex]		ifNil:			[self changeModelSelection: 0]! !!PluggableMessageCategoryListMorph methodsFor: 'as yet unclassified' stamp: 'sw 10/30/1999 23:02'!verifyContents		| newList existingSelection anIndex newRawList |	(model editSelection == #editComment) ifTrue: [^ self].	model classListIndex = 0 ifTrue: [^ self].	newRawList _ model perform: getRawListSelector.	newRawList == priorRawList ifTrue: [^ self].  "The usual case; very fast"	priorRawList _ newRawList.	newList _ (Array with: ClassOrganizer allCategory), priorRawList.	list = newList ifTrue: [^ self].	self flash.  "could get annoying, but hell"	existingSelection _ selection.	self list: newList.	(anIndex _ newList indexOf: existingSelection ifAbsent: [nil])		ifNotNil:			[model noteSelectionIndex: anIndex for: getListSelector.			self selectionIndex: anIndex]		ifNil:			[self changeModelSelection: 0]! !