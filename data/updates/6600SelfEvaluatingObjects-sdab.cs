'From Squeak3.9alpha of ''2 November 2004'' [latest update: #6603] on 31 March 2005 at 8:45:57 pm'!"Change Set:		6600SelfEvaluatingObjects-sdabDate:			31 March 2005Author:			stéphane ducasse - alexandre bergelintroduce a better support for having {} and other arrays been self evaluating from their textual format.self assertCode: '#(1 2 3)' print: '#(1 2 3)'.	self assertCode: '{1 . 2 . 3}' print: '#(1 2 3)'.	self assertCode: '{1 + 0 . 2 . 3}' print: '#(1 2 3)'.	self assertCode: '{1 + 0 . 1 @ 2 . 3}' print: '{1 . 1@2 . 3}'.	self assertCode: '{2@3}' print: '{2@3}'.	self assertCode: '{Object new}' print:  'an Array(an Object)'.	self assertCode: '{Rectangle new . Object new}' print:  'an Array(nil corner: nil an Object)'.	self assertCode: '{10@10 corner: 20@20 . 100@100 corner: 200@200}' print: '{10@10 corner: 20@20 . 100@100 corner: 200@200}'"!TestCase subclass: #SelfEvaluatingObjectTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SelfEvaluatingObject'!!Object methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:49'!isSelfEvaluating	^ self isLiteral! !!Array methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:56'!isSelfEvaluating	^ (self allSatisfy: [:each | each isSelfEvaluating]) and: [self class == Array]! !!Array methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/9/2005 21:48'!printAsLiteralFormOn: aStream	aStream nextPut: $#.	self printElementsOn: aStream! !!Array methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:39'!printAsSelfEvaluatingFormOn: aStream	aStream nextPut: ${.	self do: [:el | aStream print: el] separatedBy: [ aStream nextPutAll: ' . '].	aStream nextPut: $}! !!Array methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:58'!printOn: aStream	self isLiteral ifTrue: [self printAsLiteralFormOn: aStream. ^ self].	self isSelfEvaluating ifTrue: [self printAsSelfEvaluatingFormOn: aStream. ^ self].	super printOn: aStream! !!Association methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/14/2005 23:47'!isSelfEvaluating	^ self class == Association! !!Boolean methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:41'!isSelfEvaluating	^ true! !!Class methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/9/2005 21:19'!isSelfEvaluating	^ true! !!Color methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/14/2005 23:48'!isSelfEvaluating	^ self class == Color! !!Interval methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/14/2005 23:46'!isSelfEvaluating	^ self class == Interval! !!Point methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:57'!isSelfEvaluating	^ self class == Point! !!PointerFinder methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:54'!isSelfEvaluating	^ false! !!Rectangle methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/12/2005 19:57'!isSelfEvaluating	^ self class == Rectangle! !!RunArray methodsFor: '*SelfEvaluatingObject' stamp: 'ab 2/14/2005 23:48'!isSelfEvaluating	^ self class == RunArray! !!SelfEvaluatingObjectTest methodsFor: 'utility' stamp: 'ab 2/9/2005 21:24'!assertCode: code print: aString	self assert: (self compile: code) printString = aString! !!SelfEvaluatingObjectTest methodsFor: 'utility' stamp: 'ab 2/9/2005 21:22'!compile: aString	^ Compiler evaluate: aString! !!SelfEvaluatingObjectTest methodsFor: 'self evaluating objects' stamp: 'ab 2/12/2005 20:00'!testArray	"self debug: #testArray"	self assertCode: '#(1 2 3)' print: '#(1 2 3)'.	self assertCode: '{1 . 2 . 3}' print: '#(1 2 3)'.	self assertCode: '{1 + 0 . 2 . 3}' print: '#(1 2 3)'.	self assertCode: '{1 + 0 . 1 @ 2 . 3}' print: '{1 . 1@2 . 3}'.	self assertCode: '{2@3}' print: '{2@3}'.	self assertCode: '{Object new}' print:  'an Array(an Object)'.	self assertCode: '{Rectangle new . Object new}' print:  'an Array(nil corner: nil an Object)'.	self assertCode: '{10@10 corner: 20@20 . 100@100 corner: 200@200}' print: '{10@10 corner: 20@20 . 100@100 corner: 200@200}'! !!SelfEvaluatingObjectTest methodsFor: 'self evaluating objects' stamp: 'ab 2/12/2005 19:45'!testObjects	"self debug: #testObjects"	self assert: 10 isSelfEvaluating.	self assert: $a isSelfEvaluating.	self assert: 3.14157 isSelfEvaluating.	self assert: #(1 2 3) isSelfEvaluating.	self assert: #abc isSelfEvaluating.	self assert: 'abc' isSelfEvaluating.	self assert: Object isSelfEvaluating.	self assert: Object new isSelfEvaluating not.	self assert: (Array with: 10) isSelfEvaluating.	self assert: (Array with: Object new) isSelfEvaluating not.	self assert: true isSelfEvaluating.	self assert: false isSelfEvaluating.	self assert: nil isSelfEvaluating.	self assert: (1 to: 10) isSelfEvaluating.	self assert: (1->2) isSelfEvaluating.	self assert: Color red isSelfEvaluating.	self assert: RunArray new isSelfEvaluating.! !