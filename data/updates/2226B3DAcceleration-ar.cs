'From Squeak2.8alpha of 16 February 2000 [latest update: #2217] on 28 May 2000 at 1:10:41 pm'!"Change Set:		B3DAcceleration-arDate:			28 May 2000Author:			Andreas RaabFinally. The Balloon3D acceleration. Here it comes."!InterpreterPlugin subclass: #B3DAcceleratorPlugin	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: 'B3DEngineConstants '	category: 'Balloon3D-Acceleration'!!B3DAcceleratorPlugin commentStamp: '<historical>' prior: 0!B3DAcceleratorPlugin translate!B3DAcceleratorPlugin class	instanceVariableNames: ''!ExternalScreen subclass: #B3DDisplayScreen	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon3D-Acceleration'!!B3DDisplayScreen commentStamp: '<historical>' prior: 0!I represent a hardware accelerated 3D display. Usually, this means some sort of offscreen buffer (so that we can do efficient compositing for the 2D case) but it might be different.The first implementation uses Direct3D on Windows where compositing is trivially achieved by using DirectDrawSurfaces which can be accessed by either 2D or 3D operations.!B3DPrimitiveEngine subclass: #B3DHardwareEngine	instanceVariableNames: 'vpTransform '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon3D-Acceleration'!!B3DHardwareEngine commentStamp: '<historical>' prior: 0!B3DHardwareEngine is a render engine specifically designed to deal with HW accellerated implementations. The (currently only) difference to the generic render engine is that a HW accellerated engine automatically clips the virtual viewport specified by client. This is necessary since HW accellerated rasterizers can usually not render outside the actual display surface.Note: If the viewport clipping proves to be efficient enough it might be promoted to the general render engine since there is no point in rendering outside the clipping rectangle.!B3DHardwareEngine class	instanceVariableNames: ''!B3DVertexRasterizer subclass: #B3DHardwareRasterizer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon3D-Acceleration'!!B3DHardwareRasterizer commentStamp: '<historical>' prior: 0!WICHTIG:	Viewport muss an den renderer gebunden sein.	Viewport kann multiple sein.!B3DHardwareRasterizer class	instanceVariableNames: ''!!B3DAcceleratorPlugin methodsFor: 'initialize-release' stamp: 'ar 5/26/2000 17:23'!initialiseModule	self export: true.	^self b3dxInitialize! !!B3DAcceleratorPlugin methodsFor: 'initialize-release' stamp: 'ar 5/26/2000 17:23'!shutdownModule	self export: true.	^self b3dxShutdown! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:54'!primitiveBltFromDisplay	| result extent srcOrigin dstOrigin extentX extentY sourceX sourceY destX destY formHandle displayHandle |	self export: true.	interpreterProxy methodArgumentCount = 5		ifFalse:[^interpreterProxy primitiveFail].	extent _ interpreterProxy stackObjectValue: 0.	srcOrigin _ interpreterProxy stackObjectValue: 1.	dstOrigin _ interpreterProxy stackObjectValue: 2.	formHandle _ interpreterProxy stackIntegerValue: 3.	displayHandle _ interpreterProxy stackIntegerValue: 4.	interpreterProxy failed ifTrue:[^nil].	((interpreterProxy isPointers: extent) and:[(interpreterProxy slotSizeOf: extent) = 2])		ifFalse:[^interpreterProxy primitiveFail].	((interpreterProxy isPointers: srcOrigin) and:[(interpreterProxy slotSizeOf: srcOrigin) = 2])		ifFalse:[^interpreterProxy primitiveFail].	((interpreterProxy isPointers: dstOrigin) and:[(interpreterProxy slotSizeOf: dstOrigin) = 2])		ifFalse:[^interpreterProxy primitiveFail].	extentX _ interpreterProxy fetchInteger: 0 ofObject: extent.	extentY _ interpreterProxy fetchInteger: 1 ofObject: extent.	sourceX _ interpreterProxy fetchInteger: 0 ofObject: srcOrigin.	sourceY _ interpreterProxy fetchInteger: 1 ofObject: srcOrigin.	destX _ interpreterProxy fetchInteger: 0 ofObject: dstOrigin.	destY _ interpreterProxy fetchInteger: 1 ofObject: dstOrigin.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxBltFromDisplay(displayHandle, formHandle, destX, destY, sourceX, sourceY, extentX, extentY)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 5. "pop args; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:55'!primitiveBltToDisplay	| result extent srcOrigin dstOrigin extentX extentY sourceX sourceY destX destY formHandle displayHandle |	self export: true.	interpreterProxy methodArgumentCount = 5		ifFalse:[^interpreterProxy primitiveFail].	extent _ interpreterProxy stackObjectValue: 0.	srcOrigin _ interpreterProxy stackObjectValue: 1.	dstOrigin _ interpreterProxy stackObjectValue: 2.	formHandle _ interpreterProxy stackIntegerValue: 3.	displayHandle _ interpreterProxy stackIntegerValue: 4.	interpreterProxy failed ifTrue:[^nil].	((interpreterProxy isPointers: extent) and:[(interpreterProxy slotSizeOf: extent) = 2])		ifFalse:[^interpreterProxy primitiveFail].	((interpreterProxy isPointers: srcOrigin) and:[(interpreterProxy slotSizeOf: srcOrigin) = 2])		ifFalse:[^interpreterProxy primitiveFail].	((interpreterProxy isPointers: dstOrigin) and:[(interpreterProxy slotSizeOf: dstOrigin) = 2])		ifFalse:[^interpreterProxy primitiveFail].	extentX _ interpreterProxy fetchInteger: 0 ofObject: extent.	extentY _ interpreterProxy fetchInteger: 1 ofObject: extent.	sourceX _ interpreterProxy fetchInteger: 0 ofObject: srcOrigin.	sourceY _ interpreterProxy fetchInteger: 1 ofObject: srcOrigin.	destX _ interpreterProxy fetchInteger: 0 ofObject: dstOrigin.	destY _ interpreterProxy fetchInteger: 1 ofObject: dstOrigin.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxBltToDisplay(displayHandle, formHandle, destX, destY, sourceX, sourceY, extentX, extentY)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 5. "pop args; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:15'!primitiveCreateDisplaySurface	| h w d result |	self export: true.	interpreterProxy methodArgumentCount = 3		ifFalse:[^interpreterProxy primitiveFail].	h _ interpreterProxy stackIntegerValue: 0.	w _ interpreterProxy stackIntegerValue: 1.	d _ interpreterProxy stackIntegerValue: 2.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxCreateDisplaySurface(w, h, d)' inSmalltalk:[-1].	result = -1 ifTrue:[^interpreterProxy primitiveFail].	interpreterProxy pop: 4. "args+rcvr"	interpreterProxy pushInteger: result.! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:16'!primitiveDestroyDisplaySurface	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxDestroyDisplaySurface(handle)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 1. "pop arg; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 21:36'!primitiveDisplayGetColorMasks	| handle result masks array |	self export: true.	self var: #masks declareC:'int masks[4]'.	interpreterProxy methodArgumentCount = 2		ifFalse:[^interpreterProxy primitiveFail].	array _ interpreterProxy stackObjectValue: 0.	handle _ interpreterProxy stackIntegerValue: 1.	interpreterProxy failed ifTrue:[^nil].	(interpreterProxy fetchClassOf: array) = interpreterProxy classArray		ifFalse:[^interpreterProxy primitiveFail].	(interpreterProxy slotSizeOf: array) = 4		ifFalse:[^interpreterProxy primitiveFail].	result _ self cCode:'b3dxDisplayColorMasks(handle, masks)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	0 to: 3 do:[:i|		interpreterProxy storePointer: i ofObject: array withValue:			(interpreterProxy positive32BitIntegerFor: (masks at: i))].	interpreterProxy pop: 2. "pop args return receiver"! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:16'!primitiveFillDisplaySurface	| h w result y x pv handle |	self export: true.	interpreterProxy methodArgumentCount = 6		ifFalse:[^interpreterProxy primitiveFail].	h _ interpreterProxy stackIntegerValue: 0.	w _ interpreterProxy stackIntegerValue: 1.	y _ interpreterProxy stackIntegerValue: 2.	x _ interpreterProxy stackIntegerValue: 3.	pv _ interpreterProxy positive32BitValueOf: (interpreterProxy stackValue: 4).	handle _ interpreterProxy stackIntegerValue: 5.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxFillDisplaySurface(handle, pv, x, y, w, h)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 6. "pop args; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:17'!primitiveFinishDisplaySurface	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxFinishDisplaySurface(handle)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 1. "pop arg; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:17'!primitiveFlushDisplaySurface	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxFlushDisplaySurface(handle)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 1. "pop arg; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 21:37'!primitiveSupportsDisplayDepth	| result depth |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	depth _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self b3dxSupportsDisplayDepth: depth.	interpreterProxy pop: 1.	interpreterProxy pushBool: result.! !!B3DAcceleratorPlugin methodsFor: 'primitives-textures' stamp: 'ar 5/28/2000 01:17'!primitiveAllocateTexture	| h w d result |	self export: true.	interpreterProxy methodArgumentCount = 3		ifFalse:[^interpreterProxy primitiveFail].	h _ interpreterProxy stackIntegerValue: 0.	w _ interpreterProxy stackIntegerValue: 1.	d _ interpreterProxy stackIntegerValue: 2.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxAllocateTexture(w, h, d)' inSmalltalk:[-1].	result = -1 ifTrue:[^interpreterProxy primitiveFail].	interpreterProxy pop: 4. "args+rcvr"	interpreterProxy pushInteger: result.! !!B3DAcceleratorPlugin methodsFor: 'primitives-textures' stamp: 'ar 5/28/2000 01:18'!primitiveDestroyTexture	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxDestroyTexture(handle)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 1. "pop arg; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 21:37'!primitiveTextureDepth	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxActualTextureDepth(handle)' inSmalltalk:[-1].	result < 0 ifTrue:[^interpreterProxy primitiveFail].	interpreterProxy pop: 2.	interpreterProxy pushInteger: result.! !!B3DAcceleratorPlugin methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 21:37'!primitiveTextureGetColorMasks	| handle result masks array |	self export: true.	self var: #masks declareC:'int masks[4]'.	interpreterProxy methodArgumentCount = 2		ifFalse:[^interpreterProxy primitiveFail].	array _ interpreterProxy stackObjectValue: 0.	handle _ interpreterProxy stackIntegerValue: 1.	interpreterProxy failed ifTrue:[^nil].	(interpreterProxy fetchClassOf: array) = interpreterProxy classArray		ifFalse:[^interpreterProxy primitiveFail].	(interpreterProxy slotSizeOf: array) = 4		ifFalse:[^interpreterProxy primitiveFail].	result _ self cCode:'b3dxTextureColorMasks(handle, masks)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	0 to: 3 do:[:i|		interpreterProxy storePointer: i ofObject: array withValue:			(interpreterProxy positive32BitIntegerFor: (masks at: i))].	interpreterProxy pop: 2. "pop args return receiver"! !!B3DAcceleratorPlugin methodsFor: 'primitives-textures' stamp: 'ar 5/28/2000 01:18'!primitiveTextureHeight	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxActualTextureHeight(handle)' inSmalltalk:[-1].	result < 0 ifTrue:[^interpreterProxy primitiveFail].	interpreterProxy pop: 2.	interpreterProxy pushInteger: result.! !!B3DAcceleratorPlugin methodsFor: 'primitives-textures' stamp: 'ar 5/28/2000 01:19'!primitiveTextureWidth	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxActualTextureWidth(handle)' inSmalltalk:[-1].	result < 0 ifTrue:[^interpreterProxy primitiveFail].	interpreterProxy pop: 2.	interpreterProxy pushInteger: result.! !!B3DAcceleratorPlugin methodsFor: 'primitives-forms' stamp: 'ar 5/28/2000 01:19'!primitiveAllocateForm	| h w d result |	self export: true.	interpreterProxy methodArgumentCount = 3		ifFalse:[^interpreterProxy primitiveFail].	h _ interpreterProxy stackIntegerValue: 0.	w _ interpreterProxy stackIntegerValue: 1.	d _ interpreterProxy stackIntegerValue: 2.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxAllocateForm(w, h, d)' inSmalltalk:[-1].	result = -1 ifTrue:[^interpreterProxy primitiveFail].	interpreterProxy pop: 4. "args+rcvr"	interpreterProxy pushInteger: result.! !!B3DAcceleratorPlugin methodsFor: 'primitives-forms' stamp: 'ar 5/28/2000 01:19'!primitiveDestroyForm	| handle result |	self export: true.	interpreterProxy methodArgumentCount = 1		ifFalse:[^interpreterProxy primitiveFail].	handle _ interpreterProxy stackIntegerValue: 0.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxDestroyForm(handle)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 1. "pop arg; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-forms' stamp: 'ar 5/27/2000 21:38'!primitiveFormGetColorMasks	| handle result masks array |	self export: true.	self var: #masks declareC:'int masks[4]'.	interpreterProxy methodArgumentCount = 2		ifFalse:[^interpreterProxy primitiveFail].	array _ interpreterProxy stackObjectValue: 0.	handle _ interpreterProxy stackIntegerValue: 1.	interpreterProxy failed ifTrue:[^nil].	(interpreterProxy fetchClassOf: array) = interpreterProxy classArray		ifFalse:[^interpreterProxy primitiveFail].	(interpreterProxy slotSizeOf: array) = 4		ifFalse:[^interpreterProxy primitiveFail].	result _ self cCode:'b3dxFormColorMasks(handle, masks)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	0 to: 3 do:[:i|		interpreterProxy storePointer: i ofObject: array withValue:			(interpreterProxy positive32BitIntegerFor: (masks at: i))].	interpreterProxy pop: 2. "pop args return receiver"! !!B3DAcceleratorPlugin methodsFor: 'primitives-rasterizer' stamp: 'ar 5/28/2000 01:19'!primitiveClearDepthBuffer	| result |	self export: true.	interpreterProxy methodArgumentCount = 0		ifFalse:[^interpreterProxy primitiveFail].	result _ self cCode:'b3dxClearDepthBuffer()'.	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 4. "pop args; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-rasterizer' stamp: 'ar 5/28/2000 01:20'!primitiveProcessVertexBuffer	| idxCount vtxCount vtxArray idxArray texHandle primType result |	self export: true.	self var: #idxArray type: 'int *'.	self var: #vtxArray type: 'float *'.	interpreterProxy methodArgumentCount = 6		ifFalse:[^interpreterProxy primitiveFail].	idxCount _ interpreterProxy stackIntegerValue: 0.	vtxCount _ interpreterProxy stackIntegerValue: 2.	texHandle _ interpreterProxy stackIntegerValue: 4.	primType _ interpreterProxy stackIntegerValue: 5.	interpreterProxy failed ifTrue:[^nil].	vtxArray _ self stackPrimitiveVertexArray: 3 ofSize: vtxCount.	idxArray _ self stackPrimitiveIndexArray: 1 ofSize: idxCount validate: true forVertexSize: vtxCount.	(vtxArray == nil or:[idxArray == nil 		or:[primType < 1 or:[primType > PrimTypeMax 			or:[interpreterProxy failed]]]])				ifTrue:[^interpreterProxy primitiveFail].	result _ self cCode:'b3dxRasterizeVertexBuffer(primType, texHandle, vtxArray, vtxCount, idxArray, idxCount)' inSmalltalk:[false].	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 6. "pop args; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitives-rasterizer' stamp: 'ar 5/26/2000 17:24'!primitiveRasterizerVersion	self export: true.	interpreterProxy methodArgumentCount = 0		ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 1.	interpreterProxy pushInteger: 1.! !!B3DAcceleratorPlugin methodsFor: 'primitives-rasterizer' stamp: 'ar 5/28/2000 01:20'!primitiveSetViewport	| h w y x result |	self export: true.	interpreterProxy methodArgumentCount = 4		ifFalse:[^interpreterProxy primitiveFail].	h _ interpreterProxy stackIntegerValue: 0.	w _ interpreterProxy stackIntegerValue: 1.	y _ interpreterProxy stackIntegerValue: 2.	x _ interpreterProxy stackIntegerValue: 3.	interpreterProxy failed ifTrue:[^nil].	result _ self cCode:'b3dxSetViewport(x, y, w, h)'.	result ifFalse:[^interpreterProxy primitiveFail].	interpreterProxy pop: 4. "pop args; return rcvr"! !!B3DAcceleratorPlugin methodsFor: 'primitive support' stamp: 'ar 5/26/2000 12:37'!stackPrimitiveIndexArray: stackIndex ofSize: nItems validate: aBool forVertexSize: maxIndex	"Load a primitive index array from the interpreter stack.	If aBool is true then check that all the indexes are in the range (1,maxIndex).	Return a pointer to the index data if successful, nil otherwise."	| oop oopSize idxPtr index |	self inline: false.	self returnTypeC:'void*'.	self var: #idxPtr declareC:'int *idxPtr'.	oop _ interpreterProxy stackObjectValue: stackIndex.	oop = nil ifTrue:[^nil].	(interpreterProxy isWords: oop) ifFalse:[^nil]. 	oopSize _ interpreterProxy slotSizeOf: oop.	oopSize < nItems ifTrue:[^nil].	idxPtr _ self cCoerce: (interpreterProxy firstIndexableField: oop) to:'int *'.	aBool ifTrue:[		0 to: nItems-1 do:[:i|			index _ idxPtr at: i.			(index < 0 or:[index > maxIndex]) ifTrue:[^nil]]].	^idxPtr! !!B3DAcceleratorPlugin methodsFor: 'primitive support' stamp: 'ar 5/26/2000 12:38'!stackPrimitiveVertex: index	"Load a primitive vertex from the interpreter stack.	Return a pointer to the vertex data if successful, nil otherwise."	| oop |	self inline: false.	self returnTypeC:'void*'.	oop _ interpreterProxy stackObjectValue: index.	oop = nil ifTrue:[^nil].	((interpreterProxy isWords: oop) and:[(interpreterProxy slotSizeOf: oop) = PrimVertexSize])		ifTrue:[^interpreterProxy firstIndexableField: oop].	^nil! !!B3DAcceleratorPlugin methodsFor: 'primitive support' stamp: 'ar 5/26/2000 12:38'!stackPrimitiveVertexArray: index ofSize: nItems	"Load a primitive vertex array from the interpreter stack.	Return a pointer to the vertex data if successful, nil otherwise."	| oop oopSize |	self inline: false.	self returnTypeC:'void*'.	oop _ interpreterProxy stackObjectValue: index.	oop = nil ifTrue:[^nil].	(interpreterProxy isWords: oop) ifTrue:[ 		oopSize _ interpreterProxy slotSizeOf: oop.		(oopSize >= nItems * PrimVertexSize and:[oopSize \\ PrimVertexSize = 0])			ifTrue:[^interpreterProxy firstIndexableField: oop]].	^nil! !!B3DAcceleratorPlugin class methodsFor: 'translation' stamp: 'ar 5/28/2000 01:50'!headerFile^'/* Header file for 3D accelerator plugin *//* module initialization support */int b3dxInitialize(void); /* return true on success, false on error */int b3dxShutdown(void); /* return true on success, false on error *//* Display support primitives */int b3dxCreateDisplaySurface(int w, int h, int d); /* return handle or -1 on error */int b3dxDestroyDisplaySurface(int handle); /* return true on success, false on error */int b3dxDisplayColorMasks(int handle, int masks[4]); /* return true on success, false on error */int b3dxSupportsDisplayDepth(int depth); /* return true or false */int b3dxFlushDisplaySurface(int handle); /* return true on success, false on error */int b3dxFinishDisplaySurface(int handle); /* return true on success, false on error *//* optional accelerated blt primitives */int b3dxFillDisplaySurface(int handle, int pv, int x, int y, int w, int h); /* return true on success, false on error */int b3dxBltToDisplay(int displayHandle, int formHandle, int dstX, int dstY, int srcX, int srcY, int w, int h); /* return true on success, false on error */int b3dxBltFromDisplay(int displayHandle, int formHandle, int dstX, int dstY, int srcX, int srcY, int w, int h); /* return true on success, false on error *//* Texture support primitives */int b3dxAllocateTexture(int w, int h, int d); /* return handle or -1 on error */int b3dxDestroyTexture(int handle); /* return true on success, false on error */int b3dxActualTextureDepth(int handle); /* return depth or <0 on error */int b3dxActualTextureWidth(int handle); /* return width or <0 on error */int b3dxActualTextureHeight(int handle); /* return height or <0 on error */int b3dxTextureColorMasks(int handle, int masks[4]);  /* return true on success, false on error *//* Form support primitives */int b3dxAllocateForm(int w, int h, int d); /* return handle or -1 on error */int b3dxDestroyForm(int handle); /* return true on success, false on error */int b3dxFormColorMasks(int handle, int masks[4]);  /* return true on success, false on error *//* Rasterizer support primitives */int b3dxSetViewport(int x, int y, int w, int h); /* return true on success, false on error */int b3dxClearDepthBuffer(void); /* return true on success, false on error */int b3dxRasterizeVertexBuffer(int primType, int texHandle, float *vtxArray, int vtxSize, int *idxArray, int idxSize); /* return true on success, false on error */'.! !!B3DAcceleratorPlugin class methodsFor: 'translation' stamp: 'ar 5/26/2000 17:25'!moduleName	^'Squeak3DX'! !!B3DDisplayScreen methodsFor: 'testing' stamp: 'ar 5/27/2000 17:16'!isB3DDisplayScreen	^true! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:47'!primBltFast: displayHandle from: sourceHandle at: destOrigin from: sourceOrigin extent: extent	<primitive:'primitiveBltToDisplay' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/28/2000 01:47'!primBltFast: displayHandle to: dstHandle at: destOrigin from: sourceOrigin extent: extent	"Primitive. Perform a fast blt operation. Return the receiver if successful."	<primitive:'primitiveBltFromDisplay' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 17:18'!primCreateDisplaySurface: d width: w height: h	"Primitive. Create a new external display surface. Return the handle used to identify the receiver. Fail if the surface cannot be created."	<primitive:'primitiveCreateDisplaySurface' module: 'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 17:18'!primDestroyDisplaySurface: aHandle	"Primitive. Destroy the display surface associated with the given handle."	<primitive: 'primitiveDestroyDisplaySurface' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 17:19'!primDisplay: aHandle colorMasksInto: anArray	"Primitive. Store the bit masks for each color into the given array."	<primitive: 'primitiveDisplayGetColorMasks' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 17:19'!primFill: handle color: pixelWord x: x y: y w: w h: h	"Primitive. Perform an accelerated fill operation on the receiver."	<primitive:'primitiveFillDisplaySurface' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 17:20'!primFinish: aHandle	"Primitive. Finish all rendering operations on the receiver.	Do not return before all rendering operations have taken effect."	<primitive: 'primitiveFinishDisplaySurface' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 17:21'!primFlush: aHandle	"Primitive. If any rendering operations are pending, force them to be executed.	Do not wait until they have taken effect."	<primitive: 'primitiveFlushDisplaySurface' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-display' stamp: 'ar 5/27/2000 17:21'!supportsDisplayDepth: pixelDepth	"Return true if this pixel depth is supported on the current host platform."	<primitive: 'primitiveSupportsDisplayDepth' module:'Squeak3DX'>	^false! !!B3DDisplayScreen methodsFor: 'primitives-forms' stamp: 'ar 5/27/2000 17:21'!primAllocateForm: d width: w height: h	"Primitive. Allocate a form with the given parameters"	<primitive:'primitiveAllocateForm' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-forms' stamp: 'ar 5/27/2000 17:22'!primDestroyForm: aHandle	"Primitive. Destroy the form associated with the given handle."	<primitive:'primitiveDestroyForm' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-forms' stamp: 'ar 5/27/2000 17:22'!primForm: aHandle colorMasksInto: anArray	"Primitive. Store the bit masks for each color into the given array."	<primitive: 'primitiveFormGetColorMasks' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 20:21'!primAllocateTexture: d width: w height: h	"Primitive. Allocate a texture with the given dimensions.	Note: The texture allocated may *not* match the specified values here."	<primitive:'primitiveAllocateTexture' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 17:23'!primDestroyTexture: aHandle	"Primitive. Destroy the texture associated with the given handle."	<primitive:'primitiveDestroyTexture' module:'Squeak3DX'>	^nil! !!B3DDisplayScreen methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 17:23'!primGetTextureDepth: aHandle	"Primitive. Return the actual depth of the texture with the given handle"	<primitive:'primitiveTextureDepth' module:'Squeak3DX'>	^self primitiveFailed! !!B3DDisplayScreen methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 17:24'!primGetTextureHeight: aHandle	"Primitive. Return the actual height of the texture with the given handle"	<primitive:'primitiveTextureHeight' module:'Squeak3DX'>	^self primitiveFailed! !!B3DDisplayScreen methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 17:24'!primGetTextureWidth: aHandle	"Primitive. Return the actual width of the texture with the given handle"	<primitive:'primitiveTextureWidth' module:'Squeak3DX'>	^self primitiveFailed! !!B3DDisplayScreen methodsFor: 'primitives-textures' stamp: 'ar 5/27/2000 17:24'!primTexture: aHandle colorMasksInto: anArray	"Primitive. Store the bit masks for each color into the given array."	<primitive: 'primitiveTextureGetColorMasks' module:'Squeak3DX'>	^nil! !!B3DHardwareEngine methodsFor: 'accessing' stamp: 'ar 5/28/2000 04:05'!viewport: aRectangle	"check if we need a transform override for the viewport"	| vp clipRect |	vp _ aRectangle.	clipRect _ rasterizer clipRect.	(clipRect containsRect: vp) ifTrue:[		"Good. The viewport is fully within the clip rect."		vpTransform _ nil.	] ifFalse:[		"We need a transform override here"		vp _ clipRect intersect: vp.		"Actual viewport is vp. Now scale from aRectangle into vp.		This is equivalent to picking vp center with vp extent."		vp area > 0 ifTrue:[			vpTransform _ self pickingMatrixFor: aRectangle at: (vp origin + vp corner) * 0.5 extent: vp extent].	].	"And set actual viewport"	super viewport: vp.! !!B3DHardwareEngine methodsFor: 'private-rendering' stamp: 'ar 2/27/2000 20:14'!privateTransformVB: vb	vpTransform 		ifNil:[^transformer processVertexBuffer: vb]		ifNotNil:["We must override the projection matrix here"			^transformer				processVertexBuffer: vb					modelView: transformer modelViewMatrix					projection: (transformer projectionMatrix composedWithGlobal: vpTransform)].! !!B3DHardwareEngine class methodsFor: 'accessing' stamp: 'ar 2/24/2000 00:15'!rasterizer	^B3DHardwareRasterizer! !!B3DHardwareRasterizer methodsFor: 'initialize' stamp: 'ar 5/26/2000 15:13'!finish	"Wait until drawing was completed so we won't get into any trouble with 2D operations afterwards. Note: Later we will synchronize this with the portions of display in use."	target finish! !!B3DHardwareRasterizer methodsFor: 'initialize' stamp: 'ar 5/26/2000 15:13'!flush	"Flush the pipeline. Flushing will force processing but not wait until it's finished."	target flush.! !!B3DHardwareRasterizer methodsFor: 'initialize' stamp: 'ar 5/26/2000 15:28'!viewport: vp	super viewport: vp.	self primSetViewportX: viewport left 			y: viewport top 			w: viewport width 			h: viewport height.! !!B3DHardwareRasterizer methodsFor: 'accessing' stamp: 'ar 5/27/2000 00:47'!clearDepthBuffer	self primClearDepthBuffer.! !!B3DHardwareRasterizer methodsFor: 'testing' stamp: 'ar 2/24/2000 00:00'!needsClip	^true! !!B3DHardwareRasterizer methodsFor: 'processing' stamp: 'ar 5/27/2000 17:27'!processVertexBuffer: vb	self primProcessVB: vb primitive 			texture: (target textureHandleOf: texture) 			vertices: vb vertexArray 			vertexCount: vb vertexCount 			faces: vb indexArray 			faceCount: vb indexCount.	^nil! !!B3DHardwareRasterizer methodsFor: 'primitives' stamp: 'ar 5/26/2000 15:06'!primClearDepthBuffer	<primitive:'primitiveClearDepthBuffer' module:'Squeak3DX'>	^self primitiveFailed! !!B3DHardwareRasterizer methodsFor: 'primitives' stamp: 'ar 5/26/2000 12:49'!primProcessVB: primitiveType texture: textureHandle vertices: vtxArray vertexCount: vtxCount faces: idxArray faceCount: idxCount	<primitive:'primitiveProcessVertexBuffer' module:'Squeak3DX'>	^self primitiveFailed! !!B3DHardwareRasterizer methodsFor: 'primitives' stamp: 'ar 2/24/2000 00:06'!primSetViewportX: left y: top w: width h: height	<primitive:'primitiveSetViewport' module:'Squeak3DX'>	^self primitiveFailed! !!B3DHardwareRasterizer class methodsFor: 'accessing' stamp: 'ar 5/25/2000 22:00'!isAvailable	^self version > 0! !!B3DHardwareRasterizer class methodsFor: 'accessing' stamp: 'ar 5/25/2000 22:01'!version	"B3DPrimitiveRasterizer version"	<primitive:'primitiveRasterizerVersion' module:'Squeak3DX'>	^0! !!B3DHardwareRasterizer class methodsFor: 'testing' stamp: 'ar 5/27/2000 01:42'!isAvailableFor: aForm	"Return true if this part of the engine is available for the given output medium"	aForm ifNil:[^false].	aForm isB3DDisplayScreen ifFalse:[^false].	^self isAvailable! !