Morph subclass: #DownloadingImageMorph	instanceVariableNames: 'url altText image downloadQueue '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Formatter'!!DownloadingImageMorph commentStamp: 'ls 9/8/1998 21:39' prior: 0!a placeholder for an image that is downloading!!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 8/20/1998 09:12'!altText: aString	"set the text to be displayed while downloading"	altText _ aString.	self setContents! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 18:07'!download	"download the image and display it"	| doc |	doc _ url retrieveContents.	doc contentType = 'image/gif' 	ifTrue: [		image _ (GIFReadWriter on: (RWBinaryOrTextStream with: doc content) binary reset) nextImage. 		self setContents ]	ifFalse: [		Transcript show: 'content type is: ', doc contentType, String cr. ].	! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 18:08'!downloadState	"download the image and display it"	| doc |	doc _ url retrieveContents.	doc contentType = 'image/gif' 	ifTrue: [		image _ (GIFReadWriter on: (RWBinaryOrTextStream with: doc content) binary reset) nextImage. 		self setContents ]	ifFalse: [		Transcript show: 'content type is: ', doc contentType, String cr. ].	! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 18:15'!initialize	super initialize.	altText _ '[image]'.	self color: Color transparent.! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 18:41'!setContents	"set up our morphic contents"	| stringMorph imageMorph outlineMorph |	self removeAllMorphs.	image		ifNil: [ 			altText = '' ifTrue: [ "don't display anything..." ^self ].			stringMorph _ StringMorph new.			stringMorph contents: altText.			stringMorph position: self position+(2@2).			self addMorph: stringMorph.			outlineMorph _ RectangleMorph new.			outlineMorph borderWidth: 1.			outlineMorph color: Color transparent.			outlineMorph position: self position.			outlineMorph extent: (stringMorph extent + (4@4)).			self addMorph: outlineMorph.			self extent: stringMorph extent ]		ifNotNil: [			imageMorph _ ImageMorph new.			imageMorph image: image.			imageMorph position: self position.			self addMorph: imageMorph.			self extent: imageMorph extent ].! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 18:03'!startDownloading	"download the image in a background thread, and put it on downloadQueue when it arrives"	| doc |	[ [		doc _ url retrieveContents.		doc contentType = 'image/gif' ifTrue: [			downloadQueue nextPut: (GIFReadWriter on: (RWBinaryOrTextStream with: doc content) binary reset) nextImage. ]		ifFalse: [			Transcript show: 'content type is: ', doc contentType, String cr. ].	] ifError: [ :a :b | ] ] fork.! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 8/20/1998 09:15'!step	downloadQueue size > 0 ifTrue: [		image _ downloadQueue next.		self setContents ].	image isNil ifFalse: [ self stopStepping ]! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 18:05'!stepTime	"this doesn't need to be fast"	^500! !!DownloadingImageMorph methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 17:48'!url: aUrl	"set the url to download"	url _ aUrl asUrl.! !Object subclass: #HtmlFormatter	instanceVariableNames: 'browser baseUrl formDatas outputStream preformattedLevel indentLevel boldLevel italicsLevel underlineLevel strikeLevel centerLevel urlLink listLengths listTypes precedingSpaces precedingNewlines morphsToEmbed incompleteMorphs '	classVariableNames: 'CSNonSeparators CSSeparators '	poolDictionaries: ''	category: 'HTML-Formatter'!!HtmlFormatter commentStamp: 'ls 9/8/1998 21:39' prior: 0!a filter which formats HTML into a Text with attributes!!HtmlFormatter methodsFor: 'forms' stamp: 'ls 7/16/1998 22:07'!currentFormData	"return the current form data, or nil if we aren't inside a form"	formDatas size > 0 		ifTrue: [ ^formDatas last ]		ifFalse: [ ^nil ].! !!HtmlFormatter methodsFor: 'forms' stamp: 'ls 7/16/1998 22:06'!endForm	formDatas size > 0 ifTrue: [ 		formDatas removeLast. ]	ifFalse: [ self halt: 'HtmlFormatter: ended more forms that started!!?' ].! !!HtmlFormatter methodsFor: 'forms' stamp: 'ls 8/5/1998 07:14'!startForm: form	"a form is beginning"	formDatas addLast: (FormInputSet forForm: form  andBrowser: browser).! !!HtmlFormatter methodsFor: 'access' stamp: 'ls 7/16/1998 22:08'!baseUrl	"return the base URL for the document we are formatting, if known"	^baseUrl! !!HtmlFormatter methodsFor: 'access' stamp: 'ls 7/16/1998 22:09'!baseUrl: url	"set the base url.  All relative URLs will be determined relative to it"	baseUrl _ url.! !!HtmlFormatter methodsFor: 'access' stamp: 'ls 7/16/1998 22:07'!browser	"return the browser we are formatting for, or nil if none"	^browser! !!HtmlFormatter methodsFor: 'access' stamp: 'ls 7/16/1998 22:08'!browser: b	"set what browser we are formatting for"	browser _ b.! !!HtmlFormatter methodsFor: 'access' stamp: 'ls 9/5/1998 18:08'!incompleteMorphs	"list of morphs needing to download some more state"	^incompleteMorphs! !!HtmlFormatter methodsFor: 'private-initialization' stamp: 'ls 9/5/1998 18:07'!initialize	outputStream _ AttributedTextStream new.	preformattedLevel _ 0.	indentLevel _ boldLevel _ italicsLevel _ underlineLevel _ strikeLevel _ centerLevel _ 0.	listLengths _ OrderedCollection new.	listTypes _ OrderedCollection new.	formDatas _ OrderedCollection new.	precedingSpaces _ 0.	precedingNewlines _ 1000.   "more than will ever be asked for"	morphsToEmbed _ OrderedCollection new.	incompleteMorphs _ OrderedCollection new.	outputStream nextPut: Character cr.! !!HtmlFormatter methodsFor: 'private-formatting' stamp: 'ls 8/5/1998 01:41'!setAttributes	"set attributes on the output stream"	| attribs |	attribs _ OrderedCollection new.	indentLevel > 0 ifTrue: [ attribs add: (TextIndent tabs: indentLevel) ].	boldLevel > 0 ifTrue: [ attribs add: TextEmphasis bold ].	italicsLevel >  0 ifTrue: [ attribs add: TextEmphasis italic ].	underlineLevel > 0 ifTrue: [ attribs add: TextEmphasis underlined ].	strikeLevel > 0 ifTrue: [ attribs add: TextEmphasis struckOut ].	urlLink isNil ifFalse: [ attribs add: (TextURL new url: urlLink) ].	outputStream currentAttributes: attribs! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:11'!addChar: c	| |	"add the character to the output"	outputStream nextPut: c.	"update counters for preceeding spaces and preceding newlines"	(c = Character space or: [ c = Character tab ]) 	ifTrue: [ precedingSpaces _ precedingSpaces+1.  precedingNewlines _ 0 ]	ifFalse: [		(c = Character cr) ifTrue: [			precedingSpaces _ 0.			precedingNewlines _ precedingNewlines + 1 ]		ifFalse: [			precedingSpaces _ precedingNewlines _ 0 ] ].! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 9/5/1998 18:09'!addIncompleteMorph: aMorph	"add a morph, and note that it needs to download some more state before reaching its ultimate state"	self addMorph: aMorph.	incompleteMorphs add: aMorph.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/30/1998 02:51'!addLink: text  url: url	"add a link with the given url and text"	| savedAttributes linkAttribute  |	"set up the link attribute"	linkAttribute _ TextURL new.	linkAttribute url: url.	"add the link to the stream"	savedAttributes _ outputStream currentAttributes.	outputStream currentAttributes: (savedAttributes, linkAttribute).	outputStream nextPutAll: text.	outputStream currentAttributes: savedAttributes.	"reset counters"	precedingSpaces _ precedingNewlines _ 0.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/29/1998 07:39'!addMorph: aMorph	"add a morph to the output"	| savedAttributes |	self addChar: Character space.	savedAttributes _ outputStream currentAttributes.	outputStream currentAttributes: (savedAttributes copyWith: (TextAnchor new anchoredMorph: aMorph)).	self addChar: $*.	outputStream currentAttributes: savedAttributes.	self addChar: Character space.	morphsToEmbed add: aMorph.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 8/25/1998 06:10'!addString: aString	"adds the text in the given string.  It collapses spaces unless we are in a preformatted region"	| space compacted lastC i |	aString isEmpty ifTrue: [ ^self ].	space _ Character space.	preformattedLevel > 0 ifTrue: [		"add all the characters as literals"		outputStream nextPutAll: aString.		"update the counters"		lastC _ aString last.		(lastC = space or: [ lastC = Character cr ]) ifTrue: [			"how many of these are there?"			i _ aString size - 1.			[ i >= 1 and: [ (aString at: i) = lastC ] ] whileTrue: [ i _ i - 1 ].			i = 0 ifTrue: [				"the whole string is the same character!!"				lastC = space ifTrue: [					precedingSpaces _ precedingSpaces + aString size.					precedingNewlines _ 0.					^self ]				ifFalse: [					precedingSpaces _ 0.					precedingNewlines _ precedingNewlines + aString size.					^self ]. ].			lastC = space ifTrue: [				precedingSpaces _ aString size - i.				precedingNewlines _ 0 ]			ifFalse: [				precedingSpaces _ 0.				precedingNewlines _ aString size - i ] ] ]	ifFalse: [		compacted _ aString withSeparatorsCompacted.		compacted = ' ' ifTrue: [			"no letters in the string--just white space!!"			(precedingNewlines = 0 and: [precedingSpaces = 0]) ifTrue: [				precedingSpaces _ 1.				outputStream nextPut: space. ].			^self ].		(compacted first = Character space and: [			(precedingSpaces > 0) or: [ precedingNewlines > 0] ])		ifTrue: [ compacted _ compacted copyFrom: 2 to: compacted size ].		outputStream nextPutAll: compacted.		"update counters"		precedingNewlines _ 0.		compacted last = space 			ifTrue: [ precedingSpaces _ 1 ]			ifFalse: [ precedingSpaces _ 0 ]. ]! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:12'!decreaseBold	boldLevel _ boldLevel - 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:12'!decreaseIndent	indentLevel _ indentLevel - 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:12'!decreaseItalics	italicsLevel _ italicsLevel - 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/16/1998 22:58'!decreasePreformatted	preformattedLevel _ preformattedLevel - 1! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/5/1998 02:03'!decreaseStrike	strikeLevel _ strikeLevel - 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/5/1998 01:39'!decreaseUnderline	underlineLevel _ underlineLevel - 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/30/1998 03:17'!endLink: url	urlLink _ nil.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 8/20/1998 11:34'!endListItem	"end a list item"	self ensureNewlines: 1.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/5/1998 13:17'!endOrderedList	"end an ordered list"	listLengths removeLast.	listTypes removeLast.	indentLevel _ indentLevel - 1.	self setAttributes. 	self ensureNewlines: 1.	! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/5/1998 13:18'!endUnorderedList	"end an unordered list"	listLengths removeLast.	listTypes removeLast.	indentLevel _ indentLevel - 1.	self setAttributes. 		self ensureNewlines: 1.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/25/1998 17:21'!ensureNewlines: number	"make sure there are at least number preceding newlines"	number > precedingNewlines ifTrue: [		(number - precedingNewlines) timesRepeat: [ self addChar: Character cr ] ].! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 8/16/1998 11:34'!ensureSpaces: number	"make sure there are at least number preceding spaces, unless we're at the beginning of a new line"	precedingNewlines > 0 ifTrue: [ ^ self ].	number > precedingSpaces ifTrue: [		(number - precedingSpaces) timesRepeat: [ self addChar: Character space ] ].! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:57'!hr	"add a horizontal rule"	self ensureNewlines: 1.	5 timesRepeat: [ self addChar: $- ].	self ensureNewlines: 1.	precedingSpaces _ 0.	precedingNewlines _ 1000.    "pretend it's the top of a new page"! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:12'!increaseBold	boldLevel _ boldLevel + 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:12'!increaseIndent	indentLevel _ indentLevel + 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/27/1998 15:13'!increaseItalics	italicsLevel _ italicsLevel + 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/16/1998 22:58'!increasePreformatted	preformattedLevel _ preformattedLevel + 1! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/5/1998 02:03'!increaseStrike	strikeLevel _ strikeLevel + 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/5/1998 01:40'!increaseUnderline	underlineLevel _ underlineLevel + 1.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/4/1998 14:54'!preformatted: aBoolean	preformatted _ aBoolean! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 6/30/1998 03:17'!startLink: url	urlLink _ url.	self setAttributes.! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/13/1998 23:19'!startListItem	"begin a new list item"	listTypes size = 0 ifTrue: [ ^self ].	self ensureNewlines: 1.	listTypes last = #unordered		ifTrue: [ self addString: 'o ' ]		ifFalse: [ self addString: (listLengths last + 1) printString.			self addString: '. ' ].	listLengths at: (listLengths size) put: (listLengths last + 1).! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/4/1998 19:44'!startOrderedList	"begin an ordered list"	listLengths add: 0.	listTypes add: #ordered.	indentLevel _ indentLevel + 1.	self setAttributes.	! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'ls 7/4/1998 19:44'!startUnorderedList	"begin an unordered list"	listLengths add: 0.	listTypes add: #unordered.	indentLevel _ indentLevel + 1.	self setAttributes.	! !!HtmlFormatter methodsFor: 'formatting' stamp: 'ls 6/30/1998 01:13'!text	| text |	text _ outputStream contents.	^text! !!HtmlFormatter methodsFor: 'formatting' stamp: 'ls 7/16/1998 21:55'!textMorph	| text textMorph |	text _ outputStream contents.	textMorph _ TextMorph new contents: text.	morphsToEmbed do:[ :m | textMorph addMorph: m ].	^textMorph! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HtmlFormatter class	instanceVariableNames: ''!!HtmlFormatter class methodsFor: 'instance creation' stamp: 'ls 6/25/1998 17:25'!new	^super new initialize! !!HtmlFormatter class methodsFor: 'example' stamp: 'ls 7/14/1998 00:42'!example1	"(HtmlFormatter example1 asParagraph compositionRectangle: (0@0 extent: 300@500) ) displayAt: 0@0"	| input |	input _ ReadStream on: '<html><head><title>The Gate of Chaos</title></head><body><h1>Chaos</h1><h2>Into the Maelstrom</h2>Direction is useless in the ever-changing Maelstrom.  However,if you wander with purpose, you might be able to find....<ul><li><a href="/cgi-bin/w">see who''s logged in</a><li><a href="/Telnet/connect.html">log in, if you (oooh) have an account</a><li><a href="http://chaos.resnet.gatech.edu:9000/sw">The Chaos Swiki</a>--scribble on chaos<li>the original <a href="/cgi-bin/guestlog-print">Visitor Sands</a><li>my old <a href="rant.html">Rant Page</a><li>neverending <a href="/cgi-bin/bread">poll</a>: do you have an opinion on bread?<li>a <a href="http://www.cc.gatech.edu/~lex/linux.html">Linux page</a>-- free UNIX for PC''s!!<li><a href="english.au">Hear Linus Himself speak!!!!</a><li><a href="/doc/">some docs on all kinds of computer stuff</a></ul><hr><h2>Paths of Retreat</h2>Several commonly travelled ways have left paths leading <em>away</em> from the maelstrom, too:<p><ul><li><a href="friends.html">Friends of Chaos</a><li><a href="http://www.apache.org/">The <em>Apache</em> home page</a> --         <em>Chaos</em>''s WWW server!!<li><a href="http://www.ee.umanitoba.ca/~djc/personal/notscape.html">Notscape</a>the <a href="http://www.eskimo.com/%7Eirving/anti-ns/">Anti-NetscapePage</a> -- fight the tyranny!!</ul><hr><a href="/analog/usage.html">usage stats</a> for this server<hr><a href="http://www.eff.org/blueribbon.html"><img src="blueribbon.gif" alt="[blue ribbon campaign]"></a><a href="http://www.ee.umanitoba.ca/~djc/personal/notscape.html"><img src="notscape.gif" alt="[NOTscape]"></a><a href="http://www.anybrowser.org/campaign/"><img src="anybrowser3.gif" alt="[Best Viewed With Any Browser"]></a></body></html>'.	^(HtmlParser on: input) formattedText! !!HtmlFormatter class methodsFor: 'initialization' stamp: 'ls 8/20/1998 06:05'!initialize	"HtmlFormatter initialize"	CSSeparators _ CharacterSet separators.	CSNonSeparators _ CSSeparators complement.! !HtmlFormatter initialize!