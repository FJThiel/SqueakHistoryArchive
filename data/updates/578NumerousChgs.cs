'From Squeak 2.3 beta of Nov 25, 1998 on 13 January 1999 at 3:51:53 pm'!"Change Set:		NumerousChangesDate:			13 January 1999Author:			Lots of peopleNumerous changes here for various Squeak contributors, including...PrettyPrint now asks before changing your text.ChangeLists tell you if there are no older versions.Also properly compare the selection to current code.Integer asFloat does not lose precision.Number readFrom accepts negative numbers.Command-shift keys work in editor on windows.TextMorphs have a better bounding box."!!Browser methodsFor: 'message functions' stamp: 'di 1/13/1999 13:19'!prettyPrint	"Reformat the selected method"	| selectedClass |	((self messageListIndex = 0) | (self okToChange not))		ifTrue: [^ self changed: #flash].	selectedClass _ self selectedClassOrMetaClass.	contents _ selectedClass compilerClass new			format: contents			in: selectedClass			notifying: nil.	self changed: #contents.! !!ChangeList methodsFor: 'menu actions' stamp: 'di 1/13/1999 15:48'!changeListMenu: aMenu^ aMenu labels:'fileIn selectionsfileOut selections...compare to currentselect conflictsselect conflicts withselect unchanged methodsselect methods for this classselect alldeselect allremove doItsremove older versionsremove selections'	lines: #(2 9)	selections: #(fileInSelections fileOutSelectionscompareToCurrentVersion selectConflicts selectConflictsWith selectUnchangedMethods selectMethodsForThisClass selectAll deselectAllremoveDoIts removeOlderMethodVersions removeSelections)! !!ChangeList methodsFor: 'menu actions' stamp: 'di 1/13/1999 14:34'!compareToCurrentVersion	"If the current selection corresponds to a method in the system,	then spawn a window showing the diffs as text"	| change class s1 s2 |	listIndex = 0 ifTrue: [^ self].	change _ changeList at: listIndex.	((class _ change methodClass) notNil			and: [class includesSelector: change methodSelector])	ifTrue:		[s1 _ (class sourceCodeAt: change methodSelector) asString.		s2 _ change string.		s1 = s2 ifTrue: [^ self inform: 'Exact Match'].		(StringHolder new textContents:			(TextDiffBuilder buildDisplayPatchFrom: s1 to: s2))			openLabel: 'Comparison to Current Version']	ifFalse:		[self flash].! !!ChangeList methodsFor: 'menu actions' stamp: 'ls 11/14/1998 14:30'!selectMethodsForThisClass	| name |	self currentChange ifNil: [ ^self ].	name _ self currentChange methodClassName.	name ifNil: [ ^self ].	^self selectSuchThat: [ :change |		change methodClassName = name ].! !!ChangeList methodsFor: 'viewing access' stamp: 'di 1/13/1999 14:59'!listSelectionAt: index put: value	^ listSelections at: index put: value! !!ChangeList methodsFor: 'accessing' stamp: 'TPR 11/28/1998 17:38'!listHasSingleEntry	"does the list of changes have only a single item?"	^list size = 1! !!ChangeList class methodsFor: 'public access' stamp: 'di 1/13/1999 12:37'!browseVersionsOf: method class: class meta: meta		category: category selector: selector 	| changeList |	Cursor read showWhile:		[changeList _ self new			scanVersionsOf: method class: class meta: meta			category: category selector: selector].	changeList		ifNil:			[self inform: 'No versions available']		ifNotNil:			[changeList listHasSingleEntry ifTrue:				[^ self inform: 'No older versions of this method'].			self open: changeList name: 'Recent versions of ' ,selector multiSelect: false]! !!ChangeList class methodsFor: 'public access' stamp: 'di 1/13/1999 12:39'!browseVersionsOf: method class: class meta: meta		category: category selector: selector lostMethodPointer: sourcePointer	| changeList |	Cursor read showWhile:		[changeList _ self new			scanVersionsOf: method class: class meta: meta			category: category selector: selector].	changeList		ifNil:			[self inform: 'No versions available']		ifNotNil:			[changeList listHasSingleEntry ifTrue:				[^ self inform: 'No older versions of this method'].			changeList setLostMethodPointer: sourcePointer.			self open: changeList name: 'Recent versions of ' , selector multiSelect: false]! !!FlashSpriteMorph methodsFor: 'actions' stamp: 'di 1/13/1999 12:26'!actionTarget: target	"Set the context of an action.	I'm not really sure what the context of an action is."	Transcript cr; print: 'actionTarget = '; print: target; endEntry.	^ nil! !!Inspector methodsFor: 'accessing' stamp: 'di 1/13/1999 14:36'!wantsSteps	^ true! !!Integer methodsFor: 'converting' stamp: 'di 1/13/1999 12:45'!asFloat	"Answer a Float that represents the value of the receiver.	Optimized to process only the significant digits of a LargeInteger.	SqR: 11/30/1998 21:11"	| sum firstByte shift |	shift _ 0.	sum _ 0.0.	firstByte _ self size - 7 max: 1.	firstByte to: self size do:		[:byteIndex | 		sum _ ((self digitAt: byteIndex) asFloat timesTwoPower: shift) + sum.		shift _ shift + 8].	^sum * self sign asFloat timesTwoPower: firstByte - 1 * 8! !!Number class methodsFor: 'instance creation' stamp: 'bf 12/9/1998 19:21'!readFrom: stringOrStream 	"Answer a number as described on aStream.  The number may	include a leading radix specification, as in 16rFADE"	| value base aStream sign |	aStream _ (stringOrStream isMemberOf: String)		ifTrue: [ReadStream on: stringOrStream]		ifFalse: [stringOrStream].	(aStream nextMatchAll: 'NaN') ifTrue: [^ Float nan].	sign _ (aStream peekFor: $-) ifTrue: [-1] ifFalse: [1].	(aStream nextMatchAll: 'Infinity') ifTrue: [^ Float infinity * sign].	base _ 10.	value _ Integer readFrom: aStream base: base.	(aStream peekFor: $r)		ifTrue: 			["<base>r<integer>"			(base _ value) < 2 ifTrue: [^self error: 'Invalid radix'].			(aStream peekFor: $-) ifTrue: [sign _ sign negated].			value _ Integer readFrom: aStream base: base].	^ self readRemainderOf: value from: aStream base: base withSign: sign.! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'di 1/13/1999 13:25'!shiftedYellowButtonMenu	"Answer the menu to be presented when the yellow button is pressed while the shift key is down. 3/13/96 sw	 5/27/96 sw: added font menu"	^ PopUpMenu labels: 'set font... (k)set style... (K)explainpretty printfile it inrecognizer (r)spawn (o)browse it (b)senders of it (n)implementors of it (m)references to it (N)selectors containing it (W)method strings with it (E)method source with itspecial menu...more...' 		lines: #(2 7 14).! !!PluggableTextController class methodsFor: 'as yet unclassified' stamp: 'di 1/13/1999 13:25'!shiftedYellowButtonMenu	"Answer the menu to be presented when the yellow button is pressed while the shift key is down. 3/13/96 sw	 5/27/96 sw: added font menu"	^ PopUpMenu labels: 'set font... (k)set style... (K)explainpretty printfile it inrecognizer (r)spawn (o)browse it (b)senders of it (n)implementors of it (m)references to it (N)selectors containing it (W)method strings with it (E)method source with itspecial menu...more...' 		lines: #(2 7 14).! !!TextMorph methodsFor: 'geometry' stamp: 'di 1/13/1999 14:11'!containsPoint: aPoint	(super containsPoint: aPoint) ifFalse: [^false].	self startingIndex > text size ifTrue:		["make null text frame visible"		^ super containsPoint: aPoint].	^ self paragraph containsPoint: aPoint! !ParagraphEditor removeSelector: #prettyPrint:!PluggableTextMorph removeSelector: #prettyPrint!