'From Squeak2.7alpha of 17 November 1999 [latest update: #1698] on 11 December 1999 at 8:08:10 pm'!"Change Set:		FileListRecentDirsDate:			9 December 1999Author:			Stephen T. PopeThe enclosed change set adds a 'recent' menu item to the volume listpane in the file list view. It holds the last several visited folders.The list is a class variable. See FileList initialize."!FileList addClassVarName: 'RecentDirs'!!FileList methodsFor: 'volume list and pattern' stamp: 'stp 12/11/1999 19:37'!volumeListIndex: index	"Select the volume name having the given index."	| delim path |	volListIndex := index.	index = 1 		ifTrue: [self directory: (FileDirectory on: '')]		ifFalse: [delim := directory pathNameDelimiter.				path := String streamContents: [:strm |					2 to: index do: [:i |						strm nextPutAll: (volList at: i) withBlanksTrimmed.						i < index ifTrue: [strm nextPut: delim]]].				self directory: (directory on: path)].	brevityState := #FileList.	self addPath: path.	self changed: #fileList.	self changed: #contents! !!FileList methodsFor: 'volume list and pattern' stamp: 'stp 12/11/1999 19:34'!volumeMenu: aMenu	^ aMenu labels:'recent...add server...remove server...delete directory...'		lines: # (1 3)		selections: #(recentDirs askServerInfo removeServer deleteDirectory)! !!FileList methodsFor: 'file list' stamp: 'stp 12/11/1999 19:38'!fileListIndex: anInteger	"Select the file name having the given index, and display its contents."	| item name |	self okToChange ifFalse: [^ self].	listIndex := anInteger.	listIndex = 0 		ifTrue: [fileName := nil]		ifFalse:			[item := self fileNameFromFormattedItem: (list at: anInteger).			(item endsWith: self folderString)				ifTrue:					["remove [...] folder string and open the folder"					name := item copyFrom: 1 to: item size - self folderString size.					listIndex := 0.					brevityState := #FileList.					self addPath: name.					name first = $^						ifTrue: [self directory: (ServerDirectory serverNamed: name allButFirst)]						ifFalse: [self directory: (directory directoryNamed: name)]]				ifFalse: [fileName := item]].  "open the file selected"	brevityState := #needToGetBrief.	self changed: #fileListIndex.	self changed: #contents! !!FileList methodsFor: 'private' stamp: 'stp 12/11/1999 20:05'!addPath: aString	"Add the given string to the list of recently visited directories."	| full |	aString ifNil: [^self].	full := String streamContents: 		[ :strm | 2 to: volList size do: 			[ :i | strm nextPutAll: (volList at: i) withBlanksTrimmed.			strm nextPut: FileDirectory pathNameDelimiter]].	full := full, aString."Remove and super-directories of aString from the collection."	RecentDirs removeAllSuchThat: [ :aDir | ((aDir, '*') match: full)]."If a sub-directory is in the list, do nothing."	(RecentDirs detect: [ :aDir | ((full, '*') match: aDir)] ifNone: [nil])		ifNotNil: [^self].	[RecentDirs size >= 10]		whileTrue: [RecentDirs removeFirst].	RecentDirs addLast: full! !!FileList methodsFor: 'private' stamp: 'stp 12/11/1999 20:03'!recentDirs	"Put up a menu and let the user select from the list of recently visited directories."	| dirName |	RecentDirs isEmpty ifTrue: [^self].	dirName := (SelectionMenu selections: RecentDirs) startUp.	dirName == nil ifTrue: [^self].	self directory: (FileDirectory on: dirName)! !!FileList class methodsFor: 'class initialization' stamp: 'stp 12/11/1999 19:47'!initialize	"FileList initialize"	RecentDirs := OrderedCollection new! !FileList initialize!