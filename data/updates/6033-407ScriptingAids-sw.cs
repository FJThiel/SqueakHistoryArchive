"Change Set:		e07ScriptingAids-swDate:			4 June 2004Author:			Scott WallaceAdapted sw 7/25/2004 03:43 from update  0216scriptingAids-sw.cs of Squeakland; several clashes with mcp, etc., had to be resolved.Some improvements to make the summary-of-scripts feature more bulletproof and more readable; also some debugging aids.*  If a script is missing (owing to a structural error) the script-summary reports that in the printout, rather than generating an error condition.*  The actual external name of a typical instance is used, rather than the class name, in the individual script summaries.*  The player name is repeated in the first line of each individual script's printout, so that it's easier to keep track of which script is associated with which object.*  Also, a method Morph.flashBounds, very useful for debugging, is added.*  Fixes the logic in ScriptEditorMorph so that a script-editor with no submorphs doesn't bomb when one tries to update the status of it.*  Adds the ability to launch a traditional smalltalk browser on all the scripts in the project, and an option to try to repair a project that may have some damaged things in it."!!ClassDescription methodsFor: 'fileIn/Out' stamp: 'sw 7/25/2004 03:36'!printMethodChunk: selector withPreamble: doPreamble on: outStream		moveSource: moveSource toFile: fileIndex	"Copy the source code for the method associated with selector onto the fileStream.  If moveSource true, then also set the source code pointer of the method."	| preamble method oldPos newPos sourceFile endPos |	doPreamble 		ifTrue: [preamble _ self name , ' methodsFor: ' ,					(self organization categoryOfElement: selector) asString printString]		ifFalse: [preamble _ ''].	method _ self methodDict at: selector ifAbsent:		[outStream nextPutAll: selector; cr.		outStream tab; nextPutAll: '** ERROR!!  THIS SCRIPT IS MISSING ** ' translated; cr; cr.		outStream nextPutAll: '  '.		^ outStream].	((method fileIndex = 0		or: [(SourceFiles at: method fileIndex) == nil])		or: [(oldPos _ method filePosition) = 0])		ifTrue:		["The source code is not accessible.  We must decompile..."		preamble size > 0 ifTrue: [outStream cr; nextPut: $!!; nextChunkPut: preamble; cr].		outStream nextChunkPut: (self decompilerClass new decompile: selector											in: self method: method) decompileString]		ifFalse:		[sourceFile _ SourceFiles at: method fileIndex.		preamble size > 0 ifTrue:    "Copy the preamble"			[outStream copyPreamble: preamble from: sourceFile at: oldPos].		"Copy the method chunk"		newPos _ outStream position.		outStream copyMethodChunkFrom: sourceFile.		sourceFile skipSeparators.      "The following chunk may have ]style["		sourceFile peek == $] ifTrue: [			outStream cr; copyMethodChunkFrom: sourceFile].		moveSource ifTrue:    "Set the new method source pointer"			[endPos _ outStream position.			method checkOKToAdd: endPos - newPos at: newPos.			method setSourcePosition: newPos inFile: fileIndex]].	preamble size > 0 ifTrue: [outStream nextChunkPut: ' '].	^ outStream cr! !!MessageSet methodsFor: 'private' stamp: 'sw 7/25/2004 03:37'!initializeMessageList: anArray	"Initialize my messageList from the given list of MethodReference or string objects.  NB¬¨¬±: special handling for uniclasses."	| s |	messageList _ OrderedCollection new.	anArray do: [ :each |		MessageSet 			parse: each  			toClassAndSelector: [ :class :sel |				class ifNotNil:					[class isUniClass						ifTrue:							[s _ class typicalInstanceName, ' ', sel]						ifFalse:							[s _ class name , ' ' , sel , ' {' , 								((class organization categoryOfElement: sel) ifNil: ['']) , '}'].					messageList add: (						MethodReference new							setClass: class  							methodSymbol: sel 							stringVersion: s)]]].	messageListIndex _ messageList isEmpty ifTrue: [0] ifFalse: [1].	contents _ ''! !!Morph methodsFor: 'drawing' stamp: 'sw 11/26/2003 17:43'!flashBounds	"Flash the receiver's bounds  -- does not use the receiver's color, thus works with StringMorphs and SketchMorphs, etc., for which #flash is useless.  No senders initially, but useful to send this from a debugger or inspector"	5 timesRepeat:		[Display flash: self boundsInWorld  andWait: 120]! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 6/6/2004 13:16'!attemptCleanup	"Try to fix up some bad things that are known to occur in some etoy projects we've seen.  This is a bare beginning, but a useful place to tack on further cleanups, which then can be invoked whenever the attempt-cleanup item invoked from the debug menu"	self attemptCleanupReporting: true"ActiveWorld attemptCleanup"! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 6/6/2004 13:16'!attemptCleanupReporting: whetherToReport	"Try to fix up some bad things that are known to occur in some etoy projects we've seen.  This is a bare beginning, but a useful place to tack on further cleanups, which then can be invoked whenever the attempt-cleanup item invoked from the debug menu.  If the whetherToReport parameter is true, an informer is presented after the cleanups"	| fixes |	fixes _ 0.	ActiveWorld ifNotNil:		[(ActiveWorld submorphs select:			[:m | (m isKindOf: ScriptEditorMorph) and: [m submorphs isEmpty]]) do:				[:m | m delete.  fixes _ fixes + 1]].	whetherToReport ifTrue:		[self inform: fixes printString, ' repair(s) made']"ActiveWorld attemptCleanupReporting: true.ActiveWorld attemptCleanupReporting: false."! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 6/4/2004 15:00'!browseAllScriptsTextually	"Put up a browser showing all scripts in the project textually"	self presenter browseAllScriptsTextually"ActiveWorld browseAllScriptsTextually"! !!Player class methodsFor: 'user-scripted subclasses' stamp: 'sw 6/4/2004 13:59'!addDocumentationForScriptsTo: aStream	"Add documentation for every script in the receiver to the stream"	self scripts do:		[:aScript |			aScript selector ifNotNil:				[aStream cr; cr.				aStream nextPutAll: self typicalInstanceName, '.'.				self printMethodChunk: aScript selector withPreamble: false on: aStream moveSource: false toFile: nil.				aStream position: (aStream position - 2)]].	self scripts size == 0 ifTrue:		[aStream cr; tab; nextPutAll: 'has no scripts']! !!Player class methodsFor: 'user-scripted subclasses' stamp: 'sw 6/4/2004 15:04'!addMethodReferencesTo: aCollection	"For each extant script in the receiver, add a MethodReference object"	| sel |	self scripts do:		[:aScript |			(sel _ aScript selector) ifNotNil:				[aCollection add: (MethodReference new setStandardClass: self methodSymbol: sel)]]! !!Player class methodsFor: 'other' stamp: 'sw 6/4/2004 13:56'!typicalInstanceName	"For the purpose of documentation, answer the name of a named instance of the receiver, if possible, else answer the class name"	| known |	known _ (self allInstances collect: [:i | i knownName]) detect: [:n | n isEmptyOrNil not] ifNone: [nil].	^ known ifNil: [self name]! !!Presenter methodsFor: 'playerList' stamp: 'sw 6/4/2004 14:32'!browseAllScriptsTextually	"Open a method-list browser on all the scripts in the project"	| aList aMethodList |	(aList _ self uniclassesAndCounts) size == 0 ifTrue: [^ self inform: 'there are no scripted players'].	aMethodList _ OrderedCollection new.	aList do:		[:aPair | aPair first addMethodReferencesTo: aMethodList].	aMethodList size > 0 ifFalse: [^ self inform: 'there are no scripts in this project!!'].		Smalltalk 		browseMessageList: aMethodList 		name: 'All scripts in this project' 		autoSelect: nil"ActiveWorld presenter browseAllScriptsTextually"! !!Presenter methodsFor: 'playerList' stamp: 'sw 7/25/2004 03:40'!reportPlayersAndScripts	"Open a window which contains a report on players and their scripts"	| aList aString |	(aList _ self uniclassesAndCounts) ifEmpty:  [^ self inform: 'there are no scripted players' translated].	aString _ String streamContents:		[:aStream |			aList do:				[:aPair | aStream nextPutAll: aPair first name, ' -- ', aPair second printString, ' instance' translated,		(aPair second > 1 ifTrue: ['s'] ifFalse: ['']) , ', named '.					aPair first allInstancesDo: [:inst | aStream space; nextPutAll: inst externalName].					aStream cr].			aStream cr.			aList do:				[:aPair |					aStream cr.					aStream nextPutAll: '--------------------------------------------------------------------------------------------'.					aStream cr; nextPutAll: aPair first typicalInstanceName.					aStream nextPut: $'.					aStream nextPutAll: 's scripts:' translated.					aPair first addDocumentationForScriptsTo: aStream]].	(StringHolder new contents: aString)		openLabel: 'All scripts in this project' translated"self currentWorld presenter reportPlayersAndScripts"! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'sw 5/25/2004 16:57'!updateStatus	"Update that status in the receiver's header.  "	(self topEditor == self and: [firstTileRow ~~ 1]) ifTrue:		[(submorphs size == 0 or: [(self firstSubmorph findA: ScriptStatusControl) isNil])			ifTrue:				[self replaceRow1].		self updateStatusMorph: (self firstSubmorph findA: ScriptStatusControl)]! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 6/6/2004 13:09'!scriptingMenu	"Build the authoring-tools menu for the world."	^ self fillIn: (self menu: 'authoring tools...') from: { 		{ 'objects (o)' . { #myWorld . #activateObjectsTool }. 'A searchable source of new objects.'}.		nil.  "----------" 		{ 'view trash contents' . { #myWorld . #openScrapsBook:}. 'The place where all your trashed morphs go.'}. 		{ 'empty trash can' . { Utilities . #emptyScrapsBook}. 'Empty out all the morphs that have accumulated in the trash can.'}.		nil.  "----------"			{ 'new scripting area' . { #myWorld . #detachableScriptingSpace}. 'A window set up for simple scripting.'}.		nil.  "----------"					{ 'status of scripts' . {#myWorld . #showStatusOfAllScripts}. 'Lets you view the status of all the scripts belonging to all the scripted objects of the project.'}.		{ 'summary of scripts' . {#myWorld . #printScriptSummary}. 'Produces a summary of scripted objects in the project, and all of their scripts.'}.		{ 'browser for scripts' . {#myWorld . #browseAllScriptsTextually}. 'Allows you to view all the scripts in the project in a traditional programmers'' "browser" format'}.		nil."		{ 'gallery of players' . {#myWorld . #galleryOfPlayers}. 'A tool that lets you find out about all the players used in this project'}.		{ 'gallery of scripts' . {#myWorld . #galleryOfScripts}. 'Allows you to view all the scripts in the project'}."		{ 'attempt misc repairs' . {#myWorld . #attemptCleanup}. 'Take measures that may help fix up some things about a faulty or problematical project.'}.		{ 'remove all viewers' . {#myWorld . #removeAllViewers}. 'Remove all the Viewers from this project.'}.		nil.  "----------" 		{ 'unlock locked objects' . { #myWorld . #unlockContents}. 'If any items on the world desktop are currently locked, unlock them.'}.                { 'unhide hidden objects' . { #myWorld . #showHiders}. 'If any items on the world desktop are currently hidden, make them visible.'}.        }! !