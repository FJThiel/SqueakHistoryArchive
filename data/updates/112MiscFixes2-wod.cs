'From Squeak 2.0 of May 22, 1998 on 17 June 1998 at 4:03:13 pm'!"Change Set:		MiscFixes2-wodDate:			17 June 1998Author:			Bill Dargel      wdargel@shoshana.comMiscelloneous fixes to the base classes:ChangeSorter >> chooseCngSet - fix up change made in 100ChangeSorterTweaks-di to select correct ChangeSet now that the order is 'reversed'.MessageSet >> selectedMessageName - fix so that doing 'senders' (Cmd-n) in a MessageSet list when nothing is selected no longer gives a debugger.String >> at:put: - Doing <<'abc' at: 4 put: $d>> would generate the error 'only integers should be used as indices'. This could be confusing especially for a newbe. Change it to report 'subscript is out of bounds: 4'.ControlManager >> findWindowSatisfying: - Have it select the correct window when 'sortAlphabetically' is true (from having the shift key pressed). FileDirectory >> statsForDirectoryTree: - add a 'Cursor wait' and also use 'self pathNameDelimiter asString' rather than hardwired ':'.Utilities class >> saveUpdate:onFile: - Fix it so the saves will actually occur independently of whether the #updateRemoveSequenceNum preference is true or false."!!ChangeSorter methodsFor: 'changeSet menu' stamp: 'wod 6/16/1998 15:01'!chooseCngSet	"Put up a list of them"	| index |	self okToChange ifFalse: [^ self].	ChangeSet instanceCount > AllChangeSets size ifTrue: [self class gatherChangeSets].	index _ (PopUpMenu labels: 		(AllChangeSets reversed collect: [:each | each name]) asStringWithCr) startUp.	index = 0 ifFalse: [self showChangeSet: (AllChangeSets reversed at: index)].! !!ControlManager methodsFor: 'scheduling' stamp: 'wod 6/17/1998 15:46'!findWindowSatisfying: aBlock	"Present a menu of window titles, and activate the one that gets chosen"	| sortAlphabetically controllers listToUse labels index |	sortAlphabetically _ Sensor shiftPressed.	controllers _ OrderedCollection new.	scheduledControllers do: [:controller |		controller == screenController ifFalse:			[(aBlock value: controller) ifTrue: [controllers addLast: controller]]].	controllers size == 0 ifTrue: [^ self].	listToUse _ sortAlphabetically		ifTrue: [controllers asSortedCollection: [:a :b | a view label < b view label]]		ifFalse: [controllers].	labels _ String streamContents:		[:strm | 			listToUse do: [:controller | strm nextPutAll: (controller view label contractTo: 40); cr].		strm skip: -1  "drop last cr"].	index _ (PopUpMenu labels: labels) startUp.	index > 0 ifTrue:		[self activateController: (listToUse at: index)].! !!FileDirectory methodsFor: 'enumeration' stamp: 'wod 6/16/1998 15:07'!statsForDirectoryTree: rootedPathName	"Return the size statistics for the entire directory tree starting at the given root. The result is a three element array of the form: (<number of folders><number of files><total bytes in all files>). This method also serves as an example of how recursively enumerate a directory tree."	"wod 6/16/1998: add Cursor wait, and use 'self pathNameDelimiter asString' rather than hardwired ':' "	"FileDirectory default statsForDirectoryTree: '\smalltalk'"	| dirs files bytes todo p entries |	Cursor wait showWhile: [		dirs _ files _ bytes _ 0.		todo _ OrderedCollection with: rootedPathName.		[todo isEmpty] whileFalse: [			p _ todo removeFirst.			entries _ self directoryContentsFor: p.			entries do: [:entry |				(entry at: 4)					ifTrue: [						todo addLast: (p, self pathNameDelimiter asString, (entry at: 1)).						dirs _ dirs + 1]					ifFalse: [						files _ files + 1.						bytes _ bytes + (entry at: 5)]]]].	^ Array with: dirs with: files with: bytes! !!MessageSet methodsFor: 'message list' stamp: 'wod 6/16/1998 15:08'!selectedMessageName	"Answer the name of the currently selected message."	"wod 6/16/1998: answer nil if none are selected."	messageListIndex = 0 ifTrue: [^nil].	self setClassAndSelectorIn: [:class :selector | ^ selector]! !!String methodsFor: 'accessing' stamp: 'wod 6/16/1998 15:24'!at: index put: aCharacter 	"Primitive. Store the Character in the field of the receiver indicated by	the index. Fail if the index is not an Integer or is out of bounds, or if	the argument is not a Character. Essential. See Object documentation	whatIsAPrimitive."	<primitive: 64>	(aCharacter isKindOf: Character)		ifTrue: [				index isInteger				ifTrue: [self errorSubscriptBounds: index]				ifFalse: [self errorNonIntegerIndex]]		ifFalse: [self error: 'Strings only store Characters']! !!Utilities class methodsFor: 'fetching updates' stamp: 'wod 5/21/1998 18:38'!saveUpdate: doc onFile: fileName	"See if the user wants the update stored on a local file.  With or without the update number on the front."	| file fName pos |	(Preferences valueOfFlag: #updateSavesFile) ifFalse: [^ self].	fName _ fileName.	(Preferences valueOfFlag: #updateRemoveSequenceNum) ifTrue: [		pos _ fName findFirst: [:c | c isDigit not].		fName _ fName copyFrom: pos to: fName size].	doc reset; ascii.	(FileDirectory default fileExists: fName) ifFalse: [		file _ FileStream newFileNamed: fName.		file nextPutAll: doc contents.		file close].! !