'From Squeak2.6 of 11 October 1999 [latest update: #1559] on 19 November 1999 at 8:42:30 am'!Object subclass: #Exception       instanceVariableNames: 'messageText initialContext resignalException handlerContext tag activeHandler '       classVariableNames: ''       poolDictionaries: ''       category: 'Exceptions-Kernel'!!Exception methodsFor: 'private' stamp: 'tfei 11/14/1999 17:20'!findHandlerFrom: startCtx       | ctx handler |       ctx := startCtx.       [ctx == nil]               whileFalse:                       [ctx isHandlerContext                               ifTrue:                                       [handler := ctx tempAt: 1. "the first argument"                                       ((handler handles: self) and: [(ctx tempAt: 2) sender == nil])                                               ifTrue:                                                       [handlerContext := ctx.                                                       ^ctx]].                       ctx := ctx sender].       ^nil! !!Exception methodsFor: 'private' stamp: 'tfei 11/14/1999 17:00'!handlerAction       | na handler returnValue |       handler := handlerContext tempAt: 2.    "the second argument"       na := handler numArgs.       returnValue := na == 0                                               ifTrue: [handler value]                                               ifFalse: [handler value: self].       resignalException == nil ifFalse: [^returnValue].       "Execution will only continue beyond this point if the handler did not specify a handler action."       self return: returnValue! !!Exception methodsFor: 'exceptionDescription' stamp: 'tfei 11/19/1999 08:42'!tag       "Return an exception's tag value."       ^tag == nil               ifTrue: [self messageText]               ifFalse: [tag]! !!ExceptionTester methodsFor: 'tests' stamp: 'tfei 11/14/1999 17:26'!doubleResumeTest       [self doSomething.       MyResumableTestError signal.       self doSomethingElse.       MyResumableTestError signal.       self doYetAnotherThing]               on: MyResumableTestError               do: [:ex | ex resume].! !!ExceptionTester methodsFor: 'results' stamp: 'tfei 11/14/1999 17:29'!doubleResumeTestResults       ^OrderedCollection new               add: self doSomethingString;               add: self doSomethingElseString;               add: self doYetAnotherThingString;               yourself! !!ExceptionTester methodsFor: 'accessing' stamp: 'tfei 11/14/1999 17:33'!basicTestSelectors       ^#( simpleEnsureTest simpleEnsureTestWithNotification simpleEnsureTestWithUparrow simpleEnsureTestWithError signalFromHandlerActionTest               resumableFallOffTheEndHandler nonResumableFallOffTheEndHandler doubleResumeTest)! !