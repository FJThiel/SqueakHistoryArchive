'From Squeak 2.3 of January 14, 1999 on 15 March 1999 at 10:58:20 pm'!"Change Set:		gcFeedback-jhmDate:			9 March 1999Author:			John MaloneyAdds feedback to reverse a few pixels of the display duringincremental and full garbage collections when assertionchecking is turned on. This feedback may be helpful indebugging. Also clarifies a comment inInterpreterSimulator>ioMicroMSecs."!!ObjectMemory methodsFor: 'garbage collection' stamp: 'jm 3/15/1999 22:51'!fullGC	"Do a mark/sweep garbage collection of the entire object memory. Free inaccessible objects but do not move them."	| startTime |	self inline: false.	DoAssertionChecks ifTrue: [self reverseDisplayFrom: 0 to: 7].	self preGCAction: true.	startTime _ self ioMicroMSecs.	self clearRootsTable.	youngStart _ self startOfMemory.  "process all of memory"	self markPhase.	self sweepPhase.	self fullCompaction.	allocationCount _ 0.	statFullGCs _ statFullGCs + 1.	statFullGCMSecs _ statFullGCMSecs + (self ioMicroMSecs - startTime).	youngStart _ freeBlock.  "reset the young object boundary"	self postGCAction.	DoAssertionChecks ifTrue: [self reverseDisplayFrom: 0 to: 7].! !!ObjectMemory methodsFor: 'garbage collection' stamp: 'jm 3/9/1999 11:07'!incrementalGC	"Do a mark/sweep garbage collection of just the young object area of object memory (i.e., objects above youngStart), using the root table to identify objects containing pointers to young objects from the old object area."	| survivorCount startTime |	self inline: false.	rootTableCount >= RootTableSize ifTrue: [		"root table overflow; cannot do an incremental GC (this should be very rare)"		statRootTableOverflows _ statRootTableOverflows + 1.		^ self fullGC].	DoAssertionChecks ifTrue: [self reverseDisplayFrom: 8 to: 15].	DoAssertionChecks ifTrue: [self validateRoots].	self preGCAction: false.	"incremental GC and compaction"	startTime _ self ioMicroMSecs.	self markPhase.	survivorCount _ self sweepPhase.	self incrementalCompaction.	allocationCount _ 0.	statIncrGCs _ statIncrGCs + 1.	statIncrGCMSecs _ statIncrGCMSecs + (self ioMicroMSecs - startTime).	survivorCount > tenuringThreshold ifTrue: [		"move up the young space boundary if there are too many survivors;		 this limits the number of objects that must be processed on future		 incremental GC's"		statTenures _ statTenures + 1.		self clearRootsTable.		youngStart _ freeBlock.  "reset the young object boundary"	].	self postGCAction.	DoAssertionChecks ifTrue: [self reverseDisplayFrom: 8 to: 15].! !!Interpreter methodsFor: 'I/O primitives' stamp: 'jm 3/9/1999 10:00'!reverseDisplayFrom: startIndex to: endIndex	"Reverse the given range of Display words (at different bit depths, this will reverse different numbers of pixels). Used to give feedback during VM activities such as garbage collection when debugging. It is assumed that the given word range falls entirely within the first line of the Display."	| displayObj dispBitsPtr w h d reversed |	displayObj _ self splObj: TheDisplay.	((self isPointers: displayObj) and: [(self lengthOf: displayObj) >= 4])		ifFalse: [^ nil].	dispBitsPtr _ (self fetchPointer: 0 ofObject: displayObj) + BaseHeaderSize.	w _ self fetchInteger: 1 ofObject: displayObj.	h _ self fetchInteger: 2 ofObject: displayObj.	d _ self fetchInteger: 3 ofObject: displayObj.	dispBitsPtr + (startIndex * 4) to: dispBitsPtr + (endIndex * 4) by: 4 do: [:ptr |		reversed _ (self longAt: ptr) bitXor: 16rFFFFFFFF.		self longAt: ptr put: reversed].	self cCode: 'ioShowDisplay(dispBitsPtr, w, h, d, 0, w, 0, 1)'.	self ioForceDisplayUpdate.! !!InterpreterSimulator methodsFor: 'I/O primitives support' stamp: 'jm 3/9/1999 10:00'!ioMicroMSecs	"Answer the value of the high-resolution millisecond clock."	^ Time millisecondClockValue! !