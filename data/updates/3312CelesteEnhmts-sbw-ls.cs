'From Squeak2.9alpha of 13 June 2000 [latest update: #3299] on 2 February 2001 at 1:04:06 pm'!Model subclass: #Celeste	instanceVariableNames: 'mailDB currentCategory currentMessages currentTOC currentMsgID lastCategory subjectFilter fromFilter dateFilter customFilterBlock formatMessages lastCategoryList lastCategoryMenu messageTextView userPassword status tocLists participantFilter '	classVariableNames: 'CCList CustomFilters DeleteInboxAfterFetching FormatWhenFetching MessageCountLimit PopServer PopUserName SmtpServer SuppressWorthlessHeaderFields TimeZone UserName '	poolDictionaries: ''	category: 'Network-Mail Reader'!!Celeste methodsFor: 'open-close' stamp: 'ls 1/27/2001 18:21'!openOnDatabase: aMailDB	"Initialize myself for the mail database with the given root filename."	mailDB _ aMailDB.	mailDB addDependent: self.	currentCategory _ 'new'.	lastCategory _ ''.	subjectFilter _ ''.	fromFilter _ ''.	participantFilter _ ''.	dateFilter _ nil.	self setCategory: currentCategory.! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/28/2001 23:14'!cacheTOC	"Caches a version of the TOC"	| s tocString tocStringColumns |	self initializeTocLists.	currentTOC _ OrderedCollection new: currentMessages size.	'Processing ' , currentMessages size printString , ' messages.'		displayProgressAt: Sensor cursorPoint		from: 0		to: currentMessages size		during: [:bar | 1				to: currentMessages size				do: [:i | 					bar value: i.					s _ WriteStream								on: (String new: 100).					s nextPutAll: i printString;						 space.					(self tocLists at: 1)						add: i printString.					[s position < 4]						whileTrue: [s space].					tocString _ mailDB								getTOCstring: (currentMessages at: i).					"columns from the database are 5"					tocStringColumns _ mailDB								getTOCstringAsColumns: (currentMessages at: i).					s nextPutAll: tocString.					currentTOC add: s contents.					(self tocLists at: 2)						add: ((tocStringColumns at: 5)								ifTrue: ['@']								ifFalse: [' ']).					(self tocLists at: 3)						add: (tocStringColumns at: 1).					(self tocLists at: 4)						add: (tocStringColumns at: 2).					(self tocLists at: 5)						add: (tocStringColumns at: 4).					(self tocLists at: 6)						add: (tocStringColumns at: 3)]].	currentTOC _ currentTOC asArray.	(currentMessages includes: currentMsgID)		ifFalse: [currentMsgID _ nil]! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 21:29'!categoryMenu: aMenu 	"Answer the menu for the categories pane."	aMenu add: 'save' action: #save.	aMenu balloonTextForLastItem: 'Save the database'.	aMenu addLine.	aMenu add: 'fetch mail' action: #fetchMail.	aMenu balloonTextForLastItem: 'Fetch new mail from the server'.	aMenu add: 'send queued mail' action: #sendQueuedMail.	aMenu balloonTextForLastItem: 'Send newly written mail'.	aMenu addLine.	aMenu add: 'add category' action: #addCategory.	aMenu balloonTextForLastItem: 'Add a new organizational category'.	currentCategory notNil		ifTrue: [aMenu add: 'view all messages' action: #viewAllMessages.			aMenu balloonTextForLastItem: 'View all the messages'].	"add extra commands if a normal category is selected"	(currentCategory notNil			and: [currentCategory ~= '.all.' & (currentCategory ~= '.unclassified.')])		ifTrue: [aMenu add: 'edit category filter' action: #editCategoryFilter.			aMenu balloonTextForLastItem: 'Edit a custom filter for this category'.			aMenu add: 'rename category' action: #renameCategory.			aMenu balloonTextForLastItem: 'Rename this organizational category'.			aMenu add: 'remove category' action: #removeCategory.			aMenu balloonTextForLastItem: 'Remove this organizational category(NB: all messages will be safely available in other categories)'.			aMenu addLine.			aMenu add: 'import into category' action: #importIntoCategory.			aMenu balloonTextForLastItem: 'Import messages from a Unix/Eudora file into this category'.			aMenu add: 'export category (Celeste)' action: #exportCategory.			aMenu balloonTextForLastItem: 'Copy all messages from this category to another Celeste database'.			aMenu add: 'export category (Unix/Eudora)' action: #exportCategoryUnix.			aMenu balloonTextForLastItem: 'Write a copy of all messages from this category to a Unix/Eudora file'].	aMenu addLine.	aMenu add: 'empty trash' action: #emptyTrash.	aMenu balloonTextForLastItem: 'Completely remove all messages in the category .trash. from Celeste'.	aMenu add: 'salvage & compact' action: #compact.	aMenu balloonTextForLastItem: 'Salvage any work done since the last database save & recover space used by old deleted messages.(This may be a bit slow)'.	aMenu add: 'find duplicates' action: #findDuplicates.	aMenu balloonTextForLastItem: 'Find messages which are exact duplicates'.	aMenu addLine.	aMenu addUpdating: #suppressingHeadersString action: #toggleSuppressHeaders.	aMenu balloonTextForLastItem: 'Show either a complete or an easy-to-read message header'.	aMenu add: 'change max current messages (' , self class messageCountLimit printString , ')' action: #changeMaxMessageCount.	aMenu addLine.	aMenu add: 'set user name' action: #setUserName.	aMenu balloonTextForLastItem: 'Specify the ''From:'' user name for new messages'.	aMenu add: 'set cc: list' action: #setCCList.	aMenu balloonTextForLastItem: 'Specify a cc: list that is added to each new message'.	aMenu add: 'set POP server' action: #setPopServer.	aMenu balloonTextForLastItem: 'Specify which (POP3) server to check for new messages'.	aMenu add: 'set POP username' action: #setPopUserName.	aMenu balloonTextForLastItem: 'Specify the username to use when checking for new messages'.	aMenu add: 'set SMTP server' action: #setSmtpServer.	aMenu balloonTextForLastItem: 'Specify which (SMTP) server to use when sending messages'.	aMenu addLine.	aMenu addUpdating: #messagesOnServerString action: #toggleKeepMessagesOnServer.	aMenu balloonTextForLastItem: 'When true, messages are not deleted from the server when you retreive them (typically used for testing only).  When false, messages are deleted from the server after you retreive them'.	^ aMenu! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 20:12'!maxMessagesToDisplay	"return the maximum number of mesasges to display at one time; the  	motivation is that huge lists of messages are impractical"	^ self class messageCountLimit! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 20:25'!messages: actuallyShown from: possible 	self class includeStatusPane ifTrue: [	self status: 'Showing ' , actuallyShown printString , ' of ' , possible printString , ' messages in "' , self category , '"']! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 21:07'!messagesOnServerString	| string |	string _ 'leave messages on server'.	^ DeleteInboxAfterFetching 		ifTrue: ['<no>' , string]		ifFalse: ['<yes>' , string]! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 20:20'!setCategory: newCategory 	"Change the currently selected category. We must also compute the table  	of contents and message list for the new category."	| messageCount |	currentCategory _ newCategory.	newCategory isNil		ifTrue: [currentMessages _ currentTOC _ currentMsgID _ nil.			self class includeStatusPane				ifTrue: [status _ nil]]		ifFalse: [currentMessages _ self filteredMessagesIn: newCategory.			messageCount _ currentMessages size.			messageCount > self maxMessagesToDisplay				ifTrue: [self messages: self maxMessagesToDisplay from: messageCount.				currentMessages _ currentMessages copyLast: self maxMessagesToDisplay]				ifFalse: [self messages: messageCount from: messageCount].			self cacheTOC].	self changed: #category.	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText.	self changed: #status! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 21:02'!suppressingHeadersString	| string |	string _ 'suppress header'.	^ SuppressWorthlessHeaderFields		ifTrue: ['<yes>' , string]		ifFalse: ['<no>' , string]! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 21:22'!toggleKeepMessagesOnServer	DeleteInboxAfterFetching _ DeleteInboxAfterFetching not! !!Celeste methodsFor: 'categories pane' stamp: 'sbw 1/30/2001 19:50'!viewAllMessages	currentMessages _ self filteredMessagesIn: self category.	self messages: currentMessages size from:  currentMessages size.	self cacheTOC.	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 1/27/2001 17:04'!autoFile	"automatically pick a folder for the current message, and file the current message there"	| folder |	folder := self chooseFilterForCurrentMessage.	folder ifNil: [ ^self].	mailDB file: currentMsgID inCategory: folder.! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 1/27/2001 17:04'!autoMove	"automatically pick a folder for the current message, and move the message there"	| folder |	folder := self chooseFilterForCurrentMessage.	folder ifNil: [ ^self].	mailDB file: currentMsgID inCategory: folder.	self removeMessage.! !!Celeste methodsFor: 'table of contents pane' stamp: 'sbw 2/1/2001 10:25'!deleteMessage	"Move the current message to the '.trash.' category and select the next  	message. Deleted messages can later purged by the 'empty trash' menu  	item"	currentMsgID isNil		ifTrue: [^ self].	self requiredCategory: '.trash.'.	mailDB file: currentMsgID inCategory: '.trash.'.	self removeMessage! !!Celeste methodsFor: 'table of contents pane' stamp: 'sbw 2/1/2001 10:44'!removeMessage	"Remove the current message from the current category."	| currentMessageIndex |	currentMsgID		ifNil: [^ self].	mailDB remove: currentMsgID fromCategory: currentCategory.	"remove the message from the listing"	currentMessageIndex _ currentMessages indexOf: currentMsgID.	currentMessages _ currentMessages copyWithout: currentMsgID.	currentTOC _ currentTOC copyWithoutIndex: currentMessageIndex.	1		to: self tocLists size		do: [:index | (tocLists at: index) removeAt: currentMessageIndex].	"update the message index and message ID"	currentMessages isEmpty		ifTrue: [currentMsgID _ nil]		ifFalse: [currentMsgID _ currentMessages						at: (currentMessageIndex min: currentMessages size)].	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText! !!Celeste methodsFor: 'table of contents pane' stamp: 'sbw 2/2/2001 13:03'!setTOCEntry: newTOCentry 	"Change the currently selected message. This is done by finding the  	message ID corresponding to the selected table of contents entry."	| i |	newTOCentry isNil | currentTOC isNil		ifTrue: [currentMsgID _ nil]		ifFalse: [i _ (self tocLists at: 1)						indexOf: newTOCentry						ifAbsent: [].			i isNil				ifTrue: [currentMsgID _ nil]				ifFalse: [currentMsgID _ currentMessages at: i]].	self changed: #tocEntry.	Cursor read		showWhile: [self changed: #messageText]! !!Celeste methodsFor: 'table of contents pane' stamp: 'sbw 1/28/2001 23:18'!tocEntry	"Answer the table of contents entry for the currently selected message  	or nil."	currentMsgID isNil		ifTrue: [^ nil]		ifFalse: [^ (self tocLists at: 1)				at: (currentMessages indexOf: currentMsgID)]! !!Celeste methodsFor: 'table of contents pane' stamp: 'sbw 1/28/2001 23:18'!tocEntryList	currentCategory isNil		ifTrue: [self initializeTocLists].	self tocLists == nil		ifTrue: [self initializeTocLists].	^ self tocLists! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 1/27/2001 18:18'!tocMenu: aMenu 	"Answer the menu for the table of contents pane."	| messageSelected autoFolder |	currentCategory ifNil: [^ nil].	messageSelected _ currentMsgID isNil not.	messageSelected		ifTrue: 			[aMenu add: 'delete' action: #deleteMessage.			aMenu balloonTextForLastItem: 'Move this message to the .trash. category'.			aMenu addLine.			aMenu add: 'compose' action: #compose.			aMenu balloonTextForLastItem: 'Compose a new message'.			aMenu add: 'reply' action: #reply.			aMenu balloonTextForLastItem: 'Reply to this message'.			aMenu add: 'forward' action: #forward.			aMenu balloonTextForLastItem: 'Forward this message'.			self currentMessage body isMultipart				ifTrue: 					[aMenu add: 'parts...' action: #partsMenu.					aMenu balloonTextForLastItem: 'Forward this message'].			aMenu addLine.			lastCategory isEmpty				ifFalse: 					[aMenu add: 'file -> ' , lastCategory action: #fileAgain.					aMenu balloonTextForLastItem: 'Add this message also to the category ' , lastCategory.					aMenu add: 'move -> ' , lastCategory action: #moveAgain.					aMenu balloonTextForLastItem: 'Move this message to the category ' , lastCategory.					aMenu addLine].			autoFolder := self chooseFilterForCurrentMessage.			autoFolder ifNotNil: [				aMenu add: ('file -> ', autoFolder) action: #autoFile.				aMenu add: ('move -> ', autoFolder) action: #autoMove.				aMenu addLine ].			aMenu add: 'file' action: #fileMessage.			aMenu balloonTextForLastItem: 'Add this message also to a different category'.			aMenu add: 'move' action: #moveMessage.			aMenu balloonTextForLastItem: 'Move this message to a different category'.			aMenu add: 'remove' action: #removeMessage.			aMenu balloonTextForLastItem: 'Remove this message from this category(NB: the message will be safely available in another category)'.			aMenu addLine]		ifFalse: 			[aMenu add: 'compose' action: #compose.			aMenu balloonTextForLastItem: 'Compose a new message'.			aMenu addLine].	"The following are common for all menus"	aMenu add: 'file all' action: #fileAll.	aMenu balloonTextForLastItem: 'Add all messages also to another category'.	aMenu add: 'move all' action: #moveAll.	aMenu balloonTextForLastItem: 'Move all messages to another category'.	aMenu add: 'remove all' action: #removeAll.	aMenu balloonTextForLastItem: 'Remove all messages from this catgegory(NB: each message will be safely available in other categories)'.	aMenu add: 'delete all' action: #deleteAll.	aMenu balloonTextForLastItem: 'Move all messages to the .trash. category'.	aMenu addLine.	messageSelected		ifTrue: 			[aMenu add: 'other categories' action: #otherCategories.			aMenu balloonTextForLastItem: 'Check which other categories also contain this message'.			aMenu add: 'save message' action: #saveMessage.			aMenu balloonTextForLastItem: 'Save this message'.			aMenu addLine].	self tocEntryList size = self maxMessagesToDisplay ifTrue: [		"the test above is not exactly correct, but is usually correct."		aMenu add: 'view all messages' action: #viewAllMessages.		aMenu balloonTextForLastItem: 'View all messages that match the current filters,	even if there are many thousands of such messages'. ].	aMenu add: 'search' action: #search.	aMenu balloonTextForLastItem: 'Search all messages in this category for something'.	^ aMenu! !!Celeste methodsFor: 'filtering' stamp: 'ls 1/27/2001 17:00'!chooseFilterForCurrentMessage	"automatically choose a filter to move the selected message.  Returns nil if there isn't a message selected, or if there isn't exactly 1 matching filter"	| matchingFilters |	currentMsgID ifNil: [ ^nil ].	matchingFilters := self filtersFor: currentMsgID from: CustomFilters keys.	matchingFilters size = 1		ifTrue: [ ^matchingFilters someElement ]		ifFalse: [ ^nil ]! !!Celeste methodsFor: 'filtering' stamp: 'dvf 1/28/2001 19:16'!customFilterOn	"Select or define and activate a custom filter."	| filterName filterExpr filterMenu |	filterMenu := CustomMenu new.	currentMsgID ifNotNil: [		(self filtersFor: currentMsgID from: (CustomFilters keys asSortedArray)) do: [ :name |			filterMenu add: name action: name ].		filterMenu addLine.].	filterMenu add: '(none)' action: #none.	filterMenu add: '<define new filter...>' action: #define.	filterMenu add: '<edit exising filter...>' action: #edit.	filterMenu add: '<delete a filter...>' action: #delete.	filterMenu addLine.	(CustomFilters keys asSortedArray) do: [ :name |		filterMenu add: name action: name ].	filterName _ filterMenu startUpWithCaption: 'Select a filter:'.	filterName ifNil: [ ^self ].	filterName = #none ifTrue: [^self customFilterOff ].	filterName = #delete ifTrue: [ ^self deleteFilter].	filterName = #edit		ifTrue: [filterExpr _ self editFilter]		ifFalse: [			filterName = #define				ifTrue: [filterExpr _ self defineFilter]				ifFalse: [filterExpr _ CustomFilters at: filterName]].	filterExpr isEmpty ifTrue: [^self].	customFilterBlock _ Compiler evaluate: '[ :m | ', filterExpr, ']'.	self updateTOC.	self changed: #isCustomFilterOn.! !!Celeste methodsFor: 'filtering' stamp: 'ls 1/27/2001 18:33'!filteredMessagesIn: categoryName	| msgList |	msgList _ mailDB messagesIn: categoryName.	(customFilterBlock notNil) ifTrue:		[msgList _ msgList select:			[: id | customFilterBlock value: (mailDB getTOCentry: id) ]].	(fromFilter size > 0) ifTrue:		[msgList _ msgList select:			[: id | (mailDB getTOCentry: id) fromHas: fromFilter ]].	(participantFilter size > 0) ifTrue:		[msgList _ msgList select:			[: id | (mailDB getTOCentry: id) participantHas: participantFilter ]].	(subjectFilter size > 0) ifTrue:		[msgList _ msgList select:			[: id | (mailDB getTOCentry: id) subject includesSubstring: subjectFilter caseSensitive: false]].	^msgList! !!Celeste methodsFor: 'filtering' stamp: 'ls 1/27/2001 17:24'!filtersFor: msgID from: filterNames	| currentTocEntry |	currentTocEntry := mailDB getTOCentry: msgID.	^filterNames select: [:e | (self customFilterNamed: e) value: currentTocEntry].! !!Celeste methodsFor: 'filtering' stamp: 'ls 1/27/2001 18:25'!isParticipantFilterOn	"return whether a non-trivial participant filter is installed"	^participantFilter notNil and: [ participantFilter isEmpty not ]! !!Celeste methodsFor: 'filtering' stamp: 'ls 1/27/2001 18:33'!participantFilterOn	"Show only those messages where a specified user is either the sender or a receiver."	participantFilter _		(currentMsgID isNil)			ifTrue: ['']			ifFalse: [(mailDB getTOCentry: currentMsgID) from].	participantFilter _ FillInTheBlank		request: '''Participant:'' filter pattern?'		initialAnswer: participantFilter.	participantFilter _ participantFilter withBlanksTrimmed.	self updateTOC.	self changed: #isParticipantFilterOn.! !!Celeste methodsFor: 'other' stamp: 'sbw 1/30/2001 20:14'!changeMaxMessageCount	| countString count |	countString _ FillInTheBlank request: 'Maximum number of messages displayed?' initialAnswer: self class messageCountLimit printString.	countString isEmpty		ifTrue: [^ self].	count _ Integer				readFrom: (ReadStream on: countString).	count _ count max: 10.	count _ count min: 500.	"Arbitrary. We could calculate the real upper bound."	self class messageCountLimit: count.	self setCategory: currentCategory! !!Celeste methodsFor: 'initialize variables' stamp: 'sbw 1/28/2001 23:10'!initializeTocLists	tocLists _ Array new: 6.	1		to: tocLists size		do: [:index | tocLists at: index put: OrderedCollection new]! !!Celeste methodsFor: 'accessing' stamp: 'sbw 1/28/2001 22:36'!tocLists	"Generated - Return the value of tocLists."	tocLists == nil ifTrue: [self initializeTocLists].	^tocLists! !!Celeste methodsFor: 'accessing' stamp: 'sbw 1/28/2001 22:36'!tocLists: anObject	"Generated - Set the value of tocLists to <anObject>."	tocLists _ anObject! !!Celeste class methodsFor: 'class initialization' stamp: 'sbw 1/30/2001 20:10'!initializeMessageCountLimit	"An arbitrary bound."	self messageCountLimit: 200! !!Celeste class methodsFor: 'sending' stamp: 'sbw 1/30/2001 19:37'!addMVCViews: views andButtons: buttons to: topWindow 	(views at: 1)		window: (0 @ 0 extent: 20 @ 25).	(views at: 2)		window: (0 @ 0 extent: 80 @ 25).	(views at: 3)		window: (0 @ 0 extent: 100 @ 70).	(buttons at: 1)		window: (0 @ 0 extent: 12 @ 5).	(buttons at: 2)		window: (0 @ 0 extent: 12 @ 5).	(buttons at: 3)		window: (0 @ 0 extent: 12 @ 5).	(buttons at: 4)		window: (0 @ 0 extent: 10 @ 5).	(buttons at: 5)		window: (0 @ 0 extent: 13 @ 5).	(buttons at: 6)		window: (0 @ 0 extent: 13 @ 5).	(buttons at: 7)		window: (0 @ 0 extent: 15 @ 5).	(buttons at: 8)		window: (0 @ 0 extent: 13 @ 5).	topWindow		addSubView: (buttons at: 1);				addSubView: (buttons at: 2)		toRightOf: (buttons at: 1);				addSubView: (buttons at: 3)		toRightOf: (buttons at: 2);				addSubView: (buttons at: 4)		toRightOf: (buttons at: 3);				addSubView: (buttons at: 5)		toRightOf: (buttons at: 4);				addSubView: (buttons at: 6)		toRightOf: (buttons at: 5);				addSubView: (buttons at: 7)		toRightOf: (buttons at: 6);				addSubView: (buttons at: 8)		toRightOf: (buttons at: 7);				addSubView: (views at: 1)		below: (buttons at: 1);				addSubView: (views at: 2)		toRightOf: (views at: 1);				addSubView: (views at: 3)		below: (views at: 1)! !!Celeste class methodsFor: 'options' stamp: 'sbw 1/28/2001 22:32'!includeStatusPane	^Preferences celesteHasStatusPane! !!Celeste class methodsFor: 'enhancements documentation' stamp: 'sbw 2/2/2001 12:48'!postLoadOperationsForEnhancements	"Celeste postLoadOperationsForEnhancements."	Preferences addPreferenceForOptionalCelesteStatusPane.	true ifFalse: [Celeste postReadMeEnhancements]! !!Celeste class methodsFor: 'enhancements documentation' stamp: 'sbw 1/28/2001 22:28'!postReadMeEnhancements	"Celeste postReadMeEnhancements."	Workspace new textContents: self readMeEnhancementsString; openLabel: 'Celeste Enhancements'! !!Celeste class methodsFor: 'enhancements documentation' stamp: 'sbw 1/30/2001 21:40'!readMeEnhancementsString	^ 'These enhancements are a joint effort between Lex Spoon and Steve Wessels.	1. The custom menu button always presents a menu; matching filters are	   listed at the top of the the menu.	2. The auto-move button is removed.  Instead, the regular TOC menu will	   give the option of an automove.	3. Huge message lists are not shown, but a menu item is added to forcibly	   show all messages.  You can also specify the maximum number to display.	4. The From Filter is switched to a Participant Filter.	5. The table of contents pane uses a new multi-column list morph, which makes	   for nicer looking lists.	6. Messages that have attachments are indicated with @.	7. If attachments are jpeg or gif then open view will correctly process the image,	   and save will suggest a proper extension for the file name.	8. The delete button is back.	9. The morphic panes use the new fixed pane scheme (layouts).	10. The status pane is displayed depending on an option in Preferences.  Default is	    to not show the status pane.	11. Menus use checkbox style for some of the options:	    (suppress header, and leave messages on server).'! !!Celeste class methodsFor: 'common build' stamp: 'sbw 1/28/2001 23:22'!buildButtonFromSpec: spec forModel: model 	| buttonViewClass b |	Smalltalk isMorphic		ifTrue: [buttonViewClass _ self morphicButtonsClass]		ifFalse: [buttonViewClass _ PluggableButtonView].	b _ buttonViewClass				on: model				getState: (self specificationFromList: spec at: 1)				action: (self specificationFromList: spec at: 2).	b		label: (self specificationFromList: spec at: 3);		 borderWidth: 1.	b		setBalloonText: (self specificationFromList: spec at: 4).	^ b! !!Celeste class methodsFor: 'common build' stamp: 'sbw 1/28/2001 23:22'!buildButtonFromSpec: spec withBlock: aBlock 	| b buttonViewClass |	Smalltalk isMorphic		ifTrue: [buttonViewClass _ self morphicButtonsClass]		ifFalse: [buttonViewClass _ PluggableButtonView].	b _ buttonViewClass new				model: (Button new onAction: aBlock);								action: (self specificationFromList: spec at: 1);								label: (self specificationFromList: spec at: 2);				 borderWidth: 1.	b		setBalloonText: (self specificationFromList: spec at: 3).	^ b! !!Celeste class methodsFor: 'common build' stamp: 'sbw 1/30/2001 20:42'!buildButtonsFor: model 	"Answer a collection of handy buttons for the Celeste user interface."	| buttons b |	buttons _ OrderedCollection new.	b _ self buildButtonFromSpec: self specForSubjectFilterButton forModel: model.	buttons add: b.	true		ifFalse: ["Skip these buttons..."			b _ self buildFromFilterButtonForModel: model.			buttons add: b].	b _ self buildButtonFromSpec: self specForParticipantFilterButton forModel: model.	buttons add: b.	b _ self buildButtonFromSpec: self specForCustomFilterButton forModel: model.	buttons add: b.	true		ifFalse: ["Skip these buttons..."	b _ self buildButtonFromSpec: self specForCustomFilterMoveButton forModel: model.	buttons add: b].	b _ self				buildButtonFromSpec: self specForComposeButton				withBlock: [model compose].	buttons add: b.	b _ self				buildButtonFromSpec: self specForReplyButton				withBlock: [model reply].	buttons add: b.	b _ self				buildButtonFromSpec: self specForForwardButton				withBlock: [model forward].	buttons add: b.	b _ self				buildButtonFromSpec: self specForMoveAgainButton				withBlock: [model moveAgain].	buttons add: b.	b _ self				buildButtonFromSpec: self specForDeleteButton				withBlock: [model deleteMessage].	buttons add: b.	^ buttons! !!Celeste class methodsFor: 'common build' stamp: 'sbw 1/28/2001 23:22'!buildFromFilterButtonForModel: model 	| sw b buttonViewClass |	Smalltalk isMorphic		ifTrue: [buttonViewClass _ self morphicButtonsClass]		ifFalse: [buttonViewClass _ PluggableButtonView].	sw _ Switch new.	b _ buttonViewClass on: (sw					onAction: [model fromFilterOn: sw];										offAction: [model fromFilterOff]).	b label: 'From F.';		 borderWidth: 1.	b setBalloonText: 'Show messages with specific From: line content'.	^ b! !!Celeste class methodsFor: 'common build' stamp: 'sbw 1/21/2001 22:03'!openOnDatabase: aMailDB 	"Open a MailReader on the given mail database."	| model topWindow title |	model _ self new openOnDatabase: aMailDB.	title _ self defaultWindowTitle.	Smalltalk isMorphic		ifTrue: [topWindow _ self						buildTopMorphicWindowTitled: title						model: model.			topWindow openInWorld]		ifFalse: [topWindow _ self buildTopMVCWindowTitled: title model: model.			topWindow controller open].	"in case the sender wants to know"	^ model! !!Celeste class methodsFor: 'common build' stamp: 'sbw 1/28/2001 23:23'!specificationFromList: list at: index 	| value |	value _ list at: index.	value = #nil		ifTrue: [value _ nil].	^ value! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/28/2001 23:19'!specForComposeButton	"action label helpText"	^ #(#turnOn 'New' 'Compose a new message' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/30/2001 20:38'!specForCustomFilterButton	"getState action label helpText"	^ #(#isCustomFilterOn #customFilterOn 'Custom F.' 'Select messages with a general custom filter' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/28/2001 23:20'!specForCustomFilterMoveButton	"getState action label helpText"	^ #(#nil #customFilterMove 'Custom F. Move' 'Move messages which match a custom filter to appropriate category' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/28/2001 23:20'!specForDeleteButton	"action label helpText"	^ #(#turnOn 'Delete' 'Delete the selected message' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/28/2001 23:20'!specForForwardButton	"action label helpText"	^ #(#turnOn 'Forward' 'Forward the selected message' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/28/2001 23:20'!specForMoveAgainButton	"action label helpText"	^ #(#turnOn 'Move Again' 'Move the selected message to the same category as previously' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/30/2001 20:40'!specForParticipantFilterButton	"getState action label helpText"	^ #(#isParticipantFilterOn #participantFilterOn 'Part. F.' 'Select messages by their From:, To:, and Cc: lines' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/28/2001 23:20'!specForReplyButton	"action label helpText"	^ #(#turnOn 'Reply' 'Reply to the selected message' )! !!Celeste class methodsFor: 'button specs' stamp: 'sbw 1/30/2001 20:35'!specForSubjectFilterButton	"getState action label helpText"	^ #(#isSubjectFilterOn #subjectFilterOn 'Subj. F.' 'Select messages by their subject' )! !!Celeste class methodsFor: 'build-common' stamp: 'sbw 1/30/2001 19:44'!defaultWindowTitle	^ 'Celeste'! !!Celeste class methodsFor: 'build-mvc' stamp: 'sbw 1/21/2001 22:02'!buildTopMVCWindowTitled: title model: model 	| topWindow views buttons |	topWindow _ StandardSystemView new model: model;				 label: title;				 minimumSize: 400 @ 250.	views _ self buildViewsFor: model.	buttons _ self buildButtonsFor: model.	self		addMVCViews: views		andButtons: buttons		to: topWindow.	^ topWindow! !!Celeste class methodsFor: 'build-mvc' stamp: 'sbw 1/22/2001 00:09'!buildViewsFor: model 	"Answer a collection of window panes for the Celeste user interface."	| listViewClass textViewClass listFont views v multiListViewClass |	listViewClass _ PluggableListViewByItem.	multiListViewClass _ PluggableListViewByItem.	textViewClass _ PluggableTextView.	listFont _ StrikeFont allSubInstances				detect: [:f | (f name beginsWith: 'CourierFixed')						and: [f height = 11]]				ifNone: [TextStyle defaultFont].	views _ OrderedCollection new.	v _ listViewClass				on: model				list: #categoryList				selected: #category				changeSelected: #setCategory:				menu: #categoryMenu:				keystroke: #categoriesKeystroke:.	views add: v.	v _ multiListViewClass				on: model				list: #tocEntryList				selected: #tocEntry				changeSelected: #setTOCEntry:				menu: #tocMenu:				keystroke: #tocKeystroke:.	v font: listFont.	views add: v.	v _ textViewClass new				on: model				text: #messageText				accept: #messageText:				readSelection: nil				menu: #messageMenu:shifted:.	v borderWidth: 1.	model messageTextView: v.	views add: v.	v _ textViewClass new				on: model				text: #status				accept: nil				readSelection: nil				menu: nil.	v borderWidth: 1.	model messageTextView: v.	views add: v.	^ views! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/30/2001 20:04'!addLowerMorphicViews: views andButtons: buttons to: topWindow offset: offset 	| row verticalOffset innerFractions |	row _ AlignmentMorph newColumn hResizing: #spaceFill;				 vResizing: #spaceFill;				 layoutInset: 0;				 borderWidth: 1;				 borderColor: Color black;				 layoutPolicy: ProportionalLayout new.	verticalOffset _ 0.	innerFractions _ 0 @ 0 corner: 1 @ 0.	verticalOffset _ self				addMorphicButtons: buttons				to: row				at: innerFractions				plus: verticalOffset.	self includeStatusPane ifTrue: [	verticalOffset _ self				addMorphicStatusPaneTo: row				from: views				at: innerFractions				plus: verticalOffset].	self		addMorphicTextPaneTo: row		from: views		at: innerFractions		plus: verticalOffset.	topWindow		addMorph: row		frame: (0 @ offset extent: 1 @ (1 - offset)).	row		on: #mouseEnter		send: #paneTransition:		to: topWindow.	row		on: #mouseLeave		send: #paneTransition:		to: topWindow! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/22/2001 20:53'!addMorphicButtons: buttons to: row at: innerFractions plus: verticalOffset 	| delta buttonRow |	delta _ 25.	buttonRow _ self morphicButtonRowFrom: buttons.	buttonRow 				color: (Color gray alpha: 0.2);				 borderWidth: 1;				 borderColor: Color lightGray.	row addMorph: buttonRow				fullFrame: (LayoutFrame						fractions: innerFractions						offsets: (0@verticalOffset corner: 0@(verticalOffset + delta))).	^ verticalOffset + delta! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/30/2001 19:46'!addMorphicStatusPaneTo: row from: views at: innerFractions plus: verticalOffset 	| delta |	delta _ 20.	row		addMorph: (views at: #status)		fullFrame: (LayoutFrame				fractions: innerFractions				offsets: (0 @ verticalOffset corner: 0 @ (verticalOffset + delta))).	^ verticalOffset + delta! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/22/2001 20:43'!addMorphicTextPaneTo: row from: views at: innerFractions plus: verticalOffset 	row		addMorph: (views at: #messageText)		fullFrame: (LayoutFrame				fractions: (innerFractions withBottom: 1)				offsets: (0 @ verticalOffset corner: 0@0)).	^ verticalOffset! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/22/2001 20:22'!addMorphicViews: views andButtons: buttons to: topWindow 	topWindow		addMorph: (views at: #categoryList)		frame: (0.0 @ 0.0 extent: 0.2 @ 0.25).	topWindow		addMorph: (views at: #tocEntryList)		frame: (0.2 @ 0.0 extent: 0.8 @ 0.25).	self		addLowerMorphicViews: views		andButtons: buttons		to: topWindow		offset: 0.25 ! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/21/2001 22:17'!buildMorphicCategoryListFor: model	^PluggableListMorphByItem				on: model				list: #categoryList				selected: #category				changeSelected: #setCategory:				menu: #categoryMenu:				keystroke: #categoriesKeystroke:.! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/21/2001 22:19'!buildMorphicMessageTextPaneFor: model 	^ PluggableTextMorph new				on: model				text: #messageText				accept: #messageText:				readSelection: nil				menu: #messageMenu:shifted:! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/21/2001 22:20'!buildMorphicStatusPaneFor: model 	^ PluggableTextMorph new				on: model				text: #status				accept: nil				readSelection: nil				menu: nil.! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/21/2001 22:18'!buildMorphicTocEntryListFor: model 	^ PluggableMultiColumnListMorphByItem				on: model				list: #tocEntryList				selected: #tocEntry				changeSelected: #setTOCEntry:				menu: #tocMenu:				keystroke: #tocKeystroke:! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/21/2001 22:21'!buildMorphicViewsFor: model 	"Answer a dictionary of window panes for the Celeste user interface."	| listFont views v |	listFont _ StrikeFont allSubInstances				detect: [:f | (f name beginsWith: 'CourierFixed')						and: [f height = 11]]				ifNone: [TextStyle defaultFont].	views _ Dictionary new.	v _ self buildMorphicCategoryListFor: model.	views at: #categoryList put: v.	v _ self buildMorphicTocEntryListFor: model.	v font: listFont.	views at: #tocEntryList put: v.	v _ self buildMorphicMessageTextPaneFor: model.	v borderWidth: 1.	model messageTextView: v.	views at: #messageText put: v.	v _ self buildMorphicStatusPaneFor: model.	v borderWidth: 1.	views at: #status put: v.	^ views! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/22/2001 00:50'!buildTopMorphicWindowTitled: title model: model 	| topWindow views buttons |	topWindow _ (SystemWindow labelled: title)				model: model.	buttons _ self buildButtonsFor: model.	views _ self buildMorphicViewsFor: model.	self addMorphicViews: views andButtons: buttons to: topWindow .	buttons		do: [:b | b onColor: Color lightGray offColor: Color white].	^ topWindow! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 2/2/2001 13:01'!morphicButtonRowFrom: buttons 	| aRow |	aRow _ AlignmentMorph newRow.	aRow setNameTo: 'buttonPane'.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow wrapCentering: #center;		 cellPositioning: #leftCenter.	aRow clipSubmorphs: true.	aRow addTransparentSpacerOfSize: 5 @ 0.	buttons		do: [:btn | 			btn useRoundedCorners;			 hResizing: #spaceFill;						 vResizing: #spaceFill.			aRow addMorphBack: btn.			aRow addTransparentSpacerOfSize: 3 @ 0].	^ aRow! !!Celeste class methodsFor: 'build-morphic' stamp: 'sbw 1/21/2001 20:55'!morphicButtonsClass	^PluggableButtonMorph! !!Celeste class methodsFor: 'accessing' stamp: 'sbw 1/30/2001 20:11'!messageCountLimit	MessageCountLimit == nil ifTrue: [self initializeMessageCountLimit].	^ MessageCountLimit! !!Celeste class methodsFor: 'accessing' stamp: 'sbw 1/30/2001 20:09'!messageCountLimit: anInteger	MessageCountLimit _ anInteger! !!IndexFileEntry methodsFor: 'printing' stamp: 'sbw 1/11/2001 21:11'!computeTOCStringAsColumns	"Answer a string for the table of contents."	"IndexFileEntry allInstancesDo: [: e | e flushTOCCache]"	| fromFieldSize array attachFlag |	fromFieldSize _ 18.	attachFlag _ self getMessage body isMultipart.	array _ Array new: 5.	array at: 1 put: self dateString.	array		at: 2		put: (self fromStringLimit: fromFieldSize).	array at: 3 put: subject decodeMimeHeader.	array at: 4 put: self textLength asStringWithCommas.	array at: 5 put: attachFlag.	^ array! !!IndexFileEntry methodsFor: 'printing' stamp: 'sbw 12/25/2000 20:47'!tocStringAsColumns	"Answer a string for the table of contents."	^self computeTOCStringAsColumns! !!MIMEDocument methodsFor: 'testing' stamp: 'sbw 1/21/2001 11:13'!isGif	^ self mainType = 'image'		and: [self subType = 'gif']! !!MIMEDocument methodsFor: 'testing' stamp: 'sbw 1/21/2001 11:15'!isJpeg	^ self mainType = 'image'		and: [self subType = 'jpeg' | (self subType = 'jpg')]! !!MailDB methodsFor: 'messages' stamp: 'sbw 12/25/2000 20:35'!getTOCstringAsColumns: msgID 	^ (indexFile at: msgID) tocStringAsColumns! !!MailMessage methodsFor: 'printing/formatting' stamp: 'sbw 1/21/2001 19:47'!viewBody	"open a viewer on the body of this message"	self containsViewableImage		ifTrue: [^ self viewImageInBody].	(StringHolder new contents: self bodyTextFormatted;		 yourself)		openLabel: (self name				ifNil: ['(a message part)'])! !!MailMessage methodsFor: 'printing/formatting' stamp: 'sbw 1/21/2001 11:10'!viewImageInBody	| stream image |	stream _ self body contentStream.	image _ Form fromBinaryStream: stream.	(SketchMorph withForm: image) openInWorld! !!MailMessage methodsFor: 'multipart' stamp: 'sbw 1/21/2001 11:14'!save	"save the part to a file"	| fileName file |	fileName _ self name				ifNil: ['attachment' , Utilities dateTimeSuffix].	self body isJpeg		ifTrue: [fileName _ fileName , '.jpg'].	self body isGif ifTrue: [fileName _ fileName, '.gif'].	fileName _ FillInTheBlank request: 'File name for save?' initialAnswer: fileName.	fileName isEmpty		ifTrue: [^ nil].	file _ FileStream newFileNamed: fileName.	file nextPutAll: self content.	file close! !!MailMessage methodsFor: 'testing' stamp: 'sbw 1/21/2001 19:47'!containsViewableImage	^self body isJpeg | self body isGif! !!Preferences class methodsFor: 'initialization' stamp: 'sbw 1/30/2001 19:57'!addPreferenceForOptionalCelesteStatusPane	"Preferences addPreferenceForOptionalCelesteStatusPane"	(FlagDictionary includesKey: #celesteHasStatusPane)		ifFalse: [self				addPreference: #celesteHasStatusPane				category: #general				default: false				balloonHelp: 'If true, Celeste (e-mail reader) includes a status pane.'			"Because Lex doesn't like it the default is false :)"]! !!TextMessageLink methodsFor: 'acting' stamp: 'sbw 1/21/2001 19:48'!actOnClickFor: evt 	| choice viewMsg |	viewMsg _ message containsViewableImage		ifTrue: ['view this image attachment']		ifFalse: ['view this attachment'].	choice _ (PopUpMenu labels: viewMsg, '\save this attachment' withCRs) startUp.	choice = 1		ifTrue: ["open a new viewer"			message viewBody].	choice = 2		ifTrue: ["save the mesasge"			message save].	^ true! !!Celeste reorganize!('open-close' close isActive openOnDatabase: windowIsClosing)('categories pane' addCategory cacheTOC categoriesKeystroke: category categoryList categoryMenu: compact deleteMessagesAfterFetching emptyTrash exportCategory exportCategoryUnix fetchMail findDuplicates importIntoCategory keepMessagesOnServer maxMessageCount maxMessagesToDisplay messages:from: messagesOnServerString nextCategory previousCategory removeCategory renameCategory save setCCList setCategory: setPopServer setPopUserName setSmtpServer setUserName suppressingHeadersString toggleKeepMessagesOnServer toggleSuppressHeaders viewAllMessages)('table of contents pane' autoFile autoMove deleteAll deleteMessage fileAgain fileAll fileMessage getCategoryNameIfNone: moveAgain moveAll moveMessage nextMessage otherCategories partsMenu previousMessage removeAll removeMessage saveMessage search selectMessage: setTOCEntry: tocEntry tocEntryList tocKeystroke: tocMenu: updateTOC)('filtering' chooseFilterFor:from: chooseFilterForCurrentMessage customFilterMove customFilterNamed: customFilterOff customFilterOn defineFilter deleteFilter editCategoryFilter editFilter editFilterNamed: editFilterNamed:filterExpr: filteredMessagesIn: filtersFor:from: fromFilterOff fromFilterOn: isCustomFilterOn isParticipantFilterOn isSubjectFilterOn makeFilterFor: participantFilterOn selectFilterFrom: subjectFilterOff subjectFilterOn subjectFilterOn:)('message text pane' compose doItContext doItReceiver format formatedMessageText forward message messageMenu messageMenu:shifted: messageText messageText: messageTextView: reply)('other' changeMaxMessageCount clearUserEditFlag currentMessage okToChange perform:orSendTo: requiredCategory: status status:)('sending mail' PROTOqueueMessageWithText: PROTOsendQueuedMail composeText forwardTextFor: openSender: popPassword preSendAuthentication queueMessageWithText: replyTextFor: sendMail: sendQueuedMail timeZoneString)('initialize variables' initializeTocLists)('accessing' tocLists tocLists:)!"Postscript:	Initialize things.  The code is contained in class methods on Celeste."Celeste postLoadOperationsForEnhancements.!