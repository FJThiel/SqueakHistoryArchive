'From Squeak2.9alpha of 17 July 2000 [latest update: #3163] on 12 December 2000 at 11:23:23 am'!"Change Set:		storyContinuedDate:			12 December 2000Author:			Bob Arningseveral enhancements to piano rolls and storyboards:- any morph can be dropped into a piano roll and will trigger when the cursor reaches it. Two current actions are possible:--- any morph with a user-added mouse up action will have that action run--- a ProjectViewMorph will cause that project to be entered. You can string a series of projects together by putting the piano roll and score player in a (partially open) global flap.- when dragging the pan/tilt/zoom info from a storyboard, a thumbnail of the page is included. The resulting camera mark will perform a page turn when two successive marks have different pages. It will perform a normal camera action when two successive marks have the same page."!!Morph methodsFor: 'piano rolls' stamp: 'RAA 12/11/2000 17:29'!addMorphsTo: morphList pianoRoll: pianoRoll eventTime: t betweenTime: leftTime and: rightTime	"a hack to allow for abitrary morphs to be dropped into piano roll"	t > rightTime ifTrue: [^ self].  	t < leftTime ifTrue: [^ self].	morphList add: (self left: (pianoRoll xForTime: t)).! !!Morph methodsFor: 'piano rolls' stamp: 'RAA 12/11/2000 15:48'!encounteredAtTime: ticks inScorePlayer: scorePlayer atIndex: index inEventTrack: track secsPerTick: secsPerTick	"a hack to allow for abitrary morphs to be dropped into piano roll"	self triggerActionFromPianoRoll.! !!Morph methodsFor: 'piano rolls' stamp: 'RAA 12/11/2000 17:21'!justDroppedIntoPianoRoll: pianoRoll event: evt		| ambientEvent startTimeInScore |	startTimeInScore _ pianoRoll timeForX: self left.	ambientEvent _ AmbientEvent new 		morph: self;		time: startTimeInScore.	pianoRoll score addAmbientEvent: ambientEvent.	"self endTime > pianoRoll scorePlayer durationInTicks ifTrue:		[pianoRoll scorePlayer updateDuration]"! !!Morph methodsFor: 'piano rolls' stamp: 'RAA 12/11/2000 23:21'!pauseFrom: scorePlayer	"subclasses should take five"! !!Morph methodsFor: 'piano rolls' stamp: 'RAA 12/11/2000 23:22'!resetFrom: scorePlayer	"subclasses should revert to their initial state"! !!Morph methodsFor: 'piano rolls' stamp: 'RAA 12/11/2000 23:21'!resumeFrom: scorePlayer	"subclasses should continue from their current position"	"a hack to allow for abitrary morphs to be dropped into piano roll"! !!Morph methodsFor: 'piano rolls' stamp: 'RAA 12/11/2000 23:05'!triggerActionFromPianoRoll	| evt |	"a hack to allow for abitrary morphs to be dropped into piano roll"	self world ifNil: [^self].	evt _ MouseEvent new setType: nil position: self center buttons: 0 hand: self world activeHand.	self programmedMouseUp: evt for: self.! !!MovieFrameSyncMorph methodsFor: 'initialization' stamp: 'RAA 12/11/2000 22:58'!justDroppedIntoPianoRoll: pianoRoll event: evt	"since these morphs handle their own dropping, ignore"! !!PianoRollScoreMorph methodsFor: 'dropping/grabbing' stamp: 'RAA 12/11/2000 23:00'!acceptDroppingMorph: aMorph event: evt	"In addition to placing this morph in the pianoRoll, add a corresponding	event to the score so that it will always appear when played, in addition	to possibly triggering other actions"	aMorph justDroppedIntoPianoRoll: self event: evt.	super acceptDroppingMorph: aMorph event: evt.! !!ProjectViewMorph methodsFor: 'events' stamp: 'RAA 12/12/2000 10:08'!triggerActionFromPianoRoll	WorldState addDeferredUIMessage: [		project world setProperty: #letTheMusicPlay toValue: true.		self enter.	]! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 17:09'!cameraPoint: aPoint cameraScale: aNumber controller: aController page: aBookPage 	self setProperty: #cameraPoint toValue: aPoint.	self setProperty: #cameraScale toValue: aNumber.	self setProperty: #cameraController toValue: aController.	self setProperty: #bookPage toValue: aBookPage.		self addMorphBack: (		StringMorph contents: aPoint rounded printString,'  ',(aNumber roundTo: 0.001) printString	) lock.	self addMorphBack: (ImageMorph new image: (aBookPage imageForm scaledToSize: 40@30)) lock! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 23:07'!encounteredAtTime: ticks inScorePlayer: scorePlayer atIndex: index inEventTrack: track secsPerTick: secsPerTick	| nextAmbient m nextDurationInMs program now finalMark thisPage nextPage |	self cameraController 		turnToPage: (self valueOfProperty: #bookPage)		position: (self valueOfProperty: #cameraPoint) 		scale: (self valueOfProperty: #cameraScale).	self setCameraValues.	nextAmbient _ nil.	index to: track size do: [ :i |		(nextAmbient isNil and: [((m _ track at: i) morph) isKindOf: self class]) ifTrue: [			nextAmbient _ m.		].	].	nextAmbient ifNotNil: [		nextDurationInMs _ (nextAmbient time - ticks * secsPerTick * 1000) rounded.		finalMark _ nextAmbient morph.		thisPage _ self valueOfProperty: #bookPage.		nextPage _ finalMark valueOfProperty: #bookPage.		(thisPage = nextPage or: [thisPage isNil | nextPage isNil]) ifFalse: [^self].		now _ Time millisecondClockValue.		program _ Dictionary new.		program			at: #startTime put: now;			at: #endTime put: now + nextDurationInMs;			at: #startPoint put: (self valueOfProperty: #cameraPoint);			at: #endPoint put: (finalMark valueOfProperty: #cameraPoint);			at: #startZoom put: (self valueOfProperty: #cameraScale);			at: #endZoom put: (finalMark valueOfProperty: #cameraScale).		self cameraController setProgrammedMoves: {program}.	].! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 23:26'!justDroppedInto: newOwner event: anEvent	| holder |	newOwner isWorldMorph ifTrue: [		holder _ ZASMScriptMorph new.		holder 			position: self position;			setProperty: #cameraController toValue: self cameraController.		self world addMorph: holder.		holder addMorph: self.		holder startStepping.	].	super justDroppedInto: newOwner event: anEvent! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 23:26'!setCameraValues	| camera |	camera _ self cameraController.	"ick... since one may fail to fully take due to constraints, retry"	2 timesRepeat: [		camera cameraPoint: (self valueOfProperty: #cameraPoint).		camera cameraScale: (self valueOfProperty: #cameraScale).	].! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 15:34'!veryDeepCopyWith: deepCopier	| camera page |	"Keep the same camera???" 	(camera _ self cameraController) ifNotNil: [		(deepCopier references includesKey: camera) ifFalse: [			"not recorded, outside our tree, use same camera"			deepCopier references at: camera put: camera]].	(page _ self valueOfProperty: #bookPage) ifNotNil: [		(deepCopier references includesKey: page) ifFalse: [			deepCopier references at: page put: page]].	^ super veryDeepCopyWith: deepCopier! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 17:07'!cameraPointRounded	^self cameraPoint rounded! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 15:35'!grabCameraPositionEvent: anEvent morph: aMorph 	| mark |	mark _ ZASMCameraMarkMorph new.	mark 		cameraPoint: self cameraPoint		cameraScale: self cameraScale		controller: self		page: target.	anEvent hand attachMorph: mark.! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 17:07'!initialize	| displayer dataMorph |	super initialize.	hasFocus _ true.	currentKeyDown _ Set new.	upDownCodes _ Dictionary new.	upDownCodes		at: 126 put: #up;		"arrow keys on the mac"		at: 125 put: #down;		at: 123 put: #out;		at: 124 put: #in.	color _ Color lightBlue.	self 		extent: 40@40;		vResizing: #rigid;		hResizing: #spaceFill;		borderWidth: 0;		borderColor: Color transparent;		setBalloonText: 'Drag in here to zoom, tilt and pan the page above'.	dataMorph _ AlignmentMorph newColumn.	dataMorph 		color: Color yellow;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	dataMorph on: #mouseDown send: #grabCameraPositionEvent:morph: to: self. 	displayer _ UpdatingStringMorph new		getSelector: #cameraPointRounded;		target: self;		growable: true;		putSelector: nil.	dataMorph addMorph: displayer lock. 	displayer _ UpdatingStringMorph new		getSelector: #cameraScale;		target: self;		growable: true;		floatPrecision: 0.001;		putSelector: nil.	dataMorph addMorph: displayer lock.	self addMorph: dataMorph.! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 23:13'!keyStroke: anEvent	"hack.. use this as an opportunity to fix old versions"	self allMorphsDo: [:m |		((m isKindOf: UpdatingStringMorph) and: [m getSelector == #cameraPoint]) ifTrue: [			m getSelector: #cameraPointRounded		].	].! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 16:36'!target: x	| startingCameraPosition startingCameraScale |	target _ x.	target ifNil: [^self].	startingCameraPosition _ self valueOfProperty: #startingCameraPosition.	startingCameraScale _ self valueOfProperty: #startingCameraScale.	self removeProperty: #startingCameraPosition.	self removeProperty: #startingCameraScale.	2 timesRepeat: [		startingCameraPosition ifNotNil: [			self cameraPoint: startingCameraPosition		].		startingCameraScale ifNotNil: [			self cameraScale: startingCameraScale		].	]! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/11/2000 23:18'!turnToPage: page position: aPoint scale: aNumber 	| myBook |	target == page ifTrue: [^false].	page ifNil: [^false].	myBook _ (self ownerThatIsA: StoryboardBookMorph) ifNil: [^ false].	self		setProperty: #startingCameraPosition toValue: aPoint;		setProperty: #startingCameraScale toValue: aNumber.	BookMorph turnOffSoundWhile: [		myBook goToPageMorph: page transitionSpec: {'silence'. #none. #none}.	].	^true! !!ZoomAndScrollMorph methodsFor: 'scripting' stamp: 'RAA 12/11/2000 17:05'!cameraPoint	^self myTransformMorph transform globalPointToLocal: self innerBounds center! !BookPageThumbnailMorph removeSelector: #justDroppedInto:event:!AbstractMediaEventMorph removeSelector: #addMorphsTo:pianoRoll:eventTime:betweenTime:and:!AbstractMediaEventMorph removeSelector: #encounteredAtTime:inScorePlayer:atIndex:inEventTrack:secsPerTick:!AbstractMediaEventMorph removeSelector: #justDroppedInto:event:!AbstractMediaEventMorph removeSelector: #pauseFrom:!AbstractMediaEventMorph removeSelector: #resetFrom:!AbstractMediaEventMorph removeSelector: #resumeFrom:!