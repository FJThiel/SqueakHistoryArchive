'From Squeak 2.0 of May 22, 1998 on 26 May 1998 at 12:33:54 pm'!"Change Set:		ServerSortBy-diDate:			27 May 1998Author:			Dan IngallsImplements #entries in ServerDirectory with same conventions as FileDirectory.  This, then , enables sorting by name, date, or size when viewing remote FTP directories as well as the local disk."!!Date class methodsFor: 'instance creation' stamp: 'di 5/26/1998 11:53'!newDay: day month: month year: year 	"Note: day, month and year are all integers, except month may be a string"	"Answer an instance of me which is the day'th day of the month named 	 month in the year'th year. The year may be specified as the actual 	 number of years since the beginning of the Roman calendar or the 	 number of years since 1900.  **Note** two digit dates are always from 1900.		1/1/01 will NOT mean 2001."	"Tolerate a month index instead of a month name."	| monthIndex daysInMonth firstDayOfMonth |	year < 100 ifTrue: [^ self			newDay: day			month: month			year: 1900 + year].	monthIndex _ month isInteger	 ifTrue: [month] ifFalse: [self indexOfMonth: month].	monthIndex = 2		ifTrue: [daysInMonth _ (DaysInMonth at: monthIndex)						+ (self leapYear: year)]		ifFalse: [daysInMonth _ DaysInMonth at: monthIndex].	monthIndex > 2		ifTrue: [firstDayOfMonth _ (FirstDayOfMonth at: monthIndex)						+ (self leapYear: year)]		ifFalse: [firstDayOfMonth _ FirstDayOfMonth at: monthIndex].	(day < 1 or: [day > daysInMonth])		ifTrue: [self error: 'illegal day in month']		ifFalse: [^self new day: day - 1 + firstDayOfMonth year: year]! !!FileList methodsFor: 'volume list and pattern' stamp: 'di 5/26/1998 09:40'!fileNameFormattedFrom: entry sizePad: sizePad	"entry is a 5-element array of the form:		(name creationTime modificationTime dirFlag fileSize)"	| sizeStr nameStr dateStr |	nameStr _ (entry at: 4)		ifTrue: [entry first , self folderString]		ifFalse: [entry first].	dateStr _ ((Date fromDays: (entry at: 3) // 86400)					printFormat: #(3 2 1 $. 1 1 2)) , ' ' ,				(String streamContents: [:s |					(Time fromSeconds: (entry at: 3) \\ 86400)						print24: true on: s]).	sizeStr _ (entry at: 5) asStringWithCommas.	sortMode = #name ifTrue:		[^ nameStr , '    (' , dateStr , ' ' , sizeStr , ')'].	sortMode = #date ifTrue:		[^ '(' , dateStr , ' ' , sizeStr , ') ' , nameStr].	sortMode = #size ifTrue:		[^ '(' , ((sizeStr size to: sizePad) collect: [:i | $ ]) , sizeStr , ' ' , dateStr , ') ' , nameStr].! !!FileList methodsFor: 'volume list and pattern' stamp: 'di 5/26/1998 09:39'!listForPattern: pat	"Make the list be those file names which match the pattern."	| entries sizePad newList allFiles |	entries _ directory entries.	sizePad _ (entries inject: 0 into: [:mx :entry | mx max: (entry at: 5)])					asStringWithCommas size - 1.	newList _ sortMode == #name  "case-insensitive compare"		ifTrue: [(SortedCollection new: 30) sortBlock: [:x :y | (x compare: y) <= 2]]		ifFalse: [(SortedCollection new: 30) sortBlock: [:x :y | (x compare: y) >= 2]].	allFiles _ pat = '*'.	entries do:		[:entry | "<name><creationTime><modificationTime><dirFlag><fileSize>"		(allFiles or: [pat match: entry first]) ifTrue:			[newList add: (self fileNameFormattedFrom: entry sizePad: sizePad)]].	^ newList! !!FileList methodsFor: 'private' stamp: 'di 5/26/1998 10:47'!updateFileList	"Update my files list with file names in the current directory that match the pattern."	Cursor execute showWhile:		[list _ (pattern includes: $*) | (pattern includes: $#)			ifTrue: [self listForPattern: pattern]			ifFalse: [				pattern isEmpty					ifTrue: [self listForPattern: '*']					ifFalse: [self listForPattern: '*', pattern, '*']].		listIndex _ 0.		volListIndex _ volList size.		contents _ ''.		self changed: #volumeListIndex.		self changed: #fileList].! !!ServerDirectory methodsFor: 'file directory' stamp: 'di 5/26/1998 12:32'!entries	"Return a collection of directory entries for the files and directories in this directory. Each entry is a five-element array: (<name><creationTime><modificationTime><dirFlag><fileSize>)."	| ftpEntries thisYear tokens dateInSeconds |	"We start with ftp directory entries of the form...d---------   1 owner    group               0 Apr 27 22:01 blasttest
----------   1 owner    group           93812 Jul 21  1997 COMMAND.COM    1        2   3           4                 5    6  7    8       9   -- token index"	ftpEntries _ self getDirectory contentsOfEntireFile findTokens: FTPSocket crLf.	thisYear _ Date today year.	^ ftpEntries collect:		[:ftpEntry | tokens _ ftpEntry findTokens: ' '.		dateInSeconds _ ((tokens at: 8) includes: $:)			ifTrue: ["Date has no year -- assume this year"					(Date newDay: (tokens at: 7) asNumber								month: (tokens at: 6)								year: thisYear) asSeconds +					(Time readFrom: (ReadStream on: (tokens at: 8))) asSeconds]			ifFalse: [(Date newDay: (tokens at: 7) asNumber								month: (tokens at: 6)								year: (tokens at: 8) asNumber) asSeconds].		Array with: tokens last  "file name"			with: dateInSeconds "creation date"			with: dateInSeconds "modification time"			with: tokens first first = $d "is-a-directory flag"			with: tokens fifth asNumber "file size"]! !FileDirectory removeSelector: #listForPattern:sortMode:!FileDirectory removeSelector: #fileNameFormattedFrom:sizePad:sortMode:!ServerDirectory removeSelector: #listForPattern:sortMode:!ServerDirectory removeSelector: #fileNameFormattedFrom:sizePad:sortMode:!