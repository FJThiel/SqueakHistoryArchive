'From Squeak 2.1 of June 30, 1998 on 11 August 1998 at 11:00:34 pm'!"Change Set:		MorphRestructuring2-diDate:			11 August 1998Author:			Dan IngallsThis is phase 2 of the restructuring of Morph.  Compatibility methods get removed, compatibility tests get removed, and finally 3 fields get removed from class Morph."!!Morph methodsFor: 'accessing' stamp: 'di 8/11/1998 22:08'!eventHandler: anEventHandler	"Note that morphs can share eventHandlers and all is OK.  "	extension == nil ifTrue: [self assureExtension].	extension eventHandler: anEventHandler! !!Morph methodsFor: 'copying' stamp: 'di 8/11/1998 22:13'!updateReferencesUsing: aDictionary	"Update intra-morph references within a composite morph that hasbeen copied. For example, if a button refers to morph X in the orginalcomposite then the copy of that button in the new composite should refer tothe copy of X in new composite, not the original X. This defaultimplementation updates the contents of any morph-bearing slot. It may beoverridden to avoid this behavior if so desired."	| old |	Morph instSize + 1 to: self class instSize do:		[:i | old _ self instVarAt: i.		old isMorph ifTrue:			[self instVarAt: i put: (aDictionary at: old ifAbsent: [old])]].	extension == nil ifFalse: [extension updateReferencesUsing: aDictionary]! !!Morph methodsFor: 'naming' stamp: 'di 8/11/1998 22:10'!knownName	extension == nil ifTrue: [^ nil].	^ extension externalName! !!Morph methodsFor: 'naming' stamp: 'di 8/11/1998 22:11'!setNamePropertyTo: aName	extension == nil ifTrue: [self assureExtension].	extension externalName: aName! !!Morph methodsFor: 'locking' stamp: 'di 8/11/1998 22:09'!isLocked	extension == nil ifTrue: [^ false].	^ extension locked! !!Morph methodsFor: 'locking' stamp: 'di 8/11/1998 22:10'!lock: aBoolean	extension == nil ifTrue:		[aBoolean ifFalse: [^ self].		self assureExtension].	extension locked: aBoolean! !!Morph methodsFor: 'aug97 additions' stamp: 'di 8/11/1998 22:07'!beSticky	extension == nil ifTrue: [self assureExtension].	extension sticky: true! !!Morph methodsFor: 'aug97 additions' stamp: 'di 8/11/1998 22:09'!isPartsDonor	extension == nil ifTrue: [^ false].	^ extension isPartsDonor! !!Morph methodsFor: 'aug97 additions' stamp: 'di 8/11/1998 22:10'!isPartsDonor: aBoolean	extension == nil ifTrue:		[aBoolean ifFalse: [^ self].		self assureExtension].	extension isPartsDonor: aBoolean! !!Morph methodsFor: 'aug97 additions' stamp: 'di 8/11/1998 22:10'!isSticky	extension == nil ifTrue: [^ false].	^ extension sticky! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:07'!balloonText	"NB: subclasses may override such that they programatically construct the text, for economy's sake, such as model phrases in a Viewer"	| val |	extension == nil ifTrue: [^ nil].	(val _  extension balloonText) ifNotNil: [^ val].	(val _ extension balloonTextSelector) ifNotNil:		[^ ScriptingSystem helpStringFor: val].	^ nil! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:07'!balloonTextSelector: aSelector	extension == nil ifTrue: [self assureExtension].	extension balloonTextSelector: aSelector! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:08'!copyPropertiesFrom: donorMorph dict: dict	(extension _ donorMorph extension copy) == nil ifTrue: [^ self].	extension copyPropertiesFrom: donorMorph dict: dict! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:09'!hasProperty: propName	"Answer whether the receiver has the given property.  Deemed to have it only if I have a property dictionary entry for it and that entry is neither nil nor false"	extension == nil ifTrue: [^ false].	^ extension hasProperty: propName! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:11'!removeProperty: propName	extension == nil ifTrue: [^ self].	extension removeProperty: propName! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:12'!setProperty: propName toValue: aValue	aValue ifNil: [^ self removeProperty: propName].	extension == nil ifTrue: [self assureExtension].	extension setProperty: propName toValue: aValue! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:13'!valueOfProperty: propName	extension == nil ifTrue: [^ nil].	^ extension valueOfProperty: propName! !!Morph methodsFor: 'extended access' stamp: 'di 8/11/1998 22:13'!valueOfProperty: propName ifAbsent: aBlock	extension == nil ifTrue: [^ aBlock value].	^ extension valueOfProperty: propName ifAbsent: aBlock! !!Morph methodsFor: 'halos and balloon help' stamp: 'di 8/11/1998 22:11'!setBalloonText: stringOrText	extension == nil ifTrue: [self assureExtension].	extension balloonText: stringOrText! !!Morph methodsFor: 'dec97 additions' stamp: 'di 8/11/1998 22:08'!eventHandler	extension == nil ifTrue: [^ nil].	^ extension eventHandler! !!Morph methodsFor: 'dec97 additions' stamp: 'di 8/11/1998 22:10'!player	extension == nil ifTrue: [^ nil].	^ extension player! !!Morph methodsFor: 'dec97 additions' stamp: 'di 8/11/1998 22:10'!player: anObject	extension == nil ifTrue: [self assureExtension].	extension player: anObject! !!Morph methodsFor: 'apr98 additions' stamp: 'di 8/11/1998 22:05'!actorState: anActorState	extension == nil ifTrue: [self assureExtension].	extension actorState: anActorState! !!Morph methodsFor: 'apr98 additions' stamp: 'di 8/11/1998 22:06'!actorStateOrNil	extension == nil ifTrue: [^ nil].	^ extension actorState! !!Morph methodsFor: 'apr98 additions' stamp: 'di 8/11/1998 22:12'!toggleStickiness	extension == nil ifTrue: [^ self beSticky].	extension sticky: extension sticky not! !!MorphExtension methodsFor: 'other properties' stamp: 'di 8/11/1998 22:56'!hasProperty: propName	"Answer whether the receiver has the given property.  Deemed to have it only if I have a property dictionary entry for it and that entry is neither nil nor false"	| prop |	otherProperties == nil ifTrue: [^ false].	prop _ otherProperties at: propName ifAbsent: [nil].	prop == nil ifTrue: [^ false].	prop == false ifTrue: [^ false].	^ true! !!MorphExtension methodsFor: 'other properties' stamp: 'di 8/11/1998 22:56'!removeProperty: propName	otherProperties == nil ifTrue: [^ self].	otherProperties removeKey: propName ifAbsent: [].	otherProperties size == 0 ifTrue: [otherProperties _ nil]! !!MorphExtension methodsFor: 'other properties' stamp: 'di 8/11/1998 22:57'!setProperty: propName toValue: aValue	"These special cases move old properties into named fields of the extension"	otherProperties == nil ifTrue: [otherProperties _ IdentityDictionary new].	otherProperties at: propName put: aValue.! !!MorphExtension methodsFor: 'other properties' stamp: 'di 8/11/1998 22:57'!valueOfProperty: propName	otherProperties == nil ifTrue: [^ nil].	^ otherProperties at: propName ifAbsent: [nil]! !!MorphExtension methodsFor: 'other properties' stamp: 'di 8/11/1998 22:57'!valueOfProperty: propName ifAbsent: aBlock	otherProperties == nil ifTrue: [^ aBlock value].	^ otherProperties at: propName ifAbsent: [^ aBlock value]! !!TileMorph methodsFor: 'initialization' stamp: 'di 8/11/1998 22:13'!bePossessive	possessive _ true.	self line1: actualObject externalName, '''s'! !!TileMorph methodsFor: 'initialization' stamp: 'di 8/11/1998 22:13'!isPossessive	possessive == nil ifTrue: [^ false].	^ possessive! !Morph removeSelector: #convertToExtendedFormat!Morph removeSelector: #convertedToExtendedFormat!Morph removeSelector: #properties!MorphExtension removeSelector: #checkForConversionError:!"Postscript:At this point, there should be no remaining references to the fields, eventHandler, properties, or costumee.  This final class def removes them all.Executable statements after this comment quote..."Utilities informUser: 'Recompiling all subclasses or Morph.This may take a few minutes...' during: [Object subclass: #Morph	instanceVariableNames: 'bounds owner submorphs fullBounds color extension '	classVariableNames: 'EmptyArray '	poolDictionaries: ''	category: 'Morphic-Kernel']!