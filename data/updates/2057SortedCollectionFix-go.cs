'From Squeak2.8alpha of 4 February 2000 [latest update: #2052] on 28 April 2000 at 6:36:44 pm'!"Change Set:		007SortedCollectionFix-goDate:			28 April 2000Author:			Georg Gollmann, Florin Mateoc, Andres ValloudSome improvements to collections.Georg posted some code which where improved, extenden and corrected by Florin and Andres. As not everything worked as Georg suggested, I picked only that stuff that will (probably) work, also ignoring some of the suggestions which IMHO will only make the code more complex without really speeding up things.  The goal should be to remove methods or to improve them, not to add too much specialized methods. --sma"!!SequenceableCollection methodsFor: 'copying' stamp: 'sma 4/28/2000 18:34'!sortBy: aBlock	"Create a copy that is sorted.  Sort criteria is the block that accepts two arguments.	When the block is true, the first arg goes first ([:a :b | a > b] sorts in descending	order)."	^ (self asSortedCollection: aBlock) asOrderedCollection! !!SequenceableCollection methodsFor: 'testing' stamp: 'fm 4/26/2000 15:36'!includes: anObject	^ (self indexOf: anObject) ~~ 0! !!OrderedCollection methodsFor: 'enumerating' stamp: 'sma 2/5/2000 15:13'!select: aBlock 	"Evaluate aBlock with each of my elements as the argument. Collect into	a new collection like the receiver, only those elements for which aBlock	evaluates to true."	| newCollection element |	newCollection _ self copyEmpty.	firstIndex to: lastIndex do:		[:index |		(aBlock value: (element _ array at: index))			ifTrue: [newCollection addLast: element]].	^ newCollection! !!SortedCollection methodsFor: 'accessing' stamp: 'sma 4/28/2000 17:47'!at: anInteger put: anObject	self shouldNotImplement! !!SortedCollection methodsFor: 'adding' stamp: 'go 4/27/2000 13:19'!add: newObject	^ super insert: newObject before: (self indexForInserting: newObject)! !!SortedCollection methodsFor: 'adding' stamp: 'sma 4/28/2000 18:35'!addAll: aCollection	aCollection size > (self size // 3)		ifTrue:			[aCollection do: [:each | self addLast: each].			self reSort]		ifFalse: [aCollection do: [:each | self add: each]].	^ aCollection! !!SortedCollection methodsFor: 'adding' stamp: 'go 4/26/2000 17:26'!addFirst: newObject	self shouldNotImplement! !!SortedCollection methodsFor: 'private' stamp: 'go 4/26/2000 17:17'!insert: anObject before: spot	self shouldNotImplement! !!SortedCollection methodsFor: 'private' stamp: 'sma 4/28/2000 17:46'!reSort	self sort: firstIndex to: lastIndex! !String removeSelector: #includes:!SortedCollection removeSelector: #addLast:!!SortedCollection reorganize!('accessing' at:put: median sortBlock sortBlock:)('adding' add: addAll: addFirst:)('comparing' =)('copying' copy copyEmpty)('enumerating' collect:)('private' defaultSort:to: indexForInserting: insert:before: reSort sort:to:)!