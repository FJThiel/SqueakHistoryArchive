'From Squeak2.9alpha of 5 August 2000 [latest update: #2676] on 21 September 2000 at 10:43:46 pm'!"Change Set:		operatorTile-swDate:			21 September 2000Author:			Scott Wallace*  Adds balloon help for the various arithmetical and logical operators in the tile system.*  On such operator tiles, presents a pop-up of alternatives when the operator itself is clicked on."!!CategoryViewer methodsFor: 'support' stamp: 'sw 9/21/2000 22:36'!booleanPhraseForRetrieverOfType: retrieverType retrieverOp: retrieverOp player: aPlayer	"Answer a boolean-valued phrase derived from a retriever (e.g. 'car's heading'); this is in order to assure that tiles laid down in a TEST area will indeed produce a boolean result"	| outerPhrase getterPhrase receiverTile  rel finalTile |	rel _ (retrieverType == #number)		ifTrue:		[#<]		ifFalse:		[#=].	outerPhrase _ PhraseTileMorph new setOperator: rel type: #boolean rcvrType: retrieverType argType: retrieverType.	getterPhrase _  PhraseTileMorph new setOperator: retrieverOp type: retrieverType rcvrType: #player.	getterPhrase submorphs last setSlotRefOperator: (Utilities inherentSelectorForGetter: retrieverOp).	receiverTile _ (self tileForPlayer: aPlayer) bePossessive.	receiverTile position: getterPhrase firstSubmorph position.	getterPhrase firstSubmorph addMorph: receiverTile.	outerPhrase firstSubmorph addMorph: getterPhrase.	finalTile _ aPlayer tileForArgType: retrieverType.	"comes with arrows"	outerPhrase submorphs last addMorph: finalTile.	outerPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: rel).    	^ outerPhrase! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 9/21/2000 22:37'!arithmeticalOperatorsAndHelpStrings	"Answer an array consisting of lists of the standard arithmetical operator tiles and of the corresponding balloon help for them"	^ #((+ - * / // \\ max: min:)	 	('add' 'subtract' 'multiply' 'divide' 'divide & truncate' 'remainder when divided by' 'larger value' 'smaller value'))! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 9/21/2000 22:38'!helpStringForOperator: anOperator	"Answer the help string associated with the given operator"	| anIndex opsAndHelp |	(anIndex _ (opsAndHelp _ self arithmeticalOperatorsAndHelpStrings) first indexOf: anOperator) > 0		ifTrue:	[^ opsAndHelp second at: anIndex].	(anIndex _ (opsAndHelp _ self numericComparitorsAndHelpStrings) first indexOf: anOperator) > 0		ifTrue:	[^ opsAndHelp second at: anIndex].	^ 'And I called my cow, no help now' 	"This should never be seen, but if it is, we should hear the moo eventually"! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 9/21/2000 22:39'!numericComparitorsAndHelpStrings	"Answer an array whose first element is the list of comparitors, and whose second element is a list of the corresponding help strings"	^ #((< <= = ~= > >= isDivisibleBy:)	 	('less than' 'less than or equal' 'equal' 'not equal' 'greater than' 'greater than or equal' 'divisible by' ))! !!TileMorph methodsFor: 'mouse handling' stamp: 'sw 9/21/2000 22:42'!handlesMouseDown: evt	"Answer whether the receiver would handle the mouseDown represented by evt"	| aPoint |	aPoint _ evt cursorPoint.	(operatorOrExpression notNil and: [upArrow notNil]) ifTrue: [^ true].		"Click on the operator presents list of alternatives"	upArrow ifNotNil: [((upArrow boundsInWorld containsPoint: aPoint) or: [downArrow boundsInWorld containsPoint: aPoint])		ifTrue: [^ true]].	suffixArrow ifNotNil: [(suffixArrow boundsInWorld containsPoint: aPoint)		ifTrue: [^ true]].	retractArrow ifNotNil: [(retractArrow boundsInWorld containsPoint: aPoint)		ifTrue: [^ true]].	^ super handlesMouseDown: evt! !!TileMorph methodsFor: 'mouse handling' stamp: 'sw 9/21/2000 21:53'!mouseDown: evt	"The mouse went down on the receiver; take appropriate action"	| aPoint |	"Note: evt is in local coordinates, so bounds is better than boundsInWorld"	aPoint _ evt cursorPoint.	nArrowTicks _ 0.	upArrow ifNotNil:		[(upArrow bounds containsPoint: aPoint) ifTrue: [^ self].		(downArrow bounds containsPoint: aPoint) ifTrue: [^ self].		"next line maybe outside this block & below it"		operatorOrExpression ifNotNil: [^ self presentOperatorAlternatives: evt]].		suffixArrow ifNotNil:		[(suffixArrow bounds containsPoint: aPoint)			 ifTrue: [self showSuffixChoices.  ^ self]].	retractArrow ifNotNil:		[(retractArrow bounds containsPoint: aPoint)			 ifTrue: [self deleteLastTwoTiles.  ^ self]].	^ super mouseDown: evt! !!TileMorph methodsFor: 'mouse handling' stamp: 'sw 9/21/2000 21:52'!presentOperatorAlternatives: evt	"The receiver is a tile that represents an operator; a click on the receiver's label will pop up a menu of alternative operator choices"	| result ops |	((ops _ ScriptingSystem arithmeticalOperatorsAndHelpStrings first) includes: operatorOrExpression) ifFalse:		[((ops _ ScriptingSystem numericComparitorsAndHelpStrings first) includes: operatorOrExpression)			ifFalse: [^ self]].			(result _ (SelectionMenu selections: ops) startUp) ifNotNil:		[self setOperatorAndUseArrows: result asString]! !!TileMorph methodsFor: 'arrows' stamp: 'sw 9/21/2000 22:40'!arrowAction: delta	"Do what is appropriate when an arrow on the tile is pressed; delta will be +1 or -1"	| index aList |	owner ifNil: [^ self].	(type == #literal and: [literal isNumber])		ifTrue:			[self literal: literal + delta. ^ self layoutChanged.].	(type == #literal and: [literal isKindOf: Boolean])		ifTrue: [self literal: literal not.  ^ self layoutChanged].	operatorOrExpression ifNotNil:		[aList _ #(+ - * / // \\ min: max:).		index _ aList indexOf: operatorOrExpression.		index  > 0 ifTrue:			[self setOperatorAndUseArrows: (aList atWrap: index + delta)].		aList _ #(< <= = ~= > >= isDivisibleBy:).		index _ aList indexOf: operatorOrExpression.		index  > 0 ifTrue:			[owner firstSubmorph type = #number 				ifTrue: [self setOperator: (aList atWrap: index + delta)]				ifFalse: [self setOperator: (#(= ~=) atWrap: index - 2 + delta)]].						"Color does not understand <"			submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: operatorOrExpression).			^ self acceptNewLiteral]	! !!TileMorph methodsFor: 'arrows' stamp: 'sw 9/21/2000 22:43'!showSuffixChoices	"The suffix arrow has been hit, so respond appropriately"	| plusPhrase phrase pad outer num |	(phrase _ self ownerThatIsA: PhraseTileMorph) ifNil: [^ self].	(type == #literal) & (literal isNumber) ifTrue: ["Tile is a constant number"		phrase lastSubmorph == owner "pad"			ifTrue: ["we are adding the first time (at end of our phrase)"				plusPhrase _ self presenter phraseForReceiver: literal 						op: #+ arg: 1 resultType: #number.				plusPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: #+).				owner acceptDroppingMorph: plusPhrase event: self primaryHand lastEvent.				num _ plusPhrase firstSubmorph firstSubmorph.				num deleteSuffixArrow]].	type == #operator ifTrue: ["Tile is accessor of an expression"		phrase resultType == #number ifTrue:			[outer _ phrase ownerThatIsA: PhraseTileMorph.			pad _ self ownerThatIsA: TilePadMorph.			outer ifNotNil:				[outer lastSubmorph == pad ifTrue: [ "first time"					plusPhrase _ self presenter phraseForReceiver: 1 							op: #+ arg: 1 resultType: #number.					plusPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: #+).					pad acceptDroppingMorph: plusPhrase event: self primaryHand lastEvent.					plusPhrase firstSubmorph removeAllMorphs; addMorph: phrase.	"car's heading"					self deleteSuffixArrow]]]].	(phrase topEditor ifNil: [phrase]) enforceTileColorPolicy! !TileMorph removeSelector: #setOperatorAndUseArrows:withHelpString:!