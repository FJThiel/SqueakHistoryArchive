'From Squeak2.6 of 11 October 1999 [latest update: #1633] on 24 November 1999 at 1:41:03 pm'!"Change Set:		NewbieClassDefinitionDate:			21 October 1999Author:			John DuncanI recently got burned by defining #name as a class method. To avoid this, I've enhanced Metaclass class with a method #scarySelectors that returns a list of selectors that, when overridden, cause bad results. Currently, this only includes #name, but I'm sure more advanced users can add more. Browser>>defineMessageFrom:notifying: has been augmented to confirm when a user wants to override one of these messages. I hope you like it.Tweaked by Dan Ingalls to ...Produce this response for any selector known to Metaclass, ClassDescription, or Behavior,and only to produce it when the selector is being defined for the first time."!!Browser methodsFor: 'message functions' stamp: 'di 11/24/1999 13:40'!defineMessageFrom: aString notifying: aController	"Compile the expressions in aString. Notify aController if a syntax error occurs. Install the compiled method in the selected class classified under  the currently selected message category name. Answer the selector obtained if compilation succeeds, nil otherwise."	| selectedMessageName selector category oldMessageList |	selectedMessageName _ self selectedMessageName.	oldMessageList _ self messageList.	contents _ nil.	selector _ (Parser new parseSelector: aString).	(self metaClassIndicated		and: [(self selectedClassOrMetaClass includesSelector: selector) not		and: [Metaclass isScarySelector: selector]])		ifTrue: ["A frist-time definition overlaps the protocol of Metaclasses"				(self confirm: ((selector , ' is used in the existing class system.Overriding it could cause serious problems.Is this really what you want to do?') asText makeBoldFrom: 1 to: selector size))				ifFalse: [^nil]].	selector _ self selectedClassOrMetaClass				compile: aString				classified: (category _ self selectedMessageCategoryName)				notifying: aController.	selector == nil ifTrue: [^ nil].	contents _ aString copy.	selector ~~ selectedMessageName		ifTrue: 			[category = ClassOrganizer nullCategory				ifTrue: [self changed: #classSelectionChanged.						self changed: #classList.						self messageCategoryListIndex: 1].			self setClassOrganizer.  "In case organization not cached"			(oldMessageList includes: selector)				ifFalse: [self changed: #messageList].			self messageListIndex: (self messageList indexOf: selector)].	^ selector! !!Metaclass class methodsFor: 'anti-corruption' stamp: 'di 11/24/1999 13:30'!isScarySelector: newbieSelector	"Return true if newbieSelector is already a part of Metaclass protocol."	(Metaclass includesSelector: newbieSelector) ifTrue: [^ true].	(ClassDescription includesSelector: newbieSelector) ifTrue: [^ true].	(Behavior includesSelector: newbieSelector) ifTrue: [^ true].	^ false! !Metaclass class removeSelector: #scarySelectors!