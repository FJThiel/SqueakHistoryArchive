'From Squeak2.9alpha of 17 July 2000 [latest update: #2740] on 27 September 2000 at 5:23:12 pm'!"Change Set:		geeGollyDate:			27 September 2000Author:			Bob Arning- fix red menu so that sketches in transformtions will show the GeeMail submenu when appropriate- insure project renamer not visible before making thumbnail for project save directory dialog- removed some obsolete methods/classes/variables- fixed up parsing of old project names which contained periods"!Form subclass: #DisplayScreen	instanceVariableNames: 'clippingBox '	classVariableNames: 'DisplayChangeSignature OuterMorphicWorld ScreenSave '	poolDictionaries: ''	category: 'Graphics-Display Objects'!Model subclass: #Project	instanceVariableNames: 'world changeSet transcript parentProject previousProject displayDepth activeProcess exitFlag viewSize thumbnail nextProject guards projectParameters isolatedHead inForce version urlList environment lastDirectory '	classVariableNames: 'CurrentProject GoalFreePercent GoalNotMoreThan UIProcess '	poolDictionaries: ''	category: 'System-Support'!!Morph methodsFor: 'menus' stamp: 'RAA 9/27/2000 13:07'!addCustomMenuItems: aCustomMenu hand: aHandMorph	| realOwner realMorph |	"Add morph-specific items to the given menu which was invoked by the given hand.  Note the special-casing of Worlds, for which some of the the otherwise generic items are excluded."	self isWorldMorph		ifFalse:			[aCustomMenu add: 'add drop-shadow' action: #addDropShadow.			(self isKindOf: SystemWindow)				ifFalse: [aCustomMenu add: 'put in a window' action: #embedInWindow].			aCustomMenu addUpdating: #stickinessString target: self action: #toggleStickiness.			aCustomMenu add: 'adhere to edge...' action: #adhereToEdge]		ifTrue:			[aCustomMenu add: 'desktop menu...' target: aHandMorph action: #putUpDesktopMenu.			aCustomMenu addLine].	Preferences noviceMode ifFalse:		[self addDebuggingItemsTo: aCustomMenu hand: aHandMorph].	realOwner _ (realMorph _ self topRendererOrSelf) owner.	(realOwner isKindOf: TextPlusPasteUpMorph) ifTrue:		[aCustomMenu add: 'GeeMail stuff...' subMenu: (realOwner textPlusMenuFor: realMorph)]! !!Project methodsFor: 'accessing' stamp: 'RAA 9/27/2000 14:14'!findProjectView: projectDescription	| pName dpName proj |	"In this world, find the morph that holds onto the project described by projectDescription.  projectDescription can be a project, or the name of a project.  The project may be represented by a DiskProxy.  The holder morph may be at any depth in the world.	Need to fix this if Projects have subclasses, or if a class other than ProjectViewMorph can officially hold onto a project.  (Buttons, links, etc)	If parent is an MVC world, return the ProjectController."	pName _ (projectDescription isKindOf: String) 		ifTrue: [projectDescription]		ifFalse: [projectDescription name].	self isMorphic 		ifTrue: [world allMorphsDo: [:pvm |				pvm class == ProjectViewMorph ifTrue: [					(pvm project class == Project and: 						[pvm project name = pName]) ifTrue: [^ pvm].					pvm project class == DiskProxy ifTrue: [ 						dpName _ pvm project constructorArgs first.						dpName _ (dpName findTokens: '/') last.						dpName _ (Project parseProjectFileName: dpName) first.						dpName = pName ifTrue: [^ pvm]]]]]		ifFalse: [world scheduledControllers do: [:cont |				(cont isKindOf: ProjectController) ifTrue: [					((proj _ cont model) class == Project and: 						[proj name = pName]) ifTrue: [^ cont view].					proj class == DiskProxy ifTrue: [ 						dpName _ proj constructorArgs first.						dpName _ (dpName findTokens: '/') last.						dpName _ (Project parseProjectFileName: dpName) first.						dpName = pName ifTrue: [^ cont view]]]]			].	^ nil! !!Project methodsFor: 'menu messages' stamp: 'RAA 9/27/2000 13:46'!saveState	"Save the current state in me prior to leaving this project"	changeSet _ Smalltalk changes.	Smalltalk isMorphic		ifTrue:			[world _ Display bestGuessOfCurrentWorld.			world sleep]		ifFalse:			[world _ ScheduledControllers.			ScheduledControllers unCacheWindows].	Sensor eventQueue: nil. "Will be reinstalled by World>>install"	transcript _ Transcript.! !!Project methodsFor: 'file in/out' stamp: 'RAA 9/27/2000 14:12'!loadFromServer: newerAutomatically	| servers pair resp |	"If a newer version of me is on the server, load it."	self isCurrentProject ifTrue: ["exit, then do the command"		^ self armsLengthCommand: #loadFromServer withDescription: 'Loading'	].	servers _ self tryToFindAServerWithMe ifNil: [^ nil].	pair _ self class mostRecent: self name onServer: servers first.	pair first ifNil: [^ self inform: 'can''t find file on server for ', self name].	self currentVersionNumber > pair second ifTrue: [		^ self inform: 'That server has an older version of the project.'].	version = (Project parseProjectFileName: pair first) second ifTrue: [		resp _ (PopUpMenu labels: 'Reload anyway\Cancel' withCRs) startUpWithCaption: 					'The only changes are the ones you made here.'.		resp ~= 1 ifTrue: [^ nil]	] ifFalse: [		newerAutomatically ifFalse: [			resp _ (PopUpMenu labels: 'Load it\Cancel' withCRs) startUpWithCaption: 						'A newer version exists on the server.'.			resp ~= 1 ifTrue: [^ nil]		].	].	"Find parent project, go there, zap old thumbnail"	parentProject installRemoteNamed: pair first from: servers first named: self name.! !!Project methodsFor: 'file in/out' stamp: 'RAA 9/27/2000 13:19'!validateProjectNameIfOK: aBlock	(self hasBadNameForStoring or: [self name beginsWith: 'Unnamed']) ifTrue: [		EToyProjectRenamerMorph			validate: self name			andDo: [ :newName | 				newName = changeSet name ifFalse: [changeSet name: newName].				World displayWorldSafely.				aBlock value.			]	] ifFalse: [		aBlock value	]! !!Project methodsFor: 'file in/out' stamp: 'RAA 9/27/2000 14:12'!versionFrom: aServerFile	| theName uu serverUrl |	"Store the version of the file I actually came from.  My stored version was recorded before I knew the latest version number on the server!!"	self flag: #bob.		"this may become unnecessary once we get the version before writing"	(aServerFile class == String) 		ifTrue: [uu _ aServerFile asUrl.				theName _ uu path last.				serverUrl _ (uu toText copyUpToLast: $/), '/']		ifFalse: [serverUrl _ aServerFile directoryUrl.				theName _ aServerFile localName].	version _ (Project parseProjectFileName: theName) second.	(serverUrl beginsWith: 'ftp:') ifTrue: ["update our server location"		urlList ifNil: [urlList _ Array new: 1].		urlList size = 0 ifTrue: [urlList _ Array new: 1].		urlList at: 1 put: serverUrl].! !!Project methodsFor: 'object fileIn' stamp: 'RAA 9/27/2000 13:47'!convertdwctppdaevtngpiivuel0: varDict dwctppdvtngpiivuel0: smartRefStrm	"These variables are automatically stored into the new instance #('dependents' 'world' 'changeSet' 'transcript' 'parentProject' 'previousProject' 'displayDepth' 'viewSize' 'thumbnail' 'nextProject' 'guards' 'projectParameters' 'isolatedHead' 'inForce' 'version' 'urlList' 'environment' 'lastDirectory').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."		"These are going away #('activeProcess' 'exitFlag').  Possibly store their info in another variable?"! !!Project class methodsFor: 'instance creation' stamp: 'RAA 9/27/2000 13:41'!uiProcess	^ UIProcess! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 9/27/2000 14:13'!fromUrl: urlString	| serverFile pair projName proj num triple |	"Load the project, and make a thumbnail to it in the current project.  Replace the old one if necessary.Project fromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/Squeak_Easy.pr.gz'."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	"---no longer seems necessary---		Smalltalk isMorphic ifFalse: [^ self inform: 			'Later, allow jumping from MVC to Morphic Projects.'].	-----"	serverFile _ ServerFile new fullPath: urlString.	projName _ (Project parseProjectFileName: serverFile fileName unescapePercents) first.	(proj _ Project named: projName) ifNotNil: ["it appeared" ^ ProjectEntryNotification signal: proj].	serverFile isTypeHTTP		ifTrue: [num _ (triple _ Project parseProjectFileName: serverFile fileName) size >= 3 				ifTrue: [Base64MimeConverter decodeInteger: triple second unescapePercents]				ifFalse: [0].			pair _ Array with: serverFile fileName with: num]		ifFalse: [pair _ self mostRecent: serverFile localName onServer: serverFile].	"Pair first is name exactly as it is on the server"	pair first ifNil: ["If none, open a blank project"		^self openBlankProjectNamed: projName	].	CurrentProject installRemoteNamed: pair first from: serverFile named: projName.! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 9/27/2000 14:27'!mostRecent: projName onServer: aServerDirectory	| stem list max goodName triple num stem1 stem2 rawList nothingFound unEscName |	"Find the exact fileName of the most recent version of project with the stem name of projName.  Names are of the form 'projName|mm.pr' where mm is a mime-encoded integer version number.	File names may or may not be HTTP escaped, %20 on the server."	self flag: #bob.		"do we want to handle unversioned projects as well?"	nothingFound _ {nil. -1}.	aServerDirectory ifNil: [^nothingFound].	"23 sept 2000 - some old projects have periods in name so be more careful"	unEscName _ projName unescapePercents.	stem _ (Project parseProjectFileName: unEscName) first.	rawList _ aServerDirectory fileNames.	rawList class == String ifTrue: [self inform: 'server is unavailable'. ^nothingFound].	list _ rawList collect: [:nnn | nnn unescapePercents].	max _ -1.  goodName _ nil.	list withIndexDo: [:aName :ind |		(aName beginsWith: stem) ifTrue: [			(triple _ Project parseProjectFileName: aName) size >= 3 ifTrue: [				num _ Base64MimeConverter decodeInteger: triple second unescapePercents.				num > max ifTrue: [max _ num.  goodName _ (rawList at: ind)]]]].	max = -1 ifFalse: [^ Array with: goodName with: max].	"try with underbar for spaces on server"	(stem includes: $ ) ifTrue: [		stem1 _ stem copyReplaceAll: ' ' with: '_'.		list withIndexDo: [:aName :ind |			(aName beginsWith: stem1) ifTrue: [				(triple _ Project parseProjectFileName: aName) size >= 3 ifTrue: [					num _ Base64MimeConverter decodeInteger: triple second unescapePercents.					num > max ifTrue: [max _ num.  goodName _ (rawList at: ind)]]]]].	max = -1 ifFalse: [^ Array with: goodName with: max].		"try without the marker | "	stem1 _ stem allButLast, '.pr'.	stem2 _ stem1 copyReplaceAll: ' ' with: '_'.	"and with spaces replaced"	list withIndexDo: [:aName :ind |		(aName beginsWith: stem1) | (aName beginsWith: stem2) ifTrue: [			(triple _ aName findTokens: '.') size >= 2 ifTrue: [				max _ 0.  goodName _ (rawList at: ind)]]].	"no other versions"	max = -1 ifFalse: [^ Array with: goodName with: max].	^nothingFound		"no matches"! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 9/27/2000 14:11'!namedUrl: urlString	| projName |	"Return project if in, else nil"	"Ted's fix for unreachable projects"	projName _ (urlString findTokens: '/') last.	projName _ (Project parseProjectFileName: projName unescapePercents) first.	^ Project named: projName! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 9/27/2000 14:33'!parseProjectFileName: aString"it was formerly possible to have periods in projct names and this messed up some parsing methods. Try to handle that more gracefully and allow for a change in scheme at a later time"	| suffix baseName version versionAndSuffix |	"answer an array with: 		1 = basic project name		2 = version string		3 = suffix (pr)""----Project parseProjectFileName: 'aa.bb.cc|vv.ss'--degenerate forms--Project parseProjectFileName: 'aa.bb.cc|.ss'Project parseProjectFileName: 'aa.bb.cc|vv.'Project parseProjectFileName: 'aa.bb.cc|.'---"	baseName _ version _ suffix _ ''.	baseName _ aString copyUpToLast: $|.	baseName = aString ifTrue: [		(aString occurrencesOf: $.) > 1 ifTrue: [			baseName _ aString copyUpToLast: $..			suffix _ baseName allButFirst: baseName size + 1.		].	] ifFalse: [		versionAndSuffix _ aString allButFirst: baseName size + 1.		suffix _ versionAndSuffix copyUpTo: $..		version _ versionAndSuffix allButFirst: suffix size + 1.	].	^{baseName. version. suffix}! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 9/27/2000 14:11'!sweep: aServerDirectory	| repository list parts ind entry projectName versions |	"On the server, move all but the three most recent versions of each Squeaklet to a folder called 'older'"	"Project sweep: ((ServerDirectory serverNamed: 'DaniOnJumbo') clone 				directory: '/vol0/people/dani/Squeaklets/2.7')"	"Ensure the 'older' directory"	(aServerDirectory includesKey: 'older') 		ifFalse: [aServerDirectory createDirectory: 'older'].	repository _ aServerDirectory clone directory: aServerDirectory directory, '/older'.	"Collect each name, and decide on versions"	list _ aServerDirectory fileNames.	list class == String ifTrue: [^ self inform: 'server is unavailable'].	list _ list asSortedCollection asOrderedCollection.	parts _ list collect: [:en | Project parseProjectFileName: en].	parts _ parts select: [:en | en size = 3 and: [en third = 'pr']].	ind _ 1.	[entry _ list at: ind.		projectName _ entry first asLowercase.		versions _ OrderedCollection new.  versions add: entry.		[(ind _ ind + 1) > list size 			ifFalse: [(parts at: ind) first asLowercase = projectName 				ifTrue: [versions add: (parts at: ind).  true]				ifFalse: [false]]			ifTrue: [false]] whileTrue.		aServerDirectory moveYoungest: 3 in: versions to: repository.		ind > list size] whileFalse.! !ServerDirectory removeSelector: #type!ProjectViewMorph removeSelector: #exportSegment!Project removeSelector: #activeProcess!Project removeSelector: #exportSegment!Project removeSelector: #exportSegmentWithCatagories:classes:!Model subclass: #Project	instanceVariableNames: 'world changeSet transcript parentProject previousProject displayDepth viewSize thumbnail nextProject guards projectParameters isolatedHead inForce version urlList environment lastDirectory '	classVariableNames: 'CurrentProject GoalFreePercent GoalNotMoreThan UIProcess '	poolDictionaries: ''	category: 'System-Support'!MenuMorph removeSelector: #popUpAt:forHand:from:!HandMorph removeSelector: #userInitials:!Morph removeSelector: #allLowerWorldsDo:!MethodFinder class removeSelector: #methodFor:!DisplayScreen removeSelector: #obsolete!CompressedSoundData removeSelector: #withEToySound:!Smalltalk removeClassNamed: #OLDPaintBoxMorph!Smalltalk removeClassNamed: #OLDSketchEditorMorph!