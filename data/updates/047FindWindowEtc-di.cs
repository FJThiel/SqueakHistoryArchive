'From Squeak 2.0 BETA of May 8, 1998 on 19 May 1998 at 5:08:38 pm'!"Change Set:		FindWindowEtcDate:			19 May 1998Author:			Dan IngallsSundry Fixes...Added findWindow, collapseAll, expandAll and do... to the World menu.Fixed ability to accept in a StringHolder being edited (as in edit do...).Fixed pane proportions in MessageListsSystemWindows now init with activeOnlyOnTop=true.  You must set	'activeOnlyOnTop: false' if this is not desired.Fixed problem of scrollbars not displaying on first appearance.Sped up scrollbar display (don't recreate morph if extent is same).Made it so auto-selects, such as Debugger pc, scroll into view.Resolved the competition between scrollbars and resize handles."!!Object methodsFor: 'user interface' stamp: 'di 5/19/1998 12:06'!inspect	"Create and schedule an Inspector in which the user can examine the receiver's variables."	World ifNotNil:		["Written so that Morphic can still be removed."		^ (Inspector openAsMorphOn: self) openInWorld].	Inspector openOn: self withEvalPane: true! !!ControlManager methodsFor: 'scheduling' stamp: 'di 5/19/1998 09:03'!findWindow	"Present a menu of window titles, and activate the one that gets chosen."	^ self findWindowSatisfying: [:c | true]! !!HandMorph methodsFor: 'meta menu' stamp: 'di 5/19/1998 11:52'!buildWorldMenu	"Build the meta menu for the world."	| menu subMenu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	Project current isTopProject ifFalse:		[menu add: 'exit this world' action: #exitWorld.		menu addLine].	menu add: 'paste morph' action: #pasteMorph.	menu add: 'new morph...' action: #newMorph.	World ifNotNil: [		subMenu _ MenuMorph new defaultTarget: self.		subMenu add: 'workspace' action: #openWorkspace.		subMenu add: 'browser' action: #openBrowser.		subMenu add: 'recent changes' action: #openRecentChanges.		subMenu add: 'change sorter' action: #openChangeSorter.		subMenu add: 'changes log' action: #openChangesLog.		subMenu add: 'file list' action: #openFileList.		subMenu add: 'transcript' action: #openTranscript.		subMenu add: 'project (mvc)' action: #openMVCProject.		subMenu add: 'project (morphic)' action: #openMorphicProject.		subMenu add: 'project link...' action: #projectThumbnail.		subMenu addLine.		subMenu add: 'collapse all' action: #collapseAll.		subMenu add: 'expand all' action: #expandAll.		subMenu add: 'find window' action: #findWindow.		menu add: 'windows...' subMenu: subMenu].	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'grab drawing from screen' action: #grabDrawingFromScreen.	subMenu add: 'read drawing from file' action: #importImageFromDisk.	subMenu add: 'make new drawing' target: self presenter associatedMorph action: #makeNewDrawingWithin.	menu add: 'graphics...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'add slot to model' action: #newVariable.	subMenu add: 'write init method for model' action: #writeInitMethodForModel.	subMenu add: 'grab model for this world' action: #grabModel.	menu add: 'model...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'set display depth...' action: #setDisplayDepth.	subMenu add: 'change background color' action: #changeBackgroundColor.	subMenu add: 'use texture background' target: self world action: #setStandardTexture.	subMenu add: 'unlock contents' action: #unlockWorldContents.	subMenu add: 'unhide hidden objects' action: #showHiders.	subMenu add: 'round up stray objects' action: #roundUpStrayObjects.	gridOn		ifTrue: [subMenu add: 'turn gridding off' action: #setGridding]		ifFalse: [subMenu add: 'turn gridding on' action: #setGridding].	menu add: 'options...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'update code from server' action: #updateFromServer.	subMenu addLine.	subMenu add: 'local host address' action: #reportLocalAddress.	subMenu add: 'connect remote user' action: #connectRemoteUser.	subMenu add: 'disconnect remote user' action: #disconnectRemoteUser.	subMenu add: 'disconnect all remote users' action: #disconnectAllRemoteUsers.	menu add: 'remote...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'read drawing from file' action: #importImageFromDisk.	subMenu add: 'save world in file' action: #saveWorldInFile.	subMenu add: 'read morph(s) from file' action: #readMorphFile.	menu add: 'file...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self world.	subMenu add: 'add stop, step, & go buttons' target: self world presenter action: #addStopStepGoButtons.	subMenu add: 'add scripting knobs' target: self presenter action: #addStandardControls.	subMenu add: 'remove scripting knobs' target: self world action: #removeScriptingControls.	subMenu addLine.	subMenu add: 'parts bin' target: self presenter action: #createStandardPartsBin.	subMenu add: 'control panel' target: self presenter action: #createControlPanel.	menu add: 'scripting...' subMenu: subMenu.	menu add: 'do...' target: Utilities action: #offerCommonRequests.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'inspect world' action: #inspectWorld.	subMenu add: 'inspect model' action: #inspectWorldModel.	subMenu add: 'clear palette area' action: #clearPaletteArea.	subMenu add: 'flush viewer cache' action: #flushViewerCache.	subMenu add: 'full screen' action: #fullScreen.	subMenu add: 'start MessageTally' action: #startMessageTally.	subMenu add: 'call #tempCommand' action: #callTempCommand.	subMenu add: 'show space left' action: #showSpaceLeft.	menu add: 'debug...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'save' action: #saveSession.	subMenu add: 'save as...' action: #saveAs.	subMenu add: 'save and quit' action: #saveAndQuit.	subMenu add: 'quit...' action: #quitSession.	menu add: 'save / quit...' subMenu: subMenu.	^ menu! !!HandMorph methodsFor: 'meta menu' stamp: 'di 5/19/1998 09:54'!collapseAll	"Collapse all windows"	(SystemWindow windowsIn: self world satisfying: [:w | w isCollapsed not])		reverseDo: [:w | w collapseOrExpand.  self world displayWorld]! !!HandMorph methodsFor: 'meta menu' stamp: 'di 5/19/1998 09:53'!expandAll	"Expand all windows"	(SystemWindow windowsIn: self world satisfying: [:w | w isCollapsed])		reverseDo: [:w | w collapseOrExpand.  self world displayWorld]! !!HandMorph methodsFor: 'meta menu' stamp: 'di 5/19/1998 10:01'!findWindow	"Present a menu of window titles, and activate the one that gets chosen.	Collapsed windows appear below line, expand if chosen."	| menu expanded collapsed |	menu _ MenuMorph new.	expanded _ SystemWindow windowsIn: self world satisfying: [:w | w isCollapsed not].	collapsed _ SystemWindow windowsIn: self world satisfying: [:w | w isCollapsed].	expanded do: [:w | menu add: w label target: w action: #activate].	expanded isEmpty | collapsed isEmpty ifFalse: [menu addLine].	collapsed do: [:w | menu add: w label target: w action: #collapseOrExpand].	self invokeMenu: menu event: lastEvent! !!MessageSet class methodsFor: 'instance creation' stamp: 'di 5/19/1998 09:28'!openAsMorph: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	| window codePane |	window _ (SystemWindow labelled: 'later') model: aMessageSet.	window addMorph: (PluggableListMorph on: aMessageSet list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:)		frame: (0@0 extent: 1@0.2).	codePane _ PluggableTextMorph on: aMessageSet 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	window addMorph: codePane		frame: (0@0.2 corner: 1@1).	window setLabel: aString.	window openInWorld! !!ScrollPane methodsFor: 'retractable scroll bar' stamp: 'di 5/19/1998 16:29'!mouseEnter	(retractableScrollBar and: [(submorphs includes: scrollBar) not])		ifTrue: [self privateAddMorph: scrollBar atIndex: 1.				self resizeScrollBar.				scrollBar changed]! !!PluggableTextMorph methodsFor: 'model access' stamp: 'di 5/19/1998 16:24'!setSelection: sel	textMorph editor selectFrom: sel first to: sel last.	self scrollSelectionIntoView! !!Slider methodsFor: 'geometry' stamp: 'di 5/19/1998 16:28'!extent: newExtent	newExtent = bounds extent ifTrue: [^ self].	super extent: (newExtent x max: self sliderThickness * 2)					@ (newExtent y max: self sliderThickness * 2).	self removeAllMorphs; initializeSlider! !!StringHolder methodsFor: 'initialize-release' stamp: 'di 5/19/1998 15:34'!openAsMorphLabel: labelString 	"Workspace new openAsMorphLabel: 'Workspace'"	| window |	window _ (SystemWindow labelled: labelString) model: self.	window addMorph: (PluggableTextMorph on: self text: #contents accept: #acceptContents:			readSelection: nil menu: nil)		frame: (0@0 corner: 1@1).	window openInWorld! !!StringHolder methodsFor: 'accessing' stamp: 'di 5/19/1998 15:34'!acceptContents: aString 	"Set aString to be the contents of the receiver.  Return true cuz happy"	self contents: aString.	^ true! !!StringHolder methodsFor: 'accessing' stamp: 'di 5/19/1998 15:32'!contents: aString 	"Set aString to be the contents of the receiver."	contents _ aString asString! !!SystemWindow methodsFor: 'initialization' stamp: 'di 5/19/1998 15:54'!initialize	| aFont |	super initialize.	isCollapsed _ false.	activeOnlyOnTop _ true.	paneMorphs _ Array new.	paneRects _ Array new.	borderColor _ #raised.	borderWidth _ 1.	color _ Color black.	aFont _ Preferences fontForScriptorButtons.	stripes _ Array with: (RectangleMorph newBounds: bounds)  "see extent:"				with: (RectangleMorph newBounds: bounds).	self addMorph: (stripes first borderWidth: 1).	self addMorph: (stripes second borderWidth: 2).	self addMorph: (label _ StringMorph new contents: labelString;			font: ((TextStyle default fontAt: 2) emphasized: 1)).	self addMorph: (closeBox _ SimpleButtonMorph new borderWidth: 0;			label: 'X' font: aFont; color: Color transparent;			actionSelector: #delete; target: self; extent: 16@16).	self addMorph: (collapseBox _ SimpleButtonMorph new borderWidth: 0;			label: 'O' font: aFont; color: Color transparent;			actionSelector: #collapseOrExpand; target: self; extent: 16@16).	self extent: 300@200! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'di 5/19/1998 09:40'!collapseOrExpand	isCollapsed	ifTrue:		["Expand -- restore panes to morphics structure"		isCollapsed _ false.		paneMorphs reverseDo: [:m | self addMorph: m].		super bounds: fullFrame.		self activate "-- mainly for findWindow"]	ifFalse:		["Collapse -- remove panes from morphics structure"		isCollapsed _ true.		paneMorphs do: [:m | m delete; releaseCachedState].		collapsedFrame			ifNil:	[self extent: (label width + 50) @ (self labelHeight + 2).					self world primaryHand attachMorph: self]			ifNotNil: [super bounds: collapsedFrame]]! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'di 5/19/1998 17:03'!enterHandle: event morph: handle pointName: ptName	"The mouse has entered reframing mark.  Start a reframe operation."	| resizer b |	paneMorphs do: [:p | (p fullBounds containsPoint: event cursorPoint)			ifTrue: [^ self  "Don't activate resizer if in a scrollbar"]].	resizer _ NewHandleMorph new followHand: event hand		forEachPointDo:			[:p | b _ self bounds.			ptName = #topCenter ifTrue: [self bounds: (b withTop: p y)].			ptName = #bottomCenter ifTrue: [self bounds: (b withBottom: p y)].			ptName = #leftCenter ifTrue: [self bounds: (b withLeft: p x)].			ptName = #rightCenter ifTrue: [self bounds: (b withRight: p x)].			ptName = #topLeft ifTrue: [self bounds: (b bottomRight rect: p)].			ptName = #bottomRight ifTrue: [self bounds: (b topLeft rect: p)].			ptName = #bottomLeft ifTrue: [self bounds: (b topRight rect: p)].			ptName = #topRight ifTrue: [self bounds: (b bottomLeft rect: p)]]		lastPointDo: [:lastPoint | ].	event hand world addMorph: resizer.	resizer startStepping! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'di 5/19/1998 09:34'!isCollapsed	^ isCollapsed! !!SystemWindow methodsFor: 'top window' stamp: 'di 5/19/1998 15:54'!activate	"Bring me to the front and make me able to respond to mouse and keyboard"	| oldTop |	oldTop _ TopWindow.	TopWindow _ self.	oldTop ifNotNil: [oldTop passivate].	owner firstSubmorph == self ifFalse: [owner addMorphFront: self].	self submorphsDo: [:m | m unlock].	self setStripeColorsFrom: self paneColor.	self addHandles! !!SystemWindow class methodsFor: 'top window' stamp: 'di 5/19/1998 09:09'!windowsIn: aWorld satisfying: windowBlock	^ aWorld submorphs select:		[:m | (m isKindOf: SystemWindow) and: [windowBlock value: m]]! !