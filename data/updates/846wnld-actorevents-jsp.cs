'From Squeak 2.3 of January 14, 1999 on 19 April 1999 at 6:07:57 pm'!"Change Set:		wnld-actorevents-jspDate:			19 April 1999Author:			Jeff PierceThe event handling functionality for actors.  Also defines the default interactive behaviors."!Wonderland removeActorPrototypesFromSystem!Hierarchical subclass: #WonderlandActor	instanceVariableNames: 'myName myWonderland myMesh myTexture myMaterial myColor composite scaleMatrix hidden firstClass myReactions '	classVariableNames: ''	poolDictionaries: 'WonderlandConstants '	category: 'Wonderland-Objects'!WonderlandMorph subclass: #WonderlandCameraMorph	instanceVariableNames: 'myCamera myControls eventFocus lastCursorPoint mouseUpButton '	classVariableNames: ''	poolDictionaries: 'WonderlandConstants '	category: 'Wonderland-Morphs'!!WonderlandActor methodsFor: 'initialize' stamp: 'jsp 4/19/1999 14:09'!initializeFor: aWonderland	"Initialize the instance variables for the WonderlandActor"	super initialize.	myName _ 'Unnamed'.	myWonderland _ aWonderland.	myParent _ aWonderland getScene.	myParent addChild: self.	"Initialize our material"	myMaterial _ B3DMaterial new.	myMaterial ambientPart: Color white.	myMaterial diffusePart: Color white.	"Set up our default properties"	myColor _ B3DColor4 r: 1.0 g: 1.0 b: 1.0 a: 1.0.	composite _ B3DMatrix4x4 identity.	scaleMatrix _ B3DMatrix4x4 identity.	"Set up our default reactions"	myReactions _ Dictionary new.	self respondWith: [:event | self onLeftMouseDown: event] to: leftMouseDown.	self respondWith: [:event | self onLeftMouseUp: event] to: leftMouseUp.	hidden _ false.	firstClass _ true.! !!WonderlandActor methodsFor: 'get property' stamp: 'jsp 4/19/1999 15:18'!getPositionInPicturePlane: aCamera	"Returns the actor's position in the picture plane of the given camera"	| d x y z pos |	pos _ self getPosition: aCamera.	d _ (aCamera getFrustum) near.	z _ (pos at: 3) abs.	(z = 0) ifTrue: 	[						x _ 0.						y _ 0.					]			ifFalse: [						x _ (d / z) * (pos at: 1).						y _ (d / z) * (pos at: 2).					].						^ x @ y.! !!WonderlandActor methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:26'!addResponse: aReaction to: evtType	"Add a new response to the given event type"	| newReaction currentReactions |	(myReactions includesKey: evtType)		ifFalse: [ myReactions at: evtType put: OrderedCollection new ].	currentReactions _ myReactions at: evtType.	newReaction _ WonderlandReaction new: aReaction.	currentReactions addLast: newReaction.	^ newReaction.! !!WonderlandActor methodsFor: 'event handling' stamp: 'jsp 4/19/1999 13:44'!getReactionsTo: eventType	"Return this actor's reactions to the given event type.  Because only first class actors react to mouse events, if this actor is a part pass this message up to its parent object."	(self isFirstClass)		ifTrue: [ (myReactions includesKey: eventType)					ifTrue: [^ myReactions at: eventType ]					ifFalse: [ ^ nil ].				]		ifFalse: [ ^ myParent getReactionsTo: eventType ].! !!WonderlandActor methodsFor: 'event handling' stamp: 'jsp 4/19/1999 16:19'!onLeftMouseDown: event	"The default response to left mouse down events"	(event getCameraMorph) setEventFocus: self.	(myWonderland getUndoStack) push: (UndoPOVChange for: self from: (self getPointOfView)).	self respondWith: [:anEvent | self onMouseMove: anEvent] to: mouseMove.! !!WonderlandActor methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:13'!onLeftMouseUp: event	"The default response to left mouse up events"	(event getCameraMorph) setEventFocus: nil.	self respondWith: nil to: mouseMove.! !!WonderlandActor methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:16'!onMouseMove: event	"The default response to mouse motion events"	| deltaX deltaY screenPos scenePos depth camera |	deltaX _ event getCursorDelta x.	deltaY _ event getCursorDelta y.	camera _ event getCamera.	(Sensor shiftPressed)		ifTrue: [ (Sensor controlKeyPressed)					ifTrue: [						"If both shift and control are pressed, tumble the bunny"							scenePos _ self getPosition.							self moveToRightNow: { 0. 0. 0 } asSeenBy: (myWonderland getScene)									undoable: false.							self turnRightNow: down numberOfTurns: (deltaY * 0.01)									asSeenBy: (myWonderland getScene) undoable: false.							self turnRightNow: left numberOfTurns: (deltaX * 0.01)									asSeenBy: (myWonderland getScene) undoable: false.							self moveToRightNow: scenePos undoable: false.							]					ifFalse: [						"If only shift is pressed move the actor up/down"						screenPos _ (self getPositionInPixels) + (0@deltaY).						scenePos _ camera transformScreenPointToScenePoint: screenPos												atDepthOf: self.						self moveToRightNow: (scenePos) asSeenBy: (myWonderland getScene)								undoable: false.							].				]		ifFalse: [ (Sensor controlKeyPressed)					ifTrue: [							scenePos _ self getPosition.							self moveToRightNow: { 0. 0. 0 } asSeenBy: (myWonderland getScene)									undoable: false.							self turnRightNow: left numberOfTurns: (deltaX * 0.01)									asSeenBy: (myWonderland getScene) undoable: false.							self moveToRightNow: scenePos undoable: false.							]					ifFalse: [						"If no modifier keys are held down, move the actor forward-back						and left-right"						screenPos _ (self getPositionInPixels) + (deltaX@0).						depth _ ((self getPosition: camera) at: 3) - (deltaY * 0.01).						scenePos _ camera transformScreenVectorToSceneVector:							(B3DVector3 x: (screenPos x) y: (screenPos y) z: depth).						self moveToRightNow: { scenePos at: 1. asIs. scenePos at: 3 }								asSeenBy: (myWonderland getScene) undoable: false.							].				].! !!WonderlandActor methodsFor: 'event handling' stamp: 'jsp 4/19/1999 13:29'!removeResponse: aReaction to: evtType	"Remove the response to the given event type"	(myReactions includesKey: evtType)		ifTrue: [ (myReactions at: evtType) remove: aReaction ].! !!WonderlandActor methodsFor: 'event handling' stamp: 'jsp 4/19/1999 14:30'!respondWith: aReaction to: evtType	"Set this actor's response to the given event type"	| reaction collection |	aReaction ifNil: [ myReactions removeKey: evtType ifAbsent: [].					  ^ nil ].	reaction _ WonderlandReaction new: aReaction.	collection _ OrderedCollection new.	collection addLast: reaction.	myReactions at: evtType put: collection.	^ reaction.! !!WonderlandCamera methodsFor: 'transforming' stamp: 'jsp 4/19/1999 15:30'!transformScreenVectorToSceneVector: aVector	"Converts a picture plane vector to a position in the 3D scene."	| x y d m frustum scale vector |	frustum _ self getFrustum.	d _ aVector at: 3.	scale _ d / (frustum near).	x _ ((aVector x) - (myMorph center x)) / ((myMorph width) / 2) * (frustum right) * scale.	y _ (((aVector y) - (myMorph center y)) / ((myMorph height) / 2)) * (frustum bottom) * scale.	m _ B3DMatrix4x4 identity.	m translation: (B3DVector3 x: x y: y z: d).	m _ (self getMatrixFromRoot) composeWith: m.	vector _ (m translation).	^ { vector at: 1. vector at: 2. vector at: 3 }.! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 14:01'!getEventFocus	"Return the actor that all events should go to. If not explicitly specified, choose the actor under the mouse cursor.  If no actor is under the mouse cursor, return nil"	eventFocus ifNotNil: [ ^ eventFocus ].	^ myCamera pickAt: (Sensor cursorPoint).! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 12:53'!handlesMouseDown: evt	"We want to handle mouse up and down events, so return true"	^ true.! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:42'!handlesMouseOver: evt	"We want to handle mouse enter/leave events, so return true."	^ true.! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:52'!keyStroke: evt	"Handle a keyboard event"	| newEvent clickedActor reactions |	clickedActor _ self getEventFocus.	clickedActor ifNotNil: [					newEvent _ WonderlandEvent new.					newEvent setCameraMorph: self.					newEvent setActor: clickedActor.					newEvent setCamera: myCamera.					newEvent setCursorPoint: (evt cursorPoint).					newEvent setKey: (evt keyCharacter).					reactions _ clickedActor getReactionsTo: keyPress.					reactions ifNotNil: 							[ reactions do: [:aReaction | aReaction reactTo: newEvent ]. ].						  ].	lastCursorPoint _ evt cursorPoint.! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:11'!mouseDown: evt	"When the user clicks in a camera window, determine which actor the user clicked on and have that actor respond to the event"	| newEvent clickedActor reactions |	lastCursorPoint _ evt cursorPoint.	clickedActor _ self getEventFocus.	clickedActor ifNotNil: [					newEvent _ WonderlandEvent new.					newEvent setCameraMorph: self.					newEvent setActor: clickedActor.					newEvent setCamera: myCamera.					newEvent setCursorPoint: (evt cursorPoint).					(evt redButtonPressed)						ifTrue: [ reactions _ clickedActor getReactionsTo: leftMouseDown.								  mouseUpButton _ leftMouseUp. ]						ifFalse: [ (evt yellowButtonPressed)							ifTrue: [ reactions _ clickedActor getReactionsTo: rightMouseDown.									  mouseUpButton _ rightMouseUp. ]							ifFalse: [ reactions _ nil ].								].					reactions ifNotNil: 							[ reactions do: [:aReaction | aReaction reactTo: newEvent ]. ].						  ].! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:41'!mouseEnter: evt	"When the mouse enters our window give it the keyboard focus"	evt hand newKeyboardFocus: self.! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:41'!mouseLeave: evt	"When the mouse leaves our window release the keyboard focus"	evt hand newKeyboardFocus: nil.! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 14:38'!mouseMove: evt	"When the user clicks in a camera window, determine which actor the user clicked on and have that actor respond to the event"	| newEvent clickedActor reactions |	clickedActor _ self getEventFocus.	clickedActor ifNotNil: [					newEvent _ WonderlandEvent new.					newEvent setCameraMorph: self.					newEvent setActor: clickedActor.					newEvent setCamera: myCamera.					newEvent setCursorPoint: (evt cursorPoint).					newEvent setCursorDelta: ((evt cursorPoint) - lastCursorPoint).					reactions _ clickedActor getReactionsTo: mouseMove.					reactions ifNotNil: 							[ reactions do: [:aReaction | aReaction reactTo: newEvent ]. ].						  ].	lastCursorPoint _ evt cursorPoint.! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 17:11'!mouseUp: evt	"When the user clicks in a camera window, determine which actor the user clicked on and have that actor respond to the event"	| newEvent clickedActor reactions |	clickedActor _ self getEventFocus.	clickedActor ifNotNil: [					newEvent _ WonderlandEvent new.					newEvent setCameraMorph: self.					newEvent setActor: clickedActor.					newEvent setCamera: myCamera.					newEvent setCursorPoint: (evt cursorPoint).					reactions _ clickedActor getReactionsTo: mouseUpButton ].					reactions ifNotNil: 							[ reactions do: [:aReaction | aReaction reactTo: newEvent ]. ].! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'jsp 4/19/1999 13:58'!setEventFocus: anActor	"Set the actor that all events should go to"	eventFocus _ anActor.! !!WonderlandScene methodsFor: 'event-handling' stamp: 'jsp 4/19/1999 13:43'!getReactionsTo: evtType	^ nil.! !WonderlandActor removeSelector: #respondTo:with:!WonderlandActor removeSelector: #addResponseTo:with:!WonderlandCamera removeSelector: #transformScreenVectirToSceneVector:!WonderlandCameraMorph removeSelector: #wouldAcceptKeyboardFocus!WonderlandCameraMorph removeSelector: #keyboardFocusChange:!WonderlandCameraMorph removeSelector: #hasFocus!