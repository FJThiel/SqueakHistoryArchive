'From Squeak3.8 of ''5 May 2005'' [latest update: #6665] on 28 September 2005 at 2:13:03 pm'!!Behavior methodsFor: 'compiling' stamp: 'ar 9/27/2005 19:23'!compile: code classified: category notifying: requestor trailer: bytes ifFail: failBlock	"Compile code without logging the source in the changes file"	| methodNode |	methodNode  := self compilerClass new				compile: code				in: self				classified: category 				notifying: requestor				ifFail: failBlock.	methodNode encoder requestor: requestor.	^ CompiledMethodWithNode generateMethodFromNode: methodNode trailer: bytes.! !!Behavior methodsFor: 'compiling' stamp: 'ar 9/27/2005 19:23'!compile: code notifying: requestor 	"Compile the argument, code, as source code in the context of the 	receiver and insEtall the result in the receiver's method dictionary. The 	second argument, requestor, is to be notified if an error occurs. The 	argument code is either a string or an object that converts to a string or 	a PositionableStream. This method also saves the source code."		| methodAndNode |	methodAndNode  := self		compile: code "a Text"		classified: nil		notifying: requestor		trailer: self defaultMethodTrailer		ifFail: [^nil].	methodAndNode method putSource: code fromParseNode: methodAndNode node inFile: 2			withPreamble: [:f | f cr; nextPut: $!!; nextChunkPut: 'Behavior method'; cr].	self addSelector: methodAndNode selector withMethod: methodAndNode method notifying: requestor.	^ methodAndNode selector! !!ClassCategoryReader methodsFor: 'fileIn/Out' stamp: 'ar 9/27/2005 19:25'!scanFrom: aStream 	"File in methods from the stream, aStream."	| methodText |	[methodText := aStream nextChunkText.	 methodText size > 0]		whileTrue:		[class compile: methodText classified: category			withStamp: changeStamp notifying: nil]! !!ClassDescription methodsFor: 'compiling' stamp: 'ar 9/27/2005 19:25'!compile: code classified: heading 	"Compile the argument, code, as source code in the context of the 	receiver and install the result in the receiver's method dictionary under 	the classification indicated by the second argument, heading. nil is to be 	notified if an error occurs. The argument code is either a string or an 	object that converts to a string or a PositionableStream on an object that 	converts to a string."	^self		compile: code		classified: heading		notifying: nil! !!ClassDescription methodsFor: 'compiling' stamp: 'ar 9/27/2005 19:23'!compile: text classified: category withStamp: changeStamp notifying: requestor logSource: logSource	| methodAndNode |	methodAndNode  := self compile: text asString classified: category notifying: requestor 							trailer: self defaultMethodTrailer ifFail: [^nil].	logSource ifTrue: [		self logMethodSource: text forMethodWithNode: methodAndNode 			inCategory: category withStamp: changeStamp notifying: requestor.	].	self addAndClassifySelector: methodAndNode selector withMethod: methodAndNode 		method inProtocol: category notifying: requestor.	self theNonMetaClass noteCompilationOf: methodAndNode selector meta: self isMeta.	^ methodAndNode selector! !!ClassDescription methodsFor: 'private' stamp: 'ar 9/27/2005 19:26'!logMethodSource: aText forMethodWithNode: aCompiledMethodWithNode inCategory: category withStamp: changeStamp notifying: requestor	| priorMethodOrNil newText |	priorMethodOrNil := self compiledMethodAt: aCompiledMethodWithNode selector ifAbsent: [].	newText := ((requestor == nil) not						and: [Preferences confirmFirstUseOfStyle])			ifTrue: [aText askIfAddStyle: priorMethodOrNil req: requestor]			ifFalse: [aText].	aCompiledMethodWithNode method putSource: newText		fromParseNode: aCompiledMethodWithNode node		class: self category: category withStamp: changeStamp 		inFile: 2 priorMethod: priorMethodOrNil.! !!DialectParser class methodsFor: 'as yet unclassified' stamp: 'ar 9/27/2005 19:27'!test    "DialectParser test""PrettyPrints the source for every method in the system in the alternative syntax, and then compiles that source and verifies that it generates identical code.  No changes are actually made to the system.  At the time of this writing, only two methods caused complaints (reported in Transcript and displayed in browse window after running):	BalloonEngineSimulation circleCosTable and	BalloonEngineSimulation circleSinTable.These are not errors, but merely a case of Floats embedded in literal arrays, and thus not specially checked for roundoff errors.Note that if an error or interruption occurs during execution of this method, the alternativeSyntax preference will be left on.NOTE:  Some methods may not compare properly until the system has been recompiled once.  Do this by executing...		Smalltalk recompileAllFrom: 'AARDVAARK'."	 | newCodeString methodNode oldMethod newMethod badOnes n heading |	Preferences enable: #printAlternateSyntax.	badOnes := OrderedCollection new.	Transcript clear.	Smalltalk forgetDoIts.'Formatting and recompiling all classes...'displayProgressAt: Sensor cursorPointfrom: 0 to: CompiledMethod instanceCountduring: [:bar | n := 0.	Smalltalk allClassesDo:  "{MethodNode} do:"  "<- to check one class"		[:nonMeta |  "Transcript cr; show: nonMeta name."		{nonMeta. nonMeta class} do:		[:cls |		cls selectors do:			[:selector | (n := n+1) \\ 100 = 0 ifTrue: [bar value: n].			newCodeString := (cls compilerClass new)				format: (cls sourceCodeAt: selector)				in: cls notifying: nil decorated: Preferences colorWhenPrettyPrinting.			heading := cls organization categoryOfElement: selector.			methodNode := cls compilerClass new						compile: newCodeString						in: cls classified: heading notifying: nil						ifFail: [].			newMethod := methodNode generate: #(0 0 0 0).			oldMethod := cls compiledMethodAt: selector.			"Transcript cr; show: cls name , ' ' , selector."			oldMethod = newMethod ifFalse:				[Transcript cr; show: '***' , cls name , ' ' , selector.				oldMethod size = newMethod size ifFalse:					[Transcript show: ' difft size'].				oldMethod header = newMethod header ifFalse:					[Transcript show: ' difft header'].				oldMethod literals = newMethod literals ifFalse:					[Transcript show: ' difft literals'].				Transcript endEntry.				badOnes add: cls name , ' ' , selector]]]].].	self systemNavigation browseMessageList: badOnes asSortedCollection name: 'Formatter Discrepancies'.	Preferences disable: #printAlternateSyntax.! !Behavior removeSelector: #basicCompile:notifying:trailer:ifFail:!