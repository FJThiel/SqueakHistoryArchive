'From Squeak2.6 of 11 October 1999 [latest update: #1612] on 17 November 1999 at 3:11:00 pm'!"Change Set:		prettyPrintColors-dp&swDate:			17 November 1999Author:			Scott Wallace & David Pennell Factors the text-attributes to be used for various syntactic parts when doing color-pretty-printing out from the various methods, and into a coherent structure.Uses a separate color for literals.Changes the former green default (for variables) to magenta, which is much more readable.Initial values for all the color choices are now specified in method Preferences class initializeSyntaxColorsAndStyles.   If you modify that method and then invoke it, you can set the colors to be anything you want.Eventually various interactive editors for the colors and styles can be written (David Pennell has one already which he will probably want to update and then circulate), but at least for now the color choices are centralized in one place for easy programmatic modification. "!Object subclass: #Preferences	instanceVariableNames: ''	classVariableNames: 'DesktopColor FlagDictionary HelpDictionary Parameters SyntaxColorsAndStyles '	poolDictionaries: ''	category: 'System-Support'!Object subclass: #SyntaxAttribute	instanceVariableNames: 'color emphasis attributeList '	classVariableNames: ''	poolDictionaries: ''	category: 'System-Compiler'!!ParseNode methodsFor: 'printing' stamp: 'sw 11/15/1999 22:23'!printCommentOn: aStream indent: indent 	| thisComment |	comment == nil ifTrue: [^ self].	aStream withAttributes: (Preferences syntaxAttributesFor: #comment)		do: [1 to: comment size do: 				[:index | 				index > 1 ifTrue: [aStream crtab: indent].				aStream nextPut: $".				thisComment _ comment at: index.				self printSingleComment: thisComment					on: aStream					indent: indent.				aStream nextPut: $"]].	comment _ nil! !!BlockNode methodsFor: 'printing' stamp: 'sw 11/17/1999 13:56'!printArgumentsOn: aStream indent: level	arguments size = 0		ifFalse: 			[arguments do: 				[:arg | 				aStream nextPut: $:.				aStream withAttributes: (Preferences syntaxAttributesFor: #blockArgument)					do: [aStream nextPutAll: arg key].				aStream space].			aStream nextPutAll: '| '.			"If >0 args and >1 statement, put all statements on separate lines"			statements size > 1 ifTrue: [aStream crtab: level]]! !!LiteralNode methodsFor: 'printing' stamp: 'sw 11/16/1999 16:42'!printOn: aStream indent: level	(key isMemberOf: Association)		ifTrue:			[key key isNil				ifTrue:					[aStream nextPutAll: '###';					 	nextPutAll: key value soleInstance name]				ifFalse:					[aStream nextPutAll: '##';						nextPutAll: key key]]		ifFalse:			[aStream withAttributes: (Preferences syntaxAttributesFor: #literal) do:  [key storeOn: aStream]]! !!MethodNode methodsFor: 'printing' stamp: 'sw 11/17/1999 13:57'!printOn: aStream 	| args |	precedence = 1		ifTrue: 			[aStream nextPutAll: self selector]		ifFalse: 			[args _ ReadStream on: arguments.			self selector keywords do: 				[:s | 				aStream nextPutAll: s; space.				aStream withAttributes: (Preferences syntaxAttributesFor: #methodArgument)					do: [aStream nextPutAll: args next key].				aStream space]].	comment == nil ifFalse: 			[aStream crtab: 1.			self printCommentOn: aStream indent: 1].	temporaries size > 0 ifTrue: 			[aStream crtab: 1.			aStream nextPutAll: '| '.			aStream withAttributes: (Preferences syntaxAttributesFor: #temporaryVariable)				do:					[temporaries do: 						[:temp | 						aStream nextPutAll: temp key.						aStream space]].			aStream nextPut: $|].	primitive > 0 ifTrue:			[(primitive between: 255 and: 519) ifFalse:  " Dont decompile <prim> for, eg, ^ self "				[aStream crtab: 1.				self printPrimitiveOn: aStream]].	aStream crtab: 1.	^ block printStatementsOn: aStream indent: 0! !!Preferences class methodsFor: 'pretty-printing' stamp: 'sw 11/17/1999 15:09'!initializeSyntaxColorsAndStyles	| specs |	"To change the color choices, you can simply edit this method, and then evaluate the following line:		Preferences initializeSyntaxColorsAndStyles	Later, people may wish to produce interactive editors for modifying the choices"	SyntaxColorsAndStyles _ IdentityDictionary new.	# (	(temporaryVariable		(magenta		bold))		(methodArgument		(magenta		italic))		(blockArgument			(magenta		italic))		(comment				(red				normal))		(variable				(blue			bold))		(literal					(brown			normal))		(keyword				(black	 		normal)))	do:		[:nameAndSpecs |			specs _ nameAndSpecs second.			SyntaxColorsAndStyles at:  nameAndSpecs first put: (SyntaxAttribute color: (Color perform: specs first) emphasis: specs last)]		! !!Preferences class methodsFor: 'pretty-printing' stamp: 'sw 11/16/1999 16:20'!syntaxAttributesFor: aPartSymbol	SyntaxColorsAndStyles ifNil: [self initializeSyntaxColorsAndStyles].	^ (SyntaxColorsAndStyles at: aPartSymbol ifAbsent: [^ #()]) attributeList! !!SelectorNode methodsFor: 'printing' stamp: 'sw 11/17/1999 15:03'!printOn: aStream indent: level 	"nb: this method is seemingly never reached"	aStream withAttributes: (Preferences syntaxAttributesFor: #keyword)		do: [aStream nextPutAll: key]! !!SyntaxAttribute commentStamp: 'sw 11/16/1999 11:52' prior: 0!Represents a color and possibly a style attribute to be applied to a syntactic element for pretty-printing.  The attributeList inst var is a cache.!!SyntaxAttribute methodsFor: 'accessing' stamp: 'sw 11/17/1999 15:04'!attributeList	"Answer a list of text attributes that characterize the receiver"	attributeList ifNil:		[attributeList _ OrderedCollection new: 2.		color ifNotNil: [attributeList add: (TextColor color: color)].		emphasis ifNotNil: [attributeList add: (TextEmphasis perform: emphasis)]].	^ attributeList! !!SyntaxAttribute methodsFor: 'accessing' stamp: 'djp 11/7/1999 14:52'!color	^ color! !!SyntaxAttribute methodsFor: 'accessing' stamp: 'sw 11/16/1999 16:21'!color: aTextColor	color _ aTextColor.	attributeList _ nil! !!SyntaxAttribute methodsFor: 'accessing' stamp: 'djp 11/7/1999 14:52'!emphasis	^ emphasis! !!SyntaxAttribute methodsFor: 'accessing' stamp: 'sw 11/16/1999 16:22'!emphasis: aTextEmphasis	emphasis _ aTextEmphasis.	attributeList _ nil! !!SyntaxAttribute class methodsFor: 'as yet unclassified' stamp: 'sw 11/16/1999 12:01'!color: aColor emphasis: anEmphasis	^ self new color: aColor; emphasis: anEmphasis; yourself! !!VariableNode methodsFor: 'printing' stamp: 'sw 11/16/1999 16:36'!printOn: aStream indent: level 	aStream withAttributes: (Preferences syntaxAttributesFor: #variable)		do: [aStream nextPutAll: name].! !!TempVariableNode methodsFor: 'printing' stamp: 'sw 11/16/1999 16:37'!printOn: aStream indent: level 	aStream withAttributes: (Preferences syntaxAttributesFor: #temporaryVariable)			do: [aStream nextPutAll: name]! !!WriteStream methodsFor: 'private' stamp: 'djp 11/6/1999 23:15'!withAttributes: attributes do: strmBlock 	"No-op here is overriden in TextStream for font emphasis"	^ strmBlock value! !!TextStream methodsFor: 'as yet unclassified' stamp: 'djp 11/6/1999 20:30'!withAttributes: attributes do: streamBlock 	| pos1 val |	pos1 _ self position.	val _ streamBlock value.	attributes do: [:attribute |		collection			addAttribute: attribute			from: pos1 + 1			to: self position].	^ val! !