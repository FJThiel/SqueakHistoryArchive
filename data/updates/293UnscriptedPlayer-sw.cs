'From Squeak 2.2beta of Sept 16, 1998 on 21 September 1998 at 8:03:34 pm'!"Change Set:		UnscriptedPlayer-swDate:			21 September 1998Author:			Scott WallaceNo longer allocate a unique class for a Player, unless/until it becomes necessary.  Instead, an UnscriptedPlayer is used, and only at those junctures at which a unique subclass of Player is necessary is one created (if not already done, of course)"!Player subclass: #UnscriptedPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!!Morph methodsFor: 'player' stamp: 'sw 9/15/1998 13:33'!newPlayerInstance	^ UnscriptedPlayer newUserInstance! !!HandMorph methodsFor: 'from EToyHand' stamp: 'sw 9/20/1998 22:28'!makeNewDrawingInBounds: rect pasteUpMorph: aPasteUpMorph	| w newSketch newPlayer sketchEditor aPaintBox aPalette |	aPalette _ aPasteUpMorph standardPalette.	aPalette ifNotNil: [aPalette showNoPalette; layoutChanged].	w _ aPasteUpMorph world.	w stopRunningAll; abandonAllHalos.	newSketch _ self drawingClass new player: (newPlayer _ UnscriptedPlayer newUserInstance).	newPlayer costume: newSketch.	newSketch form: (Form extent: rect extent depth: w assuredCanvas depth).	newSketch bounds: rect.	sketchEditor _ SketchEditorMorph new.	w addMorphFront: sketchEditor.	sketchEditor initializeFor: newSketch inBounds: rect pasteUpMorph: aPasteUpMorph.	sketchEditor		afterNewPicDo: [:aForm :aRect |			newSketch form: aForm.			newSketch position: aRect origin.			newSketch rotationStyle: sketchEditor rotationStyle.			newSketch setupAngle: sketchEditor forwardDirection.			newSketch privateOwner: aPasteUpMorph.  "temp for halo access"			newPlayer setHeading: sketchEditor forwardDirection.			"Includes  newSketch rotationDegrees: sketchEditor forwardDirection."			aPasteUpMorph addMorphFront: newPlayer costume.			w startSteppingSubmorphsOf: newSketch.			self presenter drawingJustCompleted: newSketch]		 ifNoBits:			[(aPaintBox _ self world paintBox) ifNotNil:				[aPaintBox delete].			aPalette ifNotNil: [aPalette showNoPalette].]! !!PartsViewer methodsFor: 'private' stamp: 'sw 9/15/1998 13:28'!newEmptyScript	| aMorph |	self scriptedPlayer assureUniClass.	aMorph _ ImageMorph new image: (ScriptingSystem formAtKey: 'newScript').	aMorph setProperty: #newAnonymousScript toValue: true.	aMorph setProperty: #player toValue: self scriptedPlayer.	self primaryHand attachMorph: aMorph! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 9/15/1998 13:40'!morphToDropFrom: aMorph	| itsSelector aScriptor adjustment anEditor actualObject aUserScript ownersChoice aNail |	owner ifNotNil:		[(ownersChoice _ owner substituteForMorph: aMorph beingDroppedOn: self)			ifNotNil:	[^ ownersChoice]].	self alwaysShowThumbnail ifTrue:		[aNail _ aMorph thumbnailOfHeight: self heightForThumbnails.		aNail == aMorph ifFalse:			[aNail position: (self primaryHand position - ((self primaryHand targetOffset - self primaryHand formerPosition) * (aNail extent / aMorph extent)) rounded)].		^ aNail].	self expandPhrasesToScripts ifFalse: [^ aMorph].	(aMorph hasProperty: #newAnonymousScript) ifTrue: [^ self emptyAnonymousScriptorFrom: aMorph].	(aMorph isKindOf: PhraseTileMorph) ifFalse: [^ aMorph].	(actualObject _ aMorph actualObject) ifNil: [^ aMorph].	actualObject assureUniClass.	aScriptor _ (itsSelector _ aMorph userScriptSelector) size > 0		ifTrue:			[actualObject isFlagshipForClass				ifFalse:					["We can set the status for our instantiation of this script, but cannot allow script editing"					anEditor _ actualObject scriptEvaluatorFor: itsSelector phrase: aMorph.					adjustment _ 50 @ 40.					anEditor]				ifTrue:					["old note: ambiguous case: if there's a script editor on the world, drop down a button, else drop down the script editor"					aUserScript _ actualObject class userScriptForPlayer: actualObject selector: itsSelector.					aUserScript isTextuallyCoded						ifTrue: [^ self scriptorForTextualScript: itsSelector ofPlayer: actualObject].					((anEditor _ actualObject scriptEditorFor: itsSelector) isInWorld and:							[anEditor owner == self])						ifFalse:							[adjustment _ 50 @ 30.							anEditor]						ifTrue:							[adjustment _ 60 @ 20.							actualObject anonymousScriptEditorFor: aMorph]]]		ifFalse:   "It's a system-defined selector; construct an anonymous scriptor around it"			[adjustment _ 60 @ 20.			actualObject anonymousScriptEditorFor: aMorph].	aScriptor position: (self primaryHand position - adjustment).	^ aScriptor! !!PasteUpMorph methodsFor: 'scripting' stamp: 'sw 9/15/1998 13:37'!emptyAnonymousScriptorFrom: aPlaceHoldingMorph	| aScriptor aPlayer |	aPlayer _ aPlaceHoldingMorph valueOfProperty: #player.	aPlayer assureUniClass.	aScriptor _  aPlayer anonymousScriptEditorFor: nil.	aScriptor position: (self primaryHand position - (10 @ 10)).	^ aScriptor! !!Player methodsFor: 'clone' stamp: 'sw 9/15/1998 13:12'!initializeCostumesFrom: aPlayer	"Used to copy costume info over from an UnscriptedPlayer to a Player UniClass"	costume _ aPlayer costume.	costumes _ aPlayer costumes! !!Player methodsFor: 'costume' stamp: 'sw 9/15/1998 13:12'!costumes	^ costumes! !!Player methodsFor: 'slots-user' stamp: 'sw 9/15/1998 14:01'!addInstanceVariable	| itsName initialValue typeChosen suggestedNames usedNames initialAnswer setterSelector |	suggestedNames _ #('cargo' 'speed' 'weight' 'mzee' 'friml' 'verp' 'znak').	usedNames _ self class instVarNames.	initialAnswer _ suggestedNames detect: [:aName |  (usedNames includes: aName) not] ifNone:		[Utilities keyLike: 'var1'  satisfying: [:aKey | (usedNames includes: aKey) not]].	itsName _ FillInTheBlank request: 'name for new inst var: ' initialAnswer: initialAnswer. 	itsName size == 0 ifTrue: [^ self].	(Utilities isLegalInstVarName: itsName) ifFalse: [^ self inform: 'sorry, illegal name, try again.'].	itsName _ itsName asSymbol.	(self class allInstVarNames includes: itsName) ifTrue: [^ self inform: 'that name is already used.'].		self assureUniClass.	typeChosen _ self initialTypeForSlotNamed: itsName.	self slotInfo at: itsName put: typeChosen.	initialValue _ self initialValueForSlotOfType: typeChosen.	self addInstanceVarNamed: itsName withValue: initialValue.	self compileAccessorsFor: itsName.	setterSelector _ Utilities setterSelectorFor: itsName.	(self class allInstances copyWithout: self) do:		[:anInstance | anInstance perform: setterSelector with: initialValue].	self updateAllViewers! !!Player methodsFor: 'misc' stamp: 'sw 9/15/1998 13:19'!assureUniClass	"If I am not currently a member of a UniClass, become one now"! !!Player methodsFor: 'misc' stamp: 'sw 9/15/1998 14:39'!revertToUnscriptedPlayerIfAppropriate	| anInstance |	((self class selectors size > 0) or: [self class instVarNames size > 0]) ifTrue: [^ self].	anInstance _ UnscriptedPlayer new.	anInstance initializeCostumesFrom: self.	self become: anInstance! !!Player class methodsFor: 'housekeeping' stamp: 'sw 9/15/1998 16:28'!abandonUnnecessaryUniclasses	"Player abandonUnnecessaryUniclasses"	| oldCount oldFree newFree newCount report |	oldCount _ self subclasses size - 1.	oldFree _ Smalltalk garbageCollect.	self allSubInstances do:		[:aPlayer | aPlayer revertToUnscriptedPlayerIfAppropriate].	aPlayer _ nil.  "encourage last one to get garbage-collected"	ScriptingSystem spaceReclaimed.	newFree _ Smalltalk garbageCollect.	newCount _ self subclasses size - 1.	report _ 'Before: ', oldCount printString, ' uniclasses, ', oldFree printString, ' bytes freeAfter:  ', newCount printString, ' uniclasses, ', newFree printString, ' bytes free'.	Transcript cr; show: 'abandonUnnecessaryUniclasses:'; cr; show: report.	^ report	! !!Player class methodsFor: 'housekeeping' stamp: 'sw 9/15/1998 14:33'!playersWithUnnecessarySubclasses	"Return a list of all players whose scripts dictionaries contain entries with nil selectors"	"Player playersWithUnnecessarySubclasses size"	^ self class allSubInstances select:		[:p | p isSystemDefined not and: [p scripts size == 0 and: [p instVarNames size == 0]]] ! !!UnscriptedPlayer commentStamp: '<historical>' prior: 0!My instances are Player objects that have not been scripted, and which hence do not require a unique scripts dictionary, etc.  As soon as the needed, I am transformed automatically into a unique subclass of Player.!!UnscriptedPlayer methodsFor: 'all' stamp: 'sw 9/15/1998 13:21'!assureUniClass	| anInstance |	anInstance _ Player instanceOfUniqueClass.	anInstance initializeCostumesFrom: self.	self become: anInstance.	^ anInstance! !!UnscriptedPlayer methodsFor: 'all' stamp: 'sw 8/10/1998 16:23'!belongsToUniClass	^ false! !!UnscriptedPlayer methodsFor: 'all' stamp: 'sw 9/15/1998 13:13'!copyUniClass	self error: 'oops, copyUniClass sent to an UnscriptedPlayer'! !!UnscriptedPlayer class methodsFor: 'all' stamp: 'sw 8/10/1998 16:23'!acceptsLoggingOfCompilation	^ true! !!UnscriptedPlayer class methodsFor: 'all' stamp: 'sw 8/17/1998 07:33'!isSystemDefined	^ true! !!UnscriptedPlayer class methodsFor: 'all' stamp: 'sw 9/15/1998 13:33'!newUserInstance	"Answer an instance of an appropriate class to serve as a user object in the containment hierarchy"	^ self new! !!UnscriptedPlayer class methodsFor: 'all' stamp: 'sw 8/17/1998 07:34'!officialClass	^ self! !!UnscriptedPlayer class methodsFor: 'all' stamp: 'sw 9/15/1998 13:49'!wantsChangeSetLogging	^ true! !Player removeSelector: #justDuplicatedFrom:!Player removeSelector: #duplicatedPlayerForCostume:!"Postscript:"Player abandonUnnecessaryUniclasses.!