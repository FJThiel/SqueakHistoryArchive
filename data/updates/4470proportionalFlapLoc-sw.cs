'From Squeak3.2alpha of 2 October 2001 [latest update: #4467] on 1 November 2001 at 9:36:34 pm'!"Change Set:		proportionalFlapLoc-swDate:			3 November 2001Author:			Scott WallaceWhen the Squeak-window size changes, flaps are now redeployed proportionally.  Thus, for example, if you shrink the Squeak window down and then expand it back out -- even to full screen -- the locations of flap tabs when you get big again should be as before.  This update finally remedies a deficiency that dates from the dawn of flaps."!ReferenceMorph subclass: #FlapTab	instanceVariableNames: 'flapShowing edgeToAdhereTo slidesOtherObjects popOutOnDragOver popOutOnMouseOver inboard dragged lastReferentThickness edgeFraction '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Flaps'!!DisplayScreen class methodsFor: 'display box access' stamp: 'sw 10/31/2001 07:18'!checkForNewScreenSize	"Check whether the screen size has changed and if so take appropriate actions"	Display extent = DisplayScreen actualScreenSize ifTrue: [^ self].	DisplayScreen startUp.	Smalltalk isMorphic		ifTrue:			[World restoreMorphicDisplay.			World repositionFlapsAfterScreenSizeChange]		ifFalse:			[ScheduledControllers restore; searchForActiveController]! !!Flaps class methodsFor: 'menu support' stamp: 'sw 10/31/2001 21:25'!enableGlobalFlaps	"Start using global flaps, given that they were not present."	Cursor wait showWhile:		[SharedFlapsAllowed _ true.		self globalFlapTabs. "This will create them"		Smalltalk isMorphic ifTrue:			[ActiveWorld addGlobalFlaps.			FlapTab allInstancesDo:				[:aTab | aTab computeEdgeFraction].			ActiveWorld reformulateUpdatingMenus]]! !!Flaps class methodsFor: 'new flap' stamp: 'sw 10/31/2001 16:44'!addLocalFlap	"Menu command -- let the user add a new project-local flap.  Once the new flap is born, the user can tell it to become a shared flap.  Obtain an initial name and edge for the flap, launch the flap, and also launch a menu governing the flap, so that the user can get started right away with customizing it."	| aMenu reply aFlapTab aWorld edge |	aMenu _ MVCMenuMorph entitled: 'Where should the new flap cling?'.	aMenu defaultTarget: aMenu.	#(left right top bottom) do:		[:sym | aMenu add: sym selector: #selectMVCItem: argument: sym].	edge _ aMenu invokeAt: self currentHand position in: self currentWorld.	edge ifNotNil:		[reply _ FillInTheBlank request: 'Wording for this flap: ' initialAnswer: 'Flap'.		reply isEmptyOrNil ifFalse:			[aFlapTab _ self newFlapTitled: reply onEdge: edge.			(aWorld _ self currentWorld) addMorphFront: aFlapTab.			aFlapTab adaptToWorld: aWorld.			aMenu _ aFlapTab buildHandleMenu: ActiveHand.			aFlapTab addTitleForHaloMenu: aMenu.			aFlapTab computeEdgeFraction.			aMenu popUpEvent: ActiveEvent in: ActiveWorld]]	! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:17'!newLoneSuppliesFlap	"Answer a fully-instantiated flap named 'Supplies' to be placed at the bottom of the screen, for use when it is the only flap shown upon web launch"	|  aFlapTab aStrip leftEdge |  "Flaps setUpSuppliesFlapOnly"	aStrip _ PartsBin newPartsBinWithOrientation: #leftToRight from:	 #(	(TrashCanMorph			new						'Trash'				'A tool for discarding objects')		(ScriptingSystem 		scriptControlButtons 			'Status'				'Buttons to run, stop, or single-step scripts')	(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you control all the running scripts in your world')	(PaintInvokingMorph	new						'Paint'				'Drop this into an area to start making a fresh painting there')	(RectangleMorph 		authoringPrototype		'Rectangle' 		'A rectangle'	)	(RectangleMorph		roundRectPrototype		'RoundRect'		'A rectangle with rounded corners')	(EllipseMorph			authoringPrototype		'Ellipse'			'An ellipse or circle')	(StarMorph				authoringPrototype		'Star'			'A star')	(CurveMorph			authoringPrototype		'Curve'			'A curve')	(PolygonMorph			authoringPrototype		'Polygon'		'A straight-sided figure with any number of sides')	(TextMorph				authoringPrototype		'Text'			'Text that you can edit into anything you desire.')	(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')	(JoystickMorph			authoringPrototype		'Joystick'		'A joystick-like control')	(ScriptingSystem		prototypicalHolder 		'Holder'			'A place for storing alternative pictures in an animation, ec.')	(ScriptableButton		authoringPrototype		'Button'			'A Scriptable button')	(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')	(BookMorph				authoringPrototype		'Book'			'A multi-paged structure')	(TabbedPalette			authoringPrototype		'Tabs'			'A structure with tabs')	(RecordingControlsMorph authoringPrototype			'Sound'				'A device for making sound recordings.')	(MagnifierMorph		newRound					'Magnifier'			'A magnifying glass')	(ImageMorph			authoringPrototype		'Picture'		'A non-editable picture of something')	(ClockMorph				authoringPrototype		'Clock'			'A simple digital clock')	(BookMorph				previousPageButton 		'Previous'		'A button that takes you to the previous page')	(BookMorph				nextPageButton			'Next'			'A button that takes you to the next page')		).	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Supplies'.	aFlapTab assumeString: 'Supplies' font: Preferences standardFlapFont orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: self currentWorld width @ 78.	leftEdge _ ((Display width - (16  + aFlapTab width)) + 556) // 2.	aFlapTab position: (leftEdge @ (self currentWorld height - aFlapTab height)).	aStrip beFlap: true.	aStrip color: Color red muchLighter.	aStrip autoLineLayout: true.		^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:17'!newObjectsFlap	"Answer a fully-instantiated flap named 'Objects' to be placed at the top of the screen.  Not currently called; this worked once, but probably not at the moment."	|  aFlapTab anObjectsTool |	anObjectsTool _ ObjectsTool new.	anObjectsTool initializeForFlap.	anObjectsTool showCategories.	aFlapTab _ FlapTab new referent: anObjectsTool beSticky.	aFlapTab setNameTo: 'Objects'.	aFlapTab assumeString: 'Objects' font: Preferences standardFlapFont orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #top; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	anObjectsTool extent: self currentWorld width @ 200.	aFlapTab position: ((Display width - (aFlapTab width + 22)) @ 0).	anObjectsTool beFlap: true.	anObjectsTool color: Color red muchLighter.	anObjectsTool clipSubmorphs: true.		^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:18'!newScriptingFlap	"Add a flap with scriptors' tools in it"	| aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #topToBottom from: self quadsDeiningScriptingFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Scripting'.	aFlapTab assumeString: 'Scripting' font: Preferences standardFlapFont orientation: #vertical color: (Color r: 0.548 g: 1.0 b: 0.935).  "Color fromUser"	aFlapTab edgeToAdhereTo: #left; inboard: false.  	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aFlapTab position: (0 @ 80).	aStrip beFlap: true.	aStrip extent: 120 @ self currentWorld height.	aStrip color: (aFlapTab color lighter lighter alpha: 0.85).	^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:18'!newSqueakFlap	"Answer a new default 'Squeak' flap for the left edge of the screen"	| aFlap aFlapTab aButton aClock buttonColor anOffset bb |	aFlap _ PasteUpMorph newSticky borderWidth: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab setNameTo: 'Squeak'.	aFlapTab assumeString: 'Squeak' font: Preferences standardFlapFont orientation: #vertical color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #left; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false..	aFlapTab position: (0 @ ((Display height - aFlapTab height) // 2)).	aFlap cellInset: 14@14.	aFlap beFlap: true.	aFlap color: (Color brown muchLighter lighter "alpha: 0.3").	aFlap extent: 150 @ self currentWorld height.	aFlap layoutPolicy: TableLayout new.	aFlap wrapCentering: #topLeft.	aFlap layoutInset: 2.	aFlap listDirection: #topToBottom.	aFlap wrapDirection: #leftToRight.	self addProjectNavigationButtonsTo: aFlap.	anOffset _ 16.	buttonColor _ Color green muchLighter.	bb _ SimpleButtonMorph new target: Smalltalk.	bb color: buttonColor.	aButton _ bb copy.	aButton actionSelector: #saveSession.	aButton setBalloonText: 'Make a complete snapshot of the current state of the image onto disk.'.	aButton label: 'snapshot'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #fileOutChanges.	aButton label: 'file out changes'.	aButton setBalloonText: 'File out the current change set to disk.'.	aFlap addMorph: aButton.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #openRecentSubmissionsBrowser.	aButton setBalloonText: 'Open a message-list browser showing the most-recently-submitted methods.'.	aButton label: 'recent submissions'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aClock _ ClockMorph newSticky.	aClock color: Color red.	aClock showSeconds: false.	aClock font: (TextStyle default fontAt: 3).	aClock step.	aClock setBalloonText: 'The time of day.  If you prefer to see seconds, check out my menu.'.	aFlap addCenteredAtBottom: aClock offset: anOffset.	aButton _ bb copy target: Preferences.	aButton actionSelector: #openPreferencesInspector.	aButton setBalloonText: 'Open a window allowing me to view and change various Preferences.'.	aButton label: 'preferences...'.	aButton color: Color cyan muchLighter.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #updateFromServer.	aButton label: 'load code updates'.	aButton color: Color cyan muchLighter.	aButton setBalloonText: 'Check the Squeak server for any new code updates, and load any that are found.'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	self addSystemStatusLinesTo: aFlap.	aButton _ TrashCanMorph newSticky.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton startStepping.	^ aFlapTab"Flaps reinstateDefaultFlaps"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:18'!newStackToolsFlap	"Add a flap with stack tools in it"	| aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #leftToRight from:	 self quadsDefiningStackToolsFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab assumeString: 'Stack Tools' font: Preferences standardFlapFont orientation: #horizontal color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: self currentWorld width @ 78.	aFlapTab position: ((Display width - (aFlapTab width + 22)) @ (self currentWorld height - aFlapTab height)).	aStrip beFlap: true.	aStrip autoLineLayout: true.	aFlapTab position: ((Display width - (aFlapTab width + 226)) @ (self currentWorld height - aFlapTab height)).	aStrip color: (Color red muchLighter "alpha: 0.2").	aStrip extent: self currentWorld width @ 70.	^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:18'!newSuppliesFlap	"Answer a fully-instantiated flap named 'Supplies' to be placed at the bottom of the screen"	|  aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #leftToRight from:	 self quadsDefiningSuppliesFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Supplies'.	aFlapTab assumeString: 'Supplies' font: Preferences standardFlapFont orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: self currentWorld width @ 78.	aFlapTab position: ((Display width - (aFlapTab width + 22)) @ (self currentWorld height - aFlapTab height)).	aStrip beFlap: true.	aStrip color: Color red muchLighter.	aStrip autoLineLayout: true.		^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:19'!newToolsFlap	"Answer a newly-created flap which adheres to the right edge of the screen and which holds prototypes of standard tools."	|  aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #topToBottom from: self quadsDefiningToolsFlap. 	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Tools'.	aFlapTab assumeString: 'Tools' font: Preferences standardFlapFont orientation: #vertical color: Color orange lighter.	aFlapTab edgeToAdhereTo: #right; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: (90 @ self currentWorld height).	aFlapTab position: (self currentWorld width - aFlapTab width) @ ((Display height - aFlapTab height) // 2).	aStrip beFlap: true.	aStrip color: (Color orange muchLighter alpha: 0.8).		^ aFlapTab	"Flaps replaceToolsFlap"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 10/31/2001 21:19'!newWidgetsFlap	"Answer a newly-created flap which adheres to the bottom edge of the screen and which holds prototypes of standard widgets. "	|  aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #leftToRight from:	 self quadsDefiningWidgetsFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Widgets'.	aFlapTab assumeString: 'Widgets' font: Preferences standardFlapFont orientation: #horizontal color: Color blue lighter lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: self currentWorld width @ 78.	aFlapTab position: ((Display width - (aFlapTab width + 122)) @ (self currentWorld height - aFlapTab height)).	aStrip beFlap: true.	aStrip color: (Color blue muchLighter alpha: 0.8).	aStrip autoLineLayout: true.		^ aFlapTab	"Flaps replaceWidgetsFlap"! !!Morph methodsFor: 'accessing' stamp: 'sw 10/31/2001 21:06'!beFlap: aBool	"Mark the receiver with the #flap property, or unmark it"	aBool		ifTrue:			[self setProperty: #flap toValue: true.			self hResizing: #rigid.			self vResizing: #rigid]		ifFalse:			[self removeProperty: #flap]! !!FlapTab methodsFor: 'edge' stamp: 'sw 10/31/2001 20:51'!applyEdgeFractionWithin: aBoundsRectangle	"Make the receiver reflect remembered edgeFraction"	| newPosition |	edgeFraction ifNil: [^ self].	self isCurrentlySolid ifTrue: [^ self].	newPosition _ self		ifVertical:			[self left @  (self edgeFraction * (aBoundsRectangle height - self height))]		ifHorizontal:			[(self edgeFraction * (aBoundsRectangle width - self width) @ self top)].	self position: (aBoundsRectangle origin + newPosition)	! !!FlapTab methodsFor: 'edge' stamp: 'sw 10/31/2001 15:01'!computeEdgeFraction	"Compute and remember the edge fraction"	| aBox aFraction |	self isCurrentlySolid ifTrue: [^ edgeFraction ifNil: [self edgeFraction: 0.5]].	aBox _ ((owner ifNil: [ActiveWorld]) bounds) insetBy: (self extent // 2).	aFraction _ self		ifVertical: 			[(self center y - aBox top) / (aBox height max: 1)]		ifHorizontal:			[(self center x - aBox left) / (aBox width max: 1)].	^ self edgeFraction: aFraction! !!FlapTab methodsFor: 'edge' stamp: 'sw 10/31/2001 06:56'!edgeFraction	^ edgeFraction ifNil: [self computeEdgeFraction]! !!FlapTab methodsFor: 'edge' stamp: 'sw 10/31/2001 08:38'!edgeFraction: aNumber	"Set my edgeFraction to the given number, without side effects"	edgeFraction _ aNumber asFloat! !!FlapTab methodsFor: 'edge' stamp: 'sw 10/31/2001 15:58'!ifVertical: block1 ifHorizontal: block2	"Evaluate and return the value of either the first or the second block, depending whether I am vertically or horizontally oriented"	^ self orientation == #vertical		ifTrue:			[block1 value]		ifFalse:			[block2 value]	! !!FlapTab methodsFor: 'positioning' stamp: 'sw 10/31/2001 15:46'!mouseMove: evt	| aPosition newReferentThickness adjustedPosition thick |	dragged ifFalse: [(thick _ self referentThickness) > 0			ifTrue: [lastReferentThickness _ thick]].	((self containsPoint: (aPosition _ evt cursorPoint)) and: [dragged not])		ifFalse:			[flapShowing ifFalse: [self showFlap].			adjustedPosition _ aPosition - evt hand targetOffset.			(edgeToAdhereTo == #bottom)				ifTrue:					[newReferentThickness _ inboard						ifTrue:							[self world height - adjustedPosition y]						ifFalse:							[self world height - adjustedPosition y - self height]].			(edgeToAdhereTo == #left)					ifTrue:						[newReferentThickness _							inboard								ifTrue:									[adjustedPosition x + self width]								ifFalse:									[adjustedPosition x]].			(edgeToAdhereTo == #right)					ifTrue:						[newReferentThickness _							inboard								ifTrue:									[self world width - adjustedPosition x]								ifFalse:									[self world width - adjustedPosition x - self width]].			(edgeToAdhereTo == #top)					ifTrue:						[newReferentThickness _							inboard								ifTrue:									[adjustedPosition y + self height]								ifFalse:									[adjustedPosition y]].					self isCurrentlySolid ifFalse:				[(#(left right) includes: edgeToAdhereTo)					ifFalse:						[self left: adjustedPosition x]					ifTrue:						[self top: adjustedPosition y]].			self applyThickness: newReferentThickness.			dragged _ true.			self fitOnScreen.			self computeEdgeFraction]! !!FlapTab methodsFor: 'positioning' stamp: 'sw 10/31/2001 16:46'!mouseUp: evt	"The mouse came back up, presumably after having dragged the tab.  Caution: if not operating full-screen, this notification can easily be *missed*, which is why the edge-fraction-computation is also being done on mouseMove."	super mouseUp: evt.	(self referentThickness <= 0 or:		[(referent isInWorld and: [(referent boundsInWorld intersects: referent owner boundsInWorld) not])]) ifTrue:			[self hideFlap.			flapShowing _ false].	self fitOnScreen.	dragged ifTrue:		[self computeEdgeFraction.		dragged _ false]! !!PasteUpMorph methodsFor: 'world state' stamp: 'sw 10/31/2001 08:01'!repositionFlapsAfterScreenSizeChange	"Reposition flaps after screen size change"	(Flaps globalFlapTabs, ActiveWorld localFlapTabs) do:		[:aFlapTab |			aFlapTab applyEdgeFractionWithin: self bounds]! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 10/31/2001 16:37'!fullScreenOff	Smalltalk fullScreenMode: (LastScreenModeSelected _ false).	DisplayScreen checkForNewScreenSize.	self restoreDisplay.! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 10/31/2001 16:39'!fullScreenOn	Smalltalk fullScreenMode: (LastScreenModeSelected _ true).	DisplayScreen checkForNewScreenSize.	self restoreDisplay.! !"Postscript:"FlapTab allInstancesDo:	[:t |		t computeEdgeFraction.		t referent ifNotNil:			[t referent hResizing: #rigid; vResizing: #rigid]].!