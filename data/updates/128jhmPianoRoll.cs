'From Squeak 2.0 of May 22, 1998 on 28 June 1998 at 7:10:33 pm'!"Change Set:		jhmPianoRollDate:			28 June 1998Author:			John MaloneyA simple piano-roll view of a score that updates itself incrementallyas the score plays. Try the 'Piano Roll' button the the ScorePlayerMorph."!RectangleMorph subclass: #PianoRollScoreMorph	instanceVariableNames: 'scorePlayer score colorForTrack lowestNote leftEdgeTime timeScale indexInTrack lastUpdateTick '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Demo'!!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 08:50'!addNotes	| newNotes rightEdge topEdge track trackColor i done n nLeft nTop nRight |	newNotes _ OrderedCollection new: 500.	rightEdge _ self right - borderWidth.	topEdge _ self top + borderWidth + 1.	1 to: score tracks size do: [:trackIndex |		track _ score tracks at: trackIndex.		trackColor _ colorForTrack at: trackIndex.		i _ indexInTrack at: trackIndex.		done _ i > track size.		[done | (i > track size)] whileFalse: [			n _ track at: i.			(n isNoteEvent and: [n midiKey >= lowestNote]) ifTrue: [				nLeft _ self xForTime: n time.				nLeft > rightEdge					ifTrue: [done _ true]					ifFalse: [						nTop _ (self yForMidiKey: n midiKey) - 1.						nTop > topEdge ifTrue: [							nRight _ nLeft + (n duration * timeScale) truncated.							newNotes add:								(Morph									newBounds: (nLeft@nTop corner: nRight@(nTop + 3))									color: trackColor)]]].			i _ i + 1]].	self changed.	self removeAllMorphs.	self addAllMorphs: newNotes.! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 09:20'!drawOn: aCanvas	| innerBox center |	super drawOn: aCanvas.	self drawStaffOn: aCanvas.	innerBox _ self innerBounds.	center _ innerBox center x.	aCanvas		fillRectangle: (center@innerBox top corner: (center + 1)@innerBox bottom)		color: Color red.! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 08:01'!drawStaffOn: aCanvas	| blackKeyColor l r topEdge y |	blackKeyColor _ Color gray: 0.7.	l _ self left + borderWidth.	r _ self right - borderWidth.	topEdge _ self top + borderWidth + 3.	lowestNote to: 127 do: [:k |		y _ self yForMidiKey: k.		y <= topEdge ifTrue: [^ self].  "over the top!!"		(self isBlackKey: k) ifTrue: [			aCanvas				fillRectangle: (l@y corner: r@(y + 1))				color: blackKeyColor]].! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 5/30/1998 20:58'!fullBounds	"Overridden to clip submorph hit detection to my bounds."	^ bounds! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 08:03'!fullDrawOn: aCanvas	"Overridden to clip submorph drawing to my bounds."	| clippingCanvas |	(aCanvas isVisible: self fullBounds) ifFalse: [^ self].	self drawOn: aCanvas.	submorphs isEmpty ifFalse: [		clippingCanvas _ aCanvas copyClipRect: self innerBounds.		submorphs reverseDo: [:m | m fullDrawOn: clippingCanvas]].  "draw back-to-front"! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 08:06'!goToTime: scoreTime	| track trackSize index |	scoreTime < leftEdgeTime		ifTrue: [indexInTrack _ Array new: score tracks size withAll: 1].	leftEdgeTime _ scoreTime.	1 to: score tracks size do: [:trackIndex |		track _ score tracks at: trackIndex.		index _ indexInTrack at: trackIndex.		trackSize _ track size.		[(index < trackSize) and:		 [(track at: index) time < leftEdgeTime]]			whileTrue: [index _ index + 1].		indexInTrack at: trackIndex put: index].! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/28/1998 18:59'!initialize	super initialize.	borderWidth _ 1.	color _ Color white.	self extent: 400@300.! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 07:52'!isBlackKey: midiKey	"Answer true if the given MIDI key corresponds to a black key on the piano keyboard."	| note |	note _ midiKey \\ 12.	note = 1 ifTrue: [^ true].	note = 3 ifTrue: [^ true].	note = 6 ifTrue: [^ true].	note = 8 ifTrue: [^ true].	note = 10 ifTrue: [^ true].	^ false! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/28/1998 19:03'!on: aScorePlayer	scorePlayer _ aScorePlayer.	score _ aScorePlayer score.	colorForTrack _ Color wheel: score tracks size.	lowestNote _ 24.	leftEdgeTime _ 0.	timeScale _ 0.1.	indexInTrack _ Array new: score tracks size withAll: 1.	lastUpdateTick _ -1.! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/8/1998 15:51'!step	| t fudge |	score ifNil: [^ self].	t _ scorePlayer ticksSinceStart.	t = lastUpdateTick ifFalse: [		fudge _ 0.  "pixels of 'fudge factor' to adjust for display update delay"		self goToTime: t - (((self width // 2) - borderWidth + fudge) asFloat / timeScale) truncated.		self addNotes.		lastUpdateTick _ t].! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 09:07'!stepTime	^ 0! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 08:06'!xForTime: aNumber	^ bounds left + borderWidth + (timeScale * (aNumber - leftEdgeTime) asFloat) truncated! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 6/1/1998 08:47'!yForMidiKey: midiKey	^ (bounds bottom - borderWidth - 4) - (4 * (midiKey - lowestNote))! !!PianoRollScoreMorph class reorganize!('as yet unclassified')!!ScorePlayerMorph methodsFor: 'all' stamp: 'jm 6/28/1998 18:52'!makeControls	| b r reverbSwitch repeatSwitch |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2;		color: color.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; inset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (b fullCopy label: 'Piano Roll';		actionSelector: #makePianoRoll).	r addMorphBack: (b fullCopy label: 'Reset Insts.';		actionSelector: #reset).	r addMorphBack: (b fullCopy label: 'Rewind';		actionSelector: #rewind).	b target: scorePlayer.	r addMorphBack: (b fullCopy label: 'Play';			actionSelector: #resumePlaying).	r addMorphBack: (b fullCopy label: 'Pause';			actionSelector: #pause).	reverbSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'Reverb Disable';		actionSelector: #disableReverb:;		target: scorePlayer;		setSwitchState: SoundPlayer isReverbOn not.	r addMorphBack: reverbSwitch.	repeatSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'Repeat';		actionSelector: #repeat:;		target: scorePlayer;		setSwitchState: scorePlayer repeat.	r addMorphBack: repeatSwitch.	b target: self.	^ r! !!ScorePlayerMorph methodsFor: 'all' stamp: 'jm 6/28/1998 19:05'!makePianoRoll	"Create a piano roll viewer for this score player."	| pianoRoll h |	pianoRoll _ PianoRollScoreMorph new on: scorePlayer.	h _ self world activeHand.	h		ifNil: [self world addMorph: pianoRoll]		ifNotNil: [h attachMorph: pianoRoll].	pianoRoll startStepping.! !