'From Squeak2.9alpha of 13 June 2000 [latest update: #2915] on 11 November 2000 at 4:35:37 pm'!"Change Set:		212DropMorphOnWS-jcgDate:			5 November 2000Author:			Joshua GargusNow updated to work with the glorious Truth and Beauty that Andreas brought to Morphic's event handling!!Adds the ability to drop a morph on a Workspace with the following results:1. a unique name is created for the morph, based on its class and identity hash.2. this name is added as a key to the Workspace binding, with the morph as its value.3. this name is inserted at the Workspace's current insertion point.This functionality is toggled by a menu item in the SystemWindows menu (to the right of the 'close window X').I added the method PluggableTextMorph>>correctSelectionWithString: to insert the name at the proper point, but I fear it's a hack that doesn't do things the right way.  Anyone with more familiarity with text handling than I have is encouraged to criticize."!StringHolder subclass: #Workspace	instanceVariableNames: 'bindings acceptDroppedMorphs '	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-ST80 Remnants'!!Browser methodsFor: 'drag and drop' stamp: 'jcg 11/5/2000 22:23'!wantsDroppedMorph: transferMorph event: anEvent inMorph: destinationLM 	"We are only interested in TransferMorphs as wrappers for             	informations. If their content is really interesting for us, will             	determined later in >>acceptDroppingMorph:event:."	| srcType dstType |	"only want drops on lists (not, for example, on pluggable texts)"	(destinationLM isKindOf: PluggableListMorph) ifFalse: [^ false].	srcType _ transferMorph dragTransferType.	dstType _ destinationLM getListSelector.	(srcType == #messageList		and: [dstType == #messageCategoryList or: [dstType == #classList]])		ifTrue: [^true].	(srcType == #classList		and: [dstType == #systemCategoryList])		ifTrue: [^true]."			[			srcLS == #messageList ifTrue: [^ dstLS == #messageList | (dstLS == #messageCategoryList) | (dstLS == #classList)].			srcLS == #classList ifTrue: [^ dstLS == #classList | (dstLS == #systemCategoryList)]]."	^ false! !!PluggableTextMorph methodsFor: 'interactive error protocol' stamp: 'jcg 11/5/2000 22:25'!correctSelectionWithString: aString	| result newPosition |	"I can't tell if this is a hack or if it's the right thing to do."	self setSelection: selectionInterval. 	result _ self correctFrom: selectionInterval first to: selectionInterval last with: aString.	newPosition _ selectionInterval first + aString size.	self setSelection: (newPosition to: newPosition - 1).	^ result! !!PluggableTextMorph methodsFor: 'drag and drop' stamp: 'jcg 7/7/2000 11:08'!acceptDroppingMorph: aMorph event: evt 	"This message is sent when a morph is dropped onto a morph that has     	agreed to accept the dropped morph by responding 'true' to the     	wantsDroppedMorph:Event: message. The default implementation just     	adds the given morph to the receiver."	"Here we let the model do its work."	self model		acceptDroppingMorph: aMorph		event: evt		inMorph: self.! !!PluggableTextMorph methodsFor: 'drag and drop' stamp: 'jcg 7/7/2000 11:13'!wantsDroppedMorph: aMorph event: anEvent 	^ self model wantsDroppedMorph: aMorph event: anEvent inMorph: self! !!Workspace methodsFor: 'as yet unclassified' stamp: 'jcg 7/8/2000 00:13'!addModelItemsToWindowMenu: aMenu	aMenu addLine.	aMenu add: 'save contents to file...' target: self action: #saveContentsInFile.		self acceptsDroppingMorphForReference 		ifTrue: [aMenu 					add: 'cease accepting dropping morph for reference' 					target: self 					action: #toggleDroppingMorphForReference] 		ifFalse: [aMenu 					add: 'start accepting dropping morph for reference' 					target: self 					action: #toggleDroppingMorphForReference] ! !!Workspace methodsFor: 'initialize-release' stamp: 'sma 11/11/2000 16:33'!initialize	super initialize.	acceptDroppedMorphs _ false! !!Workspace methodsFor: 'drag and drop' stamp: 'jcg 11/5/2000 22:28'!acceptDroppingMorph: dropee event: evt inMorph: targetMorph 	"Return the dropee to its old position, and add a reference to it at the cursor point."	| bindingName |	bindingName _  dropee externalName translateToLowercase, dropee identityHash printString..	targetMorph correctSelectionWithString: bindingName, ' '.	(self bindingOf: bindingName) value: dropee.	dropee rejectDropMorphEvent: evt.	^ true "success"! !!Workspace methodsFor: 'drag and drop' stamp: 'jcg 7/8/2000 00:10'!acceptsDroppingMorphForReference	^ acceptDroppedMorphs		! !!Workspace methodsFor: 'drag and drop' stamp: 'jcg 7/8/2000 00:09'!acceptsDroppingMorphForReference: trueFalse	acceptDroppedMorphs _ trueFalse		! !!Workspace methodsFor: 'drag and drop' stamp: 'jcg 7/8/2000 00:11'!toggleDroppingMorphForReference	acceptDroppedMorphs _ acceptDroppedMorphs not.		! !!Workspace methodsFor: 'drag and drop' stamp: 'jcg 7/7/2000 11:16'!wantsDroppedMorph: dropee event: evt inMorph: target	^ acceptDroppedMorphs		! !!Workspace methodsFor: 'object fileIn' stamp: 'sma 11/11/2000 16:33'!convertdcb0: varDict dcba0: smartRefStrm	"These variables are automatically stored into the new instance #('dependents' 'contents' 'bindings').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('acceptDroppedMorphs')  If a non-nil value is needed, please assign it."	acceptDroppedMorphs _ false! !"Postscript:Make sure each Workspace has a meaningful value for acceptDroppedMorphs"Workspace allSubInstancesDo: [:w | w acceptsDroppingMorphForReference: false].!