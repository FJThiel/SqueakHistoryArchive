'From Squeak2.6 of 11 October 1999 [latest update: #1557] on 16 October 1999 at 4:33:49 pm'!"Change Set:		TransformSmoothingDate:			16 October 1999Author:			Dan IngallsRestores the smoothing function to morphic flexes where the scale is less than 1.0 or the rotation is not a multiple of 90 degrees."!!Canvas methodsFor: 'drawing-support' stamp: 'di 10/16/1999 16:02'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock	"Transform the receiver by the given display transformation during the execution of aBlock. The given clip rectangle defines the *global* (e.g., outer) rectangle against which the receiver should clip (which would be equivalent to 'self clipRect: aClipRect; transformBy: aDisplayTransform')."	^ self transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock smoothing: 1! !!Canvas methodsFor: 'drawing-support' stamp: 'di 10/16/1999 15:56'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock smoothing: cellSize	"Transform the receiver by the given display transformation during the execution of aBlock. The given clip rectangle defines the *global* (e.g., outer) rectangle against which the receiver should clip (which would be equivalent to 'self clipRect: aClipRect; transformBy: aDisplayTransform')."	^ self subclassResponsibility! !!FormCanvas methodsFor: 'drawing-support' stamp: 'di 10/16/1999 15:58'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock	 smoothing: cellSize	"Note: This method has been originally copied from TransformationMorph."	| innerRect patchRect sourceQuad warp start subCanvas |	(aDisplayTransform isPureTranslation) ifTrue:[		^aBlock value: (self copyOffset: aDisplayTransform offset negated truncated							clipRect: aClipRect)	].	"Prepare an appropriate warp from patch to innerRect"	innerRect _ aClipRect.	patchRect _ aDisplayTransform globalBoundsToLocal:					(self clipRect intersect: innerRect).	sourceQuad _ (aDisplayTransform sourceQuadFor: innerRect)					collect: [:p | p - patchRect topLeft].	warp _ self warpFrom: sourceQuad toRect: innerRect.	warp cellSize: cellSize.	"Render the submorphs visible in the clipping rectangle, as patchForm"	start _ (self depth = 1 and: [self isShadowDrawing not])		"If this is true B&W, then we need a first pass for erasure."		ifTrue: [1] ifFalse: [2].	start to: 2 do:		[:i | "If i=1 we first make a shadow and erase it for opaque whites in B&W"		subCanvas _ FormCanvas extent: patchRect extent depth: self depth.		i=1	ifTrue: [subCanvas setShadowDrawing; stipple: Color black.					warp combinationRule: Form erase]			ifFalse: [self isShadowDrawing ifTrue:					[subCanvas setShadowDrawing; stipple: self stipple].					warp combinationRule: Form paint].		subCanvas translateBy: patchRect topLeft negated			during:[:offsetCanvas| aBlock value: offsetCanvas].		warp sourceForm: subCanvas form; warpBits.		warp sourceForm: nil.  subCanvas _ nil "release space for next loop"]! !!ColorPatchCanvas methodsFor: 'drawing-support' stamp: 'di 10/16/1999 15:58'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock smoothing: cellSize	"Note: This method has been originally copied from TransformationMorph."	| innerRect patchRect sourceQuad warp start subCanvas |	(aDisplayTransform isPureTranslation) ifTrue:[		subCanvas _ self copyOffset: aDisplayTransform offset negated truncated							clipRect: aClipRect.		aBlock value: subCanvas.		foundMorph _ subCanvas foundMorph.		^self	].	"Prepare an appropriate warp from patch to innerRect"	innerRect _ aClipRect.	patchRect _ aDisplayTransform globalBoundsToLocal:					(self clipRect intersect: innerRect).	sourceQuad _ (aDisplayTransform sourceQuadFor: innerRect)					collect: [:p | p - patchRect topLeft].	warp _ self warpFrom: sourceQuad toRect: innerRect.	warp cellSize: cellSize.	"Render the submorphs visible in the clipping rectangle, as patchForm"	start _ (self depth = 1 and: [self isShadowDrawing not])		"If this is true B&W, then we need a first pass for erasure."		ifTrue: [1] ifFalse: [2].	start to: 2 do:		[:i | "If i=1 we first make a shadow and erase it for opaque whites in B&W"		subCanvas _ ColorPatchCanvas extent: patchRect extent depth: self depth.		subCanvas stopMorph: stopMorph.		subCanvas foundMorph: foundMorph.		subCanvas doStop: doStop.		i=1	ifTrue: [subCanvas setShadowDrawing; stipple: Color black.					warp combinationRule: Form erase]			ifFalse: [self isShadowDrawing ifTrue:					[subCanvas setShadowDrawing; stipple: self stipple].					warp combinationRule: Form paint].		subCanvas translateBy: patchRect topLeft negated			during:[:offsetCanvas| aBlock value: offsetCanvas].		i = 2 ifTrue:[foundMorph _ subCanvas foundMorph].		warp sourceForm: subCanvas form; warpBits.		warp sourceForm: nil.  subCanvas _ nil "release space for next loop"]! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'di 10/16/1999 15:59'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock smoothing: cellSize	| retval |	self comment:'drawing clipped ' with:aClipRect.	self comment:'drawing transformed ' with:aDisplayTransform.     self gsave.	aClipRect ifNotNil:[ self rect:aClipRect; clip].	self transformBy:aDisplayTransform.	retval _ aBlock value:self.     self grestore.		self comment:'end of drawing clipped ' with:aClipRect.	^ retval! !!ShadowDrawingCanvas methodsFor: 'drawing-support' stamp: 'di 10/16/1999 16:01'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock	 smoothing: cellSize	"Transform the receiver by the given display transformation during the execution of aBlock. The given clip rectangle defines the *global* (e.g., outer) rectangle against which the receiver should clip (which would be equivalent to 'self clipRect: aClipRect; transformBy: aDisplayTransform')."	| oldCanvas |	oldCanvas _ myCanvas.	myCanvas transformBy: aDisplayTransform		clippingTo: aClipRect		during: [:newCanvas |				myCanvas _ newCanvas.				aBlock value: self]		smoothing: cellSize.	myCanvas _ oldCanvas.! !!TransformMorph methodsFor: 'drawing' stamp: 'di 10/16/1999 16:03'!drawSubmorphsOn: aCanvas	aCanvas transformBy: transform		clippingTo: self innerBounds		during: [:myCanvas |				submorphs reverseDo:[:m | myCanvas fullDrawMorph: m] ]		smoothing: smoothing! !FormCanvas removeSelector: #transformBy:clippingTo:during:!ColorPatchCanvas removeSelector: #transformBy:clippingTo:during:!PostscriptCanvas removeSelector: #transformBy:clippingTo:during:!ShadowDrawingCanvas removeSelector: #transformBy:clippingTo:during:!