'From Squeak2.9alpha of 13 June 2000 [latest update: #2825] on 7 October 2000 at 11:16:40 pm'!"Change Set:		MoreHaloTweaks-arDate:			7 October 2000Author:			Andreas RaabMore halo tweaks. Basically restores the ability to have CMD-drag gesture be different from a CMD-click gesture. CMD-drag will be interpreted as moving the current halo owner, whereas CMD-click is being interpreted as simply putting up a halo on the next halo recipient."!!HaloMorph methodsFor: 'events' stamp: 'ar 10/7/2000 21:39'!blueButtonDown: event	"Transfer the halo to the next likely recipient"	target ifNil:[^self delete].	"wait for drags or transfer"	event hand 		waitForClicksOrDrag: self 		event: event		selectors: { #transferHalo:. nil. #startDragTarget:. }		threshold: 5.! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/7/2000 22:04'!mouseMove: evt	"Drag our target around"	| thePoint |	thePoint _ (target transformedFrom: self) globalPointToLocal: evt position.	target setConstrainedPositionFrom: (thePoint - positionOffset).! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/7/2000 22:33'!popUpFor: aMorph event: anEvent	"This message is sent by morphs that explicitly request the halo on a button click. Note: anEvent is in aMorphs coordinate frame."	| tfm hand inTransfer |	hand _ anEvent hand.	self target: aMorph.	self flag: #workAround.	"Distinguish between putting up a new halo (e.g., from a click on aMorph) and transferring the halo. See the comment in HaloMorph>>transferHalo: for an explanation."	inTransfer _ hand halo notNil and:[hand halo hasProperty: #haloTransfer].	hand halo: self.	hand world addMorphFront: self.	positionOffset _ anEvent position - aMorph position.	self startStepping.	"wait for drags or ignore"	tfm _ (aMorph transformedFrom: nil) inverseTransformation.	self flag: #workAround.	inTransfer ifFalse:[		hand newMouseFocus: self. "Necessary or else we won't get #mouseMove..."		hand 			waitForClicksOrDrag: self 			event: (anEvent transformedBy: tfm)			selectors: { nil. nil. #startDragTarget:. }			threshold: 5.	].! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/7/2000 22:14'!startDragTarget: event	"Begin dragging the target"	| thePoint |	thePoint _ (target transformedFrom: self) globalPointToLocal: event position.	target setConstrainedPositionFrom: thePoint.	event hand newMouseFocus: self.! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/7/2000 22:34'!transferHalo: event	"Transfer the halo to the next likely recipient"	target ifNil:[^self delete].	self flag: #workAround.	"Flag the receiver as being in a halo transition. This information will be used by the new halo to not wait for drags (if #transferHalo: has been called we did wait for drags already). Since the mechanics of a halo transfer starting from here are identical to that during a blue button click on a morph (e.g., when putting up a new halo) the information needs to be somehow transferred or else we would wait again for drags after the halo has been transferred (which results in spurius moves of the morph holding the halo after the transfer)"	self setProperty: #haloTransfer toValue: true.	target transferHalo: (event transformedBy: (target transformedFrom: self)) from: target.! !!HaloMorph methodsFor: 'private' stamp: 'ar 10/7/2000 22:04'!doDrag: evt with: dragHandle	target setConstrainedPositionFrom:		(target griddedPoint: (evt cursorPoint - positionOffset)). "evt is local here"! !!UserInputEvent methodsFor: 'printing' stamp: 'ar 10/7/2000 21:57'!buttonString	"Return a string identifying the currently pressed buttons"	| string |	string _ ''.	self redButtonPressed ifTrue:[string _ string,'red '].	self yellowButtonPressed ifTrue:[string _ string,'yellow '].	self blueButtonPressed ifTrue:[string _ string,'blue '].	^string! !!UserInputEvent methodsFor: 'printing' stamp: 'ar 10/7/2000 21:56'!modifierString	"Return a string identifying the currently pressed modifiers"	| string |	string _ ''.	self commandKeyPressed ifTrue:[string _ string,'CMD '].	self shiftPressed ifTrue:[string _ string,'SHIFT '].	self controlKeyPressed ifTrue:[string _ string,'CTRL '].	^string! !!MouseEvent methodsFor: 'printing' stamp: 'ar 10/7/2000 22:01'!printOn: aStream	aStream nextPut: $[.	aStream nextPutAll: self cursorPoint printString; space.	aStream nextPutAll: type; space.	aStream nextPutAll: self modifierString.	aStream nextPutAll: self buttonString.	aStream nextPutAll: timeStamp printString.	aStream nextPut: $].! !!MouseMoveEvent methodsFor: 'printing' stamp: 'ar 10/7/2000 22:00'!printOn: aStream	aStream nextPut: $[.	aStream nextPutAll: self startPoint printString; space.	aStream nextPutAll: self endPoint printString; space.	aStream nextPutAll: self type; space.	aStream nextPutAll: self modifierString.	aStream nextPutAll: self buttonString.	aStream nextPutAll: timeStamp printString.	aStream nextPut: $].! !