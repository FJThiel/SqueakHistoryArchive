'From Squeak3.1alpha of 7 February 2001 [latest update: #3742] on 27 February 2001 at 8:48:16 am'!"Change Set:		versionsImprovements-swDate:			27 February 2001Author:			Scott Wallace* Fixes the annotation in versions browsers so that it reports the correct number of versions, even if the method at hand is not defined in the current system, and also in a ChangeSorter, where a method marked as deleted may still have prior versions accessible via the lost-method pointer.* Add senders & implementors & browse-current-method to VersionsBrowser menu.* Supports cmd-key accelerators in VersionsBrowser versions-list menu.* Add balloon-help for menu items in the VersionsBrowser's versions-list menu."!!CodeHolder methodsFor: 'annotation' stamp: 'sw 2/22/2001 10:00'!addPriorVersionsCountForSelector: aSelector ofClass: aClass to: aStream	"add an annotation detailing the prior versions count"	| versionsCount |	versionsCount _ VersionsBrowser versionCountForSelector: aSelector class: aClass.	aStream nextPutAll: 				((versionsCount > 1					ifTrue:						[versionsCount == 2 ifTrue:							['1 prior version']							ifFalse:								[versionsCount printString, ' prior versions']]					ifFalse:						['no prior versions']), self annotationSeparator)! !!CodeHolder methodsFor: 'annotation' stamp: 'sw 2/22/2001 10:02'!annotationForSelector: aSelector ofClass: aClass	"Provide a line of content for an annotation pane, representing information about the given selector and class"	| stamp  sendersCount implementorsCount aCategory separator aString aList  aComment aStream |	aStream _ ReadWriteStream on: ''.	separator _ self annotationSeparator.	self annotationRequests do:		[:aRequest |		(aRequest == #firstComment) ifTrue:			[aComment _ aClass firstCommentAt:  aSelector.			aComment isEmptyOrNil ifFalse:				[aStream nextPutAll: (aComment, separator)]].		(aRequest == #timeStamp) ifTrue:			[stamp _ self timeStamp.			aStream nextPutAll: (stamp size > 0				ifTrue: [stamp, separator]				ifFalse: ['no timeStamp', separator])].		(aRequest == #messageCategory) ifTrue:			[aCategory _ aClass organization categoryOfElement: aSelector.			aCategory ifNotNil: "woud be nil for a method no longer present, e.g. in a recent-submissions browser"				[aStream nextPutAll: aCategory, separator]].		(aRequest == #sendersCount) ifTrue:			[sendersCount _ (Smalltalk allCallsOn: aSelector) size.			sendersCount _ sendersCount == 1				ifTrue:					['1 sender']				ifFalse:					[sendersCount printString, ' senders'].			aStream nextPutAll: sendersCount, separator].		(aRequest == #implementorsCount) ifTrue:			[implementorsCount _ Smalltalk numberOfImplementorsOf: aSelector.			implementorsCount _ implementorsCount == 1				ifTrue:					['1 implementor']				ifFalse:					[implementorsCount printString, ' implementors'].			aStream nextPutAll: implementorsCount,  separator].		(aRequest == #priorVersionsCount) ifTrue:			[self addPriorVersionsCountForSelector: aSelector ofClass: aClass to: aStream].		(aRequest == #priorTimeStamp) ifTrue:			[stamp _ VersionsBrowser timeStampFor: aSelector class: aClass reverseOrdinal: 2.			stamp ifNotNil: [aStream nextPutAll: 'prior time stamp: ', stamp, separator]].		(aRequest == #recentChangeSet) ifTrue:			[aString _ ChangeSorter mostRecentChangeSetWithChangeForClass: aClass selector: aSelector.			aString size > 0 ifTrue: [aStream nextPutAll: aString, separator]].		(aRequest == #allChangeSets) ifTrue:			[aList _ ChangeSorter allChangeSetsWithClass: aClass selector: aSelector.			aList size > 0				ifTrue:					[aList size = 1						ifTrue:							[aStream nextPutAll: 'only in change set ']						ifFalse:							[aStream nextPutAll: 'in change sets: '].					aList do:						[:aChangeSet | aStream nextPutAll: aChangeSet name, ' ']]				ifFalse:					[aStream nextPutAll: 'in no change set'].			aStream nextPutAll: separator]].			^ aStream contents! !!CodeHolder methodsFor: 'annotation' stamp: 'sw 2/22/2001 10:02'!annotationSeparator	"Answer the separator to be used between annotations"	^ ' ¥ '! !!ChangeSorter methodsFor: 'annotation' stamp: 'sw 2/22/2001 10:35'!addPriorVersionsCountForSelector: aSelector ofClass: aClass to: aStream	"Add an annotation detailing the prior versions count.  Specially handled here for the case of a selector no longer in the system, whose prior version is pointed to by the lost-method pointer in the change held on to by the changeset"	(aClass includesSelector: aSelector) ifTrue:		[^ super addPriorVersionsCountForSelector: aSelector ofClass: aClass to: aStream].	aStream nextPutAll:		((myChangeSet methodInfoFromRemoval: {aClass name. aSelector})			ifNil:				['no prior versions']			ifNotNil:				['version(s) retrievable here']), self annotationSeparator! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 2/27/2001 08:46'!changeListKey: aChar from: view	"Respond to a Command key in the list pane. of the versions browser"	^ self messageListKey: aChar from: view! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 2/27/2001 08:11'!versionsMenu: aMenu	"Fill aMenu with menu items appropriate to the receiver"	Smalltalk isMorphic ifTrue:		[aMenu title: 'versions'.		aMenu addStayUpItemSpecial].	^ aMenu addList: #(		('compare to current'		compareToCurrentVersion		'compare selected version to the current version')		('revert to selected version'	fileInSelections					'resubmit the selected version, so that it becomes the current version')		('remove from changes'		removeMethodFromChanges		'remove this method from the current change set, if present')		('edit current method (O)'	openSingleMessageBrowser		'open a single-message browser on the current version of this method')				-		('toggle diffing (D)'			toggleDiffing					'toggle whether or not diffs should be shown here')		('update list'				reformulateList					'reformulate the list of versions, in case it somehow got out of synch with reality')		-		('senders (n)'				browseSenders					'browse all senders of this selector')		('implementors (m)'			browseImplementors				'browse all implementors of this selector')		-		('help...'					offerVersionsHelp				'provide an explanation of the use of this tool'))! !!VersionsBrowser methodsFor: 'misc' stamp: 'sw 2/27/2001 08:17'!addPriorVersionsCountForSelector: aSelector ofClass: aClass to: aStream	"Add an annotation detailing the prior versions count.  Specially handled here for the case of a selector no longer in the system, whose prior versions are seen in a versions browser -- in this case, the inherited version of this method will not work."	(aClass includesSelector: aSelector) ifTrue:		[^ super addPriorVersionsCountForSelector: aSelector ofClass: aClass to: aStream].	aStream nextPutAll: 		((changeList size > 0			ifTrue:				[changeList size == 1					ifTrue:						['Deleted - one prior version']					ifFalse:						['Deleted - ', changeList size printString, ' prior versions']]			ifFalse:				['surprisingly, no prior versions']), self annotationSeparator)! !