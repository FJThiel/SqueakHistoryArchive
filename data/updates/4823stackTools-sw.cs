'From Squeak3.3alpha of 18 January 2002 [latest update: #4821] on 8 April 2002 at 9:34:06 am'!"Change Set:		stackTools-swDate:			8 April 2002Author:			Scott WallaceSimplifies and reduces the Stack Tools flap considerably.  Radical stack redesign is underway, but for the time being, items that were in the Stack Tools flap that were simply too hard or confusing to use, or too buggy in their implementations, are now removed.  To put an item onto a stack background, you must now first drop it where you want it, *then* use the stack/cards halo submenu to deploy it to the background and possibly have it hold separate data for each card instance.Adds a scrolling text field to the Stack Tools flap.Adds a Stack-help item to the Stack Tools flap."!PluggableTextMorphWithModel subclass: #ScrollableField	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Stacks'	module: #(Squeak Morphic Library Windows)!!Flaps class methodsFor: 'shared flaps' stamp: 'sw 4/8/2002 08:41'!globalFlapTabsWithID: aFlapID	"Answer all flap tabs whose ids start with the given id"	^ self globalFlapTabsIfAny select:		[:aFlapTab |			(aFlapTab flapID = aFlapID) or: [FlapTab givenID: aFlapTab flapID matches: aFlapID]]"Flaps globalFlapTabsWithID: 'Stack Tools'"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 4/8/2002 00:53'!quadsDefiningStackToolsFlap	"Answer a structure defining the items on the default system Stack Tools flap"	^ #(	(StackMorph 			authoringPrototype		'Stack' 				'A multi-card data base'	)	(StackMorph			stackHelpWindow		'Stack Help'			'Some hints about how to use Stacks')	(TextMorph				authoringPrototype		'Simple Text'		'Text that you can edit into anything you wish')	(TextMorph				fancyPrototype			'Fancy Text' 		'A text field with a rounded shadowed border, with a fancy font.')	(ScrollableField			newStandAlone			'Scrolling Text'		'Holds any amount of text; has a scroll bar')	(ScriptableButton		authoringPrototype		'Scriptable Button'	'A button whose script will be a method of the background Player')	(StackMorph			previousCardButton 		'Previous Card' 		'A button that takes the user to the previous card in the stack')	(StackMorph			nextCardButton			'Next Card'			'A button that takes the user to the next card in the stack'))	"Flaps replaceGlobalFlapwithID: 'Stack Tools'"! !!Flaps class methodsFor: 'replacement' stamp: 'sw 4/8/2002 08:35'!replaceGlobalFlapwithID: flapID	"If there is a global flap with flapID, replace it with an updated one."	| replacement tabs |	(tabs _ self globalFlapTabsWithID: flapID) size = 0 ifTrue: [^ self].	tabs do: [:tab |		self removeFlapTab: tab keepInList: false].	flapID = 'Stack Tools' ifTrue: [replacement _ self newStackToolsFlap].	flapID = 'Supplies' ifTrue: [replacement _ self newSuppliesFlap].	flapID = 'Tools' ifTrue: [replacement _ self newToolsFlap].	flapID = 'Widgets' ifTrue: [replacement _ self newWidgetsFlap].	flapID = 'Navigator' ifTrue: [replacement _ self newNavigatorFlap].	flapID = 'Squeak' ifTrue: [replacement _ self newSqueakFlap].	replacement ifNil: [^ self].	self addGlobalFlap: replacement.	self currentWorld ifNotNil: [self currentWorld addGlobalFlaps]"Flaps replaceFlapwithID: 'Widgets' "! !!ScrollableField methodsFor: 'as yet unclassified' stamp: 'sw 4/2/2002 12:23'!initializeToStandAlone	super initializeToStandAlone.	self  color: (Color r: 0.972 g: 0.972 b: 0.662).	self retractable: false; scrollBarOnLeft: false! !!ScrollableField methodsFor: 'contents' stamp: 'sw 4/7/2002 18:48'!setMyText: someText	"Set my text, as indicated"	| toUse |	toUse _ someText ifNil: [''].	myContents _ toUse.	self setText: toUse.	^ true! !!ScrollableField class methodsFor: 'as yet unclassified' stamp: 'sw 4/2/2002 12:21'!descriptionForPartsBin	^ self partName:	'Scrolling Text'		categories:		#('Text' )		documentation:	'A scrollable, editable body of text'! !!StackMorph class methodsFor: 'parts bin' stamp: 'sw 4/8/2002 09:30'!stackHelpWindow	^ (Workspace new contents: 'A "stack" is a place where you can create, store, view and retrieve data "fields" from a set of "cards".  Data that you want to occur on every card (such as a name and an address in an Address Stack) are represented by objects such as "Simple Text", "Fancy Text", and "Scrolling Text" that you obtain from the Stack Tools flap.When you look at a card in a Stack, you may be seeing three different kinds of material.  Press the ¤ button in the stack''s controls to see the current designations, and use the "explain designations" to get a reminder of what the three different colors mean.¥  Things that are designated to be seen on every card, and have the same contents whichever card is being shown. (green)¥  Things that are designated to be seen on every card, with each card having its own value for them. (orange)¥  Things that are designated to occur only on the particular card at hand. (red)Use the "stack/cards" menu (in an object''s halo menu) to change the designation of any object.  For example, if you have an object that is private to just one card, and you want to make it visible on all cards, use "place onto background".  If you further want it to hold a separate value for each separate card, use "start holding separate data for each instance".The normal sequence to define a Stack''s structure is to obtain a blank Stack, then create your fields by grabbing what you want from the Stack Tools flap and dropping it where you want it in the stack.  For easiest use, give a name to each field (by editing the name in its halo) *before* you put it onto the background..  Those fields that you want to represent the basic data of the stack need to be given names, placed on the background, and then told to hold separate data.When you hit the + button in a stack''s controls, a new card is created with default values in all the fields.  You can arrange for a particular default value to be used in a field -- do this either for one field at a time with "be default value on new card", or you can request that the all the values seen on a particular card serve as default by choosing "be defaults for new cards" from the stack''s ¥ menu.It is also possible to have multiple "backgrounds" in the same stack -- each different background defines a different data structure, and cards from multiple backgrounds can be freely mixed in the same stack.Besides text fields, it is also possible to have picture-valued fields -- and potentially fields with data values of any other type as well.')	embeddedInMorphicWindowLabeled: 'Stack Help'	"StackMorph stackHelpWindow"! !"Postscript:"Flaps replaceGlobalFlapwithID: 'Stack Tools'.!