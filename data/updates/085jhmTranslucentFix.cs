'From Squeak 2.0 of May 22, 1998 on 3 June 1998 at 11:45:28 am'!BitBlt subclass: #GrafPort	instanceVariableNames: 'lastColor '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Support'!!Canvas methodsFor: 'testing' stamp: 'jm 5/30/1998 21:10'!isVisible: aRectangle	"Optimization of: ^ clipRect intersects: (aRectangle translateBy: origin)"	(aRectangle right + origin x) < clipRect left	ifTrue: [^ false].	(aRectangle left + origin x) > clipRect right	ifTrue: [^ false].	(aRectangle bottom + origin y) < clipRect top	ifTrue: [^ false].	(aRectangle top + origin y) > clipRect bottom	ifTrue: [^ false].	^ true! !!FileList methodsFor: 'file list menu' stamp: 'jm 5/29/1998 17:09'!playMidiFile	"Play a MIDI file." 	| f score |	Smalltalk at: #MIDIFileReader ifPresent: [:midiReader |		Smalltalk at: #ScorePlayerMorph ifPresent: [:scorePlayer |			f _ (directory oldFileNamed: self fullName) binary.			score _ (midiReader new readMIDIFrom: f) asScore.			f close.			scorePlayer openOn: score title: fileName]].! !!FormCanvas methodsFor: 'drawing' stamp: 'jm 6/2/1998 07:33'!fillRectangle: r color: c	c isTransparent ifFalse: [		port combinationRule: (self drawRule: Form over color: c).		port fillRect: r color: (self drawColor: c) offset: origin].! !!FormCanvas methodsFor: 'drawing' stamp: 'jm 6/2/1998 15:41'!frameAndFillRectangle: r fillColor: fillColor borderWidth: borderWidth borderColor: borderColor	| rule |	rule _ self drawRule: Form over color: fillColor borderColor: borderColor.	port combinationRule: rule.	borderColor isTransparent ifFalse: [		"draw border of rectangle"		(r area > 10000 or: [fillColor isTransparent or: [rule = Form blend]]) ifTrue: [			port frameRect: (r translateBy: origin)				borderWidth: borderWidth				borderColor: (self drawColor: borderColor).		] ifFalse: [			"for small rectangles, it's faster to fill the entire outer rectangle than to compute and fill the border rects"			port fillRect: r color: (self drawColor: borderColor) offset: origin]].	"fill the inside"	fillColor isTransparent ifFalse: [		port 	fillRect: (r insetBy: borderWidth)				color: (self drawColor: fillColor)				offset: origin].! !!FormCanvas methodsFor: 'drawing' stamp: 'jm 5/30/1998 07:43'!frameAndFillRectangle: r fillColor: fillColor borderWidth: borderWidth topLeftColor: topLeftColor bottomRightColor: bottomRightColor	| w h rect |	"First use quick code for top and left borders and fill"	self frameAndFillRectangle: r		fillColor: fillColor		borderWidth: borderWidth		borderColor: topLeftColor.	"Now use slow code for bevelled bottom and right borders"	bottomRightColor isTransparent ifFalse: [		borderWidth isInteger			ifTrue: [w _ h _ borderWidth]			ifFalse: [w _ borderWidth x.   h _ borderWidth y].		rect _ r translateBy: origin.		port fillColor: (self drawColor: bottomRightColor);			 frameRectRight: rect width: w;			 frameRectBottom: rect height: h].! !!GrafPort methodsFor: 'all' stamp: 'jm 5/30/1998 07:55'!fillColor: aColorOrPattern	aColorOrPattern == lastColor ifTrue: [^ self].	super fillColor: aColorOrPattern.	lastColor _ aColorOrPattern.! !!GrafPort methodsFor: 'all' stamp: 'jm 5/30/1998 07:01'!fillRect: rect color: fillColor offset: aPoint	fillColor class == InfiniteForm ifTrue: [		self fillColor: nil.		fillColor displayOnPort: ((self clippedBy: rect) colorMap: nil) at: aPoint.		^ self].	sourceForm _ nil.	self fillColor: fillColor.	destX _ rect left + aPoint x.	destY _ rect top + aPoint y.	sourceX _ 0.	sourceY _ 0.	width _ rect width.	height _ rect height.	self copyBits.! !!GrafPort methodsFor: 'all' stamp: 'jm 5/30/1998 07:36'!frameRectBottom: rect height: h	sourceForm _ nil.	destX _ rect left + 1.	destY _ rect bottom - 1.	width _ rect width - 2.	height _ 1.	1 to: h do: [:i |		self copyBits.		destX _ destX + 1.		destY _ destY - 1.		width _ width - 2].! !!GrafPort methodsFor: 'all' stamp: 'jm 5/30/1998 07:35'!frameRectRight: rect width: w	sourceForm _ nil.	width _ 1.	height _ rect height - 1.	destX _ rect right - 1.	destY _ rect top + 1.	1 to: w do: [:i |		self copyBits.		destX _ destX - 1.		destY _ destY + 1.		height _ height - 2].! !!MIDIFileReader class methodsFor: 'all' stamp: 'jm 5/29/1998 17:12'!playURLNamed: urlString	| titleString |	titleString _ urlString		copyFrom: (urlString findLast: [:c | c=$/]) + 1		to: urlString size.	ScorePlayerMorph		openOn: (self scoreFromURL: urlString)		title: titleString.! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'jm 5/29/1998 15:39'!addMorphFront: aMorph	| newSubmorphs |	aMorph owner ifNotNil: [aMorph owner privateRemoveMorph: aMorph].	aMorph layoutChanged.	aMorph privateOwner: self.	newSubmorphs _ submorphs species new: submorphs size + 1.	newSubmorphs at: 1 put: aMorph.	newSubmorphs		replaceFrom: 2		to: newSubmorphs size		with: submorphs		startingAt: 1.	submorphs _ newSubmorphs.	aMorph changed.	self layoutChanged.! !!Morph methodsFor: 'drawing' stamp: 'jm 5/30/1998 21:06'!fullDrawOn: aCanvas	(aCanvas isVisible: self fullBounds) ifFalse: [^ self].	submorphs isEmpty		ifTrue: [self drawOn: aCanvas]		ifFalse: [			(aCanvas isVisible: bounds) ifTrue: [self drawOn: aCanvas].			submorphs reverseDo: [:m | m fullDrawOn: aCanvas]].  "draw back-to-front"! !!Morph methodsFor: 'geometry' stamp: 'jm 5/29/1998 15:42'!fullBounds	fullBounds ifNil: [		fullBounds _ self bounds.		submorphs size > 0 ifTrue: [			submorphs do: [:m | fullBounds _ fullBounds quickMerge: m fullBounds]]].	^ fullBounds! !!Morph methodsFor: 'change reporting' stamp: 'di 11/16/97 15:15'!layoutChanged	"Note that something has changed about the size, shape, or location of the receiver or one of its submorphs, so that fullBounds must be recomputed."	fullBounds _ nil.	owner ifNotNil: [owner layoutChanged].	submorphs size > 0 ifTrue:		["Let submorphs know about a change above"		submorphs do: [:m | m ownerChanged]].! !!Morph methodsFor: 'private' stamp: 'jm 5/29/1998 21:28'!privateColor: aColor	color _ aColor.! !!Morph class methodsFor: 'instance creation' stamp: 'jm 5/29/1998 21:28'!newBounds: bounds color: color	^ (self new privateBounds: bounds) privateColor: color! !!Point methodsFor: 'truncation and round off' stamp: 'jm 5/29/1998 15:53'!truncated	"Answer a Point whose x and y coordinates are integers. Answer the receiver if its coordinates are already integral."	(x isInteger and: [y isInteger]) ifTrue: [^ self].	^ x truncated @ y truncated! !!Rectangle methodsFor: 'truncation and round off' stamp: 'jm 5/29/1998 15:53'!truncated	"Answer a Rectangle whose origin and corner have any fractional parts removed. Answer the receiver if its coordinates are already integral."	(origin x isInteger and:	[origin y isInteger and:	[corner x isInteger and:	[corner y isInteger]]])		ifTrue: [^ self].	^ Rectangle origin: origin truncated corner: corner truncated! !!ScorePlayer methodsFor: 'accessing' stamp: 'jm 6/1/1998 09:02'!ticksSinceStart	"Return the number of logical ticks have elapsed since this piece started playing. The duration of a tick is determined by the MIDI score."	^ ticksSinceStart! !!ScorePlayerMorph methodsFor: 'all' stamp: 'jm 6/1/1998 09:10'!scorePlayer	^ scorePlayer! !GrafPort removeSelector: #frameRectBottom:!GrafPort removeSelector: #frameRectRight:!MIDIFileReader class removeSelector: #scoreFromStream:!MIDIFileReader class removeSelector: #playMidiStream:title:!