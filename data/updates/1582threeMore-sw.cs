'From Squeak2.6 of 11 October 1999 [latest update: #1580] on 27 October 1999 at 6:16:11 pm'!"Change Set:		threeMore-swDate:			27 October 1999Author:			Scott Wallace(1)  Fixes a bug that created a spurious extra player when you open a flap-based viewer on a flexed morph that previously was playerless.  (A symptom of this was that the thumbnail of such a viewer did not reflect rotations of the object.)(2) Makes the second default category for an unscripted player be color-and-border rather than the boolean tests; this is primarily because the isOverColor  computation in the 'tests' category is so slow, allowing the casual presence of a viewer or two on the screen significantly to degrade performance.  Now you'll not get the tests category inadvertently.  Correspondingly, the 'colorUnder' slot,is no longer shown in 'basic' category, because it will already be seen in the color-and-border category.(3)  Fixes the ever-since-flexing-came-along bug that sometimes made a clone obtained via the duplicating handle be wrongly positioned when the clonee had been a transformed object inside a window.  The clone now appears under the cursor as intended."!!HandMorph methodsFor: 'grabbing/dropping' stamp: 'sw 10/27/1999 18:06'!grabMorphFromMenu: m	"Grab the given morph (i.e., add it to this hand and remove it from its current owner) without changing its position. This is used to pick up a morph under the hand's current position, versus attachMorph: which is used to pick up a morph that may not be near this hand."	| delta |	(m owner isKindOf: DropShadowMorph)		ifTrue: [^ self grabMorphFromMenu: m owner].	m aboutToBeGrabbedBy: self.	delta _ m positionInWorld - menuTargetOffset.	gridOn ifTrue: [delta _ delta grid: grid].	m position: self position + delta.	self addMorphBack: m.! !!Morph class methodsFor: 'misc' stamp: 'sw 10/27/1999 17:54'!categoryContributions	"Answer a list of arrays which characterize the elements in various viewer categories for the etoy system.  Implementors of this method are statically polled to contribute this information when the scripting system reinitializes its scripting info, which typically only happens after a structural change.	Each array returned has two elements.  The first is the category name, and the second is a an array of <elementType> <elementName> pairs, where <elementType is #slot or #script"	^ #(		('basic' ((slot x) (slot y) (slot heading) (script forward:)				 (script turn:) (script beep:)))		('color & border'( (slot color) (slot colorUnder) (slot borderColor) (slot borderWidth)))		('geometry'  ((slot scaleFactor) (slot left) (slot right) (slot top) (slot bottom) (slot width) (slot height) (slot x) (slot y) (slot heading)))		('miscellaneous' ((script show) (script hide) (script wearCostumeOf:) (script startScript:) (script stopScript:) (script pauseScript:)))		('motion' ((slot x) (slot y) (slot heading) (script forward:) (script moveToward:) (script turn:) (script bounce:) (script wrap) (script followPath) (script goToRightOf:)))		('pen use' ((slot penColor) (slot penSize) (slot penDown)))		('tests' ((slot isOverColor) (slot isUnderMouse) (slot colorSees))))! !!Player methodsFor: 'slots-kernel' stamp: 'sw 10/27/1999 17:53'!categories	"Answer a list of categories appropriate to the the receiver and its costumes"	| aList |	(self hasCostumeThatIsAWorld)		ifTrue:	[^ self categoriesForWorld].	aList _ #('basic' ) asOrderedCollection.	self slotNames size > 0 ifTrue:		[aList add: 'instance variables'].	self class scripts size > 0 ifTrue:		[aList add: 'scripts'].	aList addAll: #( 'color & border' 'tests' 'geometry' 'motion' 'pen use' 'miscellaneous' ).	self costumesDo:		[:aCostume | aCostume addCostumeSpecificCategoriesTo: aList].	^ aList! !!Presenter methodsFor: 'viewer' stamp: 'sw 10/27/1999 17:46'!viewMorph: aMorph	| aPlayer aViewer aPalette aRect aPoint nominalHeight aFlapTab topItem |	Sensor leftShiftDown ifFalse:		[((aPalette _ aMorph standardPalette) ~~ nil and: [aPalette isInWorld])			ifTrue:	[^ aPalette viewMorph: aMorph]].	aPlayer _ (topItem _ aMorph topRendererOrSelf) assuredPlayer.	associatedMorph addMorph: (aViewer _ self nascentPartsViewer).	(Preferences viewersInFlaps) ifTrue:		[aViewer initializeFor: aPlayer barHeight: 0.		aViewer enforceTileColorPolicy.		associatedMorph world hideViewerFlapsOtherThanFor: aPlayer.		aFlapTab _ associatedMorph world viewerFlapTabFor: topItem.		aFlapTab referent submorphs do: 			[:m | (m isKindOf: Viewer) ifTrue: [m delete]].		aFlapTab referent addMorph: aViewer beSticky.		aViewer visible: true.		aFlapTab applyThickness: aViewer width + 25.		aFlapTab showFlap. 		aViewer position: aFlapTab referent position.		associatedMorph world startSteppingSubmorphsOf: aFlapTab.		^ associatedMorph world startSteppingSubmorphsOf: aViewer].			aViewer initializeFor: aPlayer barHeight: 6.	aViewer enforceTileColorPolicy.	Preferences automaticViewerPlacement ifTrue:		[aPoint _ aMorph bounds right @ 			(aMorph center y - ((nominalHeight _ aViewer initialHeightToAllow) // 2)).		aRect _ (aPoint extent: (aViewer width @ nominalHeight)) translatedToBeWithin: associatedMorph world bounds.		aViewer position: aRect topLeft.		aViewer visible: true.		associatedMorph world startSteppingSubmorphsOf: aViewer.		"it's already in the world, somewhat coincidentally"		^ self].	aMorph primaryHand attachMorph: (aViewer visible: true)! !"Postscript:"ScriptingSystem initCategoryElementDictionary.!