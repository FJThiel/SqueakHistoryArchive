'From Squeak 2.3 beta of Nov 25, 1998 on 6 January 1999 at 9:12:25 pm'!"Change Set:		TranslucencyCleanupDate:			6 January 1999Author:			Dan IngallsSeveral cleanups for translucency, including...Tweaks to the ColorPickerRemoval of TransparenColor as a classChanges so TranslucentColor can represent transparencyRemoval of OpaqueMaskColor as a class"!!Color methodsFor: 'equality' stamp: 'di 1/6/1999 20:26'!= aColor	"Return true if the receiver equals the given color. This method handles TranslucentColors, too."	aColor isColor ifFalse: [^ false].	^ aColor privateRGB = rgb and:		[aColor privateAlpha = self privateAlpha]! !!Color class methodsFor: 'class initialization' stamp: 'di 1/6/1999 17:44'!initializeNames	"Name some colors."	"Color initializeNames"	ColorNames _ OrderedCollection new.	self named: #black put: (Color r: 0 g: 0 b: 0).	self named: #veryVeryDarkGray put: (Color r: 0.125 g: 0.125 b: 0.125).	self named: #veryDarkGray put: (Color r: 0.25 g: 0.25 b: 0.25).	self named: #darkGray put: (Color r: 0.375 g: 0.375 b: 0.375).	self named: #gray put: (Color r: 0.5 g: 0.5 b: 0.5).	self named: #lightGray put: (Color r: 0.625 g: 0.625 b: 0.625).	self named: #veryLightGray put: (Color r: 0.75 g: 0.75 b: 0.75).	self named: #veryVeryLightGray put: (Color r: 0.875 g: 0.875 b: 0.875).	self named: #white put: (Color r: 1.0 g: 1.0 b: 1.0).	self named: #red put: (Color r: 1.0 g: 0 b: 0).	self named: #yellow put: (Color r: 1.0 g: 1.0 b: 0).	self named: #green put: (Color r: 0 g: 1.0 b: 0).	self named: #cyan put: (Color r: 0 g: 1.0 b: 1.0).	self named: #blue put: (Color r: 0 g: 0 b: 1.0).	self named: #magenta put: (Color r: 1.0 g: 0 b: 1.0).	self named: #brown put: (Color r: 0.6 g: 0.2 b: 0).	self named: #orange put: (Color r: 1.0 g: 0.6 b: 0).	self named: #lightRed put: (Color r: 1.0 g: 0.8 b: 0.8).	self named: #lightYellow put: (Color r: 1.0 g: 1.0 b: 0.8).	self named: #lightGreen put: (Color r: 0.8 g: 1.0 b: 0.6).	self named: #lightCyan put: (Color r: 0.4 g: 1.0 b: 1.0).	self named: #lightBlue put: (Color r: 0.8 g: 1.0 b: 1.0).	self named: #lightMagenta put: (Color r: 1.0 g: 0.8 b: 1.0).	self named: #lightBrown put: (Color r: 1.0 g: 0.6 b: 0.2).	self named: #lightOrange put: (Color r: 1.0 g: 0.8 b: 0.4).	self named: #transparent put: (TranslucentColor new alpha: 0.0).! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'di 1/6/1999 08:36'!target: anObject	target _ anObject.	(target respondsTo: #color)		ifTrue: [selectedColor _ target color]		ifFalse: [selectedColor _ color white].! !!ColorPickerMorph methodsFor: 'private' stamp: 'di 1/6/1999 09:55'!pickColorAt: aPoint	| worldBox globalP c alpha |	(FeedbackBox containsPoint: aPoint - self topLeft) ifTrue: [^ self].  "do nothing"	"pick up color, either inside or outside this world"	worldBox _ self world viewBox.	globalP _ aPoint + worldBox topLeft.  "get point in screen coordinates"	(worldBox containsPoint: globalP)		ifTrue: [c _ self world colorAt: aPoint belowMorph: Morph new]		ifFalse: [c _ Display colorAt: globalP].	"check for transparent color and update using appropriate feedback color"	(TransparentBox containsPoint: aPoint - self topLeft)		ifTrue: [Display depth >= 16				ifTrue: [alpha _ (aPoint x - bounds left - 10) asFloat								/ (TransparentBox width - FeedbackBox width - 20)									min: 1.0 max: 0.0.						self updateColor: (selectedColor alpha: alpha) feedbackColor: (selectedColor alpha: alpha)]				ifFalse: [self updateColor: Color transparent feedbackColor: Color white]]		ifFalse: [self updateColor: (selectedColor isTranslucentColor									ifTrue: [c alpha: selectedColor alpha]									ifFalse: [c])					feedbackColor: c]! !!ColorPickerMorph methodsFor: 'private' stamp: 'di 1/6/1999 08:43'!updateTargetColor	(target ~~ nil and: [selector ~~ nil]) ifTrue:		[selector numArgs = 2			ifTrue: [target perform: selector with: selectedColor with: sourceHand]			ifFalse: [target perform: selector with: selectedColor]].! !!TranslucentColor methodsFor: 'conversions' stamp: 'di 1/6/1999 16:15'!pixelValueForDepth: d	"Return the pixel value for this color at the given depth. Translucency only works in RGB; this color will appear either opaque or transparent at all other depths."	alpha = 0 ifTrue: [^ 0].	^ super pixelValueForDepth: d! !!TranslucentColor methodsFor: 'conversions' stamp: 'di 1/6/1999 16:14'!pixelWordForDepth: depth	"Return the pixel value for this color at the given depth. Translucency only works in RGB; this color will appear either opaque or transparent at all other depths."	| basicPixelWord |	alpha = 0 ifTrue: [^ 0].	basicPixelWord _ super pixelWordForDepth: depth.	depth < 32		ifTrue: [^ basicPixelWord]		ifFalse: [^ (basicPixelWord bitAnd: 16rFFFFFF) bitOr: (alpha bitShift: 24)].! !Color removeSelector: #isOpaqueMask!Color class removeSelector: #opaqueMask!"Postscript:Get rid of all extant instances of TransparentColor."Color removeClassVarName: 'OpaqueMask'.TransparentColor allInstances do:	[:c | c become: (TranslucentColor new alpha: 0)].Color initializeNames.Smalltalk removeClassNamed: #OpaqueMaskColor.Smalltalk removeClassNamed: #TransparentColor.!