'From Squeak 2.3 of January 14, 1999 on 14 January 1999 at 10:06:53 am'!"Change Set:		StepAndPassivateFixesDate:			14 January 1999Author:			Dan IngallsMakes SystemWindows behave properly in a morphic project in MVC.Also adds wantsSteps to Scamper, IRC and InspectorBrowser.Also renames Debugger step to doStep, and adds updating behavior to the debugger in morphic."!!Debugger methodsFor: 'context stack menu' stamp: 'di 1/14/1999 09:18'!contextStackMenu: aMenu shifted: shifted	^ shifted ifFalse: [aMenu labels: 'fullStack (f)restart (r)proceed (p)step (t)send (e)where (w)senders of...implementors of...method inheritanceversionsinst var refs...inst var defs...class var refs...class variablesclass refsbrowse fullmore...'	lines: #(6 10 12 15)	selections: #(fullStack restart proceed doStep send wherebrowseSendersOfMessages browseMessages methodHierarchy browseVersionsbrowseInstVarRefs browseInstVarDefsbrowseClassVarRefs browseClassVariables browseClassRefsbrowseMethodFullshiftedYellowButtonActivity)]	ifTrue: [aMenu labels: 'browse class hierarchybrowse classbrowse methodimplementors of sent messageschange sets with this methodinspect instancesinspect subinstancesrevert to previous versionremove from current change setrevert and forgetmore...' 	lines: #(5 7 10)	selections: #(classHierarchy browseClass 		buildMessageBrowser browseAllMessages findMethodInChangeSets 		inspectInstances inspectSubInstances		revertToPreviousVersion 		removeFromCurrentChanges revertAndForget		unshiftedYellowButtonActivity)]! !!Debugger methodsFor: 'context stack menu' stamp: 'di 1/14/1999 09:18'!doStep	"Send the selected message in the accessed method, and regain control 	after the invoked method returns."		| currentContext oldMethod |	self okToChange ifFalse: [^ self].	self checkContextSelection.	externalInterrupt ifFalse: [contextStackTop push: proceedValue].	externalInterrupt _ true. "simulation leaves same state as interrupting"	currentContext _ self selectedContext.	self contextStackIndex > 1		ifTrue: 			[currentContext completeCallee: contextStackTop.			self resetContext: currentContext]		ifFalse: 			[currentContext stepToSendOrReturn.			currentContext willReturn				ifTrue: 					[oldMethod _ currentContext method.					currentContext _ currentContext step.					currentContext stepToSendOrReturn.					self resetContext: currentContext.					oldMethod == currentContext method "didnt used to update pc here"						ifTrue: [self changed: #contentsSelection]]				ifFalse: 					[currentContext completeCallee: currentContext step.					self changed: #contentsSelection.					self updateInspectors]]! !!Debugger methodsFor: 'dependents access' stamp: 'di 1/14/1999 09:28'!step 	"Update the inspectors."	receiverInspector ifNotNil: [receiverInspector step].	contextVariablesInspector ifNotNil: [contextVariablesInspector step].! !!Debugger methodsFor: 'dependents access' stamp: 'di 1/14/1999 09:25'!wantsSteps 	^ true! !!Debugger class methodsFor: 'class initialization' stamp: 'di 1/14/1999 09:17'!initialize	ErrorRecursion _ false.	ContextStackKeystrokes _ Dictionary new		at: $e put: #send;		at: $t put: #doStep;		at: $p put: #proceed;		at: $r put: #restart;		at: $f put: #fullStack;		at: $w put: #where;		yourself.	"Debugger initialize"! !!IRCConnection methodsFor: 'private' stamp: 'di 1/14/1999 09:12'!wantsSteps	^ true! !!InspectorBrowser methodsFor: 'all' stamp: 'di 1/14/1999 09:01'!wantsSteps	^ true! !!Interpreter methodsFor: 'debug support' stamp: 'ikp 1/14/1999 14:14'!okayInterpreterObjects	| oopOrZero oop |	self okayFields: nilObj.	self okayFields: falseObj.	self okayFields: trueObj.	self okayFields: specialObjectsOop.	self okayFields: activeContext.	self okayFields: method.	self okayFields: receiver.	self okayFields: theHomeContext.	self okayFields: messageSelector.	self okayFields: newMethod.	0 to: MethodCacheEntries - 1 by: MethodCacheEntrySize do: [ :i |		oopOrZero _ methodCache at: i + MethodCacheSelector.		oopOrZero = 0 ifFalse: [			self okayFields: (methodCache at: i + MethodCacheSelector).			self okayFields: (methodCache at: i + MethodCacheClass).			self okayFields: (methodCache at: i + MethodCacheMethod).		].	].	1 to: remapBufferCount do: [ :i |		oop _ remapBuffer at: i.		(self isIntegerObject: oop) ifFalse: [			self okayFields: oop.		].	].	self okayActiveProcessStack.! !!Scamper methodsFor: 'stepping' stamp: 'di 1/14/1999 09:00'!wantsSteps	^ true! !!SystemWindow methodsFor: 'top window' stamp: 'di 1/14/1999 08:50'!passivate	"Make me unable to respond to mouse and keyboard"	self setStripeColorsFrom: self paneColor.	self submorphsDo:		[:m | (m == closeBox or: [m == collapseBox])				ifTrue: ["Control boxes remain active, except in novice mode"						Preferences noviceMode ifTrue: [m lock]]				ifFalse: [m lock]].	self world ifNotNil:  "clean damage now, so dont merge this rect with new top window"		[self world == World ifTrue: [self world displayWorld]]! !Debugger initialize!