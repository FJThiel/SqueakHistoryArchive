'From Squeak3.8gamma of ''24 November 2004'' [latest update: #6485] on 3 December 2004 at 5:49:27 pm'!"Change Set:		nonAsciiFix38gDate:			3 December 2004Author:			Yoshiki OhshimaAttempts to try to fix most of the wrong non-ascii chars."!!DataStream methodsFor: 'write and read' stamp: 'yo 12/3/2004 17:12'!beginReference: anObject    "We're starting to read anObject. Remember it and its reference     position (if we care; ReferenceStream cares). Answer the     reference position."    ^ 0! !!DataStream methodsFor: 'write and read' stamp: 'yo 12/3/2004 17:25'!noteCurrentReference: typeID    "PRIVATE -- If we support references for type typeID, remember     the current byteStream position so we can add the next object to     the 'objects' dictionary, and return true. Else return false.     This method is here to be overridden by ReferenceStream"    ^ false! !!DataStream methodsFor: 'write and read' stamp: 'yo 12/3/2004 17:12'!readFloatString	"PRIVATE -- Read the contents of a Float string.	 This is the slow way to read a Float--via its string rep'n.	 It's here for compatibility with old data files."	^ Float readFrom: (byteStream next: (byteStream nextNumber: 4))! !!DataStream methodsFor: 'write and read' stamp: 'yo 12/3/2004 16:59'!tryToPutReference: anObject typeID: typeID    "PRIVATE -- If we support references for type typeID, and if       anObject already appears in my output stream, then put a       reference to the place where anObject already appears. If we       support references for typeID but didn't already put anObject,       then associate the current stream position with anObject in       case one wants to nextPut: it again.     Return true after putting a reference; false if the object still       needs to be put.     For DataStream this is trivial. ReferenceStream overrides this."    ^ false! !!DataStream methodsFor: 'write and read' stamp: 'yo 12/3/2004 17:07'!writeFloatString: aFloat    "PRIVATE -- Write the contents of a Float string.     This is the slow way to write a Float--via its string rep'n."    self writeByteArray: (aFloat printString)! !!DataStream methodsFor: 'other' stamp: 'yo 12/3/2004 17:14'!errorWriteReference: anInteger    "PRIVATE -- Raise an error because this case of nextPut:'s perform:     shouldn't be called. -- 11/15/92 jhm"    self error: 'This should never be called'! !!Debugger methodsFor: 'private' stamp: 'yo 12/3/2004 17:14'!lowSpaceChoices	"Return a notifier message string to be presented when space is running low."	^ 'Warning!! Squeak is almost out of memory!!Low space detection is now disabled. It will be restored when you close or proceed from this error notifier. Don''t panic, but do proceed with caution.Here are some suggestions: If you suspect an infinite recursion (the same methods calling each other again and again), then close this debugger, and fix the problem. If you want this computation to finish, then make more space available (read on) and choose "proceed" in this debugger. Here are some ways to make more space available...   > Close any windows that are not needed.   > Get rid of some large objects (e.g., images).   > Leave this window on the screen, choose "save as..." from the screen menu, quit, restart the Squeak VM with a larger memory allocation, then restart the image you just saved, and choose "proceed" in this window. If you want to investigate further, choose "debug" in this window.  Do not use the debugger "fullStack" command unless you are certain that the stack is not very deep. (Trying to show the full stack will definitely use up all remaining memory if the low-space problem is caused by an infinite recursion!!).'! !!FileContentsBrowser methodsFor: 'infoView' stamp: 'sw 10/7/2004 23:13'!infoViewContents	"Answer the string to show in the info view"	| theClass stamp exists |	editSelection == #newClass ifTrue: [^ self packageInfo: self selectedPackage].	self selectedClass isNil ifTrue: [^ ''].	theClass _ Smalltalk at: self selectedClass name asSymbol ifAbsent: [].	editSelection == #editClass ifTrue:		[^ theClass notNil			ifTrue: ['Class exists already in the system' translated]			ifFalse: ['New class' translated]].	editSelection == #editMessage ifFalse: [^ ''].	(theClass notNil and: [self metaClassIndicated])		ifTrue: [theClass _ theClass class].	stamp _ self selectedClassOrMetaClass stampAt: self selectedMessageName.	exists _ theClass notNil and: [theClass includesSelector: self selectedMessageName].	^ stamp = 'methodWasRemoved'		ifTrue:			[exists				ifTrue:					['Existing method removed  by this change-set' translated]				ifFalse:					['Removal request for a method that is not present in this image' translated]]		ifFalse:			[stamp, ' · ',				(exists 					ifTrue: ['Method already exists' translated , self extraInfo]					ifFalse: ['New method' translated])]! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'yo 12/3/2004 17:47'!isoCountryString	"This list states the country names (official short names in English) in alphabetical order as given in ISO 3166-1 and the corresponding ISO 3166-1-alpha-2 code elements. The list is updated whenever a change to the official code list in ISO 3166-1 is effected by the ISO 3166/MA. It lists 240 official short names and code elements. One line of text contains one entry. A country name and its code element are separated by a semicolon (;)."	^'AF	AFGHANISTANAX	ÅLAND ISLANDSAL	ALBANIADZ	ALGERIAAS	AMERICAN SAMOAAD	ANDORRAAO	ANGOLAAI	ANGUILLAAQ	ANTARCTICAAG	ANTIGUA AND BARBUDAAR	ARGENTINAAM	ARMENIAAW	ARUBAAU	AUSTRALIAAT	AUSTRIAAZ	AZERBAIJANBS	BAHAMASBH	BAHRAINBD	BANGLADESHBB	BARBADOSBY	BELARUSBE	BELGIUMBZ	BELIZEBJ	BENINBM	BERMUDABT	BHUTANBO	BOLIVIABA	BOSNIA AND HERZEGOVINABW	BOTSWANABV	BOUVET ISLANDBR	BRAZILIO	BRITISH INDIAN OCEAN TERRITORYBN	BRUNEI DARUSSALAMBG	BULGARIABF	BURKINA FASOBI	BURUNDIKH	CAMBODIACM	CAMEROONCA	CANADACV	CAPE VERDEKY	CAYMAN ISLANDSCF	CENTRAL AFRICAN REPUBLICTD	CHADCL	CHILECN	CHINACX	CHRISTMAS ISLANDCC	COCOS (KEELING) ISLANDSCO	COLOMBIAKM	COMOROSCG	CONGOCD	CONGO, THE DEMOCRATIC REPUBLIC OF THECK	COOK ISLANDSCR	COSTA RICACI	COTE D''IVOIREHR	CROATIACU	CUBACY	CYPRUSCZ	CZECH REPUBLICDK	DENMARKDJ	DJIBOUTIDM	DOMINICADO	DOMINICAN REPUBLICEC	ECUADOREG	EGYPTSV	EL SALVADORGQ	EQUATORIAL GUINEAER	ERITREAEE	ESTONIAET	ETHIOPIAFK	FALKLAND ISLANDS (MALVINAS)FO	FAROE ISLANDSFJ	FIJIFI	FINLANDFR	FRANCEGF	FRENCH GUIANAPF	FRENCH POLYNESIATF	FRENCH SOUTHERN TERRITORIESGA	GABONGM	GAMBIAGE	GEORGIADE	GERMANYGH	GHANAGI	GIBRALTARGR	GREECEGL	GREENLANDGD	GRENADAGP	GUADELOUPEGU	GUAMGT	GUATEMALAGN	GUINEAGW	GUINEA-BISSAUGY	GUYANAHT	HAITIHM	HEARD ISLAND AND MCDONALD ISLANDSVA	HOLY SEE (VATICAN CITY STATE)HN	HONDURASHK	HONG KONGHU	HUNGARYIS	ICELANDIN	INDIAID	INDONESIAIR	IRAN, ISLAMIC REPUBLIC OFIQ	IRAQIE	IRELANDIL	ISRAELIT	ITALYJM	JAMAICAJP	JAPANJO	JORDANKZ	KAZAKHSTANKE	KENYAKI	KIRIBATIKP	KOREA, DEMOCRATIC PEOPLE''S REPUBLIC OFKR	KOREA, REPUBLIC OFKW	KUWAITKG	KYRGYZSTANLA	LAO PEOPLE''S DEMOCRATIC REPUBLICLV	LATVIALB	LEBANONLS	LESOTHOLR	LIBERIALY	LIBYAN ARAB JAMAHIRIYALI	LIECHTENSTEINLT	LITHUANIALU	LUXEMBOURGMO	MACAOMK	MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OFMG	MADAGASCARMW	MALAWIMY	MALAYSIAMV	MALDIVESML	MALIMT	MALTAMH	MARSHALL ISLANDSMQ	MARTINIQUEMR	MAURITANIAMU	MAURITIUSYT	MAYOTTEMX	MEXICOFM	MICRONESIA, FEDERATED STATES OFMD	MOLDOVA, REPUBLIC OFMC	MONACOMN	MONGOLIAMS	MONTSERRATMA	MOROCCOMZ	MOZAMBIQUEMM	MYANMARNA	NAMIBIANR	NAURUNP	NEPALNL	NETHERLANDSAN	NETHERLANDS ANTILLESNC	NEW CALEDONIANZ	NEW ZEALANDNI	NICARAGUANE	NIGERNG	NIGERIANU	NIUENF	NORFOLK ISLANDMP	NORTHERN MARIANA ISLANDSNO	NORWAYOM	OMANPK	PAKISTANPW	PALAUPS	PALESTINIAN TERRITORY, OCCUPIEDPA	PANAMAPG	PAPUA NEW GUINEAPY	PARAGUAYPE	PERUPH	PHILIPPINESPN	PITCAIRNPL	POLANDPT	PORTUGALPR	PUERTO RICOQA	QATARRE	REUNIONRO	ROMANIARU	RUSSIAN FEDERATIONRW	RWANDASH	SAINT HELENAKN	SAINT KITTS AND NEVISLC	SAINT LUCIAPM	SAINT PIERRE AND MIQUELONVC	SAINT VINCENT AND THE GRENADINESWS	SAMOASM	SAN MARINOST	SAO TOME AND PRINCIPESA	SAUDI ARABIASN	SENEGALCS	SERBIA AND MONTENEGROSC	SEYCHELLESSL	SIERRA LEONESG	SINGAPORESK	SLOVAKIASI	SLOVENIASB	SOLOMON ISLANDSSO	SOMALIAZA	SOUTH AFRICAGS	SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDSES	SPAINLK	SRI LANKASD	SUDANSR	SURINAMESJ	SVALBARD AND JAN MAYENSZ	SWAZILANDSE	SWEDENCH	SWITZERLANDSY	SYRIAN ARAB REPUBLICTW	TAIWAN, PROVINCE OF CHINATJ	TAJIKISTANTZ	TANZANIA, UNITED REPUBLIC OFTH	THAILANDTL	TIMOR-LESTETG	TOGOTK	TOKELAUTO	TONGATT	TRINIDAD AND TOBAGOTN	TUNISIATR	TURKEYTM	TURKMENISTANTC	TURKS AND CAICOS ISLANDSTV	TUVALUUG	UGANDAUA	UKRAINEAE	UNITED ARAB EMIRATESGB	UNITED KINGDOMUS	UNITED STATESUM	UNITED STATES MINOR OUTLYING ISLANDSUY	URUGUAYUZ	UZBEKISTANVU	VANUATUVE	VENEZUELAVN	VIET NAMVG	VIRGIN ISLANDS, BRITISHVI	VIRGIN ISLANDS, U.S.WF	WALLIS AND FUTUNAEH	WESTERN SAHARAYE	YEMENZM	ZAMBIAZW	ZIMBABWE'! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'yo 12/3/2004 17:46'!isoLanguages	"ISO 639: 3-letter codes"	^'abk	ab	Abkhazianace		Achineseach		Acoliada		Adangmeaar	aa	Afarafh		Afrihiliafr	af	Afrikaansafa		Afro-Asiatic (Other)aka		Akanakk		Akkadianalb/sqi	sq	Albanianale		Aleutalg		Algonquian languagestut		Altaic (Other)amh	am	Amharicapa		Apache languagesara	ar	Arabicarc		Aramaicarp		Arapahoarn		Araucanianarw		Arawakarm/hye	hy	Armenianart		Artificial (Other)asm	as	Assameseath		Athapascan languagesmap		Austronesian (Other)ava		Avaricave		Avestanawa		Awadhiaym	ay	Aymaraaze	az	Azerbaijaninah		Aztecban		Balinesebat		Baltic (Other)bal		Baluchibam		Bambarabai		Bamileke languagesbad		Bandabnt		Bantu (Other)bas		Basabak	ba	Bashkirbaq/eus	eu	Basquebej		Bejabem		Bembaben	bn	Bengaliber		Berber (Other)bho		Bhojpuribih	bh	Biharibik		Bikolbin		Binibis	bi	Bislamabra		Brajbre	be	Bretonbug		Buginesebul	bg	Bulgarianbua		Buriatbur/mya	my	Burmesebel	be	Byelorussiancad		Caddocar		Caribcat	ca	Catalancau		Caucasian (Other)ceb		Cebuanocel		Celtic (Other)cai		Central American Indian (Other)chg		Chagataicha		Chamorroche		Chechenchr		Cherokeechy		Cheyennechb		Chibchachi/zho	zh	Chinesechn		Chinook jargoncho		Choctawchu		Church Slavicchv		Chuvashcop		Copticcor		Cornishcos	co	Corsicancre		Creemus		Creekcrp		Creoles and Pidgins (Other)cpe		Creoles and Pidgins, English-based (Other)cpf		Creoles and Pidgins, French-based (Other)cpp		Creoles and Pidgins, Portuguese-based (Other)cus		Cushitic (Other)	hr	Croatiances/cze	cs	Czechdak		Dakotadan	da	Danishdel		Delawaredin		Dinkadiv		Divehidoi		Dogridra		Dravidian (Other)dua		Dualadut/nla	nl	Dutchdum		Dutch, Middle (ca. 1050-1350)dyu		Dyuladzo	dz	Dzongkhaefi		Efikegy		Egyptian (Ancient)eka		Ekajukelx		Elamiteeng	en	Englishenm		English, Middle (ca. 1100-1500)ang		English, Old (ca. 450-1100)esk		Eskimo (Other)epo	eo	Esperantoest	et	Estonianewe		Eweewo		Ewondofan		Fangfat		Fantifao	fo	Faroesefij	fj	Fijianfin	fi	Finnishfiu		Finno-Ugrian (Other)fon		Fonfra/fre	fr	Frenchfrm		French, Middle (ca. 1400-1600)fro		French, Old (842- ca. 1400)fry	fy	Frisianful		Fulahgaa		Gagae/gdh		Gaelic (Scots)glg	gl	Galleganlug		Gandagay		Gayogez		Geezgeo/kat	ka	Georgiandeu/ger	de	Germangmh		German, Middle High (ca. 1050-1500)goh		German, Old High (ca. 750-1050)gem		Germanic (Other)gil		Gilbertesegon		Gondigot		Gothicgrb		Grebogrc		Greek, Ancient (to 1453)ell/gre	el	Greek, Modern (1453-)kal	kl	Greenlandicgrn	gn	Guaraniguj	gu	Gujaratihai		Haidahau	ha	Hausahaw		Hawaiianheb	he	Hebrewher		Hererohil		Hiligaynonhim		Himachalihin	hi	Hindihmo		Hiri Motuhun	hu	Hungarianhup		Hupaiba		Ibanice/isl	is	Icelandicibo		Igboijo		Ijoilo		Ilokoinc		Indic (Other)ine		Indo-European (Other)ind	id	Indonesianina	ia	Interlingua (International Auxiliary language Association)ine		 Interlingueiku	iu	Inuktitutipk	ik	Inupiakira		Iranian (Other)gai/iri	ga	Irishsga		Irish, Old (to 900)mga		Irish, Middle (900 - 1200)iro		Iroquoian languagesita	it	Italianjpn	ja	Japanesejav/jaw	jv/jw Javanesejrb		Judeo-Arabicjpr		Judeo-Persiankab		Kabylekac		Kachinkam		Kambakan	kn	Kannadakau		Kanurikaa		Kara-Kalpakkar		Karenkas	ks	Kashmirikaw		Kawikaz	kk	Kazakhkha		Khasikhm	km	Khmerkhi		Khoisan (Other)kho		Khotanesekik		Kikuyukin	rw	Kinyarwandakir	ky	Kirghizkom		Komikon		Kongokok		Konkanikor	ko	Koreankpe		Kpellekro		Krukua		Kuanyamakum		Kumykkur	ku	Kurdishkru		Kurukhkus		Kusaiekut		Kutenailad		Ladinolah		Lahndalam		Lambaoci	oc	Langue d''Oc (post 1500)lao	lo	Laolat	la	Latinlav	lv	Latvianltz		Letzeburgeschlez		Lezghianlin	ln	Lingalalit	lt	Lithuanianloz		Lozilub		Luba-Katangalui		Luisenolun		Lundaluo		Luo (Kenya and Tanzania)mac/mak	mk	Macedonianmad		Maduresemag		Magahimai		Maithilimak		Makasarmlg	mg	Malagasymay/msa	ms	Malaymal		Malayalammlt	ml	Malteseman		Mandingomni		Manipurimno		Manobo languagesmax		Manxmao/mri	mi	Maorimar	mr	Marathichm		Marimah		Marshallmwr		Marwarimas		Masaimyn		Mayan languagesmen		Mendemic		Micmacmin		Minangkabaumis		Miscellaneous (Other)moh		Mohawkmol	mo	Moldavianmkh		Mon-Kmer (Other)lol		Mongomon	mn	Mongolianmos		Mossimul		Multiple languagesmun		Munda languagesnau	na	Naurunav		Navajonde		Ndebele, Northnbl		Ndebele, Southndo		Ndongonep	ne	Nepalinew		Newarinic		Niger-Kordofanian (Other)ssa		Nilo-Saharan (Other)niu		Niueannon		Norse, Oldnai		North American Indian (Other)nor	no	Norwegiannno		Norwegian (Nynorsk)nub		Nubian languagesnym		Nyamwezinya		Nyanjanyn		Nyankolenyo		Nyoronzi		Nzimaoji		Ojibwaori	or	Oriyaorm	om	Oromoosa		Osageoss		Osseticoto		Otomian languagespal		Pahlavipau		Palauanpli		Palipam		Pampangapag		Pangasinanpan	pa	Panjabipap		Papiamentopaa		Papuan-Australian (Other)fas/per	fa	Persianpeo		Persian, Old (ca 600 - 400 B.C.)phn		Phoenicianpol	pl	Polishpon		Ponapepor	pt	Portuguesepra		Prakrit languagespro		Provencal, Old (to 1500)pus	ps	Pushtoque	qu	Quechuaroh	rm	Rhaeto-Romanceraj		Rajasthanirar		Rarotonganroa		Romance (Other)ron/rum	ro	Romanianrom		Romanyrun	rn	Rundirus	ru	Russiansal		Salishan languagessam		Samaritan Aramaicsmi		Sami languagessmo	sm	Samoansad		Sandawesag	sg	Sangosan	sa	Sanskritsrd		Sardiniansco		Scotssel		Selkupsem		Semitic (Other)	sr	Serbianscr	sh	Serbo-Croatiansrr		Serershn		Shansna	sn	Shonasid		Sidamobla		Siksikasnd	sd	Sindhisin	si	Singhalesesit		Sino-Tibetan (Other)sio		Siouan languagessla		Slavic (Other)ssw	ss	Siswantslk/slo	sk	Slovakslv	sl	Sloveniansog		Sogdiansom	so	Somalison		Songhaiwen		Sorbian languagesnso		Sotho, Northernsot	st	Sotho, Southernsai		South American Indian (Other)esl/spa	es	Spanishsuk		Sukumasux		Sumeriansun	su	Sudanesesus		Sususwa	sw	Swahilissw		Swazisve/swe	sv	Swedishsyr		Syriactgl	tl	Tagalogtah		Tahitiantgk	tg	Tajiktmh		Tamashektam	ta	Tamiltat	tt	Tatartel	te	Teluguter		Terenotha	th	Thaibod/tib	bo	Tibetantig		Tigretir	ti	Tigrinyatem		Timnetiv		Tivitli		Tlingittog	to	Tonga (Nyasa)ton		Tonga (Tonga Islands)tru		Truktsi		Tsimshiantso	ts	Tsongatsn	tn	Tswanatum		Tumbukatur	tr	Turkishota		Turkish, Ottoman (1500 - 1928)tuk	tk	Turkmentyv		Tuviniantwi	tw	Twiuga		Ugariticuig	ug	Uighurukr	uk	Ukrainianumb		Umbunduund		Undeterminedurd	ur	Urduuzb	uz	Uzbekvai		Vaiven		Vendavie	vi	Vietnamesevol	vo	Volapükvot		Voticwak		Wakashan languageswal		Walamowar		Waraywas		Washocym/wel	cy	Welshwol	wo	Wolofxho	xh	Xhosasah		Yakutyao		Yaoyap		Yapyid	yi	Yiddishyor	yo	Yorubazap		Zapoteczen		Zenagazha	za	Zhuangzul	zu	Zuluzun		Zuni'! !!MessageSet methodsFor: 'private' stamp: 'yo 12/3/2004 17:23'!initializeMessageList: anArray	"Initialize my messageList from the given list of MethodReference or string objects.  NB: special handling for uniclasses."	| s |	messageList _ OrderedCollection new.	anArray do: [ :each |		MessageSet 			parse: each  			toClassAndSelector: [ :class :sel |				class ifNotNil:					[class isUniClass						ifTrue:							[s _ class typicalInstanceName, ' ', sel]						ifFalse:							[s _ class name , ' ' , sel , ' {' , 								((class organization categoryOfElement: sel) ifNil: ['']) , '}'].					messageList add: (						MethodReference new							setClass: class  							methodSymbol: sel 							stringVersion: s)]]].	messageListIndex _ messageList isEmpty ifTrue: [0] ifFalse: [1].	contents _ ''! !!MidiPrimTester class methodsFor: 'class initialization' stamp: 'yo 12/3/2004 17:05'!initialize	"Initialize the MIDI parameter constants."	"MidiPrimTester initialize"	Installed _ 1.		"Read-only. Return 1 if a MIDI driver is installed, 0 if not.		 On OMS-based MIDI drivers, this returns 1 only if the OMS		 system is properly installed and configured."	Version _ 2.		"Read-only. Return the integer version number of this MIDI driver.		 The version numbering sequence is relative to a particular driver.		 That is, version 3 of the Macintosh MIDI driver is not necessarily		 related to version 3 of the Win95 MIDI driver."	HasBuffer _ 3.		"Read-only. Return 1 if this MIDI driver has a time-stamped output		 buffer, 0 otherwise. Such a buffer allows the client to schedule		 MIDI output packets to be sent later. This can allow more precise		 timing, since the driver uses timer interrupts to send the data		 at the right time even if the processor is in the midst of a		 long-running Squeak primitive or is running some other application		 or system task."	HasDurs _ 4.		"Read-only. Return 1 if this MIDI driver supports an extended		 primitive for note-playing that includes the note duration and		 schedules both the note-on and the note-off messages in the		 driver. Otherwise, return 0."	CanSetClock _ 5.		"Read-only. Return 1 if this MIDI driver's clock can be set		 via an extended primitive, 0 if not."	CanUseSemaphore _ 6.		"Read-only. Return 1 if this MIDI driver can signal a semaphore		 when MIDI input arrives. Otherwise, return 0. If this driver		 supports controller caching and it is enabled, then incoming		 controller messages will not signal the semaphore."	EchoOn _ 7.		"Read-write. If this flag is set to a non-zero value, and if		 the driver supports echoing, then incoming MIDI events will		 be echoed immediately. If this driver does not support echoing,		 then queries of this parameter will always return 0 and		 attempts to change its value will do nothing."	UseControllerCache _ 8.		"Read-write. If this flag is set to a non-zero value, and if		 the driver supports a controller cache, then the driver will		 maintain a cache of the latest value seen for each MIDI controller,		 and control update messages will be filtered out of the incoming		 MIDI stream. An extended MIDI primitive allows the client to		 poll the driver for the current value of each controller. If		 this driver does not support a controller cache, then queries		 of this parameter will always return 0 and attempts to change		 its value will do nothing."	EventsAvailable _ 9.		"Read-only. Return the number of MIDI packets in the input queue."	FlushDriver _ 10.		"Write-only. Setting this parameter to any value forces the driver		 to flush its I/0 buffer, discarding all unprocessed data. Reading		 this parameter returns 0. Setting this parameter will do nothing		 if the driver does not support buffer flushing."	ClockTicksPerSec _ 11.		"Read-only. Return the MIDI clock rate in ticks per second."	HasInputClock _ 12.		"Read-only. Return 1 if this MIDI driver timestamps incoming		 MIDI data with the current value of the MIDI clock, 0 otherwise.		 If the driver does not support such timestamping, then the		 client must read input data frequently and provide its own		 timestamping."! !!Morph methodsFor: 'naming' stamp: 'yo 12/3/2004 17:02'!setNameTo: aName 	| nameToUse nameString |	nameToUse := aName ifNotNil: 					[(nameString := aName asString) notEmpty ifTrue: [nameString] ifFalse: ['*']].	self setNamePropertyTo: nameToUse	"no Texts here!!"! !!StackMorph class methodsFor: 'parts bin' stamp: 'sw 4/8/2002 09:30'!stackHelpWindow	^ (Workspace new contents: 'A "stack" is a place where you can create, store, view and retrieve data "fields" from a set of "cards".  Data that you want to occur on every card (such as a name and an address in an Address Stack) are represented by objects such as "Simple Text", "Fancy Text", and "Scrolling Text" that you obtain from the Stack Tools flap.When you look at a card in a Stack, you may be seeing three different kinds of material.  Press the § button in the stack''s controls to see the current designations, and use the "explain designations" to get a reminder of what the three different colors mean.·  Things that are designated to be seen on every card, and have the same contents whichever card is being shown. (green)·  Things that are designated to be seen on every card, with each card having its own value for them. (orange)·  Things that are designated to occur only on the particular card at hand. (red)Use the "stack/cards" menu (in an object''s halo menu) to change the designation of any object.  For example, if you have an object that is private to just one card, and you want to make it visible on all cards, use "place onto background".  If you further want it to hold a separate value for each separate card, use "start holding separate data for each instance".The normal sequence to define a Stack''s structure is to obtain a blank Stack, then create your fields by grabbing what you want from the Stack Tools flap and dropping it where you want it in the stack.  For easiest use, give a name to each field (by editing the name in its halo) *before* you put it onto the background..  Those fields that you want to represent the basic data of the stack need to be given names, placed on the background, and then told to hold separate data.When you hit the + button in a stack''s controls, a new card is created with default values in all the fields.  You can arrange for a particular default value to be used in a field -- do this either for one field at a time with "be default value on new card", or you can request that the all the values seen on a particular card serve as default by choosing "be defaults for new cards" from the stack''s · menu.It is also possible to have multiple "backgrounds" in the same stack -- each different background defines a different data structure, and cards from multiple backgrounds can be freely mixed in the same stack.Besides text fields, it is also possible to have picture-valued fields -- and potentially fields with data values of any other type as well.')	embeddedInMorphicWindowLabeled: 'Stack Help'	"StackMorph stackHelpWindow"! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'yo 12/3/2004 17:01'!alanBinaryPostRcvr: aNode key: key args: args	| nodeWithNilReceiver row |"==Repeat for collection [ collect ( from foo. blah blah foo blah) ]Repeat for 1 to 50 [ do ( from i. blah blab i blah ) ]=="	nodeWithNilReceiver _ aNode copy receiver: nil.	(row _ self addRow: #keyword2 on: nodeWithNilReceiver)		borderWidth: 1;		parseNode: (nodeWithNilReceiver as: MessageNode);		borderColor: row stdBorderColor.	row addToken: key asString		type: #binary		on: (SelectorNode new key: key asString code: nil "fill this in?").	args first asMorphicSyntaxIn: row.! !!Utilities class methodsFor: 'identification' stamp: 'yo 12/3/2004 17:04'!methodsWithInitials: targetInitials	"Based on a do-it contributed to the Squeak mailing list by Göran Hultgen: Browse methods whose initials (in the time-stamp, as logged to disk) match the given initials. Print out the complete time-stamp table to the Transcript. Answer a list of (initials -> count) associations.CAUTION: It may take several minutes for this to complete."	"Time millisecondsToRun: [Utilities methodsWithInitials: 'bf']"	| initials timeStamp  allSubmitters |	initials _ ''.	timeStamp _ ''.	allSubmitters _ Bag new.	self systemNavigation		browseAllSelect:			[:cm |				timeStamp _ Utilities timeStampForMethod: cm.				initials _ timeStamp isEmpty					ifTrue:						['']					ifFalse:						[timeStamp substrings first].				initials _ initials isEmpty					ifTrue:						['<no time stamp>']					ifFalse:						[initials first isDigit							ifTrue:								['<date>']							ifFalse:								[initials]].				allSubmitters add: initials.				(initials = targetInitials)]		name: ('Methods with initials ', targetInitials)		autoSelect: nil.	allSubmitters sortedCounts do: [:elem | Transcript cr; show: elem asString].	^ allSubmitters! !MidiPrimTester initialize!"Postscript:"Smalltalk removeClassNamed: #FileOutFormatTest.!