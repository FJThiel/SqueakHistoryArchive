'From Squeak2.9alpha of 5 August 2000 [latest update: #2531] on 29 August 2000 at 3:50:40 pm'!"Change Set:		fastColorChange-swDate:			29 August 2000Author:			Scott WallaceDrastically reduces the number of steps required to change a color in morphic.Adds a halo item on recolorable morphs that gives you a color picker right away.Adds a preference that allow you to specify the use of modal color pickers.  A modal picker goes away once you have made your choice; and until you've made your choice, it keeps control of the mouse.  It shows an eyedropper cursor.When the modal picker is present, it continuously reports (in its little feedback box) the color under the mouse, waiting for the mouse to go down.  Once the mouse goes down, and as long as it stays down, the color under the mouse is applied to the target continuously.  The color under the mouse when the button comes back up will be the color selected, with the degree of transparency prevailing at the time."!SketchMorph subclass: #ColorPickerMorph	instanceVariableNames: 'selectedColor sourceHand deleteOnMouseUp updateContinuously target selector argument originalColor theSelectorDisplayMorph command '	classVariableNames: 'ColorChart DragBox FeedbackBox RevertBox TransparentBox '	poolDictionaries: ''	category: 'Morphic-Widgets'!!Form methodsFor: 'displaying' stamp: 'sw 8/29/2000 15:26'!setAsBackground	"Set this form as a background image."	| aCommand aWorld aColor |	Smalltalk isMorphic 		ifTrue:			[aCommand _ Command new commandee: self.			aCommand cmdWording: 'setting the world background to a picture'.			aCommand parameterAt: #oldColor put: (aWorld _ self currentWorld) color.			aCommand parameterAt: #newColor put: (aColor _ InfiniteForm with: self).			aCommand parameterAt: #world put: aWorld.			aCommand undoBlock:				[:cmd | (cmd parameterAt: #world) color:  (cmd parameterAt: #oldColor)].			aCommand redoBlock:				[:cmd | (cmd parameterAt: #world) color:  (cmd parameterAt: #newColor)].			aWorld color: aColor.			Command rememberCommand: aCommand]		ifFalse:			[ScheduledControllers screenController model form: self.			Display restoreAfter: []]! !!GradientFillStyle methodsFor: 'Morphic menu' stamp: 'sw 8/29/2000 15:28'!changeColorSelector: aSymbol hand: aHand morph: aMorph originalColor: originalColor	"Change either the firstColor or the lastColor (depending on aSymbol).  Put up a color picker to hande it."	ColorPickerMorph new		sourceHand: aHand;		target: self;		selector: aSymbol;		argument: aMorph;		originalColor: originalColor;		putUpFor: aMorph near: aMorph fullBoundsInWorld! !!Morph methodsFor: 'accessing' stamp: 'sw 8/29/2000 14:56'!rememberedColor	"Answer a rememberedColor, or nil if none"	^ self valueOfProperty: #rememberedColor ifAbsent: [nil]! !!Morph methodsFor: 'accessing' stamp: 'sw 8/29/2000 15:47'!rememberedColor: aColor	"Place aColor in a property so I can retrieve it later.  A tortuous but expedient flow of data"	^ self setProperty: #rememberedColor toValue: aColor! !!Morph methodsFor: 'menus' stamp: 'sw 8/29/2000 15:30'!changeColor	"Change the color of the receiver -- triggered, e.g. from a menu"	ColorPickerMorph new		sourceHand: self activeHand;		target: self;		selector: #color:;		originalColor: self color;		putUpFor: self near: self fullBoundsInWorld! !!BookMorph methodsFor: 'menu' stamp: 'sw 8/16/2000 13:16'!setPageColor	"Get a color from the user, then set all the pages to that color"	self currentPage ifNil: [^ self].	ColorPickerMorph new		sourceHand: self activeHand;		target: self;		selector: #setAllPagesColor:;		originalColor: self currentPage color;		putUpFor: self near: self fullBoundsInWorld! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/29/2000 15:29'!doRecolor: evt with: aHandle	"Change the color of the target, if appropriate"	(aHandle containsPoint: evt cursorPoint)		ifFalse:  "only do it if mouse still in handle on mouse up"			[self delete.			target addHalo: evt]		ifTrue:			[innerTarget changeColor]	! !!HaloMorph methodsFor: 'handles' stamp: 'sw 8/29/2000 15:28'!addRecolorHandle: haloSpec	"Add a recolor handle to the receiver, if appropriate"	| recolorHandle |	 innerTarget canSetColor ifTrue:		[recolorHandle _ self addHandle: haloSpec on: #mouseUp send: #doRecolor:with:  to: self.		recolorHandle on: #mouseUp send: #doRecolor:with: to: self]! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 8/29/2000 15:30'!changeColorTarget: anObject selector: aSymbol originalColor: aColor	"Put up a color picker for changing some kind of color.  May be modal or modeless, depending on #modalColorPickers setting"	^ ColorPickerMorph new		sourceHand: self;		target: anObject;		selector: aSymbol;		originalColor: aColor;		putUpFor: anObject near: (anObject isMorph					ifTrue:	 [Rectangle center: self position extent: 20]					ifFalse: [anObject == self world								ifTrue: [anObject viewBox bottomLeft + (20@-20) extent: 200]								ifFalse: [anObject fullBoundsInWorld]]);		yourself! !!PaintBoxMorph methodsFor: 'actions' stamp: 'sw 8/29/2000 15:31'!indicateColorUnderMouse	"Track the mouse with the special eyedropper cursor, and accept whatever color is under the mouse as the currently-chosen color; reflect that choice in the feedback box, and return that color."	| pt feedbackColor |	pt _ Sensor cursorPoint.	"deal with the fact that 32 bit displays may have garbage in the alpha bits"	feedbackColor _ Display depth = 32		ifTrue: [ Color colorFromPixelValue: ((Display pixelValueAt: pt) bitOr: 16rFF000000) depth: 32] 		ifFalse: [Display colorAt: pt].	self activeHand position: pt.	self world displayWorldSafely.	Display fill: colorPatch bounds fillColor: feedbackColor.	^ feedbackColor	! !!Preferences class methodsFor: 'text highlighting' stamp: 'sw 8/29/2000 15:31'!chooseInsertionPointColor	"Let the user indicate what color he wishes to have used for insertion points in text"	ColorPickerMorph new		sourceHand: self currentHand;		target: self;		selector: #insertionPointColor:;		originalColor: self insertionPointColor;		putUpFor: self currentHand near: self currentHand cursorBounds! !!Preferences class methodsFor: 'text highlighting' stamp: 'sw 8/29/2000 15:32'!chooseTextHighlightColor	"Let the user choose the text-highlight color"	ColorPickerMorph new		sourceHand: self currentHand;		target: self;		selector: #textHighlightColor:;		originalColor: self textHighlightColor;		putUpFor: self currentHand near: self currentHand cursorBounds! !!Preferences class methodsFor: 'halos' stamp: 'sw 8/29/2000 15:33'!classicHaloSpecs	"Non-iconic halos with traditional placements"	"Preferences installClassicHaloSpecs"	"Preferences resetHaloSpecifications"  "  <-  will result in the standard default halos being reinstalled"	"NB: listed below in clockwise order"		^ #(	"  	selector				horiz		vert			color info						icon key		---------				------		-----------		-------------------------------		---------------"	(addMenuHandle:		left			top				(red)							none)	(addDismissHandle:		leftCenter	top				(red		muchLighter)			'Halo-Dismiss')	(addGrabHandle:			center		top				(black)							none)	(addDragHandle:			rightCenter	top				(brown)							none)	(addDupHandle:			right		top				(green)							none)		(addDebugHandle:		right		topCenter		(blue	veryMuchLighter)		none)	(addPoohHandle:			right		center			(white)							none)	(addPaintBgdHandle:		right		center			(lightGray)						none)	(addRepaintHandle:		right		center			(lightGray)						none)	(addGrowHandle:		right		bottom			(yellow)						none)	(addScaleHandle:		right		bottom			(lightOrange)					none)	(addFontEmphHandle:	rightCenter	bottom			(lightBrown darker)				none)	(addFontStyleHandle:		center		bottom			(lightRed)						none)	(addFontSizeHandle:		leftCenter	bottom			(lightGreen)						none)	(addRecolorHandle:		right		bottomCenter	(magenta darker)				none)	(addRotateHandle:		left			bottom			(blue)							none))! !!Preferences class methodsFor: 'halos' stamp: 'sw 8/29/2000 15:33'!iconicHaloSpecifications	"Answer an array that characterizes the locations, colors, icons, and selectors of the halo handles that may be used in the iconic halo scheme"	"Preferences resetHaloSpecifications"	^ #(	"  	selector				horiz		vert			color info						icon key		---------				------		-----------		-------------------------------		---------------"	(addCollapseHandle:		left			topCenter		(tan)							'Halo-Collapse')	(addPoohHandle:			right		center			(white)							'Halo-Pooh')	(addDebugHandle:		right		topCenter		(blue	veryMuchLighter)		'Halo-Debug')	(addDismissHandle:		left			top				(red		muchLighter)			'Halo-Dismiss')	(addRotateHandle:		left			bottom			(blue)							'Halo-Rot')	(addMenuHandle:		leftCenter	top				(red)							'Halo-Menu')	(addTileHandle:			left			bottomCenter	(lightBrown)					'Halo-Tile')	(addViewHandle:			left			center			(cyan)							'Halo-View')	(addGrabHandle:			center		top				(black)							'Halo-Grab')	(addDragHandle:			rightCenter	top				(brown)							'Halo-Drag')	(addDupHandle:			right		top				(green)							'Halo-Dup')		(addHelpHandle:			center		bottom			(lightBlue)						'Halo-Help')	(addGrowHandle:		right		bottom			(yellow)						'Halo-Scale')	(addScaleHandle:		right		bottom			(lightOrange)					'Halo-Scale')	(addScriptHandle:		right		bottomCenter	(green muchLighter)			'Halo-Script')	(addPaintBgdHandle:		right		center			(lightGray)						'Halo-Paint')	(addRepaintHandle:		right		center			(lightGray)						'Halo-Paint')	(addFontSizeHandle:		leftCenter	bottom			(lightGreen)						'Halo-FontSize')	(addFontStyleHandle:		center		bottom			(lightRed)						'Halo-FontStyle')	(addFontEmphHandle:	rightCenter	bottom			(lightBrown darker)				'Halo-FontEmph')	(addRecolorHandle:		right		bottomCenter	(magenta darker)				'Halo-Recolor')		) ! !!Preferences class methodsFor: 'halos' stamp: 'sw 8/29/2000 15:35'!simpleFullHaloSpecifications	"This method gives the specs for the 'full' handles variant when simple halos are in effect"	"Preferences resetHaloSpecifications"	^ #(	"  	selector				horiz		vert			color info						icon key		---------				------		-----------		-------------------------------		---------------"	(addDebugHandle:		right		topCenter		(blue	veryMuchLighter)		'Halo-Debug')	(addPoohHandle:			right		center			(white)							'Halo-Pooh')	(addDismissHandle:		left			top				(red		muchLighter)			'Halo-Dismiss')	(addRotateHandle:		left			bottom			(blue)							'Halo-Rot')	(addMenuHandle:		leftCenter	top				(red)							'Halo-Menu')	(addTileHandle:			left			bottomCenter	(lightBrown)					'Halo-Tile')	(addViewHandle:			left			center			(cyan)							'Halo-View')	(addGrabHandle:			center		top				(black)							'Halo-Grab')	(addDragHandle:			rightCenter	top				(brown)							'Halo-Drag')	(addDupHandle:			right		top				(green)							'Halo-Dup')		(addHelpHandle:			center		bottom			(lightBlue)						'Halo-Help')	(addGrowHandle:		right		bottom			(yellow)						'Halo-Scale')	(addScaleHandle:		right		bottom			(lightOrange)					'Halo-Scale')	(addFewerHandlesHandle:	left		topCenter		(paleBuff)						'Halo-FewerHandles')	(addScriptHandle:		right		bottomCenter	(green muchLighter)			'Halo-Script')	(addPaintBgdHandle:		right		center			(lightGray)						'Halo-Paint')	(addRepaintHandle:		right		center			(lightGray)						'Halo-Paint')	(addFontSizeHandle:		leftCenter	bottom			(lightGreen)						'Halo-FontSize')	(addFontStyleHandle:		center		bottom			(lightRed)						'Halo-FontStyle')	(addFontEmphHandle:	rightCenter	bottom			(lightBrown darker)		  'Halo-FontEmph')	(addRecolorHandle:		right		bottomCenter	(magenta darker)				'Halo-Recolor')		) ! !!SketchMorph methodsFor: 'menu' stamp: 'sw 8/29/2000 15:46'!erasePixelsOfColor: evt	"Let the user specifiy a color such that all pixels of that color should be erased; then do the erasure"	| c r |	evt hand changeColorTarget: self selector: #rememberedColor: originalColor: nil.   "color to erase"	c _ self rememberedColor ifNil: [Color red].	originalForm mapColor: c to: Color transparent.	r _ originalForm rectangleEnclosingPixelsNotOfColor: Color transparent.	self form: (originalForm copy: r).! !!SketchMorph methodsFor: 'menu' stamp: 'sw 8/29/2000 15:46'!recolorPixelsOfColor: evt	"Let the user select a color to be remapped, and then a color to map that color to, then carry it out."	| c d newForm map newC |	self inform: 'choose the color you want to replace'.	evt hand changeColorTarget: self selector: #rememberedColor: originalColor: nil.   "color to replace"	c _ self rememberedColor ifNil: [Color red].	self inform: 'now choose the color you want to replace it with'.	evt hand changeColorTarget: self selector:  #rememberedColor: originalColor: c.  "new color"	newC _ self rememberedColor ifNil: [Color blue].	d _ originalForm depth.	newForm _ Form extent: originalForm extent depth: d.	map _ (Color cachedColormapFrom: d to: d) copy.	map at: (c indexInMap: map) put: (newC pixelValueForDepth: d).	newForm copyBits: newForm boundingBox		from: originalForm at: 0@0		colorMap: map.	self form: newForm.! !!ColorPickerMorph methodsFor: 'initialization' stamp: 'sw 8/29/2000 15:20'!initialize	"Initialize the receiver.  Obey the modalColorPickers preference when deciding how to configure myself.  This is not quite satisfactory -- we'd like to have explicit calls tell us things like whether whether to be modal, whether to allow transparency, but for the moment, in grand Morphic fashion, this is rather inflexibly all housed right here"	super initialize.	Preferences modalColorPickers ifFalse:		[theSelectorDisplayMorph _ AlignmentMorph newRow			color: Color white;			borderWidth: 1;			borderColor: Color red;			hResizing: #shrinkWrap;			vResizing: #shrinkWrap;			addMorph: (StringMorph contents: 'theSelector').		self addMorph: theSelectorDisplayMorph.		self addMorph: (SimpleButtonMorph new borderWidth: 0;			label: 'x' font: nil; color: Color transparent;			actionSelector: #delete; target: self;			position: 1@0; extent: 10@9)].	self buildChartForm.		selectedColor _ Color white.	sourceHand _ nil.	deleteOnMouseUp _ false.	updateContinuously _ true.	selector _ nil.	target _ nil! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'sw 8/29/2000 15:17'!command	"Answer the receiver's command -- may be nil."	^ command! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'sw 8/29/2000 15:17'!command: cmd	"install cmd as the receiver's command"	command _ cmd! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'sw 8/29/2000 15:21'!originalColor: colorOrSymbol	"Set the receiver's original color.  It is at this point that a command is launched to represent the action of the picker, in support of Undo."	| aColor |	aColor _ (colorOrSymbol isKindOf: Color)		ifTrue:			[colorOrSymbol]		ifFalse:			[Color lightGreen].	command _ Command new commandee: target.	command cmdWording: 'color change'.	command parameterAt: #colorChangeSelector put: selector.	"might come later, if user calls #selector: after calling originalColor:; should be okay"	command parameterAt: #oldColor put: aColor.	command parameterAt: #newColor put: nil.	command undoBlock:		[:cmd | self updateTargetColorWith: (cmd parameterAt: #oldColor)].	command redoBlock:		[:cmd | self updateTargetColorWith: (cmd parameterAt: #newColor)].	originalColor _ aColor.	originalForm fill: RevertBox fillColor: originalColor! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'sw 8/29/2000 15:23'!selector: aSymbol	"Set the selector to be associated with the receiver.  Store it in the receiver's command, if appropriate"	selector _ aSymbol.	command ifNotNil:		[command parameterAt: #colorChangeSelector put: selector].	self updateSelectorDisplay! !!ColorPickerMorph methodsFor: 'private' stamp: 'sw 8/10/2000 11:47'!trackColorAt: aGlobalPoint 	"Before the mouse comes down in a modal color picker, track the color under the cursor, and show it in the feedback box, but do not make transparency changes"	| selfRelativePoint pickedColor existingAlpha |	existingAlpha _ selectedColor alpha.	selfRelativePoint _ (self globalPointToLocal: aGlobalPoint) - self topLeft.	(FeedbackBox containsPoint: selfRelativePoint) ifTrue: [^ self].	(RevertBox containsPoint: selfRelativePoint)		ifTrue: [^ self updateColor: originalColor feedbackColor: originalColor].	"check for transparent color and update using appropriate feedback color "	(TransparentBox containsPoint: selfRelativePoint) ifTrue: [^ self].	"pick up color, either inside or outside this world"	pickedColor _ Display colorAt: aGlobalPoint.	self updateColor: ((selectedColor isColor and: [selectedColor isTranslucentColor])						ifTrue: [pickedColor alpha: existingAlpha]						ifFalse: [pickedColor])		feedbackColor: pickedColor! !!ColorPickerMorph methodsFor: 'private' stamp: 'sw 8/29/2000 15:25'!updateTargetColorWith: aColor	"Update the target so that it reflects aColor as the color choice"	| nArgs |	(target ~~ nil and: [selector ~~ nil]) ifTrue:		[self updateSelectorDisplay.		nArgs _ selector numArgs.		nArgs = 1 ifTrue:[^ target perform: selector with: aColor].		nArgs = 2 ifTrue:[^ target perform: selector with: aColor with: sourceHand].		nArgs = 3 ifTrue:[^ target perform: selector with: aColor with: argument with: sourceHand]].! !!ColorPickerMorph methodsFor: 'menu' stamp: 'sw 8/29/2000 15:22'!pickUpColorFor: aMorph	"Show the eyedropper cursor, and modally track the mouse through a mouse-down and mouse-up cycle"      | aCursor aHand |	aCursor _ ScriptingSystem formAtKey: #Eyedropper.	aHand _ aMorph ifNil: [self activeHand] ifNotNil: [aMorph activeHand].	aHand ifNil: [aHand _ self currentHand].	aHand		showTemporaryCursor: aCursor 		hotSpotOffset: 6 negated @ 4 negated.    "<<<< the form was changed a bit??"	self addToWorld: aHand world near: (aMorph ifNil: [aHand world]) fullBounds.	self updateContinuously: false.	[Sensor anyButtonPressed]		whileFalse: 			 [self trackColorUnderMouse].	self updateContinuously: true.	[Sensor anyButtonPressed]		whileTrue:			 [self updateTargetColorWith: self indicateColorUnderMouse].	self activeHand showTemporaryCursor: nil.	self delete.		  ! !!ColorPickerMorph methodsFor: 'other' stamp: 'sw 8/29/2000 15:18'!delete	"The moment of departure has come.  If the receiver has an affiliated command, finalize it and have the system remember it.  In any case, delete the receiver"	command ifNotNil:		[selectedColor ~= originalColor			ifTrue:				[command parameterAt: #newColor put: selectedColor.				Command rememberCommand: command]].	super delete! !!ColorPickerMorph methodsFor: 'other' stamp: 'sw 8/29/2000 15:18'!indicateColorUnderMouse	"Track the mouse with the special eyedropper cursor, and accept whatever color is under the mouse as the currently-chosen color; reflect that choice in the feedback box, and return that color."	| pt |	self pickColorAt: (pt _ Sensor cursorPoint).	self activeHand position: pt.	self world displayWorldSafely.	^ selectedColor	! !!ColorPickerMorph methodsFor: 'other' stamp: 'sw 8/29/2000 15:23'!putUpFor: aMorph near: aRectangle	"Put the receiver up on the screen.   Note highly variant behavior depending on the setting of the #modalColorPickers preference"	Preferences modalColorPickers		ifTrue:			[self pickUpColorFor: aMorph]		ifFalse:			[self addToWorld:				((aMorph notNil and: [aMorph world notNil])					ifTrue:						[aMorph world]					ifFalse:						[self currentWorld])		  		near:					(aRectangle ifNil:						[aMorph ifNil: [100@100 extent: 1@1] ifNotNil: [aMorph fullBoundsInWorld]])]! !!ColorPickerMorph methodsFor: 'other' stamp: 'sw 8/29/2000 15:24'!trackColorUnderMouse	"Track the mouse with the special eyedropper cursor, and accept whatever color is under the mouse as the currently-chosen color; reflect that choice in the feedback box, and return that color."	| pt |	selectedColor _ originalColor.	self trackColorAt: (pt _ Sensor cursorPoint).	self activeHand position: pt.	self world displayWorldSafely.	^ selectedColor	! !!ColorPickerMorph methodsFor: 'object fileIn' stamp: 'sw 8/29/2000 15:17'!convertbosfceorrrsfrossdutsaot0: varDict bosfceorrrsfrossdutsaotc0: smartRefStrm	"If you can read this, you are following too closely."	"New variables: #('command')  If a non-nil value is needed, please assign it."! !!SystemWindow methodsFor: 'menu' stamp: 'sw 8/29/2000 15:35'!setWindowColor	"Allow the user to select a new basic color for the window"	ColorPickerMorph new		sourceHand: self activeHand;		target: self;		selector: #setWindowColor:;		originalColor: self paneColorToUse;		putUpFor: self			near: self fullBounds! !!TheWorldMenu methodsFor: 'as yet unclassified' stamp: 'sw 8/29/2000 15:38'!changeBackgroundColor	"Let the user select a new background color for the world"	myWorld activeHand changeColorTarget: myWorld selector: #color: originalColor: myWorld color! !!WatchMorph methodsFor: 'menus' stamp: 'sw 8/29/2000 15:41'!changeCenterColor	"Let the user change the color of the center of the watch"	ColorPickerMorph new		sourceHand: self activeHand;		target: self;		selector: #centerColor:;		originalColor: self color;		putUpFor: self near: self fullBounds! !!WatchMorph methodsFor: 'menus' stamp: 'sw 8/29/2000 15:41'!changeHandsColor	"Let the user change the color of the hands of the watch."	ColorPickerMorph new		sourceHand: self activeHand;		target: self;		selector: #handsColor:;		originalColor: self color;		putUpFor: self near: self fullBounds! !TheWorldMenu removeSelector: #changeColorTarget:selector:originalColor:!HandMorph removeSelector: #changeColorForMorph:target:selector:originalColor:!HandMorph removeSelector: #changeColorTarget:forMorph:selector:originalColor:!HandMorph removeSelector: #chooseColorWithSelector:originalColor:!Morph removeSelector: #rememberColor:!"Postscript:"Preferences addPreference: #modalColorPickers category: #general default: true balloonHelp: 'If true, color choices in Morphic will be made via color-pickers that take control of the mouse and immediately return the color selected upon mouseup'.ScriptingSystem saveForm: ((ColorForm extent: 38@36 depth: 8	fromArray: #( 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210740678 3215129338 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4207338474 3921648634 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 3320507114 3941252983 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752198 3941265905 4058693488 435814400 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210740457 3941724657 3941252976 1895432192 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210746346 4059165162 3938425676 687472640 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4209240817 4059163370 3214635048 687472640 4210752250 4210752250 4210752250 4210752250 4210752250 4207331014 3924488689 4058704575 2607818792 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4206879679 3924947441 3941187483 1881680122 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4204980970 3219845610 3820975948 673774330 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4210727878 3938435007 2607818792 687536890 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4196339355 3938425755 1881679912 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 537854498 2613025612 673720570 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 4210752032 637675300 426808396 673774330 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 4210696230 36035205 1394365224 687536890 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 4196476674 635077653 4210725971 687536890 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 556214053 2961446650 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752250 4210752033 654452144 424934138 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752250 4210691586 656781080 200997626 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752250 4196467239 615454732 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752250 570566436 2937460474 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752034 36166319 369949434 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210696706 635077910 435878650 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4196467237 3666154764 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 539436464 2215976186 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752031 254127884 186448634 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210725410 632231447 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210725412 2216042234 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210725404 435878650 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752146 2459079314 2459106042 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210725626 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210725626 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210725626 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210752250 4210688000)	offset: -12@-35)	colorsFromArray: #(#(1.0 1.0 1.0) #(0.0 0.0 0.0) #(1.0 1.0 1.0) #(0.5 0.5 0.5) #(1.0 0.0 0.0) #(0.0 1.0 0.0) #(0.0 0.0 1.0) #(0.0 1.0 1.0) #(1.0 1.0 0.0) #( ) #(0.125 0.125 0.125) #(0.25 0.25 0.25) #(0.375 0.375 0.375) #(0.625 0.625 0.625) #(0.75 0.75 0.75) #(0.875 0.875 0.875) #(0.031 0.031 0.031) #(0.063 0.063 0.063) #(0.094 0.094 0.094) #(0.156 0.156 0.156) #(0.188 0.188 0.188) #(0.219 0.219 0.219) #(0.282 0.282 0.282) #(0.313 0.313 0.313) #(0.344 0.344 0.344) #(0.407 0.407 0.407) #(0.438 0.438 0.438) #(0.469 0.469 0.469) #(0.531 0.531 0.531) #(0.562 0.562 0.562) #(0.593 0.593 0.593) #(0.656 0.656 0.656) #(0.687 0.687 0.687) #(0.718 0.718 0.718) #(0.781 0.781 0.781) #(0.812 0.812 0.812) #(0.844 0.844 0.844) #(0.906 0.906 0.906) #(0.937 0.937 0.937) #(0.969 0.969 0.969) #(0.0 0.0 0.0) #(0.0 0.199 0.0) #(0.0 0.4 0.0) #(0.0 0.599 0.0) #(0.0 0.8 0.0) #(0.0 1.0 0.0) #(0.0 0.0 0.199) #(0.0 0.199 0.199) #(0.0 0.4 0.199) #(0.0 0.599 0.199) #(0.0 0.8 0.199) #(0.0 1.0 0.199) #(0.0 0.0 0.4) #(0.0 0.199 0.4) #(0.0 0.4 0.4) #(0.0 0.599 0.4) #(0.0 0.8 0.4) #(0.0 1.0 0.4) #(0.0 0.0 0.599) #(0.0 0.199 0.599) #(0.0 0.4 0.599) #(0.0 0.599 0.599) #(0.0 0.8 0.599) #(0.0 1.0 0.599) #(0.0 0.0 0.8) #(0.0 0.199 0.8) #(0.0 0.4 0.8) #(0.0 0.599 0.8) #(0.0 0.8 0.8) #(0.0 1.0 0.8) #(0.0 0.0 1.0) #(0.0 0.199 1.0) #(0.0 0.4 1.0) #(0.0 0.599 1.0) #(0.0 0.8 1.0) #(0.0 1.0 1.0) #(0.199 0.0 0.0) #(0.199 0.199 0.0) #(0.199 0.4 0.0) #(0.199 0.599 0.0) #(0.199 0.8 0.0) #(0.199 1.0 0.0) #(0.199 0.0 0.199) #(0.199 0.199 0.199) #(0.199 0.4 0.199) #(0.199 0.599 0.199) #(0.199 0.8 0.199) #(0.199 1.0 0.199) #(0.199 0.0 0.4) #(0.199 0.199 0.4) #(0.199 0.4 0.4) #(0.199 0.599 0.4) #(0.199 0.8 0.4) #(0.199 1.0 0.4) #(0.199 0.0 0.599) #(0.199 0.199 0.599) #(0.199 0.4 0.599) #(0.199 0.599 0.599) #(0.199 0.8 0.599) #(0.199 1.0 0.599) #(0.199 0.0 0.8) #(0.199 0.199 0.8) #(0.199 0.4 0.8) #(0.199 0.599 0.8) #(0.199 0.8 0.8) #(0.199 1.0 0.8) #(0.199 0.0 1.0) #(0.199 0.199 1.0) #(0.199 0.4 1.0) #(0.199 0.599 1.0) #(0.199 0.8 1.0) #(0.199 1.0 1.0) #(0.4 0.0 0.0) #(0.4 0.199 0.0) #(0.4 0.4 0.0) #(0.4 0.599 0.0) #(0.4 0.8 0.0) #(0.4 1.0 0.0) #(0.4 0.0 0.199) #(0.4 0.199 0.199) #(0.4 0.4 0.199) #(0.4 0.599 0.199) #(0.4 0.8 0.199) #(0.4 1.0 0.199) #(0.4 0.0 0.4) #(0.4 0.199 0.4) #(0.4 0.4 0.4) #(0.4 0.599 0.4) #(0.4 0.8 0.4) #(0.4 1.0 0.4) #(0.4 0.0 0.599) #(0.4 0.199 0.599) #(0.4 0.4 0.599) #(0.4 0.599 0.599) #(0.4 0.8 0.599) #(0.4 1.0 0.599) #(0.4 0.0 0.8) #(0.4 0.199 0.8) #(0.4 0.4 0.8) #(0.4 0.599 0.8) #(0.4 0.8 0.8) #(0.4 1.0 0.8) #(0.4 0.0 1.0) #(0.4 0.199 1.0) #(0.4 0.4 1.0) #(0.4 0.599 1.0) #(0.4 0.8 1.0) #(0.4 1.0 1.0) #(0.599 0.0 0.0) #(0.599 0.199 0.0) #(0.599 0.4 0.0) #(0.599 0.599 0.0) #(0.599 0.8 0.0) #(0.599 1.0 0.0) #(0.599 0.0 0.199) #(0.599 0.199 0.199) #(0.599 0.4 0.199) #(0.599 0.599 0.199) #(0.599 0.8 0.199) #(0.599 1.0 0.199) #(0.599 0.0 0.4) #(0.599 0.199 0.4) #(0.599 0.4 0.4) #(0.599 0.599 0.4) #(0.599 0.8 0.4) #(0.599 1.0 0.4) #(0.599 0.0 0.599) #(0.599 0.199 0.599) #(0.599 0.4 0.599) #(0.599 0.599 0.599) #(0.599 0.8 0.599) #(0.599 1.0 0.599) #(0.599 0.0 0.8) #(0.599 0.199 0.8) #(0.599 0.4 0.8) #(0.599 0.599 0.8) #(0.599 0.8 0.8) #(0.599 1.0 0.8) #(0.599 0.0 1.0) #(0.599 0.199 1.0) #(0.599 0.4 1.0) #(0.599 0.599 1.0) #(0.599 0.8 1.0) #(0.599 1.0 1.0) #(0.8 0.0 0.0) #(0.8 0.199 0.0) #(0.8 0.4 0.0) #(0.8 0.599 0.0) #(0.8 0.8 0.0) #(0.8 1.0 0.0) #(0.8 0.0 0.199) #(0.8 0.199 0.199) #(0.8 0.4 0.199) #(0.8 0.599 0.199) #(0.8 0.8 0.199) #(0.8 1.0 0.199) #(0.8 0.0 0.4) #(0.8 0.199 0.4) #(0.8 0.4 0.4) #(0.8 0.599 0.4) #(0.8 0.8 0.4) #(0.8 1.0 0.4) #(0.8 0.0 0.599) #(0.8 0.199 0.599) #(0.8 0.4 0.599) #(0.8 0.599 0.599) #(0.8 0.8 0.599) #(0.8 1.0 0.599) #(0.8 0.0 0.8) #(0.8 0.199 0.8) #(0.8 0.4 0.8) #(0.8 0.599 0.8) #(0.8 0.8 0.8) #(0.8 1.0 0.8) #(0.8 0.0 1.0) #(0.8 0.199 1.0) #(0.8 0.4 1.0) #(0.8 0.599 1.0) #(0.8 0.8 1.0) #(0.8 1.0 1.0) #(1.0 0.0 0.0) #(1.0 0.199 0.0) #(1.0 0.4 0.0) #(1.0 0.599 0.0) #(1.0 0.8 0.0) #(1.0 1.0 0.0) #(1.0 0.0 0.199) #(1.0 0.199 0.199) #(1.0 0.4 0.199) #(1.0 0.599 0.199) #(1.0 0.8 0.199) #(1.0 1.0 0.199) #(1.0 0.0 0.4) #(1.0 0.199 0.4) #(1.0 0.4 0.4) #(1.0 0.599 0.4) #(1.0 0.8 0.4) #(1.0 1.0 0.4) #(1.0 0.0 0.599) #(1.0 0.199 0.599) #(1.0 0.4 0.599) #(1.0 0.599 0.599) #(1.0 0.8 0.599) #(1.0 1.0 0.599) #(1.0 0.0 0.8) #(1.0 0.199 0.8) #(1.0 0.4 0.8) #(1.0 0.599 0.8) #(1.0 0.8 0.8) #(1.0 1.0 0.8) #( ) #(1.0 0.199 1.0) #(1.0 0.4 1.0) #(1.0 0.599 1.0) #(1.0 0.8 1.0) #(1.0 1.0 1.0)  )) atKey: #Eyedropper.Preferences  installHaloTheme: (Preferences parameterAt: #HaloTheme).!