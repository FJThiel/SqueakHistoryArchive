'From Squeak3.7alpha of 11 September 2003 [latest update: #5707] on 15 February 2004 at 2:18:05 pm'!"Change Set:		SeparateClassCommentPane-nkDate:			15 February 2004Author:			Ned KonzThis adds (for Morphic only, currently) a separate class comment pane instead of the combined class comment and class definition introduced in 5681browseWithComments-ls The 15 Feb. version avoids the search through the dependents, and avoids re-creating the comment pane morph.(merged Browser>>messageCategoryListIndex: with 5731acceptCodeFix-bg. -dew)"!PluggableTextMorph subclass: #BrowserCommentTextMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Browser'!!BrowserCommentTextMorph commentStamp: '<historical>' prior: 0!I am a PluggableTextMorph that knows enough to make myself invisible when necessary.!!BrowserCommentTextMorph methodsFor: 'displaying' stamp: 'nk 2/15/2004 13:41'!hideOrShowPane	(self model editSelection == #editClass)		ifTrue: [ self showPane ]		ifFalse: [ self hidePane ]! !!BrowserCommentTextMorph methodsFor: 'displaying' stamp: 'nk 2/15/2004 14:08'!hidePane	| win |	self lowerPane ifNotNilDo: [ :lp | lp layoutFrame bottomFraction: self layoutFrame bottomFraction ].	win _ self window ifNil: [ ^self ].	self delete.	win updatePanesFromSubmorphs.! !!BrowserCommentTextMorph methodsFor: 'displaying' stamp: 'nk 2/15/2004 14:09'!showPane	owner ifNil: [		| win |		win _ self window ifNil: [ ^self ].		win addMorph: self fullFrame: self layoutFrame.		win updatePanesFromSubmorphs ].	self lowerPane ifNotNilDo: [ :lp | lp layoutFrame bottomFraction: self layoutFrame topFraction ]! !!BrowserCommentTextMorph methodsFor: 'updating' stamp: 'nk 2/15/2004 14:11'!noteNewOwner: win	super noteNewOwner: win.	self setProperty: #browserWindow toValue: win.	win ifNil: [ ^self ].	win setProperty: #browserClassCommentPane toValue: self.	self setProperty: #browserLowerPane toValue: (win submorphThat: [ :m | m isAlignmentMorph and: [ m layoutFrame bottomFraction = 1 ]] ifNone: []).! !!BrowserCommentTextMorph methodsFor: 'updating' stamp: 'nk 2/15/2004 13:42'!update: anAspect	super update: anAspect.	anAspect == #editSelection ifFalse: [ ^self ].	self hideOrShowPane! !!BrowserCommentTextMorph methodsFor: 'accessing' stamp: 'nk 2/15/2004 14:12'!lowerPane	"Answer the AlignmentMorph that I live beneath"	^self valueOfProperty: #browserLowerPane! !!BrowserCommentTextMorph methodsFor: 'accessing' stamp: 'nk 2/15/2004 14:07'!window	^self owner ifNil: [ self valueOfProperty: #browserWindow ].! !!Browser methodsFor: 'accessing' stamp: 'nk 2/15/2004 13:27'!editSelection: aSelection	"Set the editSelection as requested."	editSelection _ aSelection.	self changed: #editSelection.! !!Browser methodsFor: 'class comment pane' stamp: 'nk 2/15/2004 13:20'!buildMorphicCommentPane	"Construct the pane that shows the class comment.	Respect the Preference for standardCodeFont."	| commentPane |	commentPane := BrowserCommentTextMorph				on: self				text: #classCommentText				accept: #classComment:notifying:				readSelection: nil				menu: #codePaneMenu:shifted:.	commentPane font: Preferences standardCodeFont.	^ commentPane! !!Browser methodsFor: 'class comment pane' stamp: 'nk 2/15/2004 13:19'!classComment: aText notifying: aPluggableTextMorph 	"The user has just entered aText.	It may be all red (a side-effect of replacing the default comment), so remove the color if it is."	| theClass cleanedText redRange |	theClass := self selectedClassOrMetaClass.	theClass		ifNotNil: [cleanedText := aText asText.			redRange := cleanedText rangeOf: TextColor red startingAt: 1.			redRange size = cleanedText size				ifTrue: [cleanedText						removeAttribute: TextColor red						from: 1						to: redRange last ].			theClass classComment: aText].	self changed: #classCommentText.	^ true! !!Browser methodsFor: 'class functions' stamp: 'nk 2/14/2004 14:32'!classCommentText	"return the text to display for the comment of the currently selected class"	| theClass |	theClass _ self selectedClassOrMetaClass.	theClass ifNil: [ ^''].	^ theClass hasComment		ifTrue: [  theClass comment  ]		ifFalse: [ Text string: 'THIS CLASS HAS NO COMMENT!!' translated attribute: TextColor red ]! !!Browser methodsFor: 'class functions' stamp: 'nk 2/14/2004 15:11'!classDefinitionText	"return the text to display for the definition of the currently selected class"	| theClass |	theClass _ self selectedClassOrMetaClass.	theClass ifNil: [ ^''].	^theClass definitionST80: Preferences printAlternateSyntax not! !!Browser methodsFor: 'class functions' stamp: 'nk 2/15/2004 13:23'!editClass	"Retrieve the description of the class definition."	classListIndex = 0 ifTrue: [^ self].	self okToChange ifFalse: [^ self].	self messageCategoryListIndex: 0.	self editSelection: #editClass.	self changed: #contents.	self changed: #classCommentText.! !!Browser methodsFor: 'class functions' stamp: 'nk 2/14/2004 15:08'!editComment	"Retrieve the description of the class comment."	classListIndex = 0 ifTrue: [^ self].	self okToChange ifFalse: [^ self].	self messageCategoryListIndex: 0.	metaClassIndicated _ false.	self editSelection: #editComment.	self changed: #classSelectionChanged.	self changed: #messageCategoryList.	self changed: #messageList.	self decorateButtons.	self contentsChanged! !!Browser methodsFor: 'class functions' stamp: 'nk 2/14/2004 15:09'!hierarchy	"Display the inheritance hierarchy of the receiver's selected class."	classListIndex = 0 ifTrue: [^ self].	self okToChange ifFalse: [^ self].	self messageCategoryListIndex: 0.	self editSelection: #hierarchy.	self changed: #editComment.	self contentsChanged.	^ self! !!Browser methodsFor: 'class functions' stamp: 'nk 2/14/2004 15:07'!makeNewSubclass	self selectedClassOrMetaClass ifNil: [^ self].	self okToChange ifFalse: [^ self].	self editSelection: #newClass.	self contentsChanged! !!Browser methodsFor: 'class functions' stamp: 'nk 2/14/2004 15:09'!plusButtonHit	"Cycle among definition, comment, and hierachy"	editSelection == #editComment		ifTrue: [self hierarchy. ^ self].	editSelection == #hierarchy		ifTrue: [self editSelection: #editClass.			classListIndex = 0 ifTrue: [^ self].			self okToChange ifFalse: [^ self].			self changed: #editComment.			self contentsChanged.			^ self].	self editComment! !!Browser methodsFor: 'class list' stamp: 'nk 2/14/2004 15:07'!classListIndex: anInteger 	"Set anInteger to be the index of the current class selection."	| className |	classListIndex _ anInteger.	self setClassOrganizer.	messageCategoryListIndex _ 0.	messageListIndex _ 0.	self classCommentIndicated		ifTrue: []		ifFalse: [self editSelection: (anInteger = 0					ifTrue: [metaClassIndicated | (systemCategoryListIndex == 0)						ifTrue: [#none]						ifFalse: [#newClass]]					ifFalse: [#editClass])].	contents _ nil.	self selectedClass isNil		ifFalse: [className _ self selectedClass name.					(RecentClasses includes: className)				ifTrue: [RecentClasses remove: className].			RecentClasses addFirst: className.			RecentClasses size > 16				ifTrue: [RecentClasses removeLast]].	self changed: #classSelectionChanged.	self changed: #classCommentText.	self changed: #classListIndex.	"update my selection"	self changed: #messageCategoryList.	self changed: #messageList.	self changed: #relabel.	self contentsChanged! !!Browser methodsFor: 'initialize-release' stamp: 'nk 2/14/2004 15:08'!systemOrganizer: aSystemOrganizer 	"Initialize the receiver as a perspective on the system organizer, 	aSystemOrganizer. Typically there is only one--the system variable 	SystemOrganization."	super initialize.	contents _ nil.	systemOrganizer _ aSystemOrganizer.	systemCategoryListIndex _ 0.	classListIndex _ 0.	messageCategoryListIndex _ 0.	messageListIndex _ 0.	metaClassIndicated _ false.	self setClassOrganizer.	self editSelection: #none! !!Browser methodsFor: 'message category functions' stamp: 'nk 2/14/2004 15:06'!editMessageCategories	"Indicate to the receiver and its dependents that the message categories of 	the selected class have been changed."	self okToChange ifFalse: [^ self].	classListIndex ~= 0		ifTrue: 			[self messageCategoryListIndex: 0.			self editSelection: #editMessageCategories.			self changed: #editMessageCategories.			self contentsChanged]! !!Browser methodsFor: 'message category list' stamp: 'nk 2/14/2004 15:08'!messageCategoryListIndex: anInteger 	"Set the selected message category to be the one indexed by anInteger."	messageCategoryListIndex _ anInteger.	messageListIndex _ 0.	self changed: #messageCategorySelectionChanged.	self changed: #messageCategoryListIndex.	"update my selection"	self changed: #messageList.	editSelection = #newMessage	  ifTrue: [^self].	self editSelection:		(anInteger <= 0			ifTrue: [#editClass]			ifFalse: [#newMessage]).	contents _ nil.	self contentsChanged! !!Browser methodsFor: 'message list' stamp: 'nk 2/14/2004 15:07'!messageListIndex: anInteger 	"Set the selected message selector to be the one indexed by anInteger."	messageListIndex _ anInteger.	self editSelection: (anInteger = 0			ifTrue: [#newMessage]			ifFalse: [#editMessage]).	contents _ nil.	self changed: #messageListIndex.	"update my selection"	self contentsChanged.	self decorateButtons! !!Browser methodsFor: 'metaclass' stamp: 'nk 2/14/2004 15:08'!metaClassIndicated: trueOrFalse 	"Indicate whether browsing instance or class messages."	metaClassIndicated _ trueOrFalse.	self setClassOrganizer.	systemCategoryListIndex > 0 ifTrue:		[self editSelection: (classListIndex = 0			ifTrue: [metaClassIndicated				ifTrue: [#none]				ifFalse: [#newClass]]			ifFalse: [#editClass])].	messageCategoryListIndex _ 0.	messageListIndex _ 0.	contents _ nil.	self changed: #classSelectionChanged.	self changed: #messageCategoryList.	self changed: #messageList.	self changed: #contents.	self changed: #annotation.	self decorateButtons! !!Browser methodsFor: 'system category functions' stamp: 'nk 2/14/2004 15:09'!editSystemCategories	"Retrieve the description of the class categories of the system organizer."	self okToChange ifFalse: [^ self].	self systemCategoryListIndex: 0.	self editSelection: #editSystemCategories.	self changed: #editSystemCategories.	self contentsChanged! !!Browser methodsFor: 'system category list' stamp: 'nk 2/14/2004 15:06'!systemCategoryListIndex: anInteger 	"Set the selected system category index to be anInteger. Update all other 	selections to be deselected."	systemCategoryListIndex _ anInteger.	classListIndex _ 0.	messageCategoryListIndex _ 0.	messageListIndex _ 0.	self editSelection: ( anInteger = 0 ifTrue: [#none] ifFalse: [#newClass]).	metaClassIndicated _ false.	self setClassOrganizer.	contents _ nil.	self changed: #systemCategorySelectionChanged.	self changed: #systemCategoryListIndex.	"update my selection"	self changed: #classList.	self changed: #messageCategoryList.	self changed: #messageList.	self changed: #relabel.	self contentsChanged! !!Browser methodsFor: 'construction' stamp: 'nk 2/15/2004 13:49'!addLowerPanesTo: window at: nominalFractions with: editString	| commentPane |	super addLowerPanesTo: window at: nominalFractions with: editString.	commentPane _ self buildMorphicCommentPane.	window addMorph: commentPane fullFrame: (LayoutFrame fractions: (0@0.75 corner: 1@1)).	self changed: #editSelection.! !!MessageSet methodsFor: 'message list' stamp: 'nk 2/14/2004 15:10'!messageListIndex: anInteger 	"Set the index of the selected item to be anInteger."	messageListIndex _ anInteger.	contents _ 		messageListIndex ~= 0			ifTrue: [self selectedMessage]			ifFalse: [''].	self changed: #messageListIndex.	 "update my selection"	self editSelection: #editMessage.	self contentsChanged.	(messageListIndex ~= 0 and: [autoSelectString notNil])		ifTrue: [self changed: #autoSelect].	self decorateButtons! !!Lexicon methodsFor: 'basic operation' stamp: 'nk 2/14/2004 15:10'!messageListIndex: anIndex	"Set the message list index as indicated, and update the history list if appropriate"	| newSelector current |	current _ self selectedMessageName.	super messageListIndex: anIndex.	anIndex = 0 ifTrue: [		self editSelection: #newMessage.		self contentsChanged].	(newSelector _ self selectedMessageName) ifNotNil: 		[self updateSelectorsVisitedfrom: current to: newSelector]! !!PackagePaneBrowser methodsFor: 'package list' stamp: 'nk 2/14/2004 15:09'!updatePackages	"Update the contents of the package list."	self editSelection: #none.	self changed: #packageList.	self changed: #package.	self packageListIndex: 0 ! !Browser removeSelector: #commentTextMorph!Browser removeSelector: #deleteClassCommentPane!Browser removeSelector: #ensureClassCommentPane!!Browser reorganize!('accessing' contents contents:notifying: contentsSelection couldBrowseAnyClass doItReceiver editSelection editSelection: noteSelectionIndex:for: request:initialAnswer: spawn: suggestCategoryToSpawnedBrowser:)('annotation' annotation)('breakpoints' toggleBreakOnEntry)('class comment pane' buildMorphicCommentPane classComment:notifying:)('class functions' addAllMethodsToCurrentChangeSet buildClassBrowser classCommentText classDefinitionText classListMenu: classListMenu:shifted: copyClass createInstVarAccessors defineClass:notifying: editClass editComment explainSpecial: fetchClassDocPane fileOutClass findMethod hierarchy makeNewSubclass plusButtonHit printOutClass removeClass renameClass shiftedClassListMenu:)('class list' classList classListIndex classListIndex: classListSingleton recent selectClass: selectedClass selectedClassName toggleClassListIndex:)('code pane' compileMessage:notifying: showBytecodes)('copying' veryDeepInner:)('drag and drop' acceptDroppingMorph:event:inMorph: acceptMethod:dstMessageCategory:srcMessageCategory:dstClass:dstClassOrMeta:srcClassOrMeta:internal:copySemantic: acceptMethod:messageCategory:class:atListMorph:internal:copy: changeCategoryForClass:srcSystemCategory:atListMorph:internal:copy: changeMessageCategoryForMethod:dstMessageCategory:srcMessageCategory:insideClassOrMeta:internal:copySemantic: codeTextMorph dragAnimationFor:transferMorph: dragPassengerFor:inMorph: dragTransferTypeForMorph: dstCategoryDstListMorph: dstClassDstListMorph: dstMessageCategoryDstListMorph: message:compileInClass:fromClass:dstMessageCategory:srcMessageCategory:internal:copySemantic: overwriteDialogHierarchyChange:higher:sourceClassName:destinationClassName:methodSelector: wantsDroppedMorph:event:inMorph:)('initialize-release' addAListPane:to:at:plus: addClassAndSwitchesTo:at:plus: addMorphicSwitchesTo:at: browseSelectionInPlace browserWindowActivated buildClassSwitchView buildCommentSwitchView buildInstanceClassSwitchView buildInstanceSwitchView buildMorphicClassList buildMorphicMessageCatList buildMorphicMessageList buildMorphicSwitches buildMorphicSystemCatList buildOptionalButtonsView defaultBrowserTitle highlightClassList:with: highlightMessageCategoryList:with: highlightSystemCategoryList:with: labelString methodCategoryChanged openAsMorphClassEditing: openAsMorphEditing: openAsMorphMessageEditing: openAsMorphMsgCatEditing: openAsMorphSysCatEditing: openEditString: openMessageCatEditString: openMessageEditString: openOnClassWithEditString: openSystemCatEditString: optionalAnnotationHeight optionalButtonHeight setClass:selector: setSelector: systemCatSingletonKey:from: systemOrganizer:)('message category functions' addCategory alphabetizeMessageCategories buildMessageCategoryBrowser buildMessageCategoryBrowserEditString: canShowMultipleMessageCategories categoryOfCurrentMethod changeMessageCategories: editMessageCategories fileOutMessageCategories highlightMessageList:with: messageCategoryMenu: printOutMessageCategories removeEmptyCategories removeMessageCategory renameCategory showHomeCategory)('message category list' categorizeAllUncategorizedMethods messageCatListSingleton messageCategoryList messageCategoryListIndex messageCategoryListIndex: messageCategoryListSelection rawMessageCategoryList selectMessageCategoryNamed: selectOriginalCategoryForCurrentMethod selectedMessageCategoryName setOriginalCategoryIndexForCurrentMethod toggleMessageCategoryListIndex:)('message functions' addExtraShiftedItemsTo: buildMessageBrowser buildMessageBrowserEditString: defineMessage:notifying: defineMessageFrom:notifying: inspectInstances inspectSubInstances messageListMenu:shifted: removeMessage removeMessageFromBrowser shiftedMessageListMenu:)('message list' messageList messageListIndex messageListIndex: messageListSingleton reformulateList selectedMessage selectedMessageName selectedMessageName: toggleMessageListIndex:)('metaclass' classCommentIndicated classMessagesIndicated classOrMetaClassOrganizer indicateClassMessages indicateInstanceMessages instanceMessagesIndicated metaClassIndicated metaClassIndicated: selectedClassOrMetaClass selectedClassOrMetaClassName setClassOrganizer)('system category functions' addSystemCategory alphabetizeSystemCategories browseAllClasses buildSystemCategoryBrowser buildSystemCategoryBrowserEditString: changeSystemCategories: classNotFound editSystemCategories fileOutSystemCategory findClass potentialClassNames printOutSystemCategory removeSystemCategory renameSystemCategory systemCatSingletonMenu: systemCategoryMenu: updateSystemCategories)('system category list' indexIsOne indexIsOne: selectCategoryForClass: selectedEnvironment selectedSystemCategoryName systemCategoryList systemCategoryListIndex systemCategoryListIndex: systemCategorySingleton toggleSystemCategoryListIndex:)('construction' addLowerPanesTo:at:with:)!CodeHolder removeSelector: #buildMorphicCommentPane!!BrowserCommentTextMorph reorganize!('displaying' hideOrShowPane hidePane showPane)('updating' noteNewOwner: update:)('accessing' lowerPane window)!