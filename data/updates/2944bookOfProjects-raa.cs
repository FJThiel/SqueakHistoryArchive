'From Squeak2.9alpha of 17 July 2000 [latest update: #2993] on 10 November 2000 at 12:18:54 pm'!"Change Set:		bookOfProjectsDate:			9 November 2000Author:			Bob ArningA beginning of books of projects. You can- get a InternalThreadNavigationMorph from the new morph/navigators menu- use the '?' button and choose 'edit this thread' to get a BookMorph containing project views of each the thread (which is all morphic projects by default).- use the book sorter to re-order or remove projects from this book- choose the last item in the book menu (make a thread of projects in this book) to begin a named thread. This will give you a green thread navigator that will let you roam through the projects in that thread.- once a named thread has been established, you can reopen its UI with 	InternalThreadNavigationMorph openThreadNamed: 'the name of the thread'or from the '?' button menu on an existing navigator.- more than one thread can exist. Click on the '?' button on the thread navigator to switch to another thread.--- another way to get a thread is	ProjectHistory currentHistory mostRecentThread"!AlignmentMorph subclass: #FloatingBookControlsMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Navigators'!AlignmentMorphBob1 subclass: #ProjectNavigationMorph	instanceVariableNames: 'mouseInside '	classVariableNames: 'LastManualPlacement '	poolDictionaries: ''	category: 'Morphic-Navigators'!ProjectNavigationMorph subclass: #KidNavigationMorph	instanceVariableNames: ''	classVariableNames: 'PreExistingProjects '	poolDictionaries: ''	category: 'Morphic-Navigators'!ProjectNavigationMorph subclass: #NebraskaNavigationMorph	instanceVariableNames: 'nebraskaBorder '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Navigators'!AlignmentMorphBob1 subclass: #ThreadNavigationMorph	instanceVariableNames: 'listOfPages currentIndex loadedProject '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Navigators'!ThreadNavigationMorph subclass: #InternalThreadNavigationMorph	instanceVariableNames: 'threadName '	classVariableNames: 'KnownThreads '	poolDictionaries: ''	category: 'Morphic-Navigators'!!BookMorph methodsFor: 'menu' stamp: 'RAA 11/10/2000 11:27'!buildThreadOfProjects	| thisPVM projectNames threadName |	projectNames _ pages collect: [ :each |		(thisPVM _ each findA: ProjectViewMorph) ifNil: [			nil		] ifNotNil: [			{thisPVM project name}.		].	].	projectNames _ projectNames reject: [ :each | each isNil].	threadName _ FillInTheBlank 		request: 'Please name this thread.' 		initialAnswer: (			self valueOfProperty: #nameOfThreadOfProjects ifAbsent: ['Projects on Parade']		).	threadName isEmptyOrNil ifTrue: [^self].	InternalThreadNavigationMorph 		know: projectNames as: threadName;		openThreadNamed: threadName.! !!BookMorph methodsFor: 'menu' stamp: 'RAA 11/10/2000 11:27'!invokeBookMenu	"Invoke the book's control panel menu."	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'find...' action: #textSearch.	aMenu add: 'go to page...' action: #goToPage.	aMenu addLine.	aMenu addList:		#(('sort pages'			sortPages)		('uncache page sorter'	uncachePageSorter)).	(self hasProperty: #dontWrapAtEnd)		ifTrue: [aMenu add: 'wrap after last page' selector: #setWrapPages: argument: true]		ifFalse: [aMenu add: 'stop at last page' selector: #setWrapPages: argument: false].	aMenu addList:		#(('make bookmark'		bookmarkForThisPage)		('make thumbnail'		thumbnailForThisPage)).	aMenu addUpdating: #showingPageControlsString action: #toggleShowingOfPageControls.	aMenu addUpdating: #showingFullScreenString action: #toggleFullScreen.	aMenu addLine.	aMenu add: 'sound effect for all pages' action: #menuPageSoundForAll:.	aMenu add: 'sound effect this page only' action: #menuPageSoundForThisPage:.	aMenu add: 'visual effect for all pages' action: #menuPageVisualForAll:.	aMenu add: 'visual effect this page only' action: #menuPageVisualForThisPage:.	aMenu addLine.	(self primaryHand pasteBuffer class isKindOf: PasteUpMorph class) ifTrue:		[aMenu add: 'paste book page'   action: #pasteBookPage].	aMenu add: 'save as new-page prototype' action: #setNewPagePrototype.	newPagePrototype ifNotNil: [		aMenu add: 'clear new-page prototype' action: #clearNewPagePrototype].	aMenu add: (self dragNDropEnabled ifTrue: ['close'] ifFalse: ['open']) , ' dragNdrop'			action: #toggleDragNDrop.	aMenu add: 'make all pages this size' action: #makeUniformPageSize.	aMenu add: 'send all pages to server' action: #savePagesOnURL.	aMenu add: 'send this page to server' action: #saveOneOnURL.	aMenu add: 'reload all from server' action: #reload.	aMenu add: 'copy page url to clipboard' action: #copyUrl.	aMenu add: 'keep in one file' action: #keepTogether.	aMenu addLine.	aMenu add: 'load PPT images from slide #1' action: #loadImagesIntoBook.	aMenu add: 'background color for all pages...' action: #setPageColor.	aMenu add: 'make a thread of projects in this book' action: #buildThreadOfProjects.	aMenu popUpEvent: self world activeHand lastEvent in: self world! !!BookMorph class methodsFor: 'booksAsProjects' stamp: 'RAA 11/10/2000 11:26'!makeBookOfProjects: aListOfProjects named: aString"BookMorph makeBookOfProjects: (Project allProjects select: [ :each | each world isMorph])"	| book pvm page |	book _ self new.	book setProperty: #transitionSpec toValue: {'silence'. #none. #none}.	aListOfProjects do: [ :each |		pvm _ ProjectViewMorph on: each.		page _ PasteUpMorph new addMorph: pvm; extent: pvm extent.		book insertPage: page pageSize: page extent	].	book goToPage: 1.	book deletePageBasic.	book setProperty: #nameOfThreadOfProjects toValue: aString.	book removeProperty: #transitionSpec.	book openInWorld! !!ProjectHistory methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 10:11'!mostRecentNames	self cleanUp.	^mostRecent collect: [ :each |		each first	].! !!ProjectHistory methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:53'!mostRecentThread	| projectNames threadName |	self cleanUp.	projectNames _ (mostRecent collect: [ :each | {each first} ]) reversed.	threadName _ FillInTheBlank 		request: 'Please name this thread.' 		initialAnswer: 'Recent projects @ ',Time now printString.	threadName isEmptyOrNil ifTrue: [^nil].	InternalThreadNavigationMorph know: projectNames as: threadName.	^threadName! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:29'!addButtons	self addARow: {		self inAColumn: {self buttonFirst}.		self inAColumn: {self buttonPrevious}.		self inAColumn: {self buttonForward}.		self inAColumn: {self buttonLast}.		self inAColumn: {self buttonExit}.	}.! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:31'!colorForButtons	^color darker! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:52'!currentIndex	^currentIndex! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:37'!ensureSuitableDefaults	listOfPages ifNil: [listOfPages _ OrderedCollection new].	currentIndex ifNil: [currentIndex _ 0].! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:31'!fontForButtons	^TextStyle defaultFont! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:41'!initialColor	^Color red lighter! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:38'!initialize	super initialize.	self useRoundedCorners.	self layoutInset: 6.	color _ self initialColor.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self ensureSuitableDefaults.	self addButtons.! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:25'!makeButton: aString balloonText: anotherString for: aSymbol	^SimpleButtonDelayedMenuMorph new 		target: self;		borderColor: #raised;		color: self colorForButtons;		label: aString font: self fontForButtons;		setBalloonText: anotherString;		actionSelector: aSymbol.! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:53'!nextPage	self currentIndex >= listOfPages size ifTrue: [^1 beep].	currentIndex _ self currentIndex + 1.	self loadPageWithProgress.! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:53'!previousPage	self currentIndex <= 1 ifTrue: [^1 beep].	currentIndex _ self currentIndex - 1.	self loadPageWithProgress.! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 17:50'!showMenuFor: actionSelector event: evt	"no-op here"! !!ThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:33'!step	| delta |	owner == self world ifFalse: [^ self].	owner addMorphInLayer: self.	delta _ self bounds amountToTranslateWithin: self worldBounds.	delta = (0 @ 0) ifFalse: [self position: self position + delta].! !!ThreadNavigationMorph methodsFor: 'buttons' stamp: 'RAA 11/9/2000 16:28'!buttonExit	^self makeButton: 'Exit' balloonText: 'Exit the sequence' for: #exitTheSequence.! !!ThreadNavigationMorph methodsFor: 'buttons' stamp: 'RAA 11/9/2000 16:26'!buttonFirst	^self makeButton: 'First' balloonText: 'First page in sequence' for: #firstPage! !!ThreadNavigationMorph methodsFor: 'buttons' stamp: 'RAA 11/9/2000 16:27'!buttonForward	^self makeButton: 'Forward >' balloonText: 'Next page in sequence' for: #nextPage! !!ThreadNavigationMorph methodsFor: 'buttons' stamp: 'RAA 11/9/2000 16:27'!buttonLast	^self makeButton: 'Last' balloonText: 'Last page in sequence' for: #lastPage! !!ThreadNavigationMorph methodsFor: 'buttons' stamp: 'RAA 11/9/2000 16:27'!buttonPrevious	^self makeButton: '< Back' balloonText: 'Previous page in sequence' for: #previousPage! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:42'!addButtons	self addARow: {		self inAColumn: {(StringMorph contents: threadName asString) lock}.	}.	self addARow: {		self inAColumn: {self buttonFirst}.		self inAColumn: {self buttonPrevious}.		self inAColumn: {self buttonForward}.		self inAColumn: {self buttonLast}.		self inAColumn: {self buttonForMenu}.	}.! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:30'!bookOfAllProjects	BookMorph 		makeBookOfProjects: (Project allProjects select: [ :each | each world isMorph])		named: 'All projects @ ',Time now printString! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:41'!buttonForMenu	^self makeButton: '?' balloonText: 'More commands' for: #moreCommands.! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:54'!currentIndex	| currentName |	currentName _ CurrentProjectRefactoring currentProjectName.	listOfPages withIndexDo: [ :each :index |		each first = currentName ifTrue: [^currentIndex _ index]	].	^currentIndex! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 15:31'!deleteCurrentPage	"no-op here"! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:44'!editThisThread	| projects |	projects _ listOfPages collect: [ :each | Project named: each first].	BookMorph 		makeBookOfProjects: projects		named: threadName.	self delete.! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 12:17'!ensureSuitableDefaults	listOfPages ifNil: [		listOfPages _ Project allNames collect: [ :each | {each}].		threadName _ 'all (default)'.		self class know: listOfPages as: threadName.	].	currentIndex ifNil: [currentIndex _ 0].! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 11:51'!getRecentThread	self switchToThread: (		ProjectHistory currentHistory mostRecentThread ifNil: [^self]	)! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:42'!initialColor	^(Color r: 0.27 g: 0.634 b: 0.365)! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 12:10'!jumpToIndex: anInteger	currentIndex _ anInteger.	self loadPageWithProgress.! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 12:12'!jumpWithinThread	| aMenu me weHaveOthers |	me _ CurrentProjectRefactoring currentProjectName.	aMenu _ MenuMorph new defaultTarget: self.	weHaveOthers _ false.	listOfPages withIndexDo: [ :each :index |		each first = me ifFalse: [			weHaveOthers _ true.			aMenu add: 'jump to <',each first,'>' selector: #jumpToIndex: argument: index.		].	].	weHaveOthers ifFalse: [^self inform: 'This is the only project in this thread'].	aMenu popUpEvent: self world primaryHand lastEvent in: self world! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:47'!listOfPages: aCollection	| currentName |	listOfPages _ aCollection.	currentName _ CurrentProjectRefactoring currentProjectName.	listOfPages withIndexDo: [ :each :index |		each first = currentName ifTrue: [^currentIndex _ index]	].! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 17:33'!loadPageWithProgress	| projectInfo projectName |	projectInfo _ listOfPages at: currentIndex.	projectName _ projectInfo at: 1.	loadedProject _ Project named: projectName.	WorldState addDeferredUIMessage: [		InternalThreadNavigationMorph openThreadNamed: threadName	].	self delete.	loadedProject enter.! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/10/2000 12:13'!moreCommands	| allThreads aMenu others |	allThreads _ self class knownThreads.	aMenu _ MenuMorph new defaultTarget: self.	others _ (allThreads keys reject: [ :each | each = threadName]) asSortedCollection.	others do: [ :each |		aMenu add: 'switch to <',each,'>' selector: #switchToThread: argument: each.	].	aMenu add: 'thread of recent projects' action: #getRecentThread.	aMenu addLine.	aMenu add: 'jump within this thread' action: #jumpWithinThread.	aMenu addLine.	aMenu add: 'book of all projects' action: #bookOfAllProjects.	aMenu add: 'edit this thread' action: #editThisThread.	aMenu addLine.	aMenu add: 'simply close this navigator' action: #delete.	aMenu popUpEvent: self world primaryHand lastEvent in: self world! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 17:49'!showMenuFor: actionSelector event: evt	self perform: actionSelector! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 17:46'!switchToThread: newName	threadName _ newName.	listOfPages _ self class knownThreads at: threadName.	self removeAllMorphs.	self addButtons.	self currentIndex.! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 17:10'!threadName	^threadName! !!InternalThreadNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 16:34'!threadName: aString	threadName _ aString! !!InternalThreadNavigationMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 17:12'!know: listOfPages as: nameOfThread	self knownThreads at: nameOfThread put: listOfPages.! !!InternalThreadNavigationMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 15:53'!knownThreads	^KnownThreads ifNil: [KnownThreads _ Dictionary new].! !!InternalThreadNavigationMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 11/9/2000 17:12'!openThreadNamed: nameOfThread	| coll |	coll _ self knownThreads at: nameOfThread ifAbsent: [^self].	(World 		submorphThat: [ :each | (each isKindOf: self) and: [each threadName = nameOfThread]]		ifNone: [self new]	)		listOfPages: coll;		threadName: nameOfThread;		removeAllMorphs;		addButtons;		openInWorld! !InternalThreadNavigationMorph removeSelector: #bookOfAllprojects!InternalThreadNavigationMorph removeSelector: #exitTheSequence!ThreadNavigationMorph removeSelector: #addButton:balloonText:for:!ProjectNavigationMorph removeSelector: #addButton:balloonText:for:!BookMorph class removeSelector: #makeBookOfProjects:!BookMorph removeSelector: #linkProjectsInBookOrder!