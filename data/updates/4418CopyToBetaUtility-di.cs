'From Squeak3.2alpha of 2 October 2001 [latest update: #4417] on 3 October 2001 at 8:56:11 pm'!"Change Set:		CopyToBetaUtilityDate:			3 October 2001Author:			Dan IngallsDefines a simple method for copying a number of updates to another (eg, beta) version on the updates servers."!!ServerDirectory methodsFor: 'updates' stamp: 'di 10/3/2001 16:01'!copyUpdatesNumbered: selectList toVersion: otherVersion	"Into the section of updates.list corresponding to otherVersion,	copy all the fileNames from this version matching the selectList.""		(ServerDirectory serverInGroupNamed: 'Disney Internal Updates*')			copyUpdatesNumbered: #(4411 4412) to version: 'Squeak3.1beta'."	| myServers updateStrm seq indexPrefix listContents version versIndex lastNum otherVersIndex additions outOfOrder |	self openGroup.	indexPrefix _ (self groupName includes: $*) 		ifTrue: [(self groupName findTokens: ' ') first]	"special for internal updates"		ifFalse: ['']. 	"normal"	myServers _ self checkServersWithPrefix: indexPrefix					andParseListInto: [:x | listContents _ x].	myServers size = 0 ifTrue: [self closeGroup.  ^ self].	version _ SystemVersion current version.	versIndex _ (listContents collect: [:pair | pair first]) indexOf: version.	versIndex = 0 ifTrue:		[self inform: 'There is no section in updates.list for your version'.		self closeGroup.  ^ nil].	"abort"	otherVersIndex _ (listContents collect: [:pair | pair first]) indexOf: otherVersion.	otherVersIndex = 0 ifTrue:		[self inform: 'There is no section in updates.list for the target version'.		self closeGroup.  ^ nil].	"abort"	versIndex < listContents size ifTrue:		[(self confirm: 'This system, ', version ,				' is not the latest version.\OK to copy updates from that old version?' withCRs)			ifFalse: [self closeGroup.  ^ nil]].	"abort"	"Append all fileNames in my list that are not in the export list"	additions _ OrderedCollection new.	outOfOrder _ OrderedCollection new.	lastNum _ (listContents at: otherVersIndex) last isEmpty		ifTrue: [0]  "no checking if the current list is empty"		ifFalse: [(listContents at: otherVersIndex) last last initialIntegerOrNil].	(listContents at: versIndex) last do:		[:fileName | seq _ fileName initialIntegerOrNil.		(selectList includes: seq) ifTrue:			[seq > lastNum				ifTrue: [additions addLast: fileName]				ifFalse: [outOfOrder addLast: seq]]].	outOfOrder isEmpty ifFalse:		[PopUpMenu notify: 'Updates numbered ' , outOfOrder asArray printString,		' are out of order.\ The last update in ' withCRs,		otherVersion, ' is ', lastNum printString,		'.\No update will take place.' withCRs.		self closeGroup.  ^ nil].	"abort"	"Save old copy of updates.list on local disk"	FileDirectory default deleteFileNamed: indexPrefix , 'updates.list.bk'.	Utilities writeList: listContents toStream: (FileStream fileNamed: indexPrefix , 'updates.list.bk').	"Write a new copy of updates.list on all servers..."	listContents at: otherVersIndex put:		{otherVersion. (listContents at: otherVersIndex) last , additions}.	updateStrm _ ReadStream on:		(String streamContents: [:s | Utilities writeList: listContents toStream: s]).	myServers do:		[:aServer |		updateStrm reset.		aServer putFile: updateStrm named: indexPrefix , 'updates.list' retry: true.		Transcript show: 'Update succeeded on server ', aServer moniker; cr].	self closeGroup.			Transcript cr; show: 'Be sure to test your new update!!'; cr.! !!ServerDirectory methodsFor: 'updates' stamp: 'di 10/3/2001 14:32'!exportUpdatesExcept: skipList	"Into the section of updates.list corresponding to this version,	copy all the fileNames in the named updates.list for this group	that are more recently numbered.""		(ServerDirectory serverInGroupNamed: 'Disney Internal Updates*')			exportUpdatesExcept: #(3959)."	| myServers updateStrm response seq indexPrefix listContents version versIndex lastNum expContents expVersIndex additions |	self openGroup.	indexPrefix _ (self groupName includes: $*) 		ifTrue: [(self groupName findTokens: ' ') first]	"special for internal updates"		ifFalse: ['']. 	"normal"	myServers _ self checkServersWithPrefix: indexPrefix					andParseListInto: [:x | listContents _ x].	myServers size = 0 ifTrue: [self closeGroup.  ^ self].	version _ SystemVersion current version.	versIndex _ (listContents collect: [:pair | pair first]) indexOf: version.	versIndex = 0 ifTrue:		[self inform: 'There is no section in updates.list for your version'.		self closeGroup.  ^ nil].	"abort"	versIndex < listContents size ifTrue:		[response _ (PopUpMenu labels: 'Make update from an older version\Cancel update' withCRs)			startUpWithCaption: 'This system, ', SystemVersion current version,				' is not the latest version'.		response = 1 ifFalse: [self closeGroup.  ^ nil]].	"abort"	"Get the old export updates.list."	expContents _  Utilities parseListContents: 			(myServers first getFileNamed: 'updates.list') contentsOfEntireFile.	expVersIndex _ (expContents collect: [:pair | pair first]) indexOf: version.	expVersIndex = 0 ifTrue:		[self inform: 'There is no section in updates.list for your version'.		self closeGroup.  ^ nil].	"abort"	lastNum _ (expContents at: expVersIndex) last isEmpty		ifTrue: [0]  "no checking if the current list is empty"		ifFalse: [(expContents at: expVersIndex) last last initialIntegerOrNil].	"Save old copy of updates.list on local disk"	FileDirectory default deleteFileNamed: 'updates.list.bk'.	Utilities writeList: expContents toStream: (FileStream fileNamed: 'updates.list.bk').	"Append all fileNames in my list that are not in the export list"	additions _ OrderedCollection new.	(listContents at: versIndex) last do:		[:fileName | seq _ fileName initialIntegerOrNil.		(seq > lastNum and: [(skipList includes: seq) not]) ifTrue:			[additions addLast: fileName]].	expContents at: expVersIndex put:		{version. (expContents at: expVersIndex) last , additions}.	(self confirm: 'Do you really want to export ' , additions size printString , ' recent updates?')		ifFalse: [self closeGroup.  ^ nil].	"abort"	"Write a new copy of updates.list on all servers..."	updateStrm _ ReadStream on:		(String streamContents: [:s | Utilities writeList: expContents toStream: s]).	myServers do:		[:aServer |		updateStrm reset.		aServer putFile: updateStrm named: 'updates.list' retry: true.		Transcript show: 'Update succeeded on server ', aServer moniker; cr].	self closeGroup.			Transcript cr; show: 'Be sure to test your new update!!'; cr.! !