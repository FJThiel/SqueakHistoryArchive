'From Squeak2.9alpha of 13 June 2000 [latest update: #2411] on 18 June 2000 at 12:59:35 pm'!"Change Set:		156Speedups-smaDate:			18 June 2000Author:			Stefan Matthias AustThis change implements the speed improvements mentioned in my 'How I wasted one hour of my time' story"!!Object methodsFor: 'testing' stamp: 'sma 6/15/2000 15:48'!isString	"Overridden to return true in String, natch"	^ false! !!Bag methodsFor: 'accessing' stamp: 'sma 6/15/2000 17:00'!sortedCounts	"Answer with a collection of counts with elements, sorted by decreasing	count."	| counts |	counts _ SortedCollection sortBlock: [:x :y | x >= y].	contents associationsDo:		[:assn |		counts add: (Association key: assn value value: assn key)].	^ counts! !!Dictionary methodsFor: 'accessing' stamp: 'sma 6/18/2000 12:56'!keysSortedSafely	"Answer a SortedCollection containing the receiver's keys."	| sortedKeys |	sortedKeys _ SortedCollection new: self size.	sortedKeys sortBlock:		[:x :y |  "Should really be use <obj, string, num> compareSafely..."		((x isString and: [y isString])			or: [x isNumber and: [y isNumber]])			ifTrue: [x < y]			ifFalse: [x class == y class				ifTrue: [x printString < y printString]				ifFalse: [x class name < y class name]]].	self keysDo: [:each | sortedKeys addLast: each].	^ sortedKeys reSort! !!MessageSet methodsFor: 'private' stamp: 'sma 6/15/2000 17:41'!initializeMessageList: anArray	messageList _ anArray collect: [:each |		MessageSet parse: each toClassAndSelector: [:class :sel |			class name , ' ' , sel , ' {' , ((class organization categoryOfElement: sel) ifNil: ['']) , '}']].	messageListIndex _ 0.	contents _ ''! !!OrderedCollection methodsFor: 'private' stamp: 'sma 6/15/2000 13:21'!find: oldObject	| index |	index _ firstIndex.	[index <= lastIndex]		whileTrue:			[(array at: index) = oldObject ifTrue: [^ index].			index _ index + 1].	self errorNotFound: oldObject! !!OrderedCollection methodsFor: 'private' stamp: 'sma 6/15/2000 13:27'!insert: anObject before: spot	| index delta spotIndex|	spotIndex _ spot.	delta _ spotIndex - firstIndex.	firstIndex = 1		ifTrue: 			[self makeRoomAtFirst.			spotIndex _ firstIndex + delta].	firstIndex _ firstIndex - 1.	array		replaceFrom: firstIndex		to: spotIndex - 2		with: array		startingAt: firstIndex + 1.	array at: spotIndex - 1 put: anObject."	index _ firstIndex _ firstIndex - 1.	[index < (spotIndex - 1)]		whileTrue: 			[array at: index put: (array at: index + 1).			index _ index + 1].	array at: index put: anObject."	^ anObject! !!String methodsFor: 'testing' stamp: 'sma 6/15/2000 15:48'!isString	^ true! !