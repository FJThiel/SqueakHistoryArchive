'From Squeak 2.0 of May 22, 1998 on 3 June 1998 at 9:50:30 pm'!"Change Set:		sw_TabbedPaletteDate:			3 June 1998Author:			Scott WallacePuts a TabbedPalette in the standard parts bin.New TabbedPalette features:  *  paste an entire book as a new tab, either:		a.  Before the currently selected tab, or...		b.  After all existing tabs  *  remove an entire tab  *  rename a tab  *  recolor a tab  *  add a new tab"!BookMorph subclass: #TabbedPaletteComplex	instanceVariableNames: 'tabsMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Experimental-EToy-Support'!!BookMorph methodsFor: 'initialization' stamp: 'sw 5/31/1998 00:40'!addDressing	| controlColor pageControls |	self addMorph: (Morph new color: color; extent: 0@10).  "spacer"	controlColor _ (color saturation > 0.1)		ifTrue:			[color lighter]		ifFalse:			[color darker].	pageControls _ Preferences noviceMode		ifTrue:			[self makeKidsPageControlsColored: controlColor]		ifFalse:			[self makeAuthoringPageControlsColored: controlColor].	pageControls borderWidth: 1; inset: 4.				self addMorph: pageControls! !!EToyHolder methodsFor: 'demo stuff' stamp: 'sw 5/31/1998 23:00'!scaffoldingMailStrings	^ #('You have Mail!!')! !!EToyWorld methodsFor: 'misc' stamp: 'sw 6/1/1998 14:20'!adjustTabs	"Get the tabs names right"	| but tabHeight  aTitle projects which balloonText |	tabHeight _ 15.	tabs removeAllMorphs.	projects _ ScheduledControllers scheduledWindowControllers		select: [:c | c view isKindOf: ProjectView]		thenCollect: [:c | c model].	projects doWithIndex: [:project :ind |		aTitle _ project name.		but _ tabs addButtonShowing: aTitle, '              '			named: aTitle selector: #selectTabNamed: 			arguments: (Array with: aTitle) padding: tabs padding atIndex: ind.		but font: (StrikeFont familyName: 'ComicBold' size: 16).		but extent: (but extent x @ tabHeight).		(which _ #('Imagineers' 'Etoys') indexOf: aTitle ifAbsent: [0]) > 0			ifTrue:			[balloonText _#('Would you like to meet some other imagineers?Click here!!''Click here to explore the world of EToys!!') at: which.			but setBalloonText: balloonText]].	"Change its background color?"	tabs color: Color transparent; borderWidth: 0.! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 5/30/1998 22:34'!classNamesForStandardPartsBin	^	#(			(RectangleMorph EllipseMorph StarMorph  CurveMorph PolygonMorph TextMorph ImageMorph		PasteUpMorph PaintInvokingMorph  StringMorph)		(BookMorph SimpleButtonMorph JoystickMorph)		(TabbedPaletteComplex)		( RecordingControlsMorph ClockMorph))! !!TabbedPaletteComplex reorganize!('disk-file load/store' clobberContentsOfTabNamed: wantsDroppedMorph:event:)('miscellaneous' padding repelsMorph:event: showPageTurningFeedbackFromOrigin:ascending:)('initialization' configureForKids defaultPageSize initialize replaceBook:with: setInitialState)('menu' addBookMenuItemsTo:hand: deleteTab insertTab pasteBookAfterLastTab pasteBookAsNewTab pasteBookAsNewTabAtIndex: recolorTab renameTab)('tabs' addNewTab addTabNamed:color:atIndex: objectAtTab: selectTabNamed: selectedTabStringButtonMorph tabNamesInUse tabsMorph unusedTabNameLike:)!!TabbedPaletteComplex methodsFor: 'disk-file load/store' stamp: 'sw 5/31/1998 00:20'!wantsDroppedMorph: aMorph event: evt	(tabsMorph bounds containsPoint: evt cursorPoint) ifTrue:		[^ false  "unless it's a book, perhaps, someday"].	^ currentPage wantsDroppedMorph: aMorph event: evt! !!TabbedPaletteComplex methodsFor: 'miscellaneous' stamp: 'sw 6/1/1998 14:18'!padding	^ 10! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 6/3/1998 21:36'!addBookMenuItemsTo: aCustomMenu hand: aHandMorph	| subMenu |	subMenu _ MenuMorph new defaultTarget: self.	subMenu add:  'add tab' action: #insertTab.	subMenu addLine.	subMenu add:  'delete selected tab' action: #deleteTab.	subMenu add:  'rename selected tab' action: #renameTab.	subMenu add:  'recolor selected tab' action: #recolorTab.	(self primaryHand classOfPasteBuffer isKindOf: BookMorph class) ifTrue:		[subMenu addLine.		subMenu add: 'paste book before current tab' action: #pasteBookAsNewTab.		subMenu add: 'paste book after last tab' action: #pasteBookAfterLastTab].	aCustomMenu add: 'tabs...' subMenu: subMenu! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 5/30/1998 22:13'!deleteTab	| aMorph |	tabsMorph submorphs size <= 1 ifTrue: [^ self beep].	aMorph _ self selectedTabStringButtonMorph.	self deletePage.	aMorph delete! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 5/30/1998 22:27'!insertTab	self addTabNamed: 'tab' color: Color blue atIndex: (pages indexOf: currentPage)! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 6/3/1998 21:33'!pasteBookAfterLastTab	^ self pasteBookAsNewTabAtIndex: (pages size + 1)! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 6/3/1998 21:33'!pasteBookAsNewTab	^ self pasteBookAsNewTabAtIndex: (pages indexOf: currentPage)! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 6/3/1998 21:32'!pasteBookAsNewTabAtIndex: anIndex	| aBook nameToUse saturatedColor but |	aBook _ self primaryHand objectToPaste.	(aBook isKindOf: BookMorph) ifFalse: [^ self inform: 'oops, no book to paste'].	nameToUse _ aBook externalName.	[nameToUse endsWithDigit] whileTrue: [nameToUse _ nameToUse allButLast].	nameToUse size == 0 ifTrue: [nameToUse _ 'tab'].	nameToUse _ self unusedTabNameLike: nameToUse.	aBook setNameTo: nameToUse.	saturatedColor _ aBook currentPage color darker darker.	but _ tabsMorph addButtonShowing: nameToUse named: nameToUse selector: #selectTabNamed: arguments: (Array with: nameToUse) padding: self padding atIndex: anIndex.	but buttonOnColor: saturatedColor.	but buttonOffColor: aBook currentPage color.	self insertPage: aBook pageSize: nil atIndex: anIndex.	self selectTabNamed: nameToUse! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 5/30/1998 21:43'!recolorTab	"Prompt the user for a new color for the currently-selected tab, and carry out her request"	| selectedBookName aColor tabStringMorph |	selectedBookName _ self currentPage externalName.	self inform: 'Choose new color for tab named ', selectedBookName.	aColor _ Color fromUser.	(tabStringMorph _ self selectedTabStringButtonMorph) ifNil: [^ self beep].	tabStringMorph buttonOnColor: aColor.	tabStringMorph buttonOffColor: aColor muchLighter.	tabStringMorph color: aColor.	tabStringMorph changed! !!TabbedPaletteComplex methodsFor: 'menu' stamp: 'sw 6/1/1998 14:06'!renameTab	"Prompt the user for a new name for the currently-selected tab, and carry out her request"	| selectedBookName reply tabStringMorph |	selectedBookName _ self currentPage externalName.	reply _ FillInTheBlank  request: 'New name? ' initialAnswer: selectedBookName.	(reply isNil or: [reply = selectedBookName]) ifTrue: [^ self].	(self tabNamesInUse includes: reply) ifTrue: [^ self inform: 'That name is already used here.'].	(tabStringMorph _ self selectedTabStringButtonMorph) ifNil: [^ self beep].	tabStringMorph contents: reply; changed.	tabStringMorph arguments: (Array with: reply).	tabStringMorph setNameTo: reply.	self currentPage setNameTo: reply! !!TabbedPaletteComplex methodsFor: 'tabs' stamp: 'sw 6/1/1998 14:14'!addTabNamed: str color: saturatedColor atIndex: anIndex	| aName paleColor but aBookMorph |	aName _ str withBlanksTrimmed.  "backward compat; nowadays comes in with no blanks"	paleColor _ saturatedColor muchLighter.	but _ tabsMorph addButtonShowing: aName named: aName selector: #selectTabNamed: arguments: (Array with: aName) padding: self padding atIndex: anIndex.	but buttonOnColor: saturatedColor.	but buttonOffColor: paleColor.	but color: paleColor.	aBookMorph _ BookMorph new pageSize: pageSize.	aBookMorph removeEverything; color: paleColor; setNameTo: aName; addDressing; insertPageColored: paleColor.	self insertPage: aBookMorph pageSize: nil atIndex: anIndex.	self selectTabNamed: aName.	^ aBookMorph! !!TabbedPaletteComplex methodsFor: 'tabs' stamp: 'sw 5/30/1998 21:40'!selectedTabStringButtonMorph	"Answer the StringButtonMorph representing the current tab"	| selectedBookName tabStringMorph |	selectedBookName _ self currentPage externalName.	tabStringMorph _ tabsMorph stringButtonSubmorphs detect: [:m | m contents withBlanksTrimmed = selectedBookName] ifNone: [self beep.  ^ nil].	^ tabStringMorph! !!TabbedPaletteComplex methodsFor: 'tabs' stamp: 'sw 5/30/1998 22:04'!tabNamesInUse	^ (tabsMorph stringButtonSubmorphs collect: [:m | m externalName])! !!TabbedPaletteComplex methodsFor: 'tabs' stamp: 'sw 5/30/1998 22:05'!unusedTabNameLike: aString	| testString testSuffix usedNames |	testString _ aString.	testSuffix _ 0.	usedNames _ self tabNamesInUse.	[usedNames includes: testString] whileTrue:		[testSuffix _ testSuffix + 1.		testString _ aString, (testSuffix printString)].	^ testString! !!TabbedPaletteComplex class reorganize!('all' authoringPrototype defaultNameStemForInstances)!!TabbedPaletteComplex class methodsFor: 'all' stamp: 'sw 5/30/1998 21:49'!authoringPrototype	| aComplex |	aComplex _ self new.	aComplex pageSize: 180 @ 88.	aComplex addTabNamed: 'one' color: Color red atIndex: 1.	aComplex addTabNamed: 'two' color: Color blue atIndex: 2.	^ aComplex! !!TabbedPaletteComplex class methodsFor: 'all' stamp: 'sw 6/3/1998 21:27'!defaultNameStemForInstances	^ 'tabbedPalette'! !!TabsMorph methodsFor: 'all' stamp: 'sw 6/3/1998 21:21'!addButtonShowing: aString named: aName selector: aSymbol arguments: argList padding: padding atIndex: anIndex	| b indexToUse |	indexToUse _ anIndex == nil ifTrue: [submorphs size + 1] ifFalse: [(2 * (anIndex - 1)) + 1].	indexToUse == 1 ifFalse:		[self privateAddMorph: (Morph new extent: (padding @ 0)) atIndex: (indexToUse - 1)		"spacer before"].	b _ StringButtonMorph new.	b	contents: aString;		color: self buttonOffColor;		target: self;		actionSelector: aSymbol.	argList ifNotNil: [b arguments: argList].	b setNameTo: aName.	self privateAddMorph: b atIndex: indexToUse.	(indexToUse == 1 and: [submorphs size > 1]) ifTrue:		[self privateAddMorph: (Morph new extent: (padding @ 0)) atIndex: 2		"spacer after"].	^ b! !!TabsMorph methodsFor: 'all' stamp: 'sw 5/30/1998 23:06'!selectTabNamed: aString	| aWorld |	(aWorld _ self world) ifNotNil: [aWorld abandonAllHalos].  "nil can happen at init time"	self highlightTabName: aString.	owner goToPageMorphNamed: aString! !!MappedTabsMorph methodsFor: 'all' stamp: 'sw 6/1/1998 14:16'!addButtonShowing: aString named: aName selector: aSymbol arguments: argList padding: padding atIndex: anIndex	| bb |	bb _ super addButtonShowing: aString named: aName 			selector: aSymbol arguments: argList padding: padding atIndex: anIndex.	tabsInOrder ifNil: [tabsInOrder _ OrderedCollection new].	tabsInOrder addLast: bb.	^ bb! !TabsMorph removeSelector: #addButtonShowing:named:selector:arguments:atIndex:!MappedTabsMorph removeSelector: #addButtonShowing:named:selector:arguments:atIndex:!