'From Squeak3.2alpha of 1 November 2001 [latest update: #4461] on 3 November 2001 at 6:31:20 pm'!!Module methodsFor: 'changing defined names' stamp: 'hg 11/1/2001 16:48'!defineName: aString as: value export: exportIt	(self localAssocFor: aString ifAbsent: [nil]) ifNotNil: [		self notify: aString asText allBold, ' already defined in ', self pathAsMessages, '!!\Proceed will overwrite it.' withCRs].	^self redefineName: aString as: value export: exportIt! !!ModuleRefactorer methodsFor: 'converting pools' stamp: 'hg 11/1/2001 18:28'!convertPoolNamed: poolName inModule: homePath toPoolModule: poolModuleName	"pool dictionaries are now redundant, as modules can be used to collect shared variables. Change current pools to modules"	| poolModule users homeModule poolDictionary |	homeModule _ Module fromPath: homePath forceCreate: true.	poolDictionary _ homeModule definitionFor: poolName ifAbsent: [nil].	[poolModule _ Module fromPath: (homePath copyWith: poolModuleName) forceCreate: true]		on: Warning do: [:ex | ex resume: true].		poolModuleName = #Constants ifFalse: [		"Make pool module name reachable, e.g. TextConstants"		poolModule parentModule exportName: poolModuleName.		Module smalltalk redefineName: poolModuleName as: poolModule export: false].	poolName ~= poolModuleName ifTrue: [		homeModule removeName: poolName].	"defeat capitalization check e.g. for the Alice pool"	[poolDictionary associationsDo: [:ass |		poolModule defineName: ass key as: ass value export: true].	] on: Warning do: [:ex | ex resume: true].	users _ Set new.	Module root deepClassesDo: [:class | 		(class sharedPools identityIncludes: poolDictionary) ifTrue: [users add: class]].	users do: [:class |		(class module hasNeighborModule: poolModule) ifFalse: [			class module externalModule: poolModule alias: nil version: nil importNames: true].		class privateRemoveSharedPool: poolDictionary].	"self testRecompileClasses: users."	"methodRefs _ Smalltalk allCallsOn: (Smalltalk associationAt: k)"! !!ModuleRefactorer methodsFor: 'converting pools' stamp: 'hg 11/3/2001 18:31'!convertPools	"pool dictionaries are now redundant, as modules can be used to collect shared variables. Change current pools to modules"	"self newModulesForPools isEmpty ifFalse: [		(Transcript openAsMorphLabel: 'Transcript') openInWorld]."   	self newModulesForPools do: [:triplet |		self convertPoolNamed: triplet first inModule: triplet second toPoolModule: triplet third].! !!ModuleRefactorer methodsFor: 'utilities' stamp: 'hg 11/2/2001 18:56'!transferBindingsNamedIn: nameList from: oldModule to: newModule	| assoc |	nameList do: [:aName |		assoc _ oldModule localAssocFor: aName ifAbsent: [self error: 'name not found'].		"Under weak modules, leave Smalltalk intact"		oldModule = Module smalltalk & Preferences strongModules not			ifFalse: [oldModule removeSimplyName: aName]			ifTrue: [oldModule exportedNames removeKey: aName asSymbol ifAbsent: []].		newModule addAssoc: assoc export: true.		(assoc value isKindOf: Class) ifTrue: [assoc value module: newModule]]! !!Module methodsFor: 'changing defined names' stamp: 'di 11/5/2001 15:58'!removeSimplyName: aString	"Variant called from transferBindings doesn't remove from Smalltalk"	self definedNames removeKey: aString asSymbol.	self exportedNames removeKey: aString asSymbol ifAbsent: [].	self invalidateCaches 		! !!FromVersion0p0000to0001 methodsFor: 'converting pools' stamp: 'hg 11/2/2001 13:33'!newModulesForPools	"For each pool, list triplets of its name, home module and name of pool module."		^#(			(AliceConstants (Squeak Balloon3D Alice Cast) AliceConstants)		(B3DEngineConstants (Squeak Balloon3D Engine) B3DEngineConstants)		(BalloonEngineConstants (Squeak Balloon Engine) BalloonEngineConstants)		(EventSensorConstants (Squeak Kernel Processes) EventSensorConstants)		(FFIConstants (Squeak FFI Kernel) FFIConstants)		(GZipConstants	(Squeak System Compression) GZipConstants)		(KlattResonatorIndices	(Squeak Speech Klatt) KlattResonatorIndices)		(References	(Squeak EToy Scripting) References)		(TextConstants	(Squeak Collections Text) TextConstants)		(WonderlandConstants	(Squeak Balloon3D Wonderland Core) WonderlandConstants)		(ZipFileConstants	(Squeak System Compression) ZipFileConstants)		(ZipConstants	(Squeak System Compression) ZipConstants)	)! !!ModuleReference methodsFor: 'testing' stamp: 'hg 11/1/2001 20:14'!refersToSubmodule	^false! !!SubmoduleReference methodsFor: 'testing' stamp: 'hg 11/1/2001 20:14'!refersToSubmodule	^true! !!TransitionalSmalltalkModule methodsFor: 'changing defined names' stamp: 'hg 11/1/2001 18:44'!addAssoc: assoc export: exportIt	"override to preserve the association in Smalltalk"	| oldAssoc isAChange newObject recompiledClass |	oldAssoc _ self definedNames associationAt: assoc key ifAbsent: [nil].	isAChange _		oldAssoc notNil and: [			newObject _ oldAssoc value ~= assoc value.			recompiledClass _ oldAssoc value isBehavior & assoc value isBehavior 								and: [oldAssoc value name = assoc value name].			newObject & recompiledClass not].	isAChange		ifTrue: [			Transcript cr; show: 'Smalltalk at: #', assoc key, ' was redefined from ', 				(oldAssoc value printStringLimitedTo: 50), ' to ', 				(assoc value printStringLimitedTo: 50).			self definedNames at: assoc key put: assoc value]		ifFalse: [			[self definedNames at: assoc key put: assoc value]				on: AttemptToWriteReadOnlyGlobal do:[:ex| ex resume: true].		].	exportIt ifTrue: [self exportName: assoc key].	self invalidateCaches 	! !