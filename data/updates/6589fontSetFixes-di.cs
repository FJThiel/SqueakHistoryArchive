'From Squeak3.8gamma of ''24 November 2004'' [latest update: #6548] on 24 January 2005 at 4:55:45 pm'!"Change Set:		FontSetFixes-diDate:			24 January 2005Author:			Dan IngallsRecent changes to support extended character sets have made it no longer possible to fileOut code with arbitrary string literals and read them back in again without corruption.  The fileOut / fileIn capability of FontSet depended on this ability and is consequently broken in release 3.8.This changeSet changes that mechanism to use MIME64 encoded literals which still work in the latest releases.  It includes a method that will accept the new encodings, and it puts a useful comment in the method most likely to break if an attempt is made to read in one of the now-unreadable fileOuts.This code has been tested in 3.8, and it should work in old Squeaks back to when MIME encoding was introduced.  It therefore not only fixes 3.8 in this regard, but it can be filed into old Squeaks to make them FontSet-compatible with 3.8 when fixed."!!FontSet class methodsFor: 'installing' stamp: 'di 1/24/2005 12:48'!fontNamed: fontName fromLiteral: aString	"NOTE -- THIS IS AN OBSOLETE METHOD THAT MAY CAUSE ERRORS.The old form of fileOut for FontSets produced binary literal strings which may not be accurately read in systems with support for international character sets.  If possible, file the FontSet out again from a system that produces the newer MIME encoding (current def of compileFont:), and uses the corresponding altered version of this method.  If this is not easy, then	file the fontSet into an older system (3.7 or earlier),	assume it is called FontSetZork...	execute FontSetZork installAsTextStyle.	copy the compileFont: method from this system into that older one.	remove the class FontSetZork.	Execute:  FontSet convertTextStyleNamed: 'Zork', and see that it creates a new FontSetZork.	FileOut the new class FontSetZork.	The resulting file should be able to be read into this system."	^ StrikeFont new 		name: fontName;		readFromStrike2Stream: (ReadStream on: aString asByteArray)! !!FontSet class methodsFor: 'installing' stamp: 'di 1/24/2005 11:13'!fontNamed: fontName fromMimeLiteral: aString	"This method allows a font set to be captured as sourcecode in a subclass.	The string literals will presumably be created by printing, eg,		(FileStream readOnlyFileNamed: 'Palatino24.sf2') contentsOfEntireFile,		and following the logic in compileFont: to encode and add a heading.	See the method installAsTextStyle to see how this can be used."	^ StrikeFont new 		name: fontName;		readFromStrike2Stream: (Base64MimeConverter mimeDecodeToBytes: aString readStream)! !!FontSet class methodsFor: 'compiling' stamp: 'di 1/24/2005 12:40'!compileFont: strikeFont 	| tempName literalString header sizeStr familyName |	tempName _ 'FontTemp.sf2'.	strikeFont writeAsStrike2named: tempName.	literalString _ (Base64MimeConverter mimeEncode: (FileStream readOnlyFileNamed: tempName) binary) contents fullPrintString.	sizeStr _ strikeFont pointSize asString.	familyName _ strikeFont name first: (strikeFont name findLast: [:x | x isDigit not]).	header _ 'size' , sizeStr , '	^ self fontNamed: ''' , familyName , sizeStr , ''' fromMimeLiteral:' .	self class		compile: header , literalString		classified: 'fonts'		notifying: nil.	FileDirectory default deleteFileNamed: tempName! !