'From Squeak3.1alpha of 28 February 2001 [latest update: #4174] on 26 June 2001 at 1:05:57 pm'!"Change Set:		chgdMessageSet-swDate:			26 June 2001Author:			Scott WallaceReconciles ChangedMessageSet (which is the model of the special kind of message-list browser you get when you request 'browse methods' from the change-set-list-pane menu of a Change Sorter) with recent changes by Ted (to allow class comments to be seen in message lists) and Bob (use of MethodReference objects in messageLists rather than strings).  The three noticeable effects of this update will be that:	(1) Class comments changed in a change set will be viewable & editible in its associated change-message-set browser.	(2) A submission in such a browser will no longer drop the user into a debugger if the selector submitted is different from the one formerly being viewed.	(3) And after such a submission-with-changed-selector, the correct selection will be made in the browser."!!ChangedMessageSet commentStamp: '<historical>' prior: 0!A ChangedMessageSet is a message set associated with a change-set; it bears an entry for every method added or changed in the change set, as well as for every class-comment of which the change-set bears a note.!!ChangeSet methodsFor: 'method changes' stamp: 'sw 6/26/2001 12:15'!changedMessageList	"Used by a message set browser to access the list view information."	| messageList classNameInFull classNameInParts |	messageList _ OrderedCollection new.	changeRecords associationsDo: [:clAssoc |		classNameInFull _ clAssoc key asString.		classNameInParts _ classNameInFull findTokens: ' '.		(clAssoc value allChangeTypes includes: #comment) ifTrue:			[messageList add:				(MethodReference new					setClassSymbol: classNameInParts first asSymbol					classIsMeta: false 					methodSymbol: #Comment 					stringVersion: classNameInFull, ' Comment')].		clAssoc value methodChangeTypes associationsDo: [:mAssoc |			(#(remove addedThenRemoved) includes: mAssoc value) ifFalse:				[messageList add:					(MethodReference new						setClassSymbol: classNameInParts first asSymbol						classIsMeta: classNameInParts size > 1 						methodSymbol: mAssoc key 						stringVersion: classNameInFull, ' ' , mAssoc key)]]].	^ messageList asSortedArray! !!ChangedMessageSet methodsFor: 'acceptance' stamp: 'sw 6/26/2001 11:42'!contents: aString notifying: aController	"Accept the string as new source for the current method, and make certain the annotation pane gets invalidated"	| existingSelector existingClass superResult newSelector |	existingSelector _ self selectedMessageName.	existingClass _ self selectedClassOrMetaClass.	superResult _ super contents: aString notifying: aController.	superResult ifTrue:  "succeeded"		[newSelector _ Parser new parseSelector: aString.		newSelector ~= existingSelector			ifTrue:   "Selector changed -- maybe an addition"				[self reformulateList.				self changed: #messageList.				self messageList doWithIndex:					[:aMethodReference :anIndex |						(aMethodReference actualClass == existingClass and:									[aMethodReference methodSymbol == newSelector])							ifTrue:								[self messageListIndex: anIndex]]]].	^ superResult! !!ChangedMessageSet methodsFor: 'reformulation' stamp: 'sw 6/26/2001 11:20'!reformulateList	"Reformulate the message list of the receiver"	self initializeMessageList: (changeSet changedMessageListAugmented select: 		[:each | each isValid])! !!MethodReference methodsFor: 'queries' stamp: 'sw 6/26/2001 12:12'!isValid	"Answer whether the receiver represents a current selector or Comment"	| aClass |	(aClass _ self actualClass) ifNil: [^ false].	^ (aClass includesSelector: methodSymbol) or:		[methodSymbol == #Comment]! !!MethodReference reorganize!('queries' actualClass asStringOrText classIsMeta classSymbol isValid methodSymbol)('setting' setClass:methodSymbol:stringVersion: setClassAndSelectorIn: setClassSymbol:classIsMeta:methodSymbol:stringVersion: setStandardClass:methodSymbol:)('string version' stringVersion stringVersion:)('comparisons' <= =)!!ChangedMessageSet reorganize!('initialization' changeSet:)('acceptance' contents:notifying:)('message list' growable)('reformulation' reformulateList)!