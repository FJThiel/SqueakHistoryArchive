'From Squeak 2.2 of Sept 23, 1998 on 23 November 1998 at 9:57:51 am'!"Change Set:		progressTitlesDate:			23 November 1998Author:			Scott WallaceGives meaningful and useful titles (rather than the former 'reading a stream') to the progress bars that accompany updating code from the server, formulating change-list browsers & file-contents browsers, and filing in code from disk."!!ChangeList methodsFor: 'scanning' stamp: 'sw 11/19/1998 16:00'!scanFile: aFile from: startPosition to: stopPosition	| itemPosition item prevChar |	file _ aFile.	changeList _ OrderedCollection new.	list _ OrderedCollection new.	listIndex _ 0.	file position: startPosition.'Scanning ', aFile localName, '...'	displayProgressAt: Sensor cursorPoint	from: startPosition to: stopPosition	during: [:bar |	[file position < stopPosition]		whileTrue:		[bar value: file position.		[file atEnd not and: [file peek isSeparator]]				whileTrue: [prevChar _ file next].		(file peekFor: $!!)		ifTrue:			[prevChar = Character cr ifTrue: [self scanCategory]]		ifFalse:			[itemPosition _ file position.			item _ file nextChunk.			file skipStyleChunk.			item size > 0 ifTrue:				[self addItem: (ChangeRecord new file: file position: itemPosition type: #doIt)					text: 'do it: ' , (item contractTo: 50)]]]].	listSelections _ Array new: list size withAll: false! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 11/22/1998 23:57'!fileIntoNewChangeSet	"Obtain a file designation from the user, and file its contents into a new change set whose name is a function of the filename.  Show the new set and leave the current changeSet unaltered."	| aFileName  aNewChangeSet |	self okToChange ifFalse: [^ self].	aFileName _ FillInTheBlank request: 'Name of file to be imported: '.	aFileName size == 0 ifTrue: [^ self].	(FileDirectory default fileExists: aFileName) ifFalse:		[^ self inform: 'Sorry -- cannot find that file'].	aNewChangeSet _ self class 			newChangesFromStream: (FileStream readOnlyFileNamed: aFileName) 			named: aFileName.	aNewChangeSet ifNotNil: [self showChangeSet: aNewChangeSet]! !!ChangeSorter class methodsFor: 'all' stamp: 'sw 11/22/1998 23:59'!newChangesFromStream: aStream named: aName	"File in the code from the stream into a new change set whose name is derived from aName.  Leave the 'current change set' unchanged.   Returns the new change set;  Returns nil on failure."	|  newName aNewChangeSet existingChanges |	existingChanges _ Smalltalk changes.	newName _ aName sansPeriodSuffix.	(self changeSetNamed: newName) ~~ nil		ifTrue:			[self inform: 'Sorry -- "', newName, '" is already used as a change-set name'.			aStream close.			^ nil].	aNewChangeSet _ ChangeSet new initialize.	aNewChangeSet name: newName.	AllChangeSets add: aNewChangeSet.	Smalltalk newChanges: aNewChangeSet.	aStream fileInAnnouncing: 'Loading ', newName, '...'.	Transcript cr; show: 'File ', aName, ' successfully filed in to change set ', newName.	Smalltalk newChanges: existingChanges.	^ aNewChangeSet! !!FileList methodsFor: 'file list menu' stamp: 'sw 11/22/1998 23:57'!fileIntoNewChangeSet	"File in all of the contents of the currently selected file, if any, into a new change set."	| ff |	listIndex = 0 ifTrue: [^ self].	ff _ directory readOnlyFileNamed: self fullName.	(self fileNameSuffix sameAs: 'html') ifTrue: [ff _ ff asHtml].	ChangeSorter newChangesFromStream: ff named: fileName.! !!ReadWriteStream methodsFor: 'fileIn/Out' stamp: 'sw 11/19/1998 16:31'!fileIn	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation."	^ self fileInAnnouncing: 'Reading ' , self name! !!ReadWriteStream methodsFor: 'fileIn/Out' stamp: 'sw 11/19/1998 16:29'!fileInAnnouncing: announcement	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation.  Put up a progress report with     the given announcement as the title."	| val chunk |	announcement displayProgressAt: Sensor cursorPoint		from: 0 to: self size		during:		[:bar |		[self atEnd]			whileFalse: 				[bar value: self position.				self skipSeparators.				val _ (self peekFor: $!!)					ifTrue: [(Compiler evaluate: self nextChunk logged: false)								scanFrom: self]					ifFalse: [chunk _ self nextChunk.							self checkForPreamble: chunk.							Compiler evaluate: chunk logged: true].				self skipStyleChunk].		self close].	^ val! !!FileStream methodsFor: 'fileIn/Out' stamp: 'sw 11/19/1998 16:42'!fileIn	"Guarantee that the receiver is readOnly before fileIn for efficiency and	to eliminate remote sharing conflicts."	self readOnly.	self fileInAnnouncing: 'Loading ', self localName! !