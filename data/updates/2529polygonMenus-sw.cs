'From Squeak2.9alpha of 26 July 2000 [latest update: #2527] on 28 August 2000 at 8:04:02 pm'!"Change Set:		polygonMenus-swDate:			28 August 2000Author:			Scott WallaceMakes the wording and availability of menu items relating to polygons be more dynamically responsive to changing circumstances, thus allowing persistent menus to remain correct as polygon properties change."!!MenuMorph methodsFor: 'construction' stamp: 'sw 8/28/2000 18:02'!addWithLabel: aLabel enablement: anEnablementSelector action: aSymbol	self addWithLabel: aLabel enablementSelector: anEnablementSelector target: defaultTarget selector: aSymbol argumentList: EmptyArray! !!MenuMorph methodsFor: 'construction' stamp: 'sw 8/28/2000 18:01'!addWithLabel: aLabel enablementSelector: enablementSelector target: target selector: aSymbol argumentList: argList	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object with the given arguments. If the selector takes one more argument than the number of arguments in the given list, then the triggering event is supplied as as the last argument.  In this variant, the wording of the menu item is constant, and the optional enablementSelector determines whether or not the item should be enabled."	| item |	item _ UpdatingMenuItemMorph new		target: target;		selector: aSymbol;		contents: aLabel;		wordingProvider: target wordingSelector: nil;		enablementSelector: enablementSelector;		arguments: argList asArray.	self addMorphBack: item.! !!PolygonMorph methodsFor: 'access' stamp: 'sw 8/25/2000 22:37'!isClosed	^ closed! !!PolygonMorph methodsFor: 'access' stamp: 'sw 8/23/2000 16:16'!makeOpenOrClosed	"toggle the open/closed status of the receiver"	closed ifTrue: [self makeOpen] ifFalse: [self makeClosed]! !!PolygonMorph methodsFor: 'access' stamp: 'sw 8/23/2000 16:17'!openOrClosePhrase	^ closed ifTrue: ['open polygon'] ifFalse: ['close polygon']! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/28/2000 18:13'!addCustomMenuItems: aMenu hand: aHandMorph	super addCustomMenuItems: aMenu hand: aHandMorph.	aMenu addUpdating: #handlesShowingPhrase target: self action: #showOrHideHandles.	aMenu addUpdating: #openOrClosePhrase target: self action: #makeOpenOrClosed.	aMenu addUpdating: #fillPhrase enablementSelector: #isClosed target: self selector: #toggleFill argumentList: (Array with: quickFill not).	aMenu addLine.	aMenu addWithLabel: '---' enablement: #enableRemoveArrows action:  #makeNoArrows.	aMenu addWithLabel: '-->' enablement: #enableForwardArrow action:  #makeForwardArrow.	aMenu addWithLabel: '<--' enablement: #enableBackArrow action:  #makeBackArrow.	aMenu addWithLabel: '<->' enablement: #enableBothArrows action:  #makeBothArrows.! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/28/2000 18:10'!enableBackArrow	^ closed not and: [arrows ~~ #back]! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/28/2000 18:10'!enableBothArrows	^ closed not and: [arrows ~~ #both]! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/28/2000 18:10'!enableForwardArrow	^ closed not and: [arrows ~~ #forward]! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/28/2000 18:09'!enableRemoveArrows	^ closed not and: [arrows ~~ #none]! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/25/2000 22:42'!fillPhrase	^ quickFill		ifTrue:	['proper fill']		ifFalse:	['quick fill']! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/19/2000 15:17'!handlesShowingPhrase	^ self showingHandles		ifTrue:			['hide handles']		ifFalse:			['show handles']! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/19/2000 15:16'!showOrHideHandles	self showingHandles		ifTrue:	[self removeHandles]		ifFalse:	[self addHandles]! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/19/2000 15:17'!showingHandles	^ handles notNil! !!PolygonMorph methodsFor: 'menu' stamp: 'sw 8/25/2000 22:39'!toggleFill	self quickFill: quickFill not! !!UpdatingMenuItemMorph methodsFor: 'as yet unclassified' stamp: 'sw 8/28/2000 17:53'!step	| newString enablement |	super step.	wordingProvider ifNotNil:		[wordingSelector ifNotNil:			[newString _ wordingProvider perform: wordingSelector.			newString = contents ifFalse: [self contents: newString]].		enablementSelector ifNotNil:			[enablement _ wordingProvider perform: enablementSelector.			enablement == isEnabled ifFalse:				[self isEnabled: enablement]]]! !