'From Squeak 2.2 of Sept 23, 1998 on 9 October 1998 at 5:22:01 pm'!"Change Set:		RoundFour-diDate:			9 October 1998Author:			Dan IngallsA few more fixes to curves and text...* Polygons and curves no longer offer fill mode choice if not closed.* Curve editing handles appear in front of embedded text, if any.* Text on curves now shows when dragging.* Brown handle drag and cmd-drag now flow text around occlusions....and a number of items from the Squeak Bug List...* Proceeding from a syntax error in MVC now works again.* If you have a syntax error in a do-it in a fileIn, you can proceed after correction.  this never worked before.* In morphic browsers, after you do a spawn, the spawned text is cleared from the original browser.* In the morphic debugger's code pane, 'cancel' now discards unaccepted edits properly.* Similarly, after a cancel (e.g. cmd-l) the old text is cleared from the browser."!Scanner subclass: #Parser	instanceVariableNames: 'here hereType hereMark prevToken prevMark encoder requestor parseNode failBlock requestorOffset tempsMark doitFlag '	classVariableNames: ''	poolDictionaries: ''	category: 'System-Compiler'!StringHolder subclass: #SyntaxError	instanceVariableNames: 'class selector category debugger doitFlag '	classVariableNames: ''	poolDictionaries: ''	category: 'Interface-Debugger'!!Compiler methodsFor: 'error handling' stamp: 'di 10/9/1998 16:50'!notify: aString at: location	"Refer to the comment in Object|notify:."	requestor == nil		ifTrue: [^SyntaxError 					errorInClass: class					withCode: 						(sourceStream contents							copyReplaceFrom: location							to: location - 1							with: aString)					doitFlag: false]		ifFalse: [^requestor					notify: aString					at: location					in: sourceStream]! !!Debugger methodsFor: 'accessing' stamp: 'di 10/9/1998 17:15'!contents 	"Depending on the current selection, different information is retrieved.	Answer a string description of that information.  This information is the	method in the currently selected context."	contents == nil ifTrue: [^ String new].	^ contents copy! !!Morph methodsFor: 'geometry' stamp: 'di 10/9/1998 15:22'!setConstrainedPositionFrom: aPoint	"Change the position of this morph and and all of its submorphs to aPoint, but don't let me go outside my owner's bounds."	| trialRect delta |	trialRect _ aPoint extent: self bounds extent.	delta _ trialRect amountToTranslateWithin: owner bounds.	self position: aPoint + delta.	self layoutChanged  "So that, eg, surrounding text will readjust"! !!Parser methodsFor: 'public access' stamp: 'di 10/9/1998 16:22'!parse: sourceStream class: class noPattern: noPattern context: ctxt notifying: req ifFail: aBlock 	"Answer a MethodNode for the argument, sourceStream, that is the root of 	a parse tree. Parsing is done with respect to the argument, class, to find 	instance, class, and pool variables; and with respect to the argument, 	ctxt, to find temporary variables. Errors in parsing are reported to the 	argument, req, if not nil; otherwise aBlock is evaluated. The argument 	noPattern is a Boolean that is true if the the sourceStream does not 	contain a method header (i.e., for DoIts)."	 | meth |	self init: sourceStream notifying: req failBlock: [^aBlock value].	doitFlag _ noPattern.	encoder _ Encoder new init: class context: ctxt notifying: self.	failBlock_ aBlock.	meth _ self method: noPattern context: ctxt.	encoder _ failBlock _ requestor _ parseNode _ nil. "break cycles & mitigate refct overflow"	^meth! !!Parser methodsFor: 'error handling' stamp: 'di 10/9/1998 16:23'!notify: string at: location	requestor isNil		ifTrue: [encoder == self ifTrue: [^ self fail  "failure setting up syntax error"].				SyntaxError 					errorInClass: encoder classEncoding					withCode: 						(source contents							copyReplaceFrom: location							to: location - 1							with: string , ' ->')					doitFlag: doitFlag]		ifFalse: [requestor					notify: string , ' ->'					at: location					in: source].	^self fail! !!PolygonMorph methodsFor: 'editing' stamp: 'di 10/9/1998 14:35'!dropVertex: evt fromHandle: handle vertIndex: ix	| p |	p _ vertices at: ix.	(((vertices atWrap: ix-1) dist: p) < 3 or:		[((vertices atWrap: ix+1) dist: p) < 3])		ifTrue: ["Drag a vertex onto its neighbor means delete"				self setVertices: (vertices copyReplaceFrom: ix to: ix with: Array new)].	self addHandles! !!PolygonMorph methodsFor: 'menu' stamp: 'di 10/9/1998 14:30'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	handles == nil		ifTrue: [aCustomMenu add: 'show handles' action: #addHandles]		ifFalse: [aCustomMenu add: 'hide handles' action: #removeHandles].	closed		ifTrue:		[aCustomMenu add: 'open polygon' action: #makeOpen.		quickFill			ifTrue: [aCustomMenu add: 'proper fill' selector: #quickFill: argument: false]			ifFalse: [aCustomMenu add: 'quick fill' selector: #quickFill: argument: true]]		ifFalse:		[aCustomMenu add: 'close polygon' action: #makeClosed.		arrows == #none ifFalse: [aCustomMenu add: '---' action: #makeNoArrows].		arrows == #forward ifFalse: [aCustomMenu add: '-->' action: #makeForwardArrow].		arrows == #back ifFalse: [aCustomMenu add: '<--' action: #makeBackArrow].		arrows == #both ifFalse: [aCustomMenu add: '<-->' action: #makeBothArrows]]! !!StringHolderController methodsFor: 'edit flag' stamp: 'di 10/9/1998 15:41'!hasUnacceptedEdits: aBoolean	^ view hasUnacceptedEdits: aBoolean! !!SyntaxError methodsFor: 'initialization' stamp: 'di 10/9/1998 16:17'!setClass: aClass code: aString debugger: aDebugger doitFlag: flag	class _ aClass.	debugger _ aDebugger.	selector _ aClass parserClass new parseSelector: aString.	contents _ aString.	category ifNil: [category _ aClass organization categoryOfElement: selector].	category ifNil: [category _ ClassOrganizer default].	doitFlag _ flag! !!SyntaxError methodsFor: 'other' stamp: 'di 10/9/1998 16:36'!contents: aString notifying: aController	"Compile the code in aString and notify aController of any errors. If there are no errors, then automatically proceed."	doitFlag	ifTrue: [Compiler new evaluate: aString in: nil to: nil						notifying: aController ifFail: [^ false]]	ifFalse: [(class compile: aString classified: category						notifying: aController) ifNil: [^ false]].	aController hasUnacceptedEdits: false.	self proceed! !!SyntaxError methodsFor: 'other' stamp: 'di 10/9/1998 16:51'!notify: error at: location in: source	"Open a syntax error view, inserting the given error message into the given source at the given location. This message is sent to the 'requestor' when the parser or compiler finds a syntax error."	| aClass aString |	aClass _ thisContext sender receiver encoder classEncoding.	aString _		source contents			copyReplaceFrom: location			to: location - 1			with: error.	self setClass: aClass		code: aString		debugger: (Debugger context: thisContext)		doitFlag: false.	self class open: self.! !!SyntaxError class methodsFor: 'instance creation' stamp: 'di 10/9/1998 16:18'!errorInClass: aClass withCode: codeString doitFlag: doit	"Open a view whose model is a syntax error. The error occurred when trying to add the given method code to the given class."	self open:		(self new setClass: aClass			code: codeString			debugger: (Debugger context: thisContext)			doitFlag: doit).! !!TextMorph methodsFor: 'geometry' stamp: 'di 10/9/1998 15:50'!privateMoveBy: delta	self releaseEditor.	super privateMoveBy: delta.	paragraph ifNotNil: [paragraph moveBy: delta].! !!TextMorphEditor methodsFor: 'menu commands' stamp: 'di 10/9/1998 16:55'!cancel	"Cancel the changes made so far to this text"	morph cancelEdits! !SyntaxError removeSelector: #setClass:code:debugger:!SyntaxError class removeSelector: #errorInClass:withCode:!