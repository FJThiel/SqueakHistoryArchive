'From Squeak2.9alpha of 26 July 2000 [latest update: #2554] on 1 September 2000 at 11:13:21 am'!"Change Set:		twiddling-swDate:			1 September 2000Author:			Scott Wallace¥ If you edit the label of a collapsed morph, the morph it represents acquires the edited label as its new name (thanks to Kim Rose for suggestion)¥ A special window-title menu is provided for CollapsedMorph; the generic one had some inappropriate items (e.g. 'full screen').¥ Bulletproofed the code that determines the wording of the 'undo' menu item against falling off the leading edge of the undo tape."!!CommandHistory methodsFor: 'menu' stamp: 'sw 9/1/2000 11:00'!undoMenuWording	"Answer the wording to be used in an 'undo' menu item"	(((lastCommand == nil or: [Preferences useUndo not]) or:		[Preferences infiniteUndo not and: [lastCommand phase == #undone]])  or: 			[self nextCommandToUndo == nil]) ifTrue: [^ 'can''t undo'].	^ String streamContents:		[:aStream | 			aStream nextPutAll: 'undo "'.			aStream nextPutAll: (self nextCommandToUndo cmdWording truncateTo: 12).			aStream nextPut: $".			lastCommand phase == #done ifTrue:				[aStream nextPutAll: ' (z)']]! !!Morph methodsFor: 'menus' stamp: 'sw 9/1/2000 11:08'!maybeAddCollapseItemTo: aMenu	"If appropriate, add a collapse item to the given menu"	| anOwner |	(anOwner _ self topRendererOrSelf owner) ifNotNil:			[anOwner isWorldMorph ifTrue:				[aMenu add: #collapse target: self action: #collapse]]! !!CollapsedMorph methodsFor: 'as yet unclassified' stamp: 'sw 9/1/2000 11:06'!buildWindowMenu	"Answer the menu to be put up in response to the user's clicking on the window-menu control in the window title.  Specialized for CollapsedMorphs."	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu add: 'change name...' action: #relabel.	aMenu addLine.	aMenu add: 'send to back' action: #sendToBack.	aMenu add: 'make next-to-topmost' action: #makeSecondTopmost.	aMenu addLine.	self mustNotClose		ifFalse:			[aMenu add: 'make unclosable' action: #makeUnclosable]		ifTrue:			[aMenu add: 'make closable' action: #makeClosable].	aMenu add: (self isSticky ifTrue: ['make draggable'] ifFalse: ['make undraggable']) 		action: #toggleStickiness.	^aMenu! !!CollapsedMorph methodsFor: 'as yet unclassified' stamp: 'sw 9/1/2000 11:07'!collapseOrExpand	"Toggle the expand/collapsd state of the receiver.  If expanding, copy the window title back to the name of the expanded morph"	| aWorld |	isCollapsed		ifTrue: 			[uncollapsedMorph setProperty: #collapsedPosition toValue: self position.			labelString ifNotNil: [uncollapsedMorph setNameTo: labelString].			mustNotClose _ false.	"We're not closing but expanding"			self delete.			(aWorld _ self currentWorld) addMorphFront: uncollapsedMorph.			aWorld startSteppingSubmorphsOf: uncollapsedMorph]		ifFalse:			[super collapseOrExpand]! !