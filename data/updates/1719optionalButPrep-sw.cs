'From Squeak2.6 of 11 October 1999 [latest update: #1717] on 13 December 1999 at 2:00:28 pm'!"Change Set:		optionalButPrep-swDate:			13 December 1999Author:			Scott WallaceChanges the preference formerly known as optionalMorphicButtons to read simply optionalButtons, in preparation for Steve Wessels's update that implements the optional buttons for many mvc tools as well."!!Browser methodsFor: 'initialize-release' stamp: 'sw 12/13/1999 14:00'!openAsMorphEditing: editString	"Create a pluggable version of all the morphs for a Browser in Morphic"	| window switches codePane aListMorph baseline aTextMorph |	window _ (SystemWindow labelled: 'later') model: self.	window addMorph: (PluggableListMorph on: self list: #systemCategoryList			selected: #systemCategoryListIndex changeSelected: #systemCategoryListIndex:			menu: #systemCategoryMenu: keystroke: #systemCatListKey:from:)		frame: (0@0 extent: 0.25@0.4).	window addMorph: (PluggableListMorph on: self list: #classList			selected: #classListIndex changeSelected: #classListIndex:			menu: #classListMenu: keystroke: #classListKey:from:)		frame: (0.25@0 extent: 0.25@0.3).	switches _ self buildMorphicSwitches.	window addMorph: switches frame: (0.25@0.3 extent: 0.25@0.1).	switches borderWidth: 0.	window addMorph: (PluggableMessageCategoryListMorph on: self list: #messageCategoryList			selected: #messageCategoryListIndex changeSelected: #messageCategoryListIndex:			menu: #messageCategoryMenu: keystroke: #arrowKey:from: getRawListSelector: #rawMessageCategoryList)		frame: (0.5@0 extent: 0.25@0.4).	aListMorph _ PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph		frame: (0.75@0 extent: 0.25@0.4).	Preferences useAnnotationPanes		ifFalse:			[baseline _ 0.4]		ifTrue:			[aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.4 corner: 1@0.45).			baseline _ 0.45].	Preferences optionalButtons		ifTrue:			[window addMorph: self optionalButtonRow frame: ((0@baseline corner: 1 @ (baseline + 0.08))).			baseline _ baseline + 0.08].	codePane _ PluggableTextMorph on: self text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	editString ifNotNil: [codePane editString: editString.					codePane hasUnacceptedEdits: true].	window addMorph: codePane		frame: (0 @ baseline corner: 1 @ 1).	window setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	^ window! !!ChangeList methodsFor: 'initialization-release' stamp: 'sw 12/13/1999 10:33'!optionalButtons	^ self showsVersions		ifFalse:			[self buttonRowForChangeList]		ifTrue:			[self buttonRowForVersions]! !!ChangeList class methodsFor: 'instance creation' stamp: 'sw 12/13/1999 10:33'!openAsMorph: aChangeList name: labelString multiSelect: multiSelect	"Open a morphic view for the messageSet, whose label is labelString.	The listView may be either single or multiple selection type"	| window boundary  |	window _ (SystemWindow labelled: labelString) model: aChangeList.	Preferences optionalButtons		ifFalse:			[boundary _ 0]		ifTrue:			[boundary _ 0.08.			window addMorph: aChangeList optionalButtons frame: (0 @ 0 corner: 1 @ boundary)].	window addMorph: ((multiSelect ifTrue: [PluggableListMorphOfMany]									ifFalse: [PluggableListMorph])		on: aChangeList list: #list		selected: #listIndex changeSelected: #toggleListIndex:		menu: (aChangeList showsVersions ifTrue: [#versionsMenu:] ifFalse: [#changeListMenu:])			keystroke: nil)		frame: (0@boundary corner: 1@0.4).	window addMorph: (AcceptableCleanTextMorph on: aChangeList 			text: #contents accept: #contents:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0@0.4 corner: 1@1).	^ window openInWorld! !!Debugger methodsFor: 'initialize' stamp: 'sw 12/13/1999 10:26'!openFullMorphicLabel: labelString	| window aListMorph codeTop aTextMorph |	self expandStack.	window _ (SystemWindow labelled: labelString) model: self.	aListMorph _ PluggableListMorph on: self list: #contextStackList			selected: #contextStackIndex changeSelected: #toggleContextStackIndex:			menu: #contextStackMenu:shifted: keystroke: #contextStackKey:from:.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph		frame: (0@0 corner: 1@0.3).	Preferences useAnnotationPanes		ifFalse:			[codeTop _ 0.3]		ifTrue:			[aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.3 corner: 1@0.35).			codeTop _ 0.35].	Preferences optionalButtons ifTrue:		[window addMorph: self optionalButtonRow frame: ((0@codeTop corner: 1 @ (codeTop + 0.1))).		codeTop _ codeTop + 0.1].	window addMorph: (PluggableTextMorph on: self			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0 @ codeTop corner: 1 @ 0.7).	window addMorph: (PluggableListMorph on: self receiverInspector list: #fieldList			selected: #selectionIndex changeSelected: #toggleIndex:			menu: #fieldListMenu: keystroke: #inspectorKey:from:)		frame: (0@0.7 corner: 0.2@1).	window addMorph: (PluggableTextMorph on: self receiverInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0.2@0.7 corner: 0.5@1).	window addMorph: (PluggableListMorph on: self contextVariablesInspector list: #fieldList			selected: #selectionIndex changeSelected: #toggleIndex:			menu: #fieldListMenu: keystroke: #inspectorKey:from:)		frame: (0.5@0.7 corner: 0.7@1).	window addMorph: (PluggableTextMorph on: self contextVariablesInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0.7@0.7 corner: 1@1).	^ window openInWorld! !!FileList class methodsFor: 'instance creation' stamp: 'sw 12/13/1999 10:26'!openAsMorph	"Open a morphic view of a FileList on the default directory."	| dir aFileList window fileListTop |	dir _ FileDirectory default.	aFileList _ self new directory: dir.	window _ (SystemWindow labelled: dir pathName) model: aFileList.	window addMorph: ((PluggableListMorph on: aFileList list: #volumeList selected: #volumeListIndex				changeSelected: #volumeListIndex: menu: #volumeMenu:) autoDeselect: false)		frame: (0@0 corner: 0.3@0.2).	window addMorph: (PluggableTextMorph on: aFileList text: #pattern accept: #pattern:)		frame: (0@0.2 corner: 0.3@0.3).	Preferences optionalButtons		ifTrue:			[window addMorph: aFileList optionalButtonRow frame: (0.3 @ 0 corner: 1 @ 0.08).			fileListTop _ 0.08]		ifFalse:			[fileListTop _ 0].	window addMorph: (PluggableListMorph on: aFileList list: #fileList selected: #fileListIndex				changeSelected: #fileListIndex: menu: #fileListMenu:)		frame: (0.3 @ fileListTop corner: 1@0.3).	window addMorph: (PluggableTextMorph on: aFileList text: #contents accept: #put:			readSelection: #contentsSelection menu: #fileContentsMenu:shifted:)		frame: (0@0.3 corner: 1@1).	^ window! !!MessageSet class methodsFor: 'instance creation' stamp: 'sw 12/13/1999 10:26'!openAsMorph: aMessageSet name: labelString inWorld: aWorld	"Create a SystemWindow aMessageSet, with the label labelString."	| window aListMorph aTextMorph baseline |	window _ (SystemWindow labelled: labelString) model: aMessageSet.	aListMorph _ PluggableListMorph on: aMessageSet list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph frame: (0@0 extent: 1@0.2).	Preferences useAnnotationPanes		ifFalse:			[baseline  _ 0.2]		ifTrue:			[aTextMorph _ PluggableTextMorph on: aMessageSet					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.2 corner: 1@0.25).			baseline _ 0.25].	Preferences optionalButtons		ifTrue:			[window addMorph: aMessageSet optionalButtonRow frame: ((0@baseline corner: 1 @ (baseline + 0.08))).			baseline _ baseline + 0.08].	window addMorph: (PluggableTextMorph on: aMessageSet 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0@baseline corner: 1@1).		window setUpdatablePanesFrom: #(messageList).	window openInWorld: aWorld! !!PreDebugWindow methodsFor: 'as yet unclassified' stamp: 'sw 12/13/1999 10:26'!setLabelWidgetAllowance	^ labelWidgetAllowance _ Preferences optionalButtons		ifTrue:			[super setLabelWidgetAllowance]		ifFalse:			[180]! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sw 12/13/1999 10:32'!noteThatFlag: prefSymbol justChangedTo: aBoolean	"Provides a hook so that a user's toggling of a preference might precipitate some immediate action"	| keep |	prefSymbol == #useGlobalFlaps ifTrue:		[aBoolean			ifFalse:		"Turning off use of flaps"				[keep _ self confirm:'Do you want to preserve the existingglobal flaps for future use?'.				Utilities globalFlapTabsIfAny do:					[:aFlapTab | Utilities removeFlapTab: aFlapTab keepInList: keep.					aFlapTab isInWorld ifTrue: [self error: 'Flap problem']].				keep ifFalse: [Utilities clobberFlapTabList]]			ifTrue:		"Turning on use of flaps"				[Smalltalk isMorphic ifTrue:					[self currentWorld addGlobalFlaps]]].	prefSymbol == #roundedWindowCorners ifTrue:		[World ifNotNil: [World fullRepaintNeeded]].	prefSymbol == #optionalButtons ifTrue:		[Utilities replacePartSatisfying: [:el |  (el isKindOf: MorphThumbnail) and: [(el morphRepresented isKindOf: SystemWindow) and: [el morphRepresented model isKindOf: FileList]]]inGlobalFlapSatisfying: [:f1 | f1 wording = 'Tools'] with:  FileList openAsMorph applyModelExtent].	(prefSymbol == #optionalButtons  or: [prefSymbol == #useAnnotationPanes]) ifTrue:		[Utilities replaceBrowserInToolsFlap].	(prefSymbol == #smartUpdating) ifTrue:		[SystemWindow allSubInstancesDo:			[:aWindow | aWindow amendSteppingStatus]]! !!Preferences class methodsFor: 'help' stamp: 'sw 12/13/1999 10:53'!initHelpMsgsB	"Automatically called whenever you call   	Preferences initializeHelpMessages		or	Preferences callHelpMessageInitializersby virtue of its being in the 'help' category of Preferences class"	#((oneViewerFlapAtATime			'If true, opening up one viewer flap will close all other such flaps.')		(viewersInFlaps			'If true, viewers are projected into flaps along the right edge of the screen')		(optionalButtons			'If true, then optional buttons will be used in certain standard tools, including browsers, message lists, fileLists, changeLists, and debuggers')			) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!Preferences class methodsFor: 'standard preferences' stamp: 'programmatic 12/13/1999 10:51'!optionalButtons	^ self valueOfFlag: #optionalButtons! !!Preferences class methodsFor: 'initial values' stamp: 'sw 12/13/1999 10:27'!initialValuesA	"Another lot of initial values for prefs.  Simply placing methods of this sort here will assure that the initial values provided are ascribed to the preference when prefs are initialized"	^#(			(caseSensitiveFinds					false)		(changeSetVersionNumbers			true)		(colorWhenPrettyPrinting			false)		(conversionMethodsAtFileOut			false)		(iconicHalos							true)		(menuColorFromWorld				false)		(oneViewerFlapAtATime				true)		(optionalButtons						false)		(preserveTrash						true)		(smartUpdating						true)		(roundedMenuCorners				true)		(simpleHalos							false)		(twentyFourHourFileStamps			true) 		(viewersInFlaps						true))! !!VersionsBrowser methodsFor: 'init & update' stamp: 'sw 12/13/1999 10:33'!optionalButtons	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightBlue; borderWidth: 1; borderColor: Color blue darker.	aRow addTransparentSpacerOfSize: (5@0).	#(	('compare to current' 	compareToCurrentVersion			'opens a separate window which shows the text differences between the selected version and the current version')		('revert'	fileInSelections			'reverts the method to the version selected')		('remove from changes'	removeMethodFromChanges			'remove this method from the current change set')		('help'	offerVersionsHelp			'further explanation about use of Versions browsers')) do:			[:triplet |				aButton _ aButton fullCopy.				aButton actionSelector: triplet second.				aButton label: triplet first.				aButton setBalloonText: triplet third.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.		^ aRow! !"Postscript:"Preferences optionalMorphicButtons	ifTrue:		[Preferences enable: #optionalButtons]	ifFalse:		[Preferences disable: #optionalButtons].Preferences initializeAddedPreferences; initializeHelpMessages.Preferences deletePreference: #optionalMorphicButtons.!