'From Squeak2.9alpha of 13 June 2000 [latest update: #2426] on 25 June 2000 at 10:44:06 am'!"Change Set:		165GetSysAttrRef-smaDate:			25 June 2000Author:			Stefan Matthias AustUsed #platform name were applicable, changed getVMVersion to vmVersion."!!FileDirectory class methodsFor: 'system start up' stamp: 'sma 6/25/2000 10:39'!openSources: sourcesName andChanges: changesName forImage: imageName 	"Initialize the default directory to the image directory and open the  	sources and changes files, if possible. Look for the changes file in  	image directory. Look for the system sources (or an alias to it) first in  	the VM directory, then in the image directory. Open the changes and  	sources files and install them in SourceFiles."	"Note: SourcesName and imageName are full paths; changesName is a  	local name."	| sources changes sourceAlias msg wmsg localSourcesName |	msg _ 'Squeak cannot locate &fileRef.Please check that the file is named properly and is in thesame directory as this image.  Further explanation can foundin the startup window, ''How Squeak Finds Source Code''.'.	wmsg _ 'Squeak cannot write to &fileRef.Please check that you have write permission for this file.You won''t be able to save this image correctly until you fix this.'.	self setDefaultDirectoryFrom: imageName.	sources _ changes _ nil.	"look for the sources file or an alias to it in the VM's directory"	(DefaultDirectory fileExists: sourcesName)		ifTrue: [sources _ DefaultDirectory readOnlyFileNamed: sourcesName]		ifFalse: 			["look for an un-renamed Macintosh alias to the sources file"			sourceAlias _ sourcesName , ' alias'.			(DefaultDirectory fileExists: sourceAlias)				ifTrue: [sources _ DefaultDirectory readOnlyFileNamed: sourceAlias]].	sources		ifNil: 			["look for the sources file or an alias to it in the image directory"			localSourcesName _ FileDirectory localNameFor: sourcesName.			(DefaultDirectory fileExists: localSourcesName)				ifTrue: [sources _ DefaultDirectory readOnlyFileNamed: localSourcesName]				ifFalse: 					["look for an un-renamed Macintosh alias to the sources  					file"					sourceAlias _ localSourcesName , ' alias'.					(DefaultDirectory fileExists: sourceAlias)						ifTrue: [sources _ DefaultDirectory readOnlyFileNamed: sourceAlias]]].	(DefaultDirectory fileExists: changesName)		ifTrue: 			[changes _ DefaultDirectory oldFileNamed: changesName.			changes isNil				ifTrue: 					[PopUpMenu notify: (wmsg copyReplaceAll: '&fileRef' with: 'the changes file named ' , changesName).					changes _ DefaultDirectory readOnlyFileNamed: changesName]].	((sources == nil or: [sources atEnd])		and: [Preferences valueOfFlag: #warnIfNoSourcesFile])		ifTrue: 			[PopUpMenu notify: (msg copyReplaceAll: '&fileRef' with: 'the sources file named ' , sourcesName).			Smalltalk platformName = 'Mac OS'				ifTrue: [PopUpMenu notify: 'Make sure the sources file is not an Alias.']].	(changes == nil and: [Preferences valueOfFlag: #warnIfNoChangesFile])		ifTrue: [PopUpMenu notify: (msg copyReplaceAll: '&fileRef' with: 'the changes file named ' , changesName)].	(Preferences valueOfFlag: #warnIfNoChangesFile) ifTrue: [		((changes next: 200) includesSubString: String crlf) ifTrue: [			PopUpMenu notify: 'The changes file named ' , changesName, 'has been injured by an unpacking utility.  Crs were changed to CrLfs.Please set the preferences in your decompressing program to "do not convert text files" and unpack the system again.']].	SourceFiles _ Array with: sources with: changes! !!AcornFileDirectory class methodsFor: 'platform specific' stamp: 'sma 6/25/2000 09:25'!isActiveDirectoryClass	"Does this class claim to be that properly active subclass of FileDirectory  	for the current platform? On Acorn, the test is whether platformName 	is 'RiscOS' (on newer VMs) or if the primPathNameDelimiter is $. (on	older ones), which is what we would like to use for a dirsep if only it	would work out. See pathNameDelimiter for more woeful details - then	just get on and enjoy Squeak"	^ Smalltalk platformName = 'RiscOS'		or: [self primPathNameDelimiter = $.]! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sma 6/25/2000 10:04'!readDocumentFile	"Process system updates. Read a document file, if one was provided. Start application."	| fileName object |	StartupStamp _ '----STARTUP----', Time dateAndTimeNow printString, ' as ', Smalltalk imageName.	self processUpdates.	(Preferences valueOfFlag: #readDocumentAtStartup) ifFalse: [^ self].	fileName _ Smalltalk getSystemAttribute: 2.	((fileName ~~ nil) and: [fileName size > 0])		ifTrue: [			(fileName asLowercase beginsWith: 'http://')				ifTrue: [					"fetch remote file"					HTTPSocket httpFileIn: fileName]				ifFalse: [					"read local file"					object _ (FileStream oldFileNamed: fileName) fileInObjectAndCode.					"if launching a .sqo document, send open to the final object"					(fileName endsWith: '.sqo') ifTrue: [object open]]]		ifFalse: [			(Preferences valueOfFlag: #startImagineeringStudio)				ifTrue: [ScriptingSystem openImagineeringStudio]]! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'sma 6/25/2000 09:22'!getSystemAttribute: attributeID 	"Optional. Answer the string for the system attribute with the given 	integer ID. Answer nil if the given attribute is not defined on this 	platform. On platforms that support invoking programs from command 	lines (e.g., Unix), this mechanism can be used to pass command line 	arguments to programs written in Squeak.	By convention, the first command line argument that is not a VM	configuration option is considered a 'document' to be filed in. Such a	document can add methods and classes, can contain a serialized object,	can include code to be executed, or any combination of these.	Currently defined attributes include: 	-1000...-1 - command line arguments that specify VM options 	0 - the full path name for currently executing VM 	(or, on some platforms, just the path name of the VM's directory) 	1 - full path name of this image 	2 - a Squeak document to open, if any 	3...1000 - command line arguments for Squeak programs 	1001 - this platform's operating system 	1002 - operating system version 	1003 - this platform's processor type	1004 - vm version"	<primitive: 149>	^ nil! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'sma 6/25/2000 09:26'!vmVersion	"Smalltalk vmVersion"	"Return a string identifying the interpreter version"	^self getSystemAttribute: 1004! !SystemDictionary removeSelector: #getVMVersion!