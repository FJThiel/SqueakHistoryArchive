'From Squeak2.8alpha of 4 February 2000 [latest update: #2158] on 20 May 2000 at 12:26:21 pm'!"Change Set:		064CelesteEnhFix-mirDate:			14 May 2000Author:			Mike Rutenberg (mdr@scn.org)(1) Add full Balloon Help for Celeste buttons and menus(2) Minor tweak to updateTOC making huge categories display faster (twice as fast)(3) A variety of small fixes including:	* Correct a MailAddressParser table to prevent an infinite loop when evaluating		typed email addresses	* Fix <From filter> and <Subject filter> and <Move Again> button to cancel/fail gracefully"!!Celeste methodsFor: 'categories pane'!categoryMenu: aMenu	"Answer the menu for the categories pane."	aMenu add: 'save'  action: #save.	aMenu balloonTextForLastItem: 'Save the database'.	aMenu addLine.	aMenu add: 'fetch mail'  action: #fetchMail.	aMenu balloonTextForLastItem: 'Fetch new mail from the server'.	aMenu add: 'send queued mail'  action: #sendQueuedMail.	aMenu balloonTextForLastItem: 'Send newly written mail'.	aMenu addLine.	aMenu add: 'add category'  action: #addCategory.	aMenu balloonTextForLastItem: 'Add a new organizational category'.	currentCategory notNil ifTrue: [			aMenu add: 'view all messages'  action: #viewAllMessages.			aMenu balloonTextForLastItem: 'View all the messages'.			].	"add extra commands if a normal category is selected"	((currentCategory notNil) and:	 [(currentCategory ~= '.all.') & (currentCategory ~= '.unclassified.')])		ifTrue: [			aMenu add: 'rename category'  action: #renameCategory.			aMenu balloonTextForLastItem: 'Rename this organizational category'.			aMenu add: 'remove category'  action: #removeCategory.			aMenu balloonTextForLastItem: 'Remove this organizational category(NB: all messages will be safely available in other categories)'.			aMenu addLine.			aMenu add: 'import into category'  action: #importIntoCategory.			aMenu balloonTextForLastItem: 'Import messages from a Unix/Eudora file into this category'.			aMenu add: 'export category (Celeste)'  action: #exportCategory.			aMenu balloonTextForLastItem: 'Copy all messages from this category to another Celeste database'.			aMenu add: 'export category (Unix/Eudora)'  action: #exportCategoryUnix.			aMenu balloonTextForLastItem: 'Write a copy of all messages from this category to a Unix/Eudora file'.			].	aMenu addLine.	aMenu add: 'empty trash'  action: #emptyTrash.	aMenu balloonTextForLastItem: 'Completely remove all messages in the category .trash. from Celeste'.	aMenu add: 'salvage & compact'  action: #compact.	aMenu balloonTextForLastItem: 'Salvage any work done since the last database save & recover space used by old deleted messages.(This may be a bit slow)'.	aMenu add: 'find duplicates'  action: #findDuplicates.	aMenu balloonTextForLastItem: 'Find messages which are exact duplicates'.	aMenu addLine.	aMenu add: 'toggle headers'  action: #toggleSuppressHeaders.	aMenu balloonTextForLastItem: 'Show either a complete or an easy-to-read message header'.	aMenu addLine.	aMenu add: 'set user name'  action: #setUserName.	aMenu balloonTextForLastItem: 'Specify the ''From:'' user name for new messages'.	aMenu add: 'set cc: list'  action: #setCCList.	aMenu balloonTextForLastItem: 'Specify a cc: list that is added to each new message'.	aMenu add: 'set POP server'  action: #setPopServer.	aMenu balloonTextForLastItem: 'Specify which (POP3) server to check for new messages'.	aMenu add: 'set POP username'  action: #setPopUserName.	aMenu balloonTextForLastItem: 'Specify the username to use when checking for new messages'.	aMenu add: 'set SMTP server'  action: #setSmtpServer.	aMenu balloonTextForLastItem: 'Specify which (SMTP) server to use when sending messages'.	aMenu addLine.	"add toggle for whether to delete messages on download"	DeleteInboxAfterFetching		ifTrue: [			aMenu add: 'leave messages on server'  action: #keepMessagesOnServer.			aMenu balloonTextForLastItem: 'Don''t delete messages from the server when you retreive them (typically used for testing only)'.			]		ifFalse: [			aMenu add: 'don''t leave messages on server'  action: #deleteMessagesAfterFetching.			aMenu balloonTextForLastItem: 'Automatically remove messages from the server after you retreive them'.			].	^ aMenu! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 1/14/2000 16:07'!moveAgain	"Move the current message to the same category as last time."	| newCatName |	currentMsgID isNil ifTrue: [^self].	"If no message is selected, just return"	(lastCategory isEmpty not)		ifTrue: [newCatName _ lastCategory]		ifFalse: [newCatName _ self getCategoryNameIfNone: [^self]].	mailDB remove: currentMsgID fromCategory: currentCategory.	mailDB file: currentMsgID inCategory: newCatName.	self updateTOC.! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 1/29/2000 17:32'!tocMenu: aMenu	"Answer the menu for the table of contents pane."	| messageSelected |	currentCategory ifNil: [^ nil].	messageSelected _ currentMsgID isNil not.	messageSelected		ifFalse: [			aMenu add: 'compose'  action: #compose.			aMenu balloonTextForLastItem: 'Compose a new message'.			aMenu addLine.			]		ifTrue: [			aMenu add: 'delete'  action: #deleteMessage.			aMenu balloonTextForLastItem: 'Move this message to the .trash. category'.			aMenu addLine.			aMenu add: 'compose'  action: #compose.			aMenu balloonTextForLastItem: 'Compose a new message'.			aMenu add: 'reply'  action: #reply.			aMenu balloonTextForLastItem: 'Reply to this message'.			aMenu add: 'forward'  action: #forward.			aMenu balloonTextForLastItem: 'Forward this message'.			aMenu addLine.			lastCategory isEmpty ifFalse: [				aMenu add: 'file -> ', lastCategory  action: #fileAgain.				aMenu balloonTextForLastItem: 'Add this message also to the category ', lastCategory.				aMenu add: 'move -> ', lastCategory  action: #moveAgain.				aMenu balloonTextForLastItem: 'Move this message to the category ', lastCategory.				aMenu addLine.				].			aMenu add: 'file'  action: #fileMessage.			aMenu balloonTextForLastItem: 'Add this message also to a different category'.			aMenu add: 'move'  action: #moveMessage.			aMenu balloonTextForLastItem: 'Move this message to a different category'.			aMenu add: 'remove'  action: #removeMessage.			aMenu balloonTextForLastItem: 'Remove this message from this category(NB: the message will be safely available in another category)'.			aMenu addLine.			].	"The following are common for all menus"	aMenu add: 'file all'  action: #fileAll.	aMenu balloonTextForLastItem: 'Add all messages also to another category'.	aMenu add: 'move all'  action: #moveAll.	aMenu balloonTextForLastItem: 'Move all messages to another category'.	aMenu add: 'remove all'  action: #removeAll.	aMenu balloonTextForLastItem: 'Remove all messages from this catgegory(NB: each message will be safely available in other categories)'.	aMenu add: 'delete all'  action: #deleteAll.	aMenu balloonTextForLastItem: 'Move all messages to the .trash. category'.	aMenu addLine.	messageSelected		ifTrue: [			aMenu add: 'other categories'  action: #otherCategories.			aMenu balloonTextForLastItem: 'Check which other categories also contain this message'.			aMenu add: 'save message'  action: #saveMessage.			aMenu balloonTextForLastItem: 'Save this message'.			aMenu addLine.			].	aMenu add: 'search'  action: #search.	aMenu balloonTextForLastItem: 'Search all messages in this category for something'.	^ aMenu! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 1/24/2000 23:26'!updateTOC	"Update the table of contents after a moving, removing, or deleting a message. Select a message near the removed message in the table of contents if possible."	| currentMsgIndex |	(currentCategory isNil or:	 [currentMsgID isNil or:	 [currentMessages size < 2]])		ifTrue: [currentMsgIndex _ 1]		ifFalse: [currentMsgIndex _ currentMessages indexOf: currentMsgID].	currentMsgID _ nil.	self setCategory: currentCategory.  "update currentMessages, currentTOC"	currentMessages isEmptyOrNil ifFalse: [		(currentMsgIndex <= currentMessages size)			ifTrue: [currentMsgID _ currentMessages at: currentMsgIndex]			ifFalse: [currentMsgID _ currentMessages last].	].	"NB: self changed: #tocEntryList  is already done above by setCategory: and can be slow"	self changed: #tocEntry.	self changed: #messageText.! !!Celeste methodsFor: 'filtering' stamp: 'mdr 1/14/2000 14:49'!fromFilterOn: aSwitch	"Show only those messages from the same person as the currently selected message. The user is given a chance to edit the pattern string used to match 'From:' fields."	fromFilter _		(currentMsgID isNil)			ifTrue: ['']			ifFalse: [(mailDB getTOCentry: currentMsgID) from].	fromFilter _ FillInTheBlank		request: '''From:'' filter pattern?'		initialAnswer: fromFilter.	fromFilter = '' ifTrue: [aSwitch turnOff.  ^self]. "User cancelled, so turn off the switch"	fromFilter _ fromFilter withoutTrailingBlanks.	self updateTOC.! !!Celeste methodsFor: 'filtering' stamp: 'mdr 1/14/2000 14:50'!subjectFilterOn: aSwitch	"Show only those messages whose subject matches the currently selected message. The user is given a chance to edit the pattern string used to match 'Subject:' fields."	subjectFilter _		(currentMsgID isNil)			ifTrue: ['']			ifFalse: [(mailDB getTOCentry: currentMsgID) subject].	subjectFilter _ subjectFilter withBlanksTrimmed.	(subjectFilter asLowercase beginsWith: 're:') ifTrue: [		subjectFilter _ subjectFilter copyFrom: 4 to: subjectFilter size.		subjectFilter _ subjectFilter withBlanksTrimmed ].	subjectFilter _ FillInTheBlank		request: '''Subject:'' filter pattern?'		initialAnswer: subjectFilter.	subjectFilter = '' ifTrue: [aSwitch turnOff. ^self].   "User cancelled so turn off the switch and return"	subjectFilter _ subjectFilter withoutTrailingBlanks.	self updateTOC.! !!Celeste class methodsFor: 'instance creation' stamp: 'mdr 1/29/2000 17:30'!buildButtonsFor: model 	"Answer a collection of handy buttons for the Celeste user interface."	| buttonViewClass buttons b sw |	Smalltalk isMorphic		ifTrue: [buttonViewClass _ PluggableButtonMorph]		ifFalse: [buttonViewClass _ PluggableButtonView].	buttons _ OrderedCollection new.	sw _ Switch new.	b _ buttonViewClass on: (sw onAction: [model subjectFilterOn: sw];				 offAction: [model subjectFilterOff]).	b label: 'Subj. F.';		borderWidth: 1.	b setBalloonText: 'Show messages with specific Subject: line content'.	buttons add: b.	sw _ Switch new.	b _ buttonViewClass on: (sw onAction: [model fromFilterOn: sw];				 offAction: [model fromFilterOff]).	b label: 'From F.';		borderWidth: 1.	b setBalloonText: 'Show messages with specific From: line content'.	buttons add: b.	b _ buttonViewClass				on: model				getState: #isCustomFilterOn				action: #customFilterOn.	b label: 'Custom F.';		borderWidth: 1.	b setBalloonText: 'Show messages which match a generalized custom filter'.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model compose]);			 action: #turnOn;			 label: 'New';			 borderWidth: 1.	b setBalloonText: 'Compose a new message'.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model reply]);			 action: #turnOn;			 label: 'Reply';			 borderWidth: 1.	b setBalloonText: 'Reply to the selected message'.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model forward]);			 action: #turnOn;			 label: 'Forward';			 borderWidth: 1.	b setBalloonText: 'Forward the selected message'.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model moveAgain]);			 action: #turnOn;			 label: 'Move Again';			 borderWidth: 1.	b setBalloonText: 'Move the selected message to the same category as previously'.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model deleteMessage]);			 action: #turnOn;			 label: 'Delete';			 borderWidth: 1.	b setBalloonText: 'Delete the selected message'.	buttons add: b.	^ buttons! !!FileDirectory methodsFor: 'file status' stamp: 'mdr 1/14/2000 21:16'!entryAt: fileName  	"find the entry with local name fileName"	^self entryAt: fileName ifAbsent: [ self error: 'file not in directory: ', fileName ].! !!MailAddressTokenizer class methodsFor: 'class initialization' stamp: 'mdr 1/24/2000 10:51'!initialize	"Initalize class variables using   MailAddressTokenizer initialize"	| skipCharacters |	CSParens _ CharacterSet empty.	CSParens addAll: '()'.	CSSpecials _ CharacterSet empty.	CSSpecials addAll: '()<>@,;:\".[]'.	skipCharacters _ CharacterSet separators.	0 to: 31 do: [ :c |		skipCharacters add: (Character value: c) ].	skipCharacters add: (Character value: 127).	CSNonSeparators _ skipCharacters complement.	CSNonAtom _ skipCharacters addAll: CSSpecials.! !!MailDB methodsFor: 'open-create-save' stamp: 'mdr 1/25/2000 12:06'!recoverDB	"Open a mail database with the given root file name."	(self confirm:'The mail database named:    ', rootFilename, 'appears to be damaged.Shall I fix it?  (This might take some time)')		ifFalse: [self release. ^nil].	self openDB.	self compact.! !!MailDBFile methodsFor: 'error reporting'!reportInconsistency	"Report that the index file is not consistent with the messages file."	self inform:'The .index file is not consistent with the .messages file.Choosing ''salvage & compact'' will rebuild the index from scratch.'! !!MailMessage methodsFor: 'initialize-release'!from: aString 	"Parse aString to initialize myself."	| parseStream isMime contentType bodyText contentTransferEncoding |	time _ 0.	from _ to _ cc _ subject _ '' copy.	text _ aString withoutTrailingBlanks, String cr.	parseStream _ ReadStream on: text.	isMime _ false.  "mdr: This variable is later set but never seems to be used???"	contentType _ 'text/plain'.	contentTransferEncoding _ nil.	fields := Dictionary new.	self fieldsFrom: parseStream do: 		[:fName :fValue | 		fName = 'date' ifTrue: [time _ (self timeFrom: fValue) ifNil: [ 0 ]].		fName = 'from' ifTrue: [from _ fValue].		fName = 'to'			ifTrue: [to isEmpty					ifTrue: [to _ fValue]					ifFalse: [to _ to , ', ' , fValue]].		fName = 'cc'			ifTrue: [cc isEmpty					ifTrue: [cc _ fValue]					ifFalse: [cc _ cc , ', ' , fValue]].		fName = 'subject' ifTrue: [subject _ fValue].		fName = 'mime-version' ifTrue: [isMime _ true].		fName = 'content-type' ifTrue: [contentType _ (fValue copyUpTo: $;) asLowercase].		fName = 'content-transfer-encoding' ifTrue: [contentTransferEncoding _ fValue asLowercase].		fields at: fName put: (MIMEHeaderValue fromString: fValue)].	bodyText _ parseStream upToEnd.	contentTransferEncoding = 'base64'		ifTrue: 			[bodyText _ Base64MimeConverter mimeDecodeToChars: (ReadStream on: bodyText).			bodyText _ bodyText contents].	contentTransferEncoding = 'quoted-printable' ifTrue: [bodyText _ bodyText decodeQuotedPrintable].	body _ MIMEDocument contentType: contentType content: bodyText! !!MailMessage methodsFor: 'multipart'!save	"save the part to a file"	| fileName file |	fileName _ self name ifNil: ['attachment' , Utilities dateTimeSuffix].	fileName _ FillInTheBlank request: 'File name for save?' initialAnswer: fileName.	fileName isEmpty ifTrue: [ ^nil ].	file _ FileStream newFileNamed: fileName.	file nextPutAll: self content.	file close.! !!MailMessage class methodsFor: 'preferences' stamp: 'mdr 1/24/2000 11:49'!omittedHeaderFields	"Reply a list of fields to omit when displaying a nice simple message"	^ #(			'comments'			'priority'			'disposition-notification-to'			'x-envelope-info'			'x-mime-autoconverted'			'content-id'			'received'			'x-accept-language'			'x-mailer-version'			'x-unityuser'			'return-path'			'newsgroups'			'message-id'			'path'			'in-reply-to'			'sender'			'x-sender'			'fonts'			'x-mailer'			'mime-version'			'x-uidl'			'status'			'content-type'			'content-transfer-encoding'			'errors-to'			'keywords'			'references'			'x-vms-to'			'x-delivery-notice'			'x-reply-of'			'x-newsreader'			'x-icon'			'x-mailing-list'			'x-loop'			'x-priority'			'x-msmail-priority'			'x-mimeole'			'x-organization'			'x-originating-ip'			'x-sun-charset'			'x-url'			'x-nextstep-mailer'			'x-authentication-warning'			'x-lotus-fromdomain'			'x-blackmail'			'x-authenticated-timestamp'			'nntp-posting-host'			'lines'			'return-receipt-to'			'precedence'			'originator'			'distribution'			'content-disposition'			'importance'			'resent-to'			'resent-cc'			'resent-message-id'			'resent-date'			'resent-sender'			'resent-from'		)! !!View methodsFor: 'morphic compatibility' stamp: 'mdr 1/24/2000 17:27'!setBalloonText: aString	"Unfortunately we just ignore this help text because we are not morphic"! !MailAddressTokenizer initialize!Celeste removeSelector: #fromFilterOn!Celeste removeSelector: #subjectFilterOn!