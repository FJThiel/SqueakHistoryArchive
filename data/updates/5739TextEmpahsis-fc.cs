'From Squeak3.7alpha of 11 September 2003 [latest update: #5707] on 20 February 2004 at 11:09:13 am'!"Change Set:		FixObsoletePrefs-nkDate:			15 February 2004Author:			Ned KonzEvery time we change the Preferences class, we hold onto the oldversions in individual preferences.This CS repairs existing Preferences to point to the current Preferencesclass."| obsoletePrefs |Smalltalk garbageCollect.obsoletePrefs _Preference allSubInstances select: [ :ea | | ci |	ci _ (ea instVarNamed: 'changeInformee').	ci isBehavior and: [ ci isObsolete ] ].obsoletePrefs do: [ :pref |	| ci |	ci _ (pref instVarNamed: 'changeInformee').	pref instVarNamed: 'changeInformee' put: (Smalltalk at: ci nameifAbsent: []) ].Behavior flushObsoleteSubclasses.!!EmphasizedMenu methodsFor: 'emphasis' stamp: 'fc 2/19/2004 22:07'!onlyBoldItem: itemNumber	"Set up emphasis such that all items are plain except for the given item number.  "	emphases _ (Array new: selections size) atAllPut: #normal.	emphases at: itemNumber put: #bold! !!EmphasizedMenu methodsFor: 'private' stamp: 'fc 2/20/2004 11:01'!setEmphasis	"Set up the receiver to reflect the emphases in the emphases array.  "	| selStart selEnd currEmphasis |		labelString _ labelString asText.	emphases isEmptyOrNil ifTrue: [^ self].	selStart _ 1.	1 to: selections size do:		[:line |			selEnd _ selStart + (selections at: line) size - 1.			((currEmphasis _ emphases at: line) size > 0 and: [currEmphasis ~~ #normal]) ifTrue:				[labelString addAttribute: (TextEmphasis perform: currEmphasis)					from: selStart to: selEnd].			selStart _ selEnd + 2]! !!EmphasizedMenu class methodsFor: 'examples' stamp: 'fc 2/19/2004 22:06'!example1	"EmphasizedMenu example1"	^ (self		selections: #('how' 'well' 'does' 'this' 'work?' ) 		emphases: #(#bold #normal #italic #struckOut #normal ))			startUpWithCaption: 'A Menu with Emphases'! !!EmphasizedMenu class methodsFor: 'examples' stamp: 'fc 2/19/2004 22:08'!example3	"EmphasizedMenu example3"	^ (self		selectionAndEmphasisPairs: #('how' #bold 'well' #normal 'does' #italic 'this' #struckOut 'work' #normal))		startUpWithCaption: 'A Menu with Emphases'! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'fc 2/19/2004 22:09'!changeEmphasis	| aList reply  |	aList _ #(normal bold italic narrow underlined struckOut).	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ~~ nil ifTrue:		[self setEmphasis: reply.		paragraph composeAll.		self recomputeSelection.		self mvcRedisplay].	^ true! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'fc 2/19/2004 22:09'!changeEmphasisOrAlignment	| aList reply  |	aList _ #(normal bold italic narrow underlined struckOut leftFlush centered rightFlush justified).	reply _ (SelectionMenu labelList: aList lines: #(6) selections: aList) startUp.	reply ~~ nil ifTrue:		[(#(leftFlush centered rightFlush justified) includes: reply)			ifTrue:				[paragraph perform: reply.				self recomputeInterval]			ifFalse:				[self setEmphasis: reply.				paragraph composeAll.				self recomputeSelection.				self mvcRedisplay]].	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'fc 2/19/2004 10:39'!setEmphasis: emphasisSymbol	"Change the emphasis of the current selection."	| oldAttributes attribute |	oldAttributes _ paragraph text attributesAt: self pointIndex forStyle: paragraph textStyle.	attribute _ TextEmphasis perform: emphasisSymbol.	(emphasisSymbol == #normal) 		ifFalse:	[oldAttributes do:				[:att | (att dominates: attribute) ifTrue: [attribute turnOff]]].	self replaceSelectionWith: (self selection addAttribute: attribute)! !!StringMorph methodsFor: 'menu' stamp: 'fc 2/20/2004 10:57'!changeEmphasis	| reply aList |	aList _ #(normal bold italic narrow underlined struckOut).	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ifNotNil:[		self emphasis: (TextEmphasis perform: reply) emphasisCode.	].! !!TextMorphEditor methodsFor: 'attributes' stamp: 'fc 2/19/2004 22:15'!changeEmphasisOrAlignment	| aList reply  code align menuList startIndex |	self flag: #arNote. "Move this up once we get rid of MVC"	startIndex _ self startIndex.	aList _ #(normal bold italic narrow underlined struckOut leftFlush centered rightFlush justified).		align _ paragraph text alignmentAt: startIndex 		ifAbsent:[paragraph textStyle alignment].	code _ paragraph text emphasisAt: startIndex.	menuList _ WriteStream on: Array new.	menuList nextPut: (code isZero ifTrue:['<on>'] ifFalse:['<off>']), 'normal' translated.	menuList nextPutAll: (#(bold italic underlined struckOut) collect:[:emph|		(code anyMask: (TextEmphasis perform: emph) emphasisCode)			ifTrue:['<on>', emph asString translated]			ifFalse:['<off>',emph asString translated]]).	((paragraph text attributesAt: startIndex forStyle: paragraph textStyle)		anySatisfy:[:attr| attr isKern and:[attr kern < 0]]) 			ifTrue:[menuList nextPut:'<on>', 'narrow' translated]			ifFalse:[menuList nextPut:'<off>', 'narrow' translated].	menuList nextPutAll: (#(leftFlush centered rightFlush justified) collectWithIndex:[:type :i|		align = (i-1)			ifTrue:['<on>',type asString translated]			ifFalse:['<off>',type asString translated]]).	aList _ #(normal bold italic underlined struckOut narrow leftFlush centered rightFlush justified).	reply _ (SelectionMenu labelList: menuList contents lines: #(1 6) selections: aList) startUpWithoutKeyboard.	reply notNil ifTrue:		[(#(leftFlush centered rightFlush justified) includes: reply)			ifTrue:				[self setAlignment: reply.				paragraph composeAll.				self recomputeInterval]			ifFalse:				[self setEmphasis: reply.				paragraph composeAll.				self recomputeSelection.				self mvcRedisplay]].	^ true! !