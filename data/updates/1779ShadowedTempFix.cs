'From Squeak2.7 of 4 January 2000 [latest update: #1761] on 11 January 2000 at 1:27:25 pm'!"Change Set:		ShadowedTempFixDate:			11 January 2000Author:			Dan IngallsFixes four methods in the system in which temp names collided with instance names.  A temporary error-reporting loophole allowed these to slip through into 2.7."!!Class class methodsFor: 'instance creation' stamp: 'di 1/11/2000 12:30'!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to 	define a new class."	^'Object subclass: #NameOfClass	instanceVariableNames: ''instVarName1 instVarName2''	classVariableNames: ''ClassVarName1 ClassVarName2''	poolDictionaries: ''''	category: ''' , aSystemCategoryName , ''''! !!Environment methodsFor: 'system conversion' stamp: 'di 1/11/2000 12:33'!rewriteSourceForSelector: selector inClass: aClass using: envtForVar	"Rewrite the source code for the method in question so that all global references out of the direct access path are converted to indirect global references.  This is done by parsing the source with a lenient parser able to find variables in any environment.  Then the parse tree is consulted for the source code ranges of each reference that needs to be rewritten and the pattern to which it should be rewritten.  Note that assignments, which will take the form	envt setValueOf: #GlobalName to: ...may generate spurious message due to agglutination of keywords with the value expression."	| code methodNode edits varName eName envt |	code _ aClass sourceCodeAt: selector.	methodNode _ Compiler new parse: code in: aClass notifying: nil.	edits _ OrderedCollection new.	methodNode encoder globalSourceRanges do:		[:tuple |   "{ varName. srcRange. store }"		(aClass scopeHas: (varName _ tuple first asSymbol) ifTrue: [:ignored]) ifFalse:			["This is a remote global.  Add it as reference to be edited."			edits addLast: { varName. tuple at: 2. tuple at: 3 }]].	"Sort the edits by source position."	edits _ edits asSortedCollection: [:a :b | a second first < b second first].	edits reverseDo:		[:edit | varName _ edit first.		(eName _ envtForVar at: varName ifAbsent: [nil]) ifNotNil:			["If varName is not already exported, define an export method"			envt _ self at: envtName.			(envt class includesSelector: varName) ifFalse:				[envt class compile: (self exportMethodFor: varName)						 classified: 'exports'].			"Replace each access out of scope with a proper remote reference"			code _ code copyReplaceFrom: edit second first						to: edit second last						with: eName , ' ' , varName]].	aClass compile: code classified: (aClass organization categoryOfElement: selector)! !!VersionsBrowser class methodsFor: 'as yet unclassified' stamp: 'di 1/11/2000 12:45'!browseVersionsOf: method class: class meta: meta category: msgCategory selector: selector 	^ self browseVersionsOf: method class: class meta: meta category: msgCategory selector: selector lostMethodPointer: nil! !!VersionsBrowser class methodsFor: 'as yet unclassified' stamp: 'di 1/11/2000 12:44'!browseVersionsOf: method class: class meta: meta category: msgCategory selector: selector lostMethodPointer: sourcePointer 	| changeList |	Cursor read showWhile:		[changeList _ self new			scanVersionsOf: method class: class meta: meta			category: msgCategory selector: selector].	changeList ifNil: [^ self inform: 'No versions available'].	sourcePointer ifNotNil:		[changeList setLostMethodPointer: sourcePointer].	self open: changeList name: 'Recent versions of ' ,selector multiSelect: false! !