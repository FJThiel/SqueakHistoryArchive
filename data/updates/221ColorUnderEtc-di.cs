'From Squeak 2.1 of June 30, 1998 on 9 September 1998 at 11:16:53 pm'!"Change Set:		ColorUnderEtc-diDate:			9 September 1998Author:			Dan IngallsThis changeSet makes Morph color:sees: work with flexed morphs.  As reimplemented, it shares code with colorUnder, becomes more efficient, and gets rid of the ungainly and flex-challenged fullDrawOn:butDoNotDraw: method in Morph.Also changes the order of operations in TransformationMorph>>removeFlexShell so that lines do not get drawn mistakenly during the repositioning of the flexed morph."!!Morph methodsFor: 'submorphs-accessing' stamp: 'di 9/9/1998 22:38'!morphsIn: aRectangle	"Return a collection of all morphs in this morph structure that intersect the given rectangle, possibly including the receiver itself.  The order is deepest embedding first."	^ self morphsIn: aRectangle addTo: OrderedCollection new! !!Morph methodsFor: 'submorphs-accessing' stamp: 'di 9/9/1998 22:28'!morphsIn: aRectangle addTo: mList	"Return a collection of all morphs in this morph structure that intersect the given rectangle, possibly including the receiver itself.  Must do this recursively because of transforms.  "	submorphs size > 0 ifTrue:		[submorphs do: [:m | m morphsIn: aRectangle addTo: mList]].	(self bounds intersects: aRectangle) ifTrue: [mList addLast: self].	^ mList! !!Morph methodsFor: 'drawing' stamp: 'di 9/9/1998 22:25'!imageFormForRectangle: rect	^ self imageForm: Display depth forRectangle: rect! !!Morph methodsFor: 'geometry eToy' stamp: 'di 9/9/1998 23:10'!color: sensitiveColor sees: soughtColor	"Return true if any of my pixels of sensitiveColor intersect with pixels of soughtColor."	| myImage sensitivePixelMask map patchBelowMe |	"make a mask with black where sensitiveColor is, white elsewhere"	myImage _ self imageForm.	sensitivePixelMask _ Form extent: myImage extent depth: 1.	map _ (Color cachedColormapFrom: myImage depth to: 1) copy.	map primFill: 0.	map at: (sensitiveColor indexInMap: map) put: 1.	sensitivePixelMask copyBits: sensitivePixelMask boundingBox		from: myImage form		at: 0@0		colorMap: map.	"get an image of the world below me"	patchBelowMe _ self world patchAt: self fullBounds belowMorph: self.	"intersect world pixels of the color we're looking for with the sensitive pixels"	map at: (sensitiveColor indexInMap: map) put: 0.  "clear map and reuse it"	map at: (soughtColor indexInMap: map) put: 1.	sensitivePixelMask copyBits: patchBelowMe boundingBox		from: patchBelowMe		at: 0@0		clippingBox: patchBelowMe boundingBox		rule: Form and		fillColor: nil		map: map.	^ (sensitivePixelMask tallyPixelValues at: 2) > 0! !!Morph methodsFor: 'geometry eToy' stamp: 'di 9/9/1998 22:49'!colorUnder	"Return the color of under the receiver's center."	self isInWorld		ifTrue: [^ self world colorAt: (self pointInWorld: self referencePosition) belowMorph: self]		ifFalse: [^ Color black].! !!Morph methodsFor: 'private' stamp: 'di 9/9/1998 20:03'!privateMoveBy: delta	"Private!! Use 'position:' instead."	| pasteUp start |	(extension == nil or: [extension actorState == nil]) ifFalse:		["Most cases eliminated fast by above test"		extension actorState getPenDown ifTrue:			["If this is a costume for a player with its pen down, draw a line."			(pasteUp _ self pasteUpMorph) ifNotNil:				[start _ self referencePosition.				pasteUp drawPenTrailFor: self from: start to: start + delta]]].	fullBounds == bounds		ifTrue: ["optimization: avoids recomputing fullBounds"				fullBounds _ bounds _ bounds translateBy: delta]		ifFalse: [bounds _ bounds translateBy: delta.				fullBounds _ nil]! !!Player methodsFor: 'slots-standard-get/set' stamp: 'di 9/9/1998 20:13'!setHeading: newHeading	| aCostume |	aCostume _ self costume.	newHeading = 0.0		ifTrue: 			[self getScaleFactor = 1.0 ifTrue:				[aCostume isFlexMorph ifTrue:					[aCostume rotationDegrees: newHeading.					aCostume removeFlexShell].				^ self]]		ifFalse:			[aCostume isFlexMorph ifFalse: [aCostume addFlexShell]].	self costume rotationDegrees: newHeading.! !!TransformMorph methodsFor: 'submorphs-accessing' stamp: 'di 9/9/1998 22:37'!morphsIn: aRectangle addTo: mList	"Return a collection of all morphs in this morph structure that intersect the given rectangle, possibly including the receiver itself.  Map through my transform.  "	| r |	(self bounds intersects: aRectangle) ifFalse:		["TransformMorph clips to bounds"		^ mList].	r _ Rectangle encompassing: (aRectangle corners collect: [:p | transform transform: p]).	submorphs do: [:m | m morphsIn: r addTo: mList].	mList addLast: self.	^ mList! !!TransformationMorph methodsFor: 'menu' stamp: 'di 9/9/1998 19:53'!removeFlexShell	"Remove the shell used to make a morph rotatable and scalable."	| oldHalo unflexed anActorState aName |	oldHalo _ self halo.	submorphs isEmpty ifTrue: [^ self delete].	unflexed _ self firstSubmorph.	self submorphs copy do: [:m |		m position: self center - (m extent // 2).		owner addMorph: m].	(anActorState _ self actorStateOrNil) ifNotNil:		[unflexed actorState: anActorState].	(aName _ self knownName) ifNotNil:		[unflexed setNameTo: aName].	unflexed player: self player.	self player ifNotNil:		[self player rawCostume: unflexed.		self player: nil].	oldHalo ifNotNil: [oldHalo setTarget: unflexed].	self delete.! !!WorldMorph methodsFor: 'sensing' stamp: 'di 9/9/1998 22:45'!colorAt: aPoint belowMorph: aMorph	"Return the color of the pixel immediately behind the given morph at the given point."	^ (self patchAt: (aPoint extent: 1@1) belowMorph: aMorph) colorAt: 0@0! !!WorldMorph methodsFor: 'sensing' stamp: 'di 9/9/1998 22:43'!patchAt: patchRect belowMorph: aMorph	"Return the image of the given patch rectangle immediately behind the given morph."	| c root |	c _ FormCanvas extent: patchRect extent depth: Display depth.	c _ c copyOrigin: patchRect topLeft negated clipRect: (0@0 extent: patchRect extent).	(self bounds containsRect: patchRect) ifFalse:		["Need to fill area outside bounds with black."		c form fillColor: Color black].	(self bounds intersects: patchRect) ifFalse:		["Nothing within bounds to show."		^ c form].	c fillColor: color.  "Fill bounds with world color."	root _ aMorph root.	submorphs reverseDo: [:m |		m == root ifTrue: [			(m morphsIn: patchRect) reverseDo:				[:subM |				subM == aMorph ifTrue: [^ c form].				subM drawOn: c]].		m fullDrawOn: c].	hands reverseDo: [:h |		h submorphsReverseDo: [:m |			m == root ifTrue: [				(m morphsIn: patchRect) reverseDo:					[:subM |					subM == aMorph ifTrue: [^ c form].					subM drawOn: c]].			m fullDrawOn: c]].	^ c form! !Morph removeSelector: #fullDrawOn:butDoNotDraw:!SketchMorph removeSelector: #colorUnder!