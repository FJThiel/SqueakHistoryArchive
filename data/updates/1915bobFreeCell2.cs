'From Squeak2.8alpha of 13 January 2000 [latest update: #1873] on 5 March 2000 at 8:38:16 am'!"Change Set:		bobFreeCell2Date:			5 March 2000Author:			Bob ArningThree changes for FreeCell:- a gradient background for the board to look a bit more interesting- double-clicking on a card when the free cells are full will search for an empty stack- auto playing to home is a little smarter"!AlignmentMorph subclass: #FreeCell	instanceVariableNames: 'board cardsRemainingDisplay elapsedTimeDisplay gameNumberDisplay lastGameLost state autoMoveRecursionCount myFillStyle '	classVariableNames: 'Statistics '	poolDictionaries: ''	category: 'Morphic-Games'!!FreeCell methodsFor: 'initialization' stamp: 'RAA 3/3/2000 23:57'!initialize	super initialize.	Statistics newSession.	autoMoveRecursionCount _ 0.	orientation _ #vertical.	centering _ #center.	vResizing _ #shrinkWrap.	hResizing _ #shrinkWrap.	self		color: self colorNearTop;		borderWidth: 2;		addMorph: self makeControls;		addMorph: self board;		newGame.! !!FreeCell methodsFor: 'initialization' stamp: 'RAA 3/3/2000 23:28'!makeControlBar	^AlignmentMorph newRow		color: self colorNearBottom;		borderColor: #inset;		borderWidth: 2;		inset: 0;		hResizing: #spaceFill; vResizing: #shrinkWrap; centering: #center;		yourself.! !!FreeCell methodsFor: 'visual properties' stamp: 'RAA 3/3/2000 23:28'!colorNearBottom	^Color r: 0.0 g: 0.455 b: 0.18! !!FreeCell methodsFor: 'visual properties' stamp: 'RAA 3/4/2000 10:26'!colorNearTop	^ (Color r: 0.304 g: 0.833 b: 0.075)! !!FreeCell methodsFor: 'visual properties' stamp: 'RAA 3/3/2000 23:29'!defaultBackgroundColor	^Color r: 0.365 g: 1.0 b: 0.09! !!FreeCell methodsFor: 'as yet unclassified' stamp: 'RAA 3/4/2000 17:01'!fillStyle	myFillStyle ifNil: [		myFillStyle _ GradientFillStyle ramp: {			0.0 -> self colorNearTop. 			1.0 -> self colorNearBottom		}.	].	^myFillStyle		origin: self position;		direction: (self width // 2)@self height! !!FreeCellBoard methodsFor: 'initialization' stamp: 'RAA 3/3/2000 23:32'!initialize	super initialize.	orientation := #vertical.	hResizing _ #shrinkWrap.	vResizing _ #rigid.	self height: 500.	borderWidth _ 0.	color _ Color green.	self layout.! !!FreeCellBoard methodsFor: 'layout' stamp: 'RAA 3/3/2000 23:42'!cardCell	^PlayingCardDeck new		layout: #pile; 		orientation: #vertical;		openToDragNDrop: true;		color: Color transparent;		borderColor: (Color gray alpha: 0.5);		borderWidth: 2;		yourself! !!FreeCellBoard methodsFor: 'layout' stamp: 'RAA 3/3/2000 23:33'!cellsRow	| row |	row := (AlignmentMorph newRow)		vResizing: #shrinkWrap;		hResizing: #shrinkWrap;		color: Color transparent;		addAllMorphs: self freeCells;		addMorphBack: self cellsRowSpacer;		addAllMorphs: self homeCells;		yourself.	^row! !!FreeCellBoard methodsFor: 'layout' stamp: 'RAA 3/4/2000 00:04'!stack	^ PlayingCardDeck new color: Color transparent;	 layout: #stagger;	 orientation: #vertical;	 openToDragNDrop: true;	 stackingPolicy: #altStraight;	 stackingOrder: #descending;	 emptyDropPolicy: #any;	 target: self;	 cardDroppedSelector: #cardMoved;	 cardDraggedSelector: #dragCard:fromStack:;	 acceptCardSelector: #acceptCard:onStack:;	 cardDoubleClickSelector: #doubleClickInStack:OnCard:! !!FreeCellBoard methodsFor: 'layout' stamp: 'RAA 3/3/2000 23:34'!stacksRow	| row |	row := (AlignmentMorph newRow)		vResizing: #spaceFill;		hResizing: #spaceFill;		centering: #topLeft;		color: Color transparent;		yourself.	self stacks do: [:stack |		row 			addMorphBack: AlignmentMorph newVariableTransparentSpacer;			addMorphBack: stack].	row addMorphBack: AlignmentMorph newVariableTransparentSpacer.	^row! !!FreeCellBoard methodsFor: 'private' stamp: 'RAA 3/4/2000 10:48'!autoMoveCardsHome	| first |	first _ false.	(self stacks, self freeCells) do: [:deck |		self homeCells do: [ :homeCell |			deck hasCards ifTrue: [				(homeCell repelCard: deck topCard) ifFalse: [					(self isPlayableCardInHomeCells: deck topCard) ifTrue: [						first ifFalse: [ " trigger autoMoving event on first move."							first _ true.							self performActionSelector: #autoMovingHome						].						self visiblyMove: deck topCard to: homeCell.					]				]			]		]	].! !!FreeCellBoard methodsFor: 'private' stamp: 'RAA 3/4/2000 17:11'!isPlayableCardInHomeCells: aPlayingCard	| unplayedOther topsThisColor topsOtherColor unplayedSame | 	" are all cards that could be played on this card if it stayed on the stack present in the	home cells?"	aPlayingCard cardNumber <= 2 ifTrue: [^true].	"special case for Aces and 2's"	topsThisColor _ OrderedCollection new.	topsOtherColor _ OrderedCollection new.	self homeCells do: [ :deck |		deck hasCards ifTrue: [			(aPlayingCard suitColor == deck topCard suitColor 					ifTrue: [topsThisColor] ifFalse: [topsOtherColor]) add: deck topCard cardNumber.		]	].	unplayedOther _ topsOtherColor size < 2 ifTrue: [1] ifFalse: [topsOtherColor min + 1].	unplayedSame _ topsThisColor size < 2 ifTrue: [1] ifFalse: [topsThisColor min + 1].	unplayedOther > (aPlayingCard cardNumber - 1) ifTrue: [^true].	unplayedOther < (aPlayingCard cardNumber - 1) ifTrue: [^false].	^unplayedSame >= (unplayedOther - 1)! !!FreeCellBoard methodsFor: 'private' stamp: 'RAA 3/4/2000 10:43'!visiblyMove: aCard to: aCell	| p1 p2 nSteps |	"Should be tweaked with graduated motion"	owner owner addMorphFront: aCard.	p1 _ aCard position.	p2 _ aCell position.	nSteps _ 10.	1 to: nSteps-1 do: "Note final step happens with actual drop"		[:i | aCard position: ((p2*i) + (p1*(nSteps-i))) // nSteps.		self world displayWorld].	aCell acceptDroppingMorph: aCard event: nil! !!FreeCellBoard methodsFor: 'actions' stamp: 'RAA 3/4/2000 17:07'!doubleClickInStack: aDeck OnCard: aCard	"if there is an empty free cell, move the card there. otherwise try for an empty stack"	aCard == aDeck topCard ifFalse: [^self].	freeCells do: [:freeCell |		freeCell ifEmpty: [			self visiblyMove: aCard to: freeCell.			^ aCard		]	].	stacks do: [ :each |		each ifEmpty: [			self visiblyMove: aCard to: each.			^ aCard		]	].! !!FreeCellBoard methodsFor: 'as yet unclassified' stamp: 'RAA 3/4/2000 17:02'!drawOn: aCanvas	"we don't have anything to draw, but we need a color so the inset border of one of our submorphs will work"! !