'From Squeak 2.4c of May 10, 1999 on 13 July 1999 at 8:21:48 pm'!"Change Set:		windowColors-swDate:			13 July 1999Author:			Scott WallaceAdds a little panel allowing user to choose from a set of window color schemes and to tune the color of any particular window typePlaces the menu item for opening such a panel, together with other appearance-related items, in a new 'appearance' branch of the screen menu."!UpdatingRectangleMorph subclass: #ColorSwatch	instanceVariableNames: 'argument '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting-Support'!!Object methodsFor: 'user interface' stamp: 'sw 7/13/1999 15:53'!defaultBackgroundColor	"Answer the color to be used as the base window color for a window whose model is an object of the receiver's class"		^ Preferences windowColorFor: self class name! !!Morph methodsFor: 'e-toy support' stamp: 'sw 7/13/1999 15:58'!wrappedInWindowWithTitle: aTitle	| aWindow |	aWindow _ (SystemWindow labelled: aTitle) model: MorphicModel new.	aWindow addMorph: self frame: (0@0 extent: 1@1).	aWindow extent: self extent + (2 @ 18).	^ aWindow! !!ColorSwatch methodsFor: 'as yet unclassified' stamp: 'sw 7/13/1999 13:39'!argument: arg	argument _ arg! !!ColorSwatch methodsFor: 'as yet unclassified' stamp: 'sw 7/13/1999 15:09'!readFromTarget	| v |	((target == nil) or: [getSelector == nil]) ifTrue: [^ contents].	v _ target scriptPerformer perform: getSelector with: argument.	lastValue _ v.	^ v ! !!ColorSwatch methodsFor: 'as yet unclassified' stamp: 'sw 7/13/1999 13:48'!setTargetColor: aColor	putSelector ifNotNil:		[self color: aColor.		contents _ aColor.		target scriptPerformer perform: self putSelector withArguments: (Array with: argument with: aColor)]! !!ColorSwatch methodsFor: 'as yet unclassified' stamp: 'sw 7/13/1999 18:39'!stepTime	^ 1000! !!HandMorph methodsFor: 'world menu' stamp: 'sw 7/13/1999 16:04'!appearanceDo	"Build and show the appearance menu for the world."	self appearanceMenu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu' stamp: 'sw 7/13/1999 16:49'!appearanceMenu	"Build the appearance menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'appearance...') defaultTarget: self.	menu addStayUpItem.	menu add: 'window colors...' target: Preferences action: #windowSpecificationPanel.	menu balloonTextForLastItem: 'lets you specify colors for standard system windows.'.	menu addUpdating: #menuColorString target: Preferences action: #toggleMenuColorPolicy.	menu balloonTextForLastItem: 'Governs whether menu colors should be derived from the desktop color.'.	menu addUpdating: #roundedCornersString target: Preferences action: #toggleRoundedCorners.	menu balloonTextForLastItem: 'Governs whether morphic windows and menus should have rounded corners.'.	menu addLine.	menu add: 'full screen on' target: screenCtrl action: #fullScreenOn.	menu balloonTextForLastItem: 'puts you in full-screen mode, if not already there.'.	menu add: 'full screen off' target: screenCtrl action: #fullScreenOff.	menu balloonTextForLastItem: 'if in full-screen mode, takes you out of it.'.	menu addLine.	menu add: 'set display depth...' action: #setDisplayDepth.	menu balloonTextForLastItem: 'choose how many bits per pixel.'.	menu add: 'set desktop color...' action: #changeBackgroundColor.	menu balloonTextForLastItem: 'choose a uniform color to use as desktop background.'.	menu add: 'use texture background' target: self world action: #setStandardTexture.	menu balloonTextForLastItem: 'apply a graph-paper-like texture background to the desktop.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 7/13/1999 16:09'!buildWorldMenu	"Build the meta menu for the world."	| menu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'previous project' target: owner action: #goBack.	menu add: 'jump to project...' action: #jumpToProject.	menu add: 'restore display' target: self world action: #restoreDisplay.	menu addLine.	menu add: 'open...' action: #openWindow.	menu add: 'windows & flaps...' action: #windowsDo.	menu add: 'changes...' action: #changesDo.	menu add: 'help...' action: #helpDo.	menu add: 'appearance...' action: #appearanceDo.	menu add: 'do...' target: Utilities action: #offerCommonRequests.	menu addLine.	menu add: 'new morph...' action: #newMorph.	menu add: 'authoring tools...' action: #scriptingDo.	menu add: 'playfield options...' action: #playfieldDo.	menu add: 'debug...' action: #debugDo.	menu addLine.	menu add: 'save' action: #saveSession.	menu add: 'save as...' action: #saveAs.	menu add: 'save and quit' action: #saveAndQuit.	menu add: 'quit' action: #quitSession.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 7/13/1999 16:42'!helpMenu	"Build the help menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'help...') defaultTarget: self.	menu addStayUpItem.	menu add: 'about this system...' target: Smalltalk action: #aboutThisSystem.	menu balloonTextForLastItem: 'current version information.'.	menu add: 'update code from server' action: #absorbUpdatesFromServer.	menu balloonTextForLastItem: 'load latest code updates via the internet'.	menu add: 'preferences...' target: Preferences action: #openPreferencesInspector.	menu balloonTextForLastItem: 'view and change various options.'.	menu addLine.	menu add: 'command-key help' target: Utilities action: #openCommandKeyHelp.	menu balloonTextForLastItem: 'summary of keyboard shortcuts.'.	menu add: 'world menu help' target: self action: #worldMenuHelp.	menu balloonTextForLastItem: 'helps find menu items buried in submenus.'.	"menu add: 'info about flaps' target: Utilities action: #explainFlaps."	menu balloonTextForLastItem: 'describes how to enable and use flaps.'.	menu add: 'font size summary' target: Utilities action: #fontSizeSummary.	menu balloonTextForLastItem: 'summary of names and sizes of available fonts.'.	menu add: 'useful expressions' target: Utilities action: #openStandardWorkspace.	menu balloonTextForLastItem: 'a window full of useful expressions.'.	menu add: 'view graphical imports' target: Smalltalk action: #viewImageImports.	menu balloonTextForLastItem: 'lets you look at graphical imports.'.	menu addLine.	menu addUpdating: #gridOnString action: #setGridding.	menu balloonTextForLastItem: 'turn gridding on or off.'.	menu add: 'telemorphic...' action: #remoteDo.	menu balloonTextForLastItem: 'commands for doing multi-machine "telemorphic" experiments'.	menu addUpdating: #soundEnablingString target: Preferences action: #toggleSoundEnabling.	menu balloonTextForLastItem: 'turning sound off will completely disable Squeak''s use of sound.'.	menu addLine.	menu add: 'set author initials...' target: screenCtrl action: #setAuthorInitials.	menu balloonTextForLastItem: 'supply initials to be used to identify the author of code and other content.'.	menu add: 'vm statistics' target: screenCtrl action: #vmStatistics.	menu balloonTextForLastItem: 'obtain some intriguing data about the vm.'.	menu add: 'space left' target: screenCtrl action: #garbageCollect.	menu balloonTextForLastItem: 'perform a full garbage-collection and report how many bytes of space remain in the image.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 7/13/1999 19:57'!worldMenuHelp	| aList aMenu cnts explanation |	"HandMorph new worldMenuHelp"	aList _ OrderedCollection new.	#(helpMenu changesMenu openMenu debugMenu  scriptingMenu windowsMenu playfieldMenu appearanceMenu) 		with:	#('help' 'changes' 'open' 'debug'  'authoring tools' 'windows & flaps' 'playfield options' 'appearance')do:		[:sel :title | aMenu _ self perform: sel.			aMenu items do:				[:it | (((cnts _ it contents) = 'keep this menu up') or: [cnts size = 0])					ifFalse: [aList add: (cnts, ' - ', title)]]].	aList _ aList asSortedCollection: [:a :b | a asLowercase < b asLowercase].	explanation _ ReadWriteStream on: ''.	aList do:		[:anItem | explanation nextPutAll: anItem; cr].	(StringHolder new contents: explanation contents)		openLabel: 'Where in the world menu is...'! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/13/1999 16:38'!darkerWindows	"Preferences darkerWindows"	| windowColorDict |	(Parameters includesKey: #windowColors) ifFalse:		[Parameters at: #windowColors put: IdentityDictionary new].	windowColorDict _ Parameters at: #windowColors.	windowColorDict associationsDo:		[:assoc | windowColorDict at: assoc key put: assoc value darker]! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/12/1999 17:41'!installBrightWindowColors	"Preferences installBrightWindowColors"	| windowColorDict |	(Parameters includesKey: #windowColors) ifFalse:		[Parameters at: #windowColors put: IdentityDictionary new].	windowColorDict _ Parameters at: #windowColors.	#(	(Browser				lightGreen)		(ChangeList				lightBlue)		(ChangeSorter			lightBlue)		(Debugger				lightRed)		(DualChangeSorter		lightBlue)		(FileContentsBrowser		tan)		(FileList					lightMagenta)		(MessageSet				lightBlue)		(Object					white)		(SelectorBrowser			lightCyan)		(StringHolder			lightYellow)		(TranscriptStream		lightOrange))	do:			[:pair |				windowColorDict at: pair first put: (Color perform: pair last)]! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/12/1999 17:41'!installPastelWindowColors	"Preferences installPastelWindowColors"	| windowColorDict |	(Parameters includesKey: #windowColors) ifFalse:		[Parameters at: #windowColors put: IdentityDictionary new].	windowColorDict _ Parameters at: #windowColors.	#(	(Browser				paleGreen)		(ChangeList				paleBlue)		(ChangeSorter			paleBlue)		(Debugger				veryPaleRed)		(DualChangeSorter		paleBlue)		(FileContentsBrowser		paleTan)		(FileList					paleMagenta)		(MessageSet				paleBlue)		(Object					white)		(SelectorBrowser			palePeach)		(StringHolder			paleYellow)		(TranscriptStream		paleOrange))	do:			[:pair |				windowColorDict at: pair first put: (Color perform: pair last)]! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/13/1999 15:12'!installUniformWindowColors	"Preferences installUniformWindowColors"	| windowColorDict |	(Parameters includesKey: #windowColors) ifFalse:		[Parameters at: #windowColors put: IdentityDictionary new].	windowColorDict _ Parameters at: #windowColors.	#(	(Browser				white)		(ChangeList				white)		(ChangeSorter			white)		(Debugger				white)		(DualChangeSorter		white)		(FileContentsBrowser		white)		(FileList					white)		(MessageSet				white)		(Object					white)		(SelectorBrowser			white)		(StringHolder			white)		(TranscriptStream		white))	do:			[:pair |				windowColorDict at: pair first put: (Color perform: pair last)]! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/13/1999 16:38'!lighterWindows	"Preferences lighterWindows"	| windowColorDict |	(Parameters includesKey: #windowColors) ifFalse:		[Parameters at: #windowColors put: IdentityDictionary new].	windowColorDict _ Parameters at: #windowColors.	windowColorDict associationsDo:		[:assoc | windowColorDict at: assoc key put: assoc value lighter]! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/12/1999 17:05'!setWindowColorFor: modelSymbol to: aColor	(Parameters includesKey: #windowColors) ifFalse:		[Parameters at: #windowColors put: IdentityDictionary new.		self installBrightWindowColors].	^ (Parameters at: #windowColors) at: modelSymbol put: aColor	! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/13/1999 16:31'!windowColorClasses	^ #(Browser	 ChangeList	 ChangeSorter Debugger	 DualChangeSorter FileContentsBrowser	 FileList	MessageSet SelectorBrowser StringHolder TranscriptStream)! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/13/1999 16:03'!windowColorFor: aModelClassName	| classToCheck windowColors |	(Parameters includesKey: #windowColors) ifFalse:		[Parameters at: #windowColors put: IdentityDictionary new.		self installBrightWindowColors].	classToCheck _ Smalltalk at: aModelClassName.	windowColors _ Parameters at: #windowColors.	[windowColors includesKey: classToCheck name]		whileFalse:			[classToCheck _ classToCheck superclass].	^ windowColors at: classToCheck name ifAbsent: [Color white]	! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/13/1999 20:10'!windowColorHelp	"The 'Window Colors' panel lets you select colors for the standard Squeak windows.The three buttons entitled 'Bright', 'Pastel', and 'White' let you install three different standard color schemes.The rows of color swatches and tool names indicate what the color for each tool is currently set to be.  You can change the color for any tool by clicking on its swatch, then choosing a new color in the ensuing color-picker.'TranscriptStream' governs the color of Transcripts.'MessageSet' governs the color of message-list browsers.'ChangeList' governs the color of change-list browsers *and* versions browsers.'StringHolder' governs the color of Workspaces.Any time you request a new window (browser, file-list, etc.), the current window-color setting for that kind of window will determine what color is used.But note that if in Morphic, the 'Tools' flap and the 'Standard Parts Bin' both contain pre-allocated window prototypes, and these will not automatically change when you edit the standard window colors.  To get the Tools flap to reflect your latest color choices, hit the 'Update Tools Flap' button.  To get the standard parts bin to reflect your latest color choices, evaluate 'ScriptingSystem resetStandardPartsBin'"	(StringHolder new contents: (self class firstCommentAt: #windowColorHelp))		openLabel: 'About Window Colors'	"Preferences windowColorHelp"! !!Preferences class methodsFor: 'window colors' stamp: 'sw 7/13/1999 20:17'!windowSpecificationPanel	"Preferences windowSpecificationPanel"	| aPanel buttonRow aButton aRow aSwatch aColor aWindow aMiniWorld |	aPanel _ AlignmentMorph newColumn hResizing: #shrinkWrap; vResizing: #shrinkWrap.	aPanel addMorph: (buttonRow _ AlignmentMorph newRow color: (aColor _ Color tan lighter)).		aButton _ SimpleButtonMorph new target: self.	buttonRow addTransparentSpacerOfSize: 2@0.	buttonRow addMorphBack: (SimpleButtonMorph new label: '?'; target: self; actionSelector: #windowColorHelp; setBalloonText: 'Click for an explanation of this panel'; color: Color veryVeryLightGray; yourself).	buttonRow addTransparentSpacerOfSize: 8@0.	#(	('Bright' 	installBrightWindowColors	yellow					'Use standard bright colors for all windows.')		('Pastel'		installPastelWindowColors	paleMagenta					'Use standard pastel colors for all windows.')		('White'	installUniformWindowColors		white					'Use white backgrounds for all standard windows.')) do:		[:quad |			aButton _ aButton fullCopy				label: quad first;				actionSelector: quad second;				color: (Color colorFrom: quad third);				setBalloonText: quad fourth;				yourself.			buttonRow addMorphBack: aButton.			buttonRow addTransparentSpacerOfSize: 10@0].	self windowColorClasses do:		[:aClassName | 			aRow _ AlignmentMorph newRow color: aColor.			aSwatch _ ColorSwatch new				target: self;				getSelector: #windowColorFor:;				putSelector: #setWindowColorFor:to:;				argument: aClassName;				extent: (40 @ 20);				yourself.			aRow addMorphFront: aSwatch.			aRow addTransparentSpacerOfSize: (12 @ 1).			aRow addMorphBack: (StringMorph new contents: aClassName).			aPanel addMorphBack: aRow].	 Smalltalk isMorphic                ifTrue:                        [buttonRow _ buttonRow fullCopy removeAllMorphs.					buttonRow addTransparentSpacerOfSize: 25@0.					aButton _ aButton fullCopy color: Color tan muchLighter.					aButton label: 'Update Tools Flap'; target: Utilities; actionSelector: #replaceToolsFlap.					buttonRow addMorphBack: aButton.					aButton setBalloonText: 'Press here to place tools which use the above window-color choices  into the Tools flap.'.					aPanel addMorphBack: buttonRow.					aWindow _ aPanel wrappedInWindowWithTitle: 'Window Colors'.                        self currentHand attachMorph: aWindow.					aWindow world startSteppingSubmorphsOf: aPanel.]                ifFalse:                        [(aMiniWorld _ PasteUpMorph newWorldForProject: nil)						addMorph: aPanel.                           aMiniWorld startSteppingSubmorphsOf: aPanel.                        MorphWorldView openOn: aMiniWorld                                label: 'Window Colors'                                extent: aMiniWorld fullBounds extent]! !!Preferences class methodsFor: 'preferences panel' stamp: 'sw 7/13/1999 16:24'!defaultBackgroundColor	"The background for the preferences control panel"	^ Color white! !!Preferences class methodsFor: 'pref buttons' stamp: 'sw 7/13/1999 18:55'!togglePreference: prefSymbol	| curr |	curr _ (FlagDictionary at: prefSymbol ifAbsent: [^ self error: 'unknown pref: ', prefSymbol printString]).	self setPreference: prefSymbol toValue: (curr == true) not! !!Preferences class methodsFor: 'misc' stamp: 'sw 7/13/1999 16:52'!menuColorString	^ (self valueOfFlag: #menuColorFromWorld)		ifFalse:			['start menu-color-from-world']		ifTrue:			['stop menu-color-from-world']! !!Preferences class methodsFor: 'misc' stamp: 'sw 7/13/1999 16:53'!roundedCornersString	^ (self valueOfFlag: #roundedWindowCorners)		ifFalse:			['start using rounded corners']		ifTrue:			['stop using rounded corners']! !!Preferences class methodsFor: 'misc' stamp: 'sw 7/13/1999 16:51'!toggleMenuColorPolicy	self togglePreference: #menuColorFromWorld! !!Preferences class methodsFor: 'misc' stamp: 'sw 7/13/1999 16:52'!toggleRoundedCorners	self togglePreference: #roundedWindowCorners! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 7/13/1999 20:19'!windowSpecificationPanel	Smalltalk hasMorphic ifFalse:		[^ self inform: 'Sorry, this feature requires the presence of Morphic.'].	Preferences windowSpecificationPanel! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 7/13/1999 18:10'!appearanceMenu 	"Answer the appearance menu to be put up as a screen submenu"	^ SelectionMenu labelList:		#(	'window colors...'			'full screen on'			'full screen off'			'set display depth...'			'set desktop color...' ) 		lines: #(1 3)		selections: #(windowSpecificationPanelfullScreenOn fullScreenOff setDisplayDepth setDesktopColor)"ScreenController new appearanceMenu startUp"! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 7/13/1999 18:12'!helpMenu 	"Answer the help menu to be put up as a screen submenu"	^ SelectionMenu labelList:		#(	'keep this menu up'			'about this system'			'update code from server'			'edit preferences...'			'command-key help'			'font size summary'			'useful expressions'			'view graphical imports'),			(Array with: ((Preferences valueOfFlag: #disableSounds)							ifTrue: ['turn sound on']							ifFalse: ['turn sound off'])) ,		#(	'set author initials...'			'vm statistics'			'space left')		lines: #(1 4 6 )		selections: #(durableHelpMenu aboutThisSystem absorbUpdatesFromServereditPreferences  openCommandKeyHelp fontSizeSummary openStandardWorkspace viewImageImportssoundOnOrOff  setAuthorInitials vmStatistics garbageCollect)"ScreenController new helpMenu startUp"! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 7/13/1999 18:07'!presentAppearanceMenu	self popUpMenuFor: #appearanceMenu! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 7/13/1999 18:07'!projectScreenMenu	"Answer the project screen menu."	^ SelectionMenu labelList:		#(	'keep this menu up'			'previous project'			'jump to project...'			'restore display'			'open...'			'windows...'			'changes...'			'help...'			'appearance...'			'do...'			'save'			'save as...'			'save and quit'			'quit')		lines: #(1 4 10)		selections: #(durableScreenMenureturnToPreviousProject jumpToProject restoreDisplaypresentOpenMenu presentWindowMenu presentChangesMenu presentHelpMenu presentAppearanceMenu commonRequestssnapshot saveAs snapshotAndQuit quit )"ScreenController new projectScreenMenu startUp"! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'sw 7/13/1999 18:13'!viewImageImports	"Open up a special Form inspector on the dictionary of graphical imports."	self imageImports inspectFormsWithLabel: 'Graphical Imports'! !!Utilities class methodsFor: 'flaps' stamp: 'sw 7/13/1999 15:47'!replaceToolsFlap	"if there is a global tools flap, replace it with an updated one."	| aFlapTab |	aFlapTab _ self globalFlapTabsIfAny detect:		[:aTab | (aTab submorphs size > 0) and:  [(aTab submorphs first isKindOf: TextMorph) and: [(aTab submorphs first contents string copyWithout: Character cr) = 'Tools']]] ifNone: [^ self].	self removeFlapTab: aFlapTab keepInList: false.	self addGlobalFlap: self standardRightFlap.	self currentWorld ifNotNil: [self currentWorld addGlobalFlaps]"Utilities replaceToolsFlap"! !DualChangeSorter removeSelector: #defaultBackgroundColor!StringHolder removeSelector: #defaultBackgroundColor!Browser removeSelector: #defaultBackgroundColor!ChangeList removeSelector: #defaultBackgroundColor!ChangeSorter removeSelector: #defaultBackgroundColor!Debugger removeSelector: #defaultBackgroundColor!FileContentsBrowser removeSelector: #defaultBackgroundColor!FileList removeSelector: #defaultBackgroundColor!MessageSet removeSelector: #defaultBackgroundColor!SelectorBrowser removeSelector: #defaultBackgroundColor!TranscriptStream removeSelector: #defaultBackgroundColor!