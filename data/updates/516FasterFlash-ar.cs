'From Squeak 2.3 beta of Nov 25, 1998 on 30 December 1998 at 1:29:25 pm'!"Change Set:		FasterFlash-arDate:			30 December 1998Author:			Andreas RaabThis change set adds deferred rendering to the Flash player.Deferred rendering means that all primitives are accumulatedand then rendered once to avoid multiple redraws of screen areas."!FormCanvas subclass: #BalloonCanvas	instanceVariableNames: 'transform colorTransform engine aaLevel deferred '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon-Engine'!Object subclass: #BalloonState	instanceVariableNames: 'transform colorTransform aaLevel '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon-Engine'!!BalloonCanvas methodsFor: 'initialize' stamp: 'ar 12/30/1998 10:54'!initialize	aaLevel _ 1.	deferred _ false.! !!BalloonCanvas methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:53'!aaLevel: newLevel	"Only allow changes to aaLevel if we're working on >= 8 bit forms"	form depth >= 8 ifFalse:[^self].	aaLevel = newLevel ifTrue:[^self].	self flush.	"In case there are pending primitives in the engine"	aaLevel _ newLevel.	engine ifNotNil:[engine aaLevel: aaLevel].! !!BalloonCanvas methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:54'!deferred	^deferred! !!BalloonCanvas methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:55'!deferred: aBoolean	deferred == aBoolean ifTrue:[^self].	self flush. "Force pending prims on screen"	deferred _ aBoolean.	engine ifNotNil:[engine deferred: aBoolean].! !!BalloonCanvas methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:55'!ensuredEngine	engine ifNil:[		true			ifTrue:[engine _ BalloonEngine new]			ifFalse:[engine _ BalloonDebugEngine new].		engine aaLevel: aaLevel.		engine bitBlt: port.		engine destOffset: origin.		engine clipRect: clipRect.		engine deferred: deferred.		engine].	engine colorTransform: colorTransform.	engine edgeTransform: transform.	^engine! !!BalloonCanvas methodsFor: 'transforming' stamp: 'ar 12/30/1998 10:47'!preserveStateDuring: aBlock	| state result |	state _ BalloonState new.	state transform: transform.	state colorTransform: colorTransform.	state aaLevel: self aaLevel.	result _ aBlock value: self.	transform _ state transform.	colorTransform _ state colorTransform.	self aaLevel: state aaLevel.	^result! !!BalloonEngine methodsFor: 'initialize' stamp: 'ar 12/30/1998 11:24'!initialize	externals _ OrderedCollection new: 100.	span _ Bitmap new: 2048.	bitBlt _ nil.	self bitBlt: ((BitBlt toForm: Display) destRect: Display boundingBox; yourself).	forms _ #().	deferred _ false.! !!BalloonEngine methodsFor: 'accessing' stamp: 'ar 12/30/1998 11:24'!deferred	^deferred! !!BalloonEngine methodsFor: 'accessing' stamp: 'ar 12/30/1998 11:24'!deferred: aBoolean	deferred _ aBoolean.! !!BalloonState methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:47'!aaLevel	^aaLevel! !!BalloonState methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:47'!aaLevel: aNumber	aaLevel _ aNumber! !!BalloonState methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:42'!colorTransform	^colorTransform! !!BalloonState methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:42'!colorTransform: aColorTransform	colorTransform _ aColorTransform! !!BalloonState methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:41'!transform	^transform! !!BalloonState methodsFor: 'accessing' stamp: 'ar 12/30/1998 10:42'!transform: aMatrixTransform	transform _ aMatrixTransform! !!MatrixTransformMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 11:00'!canvasForSubmorphs: canvasForMe	"Note: canvasForMe is a BalloonCanvas and 	the state of it can be modified in this method"	^canvasForMe transformBy: self transform! !!MatrixTransformMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 10:59'!fullDrawOn: aCanvas	| canvasForSubmorphs |	self visible ifFalse: [^ self].	(aCanvas isVisible: self fullBounds) ifFalse:[^ self].	(aCanvas isVisible: bounds) ifTrue:[self drawOn: aCanvas].	aCanvas asBalloonCanvas preserveStateDuring:[:balloonCanvas|		canvasForSubmorphs _ self canvasForSubmorphs: balloonCanvas.		submorphs reverseDo:  "Display submorphs back to front"			[:m | m fullDrawOn: canvasForSubmorphs].  	].! !!FlashMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 11:02'!canvasForSubmorphs: canvasForMe	"Note: canvasForMe is a BalloonCanvas and 	the state of it can be modified in this method"	| canvas aaLevel |	canvas _ (super canvasForSubmorphs: canvasForMe).	colorTransform ifNotNil:[canvas _ canvas colorTransformBy: colorTransform].	aaLevel _ self defaultAALevel.	aaLevel isNil		ifTrue:[^canvas]		ifFalse:[^canvas aaLevel: aaLevel]! !!FlashButtonMorph reorganize!('initialize' defaultLook: loadInitialFrame overLook: pressLook: sensitiveLook:)('accessing' addSound:forState: ownerSprite trackAsMenu:)('event handling' executeActions: executeSounds: handlesMouseDown: handlesMouseOver: handlesMouseOverDragging: mouseDown: mouseEnter: mouseLeave: mouseMove: mouseUp: on:sendAll: trumpsMouseDown:)('geometry' containsPoint: lookEnable:disable:)('classification' isFlashButton isMouseSensitive)('balloon help' analyzeActionsForBalloonHelp:)('printing' printOn:)!!FlashShapeMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 10:47'!drawOn: aCanvas 	"Display the receiver."	| aaLevel |	shape ifNil:[^aCanvas frameRectangle: self bounds color: Color black.].	aCanvas asBalloonCanvas preserveStateDuring:[:balloonCanvas|		balloonCanvas transformBy: self transform.		aaLevel _ self defaultAALevel.		aaLevel ifNotNil:[balloonCanvas aaLevel: aaLevel].		balloonCanvas drawCompressedShape: shape.	].! !!FlashSpriteMorph reorganize!('initialize' initialize)('accessing' addActions:atFrame: addLabel:atFrame: addSound:at: frameNumber frameNumber: loadedFrames loadedFrames: loopFrames loopFrames: maxFrames maxFrames:)('stepping' startPlaying step stepBackward stepForward stepTime stepTime: stepToFrame: stopPlaying wantsSteps)('classification' isFlashSprite isMouseSensitive)('change reporting' invalidRect:)('actions' actionPlay actionStop actionTarget: executeActionsAt: getURL:window: gotoFrame: gotoLabel: gotoNextFrame gotoPrevFrame isFrameLoaded:elseSkip: stopSounds toggleQuality)('private' getWebBrowser)!!FlashSpriteMorph methodsFor: 'stepping' stamp: 'ar 12/30/1998 13:06'!stepTime	^stepTime // 2! !!FlashPlayerMorph methodsFor: 'initialize' stamp: 'ar 12/30/1998 13:26'!initialize	super initialize.	color _ Color white.	self loopFrames: true.	localBounds _ bounds.	activationKeys _ #().	activeMorphs _ SortedCollection new: 50.	activeMorphs sortBlock:[:m1 :m2| m1 depth > m2 depth].	progressValue _ ValueHolder new.	progressValue contents: 0.0.	self defaultAALevel: 2.	self deferred: true.! !!FlashPlayerMorph methodsFor: 'accessing' stamp: 'ar 12/30/1998 11:13'!deferred	^self hasProperty:#deferred! !!FlashPlayerMorph methodsFor: 'accessing' stamp: 'ar 12/30/1998 11:14'!deferred: aBoolean	aBoolean 		ifTrue:[self setProperty: #deferred toValue: true]		ifFalse:[self removeProperty: #deferred]! !!FlashPlayerMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 11:30'!canvasForSubmorphs: canvasForMe	^(canvasForMe asBalloonCanvas)		transformBy: self transform; 		aaLevel: (self defaultAALevel ifNil:[1]);		deferred: self deferred! !!FlashPlayerMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 11:06'!fullDrawOn: aCanvas	"Overridden to only the draw the currently active morphs"	| canvasForSubmorphs |	self visible ifFalse: [^ self].	(aCanvas isVisible: self fullBounds) ifFalse:		[^ self].	(aCanvas isVisible: bounds) ifTrue:		[self drawOn: aCanvas].	(aCanvas copyClipRect: self bounds) 		asBalloonCanvas preserveStateDuring:[:balloonCanvas|			canvasForSubmorphs _ self canvasForSubmorphs: balloonCanvas.			activeMorphs reverseDo:  "Display submorphs back to front"				[:m | m fullDrawOn: canvasForSubmorphs].			canvasForSubmorphs deferred ifTrue:[canvasForSubmorphs flush].		].! !!FlashPlayerMorph methodsFor: 'menu' stamp: 'ar 12/30/1998 13:26'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	"aCustomMenu add:'Toggle deferring' action: #toggleDeferred."	"aCustomMenu addLine.	aCustomMenu add: 'make controls' action: #makeControls.	aCustomMenu addLine.	aCustomMenu add: 'Low Quality' action: #drawFastest.	aCustomMenu add: 'Med Quality' action: #drawMedium.	aCustomMenu add: 'High Quality' action: #drawNicest."	"aCustomMenu add: 'make slider' action: #makeSlider."	aCustomMenu addLine.! !!FlashPlayerMorph methodsFor: 'menu' stamp: 'ar 12/30/1998 11:33'!toggleDeferred	self deferred: self deferred not.	self changed.! !!TTSampleFontMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 10:48'!drawCharactersOn: aCanvas	| glyph origin r offset cy m |	0 to: 255 do:[:i|		glyph _ font at: i.		origin _ font bounds extent * ((i \\ 16) @ (i // 16)).		r _ origin extent: font bounds extent.		offset _ r center - glyph bounds center.		cy _ glyph bounds center y.		m _ MatrixTransform2x3 withOffset: 0@cy.		m _ m composedWithLocal: (MatrixTransform2x3 withScale: 1@-1).		m _ m composedWithLocal: (MatrixTransform2x3 withOffset: 0@cy negated).		m _ m composedWithGlobal: (MatrixTransform2x3 withOffset: offset).		aCanvas asBalloonCanvas preserveStateDuring:[:balloonCanvas|			balloonCanvas transformBy: m.			balloonCanvas drawGeneralBezierShape: glyph contours					color: color					borderWidth: 1					borderColor: Color black.		].	].! !!TTSampleFontMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 10:49'!drawOn: aCanvas	| origin extent offset |	(font isNil) 		ifTrue:[^aCanvas frameRectangle: bounds color: Color black].	origin _ self position asIntegerPoint.	extent _ self extent asIntegerPoint.	0 to: 16 do:[:i|		offset _ (extent x * i // 16) @ (extent y * i // 16).		aCanvas line: origin x @ (origin y + offset y) 				to: (origin x + extent x) @ (origin y + offset y)				width: borderWidth color: borderColor.		aCanvas line: (origin x + offset x) @ origin y 				to: (origin x + offset x) @ (origin y + extent y)				width: borderWidth color: borderColor.	].	aCanvas asBalloonCanvas preserveStateDuring:[:balloonCanvas|		balloonCanvas transformBy: self transform.		balloonCanvas aaLevel: self smoothing.		self drawCharactersOn: balloonCanvas.	].! !!TTSampleStringMorph methodsFor: 'drawing' stamp: 'ar 12/30/1998 10:51'!drawOn: aCanvas	| xStart glyph |	(font isNil or:[string isNil or:[string isEmpty]]) 		ifTrue:[^aCanvas frameRectangle: bounds color: Color black].	xStart _ 0.	aCanvas asBalloonCanvas preserveStateDuring:[:balloonCanvas|		balloonCanvas transformBy: self transform.		balloonCanvas aaLevel: self smoothing.		string do:[:char|			glyph _ font at: char.			balloonCanvas preserveStateDuring:[:subCanvas|				subCanvas transformBy: (MatrixTransform2x3 withOffset: xStart@0).				subCanvas 					drawGeneralBezierShape: glyph contours					color: color 					borderWidth: borderWidth 					borderColor: borderColor].			xStart _ xStart + glyph advanceWidth.		].	].! !BalloonCanvas removeSelector: #colorTransformBy:while:!BalloonCanvas removeSelector: #copyTransform:!BalloonCanvas removeSelector: #copyColorTransform:!BalloonCanvas removeSelector: #transformBy:while:!BalloonCanvas removeSelector: #copyAALevel:!FlashMorph removeSelector: #fullDrawOn:!FlashPlayerMorph removeSelector: #drawNicest!FlashPlayerMorph removeSelector: #drawFastest!FlashPlayerMorph removeSelector: #drawMedium!FlashPlayerMorph removeSelector: #aaLevel!"Postscript:Turn on deferred rendering for all currently open flash players."FlashPlayerMorph allInstancesDo:[:player| player deferred: true].!