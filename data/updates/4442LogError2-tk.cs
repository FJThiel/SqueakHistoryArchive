'From Squeak3.2alpha of 4 October 2001 [latest update: #4441] on 19 October 2001 at 5:42:38 pm'!"Change Set:		LogError2-tkDate:			19 October 2001Author:			Ted KaehlerLimit the length of each object printed in an error report."!!Object methodsFor: 'printing' stamp: 'tk 10/19/2001 11:18'!longPrintOn: aStream limitedTo: sizeLimit indent: indent	"Append to the argument, aStream, the names and values of all of the receiver's instance variables.  Limit is the length limit for each inst var."	self class allInstVarNames doWithIndex:		[:title :index |		indent timesRepeat: [aStream tab].		aStream nextPutAll: title;		 nextPut: $:;		 space;		 tab;		 nextPutAll: 			((self instVarAt: index) printStringLimitedTo: (sizeLimit -3 -title size max: 1));		 cr]! !!ContextPart methodsFor: 'debugger access' stamp: 'tk 10/19/2001 09:52'!errorReportOn: strm	"Write a detailed error report on the stack (above me) on a stream.  For both the error file, and emailing a bug report.  Suppress any errors while getting printStrings.  Limit the length."	| cnt aContext startPos | 	strm print: Date today; space; print: Time now; cr.	strm cr.	strm nextPutAll: 'VM: ';		nextPutAll: Smalltalk platformName asString;		nextPutAll: ' - ';		nextPutAll: Smalltalk vmVersion asString;		cr.	strm nextPutAll: 'Image: ';		nextPutAll: Smalltalk version asString;		nextPutAll: ' [';		nextPutAll: Smalltalk lastUpdateString asString;		nextPutAll: ']';		cr.	strm cr.	"Note: The following is an open-coded version of ContextPart>>stackOfSize: since this method may be called during a low space condition and we might run out of space for allocating the full stack."	cnt _ 0.  startPos _ strm position.	aContext _ self.	[aContext == nil] whileFalse: [		(cnt _ cnt + 1) < 5 			ifTrue: [aContext printDetails: strm.	"variable values"				strm cr]			ifFalse: [				cnt = 5 ifTrue: [strm nextPutAll: '--- The rest of the stack ---'; cr].				strm print: aContext; cr].	"just class>>selector"			strm position > (startPos+4000) ifTrue: [strm nextPutAll: '...etc...'.			^ self]. 	"exit early"		cnt > 60 ifTrue: [strm nextPutAll: '-- and more not shown --'.  ^ self].		aContext _ aContext sender].! !!ContextPart methodsFor: 'debugger access' stamp: 'tk 10/19/2001 10:20'!tempsAndValuesLimitedTo: sizeLimit indent: indent	"Return a string of the temporary variabls and their current values"	| aStream |	aStream _ WriteStream on: (String new: 100).	self tempNames		doWithIndex: [:title :index |			indent timesRepeat: [aStream tab].			aStream nextPutAll: title; nextPut: $:; space; tab.			aStream nextPutAll: 				((self tempAt: index) printStringLimitedTo: (sizeLimit -3 -title size max: 1)).			aStream cr].	^aStream contents! !!ContextPart methodsFor: 'printing' stamp: 'tk 10/19/2001 11:24'!printDetails: strm	"Put my class>>selector and arguments and temporaries on the stream.  Protect against errors during printing."	| str |	self printOn: strm.  	strm cr; tab; nextPutAll: 'Arguments and temporary variables: '; cr.	str _ [self tempsAndValuesLimitedTo: 80 indent: 2] ifError: [:err :rcvr | 						'<<error during printing>>'].	strm nextPutAll: str.	strm peekLast == Character cr ifFalse: [strm cr].! !!MethodContext methodsFor: 'printing' stamp: 'tk 10/19/2001 11:34'!printDetails: strm	"Put my class>>selector and instance variables and arguments and temporaries on the stream.  Protect against errors during printing."	| pe str pos |	self printOn: strm.	strm cr.	strm tab; nextPutAll: 'Receiver: '.	pe _ '<<error during printing>>'.	strm nextPutAll: ([receiver printStringLimitedTo: 90] ifError: [:err :rcvr | pe]).	strm cr; tab; nextPutAll: 'Arguments and temporary variables: '; cr.	str _ [(self tempsAndValuesLimitedTo: 80 indent: 2) 				padded: #right to: 1 with: $x] ifError: [:err :rcvr | pe].	strm nextPutAll: (str allButLast).	strm cr; tab; nextPutAll: 'Receiver''s instance variables: '; cr.	pos _ strm position.	[receiver longPrintOn: strm limitedTo: 80 indent: 2] ifError: [:err :rcvr | 				strm nextPutAll: pe].	pos = strm position ifTrue: ["normal printString for an Array (it has no inst vars)"		strm nextPutAll: ([receiver printStringLimitedTo: 90] ifError: [:err :rcvr | pe])].	strm peekLast == Character cr ifFalse: [strm cr].! !!WriteStream methodsFor: 'character writing' stamp: 'tk 10/19/2001 11:12'!peekLast	"Return that item just put at the end of the stream"	^ position > 0 		ifTrue: [collection at: position]		ifFalse: [nil]! !!StandardFileStream methodsFor: 'read, write, position' stamp: 'tk 10/19/2001 11:29'!peekLast	"Return that item just put at the end of the stream"	^ buffer1 size > 0 		ifTrue: [buffer1 last]		ifFalse: [nil]! !