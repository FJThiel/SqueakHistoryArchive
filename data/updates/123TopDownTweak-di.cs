'From Squeak 2.0 of May 22, 1998 on 25 June 1998 at 1:15:08 pm'!"Change Set:		TopDownTweakDate:			24 June 1998Author:			Dan IngallsReworks the top-level Morphic display strategy to reduce repaint rectangles by any occlusions in the (fairly common) case that the reduced region is another simple rectangle.  This results in a significant improvement for large overlapping windows.  It is most noticeable when picking up a window to drag when there are a lot of windows underneath.The strategy is NOT generalized to all levels because the management overhead seems inappropriate for many complex morphic structures.The old protocol	<Morph> drawOnFills: <Rectangle>		^ true iff I am opaque throughout the rectanglehas been supplanted by	<Morph> areasRemainingToFill: <Rectangle>		^ the rectangle areasOutside: my opaque regionAlso fixes a performance bug in expanding collapsed windows, with dramatic results.Also makes BookPageThumbnailMorphs keep their pages compressed to save space."!!Morph methodsFor: 'drawing' stamp: 'di 6/24/1998 14:10'!areasRemainingToFill: aRectangle	"May be overridden by any subclasses with opaque regions"	^ Array with: aRectangle! !!BookPageThumbnailMorph methodsFor: 'all' stamp: 'di 6/25/1998 10:10'!computeThumbnail	| f scale |	f _ page imageForm.	page fullReleaseCachedState.	scale _ self height / f height.  "keep height invariant"	self form: (f magnify: f boundingBox by: scale@scale smoothing: 2).! !!BorderedMorph methodsFor: 'drawing' stamp: 'di 6/24/1998 14:25'!areasRemainingToFill: aRectangle	color isTransparent ifTrue: [^ Array with: aRectangle].	borderWidth = 0		ifTrue: [^ aRectangle areasOutside: self bounds]		ifFalse: [(borderColor isColor and: [borderColor isTransparent])					ifTrue: [^ aRectangle areasOutside: self innerBounds]					ifFalse: [^ aRectangle areasOutside: self bounds]]! !!EllipseMorph methodsFor: 'all' stamp: 'di 6/24/1998 14:27'!areasRemainingToFill: aRectangle	"Could be improved by quick check of inner rectangle"	^ Array with: aRectangle! !!PolygonMorph methodsFor: 'drawing' stamp: 'di 6/24/1998 14:36'!areasRemainingToFill: aRectangle	"Could be improved by quick check of inner rectangle"	^ Array with: aRectangle! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'di 6/24/1998 21:30'!collapseOrExpand	isCollapsed	ifTrue:		["Expand -- restore panes to morphics structure"		isCollapsed _ false.		super bounds: fullFrame.		paneMorphs reverseDo: [:m | self addMorph: m].		self activate "-- mainly for findWindow"]	ifFalse:		["Collapse -- remove panes from morphics structure"		isCollapsed _ true.		paneMorphs do: [:m | m delete; releaseCachedState].		collapsedFrame			ifNil:	[self extent: (label width + 50) @ (self labelHeight + 2).					self position: (RealEstateAgent assignCollapsePointFor: self)]			ifNotNil: [super bounds: collapsedFrame]]! !!SystemWindow methodsFor: 'top window' stamp: 'di 6/24/1998 22:27'!activate	"Bring me to the front and make me able to respond to mouse and keyboard"	| oldTop |	oldTop _ TopWindow.	TopWindow _ self.	oldTop ifNotNil: [oldTop passivate].	owner firstSubmorph == self ifFalse: [owner addMorphFront: self].	self submorphsDo: [:m | m unlock].	self setStripeColorsFrom: self paneColor.	self removeHandles; addHandles.	self isCollapsed ifFalse: [model modelWakeUp]! !!WorldMorph methodsFor: 'drawing' stamp: 'di 6/25/1998 13:14'!drawInvalidAreasOn: aCanvas 	"Redraw the damaged areas of the given canvas and clear the damage list. Return a collection of the areas that were redrawn."	| rectList c i n mm morphs rects rectToFill remnants rect |	rectList _ damageRecorder invalidRectsFullBounds: (0@0 extent: viewBox extent).	damageRecorder reset.	n _ self submorphs size.	morphs _ OrderedCollection new: n*2.	rects _ OrderedCollection new: n*2.	rectList do: [:r |		true		ifTrue:			["Experimental top-down drawing --			Traverses top to bottom, stopping if the entire area is filled.			If only a single rectangle remains, then continue with the reduced rectangle."			rectToFill _ r.			i _ 1.			[rectToFill == nil or: [i > n]] whileFalse:				[mm _ submorphs at: i.				(mm fullBounds intersects: r) ifTrue:					[morphs addLast: mm.  rects addLast: rectToFill.					remnants _ mm areasRemainingToFill: rectToFill.					remnants size = 1 ifTrue: [rectToFill _ remnants first].					remnants size = 0 ifTrue: [rectToFill _ nil]].				i _ i+1].			"Now paint from bottom to top, but using the reduced rectangles."			rectToFill ifNotNil:				[c _ aCanvas copyClipRect: rectToFill.				c fillColor: color].			[morphs isEmpty] whileFalse:				[(rect _ rects removeLast) == rectToFill ifFalse:					[c _ aCanvas copyClipRect: (rectToFill _ rect)].				morphs removeLast fullDrawOn: c].			morphs reset.  rects reset]		ifFalse: [c _ aCanvas copyClipRect: r.				c fillColor: color.				submorphs reverseDo: [:m | m fullDrawOn: c]]		].	^ rectList! !Morph removeSelector: #topDownDrawOn:!Morph removeSelector: #drawOnFills:!BorderedMorph removeSelector: #drawOnFills:!BorderedMorph removeSelector: #isOpaque!EllipseMorph removeSelector: #drawOnFills:!PolygonMorph removeSelector: #drawOnFills:!TransformMorph removeSelector: #topDownDrawOn:!