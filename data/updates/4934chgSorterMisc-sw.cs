'From Squeak3.3alpha of 18 January 2002 [latest update: #4930] on 27 July 2002 at 4:26:12 pm'!"Change Set:		chgSorterMisc-swDate:			27 July 2002Author:			Scott Wallace¥ Adds check-for-uncommented classes to the checks section of the shifted change-sorter menu.¥ Adds cmd-hypen as kbd shortcut for subtract-other-side in the dual change sorter.¥ Adds ClassListBrowser, a browser variant that shows the code for an arbitary list of classes.   See class comment or browse class-side code for examples"!HierarchyBrowser subclass:  #ClassListBrowser	instanceVariableNames: 'defaultTitle '	classVariableNames: ''	poolDictionaries: '' 	category: 'Tools-Browser'	module: #(Squeak Development Browser)!!ClassListBrowser commentStamp: 'sw 7/27/2002 16:06' prior: 0!A ClassListBrowser displays the code for an arbitrary list of classes.ClassListBrowser example1.  "all classes that have the string 'Pluggable' in their names"ClassListBrowser example2.  "all classes whose names start with the letter S"ClassListBrowser example3.  "all variable classes"ClassListBrowser example4.  "all classes with more than 100 methods"ClassListBrowser example5.  "all classes that lack class comments"ClassListBrowser example6.  "all classes that have class instance variables"ClassListBrowser new initForClassesNamed: #(Browser Boolean) title: 'Browser and Boolean!!'.!!ClassListBrowser methodsFor: 'initialization' stamp: 'sw 7/18/2002 22:43'!initForClassesNamed: nameList title: aTitle	"Initialize the receiver for the class-name-list and title provided"	self systemOrganizer: SystemOrganization.	metaClassIndicated _ false.	defaultTitle _ aTitle.	classList _ nameList copy.	self class openBrowserView:  (self openSystemCatEditString: nil)		label: aTitle	"ClassListBrowser new initForClassesNamed: #(Browser CategoryViewer) title: 'Frogs'"! !!ClassListBrowser methodsFor: 'title' stamp: 'sw 7/18/2002 22:42'!defaultTitle: aTitle	"Set the browser's default title"	defaultTitle _ aTitle! !!ClassListBrowser methodsFor: 'title' stamp: 'sw 7/18/2002 22:43'!labelString	"Answer the label strilng to use on the browser"	^ defaultTitle ifNil: [super labelString]! !!ClassListBrowser class methodsFor: 'examples' stamp: 'sw 7/27/2002 16:01'!example1	"Put up a ClassListBrowser that shows all classes that have the string 'Pluggable' in their names"	self browseClassesSatisfying: [:cl | cl name includesSubString: 'Pluggable'] title: 'Pluggables'"ClassListBrowser example1"	! !!ClassListBrowser class methodsFor: 'examples' stamp: 'sw 7/27/2002 14:34'!example2	"Put up a ClassListBrowser that shows all classes whose names start with the letter S"	self new initForClassesNamed: (Smalltalk allClasses collect: [:c | c name] thenSelect: [:aName | aName first == $S]) title: 'All classes starting with S'"ClassListBrowser example2"	! !!ClassListBrowser class methodsFor: 'examples' stamp: 'sw 7/27/2002 16:03'!example3	"Put up a ClassListBrowser that shows all Variable classes"	self browseClassesSatisfying:  [:c | c isVariable] title: 'All Variable classes'"ClassListBrowser example3"	! !!ClassListBrowser class methodsFor: 'examples' stamp: 'sw 7/27/2002 16:04'!example4	"Put up a ClassListBrowser that shows all classes implementing more than 100 methods"	self browseClassesSatisfying:		[:c | (c selectors size + c class selectors size) > 100] title: 'Classes with more than 100 methods'"ClassListBrowser example4"	! !!ClassListBrowser class methodsFor: 'examples' stamp: 'sw 7/27/2002 14:32'!example5	"Put up a ClassListBrowser that shows all classes that lack class comments"	self		browseClassesSatisfying: 			[:c | c organization classComment isEmptyOrNil] 		title: 'Classes lacking class comments'"ClassListBrowser example5"	! !!ClassListBrowser class methodsFor: 'examples' stamp: 'sw 7/27/2002 14:33'!example6	"Put up a ClassListBrowser that shows all classes that have class instance variables"	self		browseClassesSatisfying: 			[:c | c class instVarNames size > 0]		title:			'Classes that define class-side instance variables'"ClassListBrowser example6"! !!ClassListBrowser class methodsFor: 'instance creation' stamp: 'sw 7/27/2002 14:28'!browseClassesSatisfying: classBlock title: aTitle	"Put up a ClassListBrowser showing all classes that satisfy the classBlock."	self new		initForClassesNamed:			(Smalltalk allClasses select:					[:c | (classBlock value: c) == true]				thenCollect:					[:c | c name])		title:			aTitle! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 7/19/2002 20:21'!checkForUncommentedClasses	"Check to see if any classes involved in this change set do not have class comments.  Open up a browser showing all such classes."	| aList |	aList _ self changedClasses		select:			[:aClass | aClass theNonMetaClass organization classComment isEmptyOrNil]		thenCollect:			[:aClass  | aClass theNonMetaClass name].	aList size > 0		ifFalse:			[^ self inform: 'All classes involved in this change set have class comments']		ifTrue:			[ClassListBrowser new initForClassesNamed: aList asSet asSortedArray title: 'Classes in Change Set ', self name, ': classes that lack class comments']! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/17/2002 11:37'!changeSetListKey: aChar from: view	"Respond to a Command key.  I am a model with a listView that has a list of changeSets."	aChar == $b ifTrue: [^ self browseChangeSet].	aChar == $B ifTrue: [^ self openChangeSetBrowser].	aChar == $c ifTrue: [^ self copyAllToOther].	aChar == $D ifTrue: [^ self toggleDiffing]. 	aChar == $f ifTrue: [^ self findCngSet].	aChar == $m ifTrue: [^ self newCurrent].	aChar == $n ifTrue: [^ self newSet].	aChar == $o ifTrue: [^ self fileOut].	aChar == $p ifTrue: [^ self addPreamble].	aChar == $r ifTrue: [^ self rename].	aChar == $s ifTrue: [^ self chooseChangeSetCategory].	aChar == $x ifTrue: [^ self remove].	aChar == $- ifTrue: [^ self subtractOtherSide].	^ self messageListKey: aChar from: view! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/17/2002 11:37'!changeSetMenu: aMenu shifted: isShifted 	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"	isShifted ifTrue: [^ self shiftedChangeSetMenu: aMenu].	Smalltalk isMorphic		ifTrue:			[aMenu title: 'Change Set'.			aMenu addStayUpItemSpecial]		ifFalse:			[aMenu title: 'Change Set:' , myChangeSet name].	aMenu add: 'make changes go to me (m)' action: #newCurrent.	aMenu addLine.	aMenu add: 'new change set... (n)' action: #newSet.	aMenu add: 'find...(f)' action: #findCngSet.	aMenu add: 'show category... (s)' action:  #chooseChangeSetCategory.	aMenu balloonTextForLastItem:'Lets you choose which change sets should be listed in this change sorter'.	aMenu add: 'select change set...' action: #chooseCngSet.	aMenu addLine.	aMenu add: 'rename change set (r)' action: #rename.	aMenu add: 'file out (o)' action: #fileOut.	aMenu add: 'mail to list' action: #mailOut.	aMenu add: 'browse methods (b)' action: #browseChangeSet.	aMenu add: 'browse change set (B)' action: #openChangeSetBrowser.	aMenu addLine.	parent		ifNotNil: 			[aMenu add: 'copy all to other side (c)' action: #copyAllToOther.			aMenu add: 'submerge into other side' action: #submergeIntoOtherSide.			aMenu add: 'subtract other side (-)' action: #subtractOtherSide.			aMenu addLine].	myChangeSet hasPreamble		ifTrue: 			[aMenu add: 'edit preamble (p)' action: #addPreamble.			aMenu add: 'remove preamble' action: #removePreamble]		ifFalse: [aMenu add: 'add preamble (p)' action: #addPreamble].	myChangeSet hasPostscript		ifTrue: 			[aMenu add: 'edit postscript...' action: #editPostscript.			aMenu add: 'remove postscript' action: #removePostscript]		ifFalse: [aMenu add: 'add postscript...' action: #editPostscript].	aMenu addLine.	aMenu add: 'category functions...' action: #offerCategorySubmenu.	aMenu balloonTextForLastItem:'Various commands relating to change-set-categories'.	aMenu addLine.	aMenu add: 'destroy change set (x)' action: #remove.	aMenu addLine.	aMenu add: 'more...' action: #offerShiftedChangeSetMenu.	^ aMenu! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/18/2002 17:58'!checkForUncommentedClasses	"Open a class list browser on classes in the change set that lack class comments"	myChangeSet checkForUncommentedClasses! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/27/2002 16:24'!shiftedChangeSetMenu: aMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	Smalltalk isMorphic ifTrue:		[aMenu title: 'Change set (shifted)'.		aMenu addStayUpItemSpecial].	"CONFLICTS SECTION"	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with change set opposite' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.			aMenu add: 'conflicts with category opposite' action: #methodConflictsWithOppositeCategory.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in ANY change set in the category list on the opposite side of this change sorter, other of course than this change set itself.  (Caution -- this could be VERY slow)'].	aMenu addLine.	"CHECKS SECTION"	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	aMenu add: 'check for uncommented classes' action: #checkForUncommentedClasses.	aMenu balloonTextForLastItem:'Check for classes with code in this changeset which lack class comments'.	Utilities authorInitialsPerSe isEmptyOrNil ifFalse:		[aMenu add: 'check for other authors' action: #checkForAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'.	aMenu add: 'check for any other authors' action: #checkForAnyAlienAuthorship.	aMenu balloonTextForLastItem:'Check this change set for methods any of whose authoring stamps do not start with "', Utilities authorInitials, '"'].	aMenu add: 'check for uncategorized methods' action: #checkForUnclassifiedMethods.	aMenu balloonTextForLastItem:'Check to see if any methods in the selected change set have not yet been assigned to a category.  If any are found, open a browser on them.'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'go to change set''s project' action: #goToChangeSetsProject.	aMenu balloonTextForLastItem: 'If this change set is currently associated with a Project, go to that project right now.'.	aMenu add: 'promote to top of list' action: #promoteToTopChangeSet.	aMenu balloonTextForLastItem:'Make this change set appear first in change-set lists in all change sorters.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'expunge uniclasses' action: #expungeUniclasses.	aMenu balloonTextForLastItem:'Remove from the change set all memory of uniclasses, e.g. classes added on behalf of etoys, fabrik, etc., whose classnames end with a digit.'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'file into new...' action: #fileIntoNewChangeSet.	aMenu balloonTextForLastItem: 'Load a fileout from disk and place its changes into a new change set (seldom needed -- much better to do this from a file-list browser these days.)'.	aMenu add: 'reorder all change sets' action: #reorderChangeSets.	aMenu balloonTextForLastItem:'Applies a standard reordering of all change-sets in the system -- at the bottom will come the sets that come with the release; next will come all the numbered updates; finally, at the top, will come all other change sets'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!ChangeSetBrowser methodsFor: 'menu' stamp: 'sw 7/20/2002 18:33'!shiftedChangeSetMenu: aMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	Smalltalk isMorphic ifTrue:		[aMenu title: 'Change set (shifted)'.		aMenu addStayUpItemSpecial].	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	aMenu addLine.	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	aMenu add: 'check for uncommented classes' action: #checkForUncommentedClasses.	aMenu balloonTextForLastItem:'Check for classes with code in this changeset which lack class comments'.	Utilities authorInitialsPerSe isEmptyOrNil ifFalse:		[aMenu add: 'check for other authors' action: #checkForAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'.		aMenu add: 'check for any other authors' action: #checkForAnyAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods any of whose previous authoring stamps do not start with "', Utilities authorInitials, '"'].	aMenu add: 'check for uncategorized methods' action: #checkForUnclassifiedMethods.	aMenu balloonTextForLastItem:'Check to see if any methods in the selected change set have not yet been assigned to a category.  If any are found, open a browser on them.'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'go to change set''s project' action: #goToChangeSetsProject.	aMenu balloonTextForLastItem: 'If this change set is currently associated with a Project, go to that project right now.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'expunge uniclasses' action: #expungeUniclasses.	aMenu balloonTextForLastItem:'Remove from the change set all memory of uniclasses, e.g. classes added on behalf of etoys, fabrik, etc., whose classnames end with a digit.'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !