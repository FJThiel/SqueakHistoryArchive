'From Squeak3.1alpha of 28 February 2001 [latest update: #4083] on 26 May 2001 at 4:52:17 pm'!"Change Set:		WnldNav-arDate:			26 May 2001Author:			Andreas RaabBetter Wnld navigation."!!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:38'!firstPersonMouseUp: evt	myControls mouseUp: evt.	myControls setCenter: nil.	evt hand needsToBeDrawn ifFalse:[Cursor normal show].! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:31'!handleMouseDown: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self]. "not interested"	anEvent hand removePendingBalloonFor: self.	anEvent hand removePendingHaloFor: self.	anEvent wasHandled: true.	"anEvent controlKeyPressed ifTrue:[^self invokeMetaMenu: anEvent]."	"Make me modal during mouse transitions"	anEvent hand newMouseFocus: self event: anEvent.	anEvent blueButtonChanged ifTrue:[^self blueButtonDown: anEvent].	(self allowsGestureStart: anEvent)		ifTrue: [^ self gestureStart: anEvent].	self mouseDown: anEvent.	anEvent hand removeHaloFromClick: anEvent on: self.	(self handlesMouseStillDown: anEvent) ifTrue:[		self startStepping: #handleMouseStillDown: 			at: Time millisecondClockValue + self mouseStillDownThreshold			arguments: {anEvent copy resetHandlerFields}			stepTime: 1].! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:46'!mouseDown: evt 	"When the user clicks in a camera window, determine which actor the    	         user clicked on and have that actor respond to the event"	| newEvent reactions |	self on: #mouseMove send: #mouseMoveDefault: to: self.	self on: #mouseUp send: #mouseUpDefault: to: self.	(evt redButtonPressed and:[evt anyModifierKeyPressed not]) ifTrue:[		(mode == nil and:[firstPersonControls == true]) ifTrue:[			myControls setCenter: evt position.			myControls mouseDown: evt.			evt hand needsToBeDrawn ifFalse:[Cursor crossHair show].			self on: #mouseMove send: #mouseMoveFirstPersonControl: to: self.			self on: #mouseUp send: #mouseUpFirstPersonControl: to: self.			^self		].		mode == #stroke ifTrue:[			self on: #mouseMove send: #mouseMoveStroke: to: self.			self on: #mouseUp send: #mouseUpStroke: to: self.			^self recordStroke: evt cursorPoint].		newEvent _ self convertEvent: evt.		newEvent ifNil:[^self].		mode == #paint ifTrue:[			newEvent getVertex ifNil:[^self].			self prepareAction: newEvent.			self on: #mouseMove send: #mouseMovePaint: to: self.			self on: #mouseUp send: #mouseUpPaint: to: self.			^self perform: palette action with: newEvent].	] ifFalse:[		newEvent _ self convertEvent: evt.		newEvent ifNil:[^self].	].	newEvent getActor hasActiveTexture		ifTrue: [^ newEvent getActor morphicMouseDown: newEvent].	(evt redButtonPressed or:[evt controlKeyPressed]) ifTrue:[		reactions _ newEvent getActor getReactionsTo: leftMouseDown.		mouseUpButton _ leftMouseUp.	] ifFalse: [evt yellowButtonPressed ifTrue:[ 		reactions _ newEvent getActor getReactionsTo: rightMouseDown.		mouseUpButton _ rightMouseUp.	] ifFalse: [reactions _ nil]].	reactions ifNotNil: [reactions do: [:aReaction | aReaction reactTo: newEvent]].! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:42'!mouseMoveDefault: evt 	| newEvent reactions |	newEvent _ self convertEvent: evt.	newEvent ifNil:[^self].	newEvent getActor hasActiveTexture		ifTrue: [^ newEvent getActor morphicMouseMove: newEvent].	reactions _ newEvent getActor getReactionsTo: mouseMove.	reactions ifNotNil: [reactions do: [:aReaction | aReaction reactTo: newEvent]].! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:41'!mouseMoveFirstPersonControl: evt ! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:41'!mouseMovePaint: evt 	| newEvent |	newEvent _ self convertEvent: evt.	newEvent ifNil:[^self].	newEvent getVertex ifNil:[^self].	evt commandKeyPressed ifTrue:[^self].	newEvent getActor = currentActor ifFalse:[^self].	self prepareAction: newEvent.	^self perform: palette action with: newEvent! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:41'!mouseMoveStroke: evt 	^self recordStroke: evt cursorPoint! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:39'!mouseUpDefault: evt	| newEvent reactions |	newEvent _ self convertEvent: evt.	newEvent ifNil: [^ self].	newEvent getActor hasActiveTexture 		ifTrue: [^ newEvent getActor morphicMouseUp: newEvent].	reactions _ newEvent getActor getReactionsTo: mouseUpButton.	reactions ifNotNil: [reactions do: [:aReaction | aReaction reactTo: newEvent]]! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:39'!mouseUpFirstPersonControl: evt	myControls mouseUp: evt.	myControls setCenter: nil.	evt hand needsToBeDrawn ifFalse:[Cursor normal show].! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:39'!mouseUpPaint: evt	| newEvent |	newEvent _ self convertEvent: evt.	newEvent ifNil: [^ self].	newEvent getVertex ifNil:[^self].	self prepareAction: newEvent.	^ self perform: palette action with: newEvent! !!WonderlandCameraMorph methodsFor: 'event handling' stamp: 'ar 5/26/2001 16:40'!mouseUpStroke: evt	^self createPoohActor! !!WonderlandCameraMorph methodsFor: 'initialization' stamp: 'ar 5/26/2001 15:55'!initialize	super initialize.	lastCursorPoint _ 0 @ 0.	CurrentProjectRefactoring currentAddGuard: self.	"Teddy"	self mode: nil.	self outline: nil.! !WonderlandCameraMorph removeSelector: #controlMouseDown:!WonderlandCameraMorph removeSelector: #mouseMove:!WonderlandCameraMorph removeSelector: #mouseUp:!