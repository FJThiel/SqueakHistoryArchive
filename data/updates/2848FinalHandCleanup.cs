'From Squeak2.9alpha of 13 June 2000 [latest update: #2895] on 26 October 2000 at 1:47:23 am'!"Change Set:		FinalHandCleanupDate:			26 October 2000Author:			Andreas RaabThe final hand cleanup. Removes some more methods an obsolete inst var and fixes some not so nice code. Also removes compatibility code based on #isMorphicEvent. Finally removes the classes MorphicEvent and MorphicSoundEvent"!Morph subclass: #HandMorph	instanceVariableNames: 'mouseFocus keyboardFocus eventListeners mouseListeners keyboardListeners mouseClickState mouseOverHandler lastMouseEvent lastEvent targetOffset damageRecorder cacheCanvas cachedCanvasHasHoles temporaryCursor temporaryCursorOffset hasChanged savedPatch userInitials lastEventBuffer '	classVariableNames: 'DoubleClickTime EventStats NewEventRules NormalCursor PasteBuffer ShowEvents '	poolDictionaries: 'EventSensorConstants '	category: 'Morphic-Kernel'!!EventRecorderMorph methodsFor: 'fileIn/Out' stamp: 'ar 10/26/2000 01:04'!convertV0Tape: anArray	"Convert the tape into the new format"	| lastKey evt |	lastKey _ 0.	^anArray collect:[:assn| 		evt _ assn value.		evt setTimeStamp: (lastKey _ lastKey + assn key).		evt]! !!HandMorph methodsFor: 'initialization' stamp: 'ar 10/26/2000 01:33'!initialize	super initialize.	self initForEvents.	keyboardFocus _ nil.	mouseFocus _ nil.	bounds _ 0@0 extent: Cursor normal extent.	userInitials _ ''.	damageRecorder _ DamageRecorder new.	cachedCanvasHasHoles _ false.	temporaryCursor _ temporaryCursorOffset _ nil.	self initForEvents.! !!HandMorph methodsFor: 'event handling' stamp: 'ar 10/26/2000 01:34'!handleEvent: anEvent	| evt ofs |	owner ifNil:[^self].	evt _ anEvent.	EventStats ifNil:[EventStats _ IdentityDictionary new].	EventStats at: #count put: (EventStats at: #count ifAbsent:[0]) + 1.	EventStats at: evt type put: (EventStats at: evt type ifAbsent:[0]) + 1.	evt isMouseOver ifTrue:[^self sendEvent: evt focus: self mouseFocus].ShowEvents == true ifTrue:[	ofs _ (owner hands indexOf: self) - 1 * 60.	evt printString displayAt: (0@ofs) + (evt isKeyboard ifTrue:[0@30] ifFalse:[0@0]).	self keyboardFocus printString displayAt: (0@ofs)+(0@45).].	"Notify listeners"	self sendListenEvent: evt to: self eventListeners.	evt isKeyboard ifTrue:[		self sendListenEvent: evt to: self keyboardListeners.		self sendEvent: evt focus: self keyboardFocus.		^self mouseOverHandler processMouseOver: lastMouseEvent].	evt isMouse ifTrue:[		self sendListenEvent: evt to: self mouseListeners.		lastMouseEvent _ evt].	"Check for pending drag or double click operations."	mouseClickState ifNotNil:[		(mouseClickState handleEvent: evt from: self) ifFalse:[			"Possibly dispatched #click: or something and will not re-establish otherwise"			^self mouseOverHandler processMouseOver: lastMouseEvent]].	evt isMove ifTrue:[		self position: evt position.		self sendEvent: evt focus: self mouseFocus.	] ifFalse:[		"Issue a synthetic move event if we're not at the position of the event"		(evt position = self position) ifFalse:[self moveToEvent: evt].		"Drop submorphs on button events"		(self hasSubmorphs) 			ifTrue:[self dropMorphs: evt]			ifFalse:[self sendEvent: evt focus: self mouseFocus].	].	ShowEvents == true ifTrue:[self mouseFocus printString displayAt: (0@ofs) + (0@15)].	self mouseOverHandler processMouseOver: lastMouseEvent.! !!HandMorph methodsFor: 'focus handling' stamp: 'ar 10/26/2000 01:30'!keyboardFocus: aMorphOrNil	keyboardFocus _ aMorphOrNil! !!HandMorph methodsFor: 'focus handling' stamp: 'ar 10/26/2000 01:30'!mouseFocus: aMorphOrNil	mouseFocus _ aMorphOrNil! !!HandMorph methodsFor: 'focus handling' stamp: 'ar 10/24/2000 20:07'!newKeyboardFocus: aMorphOrNil	"Make the given morph the new keyboard focus, canceling the previous keyboard focus if any. If the argument is nil, the current keyboard focus is cancelled."	| oldFocus |	oldFocus _ self keyboardFocus.	self keyboardFocus: aMorphOrNil.	oldFocus ifNotNil: [oldFocus == aMorphOrNil ifFalse: [oldFocus keyboardFocusChange: false]].	aMorphOrNil ifNotNil: [aMorphOrNil keyboardFocusChange: true].! !!HandMorph methodsFor: 'focus handling' stamp: 'ar 10/26/2000 01:32'!newMouseFocus: aMorphOrNil	"Make the given morph the new mouse focus, canceling the previous mouse focus if any. If the argument is nil, the current mouse focus is cancelled."	self mouseFocus: aMorphOrNil.! !!HandMorph methodsFor: 'focus handling' stamp: 'ar 10/26/2000 01:31'!releaseKeyboardFocus: aMorph	"If the given morph had the keyboard focus before, release it"	self keyboardFocus == aMorph ifTrue:[self releaseKeyboardFocus].! !!HandMorph methodsFor: 'grabbing/dropping' stamp: 'ar 10/26/2000 01:41'!grabMorph: aMorph from: formerOwner	"Grab the given morph (i.e., add it to this hand and remove it from its current owner) without changing its position. This is used to pick up a morph under the hand's current position, versus attachMorph: which is used to pick up a morph that may not be near this hand."	| grabbed offset targetPoint grabTransform fullTransform |	self releaseMouseFocus. "Break focus"	grabbed _ aMorph.	"Compute the transform to apply to the grabbed morph"	grabTransform _ formerOwner 			ifNil:[IdentityTransform new] 			ifNotNil:[formerOwner grabTransform].	"Compute the full transform for the grabbed morph"	fullTransform _ formerOwner 			ifNil:[IdentityTransform new] 			ifNotNil:[formerOwner transformFrom: owner].	"targetPoint is point in aMorphs reference frame"	targetPoint _ fullTransform globalPointToLocal: self position.	"but current position will be determined by grabTransform, so compute offset"	offset _ targetPoint - (grabTransform globalPointToLocal: self position).	"apply the transform that should be used after grabbing"	grabbed _ grabbed transformedBy: grabTransform.	"offset target to compensate for differences in transforms"	grabbed position: grabbed position - offset asIntegerPoint.	"And compute distance from hand's position"	targetOffset _ grabbed position - self position.	self addMorphBack: grabbed.! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:43'!addEventListener: anObject	"Make anObject a listener for all events. All events will be reported to the object."	self eventListeners: (self addListener: anObject to: self eventListeners)! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:42'!addKeyboardListener: anObject	"Make anObject a listener for keyboard events. All keyboard events will be reported to the object."	self keyboardListeners: (self addListener: anObject to: self keyboardListeners)! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:40'!addListener: anObject to: aListenerGroup	"Add anObject to the given listener group. Return the new group."	| listeners |	listeners _ aListenerGroup.	(listeners notNil and:[listeners includes: anObject]) ifFalse:[		listeners			ifNil:[listeners _ WeakArray with: anObject]			ifNotNil:[listeners _ listeners copyWith: anObject]].	listeners _ listeners copyWithout: nil. "obsolete entries"	^listeners! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:42'!addMouseListener: anObject	"Make anObject a listener for mouse events. All mouse events will be reported to the object."	self mouseListeners: (self addListener: anObject to: self mouseListeners)! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/26/2000 01:27'!eventListeners	^eventListeners! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/26/2000 01:27'!eventListeners: anArrayOrNil	eventListeners _ anArrayOrNil! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/26/2000 01:28'!keyboardListeners	^keyboardListeners! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/26/2000 01:27'!keyboardListeners: anArrayOrNil	keyboardListeners _ anArrayOrNil! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/26/2000 01:28'!mouseListeners	^mouseListeners! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/26/2000 01:27'!mouseListeners: anArrayOrNil	mouseListeners _ anArrayOrNil! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:41'!removeEventListener: anObject	"Remove anObject from the current event listeners."	self eventListeners: (self removeListener: anObject from: self eventListeners).! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:41'!removeKeyboardListener: anObject	"Remove anObject from the current keyboard listeners."	self keyboardListeners: (self removeListener: anObject from: self keyboardListeners).! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:41'!removeListener: anObject from: aListenerGroup	"Remove anObject from the given listener group. Return the new group."	| listeners |	aListenerGroup ifNil:[^nil].	listeners _ aListenerGroup.	listeners _ listeners copyWithout: anObject.	listeners _ listeners copyWithout: nil. "obsolete entries"	listeners size = 0 ifTrue:[listeners _ nil].	^listeners! !!HandMorph methodsFor: 'listeners' stamp: 'ar 10/24/2000 20:41'!removeMouseListener: anObject	"Remove anObject from the current mouse listeners."	self mouseListeners: (self removeListener: anObject from: self mouseListeners).! !!HandMorph methodsFor: 'private events' stamp: 'ar 10/26/2000 01:43'!sendListenEvent: anEvent to: listenerGroup	"Send the event to the given group of listeners"	listenerGroup ifNil:[^self].	listenerGroup do:[:listener| 		listener ifNotNil:[listener handleListenEvent: anEvent copy]].! !!MorphicUnknownEvent methodsFor: 'printing' stamp: 'ar 10/26/2000 01:19'!storeOn: aStream	aStream nextPutAll: 'unknown'.	aStream space.	self timeStamp storeOn: aStream.	aStream space.	{type. argument} storeOn: aStream.! !!MorphicUnknownEvent methodsFor: 'private' stamp: 'ar 10/26/2000 01:20'!type: eventType readFrom: aStream	| typeAndArg |	timeStamp _ Integer readFrom: aStream.	aStream skip: 1.	typeAndArg _ Object readFrom: aStream.	type _ typeAndArg first.	argument _ typeAndArg last.! !!RemoteHandMorph methodsFor: 'event handling' stamp: 'ar 10/26/2000 01:12'!handleListenEvent: anEvent	"Transmit the event to interested listeners"	| currentExtent |	currentExtent _ self worldBounds extent.	self lastWorldExtent ~= currentExtent ifTrue: [		self transmitEvent: (MorphicUnknownEvent new setType: #worldExtent argument: currentExtent).		self lastWorldExtent: currentExtent].	self transmitEvent: anEvent.! !RemoteHandMorph removeSelector: #connectRemoteUser!RemoteHandMorph removeSelector: #disconnectAllRemoteUsers!RemoteHandMorph removeSelector: #disconnectRemoteUser!RemoteControlledHandMorph removeSelector: #testEvent:ifQuickClick:ifMoved:!Morph subclass: #HandMorph	instanceVariableNames: 'mouseFocus keyboardFocus eventListeners mouseListeners keyboardListeners mouseClickState mouseOverHandler lastMouseEvent targetOffset damageRecorder cacheCanvas cachedCanvasHasHoles temporaryCursor temporaryCursorOffset hasChanged savedPatch userInitials lastEventBuffer '	classVariableNames: 'DoubleClickTime EventStats NewEventRules NormalCursor PasteBuffer ShowEvents '	poolDictionaries: 'EventSensorConstants '	category: 'Morphic-Kernel'!Smalltalk removeClassNamed: #MorphicEvent!Smalltalk removeClassNamed: #MorphicSoundEvent!