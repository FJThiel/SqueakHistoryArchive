'From Squeak2.9alpha of 12 June 2000 [latest update: #2979] on 9 November 2000 at 12:42:23 pm'!"Change Set:		ScriptorChanges2Date:			8 November 2000Author:			Dan IngallsA number of fixes including...	No longer shows a blank line after inserting a statement in a block.	If drop a temp name anywhere in a block, it will become a temp or arg.	If grab an item from within a block the insertion caret now appears		without requiring a trip out and back in.	Scriptor windows now come to the front when clicked on as expected.		We'll restore DnD later.	CursorBase offset gets removed when a tile is dropped on the world.	Wide expressions are now folded as in pretty printing.Also includes a rewrite of doIfNotNil: to ifNotNilDo:."!!Object methodsFor: 'accessing' stamp: 'di 11/8/2000 21:05'!doIfNotNil: aBlock	"Deprecated -- use ifNotNilDo:"	^ self ifNotNilDo: aBlock! !!Object methodsFor: 'accessing' stamp: 'di 11/8/2000 21:04'!ifNotNilDo: aBlock	"Evaluate the given block with the receiver as its argument."	^ aBlock value: self! !!BlockNode methodsFor: 'tiles' stamp: 'di 11/9/2000 11:10'!asMorphicSyntaxIn: parent	| len shown row column |	(column _ parent addColumn: #block on: self) inset: 2; minBorderWidth: 1.		"level _ 1 max: levelOrZero."	self addCommentToMorph: column.	len _ shown _ statements size.	column explanation: 'A block of ',len printString,' Smalltalk statements',(		arguments size = 0 ifTrue: [''] ifFalse: [' and ',arguments size printString,' arguments']	).		"(levelOrZero = 0 and: [statements last isReturnSelf]) ifTrue: [shown _ 1 max: shown - 1]."	arguments size = 0 ifFalse: [		row _ column addRow: #blockarg1 on: (BlockArgsNode new).		arguments do: [:arg | 			(arg asMorphicSyntaxIn: row) color: #blockarg2		].	].	(statements copyFrom: 1 to: shown) do: [ :each | 		(each asMorphicSyntaxIn: column) borderWidth: 1.		each addCommentToMorph: column.	] separatedBy: [		column addMorphBack: (			AlignmentMorph newRow 				vResizing: #rigid; 				color: Color transparent;				extent: 2@2		).			].	^column! !!MessageNode methodsFor: 'tiles' stamp: 'di 11/9/2000 12:30'!morphFromKeywords: key arguments: args on: parent indent: ignored	| keywords arg thisKey column row selType explanation receiverString getMenuBlock receiverMorph wideReceiver |	getMenuBlock _ [ :aClass | self buildMenuForClass: aClass andSelector: key].	receiver ifNotNil: [	"i.e. not a cascade"		receiverMorph _ receiver asMorphicSyntaxIn: parent.	].	parent getMenuBlock: getMenuBlock.	keywords _ key keywords.	selType _ precedence asPrecedenceName.	receiverString _ receiver ifNil: [		''	] ifNotNil: [		' sent to ',receiver explanation	].	args size = 0 ifTrue: [		row _ parent 			addTextRow: key getMenuBlock: getMenuBlock explanation: nil.		parent explanation: selType,' message #',keywords first,receiverString.		^ row parseNode: selector.	].	wideReceiver _ receiver ~~ nil and: [receiverMorph fullBounds width > 80].	(wideReceiver not and: [args size = 1]) ifTrue: [		row _ parent 			addTextRow: keywords first  			getMenuBlock: getMenuBlock			explanation: selType,' selector'.		row parseNode: selector.		args first asMorphicSyntaxIn: parent.		parent explanation: selType,' message #', keywords first, ' with an argument ',					args first explanation, receiverString.		"(args first asMorphicSyntaxIn: parent)			explanation: selType,' message #',keywords first,' with an argument ',					args first explanation,receiverString."		^ self	].		explanation _ 'A keyword message #',key,				' with ',keywords size printString,' arguments'.	column _ parent addColumn: #keyword1 on: self.	column explanation: explanation;  getMenuBlock: getMenuBlock.	1 to: keywords size do: [:part |		arg _ args at: part.		thisKey _ keywords at: part.		(row _ column addRow: #keyword2 on: self)			borderWidth: 1;			parseNode: (self as: MessagePartNode);			borderColor: row stdBorderColor.		(row addTextRow: thisKey) parseNode: (KeyWordNode new).		arg asMorphicSyntaxIn: row.	].	explanation _ explanation,receiverString.	parent explanation: explanation.	(wideReceiver and: [column fullBounds height > 30])		ifTrue: [parent foldWideReceiver]! !!SyntaxMorph methodsFor: 'accessing' stamp: 'di 11/8/2000 20:58'!enclosingBlock	| morph |	morph _ self.	[morph ~~ nil and: [morph isSyntaxMorph]] whileTrue:		[(morph nodeClassIs: BlockNode) ifTrue: [^ morph].		morph _ morph owner].	^ nil! !!SyntaxMorph methodsFor: 'event handling' stamp: 'di 11/8/2000 22:05'!cursorBaseOffset	^ 7@14! !!SyntaxMorph methodsFor: 'event handling' stamp: 'di 11/8/2000 22:06'!mouseDown: evt 	| dup |	evt yellowButtonPressed		ifTrue: [^ self showMenu: evt].	owner isSyntaxMorph		ifTrue: [(owner nodeClassIs: MethodNode)					ifTrue: [^ self].	"can't take anything out of a MethodNode"				evt hand attachMorph: (dup _ self duplicate).				self enclosingBlocksDo: [:m | m startStepping].				^ dup align: dup topLeft with: evt hand position + self cursorBaseOffset]		ifFalse: ["bare, out in the world"				(self nodeClassIs: MethodNode)					ifTrue: [^ self]. "whole method not draggable"				evt hand attachMorph: self.				^ self align: self topLeft with: evt hand position + self cursorBaseOffset].! !!SyntaxMorph methodsFor: 'event handling' stamp: 'di 11/8/2000 20:49'!mouseLeaveDragging: evt"Transcript cr; print: self; show: ' leaveDragging'."	(self nodeClassIs: BlockNode) ifTrue:		[self stopStepping; hideCaret].	"Move drop highlight back out a level"	self unhighlight.	(owner ~~ nil and: [owner isSyntaxMorph])		ifTrue: [owner highlightForDrop: evt].! !!SyntaxMorph methodsFor: 'dropping/grabbing' stamp: 'di 11/8/2000 21:35'!acceptDroppingMorph: aMorph event: evt	| itNoun |	"For the moment, you have to drop it the right place.  We do not look at enclosing morphs"	"Two ways to do this:  Must always destroy old node, then drag in new one.		Or, drop replaces what you drop on.  Nasty with blocks.  see wantsDroppedMorph:event:"	"We know it is acceptable.  Just a matter of which case"	itNoun _ aMorph isNoun.	self enclosingBlocksDo: [:m | m stopStepping; hideCaret].	(self nodeClassIs: BlockNode) & itNoun		ifTrue:			[(aMorph nodeClassIs: TempVariableNode) ifTrue:				["If I am a BlockNode, and it is a TempVariableNode, add it into list"				^ (self addBlockArg: aMorph) ifFalse:					["if already declared, start new line of code with it"					self addToBlock: aMorph event: evt]]			ifFalse:			[^ self addToBlock: aMorph event: evt]].	"If I am a BlockNode and it is a noun add it as a new line"	(self nodeClassIs: BlockNode) ifTrue: [		 (aMorph nodeClassIs: ReturnNode) ifTrue: [^ self addToBlock: aMorph event: evt]].	"Later add args and keywords.  later allow comments to be dropped"	"Can't put statement, literal, assignment, or cascade into left side of assignment"	(owner isSyntaxMorph) ifTrue:		[(owner nodeClassIs: AssignmentNode) ifTrue:			[(owner submorphIndexOf: self) = 1 ifTrue:				[((aMorph nodeClassIs: TempVariableNode)				or: [aMorph nodeClassIs: VariableNode])  ifFalse: [ ^ self]]]].	owner replaceSubmorph: self by: aMorph.	"do the normal replacement"	aMorph owner layoutChanged.! !!SyntaxMorph methodsFor: 'dropping/grabbing' stamp: 'di 11/9/2000 10:30'!justDroppedInto: aMorph event: evt	aMorph isSyntaxMorph ifFalse:		["Drop my topLeft at the tip of the cursor if not in a scriptor."		self align: self topLeft with: self topLeft - self cursorBaseOffset].	^ super justDroppedInto: aMorph event: evt! !!SyntaxMorph methodsFor: 'layout' stamp: 'di 11/9/2000 12:31'!foldWideReceiver	"I am a message whose receiver is wide, and whose message part is a column.	Rearrange me so that the message part appears indented under the receiver part."	| messageRow |	messageRow _ SyntaxMorph row: #keyword1 on: parseNode.	messageRow addMorph: (Morph newBounds: (0@0 extent: 20@10) color: Color transparent);			addMorphBack: submorphs second.	self orientation: #vertical;		centering: #topLeft;		addMorphBack: messageRow.! !!SyntaxMorph methodsFor: 'as yet unclassified' stamp: 'di 11/8/2000 21:37'!enclosingBlocksDo: aBlock	| morph |	morph _ self.	[morph ~~ nil and: [morph isSyntaxMorph]] whileTrue:		[(morph nodeClassIs: BlockNode) ifTrue: [aBlock value: morph].		morph _ morph owner].! !!SyntaxMorph methodsFor: 'as yet unclassified' stamp: 'di 11/8/2000 21:54'!toDo"Biggies...[ ]	Integrate with EToy scriptors	releaseCachedState can discard all morphic structure.[ ]	Options:	Show / hide syntax markers (like [], (), ., :, ;, etc)	No color / color-in-focus / full color	Tiles / textiles / text[ ]	ParsedTextMorph -- looks like text but has all same substructure[ ]	Introduce notion of an UnParsedNode -- maybe a flag in ParseNode	Text -> UnParsed -> Parsed -> CodeGen[ ]	Need DnD evaluator, or some sort of '!!' button on any entity (halo?)	Also inspector / browser[ ]	All the type help we can getDetails [me] ...[ ]	Still some variation in node inset sizes[ ]	Use prettyPrint guidelines for all on one line vs rcvr, kwds on separate lines.[ ]	Allow click without drag -- only 'tear off' after 5 pix of drag.[ ]	Nice option would be full color within the current grab-focus.[ ]	Need autoscroll during drag for drop[ ]	Use, eg, shift-drag to move, del to delete[ ]	What about invalid drops -- stick on cursor?System...[ ]	Only keep history 7 deep; option to clear on quit	clear command above spaceLeft[ ]	Compute each page of prefs viewer on demand instead of as now.[ ]	Offer a search command that will gather up all preferences that match a given string (name or help string)Preferences enable: #noTileColor.Preferences disable: #noTileColor.Smalltalk browseAllSelect: [:cm | cm size > 600]SyntaxMorph testAll"! !!SyntaxMorph class methodsFor: 'as yet unclassified' stamp: 'di 11/9/2000 12:32'!testAllMethodsOver: methodSize  "MessageTally spyOn: [SyntaxMorph testAllMethodsOver: 600]"	"Add up the total layout area for syntax morphs representing all methods	over the given size.  This is a stress-test for SyntaxMorph layout.	A small value for the total area is also a figure of merit in the presentation	of Squeak source code in general.""Results:	#(69 600 180820874 103700)  11/4	70% build morphs, 12% get source, 9% layout, 8% parse, 1% roundoffFolded wide receivers, don't center keywords any more.	#(68 600 160033784 127727)  11/9	76% build morphs, 8% get source, 8% layout, 8% parse, 0% roundoff"	| tree source biggies morph stats time area |	biggies _ Smalltalk allSelect: [:cm | cm size > methodSize].	stats _ OrderedCollection new.'Laying out all ' , biggies size printString , ' methods over ' , methodSize printString , ' bytes...'	displayProgressAt: Sensor cursorPoint	from: 1 to: biggies size	during:		[:bar |		biggies withIndexDo:			[:methodRef :i | bar value: i.			Utilities setClassAndSelectorFrom: methodRef in: 				[:aClass :aSelector |				source _ (aClass compiledMethodAt: aSelector) getSourceFromFile.				time _ Time millisecondsToRun:					[tree _ Compiler new 						parse: source 						in: aClass 						notifying: nil.					morph _ tree asMorphicSyntaxUsing: SyntaxMorph.					area _ morph fullBounds area]].			stats add: {methodRef. area. time}]		].	^ {{biggies size.  methodSize. stats detectSum: [:a | a second]. stats detectSum: [:a | a third]}.		(stats asSortedCollection: [:x :y | x third >= y third]) asArray}! !!TwoWayScrollPane methodsFor: 'pane events' stamp: 'di 11/8/2000 20:22'!rejectsEvent: anEvent	scroller firstSubmorph isSyntaxMorph ifTrue: [^ super rejectsEvent: anEvent].	^self visible not		"ignore locked status"! !!UndefinedObject methodsFor: 'testing' stamp: 'di 11/8/2000 21:23'!doIfNotNil: aBlock	"Deprecated;  use ifNotNilDo:"	^ self ifNotNilDo: aBlock! !!UndefinedObject methodsFor: 'testing' stamp: 'di 11/8/2000 21:22'!ifNotNilDo: aBlock	"Override to do nothing."	^ self! !SyntaxMorph removeSelector: #startEnclosingBlocks!