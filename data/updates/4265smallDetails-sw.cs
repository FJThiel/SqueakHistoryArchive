'From Squeak3.1alpha of 28 February 2001 [latest update: #4262] on 19 August 2001 at 12:58:02 pm'!"Change Set:		smallDetails-swDate:			19 August 2001Author:			Scott WallaceAdds a comment in Behavior.formalHeaderPartsFor: to set the user's mind at ease if she should happen to browse to it and get the you-may-have-bad-source-file warning.  And also add a little rider to the bad-source-warning itself.Fixes a typo in balloon-help message for Workspace."!!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 8/19/2001 12:45'!"popeye" formalHeaderPartsFor: "olive oil" aSelector	"RELAX!!  The warning you may have just seen about possibly having a bad source file does not apply here, because this method *intends* to have its source code start with a comment.	This method returns a collection giving the parts in the formal declaration for aSelector.  This parse is in support of schemes in which adjutant properties of a method can be declared via special comments secreted in the formal header	The result will have     	3 elements for a simple, argumentless selector.		5 elements for a single-argument selector		9 elements for a two-argument selector		13 elements for a three-argument, selector		etc...	The syntactic elements are:		1		comment preceding initial selector fragment		2		first selector fragment		3		comment following first selector fragment  (nil if selector has no arguments)        ----------------------  (ends here for, e.g., #copy)		4		first formal argument		5		comment following first formal argument (nil if selector has only one argument)        ----------------------  (ends here for, e.g., #copyFrom:)		6		second keyword		7		comment following second keyword		8		second formal argument		9		comment following second formal argument (nil if selector has only two arguments)         ----------------------  (ends here for, e.g., #copyFrom:to:)	Any nil element signifies an absent comment.	NOTE: The comment following the final formal argument is *not* successfully retrieved by this method in its current form, though it can be obtained, if needed, by other means (e.g. calling #firstPrecodeCommentFor:).  Thus, the *final* element in the structure returned by this method is always going to be nil."	^ Scanner new scanMessageParts: (self methodHeaderFor: aSelector)"	Behavior class formalHeaderPartsFor: #formalHeaderPartsFor:"	! !!CodeHolder methodsFor: 'message list' stamp: 'sw 8/19/2001 12:57'!validateMessageSource: sourceString forSelector: aSelector	"Check whether there is evidence that method source is invalid"	| sourcesName |	(self selectedClass compilerClass == Object compilerClass 			and: [(sourceString asString findString: aSelector keywords first ) ~= 1])		ifTrue: [sourcesName _ FileDirectory localNameFor: Smalltalk sourcesName.			self inform: 'There may be a problem with your sources file!!The source code for every method should (usually) start with themethod selector but this is not the case with this method!! You mayproceed with caution but it is recommended that you get a new source file.This can happen if you download the "' , sourcesName  , '" file, or the ".changes" file you use, as TEXT. It must be transfered in BINARY mode, even if it looks like a text file, to preserve the CR line ends.Mac users: This may have been caused by Stuffit Expander. To prevent the files above to be converted to Mac line ends when they are expanded, do this: Start the program, then from Preferences... in the File menu, choose the Cross Platform panel, then select "Never" and press OK. Then expand the compressed archive again.(Occasionally, the source code for a method may legitimatelystart with a non-alphabetic character -- for example, Behaviormethod #formalHeaderPartsFor:.  In such rare cases, you canhappily disregard this warning.)'].! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 8/19/2001 09:57'!quadsDefiningToolsFlap	"Answer a structure defining the default Tools flap"	^ #(	(Browser 				prototypicalToolWindow		'Browser'			'A Browser is a tool that allows you to view all the code of all the classes in the system')	(Transcript				openAsMorph				'Transcript'			'A Transcript is a window usable for logging and debugging; browse references to #Transcript for examples of how to write to it.')	(Workspace				prototypicalToolWindow		'Workspace'			'A Workspace is a simple window for editing text.  You can later save the contents to a file if you desire.')	(FileList					prototypicalToolWindow		'File List'			'A File List is a tool for browsing folders and files on disks and on ftp types.')	(DualChangeSorter		prototypicalToolWindow		'Change Sorter'		'Shows two change sets side by side')	(SelectorBrowser			prototypicalToolWindow		'Method Finder'		'A tool for discovering methods by providing sample values for arguments and results')	(MessageNames			prototypicalToolWindow		'Message Names'		'A tool for finding, viewing, and editing all methods whose names contain a given character sequence.')	(Preferences			preferencesControlPanel	'Preferences'			'Allows you to control numerous options')	(Utilities				recentSubmissionsWindow	'Recent'				'A message browser that tracks the most recently-submitted methods')	(ProcessBrowser			prototypicalToolWindow		'Processes'			'A Process Browser shows you all the running processes')	(Preferences			annotationEditingWindow	'Annotations'		'Allows you to specify the annotations to be shown in the annotation panes of browsers, etc.')	(Scamper				newOpenableMorph			'Scamper'			'A web browser')	(Celeste					newOpenableMorph			'Celeste'				'Celeste -- an EMail reader')	(PackagePaneBrowser	prototypicalToolWindow		'Packages'			'Package Browser:  like a System Browser, except that if has extra level of categorization in the top-left pane, such that class-categories are further organized into groups called "packages"')	(ChangeSorter			prototypicalToolWindow		'Change Set'			'A tool that allows you to view and manipulate all the code changes in a single change set'))! !