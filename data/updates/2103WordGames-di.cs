'From Squeak2.8alpha of 12 January 2000 [latest update: #2098] on 12 May 2000 at 3:17:36 pm'!"Change Set:		WordGamesDate:			8 May 2000Author:			Dan IngallsThis changeset provides tools for implementing several word games in Squeak.  WordGameLetterMorph and WordGamePanelMorph are generic objects that support character display and editing.Use the 'new morph...'/'Games' menu or execute	CipherPanel new openInWorldto open a complete solver for Crypto Quotes.Use the 'new morph...' Games menu or execute	CrosticPanel new openInWorldto open a complete solver for Acrostic Quotes.	Notice that the old style printable format (much more complex)	can be obtained by changing the method oldStyle to return true.It should also be straightforward to build a Crossword solver with these same tools.Also adds a method	SystemWindow>>openInWorld: aWorld extent: extentthat makes it easier to spawn StringHolders of the right size."!BorderedMorph subclass: #WordGameLetterMorph	instanceVariableNames: 'letter originalLetter linkedLetters predecessor successor indexInQuote lineMorph letterMorph style '	classVariableNames: 'IDFont LetterFont IDHeight LetterHeight '	poolDictionaries: ''	category: 'Morphic-Games'!!WordGameLetterMorph commentStamp: 'di 5/10/2000 08:16' prior: 0!WordGameLetterMorph implements letter boxes for type-in and display of letter in word games.  Several variant displays are supported, depending on the setting of style, and blanks can be displayed as black boxes or empty letter boxes.Default support for type-in is distributed between this class and WordGamePaneMorphletter			the Character stored in this morph.				Can be either blank or nil as well as a letter.indexInQuote	a retained copy of the index of this character				Facilitates responses to, eg, clicking or typing in this box.				If indexInQuote==nil, then this is displayed as a black boxpredecessor		another LetterMorph or nil				Used for linked typing and, eg, word selectionsuccessor		another LetterMorph or nil				Used for linked typing and, eg, word selectionstyle			a Symbol, one of #(plain boxed underlined)				Boxed and underlined display further depends on whether				the id strings are nil or not.				Each format has an associated default sizeThe following two variables are also submorphs, as are the id strings if present.letterMorph		a StringMorph for displaying the letter				Used when changing the letter to be displayedlineMorph		a PolygonMorph used to display the underline				and also to place the id string in underlined format!BorderedMorph subclass: #WordGamePanelMorph	instanceVariableNames: 'letterMorphs haveTypedHere '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Games'!!WordGamePanelMorph commentStamp: 'di 5/10/2000 08:34' prior: 0!WordGamePanelMorph provides some default support for clicking and typing in a panel with letterMorphs.letterMorphs		a collection of LetterMorphs					Useful in referring specifically to active letterMorphs					when submorphs may contain other morphshaveTypedHere		a Boolean used to determine how backspace should be handled!WordGamePanelMorph subclass: #CipherPanel	instanceVariableNames: 'originalText quote originalMorphs decodingMorphs '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Games'!!CipherPanel commentStamp: 'di 5/10/2000 17:58' prior: 0!The CipherPanel, as its name suggests, is a tool for decoding simple substitution codes, such as are presented on the puzzle pages of many Sunday newspapers.  Most of the capability is inherited from the two WordGame classes used.  To try it out, choose newMorph/Games/CipherPanel in a morphic project, or execute, in any project:	CipherPanel new openInWorld!WordGamePanelMorph subclass: #CrosticPanel	instanceVariableNames: 'crosticPanel quotePanel cluesCol2 answers quote clues cluesPanel '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Games'!!CrosticPanel commentStamp: 'di 5/11/2000 21:28' prior: 0!The CrosticPanel, as its name suggests, is a tool for decoding acrostic puzzles, such as are presented on the puzzle pages of some Sunday newspapers.  Much of the capability is inherited from the two WordGame classes used.  To try it out, choose newMorph/Games/CrosticPanel in a morphic project, or execute, in any project:	CrosticPanel new openInWorldThe instance variables of this class include...	letterMorphs (in superclass)  a collection of all the letterMorphs in this panel	quote		a string, being the entire quote in uppercase with no blanks	clues		a collection of the clue strings	answers		a collection of the answer indices.				For each answer, this is an array of the indices into the quote string.The final structure of a CrosticPanel is as follows	self					a CrosticPanel			the overall holder		quotePanel		a CrosticQuotePanel		holds the grid of letters from the quote		cluesPanel		an AlignmentMorph		holds most of the clue rows		cluesCol2		an AlignmentMorph		holds the rest of the clue rowsEach clue row is a horizontal AlignmentMorph with a textMorph and another alignmentMorph full of the letterMorphs for the answer.!WordGamePanelMorph subclass: #CrosticQuotePanel	instanceVariableNames: 'cluesPanel '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Games'!!CrosticQuotePanel commentStamp: 'di 5/11/2000 21:17' prior: 0!!!SystemWindow methodsFor: 'open/close' stamp: 'di 5/8/2000 10:02'!openInWorld: aWorld extent: extent	"This msg and its callees result in the window being activeOnlyOnTop"	self position: (RealEstateAgent initialFrameFor: self) topLeft; extent: extent.	aWorld addMorph: self.	self activate.	aWorld startSteppingSubmorphsOf: self.! !!SystemWindow methodsFor: 'open/close' stamp: 'di 5/8/2000 10:02'!openInWorldExtent: extent	"This msg and its callees result in the window being activeOnlyOnTop"	Smalltalk isMorphic ifFalse: [^ self openInMVCExtent: extent].	self openInWorld: World extent: extent! !!WordGameLetterMorph methodsFor: 'initialization' stamp: 'di 5/11/2000 07:33'!id2: idString	"Add further clue id for acrostic puzzles."	| idMorph |	idString ifNotNil:		[idMorph _ StringMorph contents: idString font: IDFont.		idMorph align: idMorph bounds topRight with: self bounds topRight + (-1@-1).		self addMorph: idMorph].! !!WordGameLetterMorph methodsFor: 'initialization' stamp: 'di 5/11/2000 22:03'!indexInQuote: qi id1: idString	"Initialize me with the given index and an optional idString"	| idMorph y |	style = #boxed		ifTrue: [idString == nil				ifTrue: [self extent: 18@16; borderWidth: 1]				ifFalse: [self extent: 26@24; borderWidth: 1]]		ifFalse: [idString == nil				ifTrue: [self extent: 18@16; borderWidth: 0]				ifFalse: [self extent: 18@26; borderWidth: 0]].	qi ifNil: [^ self color: Color gray].  "blank"	self color: self normalColor.	indexInQuote _ qi.	style == #underlined	ifTrue:		[y _ self bottom - 2.		idString ifNotNil: [y _ y - IDFont ascent + 2].		lineMorph _ PolygonMorph				vertices: {self left+2@y. self right-3@y}				color: Color gray borderWidth: 1 borderColor: Color gray.		self addMorph: lineMorph.		idString ifNil: [^ self].		idMorph _ StringMorph contents: idString font: IDFont.		idMorph align: idMorph bounds bottomCenter				with: self bounds bottomCenter + (0@(IDFont descent-1)).		self addMorphBack: idMorph]	ifFalse:		[idString ifNil: [^ self].		idMorph _ StringMorph contents: idString font: IDFont.		idMorph align: idMorph bounds topLeft with: self bounds topLeft + (2@-1).		self addMorph: idMorph]"World addMorph: (WordGameLetterMorph new boxed indexInQuote: 123 id1: '123';							id2: 'H'; setLetter: $W).World addMorph: (WordGameLetterMorph new underlined indexInQuote: 123 id1: '123';							setLetter: $W).World addMorph: (WordGameLetterMorph new underlined indexInQuote: 123 id1: nil;							setLetter: $W)."! !!WordGameLetterMorph methodsFor: 'initialization' stamp: 'di 5/8/2000 11:22'!normalColor	^ Color r: 1.0 g: 0.8 b: 0.2! !!WordGameLetterMorph methodsFor: 'initialization' stamp: 'di 5/7/2000 23:58'!setLetter: aLetter	^ self setLetter: aLetter color: Color black! !!WordGameLetterMorph methodsFor: 'initialization' stamp: 'di 5/11/2000 09:34'!setLetter: aLetter color: aColor	letterMorph ifNotNil: [letterMorph delete].	letter _ aLetter.	letter ifNil: [^ letterMorph _ nil].	letterMorph _ StringMorph contents: aLetter asString font: LetterFont.	letterMorph color: aColor.	style == #boxed		ifTrue:		[letterMorph align: letterMorph bounds bottomCenter					with: self bounds bottomCenter + (0@(LetterFont descent-2))]		ifFalse:		[lineMorph == nil		ifTrue: [letterMorph align: letterMorph bounds bottomCenter						with: self bounds bottomCenter + (0@(LetterFont descent-4))]		ifFalse: [letterMorph align: letterMorph bounds bottomCenter						with: self center x@(lineMorph top + LetterFont descent)]].	self addMorphBack: letterMorph.! !!WordGameLetterMorph methodsFor: 'style inits' stamp: 'di 5/7/2000 17:00'!boxed	style _ #boxed! !!WordGameLetterMorph methodsFor: 'style inits' stamp: 'di 5/7/2000 17:00'!plain	style _ #plain! !!WordGameLetterMorph methodsFor: 'style inits' stamp: 'di 5/7/2000 17:01'!underlined	style _ #underlined! !!WordGameLetterMorph methodsFor: 'accessing' stamp: 'di 5/7/2000 13:42'!indexInQuote	^ indexInQuote! !!WordGameLetterMorph methodsFor: 'accessing' stamp: 'di 5/7/2000 13:52'!isBlank	^ indexInQuote == nil! !!WordGameLetterMorph methodsFor: 'accessing' stamp: 'di 5/7/2000 23:31'!letter	^ letter! !!WordGameLetterMorph methodsFor: 'accessing' stamp: 'di 5/7/2000 13:43'!predecessor	^ predecessor! !!WordGameLetterMorph methodsFor: 'accessing' stamp: 'di 5/7/2000 13:25'!predecessor: pred	predecessor _ pred! !!WordGameLetterMorph methodsFor: 'accessing' stamp: 'di 5/7/2000 13:43'!successor	^ successor! !!WordGameLetterMorph methodsFor: 'accessing' stamp: 'di 5/7/2000 13:25'!successor: succ	successor _ succ! !!WordGameLetterMorph methodsFor: 'typing' stamp: 'di 5/9/2000 16:20'!keyboardFocusChange: boolean	| panel |	boolean ifFalse:		[panel _ self nearestOwnerThat: [:m | m respondsTo: #checkForLostFocus].		panel ifNotNil: [panel checkForLostFocus]]! !!WordGameLetterMorph methodsFor: 'typing' stamp: 'di 5/8/2000 11:21'!unhighlight	(self isBlank or: [self color = self normalColor])		ifFalse: [self color: self normalColor]! !!WordGameLetterMorph methodsFor: 'linking' stamp: 'di 5/7/2000 13:50'!morphsInWordDo: aBlock	aBlock value: self.	(successor == nil or: [successor isBlank]) ifTrue: [^ self].	successor morphsInWordDo: aBlock! !!WordGameLetterMorph methodsFor: 'linking' stamp: 'di 5/7/2000 14:06'!nextTypeableLetter	successor ifNil: [^ self].	successor isBlank ifTrue: [^ successor nextTypeableLetter].	^ successor! !!WordGameLetterMorph methodsFor: 'linking' stamp: 'di 5/7/2000 14:19'!previousTypeableLetter	predecessor ifNil: [^ self].	predecessor isBlank ifTrue: [^ predecessor previousTypeableLetter].	^ predecessor! !!WordGameLetterMorph methodsFor: 'linking' stamp: 'di 5/7/2000 13:48'!startOfWord	(predecessor == nil or: [predecessor isBlank]) ifTrue: [^ self].	^ predecessor startOfWord! !!WordGameLetterMorph class methodsFor: 'as yet unclassified' stamp: 'di 5/10/2000 07:42'!includeInNewMorphMenu	^ false! !!WordGameLetterMorph class methodsFor: 'as yet unclassified' stamp: 'di 5/11/2000 07:15'!initialize  "WordGameLetterMorph initialize"	IDFont _ StrikeFont familyName: 'ComicPlain' size: 13.	IDHeight _ IDFont height.	LetterFont _ StrikeFont familyName: 'ComicBold' size: 19.	LetterHeight _ LetterFont height.! !!WordGamePanelMorph methodsFor: 'access' stamp: 'di 5/9/2000 22:27'!letterMorphs	^ letterMorphs! !!WordGamePanelMorph methodsFor: 'menu' stamp: 'di 5/9/2000 21:53'!addCustomMenuItems: aCustomMenu hand: aHandMorph	"Include our modest command set in the ctrl-menu"	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu addLine.	self addMenuItemsTo: aCustomMenu hand: aHandMorph! !!WordGamePanelMorph methodsFor: 'menu' stamp: 'di 5/9/2000 22:07'!addMenuItemsTo: aCustomMenu hand: aHandMorph	"override with actual menu items"! !!WordGamePanelMorph methodsFor: 'events' stamp: 'di 5/10/2000 08:45'!checkForLostFocus	"Determine if the user has clicked outside this panel"	self activeHand ifNil: [^ self].	(self containsPoint: self activeHand position) ifFalse: [self lostFocus]! !!WordGamePanelMorph methodsFor: 'events' stamp: 'di 5/11/2000 22:38'!handlesMouseDown: event	"Absorb mouseDown so stray clicks will not pick up the panel"	^ true! !!WordGamePanelMorph methodsFor: 'events' stamp: 'di 5/10/2000 09:46'!keyStrokeEvent: evt letterMorph: morph	"Handle typing.  Calls keyCharacter:atIndex:nextFocus: for further behavior."	| affectedMorph keyCharacter nextFocus |	evt keyCharacter = Character backspace		ifTrue: ["<delete> zaps the current selection if there has been no typing,				but it zaps the previous selection if there has been prior typing."				haveTypedHere					ifTrue: [affectedMorph _ morph previousTypeableLetter]					ifFalse: [affectedMorph _ morph].				keyCharacter _ Character space.				nextFocus _ morph previousTypeableLetter]		ifFalse: [affectedMorph _ morph.				keyCharacter _ evt keyCharacter asUppercase.				(keyCharacter isLetter or: [keyCharacter = Character space])					ifFalse: [^ self].				haveTypedHere _ true.				nextFocus _ morph nextTypeableLetter.				nextFocus == morph ifTrue:					["If hit end of a word, change backspace mode"					haveTypedHere _ false]].	evt hand newKeyboardFocus: nextFocus.	self unhighlight.	nextFocus color: Color green.	self keyCharacter: keyCharacter atIndex: affectedMorph indexInQuote nextFocus: nextFocus! !!WordGamePanelMorph methodsFor: 'events' stamp: 'di 5/10/2000 09:30'!mouseDownEvent: evt letterMorph: morph	haveTypedHere _ false.	evt hand newKeyboardFocus: morph.	self highlight: morph! !!WordGamePanelMorph methodsFor: 'defaults' stamp: 'di 5/12/2000 00:28'!clearTyping	"Clear out all letters entered as a solution."	letterMorphs do: [:m | (m letter notNil and: [m letter isLetter])							ifTrue: [m setLetter: Character space]].	self unhighlight.! !!WordGamePanelMorph methodsFor: 'defaults' stamp: 'di 5/10/2000 09:31'!highlight: morph	self unhighlight.	morph color: Color green! !!WordGamePanelMorph methodsFor: 'defaults' stamp: 'di 5/12/2000 00:53'!isClean	"Return true only if all cells are blank."	letterMorphs do:		[:m | (m letter notNil and: [m letter ~= $ ]) ifTrue: [^ false]].	^ true! !!WordGamePanelMorph methodsFor: 'defaults' stamp: 'di 5/10/2000 08:37'!keyCharacter: keyCharacter atIndex: indexOfAffectedMorph nextFocus: nextFocus	"Override with actual response"! !!WordGamePanelMorph methodsFor: 'defaults' stamp: 'di 5/10/2000 08:44'!lostFocus	self unhighlight! !!WordGamePanelMorph methodsFor: 'defaults' stamp: 'di 5/12/2000 09:54'!unhighlight	letterMorphs do: [:m | m ifNotNil: [m unhighlight]]! !!CipherPanel methodsFor: 'initialization' stamp: 'di 5/12/2000 00:53'!encodedQuote: aString	"World addMorph: CipherPanel test"	| morph prev |	haveTypedHere _ false.	quote _ aString asUppercase.	prev _ nil.	originalMorphs _ quote asArray collectWithIndex:		[:c :i | WordGameLetterMorph new plain indexInQuote: i id1: nil;						setLetter: (quote at: i)].	letterMorphs _ OrderedCollection new.	decodingMorphs _ quote asArray collectWithIndex:		[:c :i | (quote at: i) isLetter		ifTrue:			[morph _ WordGameLetterMorph new underlined indexInQuote: i id1: nil.			morph on: #mouseDown send: #mouseDownEvent:letterMorph: to: self.			morph on: #keyStroke send: #keyStrokeEvent:letterMorph: to: self.			letterMorphs addLast: morph.			morph predecessor: prev.			prev ifNotNil: [prev successor: morph].			prev _ morph]		ifFalse:			[WordGameLetterMorph new plain indexInQuote: i id1: nil; setLetter: (quote at: i)]].	self color: originalMorphs first color.	self extent: 500@500! !!CipherPanel methodsFor: 'initialization' stamp: 'di 5/12/2000 00:52'!extent: newExtent	"Lay out with word wrap, alternating bewteen decoded and encoded lines."	"Currently not tolerant of narrow (less than a word) margins"	| w h relLoc topLeft thisWord i m corner row |	self removeAllMorphs.	w _ originalMorphs first width - 1.  h _ originalMorphs first height * 2 + 10.	topLeft _ self position + self borderWidth + (0@10).	thisWord _ OrderedCollection new.	i _ 1.  relLoc _ 0@0.  corner _ topLeft.	[i <= originalMorphs size] whileTrue:		[m _ originalMorphs at: i.		thisWord addLast: ((decodingMorphs at: i) position: topLeft + relLoc).		thisWord addLast: (m position: topLeft + relLoc + (0@m height)).		(m letter = Character space or: [i = originalMorphs size])			ifTrue: [self addAllMorphs: thisWord.					corner _ corner max: thisWord last bounds bottomRight.					thisWord reset].		relLoc _ relLoc + (w@0).		(relLoc x + w) > newExtent x			ifTrue: [i _ i - (thisWord size//2) + 1.					thisWord reset.					relLoc _ 0@(relLoc y + h)]			ifFalse: [i _ i + 1]].	row _ self buttonRow.	self addMorph: row.	super extent: (corner - topLeft) + (self borderWidth * 2) + (0@row height+10).	row align: row bounds bottomCenter with: self bounds bottomCenter - (0@2).! !!CipherPanel methodsFor: 'menu' stamp: 'di 5/11/2000 08:32'!addMenuItemsTo: aMenu hand: aHandMorph	aMenu add: 'show cipher help' target: self action: #showHelpWindow.	aMenu add: 'show cipher hints' target: self action: #showHintsWindow.	aMenu add: 'clear cipher typing' target: self action: #clearTyping.	aMenu add: 'enter a new cipher' target: self action: #enterANewCipher.! !!CipherPanel methodsFor: 'menu' stamp: 'di 5/8/2000 20:21'!buttonRow	| row aButton |	row _ AlignmentMorph newRow		color: self color;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color transparent; borderWidth: 1; borderColor: Color black.	#('show help' 'show hints' 'clear typing' 'enter a new cipher')	with: 	#(showHelpWindow showHintsWindow clearTyping enterANewCipher)	do: [:label :selector |		aButton _ aButton fullCopy.		aButton actionSelector: selector.		aButton label: label.		row addMorphBack: aButton.		row addTransparentSpacerOfSize: (3 @ 0)].	^ row! !!CipherPanel methodsFor: 'menu' stamp: 'di 5/8/2000 10:46'!cipherStats	| letterCounts digraphs d digraphCounts |	letterCounts _ (quote copyWithout: Character space) asBag sortedCounts.	digraphs _ Bag new.	quote withIndexDo:		[:c :i |		i < quote size ifTrue:			[d _ quote at: i+1.			(c ~= Character space and: [d ~= Character space]) ifTrue:				[digraphs add: (String with: c with: d)]]].	digraphCounts _ digraphs sortedCounts.	^ String streamContents:		[:strm |		1 to: 10 do:			[:i |			strm cr; tab; nextPut: (letterCounts at: i) value.			strm tab; print: (letterCounts at: i) key.			(digraphCounts at: i) key > 1 ifTrue:				[strm tab; tab; tab; nextPutAll: (digraphCounts at: i) value.				strm tab; print: (digraphCounts at: i) key]]]! !!CipherPanel methodsFor: 'menu' stamp: 'di 5/12/2000 00:28'!clearTyping	self isClean ifTrue: [^ self].	(self confirm: 'Are you sure you want to discard all typing?') ifFalse: [^ self].	super clearTyping.! !!CipherPanel methodsFor: 'menu' stamp: 'di 5/8/2000 10:47'!enterANewCipher	self encodedQuote:		(FillInTheBlankMorph request: 'Type a cipher text to work on here below...')! !!CipherPanel methodsFor: 'menu' stamp: 'di 5/8/2000 10:53'!showHelpWindow	((StringHolder new contents: 'The Cipher Panel displays an encrypted message.  The encryption is a simple substitution code;  each letter of the alphabet has been changed to a different one.You can solve the cipher by clicking above any letter in the message, and typing the letter you think it should be.  The Cipher Panel automatically makes the same substitution anywhere else that letter occurs in the encoded message.If you are having trouble, you can use the command menu to ''show cipher hints''.  That will display how many of each letter occurs, which is often a help in solving ciphers.')		embeddedInMorphicWindowLabeled: 'About the Cipher Panel')			setWindowColor: (Color r: 1.0 g: 0.6 b: 0.0);			openInWorld: self world extent: 389@209! !!CipherPanel methodsFor: 'menu' stamp: 'di 5/8/2000 12:19'!showHintsWindow	((StringHolder new contents: 'Most bodies of english text follow a general pattern of letter usage.  The following are the most common letters, in approximate order of frequency:	E  T  A  O  N  I  R  S  HThe following are the most common digraphs:	EN  ER  RE  NT  TH  ON  INThe message you are trying to decode has the following specific statistics:'	, self cipherStats , 'Good luck!!')		embeddedInMorphicWindowLabeled: 'Some Useful Statistics')			setWindowColor: (Color r: 1.0 g: 0.6 b: 0.0);			openInWorld: self world extent: 318@326! !!CipherPanel methodsFor: 'events' stamp: 'di 5/12/2000 00:52'!keyCharacter: aLetter atIndex: indexInQuote nextFocus: nextFocus	| encodedLetter |	encodedLetter _ quote at: indexInQuote.	originalMorphs with: decodingMorphs do:		[:e :d | e letter = encodedLetter ifTrue: [d setLetter: aLetter color: Color red]].! !!CrosticPanel methodsFor: 'initialization' stamp: 'di 5/11/2000 22:31'!breakColumnAndResizeWithButtons: buttonRow	| placeToSplit indexToSplit |	"The column of clues has been laid out, and the crostic panel has been resized to that width and embedded as a submorph.  This method breaks the clues in two, placing the long part to the left of the crostic and the short one below it."	placeToSplit _ (self left + 5) @ (cluesPanel height + quotePanel height // 2 + self top).	indexToSplit _ cluesPanel submorphs findFirst: [:m | m containsPoint: placeToSplit].	cluesCol2 _ AlignmentMorph newColumn color: self color;		hResizing: #shrinkWrap; vResizing: #shrinkWrap; inset: 0.	cluesCol2 addAllMorphs: (cluesPanel submorphs copyFrom: indexToSplit + 1							to: cluesPanel submorphs size).	cluesPanel position: self position + self borderWidth + (0 @ 4).	quotePanel position: self position + (quotePanel width @ 0).	cluesCol2 position: self position + quotePanel extent + (0 @ 4).	self addMorph: cluesCol2.	self addMorph: buttonRow.	buttonRow align: buttonRow topLeft with: cluesCol2 bottomLeft.	self extent: 100@100; bounds: ((self fullBounds topLeft - self borderWidth asPoint)							corner: (self fullBounds bottomRight - (2@0))).! !!CrosticPanel methodsFor: 'initialization' stamp: 'di 5/11/2000 22:07'!quote: indexableQuote clues: clueStrings answers: answerIndices quotePanel: panel	| row clue answer answerMorph letterMorph prev |	quote _ indexableQuote.	quotePanel _ panel.	clues _ clueStrings.	answers _ answerIndices.	cluesPanel _ AlignmentMorph newColumn color: self color;		hResizing: #shrinkWrap; vResizing: #shrinkWrap; inset: 0.	letterMorphs _ Array new: quotePanel letterMorphs size.	1 to: clues size do:		[:i |  clue _ clues at: i.  answer _ answers at: i.		row _ AlignmentMorph newRow hResizing: #shrinkWrap; vResizing: #shrinkWrap.		row addMorphBack:			((TextMorph newBounds: (0@0 extent: 120@20) color: Color black)				string: (CrosticPanel oldStyle							ifTrue: [(($A to: $Z) at: i) asString , '.  ' , clue]							ifFalse: [clue])					fontName: 'ComicPlain' size: 13).		row addTransparentSpacerOfSize: (3 @ 0).		answerMorph _ AlignmentMorph newRow inset: 0;			hResizing: #shrinkWrap; vResizing: #shrinkWrap.		prev _ nil.		answer do:			[:n | letterMorph _ WordGameLetterMorph new underlined						indexInQuote: n						id1: (CrosticPanel oldStyle ifTrue: [n printString] ifFalse: [nil]);						setLetter: Character space.			letterMorph on: #mouseDown send: #mouseDownEvent:letterMorph: to: self.			letterMorph on: #keyStroke send: #keyStrokeEvent:letterMorph: to: self.			letterMorph predecessor: prev.			prev ifNotNil: [prev successor: letterMorph].			prev _ letterMorph.			letterMorphs at: n put: letterMorph.			answerMorph addMorphBack: letterMorph].		answerMorph color: answerMorph firstSubmorph color.		row addMorphBack: answerMorph.		row color: answerMorph firstSubmorph color.		cluesPanel addMorphBack: row].	self addMorph: cluesPanel.cluesPanel imageForm.  "Needed for some sort of resizing!!"	self bounds: cluesPanel fullBounds.! !!CrosticPanel methodsFor: 'events' stamp: 'di 5/11/2000 20:44'!highlight: morph	self unhighlight.	quotePanel unhighlight.	morph startOfWord morphsInWordDo:		[:m | m color: Color lightGreen.		(quotePanel letterMorphs at: m indexInQuote) color: Color lightMagenta].	morph color: Color green.	(quotePanel letterMorphs at: morph indexInQuote) color: Color magenta.! !!CrosticPanel methodsFor: 'events' stamp: 'di 5/11/2000 20:44'!keyCharacter: aLetter atIndex: indexInQuote nextFocus: nextFocus	(self letterMorphs at: indexInQuote) setLetter: aLetter.	(quotePanel letterMorphs at: indexInQuote) setLetter: aLetter.	self highlight: nextFocus! !!CrosticPanel methodsFor: 'events' stamp: 'di 5/11/2000 20:44'!lostFocus	self unhighlight.	quotePanel unhighlight! !!CrosticPanel methodsFor: 'menu' stamp: 'di 5/11/2000 23:38'!addMenuItemsTo: aMenu hand: aHandMorph	aMenu add: 'show crostic help' target: self action: #showHelpWindow.	aMenu add: 'show crostic hints' target: self action: #showHintsWindow.	aMenu add: 'show crostic errors' target: self action: #showErrors.	aMenu add: 'clear crostic typing' target: self action: #clearTyping.	aMenu add: 'open crostic file...' target: self action: #openFile.! !!CrosticPanel methodsFor: 'menu' stamp: 'di 5/12/2000 00:17'!buttonRow	| row aButton |	row _ AlignmentMorph newRow		color: self color;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color transparent; borderWidth: 1; borderColor: Color black.	#('show help' 'show errors' 'show hints' 'clear' 'open...')	with: 	#(showHelpWindow showErrors showHintsWindow clearTyping openFile)	do: [:label :selector |		aButton _ aButton fullCopy.		aButton actionSelector: selector.		aButton label: label.		row addMorphBack: aButton.		row addTransparentSpacerOfSize: (3 @ 0)].	^ row! !!CrosticPanel methodsFor: 'menu' stamp: 'di 5/12/2000 00:25'!clearTyping	self isClean ifTrue: [^ self].	(self confirm: 'Are you sure you want to discard all typing?') ifFalse: [^ self].	super clearTyping.	quotePanel clearTyping! !!CrosticPanel methodsFor: 'menu' stamp: 'di 5/12/2000 10:32'!openFile	| stdFileMenuResult crostic file |	stdFileMenuResult _ ((StandardFileMenu new) pattern: '*.crostic'; 		oldFileFrom: FileDirectory default ) 			startUpWithCaption: 'Select a Crostic File...'.	stdFileMenuResult ifNil: [^ nil].	file _ stdFileMenuResult directory oldFileNamed: stdFileMenuResult name.	crostic _ CrosticPanel newFromFile: file.  file close.	(self isClean or: [self confirm: 'Is it OK to discard this crostic?'])		ifTrue: [self world addMorphFront: (crostic position: self position).				self delete]		ifFalse: [self world addMorphFront: crostic].! !!CrosticPanel methodsFor: 'menu' stamp: 'di 5/12/2000 15:09'!showErrors	letterMorphs do:		[:m | (m letter ~= Character space and: [m letter ~= (quote at: m indexInQuote)])			ifTrue: [m color: Color red.					(quotePanel letterMorphs at: m indexInQuote) color: Color red]]! !!CrosticPanel methodsFor: 'menu' stamp: 'di 5/11/2000 16:44'!showHelpWindow	((StringHolder new contents: 'The Crostic Panel presents an acrostic puzzle for solution.  As you type in answers for the clues, the letters also get entered in the text of the hidden quote.  Conversely, as you guess words in the quote, those letters will fill in missing places in your answers.  In addition, the first letters of all the answers together form the author''s name and title of the work from which the quote is taken.If you wish to make up other acrostic puzzles, follow the obvious file format in the sampleFile method.  If you wish to print an acrostic to work it on paper, then change the oldStyle method to return true, and it will properly cross-index all the cells.Have fun.')		embeddedInMorphicWindowLabeled: 'About the Crostic Panel')			setWindowColor: (Color r: 1.0 g: 0.6 b: 0.0);			openInWorld: self world extent: 409@207! !!CrosticPanel methodsFor: 'menu' stamp: 'di 5/11/2000 21:07'!showHintsWindow	| hints |	(self confirm: 'As hints, you will be given the five longest answers.Do you really want to do this?') ifFalse: [^ self].	hints _ (answers asSortedCollection: [:x :y | x size > y size]) asArray		copyFrom: 1 to: 5.	((StringHolder new contents: 	'The five longest answers are...'	,	(String streamContents:		[:strm | hints do: 			[:hint | strm cr; nextPutAll: (hint collect: [:i | quote at: i])].		strm cr; cr])	,'Good luck!!')		embeddedInMorphicWindowLabeled: 'Crostic Hints')			setWindowColor: (Color r: 1.0 g: 0.6 b: 0.0);			openInWorld: self world extent: 198@154! !!CrosticQuotePanel methodsFor: 'initialization' stamp: 'di 5/7/2000 11:59'!extent: newExtent	| w h nAcross relLoc topLeft |	w _ self firstSubmorph width - 1.  h _ self firstSubmorph height - 1.	nAcross _ newExtent x - (self borderWidth-1*2)-1 // w.	topLeft _ self position + self borderWidth - 1.	submorphs withIndexDo:		[:m :i | 		relLoc _ (i-1 \\ nAcross * w) @ (i-1 // nAcross * h).		m position: topLeft + relLoc].	super extent: ((w * nAcross + 1) @ (submorphs size - 1 // nAcross + 1 * h+1))					+ (self borderWidth - 1 * 2).! !!CrosticQuotePanel methodsFor: 'initialization' stamp: 'di 5/12/2000 00:07'!quote: quoteWithBlanks answers: theAnswers cluesPanel: panel	| n morph prev clueIxs |	cluesPanel _ panel.	self color: Color gray.	clueIxs _ Array new: quoteWithBlanks size.	theAnswers withIndexDo: [:a :i | a do: [:j | clueIxs at: j put: i]].	letterMorphs _ OrderedCollection new.	prev _ nil.	self addAllMorphs: (quoteWithBlanks asArray collect:		[:c |		c isLetter			ifTrue: [n _ letterMorphs size + 1.					morph _ WordGameLetterMorph new boxed.					CrosticPanel oldStyle						ifTrue: [morph indexInQuote: n id1: n printString.								morph id2: (($A to: $Z) at: (clueIxs at: n)) asString]						ifFalse: [morph indexInQuote: n id1: nil].					morph setLetter: Character space.					morph on: #mouseDown send: #mouseDownEvent:letterMorph: to: self.					morph on: #keyStroke send: #keyStrokeEvent:letterMorph: to: self.					letterMorphs addLast: morph]			ifFalse: [morph _ WordGameLetterMorph new boxed indexInQuote: nil id1: nil.					CrosticPanel oldStyle ifTrue: [morph extent: 26@24  "Oops"]].		morph predecessor: prev.		prev ifNotNil: [prev successor: morph].		prev _ morph]).! !!CrosticQuotePanel methodsFor: 'events' stamp: 'di 5/11/2000 09:37'!highlight: morph	self unhighlight.	cluesPanel unhighlight.	morph startOfWord morphsInWordDo:		[:m | m color: Color lightGreen.		(cluesPanel letterMorphs at: m indexInQuote) color: Color lightMagenta].	morph color: Color green.	(cluesPanel letterMorphs at: morph indexInQuote) color: Color magenta.! !!CrosticQuotePanel methodsFor: 'events' stamp: 'di 5/10/2000 09:25'!keyCharacter: aLetter atIndex: indexInQuote nextFocus: nextFocus	(self letterMorphs at: indexInQuote) setLetter: aLetter.	(cluesPanel letterMorphs at: indexInQuote) setLetter: aLetter.	self highlight: nextFocus! !!CrosticQuotePanel methodsFor: 'events' stamp: 'di 5/10/2000 08:49'!lostFocus	self unhighlight.	cluesPanel unhighlight! !!WordGamePanelMorph class methodsFor: 'as yet unclassified' stamp: 'di 5/10/2000 07:41'!includeInNewMorphMenu	^ false! !!CipherPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/10/2000 09:52'!includeInNewMorphMenu	^ true! !!CipherPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/10/2000 10:08'!new	"NOTE: Use newFromQuote: rather than new to create new CipherPanels"	^ self newFromQuote: self sampleString" Here are some other examples...World addMorph: (CipherPanel newFromQuote: 'BPFFXY LZY PK ROY RPBY PG XPAY HOYG EJCM SXJROYK FJG''R APR QCR PR''K EJC HOJ GYYF ROY LXRYMLRPJGK.  KJCMSY CGNGJHG')World addMorph: (CipherPanel newFromQuote: 'Y FRV TRK HJRH QVL QS HJL BPLRHLTH WZLRTXPLT YV ZYSL YT OQYVB MJRH WLQWZL TRK KQX FRVVQH OQ.')World addMorph: (CipherPanel newFromQuote: 'XI''H SAZRG: SDCIZCIZT EZDEAZ TD CDI SGZRIZ EGDPGZHH.')World addMorph: (CipherPanel newFromQuote: 'PY MOJ WPMMWJ MZGYR ZL MOJ GZSWH PM''R YZ RZZYJS HZYJ MOBY RBPH.')World addMorph: (CipherPanel newFromQuote: 'PYSLHYA DJP VBHHLXYAA BPY BGNBMA PLUVQ LX AQMGY; QVY HPLXSLHBG LXUPYCLYXQA BPY NBPK BXC DPLYXCGM AKLGYA.')World addMorph: (CipherPanel newFromQuote: 'U HWVS RJ AHOST RLO FOOQOST TJUSM AJIO LOVNC WUXRUSM VST HWVCUSM LVSTZVWW. -- TVNUT WORROEIVS VXROE LUA KGUSRGHWO-ZCHVAA LOVER JHOEVRUJS')"! !!CipherPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/10/2000 10:06'!newFromQuote: encodedString	"Use this to creat new panels instead of new."	^ super new encodedQuote: encodedString! !!CipherPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/8/2000 11:58'!sampleString	^'E SGJC OSCVC LICGNV, ENGRCV, JEVEMAV. E SGJC OSEV QGVVEMA XMI [SMWWDHMML] ... EO''V HMALCIXKW OM SGJC VMNCOSEAR OSGO EAVQEICV GAL LIEJCV DMK. -- ZGIZIG VOICEVGAL'! !!CrosticPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/11/2000 20:37'!includeInNewMorphMenu	^ true! !!CrosticPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/11/2000 20:37'!new	"NOTE: Use newFromFile: rather than new to create new CrosticPanels"	^ self newFromFile: (ReadStream on: self sampleFile)! !!CrosticPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/12/2000 00:09'!newFromFile: aStream  "World addMorph: CrosticPanel new"	| quoteWithBlanks citation clue numberLine numbers clues answers indexableQuote quotePanel crosticPanel buttonRow quoteWidth |	quoteWithBlanks _ aStream nextLine.	quoteWithBlanks _ quoteWithBlanks asUppercase select: [:c | c isLetter or: [' -' includes: c]].	indexableQuote _ quoteWithBlanks select: [:c | c isLetter].	citation _ aStream nextLine.	aStream nextLine.	clues _ OrderedCollection new.	answers _ OrderedCollection new.	[aStream atEnd] whileFalse:		[clue _ aStream nextLine.		"Transcript cr; show: clue."		clues addLast: clue.		numberLine _ aStream nextLine.		numbers _ Scanner new scanTokens: numberLine.		answers addLast: numbers].	"Consistency check: "	(citation asUppercase select: [:c | c isLetter]) =		(String withAll: (answers collect: [:a | indexableQuote at: a first]))		ifFalse: [self error: 'mal-formed crostic file'].		crosticPanel _ super new.	quotePanel _ CrosticQuotePanel new quote: quoteWithBlanks answers: answers cluesPanel: crosticPanel.	crosticPanel color: quotePanel firstSubmorph color;		quote: indexableQuote clues: clues answers: answers quotePanel: quotePanel.	buttonRow _ crosticPanel buttonRow.	quoteWidth _ (crosticPanel width + quotePanel firstSubmorph width)					max: buttonRow width.	quotePanel extent: quoteWidth @ 9999.	crosticPanel addMorph: quotePanel.	^ crosticPanel breakColumnAndResizeWithButtons: buttonRow! !!CrosticPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/12/2000 15:12'!oldStyle	"return true if we should cross-index all the cells (takes more space)."	^ false! !!CrosticPanel class methodsFor: 'as yet unclassified' stamp: 'di 5/11/2000 21:43'!sampleFile	^'Men and women do not feel the same way about dirt.  Women for some hormonal reason can see individual dirt molecules, whereas men tend not to notice them until they join together into clumps large enough to support commercial agriculture.Dave Barry''s Guide to MarriageBoccaccio''s collection of tales74 19 175 156 9 122 84 113 104Wooden instrument of Swiss herders67 184 153 103 14 142 148 54 3Evening service76 99 154 171 89 194 69Russian-born American anarchist (2 wds)159 102 177 25 186 134 128 82 50 62 11Apple-polish (2 wds)32 190 129 126 179 157 79 170Visual-gesture means of communication4 178 27 168 150 185 114Postponed contest173 58 77 65 8 124 85Groundbreaking invention98 15 116 162 112 37 92 155 70 187Material used to make English longbows132 195 28Gracile48 191 145 152Have the effrontery; experience a high (2 wds)164 61 137 33 17 45Florentine painter who experimented with perspective91 181 189 2 20 81 167Sondheim opus (3 wds)72 109 147 13 192 165 93 40 115 138 6 63Spanish rake108 56 44 133 193 29 125Emergence  as of an adult butterfly106 149 59 41 24 135 87 68Type of rifle (hyph)111 7 143 73 39 30 105 95 53Free of charge (3 wds)176 107 120 130 160 22 46 34 94 71Pie filling86 75 136 118 43Master filmmaker31 151 174 51 163 144Longtime sportswriter for the NY Herald tribune (2 wds)60 140 12 101 55 188 166 121Birthplace of Erasmus47 64 141 21 10 180 36 80 1Mae West classic (3 wds)127 123 161 110 183 5 139 97 88Element that glows blue in the dark100 90 35 182 146 117 169 26Sturm und Drang writer158 172 119 16 52 23Starfish or sea cucumber18 66 96 83 57 49 78 131 38 42'! !WordGameLetterMorph initialize!