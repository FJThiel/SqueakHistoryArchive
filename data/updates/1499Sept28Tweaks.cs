'From Squeak 2.5 of August 6, 1999 [latest update: #1498] on 28 September 1999 at 10:53:18 am'!"Change Set:		Sept28TweaksDate:			28 September 1999Author:			Dan IngallsSeveral tweaks relating to latest spate of updates...[Dan Ingalls] Made magnifier update constantly, to track animations.[Jason McVay] Check for arity of keystrokeActionSelector in PluggableListMorph>>keyStroke:.[Alexander Lazarevic and Bert Freudenberg] Removes use of macOptionKeyPressed in anyModifierKeyPressed.[Mark Guzdial] Resurrects the B3DMorph demo, although set texture still doesn't work.[Mark Guzdial] Uses new color picker to choose new color for all pages."!!B3DMorph methodsFor: 'initialize' stamp: 'mjg 9/28/1999 10:19'!initialize	super initialize.	geometry _ B3DBox from: (-0.7@-0.7@-0.7) to: (0.7@0.7@0.7).	camera _ B3DCamera new.	(self confirm:'Put me into a clipping frame?')		ifTrue:[camera position: 0@0@1.5]		ifFalse:[camera position: 0@0@2. color _ nil].	camera nearDistance: 0.1.	camera farDistance: 5.0.	self extent: 100@100.	texture _ (Form extent: 100@100) asTexture.	angle _ 0.! !!BookMorph methodsFor: 'accessing' stamp: 'mjg 9/28/1999 11:57'!setAllPagesColor: aColor	"Set the color of all the pages to a new color"	self pages do: [:page | page color: aColor].! !!BookMorph methodsFor: 'menu' stamp: 'mjg 9/28/1999 11:58'!setPageColor	"Get a color from the user, then set all the pages to that color"	self currentPage ifNil: [^ self].	ColorPickerMorph new		sourceHand: self activeHand;		target: self;		selector: #setAllPagesColor:;		originalColor: self currentPage color;		addToWorld: self world			near: self fullBounds! !!InputSensor methodsFor: 'modifier keys' stamp: 'di 9/28/1999 08:29'!anyModifierKeyPressed	"ignore, however, the shift keys 'cause that's not REALLY a command key"	^ self primMouseButtons anyMask: 16r70	"cmd | opt | ctrl"! !!MagnifierMorph methodsFor: 'stepping' stamp: 'di 9/28/1999 07:57'!step	self changed! !!MagnifierMorph methodsFor: 'stepping' stamp: 'di 9/28/1999 07:57'!stepTime	^ 0! !!MorphicEvent methodsFor: 'keyboard' stamp: 'di 9/28/1999 08:29'!anyModifierKeyPressed	"ignore, however, the shift keys 'cause that's not REALLY a command key "	^ self buttons anyMask: 16r70	"cmd | opt | ctrl"! !!PluggableListMorph methodsFor: 'model access' stamp: 'di 9/28/1999 08:10'!keyStroke: event 	"Process potential command keys"	| args aChar aLowercaseChar oldSelection aSpecialKey nextSelection nextSelectionList nextSelectionText max howManyItemsShowing |	aChar _ event keyCharacter.	(event anyModifierKeyPressed or: [self listHandlesBasicKeys not])		ifTrue: 			[keystrokeActionSelector == nil ifTrue: [^ nil].			args _ keystrokeActionSelector numArgs.			args = 1 ifTrue:				[^ model perform: keystrokeActionSelector with: aChar].			args = 2 ifTrue:				[^ model perform: keystrokeActionSelector with: aChar with: self].			^ self error: 'keystrokeActionSelector must be a 1- or 2-keyword symbol'].	oldSelection _ self selectionIndex.	nextSelection _ oldSelection.	aSpecialKey _ aChar asciiValue.	max _ self maximumSelection.	aSpecialKey < 32		ifTrue: 			[" one of a number of special keys"			aSpecialKey == 31				ifTrue: 					[" down arrow"					nextSelection _ oldSelection + 1.					nextSelection > max ifTrue: [nextSelection _ 1]].			aSpecialKey == 30				ifTrue: 					[" up arrow"					nextSelection _ oldSelection - 1.					nextSelection < 1 ifTrue: [nextSelection _ max]].			aSpecialKey == 1 ifTrue: [" home"				nextSelection _ 1].			aSpecialKey == 4 ifTrue: [" end"				nextSelection _ max].			howManyItemsShowing _ self numSelectionsInView.			aSpecialKey == 11 ifTrue: [" page up"				nextSelection _ 1 max: oldSelection - howManyItemsShowing].			aSpecialKey == 12 ifTrue: [" page down"				nextSelection _ oldSelection + howManyItemsShowing min: max].			model okToChange ifFalse: [^ self].  "No change if model is locked"			^ self changeModelSelection: nextSelection].	aLowercaseChar _ aChar asLowercase.	nextSelectionList _ list copyFrom: oldSelection + 1 to: max.	nextSelectionList addAll: (list copyFrom: 1 to: oldSelection).	"Get rid of blanks as in indented hierarchal entries"	nextSelectionText _ nextSelectionList detect:		[:a | (a asString withBlanksTrimmed at: 1) asLowercase == aLowercaseChar]				ifNone: [nextSelectionText _ nil].	nextSelectionText == nil ifTrue: [^ self flash].	nextSelection _ list findFirst: [:a | a == nextSelectionText].	model okToChange ifFalse: [^ self].  "No change if model is locked"	^ self changeModelSelection: nextSelection! !