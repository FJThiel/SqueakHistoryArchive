'From Squeak2.9alpha of 17 July 2000 [latest update: #2615] on 14 September 2000 at 1:54:47 pm'!"Change Set:		projectMiscDate:			14 September 2000Author:			Bob Arning- fix IndexFile>>logStream so that it works in a browser (full file paths required)- add variable 'loaderUrl' to ServerDirectory to support emailing correct project reference- change ServerDirectory>>fullPath: to supply additional info in copy- change ServerDirectory>>openNoDataFTP to retry USER when retrying PASS- when loading or saving projects on an ftp server, sleep the server when done so connections don't remain open so long"!Object subclass: #ServerDirectory	instanceVariableNames: 'server directory type user passwordHolder group moniker altURL urlObject socket loaderUrl '	classVariableNames: 'Servers '	poolDictionaries: ''	category: 'Network-Kernel'!!ServerDirectory commentStamp: 'RAA 9/14/2000 13:23' prior: 0!Holds all the information needed to read or write on a directory of an internet server.  I am used for FTP and HTTP (and STMP?  NNTP?).  The password policy is: unless it is a public password (like annomyous), clear all passwords before any snapshot.  There is a way to store passwords on the disk.server 		'www.disney.com'  or '123.34.56.08' or the ServerDirectory above me 			(if I am a subdirectory sharing the info in a master directory)directory 	'ftp/pubs/'  name of my directory within the server or superdirectory.			(for file://, directory is converted to local delimiters.)type 		#ftp	what you can do in this directoryuser 		'Jones45'password 	an instance of Password.  group 		an Association ('group name' -> an array of ServerDirectorys)			If this first one is down, try the next one.  Store on all of them.  I am in the list.moniker 	'Main Squeak Directory'  Description of this directory.altURL		When a FTP server holds some web pages, the altURL of those pages is often			different from the FTP directory.  Put the altURL here.  If the directory is 			'public_html/Squeak/', the altURL might be 'www.webPage.com/~kaehler2/			Squeak/'.urlObject	An instance of a subclass of Url.  It is very good at parsing complex urls.			Relative references.  file:// uses this.  Use this in the future instead of 			server and directory inst vars.socket		nil or an FTPSocket.  Only non-nil if the connection is being kept open			for multiple stores or retrievals.  loaderUrl	a partial url that is ised to invoke squeak in a browser and load a project.A normal call on some command like (aServer getFileNamed: 'foo') does not set 'socket'.  Socket being nil tells it to close the connection and destroy the socket after this one transcation.  If the caller stores into 'socket', then the same command does NOT close the connection.  	Call 'openKeepFTP' or 'openGroup' to store into socket and keep the connection open.  It is up to the user to call 'quit' or 'closeGroup' later.DD openKeepFTP.Transcript cr; show: ((DD getFileNamed: '1198misc-tkKG.cs') next: 100).Transcript cr; show: ((DD getFileNamed: '1192multFinder-tkKF.cs') next: 100).DD quit.!]style[(677 8 1493)f1,f1LPassword Comment;,f1!!IndexFile methodsFor: 'dictionary access' stamp: 'RAA 9/14/2000 13:32'!logStream	logfile ifNil: [		^logfile _ StandardFileStream new 			open: (FileDirectory default fullNameFor: filename,'.log') forWrite: true;			setToEnd	].	logfile closed ifTrue: [logfile open; setToEnd].	^ logfile! !!Project methodsFor: 'file in/out' stamp: 'RAA 9/11/2000 19:11'!installRemoteFrom: strm named: otherProjectName	| projViewer is proj |	"Find the current ProjectViewMorph, fetch the project, install in ProjectViewMorph without changing size, and jump into new project."	ProgressNotification signal: '2:fileSizeDetermined ',strm size printString.	projViewer _ self findProjectView: otherProjectName.	projViewer ifNil: [		"(SelectionMenu confirm: 'No old thumbnail found. Debug?') ifTrue: [self halt]."		ProjectViewMorph openFromFile: strm.		"Later check rest of servers if fails.  Still have list here"		^self	].	is _ strm asUnZippedStream.	ProgressNotification  signal: '3:unzipped'.	strm sleep.		"if ftp, let the connection close"	is _ is fileInObjectAndCode.	ProgressNotification  signal: '4:filedIn'.	(is isKindOf: ImageSegment) ifTrue: [		proj _ is arrayOfRoots detect: [:mm | mm class == Project] 					ifNone: [nil].		proj ifNotNil: [			proj versionFrom: strm.			(projViewer project isKindOf: DiskProxy) ifFalse: [				projViewer project changeSet name: ChangeSet defaultName].			proj changeSet name: otherProjectName.			CurrentProjectRefactoring currentBeParentTo: proj.			(projViewer owner isKindOf: SystemWindow) ifTrue: [				projViewer owner model: proj].			projViewer project: proj.			"stop background drawing NOW"			ProgressNotification  signal: '9999 about to enter project'.				^ ProjectEntryNotification signal: proj		]	].	ProjectViewMorph openFromFile: strm.	"Later check rest of servers if fails.  Still have list here"! !!Project methodsFor: 'file in/out' stamp: 'RAA 9/11/2000 17:47'!storeOnServerInnards	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	| servers resp newName local primaryServerDirectory serverVersionPair localDirectory localVersionPair myVersionNumber warning maxNumber |	"NebraskaDebug at: #savingproject add: {'beginning'}."	"Find out what version"	(servers _ self serverList) isEmpty ifTrue: [		(primaryServerDirectory _ self findAFolderToStoreProjectIn) ifNotNil: [			servers _ Array with: primaryServerDirectory.			urlList _ Array with: primaryServerDirectory realUrl, '/'.		].	] ifFalse: [		primaryServerDirectory _ servers first.	].	localDirectory _ self squeakletDirectory.	serverVersionPair _ self class mostRecent: self name onServer: primaryServerDirectory.	localVersionPair _ self class mostRecent: self name onServer: localDirectory.	maxNumber _ myVersionNumber _ self currentVersionNumber.	ProgressNotification signal: '2:versionsDetected'.	"NebraskaDebug at: #savingproject add: {'versions detected'}."	warning _ ''.	myVersionNumber < serverVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) on the server'.		maxNumber _ maxNumber max: serverVersionPair second.	].	myVersionNumber < localVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) in the local directory'.		maxNumber _ maxNumber max: localVersionPair second.	].	warning isEmpty ifFalse: [		myVersionNumber = 0 ifTrue: [			warning _ warning,'\THIS PROJECT HAS NEVER BEEN SAVED'		].		warning _ 'WARNING', '\Project: ',self name,warning.		resp _ (PopUpMenu labels: 'Store anyway\Cancel' withCRs) startUpWithCaption: 			(warning, '\Please cancel, rename this project, and see what is there.') withCRs.			resp ~= 1 ifTrue: [^ nil]	].	version _ self bumpVersion: maxNumber.	"write locally - now zipped automatically"	newName _ self versionedFileName.	self exportSegmentFileName: newName directory: localDirectory.			"NebraskaDebug at: #savingproject add: {'local save complete'}."	ProgressNotification signal: '4:localSaveComplete'.	"3 is deep in export logic"	primaryServerDirectory ifNotNil: [		local _ localDirectory oldFileNamed: newName.		resp _ primaryServerDirectory putFile: local named: newName retry: false.		local close.		resp == true ifFalse: [			self inform: 'the primary server of this project seems to be down (',								resp printString,')'. 			^ self		].		primaryServerDirectory sleep.	"if ftp, close the connection"	].	"NebraskaDebug at: #savingproject add: {'remote save complete'}."	ProgressNotification signal: '9999 save complete'.	"Later, store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	"2 to: servers size do: [:aServer | aServer putFile: local named: newName]."! !!Project methodsFor: 'file in/out' stamp: 'RAA 9/14/2000 13:54'!urlForLoading	| aDir |	"compose a url that will load me in someone's browser"	urlList isEmptyOrNil ifTrue: [^nil].	aDir _ ServerDirectory new fullPath: urlList first.	aDir loaderUrl isEmptyOrNil ifTrue: [^nil].	^		aDir loaderUrl,		'?',		self versionedFileName! !!Project methodsFor: 'SuperSwiki' stamp: 'RAA 9/14/2000 13:54'!tellAFriend: emailAddressOrNil	| urlForLoading |"Project current tellAFriend"	(urlForLoading _ self urlForLoading) ifNil: [		^self inform: 'Since this project has not been saved yet,I cannot tell someone where it is.'	].	FancyCelesteComposition new		celeste: nil 		to: (emailAddressOrNil ifNil: ['RECIPIENT.GOESHERE'])		subject: 'A Squeak project link you might like'		initialText: 'This is a link to a Squeak project: '		theLinkToInclude: 			'<A HREF="',			urlForLoading,			'">',			self name,			'</A>';		open.! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'RAA 9/11/2000 19:10'!openFromFile: preStream fromDirectory: aDirectoryOrNil	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world." 	| morphOrList window proj |	ProgressNotification signal: '2:fileSizeDetermined ',preStream size printString.	morphOrList _ preStream asUnZippedStream.	preStream sleep.		"if ftp, let the connection close"	ProgressNotification  signal: '3:unzipped'.	morphOrList _ morphOrList fileInObjectAndCode.	ProgressNotification  signal: '4:filedIn'.	ProgressNotification  signal: '9999 about to enter project'.		"the hard part is over"	(morphOrList isKindOf: ImageSegment) ifTrue: [		(morphOrList arrayOfRoots count: [:mm | mm class == Project]) > 1 ifTrue: [			self error: 'which project is main?']. 	"debug"		proj _ morphOrList arrayOfRoots detect: [:mm | mm class == Project] 					ifNone: [nil].		"rename the project if it conflicts?"		proj ifNotNil: [			proj versionFrom: preStream.			proj lastDirectory: aDirectoryOrNil.			CurrentProjectRefactoring currentBeParentTo: proj.			Smalltalk isMorphic ifTrue: [				ProjectViewOpenNotification signal ifTrue: [					window _ (SystemWindow labelled: proj name) model: proj.					window						addMorph: (self on: proj)						frame: (0@0 corner: 1.0@1.0).					window openInWorld				].			] ifFalse: [				ProjectView openAndEnter: proj.				"Note: in MVC we get no further than the above"			].			^ ProjectEntryNotification signal: proj		]	].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList _ morphOrList contentsMorph	].	(morphOrList isKindOf: PasteUpMorph) ifFalse: [		^ self inform: 'This is not a PasteUpMorph or exported Project.'	].	window _ self newMorphicProjectOn: morphOrList.	ProjectViewOpenNotification signal ifTrue: [window openInWorld].	window model enter! !!ServerDirectory methodsFor: 'do ftp' stamp: 'RAA 9/14/2000 13:42'!openNoDataFTP	"Open a connection to the directory and server I hold.  Return a FTPSocket.  No dataPort is opened.  When you are all done, be sure to tell the socket to QUIT, and then destroy it."	| so rr serverIP what |	Socket initializeNetwork.	socket ifNotNil: [socket isValid 			ifTrue: [^ socket]	"already open"			ifFalse: [socket _ nil]].	Cursor wait showWhile: [		FTPSocket retry: [serverIP _ NetNameResolver addressForName: server timeout: 20.					serverIP ~~ nil] 			asking: 'Trouble resolving server name.  Keep trying?'			ifGiveUp: [^ 'Could not resolve the server named: ', server].		so _ FTPSocket new.		so portNum: 21.		so connectTo: serverIP port: 21.  "21 is for the control connection"		so waitForConnectionUntil: FTPSocket standardDeadline.		].	Transcript cr; show: 'ftp: ', server; cr.	(rr _ so lookFor: '220 ') == true ifFalse: [^ rr].	"220 para1 Microsoft FTP Service"	[	"repeat both USER and PASS since some servers require it"		so sendCommand: 'USER ', user.		(rr _ so lookFor: '331 ') == true ifFalse: [^ rr].	"331 Password required"		so sendCommand: 'PASS ', self password.		"will ask user, if needed"		 (rr _ so lookSoftlyFor: '230 ') == true	] 	"230 User logged in"		whileFalse: [			rr first == $5 ifFalse: [^ rr].	"timeout"			passwordHolder _ nil.			what _ (PopUpMenu labels: 'enter password\give up' withCRs) 				startUpWithCaption: 'Would you like to try another password?'.			what = 1 ifFalse: [so destroy.  ^ rr]].	directory isEmpty ifFalse: [		so sendCommand: 'CWD ', directory.		(rr _ so lookFor: '250 ') == true ifFalse: [^ rr].	"250 CWD successful"	].	"Need to ask for name of directory to make sure?"	"socket _ so".	"If user wants to keep connnection open, he must store socket"	^ so! !!ServerDirectory methodsFor: 'accessing' stamp: 'RAA 9/14/2000 13:26'!fullPath: serverAndDirectory	"Parse and save a full path.  Convention:  if ftp://user@server/dir, then dir is relative to user's directory.  dir has no slash at beginning.  If ftp://server/dir, then dir is absolute to top of machine, give dir a slash at the beginning."	| start bare sz userAndServer both slash score match best sd |	bare _ serverAndDirectory.	sz _ serverAndDirectory size.	bare size > 0 ifTrue: [ 		start _ (bare copyFrom: 1 to: (8 min: sz)) asLowercase.		((start beginsWith: 'ftp:') or: [start beginsWith: 'nil:']) "fix bad urls"			ifTrue: [type _ #ftp.				bare _ bare copyFrom: (7 min: sz) to: bare size].		(start beginsWith: 'http:') 			ifTrue: [type _ #http.				bare _ bare copyFrom: (8 min: sz) to: serverAndDirectory size].		((start beginsWith: 'file:') or: [type == #file])			ifTrue: [type _ #file.				urlObject _ FileUrl absoluteFromText: serverAndDirectory.				^ self]].	userAndServer _ bare copyUpTo: self pathNameDelimiter.	both _ userAndServer findTokens: '@'.	slash _ both size.	"absolute = 1, relative = 2"	server _ both last.	both size > 1 ifTrue: [user _ both at: 1].	bare size > (userAndServer size + 1) 		ifTrue: [directory _ bare copyFrom: userAndServer size + slash to: bare size]		ifFalse: [directory _ ''].	"If this server is already known, copy in its userName and password"	type == #ftp ifFalse: [^ self].	score _ -1.	ServerDirectory serverNames do: [:name |		sd _ ServerDirectory serverNamed: name.		server = sd server ifTrue: [			match _ directory asLowercase charactersExactlyMatching: sd directory asLowercase.			match > score ifTrue: [score _ match.  best _ sd]]].	best ifNil: [		self fromUser	] ifNotNil: [		user _ best user.		altURL _ best altUrl.		loaderUrl _ best loaderUrl.		self password: best password	].! !!ServerDirectory methodsFor: 'accessing' stamp: 'RAA 9/14/2000 13:22'!loaderUrl	^loaderUrl! !!ServerDirectory methodsFor: 'accessing' stamp: 'RAA 9/14/2000 13:24'!loaderUrl: aString	loaderUrl _ aString! !!ServerDirectory methodsFor: 'object fileIn' stamp: 'RAA 9/14/2000 13:24'!convertsdtupgmaus0: varDict sdtupgmausl0: smartRefStrm	"These variables are automatically stored into the new instance #('server' 'directory' 'type' 'user' 'passwordHolder' 'group' 'moniker' 'altURL' 'urlObject' 'socket').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('loaderUrl')  If a non-nil value is needed, please assign it."! !!Stream methodsFor: 'as yet unclassified' stamp: 'RAA 9/11/2000 19:12'!sleep	"an FTP-based stream might close the connection here"! !!RemoteFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 9/11/2000 19:13'!sleep	"If we are done, then let the server know"	self close.	remoteFile sleep.! !