'From Squeak2.9alpha of 13 June 2000 [latest update: #2822] on 7 October 2000 at 6:32:49 pm'!"Change Set:		DropFixes-arDate:			7 October 2000Author:			Andreas RaabSome fixes related to grabbing/dropping. Removes the last explicit dependencies between hand morph and the tiling system and fixes dropping into flexed environments (verified by playing free cell in an embedded world ;-)"!AlignmentMorph subclass: #TileLikeMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting Tiles'!TileLikeMorph subclass: #CommandTilesMorph	instanceVariableNames: 'morph playerScripted '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting Tiles'!TileLikeMorph subclass: #CompoundTileMorph	instanceVariableNames: 'type testPart yesPart noPart '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting Tiles'!TileLikeMorph subclass: #PhraseTileMorph	instanceVariableNames: 'resultType brightenedOnEnter userScriptSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting Tiles'!!DropEvent methodsFor: 'transforming' stamp: 'ar 10/7/2000 18:28'!transformBy: aMorphicTransform	"Transform the receiver into a local coordinate system."	position _  aMorphicTransform globalPointToLocal: position.! !!DropEvent methodsFor: 'transforming' stamp: 'ar 10/7/2000 18:28'!transformedBy: aMorphicTransform	"Return the receiver transformed by the given transform into a local coordinate system."	^self shallowCopy transformBy: aMorphicTransform! !!Morph methodsFor: 'events-processing' stamp: 'ar 10/7/2000 18:25'!handleDropMorph: anEvent	"Handle a dropping morph."	| aMorph |	aMorph _ anEvent contents.	"Do a symmetric check if both morphs like each other"	(self wantsDroppedMorph: aMorph event: anEvent) ifFalse:[^self]. "I don't want her"	(aMorph wantsToBeDroppedInto: self) ifFalse:[^self]. "She doesn't want me"	anEvent wasHandled: true.	aMorph position: anEvent position + anEvent hand targetOffset.	self acceptDroppingMorph: aMorph event: anEvent.	aMorph justDroppedInto: self event: anEvent.! !!HandMorph methodsFor: 'grabbing/dropping' stamp: 'ar 10/7/2000 17:42'!attachMorph: m	"Position the center of the given morph under this hand, then grab it.	This method is used to grab far away or newly created morphs."	| delta |	delta _ m bounds extent // 2.	m position: (self position - delta).	m formerPosition: m position.	targetOffset _ m position - self position.	self addMorphBack: m.! !!HandMorph methodsFor: 'grabbing/dropping' stamp: 'ar 10/7/2000 18:29'!dropMorph: aMorph event: anEvent	"Drop the given morph which was carried by the hand"	| event |	event _ DropEvent new setPosition: self position contents: aMorph hand: self.	owner processEvent: event.	event wasHandled ifFalse:[aMorph rejectDropMorphEvent: event].	self mouseOverHandler processMouseOver: lastMouseEvent.! !!HandMorph methodsFor: 'grabbing/dropping' stamp: 'ar 10/7/2000 17:01'!grabMorph: aMorph	"Grab the given morph (i.e., add it to this hand and remove it from its current owner) without changing its position. This is used to pick up a morph under the hand's current position, versus attachMorph: which is used to pick up a morph that may not be near this hand."	| grabbed tfm |	self releaseMouseFocus.	self flag: #arNote. "Fix dropping by taking the target offset into account"	grabbed _ aMorph aboutToBeGrabbedBy: self.	grabbed ifNil:[^self].	grabbed _ grabbed topRendererOrSelf.	tfm _ grabbed owner ifNil:[IdentityTransform new] ifNotNil:[grabbed owner grabTransform].	grabbed _ grabbed transformedBy: tfm.	(grabbed fullBounds containsPoint: self position) ifFalse:[grabbed position: self position].	targetOffset _ grabbed position - self position.	self addMorphBack: grabbed.! !!MorphicEventDispatcher methodsFor: 'dispatching' stamp: 'ar 10/7/2000 18:09'!dispatchDropEvent: anEvent with: aMorph	"Find the appropriate receiver for the event and let it handle it. The dispatch is similar to the default dispatch with one difference: Morphs are given the chance to reject an entire drop operation. If the operation is rejected, no drop will be executed."	| inside index morphs child localEvt |	"Try to get out quickly"	(aMorph fullBounds containsPoint: anEvent cursorPoint)		ifFalse:[^#rejected].	"Give aMorph a chance to repel the dropping morph"	aMorph rejectDropEvent: anEvent.	anEvent wasHandled ifTrue:[^self].	"Go looking if any of our submorphs wants it"	index _ 1.	inside _ false.	morphs _ aMorph submorphs.	[index <= morphs size] whileTrue:[		child _ morphs at: index.		localEvt _ anEvent transformedBy: (child transformedFrom: aMorph).		(child processEvent: localEvt using: self) == #rejected ifFalse:[			localEvt wasHandled ifTrue:[^anEvent wasHandled: true]. "done"			inside _ true.			index _ morphs size]. "break"		index _ index + 1.	].	inside ifFalse:[inside _ aMorph containsPoint: anEvent cursorPoint event: anEvent].	inside ifTrue:[^aMorph handleDropMorph: anEvent].	^#rejected! !!TileLikeMorph methodsFor: 'testing' stamp: 'ar 10/7/2000 16:50'!isTileLike	^true! !!TileLikeMorph methodsFor: 'dropping/grabbing' stamp: 'ar 10/7/2000 16:52'!aboutToBeGrabbedBy: aHand	| editor |	editor _ self topEditor.	editor ifNotNil:[editor scriptEdited].	^super aboutToBeGrabbedBy: aHand! !!TileMorph methodsFor: 'dropping/grabbing' stamp: 'ar 10/7/2000 16:52'!aboutToBeGrabbedBy: aHand	| editor |	editor _ self topEditor.	editor ifNotNil:[editor scriptEdited].	^super aboutToBeGrabbedBy: aHand! !PhraseTileMorph removeSelector: #isTileLike!CompoundTileMorph removeSelector: #isTileLike!CommandTilesMorph removeSelector: #isTileLike!