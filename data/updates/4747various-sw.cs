'From Squeak3.3alpha of 12 January 2002 [latest update: #4744] on 5 February 2002 at 11:50:38 pm'!"Change Set:		various-swDate:			5 February 2002Author:			Scott Wallace¥ Fixes bug that had broken the ability of a Viewer to be opened on a non-morph object.¥ Restores the feature that by default, the balloon help message seen in a Viewer for any method is the same as the method's own master comment.  For etoy scripts, the balloon help is provided by the literal tables (implementations of #additionsToViewerCategories) that define the etoy vocabulary; but for general use, e.g. when a Viewer used as a full inspector/browser for arbitrary objects, this becomes helpful.¥ Makes debugger only prompt for save-changes-on-button-hit for the actual buttons that require it; buttons that launch a new window, for example, do not need or want the intrusion.¥ Promotes #asMorph and #openAsMorph to class Object.  Try, for example, evaluating	'Hello world' openAsMorph"!!Object methodsFor: 'creation' stamp: 'sw 1/29/2002 21:43'!asMorph	"Open a morph, as best one can, on the receiver"	^ self asString asMorph	"234 asMorph(ScriptingSystem formAtKey: #TinyMenu) asMorph'fred' asMorph"! !!Object methodsFor: 'creation' stamp: 'sw 1/29/2002 21:45'!openAsMorph	"Open a morph, as best one can, on the receiver"	^ self asMorph openInHand"234 openAsMorph(ScriptingSystem formAtKey: #TinyMenu) openAsMorph'fred' openAsMorph"! !!CategoryViewer methodsFor: 'entries' stamp: 'sw 1/29/2002 21:33'!phraseForCommandFrom: aMethodInterface	"Answer a phrase for the non-slot-like command represented by aMethodInterface - classic tiles"	| aRow resultType cmd names argType argTile selfTile aPhrase balloonTextSelector stat inst aDocString universal tileBearingHelp |	aDocString _ aMethodInterface documentationOrNil.	aDocString = 'no help available' ifTrue: [aDocString _ nil].	names _ scriptedPlayer class namedTileScriptSelectors.	resultType _ aMethodInterface resultType.	cmd _ aMethodInterface selector.	(universal _ scriptedPlayer isUniversalTiles)		ifTrue:			[aPhrase _ scriptedPlayer universalTilesForInterface: aMethodInterface]		ifFalse: [cmd numArgs == 0			ifTrue:				[aPhrase _ PhraseTileMorph new vocabulary: self currentVocabulary.				aPhrase setOperator: cmd					type: resultType					rcvrType: #Player]			ifFalse:				["only one arg supported in classic tiles, so if this is fed				with a selector with > 1 arg, results will be very strange"				argType _ aMethodInterface typeForArgumentNumber: 1.				aPhrase _ PhraseTileMorph new vocabulary: self currentVocabulary.				aPhrase setOperator: cmd					type: resultType					rcvrType: #Player					argType: argType.				argTile _ ScriptingSystem tileForArgType: argType.				argTile position: aPhrase lastSubmorph position.				aPhrase lastSubmorph addMorph: argTile]].	(scriptedPlayer slotInfo includesKey: cmd)		ifTrue: [balloonTextSelector _ #userSlot].	(scriptedPlayer belongsToUniClass and: [scriptedPlayer class includesSelector: cmd])		ifTrue:			[aDocString ifNil:				[aDocString _ (scriptedPlayer class userScriptForPlayer: scriptedPlayer selector: cmd) documentationOrNil].			aDocString ifNil:				[balloonTextSelector _ #userScript]].	tileBearingHelp _ universal ifTrue: [aPhrase submorphs second] ifFalse: [aPhrase operatorTile]. 	aDocString		ifNotNil:			[tileBearingHelp setBalloonText: aDocString]		ifNil:			[balloonTextSelector ifNil:				[tileBearingHelp setProperty: #inherentSelector toValue: cmd.				balloonTextSelector _ #methodComment].			tileBearingHelp balloonTextSelector: balloonTextSelector].	aPhrase markAsPartsDonor.	cmd == #emptyScript ifTrue:		[aPhrase setProperty: #newPermanentScript toValue: true.		aPhrase setProperty: #newPermanentPlayer toValue: scriptedPlayer.		aPhrase submorphs second setBalloonText: 'drag and drop to add a new script'].	universal ifFalse:		[selfTile _ self tileForSelf.		selfTile position: aPhrase firstSubmorph position.		aPhrase firstSubmorph addMorph: selfTile].	aRow _ ViewerLine newRow borderWidth: 0; color: self color.	aRow elementSymbol: cmd asSymbol.	aRow addMorphBack: (ScriptingSystem tryButtonFor: aPhrase).	aRow addMorphBack: (Morph new extent: 4@2; beTransparent).	aRow addMorphBack: (self infoButtonFor: cmd).	aRow addMorphBack: aPhrase.	(names includes: cmd) ifTrue:		[aPhrase userScriptSelector: cmd.		aPhrase beTransparent.		aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.		aRow addMorphBack: (stat _ (inst _ scriptedPlayer scriptInstantiationForSelector: cmd) statusControlMorph).		inst updateStatusMorph: stat].	aRow beSticky; disableDragNDrop.	^ aRow! !!Debugger methodsFor: 'initialize' stamp: 'sw 12/14/2001 01:29'!optionalButtonRow	"Answer a button pane affording the user one-touch access to certain functions; the pane is given the formal name 'buttonPane' by which it can be retrieved by code wishing to send messages to widgets residing on the pane"	| aRow aButton aLabel |	aRow _ AlignmentMorph newRow beSticky.	aRow setNameTo: 'buttonPane'.	aRow clipSubmorphs: true.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightRed; borderWidth: 1; borderColor: Color red darker.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs do:		[:tuple |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: tuple second.				aButton					hResizing: #spaceFill;					vResizing: #spaceFill;					useRoundedCorners;					onColor: Color transparent offColor: Color transparent.				(#(proceed restart send doStep stepIntoBlock fullStack where) includes: tuple second)					ifTrue:						[aButton askBeforeChanging: true].				aLabel _ Preferences abbreviatedBrowserButtons 					ifTrue: [self abbreviatedWordingFor: tuple second]					ifFalse: [nil].				aButton label: (aLabel ifNil: [tuple first asString]).				tuple size > 2 ifTrue: [aButton setBalloonText: tuple third].				Preferences alternativeWindowLook 					ifTrue:[aButton borderWidth: 2; borderColor: #raised].				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!StandardViewer methodsFor: 'categories' stamp: 'sw 2/5/2002 23:49'!likelyCategoryToShow	"Choose a category to show based on what's already showing and on some predefined heuristics"	| possible all aCat currVocab |	all _ (scriptedPlayer categoriesForViewer: self) asOrderedCollection.	possible _ all copy.	currVocab _ self currentVocabulary.	self categoryMorphs do:		[:m |			aCat _ currVocab categoryWhoseTranslatedWordingIs:  m currentCategory.			aCat ifNotNil: [possible remove: aCat categoryName ifAbsent: []]].	(currVocab isKindOf: EToyVocabulary)  ifTrue: "hateful!!"		[((possible includes: #'instance variables') and: [scriptedPlayer hasUserDefinedSlots])			ifTrue:	[^ #'instance variables'].		((possible includes: #scripts) and: [scriptedPlayer hasUserDefinedScripts])			ifTrue:	[^ #'scripts']].	#(basic ) do:		[:preferred | (possible includes: preferred) ifTrue: [^ preferred]].	((scriptedPlayer isKindOf: Player) and: [scriptedPlayer hasOnlySketchCostumes]) ifTrue: [(possible includes: #tests) ifTrue: [^ #tests]].	#(#'color & border' tests color flagging comparing) do:		[:preferred | (possible includes: preferred) ifTrue: [^ preferred]].	^ possible size > 0		ifTrue:			[possible first]		ifFalse:			[all first]! !!String methodsFor: 'converting' stamp: 'sw 1/29/2002 11:06'!asMorph 	"Answer the receiver as a StringMorph"	^ StringMorph contents: self"'bugs black blood' asMorph openInHand"! !!String methodsFor: 'converting' stamp: 'sw 1/29/2002 21:18'!openAsMorph	"Open the receiver as a morph"	^ self asMorph openInHand ! !