'From Squeak2.8alpha of 13 January 2000 [latest update: #1927] on 14 March 2000 at 5:31:13 pm'!"Change Set:		projectUrl-tkNTDate:			13 March 2000Author:			Ted KaehlerFixes for writing out and bringing in Projects from a server.  Ability to find and jump to sub-projects even if they do not have URLs with them."!!ByteArray methodsFor: 'accessing' stamp: 'tk 3/13/2000 14:46'!bytesPerElement	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."	^ 1! !!ContextPart methodsFor: 'objects from disk' stamp: 'tk 3/12/2000 23:23'!storeDataOn: aDataStream	"Contexts are not allowed go to out in DataStreams.  They must be included inside an ImageSegment."	self error: 'This Context was not included in the ImageSegment'.		"or perhaps ImageSegments were not used at all"	^ nil! !!DiskProxy methodsFor: 'as yet unclassified' stamp: 'tk 3/12/2000 22:40'!comeFullyUpOnReload: smartRefStream	"Internalize myself into a fully alive object after raw loading from a DataStream. (See my class comment.)  DataStream will substitute the object from this eval for the DiskProxy."	| globalObj symbol pr |	symbol _ globalObjectName.	"See if class is mapped to another name"	(smartRefStream respondsTo: #renamed) ifTrue: [		symbol _ smartRefStream renamed at: symbol ifAbsent: [symbol]].	globalObj _ Smalltalk at: symbol 		ifAbsent: [^ self halt: 'Global not found'].	((symbol == #World) and: [World == nil]) ifTrue: [		self inform: 'These objects will work better if opened in a Morphic World.Dismiss and reopen all menus.'].	preSelector ifNotNil: [		Symbol hasInterned: preSelector ifTrue: [:selector |			globalObj _ globalObj perform: selector]].	symbol == #Project ifTrue: [		pr _ globalObj perform: constructorSelector withArguments: constructorArgs.		^ pr ifNil: [self] ifNotNil: [pr]].	"keep the Proxy if Project does not exist"	constructorSelector ifNil: [^ globalObj].	constructorSelector ifNotNil: [		Symbol hasInterned: constructorSelector ifTrue: [:selector |			^ globalObj perform: selector					withArguments: constructorArgs]].					"args not checked against Renamed"	^ nil 	"was not in proper form"! !!DiskProxy methodsFor: 'as yet unclassified' stamp: 'tk 3/10/2000 23:50'!constructorArgs	^ constructorArgs! !!DiskProxy methodsFor: 'exceptions' stamp: 'tk 3/14/2000 16:27'!enter	"Enter the new project"	self enter: false revert: false saveForRevert: false.! !!DiskProxy methodsFor: 'exceptions' stamp: 'tk 3/11/2000 00:48'!enter: returningFlag revert: revertFlag saveForRevert: saveForRevert	"Look for our project on the server, then try to enter it!!  DiskProxy is acting as a stub for the real thing.  Called from a ProjectViewMorph in the current project.  If have url, use it.  Else look in current Project's server and folder."	constructorSelector == #namedUrl: ifTrue: ["Project namedUrl: xxx"		^ ((Smalltalk at: globalObjectName) perform: #fromUrl:					withArguments: constructorArgs) ].	constructorSelector == #named: ifTrue: [		Project current fromMyServerLoad: constructorArgs first].	"name"! !!FlashPlayerMorph methodsFor: 'project transition' stamp: 'tk 3/10/2000 21:01'!beTransitionFrom: srcProjectName to: dstProjectName	"Make the receiver the animation between the two projects"	| srcProject dstProject |	srcProject _ (Project named: srcProjectName) ifNil: [Project current].	dstProject _ (Project named: dstProjectName) ifNil: [Project current].	(dstProject projectParameters at: #flashTransition ifAbsentPut:[IdentityDictionary new])		at: srcProject put: self.! !!FlashPlayerMorph class methodsFor: 'project transition' stamp: 'tk 3/10/2000 21:03'!transitionFrom: srcProjectName to: dstProjectName	"Return the transition between the two projects"	| srcProject dstProject |	srcProject _ (Project named: srcProjectName) ifNil: [Project current].	dstProject _ (Project named: dstProjectName) ifNil: [Project current].	^dstProject projectParameters at: #flashTransition ifPresent:[:dict|		dict at: srcProject ifAbsent:[nil]].! !!Form methodsFor: 'private' stamp: 'tk 3/13/2000 15:21'!hackBits: bitThing	"This method provides an initialization so that BitBlt may be used, eg, to 	copy ByteArrays and other non-pointer objects efficiently.	The resulting form looks 4 wide, 8 deep, and bitThing-size-in-words high."	width _ 4.	depth _ 8.	bitThing class isBits ifFalse: [self error: 'bitThing must be a non-pointer object'].	bitThing class isBytes		ifTrue: [height _ bitThing basicSize // 4]		ifFalse: [height _ bitThing basicSize].	bits _ bitThing! !!HandMorph methodsFor: 'world menu commands' stamp: 'tk 3/10/2000 21:05'!projectThumbnail	"Offer the user a menu of project names. Attach to the hand a thumbnail of the project the user selects."	| menu projName pr |	menu _ MVCMenuMorph entitled: 'Select Project'.	menu add: (Project current name, ' (current)') action: Project current name.	menu addLine.	Project allNames do: [:n | menu add: n action: n].	projName _ menu invokeAt: self position in: self world.	projName ifNotNil:		[(pr _ Project named: projName) 			ifNotNil: [self attachMorph: (ProjectViewMorph on: pr)]			ifNil: [self inform: 'can''t seem to find that project']].! !!PositionableStream methodsFor: 'accessing' stamp: 'tk 3/13/2000 15:16'!nextWordsInto: aBitmap 	| blt pos mainX mainY frontX frontY little source |	"Fill the word based buffer from my collection.  Stored on stream as Little Endian.  Optimized for speed."	(collection class isBytes) ifTrue:		["1 to: aBitmap size do: [:index | aBitmap at: index put: (self nextNumber: 4)]."		little _ Smalltalk endianness == #little.		collection basicSize \\ 4 = 0 			ifTrue: [source _ collection.  					pos _ self position.					self skip: aBitmap size * aBitmap bytesPerElement "1, 2, or 4"]			ifFalse: [source _ self next: aBitmap size * aBitmap bytesPerElement.						"forced to copy it into a buffer"					pos _ 0].		mainX _ pos \\ 4.   mainY _ pos // 4.	"two Blts required if not word aligned"		frontX _ 0.  frontY _ mainY + 1.		blt _ (BitBlt toForm: (Form new hackBits: aBitmap)) 					sourceForm: (Form new hackBits: source).		blt combinationRule: Form over.  "store"		blt sourceX: mainX; sourceY: mainY; height: aBitmap basicSize; width: 4-mainX.		blt destX: 0; destY: 0.		little ifTrue: [blt sourceX: 0; destX: mainX].	"just happens to be this way!!"		blt copyBits.		mainX = 0 ifTrue: [^ aBitmap].		"second piece when not word aligned"		blt sourceX: frontX; sourceY: frontY; height: aBitmap size; width: mainX.		blt destX: 4-mainX; destY: 0.		little ifTrue: [blt sourceX: 4-mainX; destX: frontX].	"draw picture to understand this"		blt copyBits.		^ aBitmap].	^ self next: aBitmap size into: aBitmap startingAt: 1.! !!Project methodsFor: 'file in/out' stamp: 'tk 3/14/2000 17:31'!fromMyServerLoad: otherProjectName	| servers pair thumbnailWindow pvm pr |	"If a newer version of me is on the server, load it."	(pr _ Project named: otherProjectName) ifNotNil: ["it appeared"		^ pr enter].	(servers _ self serverList) isEmpty 		ifTrue: [^ self inform: 			'Current project does not know a server either.'].	pair _ self class mostRecent: otherProjectName onServer: servers first.	pair first ifNil: [^ self inform: 'can''t find file on server ', pair first].	"Find parent project, go there, zap old thumbnail"	self world submorphsDo: [:sub | 		(sub isKindOf: SystemWindow) ifTrue: [			(pvm _ sub findA: ProjectViewMorph) ifNotNil: [				(pvm project class == DiskProxy and: 					[pvm project constructorArgs first = otherProjectName])						ifTrue: [thumbnailWindow _ sub]]].		(sub isKindOf: ProjectViewMorph) ifTrue: [				((pvm _ sub project) class == DiskProxy and: 					[pvm constructorArgs first = otherProjectName])						ifTrue: [thumbnailWindow _ sub]].		].	thumbnailWindow 		ifNotNil: [thumbnailWindow delete.			thumbnailWindow owner ifNotNil: [^ self]]	"user refused"		ifNil: [(SelectionMenu confirm: 'no thumbnail. Debug?') ifTrue: [self halt]].	"replace with a new one"	ProjectViewMorph openFromFile: (servers first oldFileNamed: pair first).		"Later check rest of servers if fails.  Still have list here"! !!Project methodsFor: 'file in/out' stamp: 'tk 3/14/2000 17:24'!loadFromServer	| servers pair resp thumbnailWindow pvm |	"If a newer version of me is on the server, load it."	(servers _ self serverList) isEmpty 		ifTrue: [^ self inform: 'This project thinks it has never been on a server'].	pair _ self class mostRecent: self name onServer: servers first.	pair first ifNil: [^ self inform: 'can''t find file on server ', pair first].	(Base64MimeConverter decodeInteger: version unescapePercents) > pair second ifTrue: [		^ self inform: 'That server has an older version of the project.'].	version = (pair first findTokens: '|.') second 		ifTrue: [resp _ (PopUpMenu labels: 'Reload anyway\Cancel' withCRs) startUpWithCaption: 					'The only changes are the ones you made here.'.				resp ~= 1 ifTrue: [^ nil]]		ifFalse: [resp _ (PopUpMenu labels: 'Load it\Cancel' withCRs) startUpWithCaption: 					'A newer version exists on the server.'.				resp ~= 1 ifTrue: [^ nil]].	"Find parent project, go there, zap old thumbnail"	parentProject == Project current ifFalse: [parentProject enter].	parentProject world submorphsDo: [:sub | 		(sub isKindOf: SystemWindow) ifTrue: [			(pvm _ sub findA: ProjectViewMorph) ifNotNil: [				pvm project == self ifTrue: [thumbnailWindow _ sub]]].		(sub isKindOf: ProjectViewMorph) ifTrue: [				((pvm _ sub project) class == DiskProxy and: 					[pvm constructorArgs first = self name])						ifTrue: [thumbnailWindow _ sub]].		].	thumbnailWindow 		ifNotNil: [thumbnailWindow delete.			thumbnailWindow owner ifNotNil: [^ self]]	"user refused"		ifNil: [(SelectionMenu confirm: 'no thumbnail. Debug?') ifTrue: [self halt]].	"replace with a new one"	ProjectViewMorph openFromFile: (servers first oldFileNamed: pair first).		"Later check rest of servers if fails.  Still have list here"! !!Project methodsFor: 'file in/out' stamp: 'tk 3/11/2000 00:44'!objectForDataStream: refStrm	| uu |	"I am about to be written on an object file.  Write a path to me in the other system instead."	(uu _ self url) size > 0 ifTrue: [		^ DiskProxy global: #Project selector: #fromUrl: args: 			(Array with: uu)].	^ DiskProxy global: #Project selector: #named: args: (Array with: self name)"	self inform: 'Project ', self name, ' is being written'.	super objectForDataStream: refStrm."! !!Project methodsFor: 'file in/out' stamp: 'tk 3/14/2000 12:42'!storeOnServer	| servers pair newVersion resp newName local folder |	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	"write locally"	self exportSegment.	"Find out what version"	(servers _ self serverList) isEmpty 		ifTrue: [folder _ PluggableFileList getFolderDialog openLabel:					 'Select a folder on a server:'.			folder ifNil: [^ self].			servers _ Array with: folder.			urlList _ Array with: folder realUrl.			pair _ Array with: nil with: -1]		ifFalse: [pair _ self class mostRecent: self name onServer: servers first].	(newVersion _ self newVersion: pair) ifNil: [^ self].	newName _ self name, '|', newVersion, '.pr'.	local _ FileStream oldFileNamed: self name, '.pr'.	resp _ servers first putFile: local named: newName retry: false.	resp ifFalse: [self inform: 'the primary server of this project seems to be down'.  ^ self].	version _ newVersion.	"committed"	"Later, store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	"2 to: servers size do: [:aServer | aServer putFile: local named: newName]."	"Rename disk file to be the final name"	local reset.	FileDirectory default rename: local localName toBe: newName.! !!Project methodsFor: 'file in/out' stamp: 'tk 3/14/2000 12:42'!url	"compose my url on the server"	urlList ifNotNil: [urlList size > 0 ifTrue: [		^ urlList first, self name,'|',version,'.pr']].	^ ''! !!Project methodsFor: 'file in/out' stamp: 'tk 3/14/2000 12:42'!versionFrom: aServerFile	| theName uu serverUrl |	"Store the version of the file I actually came from.  My stored version was recorded before I knew the latest version number on the server!!"	(aServerFile class == String) 		ifTrue: [uu _ aServerFile asUrl.				theName _ uu path last.				serverUrl _ uu toText copyFrom: 1 to: 					(uu toText size - theName encodeForHTTP size)]		ifFalse: [serverUrl _ aServerFile directoryUrl.				theName _ aServerFile localName].	version _ (theName findTokens: '|.') second.	(serverUrl beginsWith: 'ftp:') ifTrue: ["update our server location"		urlList ifNil: [urlList _ Array new: 1].		urlList size = 0 ifTrue: [urlList _ Array new: 1].		urlList at: 1 put: serverUrl].! !!Project class methodsFor: 'utilities' stamp: 'tk 3/10/2000 21:08'!enter: aString	"Enter the project with the given name"	^ ((self named: aString) ifNil: [^ Project current]) enter! !!Project class methodsFor: 'utilities' stamp: 'tk 3/10/2000 21:09'!jumpToSelection: selection	"Enter the project corresponding to this menu selection."	"Project jumpToProject"	| nBack prev pr |	selection ifNil: [^ self].	(selection beginsWith: '%back') ifTrue:		[nBack _ (selection copyFrom: 6 to: selection size) asNumber.		prev _ CurrentProject previousProject.		1 to: nBack-1 do:			[:i | prev ifNotNil: [prev _ prev previousProject]].		prev ifNotNil: [prev enter: true revert: false saveForRevert: false]].	selection = #parent ifTrue: [		CurrentProject parent enter: false revert: false saveForRevert: false.		^ self].	(pr _ Project named: selection) ifNil: [^ self].	pr enter: false revert: false saveForRevert: false! !!Project class methodsFor: 'utilities' stamp: 'tk 3/10/2000 21:10'!named: projName	"Answer the project with the given name, or nil if there is no project of that given name."	"(Project named: 'New Changes') enter"	^ self allProjects		detect: [:proj | proj name = projName]		ifNone: [nil]! !!Project class methodsFor: 'squeaklet on server' stamp: 'tk 3/14/2000 12:43'!fromUrl: urlString	| serverFile pair pvm thumbnailWindow pr |	"Load the project, and make a thumbnail to it in the current project.  Replace the old one if necessary.Project fromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/SqueakEasy.extSeg'."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	World ifNil: [^ self inform: 			'Later, allow jumping from MVC to Morphic Projects.'].	serverFile _ ServerFile new fullPath: urlString.	(pr _ Project named: (serverFile fileName findTokens: '|.') first) 		ifNotNil: ["it appeared" ^ pr enter].	pair _ self class mostRecent: serverFile fileName onServer: serverFile.	pair first ifNil: [^ self inform: 'can''t find file on server'].	"Find parent project, go there, zap old thumbnail"	World submorphsDo: [:sub | 		(sub isKindOf: SystemWindow) ifTrue: [			(pvm _ sub findA: ProjectViewMorph) ifNotNil: [				(pvm class == DiskProxy and: 					[pvm constructorArgs first = urlString])						ifTrue: [thumbnailWindow _ sub]]]].	thumbnailWindow ifNotNil: [		thumbnailWindow delete.		thumbnailWindow owner ifNotNil: [^ self]].	"user refused"	"replace with a new one"	ProjectViewMorph openFromFile: serverFile asStream.! !!Project class methodsFor: 'squeaklet on server' stamp: 'tk 3/14/2000 14:28'!mostRecent: projName onServer: aServerDirectory	| stem list max goodName triple num stem1 |	"Find the exact fileName of the most recent version of project with the stem name of projName.  Names are of the form 'projName|mm.pr' where mm is a mime-encoded integer version number.	File names may or may not be HTTP escaped, %20 on the server."	stem _ (projName unescapePercents findTokens: '|.') first, '|'.	"strip it first"	list _ aServerDirectory fileNames.	list class == String ifTrue: [^ self inform: 'server is unavailable'].	list _ list collect: [:nnn | nnn unescapePercents].	max _ -1.  goodName _ nil.	list do: [:aName |		(aName beginsWith: stem) ifTrue: [			(triple _ aName findTokens: '|.') size = 3 ifTrue: [				num _ Base64MimeConverter decodeInteger: triple second unescapePercents.				num > max ifTrue: [max _ num.  goodName _ aName]]]].	max = -1 ifTrue: ["try with underbar for spaces on server"		(stem includes: $ ) ifTrue: [			stem1 _ stem copyReplaceAll: ' ' with: '_'.			list do: [:aName | 				(aName beginsWith: stem1) ifTrue: [					(triple _ aName findTokens: '|.') size = 3 ifTrue: [						num _ Base64MimeConverter decodeInteger: triple second unescapePercents.						num > max ifTrue: [max _ num.  goodName _ aName]]]]]].	max = -1 ifTrue: ["try without the marker | "		stem1 _ stem allButLast, '.pr'.		list do: [:aName | 			(aName beginsWith: stem1) ifTrue: [				(triple _ aName findTokens: '|.') size = 3 ifTrue: [					num _ Base64MimeConverter decodeInteger: triple second unescapePercents.					num > max ifTrue: [max _ num.  goodName _ aName]]]]].	^ Array with: goodName with: max! !!Project class methodsFor: 'squeaklet on server' stamp: 'tk 3/14/2000 12:47'!namedUrl: urlString	| serverFile |	"Return project if in, else nil"	serverFile _ ServerFile new fullPath: urlString.	^ Project named: (serverFile fileName findTokens: '|.') first! !!Project class methodsFor: 'squeaklet on server' stamp: 'tk 3/14/2000 12:48'!sweep: aServerDirectory	| repository list parts ind entry projectName versions |	"On the server, move all but the three most recent versions of each Squeaklet to a folder called 'older'"	"Project sweep: ((ServerDirectory serverNamed: 'DaniOnJumbo') clone 				directory: '/vol0/people/dani/Squeaklets/2.7')"	"Ensure the 'older' directory"	(aServerDirectory includesKey: 'older') 		ifFalse: [aServerDirectory createDirectory: 'older'].	repository _ aServerDirectory clone directory: aServerDirectory directory, '/older'.	"Collect each name, and decide on versions"	list _ aServerDirectory fileNames.	list class == String ifTrue: [^ self inform: 'server is unavailable'].	list _ list asSortedCollection asOrderedCollection.	parts _ list collect: [:en | en findTokens: '|.'].	parts _ parts select: [:en | en size = 3 and: [en third = 'pr']].	ind _ 1.	[entry _ list at: ind.		projectName _ entry first asLowercase.		versions _ OrderedCollection new.  versions add: entry.		[(ind _ ind + 1) > list size 			ifFalse: [(parts at: ind) first asLowercase = projectName 				ifTrue: [versions add: (parts at: ind).  true]				ifFalse: [false]]			ifTrue: [false]] whileTrue.		aServerDirectory moveYoungest: 3 in: versions to: repository.		ind > list size] whileFalse.! !!ProjectViewMorph methodsFor: 'as yet unclassified' stamp: 'tk 3/13/2000 15:47'!drawOn: aCanvas	project ifNil: [^ super drawOn: aCanvas].	project isInMemory ifFalse: [^ super drawOn: aCanvas].	"use lastProjectThumbnail"	project class == DiskProxy ifTrue: [^ super drawOn: aCanvas].	"still on server"	project thumbnail ifNil: [		image fill: (0@0 extent: image extent) rule: Form over 			fillColor: project defaultBackgroundColor.		^ super drawOn: aCanvas].	project thumbnail ~~ lastProjectThumbnail ifTrue:			["scale thumbnail to fit my bounds"			(WarpBlt toForm: image)				sourceForm: project thumbnail;				cellSize: 2;  "installs a colormap"				combinationRule: Form over;				copyQuad: (project thumbnail boundingBox) innerCorners				toRect: (0@0 extent: image extent).			lastProjectThumbnail _ project thumbnail.			image borderWidth: 1].	super drawOn: aCanvas.! !!ProjectViewMorph methodsFor: 'as yet unclassified' stamp: 'tk 3/14/2000 16:55'!enter	"Enter my project."	project class == DiskProxy ifTrue: ["When target is not in yet"		project enter: false revert: false saveForRevert: false].	"will bring it in"	(owner isKindOf: SystemWindow)		ifTrue: [project setViewSize: self extent].	self showBorderAs: Color gray.	project enter: false revert: false saveForRevert: false.! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'tk 3/13/2000 16:37'!openFromFile: preStream	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world." 	| aFileStream morphOrList window proj |	(preStream localName asLowercase endsWith: '.gz')		ifTrue: [aFileStream _ (RWBinaryOrTextStream with:					(GZipReadStream on: preStream) upToEnd) reset.				preStream close.]		ifFalse: [aFileStream _ preStream].	morphOrList _ aFileStream fileInObjectAndCode.	(morphOrList isKindOf: ImageSegment) ifTrue: [		proj _ morphOrList arrayOfRoots detect: [:mm | mm class == Project] 					ifNone: [nil].		"rename the project if it conflicts?"		proj ifNotNil: [proj versionFrom: preStream.			window _ (SystemWindow labelled: proj name) model: proj.			window				addMorph: (self on: proj)				frame: (0@0 corner: 1.0@1.0).			window openInWorld.			proj setParent: Project current.			proj enter]].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList _ morphOrList contentsMorph].	(morphOrList isKindOf: PasteUpMorph) ifFalse: [		^ self inform: 'This is not a PasteUpMorph or exported Project.'].	(window _ self newMorphicProjectOn: morphOrList) openInWorld.	window model enter! !!RemoteFileStream methodsFor: 'as yet unclassified' stamp: 'tk 3/13/2000 16:51'!directoryUrl	^ remoteFile directoryUrl! !!ServerFile methodsFor: 'as yet unclassified' stamp: 'tk 3/13/2000 16:53'!directoryUrl	| ru |	"A url to the directory this file is in"	ru _ self realUrl.	^ ru copyFrom: 1 to: (ru size - fileName size)! !!SmartRefStream methodsFor: 'import image segment' stamp: 'tk 3/13/2000 15:40'!checkFatalReshape: setOfClasses	| suspects oldInstVars newInstVars bad className |	"Inform the user if any of these classes were reshaped.  A block has a method from the old system whose receiver is of this class.  The method's inst var references might be wrong.  OK if inst vars were only added."	setOfClasses isEmpty ifTrue: [^ self].	suspects _ OrderedCollection new.	setOfClasses do: [:aClass |		className _ renamed keyAtValue: aClass name ifAbsent: [aClass name].		oldInstVars _ (structures at: className ifAbsent: [#(0)]) allButFirst.		"should be there"		newInstVars _ aClass allInstVarNames.		oldInstVars size > newInstVars size ifTrue: [bad _ true].		oldInstVars size = newInstVars size ifTrue: [			bad _ oldInstVars ~= newInstVars].		oldInstVars size < newInstVars size ifTrue: [			bad _ oldInstVars ~= (newInstVars copyFrom: 1 to: oldInstVars size)].		bad ifTrue: [suspects add: aClass]].	suspects isEmpty ifFalse: [		self inform: ('Imported foreign methods will run on instances of:\',			suspects asArray printString, 			'\whose shape has changed.  Errors may occur.') withCRs].! !!SoundBuffer methodsFor: 'accessing' stamp: 'tk 3/13/2000 14:46'!bytesPerElement	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."	^ 2! !!WordArray methodsFor: 'accessing' stamp: 'tk 3/13/2000 14:46'!bytesPerElement	"Number of bytes in each item.  This multiplied by (self size)*8 gives the number of bits stored."	^ 4! !Project removeSelector: #loadFromServer:!