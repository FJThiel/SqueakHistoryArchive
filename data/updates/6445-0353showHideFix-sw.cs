'From Vancouver1.0 of 28 September 2004 [latest update: #345] on 13 November 2004 at 3:33:28 am'!"Change Set:		showHideFix-swDate:			6 October 2004,Author:			Scott WallaceAdapted sw 11/16/2004 03:07 from Vancouver update  0265showHideFix-sw.The visibility property was not getting handed back and forth upon flexing and unflexing.  Thus, if you hide an unflexed morph, then flex it, you'd likely never see it again, etc.This is a bug as old as the advent of flexing in early 1998.  This update fixes it.  Also, 'attempt misc repairs' will now fix up existing content reflecting this bug."!!Morph methodsFor: 'menus' stamp: 'sw 10/6/2004 11:38'!absorbStateFromRenderer: aRenderer 	"Transfer knownName, actorState, visible, and player info over from aRenderer, which was formerly imposed above me as a transformation shell but is now going away."	| current |	(current _ aRenderer actorStateOrNil) ifNotNil:		[self actorState: current.		aRenderer actorState: nil].	(current _ aRenderer knownName) ifNotNil:		[self setNameTo: current.		aRenderer setNameTo: nil].	(current _ aRenderer player) ifNotNil:		[self player: current.		current rawCostume: self.		aRenderer player: nil].	self visible: aRenderer visible! !!Morph methodsFor: 'menus' stamp: 'sw 10/6/2004 12:16'!transferStateToRenderer: aRenderer	"Transfer knownName, actorState, visible, and player info over to aRenderer, which is being imposed above me as a transformation shell"	| current |	(current _ self actorStateOrNil) ifNotNil:		[aRenderer actorState: current.		self actorState: nil].	(current _ self knownName) ifNotNil:		[aRenderer setNameTo: current.		self setNameTo: nil].	(current _ self player) ifNotNil:		[aRenderer player: current.		self player rawCostume: aRenderer.		"NB player is redundantly pointed to in the extension of both the renderer and the rendee; this is regrettable but many years ago occasionally people tried to make that clean but always ran into problems iirc"		"self player: nil"].	aRenderer simplySetVisible: self visible 		! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 10/24/2004 19:08'!attemptCleanupReporting: whetherToReport	"Try to fix up some bad things that are known to occur in some etoy projects we've seen. If the whetherToReport parameter is true, an informer is presented after the cleanups"	| fixes |	fixes _ 0.	ActiveWorld ifNotNil:		[(ActiveWorld submorphs select:			[:m | (m isKindOf: ScriptEditorMorph) and: [m submorphs isEmpty]]) do:				[:m | m delete.  fixes _ fixes + 1]].	TransformationMorph allSubInstancesDo:		[:m | (m player notNil and: [m renderedMorph ~~ m])			ifTrue:				[m renderedMorph visible ifFalse:					[m renderedMorph visible: true.  fixes _ fixes + 1]]].	whetherToReport ifTrue:		[self inform: fixes printString, ' [or more] repair(s) made']"ActiveWorld attemptCleanupReporting: true.ActiveWorld attemptCleanupReporting: false."! !!Player methodsFor: 'misc' stamp: 'sw 10/6/2004 11:17'!offerAlternateViewerMenuFor: aViewer event: evt	"Put up an alternate Viewer menu on behalf of the receiver."	| aMenu aWorld  |	aWorld _ aViewer world.	aMenu _ MenuMorph new defaultTarget: self.	costumes ifNotNil:		[(costumes size > 1 or: [costumes size == 1 and: [costumes first ~~ costume renderedMorph]])			ifTrue:				[aMenu add: 'forget other costumes' translated target: self selector: #forgetOtherCostumes]].	aMenu add: 'expunge empty scripts' translated target: self action: #expungeEmptyScripts.	aMenu addLine.	aMenu add: 'choose vocabulary...' translated target: aViewer action: #chooseVocabulary.	aMenu balloonTextForLastItem: 'Choose a different vocabulary for this Viewer.' translated.	aMenu add: 'choose limit class...' translated target: aViewer action: #chooseLimitClass.	aMenu balloonTextForLastItem: 'Specify what the limitClass should be for this Viewer -- i.e., the most generic class whose methods and categories should be considered here.' translated.	aMenu add: 'open standard lexicon' translated target: aViewer action: #openLexicon.	aMenu balloonTextForLastItem: 'open a window that shows the code for this object in traditional programmer format' translated.	aMenu add: 'open lexicon with search pane' translated target: aViewer action: #openSearchingProtocolBrowser.	aMenu balloonTextForLastItem: 'open a lexicon that has a type-in pane for search (not recommended!!)' translated.	aMenu addLine.	aMenu add: 'inspect morph' translated target: costume selector: #inspect.	aMenu add: 'inspect player' translated target: self selector: #inspect.	self belongsToUniClass ifTrue:		[aMenu add: 'browse class' translated target: self action: #browsePlayerClass.		aMenu add: 'inspect class' translated target: self class action: #inspect].	aMenu add: 'inspect this Viewer' translated target: aViewer selector: #inspect.	aMenu add: 'inspect this Vocabulary' translated target: aViewer currentVocabulary selector: #inspect.	aMenu addLine.	aMenu add: 'relaunch this Viewer' translated target: aViewer action: #relaunchViewer.	aMenu add: 'attempt repairs' translated target: ActiveWorld action: #attemptCleanup.	aMenu add: 'view morph directly' translated target: aViewer action: #viewMorphDirectly.	aMenu balloonTextForLastItem: 'opens a Viewer directly on the rendered morph.' translated.	(costume renderedMorph isSketchMorph) ifTrue:		[aMenu addLine.		aMenu add: 'impart scripts to...' translated target: self action: #impartSketchScripts].	aMenu popUpEvent: evt in: aWorld! !!TransformationMorph methodsFor: 'geometry eToy' stamp: 'sw 10/6/2004 12:15'!simplySetVisible: aBoolean	"Set the receiver's visibility property.  This mild circumlocution is because my own #visible: method would also set the visibility flag of my flexee, which in this case is pointless because it's the flexee that calls this."	super visible: aBoolean! !!TransformationMorph methodsFor: 'geometry eToy' stamp: 'sw 10/6/2004 11:33'!visible: aBoolean	"Set the receiver's visibility property"	super visible: aBoolean.	submorphs isEmptyOrNil ifFalse: [submorphs first visible: aBoolean]! !