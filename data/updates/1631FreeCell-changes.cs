'From Squeak2.6 of 11 October 1999 [latest update: #1559] on 1 November 1999 at 1:51:09 pm'!"Change Set:		FreeCell-dpdi-1Date:			25 October 1999Author:			David PennellChanges to FreeCell-dpdi.1) Fix Help instructions.2) Disallow stacking on FreeCell's3) Pause timer if a containing SystemWindow puts FreeCell to sleep (collapse or 	another SystemWidnow is active).  Resume on wakeup.4) Don't include auto play time if game is won."!AlignmentMorph subclass: #FreeCell	instanceVariableNames: 'board cardsRemainingDisplay elapsedTimeDisplay gameNumberDisplay lastGameLost state autoMoveRecursionCount '	classVariableNames: 'Statistics '	poolDictionaries: ''	category: 'Morphic-Games'!LedMorph subclass: #LedTimerMorph	instanceVariableNames: 'counting startSeconds '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Games'!!FreeCell methodsFor: 'initialization' stamp: 'djp 10/31/1999 21:16'!initialize	super initialize.	Statistics newSession.	autoMoveRecursionCount _ 0.	orientation _ #vertical.	centering _ #center.	vResizing _ #shrinkWrap.	hResizing _ #shrinkWrap.	self		color: self defaultBackgroundColor;		borderWidth: 2;		addMorph: self makeControls;		addMorph: self board;		newGame.! !!FreeCell methodsFor: 'initialization' stamp: 'djp 10/31/1999 19:10'!makeControlBar	^AlignmentMorph newRow		color: self defaultBackgroundColor;		borderColor: #inset;		borderWidth: 2;		inset: 0;		hResizing: #spaceFill; vResizing: #shrinkWrap; centering: #center;		yourself.! !!FreeCell methodsFor: 'initialization' stamp: 'djp 10/31/1999 18:48'!openInWindowLabeled: aString inWorld: aWorld	^(super openInWindowLabeled: aString inWorld: aWorld)		model: self;		yourself! !!FreeCell methodsFor: 'accessing' stamp: 'djp 10/31/1999 19:28'!board	board ifNil: 		[board _ FreeCellBoard new			target: self;			actionSelector: #boardAction:].	^board! !!FreeCell methodsFor: 'accessing' stamp: 'djp 10/25/1999 21:56'!helpText	^'The objective of FreeCell is to move all of the cards to the four "home cells" in the upper right corner.  Each home cell will hold one suit and must be filled sequentially starting with the Ace.There are four "free cells" in the upper left corner that can each hold one card.  Cards can be moved from the bottom of a stack to a free cell or to another stack.  When moving a card to another stack, it must have a value that is one less than the exposed card and of a different color.'! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 21:17'!autoMovingHome	elapsedTimeDisplay pause.	autoMoveRecursionCount _ autoMoveRecursionCount + 1.! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 21:35'!boardAction: actionSymbol	actionSymbol = #cardMovedHome 	ifTrue: [^self cardMovedHome].	actionSymbol = #autoMovingHome	ifTrue: [^self autoMovingHome].! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 22:08'!cardMovedHome	cardsRemainingDisplay value: (cardsRemainingDisplay value - 1).	cardsRemainingDisplay value = 0 		ifTrue: [self gameWon]		ifFalse: [			autoMoveRecursionCount > 0 ifTrue: [				autoMoveRecursionCount _ autoMoveRecursionCount - 1.				autoMoveRecursionCount = 0 ifTrue: [elapsedTimeDisplay continue]]].! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 19:46'!gameLost	state _ #lost.	lastGameLost _ self currentGame.	elapsedTimeDisplay stop.	cardsRemainingDisplay flash: true.	Statistics gameLost.! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 19:46'!gameWon	state _ #won.	elapsedTimeDisplay stop.	cardsRemainingDisplay flash: true.	Statistics gameWon.! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 21:34'!modelSleep	(#(newGame sameGame won lost) contains: [:e | e=state]) ifTrue: [elapsedTimeDisplay pause]	! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 21:27'!modelWakeUp	(state = #won or: [state = #lost]) ifFalse: [elapsedTimeDisplay resume]! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 19:51'!newGame	(cardsRemainingDisplay value ~~ 0) ifTrue: [self gameLost].	cardsRemainingDisplay value: 52; flash: false.	self board newGame.	elapsedTimeDisplay reset; start.	gameNumberDisplay value: self currentGame.	state _ #newGame.! !!FreeCell methodsFor: 'actions' stamp: 'djp 10/31/1999 19:57'!sameGame	(cardsRemainingDisplay value ~~ 0) ifTrue: [		lastGameLost 			ifNil: [self gameLost]			ifNotNil: [lastGameLost ~~ self currentGame ifTrue: [self gameLost]]].	cardsRemainingDisplay value: 52; flash: false.	self board sameGame.	state _ #sameGame.	elapsedTimeDisplay reset; start.! !!FreeCell methodsFor: 'visual properties' stamp: 'djp 10/31/1999 19:10'!defaultBackgroundColor	^Color green darker! !!FreeCellBoard methodsFor: 'private' stamp: 'djp 10/31/1999 20:34'!autoMoveCardsHome	| top first |	first _ false.	(self stacks, self freeCells) do: 		[:deck | self homeCells do: 			[:homeCell | deck hasCards ifTrue: [				(homeCell repelCard: deck topCard) ifFalse: 					[(self isPlayableCardInHomeCells: deck topCard) ifTrue: [						first ifFalse: [							" trigger autoMoving event on first move."							first _ true.							self performActionSelector: #autoMovingHome].						self visiblyMove: (top _ deck topCard) to: homeCell.						homeCell acceptDroppingMorph: top event: nil]]]]].! !!FreeCellBoard methodsFor: 'private' stamp: 'djp 10/31/1999 20:15'!performActionSelector: actionSymbol	(target ~~ nil and: [actionSelector ~~ nil]) ifTrue: [		target perform: actionSelector with: actionSymbol].! !!FreeCellBoard methodsFor: 'actions' stamp: 'djp 10/31/1999 22:02'!cardMovedHome	self autoMoveCardsHome.	self performActionSelector: #cardMovedHome.! !!LedTimerMorph methodsFor: 'accessing' stamp: 'djp 10/31/1999 19:36'!continue	counting _ true! !!LedTimerMorph methodsFor: 'accessing' stamp: 'djp 10/31/1999 21:58'!pause	counting ifTrue: [self updateTime].	counting _ false! !!LedTimerMorph methodsFor: 'accessing' stamp: 'djp 10/31/1999 19:02'!resume	counting ifFalse: [		counting _ true.		startSeconds _  (Time totalSeconds) - self value]! !!LedTimerMorph methodsFor: 'accessing' stamp: 'djp 10/31/1999 21:44'!stop	counting ifTrue: [self updateTime].	counting _ false.! !!PlayingCardDeck methodsFor: 'dropping/grabbing' stamp: 'djp 10/31/1999 17:38'!repelCard: aCard	(stackingPolicy = #none) ifTrue: [^self repelCard: aCard default: true].	(stackingPolicy = #single) ifTrue: [		self 			ifEmpty: [^false]			ifNotEmpty: [^self repelCard: aCard default: true]].	(stackingPolicy = #altStraight or: [stackingPolicy = #straight]) ifTrue: [		self 			ifEmpty: [(self emptyDropNotOk: aCard) ifTrue: [^self repelCard: aCard default: true]]			ifNotEmpty: [(self inStackingOrder: aCard onTopOf: self topCard) 				ifFalse: [^self repelCard: aCard default: true]]].	^ false! !