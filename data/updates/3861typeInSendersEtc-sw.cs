'From Squeak3.1alpha of 28 February 2001 [latest update: #3868] on 20 March 2001 at 10:47:40 pm'!"Change Set:		typeInSendersEtc-swDate:			20 March 2001Author:			Scott WallaceWhen, in a CodeHolder, there is no current message selected, then if a senders or implementors search is issued, either from a button in the button pane or from cmd-m/cmd-n in the selector-list pane, allow the user to type in a selector and then launch a senders or implementors search on it."!!StringHolder methodsFor: 'message list menu' stamp: 'sw 3/19/2001 05:51'!browseMessages	"Present a menu of all messages sent by the currently selected message. 	Open a message set browser of all implementors of the message chosen."	self getSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 3/19/2001 12:10'!browseSendersOfMessages	"Present a menu of the currently selected message, as well as all messages sent by it.  Open a message set browser of all senders of the selector chosen."	self getSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 3/20/2001 09:31'!messageListKey: aChar from: view	"Respond to a Command key.  I am a model with a code pane, and I also	have a listView that has a list of methods.  The view knows how to get	the list and selection."	| sel class |	aChar == $D ifTrue: [^ self toggleDiffing].	sel _ self selectedMessageName.	aChar == $m ifTrue:  "These next two put up a type in if no message selected"		[^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllImplementorsOf: to: Smalltalk].	aChar == $n ifTrue: 		[^ self useSelector: sel orGetSelectorAndSendQuery: #browseAllCallsOn: to: Smalltalk].	"The following require a class selection"	(class _ self selectedClassOrMetaClass) ifNil: [^ self arrowKey: aChar from: view].	aChar == $b ifTrue: [^ Browser fullOnClass: class selector: sel].	aChar == $N ifTrue: [^ self browseClassRefs].	aChar == $i ifTrue: [^ self methodHierarchy].	aChar == $h ifTrue: [^ self classHierarchy].	aChar == $p ifTrue: [^ self browseFullProtocol].	"The following require a method selection"	sel ifNotNil: 		[aChar == $v ifTrue: [^ self browseVersions].		aChar == $O ifTrue: [^ self openSingleMessageBrowser].		aChar == $x ifTrue: [^ self removeMessage]].	^ self arrowKey: aChar from: view! !!CodeHolder methodsFor: 'commands' stamp: 'sw 3/19/2001 06:08'!browseSenders	"Create and schedule a message set browser on all senders of the currently selected message selector.  Of there is no message currently selected, offer a type-in"	self sendQuery: #browseAllCallsOn: to: Smalltalk! !!CodeHolder methodsFor: 'misc' stamp: 'sw 3/20/2001 19:41'!getSelectorAndSendQuery: querySelector to: queryPerformer	"Obtain a selector relevant to the current context, and then send the querySelector to the queryPerformer with the selector obtained as its argument.  If no message is currently selected, then obtain a method name from a user type-in"	| aSelector |	self selectedMessageName ifNil:		[aSelector _ FillInTheBlank request: 'Type selector:' initialAnswer: 'flag:'.		^ aSelector isEmptyOrNil ifFalse:			[(Symbol hasInterned: aSelector ifTrue:				[:aSymbol | queryPerformer perform: querySelector with: aSymbol])				ifFalse:					[self inform: 'no such selector']]].	self selectMessageAndEvaluate: [:selector | queryPerformer perform: querySelector with: selector]! !!CodeHolder methodsFor: 'misc' stamp: 'sw 3/19/2001 06:06'!sendQuery: querySelector to: queryPerformer	"Apply a query to the primary selector associated with the current context.  If no such selection exists, obtain one by user type-in. Then send querySelector to queryPerformer with the selector as its argument."	| aSelector aString |	aSelector _ self selectedMessageName ifNil:		[aString _FillInTheBlank request: 'Type selector:' initialAnswer: 'flag:'.		^ aString isEmptyOrNil ifFalse:			[(Symbol hasInterned: aString ifTrue:				[:aSymbol | queryPerformer perform: querySelector with: aSymbol])				ifFalse:					[self inform: 'no such selector']]].	queryPerformer perform: querySelector with: aSelector! !!CodeHolder methodsFor: 'misc' stamp: 'sw 3/20/2001 09:26'!useSelector: incomingSelector orGetSelectorAndSendQuery: querySelector to: queryPerformer	"If incomingSelector is not nil, use it, else obtain a selector from user type-in.   Using the determined selector, send the query to the performer provided."	| aSelector |	incomingSelector		ifNotNil:			[queryPerformer perform: querySelector with: incomingSelector]		ifNil:			[aSelector _FillInTheBlank request: 'Type selector:' initialAnswer: 'flag:'.			aSelector isEmptyOrNil ifFalse:				[(Symbol hasInterned: aSelector ifTrue:					[:aSymbol | queryPerformer perform: querySelector with: aSymbol])					ifFalse:						[self inform: 'no such selector']]]! !