'From Squeak2.8alpha of 4 February 2000 [latest update: #2210] on 1 June 2000 at 1:06:01 pm'!"Change Set:		096ScamperFonts-bolotDate:			18 May 2000Author:			Bolot KerimbaevSupport for font color and size in Scamper:Font size mapping:HTML	Squeak1-4		1 (normal text, H4)5		2 (H3)6		3 (H2)7		4 (H1)Known issues:- nested font specs may not work properly- cannot reduce font size"!HtmlFormatter subclass: #DHtmlFormatter	instanceVariableNames: 'fontSpecs '	classVariableNames: ''	poolDictionaries: ''	category: 'Network-HTML Formatter'!!DHtmlFormatter commentStamp: '<historical>' prior: 0!an attempt to improve HtmlFormatter...make it a bit more DOMish (eventually)roadmap-1-	support for font specs (color, size)-2-	support for tabless!!HtmlDocument methodsFor: 'formatting' stamp: 'bolot 5/18/2000 11:37'!formattedText	"return a version of this document as a formatted Text"	| formatter |	formatter _ HtmlFormatter preferredFormatterClass new.	self addToFormatter: formatter.	^formatter text ! !!HtmlDocument methodsFor: 'formatting' stamp: 'bolot 5/18/2000 11:37'!formattedTextForBrowser: browser  defaultBaseUrl: defaultBaseUrl	"return a version of this document as a formatted Text (which includes links and such)"	| formatter text |	"set up the formatter"	formatter _ HtmlFormatter preferredFormatterClass new.	formatter browser: browser.	formatter baseUrl: defaultBaseUrl.  "should check if the document specifies something else"	"do the formatting"	self addToFormatter: formatter.	"get and return the result"	text _ formatter text.	^text! !!HtmlDocument methodsFor: 'formatting' stamp: 'bolot 5/18/2000 11:37'!formattedTextMorph	"return a version of this document as a formatted TextMorph (which includes links and such)"	| formatter text textMorph |	formatter _ HtmlFormatter preferredFormatterClass new.	self addToFormatter: formatter.	text _ formatter text .	textMorph _ TextMorph new initialize.	textMorph contentsWrapped: text.	^textMorph! !!HtmlDocument methodsFor: 'formatting' stamp: 'bolot 5/18/2000 11:37'!formattedTextMorphForBrowser: browser  defaultBaseUrl: defaultBaseUrl	"return a version of this document as a formatted TextMorph (which includes links and such)"	| formatter textMorph |	"set up the formatter"	formatter _ HtmlFormatter preferredFormatterClass new.	formatter browser: browser.	formatter baseUrl: defaultBaseUrl.  "should check if the document specifies something else"	"do the formatting"	self addToFormatter: formatter.	"get and return the result"	textMorph _ formatter textMorph .	^textMorph! !!HtmlFontEntity methodsFor: 'formatting' stamp: 'bolot 5/18/2000 11:42'!addToFormatter: formatter	| size color textAttribList |	(formatter respondsTo: #startFont:)		ifFalse: [^super addToFormatter: formatter].	size _ self getAttribute: 'size'.	color _ self getAttribute: 'color'.	textAttribList _ OrderedCollection new.	color ifNotNil: [textAttribList add: (TextColor color: (Color fromString: color))].	(size isEmptyOrNil not and: [size isAllDigits]) 		ifTrue: [size _ (size asNumber - 3) max: 1.			textAttribList add: (TextFontChange fontNumber: (size min: 4))].	formatter startFont: textAttribList.	super addToFormatter: formatter.	formatter endFont: textAttribList! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 12:02'!endHeader: level	self decreaseBold.	self ensureNewlines: 2! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 12:02'!startHeader: level	self ensureNewlines: 3.	self increaseBold! !!DHtmlFormatter methodsFor: 'private-formatting' stamp: 'bolot 5/18/2000 11:26'!setAttributes	"set attributes on the output stream"	| attribs |	attribs _ OrderedCollection new.	indentLevel > 0 ifTrue: [ attribs add: (TextIndent tabs: indentLevel) ].	boldLevel > 0 ifTrue: [ attribs add: TextEmphasis bold ].	italicsLevel >  0 ifTrue: [ attribs add: TextEmphasis italic ].	underlineLevel > 0 ifTrue: [ attribs add: TextEmphasis underlined ].	strikeLevel > 0 ifTrue: [ attribs add: TextEmphasis struckOut ].	urlLink isNil ifFalse: [ attribs add: (TextURL new url: urlLink) ].	fontSpecs isEmptyOrNil		ifFalse: [attribs addAll: fontSpecs last]		ifTrue: [attribs add: (TextFontChange defaultFontChange)].	outputStream currentAttributes: attribs! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 11:55'!decreaseFontBy: relSize	self startFont: (TextFontChange fontNumber: ((self lastFontSize - relSize) min: 4))! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 11:23'!endFont: aFont	fontSpecs isEmptyOrNil		ifFalse: [fontSpecs removeLast].	self setAttributes! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 12:01'!endHeader: level	boldLevel _ boldLevel - 1. "self decreaseBold"	self ensureNewlines: 2.	self endFont: nil.! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 12:00'!headerFont: level	^{TextFontChange fontNumber: ((5 - level) max: 1)}! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 11:50'!increaseFontBy: relSize	self startFont: (TextFontChange fontNumber: ((self lastFontSize + relSize) min: 4))! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 11:55'!lastFontSize	| textAttrib |	fontSpecs isEmptyOrNil ifTrue: [^1].	fontSpecs reverseDo: [:specs |		textAttrib _ specs detect: [:attrib | attrib isKindOf: TextFontChange] ifNone: [].		textAttrib ifNotNil: [^textAttrib fontNumber]].	^1 "default font size in Squeak (1) corresponds to HTML's default 4"! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 11:57'!resetFont	"probably need use document defaults"	self startFont:		{TextColor black.		TextFontChange fontNumber: 1}! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 11:57'!startFont: aTextAttribList	"aTextAttribList is a collection of TextAttributes"	fontSpecs ifNil: [fontSpecs _ OrderedCollection new].	fontSpecs add: aTextAttribList.	self setAttributes! !!DHtmlFormatter methodsFor: 'formatting commands' stamp: 'bolot 5/18/2000 12:00'!startHeader: level	self ensureNewlines: 3.	boldLevel _ boldLevel + 1. "self increaseBold"	self startFont: (self headerFont: level).! !!HtmlFormatter class methodsFor: 'instance creation' stamp: 'bolot 5/18/2000 11:36'!preferredFormatterClass	^DHtmlFormatter! !!HtmlHeader methodsFor: 'formatting' stamp: 'bolot 5/18/2000 12:03'!addToFormatter: formatter	formatter startHeader: level.	super addToFormatter: formatter.	formatter endHeader: level! !!Scamper methodsFor: 'document handling' stamp: 'bolot 5/18/2000 11:37'!displayTextHtmlPage: newSource	"HTML page--format it"	| formatter bgimageUrl bgimageDoc bgimage |	currentUrl _ newSource url.	pageSource _ newSource content isoToSqueak.	self status: 'parsing...'.	document _ (HtmlParser parse: (ReadStream on: pageSource)).	self status: 'laying out...'.	formatter _ HtmlFormatter preferredFormatterClass new.	formatter browser: self.	formatter baseUrl: currentUrl.	document addToFormatter: formatter.	formattedPage _ formatter text.	(bgimageUrl _ document body background)		ifNotNil:			[bgimageDoc _ (bgimageUrl asUrlRelativeTo: currentUrl) retrieveContents.			[bgimage _ ImageReadWriter formFromStream: bgimageDoc contentStream binary]				ifError: [:err :rcvr | "ignore" bgimage _ nil]].	bgimage		ifNotNil: [backgroundColor _ bgimage]		ifNil: [backgroundColor _ Color fromString: document body bgcolor].	currentUrl fragment		ifNil: [ currentAnchorLocation _ nil ]		ifNotNil: [ currentAnchorLocation _				formatter anchorLocations 					at: currentUrl fragment asLowercase					ifAbsent: [ nil ] ].	self startDownloadingMorphState: (formatter incompleteMorphs).	self changeAll: 	#(currentUrl relabel hasLint lint backgroundColor formattedPage formattedPageSelection).	^true! !