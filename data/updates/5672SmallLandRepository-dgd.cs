'From Squeak3.7alpha of ''11 September 2003'' [latest update: #5657] on 17 January 2004 at 3:47:38 pm'!"Change Set:		SmallLandRepository-dgdDate:			17 January 2004Author:			Diego Gomez Deck <DiegoGomezDeck@ConsultAr.com>Add support to publish or download projects from Small-Land Project Repository (SLPR).The SLPR has virtual folders where the projects appears.  The SLPR can be acceded from the FileList or from the web interface at http://repository.small-land.org:8080This changeset add the class (a type of ServerDirectory) needed to access SLPR and register it in the server list."!Object subclass: #PRServerDirectory	instanceVariableNames: 'server directories'	classVariableNames: ''	poolDictionaries: ''	category: 'ProjectsRepositoryClient'!!PRServerDirectory methodsFor: 'accessing' stamp: 'dgd 12/22/2003 07:35'!directories	"answer the receiver's directories"	^ directories! !!PRServerDirectory methodsFor: 'accessing' stamp: 'dgd 12/22/2003 20:44'!directory	"answer the receiver's directory"	| result |	result := String new writeStream.	self directories		do: [:each | result nextPutAll: each]		separatedBy: [result nextPutAll: self slash].	^ result contents! !!PRServerDirectory methodsFor: 'accessing' stamp: 'dgd 12/22/2003 21:01'!directoryWrapperClass	"answer the class to be used as a wrapper in FileList2"	^ FileDirectoryWrapper! !!PRServerDirectory methodsFor: 'accessing' stamp: 'dgd 12/22/2003 20:44'!downloadUrl	"The url under which files will be accessible."	^ (self urlFromServer: self server directories: {'programmatic'})		, self slash! !!PRServerDirectory methodsFor: 'accessing' stamp: 'dgd 12/27/2003 11:06'!moniker	"a plain language name for this directory"	^ self server! !!PRServerDirectory methodsFor: 'accessing' stamp: 'dgd 12/22/2003 20:53'!realUrl	"a fully expanded version of the url we represent."	^self urlFromServer: self server directories: self directories! !!PRServerDirectory methodsFor: 'accessing' stamp: 'dgd 12/22/2003 07:40'!server	"answer the receiver's server"	^ server! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:25'!createDirectory: localName 	"Create a new sub directory within the current one"	^ self inform: 'operation not supported' translated! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:24'!deleteFileNamed: localFileName 	"Delete the file with the given name in this directory."	^ self inform: 'operation not supported' translated! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:45'!directoryNamed: aString 	"Return the subdirectory of this directory with the given name."	^ self class server: self server directory: self directory , self slash, aString! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 21:30'!directoryNames	"Return a collection of names for the subdirectories of this 	directory. "	^ self entries		select: [:entry | entry isDirectory]		thenCollect: [:entry | entry name]! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:40'!entries	"Return a collection of directory entries for the files and 	directories in this directory."	| lines |	lines := self getLines.	^ lines isNil		ifTrue: [#()] ifFalse:[		self parseLines: lines]! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 21:30'!fileNames	"Return a collection of names for the files (but not directories) in this directory."	^ self entries		select: [:entry | entry isDirectory not]		thenCollect: [:entry | entry name]! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:30'!fullNameFor: aString "Return a corrected, fully-qualified name for the given file name."	^ self urlFromServer: self server directories: self directories , {aString}! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/27/2003 12:36'!getOnly: numberOfBytes from: fileNameOnServer 	"Just capture the first numberOfBytes of the file.  	 	Goes faster for long files. Return the contents, not a stream."	| fileName |	self flag: #todo.	"use LRUCache"	fileName := fileNameOnServer				allButFirst: (fileNameOnServer lastIndexOf: self pathNameDelimiter).	""	^ self getOnly: numberOfBytes ofProjectContents: fileName! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:33'!oldFileNamed: aName "Open the existing file with the given name in this directory."	^ self oldFileOrNoneNamed: aName! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/27/2003 11:35'!oldFileOrNoneNamed: fullName 	"If the file exists, answer a read-only FileStream on it. If it  	doesn't, answer nil."	| fileName contents |	fileName := fullName				allButFirst: (fullName lastIndexOf: self pathNameDelimiter).	""	contents := self getFullProjectContents: fileName.	contents isNil		ifTrue: [^ nil].	""	^ (SwikiPseudoFileStream with: contents) directory: self;		 localName: fileName;		 reset;		 yourself! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 07:58'!on: fullName 	"Answer another ServerDirectory on the partial path name.  	fullName is directory path, and does include the name of the  	server."	^ self class fullPath: fullName!]style[(4 8 3 133 4 4 17 8)f3b,f3cblue;b,f3,f3c150048000,f3,f3cmagenta;,f3,f3cblue;i! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:39'!pathName"Path name as used in reading the file. "	^ self urlFromServer: self server directories: self directories! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 08:08'!pathParts	"Return the path from the root of the file system to this  	directory as an array of directory names. On a remote server."	^ (OrderedCollection with: self server) addAll: self directories;		 yourself! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:34'!readOnlyFileNamed: aName "Open the existing file with the given name in this directory for read-only access."	^ self oldFileNamed: aName! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:26'!rename: fullName toBe: newName 	"Rename a remote file. fullName is just be a fileName, or can 	be directory path that includes name of the server. newName 	is just a fileName"	^ self inform: 'operation not supported' translated! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:37'!sleep"Leave the FileList window. Do nothing. "	^ self! !!PRServerDirectory methodsFor: 'file directory' stamp: 'dgd 12/22/2003 20:32'!wakeUp"Entering a FileList window. Do nothing."	^ self! !!PRServerDirectory methodsFor: 'initialization' stamp: 'dgd 12/22/2003 20:46'!initializeServer: serverString directories: directoriesCollection 	"initialize the receiver's server and directories"	server := serverString withBlanksTrimmed.	server last = self pathNameDelimiter		ifTrue: [server := server allButLast withBlanksTrimmed].	""	directories := directoriesCollection! !!PRServerDirectory methodsFor: 'path access' stamp: 'dgd 12/22/2003 20:41'!pathNameDelimiter"Return the delimiter character for this kind of directory."	^ $/! !!PRServerDirectory methodsFor: 'path access' stamp: 'dgd 12/22/2003 20:44'!slash"answer the recevier 'slash'"	^ self pathNameDelimiter asString! !!PRServerDirectory methodsFor: 'squeaklets' stamp: 'dgd 12/25/2003 14:34'!writeProject: aProject inFileNamed: fileNameString fromDirectory: localDirectory 	"write aProject (a file version can be found in the file named  	fileNameString in localDirectory)"	| url arguments answer string |	url := self urlFromServer: self server directories: {'programmatic'. 'uploadproject'}.		arguments := self				getPostArgsFromProject: aProject				fileNamed: fileNameString				fromDirectory: localDirectory.	""	Cursor read		showWhile: [""			"answer := HTTPClient httpPostDocument: url args:  			args."			answer := HTTPSocket httpGetDocument: url args: arguments.			string := answer contents.			(string beginsWith: '--OK--')				ifTrue: [^ true]].	""	self		inform: ('Server responded: {1}' translated format: {string}).	^ false! !!PRServerDirectory methodsFor: 'testing' stamp: 'dgd 12/22/2003 20:39'!acceptsUploads	"answer whatever the receiver accepts uploads"	^ true! !!PRServerDirectory methodsFor: 'testing' stamp: 'dgd 12/22/2003 00:42'!isProjectSwiki	"answer whatever the receiver is a project swiki"	^ true! !!PRServerDirectory methodsFor: 'testing' stamp: 'dgd 12/27/2003 11:04'!isRemoteDirectory	"answer whatever the receiver is a remote directory"	^ true! !!PRServerDirectory methodsFor: 'testing' stamp: 'dgd 12/21/2003 23:31'!isSearchable	"answer whatever the receiver is searchable"	^ true! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/27/2003 11:34'!getFullProjectContents: aString 	"private - get the project content from the server"	^ self getOnly: nil ofProjectContents: aString! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/22/2003 20:47'!getLines	"private - answer a collection of lines with the server response"	| url answer string lines |	url := self urlFromServer: self server directories: {'programmatic'} , self directories.	url := url , self slash.	""	Cursor read		showWhile: [""			answer := HTTPClient httpGetDocument: url.			string := answer contents.			(string beginsWith: '--OK--')				ifFalse: [^ nil]].	""	lines := OrderedCollection new.	(string allButFirst: 6)		linesDo: [:line | lines add: line].	""	^ lines! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/27/2003 12:37'!getOnly: numberOfBytes ofProjectContents: aString 	"private - get numberOfBytes of the project contents"	| url answer contents args |	self flag: #todo.	"use an LRUCache"	url := self urlFromServer: self server directories: {'programmatic'. aString}.	""	args := numberOfBytes isNil				ifFalse: ['numberOfBytes=' , numberOfBytes asString].	""	Cursor read		showWhile: [""			answer := HTTPSocket httpGetDocument: url args: args.			contents := answer contents].""	(contents beginsWith: '--OK--')		ifFalse: [^ nil].	""	^ contents allButFirst: 6! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/26/2003 16:15'!getPostArgsFromProject: aProject fileNamed: fileNameString fromDirectory: localDirectory 	| args thumbnail uploader |	args := Dictionary new.	""	args at: 'contents' put: {(localDirectory oldFileNamed: fileNameString) contentsOfEntireFile}.	""	args at: 'name' put: {aProject name}.	args at: 'version' put: {(Project parseProjectFileName: fileNameString) second asString}.	args at: 'language' put: {aProject naturalLanguage asString}.	""	uploader := Utilities authorNamePerSe.	uploader isEmptyOrNil		ifTrue: [uploader := Utilities authorInitialsPerSe].	uploader isEmptyOrNil		ifFalse: [args at: 'uploader' put: {uploader}].	""	self putSmalltalkInfoInto: args.	""	thumbnail := self getProjectThumbnail: aProject.	thumbnail isNil		ifFalse: [args at: 'thumbnailcontents' put: {thumbnail}].	""	self putProjectDetailsFrom: aProject to: args.	""	^ args! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/24/2003 11:33'!getProjectThumbnail: aProject 	"private - answer a stream with the aProject's thumbnail or nil if none"	| form stream |	form := aProject thumbnail.	form isNil		ifTrue: [^ nil].	""	form unhibernate.	form := form colorReduced.	""	self flag: #todo.	"use a better image format than GIF"	stream := RWBinaryOrTextStream on: String new.	GIFReadWriter putForm: form onStream: stream.	stream reset.	""	^ stream contents asString! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/22/2003 20:34'!parseLine: aString "private - parse a line from a server response"	| tokens |	tokens := aString findTokens: '|'.	""	^ tokens first = 'D'		ifTrue: [""			DirectoryEntry				name: tokens second				creationTime: 0				modificationTime: 0				isDirectory: true				fileSize: 0]		ifFalse: [""			DirectoryEntry				name: tokens second				creationTime: tokens third asInteger				modificationTime: tokens fourth asInteger				isDirectory: false				fileSize: tokens fifth asInteger]! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/22/2003 20:38'!parseLines: aCollection "private - parse aCollection of lines from a server response"	^ aCollection		collect: [:each | self parseLine: each]! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/24/2003 11:35'!putProjectDetailsFrom: aProject to: args 	| projectDetails |	projectDetails := aProject world				valueOfProperty: #ProjectDetails				ifAbsent: [^ self].""	self flag: #todo.	"projectname ?"	projectDetails		at: 'projectdescription'		ifPresent: [:value | args at: 'description' put: {value}].	projectDetails		at: 'projectauthor'		ifPresent: [:value | args at: 'author' put: {value}].	projectDetails		at: 'projectcategory'		ifPresent: [:value | args at: 'category' put: {value}].	projectDetails		at: 'projectsubcategory'		ifPresent: [:value | args at: 'subcategory' put: {value}].	projectDetails		at: 'projectkeywords'		ifPresent: [:value | args at: 'keywords' put: {value}]! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/26/2003 16:43'!putSmalltalkInfoInto: args 	"private - fills args with information from Smalltalk"	self flag: #todo.	" 	lastest small-land changeset / small-land version  	"	#(#datedVersion #osVersion #platformName #platformSubtype #vmPath #vmVersion #imageName #changesName #sourcesName #listBuiltinModules #listLoadedModules #getVMParameters )		do: [:each | 			| value | 			value := Smalltalk perform: each.			args at: 'extra-' , each asString put: {value asString}]! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 12/22/2003 20:47'!urlFromServer: serverString directories: aCollection 	"private - builds an url for server/directories"	| result |	result := String new writeStream.	""	{serverString} , aCollection		do: [:each | ""			result				nextPutAll: (each copyReplaceAll: ' ' with: '+')]		separatedBy: [result nextPutAll: self slash].	""	^ result contents! !!PRServerDirectory class methodsFor: 'instance creation' stamp: 'dgd 12/22/2003 20:43'!fullPath: fullNameString	"answer an instance of the receiver on fullName"	| pathParts |	pathParts := self pathParts: fullNameString.	^ self server: pathParts first directories: pathParts allButFirst! !!PRServerDirectory class methodsFor: 'instance creation' stamp: 'dgd 12/22/2003 20:43'!pathParts: fullName 	"private - parse fullName in server and directory"	| url slashPos server directory |	url := fullName.	(url beginsWith: 'http://')		ifTrue: [url := url allButFirst: 7].	url last = $/		ifTrue: [url := url allButLast].	""	slashPos := url indexOf: $/.	slashPos isZero		ifTrue: [^ {'http://' , url}].	""	server := url first: slashPos - 1.	directory := url allButFirst: slashPos.	""	^ {'http://' , server. directory}! !!PRServerDirectory class methodsFor: 'instance creation' stamp: 'dgd 12/22/2003 07:57'!server: serverString 	"answer a new instance of the receiver on server aString"	^ self server: serverString directories: #()! !!PRServerDirectory class methodsFor: 'instance creation' stamp: 'dgd 12/22/2003 07:56'!server: serverString directories: aCollection 	"answer a new instance of the receiver on server aString"	^ self new initializeServer: serverString directories: aCollection! !!PRServerDirectory class methodsFor: 'instance creation' stamp: 'dgd 12/22/2003 07:58'!server: serverString directory: directoryString 	"answer a new instance of the receiver on server aString"	^ self new		initializeServer: serverString		directories: (directoryString findTokens: '/')!]style[(8 12 12 15 3 57 4 4 25 12 17 15 13 3 1)f3b,f3cblue;b,f3b,f3cblue;b,f3,f3c150048000,f3,f3cmagenta;,f3,f3cblue;i,f3,f3cblue;i,f3,f3c255150000b,f3! !"Postscript:"ServerDirectory	addServer: (PRServerDirectory server: 'http://repository.small-land.org:8080')	named: '_Small-Land - Projects Repository_'.!