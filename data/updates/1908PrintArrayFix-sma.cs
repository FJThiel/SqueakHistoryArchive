'From Squeak2.8alpha of 4 February 2000 [latest update: #1873] on 3 March 2000 at 1:11:58 pm'!"Change Set:		30PrintArrayFix-smaDate:			3 March 2000Author:			Stefan Matthias AustTeamwork: Russell Swan noticed a bug, Bert Freudenberg suggested a fix and I implemented it.Actually, this became a complete pretty printing and refactoring of the plugin. I added a var:type: method which reduced the need to repeat the varName in var:declareC: and always because this is both error-prone and space consuming."!!Object methodsFor: 'translation support' stamp: 'sma 3/3/2000 12:06'!var: varSymbol type: typeString	"For translation only; noop when running in Smalltalk."! !!Object methodsFor: 'translation support' stamp: 'sma 3/3/2000 12:06'!var: varSymbol type: typeString array: array	"For translation only; noop when running in Smalltalk."! !!Browser methodsFor: 'message list' stamp: 'sma 3/3/2000 13:08'!selectedMessage	"Answer a copy of the source code for the selected message selector."	| class selector method tempNames |	contents == nil ifFalse: [^ contents copy].	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	method _ class compiledMethodAt: selector ifAbsent: [		^ ''].	"method deleted while in another project"	currentCompiledMethod _ method.	(Sensor controlKeyPressed		or: [method fileIndex > 0 and: [(SourceFiles at: method fileIndex) == nil]])		ifTrue:		["Emergency or no source file -- decompile without temp names"		contents _ (class decompilerClass new decompile: selector in: class method: method)			decompileString.		^ contents copy].	Sensor leftShiftDown ifTrue:		["Special request to decompile -- get temps from source file"		tempNames _ (class compilerClass new						parse: method getSourceFromFile asString in: class notifying: nil)						tempNames.		contents _ ((class decompilerClass new withTempNames: tempNames)				decompile: selector in: class method: method) decompileString.		contents _ contents asText makeSelectorBoldIn: class.		^ contents copy].	contents _ class sourceCodeAt: selector.	(contents string findString: selector keywords first ) = 1		ifFalse:			[PopUpMenu notify: 'Possible problem with source file!!The method source should start with the methodselector but this is not the case!! This can happen ifyou download the "SqueakV2.sources" file as TEXT.It must be transfered in BINARY mode even if it looks like a text file to preserve the CR line ends.You may proceed with caution but it is recommendedto download a new source file.'].	Preferences browseWithPrettyPrint ifTrue:		[contents _ class compilerClass new			format: contents in: class notifying: nil decorated: Preferences colorWhenPrettyPrinting].	self showDiffs ifTrue:		[contents _ self diffFromPriorSourceFor: contents].	contents _ contents asText makeSelectorBoldIn: class.	^ contents copy! !!CCodeGenerator methodsFor: 'public' stamp: 'sma 3/3/2000 12:01'!var: varName type: type	self var: varName declareC: type , ' ' , varName! !!CCodeGenerator methodsFor: 'public' stamp: 'sma 3/3/2000 12:00'!var: varName type: type array: array	self		var: varName		declareC: (String streamContents: [:s |			s nextPutAll: type.			s space.			s nextPutAll: varName.			s nextPutAll: '[] = {'.			self printArray: array on: s.			s nextPut: $}])! !!CCodeGenerator methodsFor: 'private' stamp: 'sma 3/3/2000 12:08'!printArray: array on: aStream	| first |	first _ true.	1 to: array size do:		[:i |		first 			ifTrue: [first _ false]			ifFalse: [aStream nextPutAll: ', '].		i \\ 16 = 1 ifTrue: [aStream cr].		self printInt: (array at: i) on: aStream]! !!CCodeGenerator methodsFor: 'private' stamp: 'sma 3/3/2000 12:13'!printInt: int on: aStream	aStream print: int.	(int between: -2147483648 and: 2147483647)		ifFalse: [(int between: 2147483648 and: 4294967295)			ifTrue: [aStream nextPut: $U]			ifFalse: [aStream nextPut: $L]]! !!InterpreterPlugin methodsFor: 'initialize' stamp: 'sma 3/3/2000 12:28'!setInterpreter: anInterpreter 	"Note: This is coded so that is can be run from Squeak."	| ok |	self export: true.	self var: #anInterpreter type: #'struct VirtualMachine*'.	interpreterProxy _ anInterpreter.	ok _ self cCode: 'interpreterProxy->majorVersion() == VM_PROXY_MAJOR'.	ok == false ifTrue: [^ false].	ok _ self cCode: 'interpreterProxy->minorVersion() >= VM_PROXY_MINOR'.	^ ok! !!InterpreterPlugin class reorganize!('accessing' moduleName simulatorClass)('class initialization' initialize)('instance creation' doPrimitive:)('translation' declareCVarsIn: translate translate:all:doInlining: translate:doInlining: translateDoInlining:)!!InterpreterPlugin class methodsFor: 'accessing' stamp: 'sma 3/3/2000 12:24'!moduleName	"Answer the receiver's module name that is used for the plugin's C code."	^ self name asString! !!InterpreterPlugin class methodsFor: 'accessing' stamp: 'sma 3/3/2000 12:24'!simulatorClass	"For running from Smalltalk - answer a class that can be used to 	simulate the receiver. By default every plugin can simulate itself."	^ self! !!InterpreterPlugin class methodsFor: 'instance creation' stamp: 'sma 3/3/2000 12:26'!doPrimitive: primitiveName 	| proxy plugin |	proxy _ InterpreterProxy new.	proxy loadStackFrom: thisContext sender.	plugin _ self simulatorClass new.	plugin setInterpreter: proxy.	plugin perform: primitiveName asSymbol.	^ proxy stackValue: 0! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:28'!declareCVarsIn: aCCodeGenerator	"Note: This method must be implemented by all subclasses to declare variables."	aCCodeGenerator var: #interpreterProxy type: #'struct VirtualMachine*'! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:23'!translate	"Translate the receiver as plugin with inlining using its default name."	^ self translateDoInlining: true! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:30'!translate: fileName all: classes doInlining: inlineFlag 	"Time millisecondsToRun: [ 		InterpreterPlugin 			translate: 'all.c' all: {FloatArrayPlugin. FFTPlugin} 			doInlining: true. 		Smalltalk beep]"	| cg theClass |	cg _ PluggableCodeGenerator new initialize.	classes do: 		[:cls | 		theClass _ cls.		theClass initialize.		[theClass == InterpreterPlugin]			whileFalse: 				[cg addClass: theClass.				theClass declareCVarsIn: cg.				theClass _ theClass superclass]].	(classes includes: InterpreterPlugin)		ifFalse: 			[cg addClass: InterpreterPlugin.			InterpreterPlugin declareCVarsIn: cg].	cg storeCodeOnFile: fileName doInlining: inlineFlag! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:26'!translate: fileName doInlining: inlineFlag 	"Time millisecondsToRun: [ 		FloatArrayPlugin translate: 'SqFloatArray.c' doInlining: true. 		Smalltalk beep]"	| cg theClass |	self initialize.	cg _ PluggableCodeGenerator new initialize.	theClass _ self.	[theClass == Object]		whileFalse: 			[cg addClass: theClass.			theClass declareCVarsIn: cg.			theClass _ theClass superclass].	cg storeCodeOnFile: fileName doInlining: inlineFlag! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:22'!translateDoInlining: inlineFlag 	"Time millisecondsToRun:		[FloatArrayPlugin translateDoInlining: true.		Smalltalk beep]"	^ self translate: self moduleName , '.c' doInlining: inlineFlag! !!B3DRasterizerPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:48'!declareCVarsIn: cg	cg addHeaderFile:'"b3d.h"'.	cg var: #viewport type: #'static B3DPrimitiveViewport'.	cg var: #state type: #'static B3DRasterizerState'! !!B3DShaderPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:48'!declareCVarsIn: cg	cg var: #litVertex type: #'static float*'.	cg var: #primLight type: #'static float*'.	cg var: #primMaterial type: #'static float*'.	cg var: #l2vDirection declareC: 'static double l2vDirection[3]'.	cg var: #l2vSpecDir declareC: 'static double l2vSpecDir[3]'.	cg var: #vtxInColor declareC: 'static double vtxInColor[4]'.	cg var: #vtxOutColor declareC: 'static double vtxOutColor[4]'.	cg var: #l2vDistance type: #'static double'.	cg var: #lightScale type: #'static double'! !!BalloonEngineBase class methodsFor: 'class initialization' stamp: 'sma 3/3/2000 12:46'!declareCVarsIn: cg	"Buffers"	cg var: #workBuffer type: #'int*'.	cg var: #objBuffer type: #'int*'.	cg var: #getBuffer type: #'int*'.	cg var: #aetBuffer type: #'int*'.	cg var: #spanBuffer type: #'unsigned int*'.	cg var: #edgeTransform declareC: 'float edgeTransform[6]'.	cg var: #doProfileStats declareC: 'int doProfileStats = 0'! !!DSAPlugin class methodsFor: 'plugin translation' stamp: 'sma 3/3/2000 12:44'!declareCVarsIn: cg	cg var: #dsaRemainder type: #'unsigned char*'.	cg var: #dsaDivisor type:  #'unsigned char*'.	cg var: #dsaQuotient type: #'unsigned char*'! !!FFTPlugin class methodsFor: 'translation to C' stamp: 'sma 3/3/2000 12:43'!declareCVarsIn: cg	cg var: #sinTable type: #'float*'.	cg var: #realData type:  #'float*'.	cg var: #imagData type: #'float*'.	cg var: #permTable type: #'unsigned int*'! !!InflatePlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:31'!declareCVarsIn: cg	cg var: #zipCollection type: #'unsigned char*'.	cg var: #zipSource type: #'unsigned char*'.	cg var: #zipLitTable type: #'unsigned int*'.	cg var: #zipDistTable type: #'unsigned int*'! !!DeflatePlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:33'!declareCVarsIn: cg	super declareCVarsIn: cg. "Required since we share some instVars"	cg var: #zipHashHead type: #'unsigned int*'.	cg var: #zipHashTail type: #'unsigned int*'.	cg var: #zipLiterals type: #'unsigned char*'.	cg var: #zipDistances type: #'unsigned int*'.	cg var: #zipLiteralFreq type: #'unsigned int*'.	cg var: #zipDistanceFreq type: #'unsigned int*'.	cg var: #zipMatchLengthCodes type: #'unsigned int' array: ZipWriteStream matchLengthCodes.	cg var: #zipDistanceCodes type: #'unsigned int' array: ZipWriteStream distanceCodes.	cg var: #zipCrcTable type: #'unsigned int' array: GZipWriteStream crcTable.	cg var: #zipExtraLengthBits type: #'unsigned int' array: ZipWriteStream extraLengthBits.	cg var: #zipExtraDistanceBits type: #'unsigned int' array: ZipWriteStream extraDistanceBits.	cg var: #zipBaseLength type: #'unsigned int' array: ZipWriteStream baseLength.	cg var: #zipBaseDistance type: #'unsigned int' array: ZipWriteStream baseDistance! !!KlattSynthesizerPlugin class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:39'!declareCVarsIn: cg 	cg var: #resonators type: #'float*'.	cg var: #frame type: #'float*'.	cg var: #pitch type: #float.	cg var: #a1 type: #float.	cg var: #a2 type: #float.	cg var: #x1 type: #float.	cg var: #x2 type: #float.	cg var: #b1 type: #float.	cg var: #c1 type: #float.	cg var: #glast type: #float.	cg var: #vlast type: #float.	cg var: #nlast type: #float! !!Matrix2x3Plugin class methodsFor: 'class initialization' stamp: 'sma 3/3/2000 12:39'!declareCVarsIn: cg 	cg var: #m23ResultX type: #double.	cg var: #m23ResultY type: #double.	cg var: #m23ArgX type: #double.	cg var: #m23ArgY type: #double! !!ObjectMemory class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:40'!declareCVarsIn: aCCodeGenerator	aCCodeGenerator var: #memory type: #'unsigned char*'.	aCCodeGenerator		var: #remapBuffer		declareC: 'int remapBuffer[', (RemapBufferSize + 1) printString, ']'.	aCCodeGenerator		var: #rootTable		declareC: 'int rootTable[', (RootTableSize + 1) printString, ']'! !!Interpreter class methodsFor: 'translation' stamp: 'sma 3/3/2000 12:42'!declareCVarsIn: aCCodeGenerator	aCCodeGenerator		var: #methodCache		declareC: 'int methodCache[', (MethodCacheSize + 1) printString, ']'.	aCCodeGenerator		var: #atCache		declareC: 'int atCache[', (AtCacheTotalSize + 1) printString, ']'.	aCCodeGenerator var: #localIP type: #'char*'.	aCCodeGenerator var: #localSP type: #'char*'.	aCCodeGenerator		var: #semaphoresToSignal		declareC: 'int semaphoresToSignal[', (SemaphoresToSignalSize + 1) printString, ']'.	aCCodeGenerator		var: #compilerHooks		declareC: 'int (*compilerHooks[', (CompilerHooksSize + 1) printString, '])()'.	aCCodeGenerator		var: #interpreterVersion		declareC: 'const char *interpreterVersion = "', Smalltalk version, ' [', Smalltalk lastUpdateString,']"'! !DeflatePlugin class removeSelector: #printArray:on:!