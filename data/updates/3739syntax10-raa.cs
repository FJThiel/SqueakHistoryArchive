'From Squeak3.1alpha of 5 February 2001 [latest update: #3749] on 28 February 2001 at 3:11:13 pm'!"Change Set:		syntax10Date:			28 February 2001Author:			Bob Arning- ligatures in unaries only- all vertical blue bars removed"!!SyntaxMorph methodsFor: 'layout' stamp: 'RAA 2/28/2001 15:04'!addBlockArg: aMorph	"Add a temporary to a block or the method.  Return true if succeed"	"(aMorph nodeClassIs: TempVariableNode) is known to be true."	"***NOTE: This method should be combined with addTempVar:"	| tempHolder tt var nn |	owner isMethodNode ifTrue: [		^ (self addTempVar: aMorph)].	"Node for them is not inside the block"		"If exists, drop the temp in this block and let use extend it."	tt _ self firstSubmorph.	tempHolder _ tt firstSubmorph isSyntaxMorph 				ifTrue: [(tt nodeClassIs: BlockArgsNode) 							ifTrue: [tt] ifFalse: [nil]]				ifFalse: [nil].	nn _ aMorph parseNode key.	"name"	tempHolder ifNil: ["make whole row"		tempHolder _ self addRow: #blockarg1 on: (BlockArgsNode new).		self addMorphFront: tempHolder.		tempHolder addNoiseString: self noiseBeforeBlockArg.		aMorph parseNode name: nn key: nn code: nil.		var _ tempHolder addColumn: #tempVariable on: aMorph parseNode.		var layoutInset: 1.		var addMorphBack: (self addString: nn special: false).		self cleanupAfterItDroppedOnMe.		^ true].	tempHolder submorphsDo:		[:m | "if present. caller adds the temp as a new line of code to be extended"		m isSyntaxMorph and: [m parseNode key = nn ifTrue: [^ false]]].			"If this variable is not present, add it"	tempHolder addNoiseString: self noiseBeforeBlockArg.	aMorph parseNode name: nn key: nn code: nil.	tempHolder addMorphBack: (tempHolder transparentSpacerOfSize: 4@4).	var _ tempHolder addColumn: #tempVariable on: aMorph parseNode.	var layoutInset: 1.	var addMorphBack: (self aSimpleStringMorphWith: nn).	var cleanupAfterItDroppedOnMe.	^ true! !!SyntaxMorph methodsFor: 'layout' stamp: 'RAA 2/28/2001 15:05'!addTempVar: aMorph 	"know we are a block inside a MethodNode" 	"(aMorph nodeClassIs: TempVariableNode) is known to be true."	| tempHolder ii tt var nn |	tempHolder _ (ii _ owner submorphIndexOf: self) = 1				ifFalse: [tt _ owner submorphs at: ii - 1.						(tt isSyntaxMorph and: [tt nodeClassIs: MethodTempsNode])					 		ifTrue: [tt] ifFalse: [nil]]				ifTrue: [nil].	nn _ aMorph parseNode key.	"name"	tempHolder ifNil: [		tempHolder _ owner addRow: #tempVariable on: MethodTempsNode new.		tempHolder addNoiseString: self noiseBeforeBlockArg.		owner addMorph: tempHolder inFrontOf: self.		aMorph parseNode name: nn key: nn code: nil.		aMorph parseNode asMorphicSyntaxIn: tempHolder.		tempHolder cleanupAfterItDroppedOnMe.		^ true].	tempHolder submorphsDo:		[:m | m isSyntaxMorph and: [m parseNode key = nn ifTrue: [^ false]]].	aMorph parseNode name: nn key: nn code: nil.	tempHolder addNoiseString: self noiseBeforeBlockArg.	tempHolder addMorphBack: (tempHolder transparentSpacerOfSize: 4@4).	var _ tempHolder addColumn: #tempVariable on: aMorph parseNode.	var layoutInset: 1.	var addMorphBack: (self addString: nn special: false).	var cleanupAfterItDroppedOnMe.	^ true! !!SyntaxMorph methodsFor: 'menus' stamp: 'RAA 2/28/2001 15:06'!addToken: aString type: aColorOrSymbol on: aNode	| sMorph modifiedString noiseWord col |	self flag: #emphasis:.	"who needs it. who doesn't"	col _ (self addRow: aColorOrSymbol on: aNode) layoutInset: 1.	noiseWord _ [ :w |		w ifNotNil: [			col 				addMorphBack: (self noiseStringMorph: w);				addMorphBack: (self tokenVerticalSeparator)		].	].	self alansTest1 ifTrue: [		(self shouldBeBrokenIntoWords: aColorOrSymbol) ifTrue: [			modifiedString _ self substituteKeywordFor: aString.			sMorph _ self addString: modifiedString special: (aColorOrSymbol == #unary).			sMorph 				setProperty: #syntacticallyCorrectContents toValue: aString;				contents: modifiedString.		] ifFalse: [			sMorph _ self addString: (modifiedString _ aString) special: false.		].		(#(keyword2 upArrow) includes: aColorOrSymbol) ifTrue: [			sMorph 				font: (self fontToUseForSpecialWord: modifiedString); 				color: (self colorForKeywords: aString and: modifiedString).		].		(#(keyword2 unary assignmentArrow) includes: aColorOrSymbol) ifTrue: [			sMorph emphasis: 1.		].		aColorOrSymbol == #binary ifTrue: [sMorph color: self colorForBinaries].		aColorOrSymbol == #blockarg1 ifTrue: [		].		(aColorOrSymbol == #variable or: [aColorOrSymbol == #tempVariable]) ifTrue: [			aString = 'self' ifTrue: [				sMorph setProperty: #wordyVariantOfSelf toValue: true.			].			noiseWord value: (self noiseWordBeforeVariableNode: aNode string: aString).		].	] ifFalse: [		sMorph _ self addString: aString special: false.	].	col addMorphBack: sMorph.	^col! !!SyntaxMorph methodsFor: 'menus' stamp: 'RAA 2/28/2001 15:06'!addTokenSpecialCase: aString type: aColorOrSymbol on: aNode	| sMorph modifiedString noiseWord col |	self flag: #emphasis:.	"who needs it. who doesn't"	noiseWord _ nil.	sMorph _ self addString: aString special: false.	self specialBlockFormatting ifTrue: [		(aColorOrSymbol == #keyword2) ifTrue: [			modifiedString _ aString = 'if:' ifTrue: ['Test'] ifFalse: ['Yes'].			sMorph 				font: (self fontToUseForSpecialWord: modifiedString) "emphasis: 1"; 				color: (self colorForKeywords: aString and: modifiedString);				setProperty: #syntacticallyCorrectContents toValue: aString;				contents: modifiedString.		].	].	col _ (self addRow: aColorOrSymbol on: aNode) layoutInset: 1.	noiseWord ifNotNil: [		col 			addMorphBack: (self noiseStringMorph: noiseWord);			addMorphBack: (self transparentSpacerOfSize: 3@1)	].	col addMorphBack: sMorph.	^col! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/28/2001 15:06'!alansMessageNode: aNode receiver: receiver selector: selector keywords: key arguments: args	| row receiverMorph testAndReceiver anotherSelf 		wordyMorph template |	template _ self alansTemplateStyleFor: key.	receiver ifNotNil: ["i.e. not a cascade"		anotherSelf _ self constructSelfVariant: receiver and: key.		anotherSelf ifNotNil: [			wordyMorph _ self addString: anotherSelf special: false.			wordyMorph setProperty: #wordyVariantOfSelf toValue: true.			self addMorph: wordyMorph. 			self layoutInset: 1.			^self		].		testAndReceiver _ self.		template = 1 ifTrue: [			testAndReceiver _ self addRow: #keyword1 on: nil.			self setSpecialOuterTestFormat.			testAndReceiver addNoiseString: 'Test'		].		false "template = 2" ifTrue: [			testAndReceiver _ self addRow: #keyword1 on: nil.			"self setSpecialOuterTestFormat."			testAndReceiver addNoiseString: 'Repeat for'		].		receiverMorph _ receiver asMorphicSyntaxIn: testAndReceiver.		template = 1 ifTrue: [receiverMorph setConditionalPartStyle].	].	"unary messages"	args size = 0 ifTrue: [		((receiverMorph notNil) and: [receiverMorph nodeClassIs: MessageNode]) ifTrue: [			self addMorphBack: self tokenVerticalSeparator		].		row _ (self addUnaryRow: key style: #unary) layoutInset: 1.		^ row parseNode: selector	].	"binary messages"	key last = $: ifFalse: [		^self alanBinaryPostRcvr: aNode key: key args: args	].	"keyword messages"	receiverMorph ifNotNil: [receiverMorph setConditionalPartStyle].	self setSpecialOuterTestFormat.	self		alanKeywordMessage: aNode 		isAConditional: template 		key: key 		args: args! !!SyntaxMorph methodsFor: 'alans styles' stamp: 'RAA 2/28/2001 15:03'!tokenVerticalSeparator	^Morph new 		color: Color transparent;		extent: 3@3;		lock! !