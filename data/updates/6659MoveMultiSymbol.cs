'From Squeak3.8gamma of ''24 November 2004'' [latest update: #6643] on 11 April 2005 at 12:52:38 am'!"Change Set:		MoveMultiSymbolDate:			11 April 2005Author:			Andreas RaabMove MultiSymbol to be a Symbol subclass. Remove lots and lots of methods."!Symbol variableWordSubclass: #MultiSymbol	instanceVariableNames: ''	classVariableNames: 'MultiSymbolTable NewMultiSymbols OneCharacterMultiSymbols '	poolDictionaries: ''	category: 'Collections-Text'!!MultiSymbol commentStamp: '<historical>' prior: 0!This class represents the symbols containing 32bit characters.!!MultiSymbol methodsFor: 'accessing' stamp: 'ar 4/10/2005 23:38'!at: index 	"Answer the Character stored in the field of the receiver indexed by the argument."	^ Character value: (self wordAt: index).! !!MultiSymbol methodsFor: 'accessing' stamp: 'ar 4/10/2005 23:38'!byteAt: index	| d r |	d _ (index + 3) // 4.	r _ (index - 1) \\ 4 + 1.	^ (self wordAt: d) digitAt: ((4 - r) + 1).! !!MultiSymbol methodsFor: 'accessing' stamp: 'ar 4/10/2005 23:38'!byteAt: index put: aByte	self errorNoModification.! !!MultiSymbol methodsFor: 'accessing' stamp: 'ar 4/10/2005 23:38'!byteSize	^ self size * 4.! !!MultiSymbol methodsFor: 'accessing' stamp: 'ar 4/10/2005 23:38'!wordAt: index	<primitive: 60>	^ (self basicAt: index).! !!MultiSymbol methodsFor: 'accessing' stamp: 'ar 4/10/2005 23:39'!wordAt: index put: anInteger	self errorNoModification.! !!MultiSymbol methodsFor: 'testing' stamp: 'ar 4/10/2005 23:39'!isMultiByteString	"Answer whether the receiver is a MultiByteString"	^true! !!MultiSymbol methodsFor: 'private' stamp: 'ar 4/11/2005 00:09'!pvtAt: index put: aCharacter	"Primitive. Store the Character in the field of the receiver indicated by	the index. Fail if the index is not an Integer or is out of bounds, or if	the argument is not a Character. Essential. See Object documentation	whatIsAPrimitive."	<primitive: 61>	index isInteger		ifTrue: [self errorSubscriptBounds: index]		ifFalse: [self errorNonIntegerIndex]! !!MultiSymbol methodsFor: 'private' stamp: 'ar 4/10/2005 23:58'!string: aString	1 to: aString size do: [:j | self pvtAt: j put: (aString at: j) asInteger].	^self! !!MultiSymbol methodsFor: 'objects from disk' stamp: 'ar 4/10/2005 22:46'!fixUponLoad: aProject seg: anImageSegment
	"We are in an old project that is being loaded from disk.
Fix up conventions that have changed."
	| ms |

	"Yoshiki did not put MultiSymbols into outPointers in older
images!!  When all old images are gone, remove this method."
	ms _ Symbol intern: self asString.
	self == ms ifFalse: ["For a project from older m17n image,
this is necessary."
				self becomeForward: ms.
				aProject projectParameters at:
#MultiSymbolInWrongPlace put: true].

	^ super fixUponLoad: aProject seg: anImageSegment	"me,
not the label"
! !!MultiSymbol class methodsFor: 'class initialization' stamp: 'ar 4/10/2005 23:55'!initialize	Smalltalk removeFromShutDownList: self. "@@@ Remove this later @@@"! !!Scanner class methodsFor: 'testing' stamp: 'ar 4/11/2005 00:12'!isLiteralSymbol: aSymbol 	"Test whether a symbol can be stored as # followed by its characters.  	Symbols created internally with asSymbol may not have this property, 	e.g. '3' asSymbol."	| i ascii type |	i _ aSymbol size.	i = 0 ifTrue: [^ false].	i = 1 ifTrue: [('$''"()#0123456789' includes: (aSymbol at: 1))		ifTrue: [^ false] ifFalse: [^ true]].	ascii _ (aSymbol at: 1) asciiValue.	"TypeTable should have been origined at 0 rather than 1 ..."	ascii = 0 ifTrue: [^ false].	type _ TypeTable at: ascii ifAbsent:[#xLetter].	(type == #xColon or: [type == #verticalBar or: [type == #xBinary]]) ifTrue: [		i = 1 ifTrue: [^ true] ifFalse: [^ false]	].	type == #xLetter ifTrue: 			[[i > 1]				whileTrue: 					[ascii _ (aSymbol at: i) asciiValue.					ascii = 0 ifTrue: [^ false].					type _ TypeTable at: ascii ifAbsent:[#xLetter].					(type == #xLetter or: [type == #xDigit or: [type == #xColon]])						ifFalse: [^ false].					i _ i - 1].			^ true].	^ false! !Scanner class removeSelector: #isLiteralMultiSymbol:!MultiSymbol class removeSelector: #allMultiSymbolTablesDo:!MultiSymbol class removeSelector: #allMultiSymbolTablesDo:after:!MultiSymbol class removeSelector: #compactMultiSymbolTable!MultiSymbol class removeSelector: #compareTiming!MultiSymbol class removeSelector: #hasInterned:ifTrue:!MultiSymbol initialize!MultiSymbol class removeSelector: #internCharacter:!MultiSymbol class removeSelector: #intern:!MultiSymbol class removeSelector: #lookup:!MultiSymbol class removeSelector: #newFromStream:!MultiSymbol class removeSelector: #newFrom:!MultiSymbol class removeSelector: #possibleSelectorsFor:!MultiSymbol class removeSelector: #readFrom:!MultiSymbol class removeSelector: #rehash!MultiSymbol class removeSelector: #selectorsContaining:!MultiSymbol class removeSelector: #shutDown:!MultiSymbol class removeSelector: #thatStarts:skipping:!!MultiSymbol class reorganize!('class initialization' initialize)!MultiSymbol removeSelector: #asExplorerString!MultiSymbol removeSelector: #asMultiSymbol!MultiSymbol removeSelector: #asSymbol!MultiSymbol removeSelector: #byteEncode:!MultiSymbol removeSelector: #capitalized!MultiSymbol removeSelector: #clone!MultiSymbol removeSelector: #copy!MultiSymbol removeSelector: #errorNoModification!MultiSymbol removeSelector: #flushCache!MultiSymbol removeSelector: #isInfix!MultiSymbol removeSelector: #isKeyword!MultiSymbol removeSelector: #isLiteral!MultiSymbol removeSelector: #isOrientedFill!MultiSymbol removeSelector: #isPvtSelector!MultiSymbol removeSelector: #isSymbol!MultiSymbol removeSelector: #isUnary!MultiSymbol removeSelector: #precedence!MultiSymbol removeSelector: #replaceFrom:to:with:startingAt:!MultiSymbol removeSelector: #shallowCopy!MultiSymbol removeSelector: #storeOn:!MultiSymbol removeSelector: #sunitAsClass!MultiSymbol removeSelector: #veryDeepCopyWith:!MultiSymbol removeSelector: #=!MultiSymbol removeSelector: #asString!Symbol variableWordSubclass: #MultiSymbol	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Text'!!MultiSymbol reorganize!('accessing' at: at:put: byteAt: byteAt:put: byteSize wordAt: wordAt:put: species)('testing' isMultiByteString)('objects from disk' fixUponLoad:seg:)('private' pvtAt:put: string:)!