'From Squeak 2.3 of January 14, 1999 on 5 April 1999 at 1:19:20 pm'!"Change Set:		wnld-commentsDate:			5 April 1999Author:			Jeff PiercePreliminary comments for all the Wonderland classes."!!AbstractAnimation commentStamp: 'jsp 4/5/1999 12:11' prior: 0!This class implements the basic functionality of Animations for Wonderlands. All animations pass through 4 specific stages:Waiting - this is the state animations are in when they are just started, before they run their prologue (perform any tasks they need to do before the animation actually starts)Running - this is the state animations are in when they are actually runningStopped - this is the state animations are in after they stop running but before they execute their prologueFinished - this is the state animations are in after they finish their epilogue (perform any tasks they need to do after the animation completes).!!Animation commentStamp: 'jsp 4/5/1999 12:12' prior: 0!The Animation class extends the AbstractAnimation class with methods designed for simple (non-composite) animations.!!AbsoluteAnimation commentStamp: 'jsp 4/5/1999 12:08' prior: 0!An AbsoluteAnimation is any animation where the final state of the animation is always the same. Every time this animation runs we store the initial state, so that when the animation is reversed and run we can determine what that end point should be.!!Hierarchical commentStamp: 'jsp 4/5/1999 12:14' prior: 0!The Hierarchical class provides the basic functionality for parent-child relationships (and changing these relationships) for both the WonderlandScene and any WonderlandActors in the Wonderland.!!Interpolateable commentStamp: 'jsp 4/5/1999 12:02' prior: 0!The Interpolateable class is a wrapper for instances that don't have interpolation methods provided for them (like Numbers).!!RelativeAnimation commentStamp: 'jsp 4/5/1999 12:13' prior: 0!A relative animation is any animation where the final state is relative to the initial state (for example, moving forward 1 meter). To reverse these animations we essentially use the same initial state and just reverse the vector to the final state (ex. we move back one meter).!!UndoAction commentStamp: 'jsp 4/5/1999 12:23' prior: 0!Undo the effects of the wrapped Action.!!UndoAnimation commentStamp: 'jsp 4/5/1999 12:23' prior: 0!Undo an Animation.  Currently Wonderlands undo animations by running them in reverse with a compressed duration.!!UndoByStopping commentStamp: 'jsp 4/5/1999 12:24' prior: 0!This class undoes some action by stopping it.  If the action is already stopped then the next undo action is popped off the stack and evaluated.!!UndoColorChange commentStamp: 'jsp 4/5/1999 12:24' prior: 0!This class does a color change to an object.!!UndoPOVChange commentStamp: 'jsp 4/5/1999 12:25' prior: 0!This class undoes a point of view change to an object.!!UndoPositionChange commentStamp: 'jsp 4/5/1999 12:25' prior: 0!This class undoes actor motion.!!UndoRotationChange commentStamp: 'jsp 4/5/1999 12:25' prior: 0!This class undoes actor rotation.!!UndoShowHide commentStamp: 'jsp 4/5/1999 12:25' prior: 0!This class shows a hidden object and hides a shown actor.!!UndoSizeChange commentStamp: 'jsp 4/5/1999 12:26' prior: 0!This class undoes the resizing of an actor.!!UndoTextureChange commentStamp: 'jsp 4/5/1999 12:26' prior: 0!This class undoes an actor texture change.!!UndoVisibilityChange commentStamp: 'jsp 4/5/1999 12:26' prior: 0!This class undoes a change in an actor's visibility.!!Wonderland commentStamp: 'jsp 4/5/1999 12:02' prior: 0!Wonderlands are designed to make authoring interactive 3D worlds accessible to non-programmers. They are inspired by the work of the Stage 3 Research Group, Randy Pausch director, at Carnegie Mellon University.  Most of the ideas in Wonderlands are taken directly from the Alice authoring tool (http://www.alice.org).  That's only natural, considering I was one of the designers who worked on Alice.To create a Wonderland, evaluate:Wonderland newThis creates a script editor, a control panel, and a window into the 3D world. From here you're ready to start building your world.Jeff Piercejpierce@cs.cmu.edu!!WonderlandActor commentStamp: 'jsp 4/5/1999 12:17' prior: 0!The WonderlandActor class provides the basic behaviors for 3D objects.  These behaviors include (but are not limited to):- move- moveTo- turn- turnTo- roll- pointAt- place- resizeFor more details, see the Wonderlands ActiveEssay (coming soon to a theater near you). !!WonderlandActorBrowser commentStamp: 'jsp 4/5/1999 12:33' prior: 0!This class implements the actor browser.  The name of every actor in the Wonderland namespace is listed. The formatting is determined by the parent-child hierarchy.  Children of an actor are listed below and to the right of that actor.  The scene is at the root of the actor tree, and so is at the top left of the hierarchy.Any actor listed in the actor browser can be addressed by that name in the script editor.!!WonderlandCamera commentStamp: 'jsp 4/5/1999 12:18' prior: 0!The WonderlandCamera class extends the WonderlandActor functionality with the methods for specifying the viewing parameters.  Every view into the 3D world is assigned a camera, and each camera renders into a different morph.WonderlandCamera also know how to transform points on the 2D desktop into the 3D wonderland.!!WonderlandCameraControls commentStamp: 'jsp 4/5/1999 12:30' prior: 0!This class implements the controls for manipulating the viewpoint of a camera using the mouse.Currently clicking and dragging on the bitmap moves the camera forward/back and turns it left/right.Shift-clicking and dragging moves the camera left/right and up/down.Control-clicking and dragging turns the camera left/right.Shift-Control-clicking and dragging turns the camera up/down.!!WonderlandCameraMorph commentStamp: 'jsp 4/5/1999 12:29' prior: 0!This class implements the morph that provides a view into the 3D world.  Each instance has a camera assigned to it that determines the viewpoint and parameters of the view.  Each instance also has the camera controls for that camera attached to it, and is responsible for showing or hiding them.!!WonderlandEditor commentStamp: 'jsp 4/5/1999 12:31' prior: 0!This class implements the tabbed palette that includes the script editor and the actor browser.!!WonderlandMesh commentStamp: 'jsp 4/5/1999 12:07' prior: 0!This class extends the basic Balloon 3D mesh class with the ability to parse OBJ and VFB (used with Alice MDL files) files.!!WonderlandMorph commentStamp: 'jsp 4/5/1999 12:27' prior: 0!This class implements the control panel for Wonderlands, including the Undo button and Quit button.!!WonderlandScene commentStamp: 'jsp 4/5/1999 12:20' prior: 0!Every Wonderland contains an instance of the WonderlandScene.  The scene is at the top of the object hierarchy: all objects are (directly or indirectly) children of the scene.  The scene also defines the global coordinate system for the 3D world.!!WonderlandScriptEditor commentStamp: 'jsp 4/5/1999 12:31' prior: 0!This class implements the script editor for Wonderlands.  The script editor is a Wonderland that has been modified to use the Wonderland's namespace.!!WonderlandStyle commentStamp: 'jsp 4/5/1999 12:05' prior: 0!The WonderlandStyle class implements different animation styles.  The four styles this class provides are gently (slow-in, slow-out), beginGently (slow-in), endGently (slow-out), and abruptly (linear).Animations use these styles through blocks of the form:[ :elapsed :duration | WonderlandStyle beginGentlyAfter: elapsed outOf: duration ]The intention is that using this mechanism the user can specify arbitrary styles using blocks and pass them to animations.!!WonderlandUndoStack commentStamp: 'jsp 4/5/1999 12:22' prior: 0!This class implements the undo stack for Wonderlands.  Every user action is added to the undo stack, and the user can then undo each action one at a time. This stack is intended to be "infinite" so that the user can always roll back to a safe state.  In practice the stack is actually depth limited (to 100 actions), but the user can adjust this depth using the setMaxDepth: message.!!WonderlandVerifier commentStamp: 'jsp 4/5/1999 12:06' prior: 0!This class implements methods for verifying the parameters passed to methods.  The intention is that each parameter is verified, and if it's not of the expected type then an error message is constructed and displayed to the user. This provides a gentler method of informing the user of errors than throwing them into the debugger.!