'From Squeak 2.3 beta of Nov 25, 1998 on 07 January 1999 at 9:33:34 am'!"Change Set:		acgHtmlFileStreamDate:			07 January 1999Author:			Andrew GreenbergBug fixes to HtmlFileStream:	1.	HtmlFileStream wrongly printed files using ampersand codes for the angle brackets in HTML commands.  This was fixed.	2.	HtmlFileStream didn't handle CrLf line end conventions correctly.  This was fixed.  (HtmlFileStream is now a subclass of CrLfFileStream).	3.	HtmlFileStream, as used in printOut would frequently crash when writing to existing files. This was caused by common uses of HtmlFileStream in the object returned by:		ExistingStandardFileStream asHtml.Unfortunately, the surviving new HtmlFileStream, though it would have the same instance variables as ExistingStandardFileStream, would not be registered for finalization and the original was.  Thus, after the next garbage collect, the existing file would be closed since the system thinks there are no more references to the file.  This was fixed." !CrLfFileStream subclass: #HtmlFileStream	instanceVariableNames: 'prevPreamble '	classVariableNames: 'TabThing '	poolDictionaries: ''	category: 'System-Files'!!HtmlFileStream commentStamp: 'acg 01/01/1999 13:40' prior: 0!The Class apes StandardFileStream, but converts the text to HTML before putting it out (primarily intended for printOut).  It can be invoked with	((FileStream fileNamed: 'changes.html') asHtml) fileOutChangesUse usual FileStream methods to put out text converted to	HTML fairly approximating that text  (for best looks, use 	method:, methodHeader:, methodBody:, for code);verbatim: puts text out without conversion;command: put out HTML items, such as <br>, supplying the brackets.header: and trailer: put out an HTML wrapper (preamble and closing text)nextPut does the actual conversion, nextPutAll: defers characters to nextPut.The code is fairly dumb at present, doing a wooden straightforward conversion of the text without attempting to capture the style or fonts in which the original text was rendered.  Tabs are handled awkwardly, using &nbsp, so that probably only leading strings are working right.  Style sheets now permit us to do a much neater looking job if there is interest in improving the looks of things.!]style[(1039)f1cred;!!HtmlFileStream reorganize!('HTML' command:)('fileIn/Out' copyMethodChunkFrom: copyPreamble:from: nextChunk skipSeparators)('read, write, position' header nextPut: nextPutAll: trailer verbatim:)!!HtmlFileStream methodsFor: 'read, write, position' stamp: 'acg 01/01/1999 13:59'!nextPut: char	"Put a character on the file, but translate it first. 4/6/96 tk 1/1/98 acg"	char = $< ifTrue: [^ super nextPutAll: '&lt;'].	char = $> ifTrue: [^ super nextPutAll: '&gt;'].	char = $& ifTrue: [^ super nextPutAll: '&amp;'].	char asciiValue = 13 "return" 		ifTrue: [self command: 'br'].	char = $	"tab" 		ifTrue: [self verbatim: TabThing. ^super nextPut: char].	^ super nextPut: char! !!HtmlFileStream methodsFor: 'read, write, position' stamp: 'acg 01/07/1999 09:24'!trailer	"append the HTML trailer.  Call this just before file close.	4/4/96 tk"	| cr |	cr _ String with: Character cr.	self command: '/BODY'; verbatim: cr.	self command: '/HTML'; verbatim: cr.!]style[(7 192)f1bcblue;,f1! !!HtmlFileStream methodsFor: 'read, write, position' stamp: 'acg 01/02/1999 00:38'!verbatim: aString	"Put out the string without HTML conversion. 1/1/99 acg"	super nextPutAll: aString	"'super verbatim:' in the 2.3beta draft didn't perform as expected -- the code was printed with conversion.  In a sense, that wouldn't make sense either -- we don't want strictly verbatim printing, just printing without the HTML conversion (that is, skipping around just the nextPut: and nextPutAll: for just this Class).  If there were intermediate conversions (say, CRLF!!), we would want those to happen as advertised -- perhaps we should use a differently named selector, perhaps something like nextPutWithoutHTMLConversion:, so that verbatim isn't overridden?"! !!HtmlFileStream class reorganize!('instance creation' newFrom:)('class initialization' initialize)!!HtmlFileStream class methodsFor: 'instance creation' stamp: 'acg 01/07/1999 09:24'!newFrom: aFileStream	"Answer an HtmlFileStream that is 'like' aFileStream.  As a side-effect, the surviving fileStream answered by this method replaces aFileStream on the finalization registry. 1/6/99 acg"	|inst|	inst _ super newFrom: aFileStream.	StandardFileStream unregister: aFileStream.	HtmlFileStream register: inst.	inst detectLineEndConvention.	^inst! !!HtmlFileStream class methodsFor: 'class initialization' stamp: 'acg 01/01/1999 13:57'!initialize   "HtmlFileStream initialize"	TabThing _ '&nbsp;&nbsp;&nbsp;'"I took Ted's suggestion to use &nbsp, which works far better for the HTML.  Style sheets provide an alternative, possibly better, solution since they permit finer-grain control of the HTML formatting, and thus would permit capturing the style in which text was originally rendered.  Internal tabbings would still get lost. 1/1/99 acg."! !HtmlFileStream removeSelector: #aComment!HtmlFileStream initialize!"Initialize Class instance variables"HtmlFileStream initialize.!