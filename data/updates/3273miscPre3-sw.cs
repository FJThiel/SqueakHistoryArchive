'From Squeak2.9alpha of 5 August 2000 [latest update: #3327] on 31 January 2001 at 1:11:13 am'!"Change Set:		miscPre3-swDate:			30 January 2001Author:			Scott WallaceAdds an item in the class-list-menu of browsers allowing you to add all selectors of the selected class or metaclass to the current change set.Adds a new command to the morphic 'windows & flaps' menu which allows you to force all windows onscreen.  This is especially useful if you have inadvertently lost the title tabs of some windows off the top of your screen.Adds stay-up item to shifted change-set-list menu in change sorter.Provides a workaround for an error when copying some changes from one side to another in a change sorter.When the user switches the infiniteUndo preference to false, clear out all command histories in the image."!!Browser methodsFor: 'class functions' stamp: 'sw 1/30/2001 15:52'!addAllMethodsToCurrentChangeSet	"Add all the methods in the selected class or metaclass to the current change set.  You ought to know what you're doing before you invoke this!!"	| aClass |	(aClass _ self selectedClassOrMetaClass) ifNotNil:		[aClass selectors do:			[:sel |				Smalltalk changes adoptSelector: sel forClass: aClass].		self changed: #annotation]! !!Browser methodsFor: 'class functions' stamp: 'sw 1/30/2001 15:46'!classListMenu: aMenu shifted: shifted	"Set up the menu to apply to the receiver's class list, honoring the #shifted boolean"	^ aMenu addList: (shifted		ifFalse: [#(			-			('browse full (b)'			browseMethodFull)			('browse hierarchy (h)'		spawnHierarchy)			('browse protocol (p)'		browseFullProtocol)			-			('printOut'					printOutClass)			('fileOut'					fileOutClass)			-			('show hierarchy'			hierarchy)			('show definition'			editClass)			('show comment'			editComment)			-			('inst var refs...'			browseInstVarRefs)			('inst var defs...'			browseInstVarDefs)			-			('class var refs...'			browseClassVarRefs)			('class vars'					browseClassVariables)			('class refs (N)'				browseClassRefs)			-			('rename class ...'			renameClass)			('copy class'				copyClass)			('remove class (x)'			removeClass)			-			('find method...'				findMethod)			-			('more...'					shiftedYellowButtonActivity))]		ifTrue: [#(			-			('unsent methods'			browseUnusedMethods)			('unreferenced inst vars'	showUnreferencedInstVars)			('subclass template'			makeNewSubclass)			-			('sample instance'			makeSampleInstance)			('inspect instances'			inspectInstances)			('inspect subinstances'		inspectSubInstances)			-			('fetch documentation'		fetchClassDocPane)			('add all meths to current chgs'		addAllMethodsToCurrentChangeSet)			-			('more...'					unshiftedYellowButtonActivity))])! !!ChangeSet methodsFor: 'moving changes' stamp: 'sw 1/30/2001 15:41'!absorbStructureOfClass: aClass from: otherChangeSet	"Absorb into the receiver all the structure and superclass info in the other change set.  Used to write conversion methods."	| sup next |	otherChangeSet structures ifNil: [^ self].	(otherChangeSet structures includesKey: aClass name) ifFalse: [^ self].	structures ifNil:		[structures _ Dictionary new.		superclasses _ Dictionary new].	sup _ aClass name.	[(structures includesKey: sup) 		ifTrue: ["use what is here" true]		ifFalse: [self flag: #noteToDan.  "sw 1/30/2001 13:57 emergency workaround -- a case arose where the otherChangeSet's structures did not have the key, and it gummed up the works."				(otherChangeSet structures includesKey: sup) ifTrue:					[structures at: sup put: (otherChangeSet structures at: sup)].				next _ otherChangeSet superclasses at: sup.				superclasses at: sup put: next.				(sup _ next) = 'nil']	] whileFalse.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 1/29/2001 02:46'!shiftedChangeSetMenu: aMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	Smalltalk isMorphic ifTrue:		[aMenu title: 'Change set (shifted)'.		aMenu addStayUpItemSpecial].	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with opposite side' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.].	aMenu addLine.	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	Utilities authorInitialsPerSe isEmptyOrNil ifFalse:		[aMenu add: 'check for other authors' action: #checkForAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'].	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'go to change set''s project' action: #goToChangeSetsProject.	aMenu balloonTextForLastItem: 'If this change set is currently associated with a Project, go to that project right now.'.	aMenu add: 'promote to top of list' action: #promoteToTopChangeSet.	aMenu balloonTextForLastItem:'Make this change set appear first in change-set lists in all change sorters.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'expunge uniclasses' action: #expungeUniclasses.	aMenu balloonTextForLastItem:'Remove from the change set all memory of uniclasses, e.g. classes added on behalf of etoys, fabrik, etc., whose classnames end with a digit.'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'file into new...' action: #fileIntoNewChangeSet.	aMenu balloonTextForLastItem: 'Load a fileout from disk and place its changes into a new change set (seldom needed -- much better to do this from a file-list browser these days.)'.	aMenu add: 'file out all change sets' action: #fileOutUnnumberedChangeSets.	aMenu balloonTextForLastItem:'File out every change set in the system whose name does not begin with a digit, except those that are empty or whose names start with "Play with me".  The usual checks for slips are suppressed when this command is done.'.	aMenu addLine.	aMenu add: 'more...' action: #unshiftedYellowButtonActivity.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 1/30/2001 20:37'!bringWindowsFullOnscreen	"Make ever SystemWindow on the desktop be totally on-screen, whenever possible."		(SystemWindow windowsIn: self satisfying: [:w | true]) do:		[:aWindow | 			aWindow right: (aWindow right min: bounds right).			aWindow bottom: (aWindow bottom min: bounds bottom).			aWindow left: (aWindow left max: bounds left).			aWindow top: (aWindow top max: bounds top)]! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sw 1/30/2001 19:58'!noteThatFlag: prefSymbol justChangedTo: aBoolean	"Provides a hook so that a user's toggling of a preference might precipitate some immediate action"	| keep |	prefSymbol == #useGlobalFlaps ifTrue:		[aBoolean			ifFalse:		"Turning off use of flaps"				[keep _ self confirm:'Do you want to preserve the existingglobal flaps for future use?'.				Utilities globalFlapTabsIfAny do:					[:aFlapTab | Utilities removeFlapTab: aFlapTab keepInList: keep.					aFlapTab isInWorld ifTrue: [self error: 'Flap problem']].				keep ifFalse: [Utilities clobberFlapTabList]]			ifTrue:		"Turning on use of flaps"				[Smalltalk isMorphic ifTrue:					[self currentWorld addGlobalFlaps]]].	prefSymbol == #roundedWindowCorners ifTrue: [Display repaintMorphicDisplay].	prefSymbol == #optionalButtons ifTrue:		[Utilities replacePartSatisfying: [:el | (el isKindOf: MorphThumbnail) and: [(el morphRepresented isKindOf: SystemWindow) and: [el morphRepresented model isKindOf: FileList]]]inGlobalFlapSatisfying: [:f1 | f1 wording = 'Tools'] with:  FileList openAsMorph applyModelExtent].	(prefSymbol == #optionalButtons  or: [prefSymbol == #annotationPanes]) ifTrue:		[Utilities replaceBrowserInToolsFlap].	(prefSymbol == #smartUpdating) ifTrue:		[SystemWindow allSubInstancesDo:			[:aWindow | aWindow amendSteppingStatus]].	(prefSymbol == #eToyFriendly) ifTrue:		[ScriptingSystem customizeForEToyUsers: aBoolean].	((prefSymbol == #infiniteUndo) and: [aBoolean not]) ifTrue:		[CommandHistory resetCommandHistory]! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'sw 1/30/2001 20:41'!windowsMenu        "Build the windows menu for the world."        ^ self fillIn: (self menu: 'windows & flaps...') from: {                  { 'find window' . { #myWorld . #findWindow: }. 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'}.                { 'find changed browsers...' . { #myWorld . #findDirtyBrowsers: }. 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.                { 'find changed windows...' . { #myWorld . #findDirtyWindows: }. 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.                { 'find a transcript' . { #myWorld . #findATranscript: }. 'Brings an open Transcript to the front, creating one if necessary, and makes it the active window'}.			 nil.               { 'find a change sorter (C)' . { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window'}.			 nil.                { #staggerPolicyString . { self . #toggleWindowPolicy }. 'stagger: new windows positioned so you can see a portion of each one.                tile: new windows positioned so that they do not overlap others, if possible.'}.                nil.                { 'collapse all windows' . { #myWorld . #collapseAll }. 'Reduce all open windows to collapsed forms that only show titles.'}.                { 'expand all windows' . { #myWorld . #expandAll }. 'Expand all collapsed windows back to their expanded forms.'}.                { 'close top window (w)' . { SystemWindow . #closeTopWindow }. 'Close the topmost window if possible.'}.                { 'send top window to back (\)' . { SystemWindow . #sendTopWindowToBack  }. 'Make the topmost window become the backmost one, and activate the window just beneath it.'}.			 { 'move windows onscreen' . { #myWorld . #bringWindowsFullOnscreen }. 'Make all windows fully visible on the screen'}.                nil.                { 'delete unchanged windows' . { #myWorld . #closeUnchangedWindows }. 'Deletes all windows that do not have unsaved text edits.'}.                { 'delete non-windows' . { #myWorld . #deleteNonWindows }. 'Deletes all non-window morphs lying on the world.'}.                { 'delete both of the above' . { self . #cleanUpWorld }. 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'}.                nil.            "    { #suppressFlapsString . { self . #toggleFlapSuppressionInProject }. 'Governs whether flaps should be shown in this project'}."                { #useGlobalFlapsString . { self. #toggleWhetherToUseGlobalFlaps }. 'Governs whether a universal set of "global" flaps should be sharable by all morphic projects.'}.			{ #whichGlobalFlapsString . { Utilities. #offerGlobalFlapsMenu }. 'Put up a menu that allows you to choose which global flaps to show in this project'. #globalFlapsEnabled}.                { #newGlobalFlapString  . { Utilities . #addGlobalFlap }. 'Create a new flap that will be shared by all morphic projects'.  #globalFlapsEnabled}.                nil.                { 'new project flap...'  . { Utilities . #addLocalFlap }. 'Create a new flap to be used only in this project.'}.                { 'add stack-tools flap'  . { Utilities . #addStackToolsFlap }. 'Add a flap in this project that offers tools for creating stacks and cards.'}.				nil.                { 'about flaps...' . { Utilities . #explainFlaps }. 'Gives a window full of details about how to use flaps.'}.        }! !