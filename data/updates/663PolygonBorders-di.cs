'From Squeak 2.3 of January 14, 1999 on 10 February 1999 at 4:40:41 pm'!"Change Set:		PolygonBordersDate:			10 February 1999Author:			Dan IngallsThis changeSet make several improvements to Polygons and Curves:1.  Translucent borders now work in 16 and 32 bits.2.  Opening or closing a polygon updates handles correctly."!BorderedMorph subclass: #PolygonMorph	instanceVariableNames: 'vertices closed filledForm quickFill arrows arrowForms handles borderForm '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!!PolygonMorph methodsFor: 'access' stamp: 'di 2/10/1999 16:32'!makeClosed	closed _ true.	handles ifNotNil: [self removeHandles; addHandles].	self computeBounds! !!PolygonMorph methodsFor: 'access' stamp: 'di 2/10/1999 16:34'!makeOpen	closed _ false.	handles ifNotNil: [self removeHandles; addHandles].	self computeBounds! !!PolygonMorph methodsFor: 'drawing' stamp: 'di 2/10/1999 15:29'!drawBorderOn: aCanvas	"Display my border on the canvas."	| lineColor bevel topLeftColor bottomRightColor bigClipRect brush p1i p2i |	(borderColor == nil or: [borderColor isColor and: [borderColor isTransparent]])		ifTrue: [^ self].	lineColor _ borderColor.	bevel _ false.	"Border colors for bevelled effects depend on CW ordering of vertices"	borderColor == #raised ifTrue: 			[topLeftColor _ color lighter.			bottomRightColor _ color darker.			bevel _ true].	borderColor == #inset ifTrue: 			[topLeftColor _ owner colorForInsets darker.			bottomRightColor _ owner colorForInsets lighter.			bevel _ true].	bigClipRect _ aCanvas clipRect expandBy: self borderWidth + 1 // 2.	brush _ nil.	self		lineSegmentsDo: 			[:p1 :p2 | 			p1i _ p1 asIntegerPoint.			p2i _ p2 asIntegerPoint.			(closed or: ["bigClipRect intersects: (p1i rect: p2i) optimized:"				((p1i min: p2i)					max: bigClipRect origin)					<= ((p1i max: p2i)							min: bigClipRect corner)])				ifTrue: 					[bevel						ifTrue: [(p1i quadrantOf: p2i)								> 2								ifTrue: [lineColor _ topLeftColor]								ifFalse: [lineColor _ bottomRightColor]].					(borderWidth > 3 and: [borderColor isColor])						ifTrue: 							[brush == nil ifTrue: [brush _ (ColorForm dotOfSize: borderWidth)											colors: (Array with: Color transparent with: borderColor)].							aCanvas								line: p1i								to: p2i								brushForm: brush]						ifFalse: [aCanvas								line: p1i								to: p2i								width: borderWidth								color: lineColor]]].! !!PolygonMorph methodsFor: 'drawing' stamp: 'di 2/10/1999 15:27'!drawOn: aCanvas 	"Display the receiver, a spline curve, approximated by straight line segments."	| |	vertices size < 1 ifTrue: [self error: 'a polygon must have at least one point'].	closed & color isTransparent not		ifTrue: [aCanvas stencil: self filledForm at: bounds topLeft - 1 color: color].	(borderColor isColor and: [borderColor isTranslucentColor])		ifTrue: [aCanvas stencil: self borderForm at: bounds topLeft						color: borderColor]		ifFalse: [self drawBorderOn: aCanvas].	self arrowForms do:		[:f | aCanvas stencil: f at: f offset			color: (borderColor isColor ifTrue: [borderColor] ifFalse: [color])]! !!PolygonMorph methodsFor: 'private' stamp: 'di 2/10/1999 15:09'!borderForm	"A form must be created for drawing the border whenever the borderColor is translucent."	| borderCanvas |	borderForm ifNotNil: [^ borderForm].	borderCanvas _ (FormCanvas extent: bounds extent depth: 1)		setShadowDrawing; stipple: Color black;		copyOffset: bounds topLeft negated.	self drawBorderOn: borderCanvas.	borderForm _ borderCanvas form copy offset: 0@0.	^ borderForm! !!PolygonMorph methodsFor: 'private' stamp: 'di 2/10/1999 15:34'!filledForm	"Note: The filled form is actually 2 pixels bigger than bounds, and the point corresponding to this morphs' position is at 1@1 in the form.  This is due to the details of the fillig routines, at least one of which requires an extra 1-pixel margin around the outside.  Computation of the filled form is done only on demand."	| bb origin |	closed ifFalse: [^ filledForm _ nil].	filledForm ifNotNil: [^ filledForm].	filledForm _ Form extent: bounds extent+2.	"Draw the border..."	bb _ (BitBlt toForm: filledForm) sourceForm: nil; fillColor: Color black;			combinationRule: Form over; width: 1; height: 1.	origin _ bounds topLeft asIntegerPoint-1.	self lineSegmentsDo: [:p1 :p2 | bb drawFrom: p1 asIntegerPoint-origin										to: p2 asIntegerPoint-origin].	"Fill it in..."	quickFill ifTrue: [filledForm convexShapeFill: Color black]			ifFalse: [filledForm _ filledForm anyShapeFill].	(borderColor isColor and: [borderColor isTranslucentColor]) ifTrue:		["If border is stored as a form, then erase any overlap now."		filledForm copy: self borderForm boundingBox from: self borderForm			to: 1@1 rule: Form erase].	^ filledForm! !!PolygonMorph methodsFor: 'private' stamp: 'di 2/10/1999 14:59'!releaseCachedState	filledForm _ nil.	arrowForms _ nil.	borderForm _ nil! !PolygonMorph removeSelector: #drawBorderOn:color:!