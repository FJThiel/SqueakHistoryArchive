'From Squeak2.9alpha of 13 June 2000 [latest update: #2824] on 7 October 2000 at 9:12:19 pm'!"Change Set:		MetaTweaks-arDate:			7 October 2000Author:			Andreas RaabTwo more resurrections. Makes menu-driven embedding work again (I forgot to make this work again when putting out wave #3) and makes the control menu appear on the top-most morph within a pasteUp (which I *think* was the behavior we had before)."!!Morph methodsFor: 'submorphs-accessing' stamp: 'ar 10/7/2000 20:43'!morphsAt: aPoint behind: aMorph unlocked: aBool	"Return all morphs at aPoint that are behind frontMorph; if aBool is true return only unlocked, visible morphs."	| isBack found all tfm |	(aMorph == nil or:[owner == nil]) ifTrue:["Traverse down"		(self fullBounds containsPoint: aPoint) ifFalse:[^#()].		(aBool and:[self isLocked or:[self visible not]]) ifTrue:[^#()].		all _ nil.	] ifFalse:[ "Traverse up"		tfm _ self transformedFrom: owner.		all _ owner morphsAt: (tfm localPointToGlobal: aPoint) behind: self unlocked: aBool.		all _ WriteStream with: all.	].	isBack _ aMorph == nil.	self submorphsDo:[:m|		isBack ifTrue:[			tfm _ m transformedFrom: self.			found _ m morphsAt: (tfm globalPointToLocal: aPoint) behind: nil unlocked: aBool.			found size > 0 ifTrue:[				all ifNil:[all _ WriteStream on: #()].				all nextPutAll: found]].		m == aMorph ifTrue:[isBack _ true]].	(isBack and:[self containsPoint: aPoint]) ifTrue:[		all ifNil:[^Array with: self].		all nextPut: self].	^all ifNil:[#()] ifNotNil:[all contents].! !!Morph methodsFor: 'menus' stamp: 'ar 10/7/2000 20:47'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	self maybeAddCollapseItemTo: aMenu.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer:.	aMenu addLine.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	self player ifNotNil:		[aMenu addLine.		aMenu add: 'make a sibling instance' target: self action: #makeNewPlayerInstance:.		aMenu balloonTextForLastItem: 'Makes another morph whose player is of the same class as this one.  Both siblings will share the same scripts'].	aMenu addLine.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' target: self action: #embedInto:].	aMenu defaultTarget: self.	aMenu addUpdating: #lockedString action: #lockUnlockMorph.	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu		defaultTarget: self;		add: 'add mouse up action' action: #addMouseUpAction;		add: 'remove mouse up action' action: #removeMouseUpAction.	aMenu addLine.	aMenu defaultTarget: self topRendererOrSelf.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	(owner == nil) ifFalse:		[aMenu add: 'send to back' action: #goBehind.		aMenu add: 'bring to front' action: #comeToFront].	aMenu defaultTarget: aHandMorph.! !!Morph methodsFor: 'events-processing' stamp: 'ar 10/7/2000 20:59'!handlerForMouseDown: anEvent	"Return the (prospective) handler for a mouse down event. The handler is temporarily installed and can be used for morphs further down the hierarchy to negotiate whether the inner or the outer morph should finally handle the event"	anEvent blueButtonPressed ifTrue:[^self handlerForBlueButtonDown: anEvent].	anEvent controlKeyPressed ifTrue:[^self handlerForMetaMenu: anEvent].	(self handlesMouseDown: anEvent) ifFalse:[^nil]. "not interested"	anEvent handler ifNil:[^self]. "Nobody else was interested"	self mouseDownPriority >= anEvent handler mouseDownPriority 		ifTrue:[^self] "Same priority but I am innermost"		ifFalse:[^nil]. "Other guy has higher priority than I"! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/7/2000 20:48'!buildMetaMenu: evt	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph:.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer:.	self maybeAddCollapseItemTo: menu.	menu add: 'delete' action: #dismissMorph:.	menu addLine.	menu add: 'copy Postscript' action: #clipPostscript.	menu add: 'print PS to file...' action: #printPSToFile.	menu addLine.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo:.	menu add: 'duplicate' action: #maybeDuplicateMorph:.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #embedInto:].	menu add: 'resize' action: #resizeMorph:.	"Give the argument control over what should be done about fill styles"	self addFillStyleMenuItems: menu hand: evt hand.self flag: #arNote. "fix this""	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine."	menu add: 'inspect' action: #inspectInMorphic:.	menu add: 'explore' action: #explore.	menu add: 'browse hierarchy' action: #browseHierarchy.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #choosePartName.	(self isMorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(self ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	(self hasProperty: #resourceFilePath)		ifTrue: [((self valueOfProperty: #resourceFilePath) endsWith: '.morph')				ifTrue: [menu add: 'save as resource' action: #saveAsResource].				menu add: 'update from resource' action: #updateFromResource]		ifFalse: [menu add: 'attach to resource' action: #attachToResource].	menu add: 'show actions' action: #showActions.	menu addLine.	self addCustomMenuItems: menu hand: evt hand.	^ menu! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/7/2000 20:53'!embedInto: evt	"Embed the receiver into some other morph"	|  menu target |	menu _ CustomMenu new.	self potentialEmbeddingTargets  do: [:m | 		menu add: (m knownName ifNil:[m class name asString]) action: m].	target _ menu startUpWithCaption: ('Place ', self externalName, ' in...').	target ifNil:[^self].	target addMorphFront: self fromWorldPosition: self positionInWorld.! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/7/2000 21:05'!handlerForMetaMenu: evt	"Return the prospective handler for invoking the meta menu. By default, the top-most morph below any paste up gets this menu"	self isPlayfieldLike ifTrue:[^self].	evt handler ifNotNil:[evt handler isPlayfieldLike ifTrue:[^self]].	^nil! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/7/2000 20:56'!potentialEmbeddingTargets	"Return the potential targets for embedding the receiver"	owner ifNil:[^#()].	^owner morphsAt: self referencePosition behind: self unlocked: true! !!MenuMorph methodsFor: 'private' stamp: 'ar 10/7/2000 21:08'!invokeMetaMenu: evt	stayUp ifFalse:[^self]. "Don't allow this"	^super invokeMetaMenu: evt! !