'From Squeak 2.4b of April 23, 1999 on 20 July 1999 at 1:12:16 am'!"Change Set:		Alice2AnimsDate:			20 July 1999Author:			Jeff PierceA first pass at moving animations over to version 2 of Alice."!Object subclass: #AliceUndoAnimation	instanceVariableNames: 'wrappedAnimation '	classVariableNames: ''	poolDictionaries: ''	category: 'Alice2.0-Undo'!Object subclass: #AliceUpdateable	instanceVariableNames: 'myScheduler '	classVariableNames: ''	poolDictionaries: ''	category: 'Alice2.0-Time'!AliceUpdateable subclass: #AliceAbstractAnimation	instanceVariableNames: 'startTime endTime duration state direction loopCount undoable myWonderland pausedInterval animatedObject '	classVariableNames: 'Finished Forward Infinity Paused Reverse Running Stopped Waiting '	poolDictionaries: ''	category: 'Alice2.0-Time'!AliceUpdateable subclass: #AliceAction	instanceVariableNames: 'actionTask paused affectedObject lifetime stopCondition '	classVariableNames: ''	poolDictionaries: ''	category: 'Alice2.0-Time'!AliceUpdateable subclass: #AliceAlarm	instanceVariableNames: 'alarmTask alarmTime '	classVariableNames: ''	poolDictionaries: ''	category: 'Alice2.0-Time'!AliceUpdateable subclass: #AliceScript	instanceVariableNames: 'scriptName myCommands activeAnimations pendingCommands scriptType isRunning myWorld '	classVariableNames: ''	poolDictionaries: 'AliceConstants '	category: 'Alice2.0-Scripts'!AliceAbstractAnimation subclass: #AliceSimpleAnimation	instanceVariableNames: 'startState endState proportionDone getStartStateFunction getEndStateFunction updateFunction styleFunction '	classVariableNames: ''	poolDictionaries: ''	category: 'Alice2.0-Time'!AliceSimpleAnimation subclass: #AliceAbsoluteAnimation	instanceVariableNames: 'lastStartState '	classVariableNames: ''	poolDictionaries: ''	category: 'Alice2.0-Time'!AliceSimpleAnimation subclass: #AliceRelativeAnimation	instanceVariableNames: 'getReverseStateFunction '	classVariableNames: ''	poolDictionaries: ''	category: 'Alice2.0-Time'!!AliceUndoAnimation methodsFor: 'accessing' stamp: 'jsp 7/20/1999 00:10'!setAnimation: anAnimation	"Set wrapped animation."	wrappedAnimation _ anAnimation.! !!AliceUndoAnimation methodsFor: 'undoing' stamp: 'jsp 7/20/1999 00:10'!undoIt	"Undo by running the wrapped animation."	wrappedAnimation start.! !!AliceUndoAnimation class methodsFor: 'instance creation' stamp: 'jsp 7/20/1999 00:11'!new: anAnimation	"Create a wrapper for undoing an animation"	| newUndo |	newUndo _ UndoAnimation new.	newUndo setAnimation: anAnimation.	^ newUndo.! !!AliceUpdateable methodsFor: 'management' stamp: 'jsp 7/20/1999 00:59'!setScheduler: scheduler	"Set the Scheduler that manages this updateable item"	myScheduler _ scheduler.! !!AliceAbstractAnimation methodsFor: 'accessing' stamp: 'jsp 7/19/1999 23:02'!getAnimatedObject	"Return the object that this animation affects"	^ animatedObject.! !!AliceAbstractAnimation methodsFor: 'accessing' stamp: 'jsp 7/19/1999 23:02'!getLoopCount	"Returns the animation's current loop count"	^ loopCount.! !!AliceAbstractAnimation methodsFor: 'accessing' stamp: 'jsp 7/19/1999 23:02'!getState	"Returns the current state of the animation."	^ state.! !!AliceAbstractAnimation methodsFor: 'accessing' stamp: 'jsp 7/19/1999 23:03'!isDone	"Returns true if the animation is running"	^ (state = Stopped).! !!AliceAbstractAnimation methodsFor: 'accessing' stamp: 'jsp 7/19/1999 23:03'!isLooping	"Returns true if the animation is looping"	^ ( loopCount > 1) or: [ loopCount = Infinity ].! !!AliceAbstractAnimation methodsFor: 'accessing' stamp: 'jsp 7/19/1999 23:03'!setLoopCount: count	"Sets the animation's current loop count"	loopCount _ count.! !!AliceAbstractAnimation methodsFor: 'accessing' stamp: 'jsp 7/19/1999 23:03'!setUndoable: aBoolean	"Sets the animation's undoable property"	undoable _ aBoolean.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:04'!copy	self subclassResponsibility.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:04'!epilogue: currentTime	"This method does any work that needs to be done after an interation of the animation finishes."	(loopCount = Infinity) ifTrue:				[state _ Waiting]	ifFalse:				[					loopCount _ loopCount - 1.					(loopCount > 0) ifTrue: [ state _ Waiting ]									ifFalse: [state _ Stopped.											 loopCount _ 1 ].				].! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:04'!getDuration	"This method returns the duration of the animation."	^ duration.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:04'!loop	"This method causes an animation to loop forever."	loopCount _ Infinity.	(state = Stopped) ifTrue: [ state _ Waiting.							  myScheduler addAnimation: self. ].! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:05'!loop: numberOfTimes	"This method causes an animation to loop for the specified number of times."	loopCount _ numberOfTimes.	(state = Stopped) ifTrue: [ state _ Waiting.							  myScheduler addAnimation: self. ].! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:05'!looped	"This method creates a copy of an animation and loops it forever."	| anim |	anim _ self copy.	anim setLoopCount: Infinity.	^ anim.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:05'!looped: numberOfTimes	"This method creates a copy of an animation and loops it for the specified number of times."	| anim |	anim _ self copy.	anim setLoopCount: numberOfTimes.	^ anim.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:05'!pause	"This method pauses an active Animation."	(state = Running) ifTrue: [ state _ Paused. 							    pausedInterval _ (myScheduler getTime) - startTime.].! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:07'!prologue: currentTime	"This method does any work that needs to be done before the animation starts, including possibly adding the current state to the undo stack."	startTime _ currentTime.	endTime _ startTime + duration.	state _ Running.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/20/1999 01:04'!resume	"This method resumes a paused animation"	(state = Paused) ifTrue:		[			state _ Running.			startTime _ (myScheduler getTime) - pausedInterval.			endTime _ startTime + duration.		]	ifFalse: [(state = Stopped) ifTrue:				[					state _ Waiting.					myScheduler addUpdateItem: self.				].			]! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/20/1999 01:10'!start	"This method starts an existing animation"	state _ Waiting.	loopCount _ 1.	myScheduler addUpdateItem: self.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/20/1999 01:10'!stop	"This method changes the state of an animation to stopped.  If it is currently active, the Scheduler will remove it from the list of active animations."	state _ Stopped.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/20/1999 01:10'!stopLooping	"This method causes the animation to stop looping; the current interation of the animation completes before the animation stops."	loopCount _ 1.! !!AliceAbstractAnimation methodsFor: 'management' stamp: 'jsp 7/20/1999 01:10'!update: currentTime	"Updates the animation using the current Wonderland time"	(state = Waiting) ifTrue: [self prologue: currentTime].	(state = Running) ifTrue: [].	(state = Finished) ifTrue: [self epilogue: currentTime].! !!AliceAbstractAnimation methodsFor: 'reversing' stamp: 'jsp 7/19/1999 23:01'!reverseDirection	"Changes the direction an animation runs in (forward or in reverse)"	(direction = Forward) ifTrue: [ direction _ Reverse ]						 ifFalse: [ direction _ Forward ].! !!AliceAbstractAnimation methodsFor: 'private' stamp: 'jsp 7/19/1999 23:00'!scaleDuration: scaleAmount	"Scales the animation's duration by the specified amount"	duration _ duration * scaleAmount.! !!AliceAbstractAnimation methodsFor: 'private' stamp: 'jsp 7/19/1999 23:01'!setDirection: aDirection	"Sets the animation's direction variable"	direction _ aDirection.! !!AliceAction reorganize!('accessing' getAffectedObject isDone isPaused pause resume)('management' setAffectedObject: setLifetime:andCondition: setTask: stop)('update' update:)!!AliceAction methodsFor: 'accessing' stamp: 'jsp 7/19/1999 22:06'!getAffectedObject	"Returns the object affected by the action"	^ affectedObject.! !!AliceAction methodsFor: 'accessing' stamp: 'jsp 7/19/1999 22:08'!isDone	"Returns true if the action is done executing either because it's lifetime has expired or because the specified condition is true"	(lifetime > 0) ifTrue: [^ (lifetime < (myScheduler getTime))]				ifFalse: [^ (stopCondition value)].	! !!AliceAction methodsFor: 'accessing' stamp: 'jsp 7/19/1999 22:27'!isPaused	"Returns true if the action is paused"	^ paused.! !!AliceAction methodsFor: 'accessing' stamp: 'jsp 7/19/1999 22:28'!pause	"Pause the action"	paused _ true.! !!AliceAction methodsFor: 'accessing' stamp: 'jsp 7/19/1999 22:28'!resume	"resume the action"	paused _ false.! !!AliceAction methodsFor: 'management' stamp: 'jsp 7/19/1999 22:29'!setAffectedObject: anObject	"Sets the object affected by the action"	affectedObject _ anObject.! !!AliceAction methodsFor: 'management' stamp: 'jsp 7/19/1999 22:29'!setLifetime: howlong andCondition: condition	"Sets how long the action should run, or the condition under which it should stop"	lifetime _ howlong.	stopCondition _ condition.! !!AliceAction methodsFor: 'management' stamp: 'jsp 7/19/1999 22:29'!setTask: task	"Sets the task the Action should perform each frame"	actionTask _ task.	paused _ false.! !!AliceAction methodsFor: 'management' stamp: 'jsp 7/19/1999 22:29'!stop	"This method removes the Action from myScheduler's list of active actions"	stopCondition _ [ true ].	myScheduler removeAction: self.! !!AliceAction methodsFor: 'update' stamp: 'jsp 7/19/1999 22:30'!update: currentTime	"Execute the Action's task"	paused ifFalse: [ actionTask value ].! !!AliceAlarm reorganize!('accessing' checkTime isDone)('management' setTask: setTime: stop)('update' update:)!!AliceAlarm methodsFor: 'accessing' stamp: 'jsp 7/19/1999 21:17'!checkTime	"Returns the time the alarm is set to go off at"	^ alarmTime.! !!AliceAlarm methodsFor: 'accessing' stamp: 'jsp 7/20/1999 01:06'!isDone	"Returns true if the alarm has expired."	^ (myScheduler getTime) > alarmTime.! !!AliceAlarm methodsFor: 'management' stamp: 'jsp 7/20/1999 01:06'!setTask: task	"Specifies the task the alarm executes when it goes off.  Also sets isDone to false because the task has not yet been executed."	alarmTask _ task.! !!AliceAlarm methodsFor: 'management' stamp: 'jsp 7/19/1999 21:21'!setTime: time	"Specifies the time the alarm goes off"	alarmTime _ time.! !!AliceAlarm methodsFor: 'management' stamp: 'jsp 7/20/1999 01:06'!stop	"This method stops the alarm."	myScheduler removeUpdateItem: self.! !!AliceAlarm methodsFor: 'update' stamp: 'jsp 7/20/1999 01:06'!update: currentTime	"If the alarm's time has expired, then execute the task associated with the alarm."	(alarmTime < currentTime)			ifTrue:	[ self execute ].! !!AliceScript methodsFor: 'initialize' stamp: 'jsp 7/20/1999 01:08'!initialize: anAliceWorld	"Initialize script by assigning the scheduler and putting default values in the instance variables"	"Set the script name"	scriptName _ 'Unnamed'.	"Set the scheduler for this script"	myWorld _ anAliceWorld.	myScheduler _ myWorld getScheduler.	"By default a script contains no commands"	myCommands _ OrderedCollection new.	"By default there are no active commands"	pendingCommands _ OrderedCollection new.	"By default there are no active animations"	activeAnimations _ OrderedCollection new.	"By default scripts run in order (one command after another)"	scriptType _ inOrder.	"By default the script isn't running"	isRunning _ false.! !!AliceScript methodsFor: 'executing' stamp: 'jsp 7/20/1999 01:09'!start	"Start running this script"	| result |	(scriptType = inOrder)		ifTrue: [					pendingCommands _ OrderedCollection new.					1 to: (myCommands size) do: [:i | pendingCommands addLast: i ].				]		ifFalse: [					myCommands do: [:command | result _ command.						result _ Compiler new evaluate: command in: nil to: nil								notifying: (myWorld getNamespace											getEvaluationContext) ifFail: [].						myWorld addOutputText: (result printString).						(result isKindOf: Animation)							ifTrue: [ activeAnimations add: result ].									].				].	isRunning _ true.	"Need to add this script to the scheduler so it gets updated"	myScheduler addUpdateItem: self.	"Update the script once with the current time"	self update: (myScheduler getTime).! !!AliceSimpleAnimation methodsFor: 'initialization' stamp: 'jsp 7/19/1999 23:26'!object: anObject update: func getStartState: startFunc getEndState: endFunc style: styleFunc duration: time undoable: canUndo inWonderland: aWonderland	"This method initializes the Animation with all the information that it needs run."	animatedObject _ anObject.	updateFunction _ func.	styleFunction _ styleFunc.	getStartStateFunction _ startFunc.	getEndStateFunction _ endFunc.	duration _ time.	undoable _ canUndo.	myScheduler _ aWonderland getScheduler.	myWonderland _ aWonderland.	loopCount _ 1.	direction _ Forward.	state _ Waiting.	myScheduler addAnimation: self.! !!AliceSimpleAnimation methodsFor: 'management' stamp: 'jsp 7/19/1999 23:27'!update: currentTime	"Updates the animation using the current Wonderland time"	| newState |	(state = Waiting) ifTrue: [self prologue: currentTime].	(state = Running) ifTrue: [				proportionDone _ styleFunction value: (currentTime - startTime) value: duration.				newState _ startState interpolateTo: endState at: proportionDone.				updateFunction value: newState.				(currentTime >= endTime) ifTrue: [ state _ Finished. ].							  ].	(state = Finished) ifTrue: [self epilogue: currentTime].! !!AliceAbsoluteAnimation methodsFor: 'initialization' stamp: 'jsp 7/20/1999 00:12'!prologue: currentTime	"Extends the AliceAbstractAnimation prologue by saving the start state of the animation."	undoable ifTrue: [						(myWonderland getUndoStack)								push: (AliceUndoAnimation new: (self makeUndoVersion)).					].	(direction = Forward) ifTrue: [									startState _ getStartStateFunction value.									lastStartState _ startState.									endState _ getEndStateFunction value.								]						ifFalse: [									startState _ getStartStateFunction value.									endState _ lastStartState.								].	super prologue: currentTime.! !!AliceAbsoluteAnimation methodsFor: 'management' stamp: 'jsp 7/20/1999 00:12'!object: anObject update: func getStartState: startFunc getEndState: endFunc style: styleFunc duration: time undoable: canUndo inWonderland: aWonderland	"This method initializes the animation with all the information that it needs to run."	lastStartState _ startFunc value.	super object: anObject update: func getStartState: startFunc getEndState: endFunc style: styleFunc duration: time undoable: canUndo inWonderland: aWonderland.! !!AliceAbsoluteAnimation methodsFor: 'copying' stamp: 'jsp 7/20/1999 00:02'!copy	"Creates a copy of the animation"	| anim |	anim _ AliceAbsoluteAnimation new.	anim object: animatedObject		update: updateFunction		getStartState: getStartStateFunction		getEndState: getEndStateFunction		style: styleFunction		duration: duration		undoable: undoable		inWonderland: myWonderland.	(direction = Forward) ifFalse: [ anim reverseDirection ].	^ anim.! !!AliceAbsoluteAnimation methodsFor: 'copying' stamp: 'jsp 7/20/1999 00:03'!makeUndoVersion	"Creates the undo version of an animation"	| anim |	anim _ AliceAbsoluteAnimation new.	anim object: animatedObject		update: updateFunction		getStartState: getStartStateFunction		getEndState: getEndStateFunction		style: styleFunction		duration: 0.5		undoable: false		inWonderland: myWonderland.	anim stop.	(direction = Forward) ifTrue: [ anim reverseDirection ].	^ anim.! !!AliceAbsoluteAnimation methodsFor: 'copying' stamp: 'jsp 7/20/1999 00:07'!reversed	"Creates a reversed version of an animation"	| anim |	anim _ self copy reverseDirection.	^ anim.! !!AliceRelativeAnimation methodsFor: 'initialization' stamp: 'jsp 7/20/1999 00:15'!object: anObject update: func getStartState: startFunc getEndState: endFunc getReverseState: reverseFunc style: styleFunc duration: time undoable: canUndo inWonderland: aWonderland	"This method initializes the Animation with all the information that it needs to run."	getReverseStateFunction _ reverseFunc.	super object: anObject update: func getStartState: startFunc getEndState: endFunc style: styleFunc duration: time undoable: canUndo inWonderland: aWonderland.! !!AliceRelativeAnimation methodsFor: 'management' stamp: 'jsp 7/20/1999 00:18'!prologue: currentTime	"Extends the AbstractAnimation prologue by saving the start state of the animation."	undoable ifTrue: [						(myWonderland getUndoStack)								push: (AliceUndoAnimation new: (self makeUndoVersion)).					].	(direction = Forward) ifTrue: [									startState _ getStartStateFunction value.									endState _ getEndStateFunction value.								]						ifFalse: [									startState _ getStartStateFunction value.									endState _ getReverseStateFunction value.								].	super prologue: currentTime.! !!AliceRelativeAnimation methodsFor: 'copying' stamp: 'jsp 7/20/1999 00:16'!copy	"Creates a copy of the animation"	| anim |	anim _ AliceRelativeAnimation new.	anim object: animatedObject		update: updateFunction		getStartState: getStartStateFunction		getEndState: getEndStateFunction		getReverseState: getReverseStateFunction 		style: styleFunction		duration: duration		undoable: undoable		inWonderland: myWonderland.	(direction = Forward) ifFalse: [ anim reverseDirection ].	^ anim.! !!AliceRelativeAnimation methodsFor: 'copying' stamp: 'jsp 7/20/1999 00:18'!makeUndoVersion	"Creates the undo version of an animation"	| anim |	anim _ AliceRelativeAnimation new.	anim object: animatedObject		update: updateFunction		getStartState: getStartStateFunction		getEndState: getEndStateFunction		getReverseState: getReverseStateFunction 		style: styleFunction		duration: 0.5		undoable: false		inWonderland: myWonderland.	anim stop.	(direction = Forward) ifTrue: [ anim reverseDirection ].	^ anim.! !!AliceRelativeAnimation methodsFor: 'copying' stamp: 'jsp 7/20/1999 00:18'!reversed	"Creates a reversed version of an animation"	| anim |	anim _ self copy reverseDirection.	^ anim.! !!AliceUpdateable class methodsFor: 'instance creation' stamp: 'jsp 7/19/1999 21:54'!new	"Create and initialize a new instance"	super new initialize.! !!AliceAbstractAnimation class methodsFor: 'class initialization' stamp: 'jsp 7/19/1999 22:57'!initialize	"Initialize the class variables"	Waiting _ 1.	Running _ 2.	Paused _ 3.	Finished _ 4.	Stopped _ 5.	Forward _ 0.	Reverse _ 1.	Infinity _ -1.! !!AliceAction class methodsFor: 'initialize-release' stamp: 'jsp 7/19/1999 22:31'!do: task eachframefor: time toObject: anObject inScheduler: scheduler	"Creates a new AliceAction that performs the specified task each frame for (time) seconds"	| newAction |	newAction _ AliceAction new.	newAction setTask: task.	newAction setLifetime: (time + (scheduler getTime)) andCondition: [false].	newAction setAffectedObject: anObject.	newAction setScheduler: scheduler.	scheduler addUpdateItem: newAction.	^ newAction.! !!AliceAction class methodsFor: 'initialize-release' stamp: 'jsp 7/19/1999 22:32'!do: task eachframeuntil: condition toObject: anObject inScheduler: scheduler	"Creates a new AliceAction that performs the specified task each frame until the specified condition holds true"	| newAction |	newAction _ AliceAction new.	newAction setTask: task.	newAction setLifetime: -1 andCondition: condition.	newAction setAffectedObject: anObject.	newAction setScheduler: scheduler.	scheduler addUpdateItem: newAction.	^ newAction.! !!AliceAction class methodsFor: 'initialize-release' stamp: 'jsp 7/19/1999 22:33'!do: task toObject: anObject inScheduler: scheduler	"Creates a new AliceAction that executes the specified task each frame"	| newAction |	newAction _ AliceAction new.	newAction setTask: task.	newAction setLifetime: -1 andCondition: [false].	newAction setAffectedObject: anObject.	newAction setScheduler: scheduler.	scheduler addUpdateItem: newAction.	^ newAction.! !!AliceAlarm class methodsFor: 'instance creation' stamp: 'jsp 7/19/1999 22:00'!do: task at: executeTime inScheduler: scheduler	"Creates an alarm that does the specified task at the specified time"	| newAlarm |	newAlarm _ AliceAlarm new.	newAlarm setTime: executeTime.	newAlarm setTask: task.	newAlarm setScheduler: scheduler.	scheduler addUpdateItem: newAlarm.	^ newAlarm.! !!AliceAlarm class methodsFor: 'instance creation' stamp: 'jsp 7/19/1999 22:01'!do: task in: waitTime inScheduler: scheduler	"This sets an alarm that will expire in waitTime seconds and execute the specified task"	| newAlarm |	newAlarm _ AliceAlarm new.	newAlarm setTask: task.	newAlarm setTime: waitTime + (scheduler getTime).	newAlarm setScheduler: scheduler.	scheduler addAlarm: newAlarm.	^ newAlarm.! !!WonderlandStillCamera methodsFor: 'assigning focus object' stamp: 'jsp 7/15/1999 15:13'!setFocusObject: anActor	"Assign the object in the Wonderland that the camera should focus on"	| boundingBox origin corner center maxDimension distance frustum |	focusObject _ anActor.	anActor ifNotNil: [			(anActor isKindOf: WonderlandActor)				ifTrue: [ boundingBox _ anActor getBoundingBox.						  origin _ boundingBox origin.						  corner _ boundingBox corner.						  center _ (origin + corner) / 2.0.						  self turnToRightNow: { 0. 0. 0} asSeenBy: anActor undoable: false.						  self turnRightNow: left numberOfTurns: 0.5 undoable: false.						  maxDimension _ (((corner x - center x) max: (corner y - center y))												max: (center x - origin x))													max: (center y - origin y).						  frustum _ self getFrustum.						  distance _ ((frustum near) * maxDimension / (0.7 * (frustum right)))										+ (corner z).						  self moveToRightNow: { center x.												  center y.												  distance }								asSeenBy: anActor undoable: false.						  self moveRightNow: right distance: (maxDimension) undoable: false.						  self moveRightNow: up distance: (maxDimension) undoable: false.						  self turnRightNow: left numberOfTurns:								((((maxDimension) arcTan: distance) radiansToDegrees) / 360.0)								undoable: false.						  self turnRightNow: down numberOfTurns:								((((maxDimension) arcTan: distance) radiansToDegrees) / 360.0)								undoable: false.						]				ifFalse: [ self moveToRightNow: { -1.5. 0.5. 2.6 } asSeenBy: anActor undoable: false.						  self pointAtRightNow: { 0. 0. 0 } undoable: false.						  self moveRightNow: back distance: 20 undoable: false ].		].	myMorph changed.! !AliceUpdateable removeSelector: #initialize!AliceUpdateable removeSelector: #stop!AliceUpdateable removeSelector: #isDone!AliceAlarm removeSelector: #setScheduler:!AliceAbstractAnimation initialize!Smalltalk removeClassNamed: #AliceParallelAnimation!Smalltalk removeClassNamed: #AliceCompositeAnimation!Smalltalk removeClassNamed: #AliceSequentialAnimation!