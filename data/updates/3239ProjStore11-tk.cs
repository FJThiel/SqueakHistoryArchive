'From Squeak2.9alpha of 16 June 2000 [latest update: #3296] on 25 January 2001 at 3:33:04 pm'!"Change Set:		ProjStore11-tkDate:			25 January 2001Author:			Ted KaehlerFeature:  For new tiles, type a line of Squeak code in any text pane.  On the shift-menu choose 'tiles from it', and get a line of tiles to drop into your script.  Works a line of code in a Browser.Fixed:[X] Bug -- drop 'new script' into a PasteUpMorph that is not a world -- error.[X] Drag new halo tile needs offset.X] Select Method block and drag -- Morphic drawOn lockup.[X] Deselect of tiles when leave window.  Deselect when drag.[X] Bug in veryDeepCopy in update 3296. (reported by Andreas)"!!MorphExtension methodsFor: 'copying' stamp: 'tk 1/25/2001 15:12'!veryDeepInner: deepCopier	| list values vv |	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  This is special code for the dictionary.  See DeepCopier."	super veryDeepInner: deepCopier.	locked _ locked veryDeepCopyWith: deepCopier. 	visible _ visible veryDeepCopyWith: deepCopier. 	sticky _ sticky veryDeepCopyWith: deepCopier. 	balloonText _ balloonText veryDeepCopyWith: deepCopier. 	balloonTextSelector _ balloonTextSelector veryDeepCopyWith: deepCopier. 	externalName _ externalName veryDeepCopyWith: deepCopier. 	isPartsDonor _ isPartsDonor veryDeepCopyWith: deepCopier. 	actorState _ actorState veryDeepCopyWith: deepCopier. 	player _ player veryDeepCopyWith: deepCopier.	"Do copy the player of this morph" 	eventHandler _ eventHandler veryDeepCopyWith: deepCopier.	"has its own restrictions"	otherProperties ifNotNil: [		list _ self copyWeakly.	"Properties whose values are only copied weakly"		values _ list collect: [:pp | 			vv _ otherProperties at: pp ifAbsent: [nil].			vv ifNotNil: [otherProperties at: pp put: nil]. "zap it"			vv].	 	otherProperties _ otherProperties veryDeepCopyWith: deepCopier.		1 to: list size do: [:ii | "put old values back"			(values at: ii) ifNotNil: [otherProperties at: pp put: (values at: ii)]]].!]style[(25 153 10 1111)f1b,f1,f1LDeepCopier Comment;,f1! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'tk 1/22/2001 14:57'!selectionAsTiles	"Try to make new universal tiles from the selected text"	| selection tiles |	selection _ self selection.	self terminateAndInitializeAround:		[self currentHand attachMorph: (tiles _ Player tilesFrom: selection).		tiles align: tiles topLeft 			 with: self currentHand position + tiles cursorBaseOffset].! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'tk 1/22/2001 14:35'!shiftedYellowButtonMenu	| ww |	"Answer the menu to be presented when the yellow button is pressed while the shift key is down"^ SelectionMenu fromArray: (Array streamContents: [:strm | 	strm nextPutAll: #(		('set font... (k)'					offerFontMenu)		('set style... (K)'					changeStyle)		('set alignment...'				chooseAlignment)		-								).	(ww _ World) isMorph ifTrue: [		(ww valueOfProperty: #universalTiles ifAbsent: [false]) ifTrue: [			strm nextPutAll: #(				('tiles from it'			selectionAsTiles))]].	strm nextPutAll: #(		('explain'						explain)		('pretty print'					prettyPrint)		('pretty print with color'		prettyPrintWithColor)		('file it in'						fileItIn)		('recognizer (r)'					recognizeCharacters)		('spawn (o)'						spawn)		-		('definition of word'				wordDefinition)		('verify spelling of word'		verifyWordSpelling)"		('spell check it'					spellCheckIt)	"		('translate it'					translateIt)		('choose language'				languagePrefs)		-		('browse it (b)'					browseIt)		('senders of it (n)'				sendersOfIt)		('implementors of it (m)'		implementorsOfIt)		('references to it (N)'			referencesToIt)		('selectors containing it (W)'		methodNamesContainingIt)		('method strings with it (E)'		methodStringsContainingit)		('method source with it'			methodSourceContainingIt)		-		('save contents to file...'			saveContentsInFile)		('send contents to printer'		sendContentsToPrinter)		('printer setup'					printerSetup)		-		('special menu...'				presentSpecialMenu)		('more...'						yellowButtonActivity))]).! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'tk 1/22/2001 13:35'!acceptDroppingMorph: dropped event: evt	"The supplied morph, known to be acceptable to the receiver, is now to be assimilated; the precipitating event is supplied"	| mm tfm aMorph |	aMorph _ self morphToDropFrom: dropped.	self isWorldMorph		ifTrue:["Add the given morph to this world and start stepping it if it wants to be."				self addMorphFront: aMorph.				(aMorph fullBounds intersects: self viewBox) ifFalse:					[self beep.  aMorph position: self bounds center]]		ifFalse:[super acceptDroppingMorph: aMorph event: evt].	aMorph submorphsDo: [:m | (m isKindOf: HaloMorph) ifTrue: [m delete]].	aMorph allMorphsDo:  "Establish any penDown morphs in new world"		[:m | m player ifNotNil:			[m player getPenDown ifTrue:				[((mm _ m player costume) notNil and: [(tfm _ mm owner transformFrom: self) notNil])					ifTrue: [self noteNewLocation: (tfm localPointToGlobal: mm referencePosition)									forPlayer: m player]]]].	self isPartsBin		ifTrue:			[aMorph isPartsDonor: true.			aMorph stopSteppingSelfAndSubmorphs.			aMorph suspendEventHandler]		ifFalse:			[self world startSteppingSubmorphsOf: aMorph].	self presenter morph: aMorph droppedIntoPasteUpMorph: self.	self showingListView ifTrue:		[self sortSubmorphsBy: (self valueOfProperty: #sortOrder).		self currentWorld abandonAllHalos]! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'tk 1/22/2001 13:50'!morphToDropFrom: aMorph	"Given a morph being carried by the hand, which the hand is about to drop, answer the actual morph to be deposited.  Normally this would be just the morph itself, but several unusual cases arise, which this method is designed to service."	| aNail representee handy posBlock tempPos |	handy _ self primaryHand.	posBlock _ [:z | 			tempPos _ handy position - (handy targetOffset - aMorph formerPosition * (z extent / aMorph extent)) rounded.			self pointFromWorld: tempPos].	self alwaysShowThumbnail		ifTrue: [aNail _ aMorph						representativeNoTallerThan: self maxHeightToAvoidThumbnailing						norWiderThan: self maximumThumbnailWidth						thumbnailHeight: self heightForThumbnails.			aNail == aMorph				ifFalse: [aNail						position: (posBlock value: aNail)].			^ aNail].	((aMorph isKindOf: MorphThumbnail)			and: [(representee _ aMorph morphRepresented) owner == nil])		ifTrue: [representee				position: (posBlock value: representee).			^ representee].	self showingListView ifTrue:		[^ aMorph listViewLineForFieldList: (self valueOfProperty: #fieldListSelectors)].	(aMorph hasProperty: #newPermanentScript)		ifTrue: [^ aMorph asEmptyPermanentScriptor].	self automaticPhraseExpansion		ifFalse: [^ aMorph].	((aMorph isKindOf: PhraseTileMorph) or: [aMorph isKindOf: SyntaxMorph])		ifFalse: [^ aMorph].	^ aMorph morphToDropInPasteUp: self! !!Player methodsFor: 'misc' stamp: 'tk 1/22/2001 14:07'!tearOffTileForSelf	| tiles |	self currentHand attachMorph: (tiles _ self tileReferringToSelf).	(tiles respondsTo: #cursorBaseOffset) ifTrue: [		tiles align: tiles topLeft 			 with: self currentHand position + tiles cursorBaseOffset].! !!Player class methodsFor: 'scripts' stamp: 'tk 1/22/2001 14:54'!tilesFrom: aString	| code tree syn block phrase |	"Construct SyntaxMorph tiles for the String."	"This is really cheating!!  Make a true parse tree later. -tk"	code _ String streamContents: [:strm | 		strm nextPutAll: 'doIt'; cr; tab.		strm nextPutAll: aString].	"decompile to tiles"	tree _ Compiler new 		parse: code 		in: self		notifying: nil.	syn _ tree asMorphicSyntaxUsing: SyntaxMorph.	block _ syn submorphs detect: [:mm | 		(mm respondsTo: #parseNode) ifTrue: [			mm parseNode class == BlockNode] ifFalse: [false]].	phrase _ block submorphs detect: [:mm | 		(mm respondsTo: #parseNode) ifTrue: [			mm parseNode class == MessageNode] ifFalse: [false]].	^ phrase! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'tk 1/22/2001 14:59'!selectionAsTiles	self handleEdit: [textMorph editor selectionAsTiles]! !!SyntaxMorph methodsFor: 'event handling' stamp: 'tk 1/24/2001 12:30'!mouseMove: evt	| dup selection |	owner isSyntaxMorph ifFalse: [^ self].	self currentSelectionDo:		[:innerMorph :mouseDownLoc :outerMorph |		mouseDownLoc ifNotNil: [			(evt cursorPoint dist: mouseDownLoc) > 4 ifTrue:				["If drag 5 pixels, then tear off a copy of outer selection."				selection _ outerMorph ifNil: [self].				evt hand attachMorph: (dup _ selection duplicate).				dup align: dup topLeft with: evt hand position + self cursorBaseOffset.				self setSelection: nil.	"Why doesn't this deselect?"				(self firstOwnerSuchThat: [:m | m isSyntaxMorph and: [m isBlockNode]])					ifNotNilDo: [:m | "Activate enclosing block."								m startStepping]]]].! !!SyntaxMorph methodsFor: 'dropping/grabbing' stamp: 'tk 1/24/2001 10:55'!acceptDroppingMorph: aMorph event: evt	| itNoun old |	"For the moment, you have to drop it the right place.  We do not look at enclosing morphs"	"Two ways to do this:  Must always destroy old node, then drag in new one.		Or, drop replaces what you drop on.  Nasty with blocks.  see wantsDroppedMorph:event:"	"We know it is acceptable.  Just a matter of which case"	itNoun _ aMorph isNoun.	self withAllOwnersDo:		[:m | (m isSyntaxMorph and: [m isBlockNode])			ifTrue: [m stopStepping; hideCaret]].	self isBlockNode & itNoun		ifTrue:			[(aMorph nodeClassIs: TempVariableNode) ifTrue:				["If I am a BlockNode, and it is a TempVariableNode, add it into list"				^ (self addBlockArg: aMorph) ifFalse:					["if already declared, start new line of code with it"					self addToBlock: aMorph event: evt]]			ifFalse:			[^ self addToBlock: aMorph event: evt]].	"If I am a BlockNode and it is a noun add it as a new line"	self isBlockNode ifTrue: [		 (aMorph nodeClassIs: ReturnNode) ifTrue: [^ self addToBlock: aMorph event: evt]].	"Later add args and keywords.  later allow comments to be dropped"	"Can't put statement, literal, assignment, or cascade into left side of assignment"	(owner isSyntaxMorph) ifTrue:		[(owner nodeClassIs: AssignmentNode) ifTrue:			[(owner submorphIndexOf: self) = 1 ifTrue:				[((aMorph nodeClassIs: TempVariableNode)				or: [aMorph nodeClassIs: VariableNode])  ifFalse: [ ^ self]]]].	aMorph deselect.	(old _ owner) replaceSubmorph: self by: aMorph.	"do the normal replacement"	old cleanupAfterItDroppedOnMe.	"now owned by no one"! !!SyntaxMorph methodsFor: 'drawing' stamp: 'tk 1/24/2001 12:39'!drawOn: aCanvas	super drawOn: aCanvas.	self isBlockNode ifTrue:		[((owner respondsTo: #isMethodNode) and: [owner isMethodNode])		ifTrue:			[aCanvas fillRectangle: (self topLeft + (0@-1) extent: self width@1) color: Color gray]		ifFalse:			[aCanvas fillRectangle: (self topLeft + (1@1) extent: 2@(self height-2)) color: Color gray.			aCanvas fillRectangle: (self topLeft + (1@1) extent: 4@1) color: Color gray.			aCanvas fillRectangle: (self bottomLeft + (1@-1) extent: 4@1) color: Color gray].		]! !!SyntaxMorph methodsFor: 'selection' stamp: 'tk 1/24/2001 12:30'!setSelection: newSpec	"A selectionSpec is {Inner morph.  Where clicked.  Outer morph}.	First mouseDown starts a selection (with outerMorph == nil).	Dragging more than 4 pixels means to grab a copy of the current outer selection.		The current selection is the outerMorph, or the inner if it is nil.	Each mouseUp extends the selection to the next outer morph that is selectable.		Except if this is the first click."	| rootTile |	(rootTile _ self rootTile) valueOfProperty: #selectionSpec ifPresentDo:		[:oldSpec | oldSpec third ifNotNilDo: [:m | m deselect]].	(newSpec == nil or: [newSpec third == nil and: [self isMethodNode]])		ifTrue: [self deselect.			^ rootTile removeProperty: #selectionSpec].	"Select outer morph of the new selection"	newSpec third == nil		ifTrue: [self select  "first click down"]		ifFalse: [newSpec third select  "subsequent clicks"].	rootTile setProperty: #selectionSpec toValue: newSpec! !Player removeSelector: #copyUniClass!