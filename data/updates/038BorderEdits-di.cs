'From Squeak 2.0 BETA of May 8, 1998 on 17 May 1998 at 10:36:53 pm'!HandleMorph subclass: #NewHandleMorph	instanceVariableNames: 'hand offset lastPointBlock waitingForClickInside '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Components'!!NewHandleMorph methodsFor: 'all' stamp: 'di 5/17/1998 22:35'!followHand: aHand forEachPointDo: block1 lastPointDo: block2	hand _ aHand.	pointBlock _ block1.	lastPointBlock _ block2.	self position: hand lastEvent cursorPoint - (self extent // 2) - (2@2)! !!NewHandleMorph methodsFor: 'all' stamp: 'di 5/17/1998 21:24'!initialize	waitingForClickInside _ true.	super initialize! !!NewHandleMorph methodsFor: 'all' stamp: 'di 5/17/1998 21:57'!step	| evt |	evt _ hand lastEvent.	evt anyButtonPressed		ifTrue: [waitingForClickInside _ false.				self position: evt cursorPoint - (self extent // 2).				pointBlock value: self center]		ifFalse: [waitingForClickInside					ifTrue: [(self containsPoint: evt cursorPoint)								ifFalse: ["mouse wandered out before clicked"										^ self delete]]					ifFalse: [lastPointBlock value: self center.							^ self delete]]! !!SystemWindow methodsFor: 'initialization' stamp: 'di 5/17/1998 20:38'!initialize	| aFont |	super initialize.	isCollapsed _ false.	paneMorphs _ Array new.	paneRects _ Array new.	borderColor _ #raised.	borderWidth _ 1.	color _ Color black.	aFont _ Preferences fontForScriptorButtons.	stripes _ Array with: (RectangleMorph newBounds: bounds)  "see extent:"				with: (RectangleMorph newBounds: bounds).	stripes first on: #mouseLeave send: #mouseLeaveEvent:fromPane: to: self.	self addMorph: (stripes first borderWidth: 1).	self addMorph: (stripes second borderWidth: 2).	self addMorph: (label _ StringMorph new contents: labelString;			font: ((TextStyle default fontAt: 2) emphasized: 1)).	self addMorph: (closeBox _ SimpleButtonMorph new borderWidth: 0;			label: 'X' font: aFont; color: Color transparent;			actionSelector: #delete; target: self; extent: 16@16).	self addMorph: (collapseBox _ SimpleButtonMorph new borderWidth: 0;			label: 'O' font: aFont; color: Color transparent;			actionSelector: #collapseOrExpand; target: self; extent: 16@16).	self extent: 300@200! !!SystemWindow methodsFor: 'geometry' stamp: 'di 5/17/1998 22:31'!mouseLeaveEvent: event fromPane: pane	"The mouse has left a pane (or the title bar), so offer the chance to move the nearest border.  Do this by presenting a handle morph that is centered on the cursor.  If the cursor leaves that handle without doing a mouseDown, them just make it go away.  However if the user clicks down, then use the handle to drag the border."	"First, pass preempted event on to the source pane.	NOTE: we really should save the pane's event handler (if any) and use that."	| handle cp which b |	(pane isKindOf: ScrollPane) ifTrue: [pane mouseLeave].	cp _ event cursorPoint.	((self bounds pointNearestTo: cp) dist: cp) > 5		ifTrue: [^ self  "only edit outer borders right now"].	which _ self bounds sideNearestTo: cp.	#(topLeft topRight bottomLeft bottomRight) do:		[:c | (cp dist: (bounds perform: c)) < 20 ifTrue: [which _ c]].	handle _ NewHandleMorph new followHand: event hand		forEachPointDo:			[:p | b _ self bounds.			which = #top ifTrue: [self bounds: (b withTop: p y)].			which = #bottom ifTrue: [self bounds: (b withBottom: p y)].			which = #left ifTrue: [self bounds: (b withLeft: p x)].			which = #right ifTrue: [self bounds: (b withRight: p x)].			which = #topLeft ifTrue: [self bounds: (b bottomRight rect: p)].			which = #bottomRight ifTrue: [self bounds: (b topLeft rect: p)].			which = #bottomLeft ifTrue: [self bounds: (b topRight rect: p)].			which = #topRight ifTrue: [self bounds: (b bottomLeft rect: p)]]		lastPointDo: [:lastPoint | ].	handle extent: 12@12.	event hand world addMorph: handle.	handle startStepping! !!SystemWindow methodsFor: 'panes' stamp: 'di 5/17/1998 20:36'!addMorph: aMorph frame: relFrame	| panelRect |	self addMorph: aMorph.	paneMorphs _ paneMorphs copyReplaceFrom: 1 to: 0 with: (Array with: aMorph).	paneRects _ paneRects copyReplaceFrom: 1 to: 0 with: (Array with: relFrame).	panelRect _ self panelRect.	aMorph borderWidth: 1;		color: (Color perform: model defaultBackgroundColor);		bounds: ((relFrame scaleBy: panelRect extent) translateBy: panelRect topLeft) truncated;		on: #mouseLeave send: #mouseLeaveEvent:fromPane: to: self.! !