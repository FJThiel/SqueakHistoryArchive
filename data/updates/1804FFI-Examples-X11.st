ExternalStructure subclass: #X11Display	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-X11'!!X11Display methodsFor: 'initialize-release' stamp: 'ar 1/27/2000 16:45'!closeDisplay	handle == nil ifFalse:[		self XCloseDisplay: self.		handle _ nil].! !!X11Display methodsFor: 'initialize-release' stamp: 'ar 1/27/2000 17:45'!flush	self XFlush: self! !!X11Display methodsFor: 'initialize-release' stamp: 'ar 1/27/2000 17:51'!sync	^self XSync: self! !!X11Display methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:46'!displayString	^self XDisplayString: self! !!X11Display methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:51'!getInputFocus	| focus revert |	focus _ X11Window new.	focus display: self.	revert _ WordArray new: 1.	self XGetInputFocus: self with: focus with: revert.	^focus! !!X11Display methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 16:45'!XCloseDisplay: aDisplay	<cdecl: void 'XCloseDisplay' (X11Display*) module:'X11'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 16:45'!XDisplayString: aDisplay	<cdecl: char* 'XDisplayString' (X11Display*) module:'X11'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 17:46'!XFlush: xDisplay	<cdecl: void 'XFlush' (X11Display*) module:'X11'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 16:51'!XGetInputFocus: display with: focus with: revert	<cdecl: void 'XGetInputFocus' (X11Display* X11Window* long*) module: 'X11'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 17:52'!XSync: xDisplay	<cdecl: void 'XSync' (X11Display*) module:'X11'>	^self externalCallFailed! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!X11Display class	instanceVariableNames: ''!!X11Display class methodsFor: 'field definition' stamp: 'ar 1/28/2000 19:08'!fields	"X11Display defineFields"	"Note: The structure of Display is internal and only pointers to X11Display are used"	^#()! !!X11Display class methodsFor: 'instance creation' stamp: 'ar 1/27/2000 16:46'!XOpenDisplay: displayName	"X11Display XOpenDisplay: nil"	<cdecl: X11Display* 'XOpenDisplay' (char*) module:'X11'>	^self externalCallFailed! !!X11Display class methodsFor: 'examples' stamp: 'ar 1/28/2000 19:19'!coloredEllipses	"X11Display coloredEllipses"	| display window gc colors rnd w h pt1 pt2 r |	display _ X11Display XOpenDisplay: nil.	window _ display getInputFocus.	gc _ X11GC on: window.	colors _ Color colorNames collect:[:n| (Color perform: n) pixelWordForDepth: 32].	rnd _ Random new.	w _ Display width.	h _ Display height.	[Sensor anyButtonPressed] whileFalse:[		pt1 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		pt2 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		r _ Rectangle encompassing: (Array with: pt1 with: pt2).		gc foreground: colors atRandom.		gc fillOval: r.		gc foreground: 0.		gc drawOval: r.		display sync.	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Display class methodsFor: 'examples' stamp: 'ar 1/28/2000 19:19'!coloredRectangles	"X11Display coloredRectangles"	| display window gc colors rnd w h pt1 pt2 r nPixels time |	display _ X11Display XOpenDisplay: nil.	window _ display getInputFocus.	gc _ X11GC on: window.	colors _ Color colorNames collect:[:n| (Color perform: n) pixelWordForDepth: 32].	rnd _ Random new.	w _ Display width.	h _ Display height.	n _ 0.	nPixels _ 0.	time _ Time millisecondClockValue.	[Sensor anyButtonPressed] whileFalse:[		pt1 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		pt2 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		r _ Rectangle encompassing: (Array with: pt1 with: pt2).		gc foreground: colors atRandom.		gc fillRectangle: r.		gc foreground: 0.		gc drawRectangle: r.		display sync.		n _ n + 1.		nPixels _ nPixels + ((r right - r left) * (r bottom - r top)).		(n \\ 100) = 0 ifTrue:[			'Pixel fillRate: ', (nPixels * 1000 // (Time millisecondClockValue - time))				asStringWithCommas displayAt: 0@0].	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Display class methodsFor: 'examples' stamp: 'ar 1/28/2000 19:21'!x11Draw	"X11Display x11Draw"	"Note: We can't go through XNextEvent here since this would interfere with the VMs event handling cycle and there is no way to query the XServers mouse position directly. So we have to stick with Sensor>>cursorPoint for this example."	| display window gc nextPt lastPt |	display _ X11Display XOpenDisplay: nil.	window _ display getInputFocus.	gc _ X11GC on: window.	gc foreground: 0.	lastPt _ nextPt _ Sensor cursorPoint.	[Sensor anyButtonPressed] whileFalse:[		nextPt _ Sensor cursorPoint.		nextPt = lastPt ifFalse:[			gc drawLineFrom: lastPt to: nextPt.			display sync.			lastPt _ nextPt].	].	gc free.	display closeDisplay.	Display forceToScreen.! !ExternalStructure subclass: #X11Drawable	instanceVariableNames: 'display '	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-X11'!!X11Drawable methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:47'!display	^display! !!X11Drawable methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:48'!display: aDisplay	display _ aDisplay! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!X11Drawable class	instanceVariableNames: ''!!X11Drawable class methodsFor: 'field definition' stamp: 'ar 1/28/2000 19:18'!fields	"X11Drawable defineFields"	^#( nil 'void*' )! !ExternalStructure subclass: #X11GC	instanceVariableNames: 'drawable '	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-X11'!!X11GC methodsFor: 'initialize-release' stamp: 'ar 1/28/2000 17:03'!free	handle == nil ifFalse:[		self XFreeGC: self display with: self.		handle _ nil.	].! !!X11GC methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:49'!display	^drawable display! !!X11GC methodsFor: 'accessing' stamp: 'ar 1/27/2000 13:01'!drawable	^drawable! !!X11GC methodsFor: 'accessing' stamp: 'ar 1/27/2000 13:01'!drawable: aDrawable	drawable _ aDrawable! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!background: pixelValue	self XSetBackground: self display with: self with: pixelValue! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:32'!drawLineFrom: pt1 to: pt2	self XDrawLine: self display 			with: drawable 			with: self 			with: pt1 x 			with: pt1 y 			with: pt2 x 			with: pt2 y! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!drawOval: aRectangle	self		XDrawArc: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height			with: 0			with: 64*360! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!drawRectangle: aRectangle	self		XDrawRectangle: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!fillOval: aRectangle	self		XFillArc: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height			with: 0			with: 64*360! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:35'!fillRectangle: aRectangle	self		XFillRectangle: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!foreground: pixelValue	self XSetForeground: self display with: self with: pixelValue! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 17:09'!XDrawArc: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h with: a1 with: a2	<cdecl: void 'XDrawArc' (X11Display* X11Drawable X11GC long long ulong ulong long long) module: 'X11'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 16:43'!XDrawLine: xDisplay with: aDrawable with: xGC with: x0 with: y0 with: x1 with: y1	<cdecl: long 'XDrawLine' (X11Display* X11Drawable X11GC long long long long) module: 'X11'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 17:08'!XDrawRectangle: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h	<cdecl: void 'XDrawRectangle' (X11Display* X11Drawable X11GC long long ulong ulong) module: 'X11'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 17:09'!XFillArc: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h with: a1 with: a2	<cdecl: void 'XFillArc' (X11Display* X11Drawable X11GC long long ulong ulong long long) module: 'X11'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 16:56'!XFillRectangle: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h	<cdecl: void 'XFillRectangle' (X11Display* X11Drawable X11GC long long ulong ulong) module: 'X11'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 17:04'!XFreeGC: xDisplay with: xGC	<cdecl: long 'XFreeGC' (X11Display* X11GC) module: 'X11'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 14:54'!XSetBackground: xDisplay with: xGC with: bg	<cdecl: void 'XSetBackground' (X11Display* X11GC long) module: 'X11'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 14:54'!XSetForeground: xDisplay with: xGC with: fg	<cdecl: void 'XSetForeground' (X11Display* X11GC long) module: 'X11'>	^self externalCallFailed! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!X11GC class	instanceVariableNames: ''!!X11GC class methodsFor: 'field definition' stamp: 'ar 1/28/2000 19:18'!fields	"X11GC defineFields"	^#( nil 'void*' )! !!X11GC class methodsFor: 'instance creation' stamp: 'ar 1/28/2000 19:09'!on: aDrawable	| xgc |	xgc _ self XCreateGC: aDrawable display with: aDrawable with: 0 with: nil.	xgc drawable: aDrawable.	^xgc! !!X11GC class methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 19:09'!XCreateGC: xDisplay with: aDrawable with: valueMask with: values	<cdecl: X11GC 'XCreateGC' (X11Display* X11Drawable ulong long*) module: 'X11'>	^self externalCallFailed! !X11Drawable subclass: #X11Window	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-X11'!X11Display compileFields!X11Drawable compileFields!X11GC compileFields!X11Window compileFields!