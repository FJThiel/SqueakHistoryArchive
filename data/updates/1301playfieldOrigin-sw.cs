'From Squeak 2.4c of May 10, 1999 on 7 July 1999 at 3:37:08 pm'!"Change Set:		playfieldOrigin-swDate:			7 July 1999Author:			Scott WallaceAdds an playfield option to have the center of a playfield as its origin, rather than the usual bottom-left corner, when figuring cartesian coordinates.By default, the origin is the bottom left of a playfield.  But if you set the new origin-at-center option to true, then the origin of the playfield will be its current center."!!Morph methodsFor: 'geometry eToy' stamp: 'sw 7/7/1999 12:36'!x	"Return my horizontal position relative to the cartesian origin of a relevant playfield"	| aPlayfield |	aPlayfield _ self referencePlayfield.	^ aPlayfield == nil		ifTrue: [self referencePosition x]		ifFalse: [self referencePosition x - aPlayfield cartesianOrigin x]! !!Morph methodsFor: 'geometry eToy' stamp: 'sw 7/7/1999 12:36'!x: aNumber	"Set my horizontal position relative to the cartesian origin of the playfield or the world."	|  offset  aPlayfield newX |	aPlayfield _ self referencePlayfield.	offset _ self left - self referencePosition x.	aPlayfield == nil		ifTrue: [newX _ aNumber + offset]		ifFalse: [newX _ aPlayfield cartesianOrigin x + aNumber + offset].	self position: newX@bounds top.! !!Morph methodsFor: 'geometry eToy' stamp: 'sw 7/7/1999 12:37'!y	"Return my vertical position relative to the cartesian origin of the playfield or the world. Note that larger y values are closer to the top of the screen."	| w aPlayfield |	w _ self world.	w ifNil: [^ bounds top].	aPlayfield _ self referencePlayfield.	^ aPlayfield == nil		ifTrue: [w cartesianOrigin y - self referencePosition y]		ifFalse: [aPlayfield cartesianOrigin y - self referencePosition y]! !!Morph methodsFor: 'geometry eToy' stamp: 'sw 7/7/1999 12:37'!y: aNumber	"Set my vertical position relative to the cartesian origin of the playfield or the world. Note that larger y values are closer to the top of the screen."	| w offset newY aPlayfield |	w _ self world.	w ifNil: [^ self position: bounds left @ aNumber].	aPlayfield _ self referencePlayfield.	offset _ self top - self referencePosition y.	aPlayfield == nil		ifTrue: [newY _ (w bottom - aNumber) + offset]		ifFalse: [newY _ (aPlayfield cartesianOrigin y - aNumber) + offset].	self position: bounds left @ newY.! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 7/6/1999 13:26'!originAtCenter	^ self hasProperty: #originAtCenter! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 7/6/1999 13:35'!originAtCenterString	^ (self hasProperty: #originAtCenter)		ifTrue:			['stop origin-at-center']		ifFalse:			['start origin-at-center']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 7/6/1999 13:35'!playfieldOptionsMenu	| aMenu isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'save on file...' action: #saveOnFile.	aMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	(self valueOfProperty: #classAndMethod) ifNotNil:		[aMenu add: 'broadcast as documentation' action: #saveDocPane].	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(originAtCenterString	toggleOriginAtCenter			'whether the cartesian origin of the playfield should be at its lower-left corner or at the center of the playfield')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'].	aMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing.	aMenu balloonTextForLastItem:  'governs whether, when an object is touched inside me, a viewer should automatically be launched for it.'.	isWorld ifFalse:		[aMenu add: 'behave like a Holder' action: #becomeLikeAHolder.		aMenu balloonTextForLastItem: 'Set properties to make this object nicely set up to hold frames of a scripted animation.'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	presenter ifNil:		[aMenu add: 'make detachable' action: #makeDetachable.		aMenu balloonTextForLastItem: 'Allow this area to be separately governed by its own controls.'].	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'playfield options...'.	^ aMenu! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 7/6/1999 13:26'!originAtCenter: aBoolean	self setProperty: #originAtCenter toValue: aBoolean! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 7/6/1999 13:36'!toggleOriginAtCenter	| hasIt |	hasIt _ self hasProperty: #originAtCenter.	hasIt		ifTrue:			[self removeProperty: #originAtCenter]		ifFalse:			[self setProperty: #originAtCenter toValue: true]! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 7/6/1999 13:30'!cartesianOrigin	^ self originAtCenter		ifFalse:			[self bottomLeft]		ifTrue:			[self center]! !"Postscript:"Utilities replaceMenuFlap.!