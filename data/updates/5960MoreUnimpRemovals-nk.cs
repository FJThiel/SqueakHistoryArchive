'From Squeak3.7beta of ''1 April 2004'' [latest update: #5948] on 12 June 2004 at 5:11:52 pm'!"Change Set:		MoreUnimpRemovalsAndFixes-nkDate:			12 June 2004Author:			Ned KonzA few removals and fixes to deal with the many unimplemented messages in the system.(Removed FileResource changes from Ned's first version, because that's a BFAV class. -dew)"!!ActorState methodsFor: 'pen' stamp: 'nk 6/12/2004 16:36'!choosePenColor: evt	owningPlayer costume changeColorTarget: owningPlayer costume selector: #penColor: originalColor: owningPlayer getPenColor hand: evt hand.! !!ExternalDropHandler class methodsFor: 'class initialization' stamp: 'nk 6/12/2004 16:15'!registerStandardExternalDropHandlers	"ExternalDropHandler registerStandardExternalDropHandlers"	self registeredHandlers add: (		ExternalDropHandler			type: 'image/'			extension: nil			action: [:stream :pasteUp :event |				pasteUp addMorph: (World drawingClass withForm: (Form fromBinaryStream: stream binary)) centeredNear: event position])! !!FileList methodsFor: 'drag''n''drop' stamp: 'nk 6/12/2004 16:17'!primitiveCopyFileNamed: srcName to: dstName 	"Copied from VMMaker code.	This really ought to be a facility in file system. The major annoyance 	here is that file types and permissions are not handled by current 	Squeak code.	NOTE that this will clobber the destination file!!"	| buffer src dst |	<primitive: 'primitiveFileCopyNamedTo' module:'FileCopyPlugin'> "primitiveExternalCall" 	"If the plugin doesn't do it, go the slow way and lose the filetype info"	"This method may signal FileDoesNotExistException if either the source or 	dest files cannnot be opened; possibly permissions or bad name problems"	[[src _ FileStream readOnlyFileNamed: srcName]		on: FileDoesNotExistException		do: [^ self error: ('could not open file ', srcName)].	[dst _ FileStream forceNewFileNamed: dstName]		on: FileDoesNotExistException		do: [^ self error: ('could not open file ', dstName)].	buffer _ String new: 50000.	[src atEnd]		whileFalse: [dst				nextPutAll: (src nextInto: buffer)]]		ensure: [src				ifNotNil: [src close].			dst				ifNotNil: [dst close]]! !!IndentingListItemMorph methodsFor: 'drag and drop' stamp: 'nk 6/12/2004 16:49'!acceptDroppingMorph: toDrop event: evt	complexContents acceptDroppingObject: toDrop complexContents.	toDrop delete.	self highlightForDrop: false.! !!ScrollPane methodsFor: 'scrolling' stamp: 'nk 6/12/2004 16:27'!hideOrShowScrollBar	"Hide or show the scrollbar depending on if the pane is scrolled/scrollable."	"Don't do anything with the retractable scrollbar unless we have focus"	retractableScrollBar & self hasFocus not ifTrue: [^self].	"Don't show it if we were told not to."	(self valueOfProperty: #noScrollBarPlease ifAbsent: [false]) ifTrue: [^self].	self vIsScrollable not & self isScrolledFromTop not ifTrue: [self vHideScrollBar].	self vIsScrollable | self isScrolledFromTop ifTrue: [self vShowScrollBar].! !!TransferMorph methodsFor: 'dropping/grabbing' stamp: 'nk 6/12/2004 17:02'!result: aResult from: aResultGenerator 	"Send aResult of the drop operation computed by aResultGenerator to a   	resultRecipient, if it exists."	resultRecipient ifNotNil: [resultRecipient dropResult: aResult from: aResultGenerator]! !Vocabulary class removeSelector: #primeMethodInterfacePool!MenuItemMorph removeSelector: #mouseMove:!!HandleMorph reorganize!('dropping/grabbing' justDroppedInto:event:)('e-toy support' isCandidateForAutomaticViewing)('event handling' keyStroke:)('initialization' initialize)('initialize' forEachPointDo: forEachPointDo:lastPointDo:)('stepping and presenter' startStepping step)('*connectors-testing' isHandleMorph)('testing' stepTime)!CompressedBoundaryShape class removeSelector: #points:leftFills:rightFills:fillStyles:!BrowserUrl removeSelector: #retrieveContentsForBrowser:!