'From Squeak3.2alpha of 3 October 2001 [latest update: #4479] on 13 November 2001 at 9:25:06 am'!"Change Set:		diffsFixes-swDate:			13 November 2001Author:			Scott WallaceCleans up problems arising from a confusion regarding diffing lingering from last Spring's contentsSymbol makeover.  Thanks to Doug Way for pointing out these problems.Besides fixing various bugs that could peek through when the diffsWithPrettyPrint preference was set, this update also brings FileContentsBrowser up to date regarding the ability of any particular instance of it to show diffs, prettyDiffs, or plain source, at direct user request."!!Object methodsFor: 'testing' stamp: 'sw 11/13/2001 07:26'!wantsDiffFeedback	"Answer whether the receiver, serving as the model of a text-bearing entity, would like for 'diffs' green pane-border feedback to be shown"	^ false! !!CodeHolder methodsFor: 'controls' stamp: 'sw 11/13/2001 07:48'!contentsSymbolQuints	"Answer a list of quintuplets representing information on the alternative views available in the code pane		first element:	the contentsSymbol used		second element:	the selector to call when this item is chosen.		third element:	the selector to call to obtain the wording of the menu item.		fourth element:	the wording to represent this view		fifth element:	balloon help	A hypen indicates a need for a seperator line in a menu of such choices"	^ #((source			togglePlainSource 			showingPlainSourceString	'source'		'the textual source code as writen')(documentation	toggleShowDocumentation	showingDocumentationString	'documentation'		'the first comment in the method')-(prettyPrint		togglePrettyPrint 			prettyPrintString			'prettyPrint'			'the method source presented in a standard text format')(colorPrint		toggleColorPrint				colorPrintString				'colorPrint'			'the method source in a standard text format with colors to distinguish structural parts') (altSyntax		toggleAltSyntax				showingAltSyntaxString		'altSyntax'			'alternative syntax')-(showDiffs		toggleRegularDiffing		showingRegularDiffsString	'showDiffs'				'the textual source diffed from its prior version')(prettyDiffs		togglePrettyDiffing			showingPrettyDiffsString	'prettyDiffs'		'formatted textual source diffed from formatted form of prior version')-(decompile		toggleDecompile				showingDecompileString		'decompile'			'source code decompiled from byteCodes')(byteCodes		toggleShowingByteCodes		showingByteCodesString		'byteCodes'			'the bytecodes that comprise the compiled method')-(tiles			toggleShowingTiles 			showingTilesString			'tiles'				'universal tiles representing the method'))! !!CodeHolder methodsFor: 'controls' stamp: 'sw 11/13/2001 09:12'!sourceAndDiffsQuintsOnly	"Answer a list of quintuplets representing information on the alternative views available in the code pane for the case where the only plausible choices are showing source or either of the two kinds of diffs"	^ #((source			togglePlainSource 		showingPlainSourceString	'source'			'the textual source code as writen')(showDiffs		toggleRegularDiffing	showingRegularDiffsString	'showDiffs'		'the textual source diffed from its prior version')(prettyDiffs		togglePrettyDiffing		showingPrettyDiffsString	'prettyDiffs'		'formatted textual source diffed from formatted form of prior version'))! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 09:09'!diffButton	"Return a checkbox that lets the user decide whether diffs should be shown or not.  Not sent any more but retained against the possibility of existing subclasses outside the base image using it."	|  outerButton aButton |	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleRegularDiffing;		getSelector: #showingRegularDiffs.	outerButton addMorphBack: (StringMorph contents: 'diffs') lock.	outerButton setBalloonText: 'If checked, then code differences from the previous version, if any, will be shown.'.	^ outerButton! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:37'!regularDiffButton	"Return a checkbox that lets the user decide whether regular diffs should be shown or not"	|  outerButton aButton |	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleRegularDiffing;		getSelector: #showingRegularDiffs.	outerButton addMorphBack: (StringMorph contents: 'diffs') lock.	outerButton setBalloonText: 'If checked, then code differences from the previous version, if any, will be shown.'.	^ outerButton! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:49'!showDiffs	"Answer whether the receiver is showing diffs of source code.  The preferred protocol here is #showingRegularDiffs, but this message is still sent by some preexisting buttons so is retained."	^ contentsSymbol == #showDiffs! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:50'!showRegularDiffs: aBoolean	"Set whether I'm showing regular diffs as indicated"	self showingRegularDiffs		ifFalse:			[aBoolean ifTrue:				[contentsSymbol _ #showDiffs]]		ifTrue:			[aBoolean ifFalse:				[contentsSymbol _ #source]].	self setContentsToForceRefetch.	self contentsChanged! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 09:10'!showingDiffsString	"Answer a string representing whether I'm showing diffs.  Not sent any more but retained so that prexisting buttons that sent this will not raise errors."	^ (self showingRegularDiffs		ifTrue:			['<yes>']		ifFalse:			['<no>']), 'showDiffs'! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:07'!showingRegularDiffs	"Answer whether the receiver is showing regular diffs of source code"	^ contentsSymbol == #showDiffs! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:43'!showingRegularDiffsString	"Answer a string representing whether I'm showing regular diffs"	^ (self showingRegularDiffs		ifTrue:			['<yes>']		ifFalse:			['<no>']), 'showDiffs'! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:30'!toggleDiffing	"Toggle whether diffs should be shown in the code pane.  If any kind of diffs were being shown, stop showing diffs.  If no kind of diffs were being shown, start showing whatever kind of diffs are called for by default."	| wasShowingDiffs |	self okToChange ifTrue:		[wasShowingDiffs _ self showingAnyKindOfDiffs.		self restoreTextualCodingPane.		self showDiffs: wasShowingDiffs not.		self setContentsToForceRefetch.		self contentsChanged]! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:27'!toggleRegularDiffing	"Toggle whether regular-diffing should be shown in the code pane"	| wasShowingDiffs |	self okToChange ifTrue:		[wasShowingDiffs _ self showingRegularDiffs.		self restoreTextualCodingPane.		self showRegularDiffs: wasShowingDiffs not.		self setContentsToForceRefetch.		self contentsChanged]! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 11/13/2001 07:24'!wantsDiffFeedback	"Answer whether the receiver is showing diffs of source code"	^ self showingAnyKindOfDiffs! !!CodeHolder methodsFor: 'misc' stamp: 'sw 11/13/2001 07:42'!okayToAccept	"Answer whether it is okay to accept the receiver's input"	self showingDocumentation ifTrue:		[self inform: 'Sorry, for the moment you canonly submit changes here whenyou are showing source.  Later, youwill be able to edit the isolated commenthere and save it back, but only if YOUimplement it!!.'.		^ false].	self showingAnyKindOfDiffs ifFalse:		[^ true]. 	^ SelectionMenu confirm: 'Caution!!  You are "showing diffs" here, so there is a danger that some of the text in thecode pane is contaminated by the "diff" display'	trueChoice: 'accept anyway -- I''ll take my chances' falseChoice: 'um, let me reconsider'! !!CodeHolder methodsFor: 'message list' stamp: 'sw 11/13/2001 07:25'!sourceStringPrettifiedAndDiffed	"Answer a copy of the source code for the selected message, transformed by diffing and pretty-printing exigencies"	| class selector sourceString |	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	(class isNil or: [selector isNil]) ifTrue: [^ 'missing'].	sourceString _ class sourceCodeAt: selector.	self validateMessageSource: sourceString forSelector: selector.	(#(prettyPrint colorPrint prettyDiffs altSyntax) includes: contentsSymbol) ifTrue:		[sourceString _ class compilerClass new			format: sourceString in: class notifying: nil contentsSymbol: contentsSymbol].	self showingAnyKindOfDiffs ifTrue:		[sourceString _ self diffFromPriorSourceFor: sourceString].	^ sourceString! !!ChangeList methodsFor: 'initialization-release' stamp: 'sw 11/13/2001 08:50'!optionalButtonsView	"Answer the a View containing the optional buttons"	| view bHeight vWidth first offset previousView bWidth button |	vWidth _ 200.	bHeight _ self optionalButtonHeight.	previousView _ nil.	offset _ 0.	first _ true.	view _ View new		model: self;		window: (0 @ 0 extent: vWidth @ bHeight).	self changeListButtonSpecs do: [:triplet |		button _ PluggableButtonView			on: self			getState: nil			action: triplet second.		button label: triplet first asParagraph.		bWidth _ button label boundingBox width // 2.		button			window: (offset@0 extent: bWidth@bHeight);			borderWidthLeft: 0 right: 1 top: 0 bottom: 0.		offset _ offset + bWidth.		first			ifTrue:				[view addSubView: button.				first _ false.]			ifFalse:				[view addSubView: button toRightOf: previousView].		previousView _ button].	button _ PluggableButtonView		on: self		getState: #showingAnyKindOfDiffs		action: #toggleDiffing.	button		label: 'diffs' asParagraph;		window: (offset@0 extent: (vWidth - offset)@bHeight).	view addSubView: button toRightOf: previousView.	^ view! !!ChangeList methodsFor: 'menu actions' stamp: 'sw 11/13/2001 07:36'!optionalButtonRow	"Answer a row of buttons to occur in a tool pane"	| aRow aButton |	aRow _ AlignmentMorph newRow.	aRow hResizing: #spaceFill.	aRow clipSubmorphs: true.	aRow layoutInset: 5@2; cellInset: 3.	aRow wrapCentering: #center; cellPositioning: #leftCenter.	self changeListButtonSpecs do:		[:triplet |			aButton _ PluggableButtonMorph				on: self				getState: nil				action: triplet second.			aButton				hResizing: #spaceFill;				vResizing: #spaceFill;				useRoundedCorners;				label: triplet first asString;				askBeforeChanging: true;				onColor: Color transparent offColor: Color transparent.			aRow addMorphBack: aButton.			aButton setBalloonText: triplet third.		].	aRow addMorphBack: self regularDiffButton.	aRow addMorphBack: self prettyDiffButton.	^ aRow! !!ChangeList methodsFor: 'viewing access' stamp: 'sw 11/13/2001 09:12'!contentsSymbolQuints	"Answer a list of quintuplets representing information on the alternative views available in the code pane"	^ self sourceAndDiffsQuintsOnly! !!ChangeSorter methodsFor: 'code pane' stamp: 'sw 11/13/2001 07:35'!setContents	"return the source code that shows in the bottom pane"	| sel class strm changeType |	self clearUserEditFlag.	currentClassName ifNil: [^ contents _ myChangeSet preambleString ifNil: ['']].	class _ self selectedClassOrMetaClass.	(sel _ currentSelector) == nil		ifFalse: [changeType _ (myChangeSet atSelector: (sel _ sel asSymbol) class: class).			changeType == #remove				ifTrue: [^ contents _ 'Method has been removed (see versions)'].			changeType == #addedThenRemoved				ifTrue: [^ contents _ 'Added then removed (see versions)'].			class ifNil: [^ contents _ 'Method was added, but cannot be found!!'].			(class includesSelector: sel)				ifFalse: [^ contents _ 'Method was added, but cannot be found!!'].			contents _ class sourceCodeAt: sel.			(#(prettyPrint colorPrint prettyDiffs altSyntax) includes: contentsSymbol) ifTrue:				[contents _ class compilerClass new					format: contents in: class notifying: nil contentsSymbol: contentsSymbol].			self showingAnyKindOfDiffs				ifTrue: [contents _ self diffFromPriorSourceFor: contents].			^ contents _ contents asText makeSelectorBoldIn: class]		ifTrue: [strm _ WriteStream on: (String new: 100).			(myChangeSet classChangeAt: currentClassName) do:				[:each |				each = #remove ifTrue: [strm nextPutAll: 'Entire class was removed.'; cr].				each = #addedThenRemoved ifTrue: [strm nextPutAll: 'Class was added then removed.'].				each = #rename ifTrue: [strm nextPutAll: 'Class name was changed.'; cr].				each = #add ifTrue: [strm nextPutAll: 'Class definition was added.'; cr].				each = #change ifTrue: [strm nextPutAll: 'Class definition was changed.'; cr].				each = #reorganize ifTrue: [strm nextPutAll: 'Class organization was changed.'; cr].				each = #comment ifTrue: [strm nextPutAll: 'New class comment.'; cr.				]].			^ contents _ strm contents].! !!ChangeSorter methodsFor: 'code pane' stamp: 'sw 11/13/2001 07:34'!toggleDiffing	"Toggle whether diffs should be shown in the code pane"	self okToChange ifTrue:		[super toggleDiffing.		self changed: #contents.		self update]! !!FileContentsBrowser methodsFor: 'edit pane' stamp: 'sw 11/13/2001 08:41'!selectedMessage	"Answer a copy of the source code for the selected message selector."	| class selector |	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	contents _ class sourceCodeAt: selector.	Preferences browseWithPrettyPrint ifTrue: [contents _ Compiler new					format: contents					in: class					notifying: nil					decorated: Preferences colorWhenPrettyPrinting].	self showingAnyKindOfDiffs ifTrue:		[contents _ self			methodDiffFor: contents			class: self selectedClass			selector: self selectedMessageName			meta: self metaClassIndicated].	^ contents asText makeSelectorBoldIn: class! !!FileContentsBrowser methodsFor: 'creation' stamp: 'sw 11/13/2001 08:40'!createViews	"Create a pluggable version of all the views for a Browser, including views and controllers."	| hasSingleFile width topView packageListView classListView switchView messageCategoryListView messageListView browserCodeView infoView |	contentsSymbol _ self defaultDiffsSymbol.  "#showDiffs or #prettyDiffs"	Smalltalk isMorphic ifTrue: [^ self openAsMorph].	(hasSingleFile _ self packages size = 1)		ifTrue: [width _ 150]		ifFalse: [width _ 200].	(topView _ StandardSystemView new) 		model: self;		borderWidth: 1.		"label and minSize taken care of by caller"		hasSingleFile 		ifTrue: [			self systemCategoryListIndex: 1.			packageListView _ PluggableListView on: self				list: #systemCategorySingleton				selected: #indexIsOne 				changeSelected: #indexIsOne:				menu: #packageListMenu:				keystroke: #packageListKey:from:.			packageListView window: (0 @ 0 extent: width @ 12)]		ifFalse: [			packageListView _ PluggableListView on: self				list: #systemCategoryList				selected: #systemCategoryListIndex				changeSelected: #systemCategoryListIndex:				menu: #packageListMenu:				keystroke: #packageListKey:from:.			packageListView window: (0 @ 0 extent: 50 @ 70)].	topView addSubView: packageListView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 50 @ 62).	hasSingleFile 		ifTrue: [topView addSubView: classListView below: packageListView]		ifFalse: [topView addSubView: classListView toRightOf: packageListView].	switchView _ self buildInstanceClassSwitchView.	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:		keystroke: #messageListKey:from:.	messageListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: width@110).	topView 		addSubView: browserCodeView 		below: (hasSingleFile 			ifTrue: [switchView]			ifFalse: [packageListView]).	infoView _ StringHolderView new		model: self infoString;		window: (0@0 extent: width@12);		borderWidth: 1.	topView addSubView: infoView below: browserCodeView.	^ topView! !!FileContentsBrowser methodsFor: 'menus' stamp: 'sw 11/13/2001 09:12'!contentsSymbolQuints	"Answer a list of quintuplets representing information on the alternative views available in the code pane.  For the file-contents browser, the choices are restricted to source and the two diffing options"	^ self sourceAndDiffsQuintsOnly! !FileContentsBrowser removeSelector: #addModelItemsToWindowMenu:!