'From Squeak2.9alpha of 13 June 2000 [latest update: #2896] on 26 October 2000 at 2:00:24 am'!"Change Set:		EventRename-arDate:			26 October 2000Author:			Andreas RaabBrings the name 'MorphicEvent' back to the game."!Smalltalk renameClassNamed: #NewMorphicEvent as: #MorphicEvent!!BalloonMorph methodsFor: 'object fileIn' stamp: 'ar 10/26/2000 01:56'!convertbosfcebbvcfaascbhbto0: varDict bosfcebbvcfaascbhbtob0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor' 'vertices' 'closed' 'filledForm' 'arrows' 'arrowForms' 'smoothCurve' 'curveState' 'borderDashSpec' 'handles' 'borderForm' 'target' 'offsetFromTarget').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('balloonOwner')  If a non-nil value is needed, please assign it."! !!EventRecorderMorph methodsFor: 'fileIn/Out' stamp: 'ar 10/26/2000 01:55'!readFromV0: aStream	| cr line lineStream t evt |	cr _ Character cr.	^Array streamContents:[:tStream |		[aStream atEnd] whileFalse:			[line _ aStream upTo: cr.			line isEmpty "Some MW tapes have an empty record at the end"				ifFalse: [lineStream _ ReadStream on: line.						t _ Integer readFrom: lineStream.						[lineStream peek isLetter] whileFalse: [lineStream next].						evt _ MorphicEvent readFromObsolete: lineStream.						tStream nextPut: t -> evt]]].! !!EventRecorderMorph methodsFor: 'fileIn/Out' stamp: 'ar 10/26/2000 01:55'!readFromV1: aStream	| cr |	cr _ Character cr.	^Array streamContents:[:tStream |		[aStream atEnd] whileFalse:[			tStream nextPut: (MorphicEvent readFromString: (aStream upTo: cr))]]! !!HandMorph methodsFor: 'object fileIn' stamp: 'ar 10/26/2000 01:55'!convertbosfceekmmmdccffuleatdccttggrtllmhssffacw0: varDict bosfcemkemkmmltdcctthsul0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'keyboardFocus' 'targetOffset' 'damageRecorder' 'cacheCanvas' 'cachedCanvasHasHoles' 'temporaryCursor' 'temporaryCursorOffset' 'hasChanged' 'savedPatch' 'userInitials').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('mouseFocus' 'eventListeners' 'mouseListeners' 'keyboardListeners' 'mouseClickState' 'mouseOverHandler' 'lastMouseEvent' 'lastEventBuffer')  If a non-nil value is needed, please assign it."	"These are going away #('eventSubscribers' 'mouseDownMorph' 'mouseOverMorphs' 'mouseOverTimes' 'dragOverMorphs' 'clickClient' 'clickState' 'firstClickEvent' 'firstClickTime' 'lastEvent' 'eventTransform' 'argument' 'grid' 'gridOn' 'remoteConnections' 'transmitBuffer' 'lastEventTransmitted' 'lastWorldExtent' 'menuTargetOffset' 'suppressDrawing' 'formerOwner' 'formerPosition' 'addedFlexAtGrab' 'currentCommand' 'worldUnderCursor').  Possibly store their info in another variable?"! !!HandMorphForReplay methodsFor: 'object fileIn' stamp: 'ar 10/26/2000 01:55'!convertbosfceekmmmdccffuleatdccttggrtllmhssffacwr0: varDict bosfcemkemkmmltdcctthsulr0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'keyboardFocus' 'targetOffset' 'damageRecorder' 'cacheCanvas' 'cachedCanvasHasHoles' 'temporaryCursor' 'temporaryCursorOffset' 'hasChanged' 'savedPatch' 'userInitials' 'recorder').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('mouseFocus' 'eventListeners' 'mouseListeners' 'keyboardListeners' 'mouseClickState' 'mouseOverHandler' 'lastMouseEvent' 'lastEventBuffer')  If a non-nil value is needed, please assign it."	"These are going away #('eventSubscribers' 'mouseDownMorph' 'mouseOverMorphs' 'mouseOverTimes' 'dragOverMorphs' 'clickClient' 'clickState' 'firstClickEvent' 'firstClickTime' 'lastEvent' 'eventTransform' 'argument' 'grid' 'gridOn' 'remoteConnections' 'transmitBuffer' 'lastEventTransmitted' 'lastWorldExtent' 'menuTargetOffset' 'suppressDrawing' 'formerOwner' 'formerPosition' 'addedFlexAtGrab' 'currentCommand' 'worldUnderCursor').  Possibly store their info in another variable?"! !!MorphicEventDecoder methodsFor: 'handling messages' stamp: 'ar 10/26/2000 01:55'!applyEventMessage: aStringArray to: aHand	| event |	event := MorphicEvent fromStringArray: (aStringArray copyFrom: 2 to: aStringArray size).	event ifNotNil:[aHand queueEvent: event].! !!RemoteHandMorph methodsFor: 'private' stamp: 'ar 10/26/2000 01:55'!getNextRemoteEvent	"Return the next remote event, or nil if the receive buffer does not contain a full event record. An event record is the storeString for a MorphicEvent terminated by a <CR> character."	| i s evt |	self receiveData.	receiveBuffer isEmpty ifTrue: [^ nil].	i _ receiveBuffer indexOf: Character cr ifAbsent: [^ nil].	s _ receiveBuffer copyFrom: 1 to: i - 1.	receiveBuffer _ receiveBuffer copyFrom: i + 1 to: receiveBuffer size.	evt _ (MorphicEvent readFromString: s).	evt ifNil:[^nil].	evt setHand: self.	evt isKeyboard ifTrue:[evt setPosition: self position].	^evt resetHandlerFields! !!SmartRefStream methodsFor: 'conversion' stamp: 'ar 10/26/2000 01:55'!morphicEventtcbks0	^ MorphicEvent! !