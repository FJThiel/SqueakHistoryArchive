Model subclass: #IRCChannelInfo	instanceVariableNames: 'connection name members subscribers '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCChannelInfo commentStamp: 'ls 9/8/1998 21:40' prior: 0!holds various info on a channel.!!IRCChannelInfo methodsFor: 'messages' stamp: 'ls 9/5/1998 00:40'!sendMessage: aString	"send a message on the channel"	connection privmsgFrom: nil  to: name  text: aString! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/4/1998 22:25'!addMember: memberName	"note that memberName is on the channel.  memberName should be given in the user's preferred capitalization"	members add: memberName! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/4/1998 22:25'!addMembers: list	members addAll: list! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/3/1998 21:31'!memberNames	"names of the clients subscribing to this channel"	^members! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/3/1998 21:28'!name	"name of the channel, in its preferred capitalization"	^name! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/3/1998 21:30'!removeMember: memberName	"note that memberName has left (PART-ed) the channel"	members remove: memberName.! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/5/1998 00:41'!subscribe: anObject	"add anObject as a subscriber.  anObject must respond to ircMessageRecieved"	subscribers isEmpty ifTrue: [ connection join: name ].	subscribers add: anObject! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/3/1998 21:28'!subscribers	"collection of objects watching for messages on the channel"	^subscribers! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/5/1998 00:39'!unsubscribe: anObject	"unsubscribe anObject"	subscribers remove: anObject.	subscribers isEmpty ifTrue: [ connection leave: name ].! !!IRCChannelInfo methodsFor: 'private-initialization' stamp: 'ls 9/4/1998 02:50'!initializeName: aString	name _ aString.	members _ Set new.	subscribers _ IdentitySet new.! !!IRCChannelInfo methodsFor: 'private-initialization' stamp: 'ls 9/6/1998 20:23'!initializeName: aString  connection: aConnection	name _ aString.	members _ Set new.	subscribers _ IdentitySet new.	connection _ aConnection! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCChannelInfo class	instanceVariableNames: ''!!IRCChannelInfo class methodsFor: 'instance creation' stamp: 'ls 9/6/1998 20:22'!forChannelNamed: aString  onConnection: connection	"create an instance for the channel with the given name"	^super new initializeName: aString connection: connection! !Model subclass: #IRCChannelListBrowser	instanceVariableNames: 'connection channelList channelIndex '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCChannelListBrowser commentStamp: 'ls 9/8/1998 21:40' prior: 0!a browser of the list of channels a given connection offers.  Allows users to easily join and create channels.!!IRCChannelListBrowser methodsFor: 'private-initialization' stamp: 'ls 9/4/1998 21:42'!initialize: anIRCConnection	connection _ anIRCConnection.	channelList _ connection channelList ifNil: [ #() ].	channelIndex _ 0.	anIRCConnection addDependent: self! !!IRCChannelListBrowser methodsFor: 'private' stamp: 'ls 9/5/1998 01:28'!refreshChannelList	channelList _ connection channelList.	channelList _ channelList asSortedCollection: [ :a :b |		a numUsers = b numUsers			ifTrue: [ a name asIRCLowercase < b name asIRCLowercase ]			ifFalse: [ a numUsers > b numUsers ] ].	channelList _ channelList asArray.		channelIndex _ 0.	self changed: #channelDescriptions.	self changed: #channelIndex.! !!IRCChannelListBrowser methodsFor: 'private' stamp: 'ls 9/4/1998 21:34'!update: aSymbol	aSymbol == #channelList ifTrue: [		channelList _ connection channelList.		channelIndex _ 0.		self changed: #channelDescriptions ].! !!IRCChannelListBrowser methodsFor: 'interface' stamp: 'ls 9/4/1998 23:11'!createChannel	|  channelName |	channelName _ FillInTheBlank request: 'channel name'.	channelName isEmpty ifTrue: [ ^self ].	IRCChannelObserver openForChannel: channelName  onConnection: connection! !!IRCChannelListBrowser methodsFor: 'interface' stamp: 'ls 9/4/1998 22:07'!openMorphicView	| win descListView updateButton actionColumn openChannelButton createChannelButton |	win _ SystemWindow new.	win setLabel: 'Channel Listing'.	win model: self.	descListView _ PluggableListMorph on: self  list: #channelDescriptions selected: #channelIndex changeSelected: #channelIndex:.	win addMorph: descListView  frame: (0@0 extent: 0.8@0.9).	updateButton _ PluggableButtonMorph on: connection getState: nil action: #requestChannelList.	updateButton label: 'update'.	win addMorph: updateButton  frame: (0@0.9 extent: 1@0.1).	actionColumn _ AlignmentMorph newColumn.	openChannelButton _ PluggableButtonMorph on: self getState: nil action: #openSelectedChannel.	openChannelButton label: 'join channel'.	actionColumn addMorphBack: openChannelButton.	createChannelButton _ PluggableButtonMorph on: self getState: nil action: #createChannel.	createChannelButton label: 'create channel'.	actionColumn addMorphBack: createChannelButton.	win addMorph: actionColumn  frame: (0.8@0 extent: 0.2@0.9).	win openInWorld! !!IRCChannelListBrowser methodsFor: 'interface' stamp: 'ls 9/4/1998 23:11'!openSelectedChannel	| channelInfo channelName |	channelInfo _ channelList at: channelIndex ifAbsent: [ ^self ].	channelName _ channelInfo name.	IRCChannelObserver openForChannel: channelName  onConnection: connection! !!IRCChannelListBrowser methodsFor: 'interface' stamp: 'ls 9/4/1998 21:28'!openView	^self openMorphicView! !!IRCChannelListBrowser methodsFor: 'access' stamp: 'ls 9/4/1998 21:43'!channelDescriptions	^channelList collect: [ :channel |		channel name, '(', channel numUsers printString, ')			', channel topic, '.' ].! !!IRCChannelListBrowser methodsFor: 'access' stamp: 'ls 9/4/1998 21:34'!channelIndex	^channelIndex! !!IRCChannelListBrowser methodsFor: 'access' stamp: 'ls 9/4/1998 21:53'!channelIndex: anInteger	channelIndex _ anInteger.	self changed: #channelIndex! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCChannelListBrowser class	instanceVariableNames: ''!!IRCChannelListBrowser class methodsFor: 'instance creation' stamp: 'ls 9/4/1998 21:35'!forConnection: connection	^super new initialize: connection! !!IRCChannelListBrowser class methodsFor: 'instance creation' stamp: 'ls 9/4/1998 21:36'!openForConnection: connection	(self forConnection: connection) openView! !Model subclass: #IRCChannelObserver	instanceVariableNames: 'connection channelName chatText '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCChannelObserver commentStamp: 'ls 9/8/1998 21:40' prior: 0!converts IRC messages forwarded to it, into a textual format that may be displayed.  Messages may additionally sent *from* it, to a specified target.!!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 17:51'!chatAreaSelection	"where to put the cursor in the chat area.  We'll leave it at the very end so that the most recent mesages are always visible"	^chatText size to: chatText size-1! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/3/1998 19:59'!chatText	^chatText! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 00:12'!chatTextSelection	"where to put the cursor in the chat area.  We'll leave it at the very end so that the most recent mesages are always visible"	^chatText size to: chatText size-1! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/6/1998 20:41'!connection: anIRCConnection channel: aString	connection _ anIRCConnection.	channelName _ aString.	connection subscribe: self toChannel: channelName.	chatText _ Text new.! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 00:23'!ircMessageRecieved: aMessage	| sender newLine |	sender _ aMessage sender ifNil: [ 'me' ].	(sender includes: $!!) ifTrue: [ sender _ sender copyFrom: 1 to: (sender indexOf: $!!)-1 ].	newLine _ 		(Text string: sender emphasis: (Array with: TextEmphasis bold)), 		': ', aMessage text, String cr.	chatText _ chatText, newLine.	chatText size > 1000 ifTrue: [		chatText _ chatText copyFrom: (chatText size - 500) to: chatText size ].	self changed: #chatText.! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 00:12'!openMorphicView	"open a view for interacting with this collector"	| win textArea inputArea |	win _ SystemWindow new.	win setLabel: channelName.	win model: self.	textArea _ PluggableTextMorph on: self text: #chatText accept: nil readSelection: #chatTextSelection menu: nil.	win addMorph: textArea frame: (0@0 extent: 1@0.9).	inputArea _ PluggableTextMorph on: self text: nil accept: #sendMessage:.	win addMorph: inputArea frame: (0@0.9 extent: 1@0.1) .	win openInWorld.! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/3/1998 20:59'!openView	"open a view for interacting with this collector"	^self openMorphicView! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/6/1998 20:40'!release	super release.	connection unsubscribe: self fromChannel: channelName! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 23:12'!sendMessage: aText	connection privmsgFrom: nil to: channelName text: aText asString.	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCChannelObserver class	instanceVariableNames: ''!!IRCChannelObserver class methodsFor: 'instance creation' stamp: 'ls 9/4/1998 23:12'!openForChannel: channelName  onConnection: connection 	^(super new connection: connection  channel: channelName) openView! !Object subclass: #IRCChannelSummary	instanceVariableNames: 'name numUsers topic '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCChannelSummary commentStamp: 'ls 9/8/1998 21:40' prior: 0!very basic info on an IRC channel; specifically, that returned by a LIST command!!IRCChannelSummary methodsFor: 'access' stamp: 'ls 9/2/1998 22:39'!name	"the name of the channel"	^name! !!IRCChannelSummary methodsFor: 'access' stamp: 'ls 9/2/1998 22:40'!numUsers	"number of users currently on the channel"	^numUsers! !!IRCChannelSummary methodsFor: 'access' stamp: 'ls 9/2/1998 22:40'!topic	"the current topic of discussion"	^topic! !!IRCChannelSummary methodsFor: 'printing' stamp: 'ls 9/2/1998 23:35'!printOn: aStream	aStream nextPutAll: 'IRCChannel '.	aStream nextPutAll: self name.	aStream nextPutAll: ' ('.	aStream nextPutAll: numUsers printString.	aStream nextPutAll: ')'.! !!IRCChannelSummary methodsFor: 'private-initialization' stamp: 'ls 9/2/1998 22:38'!initializeName: aString  numUsers: anInteger  topic: anotherString	name _ aString.	numUsers _ anInteger.	topic _ anotherString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCChannelSummary class	instanceVariableNames: ''!!IRCChannelSummary class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 22:39'!name: cname  numUsers: numUsers  topic: topic	^super new initializeName: cname  numUsers: numUsers  topic: topic! !Model subclass: #IRCConnection	instanceVariableNames: 'socket protocolMessagesToSend sendBuffer recieveBuffer nick userName fullName server port channelList channelListBeingBuilt motd motdBeingBuilt subscribedChannels directMessageSubscribers '	classVariableNames: 'DefaultFullName DefaultNick DefaultPort DefaultServer DefaultUserName MessageHandlers '	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCConnection commentStamp: 'ls 9/8/1998 21:40' prior: 0!A connection to an IRC server.  This handles spooling messages in and out, and converts between network commands and more convenient data structures.USAGE- To make a connection, use connectToServer:port:....  - #processIO must be periodically called.  - There are several available command shortcuts in the "IRC commands" protocol, or one can create IRCProtocolMessage's directly and send them with sendMessage:.  - Recieved messages may be iterated over with recievedMessagesDo:; once a message is iterated over, it is deleted.!!IRCConnection methodsFor: 'access' stamp: 'ls 9/3/1998 18:04'!fullName	^fullName! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/3/1998 18:26'!fullName: aString	fullName _ aString asString.	DefaultFullName _ fullName.	^true! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/2/1998 18:23'!nick	^nick ifNil: [ '(not set)' ]! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!nick: aString	nick _ aString asString.	DefaultNick _ nick.	^true! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/2/1998 18:24'!portAsString	^port printString! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!portAsString: aString	port _ [ aString asString asNumber ] ifError: [ :a :b | ^false ].	DefaultPort _ port.	^true! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/2/1998 18:23'!server	^server ifNil: [ '(not set)' ]! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!server: aString	server _ aString asString.	DefaultServer _ server.	^true! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/3/1998 18:04'!userName	^userName! !!IRCConnection methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!userName: aText	userName _ aText asString.	DefaultUserName _ userName.	^true! !!IRCConnection methodsFor: 'server info' stamp: 'ls 9/6/1998 20:23'!channelInfo: channelName	"return cached info on a channel"	| lChannelName |	lChannelName _ channelName asIRCLowercase.	^subscribedChannels at: lChannelName ifAbsent: [ 		"no info available--create and return a skeleton"		subscribedChannels at: lChannelName put:			(IRCChannelInfo forChannelNamed: channelName  onConnection: self) ]! !!IRCConnection methodsFor: 'server info' stamp: 'ls 9/2/1998 23:35'!channelList	"returns the list of channels, or nil if it hasn't been retrieved yet"	^channelList! !!IRCConnection methodsFor: 'server info' stamp: 'ls 9/2/1998 23:53'!channelListReport	"list the channels in a textual format"	| list |	list _ self channelList.	list ifNil: [ ^'(info not available)' ].	^String streamContents: [ :stream |		stream nextPutAll: 'Channel List'; cr.		stream nextPutAll: '--------------'; cr.		list do: [ :channel |			stream nextPutAll: channel name.			stream nextPutAll: '('.			stream nextPutAll: channel numUsers printString.			stream nextPutAll: ')		['.			stream nextPutAll: channel topic.			stream nextPutAll: ']'.			stream cr ] ]! !!IRCConnection methodsFor: 'server info' stamp: 'ls 9/2/1998 23:18'!motd	"return the most recently seen Message of the Day, or nil if none has been seen yet"	^motd! !!IRCConnection methodsFor: 'private' stamp: 'ls 9/4/1998 23:47'!reset	"prepare for a new connection"	recieveBuffer _ String new.	protocolMessagesToSend _ OrderedCollection new.	sendBuffer _ nil.	socket _ nil.	channelList _ nil.	channelListBeingBuilt _ nil.	motd _ nil.	motdBeingBuilt _ nil.	subscribedChannels _ Dictionary new.! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:38'!processChannelList: aMessage	"an item has arrived in the list of channels"	| chanName chanNumUsers chanTopic |	aMessage arguments size < 4 ifTrue: [ ^self ].	chanName _ aMessage arguments at: 2.	chanNumUsers _ (aMessage arguments at: 3) asNumber.	chanTopic _ (aMessage arguments at: 4).	chanName = '*' ifTrue: [ ^self ].	channelListBeingBuilt ifNil: [ channelListBeingBuilt _ OrderedCollection new ].	channelListBeingBuilt add: (IRCChannelSummary name: chanName numUsers: chanNumUsers topic: chanTopic). ! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:39'!processChannelListEnd: aMessage	"a complete channel listing has arrived"	"end of a channel listing"	channelList _ channelListBeingBuilt asArray.	channelListBeingBuilt _ nil.	self changed: #channelList. 	self changed: #channelListReport.! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:37'!processChannelListStart: aMessage	"start of a channel listing"	channelListBeingBuilt _ OrderedCollection new.! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/6/1998 20:49'!processJoin: aMessage	Transcript show: aMessage asString! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:43'!processMessage: aMessage	| handler |	handler _ MessageHandlers at: aMessage command ifAbsent: [ nil ].	handler ifNil: [		Transcript show: aMessage asString.		^self ].	^self perform: handler  with: aMessage! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:36'!processMotd: aMessage	"a new line has arrived for the MOTD"	motdBeingBuilt nextPutAll: aMessage arguments second.	motdBeingBuilt cr.! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:36'!processMotdEnd: aMessage	"the whole MOTD has arrived"	motd _ motdBeingBuilt contents.	motdBeingBuilt _ nil.	self changed: #motd.! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:35'!processMotdStart: aMessage	"MOTD is being transmitted"	motdBeingBuilt _ WriteStream on: String new.! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:41'!processNamReply: aMessage	"list of names for a channel, probably a channel being joined"	| names lChannelName channelInfo |	names _ aMessage arguments last findTokens: ' '.	lChannelName _ (aMessage arguments at: 3) asIRCLowercase.	channelInfo _ subscribedChannels at: lChannelName ifAbsent: [nil].	channelInfo ifNotNil: [ channelInfo addMembers: names ].! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/6/1998 20:49'!processPart: aMessage	Transcript show: aMessage asString! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:35'!processPing: aMessage	"ping request"	Transcript show: 'replying to PING'; cr.	self sendMessage: (IRCProtocolMessage command: 'pong' arguments: aMessage arguments).! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/4/1998 22:35'!processPrivmsg: aMessage	"handle a PRIVMSG or NOTICE message"	| sender recipient text privMessage info |	"put together the message"	sender _ aMessage prefix.	recipient _ aMessage arguments at: 1.	text _ aMessage arguments at: 2.	privMessage _ IRCMessage sender: sender  recipient: recipient  text: text.	"broadcast the message to all subscribers"	info _ subscribedChannels at: recipient asIRCLowercase ifAbsent: [ nil ].	info ifNotNil: [ info subscribers do: [ :sub |		sub ircMessageRecieved: privMessage ] ].	recipient asIRCLowercase = nick asIRCLowercase ifTrue: [		directMessageSubscribers do: [ :sub |			sub ircMessageRecieved: privMessage ] ].! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 23:47'!initialize	self reset.	server _ DefaultServer.	port _ DefaultPort.	nick _ DefaultNick.	userName _ DefaultUserName.	fullName _ DefaultFullName.	directMessageSubscribers _ IdentitySet new.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 23:32'!openChannelList	"open a view on the list of channels"	IRCChannelListBrowser openForConnection: self! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 23:25'!openConnectionDialogue	"open a dialogue for making new connections"	| dialogue textEntry connectButton y yDelta descMorph |	dialogue _ SystemWindow new.	y _ 0.	yDelta _ 0.8 / 5.	#(		'server'		server		'port'		portAsString		'nick'		nick		'username'	userName		'full name'	fullName	) pairsDo: [ :desc :meth |		descMorph _ PluggableButtonMorph on: self getState: nil action: nil.		descMorph label: desc.		dialogue addMorph: descMorph  frame: (0@y extent: 0.3@yDelta).		textEntry _ PluggableTextMorph on: self text: meth accept: (meth, ':') asSymbol.		textEntry extent: 200@20.		dialogue addMorph: textEntry frame: (0.3@y extent: 0.7@yDelta).		y _ y + yDelta.	].	connectButton _ PluggableButtonMorph on: self getState: nil action: #connect.	connectButton label: 'connect'.	dialogue addMorph: connectButton frame: (0@0.8 extent: 1@0.2).	dialogue setLabel: 'connect to an IRC server'.	dialogue openInWorld.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/5/1998 01:12'!openDirectMessagesObserver	IRCDirectMessagesObserver openForConnection: self! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 23:35'!openMorphicView 	|  connectButton column channelListButton motdButton inputPane win |	win _ SystemWindow labelled: 'IRC'.	win extent: 200@100.	win model: self.	column _ AlignmentMorph newRow.	connectButton _ PluggableButtonMorph		on: self		getState: nil		action: #openConnectionDialogue.	connectButton label: 'connect to server'.	column addMorphBack: connectButton.	motdButton _ PluggableButtonMorph		on: self		getState: nil		action: #openMotd.	motdButton label: 'view MOTD'.	column addMorphBack: motdButton.	channelListButton _ PluggableButtonMorph		on: self		getState: nil		action: #openChannelList.	channelListButton label: 'channel list'.	column addMorphBack: channelListButton.	win addMorph: column frame: (0@0 extent: 1@0.5).	inputPane _ PluggableTextMorph on: self text: nil accept: #sendRawCommand:.	win addMorph: inputPane frame: (0@0.5 corner: 1@1).	win openInWorld! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/3/1998 20:48'!openMotd	"open a view on the MOTD"	| win textView updateButton |	World ifNil: [ ^self ].	win _ SystemWindow labelled: 'MOTD'.	textView _ PluggableTextMorph on: self text: #motd accept: nil.	win addMorph: textView  frame: (0@0 extent: 1@0.9).	updateButton _ PluggableButtonMorph on: self getState: nil action: #requestMotd.	updateButton label: 'update'.	win addMorph: updateButton  frame: (0@0.9 extent: 1@0.1).	win openInWorld.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 23:27'!openView	^self openMorphicView! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 23:36'!release	super release.	self disconnect.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 23:46'!sendRawCommand: aString	"send a command directly"	| message |	message _ [ IRCProtocolMessage fromString: aString asString ] ifError: [ :a :b |		^false ].	self sendMessage: message.	^true! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/6/1998 20:21'!subscribe: anObject toChannel: channelName	"send all messages for channelName to anObject.  anObject must implemented #ircMessageReceieved:"	|  info |	info _ self channelInfo: channelName.	info subscribe: anObject.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/4/1998 18:06'!subscribeToDirectMessages: anObject	"send all messages directly to the user's nick to anObject.  anObject must implemented #ircMessageReceieved:"	directMessageSubscribers add: anObject.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/5/1998 00:38'!unsubscribe: anObject fromChannel: channelName	"see subscribe:toChannel:"	|  lChannelName info |	lChannelName _ channelName asIRCLowercase.	info _ subscribedChannels at: lChannelName ifAbsent: [ ^self ].	info unsubscribe: anObject.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/5/1998 00:10'!unsubscribeFromDirectMessages: anObject 	"see #subscribeFromDirectMessages:"	directMessageSubscribers remove: anObject ifAbsent: []! !!IRCConnection methodsFor: 'IRC commands' stamp: 'ls 9/2/1998 21:59'!join: channelName	"join a channel"	self sendMessage: (IRCProtocolMessage		command: 'join'		arguments: (Array with: channelName))! !!IRCConnection methodsFor: 'IRC commands' stamp: 'ls 9/2/1998 21:59'!leave: channelName	"leave a channel"	self sendMessage: (IRCProtocolMessage		command: 'part'		arguments: (Array with: channelName))! !!IRCConnection methodsFor: 'IRC commands' stamp: 'ls 9/3/1998 23:49'!privmsgFrom: from  to: to  text: text	"send a private message.  'to' can be a channel name...."	| msg |	msg _ (IRCProtocolMessage		prefix: from		command: 'privmsg'		arguments: (Array with: to  with: text)).	self processMessage: msg.	"because these aren't sent back by default"! !!IRCConnection methodsFor: 'IRC commands' stamp: 'ls 9/2/1998 21:59'!quit	"tell the server we are leaving"	self sendMessage: (IRCProtocolMessage command: 'quit')! !!IRCConnection methodsFor: 'IRC commands' stamp: 'ls 9/2/1998 23:36'!requestChannelList	"request a list of all channels"	self sendMessage: (IRCProtocolMessage command: 'list')! !!IRCConnection methodsFor: 'IRC commands' stamp: 'ls 9/2/1998 23:18'!requestMotd	self sendMessage: (IRCProtocolMessage command: 'motd')! !!IRCConnection methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 23:30'!connect	"connect to a server"	| addr |	Socket initializeNetwork.	socket ifNotNil: [ socket destroy ].	self reset.	Utilities informUser: 'looking up server address...' during: [		addr _ NetNameResolver addressForName: server ].	addr ifNil: [ ^PopUpMenu notify: 'could not find address for ', server ].	socket _ Socket new.	socket connectTo: addr  port: port.	self sendMessage: (IRCProtocolMessage fromString: 'NICK ', nick).	self sendMessage: (IRCProtocolMessage fromString: 'USER ', userName, ' * * :', fullName).! !!IRCConnection methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 21:27'!disconnect		"disconnect from the server"	socket ifNotNil: [ socket isValid ifTrue: [ 		Transcript show: 'disconnecting from IRC', String cr.		socket close ] ].		socket _ nil.! !!IRCConnection methodsFor: 'as yet unclassified' stamp: 'ls 9/2/1998 17:45'!isConnected	"whether we are currently connected"	^socket ~~ nil  and: [ socket isConnected ]! !!IRCConnection methodsFor: 'as yet unclassified' stamp: 'ls 9/3/1998 00:19'!processIO	"do as much network IO as is immediately possible"		| amount idx messageText message |	"do nothing if the socket isn't ready for work"	(socket isNil or: [socket isValid not or: [ socket isConnected not ]]) ifTrue: [ 		"Transcript show: 'socket not ready; no IO done'; cr."		^self ].	"first do sending"	[ socket sendDone and: [ sendBuffer isNil not or: [ protocolMessagesToSend size > 0 ] ] ]	whileTrue: [		sendBuffer ifNil: [			protocolMessagesToSend isEmpty ifFalse: [				sendBuffer _ protocolMessagesToSend removeFirst asString ] ].		sendBuffer ifNotNil: [			amount _ socket sendSomeData: sendBuffer.			sendBuffer _ sendBuffer copyFrom: amount+1 to: sendBuffer size.			sendBuffer isEmpty ifTrue: [ sendBuffer _ nil ] ].	].	"now do receiving"	[ socket dataAvailable ] whileTrue: [ 		recieveBuffer _ recieveBuffer, socket getData ].	"parse as many messages as possible"	[ idx _ recieveBuffer indexOf: Character lf.  	  idx > 0 ] whileTrue: [		messageText _ recieveBuffer copyFrom: 1 to: idx.		message _ IRCProtocolMessage fromString: messageText.				self processMessage: message.		recieveBuffer _ recieveBuffer copyFrom: idx+1 to: recieveBuffer size ].! !!IRCConnection methodsFor: 'as yet unclassified' stamp: 'ls 9/2/1998 21:53'!sendMessage: aMessage	"queue a message for sending"	protocolMessagesToSend addLast: aMessage.! !!IRCConnection methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 23:22'!step	self processIO! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCConnection class	instanceVariableNames: ''!!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 22:59'!RPLAway	"someone has marked themselves as away"	^301! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:09'!RPLBanList	""	^367! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:04'!RPLChannelModeIs	""	^324! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:09'!RPLEndOfBanList	""	^368! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:08'!RPLEndOfLinks	""	^365! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:10'!RPLEndOfMotd	"the MOTD has been completely transmitted"	^376! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:08'!RPLEndOfNames	""	^366! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:07'!RPLEndOfWho	"end of responses to a WHO"	^315! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:02'!RPLEndOfWhoIs	""	^318! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:03'!RPLEndOfWhoWas	""	^369! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:05'!RPLInviting	"inform that you are inviting someone to a channel"	^341! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:08'!RPLLinks	""	^364! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:04'!RPLList	"one item in a list command"	^322! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:04'!RPLListEnd	"marks end of listing from a LIST command"	^323! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:04'!RPLListStart	"start of response to a LIST command"	^321! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:45'!RPLMotd	"a line from the MOTD"	^372! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/3/1998 18:17'!RPLMotd2	"secondd version of a line from the MOTD"	^377! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:09'!RPLMotdStart	"a MOTD listing is beginning"	^375! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:08'!RPLNamReply	""	^353! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:05'!RPLNoTopic	"no topic is set for the given channel"	^331! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 22:59'!RPLNowaway	"something to do with AWAY"	^306! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:06'!RPLSummoning	"inform that you are summoning a user"	^342! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:05'!RPLTopic	"topic for the given channel"	^332! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 22:59'!RPLUnaway	"someone has marked themselves as unaway"	^305! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:06'!RPLVersion	"version info for the server"	^351! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:02'!RPLWhoIsIdle	""	^317! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:00'!RPLWhoIsOperator	""	^313! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:00'!RPLWhoIsServer	""	^312! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:00'!RPLWhoIsUser	""	^311! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:07'!RPLWhoReply	"response to a WHO"	^352! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:03'!RPLWhoWasUser	""	^314! !!IRCConnection class methodsFor: 'reply codes' stamp: 'ls 9/2/1998 23:02'!RPLWhoisChannels	""	^319! !!IRCConnection class methodsFor: 'class initialization' stamp: 'ls 9/4/1998 23:31'!initialize	"IRCConnection initialize"	MessageHandlers _ Dictionary new.	#(		372		processMotd:		377		processMotd:		375		processMotdStart:		376		processMotdEnd:		ping	processPing:		join		processJoin:		part	processPart:		privmsg		processPrivmsg:		notice		processPrivmsg:		321		processChannelListStart:		322		processChannelList:		323		processChannelListEnd:		353		processNamReply:	) pairsDo: [ :command  :method |		MessageHandlers at: command asString put: method ].	DefaultServer _ 'us.chatnet.org'.	DefaultPort _ 6667.	DefaultNick _ 'nick'.	DefaultUserName _ 'username'.	DefaultFullName _ 'J. Doe <jdoe@somewhere>'.! !!IRCConnection class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 21:31'!new	^super new initialize! !IRCConnection initialize!Model subclass: #IRCDirectMessagesObserver	instanceVariableNames: 'connection chatText '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 00:12'!chatAreaSelection 	^self chatTextSelection! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 23:52'!chatText	^chatText! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 23:53'!chatTextSelection	^chatText size to: chatText size -1! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 00:01'!initialize: aConnection	connection _ aConnection.	chatText _ Text new.	connection subscribeToDirectMessages: self.! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 00:14'!ircMessageRecieved: aMessage	| sender newLine |	sender _ aMessage sender ifNil: [ 'me' ].	(sender includes: $!!) ifTrue: [ sender _ sender copyFrom: 1 to: (sender indexOf: $!!)-1 ].	newLine _ 		(Text string: sender emphasis: (Array with: TextEmphasis bold)), 		': ', aMessage text, String cr.	chatText _ chatText, newLine.	chatText size > 1000 ifTrue: [		chatText _ chatText copyFrom: (chatText size - 500) to: chatText size ].	self changed: #chatText.! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/5/1998 01:55'!openMorphicView	"open a view for messages sent here"	| win textArea |	win _ SystemWindow new.	win setLabel: 'private messages'.	win model: self.	textArea _ PluggableTextMorph on: self text: #chatText accept: nil readSelection: #chatTextSelection menu: nil.	win addMorph: textArea frame: (0@0 extent: 1@1).	win openInWorld.! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/4/1998 23:53'!openView	^self openMorphicView! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/8/1998 04:55'!release	connection unsubscribeFromDirectMessages: self.	super release.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCDirectMessagesObserver class	instanceVariableNames: ''!!IRCDirectMessagesObserver class methodsFor: 'instance creation' stamp: 'ls 9/5/1998 00:00'!forConnection: aConnection	^super new initialize: aConnection! !!IRCDirectMessagesObserver class methodsFor: 'instance creation' stamp: 'ls 9/5/1998 00:00'!openForConnection: aConnection	^(self forConnection: aConnection) openView! !Object subclass: #IRCMessage	instanceVariableNames: 'sender recipient text '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCMessage commentStamp: 'ls 9/8/1998 21:40' prior: 0!A message on IRC.  It has a sender (usually a username), a recipient (usually a user or channel name), and some text.!!IRCMessage methodsFor: 'private-initialization' stamp: 'ls 9/2/1998 17:14'!initializeSender: sender0  recipient: recipient0  text: text0	sender _ sender0.	recipient _ recipient0.	text _ text0.! !!IRCMessage methodsFor: 'access' stamp: 'ls 9/2/1998 17:15'!recipient	"name the message is destined to"	^recipient! !!IRCMessage methodsFor: 'access' stamp: 'ls 9/2/1998 17:15'!sender	"name of the message's sender"	^sender! !!IRCMessage methodsFor: 'access' stamp: 'ls 9/2/1998 17:15'!text	"message text"	^text! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCMessage class	instanceVariableNames: ''!!IRCMessage class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 17:15'!sender: sender  recipient: recipient  text: text	"create a new message with the given sender, recipient, and text"	^super new initializeSender: sender  recipient: recipient text: text! !Object subclass: #IRCMessagePattern	instanceVariableNames: 'sender recipient '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCMessagePattern commentStamp: 'ls 9/8/1998 21:40' prior: 0!A pattern for matching IRC messages.  Currently one can only match on the sender or the reciever.!!IRCMessagePattern methodsFor: 'private-initialization' stamp: 'ls 9/2/1998 17:41'!sender: sender0  recipient: recipient0	sender _ sender0.	recipient _ recipient0.! !!IRCMessagePattern methodsFor: 'filtering' stamp: 'ls 9/2/1998 17:42'!matches: aMessage	"decide whether the message matches this pattern"	sender ifNotNil: [ sender = aMessage sender ifFalse: [ ^false ] ].	recipient ifNotNil: [ recipient = aMessage recipient ifFalse: [ ^false ] ].	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCMessagePattern class	instanceVariableNames: ''!!IRCMessagePattern class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 18:11'!recipient: recipient	"create a pattern matching messages to the given recipient"	^self sender: nil  recipient: recipient! !!IRCMessagePattern class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 18:10'!sender: sender	"create a pattern for messages from the given sender"	^self sender: sender  recipient: nil! !!IRCMessagePattern class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 18:11'!sender: sender  recipient: recipient	"create a pattern matching messages from the given sender and to the given recipient"	^super new sender: sender  recipient: recipient! !Object subclass: #IRCMessageSet	instanceVariableNames: 'messages '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCMessageSet commentStamp: 'ls 9/8/1998 21:40' prior: 0!holds some subset of the messages coming in from an IRC connection.  subclasses define specific criteria for filtering the messages.!!IRCMessageSet methodsFor: 'as yet unclassified' stamp: 'ls 8/21/1998 10:39'!acceptMessage: ircMessage	"whether the given message should be accepted by this set"	^self subclassResponsibility! !IRCMessageSet subclass: #IRCChannelFilter	instanceVariableNames: 'channelName '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCChannelFilter commentStamp: 'ls 9/8/1998 21:40' prior: 0!a filter for messages sent to a particular channel!SystemWindow subclass: #IRCMorph	instanceVariableNames: 'nick userName fullName server port connection messageCollections consoleText '	classVariableNames: 'DefaultFullName DefaultNick DefaultPort DefaultServer DefaultUserName '	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCMorph commentStamp: 'ls 9/8/1998 21:40' prior: 0!A Morph for interfacing with IRC.!!IRCMorph methodsFor: 'console' stamp: 'ls 9/4/1998 21:15'!addToConsole: aText	consoleText _ consoleText, aText.	consoleText size > 1000 ifTrue: [		consoleText _ consoleText copyFrom: (consoleText size - 500) to: consoleText size ].	self changed: #consoleText.! !!IRCMorph methodsFor: 'console' stamp: 'ls 9/4/1998 21:15'!consoleSelection	^consoleText size to: consoleText size - 1! !!IRCMorph methodsFor: 'console' stamp: 'ls 9/4/1998 21:17'!consoleTextSelection	^consoleText size to: consoleText size - 1! !!IRCMorph methodsFor: 'stepping' stamp: 'ls 9/3/1998 00:19'!step	connection processIO.! !!IRCMorph methodsFor: 'stepping' stamp: 'ls 9/3/1998 00:17'!stepTime	^0! !!IRCMorph methodsFor: 'stepping' stamp: 'ls 9/3/1998 00:19'!wantsSteps	^true! !!IRCMorph methodsFor: 'initialization' stamp: 'ls 9/4/1998 23:13'!initialize 	|  connectButton column channelListButton motdButton consoleView inputPane |	super initialize.	connection _ IRCConnection new.	server _ DefaultServer.	port _ DefaultPort.	nick _ DefaultNick.	userName _ DefaultUserName.	fullName _ DefaultFullName.	self setLabel: 'IRC'.	self extent: 200@100.	column _ AlignmentMorph newColumn.	connectButton _ PluggableButtonMorph		on: self		getState: nil		action: #openConnection.	connectButton label: 'connect to server'.	column addMorphBack: connectButton.	motdButton _ PluggableButtonMorph		on: self		getState: nil		action: #openMotd.	motdButton label: 'view MOTD'.	column addMorphBack: motdButton.	channelListButton _ PluggableButtonMorph		on: self		getState: nil		action: #openChannelList.	channelListButton label: 'channel list'.	column addMorphBack: channelListButton.	self addMorph: column frame: (0@0 extent: 0.4@0.8).	consoleText _ Text new.	consoleView _ PluggableTextMorph on: self  text: #consoleText accept: nil readSelection: #consoleTextSelection menu: nil.	self addMorph: consoleView frame: (0.4@0 extent: 0.6@0.8).	consoleView color: (Color r: 0.937 g: 0.937 b: 0.937).	inputPane _ PluggableTextMorph on: self text: nil accept: #sendCommand:.	self addMorph: inputPane frame: (0@0.8 corner: 1@1).! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/3/1998 17:29'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu  hand: aHandMorph.	aCustomMenu addLine.	aCustomMenu add: 'connect to server' action: #makeConnection.	aCustomMenu addLine.	aCustomMenu add: 'view MOTD' action: #openMotd.	aCustomMenu add: 'view channel list' action: #openChannelList.! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/4/1998 21:12'!connect	connection ifNotNil: [ connection disconnect ].	connection ifNil: [ connection _ IRCConnection new ].	connection connectToServer: server  port: port nick: nick  user: userName  fullName: fullName.	connection subscribeToDirectMessages: self.! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/4/1998 18:10'!delete	super delete.	connection quit.	connection processIO.  "give the QUIT a brief chance to happen"	connection disconnect.! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/4/1998 22:11'!ircMessageRecieved: aMessage	| sender |	sender _ aMessage sender ifNil: [ nick ].	self addToConsole: (		sender asText,		': ',		aMessage text,		String cr).! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/4/1998 21:57'!makeConnection	connection ifNotNil: [ connection disconnect ].	connection ifNil: [ connection _ IRCConnection new ].	connection connectToServer: server  port: port nick: nick  user: userName  fullName: fullName.	connection requestChannelList.    "this is usually necessary, so go ahead and ask for it"! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/4/1998 23:11'!openChannel: name	"open a window for interacting with the given channel"	IRCChannelObserver openForChannel: name  onConnection: connection ! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/4/1998 21:35'!openChannelList	"open a view on the list of channels"	IRCChannelListBrowser openForConnection: connection! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/4/1998 17:57'!openConnection	"open a dialogue for making new connections"	| dialogue textEntry connectButton y yDelta descMorph |	dialogue _ SystemWindow new.	y _ 0.	yDelta _ 0.8 / 5.	#(		'server'		server		'port'		portAsString		'nick'		nick		'username'	userName		'full name'	fullName	) pairsDo: [ :desc :meth |		descMorph _ PluggableButtonMorph on: self getState: nil action: nil.		descMorph label: desc.		dialogue addMorph: descMorph  frame: (0@y extent: 0.3@yDelta).		textEntry _ PluggableTextMorph on: self text: meth accept: (meth, ':') asSymbol.		textEntry extent: 200@20.		dialogue addMorph: textEntry frame: (0.3@y extent: 0.7@yDelta).		y _ y + yDelta.	].	connectButton _ PluggableButtonMorph on: self getState: nil action: #connect.	connectButton label: 'connect'.	dialogue addMorph: connectButton frame: (0@0.8 extent: 1@0.2).	dialogue setLabel: 'connect to an IRC server'.	dialogue openInWorld.! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/3/1998 17:44'!openMotd	connection openMotd! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/8/1998 04:55'!release	connection quit.	connection processIO.  "give the QUIT a brief chance to happen"	connection disconnect.	super release.! !!IRCMorph methodsFor: 'interface' stamp: 'ls 9/3/1998 00:23'!sendCommand: aString	| message |	[ message _ IRCProtocolMessage fromString: aString asString ] ifError: [ ^false ].	connection sendMessage: message.	^true! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/4/1998 18:49'!consoleText	^consoleText! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/3/1998 18:04'!fullName	^fullName! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/3/1998 18:26'!fullName: aString	fullName _ aString asString.	DefaultFullName _ fullName.	^true! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/2/1998 18:23'!nick	^nick ifNil: [ '(not set)' ]! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!nick: aString	nick _ aString asString.	DefaultNick _ nick.	^true! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/2/1998 18:24'!portAsString	^port printString! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!portAsString: aString	port _ [ aString asString asNumber ] ifError: [ :a :b | ^false ].	DefaultPort _ port.	^true! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/2/1998 18:23'!server	^server ifNil: [ '(not set)' ]! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!server: aString	server _ aString asString.	DefaultServer _ server.	^true! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/3/1998 18:04'!userName	^userName! !!IRCMorph methodsFor: 'access' stamp: 'ls 9/3/1998 18:27'!userName: aText	userName _ aText asString.	DefaultUserName _ userName.	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCMorph class	instanceVariableNames: ''!!IRCMorph class methodsFor: 'misc' stamp: 'ls 9/4/1998 18:53'!hasPrototype	"it's not needed here...."	^false! !!IRCMorph class methodsFor: 'initialization' stamp: 'ls 9/3/1998 20:42'!initialize 	"set all the defaults to something reasonable"	DefaultServer _ 'us.chatnet.org'.	DefaultPort _ 6667.	DefaultNick _ 'nick'.	DefaultUserName _ 'username'.	DefaultFullName _ 'J. Doe <jdoe@somewhere>'.! !IRCMorph initialize!Object subclass: #IRCProtocolMessage	instanceVariableNames: 'prefix command arguments '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCProtocolMessage commentStamp: 'ls 9/8/1998 21:40' prior: 0!A low-level IRC message; this is an internal format for what actually goes over the wire.!!IRCProtocolMessage methodsFor: 'IRC commands' stamp: 'ls 9/2/1998 21:57'!quit	self sendMessage: (IRCProtocolMessage command: 'quit')! !!IRCProtocolMessage methodsFor: 'access' stamp: 'ls 9/2/1998 21:49'!arguments	"return the arguments to the command"	^arguments! !!IRCProtocolMessage methodsFor: 'access' stamp: 'ls 9/2/1998 21:48'!command	"return the main command, in lowercase"	^command! !!IRCProtocolMessage methodsFor: 'access' stamp: 'ls 9/2/1998 21:49'!prefix	"return the prefix of the message, or nil if none"	^prefix! !!IRCProtocolMessage methodsFor: 'private-initialization' stamp: 'ls 9/2/1998 21:49'!prefix: aString  command: anotherString  arguments: aCollection	prefix _ aString.	command _ anotherString asLowercase.	arguments _ aCollection.! !!IRCProtocolMessage methodsFor: 'encoding' stamp: 'ls 9/2/1998 21:49'!asString	"encode in the format used for transferral over the network"	^String streamContents: [ :stream |		prefix ifNotNil: [			stream nextPut: $:.			stream nextPutAll: prefix.			stream space ].		stream nextPutAll: command asUppercase.		stream space.		arguments isEmpty ifFalse: [			"print out all but the last argument"			(arguments copyFrom: 1 to: (arguments size - 1)) do: [ :arg |				stream nextPutAll: arg.				stream space ].						"print the last as a trailer, just to be safe"			stream nextPut: $:.			stream nextPutAll: arguments last. ].		stream nextPut: Character cr.		stream nextPut: Character lf. ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IRCProtocolMessage class	instanceVariableNames: ''!!IRCProtocolMessage class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 21:52'!command: anotherString	^self command: anotherString  arguments: Array new! !!IRCProtocolMessage class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 21:52'!command: anotherString  arguments: aCollection	^self prefix: nil  command: anotherString  arguments: aCollection! !!IRCProtocolMessage class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 19:47'!fromString: aString	"parse an IRC message from its network format"	| remainder trailerStart trailer tokens command  arguments prefix idx |	remainder _ aString.	"strip the CRLF"	idx _ remainder indexOf: Character cr.	idx > 0 ifTrue: [ remainder _ remainder copyFrom: 1 to: idx-1 ].	idx _ remainder indexOf: Character lf.	idx > 0 ifTrue: [ remainder _ remainder copyFrom: 1 to: idx-1 ].	"check if there is a trailer"	trailerStart _ remainder indexOf: $: startingAt: 2 ifAbsent: [0].	trailerStart > 0 ifTrue: [		trailer _ remainder copyFrom: trailerStart+1 to: remainder size.		remainder _ remainder copyFrom: 1 to: trailerStart-1 ].	"divide the rest of the string up between spaces"	tokens _ remainder findTokens: ' '.	"the command is the first token..."	command _ tokens removeFirst.	command first = $: ifTrue: [		"...unless it starts with a $:, in which case there is a prefix and the command is the second token"		prefix _ command copyFrom: 2 to: command size.  "copy without the leading :"		command _ tokens removeFirst ].	"the arguments are the remaining tokens, plus the trailer if any"	arguments _ tokens.	trailer ifNotNil: [ arguments _ arguments copyWith: trailer ].	^self prefix: prefix  command: command  arguments: arguments.! !!IRCProtocolMessage class methodsFor: 'instance creation' stamp: 'ls 9/2/1998 19:34'!prefix: aString  command: anotherString  arguments: aCollection	^super new prefix: aString  command: anotherString  arguments: aCollection! !IRCMessageSet subclass: #IRCRecipientFilter	instanceVariableNames: 'recipient '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCRecipientFilter commentStamp: 'ls 9/8/1998 21:40' prior: 0!a filter for messages  sent to a particular user!