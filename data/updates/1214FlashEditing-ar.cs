'From Squeak 2.4b of April 23, 1999 on 20 May 1999 at 3:57:08 pm'!"Change Set:		FlashEditingDate:			20 May 1999Author:			Andreas RaabAdds simple editing capabilities for Flash animations. You can open up a sorter from a flash player and use it for creating smaller chunks of movies out of the biggies. Note that these smaller movies share a lot of state with the original movie so to reduce memory usage."!BorderedMorph subclass: #FlashThumbnailMorph	instanceVariableNames: 'player frameNumber image selected '	classVariableNames: ''	poolDictionaries: ''	category: 'MM-Flash-Morphs'!TransformMorph subclass: #FlashSorterMorph	instanceVariableNames: 'player '	classVariableNames: ''	poolDictionaries: ''	category: 'MM-Flash-Morphs'!!FlashMorph methodsFor: 'copying' stamp: 'ar 5/20/1999 15:34'!copyExtension	"Copy my extensions dictionary"	| ext |	extension ifNil:[^self].	ext _ extension copy.	ext removeOtherProperties.	extension otherProperties ifNotNil:[		extension otherProperties associationsDo:[:assoc|			ext setProperty: assoc key toValue: assoc value copy.		].	].	extension _ ext.! !!FlashMorph methodsFor: 'copying' stamp: 'ar 5/20/1999 15:30'!copyMovieFrom: firstFrame to: lastFrame	| copy |	copy _ self copy.	copy copyExtension.	copy addAllMorphs: 		(self submorphs collect:[:m| m copyMovieFrom: firstFrame to: lastFrame]).	^copy! !!FlashCharacterMorph methodsFor: 'private' stamp: 'ar 5/19/1999 18:58'!isVisibleBetween: firstFrame and: lastFrame	firstFrame to: lastFrame do:[:frameNr| 		(self visibleAtFrame: frameNr) ifTrue:[^true]].	^false! !!FlashCharacterMorph methodsFor: 'copying' stamp: 'ar 5/19/1999 19:07'!copyMovieFrom: firstFrame to: lastFrame	| copy newFrame |	copy _ super copyMovieFrom: firstFrame to: lastFrame.	copy reset.	copy visible: false atFrame: 0.	firstFrame to: lastFrame do:[:i|		newFrame _ i - firstFrame + 1.		copy visible: (self visibleAtFrame: i) atFrame: newFrame.		copy matrix: (self matrixAtFrame: i) atFrame: newFrame.		copy depth: (self depthAtFrame: i) atFrame: newFrame.		copy colorTransform: (self colorTransformAtFrame: i) atFrame: newFrame.	].	^copy! !!FlashSpriteMorph methodsFor: 'copying' stamp: 'ar 5/19/1999 19:11'!copyMovieFrom: firstFrame to: lastFrame	"Note: This is different if sent to a sprite since a sprite contains a *full* animation	and is therefore always completely."	^super copyMovieFrom: 1 to: maxFrames.! !!FlashPlayerMorph methodsFor: 'drawing' stamp: 'ar 5/19/1999 17:57'!imageFormOfSize: extentPoint forFrame: frameNr	"Create an image of the given size for the given frame number"	| thumbTransform form canvas morphsToDraw |	thumbTransform _ MatrixTransform2x3 						transformFromLocal: localBounds 						toGlobal: (0@0 extent: extentPoint).	form _ Form extent: extentPoint depth: 8.	form fillColor: self color.	canvas _ BalloonCanvas on: form.	canvas transformBy: thumbTransform.	canvas aaLevel: (self defaultAALevel ifNil:[1]).	canvas deferred: true.	morphsToDraw _ (submorphs select:[:m|		m stepToFrame: frameNr.		m visible]) sortBy:[:m1 :m2| m1 depth > m2 depth].	morphsToDraw reverseDo:[:m|		m fullDrawOn: canvas].	submorphs do:[:m| m stepToFrame: frameNumber].	canvas flush.	^form! !!FlashPlayerMorph methodsFor: 'stepping' stamp: 'ar 5/19/1999 17:23'!stepToFrameSilently: frame	"Like stepToFrame but without executing any actions or starting sounds.	Note: This method is not intended for fast replay."	| fullRect postDamage |	frame = frameNumber ifTrue:[^self].	frame > loadedFrames ifTrue:[^self].	postDamage _ damageRecorder isNil.	postDamage ifTrue:[damageRecorder _ FlashDamageRecorder new].	activeMorphs _ activeMorphs select:[:any| false].	submorphs do:[:m|		(m isFlashMorph and:[m isFlashCharacter]) ifTrue:[			m stepToFrame: frame.			m visible ifTrue:[activeMorphs add: m].		].	].	frameNumber _ frame.	(postDamage and:[owner notNil]) ifTrue:[		damageRecorder updateIsNeeded ifTrue:[			fullRect _ damageRecorder fullDamageRect: self localBounds.			fullRect _ (self transform localBoundsToGlobal: fullRect).			owner invalidRect: (fullRect insetBy: -1).		].	].	postDamage ifTrue:[damageRecorder _ nil].! !!FlashPlayerMorph methodsFor: 'menu' stamp: 'ar 5/19/1999 16:28'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'open sorter' action: #openSorter.	aCustomMenu add: 'make controls' action: #makeControls.	"aCustomMenu add:'Toggle deferring' action: #toggleDeferred."	"aCustomMenu addLine.	aCustomMenu add: 'make controls' action: #makeControls.	aCustomMenu addLine.	aCustomMenu add: 'Low Quality' action: #drawFastest.	aCustomMenu add: 'Med Quality' action: #drawMedium.	aCustomMenu add: 'High Quality' action: #drawNicest."	"aCustomMenu add: 'make slider' action: #makeSlider."	aCustomMenu addLine.! !!FlashPlayerMorph methodsFor: 'menu' stamp: 'ar 5/19/1999 16:28'!openSorter	(FlashSorterMorph new on: self) openInWindow! !!FlashPlayerMorph methodsFor: 'copying' stamp: 'ar 5/20/1999 12:16'!copyMovieFrom: firstFrame to: lastFrame	"Create a copy of the receiver containing the given frames"	| player delta actionList newMorphs |	delta _ firstFrame - 1.	player _ FlashPlayerMorph new.	player bounds: self bounds.	player localBounds: self localBounds.	player maxFrames: lastFrame - firstFrame + 1.	player loadedFrames: player maxFrames.	player stepTime: stepTime.	player color: self color.	"Copy the sounds, actions and labels"	sounds associationsDo:[:sndAssoc|		(sndAssoc key between: firstFrame and: lastFrame) ifTrue:[			sndAssoc value do:[:snd|				player addSound: snd at: sndAssoc key - delta]]].	actions associationsDo:[:action|		actionList _ action value collect:[:a|			a selector == #gotoFrame: 				ifTrue:[Message selector: a selector argument: (a argument - delta)]				ifFalse:[a]].		(action key between: firstFrame and: lastFrame)			ifTrue:[player addActions: actionList atFrame: action key - delta]].	labels associationsDo:[:label|		(label value between: firstFrame and: lastFrame)			ifTrue:[player addLabel: label key atFrame: label value - delta]].	"Finally, copy the morphs"	newMorphs _ submorphs 					select:[:m| m isVisibleBetween: firstFrame and: lastFrame]					thenCollect:[:m| m copyMovieFrom: firstFrame to: lastFrame].	player addAllMorphs: newMorphs.	player loadInitialFrame.	player stepToFrame: 1.	^player! !!FlashThumbnailMorph methodsFor: 'initialization' stamp: 'ar 5/19/1999 17:29'!initialize	super initialize.	selected _ false.! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 16:01'!frameNumber	^frameNumber! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 16:02'!frameNumber: aNumber	frameNumber = aNumber ifFalse:[		frameNumber _ aNumber.		image _ nil.	].! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 16:01'!image	^image! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 16:01'!image: aForm	image _ aForm.	self changed.! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 17:14'!isSelected	^selected == true! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 17:29'!isSelected: aBoolean	selected == aBoolean ifTrue:[^self].	selected _ aBoolean.	self borderColor: (self isSelected ifTrue:[Color red] ifFalse:[Color black]).! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 16:00'!player	^player! !!FlashThumbnailMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 16:01'!player: aFlashPlayerMorph	player _ aFlashPlayerMorph.! !!FlashThumbnailMorph methodsFor: 'drawing' stamp: 'ar 5/19/1999 16:49'!drawOn: aCanvas	(player == nil or:[frameNumber == nil]) ifTrue:[^super drawOn: aCanvas].false ifTrue:[super drawOn: aCanvas.			^aCanvas text: frameNumber printString bounds: self innerBounds font: nil color: Color red].	image ifNil:[		Cursor wait showWhile:[			image _ player imageFormOfSize: (self extent - (self borderWidth * 2))					 forFrame: frameNumber.			frameNumber printString displayOn: image]].	aCanvas frameRectangle: self bounds width: self borderWidth color: self borderColor.	aCanvas image: image at: self topLeft + self borderWidth.! !!HandMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 18:33'!eventTransform	^eventTransform! !!HandMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 18:33'!eventTransform: aTransform	"Note: This is ugly but there is no choice other than hacking the transform if you want to have continous scrolling during a #mouseStillDown: operation."	eventTransform _ aTransform.! !!MorphExtension methodsFor: 'other' stamp: 'ar 5/20/1999 15:33'!removeOtherProperties	"Remove the 'other' properties"	otherProperties _ nil.! !!MorphicTransform methodsFor: 'printing' stamp: 'ar 5/19/1999 18:21'!printOn: aStream	super printOn: aStream.	aStream nextPut:$(;		nextPutAll:'angle = '; print: angle;		nextPutAll:'; scale = '; print: scale;		nextPutAll:'; offset = '; print: offset;		nextPut:$).! !!ScrollPane methodsFor: 'access' stamp: 'ar 5/19/1999 18:06'!scroller: aTransformMorph	scroller ifNotNil:[scroller delete].	scroller _ aTransformMorph.	self addMorph: scroller.	self resizeScroller.! !!TransformMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 18:04'!transform	^transform! !!TransformMorph methodsFor: 'accessing' stamp: 'ar 5/19/1999 18:04'!transform: aTransform	transform _ aTransform.! !!FlashSorterMorph methodsFor: 'initialization' stamp: 'ar 5/19/1999 17:27'!addThumbnails: extentPoint	| m morphList handler |	handler _ nil.	'Preparing thumbnails' displayProgressAt: Sensor cursorPoint		from: 1 to: player maxFrames during:[:bar|			morphList _ Array new: player maxFrames.			1 to: player maxFrames do:[:i|				bar value: i.				m _ FlashThumbnailMorph new.				m extent: extentPoint.				m player: player.				m frameNumber: i.				handler isNil ifTrue:[					m on: #mouseDown send: #mouseDown:onItem: to: self.					m on: #mouseStillDown send: #mouseStillDown:onItem: to: self.					m on: #mouseUp send: #mouseUp:onItem: to: self.					handler _ m eventHandler.				] ifFalse:[m eventHandler: handler].				morphList at: i put: m].		self addAllMorphs: morphList.		self doLayout.	].! !!FlashSorterMorph methodsFor: 'initialization' stamp: 'ar 5/19/1999 17:06'!initialize	super initialize.	self color: Color transparent.! !!FlashSorterMorph methodsFor: 'initialization' stamp: 'ar 5/19/1999 17:59'!makeControls	| b r |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2.	r _ AlignmentMorph newRow.	r hResizing: #spaceFill; vResizing: #spaceFill; inset: 2.	r addMorphBack: (b fullCopy label: 'Make movie';		actionSelector: #makeMovie).	^r! !!FlashSorterMorph methodsFor: 'initialization' stamp: 'ar 5/19/1999 17:10'!on: aFlashPlayerMorph	| w h |	player _ aFlashPlayerMorph.	w _ player bounds width.	h _ player bounds height.	w > h ifTrue:[		h _ h * 50 // w.		w _ 50.	] ifFalse:[		w _ w * 50 // h.		h _ 50.	].	self addThumbnails: w@h.! !!FlashSorterMorph methodsFor: 'initialization' stamp: 'ar 5/19/1999 17:54'!openInWindow	| window wrapper |	window _ SystemWindow new.	wrapper _ self makeControls.	window addMorph: wrapper frame: (0@0 extent: 1@0.1).	wrapper _ ScrollPane new.	wrapper scroller: self.	window addMorph: wrapper frame: (0 @ 0.1 extent: 1 @ 1).	self bounds: owner bounds.	self doLayout.	window openInWorld.! !!FlashSorterMorph methodsFor: 'layout' stamp: 'ar 5/19/1999 16:47'!doLayout	"Do the layout of the child morphs"	| x y maxHeight w |	w _ self bounds width.	x _ 0.	y _ 0.	maxHeight _ 0.	submorphs do:[:m|		x + m bounds width > w ifTrue:[			"Wrap the guy on the next line"			x _ 0.			y _ y + maxHeight.			maxHeight _ 0].		m position: x@y.		x _ x + m bounds width.		maxHeight _ maxHeight max: m bounds height].! !!FlashSorterMorph methodsFor: 'layout' stamp: 'ar 5/19/1999 16:25'!extent: extentPoint	super extent: extentPoint.	self doLayout.! !!FlashSorterMorph methodsFor: 'interaction' stamp: 'ar 5/19/1999 17:35'!mouseDown: event onItem: aMorph	submorphs do:[:m|		m == aMorph ifFalse:[m isSelected: false]].	aMorph isSelected: true.! !!FlashSorterMorph methodsFor: 'interaction' stamp: 'ar 5/19/1999 19:39'!mouseStillDown: evt onItem: aMorph	| pt index m yOffset |	submorphs do:[:mm|		mm == aMorph ifFalse:[mm isSelected: false]].	pt _ evt cursorPoint.	yOffset _ self offset y.	index _ aMorph frameNumber. "What a fake hack@!!"	pt y - yOffset < 0 ifTrue:[		owner scrollBy: 0@owner scrollDeltaHeight.		evt hand eventTransform: (aMorph transformFrom: evt hand)].	pt y - yOffset > self extent y ifTrue:[		owner scrollBy: 0@owner scrollDeltaHeight negated.		evt hand eventTransform: (aMorph transformFrom: evt hand)].	(aMorph bounds containsPoint: pt) ifTrue:[^self].	(pt y > aMorph bottom or:[pt x > aMorph right]) ifTrue:[		"Select all morphs forward."		index+1 to: submorphs size do:[:i|			m _ submorphs at: i.			m isSelected: aMorph isSelected.			(m bounds containsPoint: pt) ifTrue:[^self]. "Done"		].		^self].	"Select morphs backwards"	index-1 to: 1 by: -1 do:[:i|		m _ submorphs at: i.		m isSelected: aMorph isSelected.		(m bounds containsPoint: pt) ifTrue:[^self].	].! !!FlashSorterMorph methodsFor: 'interaction' stamp: 'ar 5/19/1999 17:30'!mouseUp: evt onItem: aMorph	| pt |	pt _ evt cursorPoint.	(aMorph bounds containsPoint: pt) ifTrue:[		player stepToFrameSilently: aMorph frameNumber.		^self].! !!FlashSorterMorph methodsFor: 'editing' stamp: 'ar 5/19/1999 19:38'!makeMovie	"Take all the currently selected frames and make a new movie out of it"	| firstSelection lastSelection |	firstSelection _  submorphs size + 1.	lastSelection _ 0.	submorphs doWithIndex:[:m :index|		m isSelected ifTrue:[			firstSelection _ firstSelection min: index.			lastSelection _ lastSelection max: index.		].	].	firstSelection > lastSelection		ifTrue:[^self inform:'You have to select the frames first'].	(player copyMovieFrom: firstSelection to: lastSelection) open! !