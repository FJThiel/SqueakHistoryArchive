'From Squeak 2.4c of May 10, 1999 on 16 July 1999 at 1:10:38 pm'!"Change Set:		misc-tkKUDate:			16 July 1999Author:			Ted KaehlerFixes bug when you Cancel after choosing 'save morph at URL'.Refrains from putting 'recompiling...' in the Transcript if the class has no methods.Another minor fix."!!ClassDescription methodsFor: 'initialize-release' stamp: 'tk 7/15/1999 16:24'!validateFrom: oldClass in: environ instanceVariableNames: invalidFields methods: invalidMethods wasPresent: wasPresent	"Recompile the receiver, a class, and redefine its subclasses if necessary.	The parameter invalidFields is no longer really used"	| newSub invalidSubMethods |	oldClass becomeUncompact.  "Its about to be abandoned"	invalidMethods "& self hasMethods"	"other isolated projects may have methods!!"		ifTrue: 			[self hasMethods ifTrue: [Transcript show: 'recompiling ' , self name , '...'].			self compileAllFrom: oldClass.			Transcript show: ' done'; cr].	invalidSubMethods _ invalidMethods | (self instSize ~= oldClass instSize).	self == oldClass		ifTrue: [invalidSubMethods ifFalse: [^self]]		ifFalse: [wasPresent ifTrue: [self updateInstancesFrom: oldClass]].	oldClass subclasses do: 		[:sub | 		newSub _ sub copyForValidation.		newSub			subclassOf: self			oldClass: sub			instanceVariableNames: sub instVarNames			variable: sub isVariable			words: sub isBytes not			pointers: sub isBits not			weak: sub isWeak			ifBad: [self error: 'terrible problem in recompiling subclasses!!'].		newSub			validateFrom: sub			in: environ			instanceVariableNames: invalidFields			methods: invalidSubMethods			wasPresent: true]	"if false, no subclasses, does not get here"! !!Morph methodsFor: 'fileIn/out' stamp: 'tk 7/16/1999 13:03'!saveOnURL	"Ask the user for a url and save myself on a SmartReferenceStream file.  Writes out the version and class structure.  The file is fileIn-able.  UniClasses will be filed out."	| um pg |	(pg _ self saveOnURLbasic) == #cancel ifTrue: [^ self].	um _ URLMorph newForURL: pg url.	um setURL: pg url page: pg.	pg isContentsInMemory ifTrue: [pg computeThumbnail].	um isBookmark: true.	um removeAllMorphs.	um color: Color transparent.	self primaryHand attachMorph: um.! !!Morph methodsFor: 'fileIn/out' stamp: 'tk 7/16/1999 13:02'!saveOnURLbasic	"Ask the user for a url and save myself on a SmartReferenceStream file.  Writes out the version and class structure.  The file is fileIn-able.  UniClasses will be filed out."	| url pg stamp pol |	(pg _ self valueOfProperty: #SqueakPage) ifNil: [pg _ SqueakPage new]		ifNotNil: [pg contentsMorph ~~ self ifTrue: [				self inform: 'morph''s SqueakPage property is out of date'.				pg _ SqueakPage new]].	(url _ pg url) ifNil: [		url _ ServerDirectory defaultStemUrl, '1.sp'.	"A new legal place"		url _ FillInTheBlank 				request: 'url of a place to store this object.Must begin with file:// or ftp://' 				initialAnswer: url.		url size == 0 ifTrue: [^ #cancel]].	stamp _ Utilities authorInitialsPerSe ifNil: ['*'].	pg saveMorph: self author: stamp.	SqueakPageCache atURL: url put: pg.	"setProperty: #SqueakPage"	(pol _ pg policy) ifNil: [pol _ #neverWrite].	pg policy: #now; dirty: true.  pg write.	"force the write"	pg policy: pol.	^ pg! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'tk 7/16/1999 13:06'!byExample	^ 'Type a fragment of a selector in the top pane.  Accept it.	Or, use an example to find a method in the system.  Type receiver, args, and answer in the top pane with periods between the items.  3. 4. 7Or, in this pane, use examples to find a method in the system.  Select the line of code and choose "print it".  	MethodFinder methodFor: #( (4 3) 7  (0 5) 5  (5 5) 10).This will discover (data1 + data2)You supply inputs and answers and the system will find the method.  Each inner array is a list of inputs.  It contains the receiver and zero or more arguments.  For Booleans and any computed arguments, use brace notation.	MethodFinder methodFor: { {1. 3}. true.  {20. 10}. false}.This will discover the expression (data1 < data2)	MethodFinder methodFor: { {''29 Apr 1999'' asDate}. ''Thursday''.  		{''30 Apr 1999'' asDate}. ''Friday'' }.Will discover the expression (data1 weekday)Receiver and arguments do not have to be in the right order.  See MethodFinder.verify for more examples.'! !