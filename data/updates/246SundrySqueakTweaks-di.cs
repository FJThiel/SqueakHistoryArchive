'From Squeak 2.1 of June 30, 1998 on 11 September 1998 at 4:40:35 pm'!"Change Set:		SundrySqueakTweaksDate:			8 September 1998Author:			Dan IngallsA number of fixes and improvements from various authors...Fixed Context printing when method is nil (Dan Ingalls)Fixed StandardSystemView to release the pointer from labelText to the Display (Dan Ingalls)Fixed Integer>>quo: so it doesn't ask highBit of a negative number.  (Leandro Caniglia)Fixed two bugs in the SystemTracer.  (reported by Tim Rowledge)Defines log, analogously to ln, in Number.  (requested by Michael Donegan)Tests for presence of sourceForm before trying to map colors in BitBlt>>setDestForm:...(Dan I)Fixed missing release of model in FillInTheBlankMorph. (Dan Ingalls)Enables accept-on-CR for FillInTheBlankMorphs. (Dan Ingalls)Amended the wording of the ChangeSet template for postscripts. (Dan I)Implemented DosFileDirectory>>fullNameFor:. (Andreas Raab)Repaired the definition of Point>>dotProduct:. (Andreas Raab)"!TextMorph subclass: #TextMorphForEditView	instanceVariableNames: 'editView acceptOnCR '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Text Support'!!BitBlt methodsFor: 'private' stamp: 'di 9/11/1998 13:07'!setDestForm: df sourceForm: sf fillColor: hf combinationRule: cr destOrigin: destOrigin sourceOrigin: sourceOrigin extent: extent clipRect: clipRect	| aPoint |	destForm _ df.	sourceForm _ sf.	self fillColor: hf.	"sets halftoneForm"	combinationRule _ cr.	destX _ destOrigin x.	destY _ destOrigin y.	sourceX _ sourceOrigin x.	sourceY _ sourceOrigin y.	width _ extent x.	height _ extent y.	aPoint _ clipRect origin.	clipX _ aPoint x.	clipY _ aPoint y.	aPoint _ clipRect corner.	clipWidth _ aPoint x - clipX.	clipHeight _ aPoint y - clipY.	sourceForm == nil ifFalse:		[colorMap _ sourceForm colormapIfNeededForDepth: destForm depth]! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'di 9/11/1998 16:13'!assurePostscriptExists	"Make sure there is a StringHolder holding the postscript.  "	"NOTE: FileIn recognizes the postscript by the line with Postscript: on it"	postscript == nil ifTrue: [postscript _ StringHolder new contents: '"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."']! !!ContextPart methodsFor: 'printing' stamp: 'di 9/10/1998 09:19'!printOn: aStream 	| selector class |	self method == nil ifTrue: [^ super printOn: aStream].	selector _ 		(class _ self receiver class) 			selectorAtMethod: self method 			setClass: [:mclass].	selector == #?		ifTrue: 			[aStream nextPut: $?; print: self method who.			^self].	aStream nextPutAll: class name.	mclass == class 		ifFalse: 			[aStream nextPut: $(.			aStream nextPutAll: mclass name.			aStream nextPut: $)].	aStream nextPutAll: '>>'.	aStream nextPutAll: selector! !!DosFileDirectory methodsFor: 'all' stamp: 'di 9/11/1998 16:15'!fullNameFor: fileName	"Return the fully-qualified path name for the given file. Correct syntax errors in the file name."	FileDirectory splitName: fileName to: [:path :localName |		^ (path isEmpty ifFalse: [path] ifTrue: [			pathName = self pathNameDelimiter asString ifTrue: [''] ifFalse: [pathName]]),				self pathNameDelimiter asString, (self checkName: localName fixErrors: true)].! !!FillInTheBlank class methodsFor: 'instance creation' stamp: 'di 9/11/1998 15:01'!request: queryString	"Create an instance of me whose question is queryString. Invoke it centered at the cursor, and answer the string the user accepts. Answer the empty string if the user cancels."	"FillInTheBlankMorph request: queryString"	^ self request: queryString		initialAnswer: ''		centerAt: Sensor cursorPoint.! !!FillInTheBlank class methodsFor: 'instance creation' stamp: 'di 9/11/1998 15:02'!request: queryString initialAnswer: defaultAnswer 	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts. Answer the empty string if the user cancels."	"FillInTheBlank		request: 'What is your favorite color?'		initialAnswer: 'red, no blue. Ahhh!!'"	^ self request: queryString		initialAnswer: defaultAnswer		centerAt: Sensor cursorPoint.! !!FillInTheBlank class methodsFor: 'instance creation' stamp: 'di 9/11/1998 15:02'!request: queryString initialAnswer: defaultAnswer centerAt: aPoint	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts. Answer the empty string if the user cancels."	"FillInTheBlank request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: Display center"	| model fillInView savedArea |	World ifNotNil:		[^ FillInTheBlankMorph			request: queryString			initialAnswer: defaultAnswer			centerAt: aPoint].	model _ self new initialize.	model contents: defaultAnswer.	fillInView _		(Smalltalk at: #FillInTheBlankView)			on: model			message: queryString			centerAt: aPoint.	savedArea _ Form fromDisplay: fillInView displayBox.	fillInView display.	defaultAnswer isEmpty		ifFalse: [fillInView lastSubView controller selectFrom: 1 to: defaultAnswer size].	(fillInView lastSubView containsPoint: Sensor cursorPoint)		ifFalse: [fillInView lastSubView controller centerCursorInView].	fillInView controller startUp.	fillInView release.	savedArea displayOn: Display at: fillInView viewport topLeft.	^ model contents! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'di 9/11/1998 15:47'!setQuery: queryString initialAnswer: initialAnswer answerHeight: answerHeight	response _ initialAnswer.	done _ false.	self removeAllMorphs.	self extent: 200@70.	self addQuery: queryString.	self width: (self width max: self firstSubmorph width + (2 * borderWidth)).	self addLine.	textPane _ PluggableTextMorphAcceptOnCR on: self		text: #response		accept: #response:		readSelection: #selectionInterval		menu: #codePaneMenu:shifted:.	textPane hasUnacceptedEdits: true.	textPane retractableOrNot.	textPane acceptOnCR: true.	textPane extent: self innerBounds width@answerHeight.	textPane position: self innerBounds left@self lastSubmorph bottom.	self addMorphBack: textPane.	self addLine.	self addButtonRow.	self height: (self height max: (self lastSubmorph bottom - self top) + borderWidth).! !!Form methodsFor: 'filling' stamp: 'di 9/11/1998 16:25'!convexShapeFill: aMask 	"Fill the interior of the outtermost outlined region in the receiver.  The outlined region must not be concave by more than 90 degrees.  Typically aMask is Color black, to produce a solid fill. then the resulting form is used with fillShape: to paint a solid color.  See also anyShapeFill"	| destForm tempForm |	destForm _ Form extent: self extent.  destForm fillBlack.	tempForm _ Form extent: self extent.	(0@0) fourNeighbors do:		[:dir |  "Smear self in all 4 directions, and AND the result"		self displayOn: tempForm at: (0@0) - self offset.		tempForm smear: dir distance: (dir dotProduct: tempForm extent) abs.		tempForm displayOn: destForm at: 0@0			clippingBox: destForm boundingBox			rule: Form and fillColor: nil].	destForm displayOn: self at: 0@0		clippingBox: self boundingBox		rule: Form over fillColor: aMask! !!Number methodsFor: 'mathematical functions' stamp: 'di 9/8/1998 17:10'!log	"Answer the base-10 log of the receiver."	^self asFloat log! !!Integer methodsFor: 'arithmetic' stamp: 'LC 9/8/1998 18:44'!quo: aNumber 	"Refer to the comment in Number quo: "	| ng quo |	aNumber isInteger		ifTrue: 			[ng _ self negative == aNumber negative == false.			quo _ (self digitDiv:				(aNumber class == SmallInteger					ifTrue: [aNumber abs]					ifFalse: [aNumber])				neg: ng) at: 1.			^ quo normalize]		ifFalse: [^ (aNumber adaptInteger: self) quo: aNumber adaptToInteger]! !!PluggableTextMorph methodsFor: 'initialization' stamp: 'di 9/11/1998 15:46'!acceptOnCR: trueOrFalse	textMorph acceptOnCR: trueOrFalse! !!Point methodsFor: 'point functions' stamp: 'di 9/11/1998 16:22'!dotProduct: aPoint 	"Answer a number that is the dot product of the receiver and the 	argument, aPoint. That is, the two points are multipled and the 	coordinates of the result summed."	^ (x * aPoint x) + (y * aPoint y)! !!StandardSystemView methodsFor: 'displaying' stamp: 'di 9/10/1998 09:43'!displayLabelText	"The label goes in the center of the window"	| labelRect |	labelText foregroundColor: self foregroundColor			backgroundColor: self labelColor.	labelRect _ self labelTextRegion.	Display fill: (labelRect expandBy: 3@0) fillColor: self labelColor.	labelText displayOn: Display at: labelRect topLeft clippingBox: labelRect			rule: labelText rule fillColor: labelText fillColor.	labelText destinationForm: nil! !!SystemTracer methodsFor: 'initialization' stamp: 'di 9/8/1998 16:56'!initCompactClasses	| c |	c _ Array new: 31.		"These classes have a short name (their index in this table.  It is not their oop.)	Thus their instances can use just a single word as their header in memory."	c at: 1 put: CompiledMethod.  c at: 2 put: Symbol. c at: 3 put: Array.	c at: 4 put: Float.  c at: 5 put: LargePositiveInteger.  c at: 6 put: String.	c at: 7 put: MethodDictionary.  c at: 8 put: Association.  c at: 9 put: Point.	c at: 10 put: Rectangle.  c at: 11 put: ClassOrganizer.  c at: 12 put: TextLineInterval.	c at: 13 put: BlockContext.  c at: 14 put: MethodContext.  c at: 15 put: PseudoContext.	compactClasses _ c.	"Leave 16 to 31 for user defined compact classes."	"Attempt to correctly write contextCache image.."	"compactClasses _ Smalltalk compactClassesArray"! !!SystemTracer methodsFor: 'initialization' stamp: 'di 9/8/1998 16:55'!writeFileHeader	file position: 0.  "info in header page"	self write4Bytes: ($A asciiValue *100) + 2.  "version number:  6500+2"	self write4Bytes: imageHeaderSize.  "File offset (bytes) of start of data"							"same as base address (byte) of first object"	self write4Bytes: maxOop.  "Length of data segment in words"	self write4Bytes: 0.		"what you have to add to an oop to get"							"an offset in the data portion of this file"	self write4Bytes: (self mapAt: specialObjects).	self write4Bytes: (hashGenerator next * 16rFFF asFloat) asInteger.  "next hash"	self write4Bytes: Display width * 16r10000 + Display height.  "display size"	file position > imageHeaderSize ifTrue: [self error: 'Header ran over allotted length'].	file padTo: imageHeaderSize put: 0.  "Pad header page"	"On Mac, set the file type and creator (noop on other platforms)"	FileDirectory default		setMacFileNamed: file fullName		type: 'STim'		creator: 'FAST'.	file close.! !!TextMorphForEditView methodsFor: 'all' stamp: 'di 9/11/1998 15:42'!acceptOnCR: trueOrFalse	acceptOnCR _ trueOrFalse! !!TextMorphForEditView methodsFor: 'all' stamp: 'di 9/11/1998 15:43'!initialize	super initialize.	acceptOnCR _ false! !!TextMorphForEditView methodsFor: 'all' stamp: 'di 9/11/1998 15:49'!keyStroke: evt	| view |	self editor model: editView model.  "For evaluateSelection"	view _ editView.  "Copy into temp for case of a self-mutating doit"	(acceptOnCR and: [evt keyCharacter = Character cr])		ifTrue: [^ self editor accept].	super keyStroke: evt.	view scrollSelectionIntoView! !"Postscript:Update existing instances..."TextMorphForEditView allInstancesDo: [:m | m acceptOnCR: false]!