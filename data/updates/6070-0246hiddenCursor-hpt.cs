'From Squeak3.7beta of ''1 April 2004'' [latest update: #5878] on 13 April 2004 at 12:14:02 pm'!"Change Set:		HiddenCursorFix-hptDate:			13 April 2004Author:			Hernan TylimThis changeset is actually 3 changesets that were sent independently on the list but which address the same issue so I took the liberty to join the 3 on this one so it can be harvested more easy. The changesets are MenuReturnKBFocus-klc.2.cs FITBMReturnKbFocus-hpt.1.cs and ParagraphFocusInit-hpt.1.cs. Below are their respective preambles:Change Set:		MenuReturnKBFocus-klcDate:			11 April 2004Author:			Ken Causeyv2:  This adds more or less the same fix to another case of this problem.  There's still a case that I haven't found related to using shift-esc to bring up the world menu.  Still looking...This is a possible fix for the problem reported in BFAV ID 21797 'Hidden text cursor'.  Basically I diagnose the problem as a case of the menu stealing the keyboard focus and then not properly returning it.  This seems to fix the specific case that Hernan reported but may miss other cases.  I also wonder if the simple check for non-nil for the original focus holder is enough in all cases.Change Set:		FITBMReturnKBFocus-hptDate:			13 April 2004Author:			Hernan TylimThis changeset should be filed in with MenuReturnKBFocus-klc. They are indepent but they address different parts of the same bug reported in [BUG] Hidden text cursor.The only change on this changeset is on FillInTheBlankMorph>>getUserResponse where adds 2 lines. One to remember the keyboardFocus holder before it get sets to the FITBM and another line that restore the focus after the FITBM do its job.Change Set:		ParagraphFocusInit-hptDate:			11 April 2004Author:			Hernan TylimOn TextMorphSelectionFix-rr which is on the image since update 5849 the textmorph selection gets colored differently if it has keyboard focus or not. When the TextMorph creates a NewParagraph instance it wasn't setting the focused property (see senders of NewParagraph>>focused) so new paragraph were always colored as it wasn't focused even if it had focus.To try this bug write on any browser or workspace and hit cmd+l (cancel). When you do that the textmorph will show the paragraph previous your writing unfocused but it has keyboard focus.This change set just adds the following like to the end of TextMorph>>paragraph:paragraph focused: (self currentHand keyboardFocus == self)"!!FillInTheBlankMorph methodsFor: 'invoking' stamp: 'hpt 4/13/2004 11:36'!getUserResponse	"Wait for the user to accept or cancel, and answer the result string. Answers the empty string if the user cancels."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	| w originalFocusHolder |	w _ self world.	w ifNil: [^ response].	done _ false.	originalFocusHolder _ w activeHand keyboardFocus.	w activeHand newKeyboardFocus: textPane.	[done] whileFalse: [w doOneCycle].	w activeHand newKeyboardFocus: originalFocusHolder.	self delete.	w doOneCycle.	^ response! !!MenuMorph methodsFor: 'modal control' stamp: 'KLC 4/11/2004 09:06'!invokeModalAt: aPoint in: aWorld allowKeyboard: aBoolean	"Invoke this menu and don't return until the user has chosen a value.	See senders of this method for finding out how to use modal menu morphs."	| w originalFocusHolder |	originalFocusHolder _ aWorld primaryHand keyboardFocus.	self popUpAt: aPoint forHand: aWorld primaryHand in: aWorld allowKeyboard: aBoolean.	self isModalInvokationDone: false.	w _ aWorld outermostWorldMorph. "containing hand"	[self isInWorld & self isModalInvokationDone not] whileTrue: [w doOneSubCycle].	self delete.	originalFocusHolder ifNotNil: [aWorld primaryHand newKeyboardFocus: originalFocusHolder].	^ self modalSelection! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'KLC 4/11/2004 10:56'!invokeAt: aPoint in: aWorld allowKeyboard: aBoolean	"Add this menu to the given world centered at the given point. Wait for the user to make a selection and answer it. The selection value returned is an integer in keeping with PopUpMenu, if the menu is converted from an MVC-style menu."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop." 	| w originalFocusHolder |	self flag: #bob.		"is <aPoint> global or local?"	self flag: #arNote.	"<aPoint> is local to aWorld"	originalFocusHolder _ aWorld primaryHand keyboardFocus.	self popUpAt: aPoint forHand: aWorld primaryHand in: aWorld allowKeyboard: aBoolean.	done _ false.	w _ aWorld outermostWorldMorph. "containing hand"	[self isInWorld & done not] whileTrue: [w doOneSubCycle].	self delete.	originalFocusHolder ifNotNil: [aWorld primaryHand newKeyboardFocus: originalFocusHolder].	^ mvcSelection! !!TextMorph methodsFor: 'private' stamp: 'hpt 4/11/2004 20:35'!paragraph	"Paragraph instantiation is lazy -- create it only when needed"	paragraph ifNotNil: [^ paragraph].self setProperty: #CreatingParagraph toValue: true.	self setDefaultContentsIfNil.	"...Code here to recreate the paragraph..."	paragraph _ (self paragraphClass new textOwner: self owner).	paragraph wantsColumnBreaks: successor notNil.	paragraph		compose: text		style: textStyle copy		from: self startingIndex		in: self container.	wrapFlag ifFalse:		["Was given huge container at first... now adjust"		paragraph adjustRightX].	paragraph focused: (self currentHand keyboardFocus == self).	self fit.self removeProperty: #CreatingParagraph.	^ paragraph! !