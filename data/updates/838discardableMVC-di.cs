'From Squeak 2.3 of January 14, 1999 on 19 April 1999 at 11:35:47 am'!"Change Set:		DiscardableMVCDate:			16 April 1999Author:			Dan IngallsThis changeSet enables deletion of essentially all vestiges of the ST-80 MVC viewing framework.The major problems addressed are	PopUpMenus no longer invoke class Paragraph before conversion to morphic.	Numerous uses of Paragraph have been redirected to DisplayText.	DisplayText uses TextMorph in place of Paragraph in morphic worlds.	A mechanism is provided for deleting MVC projects and retaining any others.	ParagraphEditor and ScreenController are retained as keepers of utility methods.To discard MVC, execute Smalltalk discardMVC."!Object subclass: #NameOfClass	instanceVariableNames: 'instVarName1 instVarName2 '	classVariableNames: 'ClassVarName1 ClassVarName2 '	poolDictionaries: ''	category: 'Interface-Changes'!DisplayObject subclass: #Path	instanceVariableNames: 'form collectionOfPoints '	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Paths'!ReadWriteStream subclass: #Transcripter	instanceVariableNames: 'frame para '	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Streams'!!AbstractSound class methodsFor: 'examples' stamp: 'di 4/13/1999 13:53'!testFMInteractively	"Experiment with different settings of the FM modulation and multiplier settings interactively by moving the mouse. The top-left corner of the screen is 0 for both parameters. Stop when the mouse is pressed."	"AbstractSound testFMInteractively"	| s mousePt lastVal status mod ratio |	SoundPlayer startPlayerProcessBufferSize: 1100 rate: 11025 stereo: false.	s _ FMSound pitch: 440.0 dur: 200.0 loudness: 0.2.	SoundPlayer playSound: s.	lastVal _ nil.	[Sensor anyButtonPressed] whileFalse: [		mousePt _ Sensor cursorPoint.		mousePt ~= lastVal ifTrue: [			mod _ mousePt x asFloat / 20.0.			ratio _ mousePt y asFloat / 20.0.			s modulation: mod ratio: ratio.			lastVal _ mousePt.			status _'mod: ', mod printString, 'ratio: ', ratio printString.			status displayOn: Display at: 10@10]].	SoundPlayer shutDown.! !!Celeste methodsFor: 'other' stamp: 'di 4/17/1999 00:31'!perform: selector orSendTo: otherTarget	"Celeste handles all menu commands."	selector = #format ifTrue: [^ self perform: selector].	((#(yellowButtonActivity shiftedYellowButtonActivity) includes: selector) or:		[(ParagraphEditor yellowButtonMessages includes: selector) or:		[ParagraphEditor shiftedYellowButtonMessages includes: selector]])			ifTrue: [otherTarget perform: selector]			ifFalse: [self perform: selector].! !!Celeste class methodsFor: 'instance creation' stamp: 'di 4/13/1999 14:45'!buildButtonsFor: model 	"Answer a collection of handy buttons for the Celeste user interface."	| buttonViewClass buttons b |	Smalltalk isMorphic		ifTrue: [buttonViewClass _ PluggableButtonMorph]		ifFalse: [buttonViewClass _ PluggableButtonView].	buttons _ OrderedCollection new.	b _ buttonViewClass on: (Switch new onAction: [model subjectFilterOn];				 offAction: [model subjectFilterOff]).	b label: 'Subj. F.';		borderWidth: 1.	buttons add: b.	b _ buttonViewClass on: (Switch new onAction: [model fromFilterOn];				 offAction: [model fromFilterOff]).	b label: 'From F.';		borderWidth: 1.	buttons add: b.	b _ buttonViewClass				on: model				getState: #isCustomFilterOn				action: #customFilterOn.	b label: 'Custom F.';		borderWidth: 1.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model compose]);			 action: #turnOn;			 label: 'New';			 borderWidth: 1.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model reply]);			 action: #turnOn;			 label: 'Reply';			 borderWidth: 1.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model forward]);			 action: #turnOn;			 label: 'Forward';			 borderWidth: 1.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model moveAgain]);			 action: #turnOn;			 label: 'Move Again';			 borderWidth: 1.	buttons add: b.	b _ buttonViewClass new model: (Button new onAction: [model deleteMessage]);			 action: #turnOn;			 label: 'Delete';			 borderWidth: 1.	buttons add: b.	^ buttons! !!Celeste class methodsFor: 'sending' stamp: 'di 4/13/1999 14:44'!addMVCMailSenderButtons: topView textView: mailTextView	"Add some handy buttons to the mail sender window."	| sendButton sendAndKeepButton doneButton |	sendButton _		PluggableButtonView new			model: (Button new onAction:					[mailTextView controller accept.					 mailTextView controller controlTerminate.					 Celeste postMessage: mailTextView model contents]);			action: #turnOn;			label: 'Send';			window: (0@0 extent: 34@10);			borderWidth: 1.	sendAndKeepButton _		PluggableButtonView new			model: (Button new onAction:					[mailTextView controller accept.					 mailTextView controller controlTerminate.					 Celeste postMessage: mailTextView model contents.					 Celeste addMessageToInbox: mailTextView model contents]);			action: #turnOn;			label: 'Send&Keep';			window: (0@0 extent: 33@10);			borderWidth: 1.	doneButton _		PluggableButtonView new			model: (Button new onAction: [topView controller close]);			action: #turnOn;			label: 'Done';			window: (0@0 extent: 33@10);			borderWidth: 1.	topView		addSubView: sendButton above: topView firstSubView;		addSubView: sendAndKeepButton toRightOf: sendButton;		addSubView: doneButton toRightOf: sendAndKeepButton.! !!Color class methodsFor: 'color from user' stamp: 'di 4/13/1999 14:30'!fromUser	"Displays a color palette of colors, waits for a mouse click, and returns the selected color. Any pixel on the Display can be chosen, not just those in the color palette."	"Note: Since the color chart is cached, you may need to do 'ColorChart _ nil' after changing the oldColorPaletteForDepth:extent: method."	"Color fromUser"	| d startPt save tr oldColor c here s |	d _ Display depth.	((ColorChart == nil) or: [ColorChart depth ~= Display depth]) 		ifTrue: [ColorChart _ self oldColorPaletteForDepth: d extent: (2 * 144)@80].	Sensor cursorPoint y < Display center y 		ifTrue: [startPt _ 0@(Display boundingBox bottom - ColorChart height)]		ifFalse: [startPt _ 0@0].	save _ Form fromDisplay: (startPt extent: ColorChart extent).	ColorChart displayAt: startPt.	tr _ ColorChart extent - (50@19) corner: ColorChart extent.	tr _ tr translateBy: startPt.	oldColor _ nil.	[Sensor anyButtonPressed] whileFalse: [		c _ Display colorAt: (here _ Sensor cursorPoint).		(tr containsPoint: here)			ifFalse: [Display fill: (0@61+startPt extent: 20@19) fillColor: c]			ifTrue: [				c _ Color transparent.				Display fill: (0@61+startPt extent: 20@19) fillColor: Color white].		c = oldColor ifFalse: [			Display fillWhite: (20@61 + startPt extent: 135@19).			c isTransparent				ifTrue: [s _ 'transparent']				ifFalse: [s _ c shortPrintString.						s _ s copyFrom: 7 to: s size - 1].			s displayAt: 20@61 + startPt.			oldColor _ c]].	save displayAt: startPt.	Sensor waitNoButton.	^ c! !!Color class methodsFor: 'color from user' stamp: 'di 4/13/1999 14:28'!oldColorPaletteForDepth: depth extent: paletteExtent	"Returns a form of the given size showing a color palette for the given depth."	"(Color oldColorPaletteForDepth: Display depth extent: 720@100) display"	| c p f nSteps rect w h q |	f _ Form extent: paletteExtent depth: depth.	f fill: f boundingBox fillColor: Color white.	nSteps _ depth > 8 ifTrue: [12] ifFalse: [6].	w _ paletteExtent x // (nSteps * nSteps).	h _ paletteExtent y - 20 // nSteps.	0 to: nSteps-1 do: [:r |		0 to: nSteps-1 do: [:g |			0 to: nSteps-1 do: [:b |				c _ Color r: r g: g b: b range: nSteps - 1.				rect _ ((r * nSteps * w) + (b * w)) @ (g * h) extent: w@(h + 1).				f fill: rect fillColor: c]]].	q _ Quadrangle origin: paletteExtent - (50@19) corner: paletteExtent.	q displayOn: f.	'Trans.' displayOn: f at: q origin + (9@1).	w _ ((paletteExtent x - q width - 130) // 64) max: 1.	p _ paletteExtent x - q width - (64 * w) - 1 @ (paletteExtent y - 19).	0 to: 63 do:		[:v | c _ Color r: v g: v b: v range: 63.		f fill: ((v * w)@0 + p extent: (w + 1)@19) fillColor: c].	^ f! !!DisplayScreen methodsFor: 'private' stamp: 'di 4/15/1999 10:58'!newDepthNoRestore: pixelSize	"Change depths.  Check if there is enough space!!  , di"	| area need |	pixelSize = depth ifTrue: [^ self  "no change"].	pixelSize < depth ifFalse:		["Make sure there is enough space"		area _ Display boundingBox area. "pixels"		Smalltalk isMorphic ifFalse:			[ScheduledControllers scheduledWindowControllers do:				[:aController | "This should be refined..."				aController view cacheBitsAsTwoTone ifFalse:					[area _ area + aController view windowBox area]]].		need _ (area * (pixelSize-depth) // 8)  "new bytes needed"				+ Smalltalk lowSpaceThreshold.		(Smalltalk garbageCollectMost <= need			and: [Smalltalk garbageCollect <= need])			ifTrue: [self error: 'Insufficient free space']].	self setExtent: self extent depth: pixelSize.	Smalltalk isMorphic ifFalse: [ScheduledControllers updateGray].	DisplayScreen startUp! !!DisplayText methodsFor: 'private' stamp: 'di 4/14/1999 09:57'!composeForm	| form1 |	World isMorph		ifTrue: [form1 _ (TextMorph new contentsAsIs: text) imageFormDepth: 1.				form _ (ColorForm extent: form1 extent)					offset: offset;					colors: (Array						with: (backColor == nil ifTrue: [Color transparent] ifFalse: [backColor])						with: (foreColor == nil ifTrue: [Color black] ifFalse: [foreColor])).				form1 displayOn: form]		ifFalse: [form _ self asParagraph asForm]! !!InputSensor methodsFor: 'joystick' stamp: 'di 4/13/1999 14:32'!testJoystick: index	"Sensor testJoystick: 3"	| f pt buttons status |	f _ Form extent: 110@50.	[Sensor anyButtonPressed] whileFalse: [		pt _ Sensor joystickXY: index.		buttons _ Sensor joystickButtons: index.		status _'xy: ', pt printString, 'buttons: ', buttons hex.		f fillWhite.		status displayOn: f at: 10@10.		f displayOn: Display at: 10@10.	].! !!MVCMenuMorph class methodsFor: 'instance creation' stamp: 'di 4/13/1999 17:08'!from: aPopupMenu title: titleStringOrNil	"Answer a MenuMorph constructed from the given PopUpMenu. Used to simulate MVC-style menus in a Morphic-only world."	| menu items lines selections labelString j emphasis |	menu _ self new.	titleStringOrNil ifNotNil: [		titleStringOrNil isEmpty ifFalse: [menu addTitle: titleStringOrNil]].	labelString _ aPopupMenu labelString.	items _ labelString asString findTokens: String cr.	labelString isText ifTrue:		["Pass along text emphasis if present"		j _ 1.		items _ items collect:			[:item | j _ labelString asString findString: item startingAt: j.			emphasis _ TextEmphasis new emphasisCode: (labelString emphasisAt: j).			item asText addAttribute: emphasis]].	lines _ aPopupMenu lineArray.	lines ifNil: [lines _ #()].	menu cancelValue: 0.	selections _ (1 to: items size) asArray.	1 to: items size do: [:i |		menu add: (items at: i) action: (selections at: i).		(lines includes: i) ifTrue: [menu addLine]].	^ menu! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'di 4/17/1999 00:24'!shiftedYellowButtonMenu	"Answer the menu to be presented when the yellow button is pressed while the shift key is down. 3/13/96 sw	 5/27/96 sw: added font menu"	^ PopUpMenu labels: 'set font... (k)set style... (K)explainpretty printfile it inrecognizer (r)spawn (o)browse it (b)senders of it (n)implementors of it (m)references to it (N)selectors containing it (W)method strings with it (E)method source with itspecial menu...more...' 		lines: #(2 7 14)		selections: #(offerFontMenu changeStyle explain prettyPrint fileItIn recognizeCharacters spawn browseIt sendersOfIt implementorsOfIt referencesToIt  methodNamesContainingIt methodStringsContainingit methodSourceContainingIt  presentSpecialMenu yellowButtonActivity)! !!ParagraphEditor methodsFor: 'private' stamp: 'di 4/17/1999 00:11'!initializeYellowButtonMenu	self yellowButtonMenu: TextEditorYellowButtonMenu 		yellowButtonMessages: TextEditorYellowButtonMenu selections ! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'di 4/17/1999 01:25'!initialize 	"Initialize the keyboard shortcut maps and the shared buffers	for copying text across views and managing again and undo.	Marked this method changed to trigger reinit"  	"ParagraphEditor initialize"	CurrentSelection _ UndoSelection _ FindText _ ChangeText _ Text new.	UndoMessage _ Message selector: #halt.	self initializeCmdKeyShortcuts.	self initializeShiftCmdKeyShortcuts.	self initializeTextEditorMenus! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'di 4/17/1999 00:10'!initializeTextEditorMenus   "ParagraphEditor initializeTextEditorMenus"		"Initialize the yellow button pop-up menu and corresponding messages."	TextEditorYellowButtonMenu _ SelectionMenu		labels: 'find...(f)find again (g)set search string (h)do again (j)undo (z)copy (c)cut (x)paste (v)do it (d)print it (p)inspect it (i)accept (s)cancel (l)show bytecodesmore...' 		lines: #(3 5 8 11 13 14)		selections: #(find findAgain setSearchString again undo copySelection cut paste doIt printIt inspectIt accept cancel showBytecodes shiftedYellowButtonActivity)! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'di 4/18/1999 15:05'!shiftedYellowButtonMenu	"Answer the menu to be presented when the yellow button is pressed while the shift key is down. 3/13/96 sw	 5/27/96 sw: added font menu"	^ SelectionMenu labels: 'set font... (k)set style... (K)explainpretty printfile it inrecognizer (r)spawn (o)browse it (b)senders of it (n)implementors of it (m)references to it (N)selectors containing it (W)method strings with it (E)method source with itspecial menu...more...' 		lines: #(2 7 14)		selections: #(offerFontMenu changeStyle explain prettyPrint fileItIn recognizeCharacters spawn browseIt sendersOfIt implementorsOfIt referencesToIt  methodNamesContainingIt methodStringsContainingit methodSourceContainingIt  presentSpecialMenu yellowButtonActivity)! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'di 4/17/1999 00:37'!shiftedYellowButtonMessages	"Answer the set of messages that go with the shifted menu.  "	^ #(offerFontMenu changeStyle explain prettyPrint fileItIn recognizeCharacters spawn browseIt sendersOfIt implementorsOfIt referencesToIt  methodNamesContainingIt methodStringsContainingit methodSourceContainingIt  presentSpecialMenu yellowButtonActivity "<-note change")! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'di 4/17/1999 00:33'!yellowButtonMessages	^ TextEditorYellowButtonMenu selections! !!PluggableButtonView methodsFor: 'accessing' stamp: 'di 4/13/1999 14:48'!label: aStringOrDisplayObject 	"Label this button with the given String or DisplayObject."	(aStringOrDisplayObject isKindOf: Paragraph)		ifTrue: [label _ aStringOrDisplayObject]		ifFalse: [label _ aStringOrDisplayObject asParagraph centered].	self centerLabel.! !!PopUpMenu methodsFor: 'basic control sequence' stamp: 'di 4/13/1999 17:53'!startUpCenteredWithCaption: captionOrNil	"Differs from startUpWithCaption: by appearing with cursor in the menu,	and thus ready to act on mouseUp, without requiring user tweak to confirm"	| cursorPoint |	cursorPoint _ World == nil 			ifTrue: [Sensor cursorPoint]			ifFalse: [World cursorPoint].	^ self startUpWithCaption: captionOrNil		at: cursorPoint - (20@0)! !!PopUpMenu methodsFor: 'basic control sequence' stamp: 'di 4/13/1999 16:20'!startUpWithCaption: captionOrNil at: location	"Display the menu, with caption if supplied. Wait for the mouse button to go down, then track the selection as long as the button is pressed. When the button is released, answer the index of the current selection, or zero if the mouse is not released over any menu item. Location specifies the desired topLeft of the menu body rectangle."	| maxHeight |	maxHeight _ Display height*3//4.	self frameHeight > maxHeight ifTrue:		[^ self startUpSegmented: maxHeight withCaption: captionOrNil at: location].	World ifNotNil:		[selection _ Cursor normal showWhile:			[(MVCMenuMorph from: self title: captionOrNil) invokeAt: location in: World].		^ selection].	frame ifNil: [self computeForm].	Cursor normal showWhile:		[self displayAt: location			withCaption: captionOrNil			during: [[Sensor anyButtonPressed] whileFalse: [].					[Sensor anyButtonPressed] whileTrue: [self manageMarker]]].	^ selection! !!PopUpMenu methodsFor: 'displaying' stamp: 'di 4/18/1999 18:33'!displayAt: aPoint withCaption: captionOrNil during: aBlock	"Display the receiver just to the right of aPoint while aBlock is evaluated.  If the receiver is forced off screen, display it just to the right."	| delta savedArea captionForm captionSave outerFrame captionText tFrame frameSaveLoc captionBox |	frame _ frame align: marker leftCenter with: aPoint + (2@0).	outerFrame _ frame.	captionOrNil notNil ifTrue:		[captionText _ (DisplayText				text: captionOrNil asText				textStyle: TextStyle default copy centered)					foregroundColor: Color black					backgroundColor: Color white.		tFrame _ captionText boundingBox insetBy: -2.		outerFrame _ frame merge: (tFrame align: tFrame bottomCenter					with: frame topCenter + (0@2))].	delta _ outerFrame amountToTranslateWithin: Display boundingBox.	frame _ frame translateBy: delta.	captionOrNil notNil ifTrue:		[captionForm _ captionText form.		captionBox _ captionForm boundingBox expandBy: 4.		captionBox _ captionBox align: captionBox bottomCenter								with: frame topCenter + (0@2).		captionSave _ Form fromDisplay: captionBox.		Display border: captionBox width: 4 fillColor: Color white.		Display border: captionBox width: 2 fillColor: Color black.		captionForm displayAt: captionBox topLeft + 4].	marker _ marker align: marker leftCenter with: aPoint + delta +  (2@0).	savedArea _ Form fromDisplay: frame.	self menuForm displayOn: Display at: (frameSaveLoc _ frame topLeft).	selection ~= 0 ifTrue: [Display reverse: marker].	Cursor normal showWhile: [aBlock value].	savedArea displayOn: Display at: frameSaveLoc.	captionOrNil notNil ifTrue:		[captionSave displayOn: Display at: captionBox topLeft]! !!PopUpMenu methodsFor: 'accessing' stamp: 'di 4/13/1999 16:02'!frameHeight	| nItems |	frame ifNotNil: [^ frame height].	nItems _ 1 + (labelString occurrencesOf: Character cr).	^ (nItems * MenuStyle lineGrid) + 4 "border width"! !!PopUpMenu methodsFor: 'marker adjustment' stamp: 'di 4/13/1999 17:42'!manageMarker	"If the cursor is inside the receiver's frame, then highlight the marked 	item. Otherwise no item is to be marked."	| pt |	"Don't let pt get far from display box, so scrolling will go all the way"	pt _ Sensor cursorPoint adhereTo: (Display boundingBox expandBy: 1).	(frame inside containsPoint: pt)		ifTrue: ["Need to cache the form for reasonable scrolling performance"				((Display boundingBox insetBy: 0@3) containsPoint: pt)					ifFalse: [pt _ pt - (self scrollIntoView: pt)].				self markerOn: pt]		ifFalse: [self markerOff]! !!PopUpMenu methodsFor: 'private' stamp: 'di 4/17/1999 15:06'!computeForm	"Compute and answer a Form to be displayed for this menu."	| borderInset paraForm menuForm inside |	borderInset _ 2@2.	paraForm _ (DisplayText text: labelString asText textStyle: MenuStyle) form.	menuForm _ Form extent: paraForm extent + (borderInset * 2).	menuForm fillBlack.	paraForm displayOn: menuForm at: borderInset.	lineArray == nil ifFalse:		[lineArray do:			[ :line |			menuForm fillBlack:				(0 @ ((line * font height) + borderInset y) extent: (menuForm width @ 1))]].	frame _ Quadrangle new.	frame region: menuForm boundingBox.	frame borderWidth: 2.	inside _ frame inside.	marker _ inside topLeft extent: (inside width @ MenuStyle lineGrid).	selection _ 1.	^ form _ menuForm! !!PopUpMenu methodsFor: 'private' stamp: 'di 4/13/1999 16:21'!labels: aString font: aFont lines: anArray	labelString _ aString.	font _ aFont.	lineArray _ anArray.! !!PopUpMenu methodsFor: 'private' stamp: 'di 4/13/1999 17:51'!menuForm	"Answer a Form to be displayed for this menu."	form == nil ifTrue: [self computeForm].	^ form! !!CustomMenu methodsFor: 'private' stamp: 'di 4/14/1999 21:28'!preSelect: action	"Pre-select and highlight the menu item associated with the given action."	| i |	i _ selections indexOf: action ifAbsent: [^ self].	marker ifNil: [self computeForm].	marker _ marker		align: marker topLeft		with: (marker left)@(frame inside top + (marker height * (i - 1))).	selection _ i.! !!EmphasizedMenu methodsFor: 'emphasis' stamp: 'di 4/13/1999 16:27'!onlyBoldItem: itemNumber	"Set up emphasis such that all items are plain except for the given item number.  "	emphases _ (Array new: selections size) atAllPut: #plain.	emphases at: itemNumber put: #bold! !!PopUpMenu class methodsFor: 'class initialization' stamp: 'di 4/13/1999 17:09'!initialize  "PopUpMenu initialize"	"Change CacheMenuForms to true to get faster popup menus on slower systems."	"CacheMenuForms _ true"	CacheMenuForms _ true.	(MenuStyle _ TextStyle default copy)		gridForFont: 1 withLead: 0;		centered.	PopUpMenu withAllSubclasses do:		[:menuClass | menuClass allInstancesDo:			[:m | m rescan]]! !!EmphasizedMenu class methodsFor: 'instance creation' stamp: 'di 4/14/1999 22:19'!example1	"An example of how to get an EmphasizedMenu to work for you.  "	^ (self selections: 			#('how' 'well' 'does'   'this'   'work?') 		emphases: 			#(bold   plain  italic struckOut plain))		startUpWithCaption: 'A Menu with Emphases'"EmphasizedMenu example1"! !!EmphasizedMenu class methodsFor: 'instance creation' stamp: 'di 4/13/1999 15:47'!example3	"An example of how to get an EmphasizedMenu to work for you.  "	^ (self selectionAndEmphasisPairs: 		#('how' bold   'well'	plain  'does'  italic   'this'  struckOut  'work' plain))		startUpWithCaption: 'A Menu with Emphases'"EmphasizedMenu example3"! !!EmphasizedMenu class methodsFor: 'instance creation' stamp: 'di 4/13/1999 15:47'!selections: selList emphases: emphList	"Answer an instance of the receiver with the given selections and emphases.  "	^ (self selections: selList) emphases: emphList"(EmphasizedMenu selections: #('how' 'well' 'does' 'this' 'work?') emphases: #(bold plain italic struckOut plain)) startUp" ! !!Project methodsFor: 'initialization' stamp: 'di 4/14/1999 13:55'!initialProject	self saveState.	parentProject _ self.	previousProject _ nextProject _ nil! !!Project methodsFor: 'accessing' stamp: 'di 4/14/1999 13:13'!isMorphic	^ world isMorph! !!Project methodsFor: 'accessing' stamp: 'di 4/14/1999 13:59'!setParent: newParent	parentProject _ newParent.	nextProject _ previousProject _ nil.! !!Project methodsFor: 'release' stamp: 'di 4/14/1999 21:47'!removeViewFromParent	self dependents do:		[:d |		(d isKindOf: SystemWindow)				ifTrue: [d delete].		(d isKindOf: StandardSystemView)				ifTrue: [parentProject world unschedule: d]].! !!Project class methodsFor: 'class initialization' stamp: 'di 4/14/1999 21:34'!initialize	"This is the Top Project."   	CurrentProject ifNil:		[CurrentProject _ super new initialProject.		CurrentProject spawnNewProcessAndTerminateOld: true].	"Project initialize"! !!SimpleClientSocket methodsFor: 'as yet unclassified' stamp: 'di 4/13/1999 14:43'!displayString: aString	"Display the given string on the Display. Used for testing."	| s |	aString isEmpty ifTrue: [^ self].	aString size > 60		ifTrue: [s _ aString copyFrom: 1 to: 60]  "limit to 60 characters"		ifFalse: [s _ aString].	s displayOn: Display.! !!SimpleClientSocket class methodsFor: 'remote cursor example' stamp: 'di 4/13/1999 14:42'!remoteCursorReceiver	"Wait for a connection, then display data sent by the client until the client closes the stream. This server process is usually started first (optionally in a forked process), then the sender process is started (optionally on another machine). Note this machine's address, which is printed in the transcript, since the sender process will ask for it."	"[SimpleClientSocket remoteCursorReceiver] fork"	| sock response |	Transcript show: 'starting remote cursor receiver'; cr.	Transcript show: 'initializing network'; cr.	Socket initializeNetwork.	Transcript show: 'my address is ', NetNameResolver localAddressString; cr.	Transcript show: 'opening connection'; cr.	sock _ SimpleClientSocket new.	sock listenOn: 54323.	sock waitForConnectionUntil: (Socket deadlineSecs: 60).	sock isConnected		ifFalse: [			 sock destroy.			Transcript show: 'remote cursor receiver did not receive a connection in 60 seconds; aborting.'.			^ self].	Transcript show: 'connection established'; cr.	[sock isConnected]		whileTrue: [			sock dataAvailable				ifTrue: [					response _ sock getResponse.					response displayOn: Display at: 10@10]				ifFalse: [					"if no data available, let other processes run for a while"					(Delay forMilliseconds: 20) wait]].	sock destroy.	Transcript show: 'remote cursor receiver done'; cr.! !!SimpleClientSocket class methodsFor: 'remote cursor example' stamp: 'di 4/13/1999 14:43'!remoteCursorTest	"This version of the remote cursor test runs both the client and the server code in the same loop."	"SimpleClientSocket remoteCursorTest"	| sock1 sock2 samplesToSend samplesSent done t |	Transcript show: 'starting remote cursor test'; cr.	Transcript show: 'initializing network'; cr.	Socket initializeNetwork.	Transcript show: 'opening connection'; cr.	sock1 _ SimpleClientSocket new.	sock2 _ SimpleClientSocket new.	sock1 listenOn: 54321.	sock2 connectTo: (NetNameResolver localHostAddress) port: 54321.	sock1 waitForConnectionUntil: self standardDeadline.	sock2 waitForConnectionUntil: self standardDeadline.	(sock1 isConnected) ifFalse: [self error: 'sock1 not connected'].	(sock2 isConnected) ifFalse: [self error: 'sock2 not connected'].	Transcript show: 'connection established'; cr.	samplesToSend _ 100.	t _ Time millisecondsToRun: [		samplesSent _ 0.		done _ false.		[done]			whileFalse: [				(sock1 sendDone and: [samplesSent < samplesToSend]) ifTrue: [					sock1 sendCommand: self sensorStateString.					samplesSent _ samplesSent + 1].				sock2 dataAvailable ifTrue: [					sock2 getResponse displayOn: Display at: 10@10].				done _ samplesSent = samplesToSend]].	sock1 destroy.	sock2 destroy.	Transcript show: 'remote cursor test done'; cr.	Transcript show:		samplesSent printString, ' samples sent in ',		t printString, ' milliseconds'; cr.	Transcript show: ((samplesSent * 1000) // t) printString, ' samples/sec'; cr.! !!StrikeFont methodsFor: 'displaying' stamp: 'di 4/13/1999 20:21'!widthOfString: aString	^ self composeWord: (1 to: aString size) in: aString beginningAt: 0"	TextStyle default defaultFont widthOfString: 'zort' 21"! !!StringHolder methodsFor: 'code pane menu' stamp: 'di 4/17/1999 00:54'!codePaneMenu: aMenu shifted: shifted	"Note that unless we override perform:orSendTo:, PluggableTextController will respond to all menu items in a text pane"	| shiftMenu |	shifted	ifTrue: [shiftMenu _ ParagraphEditor shiftedYellowButtonMenu.			^ aMenu 				labels: shiftMenu labelString 				lines: shiftMenu lineArray				selections: shiftMenu selections]	ifFalse: [^ aMenu 				labels: ParagraphEditor yellowButtonMenu labelString 				lines: ParagraphEditor yellowButtonMenu lineArray				selections: ParagraphEditor yellowButtonMenu selections]! !!Browser methodsFor: 'initialize-release' stamp: 'di 4/13/1999 13:54'!buildCommentSwitchView	| aSwitchView |	aSwitchView _ PluggableButtonView		on: self		getState: #classCommentIndicated		action: #plusButtonHit.	aSwitchView		label: '?' asText allBold;		borderWidthLeft: 0 right: 1 top: 0 bottom: 0;			window: (0@0 extent: 10@8);		askBeforeChanging: true.	^ aSwitchView! !!Browser methodsFor: 'initialize-release' stamp: 'di 4/13/1999 14:05'!buildMorphicSwitches	| instanceSwitch commentSwitch classSwitch row aColor |	instanceSwitch _ PluggableButtonMorph		on: self		getState: #instanceMessagesIndicated		action: #indicateInstanceMessages.	instanceSwitch		label: 'instance';		askBeforeChanging: true.	commentSwitch _ PluggableButtonMorph		on: self		getState: #classCommentIndicated		action: #plusButtonHit.	commentSwitch		label: '?' asText allBold;		askBeforeChanging: true;		setBalloonText: 'class comment'.	classSwitch _ PluggableButtonMorph		on: self		getState: #classMessagesIndicated		action: #indicateClassMessages.	classSwitch		label: 'class';		askBeforeChanging: true.	row _ AlignmentMorph newRow		hResizing: #spaceFill;		vResizing: #spaceFill;		inset: 0;		borderColor: Color transparent;		addMorphBack: instanceSwitch;		addMorphBack: commentSwitch;		addMorphBack: classSwitch.	aColor _ Color colorFrom: self defaultBackgroundColor.	row submorphs do:		[:m | m color: aColor.		m onColor: aColor darker offColor: aColor].	^ row! !!FileList methodsFor: 'file list menu' stamp: 'di 4/17/1999 00:41'!fileContentsMenu: aMenu shifted: shifted| shiftMenu |^ shifted 	ifFalse: [aMenu 		labels: 'file it inget entire fileview as hexbrowse changesfind...(f)find again (g)set search string (h)do again (j)undo (z)copy (c)cut (x)paste (v)do it (d)print it (p)inspect it (i)accept (s)cancel (l)more...' 		lines: #(4 7 9 12 15 17)		selections: #(fileItIn get getHex browseChanges find findAgain setSearchString again undo copySelection cut paste doIt printIt inspectIt accept cancel shiftedYellowButtonActivity)]	ifTrue: [shiftMenu _ ParagraphEditor shiftedYellowButtonMenu.		aMenu 			labels: shiftMenu labelString 			lines: shiftMenu lineArray			selections: ParagraphEditor shiftedYellowButtonMessages]! !!StringMorph methodsFor: 'accessing' stamp: 'di 4/13/1999 16:55'!contents: newContents	newContents isText		ifTrue: [emphasis _ newContents emphasisAt: 1.				contents _ newContents string]		ifFalse: [contents = newContents ifTrue: [^ self].  "no substantive change"				contents _ newContents].	self fitContents.! !!SystemDictionary methodsFor: 'class names' stamp: 'di 4/19/1999 10:29'!removeClassFromSystemUnlogged: aClass	"Delete the class, aClass, from the system, but log the removal neither to the current change set nor to the changes log"	SystemOrganization removeElement: aClass name.	self removeFromStartUpList: aClass.	self removeFromShutDownList: aClass.	self removeKey: aClass name ifAbsent: [].	self flushClassNameCache! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 4/18/1999 15:58'!discardMVC   "Smalltalk discardMVC"	| keepers |	"Check that we are in a Morphic Project and that there are no MVC Projects"	(Project allInstances inject: true into: [:ok :proj | ok & proj isMorphic])		ifFalse: [(self confirm: 'Would you like a chance to remove yourMVC projects in an orderly manner?')					ifTrue: [^ self].				(self confirm: 'If you wish, I can remove all MVC projects,make this project be the top project, and placeall orphaned sub-projects of MVC parents here.Would you like be to do thisand proceed to discard all MVC classes?')					ifTrue: [self zapMVCprojects]					ifFalse: [^ self]].	Smalltalk reclaimDependents.	"Remove old Paragraph classes and View classes."	(ChangeSet superclassOrder: Paragraph withAllSubclasses asArray) reverseDo: 		[:c | c removeFromSystem].	(ChangeSet superclassOrder: View withAllSubclasses asArray) reverseDo: 		[:c | c removeFromSystem].	"Get rid of ParagraphEditor's ScrollController dependence"	#(markerDelta viewDelta scrollAmount scrollBar computeMarkerRegion) do:			[:sel | ParagraphEditor removeSelector: sel].	ParagraphEditor compile: 'updateMarker'.	MouseMenuController subclass: #ParagraphEditor		instanceVariableNames: 'paragraph startBlock stopBlock beginTypeInBlock emphasisHere initialText selectionShowing otherInterval '		classVariableNames: 'ChangeText CmdActions CurrentSelection FindText Keyboard ShiftCmdActions TextEditorYellowButtonMenu TextEditorYellowButtonMessages UndoInterval UndoMessage UndoParagraph UndoSelection Undone '		poolDictionaries: 'TextConstants '		category: 'Morphic-Text Support'.	"Get rid of all Controller classes not needed by ParagraphEditor and ScreenController"	keepers _ TextMorphEditor withAllSuperclasses copyWith: ScreenController.	(ChangeSet superclassOrder: Controller withAllSubclasses asArray) reverseDo: 		[:c | (keepers includes: c) ifFalse: [c removeFromSystem]].	SystemOrganization removeCategoriesMatching: 'Graphics-Symbols'.	SystemOrganization removeCategoriesMatching: 'Graphics-Paths'.	SystemOrganization removeCategoriesMatching: 'Interface-Pluggable'.	Smalltalk removeClassNamed: 'FormButtonCache'.	Smalltalk removeClassNamed: 'WindowingTransformation'.	Smalltalk removeClassNamed: 'ControlManager'.	Smalltalk removeClassNamed: 'DisplayTextView'.	ScheduledControllers _ nil.	Undeclared removeUnreferencedKeys.	SystemOrganization removeEmptyCategories.	Symbol rehash.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 4/19/1999 10:28'!discardMorphic   "Smalltalk discardMorphic"	"Discard Morphic."	| subs |	"Check that we are in an MVC Project and that there are no Morphic Projects		or WorldMorphViews."	Utilities clobberFlapTabList.	Smalltalk discard3D.	Smalltalk discardFlash.	subs _ OrderedCollection new.	Morph allSubclassesWithLevelDo: [:c :i | subs addFirst: c]		startingLevel: 0.	subs do: [:c | c removeFromSystem].	Smalltalk removeKey: #BalloonEngineConstants ifAbsent: [].	SystemOrganization removeCategoriesMatching: 'User Objects'.	SystemOrganization removeCategoriesMatching: 'Experimental-*'.	SystemOrganization removeCategoriesMatching: 'Balloon-*'.	SystemOrganization removeCategoriesMatching: 'Morphic-*'.	SystemOrganization removeSystemCategory: 'Graphics-Transformations'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 4/19/1999 11:34'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently used."	"Smalltalk discardOddsAndEnds"	SystemOrganization removeCategoriesMatching: 'System-Serial Port'.	SystemOrganization removeSystemCategory: 'Graphics-Symbols'.	SystemOrganization removeSystemCategory: 'Interface-File Contents Browser'.	SystemOrganization removeSystemCategory: 'System-Compression'.	Form removeSelector: #edit.	Smalltalk at: #FormView ifPresent:		[:c | c compile: 'defaultControllerClass  ^ NoController'			classified: 'controller access'].	Smalltalk removeClassNamed: #FormEditorView.	Smalltalk removeClassNamed: #FormEditor.	SystemOrganization removeSystemCategory: 'Graphics-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	Smalltalk removeClassNamed: #FormButtonCache.	Smalltalk removeClassNamed: #FormMenuController.	Smalltalk removeClassNamed: #FormMenuView.	Smalltalk removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	SystemDictionary removeSelector: #viewImageImports.	ScreenController removeSelector: #viewImageImports.	Smalltalk removeClassNamed: #FormHolderView.	Smalltalk removeClassNamed: #FormInspectView.	"curve fitting:"	Smalltalk at: #FormEditor ifPresent: [:c | c removeSelector: #curve].	Smalltalk removeClassNamed: #CurveFitter.	Smalltalk removeClassNamed: #LinearFit.	Smalltalk removeClassNamed: #Spline.	"experimental hand-drawn character recoginizer:"	ParagraphEditor removeSelector: #recognizeCharacters.	ParagraphEditor removeSelector: #recognizer:.	ParagraphEditor removeSelector: #recognizeCharactersWhileMouseIn:.	Smalltalk removeClassNamed: #CharRecog.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	Smalltalk removeClassNamed: #ObjectViewer.	Smalltalk removeClassNamed: #ObjectTracer.	"HTML formatted fileout support:"	StandardFileStream removeSelector: #asHtml.	Smalltalk removeClassNamed: #HtmlFileStream.	"miscellaneous classes:"	Smalltalk removeClassNamed: #Array2D.	Smalltalk removeClassNamed: #DriveACar.	Smalltalk removeClassNamed: #EventRecorder.	Smalltalk removeClassNamed: #FindTheLight.	Smalltalk removeClassNamed: #PluggableTest.	Smalltalk removeClassNamed: #SystemMonitor.	Smalltalk removeClassNamed: #DocLibrary.	Smalltalk at: #SampledSound ifPresent: [:c |		(Smalltalk confirm: 'Remove all sounds from the SampledSound library?')		ifTrue: [c initialize]].	#(Helvetica Palatino Courier) do:		[:k | TextConstants removeKey: k ifAbsent: []].	(TextConstants at: #ComicBold) newFontArray:		((TextConstants at: #ComicBold) fontArray			copyFrom: 1 to: (5 min: (TextConstants at: #ComicBold) fontArray size)).! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 4/14/1999 14:01'!zapMVCprojects   "Smalltalk zapMVCprojects"	| window |	Smalltalk garbageCollect.  "So allInstances is precise"	Project allInstancesDo:		[:proj |		proj isTopProject		ifTrue: [proj isMorphic ifFalse:					["Root project is MVC -- we must become the root"					Project current removeViewFromParent.					Project current setParent: Project current]]		ifFalse: [proj parent isMorphic				ifFalse: [proj isMorphic ifTrue:							["Remove Morphic projects from MVC views"							proj removeViewFromParent.							"... and add them back here."							window _ (SystemWindow labelled: proj name) model: proj.							window addMorph: (ProjectViewMorph on: proj)									frame: (0@0 corner: 1.0@1.0).							window openInWorld.							proj setParent: Project current]].				proj isMorphic					ifFalse: ["Remove MVC projects from Morphic views"							proj removeViewFromParent.							Project allInstancesDo: [:p | p deletingProject: proj].							ProjectViewMorph allInstancesDo: [:p | p deletingProject: proj]]]		]! !!TextMorphEditor class methodsFor: 'as yet unclassified' stamp: 'di 4/13/1999 14:41'!new	^ self basicNew initialize! !!Transcripter commentStamp: '<historical>' prior: 0!Transcripter is a dog-simple scrolling stream with display.  It is intended to operate with no support from MVC or color in a minimal, or headless version of Squeak.  No attention has been paid to appearance or performance.!!Transcripter methodsFor: 'all' stamp: 'di 8/14/97 12:12'!black	Display depth = 1 ifTrue: [^ Bitmap with: 16rFFFFFFFF "Works without color support"].	^ Color black! !!Transcripter methodsFor: 'all' stamp: 'di 8/14/97 12:41'!clear	Display fill: (frame insetBy: -2) fillColor: self black;			fill: frame fillColor: self white.	self on: (String new: 100); endEntry! !!Transcripter methodsFor: 'all' stamp: 'di 8/12/97 22:11'!confirm: queryString 	| choice |	[true]		whileTrue: 			[choice _ self request: queryString , 'Please type yes or no followed by return'.			choice first asUppercase = $Y ifTrue: [^ true].			choice first asUppercase = $N ifTrue: [^ false]]! !!Transcripter methodsFor: 'all' stamp: 'di 8/14/97 12:44'!endEntry	| c d cb |	c _ self contents.	Display extent ~= DisplayScreen actualScreenSize ifTrue:		["Handle case of user resizing physical window"		DisplayScreen startUp.		frame _ frame intersect: Display boundingBox.		^ self clear; show: c].	para setWithText: c asText		style: TextStyle default		compositionRectangle: ((frame insetBy: 4) withHeight: 9999)		clippingRectangle: frame		foreColor: self black backColor: self white.	d _ para compositionRectangle bottom - frame bottom.	d > 0 ifTrue:		["Scroll up to keep all contents visible"		cb _ para characterBlockAtPoint: para compositionRectangle topLeft											+ (0@(d+para lineGrid)).		self on: (c copyFrom: cb stringIndex to: c size).		readLimit_ position_ collection size.		^ self endEntry].	para display! !!Transcripter methodsFor: 'all' stamp: 'di 8/14/97 12:44'!initInFrame: rect	frame _ rect insetBy: 2.  "Leave room for border"	para _ Paragraph withText: self contents asText				style: TextStyle default				compositionRectangle: ((frame insetBy: 4) withHeight: 9999)				clippingRectangle: frame				foreColor: self black backColor: self white! !!Transcripter methodsFor: 'all' stamp: 'di 8/12/97 12:18'!readEvalPrint	| line |	[#('quit' 'exit' 'done') includes: (line _ self request: '>')]	whileFalse:		[self cr; print: (Compiler evaluate: line); endEntry]! !!Transcripter methodsFor: 'all' stamp: 'di 8/8/97 14:36'!request: prompt	| startPos char c | 	self cr; nextPutAll: prompt; endEntry.	startPos _ position.	[[Sensor keyboardPressed] whileFalse.	(char _ Sensor keyboard) = Character cr]		whileFalse:		[char = (Character value: 8)			ifTrue: [readLimit_ position_ (position-1 max: startPos)]			ifFalse: [self nextPut: char].		self endEntry].	c _ self contents.	^ c copyFrom: startPos+1 to: c size! !!Transcripter methodsFor: 'all' stamp: 'di 8/6/97 17:26'!show: s	self nextPutAll: s; endEntry! !!Transcripter methodsFor: 'all' stamp: 'di 8/14/97 12:12'!white	Display depth = 1 ifTrue: [^ Bitmap with: 0 "Works without color support"].	^ Color white! !!Transcripter class methodsFor: 'instance creation' stamp: 'di 8/14/97 12:09'!newInFrame: frame"(Transcripter newInFrame: (0@0 extent: 100@200))	nextPutAll: 'Hello there'; endEntry;	cr; print: 355.0/113; endEntry;	readEvalPrint."	| transcript |	transcript _ self on: (String new: 100).	transcript initInFrame: frame.	^ transcript clear! !!Transcripter class methodsFor: 'instance creation' stamp: 'di 8/12/97 12:16'!startTranscriptProcess   "Transcripter startTranscriptProcess"	| activeProcess |	Transcript _ self newInFrame: Display boundingBox.	activeProcess _ [Transcript readEvalPrint.					Smalltalk processShutDownList; quitPrimitive]						newProcess					priority: Processor userSchedulingPriority.	activeProcess resume.	Processor terminateActive! !!Utilities class methodsFor: 'graphical support' stamp: 'di 4/13/1999 20:22'!showFormsDictAcrossTopOfScreen: formDict	"Display the given Dictionary of forms across the top of the screen, wrapping to subsequent lines if needed.  Beneath each, put the name of the associated key."	"Utilities showFormsDictAcrossTopOfScreen: HaloIcons"	| position maxHeight screenBox ceiling elem box h labelWidth keyString |	position _ 20.	maxHeight _ 0.	ceiling _ 0.	screenBox _ Display boundingBox.	formDict associationsDo:		[:assoc | (elem _ assoc value) displayAt: (position @ ceiling).			box _ elem boundingBox.			h _ box height.			keyString _ (assoc key isKindOf: String) ifTrue: [assoc key] ifFalse: [assoc key printString].			keyString displayAt: (position @ (ceiling + h)).			labelWidth _ TextStyle default defaultFont widthOfString: keyString.			maxHeight _ maxHeight max: h.			position _ position + (box width max: labelWidth) + 5.			position > (screenBox right - 100) ifTrue:				[position _ 20.				ceiling _ ceiling + maxHeight + 15.				maxHeight _ 0]]! !ParagraphEditor initialize!PopUpMenu initialize!Project initialize!StringHolderController removeSelector: #initializeYellowButtonMenu!StringHolderController class removeSelector: #initialize!StringHolderController class removeSelector: #yellowButtonMenu!StringHolderController class removeSelector: #yellowButtonMessages!PluggableTextController class removeSelector: #shiftedYellowButtonMenu!PluggableTextController class removeSelector: #shiftedYellowButtonMessages!