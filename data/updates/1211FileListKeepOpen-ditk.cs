'From Squeak 2.4c of May 10, 1999 on 12 May 1999 at 2:46:57 pm'!"Change Set:		FileListKeepOpenDate:			10 May 1999Author:			Dan Ingalls, Ted KaehlerAdds a new model message, modelSleep, analogous to modelWakeUp.Uses Ted's new openKeepFTP facility to keep sockets open across FTP transactions in the fileList.  The socket is closed when you leave the window, and re-opened when you re-enter it.  The net effect is to allow browsing remote files instantly, rather than waiting 10 seconds each time.Fixes ServerDirectory's ability to keep the connection open.  Notices that a socket is invalid if you try to quit twice.[changeSet enhancement] Warn the user if the preamble has unmatched double quotes.Tell 'em about typing two in a row."!!Object methodsFor: 'user interface' stamp: 'di 5/11/1999 22:26'!modelSleep	"A window with me as model is being exited or collapsed or closed.	Default response is no-op" ! !!Object methodsFor: 'user interface' stamp: 'di 5/11/1999 22:01'!modelWakeUp	"A window with me as model is being entered or expanded.  Default response is no-op" ! !!ChangeSorter methodsFor: 'code pane' stamp: 'tk 5/10/1999 17:24'!contents: aString notifying: aController 	"Compile the code in aString. Notify aController of any syntax errors. 	Create an error if the category of the selected message is unknown. 	Answer false if the compilation fails. Otherwise, if the compilation 	created a new method, deselect the current selection. Then answer true."	| category selector class oldSelector |	(class _ self selectedClassOrMetaClass) ifNil:		[(myChangeSet preambleString == nil or: [aString size == 0]) ifTrue: [ ^ false].		(aString count: [:char | char == $"]) odd 			ifTrue: [self inform: 'unmatched double quotes in preamble']			ifFalse: [(Scanner new scanTokens: aString) size > 0 ifTrue: [				self inform: 'Part of the preamble is not within double-quotes.To put a double-quote inside a comment, type two double-quotes in a row.(Ignore this warning if you are including a doIt in the preamble.)']].		myChangeSet preambleString: aString.		self currentSelector: nil.  "forces update with no 'unsubmitted chgs' feedback"		^ true].	oldSelector _ self selectedMessageName.	category _ class organization categoryOfElement: oldSelector.	selector _ class compile: aString				classified: category				notifying: aController.	selector ifNil: [^ false].	(self messageList includes: selector)		ifTrue: [self currentSelector: selector]		ifFalse: [self currentSelector: oldSelector].	self update.	^ true! !!FileList methodsFor: 'initialization' stamp: 'di 5/11/1999 22:37'!directory: dir	"Set the path of the volume to be displayed."	self okToChange ifFalse: [^ self].	self modelSleep.	directory _ dir.	self modelWakeUp.	sortMode == nil ifTrue: [sortMode _ #date].	volList _ ((Array with: '[]'), directory pathParts)  "Nesting suggestion from RvL"			withIndexCollect: [:each :i | ( String new: i-1 withAll: $ ), each].	self changed: #relabel.	self changed: #volumeList.	self pattern: pattern! !!FileList methodsFor: 'initialization' stamp: 'di 5/11/1999 22:18'!modelSleep	"User has exited or collapsed the window -- close any remote connection."	(directory isKindOf: ServerDirectory) ifTrue:		[directory quit]! !!FileList methodsFor: 'initialization' stamp: 'di 5/11/1999 22:19'!modelWakeUp	"User has entered or expanded the window -- reopen any remote connection."	(directory isKindOf: ServerDirectory) ifTrue:		[directory openKeepFTP]! !!FileList methodsFor: 'initialization' stamp: 'di 5/11/1999 22:25'!release	self modelSleep! !!ServerDirectory methodsFor: 'do ftp' stamp: 'di 5/11/1999 21:24'!openKeepFTP	"Open for FTP and keep the connection open"	| so |	(so _ self openNoDataFTP) class == String ifTrue: [^ so].	^ socket _ so! !!ServerDirectory methodsFor: 'do ftp' stamp: 'tk 5/12/1999 11:25'!openNoDataFTP	"Open a connection to the directory and server I hold.  Return a FTPSocket.  No dataPort is opened.  When you are all done, be sure to tell the socket to QUIT, and then destroy it."	| so rr serverIP |	Socket initializeNetwork.	socket ifNotNil: [socket isValid 			ifTrue: [^ socket]	"already open"			ifFalse: [socket _ nil]].	Cursor wait showWhile: [		FTPSocket retry: [serverIP _ NetNameResolver addressForName: server timeout: 20.					serverIP ~~ nil] 			asking: 'Trouble resolving server name.  Keep trying?'			ifGiveUp: [^ 'Could not resolve the server named: ', server].		so _ FTPSocket new.		so portNum: 21.		so connectTo: serverIP port: 21.  "21 is for the control connection"		so waitForConnectionUntil: FTPSocket standardDeadline.		].	Transcript cr; show: 'ftp: ', server; cr.	(rr _ so lookFor: '220 ') == true ifFalse: [^ rr].	"220 para1 Microsoft FTP Service"	so sendCommand: 'USER ', user.	(rr _ so lookFor: '331 ') == true ifFalse: [^ rr].	"331 Password required"	so sendCommand: 'PASS ', self password.	(rr _ so lookFor: '230 ') == true ifFalse: [^ rr].	"230 User logged in"	so sendCommand: 'CWD ', directory.	(rr _ so lookFor: '250 ') == true ifFalse: [^ rr].	"250 CWD successful"	"Need to ask for name of directory to make sure?"	"socket _ so".	"If user wants to keep connnection open, he must store socket"	^ so! !!ServerDirectory methodsFor: 'do ftp' stamp: 'tk 5/12/1999 11:30'!quit	"break the connection"	| rr so |	(so _ socket) ifNil: [^ self].	"already done"	socket _ nil.	so isValid ifFalse: [^ self].	so sendCommand: 'QUIT'.	(rr _ so responseOK) == true ifFalse: [^ rr].	"221"	so destroy.	"Always OK to destroy"	Transcript cr; show: 'ftp closing: ', server.! !!ServerDirectory methodsFor: 'file directory' stamp: 'di 5/11/1999 22:51'!oldFileOrNoneNamed: fullName	"If the file exists, answer a read-only RemoteFileStream on it. If it doesn't, answer nil.  fullName is directory path, and does include name of the server.  Or just a simple fileName.  Do prefetch the data."	| file remoteStrm |Cursor wait showWhile: 	[type ifNil: [type _ #ftp].	file _ self as: ServerFile.	(fullName includes: self pathNameDelimiter)		ifTrue: [file fullPath: fullName]		"sets server, directory(path), fileName"		ifFalse: [file fileName: fullName].	"JUST a single NAME, rest is here"			"Mac files that include / in name, must encode it as %2F "	file readOnly.	file type == #file ifTrue: [		^ FileStream oldFileOrNoneNamed: (file fileNameRelativeTo: self)].	"file exists ifFalse: [^ nil]."		"on the server"	remoteStrm _ RemoteFileStream on: (String new: 2000).	remoteStrm remoteFile: file.	file getFileNamed: file fileName into: remoteStrm].	"prefetch data"	^ remoteStrm! !!StandardSystemController methodsFor: 'basic control sequence' stamp: 'di 5/11/1999 22:04'!controlInitialize	view displayEmphasized.	view uncacheBits.  "Release cached bitmap while active"	model windowActiveOnFirstClick ifFalse: [sensor waitNoButton].	status _ #active.	view isCollapsed ifFalse: [model modelWakeUp].! !!StandardSystemController methodsFor: 'basic control sequence' stamp: 'di 5/11/1999 22:05'!controlTerminate	status == #closed		ifTrue: 			[view ~~ nil ifTrue: [view release].			ScheduledControllers unschedule: self.			^self].	view deEmphasize; cacheBits.	view isCollapsed ifFalse: [model modelSleep].! !!StandardSystemView methodsFor: 'framing' stamp: 'di 5/11/1999 22:09'!collapse	"If the receiver is not already collapsed, change its view to be that of its 	label only."	self isCollapsed ifFalse:			[model modelSleep.			(subViews ~~ nil and: [subViews size = 1 and: [subViews first isKindOf: MorphWorldView]])				ifTrue: [subViews first deEmphasizeView].			expandedViewport _ self viewport.			savedSubViews _ subViews.			self resetSubViews.			labelText isNil ifTrue: [self label: nil.  bitsValid _ false.].			self window: (self inverseDisplayTransform:					((self labelDisplayBox topLeft extent: (labelText extent x + 70) @ self labelHeight)						 intersect: self labelDisplayBox))]! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'di 5/11/1999 22:06'!collapseOrExpand	isCollapsed	ifTrue:		["Expand -- restore panes to morphics structure"		isCollapsed _ false.		super bounds: fullFrame.		paneMorphs reverseDo: [:m | self addMorph: m].		self activate "-- mainly for findWindow"]	ifFalse:		["Collapse -- remove panes from morphics structure"		isCollapsed _ true.		paneMorphs do: [:m | m delete; releaseCachedState].		model modelSleep.		collapsedFrame			ifNil:	[self extent: (label width + 50) @ (self labelHeight + 2).					self position: (RealEstateAgent assignCollapsePointFor: self)]			ifNotNil: [super bounds: collapsedFrame]]! !!SystemWindow methodsFor: 'top window' stamp: 'di 5/11/1999 22:07'!passivate	"Make me unable to respond to mouse and keyboard"	self setStripeColorsFrom: self paneColor.	model modelSleep.	self submorphsDo:		[:m | (m == closeBox or: [m == collapseBox])				ifTrue: ["Control boxes remain active, except in novice mode"						Preferences noviceMode ifTrue: [m lock]]				ifFalse: [m lock]].	self world ifNotNil:  "clean damage now, so dont merge this rect with new top window"		[self world == World ifTrue: [self world displayWorld]]! !