'From Squeak2.6 of 11 October 1999 [latest update: #1613] on 19 November 1999 at 1:25:50 pm'!"Change Set:		AttachedResourcesDate:			18 November 1999Author:			Dan IngallsProvides the basic capability for any morph to be 'attached' to a resource by way of a file path.  Once attached a morph can be updated from the resource thus named or, conversely it can be stored to update the resource.  Playfields and project worlds include the ability to update all morphs from their resources.While intended to work mainly with morphs, several graphic file formats are supported with the intention that if that format can be read into a morphic object, then a morph can be attached to it in a read-only fashion.Simple scenario (in morphic, natch): execute the following to put an image on disk...	GIFReadWriter putForm: Form fromUser onFileNamed: 'zort.gif'Then use the fileList 'open image in a window' to make a new sketchMorph from that file.Then in the sketchMorph's menu choose 'attach to resource', and choose file 'zort.gif'.Now re-execute the earlier doit to put a different image in 'zort.gif'.Finally choose 'update from resource' in the sketchMorph's menu.  Ta-da.Similarly you can do this for all morphs in a project by choosing 'update all from resources' in the 'playfield options...' of the world menu.Further suggested features, as yet unimplemented...[ ]	Brackets at the beginning of a resourceFilePath would allow an indirect reference to a resource folder.  Thus '[FooGameArt]background.morph' would refer to a piece of artwork in a folder somewhere.  At the time this file is referenced, it will look up the value of the global variable 'FooGameArt' to find the actual file path to a folder containing the file 'background.morph'.  In this manner development could proceed with artwork being stored in a folder on the local disk, or in a folder on a remote shared server.  One simple global change would allow all resource references to be redirected to a new location.[ ]	A few other properties might be useful in concert with Morph>>updateFromResource.  For instance if resourceAlignment = #center, it might cause the incoming resource to be positioned using	newMorph align: newMorph center with: oldMorph center.The default alignment right now is by morphic position."!!Morph methodsFor: 'fileIn/out' stamp: 'di 11/18/1999 08:35'!attachToResource	"Produce a morph from a file -- either a saved .morph file or a graphics file"	| pathName |	pathName _ Utilities chooseFileWithSuffixFromList: (#('.morph'), Utilities graphicsFileSuffixes)			withCaption: 'Choose a fileto load'.	pathName ifNil: [^ self].  "User made no choice"	pathName == #none ifTrue: [^ self inform: 'Sorry, no suitable files found(names should end with .morph, .gif,.bmp, .jpeg, .jpe, .jp, or .form)'].	self setProperty: #resourceFilePath toValue: pathName! !!Morph methodsFor: 'fileIn/out' stamp: 'di 11/18/1999 08:52'!saveAsResource	| pathName |	(self hasProperty: #resourceFilePath) ifFalse: [^ self].	pathName _ self valueOfProperty: #resourceFilePath.	(pathName asLowercase endsWith: '.morph') ifFalse:		[^ self error: 'Can only update morphic resources'].	(FileStream newFileNamed: pathName) fileOutClass: nil andObject: self.! !!Morph methodsFor: 'fileIn/out' stamp: 'di 11/18/1999 09:15'!updateAllFromResources	self allMorphsDo: [:m | m updateFromResource]! !!Morph methodsFor: 'fileIn/out' stamp: 'di 11/18/1999 09:50'!updateFromResource	| pathName newMorph f |	(pathName _ self valueOfProperty: #resourceFilePath) ifNil: [^ self].	(pathName asLowercase endsWith: '.morph')		ifTrue:			[newMorph _ (FileStream oldFileNamed: pathName) fileInObjectAndCode.			(newMorph isKindOf: Morph) ifFalse: [^ self error: 'Resource not a single morph']]		ifFalse:			[f _ Form fromFileNamed: pathName.			f ifNil: [^ self error: 'unrecognized image file format'].			newMorph _ SketchMorph new form: f].	newMorph setProperty: #resourceFilePath toValue: pathName.	self owner replaceSubmorph: self by: newMorph! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 11/18/1999 08:31'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	menu add: 'delete' action: #dismissMorph.	menu addLine.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	menu add: 'copy Postscript' target: argMorph action: #clipPostscript.	menu add: 'print PS to file...' target: argMorph action: #printPSToFile.	menu addLine.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	"Give the argument control over what should be done about fill styles"	argMorph addFillStyleMenuItems: menu hand: self.	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	World ifNil:		[menu add: 'inspect (in MVC)' action: #inspectMorph.		menu add: 'inspect' action: #inspectMorphInMorphic]		ifNotNil:		[menu add: 'inspect' action: #inspectMorph].	menu add: 'browse' action: #browseMorphClass.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	(argMorph hasProperty: #resourceFilePath)		ifTrue: [((argMorph valueOfProperty: #resourceFilePath) endsWith: '.morph')				ifTrue: [menu add: 'save as resource' target: argMorph action: #saveAsResource].				menu add: 'update from resource' target: argMorph action: #updateFromResource]		ifFalse: [menu add: 'attach to resource' target: argMorph action: #attachToResource].	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'di 11/18/1999 09:17'!playfieldOptionsMenu	| aMenu isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'save on file...' action: #saveOnFile.	aMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	aMenu add: 'update all from resources' action: #updateAllFromResources.	(self valueOfProperty: #classAndMethod) ifNotNil:		[aMenu add: 'broadcast as documentation' action: #saveDocPane].	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(isOpenForDragNDropString	toggleOpenToDragNDrop			'whether objects can be dropped into and dragged out of me')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(originAtCenterString	toggleOriginAtCenter			'whether the cartesian origin of the playfield should be at its lower-left corner or at the center of the playfield')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'].	aMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing.	aMenu balloonTextForLastItem:  'governs whether, when an object is touched inside me, a viewer should automatically be launched for it.'.	isWorld ifFalse:		[aMenu add: 'behave like a Holder' action: #becomeLikeAHolder.		aMenu balloonTextForLastItem: 'Set properties to make this object nicely set up to hold frames of a scripted animation.'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	presenter ifNil:		[aMenu add: 'make detachable' action: #makeDetachable.		aMenu balloonTextForLastItem: 'Allow this area to be separately governed by its own controls.'].	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'playfield options...'.	^ aMenu! !!TransformationMorph methodsFor: 'private' stamp: 'di 11/18/1999 15:44'!replaceSubmorph: oldMorph by: newMorph	| t b |	t _ transform.	b _ bounds.	super replaceSubmorph: oldMorph by: newMorph.	transform _ t.	bounds _ b.	self layoutChanged! !