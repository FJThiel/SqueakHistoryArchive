'From Squeak2.9alpha of 5 August 2000 [latest update: #2925] on 31 October 2000 at 9:33:17 am'!"Change Set:		miscGeneric-swDate:			30 October 2000Author:			Scott WallaceA few smallish tweaks, including:¥  The change-color halo-handle on system windows will change the window color now, just like the corresponding menu item in the window's title-bar menu.¥  MessageSet.initializeMessageList: now bulletproofed against failing when the list refers to classes no longer present.¥  Bulletproof ComponentLikeModel.delete against a nagging error condition.¥  Attention to correct singular/plural wording in a couple of ui messages.¥  Generic support for 'One-Shot' running of code, see ProtoObject.doOnlyOnce: and rearmOneShot.¥  The #flag: definition moved from Object to ProtoObject"!!ProtoObject methodsFor: 'debugging' stamp: 'sw 10/26/2000 14:29'!doOnlyOnce: aBlock	"If the 'one-shot' mechanism is armed, evaluate aBlock once and disarm the one-shot mechanism.  To rearm the mechanism, evaluate  'self rearmOneShot' manually."	(Smalltalk at: #OneShotArmed ifAbsent: [true])		ifTrue:			[Smalltalk at: #OneShotArmed put: false.			aBlock value]! !!ProtoObject methodsFor: 'debugging' stamp: 'sw 4/28/2000 14:41'!flag: aSymbol	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:	self flag: #returnHereUrgently	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."! !!ProtoObject methodsFor: 'debugging' stamp: 'sw 10/26/2000 14:27'!rearmOneShot	"Call this manually to arm the one-shot mechanism; use the mechanism in code by calling		self doOnlyOnce: <a block>"	Smalltalk at: #OneShotArmed put: true	"self rearmOneShot"! !!ComponentLikeModel methodsFor: 'components' stamp: 'sw 10/23/2000 18:13'!delete	"Delete the receiver.  Possibly put up confirming dialog.  Abort if user changes mind"	(model isKindOf: Component) ifTrue: [^ self deleteComponent].	(model isKindOf: MorphicModel) ifFalse: [^ super delete].	slotName ifNotNil:		[(PopUpMenu confirm:	'Shall I remove the slot ', slotName, '	along with all associated methods?')		ifTrue:			[(model class selectors select: [:s | s beginsWith: slotName])				do: [:s | model class removeSelector: s].			(model class instVarNames includes: slotName)				ifTrue: [model class removeInstVarName: slotName]]		ifFalse:			[(PopUpMenu confirm:	'...but should I at least dismiss this morph?	[choose no to leave everything unchanged]')				ifFalse: [^ self]]].	super delete.! !!FrameRateMorph methodsFor: 'as yet unclassified' stamp: 'sw 10/5/2000 06:52'!step	"Compute and display (every half second or so) the current framerate"	| now mSecs mSecsPerFrame framesPerSec newContents |	framesSinceLastDisplay _ framesSinceLastDisplay + 1.	now _ Time millisecondClockValue.	mSecs _ now - lastDisplayTime.	(mSecs > 500 or: [mSecs < 0 "clock wrap-around"]) ifTrue: 		[mSecsPerFrame _ mSecs // framesSinceLastDisplay.		framesPerSec _ (framesSinceLastDisplay * 1000) // mSecs.		newContents _ mSecsPerFrame printString, ' mSecs (', framesPerSec printString, ' frame', (framesPerSec == 1 ifTrue: [''] ifFalse: ['s']), '/sec)'.		self contents: newContents.		lastDisplayTime _ now.		framesSinceLastDisplay _ 0]! !!MessageSet methodsFor: 'private' stamp: 'sw 10/27/2000 05:18'!initializeMessageList: anArray	messageList _ anArray collect: [:each |		MessageSet parse: each toClassAndSelector: [:class :sel |			class ifNotNil: [class name , ' ' , sel , ' {' , ((class organization categoryOfElement: sel) ifNil: ['']) , '}']]]		thenSelect:			[:each | each notNil].	messageListIndex _ 0.	contents _ ''! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'sw 10/6/2000 14:05'!collapseOrExpand	isCollapsed		ifTrue: 			["Expand -- restore panes to morphics structure"			isCollapsed _ false.			collapsedFrame _ self getBoundsWithFlex.			"First save latest collapsedFrame"			self setBoundsWithFlex: fullFrame.			paneMorphs				reverseDo: 					[:m | 					self addMorph: m.					self world startSteppingSubmorphsOf: m].			self activate "-- mainly for findWindow"]		ifFalse: 			["Collapse -- remove panes from morphics structure"			isCollapsed _ true.			fullFrame _ self getBoundsWithFlex.			"First save latest fullFrame"			paneMorphs do: [:m | m delete; releaseCachedState].			model modelSleep.			collapsedFrame ifNil:				[collapsedFrame _ RealEstateAgent assignCollapseFrameFor: self].			self setBoundsWithFlex: collapsedFrame].	self layoutChanged! !!SystemWindow methodsFor: 'menu' stamp: 'sw 10/6/2000 14:01'!changeColor	"Change the color of the receiver -- triggered, e.g. from a menu.  This variant allows the recolor triggered from the window's halo recolor handle to have the same result as choosing change-window-color from the window-title menu"	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self activeHand;		target: self;		selector: #setWindowColor:;		originalColor: self color;		putUpFor: self near: self fullBoundsInWorld! !Object removeSelector: #flag:!