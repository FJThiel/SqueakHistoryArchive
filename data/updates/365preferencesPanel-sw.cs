'From Squeak 2.2 of Sept 23, 1998 on 13 October 1998 at 6:39:46 pm'!"Change Set:		preferencesPanel-swDate:			13 October 1998Author:			Scott WallaceProvides a live panel for dealing with all the boolean preferences; the user can see all of them at once, get balloon help for any of them, and can toggle any value by clicking on it.Also, a number of simplifications to the protocols and methods relating to absorbing updates, including clearing out some old disused cruft, and also providing a protocol whereby updates can be downloaded to the local hard disk without their being absorbed into the image."!Object subclass: #Preferences	instanceVariableNames: ''	classVariableNames: 'DesktopColor FlagDictionary HelpDictionary '	poolDictionaries: ''	category: 'System-Support'!UpdatingStringMorph subclass: #UpdatingBooleanStringMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!EToySystem class methodsFor: 'housekeeping' stamp: 'sw 10/13/1998 16:17'!prepareRelease	"To prepare a release of the EToy system, first make a copy of your image. Start that image and:		1. close all windows and projects		2. clean any garbage out of the following:			Smalltalk at: #ImageImports.			(Smalltalk keys select: [:k | ((Smalltalk at: k) isKindOf: Behavior) not])				asSortedCollection asArray.			SampledSound soundLibrary.		3. run this method		4. save the image"	"EToySystem prepareRelease"	HandMorph initialize.  "free cached ColorChart"	PaintBoxMorph releaseTemporaryForms.	PaintBoxMorph prototype stampHolder clear.  "clear stamps"	PaintBoxMorph prototype delete.  "break link to world, if any"	Smalltalk removeKey: #AA ifAbsent: [].	Smalltalk removeKey: #BB ifAbsent: [].	Smalltalk removeKey: #CC ifAbsent: [].	Smalltalk removeKey: #DD ifAbsent: [].	Smalltalk removeKey: #Temp ifAbsent: []. 	Preferences setPreference: #quitWhenExitingImagineeringStudio toValue: true.	Preferences setPreference: #showDevelopersEToys toValue: false.	Preferences setPreference: #startImagineeringStudio toValue: true.	Preferences setPreference: #updateFromServerAtStartup toValue: false.	Preferences setPreference: #warnIfNoChangesFile toValue: false.	Preferences setPreference: #warnIfNoSourcesFile toValue: false.	Smalltalk minorShrink.	SystemOrganization removeSystemCategory: 'Morphic-Windows'.	SystemOrganization removeSystemCategory: 'Graphics-Files'. "No license for GIF reader"	ScriptingSystem reclaimSpace.	Smalltalk cleanOutUndeclared.	Smalltalk reclaimDependents.	Smalltalk forgetDoIts.	Smalltalk removeEmptyMessageCategories.	Socket deadServer: ''.	"Don't reveal any specific server name"	Symbol rehash.	Preferences desktopColor: (Color r: 0.2 g: 0.2 b: 0.2).	ScheduledControllers updateGray; restore.! !!Morph methodsFor: 'halos and balloon help' stamp: 'sw 10/8/1998 12:41'!showBalloon: msgString	"Pop up a balloon containing the given string, first removing any existing BalloonMorphs in the world."	| w balloon worldBounds |	w _ self world.	w ifNil: [^ self].	balloon _ BalloonMorph string: msgString for: self corner: #bottomRight.	w submorphsDo: [:m |  "delete any existing balloons"		(m isKindOf: BalloonMorph) ifTrue: [m delete]].	balloon lock.  "So that if the translation below makes it overlap the receiver, it won't interfere with the rootMorphsAt: logic and hence cause flashing.  Without this, flashing happens, believe me!!"	w addMorphFront: balloon.	((worldBounds _ w bounds) containsRect: balloon bounds) ifFalse:		[balloon bounds: (balloon bounds translatedToBeWithin: worldBounds)].	self setProperty: #balloon toValue: balloon.! !!HandMorph methodsFor: 'world menu' stamp: 'sw 10/13/1998 16:16'!helpDo	"Build the help menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'General help') defaultTarget: self.	menu addStayUpItem.	menu add: 'edit preferences...' target: Preferences action: #openPreferencesInspector.	menu add: 'command-key help' target: Utilities action: #openCommandKeyHelp.	menu add: 'font size summary' target: Utilities action: #fontSizeSummary.	menu add: 'useful expressions' target: Utilities action: #openStandardWorkspace.	menu add: 'view image imports' target: Smalltalk action: #viewImageImports.	menu addLine.	menu add: 'full screen on' target: screenCtrl action: #fullScreenOn.	menu add: 'full screen off' target: screenCtrl action: #fullScreenOff.	menu add: 'set display depth...' action: #setDisplayDepth.	menu add: 'set desktop color...' action: #changeBackgroundColor.	menu add: 'use texture background' target: self world action: #setStandardTexture.	gridOn		ifTrue: [menu add: 'turn gridding off' action: #setGridding]		ifFalse: [menu add: 'turn gridding on' action: #setGridding].	menu add: ((Preferences valueOfFlag: #disableSounds)							ifTrue: ['turn sound on']							ifFalse: ['turn sound off'])		target: screenCtrl action: #soundOnOrOff.	menu addLine.	menu add: 'update code from server' action: #absorbUpdatesFromServer.	menu add: 'about this system' target: screenCtrl action: #aboutThisSystem.	menu add: 'set author initials...' target: screenCtrl action: #setAuthorInitials.	menu add: 'vm statistics' target: screenCtrl action: #vmStatistics.	menu add: 'space left' target: screenCtrl action: #garbageCollect.	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 10/13/1998 16:16'!absorbUpdatesFromServer	Utilities updateFromServer! !!Preferences reorganize!('read me' readMe)!!Preferences methodsFor: 'read me' stamp: 'sw 10/1/1998 14:45'!readMe	"All the code for Preferences is on the class side"! !!Preferences class methodsFor: 'initialization' stamp: 'sw 10/13/1998 18:16'!chooseInitialSettings	"Restore the default choices for Preferences."	"Preferences chooseInitialSettings"	#(	(allowSysWindowEmbedding			false)		(browseWithPrettyPrint				false)		(cmdDotEnabled						true)		(confirmFirstUseOfStyle				true)		(disableSounds						false)		(fastDragWindowForMorphic			false)		(ignoreStyleIfOnlyBold				true)		(logDebuggerStackToFile				true)		(noviceMode							false)		(reverseWindowStagger				true)		(showDebugHaloHandle				true)		(showTimeStampsInMenuTitles		false)		(suppressCheckForSlips				false)		(suppressUpdateServerPrompt		false)		(thoroughSenders					true)		(unlimitedPaintArea					false)		(updateSavesFile						false)		(warnIfNoChangesFile				true)		(warnIfNoSourcesFile				true))	do:		[:aPair |			aPair last == #true				ifTrue:					[self enable: aPair first]				ifFalse:					[self disable: aPair first]]! !!Preferences class methodsFor: 'initialization' stamp: 'sw 10/8/1998 08:44'!initializeHelpMessages	"Preferences initializeHelpMessages"  	HelpDictionary _ Dictionary new.	#((allowSysWindowEmbedding'Determines whether, in Morphic,SystemWindows should automaticallybe droppable into willing receptors')(browseWithPrettyPrint'If true, browsers will automaticallyformat their contents')(cautionBeforeClosing 'If true, Morphic windows seen in anmvc project will put up a warning beforeallowing themselves to be dismissed')(cmdDotEnabled'If true, cmd-dot brings up a debugger;if false, the cmd-dot interrupt is disabled')(confirmFirstUseOfStyle'If true, the first attempt to submit amethod with non-standard style willbring up a confirmation dialog')(disableSounds'If true, all sound playing is disabled')	(editPlayerScriptsInPlace 'If true, textual player scripts areedited in place in Scriptors(still imperfectly implemented)')(fastDragWindowForMorphic'If true, morphic window dragwill be done by dragging anoutline of the window.')(ignoreStyleIfOnlyBold'If true, then any method submissionin which the only style change is forbolding will be treated as a methodwith no style specifications')(logDebuggerStackToFile'If true, whenever you fall into adebugger a summary of its stack willbe written to a file named''debugger stack''')(noviceMode 'If true, certain novice-modeaccommodations are made.')(reverseWindowStagger'If true, a reverse-stagger strategy  isused for determining where newly launchedwindows will be placed; if false, a direct-stagger strategy is used.')(showDebugHaloHandle 'If true, a special debugging halo handleis displayed at the right of the halo; if false,no such handle is shown.')(showTimeStampsInMenuTitles'If true, then the author''s timestampis displayed as the menu title of anymessage list; if false, no author''stimestamps are shown')(suppressCheckForSlips 'If false, then whenever you file outa change set, it is checked for ''slips'' andif any are found, you are so informed andgiven a chance to open a browser on them')(suppressUpdateServerPrompt'If true, the prompt for server choicewhen updating code from the server issuppressed.  Set this to true to leave theserver choice unchanged from update toupdate.')(thoroughSenders'If true, then ''senders'' browsers will diveinside structured literals in their search')(uniformWindowColors'If true, then all standard windows are giventhe same color rather than their customizedwindow-type-specific colors')(unlimitedPaintArea'If true, the painting area for a new drawingwill not be limited in size; if false, a reasonablelimit will be applied, in an attempt to hold downmemory and time price.')(updateRemoveSequenceNum'If true, then remove the leading sequencenumber from the filename before automaticallysaving a local copy of any update loaded.')(updateSavesFile'If true, then when an update is loaded fromthe server, a copy of it will automaticallybe saved on a local file as well.')(warnIfNoChangesFile'If true, then you will be warned,whenever you start up, if no changes filecan be found')(warnIfNoSourcesFile 'If true, then you will be warned,whenever you start up, if no sourcesfile can be found')) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sw 10/8/1998 12:46'!deletePreferenceIfFalse: aSymbol	"If aSymbol is currently in the FlagDictionary and the corresponding value is currently false, then remove that element from the dictionary.  The result is that the preference will remain false when interrogated from the outside, but it will not show up in a Preferences control panel.  This keeps obscure preferences from distracting the user"	| val |	val _ FlagDictionary at: aSymbol ifAbsent: [^ self].	val == false ifTrue: [self deletePreference: aSymbol]! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sw 10/5/1998 13:09'!inspectPreferences	"Open a window on the current preferences dictionary, allowing the user to inspect and change the current preference settings.  This is fallen back upon if Morphic is not present"	"Preferences inspectPreferences"	FlagDictionary inspectWithLabel: 'Preferences'! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sw 10/5/1998 13:10'!openPreferencesInspector	"Open a window on the current set of preferences choices, allowing the user to view and change their settings"		Smalltalk hasMorphic		ifFalse:	[self inspectPreferences]		ifTrue:	[self openPreferencesControlPanel]! !!Preferences class methodsFor: 'preferences panel' stamp: 'sw 10/1/1998 15:24'!helpMessageForPreference: aSymbol	HelpDictionary ifNil: [self initializeHelpMessages].	^ HelpDictionary at: aSymbol ifAbsent: ['No help available for ', aSymbol]! !!Preferences class methodsFor: 'preferences panel' stamp: 'sw 10/5/1998 12:35'!initialExtent	^ 216 @ ((FlagDictionary size * 19) + 20)! !!Preferences class methodsFor: 'preferences panel' stamp: 'sw 10/13/1998 14:24'!openPreferencesControlPanel	"Preferences openPreferencesControlPanel"	| aPanel aWindow aRow wrapper but aList odd aColor w width1 width2 spacer |	Smalltalk verifyMorphicAvailability ifFalse: [^ self beep].	aPanel _ AlignmentMorph newColumn.	aPanel beSticky.	aList _ OrderedCollection new.	FlagDictionary associationsDo: [:assoc | aList add: (Array				with: assoc key				with: assoc value				with: (self helpMessageForPreference: assoc key))].	odd _ false.	Smalltalk isMorphic		ifTrue:			[width1 _ 172.			spacer _ 4.			width2 _ 14]		ifFalse:			[width1 _ 172.			spacer _ 50.			width2 _ 90].	(aList asSortedCollection: [:a :b | a first < b first])		do: 			[:triplet | 			aPanel addMorphBack: (aRow _ AlignmentMorph newRow).			aRow color: (aColor _ odd							ifTrue: [Color green muchLighter]							ifFalse: [Color red veryMuchLighter]).			odd _ odd not.			aRow addMorph: (wrapper _ Morph new color: aColor).			wrapper setBalloonText: triplet third.			wrapper extent: width1 @ 15.			wrapper addMorph: (StringMorph new contents: triplet first).			aRow addMorphBack: (Morph new color: aColor; extent: (spacer @ 15)).			aRow addMorphBack: (wrapper _ Morph new color: aColor).			wrapper extent: width2 @ 15.			wrapper addMorphBack: (but _ UpdatingBooleanStringMorph new contents: triplet second printString).			but getSelector: triplet first;			 putSelector: #setPreference:toValue:;			 target: self].	Smalltalk isMorphic		ifTrue:			[aWindow _ SystemWindow new model: self.			aWindow addMorph: aPanel frame: (0 @ 0 extent: 1 @ 1).			aWindow setLabel: 'Preferences'.			aWindow openInWorld]		ifFalse:			[w _ WorldMorph new addMorph: aPanel.			w startSteppingSubmorphsOf: aPanel.			MorphWorldView openOn: w				label: 'Preferences'				extent: w fullBounds extent]! !!Preferences class methodsFor: 'preferences panel' stamp: 'sw 10/1/1998 16:55'!scriptPerformer	^ self! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 10/13/1998 16:03'!absorbUpdatesFromServer 	Utilities updateFromServer! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'sw 10/8/1998 09:19'!editScriptTextually	| newBrowser |	self becomeTextuallyCoded.	(newBrowser _ Browser new) setClass: playerScripted class selector: scriptName.	(Preferences valueOfFlag: #editPlayerScriptsInPlace)		ifTrue:			[self addTextualScript: newBrowser]		ifFalse:			[Browser openBrowserView: (newBrowser openMessageEditString: nil) label: ('textual script for "', scriptName, '" in ', playerScripted externalName)]! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sw 10/13/1998 16:06'!processUpdates	"Process update files from a well-known update server.  This method is called at system startup time,   Only if the preference #updateFromServerAtStartup is true is the actual update processing undertaken automatically"	| choice |	(Preferences valueOfFlag: #updateFromServerAtStartup) ifTrue:		[choice _ (PopUpMenu labels: 'Yes, Update\No, Not now' withCRs)			startUpWithCaption: 'Shall I look for new code\updates on the server?' withCRs.		choice = 1 ifTrue: [Utilities updateFromServer]].! !!UpdatingBooleanStringMorph commentStamp: '<historical>' prior: 0!A customized updating-string-morph used for displaying and editing boolean values; mouse-down on one of these is inerpreted as a request to toggle.!!UpdatingBooleanStringMorph reorganize!('all' handlesMouseDown: informTarget mouseDown:)!!UpdatingBooleanStringMorph methodsFor: 'all' stamp: 'sw 10/1/1998 16:59'!handlesMouseDown: evt	^ true! !!UpdatingBooleanStringMorph methodsFor: 'all' stamp: 'sw 10/1/1998 16:49'!informTarget	| newValue |	((target ~~ nil) and: [putSelector ~~ nil]) ifTrue:		[newValue _ self valueFromContents.		newValue ifNotNil:			[target scriptPerformer perform: putSelector with: getSelector with: newValue.			target isMorph ifTrue: [target changed]].			self growable ifTrue:				[self readFromTarget; fitContents.				owner updateLiteralLabel]]! !!UpdatingBooleanStringMorph methodsFor: 'all' stamp: 'sw 10/5/1998 12:12'!mouseDown: evt	self contentsClipped: (target perform: getSelector) not asString.	self informTarget! !!Utilities class methodsFor: 'fetching updates' stamp: 'sw 10/13/1998 15:57'!broadcastUpdatesFrom: n1 to: n2 except: skipList"	ChangeSorter removeChangeSetsNamedSuchThat:		[:name | name first isDigit and: [name initialInteger > 412]].	Utilities readServerUpdatesSaveLocally: true updateImage: true.	Utilities broadcastUpdatesFrom: 413 to: 999 except: #().	Utilities readServerUpdatesSaveLocally: true updateImage: false       The expression above ftps all updates not in the current image over to the local       hard disk, but does NOT absorb them into the current image"	| fileNames fileNamesInOrder fileNamesUnnumbered names choice |	names _ ServerDirectory groupNames asSortedArray.	choice _ (SelectionMenu labelList: names selections: names) startUp.	choice == nil ifTrue: [^ self].	fileNames _ FileDirectory default fileNames select:		[:n | n first isDigit			and: [(n initialInteger between: n1 and: n2)			and: [(skipList includes: n initialInteger) not]]].	fileNamesInOrder _ fileNames asSortedCollection.	fileNamesUnnumbered _ fileNamesInOrder collect:		[:n | n copyFrom: (n findFirst: [:c | c isDigit not]) to: n size].	fileNamesInOrder with: fileNamesUnnumbered do:		[:n :nu | FileDirectory default rename: n toBe: nu].	(ServerDirectory groupNamed: choice) putUpdateMulti: fileNamesUnnumbered! !!Utilities class methodsFor: 'fetching updates' stamp: 'sw 10/13/1998 15:02'!chooseUpdateList	"When there is more than one set of update servers, let the user choose which we will update from.  Put it at the front of the list. Return false if the user aborted.  If the preference #suppressUpdateServerPrompt is true, then suppress that prompt, in effect using the same server choice that was used the previous time (a convenience for those of us who always answer the same thing to the prompt.)"	| index him |	((UpdateUrlLists size > 1) and: [(Preferences valueOfFlag: #suppressUpdateServerPrompt) == false])		ifTrue:			[index _ (PopUpMenu labelArray: (UpdateUrlLists collect: [:each | each first]) lines: #()) 				startUpWithCaption: 'Choose a group of serversfrom which to fetch updates.'.			index > 0 ifTrue:				[him _ UpdateUrlLists at: index.				UpdateUrlLists removeAt: index.				UpdateUrlLists addFirst: him].			^ index > 0].	^ true! !!Utilities class methodsFor: 'fetching updates' stamp: 'sw 10/13/1998 15:48'!readServerUpdatesSaveLocally: saveLocally updateImage: updateImage	"Scan the update server(s) for unassimilated updates.  If saveLocally is true, then save local copies of the update files on disc.  If updateImage is true, then absorb the updates into the current image.A file on the server called updates.list has the names of the last N update files.  We look backwards for the first one we do not have, and start there""* To add a new update:  Name it starting with a new two-digit code.  * Do not use %, /, *, space, or more than one period in the name of an update file.* The update name does not need to have any relation to the version name.* Figure out which versions of the system the update makes sense for.* Add the name of the file to each version's category below.* Put this file and the update file on all of the servers.** To make a new version of the system:  Pick a name for it (no restrictions)* Put # and exactly that name on a new line at the end of this file.* During the release process, fill in exactly that name in the dialog box.* Put this file on the server.""Utilities readServerUpdatesSaveLocally: true updateImage: true.""Utilities readServerUpdatesSaveLocally: false updateImage: true.""Utilities readServerUpdatesSaveLocally: true updateImage: false."	| doc urls failed loaded str |	Utilities chooseUpdateList ifFalse: [^ self].	"ask the user which kind of updates"	Cursor wait showWhile: [(Smalltalk includesKey: #EToySystem)		ifTrue: [ScriptingSystem guessDOLProxy].	urls _ self newUpdatesOn: 		(Utilities serverUrls collect: [:url | url, 'updates/']).	loaded _ 0.	failed _ nil.	urls do: [:this |		failed ifNil:			[doc _ HTTPSocket httpGet: this accept: 'application/octet-stream'.			doc class == String				ifTrue: [failed _ this]	"an error loading"				ifFalse:					[doc reset; text.					doc peek asciiValue = 4	"pure object file"						ifTrue: [failed _ this]	"Must be fileIn, not pure object file"						ifFalse:							["(this endsWith: '.html') ifTrue: [doc _ doc asHtml]."								"HTML source code not supported here yet"							updateImage ifTrue:									[ChangeSorter newChangesFromStream: doc									named: (this findTokens: '/') last].							saveLocally ifTrue:								[self saveUpdate: doc onFile: (this findTokens: '/') last].	"if wanted"							loaded _ loaded + 1]]]]].	str _ loaded printString ,' new update files processed.'.	failed ifNotNil: [str _ str, '\Could not load ' withCRs, (urls size - loaded) printString ,' update files.',						'\Starting with "' withCRs, failed, '".'].	self inform: str.! !!Utilities class methodsFor: 'fetching updates' stamp: 'sw 10/13/1998 16:13'!saveUpdate: doc onFile: fileName	"Save the update on a local file.  With or without the update number on the front, depending on the preference #updateRemoveSequenceNum"	| file fName pos |	fName _ fileName.	(Preferences valueOfFlag: #updateRemoveSequenceNum) ifTrue:		[pos _ fName findFirst: [:c | c isDigit not].		fName _ fName copyFrom: pos to: fName size].	doc reset; ascii.	(FileDirectory default fileExists: fName) ifFalse:		[file _ FileStream newFileNamed: fName.		file nextPutAll: doc contents.		file close].! !!Utilities class methodsFor: 'fetching updates' stamp: 'sw 10/13/1998 16:03'!updateFromServer	"Update the image by loading all pending updates from the server.  Also save local copies of the update files if the #updateSavesFile preference is set to true"	self readServerUpdatesSaveLocally: Preferences updateSavesFile updateImage: true! !EToySystem class removeSelector: #guessDOLProxy!HandMorph removeSelector: #updateFromServer!Utilities class removeSelector: #absorbUpdatesWriteFiles:zapNums:!Utilities class removeSelector: #absorbUpdatesFromServer!"Postscript:"Preferences deletePreference: #cautionBeforeClosing.Preferences disable: #suppressUpdateServerPrompt.Preferences disable: #unlimitedPaintArea.Preferences disable: #updateSavesFile.Preferences deletePreferenceIfFalse: #editPlayerScriptsInPlace.Preferences deletePreferenceIfFalse: #uniformWindowColors.!