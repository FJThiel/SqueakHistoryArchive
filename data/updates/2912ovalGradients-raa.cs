'From Squeak2.9alpha of 17 July 2000 [latest update: #2960] on 6 November 2000 at 4:42:33 pm'!"Change Set:		ovalGradientsDate:			6 November 2000Author:			Bob Arning- permits ovals with gradient fills to be seen correctly in Nebraska"!!CanvasDecoder methodsFor: 'decoding' stamp: 'RAA 11/6/2000 15:40'!drawBalloonOval: command	| aRectangle aFillStyle borderWidth borderColor |	aRectangle _ self class decodeRectangle: (command at: 2).	aFillStyle _ self class decodeFillStyle: (command at: 3).	borderWidth _ self class decodeInteger: (command at: 4).	borderColor _ self class decodeColor: (command at: 5).	self drawCommand: [ :c |		c asBalloonCanvas 			fillOval: aRectangle			fillStyle: aFillStyle			borderWidth: borderWidth			borderColor: borderColor	].! !!CanvasDecoder methodsFor: 'decoding' stamp: 'RAA 11/6/2000 15:36'!processCommand: command  onForceDo: forceBlock	| verb verbCode |	command isEmpty ifTrue: [ ^self ].	verb _ command first.	verbCode := verb at: 1.	verbCode = CanvasEncoder codeClip ifTrue: [ ^self setClip: command ].	verbCode = CanvasEncoder codeTransform ifTrue: [ ^self setTransform: command ].	verbCode = CanvasEncoder codeText ifTrue: [ ^self drawText: command ].	verbCode = CanvasEncoder codeLine ifTrue: [ ^self drawLine: command ].	verbCode = CanvasEncoder codeRect ifTrue: [ ^self drawRect: command ].	verbCode = CanvasEncoder codeBalloonRect ifTrue: [ ^self drawBalloonRect: command ].	verbCode = CanvasEncoder codeBalloonOval ifTrue: [ ^self drawBalloonOval: command ].	verbCode = CanvasEncoder codeInfiniteFill ifTrue: [ ^self drawInfiniteFill: command ].	verbCode = CanvasEncoder codeOval ifTrue: [ ^self drawOval: command ].	verbCode = CanvasEncoder codeImage ifTrue: [ ^self drawImage: command ].	verbCode = CanvasEncoder codeReleaseCache ifTrue: [ ^self releaseImage: command ].	verbCode = CanvasEncoder codePoly ifTrue: [ ^self drawPoly: command ].	verbCode = CanvasEncoder codeStencil ifTrue: [ ^self drawStencil: command ].	verbCode = CanvasEncoder codeForce ifTrue: [ ^self forceToScreen: command withBlock: forceBlock ].	verbCode = CanvasEncoder codeFont ifTrue: [ ^self addFontToCache: command ].	verbCode = CanvasEncoder codeExtentDepth ifTrue: [ ^self extentDepth: command ].self error: 'unknown command: ', command first.! !!CanvasEncoder methodsFor: 'drawing' stamp: 'RAA 11/6/2000 15:38'!balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	self sendCommand: {		String with: CanvasEncoder codeBalloonOval.		self class encodeRectangle: aRectangle.		aFillStyle encodeForRemoteCanvas.		self class encodeInteger: bw.		self class encodeColor: bc.	}! !!CanvasEncoder class methodsFor: 'codes' stamp: 'RAA 11/6/2000 15:28'!codeBalloonOval	^$O! !!CanvasEncoder class methodsFor: 'as yet unclassified' stamp: 'RAA 11/6/2000 15:29'!nameForCode: aStringOrChar	| ch |	ch _ (aStringOrChar isKindOf: String) ifTrue: [aStringOrChar first] ifFalse: [aStringOrChar].	ch == self codeBalloonOval ifTrue: [^'balloon oval'].	ch == self codeBalloonRect ifTrue: [^'balloon rectangle'].	ch == self codeClip ifTrue: [^'clip'].	ch == self codeExtentDepth ifTrue: [^'codeExtentDepth'].	ch == self codeFont ifTrue: [^'codeFont'].	ch == self codeForce ifTrue: [^'codeForce'].	ch == self codeImage ifTrue: [^'codeImage'].	ch == self codeLine ifTrue: [^'codeLine'].	ch == self codeOval ifTrue: [^'codeOval'].	ch == self codePoly ifTrue: [^'codePoly'].	ch == self codeRect ifTrue: [^'codeRect'].	ch == self codeReleaseCache ifTrue: [^'codeReleaseCache'].	ch == self codeStencil ifTrue: [^'codeStencil'].	ch == self codeText ifTrue: [^'codeText'].	ch == self codeTransform ifTrue: [^'codeTransform'].	ch == self codeInfiniteFill ifTrue: [^'codeInfiniteFill'].	^'????'! !!FormCanvas methodsFor: 'drawing-ovals' stamp: 'RAA 11/6/2000 15:21'!balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	self asBalloonCanvas		fillOval: aRectangle		fillStyle: aFillStyle		borderWidth: bw		borderColor: bc! !!FormCanvas methodsFor: 'drawing-ovals' stamp: 'RAA 11/6/2000 16:42'!fillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	"Fill the given oval."	self flag: #bob.		"this and its siblings could be moved up to Canvas with the						right #balloonFillOval:..."	self shadowColor ifNotNil:		[^self fillOval: aRectangle color: aFillStyle asColor borderWidth: bw borderColor: bc].	(aFillStyle isBitmapFill and:[aFillStyle isKindOf: InfiniteForm]) ifTrue:[		self flag: #fixThis.		^self fillOval: aRectangle color: aFillStyle borderWidth: bw borderColor: bc].	(aFillStyle isSolidFill) ifTrue:[		^self fillOval: aRectangle color: aFillStyle asColor borderWidth: bw borderColor: bc].	"Use a BalloonCanvas instead"	self balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc! !!PluggableCanvas methodsFor: 'canvas methods' stamp: 'RAA 11/6/2000 16:33'!balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	self apply: [ :c | 		c balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	]! !!PluggableCanvas methodsFor: 'canvas methods' stamp: 'RAA 11/6/2000 16:32'!fillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	"Fill the given oval."	self shadowColor ifNotNil:		[^self fillOval: aRectangle color: aFillStyle asColor borderWidth: bw borderColor: bc].	(aFillStyle isBitmapFill and:[aFillStyle isKindOf: InfiniteForm]) ifTrue:[		self flag: #fixThis.		^self fillOval: aRectangle color: aFillStyle borderWidth: bw borderColor: bc].	(aFillStyle isSolidFill) ifTrue:[		^self fillOval: aRectangle color: aFillStyle asColor borderWidth: bw borderColor: bc].	"Use a BalloonCanvas instead"	self balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc! !!RemoteCanvas methodsFor: 'drawing' stamp: 'RAA 11/6/2000 15:26'!balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	self drawCommand: [ :executor |		executor balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	].! !!RemoteCanvas methodsFor: 'drawing' stamp: 'RAA 11/6/2000 15:25'!fillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc	"Fill the given oval."	self shadowColor ifNotNil: [		^self fillOval: aRectangle color: aFillStyle asColor borderWidth: bw borderColor: bc	].	(aFillStyle isBitmapFill and:[aFillStyle isKindOf: InfiniteForm]) ifTrue:[		self flag: #fixThis.		^self fillOval: aRectangle color: aFillStyle borderWidth: bw borderColor: bc	].	(aFillStyle isSolidFill) ifTrue:[		^self fillOval: aRectangle color: aFillStyle asColor borderWidth: bw borderColor: bc	].	"Use a BalloonCanvas instead"	self balloonFillOval: aRectangle fillStyle: aFillStyle borderWidth: bw borderColor: bc! !