'From Squeak 2.4c of May 10, 1999 on 8 July 1999 at 1:37:36 pm'!"Change Set:		chgSorterAdditions-swDate:			8 July 1999Author:			Scott WallaceAdds a new feature (accessible through the shifted change-set-list menu) which allows you to check for conflicts between the change-sets on the two sides of the sorter.  (Formerly, you could only check for conflicts between one change set and *all other* change sets in the system; this new command lets you compare two change sets head to head.  The other command is of course also still available.)In a dual change sorter, checks whether both sides of the sorter are pointing at the same change set before carrying out actions which, to be meaningful, require that the change sets on the two sides be different.While at it, reorders the shifted change set menu, and uses the more modern protocol to construct it, and also adds balloon help for all items in it."!!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/8/1999 13:36'!checkThatSidesDiffer: escapeBlock	"If the change sets on both sides of the dual sorter are the same, put up an error message and escape via escapeBlock, else proceed happily"	(myChangeSet == (parent other: self) changeSet)		ifTrue:			[self inform: 'This command requires that thechange sets selected on the twosides of the change sorter *not*be the same.'.			^ escapeBlock value]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/8/1999 12:30'!copyAllToOther	"Copy this entire change set into the one on the other side"	| other nextToView ii |	self checkThatSidesDiffer: [^ self].	other _ (parent other: self) myChangeSet.	other assimilateAllChangesFoundIn: myChangeSet.	(parent other: self) changed: #classList.	"Later the changeSet itself will notice..."	(parent other: self) changed: #messageList.	nextToView _ ((AllChangeSets includes: myChangeSet)			and: [(ii _ AllChangeSets indexOf: myChangeSet) < AllChangeSets size])		ifTrue: [AllChangeSets at: ii+1]		ifFalse: [myChangeSet].	self showChangeSet: nextToView! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/8/1999 13:10'!methodConflictsWithOtherSide	"Check to see if the change set on the other side shares any methods with the selected change set; if so, open a browser on all such."	| aList aClass aSelector other |	self checkThatSidesDiffer: [^ self].	other _ (parent other: self) changeSet.	aList _ myChangeSet changedMessageListAugmented select:		[:aChange |			MessageSet parse: aChange toClassAndSelector: [:cls :sel | aClass _ cls.  aSelector _ sel].			(other methodChangesAtClass: aClass name) includesKey: aSelector].	aList size == 0 ifTrue: [^ self inform: 'There are no methods that appearboth in this change set andin the one on the other side.'].		MessageSet openMessageList: aList name: 'Methods in "', myChangeSet name, '" that are also in ', other name,' (', aList size printString, ')'	! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/8/1999 13:15'!shiftedChangeSetMenu: aMenu	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with opposite side' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.].	aMenu addLine.	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'go to change set''s project' action: #goToChangeSetsProject.	aMenu balloonTextForLastItem: 'If this change set is currently associated with a Project, go to that project right now.'.	aMenu add: 'file into new...' action: #fileIntoNewChangeSet.	aMenu balloonTextForLastItem: 'Load a fileout from disk and place its changes into a new change set (seldom needed -- much better to do this from a file-list browser these days.)'.	aMenu add: 'clear' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu addLine.	aMenu add: 'more...' action: #unshiftedYellowButtonActivity.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/8/1999 12:31'!submergeIntoOtherSide	"Copy the contents of the receiver to the other side, then remove the receiver -- all after checking that all is well."	| other message nextToView i |	self checkThatSidesDiffer: [^ self].	self okToChange ifFalse: [^ self].	other _ (parent other: self) changeSet.	other == myChangeSet ifTrue: [^ self inform: 'Both sides are the same!!'].	myChangeSet isEmpty ifTrue: [^ self inform: 'Nothing to copy.  To remove,simply choose "remove".'].	myChangeSet okayToRemove ifFalse: [^ self].	message _ 'Please confirm:  copy all changesin "', myChangeSet name, '" into "', other name, '"and then destroy the change setnamed "', myChangeSet name, '"?'. 	(self confirm: message) ifFalse: [^ self].	other assimilateAllChangesFoundIn: myChangeSet.	nextToView _ ((AllChangeSets includes: myChangeSet)		and: [(i _ AllChangeSets indexOf: myChangeSet) < AllChangeSets size])		ifTrue: [AllChangeSets at: i+1]		ifFalse: [other].	self removePrompting: false.	self showChangeSet: nextToView.	self class gatherChangeSets.	parent modelWakeUp.	"(parent other: self) changed: #classList.	(parent other: self) changed: #messageList."! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 7/8/1999 12:32'!subtractOtherSide	"Subtract the changes found on the other side from the requesting side."	self checkThatSidesDiffer: [^ self].	myChangeSet forgetAllChangesFoundIn: ((parent other: self) changeSet).	self showChangeSet: myChangeSet! !!ChangeSorter methodsFor: 'class list' stamp: 'sw 7/8/1999 12:30'!copyClassToOther	"Place these changes in the other changeSet also"	| other |	self checkThatSidesDiffer: [^ self].	other _ (parent other: self) changeSet.	(myChangeSet classRemoves includes: currentClassName) ifTrue: [			^ other absorbClass: currentClassName from: myChangeSet].	other absorbClass: self selectedClassOrMetaClass from: myChangeSet.	(parent other: self) showChangeSet: other.! !!ChangeSorter methodsFor: 'class list' stamp: 'sw 7/8/1999 12:31'!moveClassToOther	"Place class changes in the other changeSet and remove them from this one"	| cls otherSorter otherChangeSet |	self checkThatSidesDiffer: [^ self].	self okToChange ifFalse: [^ self beep].	currentClassName ifNil: [^ self beep].	otherSorter _ parent other: self.	otherChangeSet _ otherSorter changeSet.	otherChangeSet == myChangeSet ifTrue: [^ self beep].	(myChangeSet classRemoves includes: currentClassName)		ifTrue:			[otherChangeSet noteRemovalOf: currentClassName]		ifFalse:			[cls _ self selectedClassOrMetaClass.			otherChangeSet absorbClass: cls from: myChangeSet].	otherSorter showChangeSet: otherChangeSet.	self forgetClass! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 7/8/1999 12:31'!copyMethodToOther	"Place this change in the other changeSet also"	| other cls sel |	self checkThatSidesDiffer: [^ self].	currentSelector ifNotNil:		[other _ (parent other: self) changeSet.		cls _ self selectedClassOrMetaClass.		sel _ currentSelector asSymbol.		other absorbMethod: sel class: cls from: myChangeSet.		(parent other: self) showChangeSet: other]! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 7/8/1999 12:31'!moveMethodToOther	"Place this change in the other changeSet and remove it from this side"	| other cls sel |	self checkThatSidesDiffer: [^ self].	self okToChange ifFalse: [^ self beep].	currentSelector ifNotNil:		[other _ (parent other: self) changeSet.		other == myChangeSet ifTrue: [^ self beep].		cls _ self selectedClassOrMetaClass.		sel _ currentSelector asSymbol.		other absorbMethod: sel class: cls from: myChangeSet.			(parent other: self) showChangeSet: other.		self forget "removes the method from this side"]! !