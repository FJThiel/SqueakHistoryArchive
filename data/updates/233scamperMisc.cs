'From Squeak 2.1 of June 30, 1998 on 8 September 1998 at 9:50:39 pm'!TextAction subclass: #TextURL	instanceVariableNames: 'url '	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Text'!!Object methodsFor: 'testing' stamp: 'ls 7/14/1998 21:45'!isWebBrowser	"whether this object is a web browser.  See class: Scamper"	^false! !!MIDIFileReader class methodsFor: 'all' stamp: 'ls 8/8/1998 03:14'!playStream: binaryStream	ScorePlayerMorph		openOn: (self scoreFromStream: binaryStream)		title: 'a MIDI stream'! !!MIDIFileReader class methodsFor: 'all' stamp: 'ls 8/8/1998 03:14'!scoreFromStream: binaryStream	|  score |	score _ (self new readMIDIFrom: binaryStream) asScore.	^ score! !!Text methodsFor: 'accessing' stamp: 'ls 7/29/1998 01:17'!embeddedMorphs	"return the list of morphs embedded in me"	| morphs |	morphs _ IdentitySet new.	runs withStartStopAndValueDo: [ :start :stop :attribs | attribs do: [ :attrib |		(attrib isKindOf: TextAnchor) ifTrue: [  morphs add: attrib anchoredMorph ] ] ].	^morphs select: [ :m | m isKindOf: Morph ]! !!Text methodsFor: 'emphasis' stamp: 'ls 7/4/1998 16:13'!fontAt: characterIndex withStyle: aTextStyle	"Answer the fontfor characters in the run beginning at characterIndex."	| attributes font |	self size = 0 ifTrue: [^ aTextStyle fontAt: 1].	"null text tolerates access"	attributes _ runs at: characterIndex.	font _ aTextStyle fontAt: 1.  "default"	attributes do: 		[:att | att forFontInStyle: aTextStyle do: [:f | font _ f]].	^ font	! !!TextMorph methodsFor: 'accessing' stamp: 'ls 9/5/1998 18:19'!newContents: stringOrText	"Accept new text contents."	| newText |	newText _ stringOrText asText.	text = newText ifTrue: [^ self].  "No substantive change"	text ifNotNil: [		text embeddedMorphs do: [ :m | m delete ] ].	text _ newText.	"add all morphs off the visible region; they'll be moved into the right place when they become visible"	stringOrText asText embeddedMorphs do: [ :m | 		self addMorph: m. 		m position: (-1000@-1000)].	self releaseParagraph.  "update the paragraph cache"	self paragraph.  "re-instantiate to set bounds"! !!TextURL methodsFor: 'as yet unclassified' stamp: 'ls 7/18/1998 01:20'!actOnClickFor: anObject	"Do what you can with this URL.  Later a web browser."	| response m | 	"if it's a web browser, tell it to jump"	anObject isWebBrowser ifTrue: [		anObject jumpToUrl: url.		^true ].	"if it's a morph, see if it is contained in a web browser"	(anObject isKindOf: Morph) ifTrue: [		m _ anObject.		[ m ~= nil ] whileTrue: [			(m isWebBrowser) ifTrue: [ 				m  jumpToUrl: url.  				^true ].			(m hasProperty: #webBrowserView) ifTrue: [				m model jumpToUrl: url.				^true ].			m _ m owner. ]	].	"no browser in sight.  If it's a gif we could display it..."	(url asLowercase endsWith: '.gif') ifTrue: [		^HTTPSocket httpShowGif: url].	"all attempts failed..."		response _ (PopUpMenu labels: 'View web page as source\Cancel' withCRs)		startUpWithCaption: 'Couldn''t find a web browser.  View page as source?'.	response = 1 ifTrue: [HTTPSocket httpShowPage: url].	^ true! !