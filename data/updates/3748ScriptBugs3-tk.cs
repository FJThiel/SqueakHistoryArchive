'From Squeak3.1alpha of 4 February 2001 [latest update: #3752] on 1 March 2001 at 11:25:49 am'!!BooleanScriptEditor methodsFor: 'as yet unclassified' stamp: 'tk 3/1/2001 11:24'!hibernate 	"do nothing"! !!BooleanScriptEditor methodsFor: 'as yet unclassified' stamp: 'tk 2/28/2001 21:07'!unhibernate 	"do nothing"! !!CompoundTileMorph methodsFor: 'mouse' stamp: 'tk 2/28/2001 21:22'!handlesMouseDown: evt	^true! !!CompoundTileMorph methodsFor: 'mouse' stamp: 'tk 2/28/2001 21:25'!mouseDown: evt 	"Pretend we picked up the tile and then put it down for a trial  	positioning."	"The essence of ScriptEditor mouseEnter:"	| ed ss guyToTake |"	self isPartsDonor ifTrue:[		dup _ self duplicate.		evt hand attachMorph: dup.		dup position: evt position.		^self].	submorphs isEmpty 			never true		ifTrue: [^ self]."	(ed _ self enclosingEditor) ifNil: [^evt hand grabMorph: self].	guyToTake _ self.	owner class == TilePadMorph		ifTrue: ["picking me out of another phrase"			(ss _ submorphs first) class == TilePadMorph				ifTrue: [ss _ ss submorphs first].			guyToTake _  ss veryDeepCopy].	evt hand grabMorph: guyToTake.	ed startStepping.	ed mouseEnterDragging: evt.	ed setProperty: #justPickedUpPhrase toValue: true.! !!ScriptEvaluatorMorph methodsFor: 'display' stamp: 'tk 3/1/2001 11:25'!hibernate 	"do nothing"! !!ScriptEvaluatorMorph methodsFor: 'display' stamp: 'tk 2/28/2001 21:08'!unhibernate 	"do nothing"! !!SyntaxMorph methodsFor: 'type checking' stamp: 'tk 2/28/2001 21:09'!resultType	| list value soundChoices |	"Look up my result type.  If I am a constant, use that class.  If I am a message, look up the selector."	parseNode class == BlockNode ifTrue: [^ #blockContext].	parseNode class == AssignmentNode ifTrue: [^ #command].	parseNode class == ReturnNode ifTrue: [^ #command].	"Need more restriction than this"	list _ submorphs select: [:ss | ss isSyntaxMorph and: [ss parseNode ~~ nil]].	list size > 1 ifTrue: [^ self resultTypeFor: self selector].	list size = 1 ifTrue: ["test for levels that are just for spacing in layout"		(list first isSyntaxMorph and: [list first nodeClassIs: MessageNode]) ifTrue: [			^ list first resultType]].	"go down one level"	value _ self try.	value class == Error ifTrue: [^ #unknown].	(value isKindOf: Number) ifTrue: [^ #number].	(value isKindOf: Boolean) ifTrue: [^ #boolean].	value class == String ifTrue: [		soundChoices _ #('silence').  "default, if no SampledSound class"		Smalltalk at: #SampledSound ifPresent:			[:sampledSound | soundChoices _ sampledSound soundNames].		(soundChoices includes: value) ifTrue: [^ #sound]].	(value isKindOf: Player) ifTrue: [^ #player].	^ value class name asLowercase "asSymbol (not needed)"! !