'From Squeak 2.3 beta of Nov 25, 1998 on 14 December 1998 at 7:27:28 pm'!!BookMorph methodsFor: 'initialization' stamp: 'tk 12/14/1998 19:10'!fromRemoteStream: strm	"Make a book from an index and a bunch of pages on a server.  NOT showing any page!!"	| remote |	remote _ strm fileInObjectAndCode.	self initialize.	pages _ OrderedCollection new.	2 to: remote size do: [:ii | pages add: (remote at: ii)].	currentPage fullReleaseCachedState; delete.	"the blank one"	currentPage _ remote at: 2.	self setProperty: #modTime toValue: ((remote at: 1) at: #modTime).	^ self! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/14/1998 15:32'!getStemUrl	"Try to find the old place where this book was stored.  Confirm with the user.  Else ask for new place."| initial pg url ll knownURL |initial _ ''.(pg _ currentPage valueOfProperty: #SqueakPage) ifNotNil: [	pg contentsMorph == currentPage ifTrue: [		initial _ pg url.		knownURL _ true]].	"If this page has a url"pages doWithIndex: [:aPage :ind |	initial size = 0 ifTrue: [		aPage isInMemory ifTrue: [			(pg _ aPage valueOfProperty: #SqueakPage) ifNotNil: [				initial _ pg url]]]].	"any page with a url"initial size = 0 ifTrue: [initial _ 'ftp://server/books/myBook/page1.sp'].knownURL ifNil: [	url _ FillInTheBlank 			request: 'url of the place to store a typical page in this book.	Must begin with file:// or ftp://' 			initialAnswer: initial].knownURL ifNotNil: [url _ initial].ll _ url findLast: [:char | char == $.].ll = 0 ifFalse: [url _ url copyFrom: 1 to: ll-1].	"remove .sp"url _ (url stemAndNumericSuffix) at: 1.		"remove trailing number"[url last == $x] whileTrue: [url _ url allButLast].^ url! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/14/1998 15:33'!invokeBookMenu	"Invoke the book's control panel menu."	| aMenu sel |	aMenu _ MVCMenuMorph new.	aMenu addList:	#(			('sort pages'				sortPages)			('make bookmark'		bookmarkForThisPage)			('make thumbnail'		thumbnailForThisPage)			('remove control panel'	hidePageControls)		).	(self primaryHand classOfPasteBuffer isKindOf: PasteUpMorph class) ifTrue:		[aMenu add: 'paste book page'	action: #pasteBookPage].	aMenu add: 'save as new-page prototype' action: #setNewPagePrototype.	newPagePrototype ifNotNil: [		aMenu add: 'clear new-page prototype' action: #clearNewPagePrototype].	aMenu add: (openToDragNDrop ifTrue: ['close'] ifFalse: ['open']) , ' dragNdrop'			action: #openCloseDragNDrop.	aMenu add: 'send all pages to server' action: #savePagesOnURL.	aMenu add: 'send this page to server' action: #saveOneOnURL.	aMenu add: 'reload all from server' action: #reload.	aMenu add: 'keep in one file' action: #keepTogether.	sel _ aMenu invokeAt: self primaryHand position in: self world.	sel ifNotNil: [self perform: sel].! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/14/1998 09:58'!saveOneOnURL	"Write out this single page in this book that are not showing, onto a server.  See savePagesOnURL."	| stem aPage ind |	(self valueOfProperty: #keepTogether) ifNotNil: [		self inform: 'This book is marked ''keep in one file''. Several pages use a common Player.Save the owner of the book instead.'.		^ self].	"Don't give the change to put in a different place.  Assume named by number"stem _ self getStemUrl.	"user must approve"stem size = 0 ifTrue: [^ self].aPage _ currentPage.ind _ self pageNumberOf: currentPage.aPage isInMemory ifTrue: ["not out now"		aPage saveOnURL: stem,(ind printString),'.sp'].self saveIndexOnURL.! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/14/1998 09:50'!savePagesOnURL	"Write out all pages in this book onto a server.  For any page that does not have a SqueakPage and a url already, ask the user for one.  Give the option of naming all page files by page number.  Any pages that are not in memory will stay that way.  The local disk could be the server."	| response curr pg |	(self valueOfProperty: #keepTogether) ifNotNil: [		self inform: 'This book is marked ''keep in one file''. Several pages use a common Player.Save the owner of the book instead.'.		^ self].	response _ (PopUpMenu labels: 'Use page numbers\Type in file names\Save in a new place (using page numbers)\Save in a new place (typing names)' withCRs)			startUpWithCaption: 'Each page will be a file on the server.  \Do you want to page numbers be the names of the files? \or name each one yourself?' withCRs.	response = 1 ifTrue: [self saveAsNumberedURLs. ^ self].	response = 3 ifTrue: [self forgetURLs; saveAsNumberedURLs. ^ self].	response = 4 ifTrue: [self forgetURLs].	response = 0 ifTrue: [^ self].curr _ currentPage.pages do: [:aPage |	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		"self goToPageMorph: aPage."		aPage saveOnURLbasic.	"ask user if no url"		]].self goToPageMorph: curr.pages do: [:aPage |	"does write the current page too"	(aPage isInMemory and: [(curr == aPage) not]) ifTrue: [		pg _ aPage valueOfProperty: #SqueakPage.		pg purge]].	"recover the space"self saveIndexOnURL.! !!FileList methodsFor: 'file list menu' stamp: 'tk 12/14/1998 18:44'!itemsForFileEnding: suffix	| labels lines selectors |	labels _ OrderedCollection new.	lines _ OrderedCollection new.	selectors _ OrderedCollection new.	(suffix = 'bmp') | (suffix = 'gif') | (suffix = 'jpg') | (suffix = 'form') | (suffix = '*') ifTrue:		[labels addAll: #('open image in a window' 'read image into ImageImports').		selectors addAll: #(openImageInWindow importImage)].	(suffix = 'morph') | (suffix = 'morphs') | (suffix = 'sp') | (suffix = '*') ifTrue:		[labels add: 'load as morph'.		selectors add: #openMorphFromFile].	(suffix = 'bo') | (suffix = '*') ifTrue:[		labels add: 'load as book'.		selectors add: #openBookFromFile].	(suffix = 'mid') | (suffix = '*') ifTrue:		[labels add: 'play midi file'.		selectors add: #playMidiFile].	(suffix = 'movie') | (suffix = '*') ifTrue:		[labels add: 'open as movie'.		selectors add: #openAsMovie].	(suffix = 'st') | (suffix = 'cs') | (suffix = '*') ifTrue:		[suffix = '*' ifTrue: [lines add: labels size].		labels addAll: #('fileIn' 'file into new change set' 'browse changes' 'browse code' 'broadcast as update').		lines add: labels size - 1.		selectors addAll: #(fileInSelection fileIntoNewChangeSet browseChanges browseFile putUpdate)].	(suffix = 'swf') | (suffix = '*') ifTrue:[		labels add:'open as Flash'.		selectors add: #openAsFlash].	(suffix = 'ttf') | (suffix = '*') ifTrue:[		labels add: 'open true type font'.		selectors add: #openAsTTF].	(suffix = 'gz') | (suffix = '*') ifTrue:[		labels add: 'view decompressed'.		selectors add: #viewGZipContents].	(suffix = '*') ifTrue:		[labels addAll: #('generate HTML').		lines add: labels size - 1.		selectors addAll: #(renderFile)].	^ Array with: labels with: lines with: selectors! !!FileList methodsFor: 'file list menu' stamp: 'tk 12/14/1998 19:12'!openBookFromFile	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world" 	| book aFileStream |	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	aFileStream _ directory oldFileNamed: self fullName.	book _ BookMorph new fromRemoteStream: aFileStream.	World		ifNotNil:			[World addMorphsAndModel: book]		ifNil:			[(book isKindOf: Morph)				ifFalse:					[^ self inform: 'can only load a single morph into an MVC project via this mechanism'].				book openInWorld].	book goToPage: 1.! !!FileList methodsFor: 'file list menu' stamp: 'tk 12/14/1998 19:06'!openMorphFromFile	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world" 	| aFileStream morphOrList |	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	aFileStream _ directory oldFileNamed: self fullName.	morphOrList _ aFileStream fileInObjectAndCode.	(morphOrList isKindOf: SqueakPage) ifTrue: [morphOrList _ morphOrList contentsMorph].	World		ifNotNil:			[World addMorphsAndModel: morphOrList]		ifNil:			[(morphOrList isKindOf: Morph)				ifFalse:					[^ self inform: 'can only load a single morph into an mvc project via this mechanism'].				morphOrList openInWorld]! !!ObjectOut methodsFor: 'fetch from disk' stamp: 'tk 12/14/1998 15:19'!doesNotUnderstand: aMessage 	"Bring in the object, install, then resend aMessage"	| realObject oldFlag response |	oldFlag _ recursionFlag.	recursionFlag _ true.	"fetch the object"	realObject _ self xxxFetch.		"watch out for the become!!"			"Now we ARE the realObject"	oldFlag == true ifTrue: [		response _ (PopUpMenu labels: 'proceed normally\debug' withCRs)			startUpWithCaption: 'Object being fetched for a second time.Should not happen, and needs to be fixed later.'.		response = 2 ifTrue: [self halt]].	"We are already the new object"	^ aMessage sentTo: realObject! !!MorphObjectOut methodsFor: 'as yet unclassified' stamp: 'tk 12/14/1998 15:22'!doesNotUnderstand: aMessage 	"Bring in the object, install, then resend aMessage"	| aMorph myUrl oldFlag response |	"Transcript show: thisContext sender selector; cr." "useful for debugging"	oldFlag _ recursionFlag.	recursionFlag _ true.	myUrl _ url.	"can't use inst vars after become"	"fetch the object"	aMorph _ self xxxFetch.		"watch out for the become!!"			"Now we ARE a MORPH"	oldFlag == true ifTrue: [		response _ (PopUpMenu labels: 'proceed normally\debug' withCRs)			startUpWithCaption: 'Object being fetched for a second time.Should not happen, and needs to be fixed later.'.		response = 2 ifTrue: [self halt]].	"We are already the new object"	aMorph setProperty: #SqueakPage toValue: 			(SqueakPageCache pageCache at: myUrl).	^ aMessage sentTo: aMorph! !