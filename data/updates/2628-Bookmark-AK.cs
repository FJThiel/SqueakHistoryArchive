'From Squeak2.9alpha of 13 June 2000 [latest update: #2558] on 3 September 2000 at 1:38:39 pm'!"Change Set:		002-Bookmark-AKI' ve creates a bookmark for Scamper, it' s not remarkable, but it work.Note: *	add the URL to the bookmark*	import the URLs (just IE-Favorites) into Scamper's bookmarkScamper will create Directory 'Bookmark' and URL-files with extension'*.lin'.Anoulak"!Model subclass: #Scamper	instanceVariableNames: 'status currentUrl pageSource document formattedPage downloadingProcess documentQueue recentDocuments currentAnchorLocation currentUrlIndex backgroundColor bookDir bookmark '	classVariableNames: 'StartUrl '	poolDictionaries: ''	category: 'Network-Web Browser'!!Scamper methodsFor: 'menus' stamp: 'AK 6/20/2000 15:00'!addNewSubMenu: aDictionary 	| subMenu url sub |	subMenu _ MenuMorph new.	aDictionary		keysAndValuesDo: 			[:name :value | 			url _ value.			(url isKindOf: Dictionary)				ifTrue: 					[sub _ self addNewSubMenu: url.					subMenu add: name subMenu: sub]				ifFalse: [subMenu						add: name						target: self						selector: #jumpToUrl:						argument: url]].	^ subMenu! !!Scamper methodsFor: 'menus' stamp: 'AK 6/22/2000 13:25'!addToBookmark	| key value file filename |	key _ self document head title ifNil: ['Untitled'].	value _ self currentUrl.	filename _ key,'.lin'.	bookDir deleteFileNamed: filename. 	file _ StandardFileStream fileNamed: (bookDir fullNameFor: filename).	file ifNil:[self error: 'could not save file'].	file nextPutAll: value asString. 	file close.	bookmark add: (Association key: key value: value).	! !!Scamper methodsFor: 'menus' stamp: 'AK 6/22/2000 13:51'!bookmark	| menu sub url |	menu _ (MenuMorph entitled: ' Bookmark ')				defaultTarget: self.	menu addStayUpItem.	menu addLine.	menu		add: 'add to bookmark'		target: self		selector: #addToBookmark.	menu add: 'Import...' target: self selector: #importBookmark. 	menu addLine.	bookmark		keysAndValuesDo: 			[:name :value | 			url _ value.			(url isKindOf: Dictionary)				ifTrue: 					[sub _ self addNewSubMenu: url.					menu add: name subMenu: sub]				ifFalse: [menu						add: name						selector: #jumpToUrl:						argument: url]].	menu popUpForHand: self currentHand! !!Scamper methodsFor: 'menus' stamp: 'AK 6/29/2000 13:24'!createBookmarkFiles: aDirectory dict: aDictionary dirname: aName	| dir file filename |	(aDirectory directoryExists: aName) ifFalse:[aDirectory createDirectory: aName]. 	dir _ aDirectory directoryNamed: aName.	aDictionary keysAndValuesDo:[:k :v |				(v isKindOf: Dictionary)					ifTrue:[self createBookmarkFiles: dir dict: v dirname: k]					ifFalse:[filename _ k, '.lin'.							dir deleteFileNamed: filename.							file _ StandardFileStream fileNamed: (dir fullNameFor: filename).							file ifNil:[self error: 'could not save file'].							file nextPutAll: v asString.							file close]				].! !!Scamper methodsFor: 'menus' stamp: 'AK 6/29/2000 13:32'!importBookmark	| newDirectory importLinks filename file |	newDirectory _ FillInTheBlank request: 'Directory to import' initialAnswer: bookDir pathName.	(newDirectory isNil or: [ newDirectory isEmpty ]) ifTrue: [ ^self ].	(FileDirectory new directoryExists: newDirectory)		ifTrue:[importLinks _ self makeBookmark: (FileDirectory on: newDirectory).				importLinks isEmpty 					ifFalse:[importLinks associationsDo:[:ass | bookmark add: ass.							(ass value isKindOf: Dictionary)								ifTrue:[self createBookmarkFiles: bookDir dict: ass value dirname: ass key]								ifFalse:[filename _ ass key,'.lin'.										bookDir deleteFileNamed: filename.										file _ StandardFileStream fileNamed: (bookDir fullNameFor: filename).										file ifNil:[self error: 'could not save file'].										file nextPutAll: ass value asString. 										file close]								]							].				]		ifFalse:[self importBookmark].! !!Scamper methodsFor: 'menus' stamp: 'AK 6/28/2000 17:34'!importUrl: aFile	| oldFile url strings position |	oldFile _ FileStream oldFileOrNoneNamed: aFile.	oldFile isBinary 		ifTrue:[ self error: 'not url file']		ifFalse:[ strings _ (oldFile contentsOfEntireFile) substrings.				strings do:[:sub |				( sub includesSubString: 'URL=')					ifTrue:[ position := sub findString: 'http://'.							position > 0 ifTrue:[url := sub copyFrom: position to: sub size]										ifFalse:[ position := sub findString: 'ftp://'.												position > 0 ifTrue:[url := sub copyFrom: position to: sub size].												]							]						].				]. 	url =='' ifTrue:[ self error: 'blank file: url not exist'].	^url asUrl.! !!Scamper methodsFor: 'menus' stamp: 'AK 6/19/2000 15:37'!menu: menu shifted: shifted 	"added 'back' and 'forward' menu options: Aibek 4/18/99"	| lines selections linePositions |	lines _ 'backforwardnew URLhistoryview sourceinspect parse treego to start pageedit start pagebookmark'.	linePositions _ #(2 4 6 ).	selections _ #(#back #forward #jumpToNewUrl #displayHistory #viewSource #inspectParseTree #visitStartPage #editStartPage #bookmark ).	downloadingProcess		ifNotNil: 			[lines _ lines , String cr , 'stop downloading'.			linePositions _ linePositions , selections size asOrderedCollection.			selections _ selections , #(#stopEverything )].	menu		labels: lines		lines: linePositions		selections: selections.	^ menu! !!Scamper methodsFor: 'access' stamp: 'AK 6/19/2000 15:39'!bookmark: aDictionary	bookmark := aDictionary.! !!Scamper methodsFor: 'initialization' stamp: 'AK 6/19/2000 13:29'!initialize	documentQueue _ SharedQueue new.	recentDocuments _ OrderedCollection new.	bookmark := Dictionary new.	currentUrlIndex _ 0.	currentUrl _ ''.	pageSource _ ''.	document _ HtmlParser parse: (ReadStream on: '').	self status: 'sittin'! !!Scamper methodsFor: 'user interface' stamp: 'AK 6/21/2000 17:12'!loadBookmark	| directory favorite |	favorite := 'Bookmark'.	directory := FileDirectory default.	(directory directoryExists: favorite)			ifTrue:[bookDir := directory directoryNamed: favorite.					self bookmark: (self makeBookmark: bookDir)					]			ifFalse:[directory createDirectory: favorite.					bookDir := directory directoryNamed: favorite.					self bookmark: Dictionary new ].	! !!Scamper methodsFor: 'user interface' stamp: 'AK 6/23/2000 14:32'!makeBookmark: aDirectory	| directories dir book extension extension1|	extension := '*.lin'.	extension1 := '*.url'. " for IE favorite files"	book := Dictionary new.	directories := aDirectory directoryNames.	directories isEmpty		ifFalse:[directories do:[:dn |					dir := aDirectory directoryNamed: dn.					book add: ( Association key: dn value: ( self makeBookmark: dir))					]].	aDirectory fileNames do:	[:fn | (extension match: fn)				ifTrue:[ book add: (Association key: (fn truncateTo: (fn size - 4))							value: (self readUrlFromFile: (aDirectory fullNameFor: fn)))].		  (extension1 match: fn)				ifTrue:[ book add: (Association key: (fn truncateTo: (fn size - 4))							value: ( self importUrl: (aDirectory fullNameFor: fn)))].	].	^book			! !!Scamper methodsFor: 'user interface' stamp: 'AK 6/20/2000 15:54'!openAsMorph	"open a set of windows for viewing this browser"	|win urlMorph |	"loading bookmark"	self loadBookmark.	"create a window for it"	win _ SystemWindow labelled: 'Scamper'.	win model: self.	win setProperty: #webBrowserView toValue: true.	"create a view of the current url"	"win addMorph: (RectangleMorph new) frame: (0@0 extent: 0.3@0.1)."	urlMorph _  PluggableTextMorph on: self text: #currentUrl accept: #jumpToAbsoluteUrl:.	urlMorph acceptOnCR: true.	win addMorph: urlMorph frame: (0@0 extent: 1@0.1).	"create a status view"	win addMorph: (PluggableTextMorph on: self text: #status accept: nil) frame: (0@0.9 extent: 1.0@0.1).	"create the text area"	win addMorph: (WebPageMorph on: self bg: #backgroundColor text: #formattedPage readSelection: #formattedPageSelection menu: #menu:shifted:)		frame: (0@0.1 extent: 1@0.8).		win openInWorld.	^win! !!Scamper methodsFor: 'user interface' stamp: 'AK 6/22/2000 13:20'!readUrlFromFile: aFile	| oldFile url |	oldFile _ FileStream oldFileOrNoneNamed: aFile.	oldFile isBinary 		ifTrue:[ self error: 'not url file']		ifFalse:[url _ (oldFile contentsOfEntireFile) withBlanksTrimmed.				url =='' ifTrue:[ self error: 'blank file: url not exist'].				^url asUrl].	! !!Scamper class methodsFor: 'instance creation' stamp: 'AK 6/19/2000 15:55'!openOnUrl: aStringOrUrl 	"Open Scamper browser on specified url. 	Scamper openOnUrl: 'www.squeak.org' 	Scamper openOnUrl: 'file://C%3A/test.htm' 	"	^ self new jumpToUrl: aStringOrUrl asUrl;bookmark: Bookmark;	 openAsMorph! !!Scamper class methodsFor: 'initialization' stamp: 'AK 6/21/2000 15:10'!initialize	self StartUrl: 'http://minnow.cc.gatech.edu/squeak.1'.	! !Scamper initialize!Model subclass: #Scamper	instanceVariableNames: 'status currentUrl pageSource document formattedPage downloadingProcess documentQueue recentDocuments currentAnchorLocation currentUrlIndex backgroundColor bookmark bookDir '	classVariableNames: 'StartUrl '	poolDictionaries: ''	category: 'Network-Web Browser'!