'From Squeak 2.0 BETA of May 8, 1998 on 14 May 1998 at 9:48:26 am'!MorphicModel subclass: #SystemWindow	instanceVariableNames: 'labelString label paneColor closeBox collapseBox '	classVariableNames: 'TopWindow '	poolDictionaries: ''	category: 'Morphic-Windows'!!Browser class methodsFor: 'instance creation' stamp: 'di 5/14/1998 09:43'!openBrowserView: aBrowserView label: aString 	"Schedule aBrowserView, labelling the view aString."		aBrowserView isMorph		ifTrue:  [(aBrowserView setLabel: aString) openInWorld]		ifFalse: [aBrowserView label: aString.				aBrowserView minimumSize: 300 @ 200.				aBrowserView subViews do: [:each | each controller].				aBrowserView controller open]! !!MessageSet class methodsFor: 'instance creation' stamp: 'di 5/14/1998 09:44'!openAsMorph: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	| window codePane |	window _ (SystemWindow labelled: 'later') model: aMessageSet.	window addMorph: (PluggableListMorph on: aMessageSet list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:)		frame: (0@0 extent: 1.0@0.4).	codePane _ PluggableTextMorph on: aMessageSet 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	window addMorph: codePane		frame: (0@0.4 corner: 1@1).	window setLabel: aString.	window openInWorld! !!StringHolder methodsFor: 'initialize-release' stamp: 'di 5/14/1998 09:45'!openAsMorphLabel: labelString 	"Workspace new openAsMorphLabel: 'Workspace'"	| window |	window _ (SystemWindow labelled: labelString) model: self.	window addMorph: (PluggableTextMorph on: self text: #contents accept: #contents:			readSelection: nil menu: nil)		frame: (0@0 corner: 1@1).	window openInWorld! !!SystemWindow reorganize!('initialization' addMorph:frame: extent: initialize)('label' label labelHeight setLabel:)('open/close' delete openInMVC openInMVCExtent: openInWorld openInWorldExtent:)('top window' activate handlesMouseDown: mouseDown: passivate)('panes' initPanes paneColor: paneMorphs panelRect)('stepping' step stepTime wantsSteps)!!SystemWindow methodsFor: 'open/close' stamp: 'di 5/14/1998 09:04'!delete	| thisWorld |	model breakDependents.	model _ nil.	thisWorld _ self world.	super delete.	SystemWindow noteTopWindowIn: thisWorld! !!SystemWindow methodsFor: 'open/close' stamp: 'di 5/13/1998 21:28'!openInMVCExtent: extent	Smalltalk isMorphic ifTrue: [^ self openInWorldExtent: extent].	self bounds: (16@0 extent: extent).  "Room on left for scroll bars"	MorphWorldView openWorldWith: self labelled: labelString! !!SystemWindow methodsFor: 'open/close' stamp: 'di 5/14/1998 09:39'!openInWorldExtent: extent	Smalltalk isMorphic ifFalse: [^ self openInMVCExtent: extent].	self bounds: (16@0 extent: extent).  "Room on left for scroll bars"	World addMorph: self.	self activate! !!SystemWindow methodsFor: 'top window' stamp: 'di 5/14/1998 09:23'!activate	"Bring me to the front and make me able to respond to mouse and keyboard"	TopWindow ifNotNil: [TopWindow passivate].	owner firstSubmorph == self ifFalse: [owner addMorphFront: self].	self submorphsDo: [:m | m unlock].	TopWindow _ self! !!SystemWindow methodsFor: 'top window' stamp: 'di 5/14/1998 09:14'!handlesMouseDown: evt	"If I am not the topWindow, then my mouseDown action dominates"	^ self ~~ TopWindow! !!SystemWindow methodsFor: 'top window' stamp: 'di 5/14/1998 09:23'!mouseDown: evt	self activate! !!SystemWindow methodsFor: 'top window' stamp: 'di 5/14/1998 08:45'!passivate	"Make me unable to respond to mouse and keyboard"	self submorphsDo: [:m | m lock]! !!SystemWindow class methodsFor: 'top window' stamp: 'di 5/14/1998 09:08'!noteTopWindowIn: aWorld	"TopWindow must be nil or point to the top window in this project."	TopWindow _ nil.	aWorld submorphsDo:		[:m | (m isKindOf: SystemWindow) ifTrue: [^ m activate]]! !!TranscriptStream methodsFor: 'all' stamp: 'di 5/14/1998 09:46'!openLabel: aString 	"Open a window on this transcriptStream"	| topView codeView |	World ifNotNil: [^ (self openAsMorphLabel: aString) openInWorld].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.	topView label: aString.	topView minimumSize: 100 @ 50.	codeView _ PluggableTextView on: self text: nil accept: nil					readSelection: nil menu: nil.	codeView window: (0@0 extent: 200@200).	topView addSubView: codeView.	topView controller open! !!WorldMorph methodsFor: 'install / exit' stamp: 'di 5/14/1998 09:18'!install	self viewBox: Display boundingBox.	hands do: [:h | h initForEvents].	SystemWindow noteTopWindowIn: self.	self displayWorld.! !