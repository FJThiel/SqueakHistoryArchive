'From Squeak2.6 of 11 October 1999 [latest update: #1647] on 26 November 1999 at 2:11:29 pm'!"Change Set:		WiWTake4Tweaks-diDate:			25 November 1999Author:			Dan IngallsDone ...[X]	World menu now works in MVC (thanks Bob)[X]	Flaps are now positioned correctly[X]	Converted uses of constainingBounds to viewBox and removed it[X]	Fixed bounds of halo name.[X]	Collapse point now works for inner windows[X]	MVC now provides a menu item for inner morphic worlds[X]	Flaps now work in MVC windows[X]	Outer flaps continue to show[X]	Click on close or collapse box use to need extra click if active - doesn't now.[X]	Activate from collapse was flaky -- now consistentNot yet done ...[ ]	RealEstateAgent confused about Morphic world in MVC project.	Need to pass in world bounds"!!Morph methodsFor: 'geometry' stamp: 'di 11/25/1999 23:24'!setConstrainedPositionFrom: aPoint	"Change the position of this morph and and all of its submorphs to aPoint, but don't let me go outside my owner's bounds."	| trialRect delta boundingMorph |	trialRect _ aPoint extent: self bounds extent.	boundingMorph _ self nearestOwnerThat:		[:o | (o isKindOf: DropShadowMorph) not].		" -- would be nice to just use topRendererOrSelf, but making			DropShadows respond to isRenderer makes them hard to select."	delta _ boundingMorph			ifNil:    [aPoint]			ifNotNil: [trialRect amountToTranslateWithin: boundingMorph viewBox].	self position: aPoint + delta.	self layoutChanged  "So that, eg, surrounding text will readjust"! !!FlapTab methodsFor: 'positioning' stamp: 'di 11/25/1999 23:27'!fitOnScreen	| constrainer |	constrainer _ owner ifNil: [self bounds]						ifNotNil: [owner viewBox].	self orientation == #vertical			ifTrue:				[self top: ((self top min: (constrainer bottom- self height)) max: 0)]			ifFalse:				[self left: ((self left min: (constrainer right - self width)) max: 0)]! !!FlapTab methodsFor: 'positioning' stamp: 'di 11/25/1999 23:22'!positionObject: anObject	"anObject could be myself or my referent"	| container |	container _ (self currentWorld) viewBox.	"Could consider container _ referent pasteUpMorph, to allow flaps on things other than the world, but for the moment, let's skip it!!"	(edgeToAdhereTo == #left) ifTrue:		[^ anObject left: container left].	(edgeToAdhereTo == #right) ifTrue:		[^ anObject right: container right].	(edgeToAdhereTo == #top) ifTrue:		[^ anObject top: container top].	(edgeToAdhereTo == #bottom) ifTrue:		[^ anObject bottom: container bottom]! !!HaloMorph methodsFor: 'private' stamp: 'di 11/25/1999 23:40'!addNameBeneath: outerRectangle string: aString	"Add a name display centered beneath the bottom of the outer rectangle. Return the handle."	| nameMorph namePosition |	nameMorph _ NameStringInHalo contents: aString.	nameMorph useStringFormat; target: innerTarget; putSelector: #renameTo:.	namePosition _ outerRectangle bottomCenter -		((nameMorph width // 2) @ (self handleSize negated // 2 - 1)).	nameMorph position: (namePosition min: self world viewBox bottomRight - nameMorph extent y + 2).	nameMorph balloonTextSelector: #objectNameInHalo.	self addMorph: nameMorph.	^ nameMorph! !!HaloMorph methodsFor: 'private' stamp: 'di 11/25/1999 23:24'!basicBox	^ (self bounds expandBy: self handleSize + 1)			intersect: (self world viewBox insetBy: 8@8)! !!HandMorph methodsFor: 'world menu' stamp: 'di 11/26/1999 09:00'!openMenu"temporary support of WorldWindow (easy open)"	"Build the open window menu for the world."	| menu |	menu _ (MenuMorph entitled: 'open...') defaultTarget: self.	menu addStayUpItem.	menu add: 'browser' action: #openBrowser.	menu add: 'method finder' action: #openSelectorBrowser.	menu add: 'workspace' action: #openWorkspace.	menu add: 'file list' action: #openFileList.	menu add: 'file...' action: #openFileDirectly.	menu add: 'transcript' action: #openTranscript.	menu add: 'inner world' action: #openWorldInWindow.	menu addLine.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu addLine.	menu add: 'email reader' action: #openEmail.	menu add: 'web browser' action: #openWebBrowser.	menu add: 'IRC chat' action: #openIRC.	menu addLine.	(Preferences allowMVCprojects and: [Smalltalk includesKey: #StandardSystemView])		ifTrue: [menu add: 'mvc project' action: #openMVCProject].	menu add: 'morphic project' action: #openMorphicProject.	menu add: 'construction project' action: #openConstructionProject.	^ menu! !!MenuMorph methodsFor: 'control' stamp: 'di 11/26/1999 12:02'!popUpAdjacentTo: rightOrLeftPoint forHand: hand from: sourceItem	"Present this menu at the given point under control of the given hand."	| selectedItem delta tryToPlace selectedOffset |	hand world startSteppingSubmorphsOf: self.	popUpOwner _ sourceItem.	originalEvent _ hand lastEvent.	selectedItem _ self items detect: [:each | each == lastSelection]							ifNone: [self items first].	self fullBounds.  "ensure layout is current"	selectedOffset := selectedItem position - self position.	tryToPlace :=		[ :where :mustFit |		self position: where - selectedOffset.		delta _ self fullBoundsInWorld amountToTranslateWithin: hand worldBounds.		(delta x = 0 or: [mustFit]) ifTrue:			[delta = (0@0) ifFalse: [self position: self position + delta].			sourceItem owner owner addMorphFront: self.			^ self]].	tryToPlace 		value: rightOrLeftPoint first value: false;		value: rightOrLeftPoint last  - (self width @ 0) value: false;		value: rightOrLeftPoint first value: true	! !!MenuMorph methodsFor: 'control' stamp: 'di 11/26/1999 12:02'!popUpAt: aPoint forHand: hand 	"Present this menu at the given point under control of the given hand."	| selectedItem i yOffset sub delta |	popUpOwner _ hand.	originalEvent _ hand lastEvent.	selectedItem _ self items detect: [:each | each == lastSelection]				ifNone: [self items isEmpty						ifTrue: [^ self]						ifFalse: [self items first]].	"Note: items may not be laid out yet (I found them all to be at 0@0), 	so have to add up heights of items above the selected item."	i _ 0.	yOffset _ 0.	[(sub _ self submorphs at: (i _ i + 1)) == selectedItem]		whileFalse: [yOffset _ yOffset + sub height].	self position: aPoint - (2 @ (yOffset + 8)).	self bounds right > hand worldBounds right		ifTrue: [self position: self position - (self bounds width - 4 @ 0)].	delta _ self bounds amountToTranslateWithin: hand worldBounds.	delta = (0 @ 0) ifFalse: [self position: self position + delta].	hand world addMorphFront: self; startSteppingSubmorphsOf: self.	hand newMouseFocus: selectedItem.	self changed! !!MenuMorph methodsFor: 'control' stamp: 'di 11/26/1999 12:02'!popUpAt: aPoint forHand: hand from: sourceItem	"Present this menu at the given point under control of the given hand."	| selectedItem delta |	popUpOwner _ sourceItem.	originalEvent _ hand lastEvent.	selectedItem _ self items detect:		 [:each | each == lastSelection] ifNone: [self items first].	self fullBounds.  "ensure layout is current"	self position: aPoint - (selectedItem position - self position).	sourceItem owner owner addMorphFront: self.	delta _ self fullBoundsInWorld amountToTranslateWithin: hand worldBounds.	delta = (0@0) ifFalse: [self position: self position + delta].! !!MorphWorldController methodsFor: 'control sequence' stamp: 'di 11/26/1999 10:00'!controlInitialize	"This window is becoming active."	true ifTrue: [model becomeTheActiveWorldWith: nil].	model canvas ifNil: [  "i.e., only on first entry"		"In case of, eg, inspect during balloon help..."		model submorphsDo: [:m |  "delete any existing balloons"			(m isKindOf: BalloonMorph) ifTrue: [m delete]].		model handsDo: [:h | h initForEvents].		view displayView].  "initializes the WorldMorph's canvas"! !!MorphWorldView class methodsFor: 'instance creation' stamp: 'di 11/26/1999 11:46'!openWorld	| w |	(w _ MVCWiWPasteUpMorph newWorldForProject: nil).	w bounds: (0@0 extent: 400@300).	self openOn: w		label: 'A Morphic World'		extent: w fullBounds extent + 2.! !!NameStringInHalo methodsFor: 'as yet unclassified' stamp: 'di 11/25/1999 23:40'!placeContents	| namePosition |	(owner notNil and: [owner isInWorld]) ifTrue:		[namePosition _ owner basicBox bottomCenter -			((self width // 2) @ (owner handleSize negated // 2 - 1)).		namePosition _ namePosition min: self world viewBox bottomRight - self extent y + 2.		self bounds: (namePosition extent: self extent)]! !!PasteUpMorph methodsFor: 'flaps' stamp: 'di 11/26/1999 11:05'!addGlobalFlaps 	"Must make global flaps adapt to world.  Do this even if not shown, so the old world will not be pointed at by the flaps."	| use thisWorld |	use _ true.	(Preferences valueOfFlag: #useGlobalFlaps) ifFalse: [use _ false].	Project current flapsSuppressed ifTrue: [use _ false].	"Smalltalk isMorphic ifFalse: [use _ false]."	thisWorld _ use 		ifTrue: [self]		ifFalse: [(PasteUpMorph new) initForProject:  "fake to be flap owner"						WorldState new initForWorld;					bounds: (0@0 extent: 4000@4000);					viewBox: (0@0 extent: 4000@4000)].		Utilities globalFlapTabs do: [:aFlapTab |		(aFlapTab world == thisWorld) ifFalse:			[thisWorld addMorphFront: aFlapTab.			aFlapTab adaptToWorld: thisWorld].	"always do"		use ifTrue: [			aFlapTab spanWorld.			aFlapTab adjustPositionAfterHidingFlap.			aFlapTab flapShowing ifTrue: [aFlapTab showFlap]]]."	Utilities clobberFlapTabList.	Utilities initializeStandardFlaps.	self currentWorld deleteAllFlapArtifacts.	self currentWorld addGlobalFlaps."! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'di 11/26/1999 10:45'!newMVCProject	"Create an instance of me on a new MVC project (in a SystemWindow)."	| proj window |	proj _ Project new.	window _ (SystemWindow labelled: proj name) model: proj.	window		addMorph: (self on: proj)		frame: (0@0 corner: 1.0@1.0).	proj projectParameters at: #globalFlapsEnabledInProject put: false.	^ window! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 11/25/1999 23:51'!assignCollapsePointFor: aSSView	"Offer up a location along the left edge of the screen for a collapsed SSView.	Make sure it doesn't overlap any other collapsed frames."	| grid otherFrames y free topLeft viewBox |	grid _ 24.  "should be mult of 8, since manual move is gridded by 8"	Smalltalk isMorphic		ifTrue: [otherFrames _ (SystemWindow windowsIn: World satisfying: [:w | true])					collect: [:w | w collapsedFrame]					thenSelect: [:rect | rect notNil].				viewBox _ World viewBox]		ifFalse: [otherFrames _ ScheduledControllers scheduledWindowControllers					collect: [:aController | aController view collapsedFrame]					thenSelect: [:rect | rect notNil].				viewBox _ Display boundingBox].	y _ viewBox top.	[(y _ y + grid) <= (viewBox height - grid)]		whileTrue:		[topLeft _ viewBox left@y.		free _ true.		otherFrames do: [:w | free _ free & (topLeft ~= w topLeft)].		free ifTrue: [^ topLeft]].	"If all else fails..."	^ 0 @ 0! !!ScreenController methodsFor: 'menu messages' stamp: 'di 11/26/1999 08:56'!openMorphicWorld 	"Create and schedule a StringHolderView for use as a workspace."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	MorphWorldView openWorld.! !!ScreenController methodsFor: 'menu messages' stamp: 'di 11/26/1999 10:49'!openProject 	"Create and schedule a Project."	| proj |	Smalltalk at: #ProjectView ifPresent:		[:c | proj _ Project new.		proj projectParameters at: #globalFlapsEnabledInProject put: false.		c open: proj].! !!ScreenController methodsFor: 'nested menus' stamp: 'di 11/26/1999 09:00'!openMenu	^ SelectionMenu labelList:		#(	'keep this menu up'			'browser'			'method finder'			'workspace'			'file list'			'file...'			'transcript'			'morphic world'			'simple change sorter'			'dual change sorter'			'mvc project'			'morphic project'			'construction project'			)		lines: #(1 8 10)		selections: #(durableOpenMenuopenBrowser openSelectorBrowser openWorkspace openFileList openFile openTranscript openMorphicWorldopenSimpleChangeSorter openChangeManageropenProject  openMorphicProject  openConstructionProject )"ScreenController  new openMenu startUp"! !!SystemWindow methodsFor: 'drawing' stamp: 'di 11/26/1999 12:02'!makeMeVisible 	((self world bounds insetBy: (0@0 corner: self labelHeight asPoint))		containsPoint: self position) ifTrue: [^ self "OK -- at least my top left is visible"].	"window not on screen (probably due to reframe) -- move it now"	self isCollapsed		ifTrue: [self position: (RealEstateAgent assignCollapsePointFor: self)]		ifFalse: [self position: (RealEstateAgent initialFrameFor: self initialExtent: self extent) topLeft].! !!WiWPasteUpMorph commentStamp: 'di 11/26/1999 08:36' prior: 0!This subclass of PasteUpMorph provides special support for viewing of a world in an inner window (WorldWindow).!!WiWPasteUpMorph reorganize!('initialization' hostWindow: initialize viewBox:)('activation' becomeTheActiveWorldWith: revertToParentWorldWithEvent: validateMouseEvent:)('update cycle' doDeferredUpdating doOneCycle restartWorldCycleWithEvent: runStepMethods)('drawing' invalidRect: restoreDisplay)('geometry' extent: resetViewBox resetViewBoxForReal)('events' mouseDown:)!!WiWPasteUpMorph methodsFor: 'activation' stamp: 'di 11/26/1999 13:00'!becomeTheActiveWorldWith: evt	| outerWorld |	World == self ifTrue: [^ self].	self damageRecorder reset.	"since we may have moved, old data no longer valid"	hostWindow setStripeColorsFrom: Color green.	self canvas: nil.	"safer to start from scratch"	"Messy stuff to clear flaps from outer world"	Utilities globalFlapTabs do: [:f | f changed].	outerWorld _ World.	World _ self.		self installFlaps.	World _ outerWorld.		outerWorld displayWorld.	World _ self.	self viewBox: hostWindow panelRect.	self startSteppingSubmorphsOf: self.	self changed.	pendingEvent _ nil.	evt ifNotNil: [self primaryHand handleEvent: (evt setHand: self primaryHand)].! !!WiWPasteUpMorph methodsFor: 'activation' stamp: 'di 11/26/1999 14:09'!revertToParentWorldWithEvent: evt	self damageRecorder reset.	"Terminate local display"	World _ parentWorld.	World assuredCanvas.	World installFlaps.	hostWindow setStripeColorsFrom: Color red.	evt ifNotNil: [World restartWorldCycleWithEvent: evt].! !!WiWPasteUpMorph methodsFor: 'activation' stamp: 'di 11/26/1999 14:09'!validateMouseEvent: evt	evt isMouseDown ifFalse: [^ self].	"any click outside returns us to our home world"	(self bounds containsPoint: evt cursorPoint) ifFalse: [		self revertToParentWorldWithEvent: evt.	].! !!WiWPasteUpMorph methodsFor: 'events' stamp: 'di 11/26/1999 08:14'!mouseDown: evt	(World == self or: [World isNil]) ifTrue: [^ super mouseDown: evt].	(self bounds containsPoint: evt cursorPoint) ifFalse: [^ self].	self becomeTheActiveWorldWith: evt.! !!MVCWiWPasteUpMorph commentStamp: 'di 11/26/1999 08:39' prior: 0!A subclass of WiWPasteUpMorph that supports Morphic worlds embedded in MVC Views.!!MVCWiWPasteUpMorph reorganize!('initialization' viewBox:)('activation' becomeTheActiveWorldWith: revertToParentWorldWithEvent:)('drawing' invalidRect:)('geometry' position: resetViewBox resetViewBoxForReal)!!MVCWiWPasteUpMorph methodsFor: 'activation' stamp: 'di 11/26/1999 10:03'!becomeTheActiveWorldWith: evt	self canvas: nil.	"safer to start from scratch"	self installFlaps.! !!WorldWindow commentStamp: 'di 11/26/1999 08:27' prior: 0!A WorldWindow is a SystemWindow whose central area presents an inner Morphic world.WorldWindows have a red title bar when the world inside is inactive. This changes to green when the world becomes the active world. The world inside becomes activated by clicking in it. When you click outside this world, the parent world resumes control. While its world is inactive, the WorldWindow may be moved and resized like any other.It would be nice to make the world inside active whenever the WorldWindow was active, but this presents difficulties in moving and resizing, probably related to use of the global World instead of self world in many methods.This facility is mainly the work of Bob Arning, with a number of tweaks by DI.!!WorldWindow methodsFor: 'as yet unclassified' stamp: 'di 11/25/1999 23:14'!collapseOrExpand	super collapseOrExpand.	isCollapsed ifFalse: [model becomeTheActiveWorldWith: nil]! !Morph removeSelector: #constrainingBounds!RealEstateAgent class removeSelector: #strictlyStaggeredInitialFrameFor:!WiWPasteUpMorph removeSelector: #constrainingBounds!MVCWiWPasteUpMorph removeSelector: #constrainingBounds!