'From Squeak3.1alpha of 28 February 2001 [latest update: #4312] on 4 September 2001 at 1:28:17 pm'!"Change Set:		ColorPickerFeedback-arDate:			4 September 2001Author:			Andreas RaabAdd a little indicator for the current color to the color picker. Similar to the color picker in the painting system."!!ColorPickerMorph methodsFor: 'initialization' stamp: 'ar 9/4/2001 13:26'!initialize	"Initialize the receiver.  Obey the modalColorPickers preference when deciding how to configure myself.  This is not quite satisfactory -- we'd like to have explicit calls tell us things like whether whether to be modal, whether to allow transparency, but for the moment, in grand Morphic fashion, this is rather inflexibly all housed right here"	super initialize.	self clipSubmorphs: true.	self buildChartForm.		selectedColor _ Color white.	sourceHand _ nil.	deleteOnMouseUp _ false.	clickedTranslucency _ false.	updateContinuously _ true.	selector _ nil.	target _ nil! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'ar 8/25/2001 20:44'!locationIndicator	| loc |	^self valueOfProperty: #locationIndicator ifAbsent:[		loc _ EllipseMorph new.		loc color: Color transparent; 			borderWidth: 1; 			borderColor: Color red; 			extent: 6@6.		self setProperty: #locationIndicator toValue: loc.		self addMorphFront: loc.		loc]! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'ar 8/25/2001 20:51'!originalColor: colorOrSymbol	"Set the receiver's original color.  It is at this point that a command is launched to represent the action of the picker, in support of Undo."	originalColor _ (colorOrSymbol isKindOf: Color)		ifTrue: [colorOrSymbol]		ifFalse: [Color lightGreen].	originalForm fill: RevertBox fillColor: originalColor.	selectedColor _ originalColor.	self locationIndicator center: self topLeft + (self positionOfColor: originalColor).! !!ColorPickerMorph methodsFor: 'private' stamp: 'ar 8/25/2001 20:43'!pickColorAt: aGlobalPoint 	| alpha selfRelativePoint pickedColor |	clickedTranslucency ifNil: [clickedTranslucency _ false].	selfRelativePoint _ (self globalPointToLocal: aGlobalPoint) - self topLeft.	(FeedbackBox containsPoint: selfRelativePoint) ifTrue: [^ self].	(RevertBox containsPoint: selfRelativePoint)		ifTrue: [^ self updateColor: originalColor feedbackColor: originalColor].	"check for transparent color and update using appropriate feedback color "	(TransparentBox containsPoint: selfRelativePoint) ifTrue:		[clickedTranslucency ifFalse: [^ self].  "Can't wander into translucency control"		alpha _ (selfRelativePoint x - TransparentBox left - 10) asFloat /							(TransparentBox width - 20)							min: 1.0 max: 0.0.					"(alpha roundTo: 0.01) printString , '   ' displayAt: 0@0." " -- debug"		self 			updateColor: (selectedColor alpha: alpha)			feedbackColor: (selectedColor alpha: alpha).		^ self].	"pick up color, either inside or outside this world"	clickedTranslucency ifTrue: [^ self].  "Can't wander out of translucency control"	self locationIndicator visible: false. self refreshWorld.	pickedColor _ Display colorAt: aGlobalPoint.	self locationIndicator visible: true. self refreshWorld.	self 		updateColor: (			(selectedColor isColor and: [selectedColor isTranslucentColor])						ifTrue: [pickedColor alpha: selectedColor alpha]						ifFalse: [pickedColor]		)		feedbackColor: pickedColor! !!ColorPickerMorph methodsFor: 'private' stamp: 'ar 9/4/2001 13:27'!positionOfColor: aColor	"Compute the position of the given color in the color chart form"	| rgbRect x y h s v |	rgbRect _ (0@0 extent: originalForm boundingBox extent) insetBy: (1@10 corner: 11@1).	h _ aColor hue.	s _ aColor saturation.	v _ aColor brightness.	h = 0.0 ifTrue:["gray"		^(rgbRect right + 6) @ (rgbRect height * (1.0 - v) + rgbRect top)].	x _ (h + 22 \\ 360 / 360.0 * rgbRect width) rounded.	y _ 0.5.	s < 1.0 ifTrue:[y _ y - (1.0 - s * 0.5)].	v < 1.0 ifTrue:[y _ y + (1.0 - v * 0.5)].	y _ (y * rgbRect height) rounded.	^x@y + (1@10)! !!ColorPickerMorph methodsFor: 'private' stamp: 'ar 8/25/2001 20:50'!updateColor: aColor feedbackColor: feedbackColor	"Set my selected color to the given color if it is different. Give user feedback. Inform the target of the change if the target and selector are not nil." 	selectedColor = aColor ifTrue: [^ self].  "do nothing if color doesn't change"	self updateAlpha: aColor alpha.	originalForm fill: FeedbackBox fillColor: feedbackColor.	self form: originalForm.	selectedColor _ aColor.	updateContinuously ifTrue: [self updateTargetColor].	self locationIndicator center: self topLeft + (self positionOfColor: feedbackColor).! !