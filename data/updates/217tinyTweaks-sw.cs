'From Squeak 2.1 of June 30, 1998 on 8 September 1998 at 1:36:39 pm'!"Change Set:		tinyTweaks-swDate:			8 September 1998Author:			Scott WallaceA few little tweaks to the development environment.1.  Adds a menu to SelectorBrowser's selector-list, offering senders & implementors commands.2.  Truncate selector name to reasonable length in time-stamp menu titles, and also eliminate the class name from the menu titles, both in aid of avoiding jarringly long lines in the menu title, 3.  Avoid putting a blank line in that title in case of a method with no time stamp.4.  Fix title of 'slips' browser, keeping pace with its recently expanded functionality.5,  Adds 'new change set' command to the changes... branch of the mvc screen menu, thus streamlining the process of establishing a new change set for current work.6.  Reports the name of the current change set in the 'about this system' message.7.  Log new-change-set switch to Transcript.8.  Improved prompt for new-change-set name"!!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 9/4/1998 14:28'!fileOut	"File out the receiver, to a file whose name is a function of the change-set name and of the date and the time."	"wod 5/12/1998: use #asFileName rather than #truncateTo:"	| file slips |	Cursor write showWhile:		[file _ FileStream newFileNamed:			(self name, FileDirectory dot, Utilities dateTimeSuffix, FileDirectory dot, 'cs') asFileName.		file header; timeStamp.		self fileOutPreambleOn: file.		self fileOutOn: file.		self fileOutPostscriptOn: file.		file trailer; close].	Preferences suppressCheckForSlips ifTrue: [^ self].  "Can hard-code that pref if desired"	slips _ self checkForSlips.	(slips size > 0 and: [self confirm: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?'])		ifTrue: [Smalltalk browseMessageList: slips							name: 'Possible slips in ', name]! !!ChangeSorter class methodsFor: 'all' stamp: 'sw 9/4/1998 14:38'!newChangeSet	"Prompt the user for a name, and establish a new change set of that name (if ok), making it the current changeset.  Return nil of not ok, else return the actual changeset."	| newName newSet |	newName _ FillInTheBlank request: 'Please name the new change set:'			initialAnswer: ChangeSet defaultName.	newName isEmpty ifTrue:		[self inform: 'nothing done'.		^ nil].	(self changeSetNamed: newName) ifNotNil:			[self inform: 'Sorry that name is already used'.			^ nil].	newSet _ ChangeSet new initialize name: newName.	AllChangeSets add: newSet.	Smalltalk newChanges: newSet.	Transcript cr; show: newName, ' is now the current change set'.	^ newSet! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 9/4/1998 14:32'!aboutThisSystem 	"Identify software version"	| aString eToySystem aNumber |	aString _ Smalltalk version.	(eToySystem _ Smalltalk at: #EToySystem ifAbsent: [nil]) ifNotNil:		[aString _ aString, 'EToy System: ', eToySystem version, ' of ', eToySystem versionDate].	aNumber _ ChangeSorter highestNumberedChangeSet.	(aNumber notNil and: [aNumber > 0]) ifTrue:		[aString _ aString, 'Highest-numbered update: ', aNumber printString].	aString _ aString, 'Current Change Set: ', Smalltalk changes name.	^ self inform: aString! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 9/4/1998 10:17'!newChangeSet	ChangeSorter newChangeSet! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 9/4/1998 14:42'!changesMenu	"Answer a menu for changes-related items"	"ScreenController initialize"	ChangesMenu == nil ifTrue: 		[ChangesMenu _ SelectionMenu labelList:		#(	'file out changes'			'create new change set...'			'browse changed methods'			'simple change sorter'			'dual change sorter'			'browse recent submissions'			'recent change log'			'keep this menu up')		lines: #(3 5 7)		selections: #(fileOutChanges newChangeSet browseChangedMessages openSimpleChangeSorter openChangeManager  browseRecentSubmissions browseRecentLog durableChangesMenu)].	^ ChangesMenu"ScreenController new changesMenu startUp"! !!String methodsFor: 'converting' stamp: 'sw 9/2/1998 17:09'!truncateWithElipsisTo: maxLength	"Return myself or a copy suitably shortened but with elipsis added"	^ self size <= maxLength		ifTrue:			[self]		ifFalse:			[(self copyFrom: 1 to: (maxLength - 3)), '...']	"'truncateWithElipsisTo:' truncateWithElipsisTo: 20"! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 9/8/1998 13:25'!messageListSelectorTitle	| selector aString aStamp |	Preferences showTimeStampsInMenuTitles		ifFalse:			[^ nil].	(selector _ self selectedMessageName) ifNotNil:		[aString _ selector truncateWithElipsisTo: 28.		^ (aStamp _ self timeStamp) size > 0			ifTrue:				[aString, String cr, aStamp]			ifFalse:				[aString]].	^ nil! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 9/4/1998 09:00'!newSet	"Create a new changeSet and show it., making it the current one.  Reject name if already in use."	| aSet |	self okToChange ifFalse: [^ self].	aSet _ self class newChangeSet.	aSet ifNotNil:		[self update.		self showChangeSet: aSet.		self changed: #relabel]! !!SelectorBrowser reorganize!('all' classList classListIndex classListIndex: classListSelectorTitle contents:notifying: implementors messageList messageListIndex messageListIndex: open openAsMorph selectedClass selectedClassName selectedMessageName selectorMenu: selectorMenuTitle senders)!!SelectorBrowser methodsFor: 'all' stamp: 'sw 9/2/1998 16:35'!implementors	| aSelector |	(aSelector _ self selectedMessageName) ifNotNil:		[Smalltalk browseAllImplementorsOf: aSelector]! !!SelectorBrowser methodsFor: 'all' stamp: 'sw 9/2/1998 17:04'!open	"Create a Browser that lets you type part of a selector, shows a list of selectors, shows the classes of the one you chose, and spwns a full browser on it.	SelectorBrowser new open   "	|  selectorListView typeInView topView classListView |	World ifNotNil: [^ self openAsMorph].	selectorIndex _ classListIndex _ 0.	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	typeInView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	typeInView window: (0@0 extent: 100@14);		askBeforeDiscardingEdits: false.	topView addSubView: typeInView.	selectorListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #selectorMenu:		keystroke: #messageListKey:from:.	selectorListView menuTitleSelector: #selectorMenuTitle.	selectorListView window: (0 @ 0 extent: 100 @ 86).	topView addSubView: selectorListView below: typeInView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: nil	"never anything selected"		keystroke: #arrowKey:from:.	classListView menuTitleSelector: #classListSelectorTitle.	classListView window: (0 @ 0 extent: 100 @ 100).	topView addSubView: classListView toRightOf: typeInView.	topView label: 'Full Browser from Selector Fragment'.	topView minimumSize: 300 @ 200; maximumSize: 450@200.	topView subViews do: [:each | each controller].	topView controller open.! !!SelectorBrowser methodsFor: 'all' stamp: 'sw 9/2/1998 17:05'!openAsMorph	"Create a Browser that lets you type part of a selector, shows a list of selectors, shows the classes of the one you chose, and spwns a full browser on it.	SelectorBrowser new open   "	| window typeInView selectorListView classListView |	window _ (SystemWindow labelled: 'later') model: self.	selectorIndex _ classListIndex _ 0.	typeInView _ PluggableTextMorph on: self 		text: #contents accept: #contents:notifying:		readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	"typeInView askBeforeDiscardingEdits: false."	window addMorph: typeInView frame: (0@0 corner: 0.5@0.14).	selectorListView _ PluggableListMorph on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #selectorMenu:		keystroke: #messageListKey:from:.	selectorListView menuTitleSelector: #selectorMenuTitle.	window addMorph: selectorListView frame: (0@0.14 corner: 0.5@1).	classListView _ PluggableListMorph on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: nil		keystroke: #arrowKey:from:.	classListView menuTitleSelector: #classListSelectorTitle.	window addMorph: classListView frame: (0.5@0 corner: 1@1).	window setLabel: 'Full Browser from Selector Fragment'.	window openInWorldExtent: 450@200! !!SelectorBrowser methodsFor: 'all' stamp: 'sw 9/2/1998 16:32'!selectorMenu: aMenu	^ aMenu labels: 'sendersimplementors'	lines: #()	selections: #(senders implementors)! !!SelectorBrowser methodsFor: 'all' stamp: 'sw 9/2/1998 16:37'!selectorMenuTitle	^ self selectedMessageName ifNil: ['<no selection>']! !!SelectorBrowser methodsFor: 'all' stamp: 'sw 9/2/1998 16:35'!senders	| aSelector |	(aSelector _ self selectedMessageName) ifNotNil:		[Smalltalk browseAllCallsOn: aSelector]! !"Postscript:<Comments here, if any>Executable statements after this comment quote..."ScreenController initialize!