'From Squeak2.9alpha of 12 June 2000 [latest update: #2725] on 26 September 2000 at 9:41:22 pm'!"Change Set:		DirectionHandleTweaksDate:			26 September 2000Author:			Dan IngallsIntroduces two preferences governing the appearance of direciton handles in menus.showDirectionHandles default: false	direction handles are always shownshowDirectionForSketches default: false	direction handles are always shown for SketchMorphsAlso introduces a hide/show item in the red menu to override preferences on an individual halo instantiation.This changeSet computes the images for the two handles using existing Squeak morphs, and provides somewhat more precision in the settings.  It also allows a number of methods and two custom images to be discarded."!!Morph methodsFor: 'halos and balloon help' stamp: 'di 9/26/2000 09:52'!wantsDirectionHandles	^ Preferences showDirectionHandles ! !!HaloMorph methodsFor: 'accessing' stamp: 'di 9/26/2000 16:37'!setTarget: aMorph	"Private!! Set the target without adding handles."	target _ aMorph topRendererOrSelf.	innerTarget _ target renderedMorph.	innerTarget wantsDirectionHandles		ifTrue: [self showDirectionHandles: true addHandles: false].! !!HaloMorph methodsFor: 'geometry' stamp: 'di 9/26/2000 21:03'!position: pos	"Halos display imprefectly if their coordinates are non-integral		-- especially the direction handles."	^ super position: pos asIntegerPoint! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 21:20'!addDirectionHandles	| centerHandle d w directionShaft |	self showingDirectionHandles ifFalse: [^ self].	directionArrowAnchor _ target referencePositionInWorld rounded.	(directionShaft _ LineMorph newSticky makeForwardArrow)		borderWidth: 3; borderColor: Color green.	self positionDirectionShaft: directionShaft.	self addMorphFront: directionShaft.	directionShaft setCenteredBalloonText: 'Set forward direction';		on: #mouseDown send: #doDirection:with: to: self;		on: #mouseStillDown send: #trackDirectionArrow:with: to: self;		on: #mouseUp send: #setDirection:with: to: self.	d _ 15.  "diameter"  w _ 3.  "borderWidth"	(centerHandle _ EllipseMorph newBounds: (0@0 extent: d@d) color: Color transparent)			borderWidth: w; borderColor: Color blue;			addMorph: (LineMorph from: (d//2)@w to: (d//2)@(d-w-1) color: Color red width: 1);			addMorph: (LineMorph from: w@(d//2) to: (d-w-1)@(d//2) color: Color red width: 1);			align: centerHandle bounds center with: directionArrowAnchor.	self addMorph: centerHandle.	centerHandle setCenteredBalloonText: 'Set rotation center';			on: #mouseDown send: #prepareToTrackCenterOfRotation:with: to: self;			on: #mouseStillDown send: #trackCenterOfRotation:with: to: self;			on: #mouseUp send: #setCenterOfRotation:with: to: self! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 15:16'!directionArrowLength	^ 25! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 10:04'!doMenu: evt with: menuHandle	"Ask hand to invoke the halo menu for my inner target."	| menu |	self removeAllHandlesBut: nil.  "remove all handles"	self world displayWorld.	menu _ evt hand buildMorphHandleMenuFor: innerTarget.	self showingDirectionHandles		ifTrue: [menu add: 'hide direction handles' target: self selector: #showDirectionHandles: argument: false]		ifFalse: [menu add: 'show direction handles' target: self selector: #showDirectionHandles: argument: true].	target addDropShadowItemsTo: menu hand: evt hand.	innerTarget addTitleForHaloMenu: menu.	menu popUpEvent: evt in: self world.! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 21:26'!doRot: evt with: rotHandle	"Update the rotation of my target if it is rotatable.  Keep the relevant command object up to date."	| degrees |	degrees _ (evt cursorPoint - (target pointInWorld: target referencePosition)) degrees.	degrees _ degrees - angleOffset degrees.	degrees _ degrees detentBy: 10.0 atMultiplesOf: 90.0 snap: false.	degrees = 0.0		ifTrue: [rotHandle color: Color lightBlue]		ifFalse: [rotHandle color: Color blue].	rotHandle submorphsDo:		[:m | m color: rotHandle color makeForegroundColor].	self removeAllHandlesBut: rotHandle.	self showingDirectionHandles ifFalse:		[self showDirectionHandles: true addHandles: false].	self addDirectionHandles.	target rotationDegrees: degrees.	rotHandle position: evt cursorPoint - (rotHandle extent // 2).	(self valueOfProperty: #commandInProgress) doIfNotNil:		[:cmd | "Update the final rotation"		cmd redoTarget: target selector: #rotationDegrees: argument: degrees].	self layoutChanged! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 15:12'!positionDirectionShaft: shaft	"Position the shaft."	| alphaRadians unitVector |	"Pretty crude and slow approach at present, but a stake in the ground"	alphaRadians _ target heading degreesToRadians.	unitVector _ alphaRadians sin  @ alphaRadians cos negated.	shaft setVertices: {unitVector * 6 + directionArrowAnchor.  "6 = radius of deadeye circle"					unitVector * self directionArrowLength + directionArrowAnchor}! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 19:00'!prepareToTrackCenterOfRotation: evt with: rotationHandle	self removeAllHandlesBut: rotationHandle.	evt hand showTemporaryCursor: Cursor blank! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 19:06'!setCenterOfRotation: evt with: rotationHandle	| localPt |	evt hand showTemporaryCursor: nil.	localPt _ innerTarget transformFromWorld globalPointToLocal: rotationHandle center.	innerTarget setRotationCenterFrom: localPt.	self endInteraction! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 15:25'!showDirectionHandles: wantToShow	self showDirectionHandles: wantToShow addHandles: true  "called from menu"! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 15:34'!showDirectionHandles: wantToShow addHandles: needHandles	wantToShow		ifTrue: [directionArrowAnchor _ target referencePositionInWorld]  "not nil means show"		ifFalse: [directionArrowAnchor _ nil].	needHandles ifTrue: [self addHandles]! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 15:37'!showingDirectionHandles	^ directionArrowAnchor ~~ nil! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 18:57'!trackCenterOfRotation: anEvent with: rotationCenterHandle	rotationCenterHandle center: anEvent cursorPoint! !!HaloMorph methodsFor: 'private' stamp: 'di 9/26/2000 15:30'!trackDirectionArrow: anEvent with: shaft	shaft setVertices: {directionArrowAnchor. anEvent cursorPoint}.	self layoutChanged! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'di 9/26/2000 21:39'!wantsDirectionHandles	^ super wantsDirectionHandles and: [self isWorldMorph not]! !!SketchMorph methodsFor: 'menu' stamp: 'di 9/26/2000 09:36'!wantsDirectionHandles	^ super wantsDirectionHandles or: [Preferences showDirectionForSketches] ! !HaloMorph removeSelector: #addDirectionShaft!HaloMorph removeSelector: #completeDisplayFor:centeringTipAt:!HaloMorph removeSelector: #correctlyRotateDirectionArrow:forDegrees:!HaloMorph removeSelector: #directionArrowTipCenterFor:!HaloMorph removeSelector: #imageMorphFrom:!HaloMorph removeSelector: #wantsDirectionHandles!"Postscript:Set up the preferences for direction handles..."Preferences addPreference: #showDirectionHandles category: #halos default: falseballoonHelp: 'If enabled, direction handles are always shown with halos.  If disabled, direction handles can be shown by the ''show direction handles'' command in the red menu.'.Preferences addPreference: #showDirectionForSketches category: #halos default: falseballoonHelp: 'If enabled, direction handles are always shown for SketchMorphs.  If disabled, direction handles can be shown by the ''show direction handles'' command in the red menu.'.!