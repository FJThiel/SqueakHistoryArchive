'From Squeak3.2alpha of 23 November 2001 [latest update: #4586] on 8 December 2001 at 12:52:06 am'!"Change Set:		localKbdMenus-dvfDate:			7 December 2001Author:			Daniel VainsencherSmall modification to call the list/text editor menus instead of the World menus when ESC is pressed.Fixed - for text it now gets the real application dependent menu, not the pasted copy known by ParagraphEditor - at least in Morphic.Also adds page up/down as moving 5 items up/down in big menus. Probably that's not what they should do, still experimentingslightly hand-edited by Scott Wallace, removing a method removal."!!MenuMorph methodsFor: 'keyboard control' stamp: 'dvf 12/8/2001 00:49'!keyStroke: evt	| matchString char asc selectable |	self deleteBalloon.	(evt commandKeyPressed and: [self commandKeyHandler notNil]) ifTrue:			[self commandKeyHandler commandKeyTypedIntoMenu: evt.			^ self deleteIfPopUp: evt].	char _ evt keyCharacter.	char = Character cr ifTrue:		[selectedItem ifNotNil:			[selectedItem hasSubMenu			ifTrue: [evt hand newMouseFocus: selectedItem subMenu.					^ evt hand newKeyboardFocus: selectedItem subMenu]			ifFalse: ["self delete."					^ selectedItem invokeWithEvent: evt]].		(selectable _ self items) size = 1			ifTrue: [^ selectable first invokeWithEvent: evt].		^ self].	((asc _ char asciiValue) between: 27 and: 31) ifTrue:		[asc = 27 ifTrue:   "escape key"			[(self hasProperty: #matchString) ifTrue:				["If filtered, first ESC removes filter"				self selectItem: nil event: evt.				self removeProperty: #matchString.				self removeAllMorphs.				^ self addAllMorphs: (self valueOfProperty: #originalSubmorphs)].			"If a stand-alone menu, just delete it"			popUpOwner == nil ifTrue: [^ self delete].			"If a sub-menu, then deselect, and return focus to outer menu"			self selectItem: nil event: evt.			evt hand newMouseFocus: popUpOwner owner.			^ evt hand newKeyboardFocus: popUpOwner owner].		(asc = 28 or: [asc = 29]) ifTrue:		"left or right arrow key"			[(selectedItem ~~ nil and: [selectedItem hasSubMenu]) ifTrue:					[evt hand newMouseFocus: selectedItem subMenu.					^ evt hand newKeyboardFocus: selectedItem subMenu]].		asc = 30 ifTrue: [^ self moveSelectionDown: -1 event: evt].		"up arrow key"		asc = 31 ifTrue: [^ self moveSelectionDown: 1 event: evt].		"down arrow key"		].	asc = 11 ifTrue: [^ self moveSelectionDown: -5 event: evt].		"page up key"	asc = 12 ifTrue: [^ self moveSelectionDown: 5 event: evt].		"page down key"	matchString _ self valueOfProperty: #matchString ifAbsent:		[self setProperty: #matchString toValue: String new.		self setProperty: #originalSubmorphs toValue: submorphs copy.		String new].	matchString _ char = Character backspace		ifTrue: [matchString isEmpty				ifTrue: [matchString]				ifFalse: [matchString allButLast]]		ifFalse: [matchString copyWith: evt keyCharacter].	self setProperty: #matchString toValue: matchString.	self displayFiltered: evt! !!ParagraphEditor methodsFor: 'nonediting/nontyping keys' stamp: 'dvf 12/8/2001 00:46'!raiseContextMenu: characterStream 	"AFAIK, this is never called in morphic, because a subclass overrides it. Which is good, because a ParagraphEditor doesn't know about Morphic and thus duplicates the text-editing actions that really belong in the specific application, not the controller. So the context menu this would raise is likely to be out of date."	self yellowButtonActivity.	^true! !!ParagraphEditor class methodsFor: 'keyboard shortcut tables' stamp: 'dvf 12/7/2001 19:41'!initializeCmdKeyShortcuts	"Initialize the (unshifted) command-key (or alt-key) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor kbdTest"	"ParagraphEditor initialize"	| cmdMap cmds |	cmdMap := Array new: 256 withAll: #noop:.	"use temp in case of a crash"	cmdMap at: 1 + 1 put: #cursorHome:.	"home key"	cmdMap at: 4 + 1 put: #cursorEnd:.	"end key"	cmdMap at: 8 + 1 put: #backspace:.	"ctrl-H or delete key"	cmdMap at: 11 + 1 put: #cursorPageUp:.	"page up key"	cmdMap at: 12 + 1 put: #cursorPageDown:.	"page down key"	cmdMap at: 13 + 1 put: #crWithIndent:.	"cmd-Return"	cmdMap at: 27 + 1 put: #raiseContextMenu:.	"escape key"	cmdMap at: 28 + 1 put: #cursorLeft:.	"left arrow key"	cmdMap at: 29 + 1 put: #cursorRight:.	"right arrow key"	cmdMap at: 30 + 1 put: #cursorUp:.	"up arrow key"	cmdMap at: 31 + 1 put: #cursorDown:.	"down arrow key"	cmdMap at: 32 + 1 put: #selectWord:.	"space bar key"	cmdMap at: 127 + 1 put: #forwardDelete:.	"del key"	'0123456789-=' 		do: [:char | cmdMap at: char asciiValue + 1 put: #changeEmphasis:].	'([{''"<' do: [:char | cmdMap at: char asciiValue + 1 put: #enclose:].	cmdMap at: $, asciiValue + 1 put: #shiftEnclose:.	cmds := #($a #selectAll: $b #browseIt: $c #copySelection: $d #doIt: $e #exchange: $f #find: $g #findAgain: $h #setSearchString: $i #inspectIt: $j #doAgainOnce: $k #offerFontMenu: $l #cancel: $m #implementorsOfIt: $n #sendersOfIt: $o #spawnIt: $p #printIt: $q #querySymbol: $r #recognizer: $s #save: $t #tempCommand: $u #align: $v #paste: $w #backWord: $x #cut: $y #swapChars: $z #undo:).	1 to: cmds size		by: 2		do: [:i | cmdMap at: (cmds at: i) asciiValue + 1 put: (cmds at: i + 1)].	CmdActions := cmdMap! !!PluggableListMorph methodsFor: 'model access' stamp: 'dvf 12/7/2001 19:37'!specialKeyPressed: asciiValue 	| oldSelection nextSelection max howManyItemsShowing |	asciiValue = 27 ifTrue: 		[" escape key"		^ self yellowButtonActivity: ActiveEvent shiftPressed].	max _ self maximumSelection.	max > 0 ifFalse: [^ self].	nextSelection _ oldSelection _ self getCurrentSelectionIndex.	asciiValue = 31 ifTrue: 		[" down arrow"		nextSelection _ oldSelection + 1.		nextSelection > max ifTrue: [nextSelection _ 1]].	asciiValue = 30 ifTrue: 		[" up arrow"		nextSelection _ oldSelection - 1.		nextSelection < 1 ifTrue: [nextSelection _ max]].	asciiValue = 1 ifTrue:		[" home"		nextSelection _ 1].	asciiValue = 4 ifTrue:		[" end"		nextSelection _ max].	howManyItemsShowing _ self numSelectionsInView.	asciiValue = 11 ifTrue:		[" page up"		nextSelection _ 1 max: oldSelection - howManyItemsShowing].	asciiValue = 12 ifTrue:		[" page down"		nextSelection _ oldSelection + howManyItemsShowing min: max].	model okToChange ifFalse: [^ self].	"No change if model is locked"	oldSelection = nextSelection ifTrue: [^ self flash].	^ self changeModelSelection: nextSelection! !!TextMorphEditor methodsFor: 'menu commands' stamp: 'dvf 12/8/2001 00:48'!raiseContextMenu: characterStream 	morph editView yellowButtonActivity: ActiveEvent shiftPressed.	^true! !