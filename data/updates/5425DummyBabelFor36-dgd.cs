'From Squeak3.5 of ''11 April 2003'' [latest update: #5180] on 18 November 2003 at 11:01:08 am'!"Change Set:		DummyBabelFor36-dgdDate:			18 November 2003Author:			Diego Gomez Deck <DiegoGomezDeck@ConsultAr.com>This is a dummy Babel version added as a patch to the 3.6 final release.  (This patched release can be called 3.6.1.)  With this changeset every 'translatable' package can run.This changeset only adds methods and should not affect any existing 3.6 code."!!String methodsFor: '*StringFormatting-formatting' stamp: 'dgd 11/18/2003 10:57'!format: aCollection 	"format the receiver with aCollection  	 	simplest example:  	'foo {1} bar' format: {Date today}. 	 	complete example:  	'\{ \} \\ foo {1} bar {2}' format: {12. 'string'}.  	"	| result stream |	result := String new writeStream.	stream := self readStream.	""	[stream atEnd]		whileFalse: [| currentChar | 			currentChar := stream next.			currentChar == ${				ifTrue: [| expression | 					expression := self getEnclosedExpressionFrom: stream.					result						nextPutAll: (self evaluateExpression: expression parameters: aCollection)]				ifFalse: [""					currentChar == $\						ifTrue: [stream atEnd								ifFalse: [result nextPut: stream next]]						ifFalse: [result nextPut: currentChar]]].	""	^ result contents! !!String methodsFor: '*StringFormatting-private' stamp: 'dgd 11/18/2003 10:58'!evaluateExpression: aString parameters: aCollection 	"private - evaluate the expression aString with  	aCollection as the parameters and answer the  	evaluation result as an string"	| index |	index := ('0' , aString) asNumber.	""	index isZero		ifTrue: [^ '[invalid subscript: {1}]' format: {aString}].	""	index > aCollection size		ifTrue: [^ '[subscript is out of bounds: {1}]' format: {aString}].	""	^ (aCollection at: index) asString! !!String methodsFor: '*StringFormatting-private' stamp: 'dgd 11/18/2003 10:58'!getEnclosedExpressionFrom: aStream 	"private - get the expression enclosed between '{' and  	'}' and remove all the characters from the stream"	| result currentChar |	result := String new writeStream.	""	[aStream atEnd		or: [(currentChar := aStream next) == $}]]		whileFalse: [result nextPut: currentChar].	""	^ result contents withBlanksTrimmed! !!String methodsFor: '*Babel-translating' stamp: 'dgd 11/18/2003 10:58'!translated	"answer the receiver translated to the default language"	" 	this is a dummy implementation to run 'translatable' packages 	in images without Babel	"	^ self! !!String methodsFor: '*Babel-translating' stamp: 'dgd 11/18/2003 10:59'!translatedTo: languageNameSymbol 	"answer the receiver translated to the language named  	languageNameSymbol"	" 	this is a dummy implementation to run 'translatable' packages 	in images without Babel 	"	^ self! !