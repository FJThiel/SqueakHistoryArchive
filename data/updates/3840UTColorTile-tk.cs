'From Squeak3.1alpha of 4 February 2001 [latest update: #3689] on 22 February 2001 at 10:08:34 am'!"(Republished 16 Mar because it was left out of the 3.1 update stream.)"!!SyntaxMorph methodsFor: 'pop ups' stamp: 'tk 2/22/2001 07:20'!colorPatch	"Return a color patch button that lets the user choose a color and modifies the code"	| cc patch sel completeMsg |		(self nodeClassIs: MessageNode) ifFalse: [^ nil].	(sel _ self selector) ifNil: [^ nil].	(Color colorNames includes: sel) | (sel == #r:g:b:) ifFalse: [^ nil].		"a standard color name"	completeMsg _ self isNoun ifTrue: [self] ifFalse: [owner].	(cc _ completeMsg try) class == Color ifFalse: [^ nil].	patch _ ColorTileMorph new colorSwatchColor: cc.		"sends colorChangedForSubmorph: to the messageNode"	patch color: Color transparent; borderWidth: 0.  patch submorphs last delete.	^ patch! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'tk 2/22/2001 10:07'!event: evt arrow: arrowMorph upDown: delta	| st aList index now want instVar |	st _ submorphs detect: [:mm | mm isKindOf: StringMorph] ifNone: [^ self].	(self nodeClassIs: LiteralNode) ifTrue: [ "+/- 1"		st contents: (self decompile asNumber + delta) printString.		^ self acceptSilently.	"maybe set parseNode's key"].	(self nodeClassIs: VariableNode) ifTrue: [ "true/false"		st contents: (self decompile asString = 'true') not printString.		^ self acceptSilently.	"maybe set parseNode's key"].	(self nodeClassIs: SelectorNode) ifTrue: [		aList _ #(+ - * / // \\ min: max:).		index _ aList indexOf: self decompile asString.		index  > 0 ifTrue: [			^ self setSelector: (aList atWrap: index + delta) in: st].		aList _ #(= ~= > >= isDivisibleBy: < <=).		index _ aList indexOf: self decompile asString.		index  > 0 ifTrue: [			^ self setSelector: (aList atWrap: index + delta) in: st].		aList _ #(== ~~).		index _ aList indexOf: self decompile asString.		index  > 0 ifTrue: [			^ self setSelector: (aList atWrap: index + delta) in: st].		'beep:' = self decompile asString ifTrue: ["replace sound arg"			self changeSound: delta.			^ self acceptSilently].		].	(self nodeClassIs: SelectorNode) ifTrue: ["kinds of assignment"		((now _ self decompile asString) beginsWith: 'set') ifTrue:			["a setX: 3"			want _ 1+delta.  instVar _ (now allButFirst: 3) allButLast].		(now endsWith: 'IncreaseBy:') ifTrue: ["a xIncreaseBy: 3 a setX: (a getX +3)."			want _ 2+delta.  instVar _ now allButLast: 11].		(now endsWith: 'DecreaseBy:') ifTrue: ["a xDecreaseBy: 3 a setX: (a getX -3)."			want _ 3+delta.  instVar _ now allButLast: 11].		(now endsWith: 'MultiplyBy:') ifTrue: ["a xMultiplyBy: 3 a setX: (a getX *3)."			want _ 4+delta.  instVar _ now allButLast: 11].		want ifNil: [^ self].		instVar _ instVar asLowercase.		want _ #(1 2 3 4) atWrap: want.		want = 1 ifTrue: [^ self setSelector: ('set', instVar capitalized, ':') in: st].			"setter method is present"		want = 2 ifTrue: [^ self setSelector: instVar, 'IncreaseBy:' in: st].			"notUnderstood will create the method if needed"		want = 3 ifTrue: [^ self setSelector: instVar, 'DecreaseBy:' in: st].			"notUnderstood will create the method if needed"		want = 4 ifTrue: [^ self setSelector: instVar, 'MultiplyBy:' in: st].			"notUnderstood will create the method if needed"		].! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'tk 2/22/2001 10:06'!setSelector: stringLike in: stringMorph	| aSymbol |	"store the new selector and accept method"	aSymbol _ stringLike asSymbol.	self setBalloonText: (ScriptingSystem helpStringForOperator: aSymbol).	stringMorph contents: (self substituteKeywordFor: aSymbol).	"parseNode key: aSymbol code: nil."	stringMorph setProperty: #syntacticallyCorrectContents toValue: aSymbol.	self acceptSilently.! !