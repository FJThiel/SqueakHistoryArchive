'From Squeak 2.3 of January 14, 1999 on 14 March 1999 at 5:15:00 pm'!"Change Set:		BugFixesDate:			14 March 1999Author:			Dan IngallsA number of bug fixes as follows...Fixed HandMorph bounds with non-empty initials.Fixed MenuMorph>>invokeItem: to pass event properly.Added asString to TextInput>>value (from Mark Guzdial).Fixed reference to CompiledMethod in SystemTracer>>initCompactClasses.Changed a few calls on WorldMorph>>doOneCycle to either just call displayWorld, or to call doOneSubCycle, a new variant that preserves the outer value of activeHand."!!CharRecog methodsFor: 'recognizer' stamp: 'di 3/14/1999 16:45'!stringForUnrecognizedFeatures: features	"Prompt the user for what string the current features represent, and return the result.  9/18/96 sw"	| result |	result _ FillInTheBlank request:('Not recognized. type char, or "tab", "cr" or "bs",or hit return to ignore ', features).	textMorph ifNotNil:		[textMorph world displayWorld "take down the FillInTheBlank morph"].	^ (result = '~' | result = '')		ifTrue:			['']		ifFalse:			[CharacterDictionary at: features put: result. result]! !!Morph methodsFor: 'drawing' stamp: 'di 3/14/1999 17:11'!flash	| c w |	c _ self color.	self color: Color black.	(w _ self world) ifNotNil: [w doOneSubCycle].	self color: c! !!HaloMorph methodsFor: 'private' stamp: 'di 3/14/1999 16:45'!doDebug: evt with: menuHandle	"Ask hand to invoke the a debugging menu for my inner target."	| menu |	self removeAllHandlesBut: nil.  "remove all handles"	self world displayWorld.	menu _ evt hand buildDebugHandleMenuFor: innerTarget.	menu addTitle: innerTarget externalName.	evt hand invokeMenu: menu event: evt.! !!HaloMorph methodsFor: 'private' stamp: 'di 3/14/1999 16:46'!doMenu: evt with: menuHandle	"Ask hand to invoke the halo menu for my inner target."	| menu |	self removeAllHandlesBut: nil.  "remove all handles"	self world displayWorld.	menu _ evt hand buildMorphHandleMenuFor: innerTarget.	menu addTitle: innerTarget externalName.	evt hand invokeMenu: menu event: evt.! !!HandMorph reorganize!('initialization' initForEvents initialize)('classification' isHandMorph)('accessing' argument lastEvent setArgument: targetOffset userInitials)('cursor' cursorBounds showTemporaryCursor: showTemporaryCursor:hotSpotOffset:)('geometry' changed fullBounds invalidRect: position position: userInitials:)('drawing' colorForInsets drawOn: fullDrawOn: hasChanged needsToBeDrawn nonCachingFullDrawOn: restoreSavedPatchOn: savePatchFrom: shadowForm shadowOffset trailMorph updateCacheCanvasDepth:)('event handling' addMouseOverMorph: gridPointRaw handleDragOver: handleEvent: handleMouseDown: handleMouseMove: handleMouseOver: handleMouseUp: keyboardFocus mouseOverList: mouseOverList:rank: newKeyboardFocus: newMouseFocus: pauseEventRecorderIn: processEvents recipientForMouseDown: startReportingEventsTo: stopReportingEventsTo: transformEvent: updateMouseDownTransform)('double click support' checkForDoubleClick: resetClickState waitForClicksOrDrag:event:)('grabbing/dropping' attachMorph: dropMorphsEvent: dropTargetFor:event: grabMorph: grabMorphFromMenu:)('world menu' buildWorldMenu changesDo changesMenu debugDo debugMenu helpDo helpMenu newMorph openMenu openWindow remoteDo remoteMenu scriptingDo scriptingMenu windowsDo windowsMenu worldMenuHelp)('world menu commands' absorbUpdatesFromServer argumentOrNil beThisWorldsModel browseChangedMessages browseMorphClass browsePlayerClass buildDebugHandleMenuFor: buildMorphHandleMenuFor: buildMorphMenuFor: callTempCommand changeBackgroundColor changeColor changeColorTarget:selector: changeVariableType chooseColor chooseNewCostumeForArgument chooseTargetSubmorphOf:caption: classOfPasteBuffer cleanUpWorld closeUnchangedWindows collapseAll copyToPasteBuffer defineTempCommand deleteNonWindows detachableScriptingSpace dismissMorph drawingClass duplicateMorph expandAll findDirtyBrowsers findDirtyWindows findWindow goBehind grabDrawingFromScreen grabMorph inspectArgument inspectArgumentInMorphic inspectArgumentsPlayerInMorphic inspectMorph inspectMorphInMorphic inspectPlayer inspectWorldModel invokeMenu:event: invokeMetaMenu: jumpToProject lockMorph makeAliasForArgument maybeDuplicateMorph nameMorph newDrawingFromMenu newMorphOfClass:event: objectToPaste offerFlapsMenu openBrowser openChangeSorter: openChangesLog openConstructionProject openEmail openFileList openIRC openMVCProject openMorphicProject openRecentChanges openScrapsBook openViewerForArgument openWebBrowser openWorkspace operateOnSubmorph:event: pasteMorph placeArgumentIn potentialEmbeddingTargets projectThumbnail quitSession readMorphFromAFile resizeMorph saveAndQuit saveAs saveAsPrototype saveOnFile savePictureOfWorld saveSession saveWorldInFile selectEmbedTargetMorph: selectSubmorphToOperateOn:sending:event: setDisplayDepth setGridding showActions startMessageTally subclassMorph submorphNameFor: unlockContents unlockOneSubpart writeInitMethodForModel)('special gestures' specialDrag: specialGesture:)('halos' addHalo chooseHaloSubmorphOf:caption: invokeMetaMenuFor: popUpHalo: popUpHaloFromClick:)('remote morphic' cleanupDeadConnections connectRemoteUser disconnectAllRemoteUsers disconnectRemoteUser readyToTransmit reportLocalAddress startTransmittingEventsTo: stopTransmittingEventsTo: transmitEvent:)('from EToyHand' clearPaletteArea endDisplaySuppression formerOwner formerPosition makeNewDrawingInBounds:pasteUpMorph: makeNewPlayerInstance rejectDropMorph:event: roundUpStrayObjects showHiders startDisplaySuppression suppressDisplay unlockWorldContents)('meta menu')('copying' veryDeepCopyWith:)('file in/out' objectForDataStream:)!!HandMorph methodsFor: 'cursor' stamp: 'di 3/14/1999 10:03'!cursorBounds	temporaryCursor == nil		ifTrue: [^ self position extent: NormalCursor extent]		ifFalse: [^ self position + temporaryCursorOffset								extent: temporaryCursor extent]! !!HandMorph methodsFor: 'cursor' stamp: 'di 3/14/1999 10:07'!showTemporaryCursor: cursorOrNil hotSpotOffset: hotSpotOffset	"Set the temporary cursor to the given Form.	If the argument is nil, revert to the normal hardware cursor."	self changed.	cursorOrNil == nil		ifTrue: [temporaryCursor _ nil.				temporaryCursorOffset _ 0@0]		ifFalse: [temporaryCursor _ cursorOrNil asCursorForm.				temporaryCursorOffset _ temporaryCursor offset - hotSpotOffset].	bounds _ self cursorBounds.	self userInitials: userInitials.	self layoutChanged.	self changed.! !!HandMorph methodsFor: 'geometry' stamp: 'di 3/14/1999 11:39'!userInitials: aString	| qp cb |	userInitials _ aString.	userInitials isEmpty ifFalse:		[qp _ QuickPrint new.		cb _ self cursorBounds.		self bounds: (cb merge: (cb topRight + (0@4)					extent: (qp stringWidth: userInitials)@(qp lineHeight)))]! !!HandMorph methodsFor: 'drawing' stamp: 'di 3/14/1999 11:41'!drawOn: aCanvas	"Draw the hand itself (i.e., the cursor)."	temporaryCursor == nil		ifTrue: [aCanvas image: NormalCursor at: bounds topLeft]		ifFalse: [aCanvas image: temporaryCursor at: bounds topLeft].	userInitials size > 0 ifTrue:		[aCanvas text: userInitials					at: (self cursorBounds topRight + (0@4))					font: nil color: color].! !!MenuItemMorph methodsFor: 'events' stamp: 'di 3/14/1999 13:05'!mouseUp: evt	"Handle a mouse up event. Menu items get activated when the mouse is over them."	| mouseInMe |	mouseInMe _ self boundsInWorld containsPoint: evt cursorPoint.	self deselectItem.	self isInMenu ifTrue: [		(mouseInMe and: [self selector = #toggleStayUp:])			ifFalse: [owner deleteIfPopUp].		subMenu ifNil: [			mouseInMe ifTrue: [				evt hand world displayWorld.				owner invokeItem: self event: evt]]].! !!MenuMorph methodsFor: 'control' stamp: 'di 3/14/1999 13:04'!invokeItem: aMenuItem	"Perform the action associated with the given menu item."	^ self invokeItem: aMenuItem event: originalEvent! !!MenuMorph methodsFor: 'control' stamp: 'di 3/14/1999 13:03'!invokeItem: aMenuItem event: evt	"Perform the action associated with the given menu item."	| sel target args selArgCount |	aMenuItem isEnabled ifFalse: [^ self].	lastSelection _ aMenuItem.	"to do: report lastSelection"	sel _ aMenuItem selector.	target _ aMenuItem target.	args _ aMenuItem arguments.	selArgCount _ sel numArgs.	Cursor normal showWhile: [  "show cursor in case item opens a new MVC window"		selArgCount = 0			ifTrue: [target perform: sel]			ifFalse: [				selArgCount = args size					ifTrue: [target perform: sel withArguments: args]					ifFalse: [target perform: sel withArguments: (args copyWith: evt)]]].! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'di 3/14/1999 16:44'!displayAt: aPoint during: aBlock	"Add this menu to the Morphic world during the execution of the given block."	World ifNil: [^ self].	World addMorph: self centeredNear: (aPoint - World viewBox origin).	World displayWorld.  "show myself"	aBlock value.	self delete.! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'di 3/14/1999 17:06'!invokeAt: aPoint in: aWorld	"Add this menu to the given world centered at the given point. Wait for the user to make a selection and answer it. The selection value returned is an integer in keeping with PopUpMenu, if the menu is converted from an MVC-style menu."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop." 	| h |	h _ aWorld activeHand.	h ifNil: [h _ aWorld hands first].	self popUpAt: aPoint forHand: h.	done _ false.	[self isInWorld & done not] whileTrue: [aWorld doOneSubCycle].	self delete.	^ selectedItem! !!MVCMenuMorph methodsFor: 'private' stamp: 'di 3/14/1999 13:12'!invokeItem: aMenuItem event: evt	"Called by the MenuItemMorph that the user selects.	Record the selection and set the done flag to end this interaction."	selectedItem _ aMenuItem selector.	done _ true.! !!MoviePlayerMorph methodsFor: 'access' stamp: 'di 3/14/1999 17:10'!thumbnailForThisPage	"Overridden to make a MovieFrameSyncMorph"	| image |	image _ currentPage image.	self activeHand attachMorph:		(MovieFrameSyncMorph new			image: (image magnifyBy: 50 asFloat / (image width max: image height))			player: self frameNumber: frameNumber)! !!SystemTracer methodsFor: 'initialization' stamp: 'di 3/14/1999 10:00'!initCompactClasses 	| c |	c _ Array new: 31.		"These classes have a short name (their index in this table.  It is not their oop.)	Thus their instances can use just a single word as their header in memory."	c at: 1 put: CompiledMethod.  c at: 2 put: Symbol. c at: 3 put: Array.	c at: 4 put: Float.  c at: 5 put: LargePositiveInteger.  c at: 6 put: String.	c at: 7 put: MethodDictionary.  c at: 8 put: Association.  c at: 9 put: Point.	c at: 10 put: Rectangle.  c at: 11 put: ClassOrganizer.  c at: 12 put: TextLineInterval.	"**NOTE** at present the Squeak VM relies on BlockContext=13 and MethodContext=14"	c at: 13 put: BlockContext.  c at: 14 put: MethodContext.  c at: 15 put: PseudoContext.	compactClasses _ c.	"16 to 31 are available for user defined compact classes."	"Attempt to correctly write contextCache image.."	"compactClasses _ Smalltalk compactClassesArray"! !!TextInput methodsFor: 'input handling' stamp: 'di 3/10/1999 08:45'!value	textMorph hasUnacceptedEdits ifTrue: [ textMorph accept ].	^textMorph getText asString withInternetLineEndings! !!WorldMorph methodsFor: 'interaction loop' stamp: 'di 3/14/1999 17:08'!doOneSubCycle	"Like doOneCycle, but preserves activeHand."	| currentHand |	currentHand _ activeHand.	self interCyclePause: MinCycleLapse.	self doOneCycleNow.	activeHand _ currentHand! !MVCMenuMorph removeSelector: #invokeItem:!