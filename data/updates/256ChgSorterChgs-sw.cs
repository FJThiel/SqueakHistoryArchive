'From Squeak 2.2beta of Sept 11, 1998 on 14 September 1998 at 8:32:08 am'!"Change Set:		ChgSorterChgs-swDate:			14 September 1998Author:			Scott WallaceAdds commands to *move* class changes to other side and to *move* a method change to the other side of a dual change sorter."!!ChangeSorter methodsFor: 'class list' stamp: 'sw 9/11/1998 16:07'!classMenu: aMenu	"Could be for a single or double changeSorter"	^ parent ifNotNil:		[aMenu labels: 'copy class chgs to other sidemove class chgs to other sidedelete class chgs from this change setbrowse fullinst var refs...inst var defs...class var refs...class variablesclass refs'		lines: #(3 4 )		selections: #(copyClassToOther moveClassToOther forgetClass browseMethodFull browseInstVarRefs browseInstVarDefs browseClassVarRefs browseClassVariables browseClassRefs)]	ifNil:		[ aMenu labels: 'delete class chgs from this change setbrowse fullinst var refs...inst var defs...class var refs...class variablesclass refs'		lines: #(1 2 )		selections: #(forgetClass browseMethodFull browseInstVarRefs browseInstVarDefs browseClassVarRefs browseClassVariables browseClassRefs)]! !!ChangeSorter methodsFor: 'class list' stamp: 'sw 9/11/1998 16:17'!moveClassToOther	"Place class changes in the other changeSet and remove them from this one"	| info cls otherSorter otherChangeSet |	self okToChange ifFalse: [^ self beep].	currentClassName ifNil: [^ self beep].	otherSorter _ parent other: self.	otherChangeSet _ otherSorter changeSet.	otherChangeSet == myChangeSet ifTrue: [^ self beep].	(myChangeSet classRemoves includes: currentClassName)		ifTrue:			[otherChangeSet noteRemovalOf: currentClassName]		ifFalse:			[info _ myChangeSet classChangeAt: (cls _ self selectedClassOrMetaClass) name.			info do: [:each | otherChangeSet atClass: cls add: each].			info _ myChangeSet methodChanges at: cls name ifAbsent: [Dictionary new].			info associationsDo: [:ass |				otherChangeSet atSelector: ass key class: cls put: ass value]].	otherSorter showChangeSet: otherChangeSet.	self forgetClass! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 9/11/1998 15:57'!messageMenu: aMenu shifted: shifted	"Could be for a single or double changeSorter"	shifted ifTrue: [^ self shiftedMessageMenu: aMenu].	parent ifNotNil:		[^ aMenu labels: 'copy method to other sidemove method to other sidedelete method from change setremove method from systembrowse fullfileOutprintOutsenders of...implementors of...method inheritanceversionsmore...'		lines: #(2 4 7 11)		selections: #(copyMethodToOther moveMethodToOtherforget removeMessagebrowseMethodFull fileOutMessage printOutMessagebrowseSendersOfMessages browseMessages methodHierarchy browseVersions shiftedYellowButtonActivity )]	ifNil: [^ aMenu labels: 'delete method from change setremove method from systembrowse fullfileOutprintOutsenders of...implementors of...method inheritanceversionsmore...'		lines: #(2 5 9 )		selections: #( forget removeMessagebrowseMethodFull fileOutMessage printOutMessagebrowseSendersOfMessages browseMessages methodHierarchy browseVersions shiftedYellowButtonActivity )]! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 9/11/1998 15:56'!moveMethodToOther	"Place this change in the other changeSet and remove it from this side"	| other info cls sel |	self okToChange ifFalse: [^ self beep].	currentSelector ifNotNil:		[other _ (parent other: self) changeSet.		other == myChangeSet ifTrue: [^ self beep].		cls _ self selectedClassOrMetaClass.		sel _ currentSelector asSymbol.		info _ myChangeSet methodChanges at: cls name ifAbsent: [Dictionary new].		other atSelector: sel			class: cls 			put: (info at: sel).			(parent other: self) showChangeSet: other.		self forget "removes the method from this side"]! !