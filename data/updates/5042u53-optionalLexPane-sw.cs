'From Squeak3.3alpha of 18 January 2002 [latest update: #4922] on 23 July 2002 at 1:26:15 pm'!"Change Set:		optionalLexiconPane-swDate:			23 July 2002Author:			Scott WallacePublished to 3.3a as 4923optionalLexiconPane-sw.cs.Makes the custom Lexicon control buttons occupy a separate pane *in adttiition to* the one governed by the optionalButtons preference.  Thus, if #optionalButtons is true, a Lexicon will have *two* rows of control buttons -- one offering the custom lexicon-specific navigation features and the other with the standard repertory of senders, implementors, etc, which had for space reasons previously had to be omitted from the Lexicon's touchable controls.Also, fixes a seemingly-long-standing bug that appears to have made protocol browsers not work properly in mvc."!!CodeHolder methodsFor: 'message list' stamp: 'sw 7/23/2002 13:05'!sourceStringPrettifiedAndDiffed	"Answer a copy of the source code for the selected message, transformed by diffing and pretty-printing exigencies"	| class selector sourceString |	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	(class isNil or: [selector isNil]) ifTrue: [^ 'missing'].	sourceString _ class ultimateSourceCodeAt: selector ifAbsent: [^ 'error'].	self validateMessageSource: sourceString forSelector: selector.	(#(prettyPrint colorPrint prettyDiffs altSyntax) includes: contentsSymbol) ifTrue:		[sourceString _ class compilerClass new			format: sourceString in: class notifying: nil contentsSymbol: contentsSymbol].	self showingAnyKindOfDiffs ifTrue:		[sourceString _ self diffFromPriorSourceFor: sourceString].	^ sourceString! !!Lexicon methodsFor: 'control buttons' stamp: 'sw 7/23/2002 12:56'!customButtonRow	"Answer a custom row of widgets, which pertain primarily to within-tool navigation"	| aRow aButton aLabel |	aRow _ AlignmentMorph newRow.	aRow setNameTo: 'navigation controls'.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow wrapCentering: #center; cellPositioning: #leftCenter.	aRow clipSubmorphs: true.	aRow cellInset: 3.	self customButtonSpecs  do:		[:triplet |			aButton _ PluggableButtonMorph				on: self				getState: nil				action: triplet second.			aButton 				useRoundedCorners;				hResizing: #spaceFill;				vResizing: #spaceFill;				onColor: Color transparent offColor: Color transparent.			aLabel _ Preferences abbreviatedBrowserButtons 				ifTrue: [self abbreviatedWordingFor: triplet second]				ifFalse: [nil].			aButton label: (aLabel ifNil: [triplet first asString])				" font: (StrikeFont familyName: 'Atlanta' size: 9)".			triplet size > 2 ifTrue: [aButton setBalloonText: triplet third].			triplet size > 3 ifTrue: [aButton triggerOnMouseDown: triplet fourth].			aRow addMorphBack: aButton].	aRow addMorphBack: self homeCategoryButton.	aRow addMorphFront: (Morph new extent: (4@10)) beTransparent.	aRow addMorphFront: self mostGenericButton.	aRow addMorphFront: self menuButton.	^ aRow! !!Lexicon methodsFor: 'control buttons' stamp: 'sw 7/23/2002 12:51'!customButtonSpecs	"Answer a triplet defining buttons, in the format:			button label			selector to send			help message"	| aa |	aa _ contentsSymbol == #tiles ifTrue: [{   "Consult Ted Kaehler regarding this bit"	{'tiles'.				#tilesMenu.					'tiles for assignment and constants'. 	true}.	{'vars'.				#varTilesMenu.	'tiles for instance variables and a new temporary'. 	true}		}] ifFalse: [#()].	"true in 4th place means act on mouseDown"	^ aa, #(	('follow'			seeAlso							'view a method I implement that is called by this method')	('find'				obtainNewSearchString			'find methods by name search')	('sent...'			setSendersSearch				'view the methods I implement that send a given message')	('<'					navigateToPreviousMethod 		'view the previous active method')	('>'					navigateToNextMethod 			'view the next active method')	('-'					removeFromSelectorsVisited		'remove this method from my active list'))! !!Lexicon methodsFor: 'within-tool queries' stamp: 'sw 7/23/2002 12:43'!queryCharacterization	"Answer a characterization of the most recent query"	currentQuery == #selectorName		ifTrue: [^ 'My methods whose names include "', self lastSearchString, '"'].	currentQuery == #methodsWithInitials		ifTrue: [^ 'My methods stamped with initials ', currentQueryParameter].	currentQuery == #senders		ifTrue: [^ 'My methods that send #', self lastSendersSearchSelector].	currentQuery == #currentChangeSet		ifTrue: [^ 'My methods in the current change set'].	currentQuery == #instVarRefs		ifTrue:	[^ 'My methods that refer to instance variable "', currentQueryParameter, '"'].	currentQuery == #instVarDefs		ifTrue:	[^ 'My methods that store into instance variable "', currentQueryParameter, '"'].	currentQuery == #classVarRefs		ifTrue:	[^ 'My methods that refer to class variable "', currentQueryParameter, '"'].	^ 'Results of queries will show up here'! !!Lexicon methodsFor: 'controls' stamp: 'sw 7/23/2002 12:55'!addOptionalButtonsTo: window at: fractions plus: verticalOffset	"In this case we may actually add TWO rows of buttons."	| delta buttons divider anOffset |	anOffset _ Preferences optionalButtons		ifTrue:			[super addOptionalButtonsTo: window at: fractions plus: verticalOffset]		ifFalse:			[verticalOffset].	delta _ self defaultButtonPaneHeight.	buttons _ self customButtonRow.	buttons	 color: (Display depth <= 8 ifTrue: [Color transparent] ifFalse: [Color gray alpha: 0.2]);		borderWidth: 0.	Preferences alternativeWindowLook ifTrue:		[buttons color: Color transparent.		buttons submorphsDo:[:m | m borderWidth: 2; borderColor: #raised]].	divider _ BorderedSubpaneDividerMorph forBottomEdge.	Preferences alternativeWindowLook ifTrue:		[divider extent: 4@4; color: Color transparent; borderColor: #raised; borderWidth: 2].	window 		addMorph: buttons		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@anOffset corner: 0@(anOffset + delta - 1))).	window 		addMorph: divider		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@(anOffset + delta - 1) corner: 0@(anOffset + delta))).	^ anOffset + delta! !Lexicon removeSelector: #optionalButtonPairs!Lexicon removeSelector: #optionalButtonRow!Lexicon removeSelector: #wantsOptionalButtons!