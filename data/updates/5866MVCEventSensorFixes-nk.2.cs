'From Squeak3.7alpha of 11 September 2003 [latest update: #5816] on 17 March 2004 at 7:41:46 am'!"Change Set:		MVCEventSensorFixes-nkDate:			16 March 2004Author:			Ned KonzFixes the MVC hang upon switching between views that was introduced by CS 5784NoEventSensorProcess-ar.This was caused by waitNoButton and other tight delay loops calling anyButtonPressed, which was returning mouseButtons without having a chance to actually update that variable.v1 (16 March)v2 (17 March): more refactoring; made all tests and waits consistent."!!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:24'!anyButtonPressed	"Answer whether at least one mouse button is currently being pressed."	^ self primMouseButtons anyMask: 7! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:24'!blueButtonPressed	"Answer whether only the blue mouse button is being pressed. 	This is the third mouse button or cmd+click on the Mac."	^ (self primMouseButtons bitAnd: 7) = 1! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:24'!mouseButtons	"Answer a number from 0 to 7 that encodes the state of the three mouse buttons in its lowest 3 bits."	^ self primMouseButtons bitAnd: 7! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:02'!noButtonPressed	"Answer whether any mouse button is not being pressed."	^self anyButtonPressed not! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:16'!redButtonPressed	"Answer true if only the red mouse button is being pressed.	This is the first mouse button, usually the left one."	^ (self primMouseButtons bitAnd: 7) = 4! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:22'!waitButton	"Wait for the user to press any mouse button and then answer with the 	current location of the cursor."	| delay |	delay _ Delay forMilliseconds: 50.	[self anyButtonPressed] whileFalse: [ delay wait ].	^self cursorPoint! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:22'!waitButtonOrKeyboard	"Wait for the user to press either any mouse button or any key. 	Answer the current cursor location or nil if a keypress occured."	| delay |	delay := Delay forMilliseconds: 50.	[self anyButtonPressed]		whileFalse: [delay wait.			self keyboardPressed				ifTrue: [^ nil]].	^ self cursorPoint! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:25'!waitNoButton	"Wait for the user to release any mouse button and then answer the current location of the cursor."	| delay |	delay _ Delay forMilliseconds: 50.	[self anyButtonPressed] whileTrue: [ delay wait].	^self cursorPoint! !!InputSensor methodsFor: 'mouse' stamp: 'nk 3/17/2004 07:05'!yellowButtonPressed	"Answer whether only the yellow mouse button is being pressed. 	This is the second mouse button or option+click on the Mac."	^ (self primMouseButtons bitAnd: 7) = 2! !!EventSensor methodsFor: 'accessing' stamp: 'nk 3/17/2004 07:09'!nextEventSynthesized	"Return a synthesized event. This method is called if an event driven client wants to receive events but the primary user interface is not event-driven (e.g., the receiver does not have an event queue but only updates its state). This can, for instance, happen if a Morphic World is run in an MVC window. To simplify the clients work this method will always return all available keyboard events first, and then (repeatedly) the mouse events. Since mouse events come last, the client can assume that after one mouse event has been received there are no more to come. Note that it is impossible for EventSensor to determine if a mouse event has been issued before so the client must be aware of the possible problem of getting repeatedly the same mouse events. See HandMorph>>processEvents for an example on how to deal with this."	| kbd array buttons pos modifiers mapped |	"First check for keyboard"	array _ Array new: 8.	kbd _ self primKbdNext.	kbd ifNotNil:		["simulate keyboard event"		array at: 1 put: EventTypeKeyboard. "evt type"		array at: 2 put: Time millisecondClockValue. "time stamp"		array at: 3 put: (kbd bitAnd: 255). "char code"		array at: 4 put: EventKeyChar. "key press/release"		array at: 5 put: (kbd bitShift: -8). "modifier keys"		^ array].	"Then check for mouse"	pos _ self primMousePt.	buttons _ mouseButtons.	modifiers _ buttons bitShift: -3.	buttons _ buttons bitAnd: 7.	mapped _ self mapButtons: buttons modifiers: modifiers.	array 		at: 1 put: EventTypeMouse;		at: 2 put: Time millisecondClockValue;		at: 3 put: pos x;		at: 4 put: pos y;		at: 5 put: mapped;		at: 6 put: modifiers.	^ array! !EventSensor removeSelector: #buttons!EventSensor removeSelector: #mouseButtons!