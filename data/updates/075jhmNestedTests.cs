'From Squeak 2.0 of May 22, 1998 on 29 May 1998 at 12:11:52 pm'!"Change Set:		jhmNestedTestsDate:			29 May 1998Author:			John MaloneyMakes test-yes-no constructs nest properly in script editors."!!Morph methodsFor: 'printing' stamp: 'jm 5/28/1998 18:00'!printStructureOn: aStream indent: tabCount	tabCount timesRepeat: [aStream tab].	self printOn: aStream.	aStream cr.	self submorphsDo: [:m | m printStructureOn: aStream indent: tabCount + 1].! !!Morph methodsFor: 'printing' stamp: 'jm 5/28/1998 17:58'!structureString	"Return a string that showing this morph and all its submorphs in an indented list that reflects its structure."	| s |	s _ WriteStream on: (String new: 1000).	self printStructureOn: s indent: 0.	^ s contents! !!CompoundTileMorph methodsFor: 'all' stamp: 'jm 5/28/1998 19:07'!codeString	| s |	s _ WriteStream on: ''.	self storeCodeOn: s indent: 1.	^ s contents! !!CompoundTileMorph methodsFor: 'all' stamp: 'jm 5/29/1998 10:26'!storeCodeBlockFor: scriptPart on: aStream indent: tabCount	| rows r |	rows _ scriptPart tileRows.	1 to: rows size do: [:i |		tabCount timesRepeat: [aStream tab].		r _ rows at: i.		r do: [:t | t storeCodeOn: aStream indent: tabCount].		i < rows size ifTrue: [aStream nextPut: $.; cr]].! !!CompoundTileMorph methodsFor: 'all' stamp: 'jm 5/29/1998 10:31'!storeCodeOn: aStream indent: tabCount	aStream nextPut: $(.	testPart storeCodeOn: aStream indent: 0.	aStream nextPut: $); cr.	tabCount + 1 timesRepeat: [aStream tab].	aStream nextPutAll: 'ifTrue: ['; cr.	self storeCodeBlockFor: yesPart on: aStream indent: tabCount + 2.	aStream nextPut: $]; cr.	tabCount + 1 timesRepeat: [aStream tab].	aStream nextPutAll: 'ifFalse: ['; cr.	self storeCodeBlockFor: noPart on: aStream indent: tabCount + 2.	aStream nextPut: $].! !!PhraseTileMorph methodsFor: 'all' stamp: 'jm 5/28/1998 19:10'!catchDivideByZero: aStream indent: tabCount	"See if I am have divide as my operator. If so, insert a test in the argument to divide."	(submorphs at: 2) type = #operator ifFalse: [^ false].		"not me"	(submorphs at: 2) operatorOrExpression == #/ ifFalse: [^ false].	"not me"	aStream space.	aStream nextPutAll: '(self beNotZero: '.	(submorphs at: 3) storeCodeOn: aStream indent: tabCount.	aStream nextPut: $).	^ true! !!PhraseTileMorph methodsFor: 'all' stamp: 'jm 5/28/1998 19:07'!codeString	| aStream |	aStream _ ReadWriteStream on: ''.	self storeCodeOn: aStream indent: 1.	^ aStream contents! !!PhraseTileMorph methodsFor: 'all' stamp: 'jm 5/28/1998 19:10'!storeCodeOn: aStream indent: tabCount	"Add in some smarts for division by zero."	aStream nextPut: $(.	(submorphs at: 1) storeCodeOn: aStream indent: tabCount.	aStream space.	(submorphs at: 2) storeCodeOn: aStream indent: tabCount.	submorphs size > 2 ifTrue: [		(self catchDivideByZero: aStream indent: tabCount) ifFalse: [			aStream space.			(submorphs at: 3) storeCodeOn: aStream indent: tabCount]].	aStream nextPut: $).! !!ScriptEditorMorph methodsFor: 'other' stamp: 'jm 5/28/1998 19:11'!codeString	| s |	s _ WriteStream on: ''.	self storeCodeOn: s indent: 1.	^ s contents! !!ScriptEditorMorph methodsFor: 'other' stamp: 'jm 5/29/1998 10:43'!storeCodeOn: aStream indent: tabCount	| lastOwner |	lastOwner _ nil.	self tileRows do: [:r |		r do: [:m |			((m isKindOf: TileMorph) or:			 [(m isKindOf: CompoundTileMorph) or:			 [m isKindOf: PhraseTileMorph]]) ifTrue: [				tabCount timesRepeat: [aStream tab].				((m owner ~= lastOwner) and: [lastOwner ~= nil])					ifTrue:						[aStream nextPut: $.; cr; tab.						m storeCodeOn: aStream indent: tabCount]					ifFalse:						[(lastOwner ~= nil) ifTrue: [aStream space].						m storeCodeOn: aStream indent: tabCount].				lastOwner _ m owner]]].! !!ScriptEditorMorph methodsFor: 'other' stamp: 'jm 5/28/1998 17:40'!userScriptObject	^ self topEditor playerScripted class userScriptForPlayer: playerScripted selector: scriptName! !!BooleanScriptEditor methodsFor: 'all' stamp: 'jm 5/28/1998 19:17'!storeCodeOn: aStream indent: tabCount	((submorphs size > 0) and:	 [submorphs first submorphs size > 0]) ifTrue: [			aStream nextPutAll: '(('.			super storeCodeOn: aStream indent: tabCount.			aStream nextPutAll: ') ~~ false)'.			^ self].	aStream nextPutAll: ' true '.! !!TileMorph methodsFor: 'code generation' stamp: 'jm 5/28/1998 19:12'!codeString	| s |	s _ WriteStream on: ''.	self storeCodeOn: s indent: 1.	^ s contents! !!TileMorph methodsFor: 'code generation' stamp: 'jm 5/28/1998 19:04'!storeCodeOn: aStream indent: tabCount	| op refType playerBearingCode |	"Must determine whom is scripted for what follows to work"	playerBearingCode _ self playerBearingCode.  "If it's ever nil, we've got trouble"	type = #expression ifTrue:		[^ aStream			nextPut: $(;			nextPutAll: operatorOrExpression;			nextPut: $)].	type = #literal ifTrue:		[^ aStream			nextPut: $(;			nextPutAll: literal printString;			nextPut: $)].	type == #objRef ifTrue:		[^ (playerBearingCode == actualObject)			ifTrue:				["This is the critical point -- if the object is the method's own 'self' then we MUST, rather than just MAY, put out self rather than the referencer call, though the latter will temporarily work as long we have true uniclasses."				aStream nextPutAll: 'self']			ifFalse:				[aStream nextPutAll: 'self class '.				aStream nextPutAll: (playerBearingCode class referenceSelectorFor: actualObject)]].	type = #operator ifTrue:		[((UpdatingOperators includesKey: operatorOrExpression) and:		 [self precedingTileType = #slotRef])			ifTrue: [op _ UpdatingOperators at: operatorOrExpression]			ifFalse: [op _ operatorOrExpression].		^ op isEmpty			ifTrue: [aStream position: aStream position - 1]			ifFalse: [aStream nextPutAll: op]]."The following branch has long been disused	type = #slotRef ifTrue:		[self isThisEverCalled.		refType _ self slotRefType.		refType = #get ifTrue:			[^ aStream				nextPutAll: targetName;				space;				nextPutAll: (Utilities getterSelectorFor: slotName)].		refType = #set ifTrue:			[^ aStream				nextPutAll: targetName;				space;				nextPutAll: (Utilities setterSelectorFor: slotName);				nextPut: $:].		refType = #update ifTrue:			[^ aStream				nextPutAll: targetName;				space;				nextPutAll: slotName;				nextPutAll: ': ';				nextPutAll: targetName;				space;				nextPutAll: slotName]]"! !!AssignmentTileMorph methodsFor: 'all' stamp: 'jm 5/28/1998 19:17'!storeCodeOn: aStream indent: tabCount	aStream nextPutAll: ' assign', (assignmentSuffix copyWithout: $:), 'Getter: #'.	aStream nextPutAll: (Utilities getterSelectorFor: assignmentRoot).	aStream nextPutAll: ' setter: #'.	aStream nextPutAll: (Utilities setterSelectorFor: assignmentRoot).	aStream nextPutAll: ' amt: '.! !!ColorTileMorph methodsFor: 'other' stamp: 'jm 5/28/1998 19:02'!storeCodeOn: aStream indent: tabCount	aStream nextPutAll: colorSwatch color printString.! !!ColorSeerTile methodsFor: 'as yet unclassified' stamp: 'jm 5/28/1998 19:19'!storeCodeOn: aStream indent: tabCount	"We have a hidden arg. Output two keywords with interspersed arguments."	| parts |	parts _ operatorOrExpression keywords.	"color:sees:"	^ aStream nextPutAll: (parts at: 1); space;		nextPutAll: colorSwatch color printString; space;		nextPutAll: (parts at: 2).! !!TilePadMorph methodsFor: 'all' stamp: 'jm 5/28/1998 19:10'!storeCodeOn: aStream indent: tabCount	submorphs do: [:m | m storeCodeOn: aStream indent: tabCount].! !CompoundTileMorph removeSelector: #storeCodeBlockFor:on:!CompoundTileMorph removeSelector: #storeCodeOn:!PhraseTileMorph removeSelector: #storeCodeOn:!PhraseTileMorph removeSelector: #catchDivideByZero:!ScriptEditorMorph removeSelector: #storeCodeOn:!BooleanScriptEditor removeSelector: #storeCodeOn:!TileMorph removeSelector: #storeCodeOn:!AssignmentTileMorph removeSelector: #storeCodeOn:!ColorTileMorph removeSelector: #storeCodeOn:!ColorSeerTile removeSelector: #storeCodeOn:!TilePadMorph removeSelector: #storeCodeOn:!