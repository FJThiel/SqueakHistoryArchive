'From Squeak 2.4b of April 23, 1999 on 29 April 1999 at 2:14:20 pm'!"Change Set:		Wnld-UsingLights-jspDate:			29 April 1999Author:			Jeff PierceChanges to various classes to start using the lights."!!Wonderland methodsFor: 'initialize-reset-release' stamp: 'jsp 4/29/1999 11:49'!initialize	"This method initializes the Wonderland."	| ground |	"Initialize the list of actor UniClasses"	actorClassList _ OrderedCollection new.	"Initialize the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants copy.	"Create the Wonderland's scheduler"	myScheduler _ Scheduler new.	myNamespace at: 'scheduler' put: myScheduler.	"Create the undo stack for this Wonderland."	myUndoStack _ WonderlandUndoStack new.	"The scene object is the root of the object tree - all objects in the Wonderland are children (directly or indirectly) of the scene. "	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Create a script editor for this Wonderland"	self makeScriptEditor.	"Create some default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	ground setName: 'ground'.	myNamespace at: 'ground' put: ground.	"Initialize the light list and create a default light"	lightList _ OrderedCollection new.	self makeLight.	lightList last moveTo: {0. 2. 0} duration: rightNow.		"Create the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ WonderlandCamera createFor: self.	cameraList addLast: defaultCamera.	myNamespace at: 'camera' put: defaultCamera.	myNamespace at: 'cameraWindow' put: (defaultCamera getMorph).	defaultCamera setName: 'camera'.	"Clean out the Undo stack - we don't want people undoing the init stuff"	myUndoStack reset.	"Throw this Wonderland into the shared namespace"	myNamespace at: 'w' put: self.! !!Wonderland methodsFor: 'initialize-reset-release' stamp: 'jsp 4/29/1999 11:47'!reset	"Reset this Wonderland"	| ground |	"Reset the scheduler"	myScheduler reset.	"Reset the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Reset the list of actor uniclasses"	actorClassList do: [:aClass | aClass removeFromSystem ].	actorClassList _ OrderedCollection new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants copy.	"Rebuild the namespace"	myNamespace at: 'scheduler' put: myScheduler.	myNamespace at: 'w' put: self.	"Create a new scene"	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Recreate the default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setName: 'ground'.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	myNamespace at: 'ground' put: ground.	"Re-initialize the light list and create a default light"	lightList _ OrderedCollection new.	self makeLight.	lightList last moveTo: {0. 2. 0} duration: rightNow.	"Wipe out the existing cameras"	cameraList do: [:camera | camera release].		"Recreate the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ WonderlandCamera createFor: self.	cameraList addLast: defaultCamera.	myNamespace at: 'camera' put: defaultCamera.	myNamespace at: 'cameraWindow' put: (defaultCamera getMorph).	defaultCamera setName: 'camera'.	"Reset the script editor's namespace"	scriptEditor resetNamespace.	"Update the actor browser"	scriptEditor updateActorBrowser.	"Reset the undo stack"	myUndoStack reset.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/29/1999 10:55'!makeLight	"Create a positional light and add it to the Wonderland"	^ self makeLight: positional.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/29/1999 14:10'!makeLight: lightType	"Create a light of the specified type and add it to the Wonderland"	| theLight name |	"Need a verifier here to make sure it's a valid light type"	(lightType = ambient)		ifTrue: [ theLight _ WonderlandAmbientLight createFor: self. ]		ifFalse: [ (lightType = positional)			ifTrue: [ theLight _ WonderlandPositionalLight createFor: self. ]			ifFalse: [ (lightType = directional)				ifTrue: [ theLight _ WonderlandDirectionalLight createFor: self. ]				ifFalse: [ theLight _ WonderlandSpotLight createFor: self. ]					]				].	name _ self uniqueNameFrom: 'light'.	theLight setName: name.	myNamespace at: name put: theLight.	scriptEditor updateActorBrowser.	lightList addLast: theLight.	^ theLight.! !!WonderlandActor methodsFor: 'initialize' stamp: 'jsp 4/23/1999 15:01'!initializeFor: aWonderland	"Initialize the instance variables for the WonderlandActor"	super initialize.	myName _ 'Unnamed'.	myWonderland _ aWonderland.	myParent _ aWonderland getScene.	myParent addChild: self.	"Initialize our material"	myMaterial _ B3DMaterial new.	myMaterial ambientPart: Color white.	myMaterial diffusePart: Color white.	myMaterial specularPart: Color white.	"Set up our default properties"	myColor _ B3DColor4 r: 1.0 g: 1.0 b: 1.0 a: 1.0.	composite _ B3DMatrix4x4 identity.	scaleMatrix _ B3DMatrix4x4 identity.	"Set up our default reactions"	myReactions _ Dictionary new.	self respondWith: [:event | self onLeftMouseDown: event] to: leftMouseDown.	self respondWith: [:event | self onLeftMouseUp: event] to: leftMouseUp.	hidden _ false.	firstClass _ true.! !!WonderlandActor methodsFor: 'private' stamp: 'jsp 4/23/1999 15:01'!setColorVector: aColor	"Instaneously sets the object's color/alpha vector and copies it down the object tree for all objects that are parts of this object"	"Set our color"	myColor _ aColor.	myMaterial ambientPart: myColor.	myMaterial diffusePart: myColor.	myMaterial specularPart: myColor.	"Set the color of our parts"	myChildren do: [:child | (child isPart) ifTrue: [child setColorVector: aColor] ].! !!WonderlandActor class methodsFor: 'change logging' stamp: 'jsp 4/23/1999 11:50'!acceptsLoggingOfCompilation	^ self == WonderlandActor.! !!WonderlandActor class methodsFor: 'change logging' stamp: 'jsp 4/23/1999 11:50'!wantsChangeSetLogging	^ self == WonderlandActor.! !!WonderlandCamera methodsFor: 'set property' stamp: 'jsp 4/23/1999 12:07'!setName: newName	"Sets the object's name"	myName _ newName.	myMorph name: myName.! !!WonderlandCameraMorph methodsFor: 'initialization' stamp: 'jsp 4/23/1999 12:06'!initializeWithCamera: aCamera	"Initialize this instance and hand it a camera"	myCamera _ aCamera.	myWonderland _ aCamera getWonderland.	self name: (myCamera getName).	"Use a transparent background"	color _ (Color transparent).	self bounds: (20@20 corner: 170@170)! !