'From Squeak3.0 of 4 February 2001 [latest update: #3545] on 19 February 2001 at 11:23:47 pm'!"Change Set:		AllowForTabsDate:			19 February 2001Author:			Dan IngallsTries to place windows and collapsed tabs in such a way as not to interfere with global flap tabs if present."!!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 2/19/2001 23:19'!assignCollapseFrameFor: aSSView 	"Offer up a location along the left edge of the screen for a collapsed SSView. Make sure it doesn't overlap any other collapsed frames."	| grid otherFrames topLeft viewBox collapsedFrame extent newFrame verticalBorderDistance top |	grid _ 8.	verticalBorderDistance _ 8.	aSSView isMorph ifTrue: [		otherFrames _ (SystemWindow windowsIn: aSSView world satisfying: [:w | w ~= aSSView])						collect: [:w | w collapsedFrame]						thenSelect: [:rect | rect notNil].			viewBox _ aSSView world viewBox.			Preferences useGlobalFlaps ifTrue: [viewBox _ viewBox insetBy: 16]]		ifFalse: 			[otherFrames _ ScheduledControllers scheduledWindowControllers						collect: [:aController | aController view ~= aSSView ifTrue: [aController view collapsedFrame]]						thenSelect: [:rect | rect notNil].			viewBox _ Display boundingBox].	collapsedFrame _ aSSView collapsedFrame.	extent _ collapsedFrame notNil				ifTrue: [collapsedFrame extent]				ifFalse: [aSSView isMorph					ifTrue: [aSSView getRawLabel width + aSSView labelWidgetAllowance @ (aSSView labelHeight + 2)]					ifFalse: [(aSSView labelText extent x + 70) @ aSSView labelHeight							min: aSSView labelDisplayBox extent					]				].	collapsedFrame notNil		ifTrue: [(otherFrames anySatisfy: [:f | collapsedFrame intersects: f])				ifFalse: ["non overlapping"					^ collapsedFrame]].	top _ viewBox top + verticalBorderDistance.	[topLeft _ viewBox left @ top.	newFrame _ topLeft extent: extent.	newFrame bottom <= (viewBox height - verticalBorderDistance)]		whileTrue: 			[(otherFrames anySatisfy: [:w | newFrame intersects: w])				ifFalse: ["no overlap"					^ newFrame].			top _ top + grid].	"If all else fails... (really to many wins here)"	^ 0 @ 0 extent: extent! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 2/19/2001 23:18'!assignCollapsePointFor: aSSView	"Offer up a location along the left edge of the screen for a collapsed SSView.	Make sure it doesn't overlap any other collapsed frames."	| grid otherFrames y free topLeft viewBox |	grid _ 24.  "should be mult of 8, since manual move is gridded by 8"	aSSView isMorph		ifTrue: [otherFrames _ (SystemWindow windowsIn: aSSView world satisfying: [:w | true])					collect: [:w | w collapsedFrame]					thenSelect: [:rect | rect notNil].				viewBox _ aSSView world viewBox.				Preferences useGlobalFlaps ifTrue: [viewBox _ viewBox insetBy: 16]]		ifFalse: [otherFrames _ ScheduledControllers scheduledWindowControllers					collect: [:aController | aController view collapsedFrame]					thenSelect: [:rect | rect notNil].				viewBox _ Display boundingBox].	y _ viewBox top.	[(y _ y + grid) <= (viewBox height - grid)]		whileTrue:		[topLeft _ viewBox left@y.		free _ true.		otherFrames do: [:w | free _ free & (topLeft ~= w topLeft)].		free ifTrue: [^ topLeft]].	"If all else fails..."	^ 0 @ 0! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 2/19/2001 22:40'!strictlyStaggeredInitialFrameFor: aStandardSystemView initialExtent: initialExtent world: aWorld	"This method implements a staggered window placement policy that I like.	Basically it provides for up to 4 windows, staggered from each of the 4 corners.	The windows are staggered so that there will always be a corner visible.	"	| allowedArea grid initialFrame otherFrames cornerSel corner delta putativeCorner free maxLevel |	allowedArea _(self maximumUsableAreaInWorld: aWorld)		insetBy: (self scrollBarSetback @ self screenTopSetback extent: 0@0).	(Smalltalk isMorphic and: [Preferences useGlobalFlaps]) ifTrue:		[allowedArea _ allowedArea insetBy: 16].	"Number to be staggered at each corner (less on small screens)"	maxLevel _ allowedArea area > 300000 ifTrue: [3] ifFalse: [2].	"Amount by which to stagger (less on small screens)"	grid _ allowedArea area > 500000 ifTrue: [40] ifFalse: [20].	initialFrame _ 0@0 extent: ((initialExtent							"min: (allowedArea extent - (grid*(maxLevel+1*2) + (grid//2))))							min: 600@400")).	otherFrames _ Smalltalk isMorphic		ifTrue: [(SystemWindow windowsIn: aWorld satisfying: [:w | w isCollapsed not])					collect: [:w | w bounds]]		ifFalse: [ScheduledControllers scheduledWindowControllers				select: [:aController | aController view ~~ nil]				thenCollect: [:aController | aController view isCollapsed								ifTrue: [aController view expandedFrame]								ifFalse: [aController view displayBox]]].	0 to: maxLevel do:		[:level | 		1 to: 4 do:			[:ci | cornerSel _ #(topLeft topRight bottomRight bottomLeft) at: ci.			corner _ allowedArea perform: cornerSel.			"The extra grid//2 in delta helps to keep title tabs distinct"			delta _ (maxLevel-level*grid+(grid//2)) @ (level*grid).			1 to: ci-1 do: [:i | delta _ delta rotateBy: #right centerAt: 0@0]. "slow way"			putativeCorner _ corner + delta.			free _ true.			otherFrames do:				[:w |				free _ free & ((w perform: cornerSel) ~= putativeCorner)].			free ifTrue:				[^ (initialFrame align: (initialFrame perform: cornerSel)								with: putativeCorner)						 squishedWithin: allowedArea]]].	"If all else fails..."	^ (self scrollBarSetback @ self screenTopSetback extent: initialFrame extent)		squishedWithin: allowedArea! !