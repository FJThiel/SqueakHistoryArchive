'From Squeak3.1alpha of 28 February 2001 [latest update: #4161] on 20 June 2001 at 4:11:21 pm'!"Change Set:		methodBalloonHelp-swDate:			20 June 2001Author:			Scott WallaceBacks off from an earlier flawed design for putting up balloon help for arbitrary selectors in viewers.  The revised mechanism is very much less error-prone.Bulletproofs Behavior>>firstPrecodeCommentFor: against the case where the class does not in fact implement the method -- a situation that sometimes does arise in the current design."!!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 6/20/2001 15:46'!firstPrecodeCommentFor:  selector	"If there is a comment in the source code at the given selector that preceeds the body of the method, return it here, else return nil"	| parser source tree |	"Behavior firstPrecodeCommentFor: #firstPrecodeCommentFor:"	(MessageSet isPseudoSelector: selector)		ifTrue:			["Not really a selector"			^ nil].	source _ self sourceCodeAt: selector asSymbol ifAbsent: [^ nil].	parser _ self parserClass new.	tree _ 		parser			parse: (ReadStream on: source)			class: self			noPattern: false			context: nil			notifying: nil			ifFail: [^ nil].	^ (tree comment ifNil: [^ nil]) first! !!Morph methodsFor: 'accessing' stamp: 'sw 6/20/2001 15:48'!balloonText	"Answer balloon help text or nil, if no help is available.	NB: subclasses may override such that they programatically construct	the text, for economy's sake, such as model phrases in a Viewer"	| text balloonSelector aString |	extension == nil ifTrue: [^ nil].	(text _ extension balloonText) ifNotNil: [^ text].	(balloonSelector _ extension balloonTextSelector)		ifNotNil:			[aString _ ScriptingSystem helpStringOrNilFor: balloonSelector.			(aString == nil and: [balloonSelector == #methodComment])				ifTrue:					[aString _ self methodCommentAsBalloonHelp].			((aString isNil and: [balloonSelector numArgs = 0]) and: [self respondsTo: balloonSelector]) ifTrue:				[aString _ self perform: balloonSelector]].	^ aString ifNotNil:		[aString asString withNoLineLongerThan: Preferences maxBalloonHelpLineLength]! !!Morph methodsFor: 'accessing' stamp: 'sw 6/20/2001 14:31'!balloonTextSelector	"Answer balloon text selector item in the extension, nil if none"	^ extension ifNotNil:	[extension balloonTextSelector]! !!Morph methodsFor: 'accessing' stamp: 'sw 6/20/2001 15:45'!methodCommentAsBalloonHelp	"Given that I am a morph that is associated with an object and a method, answer a suitable method comment relating to that object & method if possible"	| inherentSelector actual |	(inherentSelector _ self valueOfProperty: #inherentSelector)		ifNotNil:			[(actual _ (self ownerThatIsA: PhraseTileMorph orA: SyntaxMorph) actualObject) ifNotNil:				[^ actual class precodeCommentOrInheritedCommentFor: inherentSelector]].	^ nil! !!CategoryViewer methodsFor: 'entries' stamp: 'sw 6/20/2001 15:18'!phraseForCommandFrom: aMethodInterface	"Answer a phrase for the non-slot-like command represented by aMethodInterface - classic tiles"	| aRow resultType cmd names argType argTile selfTile aPhrase balloonTextSelector stat inst aDocString universal tileBearingHelp |	aDocString _ aMethodInterface documentationOrNil.	names _ scriptedPlayer class namedTileScriptSelectors.	resultType _ aMethodInterface resultType.	cmd _ aMethodInterface selector.	(universal _ scriptedPlayer isUniversalTiles)		ifTrue:			[aPhrase _ scriptedPlayer universalTilesForInterface: aMethodInterface]		ifFalse: [cmd numArgs == 0			ifTrue:				[aPhrase _ PhraseTileMorph new vocabulary: self currentVocabulary..				aPhrase setOperator: cmd					type: resultType					rcvrType: #player]			ifFalse:				["only one arg supported in classic tiles, so if this is fed				with a selector with > 1 arg, results will be very strange"				argType _ aMethodInterface typeForArgumentNumber: 1.				aPhrase _ PhraseTileMorph new vocabulary: self currentVocabulary.				aPhrase setOperator: cmd					type: resultType					rcvrType: #player					argType: argType.				argTile _ self tileForArgType: argType.				argTile position: aPhrase lastSubmorph position.				aPhrase lastSubmorph addMorph: argTile]].	(scriptedPlayer slotInfo includesKey: cmd)		ifTrue: [balloonTextSelector _ #userSlot].	(scriptedPlayer belongsToUniClass and: [scriptedPlayer class includesSelector: cmd])		ifTrue:			[aDocString ifNil:				[aDocString _ (scriptedPlayer class userScriptForPlayer: scriptedPlayer selector: cmd) documentationOrNil].			aDocString ifNil:				[balloonTextSelector _ #userScript]].	tileBearingHelp _ universal ifTrue: [aPhrase submorphs second] ifFalse: [aPhrase operatorTile]. 	aDocString		ifNotNil:			[tileBearingHelp setBalloonText: aDocString]		ifNil:			[balloonTextSelector ifNil:				[tileBearingHelp setProperty: #inherentSelector toValue: cmd.				balloonTextSelector _ #methodComment].			tileBearingHelp balloonTextSelector: balloonTextSelector].	aPhrase markAsPartsDonor.	cmd == #emptyScript ifTrue:		[aPhrase setProperty: #newPermanentScript toValue: true.		aPhrase setProperty: #newPermanentPlayer toValue: scriptedPlayer.		aPhrase submorphs second setBalloonText: 'drag and drop to add a new script'].	universal ifFalse:		[selfTile _ self tileForSelf.		selfTile position: aPhrase firstSubmorph position.		aPhrase firstSubmorph addMorph: selfTile].	aRow _ ViewerRow newRow borderWidth: 0; color: self color.	aRow elementSymbol: cmd asSymbol.	aRow addMorphBack: (ScriptingSystem tryButtonFor: aPhrase).	aRow addMorphBack: (Morph new extent: 4@2; beTransparent).	aRow addMorphBack: (self infoButtonFor: cmd).	aRow addMorphBack: aPhrase.	(names includes: cmd) ifTrue:		[aPhrase userScriptSelector: cmd.		aPhrase beTransparent.		aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.		aRow addMorphBack: (stat _ (inst _ scriptedPlayer scriptInstantiationForSelector: cmd) statusControlMorph).		inst updateStatusMorph: stat].	aRow beSticky; disableDragNDrop.	^ aRow! !