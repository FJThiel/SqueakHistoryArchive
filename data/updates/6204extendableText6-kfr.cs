'From Squeak3.7beta of ''1 April 2004'' [latest update: #5963] on 27 June 2004 at 11:35:14 am'!"Change Set:		extendableText6-kfrDate:			22 September 2003Author:			Karl Ramberg			Adapted for Squeak 3.7b by Scott Wallace, 6/27/2004Adds, to the etoy tiling system, the #, (comma) as a string-concatenation operator.Also fixes the initial suffix arrow placement -- that fixes it for numbers too!!Fixes a bug in getFirstCharacter."!!CategoryViewer methodsFor: 'get/set slots' stamp: 'kfr 9/23/2003 09:17'!makeSetter: selectorAndTypePair event: evt from: aMorph 	"Classic tiles: make a Phrase that comprises a setter of a slot, and hand it to the user."	| argType m argTile selfTile argValue actualGetter |	argType := selectorAndTypePair second.	actualGetter := selectorAndTypePair first asSymbol.	m := PhraseTileMorph new 				setAssignmentRoot: (Utilities inherentSelectorForGetter: actualGetter)				type: #command				rcvrType: #Player				argType: argType				vocabulary: self currentVocabulary.	argValue := self scriptedPlayer 				perform: selectorAndTypePair first asSymbol.	(argValue isKindOf: Player) 		ifTrue: [argTile := argValue tileReferringToSelf]		ifFalse: 			[argTile := ScriptingSystem tileForArgType: argType.			(argType == #Number and: [argValue isNumber]) 				ifTrue: 					[(scriptedPlayer decimalPlacesForGetter: actualGetter) 						ifNotNilDo: [:places | (argTile findA: UpdatingStringMorph) decimalPlaces: places]].			argTile				setLiteralInitially: argValue;				updateLiteralLabel].	argTile position: m lastSubmorph position.	m lastSubmorph addMorph: argTile.	selfTile := self tileForSelf bePossessive.	selfTile position: m firstSubmorph position.	m firstSubmorph addMorph: selfTile.	m enforceTileColorPolicy.	m openInHand! !!StandardScriptingSystem methodsFor: 'universal slots & scripts' stamp: 'kfr 9/23/2003 09:29'!doesOperatorWantArrows: aSymbol	aSymbol = #, ifTrue:[^ false].	^ aSymbol isInfix or: [#(isDivisibleBy:) includes: aSymbol]! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'kfr 9/23/2003 09:44'!arithmeticalOperatorsAndHelpStrings	"Answer an array consisting of lists of the standard arithmetical operator tiles and of the corresponding balloon help for them"	^ #((+ - * / // \\ max: min:)	 	('add' 'subtract' 'multiply' 'divide' 'divide & truncate' 'remainder when divided by' 'larger value' 'smaller value' ))! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 3/10/2004 23:24'!helpStringForOperator: anOperator	"Answer the help string associated with the given operator. If none found, return a standard no-help-available reply"	^ (self helpStringOrNilForOperator: anOperator) ifNil:		['Sorry, no help available here' translated]  "This should never be seen, but is provided as a backstop"! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 6/27/2004 11:11'!helpStringOrNilForOperator: anOperator	"Answer the help string associated with the given operator, nil if none found."	| anIndex opsAndHelp |	(anIndex _ (opsAndHelp _ self arithmeticalOperatorsAndHelpStrings) first indexOf: anOperator) > 0		ifTrue:	[^ (opsAndHelp second at: anIndex) translated].	(anIndex _ (opsAndHelp _ self numericComparitorsAndHelpStrings) first indexOf: anOperator) > 0		ifTrue:	[^ (opsAndHelp second at: anIndex) translated].	anOperator = #, ifTrue:		[^ 'Concatenate two Strings' translated].	^ nil! !!String methodsFor: 'displaying' stamp: 'kfr 9/22/2003 18:53'!newTileMorphRepresentative	^ TileMorph new setLiteral: self;addSuffixIfCan! !!TextMorph methodsFor: 'accessing' stamp: 'kfr 9/21/2003 21:47'!getFirstCharacter	"obtain the first character from the receiver if it is empty, return a  	black dot"	| aString |	^ (aString _ text string) isEmpty		ifTrue: ['¥']		ifFalse: [aString first asString] ! !!TileMorph methodsFor: 'arrows' stamp: 'kfr 9/22/2003 22:00'!showSuffixChoices	"The suffix arrow has been hit, so respond appropriately"	| plusPhrase phrase pad outer num |	(phrase _ self ownerThatIsA: PhraseTileMorph) ifNil: [^ self].	(type == #literal) & (literal isNumber) ifTrue: ["Tile is a constant number"		phrase lastSubmorph == owner "pad"			ifTrue: ["we are adding the first time (at end of our phrase)"				plusPhrase _ self presenter phraseForReceiver: literal 						op: #+ arg: 1 resultType: #Number.				plusPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: #+).				owner acceptDroppingMorph: plusPhrase event: self primaryHand lastEvent.				num _ plusPhrase firstSubmorph firstSubmorph.				num deleteSuffixArrow]].		(type == #literal) & (literal isString) ifTrue: ["Tile is a string"		phrase lastSubmorph == owner "pad"			ifTrue: ["we are adding the first time (at end of our phrase)"				plusPhrase _ self presenter phraseForReceiver: literal 						op: #, arg: 'abc' resultType: #String.				plusPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: #,).				owner acceptDroppingMorph: plusPhrase event: self primaryHand lastEvent.				num _ plusPhrase firstSubmorph firstSubmorph.				num deleteSuffixArrow]].	type == #operator ifTrue: ["Tile is accessor of an expression"		phrase resultType == #Number ifTrue:			[outer _ phrase ownerThatIsA: PhraseTileMorph.			pad _ self ownerThatIsA: TilePadMorph.			outer ifNotNil:				[outer lastSubmorph == pad ifTrue: [ "first time"					plusPhrase _ self presenter phraseForReceiver: 1 							op: #+ arg: 1 resultType: #Number.					plusPhrase submorphs second submorphs last setBalloonText: (ScriptingSystem helpStringForOperator: #+).					pad acceptDroppingMorph: plusPhrase event: self primaryHand lastEvent.					plusPhrase firstSubmorph removeAllMorphs; addMorph: phrase.	"car's heading"					self deleteSuffixArrow.					pad topEditor install "recompile"]]]].	(phrase topEditor ifNil: [phrase]) enforceTileColorPolicy! !