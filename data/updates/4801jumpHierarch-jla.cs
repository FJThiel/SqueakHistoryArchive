'From Squeak3.3alpha of 12 January 2002 [latest update: #4800] on 12 March 2002 at 9:40:18 pm'!"Change Set:		jumpHierarch-jlaDate:			May 28, 2001Author:			Jerry L. ArchibaldModifies the 'jump to project' menu such that the primary project-list is ordered as a tree that reflects the hierarchical structure of the set of projects.Jerry Archibald (1940-2001) died in June 2001, and this code was his final contribution to Squeak.  Published, with minimal modification, by sw, 3/12/2002"!!PopUpMenu methodsFor: 'accessing' stamp: 'sw 3/12/2002 21:37'!startUpLeftFlush	"Build and invoke this menu with no initial selection.  By Jerry Archibald, 4/01.	If in MVC, align menus items with the left margin.	Answer the selection associated with the menu item chosen by the user or nil if none is chosen.  	The mechanism for getting left-flush appearance in mvc leaves a tiny possibility for misadventure: if the user, in mvc, puts up the jump-to-project menu, then hits cmd period while it is up, then puts up a second jump-to-project menu before dismissing or proceeding through the debugger, it's possible for mvc popup-menus thereafter to appear left-aligned rather than centered; this very unlikely condition can be cleared by evaluating 'PopUpMenu alignment: 2'"	| saveAlignment result |	Smalltalk isMorphic ifFalse:		[saveAlignment _ PopUpMenu alignment.		PopUpMenu leftFlush].	[result _ self startUp] ensure:		[Smalltalk isMorphic ifFalse:			[PopUpMenu alignment: saveAlignment]].	^ result! !!PopUpMenu class methodsFor: 'class initialization' stamp: 'jla 4/2/2001 20:41'!alignment	^ MenuStyle alignment! !!PopUpMenu class methodsFor: 'class initialization' stamp: 'jla 4/2/2001 20:46'!alignment: anAlignment	^ MenuStyle alignment: anAlignment! !!PopUpMenu class methodsFor: 'class initialization' stamp: 'jla 4/2/2001 20:56'!leftFlush	MenuStyle leftFlush! !!Project methodsFor: 'accessing' stamp: 'jla 5/28/2001 21:50'!children	"Answer a list of all the subprojects of the receiver"		| children |	children _ OrderedCollection new.	Project allProjects do: [ :p | 		(self == p parent and: [self ~~ p]) ifTrue:			[ children add: p ]].	^ children"Project topProject children"! !!Project methodsFor: 'accessing' stamp: 'jla 5/28/2001 20:01'!nameAdjustedForDepth	"Answer the name of the project, prepended with spaces reflecting the receiver's depth from the top project"	"	Project current nameAdjustedForDepth	"	| stream |	stream _ WriteStream on: String new.	self depth timesRepeat: 	  [2 timesRepeat: [stream nextPut: $ ]].	stream nextPutAll: self name.	^ stream contents! !!Project methodsFor: 'accessing' stamp: 'jla 5/28/2001 21:51'!withChildrenDo: aBlock	"Evaluate the block first with the receiver as argument, then, recursively and depth first, with each of the receiver's children as argument"		aBlock value: self.	self children do: [:p | 		p withChildrenDo:			[:c | aBlock value: c]]! !!Project methodsFor: 'active process' stamp: 'jla 4/2/2001 15:12'!depth	"Return the depth of this project from the top.	 topProject = 0, next = 1, etc."	"Project current depth."	| depth topProject project |	depth _ 0.	topProject _ Project topProject.	project _ self.		[project ~= topProject]		whileTrue:			[project _ project parent.			depth _ depth + 1].	^ depth! !!Project class methodsFor: 'utilities' stamp: 'jla 5/28/2001 21:48'!allProjectsOrdered	"Answer a list of all projects in hierarchical order, depth first"		| allProjects  |	allProjects _ OrderedCollection new.	Project topProject withChildrenDo:		[:p | allProjects add: p].	^ allProjects"Project allProjectsOrdered"! !!Project class methodsFor: 'utilities' stamp: 'jla 5/28/2001 21:53'!buildJumpToMenu: menu	"Make the supplied menu offer a list of potential projects, consisting of:		*	The previous-project chain		*	The next project, if any		*	The parent project, if any		*	All projects, hierarchically"	| prev listed i next  toAdd |	listed _ OrderedCollection with: CurrentProject.	i _ 0.	"The previous Project chain"	prev _ CurrentProject previousProject.	[(prev ~~ nil and: [(listed includes: prev) not])] whileTrue:	  [i _ i + 1.		listed add: prev.		self 	addItem: prev name , ' (back ' , i printString , ')'				toMenu: menu 				selection: ('%back' , i printString) 				project: prev.		prev _ prev previousProject].	i > 0 ifTrue: [menu addLine].	"Then the next Project"	(((next _ CurrentProject nextProject) ~~ nil) and: [(listed includes: next) not]) ifTrue:		[self	addItem: (next name, ' (forward 1)') 				toMenu: menu 				selection: next name 				project: next]. 	next ~~ nil ifTrue: [menu addLine].	"Then the parent"	CurrentProject isTopProject ifFalse: 		[self	addItem: CurrentProject parent name , ' (parent)' 				toMenu: menu 				selection: #parent 				project: CurrentProject parent.		  menu addLine].	"Finally all the projects, in hierarchical order"	Project hierarchyOfNamesAndProjects do:		[:aPair | 			toAdd _ aPair last isCurrentProject				ifTrue:				  [aPair first, ' (current)']				ifFalse:				  [aPair first].			self	addItem: toAdd 				toMenu: menu 				selection: aPair first 				project: aPair last].	^ menu! !!Project class methodsFor: 'utilities' stamp: 'jla 5/28/2001 21:43'!hierarchyOfNamesAndProjects	"Answer a list of all project names, with each entry preceded by white space commensurate with its depth beneath the top project"		^ self allProjectsOrdered collect:		[:project | Array with: project nameAdjustedForDepth with: project]! !!Project class methodsFor: 'utilities' stamp: 'jla 4/2/2001 20:34'!jumpToProject		"Project jumpToProject"	"Present a list of potential projects and enter the one selected."	self jumpToSelection: (self buildJumpToMenu: CustomMenu new) startUpLeftFlush! !!Project class methodsFor: 'utilities' stamp: 'jla 4/2/2001 15:57'!jumpToSelection: selection	"Enter the project corresponding to this menu selection."		"Project jumpToProject"	| nBack prev pr |	selection ifNil: [^ self].	(selection beginsWith: '%back') ifTrue:		[nBack _ (selection copyFrom: 6 to: selection size) asNumber.		prev _ CurrentProject previousProject.		1 to: nBack-1 do:			[:i | prev ifNotNil: [prev _ prev previousProject]].		prev ifNotNil: [prev enter: true revert: false saveForRevert: false]].	selection = #parent ifTrue:		[CurrentProject parent enter: false revert: false saveForRevert: false.		^ self].	(pr _ Project namedWithDepth: selection) ifNil: [^ self].	pr enter: false revert: false saveForRevert: false! !!Project class methodsFor: 'utilities' stamp: 'jla 4/2/2001 15:57'!namedWithDepth: projName	"Answer the project with the given name, or nil if there is no project of that given name."	"(Project named: 'New Changes') enter"	^ self allProjects		detect: [:proj | 			  proj name = projName or:				[proj nameAdjustedForDepth = projName]]		ifNone: [nil]! !