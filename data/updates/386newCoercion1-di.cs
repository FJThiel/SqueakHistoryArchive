'From Squeak 2.2 of Sept 23, 1998 on 6 November 1998 at 11:15:56 am'!"Change Set:		newCoercion1Date:			6 November 1998Author:			Dan IngallsThis is the first part of a new arithmetic coercion package for Squeak, based on a single coercion message for every pair of types.  The pattern is as follows:If there is a failure of 	self<Type2> op: arg<Type1>then it is handled by	^ arg adaptToType2: self andSend: #op:and this is resolved by a coercion method such as	<type1> adaptToType2: aType2 andSend: selector		-- If I am involved in arithmetic with a Type2, convert us first. --		^ aType2 coerced perform: selector with: self coercedEach such method exactly summarizes the coercion between type1 and type2.The coercions supported include arithemtic (+ - * / // \\) and comparison (< = > <= >=) between	Integer	Fraction	Float	Pointwith arithmetic also extended to Collections.  The extension to collections includes scalars with collections and commensurate sequenceable collections.The number of coercion messages is less than N squared, where N is the number of arithmetic types.  This compares to M * (N squared) for double dispatching, in the case that M different arithmetic operations are being supported (we have M = 11 for arithmetic plus comparisons).  The actual number is less owing to sharing by inheritance.The entire arithmetic family above is accomplished with only 18 small methods.  This compares to 26 in the previous Squeak coercion, in which Points were not fully supported, and no collections were.  It compares to over a hundred methods in a full double dispatch solution."!!Collection methodsFor: 'converting' stamp: 'di 11/6/1998 13:34'!adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with another Collection, return a Collection of	the results of each element combined with the scalar in that expression."	rcvr isSequenceable & self isSequenceable ifFalse:		[self error: 'Only sequenceable collections may be combined arithmetically'].	^ rcvr with: self collect:		[:rcvrElement :myElement | rcvrElement perform: selector with: myElement]! !!Collection methodsFor: 'converting' stamp: 'di 11/6/1998 13:34'!adaptToFloat: rcvr andSend: selector	"If I am involved in arithmetic with a scalar, return a Collection of	the results of each element combined with the scalar in that expression."	^ self collect: [:element | rcvr perform: selector with: element]! !!Collection methodsFor: 'converting' stamp: 'di 11/6/1998 13:35'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a scalar, return a Collection of	the results of each element combined with the scalar in that expression."	^ self collect: [:element | rcvr perform: selector with: element]! !!Collection methodsFor: 'converting' stamp: 'di 11/6/1998 13:36'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with a scalar, return a Collection of	the results of each element combined with the scalar in that expression."	^ self collect: [:element | rcvr perform: selector with: element]! !!Collection methodsFor: 'converting' stamp: 'di 11/6/1998 13:37'!adaptToPoint: rcvr andSend: selector	"If I am involved in arithmetic with a scalar, return a Collection of	the results of each element combined with the scalar in that expression."	^ self collect: [:element | rcvr perform: selector with: element]! !!Collection methodsFor: 'converting' stamp: 'di 11/6/1998 13:37'!adaptToString: rcvr andSend: selector	"If I am involved in arithmetic with a String, convert it to a Number."	^ rcvr asNumber perform: selector with: self! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:43'!adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with a Collection, return a Collection of	the results of each element combined with me in that expression."	^ rcvr collect: [:element | element perform: selector with: self]! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:21'!adaptToFloat: rcvr andSend: selector 	"If I am involved in arithmetic with a Float, convert me to a Float."	^ rcvr perform: selector with: self asFloat! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a Fraction, convert us and evaluate exprBlock."	^ self subclassResponsibility! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with a Integer, convert us and evaluate exprBlock."	^ self subclassResponsibility! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToPoint: rcvr andSend: selector	"If I am involved in arithmetic with a Point, convert me to a Point."	^ rcvr perform: selector with: self@self! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:45'!adaptToString: rcvr andSend: selector	"If I am involved in arithmetic with a String, convert it to a Number."	^ rcvr asNumber perform: selector with: self! !!Float methodsFor: 'converting' stamp: 'di 11/6/1998 13:38'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a Fraction, convert it to a Float."	^ rcvr asFloat perform: selector with: self! !!Float methodsFor: 'converting' stamp: 'di 11/6/1998 13:07'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with an Integer, convert it to a Float."	^ rcvr asFloat perform: selector with: self! !!Fraction methodsFor: 'converting' stamp: 'di 11/6/1998 13:10'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with an Integer, convert it to a Fraction."	^ rcvr asFraction perform: selector with: self! !!Integer methodsFor: 'converting' stamp: 'di 11/6/1998 13:43'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a Fraction, convert me to a Fraction."	^ rcvr perform: selector with: self asFraction! !!Point methodsFor: 'converting' stamp: 'di 11/6/1998 13:45'!adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with a Collection, return a Collection of	the results of each element combined with me in that expression."	^ rcvr collect: [:element | element perform: selector with: self]! !!Point methodsFor: 'converting' stamp: 'di 11/6/1998 13:21'!adaptToFloat: rcvr andSend: selector 	"If I am involved in arithmetic with a Float, convert it to a Point."	^ rcvr@rcvr perform: selector with: self! !!Point methodsFor: 'converting' stamp: 'di 11/6/1998 13:46'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a Fraction, convert it to a Point."	^ rcvr@rcvr perform: selector with: self! !!Point methodsFor: 'converting' stamp: 'di 11/6/1998 13:11'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with an Integer, convert it to a Point."	^ rcvr asPoint perform: selector with: self! !!Point methodsFor: 'converting' stamp: 'di 11/6/1998 13:47'!adaptToString: rcvr andSend: selector	"If I am involved in arithmetic with a String, convert it to a Number."	^ rcvr asNumber perform: selector with: self! !!String methodsFor: 'converting' stamp: 'di 11/6/1998 13:47'!adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with a collection, convert me to a number."	^ rcvr perform: selector with: self asNumber! !!String methodsFor: 'converting' stamp: 'di 11/6/1998 13:48'!adaptToFloat: rcvr andSend: selector	"If I am involved in arithmetic with a number, convert me to a number."	^ rcvr perform: selector with: self asNumber! !!String methodsFor: 'converting' stamp: 'di 11/6/1998 13:48'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a number, convert me to a number."	^ rcvr perform: selector with: self asNumber! !!String methodsFor: 'converting' stamp: 'di 11/6/1998 13:49'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with a number, convert me to a number."	^ rcvr perform: selector with: self asNumber! !!String methodsFor: 'converting' stamp: 'di 11/6/1998 13:49'!adaptToPoint: rcvr andSend: selector	"If I am involved in arithmetic with a point, convert me to a number."	^ rcvr perform: selector with: self asNumber! !!String methodsFor: 'converting' stamp: 'di 11/6/1998 13:49'!adaptToString: rcvr andSend: selector	"If I am involved in arithmetic with a string, convert us both to	numbers, and return the printString of the result."	^ (rcvr asNumber perform: selector with: self asNumber) printString! !!Object methodsFor: 'testing' stamp: 'di 11/6/1998 08:04'!isPoint	"Overridden to return true in Point."	^ false! !!Point methodsFor: 'converting' stamp: 'di 11/6/1998 07:45'!isPoint	^ true! !!Collection methodsFor: 'testing' stamp: 'di 11/6/1998 09:16'!isSequenceable	^ false! !!SequenceableCollection methodsFor: 'converting' stamp: 'di 11/6/1998 09:35'!isSequenceable	^ true! !!OrderedCollection methodsFor: 'enumerating' stamp: 'TAG 10/13/1998 22:47'!with: otherCollection collect: twoArgBlock 	"Collect and return the result of evaluating twoArgBlock with 	corresponding elements from this collection and otherCollection."	| result |	result _ self species new: self size.	1 to: self size do:		[:index | result addLast: (twoArgBlock value: (self at: index)									value: (otherCollection at: index))].	^ result! !!Bag methodsFor: 'adding' stamp: 'TAG 10/13/1998 22:39'!add: newObject withOccurrences: anInteger 	"Add the element newObject to the receiver. Do so as though the element  	were added anInteger number of times. Answer newObject."	contents at: newObject put: (contents at: newObject ifAbsent: [0])			+ anInteger.	^ newObject! !