'From Squeak3.1alpha of 4 February 2001 [latest update: #3795] on 9 March 2001 at 12:41:20 am'!"Change Set:		ClassBuilderFix2-arDate:			9 March 2001Author:			Andreas RaabPreserve superclasses of obsolete subclasses or else instances of these (obsolete) class won't get reshaped correctly."!!ClassBuilder methodsFor: 'private' stamp: 'ar 3/9/2001 00:39'!update: oldClass to: newClass	"Convert oldClass and all its instances into newClass. The process is to do a two-way #become of the old vs. new instances, then we map the old instances into a temporary class and then we do a one-way become of the old into the new class. The entire process must be run unpreemptively so that	a) nobody can create any more instances of oldClass 	   (which may happen in a process switch), and	b) in case we don't #primitiveChangeClassTo: nobody can	   hold on to any of the old instances (which would #become	   instances of the new class later on).	The return value of this method is the temporary class we used for converting instances so that the senders still have a handle on the 'old' class."	| oldInstances someLeft tmp tmpClass |	[		someLeft _ false.		tmpClass _ oldClass clone.		oldInstances _ newClass updateInstancesFrom: oldClass.		oldInstances size > 0 ifTrue:[			"need to map instances"			self hasPrimitiveChangeClassTo ifTrue:[				"Much easier, faster, and better that way"				tmp _ tmpClass basicNew.				oldInstances do:[:inst| 					inst primitiveChangeClassTo: tmp.					inst class == tmpClass ifFalse:[self error:'Ouch']].			] ifFalse:[				"Do it the hard way. We need to make sure that there are no				instances of oldClass anymore. Thus we're #becoming the old				instances into temp instances and do a big GC afterwards. 				This is sloooooow (a bulk become + full GC for any class having				instances) but it's most definitely a way to get the required result."				tmpClass updateInstances: oldInstances from: oldClass isMeta: oldClass isMeta.				Smalltalk garbageCollect.			].		].		"It's better to be sure than sorry..."		someLeft _ oldClass someInstance notNil.		someLeft ifFalse:[			"remap obsolete subclasses in case they have instances"			oldClass obsoleteSubclasses do:[:obs| obs superclass: tmpClass].			oldClass becomeForward: newClass.			tmpClass isMeta ifFalse:				[tmpClass class replaceObsoleteInstanceWith: tmpClass]].	] valueUnpreemptively.	someLeft		ifTrue:[self error:'Illegal pointers to obsolete instances found'].	tmpClass superclass addObsoleteSubclass: tmpClass.	tmpClass obsolete.	^tmpClass! !