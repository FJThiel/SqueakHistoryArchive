'From Squeak2.9alpha of 5 August 2000 [latest update: #2925] on 31 October 2000 at 9:33:09 am'!"Change Set:		changeSorterMisc-swDate:			31 October 2000Author:			Scott Wallace¥ Adds feature to allow one identify methods in a changes set that are uncommented.¥ Adds feature to allow one to identify methods in a change set whose authoring stamp does not have your initials.¥ Correct wording in the browse-slips prompt"!!ChangeSet methodsFor: 'moving changes' stamp: 'sw 10/29/2000 17:39'!methodsWithInitialsOtherThan: myInits	"Return a collection of method refs whose author appears to be different from the given one"	| slips method aTimeStamp |	slips _ OrderedCollection new.	self changedClasses do:		[:aClass |		(self methodChangesAtClass: aClass name) associationsDo: 				[:mAssoc | (#(remove addedThenRemoved) includes: mAssoc value) ifFalse:					[method _ aClass compiledMethodAt: mAssoc key ifAbsent: [nil].					method ifNotNil:						[((aTimeStamp _ Utilities timeStampForMethod: method) notNil and:							[(aTimeStamp beginsWith: myInits) not])								ifTrue: [slips add: aClass name , ' ' , mAssoc key]]]]].	^ slips	"Smalltalk browseMessageList: (Smalltalk changes methodsWithInitialsOtherThan: 'sw') name: 'authoring problems'"! !!ChangeSet methodsFor: 'moving changes' stamp: 'sw 10/30/2000 08:42'!methodsWithoutComments	"Return a collection representing methods in the receiver which have no comments"	| slips |	slips _ OrderedCollection new.	self changedClasses do:		[:aClass |		(self methodChangesAtClass: aClass name) associationsDo: 				[:mAssoc | (#(remove addedThenRemoved) includes: mAssoc value) ifFalse:					[(aClass selectors includes:  mAssoc key) ifTrue:						[(aClass firstCommentAt: mAssoc key) isEmptyOrNil								ifTrue: [slips add: aClass name , ' ' , mAssoc key]]]]].	^ slips	"Smalltalk browseMessageList: (Smalltalk changes methodsWithoutComments) name: 'methods lacking comments'"! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 10/30/2000 10:49'!checkForAlienAuthorship	| aList |	"Check to see if there are any methods in the receiver that have no comments, and open a browser on all found"	(aList _ self methodsWithInitialsOtherThan: Utilities authorInitials) size > 0		ifFalse:			[^ self inform: 'All methods in "', self name, '"have authoring stamps which start with "', Utilities authorInitials, '"']		ifTrue:			[Smalltalk browseMessageList: aList name: 'methods in "', self name, '" showe authoring stamps do not start with "', Utilities authorInitials, '"']! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 10/30/2000 10:44'!checkForUncommentedMethods	| aList |	"Check to see if there are any methods in the receiver that have no comments, and open a browser on all found"	(aList _ self methodsWithoutComments) size > 0		ifFalse:			[^ self inform: 'All methods in "', self name, '" have comments']		ifTrue:			[Smalltalk browseMessageList: aList name: 'methods in "', self name, '" that lack comments']! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 10/27/2000 08:22'!fileOut	"File out the receiver, to a file whose name is a function of the change-set name and either of the date & time or chosen to have a unique numeric tag, depending on the preference 'sequentialChangeSetRevertableFileNames'"	| file slips nameToUse |	self checkForConversionMethods.	nameToUse _ Preferences changeSetVersionNumbers		ifTrue:			[FileDirectory default nextNameFor: self name extension: 'cs']		ifFalse:			[(self name, FileDirectory dot, Utilities dateTimeSuffix, 				FileDirectory dot, 'cs') asFileName].	Cursor write showWhile:		[[file _ FileStream newFileNamed: nameToUse.		file header; timeStamp.		self fileOutPreambleOn: file.		self fileOutOn: file.		self fileOutPostscriptOn: file.		file trailer] ensure: [file close]].	Preferences checkForSlips ifFalse: [^ self].	slips _ self checkForSlips.	(slips size > 0 and: [(PopUpMenu withCaption: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?' chooseFrom: 'Ignore\Browse slips') = 2])		ifTrue: [Smalltalk browseMessageList: slips							name: 'Possible slips in ', name]! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 10/27/2000 08:21'!lookForSlips	"Scan the receiver for changes that the user may regard as slips to be remedied"	| slips nameLine msg |	nameLine _ '"', self name, '"'.	(slips _ self checkForSlips) size == 0 ifTrue:		[^ self inform: 'No slips detected in change set', nameLine].	msg _ slips size == 1		ifTrue:			[ 'One method in change set', nameLine, 'has a halt, reference to the Transcript,and/or some other ''slip'' in it.Would you like to browse it? ?']		ifFalse:			[ slips size printString,' methods in change set', nameLine, 'have halts or references to theTranscript or other ''slips'' in them.Would you like to browse them?'].	(PopUpMenu withCaption: msg chooseFrom: 'Ignore\Browse slips') = 2		ifTrue: [Smalltalk browseMessageList: slips							name: 'Possible slips in ', name]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 10/30/2000 10:48'!checkForAlienAuthorship	"Open a message list browser on all uncommented methods in the current change set that have alien authorship"	myChangeSet checkForAlienAuthorship! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 10/30/2000 10:39'!checkForUncommentedMethods	"Open a message list browser on all uncommented methods in the current change set"	myChangeSet checkForUncommentedMethods! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 10/31/2000 04:10'!shiftedChangeSetMenu: aMenu	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with opposite side' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.].	aMenu addLine.	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	aMenu add: 'check for other authors' action: #checkForAlienAuthorship.	aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'go to change set''s project' action: #goToChangeSetsProject.	aMenu balloonTextForLastItem: 'If this change set is currently associated with a Project, go to that project right now.'.	aMenu add: 'promote to top of list' action: #promoteToTopChangeSet.	aMenu balloonTextForLastItem:'Make this change set appear first in change-set lists in all change sorters.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'expunge uniclasses' action: #expungeUniclasses.	aMenu balloonTextForLastItem:'Remove from the change set all memory of uniclasses, e.g. classes added on behalf of etoys, fabrik, etc., whose classnames end with a digit.'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'file into new...' action: #fileIntoNewChangeSet.	aMenu balloonTextForLastItem: 'Load a fileout from disk and place its changes into a new change set (seldom needed -- much better to do this from a file-list browser these days.)'.	aMenu addLine.	aMenu add: 'more...' action: #unshiftedYellowButtonActivity.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !