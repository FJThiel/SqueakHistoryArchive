'From Squeak 2.5 of August 6, 1999 on 10 September 1999 at 4:43:02 pm'!"Change Set:		ShrinkFixesDate:			10 September 1999Author:			Dan IngallsRestore majorShrink and related routines to some degree of effectiveness."!!SystemDictionary methodsFor: 'sources, change log' stamp: 'di 9/10/1999 15:52'!currentProjectDo: aBlock	"So that code can work after removal of Projects"	Smalltalk at: #Project ifPresent:		[:projClass | aBlock value: projClass current].! !!Behavior methodsFor: 'creating method dictionary' stamp: 'di 9/10/1999 15:53'!compileAllFrom: oldClass	"Compile all the methods in the receiver's method dictionary.	This validates sourceCode and variable references and forces	all methods to use the current bytecode set"	"ar 7/10/1999: Use oldClass selectors not self selectors"	oldClass selectorsDo: [:sel | self recompile: sel from: oldClass].	Smalltalk currentProjectDo: [:proj | proj compileAllIsolated: self from: oldClass].! !!ChangeSet methodsFor: 'testing' stamp: 'di 9/10/1999 15:55'!belongsToAProject	Smalltalk at: #Project ifPresent:		[:projClass | projClass allSubInstancesDo:			[:proj | proj projectChangeSet == self ifTrue: [^ true]]].	^ false! !!ChangeSet methodsFor: 'method changes' stamp: 'di 9/10/1999 15:53'!atSelector: selector class: class put: changeType	(selector==#DoIt) | (selector==#DoItIn:) ifTrue: [^self].	(methodChanges at: class name		ifAbsent: 			[methodChanges at: class name put: (IdentityDictionary new)])				at: selector put: changeType.	Smalltalk currentProjectDo: [:proj | proj isolateClass: class].  "see if top project needs to record this class"			! !!ChangeSet methodsFor: 'method changes' stamp: 'di 9/10/1999 15:55'!changeSelector: selector class: class 	"Include indication that a method has been edited. 	This method must be called before the new method in actually installed, so old methodDictionary state can be saved.  It is now -- keep it that way!!"		Utilities noteMethodSubmission: selector forClass: class name.		"Keep track of change in order for 'recent submissions' browser"	(self atSelector: selector class: class) = #add 		ifFalse: [self atSelector: selector class: class put: #change]			"Don't forget a method is new just because it's been changed"		ifTrue: [Smalltalk currentProjectDo: [:proj | proj isolateClass: class]].			"top isolated project needs to record this change"			! !!ClassDescription methodsFor: 'organization' stamp: 'di 9/10/1999 10:21'!zapAllMethods	"Remove all methods in this class which is assumed to be obsolete"	methodDict _ MethodDictionary new.	self isMeta ifFalse: [self class zapAllMethods]! !!Class methodsFor: 'initialize-release' stamp: 'di 9/10/1999 14:12'!obsolete	"Change the receiver and all of its subclasses to an obsolete class."	self == Object 		ifTrue:[^self error:'Object is NOT obsolete'].	self subclassesDo: [:sub | sub obsolete].	name _ 'AnObsolete' , name.	Object class instSize + 1 to: self class instSize do:		[:i | self instVarAt: i put: nil]. "Store nil over class instVars."	classPool _ nil.	sharedPools _ nil.	self class obsolete.	super obsolete.! !!SystemDictionary methodsFor: 'class names' stamp: 'di 9/10/1999 07:59'!classNames	"Answer a SortedCollection of all class names."	| names |	CachedClassNames == nil ifTrue:		[names _ OrderedCollection new: self size.		self do: 			[:cl | ((cl isKindOf: Class) and: [(cl name beginsWith: 'AnObsolete') not])				ifTrue: [names add: cl name]].		CachedClassNames _ names asSortedCollection].	^ CachedClassNames! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 14:07'!discard3D	"Discard 3D Support."	Smalltalk removeKey: #WonderlandConstants ifAbsent: [].	Smalltalk removeKey: #AliceConstants ifAbsent: [].	Smalltalk removeKey: #B3DEngineConstants ifAbsent: [].	SystemOrganization removeCategoriesMatching: 'Morphic-Balloon-Demos'.	SystemOrganization removeCategoriesMatching: 'Balloon-3D-*'.	SystemOrganization removeCategoriesMatching: 'Wonderland-*'.	SystemOrganization removeCategoriesMatching: 'Alice2.0-*'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 10:14'!discardMorphic   "Smalltalk discardMorphic"	"Discard Morphic."	| subs |	"Check that we are in an MVC Project and that there are no Morphic Projects		or WorldMorphViews."	Utilities clobberFlapTabList.	Smalltalk discard3D.	Smalltalk discardFlash.	subs _ OrderedCollection new.	Morph allSubclassesWithLevelDo: [:c :i | subs addFirst: c]		startingLevel: 0.	subs do: [:c | c removeFromSystem].	Smalltalk removeKey: #BalloonEngineConstants ifAbsent: [].	SystemOrganization removeCategoriesMatching: 'User Objects'.	SystemOrganization removeCategoriesMatching: 'Experimental-*'.	SystemOrganization removeCategoriesMatching: 'Balloon-*'.	SystemOrganization removeCategoriesMatching: 'Morphic-*'.	SystemOrganization removeCategoriesMatching: 'TrueType-*'.	SystemOrganization removeSystemCategory: 'Graphics-Transformations'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 10:09'!discardNetworking	"Discard the support for TCP/IP networking."	SystemOrganization removeSystemCategory: 'Interface-Web Browser'.	SystemOrganization removeSystemCategory: 'Interface-Mail Reader'.	SystemOrganization removeSystemCategory: 'Interface-IRC Chat'.	Smalltalk discardPluggableWebServer.	SystemOrganization removeCategoriesMatching: 'HTML-*'.	SystemOrganization removeCategoriesMatching: 'NetTools-*'.	SystemOrganization removeCategoriesMatching: 'Network-*'.	SystemOrganization removeSystemCategory: 'System-Network'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 10:08'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently used."	"Smalltalk discardOddsAndEnds"	SystemOrganization removeSystemCategory: 'System-Serial Port'.	SystemOrganization removeSystemCategory: 'Graphics-Symbols'.	SystemOrganization removeSystemCategory: 'Interface-File Contents Browser'.	SystemOrganization removeSystemCategory: 'System-Compression'.	SystemOrganization removeSystemCategory: 'Interface-Explorer'.	Form removeSelector: #edit.	Smalltalk at: #FormView ifPresent:		[:c | c compile: 'defaultControllerClass  ^ NoController'			classified: 'controller access'].	Smalltalk removeClassNamed: #FormEditorView.	Smalltalk removeClassNamed: #FormEditor.	SystemOrganization removeSystemCategory: 'Graphics-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	Smalltalk removeClassNamed: #FormButtonCache.	Smalltalk removeClassNamed: #FormMenuController.	Smalltalk removeClassNamed: #FormMenuView.	Smalltalk removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	SystemDictionary removeSelector: #viewImageImports.	ScreenController removeSelector: #viewImageImports.	Smalltalk removeClassNamed: #FormHolderView.	Smalltalk removeClassNamed: #FormInspectView.	"experimental hand-drawn character recoginizer:"	ParagraphEditor removeSelector: #recognizeCharacters.	ParagraphEditor removeSelector: #recognizer:.	ParagraphEditor removeSelector: #recognizeCharactersWhileMouseIn:.	Smalltalk removeClassNamed: #CharRecog.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	Smalltalk removeClassNamed: #ObjectViewer.	Smalltalk removeClassNamed: #ObjectTracer.	"miscellaneous classes:"	Smalltalk removeClassNamed: #Array2D.	Smalltalk removeClassNamed: #DriveACar.	Smalltalk removeClassNamed: #EventRecorder.	Smalltalk removeClassNamed: #FindTheLight.	Smalltalk removeClassNamed: #PluggableTest.	Smalltalk removeClassNamed: #SystemMonitor.	Smalltalk removeClassNamed: #DocLibrary.	Smalltalk at: #SampledSound ifPresent: [:c |		(Smalltalk confirm: 'Remove all sounds from the SampledSound library?')		ifTrue: [c initialize]].	#(Helvetica Palatino Courier) do:		[:k | TextConstants removeKey: k ifAbsent: []].	(TextConstants at: #ComicBold) newFontArray:		((TextConstants at: #ComicBold) fontArray			copyFrom: 1 to: (5 min: (TextConstants at: #ComicBold) fontArray size)).! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 10:03'!discardSoundSynthesis	"Discard the sound synthesis facilities, and the methods and classes that use it. This also discards MIDI."	Smalltalk discardMIDI.	Smalltalk removeClassNamed: #EnvelopeLineMorph.	Smalltalk removeClassNamed: #EnvelopeEditorMorph.	Smalltalk removeClassNamed: #PianoKeyboardMorph.	Smalltalk removeClassNamed: #WaveEditor.	Smalltalk removeClassNamed: #SoundSequencerMorph.	Smalltalk removeClassNamed: #SoundMorph.	Smalltalk removeClassNamed: #SoundLoopMorph.	Smalltalk removeClassNamed: #InterimSoundMorph.	Smalltalk removeClassNamed: #RecordingControlsMorph.	Smalltalk removeClassNamed: #PermanentRecordingControlsMorph.	Smalltalk removeClassNamed: #SoundDemoMorph.	Smalltalk at: #GraphMorph ifPresent: [:graphMorph |		#(playOnce readDataFromFile)			do: [:sel | graphMorph removeSelector: sel]].	Smalltalk at: #TrashCanMorph ifPresent: [:trashMorph |		trashMorph class removeSelector: #samplesForDelete.		trashMorph class removeSelector: #samplesForMouseEnter.		trashMorph class removeSelector: #samplesForMouseLeave].	SystemOrganization removeCategoriesMatching: 'Music-Synthesis'.	SystemOrganization removeCategoriesMatching: 'Music-Scores'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 09:16'!discardVMConstruction	"Discard the virtual machine construction classes and the Smalltalk-to-C translator. These are only needed by those wishing to build or study the Squeak virtual machine, or by those wishing to construct new primitives via Smalltalk-to-C translation."	"remove the code for virtual machines"	Smalltalk removeKey: #InterpreterLog ifAbsent: [].	SystemOrganization removeCategoriesMatching: 'Squeak-Plugins'.	SystemOrganization removeCategoriesMatching: 'Squeak-Interpreter'.	"remove the Smalltalk-to-C translator"	Smalltalk at: #CCodeGenerator ifPresent: [:codeGen | codeGen removeCompilerMethods].	SystemOrganization removeCategoriesMatching: 'Squeak-Translation to C'.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 16:42'!majorShrink    "Smalltalk majorShrink; abandonSources; lastRemoval"	"This method throws out lots of the system that is not needed for, eg, operation in a hand-held PC.  Currently, since it discards Morphic, majorShrink must be run in an MVC project.  Moreover, since it throws out projects, it shouod be run in the top (and only) project.  majorShrink altogether saves about 5,620k in Squeak 2.4""First delete all the PlayWithMe windows and projects, and the class Component1"	Wonderland removeActorPrototypesFromSystem.	Player freeUnreferencedSubclasses.	MorphicModel removeUninstantiatedModels.	Utilities classPool at: #ScrapsBook put: nil.	Smalltalk discardVMConstruction.  "666k"	Smalltalk discardSoundSynthesis.  "358k"	Smalltalk discardOddsAndEnds.  "158k"	Smalltalk discardNetworking.  "243k"	Smalltalk discardMorphic.  "2,494k"	Symbol rehash.  "40k"	"Above by itself saves about 3,960k""	| a | a _ Smalltalk garbageCollect.	Smalltalk majorShrink.	Smalltalk garbageCollect - a"	"Remove references to a few classes to be deleted, so that they won't leave obsolete versions around."	FileList removeSelector: #fileIntoNewChangeSet.	ChangeSet class compile: 'defaultName		^ ''Changes'' ' classified: 'initialization'.	ScreenController removeSelector: #openChangeManager.	ScreenController removeSelector: #exitProject.	ScreenController removeSelector: #openProject.	ScreenController removeSelector: #viewImageImports.	"Now delete lots of classes.."	SystemOrganization removeSystemCategory: 'Graphics-Symbols'.	SystemOrganization removeSystemCategory: 'Graphics-Files'.	SystemOrganization removeSystemCategory: 'Interface-Projects'.	SystemOrganization removeSystemCategory: 'System-Object Storage'.	Smalltalk removeClassNamed: #FormSetFont.	Smalltalk removeClassNamed: #FontSet.	Smalltalk removeClassNamed: #InstructionPrinter.	Smalltalk removeClassNamed: #ChangeSorter.	Smalltalk removeClassNamed: #DualChangeSorter.	Smalltalk removeClassNamed: #EmphasizedMenu.	Smalltalk removeClassNamed: #MessageTally.	StringHolder class removeSelector: #originalWorkspaceContents.	CompiledMethod removeSelector: #symbolic.	RemoteString removeSelector: #makeNewTextAttVersion.	Utilities class removeSelector: #absorbUpdatesFromServer.	Smalltalk removeClassNamed: #PenPointRecorder.	Smalltalk removeClassNamed: #Path.	Smalltalk removeClassNamed: #Base64MimeConverter.	Smalltalk removeClassNamed: #EToySystem.	Smalltalk removeClassNamed: #RWBinaryOrTextStream.	Smalltalk removeClassNamed: #AttributedTextStream.	Smalltalk removeClassNamed: #CornerRounder.	Smalltalk removeClassNamed: #WordNet.	Smalltalk removeClassNamed: #SelectorBrowser.	TextStyle allSubInstancesDo:		[:ts | ts newFontArray: (ts fontArray copyFrom: 1 to: (2 min: ts fontArray size))].	ListParagraph initialize.	PopUpMenu initialize.	StandardSystemView initialize.	Smalltalk noChanges.	ChangeSorter classPool at: #AllChangeSets 		put: (OrderedCollection with: Smalltalk changes).	ScriptingSystem _ nil.	SystemDictionary removeSelector: #majorShrink.	[Smalltalk removeAllUnSentMessages > 0]		whileTrue:		[Smalltalk unusedClasses do: [:c | (Smalltalk at: c) removeFromSystem].		Smalltalk obsoleteClasses do: [:c | c zapAllMethods]].	Smalltalk keys do:		[:k | (((Smalltalk at: k) isKindOf: Behavior)			and: [(Smalltalk at: k) name beginsWith: 'AnObs'])			ifTrue: [Smalltalk removeKey: k]].	SystemOrganization categories do:		[:cat | (SystemOrganization listAtCategoryNamed: cat) do:			[:className | (Smalltalk includesKey: className)				ifFalse: [SystemOrganization removeElement: className]]].	SystemOrganization removeEmptyCategories.	Smalltalk flushClassNameCache.	Smalltalk allClassesDo: [:c | c zapOrganization].	Symbol rehash.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 9/10/1999 16:09'!removeAllUnSentMessages   "Smalltalk removeAllUnSentMessages"	"[Smalltalk unusedClasses do: [:c | (Smalltalk at: c) removeFromSystem].		Smalltalk removeAllUnSentMessages > 0] whileTrue." 	"Remove all implementations of unsent messages."	| sels n |	sels _ self allUnSentMessages.	"The following should be preserved for doIts, etc"	#(browseAllSelect: printSpaceAnalysis lastRemoval		scrollBarValue: scrollBarMenuButtonPressed: 		withSelectionFrom:  to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial benchmark benchFib		newDepth: restoreAfter: forgetDoIts zapAllMethods obsoleteClasses		removeAllUnSentMessages abandonSources removeUnreferencedKeys		reclaimDependents zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerInterruptWatcher unusedClasses) do:		[:sel | sels remove: sel ifAbsent: []].	"The following may be sent by perform: in dispatchOnChar..."	(ParagraphEditor classPool at: #CmdActions) asSet do:		[:sel | sels remove: sel ifAbsent: []].	(ParagraphEditor classPool at: #ShiftCmdActions) asSet do:		[:sel | sels remove: sel ifAbsent: []].	sels size = 0 ifTrue: [^ 0].	n _ 0. Smalltalk allBehaviorsDo: [:x | n _ n+1].	'Removing ', sels size printString , ' messages . . .'		displayProgressAt: Sensor cursorPoint		from: 0 to: n		during:		[:bar |		n _ 0.		self allBehaviorsDo:			[:class | bar value: (n _ n+1).			sels do:				[:sel | class removeSelectorSimply: sel]]].	MethodDictionary allInstancesDo: "allSubInstancesDo:" [:d | d rehash].	^ sels size! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'di 9/10/1999 15:57'!newChanges: aChangeSet 	"Set the system ChangeSet to be the argument, aChangeSet.  Tell the current project that aChangeSet is now its change set.  When called from Project enter:, the setChangeSet: call is redundant but harmless; when called from code that changes the current-change-set from within a project, it's vital"	SystemChanges _ aChangeSet.	Smalltalk currentProjectDo: [:proj | proj setChangeSet: aChangeSet]! !!SystemOrganizer methodsFor: 'remove' stamp: 'di 9/10/1999 09:37'!removeSystemCategory: category	"remove all the classes associated with the category"	(self superclassOrder: category) reverseDo: [:class | class removeFromSystem].	self removeEmptyCategories! !