'From Squeak2.9alpha of 12 June 2000 [latest update: #2607] on 12 September 2000 at 2:00:44 pm'!"Change Set:		SimplifiedUndoDate:			11 September 2000Author:			Dan IngallsIntroduces a simplified protocol for undoing and redoing simple changes of state.Uses that protocol to implement undo for the SameGame application.Also simplifies some existing undo code."!!Object methodsFor: 'undo' stamp: 'di 9/11/2000 20:32'!capturedState	"May be overridden in subclasses."	^ self shallowCopy! !!Object methodsFor: 'undo' stamp: 'di 9/11/2000 20:29'!commandHistory	"Return the command history for the receiver"	| w |	(w _ self currentWorld) ifNotNil: [^ w commandHistory].	^ CommandHistory new. "won't really record anything but prevent breaking things"! !!Object methodsFor: 'undo' stamp: 'di 9/12/2000 08:15'!redoFromCapturedState: st 	"May be overridden in subclasses.  See also capturedState"	self undoFromCapturedState: st  "Simple cases are symmetric"! !!Object methodsFor: 'undo' stamp: 'di 9/11/2000 20:30'!rememberCommand: aCommand	"Remember the given command for undo"	Preferences useUndo ifFalse: [^ self]. "get out quickly"	^ self commandHistory rememberCommand: aCommand! !!Object methodsFor: 'undo' stamp: 'di 9/11/2000 20:30'!rememberUndoableAction: actionBlock named: caption	| cmd result |	cmd _ Command new cmdWording: caption.	cmd undoTarget: self selector: #undoFromCapturedState: argument: self capturedState.	result _ actionBlock value.	cmd redoTarget: self selector: #redoFromCapturedState: argument: self capturedState.	self rememberCommand: cmd.	^ result! !!Object methodsFor: 'undo' stamp: 'di 9/11/2000 20:32'!undoFromCapturedState: st 	"May be overridden in subclasses.  See also capturedState"	self copyFrom: st! !!Form methodsFor: 'displaying' stamp: 'di 9/12/2000 10:04'!setAsBackground	"Set this form as a background image."	| world newColor |	Smalltalk isMorphic 		ifTrue:			[world _ self currentWorld.			newColor _ InfiniteForm with: self.			self rememberCommand:				(Command new cmdWording: 'set background to a picture';					undoTarget: world selector: #color: argument: world color;					redoTarget: world selector: #color: argument: newColor).			world color: newColor]		ifFalse:			[ScheduledControllers screenController model form: self.			Display restoreAfter: []]! !!BorderedMorph methodsFor: 'menu' stamp: 'di 9/12/2000 10:03'!changeBorderWidth: evt	| handle origin aHand newWidth oldWidth |	aHand _ evt ifNil: [self primaryHand] ifNotNil: [evt hand].	origin _ aHand position.	oldWidth _ borderWidth.	handle _ HandleMorph new		forEachPointDo:			[:newPoint | handle removeAllMorphs.			handle addMorph:				(LineMorph from: origin to: newPoint color: Color black width: 1).			newWidth _ (newPoint - origin) r asInteger // 5.			self borderWidth: newWidth]		lastPointDo:			[:newPoint | self addHalo.			self rememberCommand:				(Command new cmdWording: 'border change';					undoTarget: self selector: #borderWidth: argument: oldWidth;					redoTarget: self selector: #borderWidth: argument: newWidth)].	aHand attachMorph: handle.	handle startStepping! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'di 9/12/2000 09:58'!originalColor: colorOrSymbol	"Set the receiver's original color.  It is at this point that a command is launched to represent the action of the picker, in support of Undo."	originalColor _ (colorOrSymbol isKindOf: Color)		ifTrue: [colorOrSymbol]		ifFalse: [Color lightGreen].	originalForm fill: RevertBox fillColor: originalColor.! !!ColorPickerMorph methodsFor: 'other' stamp: 'di 9/12/2000 10:00'!delete	"The moment of departure has come.  If the receiver has an affiliated command, finalize it and have the system remember it.  In any case, delete the receiver"	self rememberCommand: 		(Command new			cmdWording: 'color change';			undoTarget: target selector: selector arguments: (self argumentsWith: originalColor);			redoTarget: target selector: selector arguments: (self argumentsWith: selectedColor)).	super delete! !!SameGame methodsFor: 'access' stamp: 'di 9/12/2000 08:07'!scoreDisplay	^ scoreDisplay! !!SameGameBoard methodsFor: 'initialization' stamp: 'di 9/11/2000 21:08'!resetBoard	| biasedPalette bag |	selection _ nil.	biasedPalette _ Array new: colorBias.	biasedPalette atAllPut: palette atRandom.	biasedPalette _ biasedPalette asOrderedCollection.	biasedPalette addAll: palette.	bag _ Bag new.	self submorphsDo:		[:m |		m disabled: false.		m setSwitchState: false.		m color: biasedPalette atRandom.		bag add: m color].	self commandHistory resetCommandHistory! !!SameGameBoard methodsFor: 'actions' stamp: 'di 9/11/2000 20:55'!removeSelection	selection ifNil: [^ self].	self rememberUndoableAction: 			[selection do: [:loc | (self tileAt: loc) disabled: true; setSwitchState: false].			self collapseColumns: (selection collect: [:loc | loc x]) asSet asSortedCollection.			selection _ nil.			flash _ false.			(target ~~ nil and: [actionSelector ~~ nil])				ifTrue: [target perform: actionSelector withArguments: arguments]]		named: 'remove selection'! !!SameGameBoard methodsFor: 'private' stamp: 'di 9/12/2000 08:09'!capturedState	^ {	self shallowCopy.  "selection, etc."		self submorphs collect: [:t | t shallowCopy].  "state of tiles"		owner scoreDisplay flash.  "score display"		owner scoreDisplay value. }! !!SameGameBoard methodsFor: 'private' stamp: 'di 9/12/2000 08:20'!undoFromCapturedState: st 	self copyFrom: st first.	self submorphs with: st second do: [:s :t | s copyFrom: t].	selection ifNotNil:		[selection do: [:loc | (self tileAt: loc) setSwitchState: false; color: selectionColor].		selection _ nil].	owner scoreDisplay flash: st third.  "score display"	owner scoreDisplay value: st fourth.	self changed.! !SameGameBoard removeSelector: #redoFromCapturedState:!Morph removeSelector: #rememberCommand:!