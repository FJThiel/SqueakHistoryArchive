'From Squeak3.1alpha of 5 February 2001 [latest update: #3972] on 3 May 2001 at 9:34:14 am'!"Change Set:		fasterDiffsDate:			3 May 2001Author:			Bob ArningFaster generation of text diffs for large texts (around 15x faster)"!Object subclass: #TwoLevelDictionary	instanceVariableNames: 'firstLevel '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-File Contents Browser'!!TwoLevelDictionary commentStamp: '<historical>' prior: 0!A simple dictionary for the use of the TextDiffBuilder. Keys are presumed to be Points and a significant speed advantage is gained by using a dictionary of dictionaries. The first is keyed by the x-values and the second by the y-values. Only the minimum necessary protocol is implemented.!Object subclass: #TwoLevelSet	instanceVariableNames: 'firstLevel '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-File Contents Browser'!!TwoLevelSet commentStamp: '<historical>' prior: 0!A simple set for the use of the TextDiffBuilder. Elements are presumed to be Points and a significant speed advantage is gained by using a dictionary of sets. The first is keyed by the x-values and the second contains the y-values. Only the minimum necessary protocol is implemented.!!TextDiffBuilder methodsFor: 'creating patches' stamp: 'RAA 5/2/2001 23:35'!buildPatchSequence	"@@ TODO: Das funktioniert noch nicht für n-m matches"	matches := TwoLevelDictionary new.	self buildReferenceMap.	runs := self processDiagonals.	self validateRuns: runs.	"There may be things which have just been moved around. Find those."	shifted := self detectShiftedRuns.	self processShiftedRuns.	"Now generate a patch sequence"	patchSequence := self generatePatchSequence.	^patchSequence! !!TextDiffBuilder methodsFor: 'creating patches' stamp: 'RAA 5/2/2001 23:41'!processDiagonals	^self processDiagonalsFrom: matches twoLevelKeys! !!TextDiffBuilder methodsFor: 'creating patches' stamp: 'RAA 5/2/2001 23:17'!processDiagonalsFrom: todoList	| runList start run todo |	todo := todoList copy.	runList := PluggableDictionary new.	runList hashBlock: self pointHashBlock.	runList equalBlock: self pointEqualBlock.	[todo isEmpty] whileFalse:[		start := todo detect:[:any| true].		run := OrderedCollection new.		start := self 					collectRunFrom: todo 					startingWith: start 					into: run.		runList at: start put: run.	].	"If we have multiple matches we might have chosen a bad sequence.	There we redo the whole thing recursively"	self hasMultipleMatches  ifFalse:[^runList].	runList size < 2 ifTrue:[^runList].	run := nil.	start := 0.	runList associationsDo:[:assoc|		(run isNil or:[assoc value size > run size]) ifTrue:[			run := assoc value.			start := assoc key]].	"Now found the longest run"	run := OrderedCollection new.	start := self				collectRunFrom: todoList				startingWith: start				into: run.	"Find the diagonals in the remaining set"	runList := self processDiagonalsFrom: todoList.	runList at: start put: run.	^runList! !!TextDiffBuilder methodsFor: 'private' stamp: 'RAA 5/2/2001 22:56'!pointEqualBlock	^[ :a :b | a x = b x and: [a y = b y]] fixTemps! !!TextDiffBuilder methodsFor: 'private' stamp: 'RAA 5/2/2001 23:28'!remove: pointKey from: aSet	self hasMultipleMatches ifFalse:[^aSet remove: pointKey].	aSet removeAllXAndY: pointKey.! !!TwoLevelDictionary methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:42'!at: aPoint	^(firstLevel at: aPoint x ifAbsent: [^nil]) at: aPoint y ifAbsent: [^nil]! !!TwoLevelDictionary methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:37'!at: aPoint put: anObject	(firstLevel at: aPoint x ifAbsentPut: [Dictionary new]) at: aPoint y put: anObject! !!TwoLevelDictionary methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:38'!initialize	firstLevel _ Dictionary new.! !!TwoLevelDictionary methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:40'!keysDo: aBlock	firstLevel keysAndValuesDo: [ :x :v |		v keysDo: [ :y | aBlock value: x@y]	].! !!TwoLevelDictionary methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:40'!twoLevelKeys	| twoLevelSet |	twoLevelSet _ TwoLevelSet new.	self keysDo: [ :each | twoLevelSet add: each].	^twoLevelSet! !!TwoLevelDictionary class methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:37'!new	^super new initialize! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:18'!add: aPoint	(firstLevel at: aPoint x ifAbsentPut: [Set new]) add: aPoint y! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:18'!copy	| answer |	answer _ self class new initialize.	self do: [ :each |		answer add: each	].	^answer! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/3/2001 09:26'!detect: aBlock	firstLevel keysAndValuesDo: [ :x :v |		v do: [ :y | (aBlock value: x@y) ifTrue: [^x@y]]	].	^nil! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:15'!do: aBlock	firstLevel keysAndValuesDo: [ :x :v |		v do: [ :y | aBlock value: x@y]	].! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:19'!includes: aPoint	^(firstLevel at: aPoint x ifAbsent: [^false]) includes: aPoint y! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:11'!initialize	firstLevel _ Dictionary new.! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:13'!isEmpty	^firstLevel isEmpty! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:22'!remove: aPoint	| lev2 |	lev2 _ firstLevel at: aPoint x ifAbsent: [^self].	lev2 remove: aPoint y ifAbsent: [].	lev2 isEmpty ifTrue: [firstLevel removeKey: aPoint x].! !!TwoLevelSet methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:28'!removeAllXAndY: aPoint	| deletes |	deletes _ OrderedCollection new.	firstLevel removeKey: aPoint x ifAbsent: [].	firstLevel keysAndValuesDo: [ :x :lev2 |		lev2 remove: aPoint y ifAbsent: [].		lev2 isEmpty ifTrue: [deletes add: x].	].	deletes do: [ :each | firstLevel removeKey: each ifAbsent: []].! !!TwoLevelSet class methodsFor: 'as yet unclassified' stamp: 'RAA 5/2/2001 23:38'!new	^super new initialize! !