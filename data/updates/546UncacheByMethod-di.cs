'From Squeak 2.3 beta of Nov 25, 1998 on 2 January 1999 at 5:01:09 pm'!"Change Set:		UncacheByMethodDate:			2 January 1999Author:			Dan IngallsChanges Squeak so that flushing of the method cache is done by method, not by selector.  The change to ContextPart is simply to share the new method, lookupSelector:.This does not include the new entry for the Interperter PrimitiveTable."!!CompiledMethod methodsFor: 'accessing' stamp: 'di 1/2/1999 17:00'!flushCache	"Tell the interpreter to remove all references to this method from its method lookup cache, if it has one.  This primitive must be called whenever a method is defined or removed.	NOTE:  Only one of two selective flush methods needs to be used.	Squeak 2.2 and earlier uses 119 (See Symbol flushCache).	Squeak 2.3 and later uses 116 (See CompiledMethod flushCache)."	<primitive: 116>! !!Behavior methodsFor: 'accessing method dictionary' stamp: 'di 1/2/1999 15:45'!lookupSelector: selector	"Look up the given selector in my methodDictionary.	Return the corresponding method if found.	Otherwise chase the superclass chain and try again.	Return nil if no method is found."	| lookupClass |	lookupClass _ self.	[lookupClass == nil]		whileFalse: 			[(lookupClass includesSelector: selector)				ifTrue: [^ lookupClass compiledMethodAt: selector].			lookupClass _ lookupClass superclass].	^ nil! !!Behavior methodsFor: 'creating method dictionary' stamp: 'di 1/2/1999 15:52'!addSelector: selector withMethod: compiledMethod 	"Add the message selector with the corresponding compiled method to the 	receiver's method dictionary."	| oldMethod |	oldMethod _ self lookupSelector: selector.	methodDict at: selector put: compiledMethod.	"Now flush Squeak's method cache, either by selector or by method"	oldMethod == nil ifFalse: [oldMethod flushCache].	selector flushCache! !!Behavior methodsFor: 'creating method dictionary' stamp: 'di 1/2/1999 15:16'!removeSelector: selector 	"Assuming that the argument, selector (a Symbol), is a message selector 	in my method dictionary, remove it and its method."	^ self removeSelectorSimply: selector! !!Behavior methodsFor: 'private' stamp: 'di 1/2/1999 16:06'!removeSelectorSimply: selector 	"Assuming that the argument, selector (a Symbol), is a message selector 	in my method dictionary, remove it and its method."	| oldMethod |	oldMethod _ methodDict at: selector ifAbsent: [^ self].	methodDict removeKey: selector.	"Now flush Squeak's method cache, either by selector or by method"	oldMethod flushCache.	selector flushCache.! !!ContextPart methodsFor: 'controlling' stamp: 'di 1/2/1999 15:50'!send: selector to: rcvr with: args super: superFlag 	"Simulate the action of sending a message with selector, selector, and 	arguments, args, to receiver. The argument, superFlag, tells whether the 	receiver of the message was specified with 'super' in the source method."	| class meth val |	class _ superFlag			ifTrue: [(self method literalAt: self method numLiterals) value superclass]			ifFalse: [rcvr class].	meth _ class lookupSelector: selector.	meth == nil		ifTrue: [^ self send: #doesNotUnderstand:					to: rcvr					with: (Array with: (Message selector: selector arguments: args))					super: superFlag]		ifFalse: [val _ self tryPrimitiveFor: meth						receiver: rcvr						args: args.				val == #simulatorFail ifFalse: [^ val].				(selector == #doesNotUnderstand: and: [class == Object]) ifTrue:					[^ self error: 'Simulated message ' , (args at: 1) selector									, ' not understood'].				^ self activateMethod: meth					withArgs: args					receiver: rcvr					class: class]! !!Interpreter methodsFor: 'other primitives' stamp: 'di 1/2/1999 13:50'!primitiveFlushCacheByMethod	"The receiver is a compiledMethod.  Clear all entries in the method lookup cache that refer to this method, presumably because it has been redefined, overridden or removed."	| probe oldMethod |	oldMethod _ self stackTop.	probe _ 0.	1 to: MethodCacheEntries do:		[:i | (methodCache at: probe + MethodCacheMethod) = oldMethod ifTrue:			[methodCache at: probe + MethodCacheSelector put: 0].		probe _ probe + MethodCacheEntrySize]! !!Symbol methodsFor: 'system primitives' stamp: 'di 1/2/1999 17:00'!flushCache	"Tell the interpreter to remove all entries with this symbol as a selector from its method lookup cache, if it has one.  This primitive must be called whenever a method is defined or removed.	NOTE:  Only one of the two selective flush methods needs to be used.	Squeak 2.3 and later uses 116 (See CompiledMethod flushCache)."	<primitive: 119>! !CompiledMethod removeSelector: #bePrimitive:!