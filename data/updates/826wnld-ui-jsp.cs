'From Squeak 2.3 of January 14, 1999 on 13 April 1999 at 3:49:36 pm'!"Change Set:		wnld-ui-jspDate:			13 April 1999Author:			Jeff PierceRestructuring the Wonderland Editor UI."!Smalltalk renameClassNamed: #WonderlandMorph as: #WonderlandControls!Object subclass: #Wonderland	instanceVariableNames: 'myScheduler myNamespace sharedMeshDict sharedTextureDict myUndoStack defaultCamera cameraList lightList sceneObject scriptEditor actorClassList '	classVariableNames: 'ActorPrototypeClasses '	poolDictionaries: 'WonderlandConstants '	category: 'Wonderland-Core'!StringHolder subclass: #WonderlandActorBrowser	instanceVariableNames: 'myWonderland myListMorph actorListIndex selectedActor '	classVariableNames: ''	poolDictionaries: 'WonderlandConstants '	category: 'Wonderland-Morphs'!Morph subclass: #WonderlandActorViewer	instanceVariableNames: 'thumbnail selectedActor '	classVariableNames: ''	poolDictionaries: ''	category: 'Wonderland-Morphs'!TabbedPalette subclass: #WonderlandEditorTabs	instanceVariableNames: 'myWonderland myScriptEditor myActorViewer '	classVariableNames: ''	poolDictionaries: ''	category: 'Wonderland-Morphs'!Morph subclass: #WonderlandMorph	instanceVariableNames: 'myWonderland '	classVariableNames: ''	poolDictionaries: 'WonderlandConstants '	category: 'Wonderland-Morphs'!WonderlandMorph subclass: #WonderlandCameraMorph	instanceVariableNames: 'myCamera myControls '	classVariableNames: ''	poolDictionaries: 'WonderlandConstants '	category: 'Wonderland-Morphs'!WonderlandMorph subclass: #WonderlandControls	instanceVariableNames: 'myScheduler '	classVariableNames: ''	poolDictionaries: ''	category: 'Wonderland-Morphs'!WonderlandMorph subclass: #WonderlandEditor	instanceVariableNames: 'myTabs myControls myActorBrowser '	classVariableNames: ''	poolDictionaries: ''	category: 'Wonderland-Morphs'!!Hierarchical methodsFor: 'parent-child' stamp: 'jsp 4/13/1999 11:39'!getAllChildren	"Return all of this instance's children"	| children |	children _ OrderedCollection new.	myChildren do: [:child | children addLast: child.						children _ children , (child getAllChildren).					].	^ children.! !!Wonderland commentStamp: 'jsp 4/12/1999 11:38' prior: 0!What is Squeak-Alice?Alice (http://www.alice.org) is an authoring tool designed to allow people without programming experience to build interactive 3D worlds. The Stage 3 Research Group (Randy Pausch director) started the Alice project at the University of Virginia, and is continuing their work at Carnegie Mellon University (http://www.cs.cmu.edu/~stage). Squeak-Alice brings the ideas and the ideals of Alice to Squeak, with the goal of introducing even more people to 3D graphics and allowing them to author in the medium.Wonderlands are the basic building blocks of Squeak-Alice; a Wonderland is an interactive 3D world.To create a Wonderland, evaluate:Wonderland newThis creates a script editor, a control panel, and a window into the 3D world. From here you're ready to start building your world.Jeff Piercejpierce@cs.cmu.edu!!Wonderland methodsFor: 'initialize-reset-release' stamp: 'jsp 4/13/1999 10:45'!initialize	"This method initializes the Wonderland."	| ground |	"Initialize the list of actor UniClasses"	actorClassList _ OrderedCollection new.	"Initialize the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants copy.	"Create the Wonderland's scheduler"	myScheduler _ Scheduler new.	myNamespace at: 'scheduler' put: myScheduler.	"Create the undo stack for this Wonderland."	myUndoStack _ WonderlandUndoStack new.	"The scene object is the root of the object tree - all objects in the Wonderland are children (directly or indirectly) of the scene. "	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Create some default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	ground setName: 'ground'.	myNamespace at: 'ground' put: ground.	myUndoStack closeStack.	"Initialize the light list and create a default light"	lightList _ OrderedCollection new.	lightList addLast: (B3DAmbientLight color: Color white).		"Create the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ WonderlandCamera createFor: self.	cameraList addLast: defaultCamera.	myNamespace at: 'camera' put: defaultCamera.	myNamespace at: 'cameraWindow' put: (defaultCamera getMorph).	defaultCamera setName: 'camera'.	myUndoStack openStack.	"Throw this Wonderland into the shared namespace"	myNamespace at: 'w' put: self.	"Create a script editor for this Wonderland"	self makeScriptEditor.! !!Wonderland methodsFor: 'initialize-reset-release' stamp: 'jsp 4/13/1999 10:23'!reset	"Reset this Wonderland"	| ground |	"Reset the scheduler"	myScheduler reset.	"Reset the undo stack"	myUndoStack reset.	"Reset the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Reset the list of actor uniclasses"	actorClassList do: [:aClass | Smalltalk removeClassFromSystem: aClass ].	actorClassList _ OrderedCollection new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants copy.	"Rebuild the namespace"	myNamespace at: 'scheduler' put: myScheduler.	myNamespace at: 'w' put: self.	"Create a new scene"	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Recreate the default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setName: 'ground'.	myNamespace at: 'ground' put: ground.	myUndoStack closeStack.	"Re-initialize the light list and create a default light"	lightList _ OrderedCollection new.	lightList addLast: (B3DAmbientLight color: Color white).	"Wipe out the existing cameras"	cameraList do: [:camera | camera release].		"Recreate the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ WonderlandCamera createFor: self.	cameraList addLast: defaultCamera.	myNamespace at: 'camera' put: defaultCamera.	myNamespace at: 'cameraWindow' put: (defaultCamera getMorph).	defaultCamera setName: 'camera'.	"Reset the script editor's namespace"	scriptEditor resetNamespace.	"Update the actor browser"	scriptEditor updateActorBrowser.	myUndoStack openStack.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/9/1999 16:52'!makeCamera	"Add a new camera to the Wonderland"	| newCamera name windowName |	newCamera _ WonderlandCamera createFor: self.	name _ self uniqueNameFrom: 'camera'.	newCamera setName: name.	myNamespace at: name put: newCamera.	windowName _ self uniqueNameFrom: 'cameraWindow'.	myNamespace at: windowName put: (newCamera getMorph).	cameraList addLast: newCamera.	scriptEditor updateActorBrowser.	"Add an undo action to remove this camera"	myUndoStack push: (UndoAction new: [  cameraList remove: newCamera.											newCamera removeFromScene.											myNamespace removeKey: name ifAbsent: [].											myNamespace removeKey: windowName.											newCamera release.											scriptEditor updateActorBrowser ]).	^ newCamera.! !!WonderlandActor methodsFor: 'private' stamp: 'jsp 4/13/1999 10:41'!setColorVector: aColor	"Instaneously sets the object's color/alpha vector and copies it down the object tree for all objects that are parts of this object"	"Set our color"	myColor _ aColor.	myMaterial ambientPart: myColor.	myMaterial diffusePart: myColor.	"Set the color of our parts"	myChildren do: [:child | (child isPart) ifTrue: [child setColorVector: aColor] ].! !!WonderlandActorBrowser methodsFor: 'initialize-release' stamp: 'jsp 4/13/1999 11:41'!initializeWith: aWonderland	"Initialize this instance."	myWonderland _ aWonderland.	actorListIndex _ 0.	selectedActor _ nil.	myListMorph _ (PluggableListMorph on: self list: #actorList						selected: #actorListIndex changeSelected: #actorListIndex:						menu: #actorMenu: keystroke: #systemCatListKey:from:).	myListMorph name: 'Actors'.	myListMorph scrollBarOnLeft: false.	myListMorph extent: 140@320.	myListMorph color: (Color r: 0.627 g: 0.909 b: 0.972).	myListMorph retractable: false.! !!WonderlandActorBrowser methodsFor: 'actor list functions' stamp: 'jsp 4/13/1999 12:13'!actorMenu: aMenu	"Builds the menu to display when the user right clicks on an actor"	selectedActor ifNil: [ ^ aMenu ].	(selectedActor isFirstClass)		ifTrue: [			^ aMenu addList: {								{'Point camera at'. #pointAt}.								{'Turn around once'. #turnAround}.								{'Become part'. #becomePart }.								{'Stand up'. #standUp}.								{'Grow'. #grow}.								{'Shrink'. #shrink}.								{'Squash'. #squash}.								{'Stretch'. #stretch}.								{'Destroy'. #destroy}							  }.				]		ifFalse: [			^ aMenu addList: {								{'Point camera at'. #pointAt}.								{'Turn around once'. #turnAround}.								{'Become first class'. #becomeFirstClass }.								{'Stand up'. #standUp}.								{'Grow'. #grow}.								{'Shrink'. #shrink}.								{'Squash'. #squash}.								{'Stretch'. #stretch}.								{'Destroy'. #destroy}							  }.				].! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 12:14'!becomeFirstClass	"Make the selected actor first class"	selectedActor becomeFirstClass.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 12:13'!becomePart	"Make the selected actor a part"	selectedActor becomePart.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 11:51'!destroy	"Destroy the selected actor."	selectedActor destroy.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 11:57'!grow	"Make the selected actor grow"	selectedActor resize: 1.5.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 11:48'!pointAt	"Point the default camera at the selected object"	myWonderland getDefaultCamera pointAt: selectedActor.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 11:57'!shrink	"Make the selected actor shrink"	selectedActor resize: (1.0 / 1.5).! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 11:57'!squash	"Squash the selected actor."	selectedActor resizeLikeRubber: (1.0 / 1.5) dimension: topToBottom.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 11:52'!standUp	"Make the selected actor stand up"	selectedActor standUp.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 11:57'!stretch	"Stretch the selected actor"	selectedActor resizeLikeRubber: 1.5 dimension: topToBottom.! !!WonderlandActorBrowser methodsFor: 'actor menu functions' stamp: 'jsp 4/13/1999 12:01'!turnAround	"Make the selected actor turnAround"	selectedActor turn: left turns: 1 duration: 2.! !!WonderlandActorBrowser methodsFor: 'actor list management' stamp: 'jsp 4/13/1999 12:03'!actorListIndex: anInteger	"Set the index of the currently selected actor."	| scene childList |	actorListIndex _ anInteger.	myListMorph selectionIndex: anInteger.	(anInteger = 0)		ifTrue: [					selectedActor _ nil.				]		ifFalse: [					scene _ myWonderland getScene.					childList _ scene getAllChildren.					childList addFirst: scene.					selectedActor _ childList at: anInteger.				].	self contentsChanged.! !Smalltalk renameClassNamed: #ActorInfoMorph as: #WonderlandActorViewer!!WonderlandActorViewer reorganize!('initialization' initialize)!!WonderlandActorViewer methodsFor: 'initialization' stamp: 'jsp 4/13/1999 11:25'!initialize	"Initialize this morph"	super initialize.	thumbnail _ ImageMorph new.	self addMorph: thumbnail.	self name: 'Actor Info'.	self extent: 500@350.	self color: (Color r: 0.815 g: 0.972 b: 0.878).! !Smalltalk renameClassNamed: #EditorTabs as: #WonderlandEditorTabs!!WonderlandEditorTabs reorganize!('initialization' addPanel: initializeWith:)('accessing' resetNamespace)!!WonderlandEditorTabs methodsFor: 'initialization' stamp: 'jsp 4/12/1999 16:15'!addPanel: aMorph	"Adds a new panel to the editor."	(self tabsMorph) addTab: (ReferenceMorph forMorph: aMorph).	(self pages) add: aMorph.! !!WonderlandEditorTabs methodsFor: 'initialization' stamp: 'jsp 4/13/1999 11:24'!initializeWith: aWonderland	"Initialize the editor with the Wonderland."	myWonderland _ aWonderland.	myScriptEditor _ (WonderlandScriptEditor new).	self addPanel: (myScriptEditor getMorph).	(self tabsMorph submorphs at: 1) tabSelected.	myScriptEditor setBindings: (myWonderland getNamespace).	myActorViewer _ WonderlandActorViewer new.	self addPanel: myActorViewer.! !!WonderlandEditorTabs methodsFor: 'accessing' stamp: 'jsp 4/12/1999 16:17'!resetNamespace	"Reset the namespace used by the script editor"	myScriptEditor setBindings: (myWonderland getNamespace).! !!WonderlandEditorTabs class methodsFor: 'instance creation' stamp: 'jsp 4/12/1999 16:19'!newFor: aWonderland	"Create new tabs for the Wonderland editor"	^ self new initializeWith: aWonderland.! !!WonderlandMorph methodsFor: 'accessing' stamp: 'jsp 4/12/1999 15:02'!getWonderland	^ myWonderland.! !!WonderlandMorph methodsFor: 'accessing' stamp: 'jsp 4/12/1999 15:02'!setWonderland: aWonderland	myWonderland _ aWonderland.! !!WonderlandMorph methodsFor: 'morph depth' stamp: 'jsp 4/12/1999 15:45'!sendToBack	"Bring this morph to the back"	self owner addMorphBack: self.! !!WonderlandMorph methodsFor: 'morph depth' stamp: 'jsp 4/12/1999 15:45'!sendToFront	"Bring this morph to the front"	self owner addMorphFront: self.! !!WonderlandMorph methodsFor: 'primitive behaviors' stamp: 'jsp 4/12/1999 14:56'!move: aDirection distance: aDistance	"Move the morph the specified distance in the specified direction"	^ self move: aDirection distance: aDistance duration: 1.0 style: gently.! !!WonderlandMorph methodsFor: 'primitive behaviors' stamp: 'jsp 4/12/1999 14:56'!move: aDirection distance: aDistance duration: aDuration	"Move the morph the specified distance in the specified direction"	^ self move: aDirection distance: aDistance duration: aDuration style: gently.! !!WonderlandMorph methodsFor: 'primitive behaviors' stamp: 'jsp 4/12/1999 15:01'!move: aDirection distance: aDistance duration: aDuration style: aStyle	"Move the actor the specified distance in the specified direction, taking the specified duration and using the specified animation style."	| anim aPoint tmpPoint |	"Check our arguments to make sure they're valid"	[ WonderlandVerifier VerifyDirection: aDirection ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser: 'Squeak could not determine the direction to move the morph because ', msg.			^ nil ].	[ WonderlandVerifier VerifyNumber: aDistance ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser: 'Squeak could not determine the distance to move the morph because ', msg.			^ nil ].	[ WonderlandVerifier VerifyDuration: aDuration ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser:				'Squeak could not determine the duration to use for moving the morph because ', msg.			^ nil ].	[ WonderlandVerifier VerifyStyle: aStyle ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser: 'Squeak could not determine the style to use to move the morph because ', msg.			^ nil ].	"Our parameters check out, so build the animation"	anim _ RelativeAnimation new.	tmpPoint _ 0@0.	(aDirection = left) ifTrue: [ aPoint _ (aDistance negated)@0 ]		ifFalse: [ (aDirection = right) ifTrue: [ aPoint _ aDistance@0 ]					ifFalse: [ (aDirection = up) ifTrue: [ aPoint _ 0@(aDistance negated) ]								ifFalse: [ (aDirection = down) ifTrue: [ aPoint _ 0@aDistance ]										ifFalse: [ myWonderland reportErrorToUser: 'Squeak does not know how to move the morph in that direction.'.												^ nil ].										].							].				].	anim object: self			update: [:tPos | self position: ((self position) + ((tPos rounded) - tmpPoint)).							tmpPoint _ tPos rounded]			getStartState: [tmpPoint _ 0@0. Interpolateable value: 0@0. ]			getEndState: [ aPoint ]			getReverseState: [ aPoint negated ]			style: aStyle			duration: aDuration			undoable: true			inWonderland: myWonderland.	^ anim.! !!WonderlandMorph methodsFor: 'primitive behaviors' stamp: 'jsp 4/12/1999 14:57'!moveTo: aPoint	"Moves the object to the specified position in its parent's coordinate system using the specified style over the specified duration."	^ self moveTo: aPoint duration: 1.0 style: gently.! !!WonderlandMorph methodsFor: 'primitive behaviors' stamp: 'jsp 4/12/1999 14:57'!moveTo: aPoint duration: aDuration	"Moves the object to the specified position in its parent's coordinate system using the specified style over the specified duration."	^ self moveTo: aPoint duration: aDuration style: gently.! !!WonderlandMorph methodsFor: 'primitive behaviors' stamp: 'jsp 4/12/1999 14:58'!moveTo: aPoint duration: aDuration style: aStyle	"Moves the object to the specified position in its parent's coordinate system using the specified style over the specified duration."	| anim |	"Check our arguments to make sure they're valid"	[ WonderlandVerifier VerifyPoint: aPoint ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser: 'Squeak could not determine where to move the morph to because ', msg.			^ nil ].	[ WonderlandVerifier VerifyDuration: aDuration ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser:				'Squeak could not determine the duration to use for moving the morph because ', msg.			^ nil ].	[ WonderlandVerifier VerifyStyle: aStyle ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser: 'Squeak could not determine the style to use to move the morph because ', msg.			^ nil ].	"Our parameters check out, so build the animation"	anim _ AbsoluteAnimation new.	anim object: self			update: [:tPos | self position: (tPos rounded)]			getStartState: [self position]			getEndState: [ aPoint ]			style: aStyle			duration: aDuration			undoable: true			inWonderland: myWonderland.	^ anim.! !!WonderlandMorph methodsFor: 'primitive behaviors' stamp: 'jsp 4/12/1999 14:58'!moveTo: aPoint speed: aSpeed	"Moves the object to the specified position in its parent's coordinate system at the specified speed."	| anim |	"Check our arguments to make sure they're valid"	[ WonderlandVerifier VerifyPoint: aPoint ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser: 'Squeak could not determine where to move the morph to because ', msg.			^ nil ].	[ WonderlandVerifier VerifyPositiveNumber: aSpeed]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser:				'Squeak could not determine the speed to move the morph because ', msg.			^ nil ].	"Our parameters check out, so build the animation"	anim _ AbsoluteAnimation new.	anim object: self			update: [:tPos | self position: (tPos rounded)]			getStartState: [self position]			getEndState: [ aPoint ]			style: abruptly			duration: ((self position) dist: aPoint) / aSpeed			undoable: true			inWonderland: myWonderland.	^ anim.! !!WonderlandControls commentStamp: '<historical>' prior: 0!This class implements the control panel for Wonderlands, including the Undo button and Quit button.!!WonderlandControls methodsFor: 'initialization' stamp: 'jsp 4/12/1999 17:02'!initializeWith: aWonderland	"Initialize the instance"	| exitButton resetButton undoButton |	myWonderland _ aWonderland.	myScheduler _ myWonderland getScheduler.	"Use a white background"	color _ (Color r: 0.784 g: 0.784 b: 0.784).	"Now add our buttons"	undoButton _ SimpleButtonMorph new.	undoButton initialize.	undoButton label: 'Undo'.	undoButton color: (Color green).	undoButton target: myWonderland.	undoButton actionSelector: #undo.	self addMorph: undoButton.	resetButton _ SimpleButtonMorph new.	resetButton initialize.	resetButton label: 'Reset'.	resetButton color: (Color yellow).	resetButton target: myWonderland.	resetButton actionSelector: #reset.	self addMorph: resetButton.	exitButton _ SimpleButtonMorph new.	exitButton initialize.	exitButton label: 'Quit'.	exitButton color: (Color red).	exitButton target: self.	exitButton actionSelector: #quitWonderland.	self addMorph: exitButton.	undoButton bounds: (5@10 corner: 45@40).	resetButton bounds: (50@10 corner: 90@40).	exitButton bounds: (95@10 corner: 135@40).	"Size and position the window"	self extent: 140@50.! !!WonderlandControls methodsFor: 'actions' stamp: 'jsp 4/12/1999 16:46'!quitWonderland	"Destroy the wonderland"	myWonderland release.! !!WonderlandEditor methodsFor: 'initialization' stamp: 'jsp 4/12/1999 17:32'!initializeWith: aWonderland	"Initialize the editor with the Wonderland."	| hAlign vAlign |	myWonderland _ aWonderland.	hAlign _ AlignmentMorph new.	hAlign color: (Color gray).	hAlign extent: 650@375.	hAlign hResizing: #rigid.	self addMorph: hAlign.	myTabs _ (WonderlandEditorTabs newFor: aWonderland).	hAlign addMorph: myTabs.	vAlign _ AlignmentMorph new.	vAlign color: (Color r: 0.784 g: 0.784 b: 0.784).	vAlign orientation: #vertical.	hAlign addMorph: vAlign.	myActorBrowser _ (WonderlandActorBrowser newFor: myWonderland).	vAlign addMorph: (myActorBrowser getMorph).	myControls _ WonderlandControls newFor: aWonderland.	vAlign addMorph: myControls.	self position: 200@20.	self color: (Color r: 0.784 g: 0.784 b: 0.784).	self openInWorld.! !!WonderlandEditor methodsFor: 'accessing' stamp: 'jsp 4/12/1999 16:23'!resetNamespace	"Reset the namespace used by the script editor"	myTabs resetNamespace.! !!WonderlandScriptEditor methodsFor: 'initialize-release' stamp: 'jsp 4/12/1999 16:59'!initialize	"Create a modified workspace as our script editor"	super initialize.	myTextEditor _ (PluggableTextMorph on: self text: #contents accept: #acceptContents:			readSelection: nil menu: #codePaneMenu:shifted:).	myTextEditor name: 'Script'.	myTextEditor scrollBarOnLeft: false.	myTextEditor extent: 500@350.	myTextEditor color: (Color r: 0.815 g: 0.972 b: 0.878).! !Wonderland removeSelector: #getControlPanel!WonderlandActor removeSelector: #getAllChildren!WonderlandActorBrowser removeSelector: #pass!WonderlandCameraMorph removeSelector: #move:distance:duration:style:!WonderlandCameraMorph removeSelector: #moveTo:duration:style:!WonderlandCameraMorph removeSelector: #moveTo:!WonderlandCameraMorph removeSelector: #move:distance:!WonderlandCameraMorph removeSelector: #move:distance:duration:!WonderlandCameraMorph removeSelector: #moveTo:speed:!WonderlandCameraMorph removeSelector: #moveTo:duration:!WonderlandEditor removeSelector: #addPanel:!