'From Squeak 2.4c of May 10, 1999 on 6 July 1999 at 10:18:33 am'!"Change Set:		initPrefValues-swDate:			1 July 1999Author:			Scott WallaceAllows specification of initial values for preferences to be distributed across multiple methods.  Each method in category 'initial values' of Preferences class is expected to return a collection of pairs of the form:  <prefSymbol>   <initialValue>To make sure added preferences are propertly initialized in the dictionary, call 	Preferences initializeAddedPreferences... this will set initial values for any preference not yet defined in the dictionary, while leaving any existing values unchanged.  And it will also compile preference-accessor methods for all preferences mentioned in the initial-values category which lack them.Renames the pref formerly known as 'objectConversionMethodsAtFileOut' to be simply 'conversionMethodsAtFileOut' because the former was too long to fit in the standard prefs window."!!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 7/1/1999 23:37'!checkForConversionMethods	"See if any conversion methods are needed"	| needConversion oldList newList tell choice list need oldVer newVer sel smart restore |	"Check preference"	Preferences conversionMethodsAtFileOut ifFalse: [^ self].	structures ifNil: [^ self].	needConversion _ false.	list _ OrderedCollection new.	smart _ SmartRefStream on: (RWBinaryOrTextStream on: '12345').	self changedClasses do: [:class |		need _ (self atClass: class includes: #new) not.		need ifTrue: [			"Also consider renamed classes."			(self atClass: class includes: #rename) ifTrue: [				needConversion _ true.  list add: class].			need _ (self atClass: class includes: #change)].		need ifTrue: [oldList _ structures at: class name 								ifAbsent: [need _ false.  #()]].		need ifTrue: [			newList _ (Array with: class classVersion), (class allInstVarNames).			need _ (oldList ~= newList)].		need ifTrue: [			oldVer _ smart versionSymbol: oldList.			newVer _ smart versionSymbol: newList.			sel _ 'convert',oldVer,':',newVer, ':'.				(Symbol hasInterned: sel ifTrue: [:sym | ]) ifFalse: [				need _ false.				needConversion _ true.				list add: class]].		need ifTrue: [sel _ sel asSymbol.			(#(add change) includes: (self atSelector: sel class: class)) ifFalse: [				needConversion _ true.				list add: class]].		].	needConversion ifTrue: ["Ask user if want to do this"		tell _ 'If there might be instances of ', list asArray printString,		'\in a file full of objects on someone''s disk, please fill in conversion methods.\'			withCRs,		'After you edit the methods, you''ll have to fileOut again.\' withCRs,		'The preference conversionMethodsAtFileOut controls this feature.'.		choice _ (PopUpMenu labels: 'Write a conversion method by editing a prototypeThese classes are not used in any object file.  fileOut my changes now.I''m too busy.  fileOut my changes now.Don''t ever ask again.  fileOut my changes now.') startUpWithCaption: tell. 		choice = 4 ifTrue: [Preferences disable: #conversionMethodsAtFileOut].		choice = 2 ifTrue: [				list do: [:cls | cls withAllSubclassesDo: [:ccc | 						structures removeKey: ccc name ifAbsent: []]]].		choice ~= 1 ifTrue: [^ self]].	list isEmpty ifTrue: [^ self].	smart structures: structures.	"we will test all classes in structures."	smart superclasses: superclasses.	(restore _ Smalltalk changes) == self ifFalse: [		Smalltalk newChanges: self].	[smart verifyStructure = 'conversion method needed'] whileTrue.		"new method is added to changeSet.  Then filed out with the rest."	restore == self ifFalse: [Smalltalk newChanges: restore].	"tell 'em to fileout again after modifying methods."	self inform: 'Remember to fileOut again after modifying these methods.'.! !!ClassDescription methodsFor: 'compiling' stamp: 'sw 7/1/1999 23:07'!compileProgrammatically: code classified: cat 	| oldInitials |	oldInitials _ Utilities authorInitialsPerSe.	Utilities setAuthorInitials: 'programmatic'.	self compile: code classified: cat.	Utilities setAuthorInitials: oldInitials.! !!Preferences class methodsFor: 'initialization' stamp: 'sw 7/1/1999 22:41'!allPreferenceInitializationPairs	"Preferences allPreferenceInitializationPairs"	| aList additions |	aList _ OrderedCollection new.	(self class organization listAtCategoryNamed: 'initial values' asSymbol) do:		[:aSelector | aSelector numArgs = 0 ifTrue:			[additions _ self perform: aSelector.			(additions isKindOf: Collection) ifFalse: [self error: 'method in "initial values" categories must return collections'].			aList addAll: additions]].	^ aList			! !!Preferences class methodsFor: 'initialization' stamp: 'sw 7/1/1999 22:42'!chooseInitialSettings	"Restore the default choices for Preferences."	"Preferences chooseInitialSettings"	self allPreferenceInitializationPairs do:		[:aPair |			aPair last == #true				ifTrue:					[self enable: aPair first]				ifFalse:					[self disable: aPair first]]! !!Preferences class methodsFor: 'initialization' stamp: 'sw 7/1/1999 23:17'!compileAccessMethodFor: prefSymbol	self class compileProgrammatically: (prefSymbol, '	^ self valueOfFlag: #', prefSymbol) classified: 'standard preferences'! !!Preferences class methodsFor: 'initialization' stamp: 'sw 7/1/1999 23:27'!initializeAddedPreferences	"Initialize any preference not yet known to the prefs dictionary as per descriptions in the 'initial values' category, but don't change the setting of any existing preference.	Also, compile accessor methods for retrieving any preference that lacks one"	"Preferences initializeAddedPreferences"	| sym |	self allPreferenceInitializationPairs do:		[:aPair |			(self class selectors includes: (sym _ aPair first))				ifFalse:					[self compileAccessMethodFor: sym].			(FlagDictionary includesKey: sym) ifFalse:				[aPair last == #true					ifTrue:						[self enable: sym]					ifFalse:						[self disable: sym]]]! !!Preferences class methodsFor: 'personalization' stamp: 'sw 7/1/1999 23:07'!compileHardCodedPref: prefName enable: aBoolean	"Compile a method that returns a simple true or false (depending on the value of aBoolean) when Preferences is sent prefName as a message"	self class compileProgrammatically: (prefName asString, '	"compiled programatically -- return hard-coded preference value"	^ ', aBoolean storeString) classified: 'hard-coded prefs'.	"Preferences compileHardCodedPref: #testing enable: false"! !!Preferences class methodsFor: 'initial values' stamp: 'sw 7/1/1999 22:37'!initialValuesA	"Another lot of initial values for prefs.  Simply placing methods of this sort here will assure that the initial values provided are ascribed to the preference when prefs are initialized"	^#(	(conversionMethodsAtFileOut			false)		(menuColorFromWorld				false)		(viewersInFlaps						true)		(oneViewerFlapAtATime				true))! !!Preferences class methodsFor: 'initial values' stamp: 'sw 7/1/1999 23:54'!standardInitialValues	^#(	(allowLabelDragging				false)		(allowSoundQuickStart				false)		(allowSysWindowEmbedding			false)		(automaticViewerPlacement			true)		(balloonHelpEnabled					true)		(browseWithPrettyPrint				false)		(cmdDotEnabled						true)		(confirmFirstUseOfStyle				true)		(disableSounds						false)		(fastDragWindowForMorphic			false)		(fenceEnabled						true)		(ignoreStyleIfOnlyBold				true)		(inboardScrollbars					false)		(logDebuggerStackToFile				true)		(mouseOverHalosEnabled				false)		(noviceMode							false)		(printAlternateSyntax				false)		(reverseWindowStagger				true)		(showDebugHaloHandle				true)		(showDiffsInChangeList				true)		(showTimeStampsInMenuTitles		false)		(showProjectZoom					false)		(suppressCheckForSlips				false)		(suppressUpdateServerPrompt		false)		(thoroughSenders					true)		(unlimitedPaintArea					false)		(updateSavesFile						false)		(useAnnotationPanes				false)		(useGlobalFlaps						true)		(warnIfNoChangesFile				true)		(warnIfNoSourcesFile				true))! !!Preferences class methodsFor: 'help' stamp: 'sw 7/1/1999 23:56'!initHelpMsgsB	"Automatically called whenever you call   	Preferences initializeHelpMessages		or	Preferences callHelpMessageInitializersby virtue of its being in the 'help' category of Preferences class"	#((oneViewerFlapAtATime			'If true, opening up one viewer flap will close all other such flaps.')		(viewersInFlaps			'If true, viewers are projected into flaps along the right edge of the screen')			) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!Preferences class methodsFor: 'help' stamp: 'sw 7/1/1999 23:58'!initHelpMsgsC	"Automatically called whenever you call   	Preferences initializeHelpMessages		or	Preferences callHelpMessageInitializersby virtue of its being in the 'help' category of Preferences class"	#(	(allowMVCprojects			'If true, the open... menu will offer you the chance to open an mvc project.')		(autoAccessors			'If true, an attempt to call a message which is not understood by an object but whose selector is the same as an inst var of the object will result in automatic compilation of an accessor method for that object''s class')		(compressFlashImages			'If true, flash images will automatically be reduced to 8-bit color depth upon being read')		(conversionMethodsAtFileOut			'Governs whether at fileout time you should be prompted to define conversion methods where deemed appropriate.')		(extractFlashInHighQuality			'Whether flash graphics should be extracted in high quality.')		(extractFlashInHighestQuality			'Whether flash graphics should be extracted in highest possible quality.')			) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!Preferences class methodsFor: 'standard preferences' stamp: 'programmatic 7/1/1999 23:28'!conversionMethodsAtFileOut	^ self valueOfFlag: #conversionMethodsAtFileOut! !!Preferences class methodsFor: 'standard preferences' stamp: 'sw 7/1/1999 22:32'!menuColorFromWorld	^ self valueOfFlag: #menuColorFromWorld! !!Preferences class methodsFor: 'standard preferences' stamp: 'programmatic 7/1/1999 23:28'!mouseOverHaloseEnabled	^ self valueOfFlag: #mouseOverHaloseEnabled! !!Preferences class methodsFor: 'standard preferences' stamp: 'sw 7/1/1999 22:31'!oneViewerFlapAtATime	^ self valueOfFlag: #oneViewerFlapAtATime! !!Preferences class methodsFor: 'standard preferences' stamp: 'sw 7/1/1999 22:32'!roundedWindowCorners	^ self valueOfFlag: #roundedWindowCorners! !!Preferences class methodsFor: 'standard preferences' stamp: 'programmatic 7/1/1999 23:28'!viewersInFlaps	^ self valueOfFlag: #viewersInFlaps! !"Postscript:"Preferences deletePreference: #objectConversionMethodsAtFileOut.Preferences initializeAddedPreferences.Preferences callHelpMessageInitializers.!