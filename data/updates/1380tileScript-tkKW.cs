'From Squeak 2.4c of May 10, 1999 on 6 August 1999 at 5:22:16 pm'!!VariableNode methodsFor: 'testing' stamp: 'tk 8/2/1999 18:40'!isSelfPseudoVariable	"Answer if this ParseNode represents the 'self' pseudo-variable."	^ key = 'self'! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'tk 8/4/1999 10:56'!makeGetter: evt from: aMorph forPart: args	| m selfTile selector aType firstArg |	(aType _ args last) == #unknown ifTrue: [^ self beep].	(#(colorSees isOverColor) includes: (firstArg _ args first))		ifFalse:			[m _ PhraseTileMorph new setSlotRefOperator: args first asSymbol type: aType]		ifTrue:			[(firstArg == #colorSees) ifTrue: [m _ self colorSeesPhrase].			(firstArg == #isOverColor) ifTrue: [m _ self seesColorPhrase]].	selfTile _ self tileForSelf bePossessive.	selfTile position: m firstSubmorph position.	m firstSubmorph addMorph: selfTile.	selector _ m submorphs at: 2.	(aType == #number) ifTrue:		[selector addSuffixArrow].	selector updateLiteralLabel.	m enforceTileColorPolicy.	owner ifNotNil: [self primaryHand attachMorph: m]		ifNil: [^ m].! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'tk 8/3/1999 15:47'!makeSetter: evt from: aMorph forPart: args	| argType m argTile selfTile argValue |	argType _ args last.	m _ PhraseTileMorph new setAssignmentRoot: args first asSymbol		type: #command		rcvrType: #player		argType: argType.	argValue _ self scriptedPlayer perform: (ScriptingSystem getterSelectorFor: args first asSymbol).	(argValue isKindOf: Player)		ifTrue:			[argTile _ argValue tileReferringToSelf]		ifFalse:			[argTile _ scriptedPlayer tileForArgType: argType inViewer: self.			argTile setLiteral: argValue; updateLiteralLabel.].	argTile position: m lastSubmorph position.	m lastSubmorph addMorph: argTile.	selfTile _ self tileForSelf bePossessive.	selfTile position: m firstSubmorph position.	m firstSubmorph addMorph: selfTile.	m enforceTileColorPolicy.	owner ifNotNil: [self primaryHand attachMorph: m]		ifNil: [^ m].! !!CompoundTileMorph methodsFor: 'miscellaneous' stamp: 'tk 8/4/1999 23:03'!tilesFrom: msgNode in: aScriptor	"Construct an if-then from a parseTree."	| sel |	testPart playerScripted: aScriptor playerScripted.	yesPart playerScripted: aScriptor playerScripted.	noPart playerScripted: aScriptor playerScripted.	testPart tilesFrom: msgNode receiver receiver. 	"strip off (test ~~ false)"	sel _ msgNode selector key.	sel == #ifTrue:ifFalse: ifTrue: [		yesPart tilesFrom: msgNode arguments first.		noPart tilesFrom: msgNode arguments second].	sel == #ifTrue: ifTrue: [		yesPart tilesFrom: msgNode arguments first].	sel == #ifFalse: ifTrue: [		noPart tilesFrom: msgNode arguments first].! !!ParseNode methodsFor: 'testing' stamp: 'tk 8/2/1999 18:39'!isSelfPseudoVariable		"Overridden in VariableNode."	^false! !!BlockNode methodsFor: 'accessing' stamp: 'tk 8/4/1999 22:53'!block	^ self! !!LiteralNode methodsFor: 'evaluation' stamp: 'tk 8/4/1999 17:35'!eval	"When everything in me is a constant, I can produce a value.  This is only used by the Scripting system (TilePadMorph tilesFrom:in:)"	^ key! !!MessageNode methodsFor: 'private' stamp: 'tk 8/2/1999 18:40'!pvtCheckForPvtSelector: encoder	"If the code being compiled is trying to send a private message (e.g. 'pvtCheckForPvtSelector:') to anyone other than self, then complain to encoder."	selector isPvtSelector ifTrue:		[receiver isSelfPseudoVariable ifFalse:			[encoder notify: 'Private messages may only be sent to self']].! !!MessageNode methodsFor: 'equation translation' stamp: 'tk 8/4/1999 17:33'!eval	"When everything in me is a constant, I can produce a value.  This is only used by the Scripting system (TilePadMorph tilesFrom:in:)"	| rec args |	(receiver isKindOf: VariableNode) ifFalse: [^ #illegal].	rec _ receiver key value.	args _ arguments collect: [:each | each eval].	^ rec perform: selector key withArguments: args! !!MethodNode methodsFor: 'initialize-release' stamp: 'tk 8/3/1999 12:47'!block	^ block! !!PhraseTileMorph reorganize!('initialization' initialize setAssignmentRoot:type:rcvrType:argType: setOperator:type:rcvrType: setOperator:type:rcvrType:argType: setSlotRefOperator:type:)('mouse' acceptDroppingMorph:event: canAccept: catchDivideByZero:indent: enclosingEditor handlesDragOver: handlesMouseDown: handlesMouseOver: handlesMouseOverDragging: mouseDown: mouseEnter: mouseEnterDragging: mouseLeaveDragging: prepareToUndoDropOf: rootForGrabOf: wantsDroppedMorph:event:)('code generation' codeString storeCodeOn:indent:)('miscellaneous' actualObject associatedPlayer booleanOperator brightenTiles bringUpToDate isCandidateForAutomaticViewing resultType tileRows topEditor try unbrightenTiles userScriptSelector userScriptSelector:)('queries' isBoolean isCommand isPossessive isTileLike isTileScriptingElement)('tiles from method' tilesFrom:in:)('all' rowOfRightTypeFor:forActor:)!!PhraseTileMorph methodsFor: 'miscellaneous' stamp: 'tk 8/6/1999 13:59'!associatedPlayer	"Answer the player that's the object of my attention"	| pp |	pp _ self firstSubmorph.	[pp isKindOf: PhraseTileMorph] whileTrue: [pp _ pp firstSubmorph].	^ pp firstSubmorph actualObject! !!PhraseTileMorph methodsFor: 'tiles from method' stamp: 'tk 8/6/1999 15:49'!tilesFrom: msgNode in: aScriptor	"Construct a single line of tiles from a MessageNode of a parse tree.  For a single message send."	| tile pm sel instVar suff argNode selType |	sel _ msgNode selector key.	(sel beginsWith: 'assign') ifTrue: [	"assignment"		instVar _ msgNode arguments first literalValue.		instVar _ (instVar copyFrom: 4 to: instVar size) withFirstCharacterDownshifted.		pm _ (CategoryViewer new) scriptedPlayer: aScriptor playerScripted; 			makeSetter: nil from: aScriptor playerScripted costume 			forPart: (Array with: instVar with: #number).	"makes a new Phrase"		suff _ (sel findTokens: ':') first.		suff _ (suff copyFrom: 7 to: suff size-6), ':'.		": Incr: Decr: Mult:"		pm submorphs second setAssignmentSuffix: suff.		pm submorphs third delete.		tile _ TilePadMorph new tilesFrom: msgNode arguments last in: aScriptor.		pm addMorphBack: tile.		^ pm].	(sel beginsWith: 'get') ifTrue: [	"getter"		instVar _ (sel copyFrom: 4 to: sel size) withFirstCharacterDownshifted.		pm _ (CategoryViewer new) scriptedPlayer: aScriptor playerScripted; 			makeGetter: nil from: aScriptor playerScripted costume 			forPart: (Array with: instVar with: #number).	"makes a new Phrase"		^ pm].	(#(ifTrue:ifFalse: ifFalse: ifTrue:) includes: sel) ifTrue: [		^ CompoundTileMorph new tilesFrom: msgNode in: aScriptor].	self addMorphBack: (TilePadMorph new tilesFrom: msgNode receiver in: aScriptor).	self addMorphBack: (TileMorph new selectorTile: msgNode in: aScriptor).	"selector"	(aScriptor playerScripted elementTypeFor: sel) == #systemScript ifTrue: [		selType _ (aScriptor playerScripted phraseSpecFor: 			(Array with: #command with: sel)) last].	msgNode arguments size > 0 ifTrue: [		argNode _ msgNode arguments last.		tile _ TileMorph new tilesFrom: argNode type: selType in: aScriptor.		self addMorphBack: tile].! !!Player methodsFor: 'fileIn/Out' stamp: 'tk 8/6/1999 17:18'!releaseCachedState	"release all non-showing scriptors"	self class userScriptsDo: [:userScript | userScript releaseCachedState].! !!Player methodsFor: 'fileIn/Out' stamp: 'tk 8/6/1999 17:14'!storeDataOn: aDataStream	"Discard all non-showing script editors"	self releaseCachedState.	super storeDataOn: aDataStream.! !!ScriptEditorMorph methodsFor: 'tiles from method' stamp: 'tk 8/3/1999 12:45'!fromExistingMethod: aSelector forPlayer: aPlayer 	"Create tiles for this method.  "	| parseTree |	self initialize.	playerScripted _ aPlayer.	self setMorph: aPlayer costume scriptName: aSelector.	parseTree _ (Decompiler new) decompile: aSelector		in: aPlayer class 		method: (aPlayer class compiledMethodAt: aSelector).	self tilesFrom: parseTree.	self install.! !!ScriptEditorMorph methodsFor: 'tiles from method' stamp: 'tk 8/6/1999 14:13'!tilesFrom: parseTree	"Fill myself with tiles to corresponding to an existing method.  parseTree is the MethodNode that is the top of a parse tree.  Or a BlockNode or MessageNode for ifTrue:ifFalse:."	"ignore the method's arguments for now"	| lineOfTiles list ignore ind | 	list _ (parseTree isKindOf: MessageNode)		ifFalse: [parseTree block statements]	"normal MethodNode or BlockNode"		ifTrue: [Array with: parseTree].	ind _ 0.	list do: [:msgNode |		ignore _ msgNode isKindOf: ReturnNode.	"^ self  Will have to allow this someday"		(msgNode isKindOf: VariableNode) ifTrue: [			msgNode key = 'nil' ifTrue: [ignore _ true]]. 		ignore ifFalse: ["for now ignore the (^ self) statement"			lineOfTiles _ Array with: (PhraseTileMorph new tilesFrom: msgNode in: self).			self insertTileRow: lineOfTiles after: (ind _ ind + 1)			]].! !!BooleanScriptEditor methodsFor: 'as yet unclassified' stamp: 'tk 8/6/1999 14:31'!tilesFrom: parseTree	"Fill myself with tiles to corresponding to an existing boolean expression.  parseTree is the MessageNode that is the top of a parse tree."	| lineOfTiles msgNode | 	msgNode _ parseTree.	lineOfTiles _ Array with: (PhraseTileMorph new tilesFrom: msgNode in: self).	self insertTileRow: lineOfTiles after: 0.	"no row of control buttons"! !!TileMorph methodsFor: 'arrows' stamp: 'tk 8/4/1999 07:29'!addArrows	downArrow _ ImageMorph new image: DownPicture.	upArrow _ ImageMorph new image: UpPicture.	upArrow position: bounds topLeft + (2@2).	downArrow align: downArrow bottomLeft				with: bounds topLeft + (0 @ TileMorph defaultH) + (2@-2).	self addMorph: downArrow.	self addMorph: upArrow.! !!TileMorph methodsFor: 'tiles from method' stamp: 'tk 8/6/1999 16:00'!selectorTile: msgNode in: aScriptor	| sel selTile |	"Make a selector (operator) tile"	sel _ msgNode selector key.	sel == #color:sees: ifTrue: [		selTile _ (Viewer new) colorSeesPhrase submorphs second.	"ColorSeer tile"		selTile colorSwatchColor: msgNode arguments first eval.		^ selTile].	^ self setOperator: sel! !!TileMorph methodsFor: 'tiles from method' stamp: 'tk 8/6/1999 15:32'!tilesFrom: argNode type: selType in: aScriptor	| argType |	"for an argument or receiver"	argType _ selType.	(argNode isKindOf: LiteralNode) 		ifTrue: [argType ifNil: [argType _ argNode literalValue basicType].			^ (aScriptor playerScripted tileForArgType: argType)					setLiteral: argNode literalValue]		ifFalse: [^ TilePadMorph new tilesFrom: argNode in: aScriptor].! !!TilePadMorph methodsFor: 'miscellaneous' stamp: 'tk 8/4/1999 18:02'!isColorConstant: aParseNode	"Is this a Color constant, of the form (MessageNode (VariableNode Color->Color) (SelectorNode #r:g:b:) (LiteralNode LiteralNode LiteralNode))"	| rec |	((rec _ aParseNode receiver) isKindOf: VariableNode) ifFalse: [^ false].	rec key class == Association ifFalse: [^ false].	rec key value == Color ifFalse: [^ false].	aParseNode selector key == #r:g:b: ifFalse: [^ false].	aParseNode arguments  size = 3 ifFalse: [^ false].	^ true! !!TilePadMorph methodsFor: 'miscellaneous' stamp: 'tk 8/3/1999 13:25'!isOutsideRef: aParseNode	"Is this a reference to an outside Player, of the form (self class refUnscriptedPlayer1)?(MessageNode (VariableNode 'self') (SelectorNode 'class')) (SelectorNode 'refUnscriptedPlayer1')"	| rec |	((rec _ aParseNode receiver) isKindOf: MessageNode) ifFalse: [^ false].	rec receiver isSelfPseudoVariable ifFalse: [^ false].	rec selector key == #class ifFalse: [^ false].	aParseNode selector key numArgs = 0 ifFalse: [^ false].	(aParseNode selector key beginsWith: 'ref') ifFalse: [^ false].	^ true! !!TilePadMorph methodsFor: 'miscellaneous' stamp: 'tk 8/4/1999 18:57'!tilesFrom: aParseNode in: aScriptor	"Make a Pad and a Tile for a variable, self, a number, or other literal"	| outsideObj tile |	(aParseNode isKindOf: LiteralNode) ifTrue: [		type _ #literal.		^ self addMorph: (aParseNode literalValue newTileMorphRepresentative)].	(aParseNode isKindOf: VariableNode) ifTrue: [		aParseNode isSelfPseudoVariable ifTrue: [			tile _ (CategoryViewer new) tileForPlayer: aScriptor playerScripted.			type _ tile type.			^ self addMorph: tile].		(aParseNode key = 'true') | (aParseNode key = 'false') ifTrue: [			type _ #literal.			^ self addMorph: (aParseNode key first == $t) newTileMorphRepresentative]].	(aParseNode isKindOf: MessageNode) ifTrue: [		(self isColorConstant: aParseNode) ifTrue: [			type _ #color.			^ self addMorph: (aParseNode eval newTileMorphRepresentative)]].			(aParseNode isKindOf: MessageNode) ifTrue: [		(self isOutsideRef: aParseNode) ifTrue: [			outsideObj _ aScriptor playerScripted class perform: aParseNode selector key.			tile _ (CategoryViewer new) tileForPlayer: outsideObj.			type _ tile type.			^ self addMorph: tile]].	(aParseNode isKindOf: MessageNode) ifTrue: [		^ PhraseTileMorph new tilesFrom: aParseNode in: aScriptor].! !!UserScript methodsFor: 'script editor' stamp: 'tk 8/6/1999 16:57'!instantiatedScriptEditor	"return the current script editor, creating it if necessary"	self isAnonymous ifTrue:		[currentScriptEditor _ ScriptEditorMorph new playerScripted: player].	self isTextuallyCoded ifTrue: [			"path thought not to be reached now"			^ player costume pasteUpMorph scriptorForTextualScript: selector ofPlayer: player].	currentScriptEditor ifNil:		[currentScriptEditor _ (player class includesSelector: selector) 			ifTrue: [ScriptEditorMorph new 				fromExistingMethod: selector 				forPlayer: player]			ifFalse: [ScriptEditorMorph new				setMorph: player costume				scriptName: selector].		status == #ticking ifTrue: [player costume arrangeToStartStepping]].		^ currentScriptEditor!]style[(24 198 36 156 17 290)f1b,f1,f1cred;,f1,f1b,f1! !!UserScript methodsFor: 'script editor' stamp: 'tk 8/6/1999 17:21'!releaseCachedState	"release all non-showing scriptors.  What do we do about versions????"	currentScriptEditor ifNil: [^ self].	true ifTrue: [^ self].	"<<< to test the reconstruction of scripts, change to false"	currentScriptEditor world ifNil: ["not showing"		currentScriptEditor _ nil].! !ParseNode removeSelector: #isSelfPsuedoVariable!VariableNode removeSelector: #isSelfPsuedoVariable!