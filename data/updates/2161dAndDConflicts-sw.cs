'From Squeak2.8alpha of 13 January 2000 [latest update: #2160] on 17 May 2000 at 12:14:06 pm'!"Change Set:		dAndDConflicts-swDate:			17 May 2000Author:			Scott WallaceResolves conflicts between update 2157 on the one hand and earlier updates 1843 and 2082 on the other.While resolving conflicts involving #invokeBookMenu, also takes the opportunity to improve the menu layout there."!!BookMorph methodsFor: 'menu' stamp: 'sw 5/17/2000 12:00'!invokeBookMenu	"Invoke the book's control panel menu."	| aMenu hand controlsShowing |	aMenu _ MenuMorph new defaultTarget: self.	aMenu add: 'find...' action: #textSearch.	aMenu add: 'go to page...' action: #goToPage.	aMenu addLine.	aMenu addList:		#(('sort pages'			sortPages)		('uncache page sorter'	uncachePageSorter)).	(self hasProperty: #dontWrapAtEnd)		ifTrue: [aMenu add: 'wrap after last page' selector: #setWrapPages: argument: true]		ifFalse: [aMenu add: 'stop at last page' selector: #setWrapPages: argument: false].	aMenu addList:		#(('make bookmark'		bookmarkForThisPage)		('make thumbnail'		thumbnailForThisPage)).	controlsShowing _ self hasSubmorphWithProperty: #pageControl.	controlsShowing		ifTrue:			[aMenu add: 'hide page controls' action: #hidePageControls.			aMenu add: 'fewer page controls' action: #fewerPageControls]		ifFalse:			[aMenu add: 'show page controls' action: #showPageControls].	aMenu addLine.	aMenu add: 'sound effect for all pages' action: #menuPageSoundForAll:.	aMenu add: 'sound effect this page only' action: #menuPageSoundForThisPage:.	aMenu add: 'visual effect for all pages' action: #menuPageVisualForAll:.	aMenu add: 'visual effect this page only' action: #menuPageVisualForThisPage:.	aMenu addLine.	(self primaryHand classOfPasteBuffer isKindOf: PasteUpMorph class) ifTrue:		[aMenu add: 'paste book page'   action: #pasteBookPage].	aMenu add: 'save as new-page prototype' action: #setNewPagePrototype.	newPagePrototype ifNotNil: [		aMenu add: 'clear new-page prototype' action: #clearNewPagePrototype].	aMenu add: (self dragNDropEnabled ifTrue: ['close'] ifFalse: ['open']) , ' dragNdrop'			action: #toggleDragNDrop.	aMenu add: 'make all pages this size' action: #makeUniformPageSize.	aMenu add: 'send all pages to server' action: #savePagesOnURL.	aMenu add: 'send this page to server' action: #saveOneOnURL.	aMenu add: 'reload all from server' action: #reload.	aMenu add: 'copy page url to clipboard' action: #copyUrl.	aMenu add: 'keep in one file' action: #keepTogether.	aMenu addLine.	aMenu add: 'load PPT images from slide #1' action: #loadImagesIntoBook.	aMenu add: 'background color for all pages...' action: #setPageColor.	hand _ self world primaryHand.	aMenu popUpAt: hand position forHand: hand! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 5/17/2000 12:05'!repelsMorph: aMorph event: ev	aMorph willingToBeEmbeddedUponLanding ifFalse: [^ false].	self dragNDropEnabled ifFalse: [^ true].	(self wantsDroppedMorph: aMorph event: ev) ifFalse: [^ true].	^ super repelsMorph: aMorph event: ev "consults #repelling flag"! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 5/17/2000 11:48'!wantsDroppedMorph: aMorph event: evt	aMorph willingToBeEmbeddedUponLanding ifFalse: [^ false].	self visible ifFalse: [^ false].  "will be a call to #hidden again very soon"	self dragNDropEnabled ifFalse: [^ false].	(self bounds containsPoint: (self pointFromWorld: evt cursorPoint)) ifFalse: [^ false].	^ true! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 5/17/2000 12:04'!wantsHaloFor: aSubMorph	"Answer whether the receiver wishes for a mouse-over halo to be produced for aSubMorph"	^ wantsMouseOverHalos == true and:		 [self visible and:			[isPartsBin ~~ true and:				[self dragNDropEnabled and:					[self isWorldMorph not or: [aSubMorph renderedMorph isLikelyRecipientForMouseOverHalos]]]]]	"The odd logic at the end of the above says...		*  If we're an interior playfield, then if we're set up for mouseover halos, show em.		*  If we're a World that's set up for mouseover halos, only show 'em if the putative				recipient is a SketchMorph.	This (old) logic was put in to suit a particular need in early e-toy days and seems rather strange now!!"! !!TabbedPalette methodsFor: 'user-interface' stamp: 'sw 5/17/2000 11:52'!repelsMorph: aMorph event: ev	true ifTrue: [^ super repelsMorph: aMorph event: ev].	self visible ifFalse: [^ false].	^self dragNDropEnabled not! !