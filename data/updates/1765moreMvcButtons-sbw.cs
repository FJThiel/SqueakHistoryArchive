'From Squeak2.7alpha of 28 December 1999 [latest update: #1726] on 30 December 1999 at 5:20:37 pm'!"Change Set:		moreMvcButtons-sbwDate:			30 December 1999Author:			Stephan B. WesselsAdds optional buttons to the following mvc tools : * Versions browser * File List * ChangeList browser * Message-list browser"!!ChangeList methodsFor: 'initialization-release' stamp: 'sbw 12/30/1999 10:05'!buttonRowForChangeList	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightBlue; borderWidth: 1; borderColor: Color blue darker.	aRow addTransparentSpacerOfSize: (5@0).	self changeListButtonPairs do:		[:pair |			aButton _ aButton fullCopy.			aButton actionSelector: pair second.			aButton label: pair first.			aRow addMorphBack: aButton.			aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.		^ aRow! !!ChangeList methodsFor: 'initialization-release' stamp: 'sbw 12/30/1999 14:37'!buttonRowForChangeListView	| view bHeight vWidth offset pairs previousView button wid buttonCount |	view _ View new model: self.	bHeight _ self optionalButtonHeight.	vWidth _ 180.	view window: (0@0 extent: vWidth@bHeight).	offset _ 0.	pairs _ self changeListButtonPairs.	buttonCount _ pairs size + 1.	previousView _ nil.	wid _ vWidth // buttonCount.	pairs do: [:pair |		button _ PluggableButtonView on: self getState: nil action: pair second.		button			label: pair first asParagraph;			insideColor: Color lightBlue;			borderWidthLeft: 0 right: 1 top: 0 bottom: 0;			window: (offset@0 extent: wid@bHeight).		offset _ offset + wid.		pair last = pairs first last			ifTrue: [view addSubView: button]			ifFalse: [view addSubView: button toRightOf: previousView].		previousView _ button].	button _ PluggableButtonView on: self getState: #showDiffs action: #toggleDiff.	button		label: 'toggle diff' asParagraph;		insideColor: Color lightBlue;		window: (offset@0 extent: (vWidth - offset)@bHeight).	view addSubView: button toRightOf: previousView.	^ view! !!ChangeList methodsFor: 'initialization-release' stamp: 'sbw 12/30/1999 10:04'!changeListButtonPairs	^#(		('select all' 			selectAll)		('deselect all'		deselectAll)		('select conflicts'	selectConflicts)		('file in selections' 	fileInSelections)		)! !!ChangeList methodsFor: 'initialization-release' stamp: 'sbw 12/30/1999 11:02'!optionalButtonHeight	^ 15! !!ChangeList methodsFor: 'initialization-release' stamp: 'sbw 12/30/1999 10:54'!optionalButtons	^ self showsVersions		ifFalse:			[self buttonRowForChangeList]		ifTrue:			[self buttonRowForVersions]! !!ChangeList methodsFor: 'initialization-release' stamp: 'sbw 12/30/1999 10:54'!optionalButtonsView	^ self showsVersions		ifFalse:			[self buttonRowForChangeListView]		ifTrue:			[self buttonRowForVersions]! !!ChangeList class methodsFor: 'instance creation' stamp: 'sbw 12/30/1999 11:05'!open: aChangeList name: aString multiSelect: multiSelect	"Create a standard system view for the messageSet, whose label is aString.	The listView may be either single or multiple selection type"	| topView aBrowserCodeView aListView underPane pHeight |	World ifNotNil: [^ self openAsMorph: aChangeList name: aString multiSelect: multiSelect].	topView _ (StandardSystemView new) model: aChangeList.	topView label: aString.	topView minimumSize: 180 @ 120.	topView borderWidth: 1.	Preferences optionalButtons		ifTrue: [			underPane _ aChangeList optionalButtonsView.			underPane isNil				ifTrue: [pHeight _ 100]				ifFalse: [					topView addSubView: underPane.					pHeight _ 100 - aChangeList optionalButtonHeight]]		ifFalse: [			underPane _ nil.			pHeight _ 100].	aListView _ (multiSelect					ifTrue: [PluggableListViewOfMany]					ifFalse: [PluggableListView])		on: aChangeList list: #list		selected: #listIndex changeSelected: #toggleListIndex:		menu: (aChangeList showsVersions ifTrue: [#versionsMenu:] ifFalse: [#changeListMenu:])		keystroke: #messageListKey:from:.	aListView window: (0 @ 0 extent: 180 @ pHeight).	underPane isNil		ifTrue: [topView addSubView: aListView]		ifFalse: [topView addSubView: aListView below: underPane].	aBrowserCodeView _ PluggableTextView on: aChangeList 			text: #contents accept: #contents:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	aBrowserCodeView controller: ReadOnlyTextController new.	aBrowserCodeView window: (0 @ 0 extent: 180 @ 300).	topView addSubView: aBrowserCodeView below: aListView.	topView controller open! !!FileList methodsFor: 'initialization' stamp: 'sbw 12/30/1999 15:53'!optionalButtonHeight	^ 15! !!FileList methodsFor: 'initialization' stamp: 'sbw 12/30/1999 16:06'!optionalButtonPairs	^#(	('Name' 		sortByName)		('Date'			sortByDate)		('Size'			sortBySize)		('Changes'		browseChanges)		('File-in'		fileInSelection)		('File-in to New'	fileIntoNewChangeSet)		)! !!FileList methodsFor: 'initialization' stamp: 'sbw 12/30/1999 16:06'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color transparent; borderWidth: 1; borderColor: Color black.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs do:			[:pair |				aButton actionSelector: pair second.				aButton label: pair first.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0).				aButton _ aButton fullCopy.				(pair second == #sortBySize)					ifTrue:						[aRow addTransparentSpacerOfSize: (4@0)]].	^ aRow! !!FileList methodsFor: 'initialization' stamp: 'sbw 12/30/1999 16:13'!optionalButtonView	| aView bHeight windowWidth offset pairs previousView aButtonView wid |	aView _ View new model: self.	bHeight _ self optionalButtonHeight.	windowWidth _ 120.	aView window: (0@0 extent: windowWidth@bHeight).	offset _ 0.	pairs _ self optionalButtonPairs.	previousView _ nil.	pairs do: [:pair |		aButtonView _ PluggableButtonView on: self getState: nil action: pair last.		pair last = pairs last last			ifTrue: [				wid _ windowWidth - offset]			ifFalse: [				aButtonView borderWidthLeft: 0 right: 1 top: 0 bottom: 0.				wid _ (windowWidth // (pairs size)) - 2].		aButtonView			label: pair first asParagraph;			window: (offset@0 extent: wid@bHeight).		offset _ offset + wid.		pair last = pairs first last			ifTrue: [aView addSubView: aButtonView]			ifFalse: [aView addSubView: aButtonView toRightOf: previousView].		previousView _ aButtonView		].	^ aView! !!FileList class methodsFor: 'instance creation' stamp: 'sbw 12/30/1999 16:00'!open	"Open a view of an instance of me on the default directory."	"FileList open"	| dir aFileList topView volListView templateView fileListView fileContentsView underPane pHeight |	World ifNotNil: [^ self openAsMorph].	dir _ FileDirectory default.	aFileList _ self new directory: dir.	topView _ StandardSystemView new.	topView		model: aFileList;		label: dir pathName;		minimumSize: 200@200.	topView borderWidth: 1.	volListView _ PluggableListView on: aFileList		list: #volumeList		selected: #volumeListIndex		changeSelected: #volumeListIndex:		menu: #volumeMenu:.	volListView autoDeselect: false.	volListView window: (0@0 extent: 80@45).	topView addSubView: volListView.	templateView _ PluggableTextView on: aFileList		text: #pattern		accept: #pattern:.	templateView askBeforeDiscardingEdits: false.	templateView window: (0@0 extent: 80@15).	topView addSubView: templateView below: volListView.	Preferences optionalButtons		ifTrue: [			underPane _ aFileList optionalButtonView.			underPane isNil				ifTrue: [pHeight _ 60]				ifFalse: [					topView addSubView: underPane toRightOf: volListView.					pHeight _ 60 - aFileList optionalButtonHeight]]		ifFalse: [			underPane _ nil.			pHeight _ 60].	fileListView _ PluggableListView on: aFileList		list: #fileList		selected: #fileListIndex		changeSelected: #fileListIndex:		menu: #fileListMenu:.	fileListView window: (0@0 extent: 120@pHeight).	underPane isNil		ifTrue: [topView addSubView: fileListView toRightOf: volListView]		ifFalse: [topView addSubView: fileListView below: underPane].	fileListView controller terminateDuringSelect: true.  "Pane to left may change under scrollbar"	fileContentsView _ PluggableTextView on: aFileList		text: #contents accept: #put:		readSelection: #contentsSelection menu: #fileContentsMenu:shifted:.	fileContentsView window: (0@0 extent: 200@140).	topView addSubView: fileContentsView below: templateView.	topView controller open.! !!MessageSet methodsFor: 'message list' stamp: 'sbw 12/30/1999 17:19'!optionalButtonHeight	^ 15! !!MessageSet class methodsFor: 'instance creation' stamp: 'sbw 12/30/1999 17:18'!open: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	| topView aListView aBrowserCodeView aTextView underPane y buttonsView winWidth |	World ifNotNil: [^ self openAsMorph: aMessageSet name: aString].	winWidth _ 200.	topView _ (StandardSystemView new) model: aMessageSet.	topView label: aString.	topView minimumSize: winWidth @ 120.	topView borderWidth: 1.	aListView _ PluggableListView on: aMessageSet		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	aListView  menuTitleSelector: #messageListSelectorTitle.	aListView window: (0 @ 0 extent: winWidth @ 100).	topView addSubView: aListView.	Preferences useAnnotationPanes		ifTrue: [			aTextView _ PluggableTextView on: aMessageSet 			text: #annotation accept: nil			readSelection: nil menu: nil.			aTextView window: (0 @ 0 extent: winWidth @ 24).			topView addSubView: aTextView below: aListView.			underPane _ aTextView.			y _ 300 - 24.			aTextView askBeforeDiscardingEdits: false]		ifFalse: [			underPane _ aListView.			y _ 300].	Preferences optionalButtons ifTrue: [		buttonsView _ aMessageSet buildOptionalButtonsView.		topView addSubView: buttonsView below: underPane.		underPane _ buttonsView.		y _ y - aMessageSet optionalButtonHeight].	aBrowserCodeView _ PluggableTextView on: aMessageSet 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	aBrowserCodeView window: (0 @ 0 extent: winWidth @ y).	topView addSubView: aBrowserCodeView below: underPane.	topView setUpdatablePanesFrom: #(messageList).	topView controller open! !!VersionsBrowser reorganize!('init & update' optionalButtons optionalButtonsView optionalMorphicButtons reformulateList scanVersionsOf:class:meta:category:selector: updateListsAndCodeIn: versionListButtonTriples)('menu' fileInSelections offerVersionsHelp removeMethodFromChanges versionsHelpString versionsMenu:)('misc' showsVersions)!!VersionsBrowser methodsFor: 'init & update' stamp: 'sbw 12/30/1999 14:35'!optionalButtons	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightBlue; borderWidth: 1; borderColor: Color blue darker.	aRow addTransparentSpacerOfSize: (5@0).	self versionListButtonTriples do:			[:triplet |				aButton _ aButton fullCopy.				aButton actionSelector: triplet second.				aButton label: triplet first.				aButton setBalloonText: triplet third.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.		^ aRow! !!VersionsBrowser methodsFor: 'init & update' stamp: 'sbw 12/30/1999 14:43'!optionalButtonsView	| view bHeight vWidth offset triples buttonCount previousView wid button |	view _ View new model: self.	bHeight _ self optionalButtonHeight.	vWidth _ 180.	view window: (0@0 extent: vWidth@bHeight).	offset _ 0.	triples _ self versionListButtonTriples.	buttonCount _ triples size + 1.	previousView _ nil.	wid _ vWidth // buttonCount.	triples do: [:triplet |		button _ PluggableButtonView on: self getState: nil action: triplet second.		button			label: triplet first asParagraph;			insideColor: Color lightBlue;			borderWidthLeft: 0 right: 1 top: 0 bottom: 0;			window: (offset@0 extent: wid@bHeight).		offset _ offset + wid.		triplet last = triples first last			ifTrue: [view addSubView: button]			ifFalse: [view addSubView: button toRightOf: previousView].		previousView _ button].	button _ PluggableButtonView on: self getState: #showDiffs action: #toggleDiff.	button		label: 'toggle diff' asParagraph;		insideColor: Color lightBlue;		window: (offset@0 extent: (vWidth - offset)@bHeight).	view addSubView: button toRightOf: previousView.	^ view! !!VersionsBrowser methodsFor: 'init & update' stamp: 'sbw 12/30/1999 14:34'!versionListButtonTriples	^#(		('compare to current'		compareToCurrentVersion		'opens a separate window which shows the text differences between the selected version and the current version')		('revert'		fileInSelections		'reverts the method to the version selected')		('remove from changes'		removeMethodFromChanges		'remove this method from the current change set')		('help'		offerVersionsHelp		'further explanation about use of Versions browsers')		)! !