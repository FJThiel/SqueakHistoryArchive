'From Squeak3.1alpha of 28 February 2001 [latest update: #4140] on 6 June 2001 at 2:47:36 pm'!"Change Set:		msgListBalloonHelp-swDate:			6 June 2001Author:			Scott WallaceUnder control of a new Preference, #balloonHelpInMessageLists, makes it possible for message lists in Morphic to provide balloon help in conjunction with a mouseover of any list item, whether selected or not.  The balloon help provided is the first precode comment in the method, but if the method has no precode comment, then the superclass chain is searched until a usable precode comment is found.  This works in browsers and message lists.  The preference is initially set to false (these balloons will be very annoying to some people,) so you will need to set it to true proactively to see the effect."!!Browser methodsFor: 'initialize-release' stamp: 'sw 6/5/2001 20:01'!buildMorphicMessageList	"Build a morphic message list, with #messageList as its list-getter"	| aListMorph |	(aListMorph _ PluggableListMorph new) 			setProperty: #highlightSelector toValue: #highlightMessageList:with:;			setProperty: #balloonTextSelectorForSubMorphs toValue: #balloonTextForMethodString;			on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph enableDragNDrop: Preferences browseWithDragNDrop.	aListMorph menuTitleSelector: #messageListSelectorTitle.	^aListMorph! !!MessageSet methodsFor: 'private' stamp: 'sw 6/6/2001 13:30'!buildMorphicMessageList	"Build my message-list object in morphic"	| aListMorph |	aListMorph _ PluggableListMorph new.	aListMorph		setProperty: #highlightSelector toValue: #highlightMessageList:with:;		setProperty: #itemConversionMethod toValue: #asStringOrText;		setProperty: #balloonTextSelectorForSubMorphs toValue: #balloonTextForClassAndMethodString.	aListMorph		on: self list: #messageList		selected: #messageListIndex changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	aListMorph enableDragNDrop: Preferences browseWithDragNDrop.	aListMorph menuTitleSelector: #messageListSelectorTitle.	^ aListMorph! !!Lexicon methodsFor: 'initialization' stamp: 'sw 6/5/2001 21:11'!openOnClass: aTargetClass inWorld: aWorld showingSelector: aSelector	"Create and open a SystemWindow to house the receiver, showing the categories pane.  The target-object parameter is optional -- if nil, the browser will be associated with the class as a whole but not with any particular instance of it."	| window aListMorph  catListFraction msgListFraction |	currentVocabulary ifNil: [currentVocabulary _ Vocabulary fullVocabulary].	limitClass ifNil: [limitClass _ ProtoObject].	targetClass _ aTargetClass.		window _ self windowWithLabel: self startingWindowTitle.	catListFraction _ 0.15.	msgListFraction _ 0.2.		window addMorph: self newCategoryPane frame: (0 @ 0 corner: 1 @ catListFraction).	aListMorph _ PluggableListMorph new.	aListMorph 	setProperty: #balloonTextSelectorForSubMorphs toValue: #balloonTextForLexiconString.	aListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph setNameTo: 'messageList'.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph frame: (0 @ catListFraction corner: 1 @ (catListFraction + msgListFraction)).	self 		addLowerPanesTo: window 		at: (0 @ (catListFraction + msgListFraction)  corner: 1@1) 		with: nil.	window changeAllBorderColorsFrom: Color black to: (self defaultBackgroundColor mixed: 0.5 with: Color black).	window color: self defaultBackgroundColor.	window openInWorld: aWorld.	self reformulateCategoryList.	aSelector ifNotNil: [self selectSelectorItsNaturalCategory: aSelector] ifNil: [self categoryListIndex: 1].	#(navigateToPreviousMethod	 navigateToNextMethod removeFromSelectorsVisited) do:		[:sel |			(self buttonWithSelector: sel) ifNotNilDo:				[:aButton | aButton borderWidth: 0]].	self adjustWindowTitle! !!Morph methodsFor: 'accessing' stamp: 'sw 6/5/2001 19:35'!balloonText	"Answer balloon help text or nil, if no help is available.	NB: subclasses may override such that they programatically construct	the text, for economy's sake, such as model phrases in a Viewer"	| text aSelector aString |	extension == nil ifTrue: [^ nil].	(text _ extension balloonText) ifNotNil: [^ text].	(aSelector _ extension balloonTextSelector)		ifNotNil:			[aString _ ScriptingSystem helpStringOrNilFor: aSelector.			(aString isNil and: [self respondsTo: aSelector]) ifTrue:				[aString _ self perform: aSelector].			aString ifNotNil:				[^ aString asString withNoLineLongerThan: Preferences maxBalloonHelpLineLength]].	^ nil! !!PluggableListMorph methodsFor: 'initialization' stamp: 'sw 6/6/2001 13:38'!list: listOfStrings 	"Set the receiver's list as specified"	| morphList h loc index converter item aSelector |	scroller removeAllMorphs.	list _ listOfStrings ifNil: [Array new].	list isEmpty ifTrue: [self setScrollDeltas.  ^ self selectedMorph: nil].	"NOTE: we will want a quick StringMorph init message, possibly even		combined with event install and positioning"	font ifNil: [font _ Preferences standardListFont].	converter _ self valueOfProperty: #itemConversionMethod.	converter ifNil: [converter _ #asStringOrText].	morphList _ list collect: [:each |		item _ each.		item _ item perform: converter.		item isText			ifTrue: [StringMorph contents: item font: font emphasis: (item emphasisAt: 1)]			ifFalse: [StringMorph contents: item font: font]].	(aSelector _ self valueOfProperty: #balloonTextSelectorForSubMorphs)		ifNotNil:			[morphList do: [:m | m balloonTextSelector: aSelector]].	self highlightSelector ifNotNil:		[model perform: self highlightSelector with: list with: morphList].	"Lay items out vertically and install them in the scroller"	h _ morphList first height "self listItemHeight".	loc _ 0@0.	morphList do: [:m | m bounds: (loc extent: 9999@h).  loc _ loc + (0@h)].	scroller addAllMorphs: morphList.	index _ self getCurrentSelectionIndex.	self selectedMorph: ((index = 0 or: [index > morphList size]) ifTrue: [nil] ifFalse: [morphList at: index]).	self setScrollDeltas.	scrollBar setValue: 0.0! !!StandardScriptingSystem methodsFor: 'help dictionary' stamp: 'sw 6/6/2001 13:28'!helpStringOrNilFor: aSymbol	"If my HelpStrings dictionary has an entry at the given symbol, answer that entry's value, else answer nil"	^ HelpStrings at: aSymbol ifAbsent: [nil]! !!StringMorph methodsFor: 'printing' stamp: 'sw 6/5/2001 19:47'!balloonTextForClassAndMethodString	"Answer suitable balloon text for the receiver thought of as an encoding of the form		<className>  [ class ] <selector>"	| aComment |	Preferences balloonHelpInMessageLists		ifFalse: [^ nil].	MessageSet parse: self contents asString toClassAndSelector:		[:aClass :aSelector |			(aClass notNil and: [aSelector notNil]) ifTrue:				[aComment _ aClass precodeCommentOrInheritedCommentFor: aSelector]].	^ aComment! !!StringMorph methodsFor: 'printing' stamp: 'sw 6/6/2001 13:32'!balloonTextForLexiconString	"Answer suitable balloon text for the receiver thought of as an encoding (used in Lexicons) of the form		<selector> <spaces> (<className>>)"	| aComment contentsString aSelector aClassName |	Preferences balloonHelpInMessageLists		ifFalse: [^ nil].	contentsString _ self contents asString.	aSelector _ contentsString upTo: $ .	aClassName _ contentsString copyFrom: ((contentsString indexOf: $() + 1) to: ((contentsString indexOf: $)) - 1).	MessageSet parse: (aClassName, ' dummy') toClassAndSelector:		[:cl :sel | cl ifNotNil:			[aComment _ cl precodeCommentOrInheritedCommentFor: aSelector]].	^ aComment! !!StringMorph methodsFor: 'printing' stamp: 'sw 6/5/2001 20:29'!balloonTextForMethodString	"Answer suitable balloon text for the receiver thought of as a method belonging to the currently-selected class of a browser tool."	| aWindow aCodeHolder aClass |	Preferences balloonHelpInMessageLists		ifFalse: [^ nil].	aWindow _ self ownerThatIsA: SystemWindow.	(aWindow isNil or: [((aCodeHolder _ aWindow model) isKindOf: CodeHolder) not])		ifTrue:	[^ nil].	((aClass _ aCodeHolder selectedClassOrMetaClass) isNil or:		[(aClass includesSelector: contents asSymbol) not])			ifTrue: [^ nil].	^ aClass precodeCommentOrInheritedCommentFor: contents asSymbol! !!StringMorph methodsFor: 'printing' stamp: 'sw 6/6/2001 13:34'!boundsForBalloon	"Some morphs have bounds that are way too big.  This is a contorted way of making things work okay in PluggableListMorphs, whose list elements historically have huge widths"	| ownerOwner |	^ ((owner notNil and: [(ownerOwner _ owner owner) notNil]) and:			[ownerOwner isKindOf: PluggableListMorph])		ifTrue:			[self boundsInWorld intersect: ownerOwner boundsInWorld]		ifFalse:			[super boundsForBalloon]! !"Postscript:"Preferences addPreference: #balloonHelpInMessageLists categories: #(morphic browsing)  default: false balloonHelp: 'If true, then message-list browsers in Morphic will show balloon help, consisting of the first comment of the method or of a superclass''s implementation of the method'.!