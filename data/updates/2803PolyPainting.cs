'From Squeak2.9BJ of 22 September 2000 [latest update: #2818] on 10 October 2000 at 4:53:45 pm'!"Change Set:		PolyPaintingDate:			10 October 2000Author:			Andreas RaabMore consistent use of polygons in the sketch editor. The initial mouse-down-drag resizes a triangle; upon mouse up the cursor switches to 'normal' and handles are added. While handles are there, cursor stays normal. Click on handle does 'morphic' poly editing. Click outside will freeze current poly and get back into initial conditions (showing new poly cursor). Tool change will freeze poly."!!PaintBoxMorph methodsFor: 'actions' stamp: 'ar 10/10/2000 16:38'!plainCursor: aCursor event: anEvent	"Set the cursor to use with this painting action/tool. Offset of the form must be set."	currentCursor _ aCursor.	anEvent hand showTemporaryCursor: aCursor.	self notifyWeakDependentsWith: {#currentCursor. anEvent. currentCursor}.! !!SketchEditorMorph methodsFor: 'morphic' stamp: 'ar 10/10/2000 16:18'!mouseUp: evt	| myAction |	"Do nothing except those that work on mouseUp."	myAction _ self getActionFor: evt.	myAction == #fill: ifTrue: [		self perform: myAction with: evt.		"Each action must do invalidRect:"		].	myAction == #areaFill: ifTrue: ["old, remove it"		self perform: myAction with: evt.		"Each action must do invalidRect:"		].	myAction == #pickup: ifTrue: [		self pickupMouseUp: evt].	myAction == #polygon: ifTrue: [self polyEdit: evt].	"a mode lets you drag vertices"	self set: #lastEvent for: evt to: nil.! !!SketchEditorMorph methodsFor: 'start & finish' stamp: 'ar 10/10/2000 16:47'!verifyState: evt	| myAction |	"We are sure we will make a mark now.  Make sure the palette has not changed state while we were away.  If so, end this action and start another one.  6/11/97 19:52 tk  action, currentColor, brush"	"Install the brush, color, (replace mode), and cursor."	palette isInWorld ifFalse:		[self world addMorphFront: palette].  "It happens.  might want to position it also"	myAction _ self getActionFor: evt.	(self get: #changed for: evt) == false ifFalse: [		self set: #changed for: evt to: false.		self invalidRect: rotationButton bounds.	"snap these back"		rotationButton position: bounds topCenter - (6@0).		"later adjust by button width?"		self invalidRect: rotationButton bounds.		self invalidRect: scaleButton bounds.		scaleButton position: bounds rightCenter - ((scaleButton width)@6).		self invalidRect: scaleButton bounds.		myAction == #polygon: ifFalse: [self polyFreeze].		"end polygon mode"		^ self set: #action for: evt to: (self prepareToPaint: evt)].! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'ar 10/10/2000 16:40'!polyEdit: evt	"Add handles and let user drag'em around"	| poly |	poly _ self valueOfProperty: #polygon.	poly ifNil:[^self].	poly addHandles.	self polyEditing: true.	self setProperty: #polyCursor toValue: palette plainCursor.	palette plainCursor: Cursor normal event: evt.! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'ar 10/10/2000 16:28'!polyEditing	^self valueOfProperty: #polyEditing ifAbsent:[false]! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'ar 10/10/2000 16:28'!polyEditing: aBool	aBool		ifTrue:[self setProperty: #polyEditing toValue: aBool]		ifFalse:[self removeProperty: #polyEditing]! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'ar 10/10/2000 16:29'!polyFreeze	"A live polygon is on the painting.  Draw it into the painting anddelete it."	| poly |	self polyEditing ifFalse:[^self].	(poly _ self valueOfProperty: #polygon) ifNil: [^ self].	poly drawOn: formCanvas.	poly delete.	self setProperty: #polygon toValue: nil.	self polyEditing: false.! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'ar 10/10/2000 16:42'!polyNew: evt	"Create a new polygon.  Add it to the sketch, and let the user dragits vertices around!!  Freeze it into the painting when the user choosesanother tool."	| poly cColor |	self polyEditing ifTrue:[		self polyFreeze.		(self hasProperty: #polyCursor)			ifTrue:[palette plainCursor: (self valueOfProperty: #polyCursor) event: evt.					self removeProperty: #polyCursor].		^self].	cColor _ self getColorFor: evt.	self polyFreeze.		"any old one we were working on"	poly _ PolygonMorph new "addHandles".	poly referencePosition: poly bounds origin.	poly align: poly bounds center with: evt cursorPoint. 	cColor == Color transparent	ifFalse:[	poly color: cColor; borderWidth: 0;	borderColor: Color transparent]	ifTrue:[	poly color: cColor; borderWidth: 1;     "still some problems with brushsize !!!!"	borderColor: Color black].	self addMorph: poly.	poly changed.	self setProperty: #polygon toValue: poly.! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'ar 10/10/2000 16:22'!polygon: evt	| poly |	poly _ self valueOfProperty: #polygon.	poly ifNil:[^self].	evt cursorPoint > poly bounds origin ifTrue:[		poly extent: ((evt cursorPoint - poly bounds origin) max: 5@5)].! !!SketchEditorMorph methodsFor: 'Nebraska support' stamp: 'ar 10/10/2000 16:50'!set: aSymbol for: anEventOrHand to: anObject	| valuesForHand |	valuesForHand _ self valuesForHand: anEventOrHand.	aSymbol == #action ifTrue: [		valuesForHand at: #priorAction put: (valuesForHand at: #action ifAbsent: [#paint:]).		self polyEditing ifTrue:[self polyFreeze].	].	valuesForHand at: aSymbol put: anObject.	^anObject! !PaintBoxMorph removeSelector: #plainCursor:!!PaintBoxMorph reorganize!('initialization' addWeakDependent: beStatic createButtons fixupButtons init3 init4 initialize loadColorChooser loadCursors loadOnImage: loadPressedImage: loadoffImage: moveButtons noVeneer notifyWeakDependentsWith:)('other' addCustomMenuItems:hand: colorMemory colorMemory: colorPatch copyRecordingIn: focusMorph focusMorph: isCandidateForAutomaticViewing maxBounds offsetFromMaxBounds rotationTabForm scaleTabForm updateReferencesUsing:)('actions' action actionCursor brush:action:nib:evt: brushable clear:with:evt: colorable currentColor:evt: cursorFor:oldCursor:currentNib:color: deleteCurrentStamp: eyedropper:action:cursor:evt: getColor getNib getSpecial grabFromScreen: indicateColorUnderMouse keep:with:evt: mouseUpBalk: notCurrentlyPainting pickup:action:cursor:evt: pickupForm: pickupForm:evt: plainCursor plainCursor:event: ringColor ringColorFor: scrollStamps:action:evt: setAction:evt: showColor showColorPalette: stampCursorBeCursorFor: stampDeEmphasize stampForm stampHolder stampHolder: takeColor:event: takeColorEvt:from: toggleShapes toggleStamps tool tool:action:cursor:evt: toss:with:evt: undo:with:evt:)('object fileIn' convertbosfceiatctccccsrscb0:bosfceiatctccccsrscbf0:)('recent colors' fixUpColorPicker fixUpRecentColors mouseDownRecent:with: mouseStillDownRecent:with: mouseUpRecent:with: recentColor:)!