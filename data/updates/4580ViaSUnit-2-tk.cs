'From Squeak3.2alpha of 4 October 2001 [latest update: #4572] on 4 December 2001 at 3:18:50 pm'!"Change Set:		ViaSUnit-2-tkDate:			4 December 2001Author:			Ted KaehlerModified TestRunner to list an entry for each class that implements #exampleFor: (on the class side).  Print with the name of the class.  Mark it as using TestViaMethodCall (which uses Verifier).	TestViaMethodCall does not appear in the list in TestRunner, but instances of it hold the simple style tests for any class that implements #exampleFor:.	Added suites for Collection, OrderedCollection, Number.	Provided hash for ReadWriteStream."!!Collection class methodsFor: 'examples' stamp: 'tk 12/3/2001 14:43'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind joe mc kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	joe _ Array with: 5 with: 6 with: 0 with: -3.	(sel _ #collect:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: joe copy selector: sel argument: [:element | element odd]).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: {true. false. false. true}]].	(sel _ #select:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: joe copy selector: sel argument: [:element | element < 4]).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #(0 -3)]].	(sel _ #detect:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: (joe copy) 					selector: sel argument: [:element | element asWords beginsWith: 's']).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 6]].	(sel _ #asSortedArray) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: (joe copy) selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #(-3 0 5 6)]].	(sel _ #sum) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: joe copy selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 8]].	(sel _ #asSortedCollection:) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: (joe copy) 					selector: sel argument: [:aa :bb | aa asWords < bb asWords]).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #none.			mc theTest: ((Verifier receiver: #answer selector: #asArray) 				desiredAnswer: #(-3 5 6 0))]].	^ list! !!MailAddressParser class methodsFor: 'examples' stamp: 'tk 12/2/2001 17:19'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind mc kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	(sel _ #example) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: self selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #('joe@lama.com' 'joe2@lama.com' 'joe3@lama.com' 'joe4' 'joe5@address' 'joe.literal@[1.2.3.4]' 'joe1@groupie' 'joe2@groupie' '"Joey"' 'joe3@groupy' '"joe6"."joe8"@group.com' 'lex') asOrderedCollection]].	^ list! !!Number class methodsFor: 'examples' stamp: 'tk 12/3/2001 14:47'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind mc kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	(sel _ #//) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 7.8765 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 3]].	(sel _ #abs) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: -7 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 7]].	(sel _ #negated) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 7 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: -7]].	(sel _ #reciprocal) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 3 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 1/3]].	(sel _ #rem:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: -9 selector: sel argument: 4).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: -1]].	(sel _ #printString) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: -7 selector: sel ).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: '-7']].	(sel _ #printStringBase:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 6 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: '2r110']].	^ list! !!OrderedCollection class methodsFor: 'examples' stamp: 'tk 12/4/2001 15:10'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind joe mc kindIfTestingState sel jj |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	joe _ (Array with: 5 with: true with: nil with: 'abc') asOrderedCollection.	(sel _ #addLast:) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: (jj _ joe copy) 					selector: sel argument: 17).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 17.			mc theTest: ((Verifier receiver: jj selector: #asArray) 				desiredAnswer: {5. true. nil. 'abc'. 17})]].	(sel _ #addFirst:) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: (jj _ joe copy) 					selector: sel argument: 9).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 9.			mc theTest: ((Verifier receiver: jj selector: #asArray) 				desiredAnswer: {9. 5. true. nil. 'abc'})]].	(sel _ #at:) == aSelector | doAll ifTrue: [			list add: (mc _ kind receiver: (joe copy) selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: true]].	(sel _ #remove:ifAbsent:) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: (jj _ joe copy) 					selector: sel arguments: {5. [^ 'Oops, not there!!']}).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 5.			mc theTest: ((Verifier receiver: jj selector: #asArray) 				desiredAnswer: {true. nil. 'abc'})]].	^ list! !!ReadWriteStream methodsFor: 'testing' stamp: 'tk 12/2/2001 17:13'!hash	self class == ReadWriteStream ifFalse: [^ super hash].	^ (self position + readLimit + 53) hash! !!TestRunner methodsFor: 'processing' stamp: 'tk 12/2/2001 10:52'!refreshTests        tests _ self gatherTestNames.        self changed: #tests.        testSuite := nil.        selectedSuite _ 0.        selectedFailureTest _ 0.        selectedErrorTest _ 0.        self changed: #selectedFailureTest.             "added rew"        self changed: #selectedErrorTest.               "added rew"        self changed: #selectedSuite.        self refreshWindow! !!TestRunner methodsFor: 'processing' stamp: 'tk 12/2/2001 10:38'!runOneTest	Cursor execute showWhile:		[testSuite ifNil: 			[self runWindow.			^ self displayPassFail: 'No Test Suite Selected'].		 (testSuite indexOf: $( ) > 0 			ifTrue:	"Just MethodCalls for the named class"				[self runWindow.				result _ (TestViaMethodCall buildSuite: testSuite) run.				self updateWindow: result]		     ifFalse:		"Normal subclass of TestCase"				[self runWindow.				result _ testSuite asSymbol sunitAsClass suite run.				self updateWindow: result]		]! !!TestRunner methodsFor: 'initialize' stamp: 'tk 12/2/2001 11:04'!gatherTestNames	| theNames |	theNames _ (TestCase allSubclasses collect: [:each | each name]) asOrderedCollection.	theNames remove: #TestViaMethodCall ifAbsent: [^ theNames].	TestViaMethodCall addClassesTo: theNames.	^ theNames! !!TestRunner methodsFor: 'initialize' stamp: 'tk 12/2/2001 10:42'!initialize        result _ TestResult new.        passFail _ 'N/A'.        details _ '...'.        failures _ OrderedCollection new.        errors _ OrderedCollection new.        tests _ self gatherTestNames.        selectedSuite _ 0.        selectedFailureTest _ 0.        selectedErrorTest _ 0.! !!TestViaMethodCall class methodsFor: 'as yet unclassified' stamp: 'tk 12/2/2001 10:51'!addClassesTo: aList	"Add names of classes that have tests to perform"	(Smalltalk allImplementorsOf: #exampleFor:) do: [:mr |		mr classIsMeta ifTrue: [			aList add: mr classSymbol, ' (simple)']].	^ aList! !!TestViaMethodCall class methodsFor: 'as yet unclassified' stamp: 'tk 12/2/2001 11:12'!buildSuite: classNameString	"Return a list of tests to perform"	| ts clsName cls |	clsName _ (classNameString findTokens: '( )') first.	ts _ (TestSuite new) name: clsName.	cls _ Smalltalk at: clsName asSymbol.	(cls class includesSelector: #exampleFor:) ifFalse: [^ ts].	(cls exampleFor: 'all') do: [:aVerifier | ts addTest: (self new verifier: aVerifier)].	^ ts! !!TestViaMethodCall class methodsFor: 'as yet unclassified' stamp: 'tk 12/2/2001 11:00'!buildSuiteFromLocalSelectors	"Return a list of tests to perform"	| ts |	ts _ (TestSuite new) name: 'From Many Classes'.	(Smalltalk allImplementorsOf: #exampleFor:) do: [:mr |		mr classIsMeta ifTrue: [			((Smalltalk at: mr classSymbol) exampleFor: 'all') 				do: [:aVerifier | ts addTest: (self new verifier: aVerifier)]]].	^ ts! !