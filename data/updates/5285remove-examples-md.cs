'From Squeak3.6alpha of ''17 March 2003'' [latest update: #5184] on 30 April 2003 at 3:53:33 pm'!"Change Set:		remove-examplesDate:			21 April 2003Author:			Marcus DenkerThis changeset removes some methods:1) SecureHashAlgorithm (example, example2).These have been rewritten to use SUnit and are part of the BaseImage Tests Package.2) URL class>>quickieTest, which has been refactored to use SUnit andis now part of the BaseImage tests package.3) Random class>example, this is a shortintroduction how to use Random, it hasbeen moved to the class comment"!!Random commentStamp: 'md 4/26/2003 16:32' prior: 0!This Random Number Generator graciously contributed by David N. Smith.  It is an adaptation of the Park-Miller RNG which uses Floats to avoid the need for LargeInteger arithmetic.If you just want a quick random integer, use:		10 atRandomEvery integer interval can give a random number:		(6 to: 12) atRandomSequenceableCollections can give randomly selected elements:		'pick one of these letters randomly' atRandomSequenceableCollections also respond to shuffled, as in:		($A to: $Z) shuffledThe correct way to use class Random is to store one in an instance or class variable:		myGenerator _ Random new.Then use it every time you need another number between 0.0 and 1.0 (excluding)		myGenerator nextYou can also generate a positive integer		myGenerator nextInt: 10!Url class removeSelector: #quickieTest!SecureHashAlgorithm class removeSelector: #example!SecureHashAlgorithm class removeSelector: #example2!Random class removeSelector: #example!