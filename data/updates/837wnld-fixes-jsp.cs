'From Squeak 2.3 of January 14, 1999 on 19 April 1999 at 11:40:25 am'!"Change Set:		wnld-fixes-jspDate:			19 April 1999Author:			Jeff PierceFix initialize and reset for Wonderlands so that none of the setup is undo-able, and eliminate the hitch in destroy."!!Wonderland methodsFor: 'initialize-reset-release' stamp: 'jsp 4/19/1999 11:13'!initialize	"This method initializes the Wonderland."	| ground |	"Initialize the list of actor UniClasses"	actorClassList _ OrderedCollection new.	"Initialize the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants copy.	"Create the Wonderland's scheduler"	myScheduler _ Scheduler new.	myNamespace at: 'scheduler' put: myScheduler.	"Create the undo stack for this Wonderland."	myUndoStack _ WonderlandUndoStack new.	"The scene object is the root of the object tree - all objects in the Wonderland are children (directly or indirectly) of the scene. "	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Create some default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	ground setName: 'ground'.	myNamespace at: 'ground' put: ground.	"Initialize the light list and create a default light"	lightList _ OrderedCollection new.	lightList addLast: (B3DAmbientLight color: Color white).		"Create the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ WonderlandCamera createFor: self.	cameraList addLast: defaultCamera.	myNamespace at: 'camera' put: defaultCamera.	myNamespace at: 'cameraWindow' put: (defaultCamera getMorph).	defaultCamera setName: 'camera'.	"Clean out the Undo stack - we don't want people undoing the init stuff"	myUndoStack reset.	"Throw this Wonderland into the shared namespace"	myNamespace at: 'w' put: self.	"Create a script editor for this Wonderland"	self makeScriptEditor.! !!Wonderland methodsFor: 'initialize-reset-release' stamp: 'jsp 4/19/1999 11:12'!reset	"Reset this Wonderland"	| ground |	"Reset the scheduler"	myScheduler reset.	"Reset the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Reset the list of actor uniclasses"	actorClassList do: [:aClass | Smalltalk removeClassFromSystem: aClass ].	actorClassList _ OrderedCollection new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants copy.	"Rebuild the namespace"	myNamespace at: 'scheduler' put: myScheduler.	myNamespace at: 'w' put: self.	"Create a new scene"	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Recreate the default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setName: 'ground'.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	myNamespace at: 'ground' put: ground.	"Re-initialize the light list and create a default light"	lightList _ OrderedCollection new.	lightList addLast: (B3DAmbientLight color: Color white).	"Wipe out the existing cameras"	cameraList do: [:camera | camera release].		"Recreate the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ WonderlandCamera createFor: self.	cameraList addLast: defaultCamera.	myNamespace at: 'camera' put: defaultCamera.	myNamespace at: 'cameraWindow' put: (defaultCamera getMorph).	defaultCamera setName: 'camera'.	"Reset the script editor's namespace"	scriptEditor resetNamespace.	"Update the actor browser"	scriptEditor updateActorBrowser.	"Reset the undo stack"	myUndoStack reset.! !!WonderlandActor methodsFor: 'primitive behaviors' stamp: 'jsp 4/19/1999 11:24'!destroy: aDuration	"Implements the animated destroy of an actor.  This takes all the actors parts and spins them off in an arbitrary direction"	| anim allAnims undoActions childList partsList |	[ WonderlandVerifier VerifyDuration: aDuration ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser:				'Squeak could not determine the duration to use for destroying ' , myName , ' because ', msg.			^ nil ].	"The parameter checks out, so start the setup"	undoActions _ OrderedCollection new.	allAnims _ OrderedCollection new.	childList _ self getAllChildren.	partsList _ self getAllParts.	partsList addFirst: self.	"Do it for the top level object"	"We need to do this for every part"	childList do: [:child |		(child isPart)			ifTrue: [				"Make sure our POV gets reset on undo"				undoActions addFirst: (UndoPOVChange for: child from: (child getPointOfView)).								"Create the animation for moving toward a random endpoint"				anim _ child moveTo: { (-2 to: 2) atRandom. (-2 to: 2) atRandom.							(-2 to: 2) atRandom} duration: aDuration							asSeenBy: (myWonderland getScene) style: abruptly.				anim stop.				anim setUndoable: false.				allAnims addLast: anim.				"Create the animation for spinning this object"				child turnToRightNow: { (0 to: 360) atRandom. (0 to: 360) atRandom.							(0 to: 360) atRandom} undoable: false.				anim _ child turn: left turns: aDuration speed: 1.				anim stop.				anim setUndoable: false.				allAnims addLast: anim.					]			ifFalse: [				"Make the non-part children point to this actor's parent"				undoActions addLast: (UndoParentChange newFor: child from: (child getParent)).				child reparentTo: (self getParent).					].					].	"Add an undo action to put the objects back in the scene"		undoActions addFirst: (UndoAction new: [ (myWonderland getScene) addChild: self.											 myWonderland getEditor updateActorBrowser ]).	"Add the undo list to the stack"	(myWonderland getUndoStack) push: (UndoChangeList new setChangeList: undoActions).	"Create the animation to remove the parts from the scene and update the actor browser"	anim _ self do: [ self removeFromScene.					 myWonderland getEditor updateActorBrowser ].	"Now start our parallel animation"	anim _ myWonderland doInOrder: { myWonderland doTogether: allAnims. anim }.	anim setUndoable: false.! !