'From Squeak 2.5 of August 6, 1999 [latest update: #1525] on 9 October 1999 at 2:11:29 pm'!"Change Set:		NewCompiler3Date:			9 October 1999Author:			Andrew C. Greenberg(1) Fix to StandardFileMenuFix to force update of cached menu when new directory is selected(2) Plugin compiler now accepts definitions of the form: 	self var: #aSymbol as: Classso that aSymbol will be declared appropriately, depending upon the Class specification.(3) Plugin compiler now permits auto-coercion from oops to c-language values:	oop asValue: Class(4) Plugin compiler now permits a somwhat helpful shorthand to facilitate loading from Smalltalk objects with named instance variables:	temp _ rcvr 				asIf: RcvrClass 				var: 'instVarID' 				asValue: InstVarClass."!!Object methodsFor: 'translation support' stamp: 'acg 10/5/1999 06:35'!asIf: aClass var: aString asValue: someClass	^(self asIf: aClass var: aString) asValue: someClass! !!Object methodsFor: 'translation support' stamp: 'acg 10/5/1999 06:21'!asValue: aClass	^self! !!Object class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:10'!ccg: cg generateCoerceToValueFrom: aNode on: aStream	cg emitCExpression: aNode on: aStream! !!ArrayedCollection class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:18'!ccg: cg generateCoerceToValueFrom: aNode on: aStream	cg 		generateCoerceToPtr: (self ccgDeclareCForVar: '')		fromObject: aNode on: aStream! !!Boolean class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:05'!ccg: cg generateCoerceToOopFrom: aNode on: aStream	cg generateCoerceToBooleanObjectFrom: aNode on: aStream! !!Boolean class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:10'!ccg: cg generateCoerceToValueFrom: aNode on: aStream	cg generateCoerceToBooleanValueFrom: aNode on: aStream! !!Float class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:05'!ccg: cg generateCoerceToOopFrom: aNode on: aStream	cg generateCoerceToFloatObjectFrom: aNode on: aStream! !!Float class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:10'!ccg: cg generateCoerceToValueFrom: aNode on: aStream	cg generateCoerceToFloatValueFrom: aNode on: aStream! !!Oop class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:10'!ccg: cg generateCoerceToValueFrom: aNode on: aStream	cg emitCExpression: aNode on: aStream! !!SmallInteger class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:04'!ccg: cg generateCoerceToOopFrom: aNode on: aStream	cg generateCoerceToSmallIntegerObjectFrom: aNode on: aStream! !!SmallInteger class methodsFor: 'plugin generation' stamp: 'acg 10/5/1999 06:11'!ccg: cg generateCoerceToValueFrom: aNode on: aStream	cg generateCoerceToSmallIntegerValueFrom: aNode on: aStream! !!StandardFileMenu methodsFor: 'basic control sequences' stamp: 'acg 9/28/1999 23:34'!startUpWithCaption: aString at: location	|result|	result _ super startUpWithCaption: aString at: location.	result ifNil: [^nil].	result isDirectory ifTrue:		[self makeFileMenuFor: result directory.		 self computeForm.		 ^self startUpWithCaption: aString at: location].	result isCommand ifTrue: 		[result _ self getTypedFileName: result.		result ifNil: [^nil]].	canTypeFileName ifTrue: [^self confirmExistingFiles: result].	^result	! !!TestCodeGenerator methodsFor: 'as yet unclassified' stamp: 'acg 10/4/1999 19:40'!var: varName as: aClass	"Record the given C declaration for a global variable"	variableDeclarations at: varName put: (aClass ccgDeclareCForVar: varName)! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 06:07'!generateCoerceToBooleanObjectFrom: aNode on: aStream	aStream nextPutAll: '('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: '? interpreterProxy->trueObject: interpreterProxy->falseObject)'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 06:07'!generateCoerceToBooleanValueFrom: aNode on: aStream	aStream nextPutAll: 'interpreterProxy->booleanValueOf('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: ')'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 06:03'!generateCoerceToFloatObjectFrom: aNode on: aStream	aStream nextPutAll: 'interpreterProxy->floatObjectOf('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: ')'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 05:53'!generateCoerceToFloatValueFrom: aNode on: aStream	aStream nextPutAll: 'interpreterProxy->floatValueOf('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: ')'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 05:57'!generateCoerceToPtr: aString fromObject: aNode on: aStream	"This code assumes no named instance variables"	aStream 		nextPutAll: '((';		nextPutAll: aString;		nextPutAll: ') interpreterProxy->firstIndexableField('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: '))'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 06:03'!generateCoerceToSmallIntegerObjectFrom: aNode on: aStream	aStream nextPutAll: 'interpreterProxy->integerObjectOf('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: ')'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 05:59'!generateCoerceToSmallIntegerValueFrom: aNode on: aStream	aStream nextPutAll: 'interpreterProxy->integerValueOf('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: ')'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 06:03'!generateCoerceToUnsignedObjectFrom: aNode on: aStream	aStream nextPutAll: 'interpreterProxy->positive32BitIntegerFor('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: ')'! !!TestCodeGenerator methodsFor: 'C linkage new' stamp: 'acg 10/5/1999 06:00'!generateCoerceToUnsignedValueFrom: aNode on: aStream	aStream nextPutAll: 'interpreterProxy->positive32BitValueOf('.	self emitCExpression: aNode on: aStream.	aStream nextPutAll: ')'! !!TestCodeGenerator methodsFor: 'C translation' stamp: 'acg 10/5/1999 07:40'!generateAsIfVarAsValue: aNode on: aStream indent: anInteger	| cName fName class index fetchNode |	cName _ String streamContents: 		[:scStr | self emitCExpression: aNode args first on: scStr].	class _ Smalltalk 		at: (cName asSymbol) 		ifAbsent: [nil].	(class isNil not and: [class isBehavior]) ifFalse: 		[^self error: 'first arg must identify class'].	fName _ aNode args second value.	index _ class instVarNames		indexOf: fName		ifAbsent: [^self error: 'second arg must be instVar'].	fetchNode _ TSendNode new		setSelector: #fetchPointer:ofObject:		receiver: (TVariableNode new setName: 'interpreterProxy')		arguments: (Array			with: (TConstantNode new setValue: index - 1)			with: aNode receiver).	cName _ self nameOrValue: aNode args third.	class _ Smalltalk 		at: (cName asSymbol) 		ifAbsent: [nil].	(class isNil not and: [class isBehavior]) ifFalse: 		[^self error: 'third arg must identify class'].	class ccg: self generateCoerceToValueFrom: fetchNode on: aStream! !!TestCodeGenerator methodsFor: 'C translation' stamp: 'acg 10/5/1999 06:23'!generateAsValue: aNode on: aStream indent: anInteger	| cName class |	cName _ self nameOrValue: aNode args first.	class _ Smalltalk 		at: (cName asSymbol) 		ifAbsent: [nil].	(class isNil not and: [class isBehavior]) ifFalse: 		[^self error: 'first arg must identify class'].	class ccg: self generateCoerceToValueFrom: aNode receiver on: aStream! !!TestCodeGenerator methodsFor: 'C translation' stamp: 'acg 10/5/1999 06:36'!initializeCTranslationDictionary 	"Initialize the dictionary mapping message names to actions for C code generation."	| pairs |	super initializeCTranslationDictionary.	pairs _ #(		#asCInt						#generateAsCInt:on:indent:		#asCUnsigned				#generateAsCUnsigned:on:indent:		#asCBoolean					#generateAsCBoolean:on:indent:		#asCDouble					#generateAsCDouble		#asSmallIntegerObj			#generateAsSmallIntegerObj:on:indent:		#asPositiveIntegerObj		#generateAsPositiveIntegerObj:on:indent:		#asBooleanObj				#generateAsBooleanObj:on:indent:		#asFloatObj					#generateAsFloatObj:on:indent:		#asIf:var:					#generateAsIfVar:on:indent:		#asIf:var:asValue:			#generateAsIfVarAsValue:on:indent:		#asIf:var:put:				#generateAsIfVarPut:on:indent:		#field:						#generateField:on:indent:		#field:put:					#generateFieldPut:on:indent:				#class						#generateClass:on:indent:		#stSize						#generateStSize:on:indent:		#stAt:						#generateStAt:on:indent:		#stAt:put:					#generateStAtPut:on:indent:		#asCharPtr					#generateAsCharPtr:on:indent:		#asIntPtr					#generateAsIntPtr:on:indent:		#cPtrAsOop					#generateCPtrAsOop:on:indent:		#next						#generateNext:on:indent:		#asOop:						#generateAsOop:on:indent:		#asValue:					#generateAsValue:on:indent:		#isFloat						#generateIsFloat:on:indent:		#isIndexable					#generateIsIndexable:on:indent:		#isIntegerOop				#generateIsIntegerOop:on:indent:		#isIntegerValue				#generateIsIntegerValue:on:indent:		#FloatOop					#generateIsFloatValue:on:indent:		#isWords					#generateIsWords:on:indent:		#isWordsOrBytes				#generateIsWordsOrBytes:on:indent:		#isPointers					#generateIsPointers:on:indent:		#isNil						#generateIsNil:on:indent:		#isMemberOf:				#generateIsMemberOf:on:indent:		#isKindOf:					#generateIsKindOf:on:indent:		#fromStack:					#generateFromStack:on:indent:		#clone						#generateClone:on:indent		#new						#generateNew:on:indent		#new:						#generateNewSize:on:indent		#superclass					#generateSuperclass:on:indent:	).	1 to: pairs size by: 2 do: [:i |		translationDict at: (pairs at: i) put: (pairs at: i + 1)].! !!TestTMethod methodsFor: 'transformations' stamp: 'acg 10/4/1999 20:02'!recordDeclarations	"Record C type declarations of the forms		self returnTypeC: 'float'.		self var: #foo declareC: 'float foo'		self var: #foo as: Class	 and remove the declarations from the method body."	| newStatements isDeclaration theClass |	newStatements _ OrderedCollection new: parseTree statements size.	parseTree statements do: 		[:stmt |		 isDeclaration _ false.		 stmt isSend ifTrue: 			[stmt selector = #var:declareC: ifTrue:				[isDeclaration _ true.				declarations at: stmt args first value asString put: stmt args last value].			 stmt selector = #var:as: ifTrue:				[isDeclaration _ true.				 theClass _ Smalltalk 					at: stmt args last name asSymbol					ifAbsent: [^self error: 'declarator must be a Behavior'].				 (theClass isKindOf: Behavior)					ifFalse: [^self error: 'declarator must be a Behavior'].				 declarations 					at: stmt args first value asString 					put: (theClass ccgDeclareCForVar: stmt args first value asString)].			 stmt selector = #returnTypeC: ifTrue: 				[isDeclaration _ true.				 returnType _ stmt args last value]].		 isDeclaration ifFalse: [newStatements add: stmt]].	parseTree setStatements: newStatements asArray! !!Unsigned class methodsFor: 'as yet unclassified' stamp: 'acg 10/5/1999 06:04'!ccg: cg generateCoerceToOopFrom: aNode on: aStream	cg generateCoerceToUnsignedObjectFrom: aNode on: aStream! !!Unsigned class methodsFor: 'as yet unclassified' stamp: 'acg 10/5/1999 06:11'!ccg: cg generateCoerceToValueFrom: aNode on: aStream	cg generateCoerceToUnsignedValueFrom: aNode on: aStream! !Array class removeSelector: #ccg:generateCoerceToValueFrom:on:!ByteArray class removeSelector: #ccg:generateCoerceToValueFrom:on:!TestCodeGenerator removeSelector: #generateCoerceToBooleanFrom:on:!TestCodeGenerator removeSelector: #generateCoerceToPtrFromObject:on:!TestCodeGenerator removeSelector: #generateCoerceToUnsignedFrom:on:!TestCodeGenerator removeSelector: #generateCoerceToSmallIntegerFrom:on:!TestCodeGenerator removeSelector: #generateCoerceToFloatFrom:on:!Unsigned removeSelector: #ccg:generateCoerceToOopFrom:on:!