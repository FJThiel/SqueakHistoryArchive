'From Squeak 2.3 of January 14, 1999 on 13 April 1999 at 11:34:37 am'!"Change Set:		tabletTweaks-jhmDate:			13 April 1999Author:			John MaloneyMake the tablet drawing examples scale to the current tablet resolution and Display size."!!InputSensor methodsFor: 'tablet' stamp: 'jm 4/13/1999 11:02'!tabletExtent	"Answer the full tablet extent in tablet coordinates."	| params |	params _ self primTabletGetParameters: 1.	params ifNil: [^ self error: 'no tablet available'].	^ (params at: 1)@(params at: 2)! !!InputSensor methodsFor: 'tablet' stamp: 'jm 4/13/1999 11:12'!tabletPoint	"Answer the current position of the first tablet pointing device (pen, puck, or eraser) in tablet coordinates."	| data |	data _ self primTabletRead: 1.  "state of first/primary pen"	^ (data at: 3) @ (data at: 4)! !!Pen class methodsFor: 'tablet drawing examples' stamp: 'jm 4/13/1999 11:21'!feltTip: width cellSize: cellSize	"Warning: This example potentially uses a large amount of memory--it creates a Form with cellSize squared bits for every Display pixel."	"In this example, all drawing is done into a large, monochrome Form and then scaled down onto the Display using smoothing. The larger the cell size, the more possible shades of gray can be generated, and the smoother the resulting line appears. A cell size of 8 yields 64 possible grays, while a cell size of 16 gives 256 levels, which is about the maximum number of grays that the human visual system can distinguish. The width parameter determines the maximum line thickness. Requires the optional tablet support primitives which may not be supported on all platforms. Works best in full screen mode. Shift-mouse to exit." 	"Pen feltTip: 2.7 cellSize: 8"	| tabletScale bitForm pen warp p srcR dstR nibSize startP r |	tabletScale _ self tabletScaleFactor.	bitForm _ Form extent: Display extent * cellSize depth: 1.	pen _ Pen newOnForm: bitForm.	pen color: Color black.	warp _ (WarpBlt toForm: Display)		sourceForm: bitForm;		colorMap: (bitForm colormapIfNeededForDepth: Display depth);		cellSize: cellSize;		combinationRule: Form over.	Display fillColor: Color white.	Display restoreAfter: [		[Sensor shiftPressed and: [Sensor anyButtonPressed]] whileFalse: [			p _ (Sensor tabletPoint * cellSize * tabletScale) rounded.			nibSize _ (Sensor tabletPressure * (cellSize * width)) rounded.		     nibSize > 0				ifTrue: [					pen squareNib: nibSize.					startP _ pen location.					pen goto: p.					r _ startP rect: pen location.					dstR _ (r origin // cellSize) corner: ((r corner + nibSize + (cellSize - 1)) // cellSize).					srcR _ (dstR origin * cellSize) corner: (dstR corner * cellSize).					warp copyQuad: srcR innerCorners toRect: dstR]				ifFalse: [					pen place: p]]].! !!Pen class methodsFor: 'tablet drawing examples' stamp: 'jm 4/13/1999 11:20'!inkBrush	"Similar to simplePressurePen, but this example uses the average of the recent pen pressure values. The effect is that of a Japanese ink brush that comes up gradually off the paper as the brush is lifted, causing end (and beginning) of each stroke to taper. Requires the optional tablet support primitives which may not be supported on all platforms. Works best in full screen mode. Shift-mouse to exit." 	"Pen inkBrush"	| tabletScale historyMSecs pressureHistory pen now currentPressure sum averagePressure p |	tabletScale _ self tabletScaleFactor.	historyMSecs _ 120.	pressureHistory _ OrderedCollection new.	pen _ Pen newOnForm: Display.	pen color: Color black.	Display fillColor: Color white.	Display restoreAfter: [		[Sensor shiftPressed and: [Sensor anyButtonPressed]] whileFalse: [			"compute the average pressure over last historyMSecs milliseconds"			now _ Time millisecondClockValue.			currentPressure _ (20.0 * Sensor tabletPressure) rounded.			pressureHistory addLast: (Array with: now with: currentPressure).			[pressureHistory size > 0 and:			 [(pressureHistory first first + historyMSecs) < now]]				whileTrue: [pressureHistory removeFirst].  "prune old entries"			sum _ pressureHistory inject: 0 into: [:t :e | t + e last].			averagePressure _ sum // pressureHistory size.			p _ (Sensor tabletPoint * tabletScale) rounded.		     averagePressure > 0				ifTrue: [					pen roundNib: averagePressure.					pen goto: p]				ifFalse: [					pen place: p]]].! !!Pen class methodsFor: 'tablet drawing examples' stamp: 'jm 4/13/1999 11:13'!simplePressurePen	"An example of using a pressure sensitive pen to control the thickness of the pen. This requires the optional tablet support primitives which may not be supported on all platforms. Works best in full screen mode. Shift-mouse to exit." 	"Pen simplePressurePen"	| tabletScale pen pressure p |	tabletScale _ self tabletScaleFactor.	pen _ Pen newOnForm: Display.	pen color: Color black.	Display fillColor: Color white.	Display restoreAfter: [		[Sensor shiftPressed and: [Sensor anyButtonPressed]] whileFalse: [			p _ (Sensor tabletPoint * tabletScale) rounded.			pressure _ (15.0 * Sensor tabletPressure) rounded.		     pressure > 0				ifTrue: [					pen roundNib: pressure.					pen goto: p]				ifFalse: [					pen place: p]]].! !!Pen class methodsFor: 'tablet drawing examples' stamp: 'jm 4/13/1999 11:12'!tabletScaleFactor	"Answer a Point that scales tablet coordinates to Display coordinates, where the full extent of the tablet maps to the extent of the entire Display."	| tabletExtent |	tabletExtent _ Sensor tabletExtent.	^ (Display width asFloat / tabletExtent x) @ (Display height asFloat / tabletExtent y)! !!Pen class methodsFor: 'tablet drawing examples' stamp: 'jm 4/13/1999 11:21'!testTabletTracking	"A very simple example of drawing using the pen of a digitizing tablet such as a Wacom ArtZ tablet. This requires the optional tablet support primitives which may not be supported on all platforms. Compare the tracking speed of this example with that of testMouseTracking. On a Macintosh, the tablet primitives provide roughly 120 samples/second versus only 60 mouse samples/second, and the difference is noticable. Works best in full screen mode. Mouse down to draw a stroke, shift-mouse to exit." 	"Pen testTabletTracking"	| tabletScale pen p |	tabletScale _ self tabletScaleFactor.	pen _ Pen newOnForm: Display.	pen roundNib: 8.	pen color: Color black.	Display fillColor: Color white.	Display restoreAfter: [		[Sensor shiftPressed and: [Sensor anyButtonPressed]] whileFalse: [			p _ (Sensor tabletPoint * tabletScale) rounded.		     Sensor tabletPressure > 0				ifTrue: [pen goto: p]				ifFalse: [					pen color: Color random.					pen place: p]]].! !