'From Squeak2.9alpha of 5 August 2000 [latest update: #3291] on 19 January 2001 at 7:27:59 pm'!"Change Set:		diffFeedback-swDate:			19 January 2001Author:			Scott Wallace¥ Code panes show thin green-border feedback when showing diffs.¥ Annotation panes no longer show bordered feedback.¥ Can now use cmd-d in selector-list pane to toggle the showing of diffs in the code pane.  Especially handy for users who don't use the optional button panes, and in the change sorter where there *is* no optional button pane.¥ The alert formerly put up when diff-status was toggled from a menu is removed (no longer needed because of diff feedback in the pane)"!!Object methodsFor: 'testing' stamp: 'sw 1/18/2001 13:43'!showDiffs	"Answer whether the receiver, serving as the model of a text-bearing entity, is 'showing differences' -- if it is, the editor may wish to show special feedback"	^ false! !!PluggableTextMorph methodsFor: 'drawing' stamp: 'sw 1/19/2001 01:17'!drawOn: aCanvas 	"Include a thin red inset border for unaccepted edits, or, if the unaccepted edits are known to conflict with a change made somewhere else to the same method (typically), put a thick red frame"	super drawOn: aCanvas. 	self wantsFrameAdornments ifTrue:		[self hasEditingConflicts			ifTrue:				[aCanvas frameRectangle: self innerBounds width: 3 color: Color red] 			ifFalse:				[self hasUnacceptedEdits					ifTrue:						[model showDiffs							ifTrue:								[aCanvas frameRectangle: self innerBounds width: 3 color: Color green]							ifFalse:								[aCanvas frameRectangle: self innerBounds width: 1 color: Color red]]					ifFalse:						[model showDiffs							ifTrue:								[aCanvas frameRectangle: self innerBounds width: 1 color: Color green]]]]! !!PluggableTextMorph methodsFor: 'drawing' stamp: 'sw 1/18/2001 13:49'!wantsFrameAdornments	"Answer whether the receiver wishes to have red borders, etc., used to show editing state"	"An unsavory way to get the desired effect, sorry"	^ getTextSelector ~~ #annotation! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 1/19/2001 01:27'!messageListKey: aChar from: view	"Respond to a Command key.  I am a model with a code pane, and I also	have a listView that has a list of methods.  The view knows how to get	the list and selection."	| sel class |	aChar == $d ifTrue: [^ self toggleDiffing].	(class _ self selectedClassOrMetaClass) ifNil: [^ self arrowKey: aChar from: view].	sel _ self selectedMessageName.	aChar == $b ifTrue: [^ Browser fullOnClass: class selector: sel].	aChar == $N ifTrue: [^ self browseClassRefs].	aChar == $i ifTrue: [^ self methodHierarchy].	aChar == $h ifTrue: [^ self classHierarchy].	aChar == $p ifTrue: [^ self browseFullProtocol].	sel ifNotNil: 		[aChar == $m ifTrue: [^ Smalltalk browseAllImplementorsOf: sel].		aChar == $n ifTrue: [^ Smalltalk browseAllCallsOn: sel].		aChar == $v ifTrue: [^ self browseVersions].		aChar == $O ifTrue: [^ self openSingleMessageBrowser].		aChar == $x ifTrue: [^ self removeMessage]].	^ self arrowKey: aChar from: view! !!StringHolder methodsFor: 'as yet unclassified' stamp: 'sw 1/18/2001 13:38'!showDiffs	"Answer whether the receiver is showing differences.  When it is, pluggableTextMorphs will show a green border"	^ false! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 1/18/2001 13:54'!diffButton	|  outerButton aButton |	"Return a checkbox that lets the user decide whether diffs should be shown or not"	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleDiffing;		getSelector: #showDiffs.	outerButton addMorphBack: (StringMorph contents: 'diffs') lock.	outerButton setBalloonText: 'If checked, then code differences from the previous version, if any, will be shown.'.	^ outerButton! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 1/18/2001 13:58'!toggleDiff	"Retained for backward compatibility with existing buttons in existing images"	self toggleDiffing! !!CodeHolder methodsFor: 'diffs' stamp: 'sw 1/18/2001 13:56'!toggleDiffing	"Toggle whether diffs should be shown in the code pane"	self okToChange ifTrue:		[self showDiffs: self showDiffs not.		contents _ nil.		self changed: #contents]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 1/19/2001 01:31'!changeSetListKey: aChar from: view	"Respond to a Command key.  I am a model with a listView that has a list of changeSets."	aChar == $b ifTrue: [^ self browseChangeSet].	aChar == $f ifTrue: [^ self findCngSet].	aChar == $m ifTrue: [^ self newCurrent].	aChar == $n ifTrue: [^ self newSet].	aChar == $o ifTrue: [^ self fileOut].	aChar == $r ifTrue: [^ self rename].	aChar == $x ifTrue: [^ self remove].	aChar == $p ifTrue: [^ self addPreamble].	aChar == $c ifTrue: [^ self copyAllToOther].	^ self messageListKey: aChar from: view! !!ChangeSorter methodsFor: 'class list' stamp: 'sw 1/19/2001 01:33'!classListKey: aChar from: view	"Overridden to obviate spurious StringHolder processing of $f for findClass"	^ self messageListKey: aChar from: view! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 1/19/2001 01:28'!shiftedMessageMenu: aMenu	"Arm the menu so that it holds items appropriate to the message-list while the shift key is down.  Answer the menu."	^ aMenu addList: #(		-		('method pane'						makeIsolatedCodePane)		('toggle diffing (d)'					toggleDiffing)		('implementors of sent messages'		browseAllMessages)		('change category...'				changeCategory)			-		('sample instance'					makeSampleInstance)		('inspect instances'					inspectInstances)		('inspect subinstances'				inspectSubInstances)		-		('change sets with this method'		findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion)		('revert & remove from changes'	revertAndForget)		-		('more...'							unshiftedYellowButtonActivity))! !!ChangeSorter methodsFor: 'code pane' stamp: 'sw 1/19/2001 15:43'!toggleDiffing	"Toggle whether diffs should be shown in the code pane"	self okToChange ifTrue:		[self showDiffs: self showDiffs not.		self changed: #contents.		self update]! !!MessageSet methodsFor: 'message functions' stamp: 'sw 1/18/2001 13:58'!toggleDiffing	"Differs from the inherited version in that it does not set contents to nil"	self okToChange ifTrue:		[self showDiffs: self showDiffs not.		self changed: #contents]! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 1/19/2001 01:28'!versionsHelpString	^ 'Each entry in the list pane represents a version of the source code for the same method; the topmost entry is the current version, the next entry is the next most recent, etc.To revert to an earlier version, select it (in the list pane) and then do any of the following:  *  Choose "revert to this version" from the list pane menu.  *  Hit the "revert" button,  *  Type ENTER in the code pane  *  Type cmd-s (alt-s) in the code pane.The code pane shows the source for the selected version.  If "diffing" is in effect, then differences betwen the selected version and the version before it are pointed out in the pane.  Turn diffing on and off by choosing "toggle diffing" from the list pane menu, or hitting the "diffs" button, or hitting cmd-d when the cursor is over the list pane.To get a comparison between the selected version and the current version, choose "compare to current" from the list pane menu or hit the "compare to current" button.  (This is meaningless if the current version is selected, and is unnecessary if you''re interested in diffs from between the current version and the next-most-recent version, since the standard in-pane "diff" feature will give you that.)If further versions of the method in question have been submitted elsewhere since you launched a particular Versions Browser, it will still stay nicely up-to-date if you''re in Morphic and have asked that smart updating be maintained; if you''re in mvc or in morphic but with smart-updating turned off, a versions browser is only brought up to date when you activate its window (and when you issue "revert" from within it, of course,) and you can also use the "update list" command to make certain the versions list is up to date.Hit the "remove from changes" button, or choose the corresponding command in the list pane menu, to have the method in question deleted from the current change set.  This is useful if you''ve put debugging code into a method, and now want to strip it out and cleanse your current change set of all memory of the excursion.Note:  the optional annotation pane in versions browsers shows information about the *current* version of the method in the image, not about the selected version.'! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 1/19/2001 17:38'!versionsMenu: aMenu	"Fill aMenu with menu items appropriate to the receiver"	^ aMenu addList: #(		('compare to current'		compareToCurrentVersion)		('revert to this version'		fileInSelections)		('remove from changes'		removeMethodFromChanges)		('toggle diffing (d)'			toggleDiffing)		('update list'				reformulateList)		('help...'					offerVersionsHelp))! !MessageSet removeSelector: #toggleDiff!