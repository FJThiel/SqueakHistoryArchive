'From Squeak 2.3 beta of Nov 25, 1998 on 8 January 1999 at 11:04:54 am'!"Change Set:		lessCopy-tkIMDate:			8 January 1999Author:			Ted KaehlerFeatures:  	Less use of instVarAt:put:	Will correctly duplicate many more kinds of objects than before.	When a class has an inst var that requires special treatment, all info about the treatment resides in methods in that class.  Inst vars are mentioned by name, and the code can be found with inst var refs.  [Dan convinced me that this is important.]	A person defining a new Morph class must still think about the fields they are adding.  (The usual case -- none of the fields contain morphs outside your own submorph tree -- requires no action by the programmer.)	A checker watches for new inst vars in some classes.By default, all inst vars are sent veryDeepCopyWith: to obtain a copy.Special cases:If class has instances that should *always* be shared (Integer, Form), or wants to return something other than a deep copy (TextStyle), it should implement veryDeepCopyWith:.If a Morph points at another morph that is NOT owned by it (in its subMorph tree), that class must implement   veryDeepInner:  and  veryDeepFixupWith: .  See SimpleButtonMorph for a good example.  In that case, the second morph should not be copied, and should be pointed at by both the original and the copy.Here is what you have to ask yourself to seeing if you need to add the methods veryDeepFixupWith:   and   veryDeepInner:Does field X contain a Morph?  	If not, no action needed.Is the morph in field X a submorph of the object?	If so, no action needed.Could the morph in field X every appear on the screen (be a submorph of some *other* unrelated morph)?	If not, no action needed.  You *own* the morph.	If so, you must write the methods   veryDeepInner:  and  veryDeepFixupWith: , and in them, refrain from sending veryDeepCopyWith: to the contents of field X."!Object subclass: #DeepCopier	instanceVariableNames: 'references uniClasses '	classVariableNames: ''	poolDictionaries: ''	category: 'System-Object Storage'!!Object methodsFor: 'copying' stamp: 'tk 1/6/1999 19:41'!veryDeepCopy	"Do a complete tree copy using a dictionary.  An object in the tree twice is only copied once.  Both pointers point to one new copy."	| copier new |	copier _ DeepCopier new initialize.	new _ self veryDeepCopyWith: copier.	copier mapUniClasses.	copier references associationsDo: [:assoc | assoc value veryDeepFixupWith: copier].	^ new! !!Object methodsFor: 'copying' stamp: 'tk 1/6/1999 16:30'!veryDeepCopyWith: deepCopier	"Copy me and the entire tree of objects I point to.  An object in the tree twice is copied once, and both references point to him.  deepCopier holds a dictionary of objects we have seen.  Some classes refuse to be copied.  Some classes are picky about which fields get deep copied."	| class index sub subAss new uc sup has mine |	deepCopier references at: self ifPresent: [:newer | ^ newer]. 	"already did him"	class _ self class.	class isMeta ifTrue: [^ self].		"a class"	new _ self clone.	class isSystemDefined ifFalse: [		uc _ deepCopier uniClasses at: class ifAbsent: [nil].		uc ifNil: [deepCopier uniClasses at: class put: (uc _ self copyUniClass)].		new _ uc new].	deepCopier references at: self put: new.	"remember"	(class isVariable and: [class isPointers]) ifTrue: 		[index _ self basicSize.		[index > 0] whileTrue: 			[sub _ self basicAt: index.			(subAss _ deepCopier references associationAt: sub ifAbsent: [nil])				ifNil: [new basicAt: index put: (sub veryDeepCopyWith: deepCopier)]				ifNotNil: [new basicAt: index put: subAss value].			index _ index - 1]].	"Ask each superclass if it wants to share (weak copy) any inst vars"	new veryDeepInner: deepCopier.		"does super a lot"	"other superclasses want all inst vars deep copied"	sup _ class.  index _ class instSize.	[has _ sup compiledMethodAt: #veryDeepInner: ifAbsent: [nil].	mine _ sup instVarNames.	has ifNotNil: [index _ index - mine size]		ifNil: [1 to: mine size do: [:xx |				sub _ self instVarAt: index.				(subAss _ deepCopier references associationAt: sub ifAbsent: [nil])						"use association, not value, so nil is an exceptional value"					ifNil: [new instVarAt: index put: 								(sub veryDeepCopyWith: deepCopier)]					ifNotNil: [new instVarAt: index put: subAss value].				index _ index - 1]].	(sup _ sup superclass) == nil] whileFalse.	new rehash.	"force Sets and Dictionaries to rehash"	^ new! !!Object methodsFor: 'copying' stamp: 'tk 1/6/1999 17:39'!veryDeepFixupWith: deepCopier	"I have no fields and no superclass.  Catch the super call."! !!Object methodsFor: 'copying' stamp: 'tk 1/6/1999 15:47'!veryDeepInner: deepCopier	"I have no fields and no superclass"! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'tk 1/8/1999 08:00'!fileOut	"File out the receiver, to a file whose name is a function of the change-set name and of the date and the time."	"wod 5/12/1998: use #asFileName rather than #truncateTo:"	| file slips |	Cursor write showWhile:		[file _ FileStream newFileNamed:			(self name, FileDirectory dot, Utilities dateTimeSuffix, FileDirectory dot, 'cs') asFileName.		file header; timeStamp.		self fileOutPreambleOn: file.		self fileOutOn: file.		self fileOutPostscriptOn: file.		file trailer; close].	DeepCopier new checkVariables.	Preferences suppressCheckForSlips ifTrue: [^ self].	slips _ self checkForSlips.	(slips size > 0 and: [self confirm: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?'])		ifTrue: [Smalltalk browseMessageList: slips							name: 'Possible slips in ', name]! !!Character methodsFor: 'copying' stamp: 'tk 1/7/1999 16:50'!veryDeepCopyWith: deepCopier	"Return self.  I can't be copied."! !!Class methodsFor: 'fileIn/Out' stamp: 'tk 1/8/1999 08:01'!fileOutAsHtml: useHtml	"File a description of the receiver onto a new file whose base name is the name of the receiver."	| fileStream |	fileStream _ useHtml		ifTrue: [(FileStream newFileNamed: self name, FileDirectory dot, 'html') asHtml]		ifFalse: [FileStream newFileNamed: self name, FileDirectory dot, 'st'].	fileStream header; timeStamp.	self sharedPools size > 0 ifTrue: [		self shouldFileOutPools			ifTrue: [self fileOutSharedPoolsOn: fileStream]].	self fileOutOn: fileStream moveSource: false toFile: 0.	fileStream trailer; close.	DeepCopier new checkVariables.! !!DeepCopier commentStamp: 'tk 1/7/1999 14:24' prior: 0!I do veryDeepCopy.  I hold the dictionary of objects seen, and the correspondance (uniClass -> new uniClass).  See Object|veryDeepCopy which calls (self veryDeepCopyWith: aDeepCopier).When a tree of Morphs points at a morph outside of it, that morph should not be copied.  Use weak pointers for the potentially outside morphs.  Default is that any new class has all of its newly defined fields be deeply copied.  If a field needs to be weakly copied, define veryDeepInner: and veryDeepFixupWith:.(Object veryDeepCopyWith: notes which superclasses did not do veryDeepInner:, and very deep copies those vars).Key to seeing if you have to add the methods veryDeepFixupWith:   and   veryDeepInner:Does field X contain a morph?  If not, no action needed.Is the morph in field X a submorph of the object?  IS it down lower in the submorph tree?	If so, no action needed.Could the morph in field X every appear on the screen (be a submorph of some other morph)?	If not, no action needed.	If so, you must write the methods veryDeepFixupWith:   and   veryDeepInner:, and in them, refrain from sending veryDeepCopyWith: to the contents of field X.Rule:  If a morph stores a uniClass class (Player 57) as an object in a field, the new uniClass will not be stored there.   All uniClass instances do have a new class created for them.  (fix this by putting the old class in references and allow lookup?  Wrong if encounter it before seeing an instance?)Rule: If object A has object C in a field, and A says (^ C) for the copy, but object B has A in a normal field and it gets deepCopied, and A in encountered first, then there will be two copies of C.  (just be aware of it)!!DeepCopier methodsFor: 'like fullCopy' stamp: 'tk 1/8/1999 09:37'!checkDeep	"Write exceptions in the Transcript.  Every class that implements veryDeepInner: must copy all its inst vars.  Danger is that a user will add a new instance variable and forget to copy it.  This check is only run by hand once in a while to make sure nothing was forgotten.	DeepCopier new checkDeep 	"| mm |Transcript cr; show: 'Instance variables shared with the original object when it is copied'.(Smalltalk allClassesImplementing: #veryDeepInner:) do: [:aClass | 	(mm _ aClass instVarNames size) > 0 ifTrue: [		(aClass instSize - mm + 1) to: aClass instSize do: [:index |			((aClass compiledMethodAt: #veryDeepInner:) writesField: index) ifFalse: [				Transcript cr; show: aClass name; space; 					show: (aClass allInstVarNames at: index)]]]].! !!DeepCopier methodsFor: 'like fullCopy' stamp: 'tk 1/8/1999 07:46'!checkVariables	"Check that no indexed of inst vars have changed in certain classes.  If you get an error in this method, look at veryDeepCopyWith:, or tables in WeakFields and WeakFieldNames need to be updated.  	DeepCopier new checkVariables	"	| str str2 meth |	str _ '|veryDeepCopyWith: or veryDeepInner: is out of date.'.	Object instSize = 0 ifFalse: [self error: 'Many implementers of veryDeepCopyWith: are out of date'].	Morph superclass == Object ifFalse: [self error: 'Morph', str].	(Morph instVarNames copyFrom: 1 to: 6) = #('bounds' 'owner' 'submorphs' 			'fullBounds' 'color' 'extension') 		ifFalse: [self halt: 'Morph', str].	"added ones are OK"	"Every class that implements veryDeepInner: must copy all its inst vars.  Danger is that a user will add a new instance variable and forget to copy it.  So check that the last one is mentioned in the copy method."	(Smalltalk allClassesImplementing: #veryDeepInner:) do: [:aClass | 		((aClass compiledMethodAt: #veryDeepInner:) writesField: aClass instSize) ifFalse: [			aClass instSize > 0 ifTrue: [				self warnIverNotCopiedIn: aClass sel: #veryDeepInner:]]].	(Smalltalk allClassesImplementing: #veryDeepCopyWith:) do: [:aClass | 		meth _ aClass compiledMethodAt: #veryDeepCopyWith:.		(meth size > 20) & (meth literals includes: #veryDeepCopyWith:) not ifTrue: [			(meth writesField: aClass instSize) ifFalse: [				self warnIverNotCopiedIn: aClass sel: #veryDeepCopyWith:]]].	str2 _ 'Player|copyUniClass and DeepCopier|mapUniClasses are out of date'.	Behavior instVarNames = #('superclass' 'methodDict' 'format' 'subclasses' )		ifFalse: [self error: str2].	ClassDescription instVarNames = #('instanceVariables' 'organization' )		ifFalse: [self error: str2].	Class instVarNames = #('name' 'classPool' 'sharedPools' )		ifFalse: [self error: str2].	Model superclass == Object ifFalse: [self error: str2].	Player superclass == Model ifFalse: [self error: str2].	Model class instVarNames = #() ifFalse: [self error: str2].	Player class instVarNames = #('scripts' 'slotInfo')		ifFalse: [self error: str2].! !!DeepCopier methodsFor: 'like fullCopy' stamp: 'tk 1/8/1999 07:17'!warnIverNotCopiedIn: aClass sel: sel	"Warn the user to update veryDeepCopyWith: or veryDeepInner:"	self inform: ('Your file operation succeeded.\\An instance variable was added to to class ', aClass name, ',\and it is not copied in the method ', sel, '.\Please rewrite it to handle all instance variables.\See DeepCopier class comment.') withCRs.	Browser openMessageBrowserForClass: aClass selector: sel editString: nil.! !!FilePackage methodsFor: 'fileIn/fileOut' stamp: 'tk 1/8/1999 08:00'!fileOut	| fileName stream |	fileName := FillInTheBlank request: 'Enter the file name' initialAnswer:''.	stream := FileStream newFileNamed: fileName.	sourceSystem isEmpty ifFalse:[		stream nextChunkPut: sourceSystem printString;cr ].	self fileOutOn: stream.	stream cr; cr.	self classes do:[:cls|		cls needsInitialize ifTrue:[			stream cr; nextChunkPut: cls name,' initialize']].	stream cr.	stream close.	DeepCopier new checkVariables.! !!Morph methodsFor: 'copying' stamp: 'tk 1/6/1999 17:27'!veryDeepCopyWith: deepCopier	"Copy me and the entire tree of objects I point to.  An object in the tree twice is copied once, and both references point to him.  deepCopier holds a dictionary of objects we have seen.  See veryDeepInner:, veryDeepFixupWith:"	self prepareToBeSaved.	^ super veryDeepCopyWith: deepCopier! !!Morph methodsFor: 'copying' stamp: 'tk 1/7/1999 12:32'!veryDeepFixupWith: deepCopier	"If some fields were weakly copied, fix new copy here.""super veryDeepFixupWith: deepCopier.""My owner should already have been fixed up."! !!Morph methodsFor: 'copying' stamp: 'tk 1/7/1999 12:30'!veryDeepInner: deepCopier	"The inner loop, so it can be overridden when a field should not be traced."	"super veryDeepInner: deepCopier.	know Object has no inst vars"	bounds _ bounds clone.	"Points are shared with original"	"owner _ owner.	special, see veryDeepFixupWith:"	submorphs _ submorphs veryDeepCopyWith: deepCopier.	self submorphsDo: [:mySub | mySub privateOwner: self].		"I am the owner!!"		"My owner field:  If owner is in tree being copied, he will set it.  		If not, if I am top object, caller will addMorph: me to another morph.			if I am not in the submorph tree, I should not be copied.  The field I			am in needs to be weakly copied."	"fullBounds _ fullBounds.	fullBounds is shared with original!!"	color _ color veryDeepCopyWith: deepCopier.		"color, if simple, will return self. may be complex"	extension _ extension veryDeepCopyWith: deepCopier.		"extension is treated like any generic inst var"! !!BookPageSorterMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:36'!veryDeepFixupWith: deepCopier	"If fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals."super veryDeepFixupWith: deepCopier.book _ deepCopier references at: book ifAbsent: [book].! !!BookPageSorterMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:36'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."book _ book.		Weakly copied"pageHolder _ pageHolder veryDeepCopyWith: deepCopier.! !!BookPageThumbnailMorph methodsFor: 'copying' stamp: 'tk 1/6/1999 19:35'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.page _ deepCopier references at: page ifAbsent: [page].bookMorph _ deepCopier references at: bookMorph ifAbsent: [bookMorph].! !!BookPageThumbnailMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:35'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."page _ page.		Weakly copied"pageNumber _ pageNumber veryDeepCopyWith: deepCopier."bookMorph _ bookMorph.		All weakly copied"flipOnClick _ flipOnClick veryDeepCopyWith: deepCopier. ! !!HaloMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 17:37'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].innerTarget _ deepCopier references at: innerTarget ifAbsent: [innerTarget].! !!HaloMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 17:36'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."target _ target.		Weakly copied""innerTarget _ innerTarget.		Weakly copied"positionOffset _ positionOffset veryDeepCopyWith: deepCopier.angleOffset _ angleOffset veryDeepCopyWith: deepCopier.minExtent _ minExtent veryDeepCopyWith: deepCopier.growingOrRotating _ growingOrRotating veryDeepCopyWith: deepCopier.! !!MenuItemMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:54'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].arguments _ arguments collect: [:each |	deepCopier references at: each ifAbsent: [each]].! !!MenuItemMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 07:40'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.isInTransition _ isInTransition veryDeepCopyWith: deepCopier.isEnabled _ isEnabled veryDeepCopyWith: deepCopier.subMenu _ subMenu veryDeepCopyWith: deepCopier.isSelected _ isSelected veryDeepCopyWith: deepCopier."target _ target.		Weakly copied""selector _ selector.		a Symbol"arguments _ arguments.		"All weakly copied"! !!MenuMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:37'!veryDeepFixupWith: deepCopier	"If fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals."super veryDeepFixupWith: deepCopier.defaultTarget _ deepCopier references at: defaultTarget ifAbsent: [defaultTarget].popUpOwner _ deepCopier references at: popUpOwner ifAbsent: [popUpOwner].! !!MenuMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 07:41'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."defaultTarget _ defaultTarget.		Weakly copied"lastSelection _ lastSelection veryDeepCopyWith: deepCopier.stayUp _ stayUp veryDeepCopyWith: deepCopier.originalEvent _ originalEvent veryDeepCopyWith: deepCopier.popUpOwner _ popUpOwner.		"Weakly copied"! !!MorphThumbnail methodsFor: 'copying' stamp: 'tk 1/8/1999 09:39'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.morphRepresented _ deepCopier references at: morphRepresented 		ifAbsent: [morphRepresented].! !!MorphThumbnail methodsFor: 'copying' stamp: 'tk 1/8/1999 09:39'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.morphRepresented _ morphRepresented.		"Weakly copied"! !!PartsViewer methodsFor: 'copying' stamp: 'tk 1/7/1999 16:38'!veryDeepFixupWith: deepCopier	"If fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.scriptedPlayer _ deepCopier references at: scriptedPlayer ifAbsent: [scriptedPlayer].! !!PartsViewer methodsFor: 'copying' stamp: 'tk 1/7/1999 16:37'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."scriptedPlayer _ scriptedPlayer.		Weakly copied"partsBank _ partsBank veryDeepCopyWith: deepCopier.scriptsBank _ scriptsBank veryDeepCopyWith: deepCopier.! !!PluggableButtonMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 16:53'!veryDeepFixupWith: deepCopier	"If fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.model _ deepCopier references at: model ifAbsent: [model].! !!PluggableButtonMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 16:53'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."model _ model.		Weakly copied"label _ label veryDeepCopyWith: deepCopier."getStateSelector _ getStateSelector.		a Symbol""actionSelector _ actionSelector.		a Symbol""getLabelSelector _ getLabelSelector.		a Symbol""getMenuSelector _ getMenuSelector.		a Symbol"shortcutCharacter _ shortcutCharacter veryDeepCopyWith: deepCopier.askBeforeChanging _ askBeforeChanging veryDeepCopyWith: deepCopier.triggerOnMouseDown _ triggerOnMouseDown veryDeepCopyWith: deepCopier.offColor _ offColor veryDeepCopyWith: deepCopier.onColor _ onColor veryDeepCopyWith: deepCopier.feedbackColor _ feedbackColor veryDeepCopyWith: deepCopier.showSelectionFeedback _ showSelectionFeedback veryDeepCopyWith: deepCopier.allButtons _ nil.		"a cache"! !!PopUpChoiceMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:44'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].arguments _ arguments collect: [:each |	deepCopier references at: each ifAbsent: [each]].getItemsArgs _ getItemsArgs collect: [:each |	deepCopier references at: each ifAbsent: [each]].choiceArgs _ choiceArgs collect: [:each |	deepCopier references at: each ifAbsent: [each]].! !!PopUpChoiceMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:43'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."target _ target.		Weakly copied""actionSelector _ actionSelector.		a Symbol""arguments _ arguments.		All weakly copied""getItemsSelector _ getItemsSelector.		a Symbol""getItemsArgs _ getItemsArgs.		All weakly copied""choiceSelector _ choiceSelector.		a Symbol"choiceArgs _ choiceArgs.		"All weakly copied"     ! !!ProjectViewMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 08:56'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.project _ deepCopier references at: project ifAbsent: [project].lastProjectThumbnail _ deepCopier references at: lastProjectThumbnail 				ifAbsent: [lastProjectThumbnail].! !!ProjectViewMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 08:55'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."project _ project.		Weakly copied"lastProjectThumbnail _ lastProjectThumbnail.		"Weakly copied"! !!ScriptEditorMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 16:57'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.playerScripted _ deepCopier references at: playerScripted ifAbsent: [playerScripted].! !!ScriptEditorMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 07:41'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.scriptName _ scriptName veryDeepCopyWith: deepCopier.firstTileRow _ firstTileRow veryDeepCopyWith: deepCopier.timeStamp _ timeStamp veryDeepCopyWith: deepCopier.playerScripted _ playerScripted.		"Weakly copied"! !!SimpleButtonMorph methodsFor: 'copying' stamp: 'tk 1/6/1999 17:55'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].arguments _ arguments collect: [:each |	deepCopier references at: each ifAbsent: [each]].! !!SimpleButtonMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:35'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."target _ target.		Weakly copied""actionSelector _ actionSelector.		a Symbol""arguments _ arguments.		All weakly copied"actWhen _ actWhen veryDeepCopyWith: deepCopier.oldColor _ oldColor veryDeepCopyWith: deepCopier.! !!SimpleSliderMorph methodsFor: 'copying' stamp: 'tk 1/6/1999 19:24'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].arguments _ arguments collect: [:each |	deepCopier references at: each ifAbsent: [each]].! !!SimpleSliderMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:35'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."target _ target.		Weakly copied""arguments _ arguments.		All weakly copied"minVal _ minVal veryDeepCopyWith: deepCopier.		"will be fast if integer"maxVal _ maxVal veryDeepCopyWith: deepCopier.truncate _ truncate veryDeepCopyWith: deepCopier.! !!SketchEditorMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:24'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.hostView _ deepCopier references at: hostView ifAbsent: [hostView].enclosingPasteUpMorph _ deepCopier references at: enclosingPasteUpMorph 			ifAbsent: [enclosingPasteUpMorph].! !!SketchEditorMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:23'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."hostView _ hostView.		Weakly copied"stampForm _ stampForm veryDeepCopyWith: deepCopier.canvasRectangle _ canvasRectangle veryDeepCopyWith: deepCopier.palette _ palette veryDeepCopyWith: deepCopier.currentColor _ currentColor veryDeepCopyWith: deepCopier.ticksToDwell _ ticksToDwell veryDeepCopyWith: deepCopier.rotationCenter _ rotationCenter veryDeepCopyWith: deepCopier.registrationPoint _ registrationPoint veryDeepCopyWith: deepCopier.newPicBlock _ newPicBlock veryDeepCopyWith: deepCopier.emptyPicBlock _ emptyPicBlock veryDeepCopyWith: deepCopier.action _ action veryDeepCopyWith: deepCopier.paintingForm _ paintingForm veryDeepCopyWith: deepCopier.dimForm _ dimForm veryDeepCopyWith: deepCopier.buff _ buff veryDeepCopyWith: deepCopier.brush _ brush veryDeepCopyWith: deepCopier.paintingFormPen _ paintingFormPen veryDeepCopyWith: deepCopier.formCanvas _ formCanvas veryDeepCopyWith: deepCopier.picToBuff _ picToBuff veryDeepCopyWith: deepCopier.brushToBuff _ brushToBuff veryDeepCopyWith: deepCopier.buffToBuff _ buffToBuff veryDeepCopyWith: deepCopier.buffToPic _ buffToPic veryDeepCopyWith: deepCopier.rotationButton _ rotationButton veryDeepCopyWith: deepCopier.scaleButton _ scaleButton veryDeepCopyWith: deepCopier.strokeOrigin _ strokeOrigin veryDeepCopyWith: deepCopier.cumRot _ cumRot veryDeepCopyWith: deepCopier.cumMag _ cumMag veryDeepCopyWith: deepCopier.undoBuffer _ undoBuffer veryDeepCopyWith: deepCopier.lastEvent _ lastEvent veryDeepCopyWith: deepCopier.currentNib _ currentNib veryDeepCopyWith: deepCopier.enclosingPasteUpMorph _ enclosingPasteUpMorph.	"weakly copied"                              ! !!StringButtonMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:47'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].arguments _ arguments collect: [:each |	deepCopier references at: each ifAbsent: [each]].! !!StringButtonMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:46'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."target _ target.		Weakly copied""actionSelector _ actionSelector.		a Symbol""arguments _ arguments.		All weakly copied"actWhen _ actWhen veryDeepCopyWith: deepCopier.oldColor _ oldColor veryDeepCopyWith: deepCopier.! !!TabMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 10:39'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.morphToInstall _ deepCopier references at: morphToInstall ifAbsent: [morphToInstall].! !!TabMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 10:39'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.morphToInstall _ morphToInstall.		"Weakly copied"! !!TabTokenMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 10:42'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.tabRepresented _ deepCopier references at: tabRepresented ifAbsent: [tabRepresented].! !!TabTokenMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 10:41'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.tabRepresented _ tabRepresented.		"Weakly copied"! !!TextMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 10:49'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.container _ deepCopier references at: container ifAbsent: [container]."Caller beware: it makes no sense to share pointers to existing predecessor and successor"predecessor _ deepCopier references at: predecessor ifAbsent: [nil].successor _ deepCopier references at: successor ifAbsent: [nil].! !!TextMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 10:47'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.textStyle _ textStyle veryDeepCopyWith: deepCopier.text _ text veryDeepCopyWith: deepCopier.wrapFlag _ wrapFlag veryDeepCopyWith: deepCopier.paragraph _ paragraph veryDeepCopyWith: deepCopier.editor _ editor veryDeepCopyWith: deepCopier."container _ container.		Weakly copied""predecessor _ predecessor.		All weakly copied"successor _ successor.		"All weakly copied"        ! !!TextStyle methodsFor: 'Disk I/O' stamp: 'tk 1/8/1999 07:45'!veryDeepCopyWith: deepCopier	"All inst vars are meant to be shared"	#veryDeepCopyWith:.	"to satisfy checkVariables"	^ deepCopier references at: self ifAbsent: [		deepCopier references at: self put: self clone].	"remember"! !!ThreePhaseButtonMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:02'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].arguments _ arguments collect: [:each |	deepCopier references at: each ifAbsent: [each]].! !!ThreePhaseButtonMorph methodsFor: 'copying' stamp: 'tk 1/8/1999 09:01'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.offImage _ offImage veryDeepCopyWith: deepCopier.pressedImage _ pressedImage veryDeepCopyWith: deepCopier.state _ state veryDeepCopyWith: deepCopier."target _ target.		Weakly copied""actionSelector _ actionSelector.		Symbol""arguments _ arguments.		Weakly copied"actWhen _ actWhen.		"Symbol"! !!ThumbnailMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:57'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.objectToView _ deepCopier references at: objectToView ifAbsent: [objectToView].! !!ThumbnailMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 14:56'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."objectToView _ objectToView.		Weakly copied"viewSelector _ viewSelector veryDeepCopyWith: deepCopier.lastSketchForm _ lastSketchForm veryDeepCopyWith: deepCopier.lastFormShown _ lastFormShown veryDeepCopyWith: deepCopier.! !!TileMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 17:15'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.actualObject _ deepCopier references at: actualObject ifAbsent: [actualObject].! !!TileMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 17:14'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.type _ type veryDeepCopyWith: deepCopier.slotName _ slotName veryDeepCopyWith: deepCopier.literal _ literal veryDeepCopyWith: deepCopier.operatorOrExpression _ operatorOrExpression veryDeepCopyWith: deepCopier."actualObject _ actualObject.		Weakly copied"downArrow _ downArrow veryDeepCopyWith: deepCopier.upArrow _ upArrow veryDeepCopyWith: deepCopier.suffixArrow _ suffixArrow veryDeepCopyWith: deepCopier.typeColor _ typeColor veryDeepCopyWith: deepCopier.lastArrowTick _ lastArrowTick veryDeepCopyWith: deepCopier.nArrowTicks _ nArrowTicks veryDeepCopyWith: deepCopier.operatorReadoutString _ operatorReadoutString veryDeepCopyWith: deepCopier.possessive _ possessive veryDeepCopyWith: deepCopier.            ! !!URLMorph commentStamp: 'tk 1/7/1999 17:09' prior: 0!This morph represents a URL for a SqueakPage. It displays the thumbnail for the associated page, if available. Used in page sorters and for bookmarks.This morph has several options:  a. It can act like a thumbnail for sorting (in which case it can be picked up and dragged) or it acts as a bookmark (in which case clicking on it activates it).  b. If it has book set to true, it is a page in a book.  Clicking fetches the index of the book, opens it to the first page, and puts it in the hand.A thumbnail on a known book:	(URLMorph grabURL: 'ftp://doltest1.disney.com/squeak/test/p1.sp')		book: true.A thumbnail ona single PasteUpMorph:Make a PasteUpMorph with any morphs in it.Decide where it should live, make a url string, and copy it.	'file://HardDisk/books/book1/myPage.sp'	'ftp://doltest1.disney.com/squeak/test/p1.sp'Choose 'Save as Web Morph'Paste in the url.Drop the resulting thumbnail into some morph.See SqueakPage's comment for the stages of in/out.url page 		A SqueakPageisBookmark 		Booleanbook 	A Boolean -- whether I represent a whole book or a page.!!UpdatingRectangleMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 17:17'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].! !!UpdatingRectangleMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 17:17'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."target _ target.		Weakly copied"lastValue _ lastValue veryDeepCopyWith: deepCopier."getSelector _ getSelector.		a Symbol""putSelector _ putSelector.		a Symbol"contents _ contents veryDeepCopyWith: deepCopier.! !!UpdatingStringMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 15:37'!veryDeepFixupWith: deepCopier	"If target field is weakly copied, fix it here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.target _ deepCopier references at: target ifAbsent: [target].! !!UpdatingStringMorph methodsFor: 'copying' stamp: 'tk 1/7/1999 15:36'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.format _ format veryDeepCopyWith: deepCopier."target _ target.		Weakly copied"lastValue _ lastValue veryDeepCopyWith: deepCopier.getSelector _ getSelector veryDeepCopyWith: deepCopier.putSelector _ putSelector veryDeepCopyWith: deepCopier.floatPrecision _ floatPrecision veryDeepCopyWith: deepCopier.growable _ growable veryDeepCopyWith: deepCopier.! !!UpdatingStringMorphWithArgument methodsFor: 'copying' stamp: 'tk 1/7/1999 15:40'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.argumentTarget _ deepCopier references at: argumentTarget 			ifAbsent: [argumentTarget].! !!UpdatingStringMorphWithArgument methodsFor: 'copying' stamp: 'tk 1/7/1999 15:39'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."argumentTarget _ argumentTarget.		Weakly copied"argumentGetSelector _ argumentGetSelector veryDeepCopyWith: deepCopier.! !!Viewer methodsFor: 'copying' stamp: 'tk 1/7/1999 17:01'!veryDeepFixupWith: deepCopier	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.scriptedPlayer _ deepCopier references at: scriptedPlayer ifAbsent: [scriptedPlayer].! !!Viewer methodsFor: 'copying' stamp: 'tk 1/8/1999 07:42'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier.scriptedPlayer _ scriptedPlayer.		"Weakly copied"	"Store into it to satisfy checkVariables"! !!WorldMorph methodsFor: 'fileIn/Out' stamp: 'tk 1/7/1999 14:29'!veryDeepCopyWith: deepCopier	"If a WorldMorph really needs to be veryDeepCopied, only copy submorphs, model, and stepList.  Lots of special stuff.  See storeDataOn:"	^ self error: 'Worlds should not be copied'	"maybe ^ self later?  For now, catch all offenders."! !DeepCopier removeSelector: #warnIvarOf:!DeepCopier removeSelector: #addWeakField:to:!DeepCopier removeSelector: #weakFieldsOf:!DeepCopier removeSelector: #resolveWeakRefs!Morph removeSelector: #veryDeepCopy!"Postscript:"!