'From Squeak2.8alpha of 6 February 2000 [latest update: #2098] on 13 May 2000 at 5:57:01 pm'!"Change Set:		PLG3-VmAndSupportDate:			13 May 2000Author:			Tim Rowledge & Andreas RaabPluginisation pass 3: Modifications to Interpreter, InterpreterProxy, and InterpreterPlugin. Also contains the changes in the C support code."!ObjectMemory subclass: #Interpreter	instanceVariableNames: 'activeContext theHomeContext method receiver instructionPointer stackPointer localIP localSP localHomeContext messageSelector argumentCount newMethod currentBytecode successFlag primitiveIndex methodCache atCache lkupClass reclaimableContextCount nextPollTick nextWakeupTick lastTick interruptKeycode interruptPending semaphoresToSignal semaphoresToSignalCount savedWindowSize fullScreenFlag deferDisplayUpdates pendingFinalizationSignals compilerInitialized compilerHooks extraVMMemory interpreterVersion interpreterProxy obsoleteNamedPrimitiveTable obsoleteIndexedPrimitiveTable '	classVariableNames: 'ActiveProcessIndex AtCacheEntries AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BlockArgumentCountIndex BytecodeTable CacheProbeMax CallerIndex CharacterValueIndex CompilerHooksSize DirBadPath DirEntryFound DirNoMoreEntries ExcessSignalsIndex FirstLinkIndex HeaderIndex HomeIndex InitialIPIndex InstanceSpecificationIndex InstructionPointerIndex LastLinkIndex LiteralStart MaxPrimitiveIndex MessageArgumentsIndex MessageDictionaryIndex MessageLookupClassIndex MessageSelectorIndex MethodArrayIndex MethodCacheClass MethodCacheEntries MethodCacheEntrySize MethodCacheMask MethodCacheMethod MethodCachePrim MethodCacheSelector MethodCacheSize MethodIndex MyListIndex NextLinkIndex PrimitiveExternalCallIndex PrimitiveTable PriorityIndex ProcessListsIndex ReceiverIndex SelectorStart SemaphoresToSignalSize SenderIndex StackPointerIndex StreamArrayIndex StreamIndexIndex StreamReadLimitIndex StreamWriteLimitIndex SuperclassIndex SuspendedContextIndex TempFrameStart ValueIndex XIndex YIndex '	poolDictionaries: ''	category: 'VMConstruction-Interpreter'!Object subclass: #InterpreterPlugin	instanceVariableNames: 'interpreterProxy moduleName '	classVariableNames: ''	poolDictionaries: ''	category: 'VMConstruction-Plugins'!Interpreter subclass: #InterpreterSimulator	instanceVariableNames: 'byteCount sendCount traceOn myBitBlt displayForm filesOpen imageName messageQueue mappedPluginEntries pluginList '	classVariableNames: ''	poolDictionaries: ''	category: 'VMConstruction-Interpreter'!!Interpreter methodsFor: 'initialization' stamp: 'ar 5/11/2000 20:41'!initializeInterpreter: bytesToShift	"Initialize Interpreter state before starting execution of a new image."	interpreterProxy _ self sqGetInterpreterProxy.	self initializeObjectMemory: bytesToShift.	self initCompilerHooks.	self flushExternalPrimitives.	activeContext	_ nilObj.	theHomeContext	_ nilObj.	method			_ nilObj.	receiver		_ nilObj.	messageSelector	_ nilObj.	newMethod		_ nilObj.	self flushMethodCache.	self loadInitialContext.	interruptCheckCounter _ 0.	nextPollTick _ 0.	nextWakeupTick _ 0.	lastTick _ 0.	interruptKeycode _ 2094.  "cmd-."	interruptPending _ false.	semaphoresToSignalCount _ 0.	deferDisplayUpdates _ false.	pendingFinalizationSignals _ 0.! !!Interpreter methodsFor: 'other primitives' stamp: 'ar 5/13/2000 15:15'!primitiveExternalCall	"Call an external primitive. The external primitive methods contain as first literal an array consisting of:		* The module name (String | Symbol)		* The function name (String | Symbol)		* The session ID (SmallInteger) [OBSOLETE]		* The function address (Integer)	For fast failures the primitive index of any method where the external prim is not found is rewritten in the method cache with zero. This allows for ultra fast responses as long as the method stays in the cache.	The fast failure response relies on lkupClass being properly set. This is done in #addToMethodCacheSel:class:method:primIndex: to compensate for execution of methods that are looked up in a superclass (such as in primitivePerformAt).	With the latest modifications (e.g., actually flushing the function addresses from the VM), the session ID is obsolete. But for backward compatibility it is still kept around. Also, a failed lookup is reported specially. If a method has been looked up and not been found, the function address is stored as -1 (e.g., the SmallInteger -1 to distinguish from 16rFFFFFFFF which may be returned from the lookup).	It is absolutely okay to remove the rewrite if we run into any problems later on. It has an approximate speed difference of 30% per failed primitive call which may be noticable but if, for any reasons, we run into problems (like with J3) we can always remove the rewrite.	"	| lit functionAddress addr moduleName functionName moduleLength functionLength index |	"Fetch the first literal of the method"	self success: (self literalCountOf: newMethod) > 0."@@: Could this be omitted for speed?!!"	successFlag ifFalse:[^nil].	lit _ self literal: 0 ofMethod: newMethod.	"Check if it's an array of length 4"	self success: ((self fetchClassOf: lit) = (self splObj: ClassArray) 					and:[(self lengthOf: lit) = 4]).	successFlag ifFalse:[^nil].	"Look at the function address in case it has been loaded before"	addr _ self fetchPointer: 3 ofObject: lit.	"Check if we have already looked up the function and failed."	addr = (self integerObjectOf: -1) ifTrue:[		"Function address was not found in this session,		Rewrite the mcache entry with a zero primitive index."		self			rewriteMethodCacheSel: messageSelector			class: lkupClass			primIndex: 0.				^self success: false].	addr _ self positive32BitValueOf: addr.	successFlag ifFalse: [^ nil].	"Try to call the function directly"	addr ~= 0 ifTrue:[^self cCode:' ((int (*) (void)) addr) ()' 							inSmalltalk:[self callExternalPrimitive: addr]].	"Clean up session id and function address"	self storeInteger: 2 ofObject: lit withValue: 0.	self storeInteger: 3 ofObject: lit withValue: 0.	"The function has not been loaded yet. 	Fetch module and function name."	moduleName _ self fetchPointer: 0 ofObject: lit.	moduleName = nilObj ifTrue:[		moduleLength _ 0.	] ifFalse:[		self success: (self isBytes: moduleName).		moduleLength _ self lengthOf: moduleName.	].	functionName _ self fetchPointer: 1 ofObject: lit.	self success: (self isBytes: functionName).	functionLength _ self lengthOf: functionName.	successFlag ifFalse:[^nil].	"Backward compatibility:		Attempt to map any old-style named primitives into the new ones.		The old ones are exclusively bound into the VM so we don't need		to check if a module is given."	addr _ 0. "Addr ~= 0 indicates we have a compat match later"	moduleLength = 0 ifTrue:[		"Search the obsolete named primitive table for a match"		index _ self findObsoleteNamedPrimitive: (self cCoerce: (functionName+4) to: 'char *') length: functionLength.		"The returned value is the index into the obsolete primitive table.		If the index is found, use the 'C-style' version of the lookup."		index < 0 ifFalse:[			addr _ self ioLoadFunction: (self cCoerce: ((obsoleteNamedPrimitiveTable at: index) at: 2) to: 'char*')						From: (self cCoerce: ((obsoleteNamedPrimitiveTable at: index) at: 1) to:'char*')]].	addr = 0 ifTrue:["Only if no compat version was found"		addr _ self ioLoadExternalFunction: functionName + 4					OfLength: functionLength 					FromModule: moduleName + 4					OfLength: moduleLength.	].	self success: addr ~= 0.	"Store the address (either actual function address or -1 for failure) back in the literal"	self pushRemappableOop: lit.	successFlag		ifTrue:[functionAddress _ self positive32BitIntegerFor: addr]		ifFalse:[functionAddress _ self integerObjectOf: -1].	lit _ self popRemappableOop.	self storePointer: 3 ofObject: lit withValue: functionAddress.	"If the function has been successfully loaded process it"	(successFlag and:[addr ~= 0])		ifTrue:[^self cCode:' ((int (*) (void)) addr) ()'					inSmalltalk:[self callExternalPrimitive: addr]]		ifFalse:["Otherwise rewrite the primitive index"			self				rewriteMethodCacheSel: messageSelector				class: lkupClass				primIndex: 0].! !!Interpreter methodsFor: 'other primitives' stamp: 'ar 5/16/2000 00:11'!primitiveListBuiltinModule	"Primitive. Return the n-th builtin module name."	| moduleName index length nameOop |	self var: #moduleName type: 'char *'.	self methodArgumentCount = 1 ifFalse:[^self primitiveFail].	index _ self stackIntegerValue: 0.	index <= 0 ifTrue:[^self primitiveFail].	moduleName _ self ioListBuiltinModule: index.	moduleName == nil ifTrue:[		self pop: 2. "arg+rcvr"		^self push: self nilObject].	length _ self strlen: moduleName.	nameOop _ self instantiateClass: self classString indexableSize: length.	0 to: length-1 do:[:i|		self storeByte: i ofObject: nameOop withValue: (moduleName at: i)].	self pop: 2. "arg+rcvr"	self push: nameOop.! !!Interpreter methodsFor: 'other primitives' stamp: 'ar 5/11/2000 23:31'!primitiveObsoleteIndexedPrimitive	"Primitive. Invoke an obsolete indexed primitive."	| pluginName functionName functionAddress |	self var: #pluginName declareC:'char *pluginName'.	self var: #functionName declareC:'char *functionName'.	functionAddress _ 		self cCoerce: ((obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 2) to: 'int'.	functionAddress = nil 		ifFalse:[^self cCode: '((int (*) (void))functionAddress)()'].	pluginName _ (obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 0.	functionName _ (obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 1.	(pluginName = nil and:[functionName = nil]) 		ifTrue:[^self primitiveFail].	functionAddress _ self ioLoadFunction: functionName From: pluginName.	functionAddress = nil ifFalse:["Cache for future use"		(obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 2 put: 			(self cCoerce: functionAddress to: 'char*').		^self cCode: '((int (*) (void))functionAddress)()'].	^self primitiveFail! !!Interpreter methodsFor: 'image save/restore' stamp: 'ar 5/13/2000 14:50'!writeImageFile: imageBytes	| headerStart headerSize f bytesWritten fn |	self var: #f declareC: 'sqImageFile f'.	"local constants"	headerStart _ 0.  "change to 512 to leave room for a Unix exec string"	headerSize _ 64.  "header size in bytes; do not change!!"	f _ self cCode: 'sqImageFileOpen(imageName, "wb")'.	f = nil ifTrue: [		"could not open the image file for writing"		self success: false.		^ nil].	self cCode: '/* Note: on Unix systems one could put an exec command here, padded to 512 bytes */'.	"position file to start of header"	self sqImageFile: f Seek: headerStart.	self putLong: (self imageFormatVersion) toFile: f.	self putLong: headerSize toFile: f.	self putLong: imageBytes toFile: f.	self putLong: (self startOfMemory) toFile: f.	self putLong: specialObjectsOop toFile: f.	self putLong: lastHash toFile: f.	self putLong: (self ioScreenSize) toFile: f.	self putLong: fullScreenFlag toFile: f.	self putLong: extraVMMemory toFile: f.	1 to: 7 do: [:i | self putLong: 0 toFile: f].  "fill remaining header words with zeros"	successFlag ifFalse: [		"file write or seek failure"		self cCode: 'sqImageFileClose(f)'.		^ nil].	"position file after the header"	self sqImageFile: f Seek: headerStart + headerSize.	"write the image data"	bytesWritten _ self cCode: 'sqImageFileWrite(memory, sizeof(unsigned char), imageBytes, f)'.	self success: bytesWritten = imageBytes.	self cCode: 'sqImageFileClose(f)'.	"set Mac file type and creator; this is a noop on other platforms"	fn _ self ioLoadFunction: 'setMacFileTypeAndCreator' From: 'FilePlugin'.	fn = 0 ifFalse:[		self cCode:'((int (*) (char*, char*, char*)) fn) (imageName, "STim", "FAST")'.	].! !!Interpreter methodsFor: 'plugin support' stamp: 'ar 5/12/2000 16:35'!findObsoleteNamedPrimitive: functionName length: functionLength	"Search the obsolete named primitive table for the given function.	Return the index if it's found, -1 otherwise."	| entry index chIndex |	self var: #functionName type:'char *'.	self var: #entry type:'const char *'.	index _ 0.	[true] whileTrue:[		entry _ (obsoleteNamedPrimitiveTable at: index) at: 0.		entry == nil ifTrue:[^-1]. "at end of table"		"Compare entry with functionName"		chIndex _ 0.		[(entry at: chIndex) = (functionName at: chIndex) 			and:[chIndex < functionLength]] whileTrue:[chIndex _ chIndex + 1].		(chIndex = functionLength and:[(entry at: chIndex) = 0]) 			ifTrue:[^index]. "match"		index _ index + 1.	].! !!Interpreter methodsFor: 'plugin support' stamp: 'ar 5/11/2000 19:42'!flushExternalPrimitives	"Flush the references to external functions from plugin primitives.	This will force a reload of those primitives when accessed next.	Note: We must flush the method cache here so that any failed	primitives are looked up again."	| oop fmt primIdx |	oop _ self firstObject.	[oop < endOfMemory] whileTrue:[		(self isFreeObject: oop) ifFalse: [			fmt _ self formatOf: oop.			fmt >= 12 ifTrue:["This is a compiled method"				primIdx _ self primitiveIndexOf: oop.				primIdx = PrimitiveExternalCallIndex ifTrue:["It's primitiveExternalCall"					self flushExternalPrimitiveOf: oop.				].			].		].		oop _ self objectAfter: oop.	].	self flushMethodCache.	self flushObsoleteIndexedPrimitives.! !!Interpreter methodsFor: 'plugin support' stamp: 'ar 5/11/2000 23:31'!flushObsoleteIndexedPrimitives	"Flush the pointers in the obsolete indexed primitive table"	1 to: MaxPrimitiveIndex do:[:i|		(obsoleteIndexedPrimitiveTable at: i) at: 2 put: nil.	].! !!Interpreter class methodsFor: 'initialization' stamp: 'ar 5/13/2000 00:34'!initializePrimitiveTable 	"This table generates a C switch statement for primitive dispatching."	"NOTE: The real limit here is 2047, but our C compiler currently barfs over 700"	MaxPrimitiveIndex _ 700.	PrimitiveTable _ Array new: MaxPrimitiveIndex + 1.	self table: PrimitiveTable from: 	#(	"Integer Primitives (0-19)"		(0 primitiveFail)		(1 primitiveAdd)		(2 primitiveSubtract)		(3 primitiveLessThan)		(4 primitiveGreaterThan)		(5 primitiveLessOrEqual)		(6 primitiveGreaterOrEqual)		(7 primitiveEqual)		(8 primitiveNotEqual)		(9 primitiveMultiply)		(10 primitiveDivide)		(11 primitiveMod)		(12 primitiveDiv)		(13 primitiveQuo)		(14 primitiveBitAnd)		(15 primitiveBitOr)		(16 primitiveBitXor)		(17 primitiveBitShift)		(18 primitiveMakePoint)		(19 primitiveFail)					"Guard primitive for simulation -- *must* fail"		"LargeInteger Primitives (20-39)"		"32-bit logic is aliased to Integer prims above"		(20 39 primitiveFail)		"Float Primitives (40-59)"		(40 primitiveAsFloat)		(41 primitiveFloatAdd)		(42 primitiveFloatSubtract)		(43 primitiveFloatLessThan)		(44 primitiveFloatGreaterThan)		(45 primitiveFloatLessOrEqual)		(46 primitiveFloatGreaterOrEqual)		(47 primitiveFloatEqual)		(48 primitiveFloatNotEqual)		(49 primitiveFloatMultiply)		(50 primitiveFloatDivide)		(51 primitiveTruncated)		(52 primitiveFractionalPart)		(53 primitiveExponent)		(54 primitiveTimesTwoPower)		(55 primitiveSquareRoot)		(56 primitiveSine)		(57 primitiveArctan)		(58 primitiveLogN)		(59 primitiveExp)		"Subscript and Stream Primitives (60-67)"		(60 primitiveAt)		(61 primitiveAtPut)		(62 primitiveSize)		(63 primitiveStringAt)		(64 primitiveStringAtPut)		(65 primitiveNext)		(66 primitiveNextPut)		(67 primitiveAtEnd)		"StorageManagement Primitives (68-79)"		(68 primitiveObjectAt)		(69 primitiveObjectAtPut)		(70 primitiveNew)		(71 primitiveNewWithArg)		(72 primitiveArrayBecomeOneWay)	"Blue Book: primitiveBecome"		(73 primitiveInstVarAt)		(74 primitiveInstVarAtPut)		(75 primitiveAsOop)		(76 primitiveStoreStackp)					"Blue Book: primitiveAsObject"		(77 primitiveSomeInstance)		(78 primitiveNextInstance)		(79 primitiveNewMethod)		"Control Primitives (80-89)"		(80 primitiveBlockCopy)		(81 primitiveValue)		(82 primitiveValueWithArgs)		(83 primitivePerform)		(84 primitivePerformWithArgs)		(85 primitiveSignal)		(86 primitiveWait)		(87 primitiveResume)		(88 primitiveSuspend)		(89 primitiveFlushCache)		"Input/Output Primitives (90-109)"		(90 primitiveMousePoint)		(91 primitiveTestDisplayDepth)			"Blue Book: primitiveCursorLocPut"		(92 primitiveSetDisplayMode)				"Blue Book: primitiveCursorLink"		(93 primitiveInputSemaphore)		(94 primitiveFail)						"Blue Book: primitiveSampleInterval"		(95 primitiveInputWord)		(96 primitiveObsoleteIndexedPrimitive)	"primitiveCopyBits"		(97 primitiveSnapshot)		(98 primitiveStoreImageSegment)		(99 primitiveLoadImageSegment)		(100 primitivePerformInSuperclass)		"Blue Book: primitiveSignalAtTick"		(101 primitiveBeCursor)		(102 primitiveBeDisplay)		(103 primitiveObsoleteIndexedPrimitive)	"primitiveScanCharacters"		(104 primitiveObsoleteIndexedPrimitive)	"primitiveDrawLoop"		(105 primitiveStringReplace)		(106 primitiveScreenSize)		(107 primitiveMouseButtons)		(108 primitiveKbdNext)		(109 primitiveKbdPeek)		"System Primitives (110-119)"		(110 primitiveEquivalent)		(111 primitiveClass)		(112 primitiveBytesLeft)		(113 primitiveQuit)		(114 primitiveExitToDebugger)		(115 primitiveFail)					"Blue Book: primitiveOopsLeft"		(116 primitiveFlushCacheByMethod)		(117 primitiveExternalCall)		(118 primitiveDoPrimitiveWithArgs)		(119 primitiveFlushCacheSelective)			"Squeak 2.2 and earlier use 119.  Squeak 2.3 and later use 116.			Both are supported for backward compatibility."		"Miscellaneous Primitives (120-127)"		(120 primitiveCalloutToFFI)		(121 primitiveImageName)		(122 primitiveNoop)					"Blue Book: primitiveImageVolume"		(123 primitiveFail)		(124 primitiveLowSpaceSemaphore)		(125 primitiveSignalAtBytesLeft)		"Squeak Primitives Start Here"		"Squeak Miscellaneous Primitives (128-149)"		(126 primitiveDeferDisplayUpdates)		(127 primitiveShowDisplayRect)		(128 primitiveArrayBecome)		(129 primitiveSpecialObjectsOop)		(130 primitiveFullGC)		(131 primitiveIncrementalGC)		(132 primitiveObjectPointsTo)		(133 primitiveSetInterruptKey)		(134 primitiveInterruptSemaphore)		(135 primitiveMillisecondClock)		(136 primitiveSignalAtMilliseconds)		(137 primitiveSecondsClock)		(138 primitiveSomeObject)		(139 primitiveNextObject)		(140 primitiveBeep)		(141 primitiveClipboardText)		(142 primitiveVMPath)		(143 primitiveShortAt)		(144 primitiveShortAtPut)		(145 primitiveConstantFill)		(146 primitiveObsoleteIndexedPrimitive)	"primitiveReadJoystick"		(147 primitiveObsoleteIndexedPrimitive)	"primitiveWarpBits"		(148 primitiveClone)		(149 primitiveGetAttribute)		"File Primitives (150-169)"		(150 163 primitiveObsoleteIndexedPrimitive)		(164 168 primitiveFail)		(169 primitiveObsoleteIndexedPrimitive)		"Sound Primitives (170-199)"		(170 175 primitiveObsoleteIndexedPrimitive)		(176 primWaveTableSoundmixSampleCountintostartingAtpan)		(177 primFMSoundmixSampleCountintostartingAtpan)		(178 primPluckedSoundmixSampleCountintostartingAtpan)		(179 primSampledSoundmixSampleCountintostartingAtpan)		(180 primFMSoundmixSampleCountintostartingAtleftVolrightVol)		(181 primPluckedSoundmixSampleCountintostartingAtleftVolrightVol)		(182 oldprimSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(183 primReverbSoundapplyReverbTostartingAtcount)		(184 primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(185 primSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(186 188 primitiveFail)		(189 194 primitiveObsoleteIndexedPrimitive)		(195 199 primitiveFail)		"Networking Primitives (200-229)"		(200 225 primitiveObsoleteIndexedPrimitive)		(226 229 primitiveFail)		"Other Primitives (230-249)"		(230 primitiveRelinquishProcessor)		(231 primitiveForceDisplayUpdate)		(232 primitiveFormPrint)		(233 primitiveSetFullScreen)		(234 primBitmapdecompressfromByteArrayat)		(235 primStringcomparewithcollated)		(236 primSampledSoundconvert8bitSignedFromto16Bit)		(237 primBitmapcompresstoByteArray)		(238 241 primitiveObsoleteIndexedPrimitive)		(242 primitiveFail)		(243 primStringtranslatefromtotable)		(244 primStringfindFirstInStringinSetstartingAt)		(245 primStringindexOfAsciiinStringstartingAt)		(246 primStringfindSubstringinstartingAtmatchTable)		(247 249 primitiveFail)		"VM Implementor Primitives (250-255)"		(250 clearProfile)		(251 dumpProfile)		(252 startProfiling)		(253 stopProfiling)		(254 primitiveVMParameter)		(255 primitiveInstVarsPutFromStack) "Never used except in Disney tests.  Remove after 2.3 release."		"Quick Push Const Methods"		(256 primitivePushSelf)		(257 primitivePushTrue)		(258 primitivePushFalse)		(259 primitivePushNil)		(260 primitivePushMinusOne)		(261 primitivePushZero)		(262 primitivePushOne)		(263 primitivePushTwo)		"Quick Push Const Methods"		(264 519 primitiveLoadInstVar)		"MIDI Primitives (520-539)"		(520 529 primitiveObsoleteIndexedPrimitive)		(530 539 primitiveFail)  "reserved for extended MIDI primitives"		"Experimental Asynchrous File Primitives"		(540 545 primitiveObsoleteIndexedPrimitive)		(546 547 primitiveFail)		"Pen Tablet Primitives"		(548 primitiveObsoleteIndexedPrimitive)		(549 primitiveObsoleteIndexedPrimitive)		"Sound Codec Primitives"		(550 primADPCMCodecprivateDecodeMono)			(551 primADPCMCodecprivateDecodeStereo)			(552 primADPCMCodecprivateEncodeMono)			(553 primADPCMCodecprivateEncodeStereo)			(554 569 primitiveFail)  "reserved for additional codec primitives"		"External primitive support primitives"		(570 primitiveFlushExternalPrimitives)		(571 primitiveUnloadModule)		(572 primitiveListBuiltinModule)		(573 574 primitiveFail) "reserved for addl. external support prims"		"Unassigned Primitives"		(575 700 primitiveFail)).! !!Interpreter class methodsFor: 'initialization' stamp: 'ar 5/13/2000 00:34'!obsoleteIndexedPrimitiveTable	"Interpreter obsoleteIndexedPrimitiveTableString"	"Initialize the links from the (now obsolete) indexed primitives to	the new named primitives."	| table |	table _ Array new: MaxPrimitiveIndex+1.	#(		(96	(BitBltPlugin primitiveCopyBits))		(103 (BitBltPlugin primitiveScanCharacters))		(104 (BitBltPlugin primitiveDrawLoop))		(147 (BitBltPlugin primitiveWarpBits))		(146 (JoystickTabletPlugin primitiveReadJoystick))		"File Primitives (150-169)"		(150 (FilePlugin primitiveFileAtEnd))		(151 (FilePlugin primitiveFileClose))		(152 (FilePlugin primitiveFileGetPosition))		(153 (FilePlugin primitiveFileOpen))		(154 (FilePlugin primitiveFileRead))		(155 (FilePlugin primitiveFileSetPosition))		(156 (FilePlugin primitiveFileDelete))		(157 (FilePlugin primitiveFileSize))		(158 (FilePlugin primitiveFileWrite))		(159 (FilePlugin primitiveFileRename))		(160 (FilePlugin primitiveDirectoryCreate))		(161 (FilePlugin primitiveDirectoryDelimitor))		(162 (FilePlugin primitiveDirectoryLookup))		(163 (FilePlugin primitiveDirectoryDelete))		(169 (FilePlugin primitiveDirectorySetMacTypeAndCreator))		"Sound Primitives (170-199)"		(170 (SoundPlugin primitiveSoundStart))		(171 (SoundPlugin primitiveSoundStartWithSemaphore))		(172 (SoundPlugin primitiveSoundStop))		(173 (SoundPlugin primitiveSoundAvailableSpace))		(174 (SoundPlugin primitiveSoundPlaySamples))		(175 (SoundPlugin primitiveSoundPlaySilence))		(189 (SoundPlugin primitiveSoundInsertSamples))		(190 (SoundPlugin primitiveSoundStartRecording))		(191 (SoundPlugin primitiveSoundStopRecording))		(192 (SoundPlugin primitiveSoundGetRecordingSampleRate))		(193 (SoundPlugin primitiveSoundRecordSamples))		(194 (SoundPlugin primitiveSoundSetRecordLevel))		"Networking Primitives (200-229)"		(200 (SocketPlugin primitiveInitializeNetwork))		(201 (SocketPlugin primitiveResolverStartNameLookup))		(202 (SocketPlugin primitiveResolverNameLookupResult))		(203 (SocketPlugin primitiveResolverStartAddressLookup))		(204 (SocketPlugin primitiveResolverAddressLookupResult))		(205 (SocketPlugin primitiveResolverAbortLookup))		(206 (SocketPlugin primitiveResolverLocalAddress))		(207 (SocketPlugin primitiveResolverStatus))		(208 (SocketPlugin primitiveResolverError))		(209 (SocketPlugin primitiveSocketCreate))		(210 (SocketPlugin primitiveSocketDestroy))		(211 (SocketPlugin primitiveSocketConnectionStatus))		(212 (SocketPlugin primitiveSocketError))		(213 (SocketPlugin primitiveSocketLocalAddress))		(214 (SocketPlugin primitiveSocketLocalPort))		(215 (SocketPlugin primitiveSocketRemoteAddress))		(216 (SocketPlugin primitiveSocketRemotePort))		(217 (SocketPlugin primitiveSocketConnectToPort))		(218 (SocketPlugin primitiveSocketListenOnPort))		(219 (SocketPlugin primitiveSocketCloseConnection))		(220 (SocketPlugin primitiveSocketAbortConnection))		(221 (SocketPlugin primitiveSocketReceiveDataBufCount))		(222 (SocketPlugin primitiveSocketReceiveDataAvailable))		(223 (SocketPlugin primitiveSocketSendDataBufCount))		(224 (SocketPlugin primitiveSocketSendDone))		(225 (SocketPlugin primitiveSocketAccept))		"Other Primitives (230-249)"		(238 (SerialPlugin primitiveSerialPortOpen))		(239 (SerialPlugin primitiveSerialPortClose))		(240 (SerialPlugin primitiveSerialPortWrite))		(241 (SerialPlugin primitiveSerialPortRead))		"MIDI Primitives (520-539)"		(521 (MIDIPlugin primitiveMIDIClosePort))		(522 (MIDIPlugin primitiveMIDIGetClock))		(523 (MIDIPlugin primitiveMIDIGetPortCount))		(524 (MIDIPlugin primitiveMIDIGetPortDirectionality))		(525 (MIDIPlugin primitiveMIDIGetPortName))		(526 (MIDIPlugin primitiveMIDIOpenPort))		(527 (MIDIPlugin primitiveMIDIParameterGetOrSet))		(528 (MIDIPlugin primitiveMIDIRead))		(529 (MIDIPlugin primitiveMIDIWrite))		"Experimental Asynchrous File Primitives"		(540 (AsynchFilePlugin primitiveAsyncFileClose))		(541 (AsynchFilePlugin primitiveAsyncFileOpen))		(542 (AsynchFilePlugin primitiveAsyncFileReadResult))		(543 (AsynchFilePlugin primitiveAsyncFileReadStart))		(544 (AsynchFilePlugin primitiveAsyncFileWriteResult))		(545 (AsynchFilePlugin primitiveAsyncFileWriteStart))		"Pen Tablet Primitives"		(548 (JoystickTabletPlugin primitiveGetTabletParameters))		(549 (JoystickTabletPlugin primitiveReadTablet))		"Sound Codec Primitives"		"(550 primADPCMCodecprivateDecodeMono)			(551 primADPCMCodecprivateDecodeStereo)			(552 primADPCMCodecprivateEncodeMono)			(553 primADPCMCodecprivateEncodeStereo)"	) do:[:spec| table at: spec first+1 put: spec second].	^table! !!Interpreter class methodsFor: 'initialization' stamp: 'ar 5/11/2000 22:42'!obsoleteIndexedPrimitiveTableString	"Interpreter obsoleteIndexedPrimitiveTableString"	"Initialize the links from the (now obsolete) indexed primitives to	the new named primitives."	| table |	table _ self obsoleteIndexedPrimitiveTable.	^String streamContents:[:s|		s nextPutAll:'{'; cr.		table doWithIndex:[:primSpec :idx|			primSpec ifNil:[				s nextPutAll:'{ NULL, NULL, NULL }'.			] ifNotNil:[				s nextPutAll:'{ "';					nextPutAll: primSpec first;					nextPutAll:'", "';					nextPutAll: primSpec last;					nextPutAll: '", NULL }'].			idx < table size ifTrue:[s nextPut:$, ; cr]].			s cr; nextPutAll:'}'.	].! !!Interpreter class methodsFor: 'initialization' stamp: 'ar 5/12/2000 16:26'!obsoleteNamedPrimitiveTable	"Interpreter obsoleteNamedPrimitiveTableString"	"Initialize the links from the (now obsolete) named primitives to	the new named primitives."	^#(		(gePrimitiveMergeFillFrom B2DPlugin primitiveMergeFillFrom)		(gePrimitiveSetClipRect B2DPlugin primitiveSetClipRect)		(gePrimitiveDoProfileStats B2DPlugin primitiveDoProfileStats)		(gePrimitiveAddCompressedShape B2DPlugin primitiveAddCompressedShape)		(gePrimitiveFinishedProcessing B2DPlugin primitiveFinishedProcessing)		(gePrimitiveGetBezierStats B2DPlugin primitiveGetBezierStats)		(gePrimitiveSetDepth B2DPlugin primitiveSetDepth)		(gePrimitiveAbortProcessing B2DPlugin primitiveAbortProcessing)		(gePrimitiveGetTimes B2DPlugin primitiveGetTimes)		(gePrimitiveNextActiveEdgeEntry B2DPlugin primitiveNextActiveEdgeEntry)		(gePrimitiveAddBezier B2DPlugin primitiveAddBezier)		(gePrimitiveRenderScanline B2DPlugin primitiveRenderScanline)		(gePrimitiveAddBezierShape B2DPlugin primitiveAddBezierShape)		(gePrimitiveAddLine B2DPlugin primitiveAddLine)		(gePrimitiveRenderImage B2DPlugin primitiveRenderImage)		(gePrimitiveGetAALevel B2DPlugin primitiveGetAALevel)		(gePrimitiveRegisterExternalEdge B2DPlugin primitiveRegisterExternalEdge)		(gePrimitiveInitializeBuffer B2DPlugin primitiveInitializeBuffer)		(gePrimitiveAddRect B2DPlugin primitiveAddRect)		(gePrimitiveInitializeProcessing B2DPlugin primitiveInitializeProcessing)		(gePrimitiveAddBitmapFill B2DPlugin primitiveAddBitmapFill)		(gePrimitiveGetClipRect B2DPlugin primitiveGetClipRect)		(gePrimitiveGetFailureReason B2DPlugin primitiveGetFailureReason)		(gePrimitiveNextGlobalEdgeEntry B2DPlugin primitiveNextGlobalEdgeEntry)		(gePrimitiveNextFillEntry B2DPlugin primitiveNextFillEntry)		(gePrimitiveSetColorTransform B2DPlugin primitiveSetColorTransform)		(gePrimitiveDisplaySpanBuffer B2DPlugin primitiveDisplaySpanBuffer)		(gePrimitiveGetOffset B2DPlugin primitiveGetOffset)		(gePrimitiveAddPolygon B2DPlugin primitiveAddPolygon)		(gePrimitiveNeedsFlush B2DPlugin primitiveNeedsFlush)		(gePrimitiveAddOval B2DPlugin primitiveAddOval)		(gePrimitiveSetAALevel B2DPlugin primitiveSetAALevel)		(gePrimitiveCopyBuffer B2DPlugin primitiveCopyBuffer)		(gePrimitiveAddActiveEdgeEntry B2DPlugin primitiveAddActiveEdgeEntry)		(gePrimitiveGetCounts B2DPlugin primitiveGetCounts)		(gePrimitiveSetOffset B2DPlugin primitiveSetOffset)		(gePrimitiveAddGradientFill B2DPlugin primitiveAddGradientFill)		(gePrimitiveChangedActiveEdgeEntry B2DPlugin primitiveChangedActiveEdgeEntry)		(gePrimitiveRegisterExternalFill B2DPlugin primitiveRegisterExternalFill)		(gePrimitiveGetDepth B2DPlugin primitiveGetDepth)		(gePrimitiveSetEdgeTransform B2DPlugin primitiveSetEdgeTransform)		(gePrimitiveNeedsFlushPut B2DPlugin primitiveNeedsFlushPut)		(primitiveFloatArrayAt FloatArrayPlugin primitiveAt)		(primitiveFloatArrayMulFloatArray FloatArrayPlugin primitiveMulFloatArray)		(primitiveFloatArrayAddScalar FloatArrayPlugin primitiveAddScalar)		(primitiveFloatArrayDivFloatArray FloatArrayPlugin primitiveDivFloatArray)		(primitiveFloatArrayDivScalar FloatArrayPlugin primitiveDivScalar)		(primitiveFloatArrayHash FloatArrayPlugin primitiveHash)		(primitiveFloatArrayAtPut FloatArrayPlugin primitiveAtPut)		(primitiveFloatArrayMulScalar FloatArrayPlugin primitiveMulScalar)		(primitiveFloatArrayAddFloatArray FloatArrayPlugin primitiveAddFloatArray)		(primitiveFloatArraySubScalar FloatArrayPlugin primitiveSubScalar)		(primitiveFloatArraySubFloatArray FloatArrayPlugin primitiveSubFloatArray)		(primitiveFloatArrayEqual FloatArrayPlugin primitiveEqual)		(primitiveFloatArrayDotProduct FloatArrayPlugin primitiveDotProduct)		(m23PrimitiveInvertRectInto Matrix2x3Plugin primitiveInvertRectInto)		(m23PrimitiveTransformPoint Matrix2x3Plugin primitiveTransformPoint)		(m23PrimitiveIsPureTranslation Matrix2x3Plugin primitiveIsPureTranslation)		(m23PrimitiveComposeMatrix Matrix2x3Plugin primitiveComposeMatrix)		(m23PrimitiveTransformRectInto Matrix2x3Plugin primitiveTransformRectInto)		(m23PrimitiveIsIdentity Matrix2x3Plugin primitiveIsIdentity)		(m23PrimitiveInvertPoint Matrix2x3Plugin primitiveInvertPoint)		(primitiveDeflateBlock ZipPlugin primitiveDeflateBlock)		(primitiveDeflateUpdateHashTable ZipPlugin primitiveDeflateUpdateHashTable)		(primitiveUpdateGZipCrc32 ZipPlugin primitiveUpdateGZipCrc32)		(primitiveInflateDecompressBlock ZipPlugin primitiveInflateDecompressBlock)		(primitiveZipSendBlock ZipPlugin primitiveZipSendBlock)		(primitiveFFTTransformData FFTPlugin primitiveFFTTransformData)		(primitiveFFTScaleData FFTPlugin primitiveFFTScaleData)		(primitiveFFTPermuteData FFTPlugin primitiveFFTPermuteData)	)! !!Interpreter class methodsFor: 'initialization' stamp: 'ar 5/11/2000 23:30'!obsoleteNamedPrimitiveTableString	"Interpreter obsoleteNamedPrimitiveTableString"	"Initialize the links from the (now obsolete) indexed primitives to	the new named primitives."	| table |	table _ self obsoleteNamedPrimitiveTable.	^String streamContents:[:s|		s nextPutAll:'{'; cr.		table do:[:primSpec |			s nextPutAll:'{ "';				nextPutAll: primSpec first;				nextPutAll:'", "';				nextPutAll: primSpec second;				nextPutAll:'", "';				nextPutAll: primSpec third;				nextPutAll: '" },'; cr].		s nextPutAll: '{ NULL, NULL, NULL }'.		s cr; nextPutAll:'}'.	].! !!Interpreter class methodsFor: 'translation' stamp: 'ar 5/12/2000 16:30'!declareCVarsIn: aCCodeGenerator	aCCodeGenerator 		var: #interpreterProxy 		type: #'struct VirtualMachine*'.	aCCodeGenerator		var: #methodCache		declareC: 'int methodCache[', (MethodCacheSize + 1) printString, ']'.	aCCodeGenerator		var: #atCache		declareC: 'int atCache[', (AtCacheTotalSize + 1) printString, ']'.	aCCodeGenerator var: #localIP type: #'char*'.	aCCodeGenerator var: #localSP type: #'char*'.	aCCodeGenerator		var: #semaphoresToSignal		declareC: 'int semaphoresToSignal[', (SemaphoresToSignalSize + 1) printString, ']'.	aCCodeGenerator		var: #compilerHooks		declareC: 'int (*compilerHooks[', (CompilerHooksSize + 1) printString, '])()'.	aCCodeGenerator		var: #interpreterVersion		declareC: 'const char *interpreterVersion = "', Smalltalk version, ' [', Smalltalk lastUpdateString,']"'.	aCCodeGenerator		var: #obsoleteIndexedPrimitiveTable		declareC: 'char* obsoleteIndexedPrimitiveTable[][3] = ', self obsoleteIndexedPrimitiveTableString.	aCCodeGenerator		var: #obsoleteNamedPrimitiveTable		declareC: 'const char* obsoleteNamedPrimitiveTable[][3] = ', self obsoleteNamedPrimitiveTableString.! !!Interpreter class methodsFor: 'translation' stamp: 'ar 5/12/2000 15:55'!storeExports: exports on: aFilename	| s |	"Store the exports on the given file"	s _ CrLfFileStream newFileNamed: aFilename.	s nextPutAll:'/* This is an automatically generated table of all named primitive in the VM */'; cr;cr.	s nextPutAll:'/* Function prototypes */'; cr.	exports do:[:assoc|		assoc value do:[:primName|			s nextPutAll:'int '.			assoc key size > 0 ifTrue:[				s nextPutAll: assoc key; nextPutAll:'_'].			s nextPutAll: primName; nextPutAll:'(void);'; cr.		].	].	s nextPutAll:'/* extra (platform specific) prototypes */'; cr.	s nextPutAll:'#define XFN(name) int name(void);'; cr.	s nextPutAll:'#include "platform.exports"'; cr.	s nextPutAll:'#undef XFN'; cr.	s cr; cr.	s nextPutAll:'/* Function names */'; cr.	s nextPutAll:'char *internalPrimitiveNames[][2] = {';cr.	exports do:[:assoc|		assoc value do:[:primName|			s nextPutAll:'{ "'; nextPutAll: assoc key; nextPutAll:'", '.			s nextPutAll:'"'; nextPutAll: primName; nextPutAll:'" },'; cr.		].	].	s nextPutAll:'/* extra (platform specific) names */'; cr.	s nextPutAll:'#define XFN(name) { "", #name },'; cr.	s nextPutAll:'#include "platform.exports"'; cr.	s nextPutAll:'#undef XFN'; cr.	s nextPutAll:'{ NULL, NULL }'; cr; nextPutAll:'};'.	s cr; cr.	s nextPutAll:'/* Function addresses */'; cr.	s nextPutAll:'void *internalPrimitiveAddresses[] = {'; cr.	exports do:[:assoc|		assoc value do:[:primName|			assoc key size > 0 ifTrue:[				s nextPutAll: assoc key; nextPutAll:'_'].			s nextPutAll: primName; nextPutAll:','; cr.		].	].	s nextPutAll:'/* extra (platform specific) addresses */'; cr.	s nextPutAll:'#define XFN(name) name,'; cr.	s nextPutAll:'#include "platform.exports"'; cr.	s nextPutAll:'#undef XFN'; cr.	s nextPutAll:'NULL'; cr; nextPutAll:'};'.	s cr; cr.	s close.! !!Interpreter class methodsFor: 'translation' stamp: 'ar 5/13/2000 15:02'!translate: fileName doInlining: inlineFlag	"Time millisecondsToRun: [		Interpreter translate: 'interp.c' doInlining: true.		Smalltalk beep]"	"Interpreter patchInterp: 'Squeak VM PPC'"	| cg exports |	Interpreter initialize.	ObjectMemory initialize.	cg _ CCodeGenerator new initialize.	cg addClass: Interpreter.	cg addClass: ObjectMemory.	Interpreter declareCVarsIn: cg.	ObjectMemory declareCVarsIn: cg.	"Get all the named prims from the VM.	Note: the format of exports is:		pluginName -> Array of: primitiveName.	so we can generate a nice table from it."	exports _ Array with: '' -> cg exportedPrimitiveNames asArray.	cg storeCodeOnFile: fileName doInlining: inlineFlag.	"Add our plugins"	{		"Graphics"			"Note: BitBltSimulation should go first, 			because three of it's entries might be 			looked up quite often (due to refs from 			InterpreterProxy). This will go away at			some point but for now it's a good idea			to have those entries early in the table."		BitBltSimulation.			BalloonEnginePlugin. 		"I/O subsystems"		FilePlugin.		SocketPlugin. 		SoundPlugin. 		MIDIPlugin. 		SerialPlugin. 		JoystickTabletPlugin. 		AsynchFilePlugin. 	 	"Numerics"		FFTPlugin. 		FloatArrayPlugin. 		Matrix2x3Plugin. 		"Compression"		DeflatePlugin.		"Note: Optionally, you can translate the following as builtins.		As of Squeak 2.7 they are not builtins by default:			DSAPlugin.			KlattSynthesizerPlugin.			SoundCodecPlugin.			B3DEnginePlugin.			FFIPlugin.		"	} do:[:plugin|		cg _ plugin translate: plugin moduleName, '.c'					doInlining: inlineFlag					locally: true.		exports _ exports copyWith: 			(plugin moduleName -> cg exportedPrimitiveNames asArray).	].	self storeExports: exports on: 'sqNamedPrims.h'.! !!InterpreterPlugin methodsFor: 'initialize' stamp: 'ar 5/13/2000 02:00'!getModuleName	"Note: This is hardcoded so it can be run from Squeak.	The module name is used for validating a module *after*	it is loaded to check if it does really contain the module	we're thinking it contains. This is important!!"	self returnTypeC:'const char*'.	self export: true.	^moduleName! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'ar 5/12/2000 00:24'!baseDirectoryName	"Return the directory into which plugins should be generated by default."	^FileDirectory default pathName! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'ar 5/12/2000 00:34'!declareCVarsIn: aCCodeGenerator	"Note: This method must be implemented by all subclasses to declare variables."	aCCodeGenerator 		var: #interpreterProxy 		type: #'struct VirtualMachine*'.	self declareHeaderFilesIn: aCCodeGenerator.! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'ar 5/11/2000 22:25'!declareHeaderFilesIn: aCCodeGenerator	self headerFile ifNotNil:[		aCCodeGenerator addHeaderFile: '"', self moduleName,'.h"'].! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'ar 5/11/2000 22:28'!headerFile	"If there is a single intrinsic header file to be associated with the plugin, here is where you want to put it. It will be generated and included automatically."	^nil! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'ar 5/11/2000 22:30'!translate: fileName doInlining: inlineFlag	"Time millisecondsToRun: [		FloatArrayPlugin translate: 'SqFloatArray.c' doInlining: true.		Smalltalk beep]"	^self translate: fileName doInlining: inlineFlag locally: false.! !!InterpreterPlugin class methodsFor: 'translation' stamp: 'ar 5/12/2000 00:35'!translate: fileName doInlining: inlineFlag locally: localFlag	"Time millisecondsToRun: [		FloatArrayPlugin translate: 'SqFloatArray.c' doInlining: true.		Smalltalk beep]"	| cg theClass fullName fd |	fullName _ self baseDirectoryName.	fd _ FileDirectory on: fullName.	localFlag ifFalse:[		(fd directoryExists: self moduleName) 			ifFalse:[fd createDirectory: self moduleName].		fd _ fd on: (fd fullNameFor: self moduleName)].	fullName _ fd fullNameFor: fileName.	self initialize.	self headerFile ifNotNil:[		(CrLfFileStream newFileNamed: (fd fullNameFor: self moduleName,'.h'))			nextPutAll: self headerFile;			close].	cg _ self codeGeneratorClass new initialize.	localFlag ifTrue:[cg pluginPrefix: self moduleName].	"Add an extra declaration for module name"	cg var: #moduleName declareC:'const char *moduleName = "', self moduleName,'"'.	theClass _ self.	[theClass == Object] whileFalse:[		cg addClass: theClass.		theClass declareCVarsIn: cg.		theClass _ theClass superclass].	cg storeCodeOnFile: fullName doInlining: inlineFlag.	^cg! !!InterpreterProxy methodsFor: 'other' stamp: 'ar 5/13/2000 14:55'!ioMicroMSecs	^Time millisecondClockValue! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 5/11/2000 20:05'!ioLoadFunction: functionName From: moduleName	"Dummy - provided by support code"	^0! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/11/2000 22:01'!callExternalPrimitive: mapIndex	| entry |	entry _ (mappedPluginEntries at: mapIndex).	^(entry at: 1) perform: (entry at: 2).! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/11/2000 21:59'!flushExternalPrimitives	mappedPluginEntries _ #().	super flushExternalPrimitives.! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/11/2000 22:01'!ioLoadExternalFunction: functionName OfLength: functionLength FromModule: moduleName OfLength: moduleLength	"Load and return the requested function from a module"	| pluginString functionString plugin |	pluginString _ String new: moduleLength.	1 to: moduleLength do:[:i| pluginString byteAt: i put: (self byteAt: moduleName+i-1)].	functionString _ String new: functionLength.	1 to: functionLength do:[:i| pluginString byteAt: i put: (self byteAt: functionName+i-1)].	functionString _ functionString asSymbol.	plugin _ pluginList 				detect:[:any| any class moduleName = pluginString]				ifNone:[self loadNewPlugin: pluginString].	plugin ifNil:[^0]. "No plugin found"	mappedPluginEntries doWithIndex:[:pluginAndName :index|		((pluginAndName at: 1) == plugin 			and:[(pluginAndName at: 2) == functionString]) ifTrue:[^index]].	(plugin respondsTo: functionString) ifFalse:[^0].	mappedPluginEntries _ mappedPluginEntries copyWith: (Array with: plugin with: functionString).	^mappedPluginEntries size! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/11/2000 22:07'!loadNewPlugin: pluginString	| plugin simClass |	plugin _ simClass _ nil.	InterpreterPlugin allSubclassesDo:[:plg|		plg moduleName asString = pluginString ifTrue:[			simClass _ plg simulatorClass.			plugin ifNil:[plugin _ simClass]				ifNotNil:[plugin == simClass ifFalse:[^self error:'This won''t work...']].		].	].	plugin ifNil:[^nil].	plugin _ plugin new.	plugin setInterpreter: self. "Ignore return value from setInterpreter"	(plugin respondsTo: #initialiseModule) ifTrue:[		plugin initialiseModule ifFalse:[^nil]. "module initialiser failed"	].	^plugin! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/11/2000 21:47'!sqGetInterpreterProxy	"I am basically my own proxy..."	^self! !!InterpreterSupportCode class methodsFor: 'source file exporting' stamp: 'di 11/15/1998 16:22'!cCodeForMiscPrimitives	"Return the contents of the miscellaneous primitives file, which is generated via automatic translation to C."	^ CCodeGenerator new codeStringForPrimitives: #(		(Bitmap compress:toByteArray:)		(Bitmap decompress:fromByteArray:at:)		(Bitmap encodeBytesOf:in:at:)		(Bitmap encodeInt:in:at:)		(String compare:with:collated:)		(String translate:from:to:table:)			(String findFirstInString:inSet:startingAt:)		(String indexOfAscii:inString:startingAt:)		(String findSubstring:in:startingAt:matchTable:)		(SampledSound convert8bitSignedFrom:to16Bit:))! !!InterpreterSupportCode class methodsFor: 'source file exporting' stamp: 'ar 5/13/2000 15:04'!writeSupportFiles	"Store into this image's folder the C sources files required to support the interpreter on all platforms. This method also generates the code for the sound synthesis and other primitives translated from Smalltalk to C. However, because generating code for the interpreter itself takes several minutes, that is not done automatically by this method. To generate that code, use the method 'translate:doInlining:' in Interpreter class."	"InterpreterSupportCode writeSupportFiles"	self storeString: self readmeFile			onFileNamed: 'readme'.	self storeString: self squeakHeaderFile	onFileNamed: 'sq.h'.	self storeString: self squeakConfigFile	onFileNamed: 'sqConfig.h'.	self storeString: self squeakPlatSpecFile	onFileNamed: 'sqPlatformSpecific.h'.	self storeString: self squeakVirtualMachineHeaderFile	onFileNamed: 'sqVirtualMachine.h'.	self storeString: self squeakVirtualMachineFile	onFileNamed: 'sqVirtualMachine.c'.	self storeString: self squeakNamedPrimsFile onFileNamed:'sqNamedPrims.c'.	self storeString: self squeakADPCMCodecPrimsFile	 onFileNamed: 'sqADPCMPrims.c'.	self storeString: self squeakFilePrimsFile	onFileNamed:  'sqFilePrims.c'.	self storeString: self squeakGSMCodecPluginFile	onFileNamed: 'sqGSMCodecPlugin.c'.	Smalltalk at: #AbstractSound ifPresent: [:abstractSound |		self storeString: abstractSound cCodeForSoundPrimitives													onFileNamed: 'sqSoundPrims.c'].	self storeString: self cCodeForMiscPrimitives		onFileNamed: 'sqMiscPrims.c'.	self storeString: self squeakOldSoundPrimsFile	onFileNamed: 'sqOldSoundPrims.c'.! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'ar 5/13/2000 15:13'!squeakHeaderFile	^ '#include <math.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <time.h>#include "sqConfig.h"#include "sqVirtualMachine.h"#define true 1#define false 0#define null 0  /* using "null" because nil is predefined in Think C *//* pluggable primitives macros *//* Note: All pluggable primitives are defined as	EXPORT(int) somePrimitive(void)   If the platform requires special declaration modifiers   the EXPORT macro can be redefined*/#define EXPORT(returnType) returnType/* image save/restore macros *//* Note: The image file save and restore code uses these macros; they   can be redefined in sqPlatformSpecific.h if desired. These default   versions are defined in terms of the ANSI Standard C libraries.*/#define sqImageFile FILE *#define sqImageFileClose(f)                  fclose(f)#define sqImageFileOpen(fileName, mode)      fopen(fileName, mode)#define sqImageFilePosition(f)               ftell(f)#define sqImageFileRead(ptr, sz, count, f)   fread(ptr, sz, count, f)#define sqImageFileSeek(f, pos)              fseek(f, pos, SEEK_SET)#define sqImageFileWrite(ptr, sz, count, f)  fwrite(ptr, sz, count, f)#define sqAllocateMemory(minHeapSize, desiredHeapSize)   malloc(desiredHeapSize)/* platform-dependent float conversion macros *//* Note: Second argument must be a variable name, not an expression!! *//* Note: Floats in image are always in PowerPC word order; change   these macros to swap words if necessary. This costs no extra and   obviates sometimes having to word-swap floats when reading an image.*/#if defined(DOUBLE_WORD_ALIGNMENT) || defined(DOUBLE_WORD_ORDER)# ifdef DOUBLE_WORD_ORDER/* word-based copy with swapping for non-PowerPC order */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 1); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 0);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 1); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 0);# else /*!!DOUBLE_WORD_ORDER*//* word-based copy for machines with alignment restrictions */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 0); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 1);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 0); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 1);# endif /*!!DOUBLE_WORD_ORDER*/#else /*!!(DOUBLE_WORD_ORDER||DOUBLE_WORD_ALIGNMENT)*//* for machines that allow doubles to be on any word boundary */# define storeFloatAtfrom(i, floatVarName) \	*((double *) (i)) = (floatVarName);# define fetchFloatAtinto(i, floatVarName) \	(floatVarName) = *((double *) (i));#endif/* platform-dependent memory size adjustment macro *//* Note: This macro can be redefined to allows platforms with a   fixed application memory partition (notably, the Macintosh)   to reserve extra C heap memory for special applications that need   it (e.g., for a 3D graphics library). Since most platforms can   extend their application memory partition at run time if needed,   this macro is defined as a noop here and redefined if necessary   in sqPlatformSpecific.h.*/#define reserveExtraCHeapBytes(origHeapSize, bytesToReserve) origHeapSize/* platform-dependent millisecond clock macros *//* Note: The Squeak VM uses three different clocks functions for   timing. The primary one, ioMSecs(), is used to implement Delay   and Time millisecondClockValue. The resolution of this clock   determines the resolution of these basic timing functions. For   doing real-time control of music and MIDI, a clock with resolution   down to one millisecond is preferred, but a coarser clock (say,   1/60th second) can be used in a pinch. The VM calls a different   clock function, ioLowResMSecs(), in order to detect long-running   primitives. This function must be inexpensive to call because when   a Delay is active it is polled twice per primitive call. On several   platforms (Mac, Win32), the high-resolution system clock used in   ioMSecs() would incur enough overhead in this case to slow down the   the VM significantly. Thus, a cheaper clock with low resolution is   used to implement ioLowResMSecs() on these platforms. Finally, the   function ioMicroMSecs() is used only to collect timing statistics   for the garbage collector and other VM facilities. (The function   name is meant to suggest that the function is based on a clock   with microsecond accuracy, even though the times it returns are   in units of milliseconds.) This clock must have enough precision to   provide accurate timings, and normally isn''t called frequently   enough to slow down the VM. Thus, it can use a more expensive clock   that ioMSecs(). By default, all three clock functions are defined   here as macros based on the standard C library function clock().   Any of these macros can be overridden in sqPlatformSpecific.h.*/int ioMSecs(void);int ioLowResMSecs(void);int ioMicroMSecs(void);#define ioMSecs()		((1000 * clock()) / CLOCKS_PER_SEC)#define ioLowResMSecs()	((1000 * clock()) / CLOCKS_PER_SEC)#define ioMicroMSecs()	((1000 * clock()) / CLOCKS_PER_SEC)/* this include file may redefine earlier definitions and macros: */#include "sqPlatformSpecific.h"/* interpreter entry points */void error(char *s);int checkedByteAt(int byteAddress);int checkedByteAtput(int byteAddress, int byte);int checkedLongAt(int byteAddress);int checkedLongAtput(int byteAddress, int a32BitInteger);int fullDisplayUpdate(void);int initializeInterpreter(int bytesToShift);int interpret(void);int primitiveFail(void);int signalSemaphoreWithIndex(int index);int success(int);/* display, mouse, keyboard, time i/o */int ioBeep(void);int ioExit(void);int ioForceDisplayUpdate(void);int ioFormPrint(	int bitsAddr, int width, int height, int depth,	double hScale, double vScale, int landscapeFlag);int ioSetFullScreen(int fullScreen);int ioGetButtonState(void);int ioGetKeystroke(void);int ioMousePoint(void);int ioPeekKeystroke(void);int ioProcessEvents(void);int ioRelinquishProcessorForMicroseconds(int microSeconds);int ioScreenSize(void);int ioSeconds(void);int ioSetCursor(int cursorBitsIndex, int offsetX, int offsetY);int ioSetCursorWithMask(int cursorBitsIndex, int cursorMaskIndex, int offsetX, int offsetY);int ioShowDisplay(	int dispBitsIndex, int width, int height, int depth,	int affectedL, int affectedR, int affectedT, int affectedB);int ioHasDisplayDepth(int depth);int ioSetDisplayMode(int width, int height, int depth, int fullscreenFlag);/* image file and VM path names */extern char imageName[];int imageNameGetLength(int sqImageNameIndex, int length);int imageNamePutLength(int sqImageNameIndex, int length);int imageNameSize(void);int vmPathSize(void);int vmPathGetLength(int sqVMPathIndex, int length);/* save/restore *//* Read the image from the given file starting at the given image offset */int readImageFromFileHeapSizeStartingAt(sqImageFile f, int desiredHeapSize, int imageOffset);/* NOTE: The following is obsolete - it is only provided for compatibility */#define readImageFromFileHeapSize(f, s) readImageFromFileHeapSizeStartingAt(f,s,0)/* clipboard (cut/copy/paste) */int clipboardSize(void);int clipboardReadIntoAt(int count, int byteArrayIndex, int startIndex);int clipboardWriteFromAt(int count, int byteArrayIndex, int startIndex);/* browser plug-in support */int plugInAllowAccessToFilePath(char *pathString, int pathStringLength);int plugInInit(char *imageName);int plugInShutdown(void);int plugInInterpretCycles(int cycleCount);/* interpreter entry points needed by compiled primitives */void * arrayValueOf(int arrayOop);int checkedIntegerValueOf(int intOop);void * fetchArrayofObject(int fieldIndex, int objectPointer);double fetchFloatofObject(int fieldIndex, int objectPointer);int fetchIntegerofObject(int fieldIndex, int objectPointer);double floatValueOf(int floatOop);int pop(int nItems);int pushInteger(int integerValue);int sizeOfSTArrayFromCPrimitive(void *cPtr);int storeIntegerofObjectwithValue(int fieldIndex, int objectPointer, int integerValue);/* profiling */int clearProfile(void);int dumpProfile(void);int startProfiling(void);int stopProfiling(void);/* system attributes */int attributeSize(int id);int getAttributeIntoLength(int id, int byteArrayIndex, int length);/* ar 5/13/2000:	The following set of miscellaneous and sound primitives should	at some point go into named primitives. Right now there are a few	problems with that (related to how the distinct set of methods can	be defined as residing in one plugin).*//* miscellaneous primitives */int primBitmapcompresstoByteArray(void);int primBitmapdecompressfromByteArrayat(void);int primSampledSoundconvert8bitSignedFromto16Bit(void);int primStringcomparewithcollated(void);int primStringfindFirstInStringinSetstartingAt(void);int primStringfindSubstringinstartingAtmatchTable(void);int primStringindexOfAsciiinStringstartingAt(void);int primStringtranslatefromtotable(void);/* sound generation primitives (old, for backward compatibility) */int primWaveTableSoundmixSampleCountintostartingAtpan(void);int primFMSoundmixSampleCountintostartingAtpan(void);int primPluckedSoundmixSampleCountintostartingAtpan(void);int primSampledSoundmixSampleCountintostartingAtpan(void);int oldprimSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);/* sound generation primitives */int primFMSoundmixSampleCountintostartingAtleftVolrightVol(void);int primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);int primPluckedSoundmixSampleCountintostartingAtleftVolrightVol(void);int primReverbSoundapplyReverbTostartingAtcount(void);int primSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);/*** sound compression primitives ***/int primADPCMCodecprivateDecodeMono(void);int primADPCMCodecprivateDecodeStereo(void);int primADPCMCodecprivateEncodeMono(void);int primADPCMCodecprivateEncodeStereo(void);/*** pluggable primitive support ***//* NOTE: The following functions are those implemented by sqNamedPrims.c */int ioLoadExternalFunctionOfLengthFromModuleOfLength(  int functionNameIndex, int functionNameLength,  int moduleNameIndex, int moduleNameLength);int ioUnloadModuleOfLength(int moduleNameIndex, int moduleNameLength);int ioLoadFunctionFrom(char *functionName, char *pluginName);int ioShutdownAllModules(void);int ioUnloadModule(char *);int ioUnloadModuleOfLength(int moduleNameIndex, int moduleNameLength);char *ioListBuiltinModule(int moduleIndex);/* The next two are FFI entries!! (implemented in sqNamedPrims.c as well) */int ioLoadModuleOfLength(int moduleNameIndex, int moduleNameLength);int ioLoadSymbolOfLengthFromModule(int functionNameIndex, int functionNameLength, int moduleHandle);/* The next three functions must be implemented by sqXYZExternalPrims.c *//* ioLoadModule:	Load a module from disk.	WARNING: this always loads a *new* module. Don''t even attempt to find a loaded one.	WARNING: never primitiveFail() within, just return 0*/int ioLoadModule(char *pluginName);/* ioFindExternalFunctionIn:	Find the function with the given name in the moduleHandle.	WARNING: never primitiveFail() within, just return 0.*/int ioFindExternalFunctionIn(char *lookupName, int moduleHandle);/* ioFreeModule:	Free the module with the associated handle.	WARNING: never primitiveFail() within, just return 0.*/int ioFreeModule(int moduleHandle);/* The Squeak version this interpreter was generated from */extern const char *interpreterVersion;'! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'ar 5/13/2000 17:48'!squeakNamedPrimsFile^'/*****************************************************************************   PROJECT: Squeak *   FILE:    sqNamedPrims.c*   CONTENT: Generic (cross platform) named primitive support**   AUTHOR:  Andreas Raab (ar)*   ADDRESS: Walt Disney Imagineering, Glendale, CA*   EMAIL:   Andreas.Raab@disney.com*   RCSID:   $Id$**   NOTES:******************************************************************************/#include "sq.h"#include "sqNamedPrims.h"#ifdef DEBUG#define dprintf(what) printf what#else#define dprintf(what)#endiftypedef struct ModuleEntry {	struct ModuleEntry *next;	void *handle;	int ffiLoaded;	char name[1];} ModuleEntry;static ModuleEntry *squeakModule = NULL;static ModuleEntry *firstModule = NULL;struct VirtualMachine *sqGetInterpreterProxy(void);static void *findLoadedModule(char *pluginName){	ModuleEntry *module;	if(!!pluginName || !!pluginName[0]) return squeakModule;	module = firstModule;	while(module) {		if(strcmp(module->name, pluginName) == 0) return module;		module = module->next;	}	return NULL;}static ModuleEntry *addToModuleList(char *pluginName, void* handle, int ffiFlag){	ModuleEntry *module;	module = (ModuleEntry*) calloc(1, sizeof(ModuleEntry) + strlen(pluginName));	strcpy(module->name, pluginName);	module->handle = handle;	module->ffiLoaded = ffiFlag;	module->next = firstModule;	firstModule = module;	return firstModule;}/*	removeFromList:	Remove the given entry from the list of loaded modules.	Do NOT free it yet.*/static int removeFromList(ModuleEntry *entry){	ModuleEntry *prevModule;	/* Unlink the entry from the module chain */	if(entry == firstModule) {		firstModule = entry->next;	} else {		prevModule = firstModule;		while(prevModule->next !!= entry)			prevModule = prevModule->next;		prevModule->next = entry->next;	}	return 1;}/*	findExternalFunctionIn:	Look up "pluginName_functionName" in the specified module through	the OS dependent call. NEVER used to search through the internal	primitive table.*/static void *findExternalFunctionIn(char *functionName, char *pluginName, ModuleEntry *module){	char lookupName[256];	void *result;	lookupName[0] = 0;	if(pluginName) {		if(strlen(pluginName) + strlen(functionName) + 1 > 255) return NULL; /* better don''t try */		strcat(lookupName, pluginName);		strcat(lookupName, "_");	}	strcat(lookupName, functionName);	dprintf(("Looking (externally) for %s ... ", lookupName));	if(module->handle)		result = (void*) ioFindExternalFunctionIn(lookupName, (int) module->handle);	else		result = NULL;	dprintf(("%s\n", result ? "found" : "not found"));	return result;}/*	findInternalFunctionIn:	Lookup the given "pluginName_functionName" in the internal	primitive table. If it can not be found try to look it up	by using the OS dependent mechanism (see comment below).*/static void *findInternalFunctionIn(char *functionName, char *pluginName){	char *function, *plugin;	int index;	dprintf(("Looking (internally) for %s in %s ... ", functionName, (pluginName ? pluginName : "<intrinsic>")));	/* canonicalize functionName and pluginName to be NULL if not specified */	if(functionName && !!functionName[0]) functionName = NULL;	if(pluginName && !!pluginName[0]) pluginName = NULL;	for(index=0;;index++) {		plugin = internalPrimitiveNames[index][0];		function = internalPrimitiveNames[index][1];		/* canonicalize plugin and function to be NULL if not specified */		if(plugin && !!plugin[0]) plugin = NULL;		if(function && !!function[0]) function = NULL;		if(!!plugin && !!function) {/* At end of table. */			dprintf(("not found\n"));			return NULL;		}		/* check for module name match */		if((pluginName == NULL) !!= (plugin == NULL)) continue; /* one is missing */		if(plugin && strcmp(pluginName, plugin)) continue; /* name mismatch */		/* check for function name match */		if((functionName == NULL) !!= (function == NULL)) continue; /* one is missing */		if(function && strcmp(functionName, function)) continue; /* name mismatch */		/* match */		dprintf(("found\n"));		return internalPrimitiveAddresses[index];	}}static void *findFunctionIn(char *functionName, char *pluginName, ModuleEntry *module){	if(module->handle == squeakModule->handle)		return findInternalFunctionIn(functionName, pluginName);	else		return findExternalFunctionIn(functionName, NULL, module);}/*	callInitializersIn:	Call the required initializers in the given module.	The module has been loaded before so the task is to	call a) setInterpreter() and check it''s return, and	b) initialiseModule (if defined) and check it''s return	as well.*/static int callInitializersIn(ModuleEntry *module){	void *init0;	void *init1;	void *init2;	char *moduleName;	int okay;	if(module->handle == squeakModule->handle) {		/* look it up internally */		init0 = findInternalFunctionIn("getModuleName", module->name);		init1 = findInternalFunctionIn("setInterpreter", module->name);		init2 = findInternalFunctionIn("initialiseModule", module->name);	} else {		init0 = findExternalFunctionIn("getModuleName", NULL, module);		init1 = findExternalFunctionIn("setInterpreter", NULL, module);		init2 = findExternalFunctionIn("initialiseModule", NULL, module);	}	if(init0) {		/* Check the canonicalized name of the module */		moduleName = ((char* (*) (void))init0)();		if(!!moduleName) {			dprintf(("ERROR: getModuleName() returned NULL\n"));			return 0;		}		if(strcmp(moduleName, module->name) !!= 0) {			dprintf(("ERROR: getModuleName returned %s (expected: %s)\n", moduleName, module->name));			return 0;		}	} else {		/* Note: older plugins may not export the canonicalized module name */		dprintf(("WARNING: getModuleName() not found in %s\n", module->name));	}	if(!!init1) { 		dprintf(("ERROR: setInterpreter() not found\n"));		return 0;	}	/* call setInterpreter */	okay = ((int (*) (struct VirtualMachine*))init1)(sqGetInterpreterProxy());	if(!!okay) {		dprintf(("ERROR: setInterpreter() returned false\n"));		return 0;	}	if(init2) {		okay = ((int (*) (void)) init2)();		if(!!okay) {			dprintf(("ERROR: initialiseModule() returned false\n"));			return 0;		}	}	dprintf(("SUCCESS: Module %s is now initialized\n", module->name));	return 1;}/*	findAndLoadModule:	Find the module with the given name by,	* first looking it up in some (external) shared library	* then, by trying to find pluginName_setInterpreter.	If the module is found and the initialisers work, add it	to the list of loaded modules and return the new module.	If anything goes wrong make sure the module is unloaded	(WITHOUT calling shutdownModule()) and return NULL.*/static ModuleEntry *findAndLoadModule(char *pluginName, int ffiLoad){	void *handle;	ModuleEntry *module;	dprintf(("Looking for plugin %s\n", (pluginName ? pluginName : "<intrinsic>")));	/* Try to load the module externally */	handle = (void*) ioLoadModule(pluginName);	if(ffiLoad) {		/* When dealing with the FFI, don''t attempt to mess around internally */		if(!!handle) return NULL;		return addToModuleList(pluginName, handle, ffiLoad);	}	/* NOT ffiLoad */	if(!!handle) {		/* might be internal, so go looking for setInterpreter() */		if(findInternalFunctionIn("setInterpreter", pluginName))			handle = squeakModule->handle;		else			return NULL; /* PluginName_setInterpreter() not found */	}	module = addToModuleList(pluginName, handle, ffiLoad);	if(!!callInitializersIn(module)) {		/* Initializers failed */		if(handle !!= squeakModule->handle) {			/* physically unload module */			ioFreeModule((int)handle);		}		removeFromList(module); /* remove list entry */		free(module); /* give back space */		module = NULL;	}	return module;}/* findOrLoadModule:	Look if the given module is already loaded. 	If so, return it''s handle, otherwise try to load it.*/static ModuleEntry *findOrLoadModule(char *pluginName, int ffiLoad){	ModuleEntry *module;	if(!!squeakModule) {		/* Load intrinsics (if possible) */		squeakModule = addToModuleList("", NULL, 1);		firstModule = NULL; /* drop off module list - will never be unloaded */	}	/* see if the module was already loaded */	module = findLoadedModule(pluginName);	if(!!module) {		/* if not try loading it */		module = findAndLoadModule(pluginName, ffiLoad);	}	return module; /* module not found */}/* ioLoadFunctionFrom:	Load and return the given function from the specified plugin.	Return the function address if successful, otherwise 0.	This entry point is called from the interpreter proxy.*/int ioLoadFunctionFrom(char *functionName, char *pluginName){	ModuleEntry *module;	module = findOrLoadModule(pluginName, 0);	if(!!module) {		/* no module */		dprintf(("Failed to find %s (module %s was not loaded)\n", functionName, pluginName));		return 0;	}	if(!!functionName) {		/* only the module was requested but not any specific function */		return 1;	}	/* and load the actual function */	return (int) findFunctionIn(functionName, pluginName, module);}/* ioLoadExternalFunctionOfLengthFromModuleOfLength	Entry point for functions looked up through the VM.*/int ioLoadExternalFunctionOfLengthFromModuleOfLength(int functionNameIndex, int functionNameLength,                                                      int moduleNameIndex,   int moduleNameLength){	char functionName[256];	char moduleName[256];	int i;	if(functionNameLength > 255 || moduleNameLength > 255)		return 0; /* can''t cope with those */	for(i=0; i< functionNameLength; i++)		functionName[i] = ((char*)functionNameIndex)[i];	functionName[functionNameLength] = 0;	for(i=0; i< moduleNameLength; i++)		moduleName[i] = ((char*)moduleNameIndex)[i];	moduleName[moduleNameLength] = 0;	return ioLoadFunctionFrom(functionName, moduleName);}/* ioLoadSymbolOfLengthFromModule	This entry point is exclusively for the FFI.*/int ioLoadSymbolOfLengthFromModule(int functionNameIndex, int functionNameLength, int moduleHandle){	char functionName[256];	int i;	if(functionNameLength > 255)		return 0; /* can''t cope with those */	for(i=0; i< functionNameLength; i++)		functionName[i] = ((char*)functionNameIndex)[i];	functionName[functionNameLength] = 0;	if(moduleHandle)		return ioFindExternalFunctionIn(functionName, moduleHandle);	else		return 0;}/* ioLoadModuleOfLength	This entry point is exclusively for the FFI.	It does *NOT* call any of the initializers nor	does it attempt to lookup stuff internally.*/int ioLoadModuleOfLength(int moduleNameIndex, int moduleNameLength){	ModuleEntry *module;	char moduleName[256];	int i;	if(moduleNameLength > 255) return 0; /* can''t cope with those */	for(i=0; i< moduleNameLength; i++)		moduleName[i] = ((char*)moduleNameIndex)[i];	moduleName[moduleNameLength] = 0;	module = findOrLoadModule(moduleName, 1);	if(module) return (int) module->handle;	return 0;}/* shutdownModule:	Call the shutdown mechanism from the specified module.*/static int shutdownModule(ModuleEntry *module){	void* fn;	if(module->ffiLoaded) return 1; /* don''t even attempt for ffi loaded modules */	/* load the actual function */	fn = findFunctionIn("shutdownModule", module->name, module);	if(fn) return ((int (*) (void)) fn) ();	return 1;}/* ioShutdownAllModules:	Call the shutdown mechanism for all loaded modules.*/int ioShutdownAllModules(void){	ModuleEntry *entry;	entry = firstModule;	while(entry) {		shutdownModule(entry);		entry = entry->next;	}	return 1;}/* ioUnloadModule:	Unload the module with the given name.*/int ioUnloadModule(char *moduleName){	ModuleEntry *entry;	if(!!squeakModule) return 0; /* Nothing has been loaded */	if(!!moduleName || !!moduleName[0]) return 0; /* nope */	entry = findLoadedModule(moduleName);	if(!!entry) return 1; /* module was never loaded */	/* Try to shutdown the module */	shutdownModule(entry);	/* And actually unload it if it isn''t just the VM... */	if(entry->handle !!= squeakModule->handle)		ioFreeModule((int) entry->handle);	removeFromList(entry);	free(entry); /* give back space */	return 1;}/* ioUnloadModuleOfLength:	Entry point for the interpreter.*/int ioUnloadModuleOfLength(int moduleNameIndex, int moduleNameLength){	char moduleName[256];	int i;	if(moduleNameLength > 255) return 0; /* can''t cope with those */	for(i=0; i< moduleNameLength; i++)		moduleName[i] = ((char*)moduleNameIndex)[i];	moduleName[moduleNameLength] = 0;	return ioUnloadModule(moduleName);}/* ioListBuiltinModule:	Return the name of the n-th builtin module.*/char *ioListBuiltinModule(int moduleIndex){	int index;	char *function;	char *plugin;	for(index=0;;index++) {		plugin = internalPrimitiveNames[index][0];		function = internalPrimitiveNames[index][1];		if(!!function && !!plugin) return NULL; /* no more plugins */		if(strcmp(function,"setInterpreter") == 0) {			/* new module */			if(--moduleIndex == 0) {				return plugin;			}		}	}}'! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'ar 5/13/2000 14:56'!squeakVirtualMachineFile^'#include <math.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <time.h>#include "sqVirtualMachine.h"/*** Function prototypes ***//* InterpreterProxy methodsFor: ''stack access'' */int pop(int nItems);int popthenPush(int nItems, int oop);int push(int object);int pushBool(int trueOrFalse);int pushFloat(double f);int pushInteger(int integerValue);double stackFloatValue(int offset);int stackIntegerValue(int offset);int stackObjectValue(int offset);int stackValue(int offset);/*** variables ***/extern int (*compilerHooks[])();extern int setCompilerInitialized(int flagValue);/* InterpreterProxy methodsFor: ''object access'' */int argumentCountOf(int methodPointer);void * arrayValueOf(int oop);int byteSizeOf(int oop);void * fetchArrayofObject(int fieldIndex, int objectPointer);int fetchClassOf(int oop);double fetchFloatofObject(int fieldIndex, int objectPointer);int fetchIntegerofObject(int fieldIndex, int objectPointer);int fetchPointerofObject(int index, int oop);int fetchWordofObject(int fieldIndex, int oop);void * firstFixedField(int oop);void * firstIndexableField(int oop);int literalofMethod(int offset, int methodPointer);int literalCountOf(int methodPointer);int methodArgumentCount(void);int methodPrimitiveIndex(void);int primitiveMethod(void);int primitiveIndexOf(int methodPointer);int sizeOfSTArrayFromCPrimitive(void *cPtr);int slotSizeOf(int oop);int stObjectat(int array, int index);int stObjectatput(int array, int index, int value);int stSizeOf(int oop);int storeIntegerofObjectwithValue(int index, int oop, int integer);int storePointerofObjectwithValue(int index, int oop, int valuePointer);/* InterpreterProxy methodsFor: ''testing'' */int isKindOf(int oop, char *aString);int isMemberOf(int oop, char *aString);int isBytes(int oop);int isFloatObject(int oop);int isIndexable(int oop);int isIntegerObject(int objectPointer);int isIntegerValue(int intValue);int isPointers(int oop);int isWeak(int oop);int isWords(int oop);int isWordsOrBytes(int oop);int includesBehaviorThatOf(int aClass, int aSuperClass);/* InterpreterProxy methodsFor: ''converting'' */int booleanValueOf(int obj);int checkedIntegerValueOf(int intOop);int floatObjectOf(double aFloat);double floatValueOf(int oop);int integerObjectOf(int value);int integerValueOf(int oop);int positive32BitIntegerFor(int integerValue);int positive32BitValueOf(int oop);int signed32BitIntegerFor(int integerValue);int signed32BitValueOf(int oop);/* InterpreterProxy methodsFor: ''special objects'' */int characterTable(void);int displayObject(void);int falseObject(void);int nilObject(void);int trueObject(void);/* InterpreterProxy methodsFor: ''special classes'' */int classArray(void);int classBitmap(void);int classByteArray(void);int classCharacter(void);int classFloat(void);int classLargePositiveInteger(void);int classLargeNegativeInteger(void);int classPoint(void);int classSemaphore(void);int classSmallInteger(void);int classString(void);/* InterpreterProxy methodsFor: ''instance creation'' */int clone(int oop);int instantiateClassindexableSize(int classPointer, int size);int makePointwithxValueyValue(int xValue, int yValue);int popRemappableOop(void);int pushRemappableOop(int oop);/* InterpreterProxy methodsFor: ''other'' */int becomewith(int array1, int array2);int byteSwapped(int w);int failed(void);int fullDisplayUpdate(void);int fullGC(void);int incrementalGC(void);int primitiveFail(void);int showDisplayBitsLeftTopRightBottom(int aForm, int l, int t, int r, int b);int signalSemaphoreWithIndex(int semaIndex);int success(int aBoolean);int superclassOf(int classPointer);int ioMicroMSecs(void);/* InterpreterProxy methodsFor: ''BitBlt support'' */int loadBitBltFrom(int bbOop);int copyBits(void);int copyBitsFromtoat(int leftX, int rightX, int yValue);/* InterpreterProxy methodsFor: ''FFI support'' */int classExternalAddress(void);int classExternalData(void);int classExternalFunction(void);int classExternalLibrary(void);int classExternalStructure(void);int ioLoadModuleOfLength(int moduleNameIndex, int moduleNameLength);int ioLoadSymbolOfLengthFromModule(int functionNameIndex, int functionNameLength, int moduleHandle);int isInMemory(int address);int ioLoadFunctionFrom(char *fnName, char *modName);struct VirtualMachine *VM = NULL;static int majorVersion(void) {	return VM_PROXY_MAJOR;}static int minorVersion(void) {	return VM_PROXY_MINOR;}static CompilerHook *compilerHookVector(void) {  return compilerHooks;}struct VirtualMachine* sqGetInterpreterProxy(void){	if(VM) return VM;	VM = (struct VirtualMachine *) calloc(1, sizeof(VirtualMachine));	/* Initialize Function pointers */	VM->majorVersion = majorVersion;	VM->minorVersion = minorVersion;	/* InterpreterProxy methodsFor: ''stack access'' */	VM->pop = pop;	VM->popthenPush = popthenPush;	VM->push = push;	VM->pushBool = pushBool;	VM->pushFloat = pushFloat;	VM->pushInteger = pushInteger;	VM->stackFloatValue = stackFloatValue;	VM->stackIntegerValue = stackIntegerValue;	VM->stackObjectValue = stackObjectValue;	VM->stackValue = stackValue;		/* InterpreterProxy methodsFor: ''object access'' */	VM->argumentCountOf = argumentCountOf;	VM->arrayValueOf = arrayValueOf;	VM->byteSizeOf = byteSizeOf;	VM->fetchArrayofObject = fetchArrayofObject;	VM->fetchClassOf = fetchClassOf;	VM->fetchFloatofObject = fetchFloatofObject;	VM->fetchIntegerofObject = fetchIntegerofObject;	VM->fetchPointerofObject = fetchPointerofObject;	VM->fetchWordofObject = fetchWordofObject;	VM->firstFixedField = firstFixedField;	VM->firstIndexableField = firstIndexableField;	VM->literalofMethod = literalofMethod;	VM->literalCountOf = literalCountOf;	VM->methodArgumentCount = methodArgumentCount;	VM->methodPrimitiveIndex = methodPrimitiveIndex;	VM->primitiveIndexOf = primitiveIndexOf;	VM->primitiveMethod = primitiveMethod;	VM->sizeOfSTArrayFromCPrimitive = sizeOfSTArrayFromCPrimitive;	VM->slotSizeOf = slotSizeOf;	VM->stObjectat = stObjectat;	VM->stObjectatput = stObjectatput;	VM->stSizeOf = stSizeOf;	VM->storeIntegerofObjectwithValue = storeIntegerofObjectwithValue;	VM->storePointerofObjectwithValue = storePointerofObjectwithValue;		/* InterpreterProxy methodsFor: ''testing'' */	VM->isKindOf = isKindOf;	VM->isMemberOf = isMemberOf;	VM->isBytes = isBytes;	VM->isFloatObject = isFloatObject;	VM->isIndexable = isIndexable;	VM->isIntegerObject = isIntegerObject;	VM->isIntegerValue = isIntegerValue;	VM->isPointers = isPointers;	VM->isWeak = isWeak;	VM->isWords = isWords;	VM->isWordsOrBytes = isWordsOrBytes;	/* InterpreterProxy methodsFor: ''converting'' */	VM->booleanValueOf = booleanValueOf;	VM->checkedIntegerValueOf = checkedIntegerValueOf;	VM->floatObjectOf = floatObjectOf;	VM->floatValueOf = floatValueOf;	VM->integerObjectOf = integerObjectOf;	VM->integerValueOf = integerValueOf;	VM->positive32BitIntegerFor = positive32BitIntegerFor;	VM->positive32BitValueOf = positive32BitValueOf;	/* InterpreterProxy methodsFor: ''special objects'' */	VM->characterTable = characterTable;	VM->displayObject = displayObject;	VM->falseObject = falseObject;	VM->nilObject = nilObject;	VM->trueObject = trueObject;		/* InterpreterProxy methodsFor: ''special classes'' */	VM->classArray = classArray;	VM->classBitmap = classBitmap;	VM->classByteArray = classByteArray;	VM->classCharacter = classCharacter;	VM->classFloat = classFloat;	VM->classLargePositiveInteger = classLargePositiveInteger;	VM->classPoint = classPoint;	VM->classSemaphore = classSemaphore;	VM->classSmallInteger = classSmallInteger;	VM->classString = classString;		/* InterpreterProxy methodsFor: ''instance creation'' */	VM->clone = clone;	VM->instantiateClassindexableSize = instantiateClassindexableSize;	VM->makePointwithxValueyValue = makePointwithxValueyValue;	VM->popRemappableOop = popRemappableOop;	VM->pushRemappableOop = pushRemappableOop;		/* InterpreterProxy methodsFor: ''other'' */	VM->becomewith = becomewith;	VM->byteSwapped = byteSwapped;	VM->failed = failed;	VM->fullDisplayUpdate = fullDisplayUpdate;	VM->fullGC = fullGC;	VM->incrementalGC = incrementalGC;	VM->primitiveFail = primitiveFail;	VM->showDisplayBitsLeftTopRightBottom = showDisplayBitsLeftTopRightBottom;	VM->signalSemaphoreWithIndex = signalSemaphoreWithIndex;	VM->success = success;	VM->superclassOf = superclassOf;	VM->compilerHookVector= compilerHookVector;	VM->setCompilerInitialized= setCompilerInitialized;#if VM_PROXY_MINOR > 1	/* InterpreterProxy methodsFor: ''BitBlt support'' */	VM->loadBitBltFrom = loadBitBltFrom;	VM->copyBits = copyBits;	VM->copyBitsFromtoat = copyBitsFromtoat;#endif#if VM_PROXY_MINOR > 2	/* InterpreterProxy methodsFor: ''FFI support'' */	VM->classExternalAddress = classExternalAddress;	VM->classExternalData = classExternalData;	VM->classExternalFunction = classExternalFunction;	VM->classExternalLibrary = classExternalLibrary;	VM->classExternalStructure = classExternalStructure;	VM->ioLoadModuleOfLength = ioLoadModuleOfLength;	VM->ioLoadSymbolOfLengthFromModule = ioLoadSymbolOfLengthFromModule;	VM->isInMemory = isInMemory;	VM->signed32BitIntegerFor = signed32BitIntegerFor;	VM->signed32BitValueOf = signed32BitValueOf;	VM->includesBehaviorThatOf = includesBehaviorThatOf;	VM->classLargeNegativeInteger = classLargeNegativeInteger;#endif#if VM_PROXY_MINOR > 3	VM->ioLoadFunctionFrom = ioLoadFunctionFrom;	VM->ioMicroMSecs = ioMicroMSecs;#endif	return VM;}'! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'ar 5/13/2000 14:57'!squeakVirtualMachineHeaderFile^ '#ifndef _SqueakVM_H#define _SqueakVM_H/* Increment the following number if you change the order of   functions listed or if you remove functions */#define VM_PROXY_MAJOR 1/* Note: You can define a different VM_PROXY_MINOR if the plugin   should work with older VMs. */#ifndef VM_PROXY_MINOR/* Increment the following number if you add functions at the end */#define VM_PROXY_MINOR 4#endiftypedef int (*CompilerHook)();struct VirtualMachine* sqGetInterpreterProxy(void);typedef struct VirtualMachine {	int (*minorVersion) (void);	int (*majorVersion) (void);	/* InterpreterProxy methodsFor: ''stack access'' */	int (*pop)(int nItems);	int (*popthenPush)(int nItems, int oop);	int (*push)(int object);	int (*pushBool)(int trueOrFalse);	int (*pushFloat)(double f);	int (*pushInteger)(int integerValue);	double (*stackFloatValue)(int offset);	int (*stackIntegerValue)(int offset);	int (*stackObjectValue)(int offset);	int (*stackValue)(int offset);		/* InterpreterProxy methodsFor: ''object access'' */	int (*argumentCountOf)(int methodPointer);	void * (*arrayValueOf)(int oop);	int (*byteSizeOf)(int oop);	void * (*fetchArrayofObject)(int fieldIndex, int objectPointer);	int (*fetchClassOf)(int oop);	double (*fetchFloatofObject)(int fieldIndex, int objectPointer);	int (*fetchIntegerofObject)(int fieldIndex, int objectPointer);	int (*fetchPointerofObject)(int index, int oop);	int (*fetchWordofObject)(int fieldIndex, int oop);	void * (*firstFixedField)(int oop);	void * (*firstIndexableField)(int oop);	int (*literalofMethod)(int offset, int methodPointer);	int (*literalCountOf)(int methodPointer);	int (*methodArgumentCount)(void);	int (*methodPrimitiveIndex)(void);	int (*primitiveIndexOf)(int methodPointer);	int (*sizeOfSTArrayFromCPrimitive)(void *cPtr);	int (*slotSizeOf)(int oop);	int (*stObjectat)(int array, int index);	int (*stObjectatput)(int array, int index, int value);	int (*stSizeOf)(int oop);	int (*storeIntegerofObjectwithValue)(int index, int oop, int integer);	int (*storePointerofObjectwithValue)(int index, int oop, int valuePointer);		/* InterpreterProxy methodsFor: ''testing'' */	int (*isKindOf)(int oop, char *aString);	int (*isMemberOf)(int oop, char *aString);	int (*isBytes)(int oop);	int (*isFloatObject)(int oop);	int (*isIndexable)(int oop);	int (*isIntegerObject)(int objectPointer);	int (*isIntegerValue)(int intValue);	int (*isPointers)(int oop);	int (*isWeak)(int oop);	int (*isWords)(int oop);	int (*isWordsOrBytes)(int oop);		/* InterpreterProxy methodsFor: ''converting'' */	int (*booleanValueOf)(int obj);	int (*checkedIntegerValueOf)(int intOop);	int (*floatObjectOf)(double aFloat);	double (*floatValueOf)(int oop);	int (*integerObjectOf)(int value);	int (*integerValueOf)(int oop);	int (*positive32BitIntegerFor)(int integerValue);	int (*positive32BitValueOf)(int oop);		/* InterpreterProxy methodsFor: ''special objects'' */	int (*characterTable)(void);	int (*displayObject)(void);	int (*falseObject)(void);	int (*nilObject)(void);	int (*trueObject)(void);		/* InterpreterProxy methodsFor: ''special classes'' */	int (*classArray)(void);	int (*classBitmap)(void);	int (*classByteArray)(void);	int (*classCharacter)(void);	int (*classFloat)(void);	int (*classLargePositiveInteger)(void);	int (*classPoint)(void);	int (*classSemaphore)(void);	int (*classSmallInteger)(void);	int (*classString)(void);		/* InterpreterProxy methodsFor: ''instance creation'' */	int (*clone)(int oop);	int (*instantiateClassindexableSize)(int classPointer, int size);	int (*makePointwithxValueyValue)(int xValue, int yValue);	int (*popRemappableOop)(void);	int (*pushRemappableOop)(int oop);		/* InterpreterProxy methodsFor: ''other'' */	int (*becomewith)(int array1, int array2);	int (*byteSwapped)(int w);	int (*failed)(void);	int (*fullDisplayUpdate)(void);	int (*fullGC)(void);	int (*incrementalGC)(void);	int (*primitiveFail)(void);	int (*showDisplayBitsLeftTopRightBottom)(int aForm, int l, int t, int r, int b);	int (*signalSemaphoreWithIndex)(int semaIndex);	int (*success)(int aBoolean);	int (*superclassOf)(int classPointer);	/* InterpreterProxy methodsFor: ''compiler'' */	CompilerHook *(*compilerHookVector)(void);	int (*setCompilerInitialized)(int initFlag);#if VM_PROXY_MINOR > 1	/* new for proxy 1.2 */	/* InterpreterProxy methodsFor: ''BitBlt support'' */	int (*loadBitBltFrom)(int bbOop);	int (*copyBits)(void);	int (*copyBitsFromtoat)(int leftX, int rightX, int yValue);#endif#if VM_PROXY_MINOR > 2	/* New for proxy version 1.3 */	int (*classLargeNegativeInteger)(void);	int (*signed32BitIntegerFor)(int integerValue);	int (*signed32BitValueOf)(int oop);	int (*includesBehaviorThatOf)(int aClass, int aSuperClass);	int (*primitiveMethod) (void);	/* InterpreterProxy methodsFor: ''FFI support'' */	int (*classExternalAddress)(void);	int (*classExternalData)(void);	int (*classExternalFunction)(void);	int (*classExternalLibrary)(void);	int (*classExternalStructure)(void);	int (*ioLoadModuleOfLength)(int modIndex, int modLength);	int (*ioLoadSymbolOfLengthFromModule)(int fnIndex, int fnLength, int handle);	int (*isInMemory)(int address);#endif#if VM_PROXY_MINOR > 3	/* New for proxy 1.4 */	int (*ioLoadFunctionFrom)(char *fnName, char *modName);	int (*ioMicroMSecs)(void);#endif} VirtualMachine;#endif /* _SqueakVM_H */'! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'ar 5/16/2000 00:54'!listBuiltinModule: index	"Return the name of the n-th builtin module.	This list is not sorted!!"	<primitive: 572>	^self primitiveFailed! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'ar 5/16/2000 00:54'!listBuiltinModules	"Smalltalk listBuiltinModules"	"Return a list of all builtin modules (e.g., plugins).	This list is not sorted!!"	| modules index name |	modules _ WriteStream on: Array new.	index _ 1.	[true] whileTrue:[		name _ self listBuiltinModule: index.		name ifNil:[^modules contents].		modules nextPut: name.		index _ index + 1.	].! !Interpreter subclass: #InterpreterSimulator	instanceVariableNames: 'byteCount sendCount traceOn myBitBlt displayForm filesOpen imageName pluginList mappedPluginEntries '	classVariableNames: ''	poolDictionaries: ''	category: 'VMConstruction-Interpreter'!Interpreter removeSelector: #asciiDirectoryDelimiter!Interpreter removeSelector: #asyncFileValueOf:!Interpreter removeSelector: #fileRecordSize!Interpreter removeSelector: #fileValueOf:!Interpreter removeSelector: #intToNetAddress:!Interpreter removeSelector: #makeDirEntryName:size:createDate:modDate:isDir:fileSize:!Interpreter removeSelector: #netAddressToInt:!Interpreter removeSelector: #primitiveAsyncFileClose!Interpreter removeSelector: #primitiveAsyncFileOpen!Interpreter removeSelector: #primitiveAsyncFileReadResult!Interpreter removeSelector: #primitiveAsyncFileReadStart!Interpreter removeSelector: #primitiveAsyncFileWriteResult!Interpreter removeSelector: #primitiveAsyncFileWriteStart!Interpreter removeSelector: #primitiveCopyBits!Interpreter removeSelector: #primitiveDirectoryCreate!Interpreter removeSelector: #primitiveDirectoryDelete!Interpreter removeSelector: #primitiveDirectoryDelimitor!Interpreter removeSelector: #primitiveDirectoryLookup!Interpreter removeSelector: #primitiveDirectorySetMacTypeAndCreator!Interpreter removeSelector: #primitiveDrawLoop!Interpreter removeSelector: #primitiveFileAtEnd!Interpreter removeSelector: #primitiveFileClose!Interpreter removeSelector: #primitiveFileDelete!Interpreter removeSelector: #primitiveFileGetPosition!Interpreter removeSelector: #primitiveFileOpen!Interpreter removeSelector: #primitiveFileRead!Interpreter removeSelector: #primitiveFileRename!Interpreter removeSelector: #primitiveFileSetPosition!Interpreter removeSelector: #primitiveFileSize!Interpreter removeSelector: #primitiveFileWrite!Interpreter removeSelector: #primitiveInitializeNetwork!Interpreter removeSelector: #primitiveMIDIClosePort!Interpreter removeSelector: #primitiveMIDIGetClock!Interpreter removeSelector: #primitiveMIDIGetPortCount!Interpreter removeSelector: #primitiveMIDIGetPortDirectionality!Interpreter removeSelector: #primitiveMIDIGetPortName!Interpreter removeSelector: #primitiveMIDIOpenPort!Interpreter removeSelector: #primitiveMIDIParameterGetOrSet!Interpreter removeSelector: #primitiveMIDIRead!Interpreter removeSelector: #primitiveMIDIWrite!Interpreter removeSelector: #primitiveReadJoystick!Interpreter removeSelector: #primitiveReadTablet!Interpreter removeSelector: #primitiveResolverAbortLookup!Interpreter removeSelector: #primitiveResolverAddressLookupResult!Interpreter removeSelector: #primitiveResolverError!Interpreter removeSelector: #primitiveResolverLocalAddress!Interpreter removeSelector: #primitiveResolverNameLookupResult!Interpreter removeSelector: #primitiveResolverStartAddressLookup!Interpreter removeSelector: #primitiveResolverStartNameLookup!Interpreter removeSelector: #primitiveResolverStatus!Interpreter removeSelector: #primitiveScanCharacters!Interpreter removeSelector: #primitiveSerialPortClose!Interpreter removeSelector: #primitiveSerialPortOpen!Interpreter removeSelector: #primitiveSerialPortRead!Interpreter removeSelector: #primitiveSerialPortWrite!Interpreter removeSelector: #primitiveSocketAbortConnection!Interpreter removeSelector: #primitiveSocketAccept!Interpreter removeSelector: #primitiveSocketCloseConnection!Interpreter removeSelector: #primitiveSocketConnectToPort!Interpreter removeSelector: #primitiveSocketConnectionStatus!Interpreter removeSelector: #primitiveSocketCreate!Interpreter removeSelector: #primitiveSocketDestroy!Interpreter removeSelector: #primitiveSocketError!Interpreter removeSelector: #primitiveSocketListenOnPort!Interpreter removeSelector: #primitiveSocketLocalAddress!Interpreter removeSelector: #primitiveSocketLocalPort!Interpreter removeSelector: #primitiveSocketReceiveDataAvailable!Interpreter removeSelector: #primitiveSocketReceiveDataBufCount!Interpreter removeSelector: #primitiveSocketRemoteAddress!Interpreter removeSelector: #primitiveSocketRemotePort!Interpreter removeSelector: #primitiveSocketSendDataBufCount!Interpreter removeSelector: #primitiveSocketSendDone!Interpreter removeSelector: #primitiveSoundAvailableSpace!Interpreter removeSelector: #primitiveSoundGetRecordingSampleRate!Interpreter removeSelector: #primitiveSoundInsertSamples!Interpreter removeSelector: #primitiveSoundPlaySamples!Interpreter removeSelector: #primitiveSoundPlaySilence!Interpreter removeSelector: #primitiveSoundRecordSamples!Interpreter removeSelector: #primitiveSoundSetRecordLevel!Interpreter removeSelector: #primitiveSoundStart!Interpreter removeSelector: #primitiveSoundStartRecording!Interpreter removeSelector: #primitiveSoundStartWithSemaphore!Interpreter removeSelector: #primitiveSoundStop!Interpreter removeSelector: #primitiveSoundStopRecording!Interpreter removeSelector: #primitiveWarpBits!Interpreter removeSelector: #socketRecordSize!Interpreter removeSelector: #socketValueOf:!ObjectMemory subclass: #Interpreter	instanceVariableNames: 'activeContext theHomeContext method receiver instructionPointer stackPointer localIP localSP localHomeContext messageSelector argumentCount newMethod currentBytecode successFlag primitiveIndex methodCache atCache lkupClass reclaimableContextCount nextPollTick nextWakeupTick lastTick interruptKeycode interruptPending semaphoresToSignal semaphoresToSignalCount savedWindowSize fullScreenFlag deferDisplayUpdates pendingFinalizationSignals compilerInitialized compilerHooks extraVMMemory interpreterVersion obsoleteIndexedPrimitiveTable obsoleteNamedPrimitiveTable interpreterProxy '	classVariableNames: 'ActiveProcessIndex AtCacheEntries AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BlockArgumentCountIndex BytecodeTable CacheProbeMax CallerIndex CharacterValueIndex CompilerHooksSize DirBadPath DirEntryFound DirNoMoreEntries ExcessSignalsIndex FirstLinkIndex HeaderIndex HomeIndex InitialIPIndex InstanceSpecificationIndex InstructionPointerIndex LastLinkIndex LiteralStart MaxPrimitiveIndex MessageArgumentsIndex MessageDictionaryIndex MessageLookupClassIndex MessageSelectorIndex MethodArrayIndex MethodCacheClass MethodCacheEntries MethodCacheEntrySize MethodCacheMask MethodCacheMethod MethodCachePrim MethodCacheSelector MethodCacheSize MethodIndex MyListIndex NextLinkIndex PrimitiveExternalCallIndex PrimitiveTable PriorityIndex ProcessListsIndex ReceiverIndex SelectorStart SemaphoresToSignalSize SenderIndex StackPointerIndex StreamArrayIndex StreamIndexIndex StreamReadLimitIndex StreamWriteLimitIndex SuperclassIndex SuspendedContextIndex TempFrameStart ValueIndex XIndex YIndex '	poolDictionaries: ''	category: 'VMConstruction-Interpreter'!