"Change Set:		celMisc-lsDate:			10 February 2001Author:			Lex SpoonSeveral bugfixes and speedups for Celeste:	1. custom filters are compiled ahead of time (important for automatic filter selection).	2. a bug in 'edit compiled filter' is fixed.	3. the menu for choosing a filter is more frequently presented in sorted order.	4. Displayed message numbers are updated correctly when #removeMessage is called.	5. The old single-column table of contents is no longer computed.	6. When a message is auto-moved or auto-filed, use the destination folder in fileAgain and moveAgain.Celeste still runs fairly slowly, but the delays are mostly in UI code and are hard (for this guy) to track down."!Model subclass: #Celeste	instanceVariableNames: 'mailDB currentCategory currentMessages currentTOC currentMsgID lastCategory subjectFilter fromFilter participantFilter dateFilter customFilterBlock formatMessages lastCategoryList lastCategoryMenu messageTextView userPassword compiledCustomFilters tocLists status '	classVariableNames: 'CCList CustomFilters CustomFiltersCompiled DeleteInboxAfterFetching FormatWhenFetching MessageCountLimit PopServer PopUserName SmtpServer SuppressWorthlessHeaderFields TimeZone UserName '	poolDictionaries: ''	category: 'Network-Mail Reader'!!Celeste methodsFor: 'categories pane' stamp: 'ls 2/10/2001 10:25'!cacheTOC	"Caches a version of the TOC"	| tocStringColumns |	self initializeTocLists.	'Processing ' , currentMessages size printString , ' messages.'		displayProgressAt: Sensor cursorPoint		from: 0		to: currentMessages size		during: [:bar | 1				to: currentMessages size				do: [:i | 					bar value: i.					(self tocLists at: 1)						add: i printString.					"columns from the database are 5"					tocStringColumns _ mailDB								getTOCstringAsColumns: (currentMessages at: i).					(self tocLists at: 2)						add: ((tocStringColumns at: 5)								ifTrue: ['@']								ifFalse: [' ']).					(self tocLists at: 3)						add: (tocStringColumns at: 1).					(self tocLists at: 4)						add: (tocStringColumns at: 2).					(self tocLists at: 5)						add: (tocStringColumns at: 4).					(self tocLists at: 6)						add: (tocStringColumns at: 3)]].	(currentMessages includes: currentMsgID)		ifFalse: [currentMsgID _ nil]! !!Celeste methodsFor: 'categories pane' stamp: 'ls 2/10/2001 10:32'!setCategory: newCategory 	"Change the currently selected category. We must also compute the table  	of contents and message list for the new category."	| messageCount |	currentCategory _ newCategory.	newCategory isNil		ifTrue: [currentMessages _ currentMsgID _ nil.			self class includeStatusPane				ifTrue: [status _ nil]]		ifFalse: [currentMessages _ self filteredMessagesIn: newCategory.			messageCount _ currentMessages size.			messageCount > self maxMessagesToDisplay				ifTrue: [self messages: self maxMessagesToDisplay from: messageCount.				currentMessages _ currentMessages copyLast: self maxMessagesToDisplay]				ifFalse: [self messages: messageCount from: messageCount].			self cacheTOC].	self changed: #category.	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText.	self changed: #status! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 2/10/2001 14:24'!autoFile	"automatically pick a folder for the current message, and file the current message there"	| folder |	folder := self chooseFilterForCurrentMessage.	folder ifNil: [ ^self].	lastCategory := folder.	mailDB file: currentMsgID inCategory: folder.! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 2/10/2001 14:24'!autoMove	"automatically pick a folder for the current message, and move the message there"	| folder |	folder := self chooseFilterForCurrentMessage.	folder ifNil: [ ^self].	lastCategory := folder.	mailDB file: currentMsgID inCategory: folder.	self removeMessage.! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 2/10/2001 10:31'!nextMessage	"Select the next message."	| index |	(currentCategory isNil | currentMsgID isNil) ifTrue: [^ self].	index _ currentMessages indexOf: currentMsgID.	index < currentMessages size		ifTrue: [self setTOCEntry: ((self tocLists at: 1) at: index + 1)]		ifFalse: [self setTOCEntry: ((self tocLists at: 1) at: 1)].! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 2/10/2001 10:31'!previousMessage	"Select the previous message."	| index |	(currentCategory isNil | currentMsgID isNil) ifTrue: [^ self].	index _ currentMessages indexOf: currentMsgID.	index > 1		ifTrue: [self setTOCEntry: ((self tocLists at: 1)  at: index - 1)]		ifFalse: [self setTOCEntry: ((self tocLists at: 1)  at: currentMessages size)].! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 2/10/2001 10:23'!removeAll	"Remove all messages from the current category."	mailDB removeAll: currentMessages fromCategory: currentCategory.	currentMsgID _ nil.	currentMessages _ #().	self initializeTocLists.	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 2/10/2001 11:21'!removeMessage	"Remove the current message from the current category."	| currentMessageIndex |	currentMsgID		ifNil: [^ self].	mailDB remove: currentMsgID fromCategory: currentCategory.	"remove the message from the listing"	currentMessageIndex _ currentMessages indexOf: currentMsgID.	currentMessages _ currentMessages copyWithout: currentMsgID.	2		to: self tocLists size		do: [:index | (tocLists at: index) removeAt: currentMessageIndex].	tocLists first removeLast.	"update the message index and message ID"	currentMessages isEmpty		ifTrue: [currentMsgID _ nil]		ifFalse: [currentMsgID _ currentMessages						at: (currentMessageIndex min: currentMessages size)].	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 2/10/2001 10:26'!setTOCEntry: newTOCentry 	"Change the currently selected message. This is done by finding the  	message ID corresponding to the selected table of contents entry."	| i |	newTOCentry isNil 		ifTrue: [currentMsgID _ nil]		ifFalse: [i _ (self tocLists at: 1)						indexOf: newTOCentry						ifAbsent: [].			i isNil				ifTrue: [currentMsgID _ nil]				ifFalse: [currentMsgID _ currentMessages at: i]].	self changed: #tocEntry.	Cursor read		showWhile: [self changed: #messageText]! !!Celeste methodsFor: 'filtering' stamp: 'ls 2/10/2001 14:26'!chooseFilterForCurrentMessage	"automatically choose a filter to move the selected message.  Returns nil if there isn't a message selected, or if there isn't exactly 1 matching filter"	| matchingFilters |	currentMsgID ifNil: [ ^nil ].	matchingFilters := self filtersFor: currentMsgID from: self filterNames.	matchingFilters size = 1		ifTrue: [ ^matchingFilters anyOne ]		ifFalse: [ ^nil ]! !!Celeste methodsFor: 'filtering' stamp: 'ls 2/10/2001 10:16'!customFilterNamed: filterName 	^CustomFiltersCompiled at: filterName! !!Celeste methodsFor: 'filtering' stamp: 'ls 2/10/2001 14:22'!customFilterOn	"Select or define and activate a custom filter."	| filterName filterMenu |	filterMenu := CustomMenu new.	currentMsgID ifNotNil: [		(self filtersFor: currentMsgID from: self filterNames) do: [ :name |			filterMenu add: name action: name ].		filterMenu addLine.].	filterMenu add: '(none)' action: #none.	filterMenu add: '<define new filter...>' action: #define.	filterMenu add: '<edit exising filter...>' action: #edit.	filterMenu add: '<delete a filter...>' action: #delete.	filterMenu addLine.	self filterNames do: [ :name |		filterMenu add: name action: name ].	filterName _ filterMenu startUpWithCaption: 'Select a filter:'.	filterName ifNil: [ ^self ].	filterName = #none ifTrue: [^self customFilterOff ].	filterName = #delete ifTrue: [ ^self deleteFilter].	filterName = #edit		ifTrue: [filterName _ self editFilter]		ifFalse: [			filterName = #define				ifTrue: [filterName _ self defineFilter] ].	filterName ifNil: [ ^self ].	filterName isEmpty ifTrue: [^self].	customFilterBlock _ CustomFiltersCompiled at: filterName.	self updateTOC.	self changed: #isCustomFilterOn.! !!Celeste methodsFor: 'filtering' stamp: 'ls 2/10/2001 14:22'!deleteFilter	| filterName |	CustomFilters isEmpty ifTrue: [^''].	filterName _ (CustomMenu selections: self filterNames)		startUpWithCaption: 'Filter to delete?'.	filterName = nil ifTrue: [^''].	CustomFilters removeKey: filterName ifAbsent: [].	CustomFiltersCompiled removeKey: filterName ifAbsent: [].! !!Celeste methodsFor: 'filtering' stamp: 'ls 2/10/2001 14:22'!editFilter	| filterName |	CustomFilters isEmpty ifTrue: [^''].	filterName _ (CustomMenu selections: self filterNames)		startUpWithCaption: 'Filter to edit?'.	filterName = nil ifTrue: [^''].	^self editFilterNamed: filterName filterExpr: (CustomFilters at: filterName)! !!Celeste methodsFor: 'filtering' stamp: 'ls 2/10/2001 14:21'!editFilterNamed: filterName filterExpr: oldExpr	| newDefinition |	newDefinition _ FillInTheBlank		request:'Enter a filter definition where "m" is the message being testing. The expression can send"fromHas:", "toHas:", "ccHas:", "subjectHas:", "participantHas:", or "textHas:" to m to test forinclusion of a string--or one of an array of strings--in a field. It can also test m''s timeand/or date and can combine several tests with logical operators. Examples:      m fromHas: ''johnm''                       -- messages from johnm     m participantHas: ''johnm''                -- messages from, to, or cc-ing johnm     m textHas: #(squeak smalltalk java)      -- messages with any of these words     m subjectHas: #(0 1 2 3 4 5 6 7 8 9)       -- numbers in lists treated as strings NOTE: "textHas:" is very slow, since it must read the message from disk.'		initialAnswer: oldExpr.	newDefinition isEmpty ifTrue: [^''].	CustomFilters at: filterName put: newDefinition.	CustomFiltersCompiled at: filterName put: (self class makeFilterFor: newDefinition).	^filterName! !!Celeste methodsFor: 'filtering' stamp: 'ls 2/10/2001 14:18'!filterNames	"return a sorted list of custom filter names"	^CustomFilters keys asSortedArray! !!Celeste class methodsFor: 'filters' stamp: 'ls 2/10/2001 10:16'!compileAllCustomFilters	"recompile all custom filters"	CustomFiltersCompiled := Dictionary new.	CustomFilters keysAndValuesDo: [ :filterName :filter |		CustomFiltersCompiled at: filterName put: (self makeFilterFor: filter) ].! !!Celeste class methodsFor: 'filters' stamp: 'ls 2/10/2001 10:15'!makeFilterFor: filterExpr	"compile a given custom filter"	^Compiler evaluate: '[ :m | ', filterExpr, ']'.! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'ls 2/10/2001 16:35'!mailOut	"File out the receiver, to a file whose name is a function of the           	change-set name and either of the date & time or chosen to have a	unique numeric tag, depending on the preference	'sequentialChangeSetRevertableFileNames'."	| subjectPrefix slips message compressBuffer compressStream data compressedStream compressTarget |	(Smalltalk includesKey: #Celeste)		ifFalse: [^ self notify: 'no mail reader present'].	subjectPrefix _ self chooseSubjectPrefixForEmail.	self checkForConversionMethods.	Cursor write showWhile: [		"prepare the message"		message := MailMessage empty.		message setField: 'from' toString: Celeste userName.		message setField: 'to' toString: 'squeak@cs.uiuc.edu'.		message setField: 'subject' toString: (subjectPrefix, name). 		message body: (MIMEDocument contentType: 'text/plain' content: (String streamContents: [ :str |			str nextPutAll: 'from preamble:';				cr;				cr.				self fileOutPreambleOn: str ])).		"Prepare the gzipped data"		data _ data _ WriteStream on: String new.		data header.		self fileOutPreambleOn: data.		self fileOutOn: data.		self fileOutPostscriptOn: data.		data trailer.		data _ ReadStream on: data contents.		compressBuffer _ ByteArray new: 1000.		compressStream _ GZipWriteStream on: (compressTarget _ WriteStream on: (ByteArray new: 1000)).		[data atEnd]			whileFalse: [compressStream nextPutAll: (data nextInto: compressBuffer)].		compressStream close.		compressedStream _ ReadStream on: compressTarget contents asString.		message addAttachmentFrom: compressedStream withName: (name, '.cs.gz').		CelesteComposition			openForCeleste: Celeste current 			initialText: message text. ].	Preferences suppressCheckForSlips ifTrue: [^ self].	slips _ self checkForSlips.	(slips size > 0 and: [self confirm: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?'])		ifTrue: [Smalltalk browseMessageList: slips name: 'Possible slips in ' , name]! !Model subclass: #Celeste	instanceVariableNames: 'mailDB currentCategory currentMessages currentMsgID lastCategory subjectFilter fromFilter participantFilter dateFilter customFilterBlock formatMessages lastCategoryList lastCategoryMenu messageTextView userPassword compiledCustomFilters status tocLists '	classVariableNames: 'CCList CustomFilters CustomFiltersCompiled DeleteInboxAfterFetching FormatWhenFetching MessageCountLimit PopServer PopUserName SmtpServer SuppressWorthlessHeaderFields TimeZone UserName '	poolDictionaries: ''	category: 'Network-Mail Reader'!"Postscript:""compile Celeste filters"Celeste compileAllCustomFilters.!