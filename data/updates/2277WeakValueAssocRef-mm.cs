'From Squeak2.8alpha of 15 March 2000 [latest update: #2210] on 27 May 2000 at 7:24:49 pm'!"Change Set:		107WeakValueAssocRef-nnDate:			27 May 2000Author:			MathMorphs	[WARNING:  This change set has been manually modified.  You CANNOTSAVE it again.  Keep this changeset.  It will rename classes and dependson the order of statements shown here --sma]There is a subtle problem with WeakValueAssociations. Thereis an old mail from Gerardo Richiarte explaining theproblem. In simple words, you cannot useWeakValueDictionaries to implement (weak) bindings. Thereason is that the virtual machine assumes that theassociation answered by #bindingOf: stores its value in itssecond slot. As WeakValueAssociations are currentlyimplemented (a WeakArray holds the value in it) thisassumption does not hold anymore.Today, in our SqueakNic at Ezeiza, we found thatWeakValueAssociations can be implemented in such a way thatthe incompatibility above disappears. After some testing we'discovered' that when weak-subclassing a class that alreadyhas instance variables, the resulting new subclass will be avariable subclass having strong references in inheritedinstance variables and weak references in the indexablepart. Taking this into account, we redefinedWeakValueAssociation."!LookupKey weakSubclass: #WeakValueAssociation2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Support'!!WeakValueAssociation2 methodsFor: 'accessing' stamp: 'r++ 5/27/2000 18:11'!key: aKey value: anObject 	"Store the arguments as the variables of the receiver."	key _ aKey.	self value: anObject! !!WeakValueAssociation2 methodsFor: 'accessing' stamp: 'r++ 5/27/2000 18:08'!value	^self at: 1! !!WeakValueAssociation2 methodsFor: 'accessing' stamp: 'r++ 5/27/2000 18:08'!value: anObject 	"Store the argument, anObject, as the value of the receiver."	self at: 1 put: anObject! !!WeakValueAssociation2 class methodsFor: 'instance creation' stamp: 'r++ 5/27/2000 18:07'!key: anObject value: bObject	^ self new key: anObject value: bObject! !!WeakValueAssociation2 class methodsFor: 'as yet unclassified' stamp: 'r++ 5/27/2000 18:12'!new	^ self new: 1! !"Postscript:	Convert WeakValueAssociation allInstances from old format to new format	This is magic..."	(self confirm: 'Before switching WeakValueAssociationsvia #become:, you should save your work.Continue?') ifTrue: [	WeakValueAssociation allInstances do: [:e | 		e become: (WeakValueAssociation2 key: (e instVarAt: 1) value: (e instVarAt: 2))].	WeakValueAssociation removeFromSystem.	WeakValueAssociation2 rename: #WeakValueAssociation]!