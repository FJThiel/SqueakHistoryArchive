'From Squeak3.1alpha of 7 March 2001 [latest update: #4282] on 29 August 2001 at 1:49:10 am'!TestCase subclass: #ExampleSetTest	instanceVariableNames: 'full empty '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Tests'!TestResource subclass: #ExampleTestResource	instanceVariableNames: 'runningState '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Tests'!ExampleTestResource class	instanceVariableNames: ''!TestCase subclass: #SUnitTest	instanceVariableNames: 'hasRun hasSetup hasRanOnce '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Tests'!SUnitTest class	instanceVariableNames: ''!!ExampleSetTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:23'!testAdd	empty add: 5.	self assert: (empty includes: 5)! !!ExampleSetTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:23'!testGrow	empty addAll: (1 to: 100).	self assert: empty size = 100! !!ExampleSetTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:23'!testIllegal	self 		should: [empty at: 5] 		raise: TestResult error.	self 		should: [empty at: 5 put: #abc] 		raise: TestResult error! !!ExampleSetTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:23'!testIncludes	self assert: (full includes: 5).	self assert: (full includes: #abc)! !!ExampleSetTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:23'!testOccurrences	self assert: (empty occurrencesOf: 0) = 0.	self assert: (full occurrencesOf: 5) = 1.	full add: 5.	self assert: (full occurrencesOf: 5) = 1! !!ExampleSetTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:24'!testRemove	full remove: 5.	self assert: (full includes: #abc).	self deny: (full includes: 5)! !!ExampleSetTest methodsFor: 'Running' stamp: 'Sames 2/21/2001 12:23'!setUp	empty := Set new.	full := Set with: 5 with: #abc! !!ExampleTestResource methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:37'!isAvailable		^self runningState == self startedStateSymbol! !!ExampleTestResource methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:37'!isStarted		^self runningState == self startedStateSymbol! !!ExampleTestResource methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:37'!isStopped		^self runningState == self stoppedStateSymbol! !!ExampleTestResource methodsFor: 'Running' stamp: 'Sames 2/21/2001 12:37'!setUp		self runningState: self startedStateSymbol! !!ExampleTestResource methodsFor: 'Running' stamp: 'Sames 2/21/2001 12:37'!tearDown	self runningState: self stoppedStateSymbol! !!ExampleTestResource methodsFor: 'Constants' stamp: 'Sames 2/21/2001 12:36'!startedStateSymbol	^#started! !!ExampleTestResource methodsFor: 'Constants' stamp: 'Sames 2/21/2001 12:36'!stoppedStateSymbol	^#stopped! !!ExampleTestResource methodsFor: 'Accessing' stamp: 'Sames 2/21/2001 12:36'!runningState	^runningState! !!ExampleTestResource methodsFor: 'Accessing' stamp: 'Sames 2/21/2001 12:36'!runningState: aSymbol	runningState := aSymbol! !!ExampleTestResource class methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:37'!isAvailable	^super isAvailable and: [self current isStarted]! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:33'!testAssert	self assert: true.	self deny: false! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:33'!testDebugUI	"This should break"	3 zork! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:33'!testDefects	| result suite error failure |	suite := TestSuite new.	suite addTest: (error := self class selector: #error).	suite addTest: (failure := self class selector: #fail).	result := suite run.	self assert: result defects asArray = (Array with: error with: failure).	self		assertForTestResult: result		runCount: 2		passed: 0		failed: 1		errors: 1! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:33'!testDialectLocalizedException	self should: [TestResult signalFailureWith: 'Foo'] raise: TestResult failure.	self should: [TestResult signalErrorWith: 'Foo'] raise: TestResult error.	self shouldnt: [TestResult signalErrorWith: 'Foo'] raise: TestResult failure.! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:33'!testError	| case result |	case := self class selector: #error.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 0		failed: 0		errors: 1! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:33'!testException	self should: [self error: 'foo'] raise: TestResult error! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:33'!testFail	| case result |	case := self class selector: #fail.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 0		failed: 1		errors: 0! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testFailureDebugUI	"This should fail !!"	self fail! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testIsNotRerunOnDebug	| case |	case := self class selector: #testRanOnlyOnce.	case run.	case debug! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testRan	| case |	case := self class selector: #setRun.	case run.	self assert: case hasSetup.	self assert: case hasRun! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testRanOnlyOnce	self assert: hasRanOnce ~= true.	hasRanOnce := true.! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testResult	| case result |	case := self class selector: #noop.	result := case run.	self		assertForTestResult: result		runCount: 1		passed: 1		failed: 0		errors: 0! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testRunning	(SUnitDelay forSeconds: 2) wait! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testShould	self should: [true].	self shouldnt: [false]! !!SUnitTest methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:34'!testSuite	| suite result |	suite := TestSuite new.	suite addTest: (self class selector: #noop).	suite addTest: (self class selector: #fail).	suite addTest: (self class selector: #error).	result := suite run.	self		assertForTestResult: result		runCount: 3		passed: 1		failed: 1		errors: 1! !!SUnitTest methodsFor: 'Running' stamp: 'Sames 2/21/2001 12:32'!setUp	hasSetup := true! !!SUnitTest methodsFor: 'Private' stamp: 'Sames 2/21/2001 12:32'!assertForTestResult: aResult runCount: aRunCount passed: aPassedCount failed: aFailureCount errors: anErrorCount	self		assert: aResult runCount = aRunCount;		assert: aResult passedCount = aPassedCount;		assert: aResult failureCount = aFailureCount;		assert: aResult errorCount = anErrorCount! !!SUnitTest methodsFor: 'Private' stamp: 'Sames 2/21/2001 12:32'!error	3 zork! !!SUnitTest methodsFor: 'Private' stamp: 'Sames 2/21/2001 12:32'!fail	self assert: false! !!SUnitTest methodsFor: 'Private' stamp: 'Sames 2/21/2001 12:32'!noop! !!SUnitTest methodsFor: 'Private' stamp: 'Sames 2/21/2001 12:32'!setRun	hasRun := true! !!SUnitTest methodsFor: 'Accessing' stamp: 'Sames 2/21/2001 12:31'!hasRun	^hasRun! !!SUnitTest methodsFor: 'Accessing' stamp: 'Sames 2/21/2001 12:32'!hasSetup	^hasSetup! !!SUnitTest class methodsFor: 'Testing' stamp: 'Sames 2/21/2001 12:35'!shouldInheritSelectors	"answer true to inherit selectors from superclasses"	^false! !Smalltalk removeClassNamed: #TestFailureErrorList!Smalltalk removeClassNamed: #TestTest!