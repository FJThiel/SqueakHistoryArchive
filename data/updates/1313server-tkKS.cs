'From Squeak 2.4c of May 10, 1999 on 9 July 1999 at 12:32:12 pm'!"Change Set:		server-tkKSDate:			9 July 1999Author:			Ted Kaehler[ ] When you are putting out an update, and one of the servers is down, it gives you a simple message asking you to contact the administrator.[ ] When you get a secondary menu, like ""Open..."", and immediately drag it, it now stays up (if it can) rather than just going away.  The old way was very frustrating.[ ] When you are prompted for a password for an FTP server (in the fileList), and its wrong, now you can enter another one.  Or give up trying.  This used to put you into an infinite loop of trying the bad password again."!!FTPSocket methodsFor: 'as yet unclassified' stamp: 'tk 7/8/1999 14:29'!lookSoftlyFor: beginning        "Get the response from the server.  Return true the string in beginning is at the front of what came back.  Don't kill the socket if we fail.  Users wants to try another password."	| resp what all |	(readAhead ~~ nil and: [readAhead size > 0])		ifTrue: [resp _ readAhead removeFirst]  "response already came in"		ifFalse: [			all _ self getResponseUpTo: CrLf.			resp _ all at: 1.       "150 Opening binary mode data conn"			readAhead _ (all at: 3) findBetweenSubStrs: (Array with: CrLf)].	resp size > 0 		ifTrue: [			resp first isDigit ifFalse: [ ^self lookFor: beginning ].				"we're in the middle of a line, not the end." #XXX. "this should be fixed..."			(resp at: 4) == $- ifTrue: [^ self lookFor: beginning]. "is a comment"			(resp beginsWith: beginning) ifTrue: [^ true].  "exactly what we wanted"			]		ifFalse: [resp _ '[timeout]'].	what _ (PopUpMenu labels: 'OK\ debug ' withCRs) 		startUpWithCaption: 'Server reported this error:\' withCRs, resp.	what = 2 ifTrue: [self halt].	^ resp! !!MenuMorph methodsFor: 'control' stamp: 'tk 7/8/1999 14:04'!justDroppedInto: aMorph event: anEvent		stayUp ifFalse: [self toggleStayUp: anEvent].	super justDroppedInto: aMorph event: anEvent! !!ServerDirectory methodsFor: 'do ftp' stamp: 'tk 7/8/1999 14:53'!openNoDataFTP	"Open a connection to the directory and server I hold.  Return a FTPSocket.  No dataPort is opened.  When you are all done, be sure to tell the socket to QUIT, and then destroy it."	| so rr serverIP what |	Socket initializeNetwork.	socket ifNotNil: [socket isValid 			ifTrue: [^ socket]	"already open"			ifFalse: [socket _ nil]].	Cursor wait showWhile: [		FTPSocket retry: [serverIP _ NetNameResolver addressForName: server timeout: 20.					serverIP ~~ nil] 			asking: 'Trouble resolving server name.  Keep trying?'			ifGiveUp: [^ 'Could not resolve the server named: ', server].		so _ FTPSocket new.		so portNum: 21.		so connectTo: serverIP port: 21.  "21 is for the control connection"		so waitForConnectionUntil: FTPSocket standardDeadline.		].	Transcript cr; show: 'ftp: ', server; cr.	(rr _ so lookFor: '220 ') == true ifFalse: [^ rr].	"220 para1 Microsoft FTP Service"	so sendCommand: 'USER ', user.	(rr _ so lookFor: '331 ') == true ifFalse: [^ rr].	"331 Password required"	[so sendCommand: 'PASS ', self password.		"will ask user, if needed"	 (rr _ so lookSoftlyFor: '230 ') == true] 	"230 User logged in"		whileFalse: [			rr first == $5 ifFalse: [^ rr].	"timeout"			passwordHolder _ nil.			what _ (PopUpMenu labels: 'enter password\give up' withCRs) 				startUpWithCaption: 'Would you like to try another password?'.			what = 1 ifFalse: [so destroy.  ^ rr]].	so sendCommand: 'CWD ', directory.	(rr _ so lookFor: '250 ') == true ifFalse: [^ rr].	"250 CWD successful"	"Need to ask for name of directory to make sure?"	"socket _ so".	"If user wants to keep connnection open, he must store socket"	^ so! !!ServerDirectory methodsFor: 'updates' stamp: 'tk 7/5/1999 19:23'!checkServers	"Check that all servers are up and have the latest Updates.list.Warn user when can't write to a server that can still be read."	| final fileSize this serverList theUpdates decided myUpdates abort |	serverList _ group			ifNil: [Array with: self]			ifNotNil: [group value].	final _ OrderedCollection new.	fileSize _ 0.  theUpdates _ ''.	"list of updates"	abort _ false.	serverList do: [:aServer |		decided _ false.		this _ aServer getFileNamed: 'updates.list'.		(this = #error:) ifTrue: [^'' "Not found"].		this class == String ifTrue: ["no ftp"			(PopUpMenu labels: 'Cancel entire update' withCRs)				startUpWithCaption: 'Server ', aServer moniker,				' is unavailable.\Please consider phoning the administator.\' withCRs, this.			abort _ true.			decided _ true].		decided not & (this size > fileSize) ifTrue: ["new has a longer update.list"			fileSize _ this size.			final do: [:each | abort _ self outOfDate: each].			(final _ OrderedCollection new) add: aServer.			theUpdates _ this contentsOfEntireFile.			decided _ true].		decided not & (this size < fileSize) ifTrue: [			abort _ self outOfDate: aServer.  decided _ true].		decided not ifTrue: [myUpdates _ this contentsOfEntireFile.			myUpdates = theUpdates				ifTrue: [final add: aServer]				ifFalse: [abort _ self outOfDate: this]].		abort ifTrue: [^ Array new].		].	^ final! !