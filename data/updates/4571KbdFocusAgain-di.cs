'From Squeak3.2alpha of 2 October 2001 [latest update: #4570] on 1 December 2001 at 11:29:14 pm'!"Change Set:		KbdFocusAgainDate:			1 December 2001Author:			Dan Ingalls[NOTE:  This re-issue after #4567 both covers up a problem where a reversion was posted to the wrong update list, and makes the change to dragging really work (had been issued and rescinded)].This changeSet implements a mild form of sticky keyboard focus.  The idea is simply to remove most causes of focus being removed unecessarily, without making any other changes.Also included is a small change that makes dragging of system windows by their title bar dependent not on holding down the button for long enough, but by dragging more than 3 pixels.  This in response to a request from Stephen Pair."!!PluggableTextMorph methodsFor: 'pane events' stamp: 'di 11/30/2001 10:42'!mouseLeave: event	textMorph ifNotNil: [selectionInterval _ textMorph editor selectionInterval].	super mouseLeave: event.! !!SystemWindow methodsFor: 'initialization' stamp: 'di 12/1/2001 23:15'!initialize	"Initialize a system window.  Add label, stripes, etc., if desired"	| aFont |	super initialize.	allowReframeHandles := true.	labelString ifNil: [labelString _ 'Untitled Window'].	isCollapsed _ false.	activeOnlyOnTop _ true.	paneMorphs _ Array new.	Preferences alternativeWindowLook ifFalse:[		borderColor _ Color black.		borderWidth _ 1.		color _ Color black.	] ifTrue:[		borderColor _ #raised.		borderWidth _ 2.		color _ Color white.	].	self layoutPolicy: ProportionalLayout new.	self wantsLabel ifTrue:		[label _ StringMorph new contents: labelString;				font: Preferences windowTitleFont emphasis: 1.		"Add collapse box so #labelHeight will work"		aFont _ Preferences standardButtonFont.		collapseBox _ SimpleButtonMorph new borderWidth: 0;				label: 'O' font: aFont; color: Color transparent;				actionSelector: #collapseOrExpand; target: self; extent: 14@14;				setBalloonText: 'collapse this window'.		stripes _ Array with: (RectangleMorph newBounds: bounds)  "see extent:"					with: (RectangleMorph newBounds: bounds).		self addLabelArea.		labelArea addMorph: (stripes first borderWidth: 1).		labelArea addMorph: (stripes second borderWidth: 2).		self setLabelWidgetAllowance.		self addCloseBox.		self addMenuControl.		labelArea addMorph: label.		self wantsExpandBox ifTrue: [self addExpandBox].		labelArea addMorph: collapseBox.		self setFramesForLabelArea.		Preferences clickOnLabelToEdit ifTrue:			[label on: #mouseDown send: #relabel to: self].		Preferences noviceMode ifTrue:			[closeBox ifNotNil: [closeBox setBalloonText: 'close window'].			menuBox ifNotNil: [menuBox setBalloonText: 'window menu'].			collapseBox ifNotNil: [collapseBox setBalloonText: 'collapse/expand window']]].	self on: #mouseEnter send: #spawnReframeHandle: to: self.	self on: #mouseLeave send: #spawnReframeHandle: to: self.	self extent: 300@200.	mustNotClose _ false.	updatablePanes _ Array new.! !!SystemWindow methodsFor: 'label' stamp: 'di 12/1/2001 23:19'!relabelEvent: evt	"No longer used, but may be referred to by old eventHandlers"	^ Preferences clickOnLabelToEdit		ifFalse:	[self mouseDown: evt]		ifTrue:	[self relabel]! !!SystemWindow methodsFor: 'events' stamp: 'di 12/1/2001 22:54'!handlesMouseDown: evt 	"If I am not the topWindow, then I will only respond to dragging by the title bar.	Any other click will only bring me to the top"	(self labelRect containsPoint: evt cursorPoint)		ifTrue: [^ true].	^ self activeOnlyOnTop and: [self ~~ TopWindow]! !!SystemWindow methodsFor: 'events' stamp: 'di 11/30/2001 15:30'!mouseDown: evt	self setProperty: #clickPoint toValue: evt cursorPoint.	TopWindow == self ifFalse:		[evt hand releaseKeyboardFocus.		self activate].	model windowActiveOnFirstClick ifTrue:		["Normally window keeps control of first click.		Need explicit transmission for first-click activity."		submorphs do: [:m | (m containsPoint: evt cursorPoint) ifTrue: [m mouseDown: evt]]]! !!SystemWindow methodsFor: 'events' stamp: 'di 11/30/2001 11:44'!mouseMove: evt	| cp |	cp _ evt cursorPoint.	self valueOfProperty: #clickPoint ifPresentDo: 		[:firstClick |		((self labelRect containsPoint: firstClick) and: [(cp dist: firstClick) > 3]) ifTrue:		["If this is a drag that started in the title bar, then pick me up"		^ self isSticky ifFalse:			[self fastFramingOn 				ifTrue: [self doFastFrameDrag]				ifFalse: [evt hand grabMorph: self topRendererOrSelf]]]].	model windowActiveOnFirstClick ifTrue:		["Normally window takes control on first click.		Need explicit transmission for first-click activity."		submorphs do: [:m | (m containsPoint: cp) ifTrue: [m mouseMove: evt]]]! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'di 11/30/2001 10:54'!mouseLeave: evt	currentKeyDown _ Set new.	hasFocus _ false.	mouseMovePoint _ mouseDownPoint _ nil.! !SystemWindow removeSelector: #addLabel!SimpleHierarchicalListMorph removeSelector: #mouseLeave:!PluggableListMorph removeSelector: #mouseLeave:!"Postscript:Remove the event handlers on SystemWindow labels to enable draggingby the labels with the new logic."Preferences clickOnLabelToEdit ifFalse:	[SystemWindow allSubInstancesDo:		[:w | w getRawLabel eventHandler: nil]].!