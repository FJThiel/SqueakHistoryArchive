'From Squeak2.9alpha of 12 June 2000 [latest update: #2575] on 9 September 2000 at 12:54:20 pm'!"Change Set:		DashedPolygonsDate:			9 September 2000Author:			Dan IngallsMakes dashed borders be a property of *any* Curve, Polygon, or Line.  The earlier dash spec is replaced by one that does not allow different widths, but does allow an offset and stepping control for animated 'marching ants' effect.Class PolygonMorphDashed is removed, and its only use has been converted to the new equivalent.Also includes a fix for a recent bug in	Polygon>>shapeFromPen:color:borderWidth:borderColor:"!!Canvas methodsFor: 'drawing' stamp: 'di 9/9/2000 12:51'!line: pt1 to: pt2 width: width color: color1 dashLength: s1 secondColor: color2 secondDashLength: s2 startingOffset: startingOffset	"Draw a line using the given width, colors and dash lengths.	Originally written by Stephan Rudlof; tweaked by Dan Ingalls	to use startingOffset for sliding offset as in 'ants' animations.	Returns the sum of the starting offset and the length of this line."	| dist deltaBig colors nextPhase segmentOffset phase segmentLength startPoint distDone endPoint segLens |	dist _ pt1 dist: pt2.	dist = 0 ifTrue: [^ startingOffset].	s1 = 0 & (s2 = 0) ifTrue: [^ startingOffset].	deltaBig _ pt2 - pt1.	colors _ {color1. color2}.	segLens _ {s1 asFloat. s2 asFloat}.	nextPhase _ {2. 1}.	"Figure out what phase we are in and how far, given startingOffset."	segmentOffset _ startingOffset \\ (s1 + s2).	segmentOffset < s1		ifTrue: [phase _ 1.  segmentLength _ s1 - segmentOffset]		ifFalse: [phase _ 2. segmentLength _ s1 + s2 - segmentOffset].	startPoint _ pt1.	distDone _ 0.0.	[distDone < dist] whileTrue:		[segmentLength _ segmentLength min: dist - distDone.		endPoint _ startPoint + (deltaBig * segmentLength / dist).		self line: startPoint truncated to: endPoint truncated			width: width color: (colors at: phase).		distDone _ distDone + segmentLength.		phase _ nextPhase at: phase.		startPoint _ endPoint.		segmentLength _ segLens at: phase].	^ startingOffset + dist! !!PolygonMorph methodsFor: 'drawing' stamp: 'di 9/9/2000 09:03'!drawBorderOn: aCanvas	"Display my border on the canvas."	| lineColor bevel topLeftColor bottomRightColor bigClipRect brush p1i p2i |	borderDashSpec ifNotNil:		[^ self drawDashedBorderOn: aCanvas].	(borderColor == nil or: [borderColor isColor and: [borderColor isTransparent]])		ifTrue: [^ self].	lineColor _ borderColor.	bevel _ false.	"Border colors for bevelled effects depend on CW ordering of vertices"	borderColor == #raised ifTrue: 			[topLeftColor _ color lighter.			bottomRightColor _ color darker.			bevel _ true].	borderColor == #inset ifTrue: 			[topLeftColor _ owner colorForInsets darker.			bottomRightColor _ owner colorForInsets lighter.			bevel _ true].	bigClipRect _ aCanvas clipRect expandBy: self borderWidth + 1 // 2.	brush _ nil.	self		lineSegmentsDo: 			[:p1 :p2 | 			p1i _ p1 asIntegerPoint.			p2i _ p2 asIntegerPoint.			(closed or: ["bigClipRect intersects: (p1i rect: p2i) optimized:"				((p1i min: p2i)					max: bigClipRect origin)					<= ((p1i max: p2i)							min: bigClipRect corner)])				ifTrue: 					[bevel						ifTrue: [(p1i quadrantOf: p2i)								> 2								ifTrue: [lineColor _ topLeftColor]								ifFalse: [lineColor _ bottomRightColor]].					(borderWidth > 3 and: [borderColor isColor])						ifTrue: 							[brush == nil ifTrue: [brush _ (ColorForm dotOfSize: borderWidth)											colors: (Array with: Color transparent with: borderColor)].							aCanvas								line: p1i								to: p2i								brushForm: brush]						ifFalse: [aCanvas								line: p1i								to: p2i								width: borderWidth								color: lineColor]]].! !!PolygonMorph methodsFor: 'dashes' stamp: 'di 9/9/2000 09:22'!borderDashOffset	borderDashSpec size < 4 ifTrue: [^ 0.0].	^ (borderDashSpec at: 4) asFloat! !!PolygonMorph methodsFor: 'dashes' stamp: 'di 9/9/2000 09:20'!dashedBorder: dashSpec	"A dash spec is a 3- or 5-element array with		{ length of normal border color.		length of alternate border color.		alternate border color.		starting offset.		amount to add to offset at each step }	Starting offset is usually = 0, but changing it moves the dashes along the curve."	borderDashSpec _ dashSpec.	self changed! !!PolygonMorph methodsFor: 'dashes' stamp: 'di 9/9/2000 10:26'!drawDashedBorderOn: aCanvas 	"Display my border on the canvas."	| lineColor bevel topLeftColor bottomRightColor bigClipRect p1i p2i segmentOffset |	(borderColor == nil		or: [borderColor isColor and: [borderColor isTransparent]])		ifTrue: [^ self].	lineColor _ borderColor.	bevel _ false.	"Border colors for bevelled effects depend on CW ordering of vertices"	borderColor == #raised ifTrue: 			[topLeftColor _ color lighter.			bottomRightColor _ color darker.			bevel _ true].	borderColor == #inset ifTrue: 			[topLeftColor _ owner colorForInsets darker.			bottomRightColor _ owner colorForInsets lighter.			bevel _ true].	bigClipRect _ aCanvas clipRect expandBy: self borderWidth + 1 // 2.	segmentOffset _ self borderDashOffset.	self lineSegmentsDo: 			[:p1 :p2 | 			p1i _ p1 asIntegerPoint.			p2i _ p2 asIntegerPoint.			(closed or: ["bigClipRect intersects: (p1i rect: p2i) optimized:"				((p1i min: p2i)					max: bigClipRect origin)					<= ((p1i max: p2i)							min: bigClipRect corner)])				ifTrue: 					[bevel						ifTrue: [(p1i quadrantOf: p2i)								> 2								ifTrue: [lineColor _ topLeftColor]								ifFalse: [lineColor _ bottomRightColor]].					segmentOffset _						aCanvas line: p1i to: p2i width: borderWidth							color: lineColor							dashLength: borderDashSpec first							secondColor: borderDashSpec third							secondDashLength: borderDashSpec second							startingOffset: segmentOffset]]! !!PolygonMorph methodsFor: 'dashes' stamp: 'di 9/9/2000 09:24'!stepTime	^ 100! !!PolygonMorph methodsFor: 'dashes' stamp: 'di 9/9/2000 09:20'!wantsSteps	"For crawling ants effect of dashed line."	borderDashSpec ifNil: [^ false].	^ borderDashSpec size = 5 and: [(borderDashSpec at: 5) > 0]! !!PolygonMorph methodsFor: 'menu' stamp: 'di 9/9/2000 11:36'!addCustomMenuItems: aMenu hand: aHandMorph	| lineName |	super addCustomMenuItems: aMenu hand: aHandMorph.	aMenu addUpdating: #handlesShowingPhrase target: self action: #showOrHideHandles.	vertices size > 2 ifTrue:		[aMenu addUpdating: #openOrClosePhrase target: self action: #makeOpenOrClosed.		lineName _ closed ifTrue: ['outline'] ifFalse: ['line'].		self isCurve			ifTrue: [aMenu add: 'make segmented ', lineName action: #toggleSmoothing]			ifFalse: [aMenu add: 'make smooth ', lineName action: #toggleSmoothing]]. 	aMenu add: 'specify dashed line' action:  #specifyDashedLine.	aMenu addLine.	aMenu addWithLabel: '---' enablement: [self isOpen and: [arrows ~~ #none]] action:  #makeNoArrows.	aMenu addWithLabel: '-->' enablement: [self isOpen and: [arrows ~~ #forward]] action:  #makeForwardArrow.	aMenu addWithLabel: '<--' enablement: [self isOpen and: [arrows ~~ #back]] action:  #makeBackArrow.	aMenu addWithLabel: '<->' enablement: [self isOpen and: [arrows ~~ #both]] action:  #makeBothArrows.! !!PolygonMorph methodsFor: 'menu' stamp: 'di 9/9/2000 11:38'!specifyDashedLine	| executableSpec newSpec |	executableSpec _ FillInTheBlank		request:'Enter a dash specification as{ major dash length. minor dash length. minor dash color }The major dash will have the normal border color.A blank response will remove the dash specification.[Note: You may give 5 items as, eg, {10. 5. Color white. 0. 3}where the 4th ityem is zero, and the 5th is the number of pixelsby which the dashes will move in each step of animation]'		initialAnswer: '{ 10. 5. Color red }'.	executableSpec isEmpty ifTrue:		[^ self stopStepping; dashedBorder: nil].	newSpec _ [Compiler evaluate: executableSpec] ifError:		[^ self stopStepping; dashedBorder: nil].	newSpec first isNumber & newSpec second isNumber & newSpec third isColor ifFalse:		[^ self stopStepping; dashedBorder: nil].	newSpec size = 3 ifTrue:		[^ self stopStepping; dashedBorder: newSpec].	(newSpec size = 5 and: [newSpec fourth isNumber & newSpec fifth isNumber]) ifTrue:		[^ self dashedBorder: newSpec; startStepping].! !!PolygonMorph methodsFor: 'private' stamp: 'di 9/9/2000 10:10'!step	"Only for dashed lines with creep"	borderDashSpec size < 5 ifTrue: [^ self].	borderDashSpec at: 4 put: (borderDashSpec at: 4) + (borderDashSpec at: 5).	self changed! !!PolygonMorph class methodsFor: 'instance creation' stamp: 'di 9/9/2000 11:41'!shapeFromPen: penBlock color: c borderWidth: bw borderColor: bc	"World addMorph: (PolygonMorph		shapeFromPen: [:p | p hilbert: 4 side: 5. p go: 5.						p hilbert: 4 side: 5. p go: 5]		color: Color red borderWidth: 1 borderColor: Color black)"	| pen |	penBlock value: (pen _ PenPointRecorder new).	^ (self vertices: pen points asArray color: c borderWidth: bw borderColor: bc)		quickFill: false! !!TransferMorphLineAnimation methodsFor: 'initialization' stamp: 'di 9/9/2000 09:59'!initPolygon	polygon _ (LineMorph from: self transferMorph source bounds center				to: self transferMorph bounds center				color: Color black width: 2)			dashedBorder: {10. 10. Color white}.	self addMorph: polygon! !!TransferMorphLineAnimation methodsFor: 'update' stamp: 'di 9/9/2000 09:46'!updateAnimation	polygon verticesAt: 2 put: self transferMorph center! !PolygonMorph removeSelector: #enableBackArrow!PolygonMorph removeSelector: #enableBothArrows!PolygonMorph removeSelector: #enableForwardArrow!PolygonMorph removeSelector: #enableRemoveArrows!Canvas removeSelector: #line:to:width:color:stepWidth:secondColor:secondStepWidth:startingOffset:!Smalltalk removeClassNamed: #PolygonMorphDashed!