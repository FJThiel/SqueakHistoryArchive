'From Squeak2.9alpha of 5 August 2000 [latest update: #2531] on 29 August 2000 at 3:50:28 pm'!"Change Set:		undo-swDate:			29 August 2000Author:			Scott WallaceProvides a simple foundation for implementation of UNDO in morphic.*  If you have an action that you want to make undoable, you need to create a Command object, and arm it so that it preserves state needed for undo/redo, and give it blocks for carrying out undo and redo (see HandMorph.grabMorphInner and ColorPickerMorph.selector: for two examples of how to do this -- the first for undoing morph-move commands, the second for undoing a morph recolor command.)*	When the command is to be *done*, you tell the system to install it as the current command; this is done by sending the message	Command rememberCommand: aCommand*	If you field a user request that makes the last command no longer undoable, you can send the message Command cannotUndo.In this initial burst of Undo implementation, full undo is provided for:- All color changes, including:	Fill-color	Border color	Text-highlight color	Insertion-point color	Second gradient color -  Move-  Resize-  RotateAn architecture is also in place for 'infiniteUndo', but the preference governing this is currently hard-coded to false, pending further work.A mechanism is added to intercept unfocusedKeystrokes, i.e. keystrokes typed when no morph clalims the focus.  Used, for example, for cmd-z implementation for undo, as well as for a tab-among-fields feature."!Object subclass: #Command	instanceVariableNames: 'phase commandee parameters undoBlock redoBlock cmdWording '	classVariableNames: 'CommandExcursions CommandHistory LastCommand '	poolDictionaries: ''	category: 'Morphic-Undo'!!Command commentStamp: '<historical>' prior: 0!An object representing an undoable command to be done in the environment.Structure:	phase			indicates whether the cmd is current in undone or redone mode 	commandee		the object to which the command pertains, often a morph 	parameters		an IdentityDictionary of supporting information	undoBlock		The block to be evaluated to accomplish undo.	redoBlock		The block to be evaluated to accomplish redo	cmdWording		The wording of the command (used in arming the "undo"/"redo" menu itemsTo use this, for any command you wish to use, you	*	Create an instance of Command.	*	Store all needed state for accomplishing undo/redo into the parameters dictionary of the command.	*	Give the the command an undoBlock and a redoBlock	*	Send a message of the form "Command rememberCommand: myCommandLastCommand is the last command that was actually done or undone.CommandHistory, applicable only when infiniteUndo is set, holds a 'tape' of the complete history of commands, as far back as it's possible to go.CommandExcursions, also applicable only in the infiniteUndo case, and rather at the fringe even then, holds segments of former CommandHistory that have been lopped off because of variant paths taken.!Morph subclass: #HandMorph	instanceVariableNames: 'eventSubscribers keyboardFocus mouseDownMorph mouseOverMorphs mouseOverTimes dragOverMorphs clickClient clickState firstClickEvent firstClickTime userInitials lastEvent eventTransform argument targetOffset damageRecorder cacheCanvas cachedCanvasHasHoles temporaryCursor temporaryCursorOffset grid gridOn remoteConnections transmitBuffer lastEventTransmitted lastWorldExtent menuTargetOffset hasChanged savedPatch suppressDrawing formerOwner formerPosition addedFlexAtGrab currentCommand '	classVariableNames: 'DoubleClickTime NormalCursor PasteBuffer '	poolDictionaries: 'EventSensorConstants '	category: 'Morphic-Kernel'!!Command methodsFor: 'initialization' stamp: 'sw 8/29/2000 14:12'!cmdWording: wrd	"Set the wording to be used in a menu item referring to the receiver"	cmdWording _ wrd! !!Command methodsFor: 'initialization' stamp: 'sw 8/29/2000 14:12'!commandee: ex	"Set the commandee, which is the object to which the command applies"	commandee _ ex.	phase _ #instantiated! !!Command methodsFor: 'initialization' stamp: 'sw 8/29/2000 14:13'!phase: aPhase	"Set the phase of the command to the supplied symbol"	phase _ aPhase! !!Command methodsFor: 'initialization' stamp: 'sw 8/29/2000 14:13'!printOn: aStream	"Provide more detailed info about the receiver, put in for debugging, maybe should be removed"	super printOn: aStream.	aStream nextPutAll: ' phase: ', phase printString.	cmdWording ifNotNil: [aStream nextPutAll: '; ', cmdWording asString].	parameters associationsDo:		[:assoc | aStream nextPutAll: '; ', assoc printString]! !!Command methodsFor: 'initialization' stamp: 'sw 8/29/2000 14:13'!redoBlock: aBlock	"Set the receiver's redoBlock to the specified block"	redoBlock _ aBlock! !!Command methodsFor: 'initialization' stamp: 'sw 8/29/2000 14:13'!undoBlock: aBlock	"Set the undoBlock to the specified block"	undoBlock _ aBlock! !!Command methodsFor: 'parameters' stamp: 'sw 8/29/2000 14:12'!parameterAt: aSymbol	"Answer the parameter stored at the given symbol, or nil if none"	^ self parameterAt: aSymbol ifAbsent: [nil]! !!Command methodsFor: 'parameters' stamp: 'sw 8/29/2000 14:12'!parameterAt: aSymbol ifAbsent: aBlock	"Answer the parameter stored at the aSymbol, but if none, return the result of evaluating aBlock"	^ self assuredParameterDictionary at: aSymbol ifAbsent: [aBlock value]! !!Command methodsFor: 'parameters' stamp: 'sw 8/29/2000 14:12'!parameterAt: aSymbol put: aValue	"Place aValue in the parameters dictionary using aSymbol as key"	^ self assuredParameterDictionary at: aSymbol put: aValue! !!Command methodsFor: 'command execution' stamp: 'sw 8/29/2000 14:12'!doCommand	"Do the command represented by the receiver.  Not actually called by active current code, but reachable by the not-yet-unsealed promoteToCurrent: action."	redoBlock ifNotNil: [redoBlock value: self]! !!Command methodsFor: 'command execution' stamp: 'sw 8/29/2000 14:13'!redoCommand	"Perform the 'redo' operation, by passing control to the command's redoBlock"	redoBlock value: self! !!Command methodsFor: 'command execution' stamp: 'sw 8/29/2000 14:13'!undoCommand	"Perform the 'undo' operation by giving control to the command's undoBlock"	undoBlock value: self! !!Command methodsFor: 'private' stamp: 'sw 8/29/2000 14:09'!assuredParameterDictionary	"Private!!  Answer the parameters dictionary, creating it if necessary"	^ parameters ifNil: [parameters _ IdentityDictionary new]! !!Command methodsFor: 'private' stamp: 'sw 8/29/2000 14:12'!cmdWording	"Answer the wording to be used to refer to the command in a menu"	^ cmdWording ifNil: ['last command']! !!Command methodsFor: 'private' stamp: 'sw 8/29/2000 14:12'!commandee	"Answer the object the command applies to"	^ commandee! !!Command methodsFor: 'private' stamp: 'sw 8/29/2000 14:13'!phase	"Answer the phase of the command"	^ phase! !!Command class methodsFor: 'class initialization' stamp: 'sw 8/29/2000 14:10'!initialize	"Class initialization -- init the class vars"	LastCommand _ nil.	CommandHistory _ OrderedCollection new.	CommandExcursions _ OrderedCollection new	"Command initialize"! !!Command class methodsFor: 'dog-simple ui' stamp: 'sw 8/29/2000 14:12'!undoRedoButtons	"Answer a morph that offers undo and redo buttons"	| aButton wrapper |	"self currentHand attachMorph: Command undoRedoButtons"	wrapper _ AlignmentMorph newColumn.	wrapper color: Color veryVeryLightGray lighter;		borderWidth: 0;		inset: 0;		vResizing: #shrinkWrap;		hResizing: #shrinkWrap.	#((CrudeUndo undoLastCommand 'undo last command done' undoEnabled CrudeUndoDisabled CrudeUndoDisabled) 	(CrudeRedo redoNextCommand 'redo last undone command' redoEnabled CrudeRedoDisabled CrudeRedoDisabled)) do:		[:tuple |			wrapper addTransparentSpacerOfSize: (8@0).			aButton _ UpdatingThreePhaseButtonMorph new.			aButton				onImage: (ScriptingSystem formAtKey: tuple first);				offImage: (ScriptingSystem formAtKey: tuple fifth);				pressedImage: (ScriptingSystem formAtKey: tuple sixth);				getSelector: tuple fourth;				color: Color transparent; 				target: self;				actionSelector: tuple second;				setNameTo: tuple second;				setBalloonText: tuple third;				extent: aButton onImage extent.			wrapper addMorphBack: aButton.			wrapper addTransparentSpacerOfSize: (8@0)].	^ wrapper! !!Command class methodsFor: 'menu' stamp: 'sw 8/29/2000 14:11'!redoEnabled	"Answer whether the redo command is currently available"	^ self nextCommand notNil! !!Command class methodsFor: 'menu' stamp: 'sw 8/29/2000 14:11'!redoMenuWording	"Answer the wording to be used in a menu offering the current Redo command"	| nextCommand |	((nextCommand _ self nextCommand) == nil or: [Preferences useUndo not]) ifTrue:  [^ 'can''t redo'].	^ String streamContents:		[:aStream | 			aStream nextPutAll: 'redo "'.			aStream nextPutAll: (nextCommand cmdWording truncateTo: 12).			aStream nextPut: $".			LastCommand phase == #done ifFalse:				[aStream nextPutAll: ' (z)']]! !!Command class methodsFor: 'menu' stamp: 'sw 8/29/2000 14:11'!undoEnabled	"Answer whether there is an undoable command at the ready"	^ LastCommand notNil! !!Command class methodsFor: 'menu' stamp: 'sw 8/29/2000 14:11'!undoMenuWording	"Answer the wording to be used in an 'undo' menu item"	((LastCommand == nil or: [Preferences useUndo not]) or:		[Preferences infiniteUndo not and: [LastCommand phase == #undone]]) ifTrue: [^ 'can''t undo'].	^ String streamContents:		[:aStream | 			aStream nextPutAll: 'undo "'.			aStream nextPutAll: (LastCommand cmdWording truncateTo: 12).			aStream nextPut: $".			LastCommand phase == #done ifTrue:				[aStream nextPutAll: ' (z)']]! !!Command class methodsFor: 'menu' stamp: 'sw 8/29/2000 14:11'!undoOrRedoMenuWording	"Answer the wording to be used in a menu item offering undo/redo"	| pre |	LastCommand ifNil: [^ 'can''t undo'].	pre _ LastCommand phase == #done		ifTrue:		['undo']		ifFalse:		['redo'].	^ ((pre, ' ', LastCommand cmdWording) truncateTo: 30), ' (z)'! !!Command class methodsFor: 'command-history mechanics' stamp: 'sw 8/29/2000 14:10'!historyIndexOfLastCommand	"Answer which position of the CommandHistory list is occupied by the LastCommand"	^ CommandHistory indexOf: LastCommand ifAbsent: [0]! !!Command class methodsFor: 'command-history mechanics' stamp: 'sw 8/29/2000 14:10'!lastCommand	"Answer the last command done or undone"	^ LastCommand! !!Command class methodsFor: 'command-history mechanics' stamp: 'sw 8/29/2000 14:10'!nextCommand	"Answer the command object that would be sent the #redoCommand message if the user were to request Redo, or nil if none"	| anIndex |	LastCommand ifNil: [^ nil].	LastCommand phase == #undone ifTrue: [^ LastCommand].	anIndex _ CommandHistory indexOf: LastCommand ifAbsent: [^ nil].	^ anIndex = CommandHistory size ifTrue: [nil] ifFalse: [CommandHistory at: (anIndex + 1)]! !!Command class methodsFor: 'command-history mechanics' stamp: 'sw 8/29/2000 14:11'!resetCommandHistory	"Clear out the command history so that it remembers only the last command done or undone"	CommandHistory _ OrderedCollection with: LastCommand.	"Command resetCommandHistory"! !!Command class methodsFor: 'called by programmer' stamp: 'sw 8/29/2000 08:48'!cantUndo	"Called by client to indicate that the prior undoable command is no longer undoable"	LastCommand _ nil.	CommandHistory _ OrderedCollection new."Command cantUndo"! !!Command class methodsFor: 'called by programmer' stamp: 'sw 8/29/2000 14:10'!promoteToCurrent: aCommand	"Very unusual and speculative and unfinished!!.  Not currently reachable.  For the real thing, we presumably march forward or backward from the current command pointer to the target command in an orderly fashion, doing or undoing each command in turn."	| itsIndex |	Preferences useUndo ifFalse: [^ self].	itsIndex _ CommandHistory indexOf: aCommand ifAbsent: [nil].	itsIndex ifNotNil:		[CommandHistory remove: aCommand ifAbsent: []].	CommandHistory add: (LastCommand _ aCommand).	itsIndex < CommandHistory size ifTrue:		[CommandExcursions add: (CommandHistory copyFrom: (itsIndex to: CommandHistory size))].	CommandHistory _ (CommandHistory copyFrom: 1 to: itsIndex) copyWith: aCommand.	LastCommand _ aCommand.	aCommand doCommand.	LastCommand phase: #done.! !!Command class methodsFor: 'called by programmer' stamp: 'sw 8/29/2000 14:11'!rememberCommand: aCommand	"Make the supplied command be the 'LastCommand', and mark it 'done'"	| currentCommandIndex |	Preferences useUndo ifFalse: [^ self].  "Command initialize"		Preferences infiniteUndo ifTrue:		[currentCommandIndex _ CommandHistory indexOf: LastCommand.		((currentCommandIndex < CommandHistory size) and: [Preferences preserveCommandExcursions]) ifTrue:			[CommandExcursions add: (CommandHistory copyFrom: (currentCommandIndex to: CommandHistory size))].		CommandHistory _ (CommandHistory copyFrom: 1 to: currentCommandIndex) copyWith: aCommand].	LastCommand _ aCommand.	LastCommand phase: #done.! !!Command class methodsFor: 'called from the ui' stamp: 'sw 8/29/2000 14:11'!redoNextCommand	"If there is a way to 'redo' (move FORWARD) in the undo/redo history tape, do it."	| anIndex |	LastCommand ifNil: [^ self beep].	LastCommand phase == #undone		ifFalse:			[anIndex _ CommandHistory indexOf: LastCommand.			(anIndex < CommandHistory size)				ifTrue:					[LastCommand _ CommandHistory at: anIndex + 1]				ifFalse:					[^ self beep]].	LastCommand redoCommand.	LastCommand phase: #done! !!Command class methodsFor: 'called from the ui' stamp: 'sw 8/29/2000 14:11'!undoLastCommand	"Undo the last command, i.e. move backward in the recent-commands tape, if possible."	| aPhase anIndex |	LastCommand ifNil: [^ self beep].	(aPhase _ LastCommand phase) == #done		ifFalse:			[aPhase == #undone				ifTrue:					[anIndex _ CommandHistory indexOf: LastCommand.					anIndex > 1 ifTrue:						[LastCommand _ CommandHistory at: anIndex - 1]]].	LastCommand undoCommand.	LastCommand phase: #undone	"Command undoLastCommand"! !!Command class methodsFor: 'called from the ui' stamp: 'sw 8/10/2000 13:38'!undoOrRedoCommand	"This gives a feature comparable to standard Mac undo/redo.  If the undo/redo action taken was a simple do or a redo, then undo it.  But if the last undo/redo action taken was an undo, then redo it."	"Command undoOrRedoCommand"	| aPhase |	LastCommand ifNil: [^ self beep].	(aPhase _ LastCommand phase) == #done		ifTrue:			[LastCommand undoCommand.			LastCommand phase: #undone]		ifFalse:			[aPhase == #undone				ifTrue:					[LastCommand redoCommand.					LastCommand phase: #done]]! !!Command class methodsFor: 'called from the ui' stamp: 'sw 8/29/2000 14:12'!undoTo	"Incomplete.  Allow the user to choose a point somewhere in the undo/redo tape, and undo his way to there.   Applicable only if infiniteUndo is set.  Not yet functional."	| anIndex commandList aMenu reply |	(anIndex _ self historyIndexOfLastCommand) ifNil: [^ self beep].	commandList _ CommandHistory		copyFrom:	((anIndex - 10) max: 1)		to:			((anIndex + 10) min: CommandHistory size).	aMenu _ SelectionMenu labels:  (commandList collect: [:cmd | cmd cmdWording]) selections: commandList.	reply _ aMenu startUpWithCaption: 'undo or redo to...'.	reply ifNotNil: [self halt: 'now for the rest...!!']	"Command undoTo"! !!Morph methodsFor: 'structure' stamp: 'sw 8/29/2000 14:55'!morphPreceding: aSubmorph	"Answer the morph immediately preceding aSubmorph, or nil if none"	| anIndex |	anIndex _ submorphs indexOf: aSubmorph ifAbsent: [^ nil].	^ anIndex > 1		ifTrue:			[submorphs at: (anIndex - 1)]		ifFalse:			[nil]! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'sw 8/29/2000 14:45'!addMorph: aMorph after: anotherMorph	"Add the given morph as one of my submorphs, inserting it after anotherMorph"	| index |		aMorph owner ifNotNil: [aMorph owner privateRemoveMorph: aMorph].	aMorph layoutChanged.	aMorph privateOwner: self.	index _ submorphs indexOf: anotherMorph ifAbsent: [submorphs size].		"important to get this index AFTER removing aMorph, since it might have been		one of my submorphs"	submorphs _ (submorphs copyFrom: 1 to: index), (OrderedCollection with: aMorph),			(submorphs copyFrom: index+1 to: submorphs size).	self layoutChanged.! !!Morph methodsFor: 'event handling' stamp: 'sw 8/29/2000 14:54'!dispatchKeystroke: anEvent	"Do what I wish with the keystroke represented by the event; default is to pass it on to keyStroke:.  This provides an  opportunity to get ones hands on the flow of control at a meta-level, such as for tabbing among fields on the screen."	^ self keyStroke: anEvent! !!Morph methodsFor: 'event handling' stamp: 'sw 8/29/2000 14:57'!wouldAcceptKeyboardFocusUponTab	"Answer whether the receiver is in the running as the new keyboard focus if the tab key were hit at a meta level.  This provides the leverage for tabbing among fields of a card, for example."	^ false! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/29/2000 14:21'!doGrow: evt with: growHandle	"Called while the mouse is down in the grow handle"	| newExtent extentToUse aCommand |	newExtent _ (target pointFromWorld: (evt cursorPoint - positionOffset)) - target topLeft.	evt shiftPressed ifTrue: [newExtent _ (newExtent x max: newExtent y) asPoint].	target renderedMorph extent: (extentToUse _ newExtent max: minExtent).	growHandle position: evt cursorPoint - (growHandle extent // 2).	self layoutChanged.	(aCommand _ self valueOfProperty: #command) ifNotNil:  "There is a command I need to nurture along"		[aCommand parameterAt: #newExtent put: extentToUse.		aCommand redoBlock:			[:aCmd | aCmd commandee target extent: (aCmd parameterAt: #newExtent)]]! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/29/2000 14:22'!doRot: evt with: rotHandle	"Update the rotation of my target if it is rotatable.  Keep the relevant command object up to date."	| degrees aCommand |	degrees _ (evt cursorPoint - (target pointInWorld: target referencePosition)) degrees.	degrees _ degrees - angleOffset degrees.	degrees _ degrees detentBy: 10.0 atMultiplesOf: 90.0 snap: false.	degrees = 0.0		ifTrue: [rotHandle color: Color lightBlue]		ifFalse: [rotHandle color: Color blue].	rotHandle submorphsDo:		[:m | m color: rotHandle color makeForegroundColor].	((innerTarget isKindOf: SketchMorph) and: [innerTarget rotationStyle == #normal]) ifTrue:		[self removeAllHandlesBut: rotHandle.		target player ifNotNil: [self addDirectionShaft]].	target rotationDegrees: degrees.	rotHandle position: evt cursorPoint - (rotHandle extent // 2).	(aCommand _ self valueOfProperty: #command) ifNotNil:		[aCommand parameterAt: #newRotationDegrees put: degrees].	self layoutChanged! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/29/2000 14:22'!endInteraction	"Clean up after a user interaction with the a halo control"	| m aCommand |	(target isInWorld not or: [owner == nil]) ifTrue: [^ self].	[target isFlexMorph and: [target hasNoScaleOrRotation]]		whileTrue:			[m _ target firstSubmorph.			target removeFlexShell.			target _ m].	self isInWorld ifTrue:		["make sure handles show in front, even if flex shell added"		self comeToFront.		self addHandles].	(aCommand _ self valueOfProperty: #command) ifNotNil:		[Command rememberCommand: aCommand.		self removeProperty: #command] ! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/29/2000 14:23'!startGrow: evt with: growHandle	| botRt aCommand |	"Initialize resizing of my target.  Launch a command representing it, to support Undo"	growingOrRotating _ true.	self removeAllHandlesBut: growHandle.  "remove all other handles"	botRt _ target pointInWorld: target bottomRight.	(self world viewBox containsPoint: botRt)		ifTrue: [positionOffset _ evt cursorPoint - botRt]		ifFalse: [positionOffset _ 0@0].	target isAlignmentMorph		ifTrue: [minExtent _ target minWidth@target minHeight]		ifFalse: [minExtent _ 1@1].	aCommand _ Command new commandee: self.	aCommand parameterAt: #oldExtent put: target extent.	aCommand cmdWording: 'resizing'.	aCommand undoBlock:		[:cmd | cmd commandee target extent: (cmd parameterAt: #oldExtent)]. 	self setProperty: #command toValue: aCommand! !!HaloMorph methodsFor: 'private' stamp: 'sw 8/29/2000 14:24'!startRot: evt with: rotHandle	"Initialize rotation of my target if it is rotatable.  Launch a command object to represent the action"	| aCommand |	target isFlexMorph ifFalse: 		[target isInWorld ifFalse: [self setTarget: target player costume].		target addFlexShell].	growingOrRotating _ true.	self removeAllHandlesBut: rotHandle.  "remove all other handles"	aCommand _ Command new commandee: self.	aCommand cmdWording: 'rotating'.	angleOffset _ evt cursorPoint - (target pointInWorld: target referencePosition).	angleOffset _ Point			r: angleOffset r			degrees: angleOffset degrees - target rotationDegrees.	aCommand parameterAt: #oldRotationDegrees put: target rotationDegrees.	aCommand undoBlock:		[:cmd | cmd commandee target rotationDegrees: (cmd parameterAt: #oldRotationDegrees).			cmd commandee target changed; layoutChanged]. 	aCommand redoBlock:		[:cmd | cmd commandee target rotationDegrees: (cmd parameterAt: #newRotationDegrees).			cmd commandee target changed; layoutChanged].	self setProperty: #command toValue: aCommand! !!HandMorph methodsFor: 'event handling' stamp: 'sw 8/29/2000 14:30'!handleEvent: evt	"Handle the event."	eventSubscribers do: [:m | m handleEvent: evt]."--"	(evt anyButtonPressed and:	 [evt controlKeyPressed and:	 [lastEvent anyButtonPressed not]]) ifTrue:		[eventTransform _ MorphicTransform identity.		lastEvent _ evt.		^ self invokeMetaMenu: evt].		evt blueButtonPressed ifTrue:			[lastEvent blueButtonPressed 				ifTrue: [^ self specialDrag: evt]				ifFalse: [eventTransform _ MorphicTransform identity.						lastEvent _ evt.						^ self specialGesture: evt]]."--"	lastEvent _ evt.	self position ~= evt cursorPoint		ifTrue: [self position: evt cursorPoint].	evt isMouse ifTrue:		[evt isMouseMove ifTrue: [^ self handleMouseMove: evt].		self world validateMouseEvent: evt.	"allow current world to bail out"		evt isMouseDown ifTrue: [ ^ self handleMouseDown: evt].		evt isMouseUp ifTrue: [^ self handleMouseUp: evt]].	evt isKeystroke ifTrue:		[^ keyboardFocus			ifNotNil:				[keyboardFocus dispatchKeystroke: evt]			ifNil:				[self unfocusedKeystroke: evt]]! !!HandMorph methodsFor: 'event handling' stamp: 'sw 8/29/2000 14:43'!unfocusedKeystroke: evt	"A keystroke has come through when no object claimed the keyboard focus.  See if there's something we can do with it"	|  aChar isCmd aWorld |	aChar _ evt keyCharacter.	(aChar == Character tab) ifTrue:		[((aWorld _ self world) hasProperty: #tabAmongFields)			ifTrue:				[^ aWorld tabHitWithEvent: evt]].	isCmd _ evt commandKeyPressed and: [Preferences cmdKeysInText].	isCmd ifTrue:		[(aChar == $b) ifTrue: [^ Browser openBrowser].          "for example"		(aChar == $z) ifTrue: [^ Command undoOrRedoCommand]]! !!HandMorph methodsFor: 'grabbing/dropping' stamp: 'sw 8/12/2000 02:25'!dropMorphsEvent: evt 	"Drop all the morphs this hand is currently holding in response to the 	given event."	"Details: All submorphs of the front-most composite morph under the 	hand are given an opportunity to accept the dropping morph. If none 	of these accepts it, or if there is no morph under the hand, then the 	morph drops into the world."	| newOwner morphToDrop localPt grabbedMorph pos worldUnderCursor |	worldUnderCursor _ self worldUnderCursor.	worldUnderCursor		ifNil: [^ self].	self changed.	self		submorphsReverseDo: [:m | 			"drop in reverse order to maintain back-to-front ordering"			addedFlexAtGrab == true				ifTrue: [pos _ m firstSubmorph position.					grabbedMorph _ m removeFlexShell.					self privateRemoveMorph: grabbedMorph.					grabbedMorph position: pos					"undo offset from removeFlexShell"]				ifFalse: [grabbedMorph _ m].			newOwner _ self dropTargetFor: grabbedMorph event: evt.			newOwner				ifNil: ["Drop not allowed"					self rejectDropMorph: grabbedMorph event: evt.					addedFlexAtGrab == true						ifTrue: [self privateRemoveMorph: m.							addedFlexAtGrab _ false].					^ self].			"Transcript show: newOwner printString; cr."			morphToDrop _ newOwner morphToDropFrom: grabbedMorph.			morphToDrop == grabbedMorph				ifFalse: [submorphs size == 1						ifTrue: [self privateRemoveMorph: m.							m privateOwner: nil.							addedFlexAtGrab _ false]].			"the above says: the thing to drop is not what I was carrying; 			silently vaporize what I was carrying lest it cause trouble 			later; keep the owner/submorph relationship invariant, but 			don't go through the standard delete protocol"			localPt _ newOwner globalPointToLocal: self position.			addedFlexAtGrab == true				ifTrue: [morphToDrop position: (localPt + (morphToDrop position								- (m transform globalPointToLocal: self position))) rounded.					self privateRemoveMorph: m.					addedFlexAtGrab _ false]				ifFalse: [morphToDrop						position: (newOwner globalPointToLocal: morphToDrop position) rounded].			newOwner acceptDroppingMorph: morphToDrop event: evt.			morphToDrop justDroppedInto: newOwner event: evt.			morphToDrop owner = self				ifTrue: [self world addMorphFront: m]].	currentCommand ifNotNil:		[Command rememberCommand: currentCommand.		currentCommand _ nil].	self layoutChanged.	formerOwner _ nil.	formerPosition _ nil! !!HandMorph methodsFor: 'grabbing/dropping' stamp: 'sw 8/29/2000 14:29'!grabMorphInner: aMorph	"The real work of grabbing a morph.  Set up a command object to represent the forthcoming move (in support of Undo), then actually wrench the morph out of its old home and add it as one of MY submorphs."	| myPos morphPos localPt trans morphToGrab newT commandee newOwner newBounds newPredecessor oldOwner oldPredecessor |	formerOwner _ aMorph owner.	formerPosition _ aMorph position.	(formerOwner notNil and: [(aMorph isKindOf: NewHandleMorph orOf: MenuMorph) not]) ifTrue:		[currentCommand _ Command new commandee: aMorph.		currentCommand cmdWording: 'move ', (aMorph externalName truncateTo: 10).		currentCommand parameterAt: #oldOwner put: formerOwner.		currentCommand parameterAt: #oldBounds put: aMorph bounds.		currentCommand parameterAt: #oldPredecessor put: (formerOwner morphPreceding: aMorph).		currentCommand undoBlock:			[:cmd | 				(commandee _ cmd commandee) owner					ifNil:						[self beep]					ifNotNil:						[cmd parameterAt: #newOwner put: (newOwner _ commandee owner).						cmd parameterAt: #newBounds put: (newBounds _ commandee bounds).						cmd parameterAt: #newPredecessor put: (newPredecessor _ (commandee owner morphPreceding: commandee)).						(oldOwner _ cmd parameterAt: #oldOwner) ifNotNil:								[(oldPredecessor _ cmd parameterAt: #oldPredecessor)									ifNil:										[oldOwner addMorphBack: commandee]									ifNotNil:										[oldOwner addMorph: commandee after: oldPredecessor]].						commandee bounds: (cmd parameterAt: #oldBounds).						(commandee isKindOf: SystemWindow) ifTrue: [commandee activate]]].		currentCommand redoBlock:			[:cmd | 				(newOwner _ cmd parameterAt: #newOwner) ifNotNil:					[commandee _ cmd commandee.					(newPredecessor _ cmd parameterAt: #newPredecessor)						ifNil:							[newOwner addMorphBack: commandee]						ifNotNil:							[newOwner ifNotNil: [newOwner addMorph: commandee after: newPredecessor]].					commandee bounds: newBounds.					(commandee isKindOf: SystemWindow) ifTrue: [commandee activate]]]].	"Check if the morph will keep its transform while grabbed"	myPos _ self position.	morphPos _ aMorph position.	localPt _ (aMorph keepsTransform "or: [formerOwner isNil]")		ifTrue:[myPos]		ifFalse:[((aMorph world ifNil: [self worldUnderCursor]) 							globalPointToLocal: myPos) truncated].						"fix grabbing new morph in embedded world"	(formerOwner == nil		or: [aMorph keepsTransform			or: [(trans _ formerOwner transformFromOutermostWorld) isPureTranslation]]) ifTrue: [		aMorph position: myPos + (morphPos - localPt).		morphToGrab _ aMorph.		addedFlexAtGrab _ false.	] ifFalse: ["Morph was in a flexed environment.  Flex it in the hand."		morphToGrab _ aMorph addFlexShell transform: trans asMorphicTransform.		aMorph position: morphPos.  "revert offset from addFlexShell"		newT _ trans withOffset: (trans offset + (trans localPointToGlobal: localPt) - myPos).		morphToGrab position: (morphToGrab localPointToGlobal: morphToGrab position).		morphToGrab transform: newT.		addedFlexAtGrab _ true.	].	(morphToGrab isKindOf: PhraseTileMorph) ifTrue:		[morphToGrab position: Sensor cursorPoint].	gridOn ifTrue: [morphToGrab position: (morphToGrab position grid: grid)].	self addMorphBack: morphToGrab! !!HandMorph methodsFor: 'world menu' stamp: 'sw 8/29/2000 14:25'!addUndoItemsTo: aWorldMenu	"Add undo-related items to the given menu.  Will add zero, one or two items, depending on the settings of the #useUndo and #infiniteUndo preferences"	Preferences useUndo ifFalse: [^ self].	Preferences infiniteUndo		ifFalse:			[aWorldMenu addUpdating: #undoOrRedoMenuWording target: Command action: #undoOrRedoCommand]		ifTrue:			[aWorldMenu addUpdating: #undoMenuWording target: Command  action: #undoLastCommand.			aWorldMenu addUpdating: #redoMenuWording target: Command action: #redoNextCommand.			self flag: #deferred.  "The following feature to be unblocked in due course"			"aWorldMenu add: 'undo to...' target: Command action: #undoTo"].	aWorldMenu addLine! !!HandMorph methodsFor: 'object fileIn' stamp: 'sw 8/29/2000 14:26'!convertbosfceekmmmdccffuleatdccttggrtllmhssffa0: varDict bosfceekmmmdccffuleatdccttggrtllmhssffac0: smartRefStrm	"Such a sweet little method name"	"New variables: #('currentCommand')  If a non-nil value is needed, please assign it."! !!PasteUpMorph methodsFor: 'stack/card' stamp: 'sw 8/29/2000 15:01'!tabHitWithEvent: anEvent	"The tab key was hit. The keyboard focus has referred this event to me, though this perhaps seems rather backwards.  Anyway, the assumption is that I have the property #tabAmongFields, so now the task is to tab to the next field"	| currentFocus fieldList anIndex itemToHighlight |	currentFocus _ anEvent hand keyboardFocus.	fieldList _ self allMorphs select:		[:aMorph | (aMorph wouldAcceptKeyboardFocusUponTab) and: [aMorph isLocked not]].	anIndex _ fieldList indexOf: currentFocus ifAbsent: [nil].	itemToHighlight _ fieldList atWrap: 		(anIndex ifNotNil: [anEvent shiftPressed ifTrue: [anIndex - 1] ifFalse: [anIndex + 1]]				ifNil: [1]).	anEvent hand newKeyboardFocus: itemToHighlight.	itemToHighlight editor selectAll.	itemToHighlight invalidRect: itemToHighlight bounds ! !!PasteUpMorph methodsFor: 'interaction loop' stamp: 'sw 8/29/2000 15:00'!keyStroke: anEvent	"A keystroke has been made.  Service event handlers and, if it's a keystroke presented to the world, dispatch it to #unfocusedKeystroke:"	super keyStroke: anEvent.  "Give event handlers a chance"	self isWorldMorph ifTrue:		[anEvent hand unfocusedKeystroke: anEvent]! !!Preferences class methodsFor: 'hard-coded prefs' stamp: 'sw 8/29/2000 15:01'!preserveCommandExcursions	"An architecture is in place for storing command excursions to which access is otherwise cut off by having taken a variant branch, but it is not accessible unless you hand-code this preference to true -- which I suggest you do only with fingers crossed."	^ false! !!TextMorph methodsFor: 'private' stamp: 'sw 8/29/2000 15:04'!dispatchKeystroke: anEvent	"Special handling for tab key; if the stage is set up for tabbing among fields, then possibly get that taken care of; otherwise, handle the keystroke in the normal fashion."	| paste |	(anEvent keyCharacter == Character tab) ifTrue:		[(self wouldAcceptKeyboardFocusUponTab  and:			[(paste _ self pasteUpMorph) hasProperty: #tabAmongFields])				ifTrue:					[^ paste tabHitWithEvent: anEvent]].	^ self keyStroke: anEvent! !!TextMorph methodsFor: 'private' stamp: 'sw 8/29/2000 15:05'!wouldAcceptKeyboardFocusUponTab	"Answer whether the receiver might accept keyboard focus if tab were hit in some container playfield"	^ self isLocked not! !!TextMorphForEditView methodsFor: 'as yet unclassified' stamp: 'sw 8/29/2000 15:05'!dispatchKeystroke: anEvent	"Reimplemented here to circumvent super's rendition"	^ self keyStroke: anEvent! !!TextMorphForEditView methodsFor: 'as yet unclassified' stamp: 'sw 8/29/2000 15:06'!wouldAcceptKeyboardFocusUponTab	"Answer whether the receiver would be a happy inheritor of keyboard focus if tab were hit in an enclosing playfield under propitious circumstances.  Does not make sense for this kind of morph, which is encased in a window"	^ false! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 8/29/2000 15:07'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu _ MenuMorph new defaultTarget: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu from: {		{'previous project' . { #myWorld . #goBack } }.		{'jump to project...' . { #myWorld . #jumpToProject } }.		{'save project on file...' . { #myWorld  . #saveOnFile } }.		{'load project from file...' . { self  . #loadProject } }.		nil}.	myHand addUndoItemsTo: menu.		self fillIn: menu from: {		{'restore display' . { Display . #restoreMorphicDisplay } }.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'open...' . { self  . #openWindow } }.			{'windows & flaps...' . { self  . #windowsDo } }.			{'changes...' . { self  . #changesDo } }}].	self fillIn: menu from: { 		{'help...' . { self  . #helpDo } }.		{'appearance...' . { self  . #appearanceDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: {			{'do...' . { Utilities . #offerCommonRequests} } }].	self fillIn: menu from: { 		nil.		{'new morph...' . { self  . #newMorph } }.		{'authoring tools...' . { self  . #scriptingDo } }.		{'playfield options...' . { self  . #playfieldDo } }.		{'projects...' . { self  . #projectDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'print PS to file...' . { self  . #printWorldOnFile } }.			{'debug...' . { self  . #debugDo } }}].	self fillIn: menu from: { 		nil.		{'save' . { self  . #saveSession } }.		{'save as...' . { Smalltalk . #saveAs } }.		{'save and quit' . { self  . #saveAndQuit } }.		{'quit' . { self  . #quitSession } }}.	^ menu! !!TrashCanMorph methodsFor: 'initialization' stamp: 'sw 8/29/2000 15:07'!initialize	"Initialize the receiver's graphics, name, and balloon-help"	super initialize.	self image: TrashPicOn;		offImage: TrashPic;		pressedImage: TrashPicOn.	self setNameTo: 'Trash'.	self setBalloonText:'To remove an object, drop it on a trash can.'.! !!Utilities class methodsFor: 'flaps' stamp: 'sw 8/29/2000 15:08'!standardBottomFlap	"Answer a fully-instantiated flap named 'Supplies' to be placed at the bottom of the screen"	|  aFlapTab aPage |	aPage _ self newPartsFlapPage.	aPage setProperty: #maximumThumbnailWidth toValue: 80.	aFlapTab _ FlapTab new referent: aPage beSticky.	aFlapTab color: Color red lighter.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab assumeString: 'Supplies' font: Preferences standardFlapFont orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aPage extent: self currentWorld width @ 100.	aPage addMorphBack: Command undoRedoButtons markAsPartsDonor.	aPage addMorphBack: TrashCanMorph new markAsPartsDonor.	aPage addMorphBack: ScriptingSystem scriptControlButtons markAsPartsDonor.	#(PaintInvokingMorph RectangleMorph EllipseMorph StarMorph  CurveMorph PolygonMorph TextMorph ImageMorph BasicButton SimpleSliderMorph		PasteUpMorph    BookMorph TabbedPalette 		JoystickMorph  ) do:		[:sym | aPage addMorphBack: (Smalltalk at: sym) authoringPrototype].	aPage addMorphBack: ScriptingSystem prototypicalHolder.	aPage addMorphBack: RectangleMorph roundRectPrototype.	aPage addMorphBack: Morph new previousPageButton markAsPartsDonor.	aPage addMorphBack: Morph new nextPageButton markAsPartsDonor.	aPage addMorphBack: (ClockMorph authoringPrototype showSeconds: false) step.	aPage replaceTallSubmorphsByThumbnails.	aPage fixLayout.	aFlapTab position: ((Display width - aFlapTab width) // 2 @ (self currentWorld height - aFlapTab height)).	aPage setProperty: #flap toValue: true.	aPage color: (Color red muchLighter "alpha: 0.2").	aPage extent: self currentWorld width @ 100.		^ aFlapTab! !HaloMorph removeSelector: #angleOffset:!Command initialize!Command class removeSelector: #nameForViewerHeader!Command class removeSelector: #previousCommand!!Command class reorganize!('class initialization' initialize)('dog-simple ui' undoRedoButtons)('menu' redoEnabled redoMenuWording undoEnabled undoMenuWording undoOrRedoMenuWording)('command-history mechanics' historyIndexOfLastCommand lastCommand nextCommand resetCommandHistory)('called by programmer' cantUndo promoteToCurrent: rememberCommand:)('called from the ui' redoNextCommand undoLastCommand undoOrRedoCommand undoTo)!Command removeSelector: #parameters!!Command reorganize!('initialization' cmdWording: commandee: phase: printOn: redoBlock: undoBlock:)('parameters' parameterAt: parameterAt:ifAbsent: parameterAt:put:)('command execution' doCommand redoCommand undoCommand)('private' assuredParameterDictionary cmdWording commandee phase)!"Postscript:"Preferences addPreference: #useUndo category: #general default: true balloonHelp: 'if true, then undo will generally be available in morphic'.Preferences addPreference: #infiniteUndo category: #general  default: true balloonHelp: 'if true, then where it makes sense you will be able to roll back to prior states via repeated uses of undo'.ScriptingSystem saveForm: (Form extent: 41@28 depth: 32	fromArrayoffset: 371.0@364) atKey: #CrudeUndo.ScriptingSystem saveForm: (Form extent: 42@28 depth: 32 fromArray	offset: 471.0@301) atKey: #CrudeRedo.ScriptingSystem saveForm: ( (Form extent: 41@28 depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4288215193 0 0 0 0 0 0 0 4288215193 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4288215193 0 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 0 4288215193 4288215193 4288215193 4288215193 0 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 4288215193 0 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 4288215193 0 0 0 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 4288215193 0 0 0 0 0 0 4288215193 0 0 0 0 4288215193 0 0 0 0 0 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 4288215193 0 0 0 4288215193 4288215193 4288215193 4288215193 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: 638@534)) atKey: #CrudeUndoDisabled.ScriptingSystem saveForm: ((Form extent: 42@28 depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4289249529 0 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 0 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 0 0 0 0 0 0 0 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 4289249529 0 0 0 4289249529 4289249529 4289249529 4289249529 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) offset: 237@533)) atKey: #CrudeRedoDisabled.Utilities addToSuppliesFlap: Command undoRedoButtons asElementNumber: 1.!