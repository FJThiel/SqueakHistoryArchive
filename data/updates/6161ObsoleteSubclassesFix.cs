'From Squeak3.7beta of ''1 April 2004'' [latest update: #5969] on 13 July 2004 at 12:40:49 am'!"Change Set:		ObsoleteSubclassesFixDate:			13 July 2004Author:			apbThe changes here should prevent the ObsoleteSubclasses dictionary being rehashed some two dozen times each time a class is recompiled."!WeakIdentityKeyDictionary subclass: #WeakKeyToCollectionDictionary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Weak'!!WeakKeyToCollectionDictionary commentStamp: '<historical>' prior: 0!This class represents an identity dictionary with weak keys, whose values are collections. Keys not in the dictionary are mapped to the empty collection.  Conversely, if a collection becomes empty, the mapping can be removed to save time and space.  However, because this requires re-hashing, it does not pay to do this to eagerly.!!Behavior methodsFor: 'enumerating' stamp: 'apb 7/13/2004 00:40'!allInstancesDo: aBlock 	"Evaluate the argument, aBlock, for each of the current instances of the 	receiver.		Because aBlock might change the class of inst (for example, using become:),	it is essential to compute next before aBlock value: inst."	| inst next |	self ==  UndefinedObject ifTrue: [^ aBlock value: nil].	inst _ self someInstance.	[inst == nil]		whileFalse:		[		next _ inst nextInstance.		aBlock value: inst.		inst _ next]! !!Behavior methodsFor: 'obsolete subclasses' stamp: 'apb 7/12/2004 23:13'!addObsoleteSubclass: aClass	"Weakly remember that aClass was a subclass of the receiver and is now obsolete"	| obs |	obs _ ObsoleteSubclasses at: self ifAbsent:[WeakArray new].	(obs includes: aClass) ifTrue:[^self].	obs _ obs copyWithout: nil.	obs _ obs copyWith: aClass.	ObsoleteSubclasses at: self put: obs.! !!Behavior methodsFor: 'obsolete subclasses' stamp: 'apb 7/12/2004 23:20'!obsoleteSubclasses	"Return all the weakly remembered obsolete subclasses of the receiver"	| obs |	obs := ObsoleteSubclasses at: self ifAbsent: [^ #()].	^ obs copyWithout: nil! !!Behavior methodsFor: 'obsolete subclasses' stamp: 'apb 7/12/2004 23:21'!removeAllObsoleteSubclasses	"Remove all the obsolete subclasses of the receiver"	ObsoleteSubclasses removeKey: self ifAbsent: [].! !!Behavior methodsFor: 'obsolete subclasses' stamp: 'apb 7/12/2004 23:22'!removeObsoleteSubclass: aClass	"Remove aClass from the weakly remembered obsolete subclasses"	| obs |	obs _ ObsoleteSubclasses at: self ifAbsent:[^ self].	(obs includes: aClass) ifFalse:[^self].	obs _ obs copyWithout: aClass.	obs _ obs copyWithout: nil.	ObsoleteSubclasses at: self put: obs! !!Behavior class methodsFor: 'class initialization' stamp: 'apb 7/12/2004 23:23'!flushObsoleteSubclasses	"Behavior flushObsoleteSubclasses"	ObsoleteSubclasses finalizeValues.! !!Behavior class methodsFor: 'class initialization' stamp: 'apb 7/12/2004 23:51'!initialize	"Behavior initialize"	"Never called for real"	ObsoleteSubclasses		ifNil: [self initializeObsoleteSubclasses]		ifNotNil: [| newDict | 			newDict := WeakKeyToCollectionDictionary newFrom: ObsoleteSubclasses.			newDict rehash.			ObsoleteSubclasses := newDict]! !!Behavior class methodsFor: 'class initialization' stamp: 'apb 7/12/2004 23:46'!initializeObsoleteSubclasses	ObsoleteSubclasses _ WeakKeyToCollectionDictionary new.! !!WeakKeyToCollectionDictionary methodsFor: 'as yet unclassified' stamp: 'apb 7/12/2004 23:47'!finalizeValues 	self rehash! !!WeakKeyToCollectionDictionary methodsFor: 'as yet unclassified' stamp: 'apb 7/13/2004 00:17'!rehash	"Rehash the receiver. Reimplemented to remove nils from the collections	that appear as values, and to entirely remove associations with empty collections 	as values."	| oldArray assoc cleanedValue newIndex |	oldArray := array.	array := Array new: oldArray size.	tally := 0.	1 to: array size do: [:i | 			assoc := oldArray at: i.			(assoc notNil					and: [(cleanedValue := assoc value copyWithout: nil) notEmpty])				ifTrue: [newIndex := self scanForNil: assoc key.					assoc value: cleanedValue.					self atNewIndex: newIndex put: assoc]]! !Behavior initialize!"Postscript:Replace the ObsoleteSubclasses distionary (a class variable of Behavior) with a an instance of the new class WeakKeyToCollectionDictionary, which willcontain logically equivalent mappings."Behavior initialize.!