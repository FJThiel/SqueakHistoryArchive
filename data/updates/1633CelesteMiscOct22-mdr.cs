'From Squeak2.6 of 11 October 1999 [latest update: #1578] on 22 November 1999 at 8:12:45 pm'!"Change Set:		CelesteMiscOctDate:			22 November 1999Author:			Mike Rutenberg (mdr@scn.org)(1) Fixes to ensure that required message categories exist when needed, and that the CategoryList is always displayed correctly and completely(2) Fixes to ensure the TOC is updated cleanly to reduce stupid scrolling(3) Show all message header fields in category '.tosend.' so that they will not be lost when edited(4) Update the omitted header fields list(5) Correct the reported spelling error in the Morphic mesage [sic] sending window(6) Correct problem with removeTrailingSeparators: by replacing by String withoutTrailingBlanks"!!Celeste methodsFor: 'categories pane' stamp: 'mdr 11/22/1999 14:05'!addCategory	"Create a new category with the user-specified name. This does nothing if the category already exists."	| newCatName |	newCatName _ FillInTheBlank request: 'Name for new category?'.	(newCatName isEmpty) ifTrue: [^self].	"user aborted"	self requiredCategory: newCatName.	self setCategory: newCatName.! !!Celeste methodsFor: 'categories pane' stamp: 'mdr 11/22/1999 12:54'!emptyTrash	"Delete all messages in the '.trash.' category.	WARNING: The messages will be completely removed from the database."	| msgList |	self requiredCategory: '.trash.'.	msgList _ self filteredMessagesIn: '.trash.'.	mailDB removeAll: msgList fromCategory: currentCategory.	mailDB deleteAll: msgList.	self updateTOC.! !!Celeste methodsFor: 'categories pane' stamp: 'mdr 11/22/1999 12:54'!exportCategory	"Store the filtered message list of the current category to another mail database. The user is prompted for the name of the other database."	| destDBName destDB |	currentCategory ifNil: [ ^self ].	destDBName _ FillInTheBlank		request: 'Destination mail database?'		initialAnswer: ''.	(destDBName isEmpty) ifTrue: [^self].	destDB _ MailDB openOn: destDBName.	(destDB isNil) ifTrue: [^self].	destDB mergeMessages: (self filteredMessagesIn: currentCategory) from: mailDB.	destDB saveDB.! !!Celeste methodsFor: 'categories pane' stamp: 'mdr 11/22/1999 12:55'!fetchMail	"Append messages from the user's mailbox to this mail database."	| server password msgCount |	server _ self class popServer.	password _ self popPassword.	(password isNil or: [password isEmpty]) ifTrue: [^ self].	self requiredCategory: 'new'.	msgCount _ mailDB fetchMailFromPOP: server		userName: self class popUserName		password: password		doFormatting: FormatWhenFetching		deleteFromServer: DeleteInboxAfterFetching.	msgCount < 0		ifTrue: [self inform: 'could not connect to the mail server']		ifFalse: [self inform: msgCount printString, ' messages fetched'].	msgCount <= 0 ifTrue: [^ self].	self setCategory: 'new'.! !!Celeste methodsFor: 'categories pane' stamp: 'mdr 11/22/1999 15:52'!findDuplicates	"Find duplicate messages, and move the redundant copies to a given category."	| duplicatesCategory |	duplicatesCategory _ FillInTheBlank		request: 'File duplicates in category?'		initialAnswer: '.duplicates.'.	duplicatesCategory isEmpty ifTrue:[^ self].	self requiredCategory: duplicatesCategory.	Utilities informUser: 'Searching for duplicates...'		during: [mailDB fileDuplicatesIn: duplicatesCategory].	self setCategory: duplicatesCategory.! !!Celeste methodsFor: 'categories pane' stamp: 'mdr 7/20/1999 17:03'!setCategory: newCategory	"Change the currently selected category. We must also compute the table of contents and message list for the new category."	| s |	currentCategory _ newCategory.	(newCategory isNil)		ifTrue: [			currentMessages _ currentTOC _ currentMsgID _ nil]		ifFalse: [			currentMessages _ self filteredMessagesIn: newCategory.			currentTOC _ OrderedCollection new: currentMessages size.			1 to: currentMessages size do: [:i |				s _ WriteStream on: (String new: 100).				s nextPutAll: i printString; space.				[s position < 4] whileTrue: [s space].				s nextPutAll: (mailDB getTOCstring: (currentMessages at: i)).				currentTOC add: s contents].			currentTOC _ currentTOC asArray.			(currentMessages includes: currentMsgID) ifFalse: [currentMsgID _ nil]].	self changed: #category.	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText.! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 11/22/1999 13:50'!deleteAll	"Move all visible messages in the current category to '.trash.'."	| msgList |	self requiredCategory: '.trash.'.	msgList _ self filteredMessagesIn: currentCategory.	mailDB removeAll: msgList fromCategory: currentCategory.	mailDB fileAll: msgList inCategory: '.trash.'.	currentMsgID _ nil.	self updateTOC.! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 11/22/1999 13:03'!deleteMessage	"Move the current message to the '.trash.' category and select the next message. Deleted messages can later purged by invoking the 'deleteAll' command in the '.trash.' category."	currentMsgID isNil ifTrue: [^ self].	self requiredCategory: '.trash.'.	mailDB remove: currentMsgID fromCategory: currentCategory.	mailDB file: currentMsgID inCategory: '.trash.'.	self updateTOC.! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 7/12/1999 15:16'!nextMessage	"Select the next message."	| index |	(currentCategory isNil | currentMsgID isNil) ifTrue: [^ self].	index _ currentMessages indexOf: currentMsgID.	index < currentMessages size		ifTrue: [self setTOCEntry: (currentTOC at: index + 1)]		ifFalse: [self setTOCEntry: (currentTOC at: 1)].! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 7/12/1999 15:16'!previousMessage	"Select the previous message."	| index |	(currentCategory isNil | currentMsgID isNil) ifTrue: [^ self].	index _ currentMessages indexOf: currentMsgID.	index > 1		ifTrue: [self setTOCEntry: (currentTOC  at: index - 1)]		ifFalse: [self setTOCEntry: (currentTOC  at: currentMessages size)].! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 11/22/1999 15:56'!saveMessage	"save the currently selected message to a file" 	| fileName file |	currentMsgID ifNil: [ ^self ].	fileName _ FillInTheBlank request: 'file to save in'.	fileName isEmpty ifTrue: [ ^self ].  	file _ FileStream fileNamed: fileName.	file nextPutAll: (mailDB getMessage: currentMsgID) text.	file close.! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 11/22/1999 13:14'!search	"Search the text of all messages in the present category"	| destCat matchString msgText |	destCat _ FillInTheBlank		request: 'In what category should the search results be filed?'		initialAnswer: '.search results.'.	(destCat isEmpty) ifTrue: [^self].	matchString _ FillInTheBlank		request: 'String sought in message text?'		initialAnswer: ''.	(matchString isEmpty) ifTrue: [^self].	self requiredCategory: destCat.	(self filteredMessagesIn: currentCategory) do:		[: msgID |		 msgText _ mailDB getText: msgID.		 ((msgText findString: matchString startingAt: 1) > 0) ifTrue:			[mailDB file: msgID inCategory: destCat]].	self setCategory: destCat.! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 7/12/1999 16:22'!setTOCEntry: newTOCentry	"Change the currently selected message. This is done by finding the message ID corresponding to the selected table of contents entry."	| i |	(newTOCentry isNil | currentTOC isNil)		ifTrue: [currentMsgID _ nil]		ifFalse:			[i _ currentTOC indexOf: newTOCentry ifAbsent: [nil].			 (i isNil)				ifTrue: [currentMsgID _ nil]				ifFalse: [currentMsgID _ currentMessages at: i]].	self changed: #tocEntry.	self changed: #messageText.! !!Celeste methodsFor: 'table of contents pane' stamp: 'mdr 7/12/1999 16:22'!updateTOC	"Update the table of contents after a moving, removing, or deleting a message. Select a message near the removed message in the table of contents if possible."	| currentMsgIndex |	((currentCategory isNil) |	 (currentMsgID isNil) |	 (currentMessages size < 2))		ifTrue: [currentMsgIndex _ 1]		ifFalse: [currentMsgIndex _ currentMessages indexOf: currentMsgID].	currentMsgID _ nil.	self setCategory: currentCategory.  "update currentMessages, currentTOC"	currentMessages isEmpty ifFalse: [		(currentMsgIndex <= currentMessages size)			ifTrue: [currentMsgID _ currentMessages at: currentMsgIndex]			ifFalse: [currentMsgID _ currentMessages last].	].	self changed: #tocEntryList.	self changed: #tocEntry.	self changed: #messageText.! !!Celeste methodsFor: 'filtering' stamp: 'mdr 11/22/1999 13:44'!fromFilterOn	"Show only those messages from the same person as the currently selected message. The user is given a chance to edit the pattern string used to match 'From:' fields."	fromFilter _		(currentMsgID isNil)			ifTrue: ['']			ifFalse: [(mailDB getTOCentry: currentMsgID) from].	fromFilter _ FillInTheBlank		request: '''From:'' filter pattern?'		initialAnswer: fromFilter.	fromFilter _ fromFilter withoutTrailingBlanks.	self updateTOC.! !!Celeste methodsFor: 'filtering' stamp: 'mdr 11/22/1999 13:45'!subjectFilterOn	"Show only those messages whose subject matches the currently selected message. The user is given a chance to edit the pattern string used to match 'Subject:' fields."	subjectFilter _		(currentMsgID isNil)			ifTrue: ['']			ifFalse: [(mailDB getTOCentry: currentMsgID) subject].	subjectFilter _ subjectFilter withBlanksTrimmed.	(subjectFilter asLowercase beginsWith: 're:') ifTrue: [		subjectFilter _ subjectFilter copyFrom: 4 to: subjectFilter size.		subjectFilter _ subjectFilter withBlanksTrimmed ].	subjectFilter _ FillInTheBlank		request: '''Subject:'' filter pattern?'		initialAnswer: subjectFilter.	subjectFilter _ subjectFilter withoutTrailingBlanks.	self updateTOC.! !!Celeste methodsFor: 'message text pane' stamp: 'mdr 7/12/1999 15:22'!messageText	"Answer the text which makes up the complete message (header+body)"	(currentMsgID isNil) ifTrue: [^''].	"Always show the full message header for messages in the category .tosend. so that all special header lines are preserved, shown and can be edited."	(currentCategory = '.tosend.')		ifTrue: [^ mailDB getText: currentMsgID].	SuppressWorthlessHeaderFields		ifTrue: [^ self formatedMessageText]		ifFalse: [^ mailDB getText: currentMsgID].! !!Celeste methodsFor: 'other' stamp: 'mdr 11/22/1999 13:29'!requiredCategory: catName	"catName is a required category.  If it does not exist in the database, then create it, and update the category list to reflect that it now exists."	(self categoryList includes: catName)		ifFalse:			[mailDB addCategory: catName.			self changed: #categoryList.]! !!Celeste methodsFor: 'sending mail' stamp: 'mdr 11/22/1999 20:12'!forwardTextFor: msgID	"Answer the template for forwarding the message with the given ID."	^self composeText, '---------- Forwarded ----------',	(mailDB getMessage: msgID) formattedText, '-------------------------------'! !!Celeste methodsFor: 'sending mail' stamp: 'mdr 11/22/1999 15:55'!preSendAuthentication	"Where required, authenticate ourselves to the SMTP server before sending mail"	"This is a placeholder for any required authentication"! !!Celeste methodsFor: 'sending mail' stamp: 'mdr 11/22/1999 13:25'!queueMessageWithText: aStringOrText	"Queue a message to be sent later. The message is added to the database and filed in the '.tosend.' category."	| messageText id |	messageText _		'X-Mailer: ', Celeste versionString, String cr,		'Date: ', MailMessage dateStampNow, String cr.	messageText _ messageText,		aStringOrText asString.		self requiredCategory: '.tosend.'.	"queue the message"	id _ mailDB addNewMessage: (MailMessage from: messageText).	mailDB file: id inCategory: '.tosend.'.	(self category = '.tosend.') ifTrue: [self updateTOC].! !!Celeste methodsFor: 'sending mail' stamp: 'mdr 11/22/1999 14:32'!sendQueuedMail	"Post queued messages to the SMTP server."	| outgoing sender n message recipients socket |	outgoing _ mailDB messagesIn: '.tosend.'.	outgoing isEmpty ifTrue: [^ self inform: 'no mail to be sent'].	self requiredCategory: '.sent.'.	self preSendAuthentication.	sender _ (MailAddressParser addressesIn: self class userName) first.	[socket _ SMTPSocket usingServer: Celeste smtpServer]		ifError: [ :a :b | self error: 'error opening connection to mail server'].	('sending ', outgoing size printString, ' messages...')		displayProgressAt: Sensor mousePoint		from: 1		to: outgoing size		during: [:progressBar |			n _ 0.			outgoing do: [:id |				progressBar value: (n _ n + 1).				message _ mailDB getMessage: id.				recipients _ Set new.				recipients addAll: (MailAddressParser addressesIn: message to).				recipients addAll: (MailAddressParser addressesIn: message cc).				[socket 					mailFrom: sender					to: recipients 					text: message text.	"send this one message on the stream"				mailDB remove: id fromCategory: '.tosend.'.				mailDB file: id inCategory: '.sent.'				] ifError: [ :a :b | self error: 'error posting mail']		]].	socket quit; close.	mailDB saveDB.	(self category = '.tosend.') |  (self category = '.sent.') ifTrue: [self updateTOC].! !!CelesteComposition methodsFor: 'interface' stamp: 'mdr 11/22/1999 19:58'!openInMorphic	"open an interface for sending a mail message with the given initial text"	| textMorph buttonsList sendButton |	morphicWindow _ SystemWindow labelled: 'Mister Postman'.	morphicWindow model: self.		textEditor _ textMorph _ PluggableTextMorph 		on: self 		text: #messageText  		accept: #messageText:.	morphicWindow addMorph: textMorph  frame: (0@0.1 corner: 1@1).	buttonsList _ AlignmentMorph newRow.	sendButton _ PluggableButtonMorph on: self getState: nil	 action: #submit.	sendButton label: 'send message'.	sendButton setBalloonText: 'add this to the queue of messages to be sent'.	sendButton onColor: Color white  offColor: Color white.	buttonsList addMorphBack: sendButton.		morphicWindow addMorph: buttonsList  frame: (0@0 extent: 1@0.1).	morphicWindow openInMVC.! !!MailMessage methodsFor: 'initialize-release' stamp: 'mdr 11/22/1999 15:51'!from: aString	"Parse aString to initialize myself."	| parseStream isMime contentType bodyText contentTransferEncoding |	time _ 0.	from _ to _ cc _ subject _ ''.	text _ aString withoutTrailingBlanks.	parseStream _ ReadStream on: text.	isMime _ false.		"mdr: this does not appear to be used"	contentType _ 'text/plain'.	contentTransferEncoding _ nil.	self fieldsFrom: parseStream do:		[:fName :fValue |		fName = 'date' ifTrue: [time _ self timeFrom: fValue].		fName = 'from' ifTrue: [from _ fValue].		fName = 'to'			ifTrue: [to isEmpty					ifTrue: [to _ fValue]					ifFalse: [to _ to , ', ' , fValue]].		fName = 'cc'			ifTrue: [cc isEmpty					ifTrue: [cc _ fValue]					ifFalse: [cc _ cc , ', ' , fValue]].		fName = 'subject' ifTrue: [subject _ fValue].		fName = 'mime-version' ifTrue: [isMime _ true].		fName = 'content-type' ifTrue: [contentType _ fValuecopyUpTo: $;].		fName = 'content-transfer-encoding' ifTrue:[contentTransferEncoding _ fValue asLowercase]].	bodyText _ parseStream upToEnd.	contentTransferEncoding = 'base64'		ifTrue:			[bodyText _ Base64MimeConverter mimeDecodeToChars:(ReadStream on: bodyText).			bodyText _ bodyText contents].	contentTransferEncoding = 'quoted-printable' ifTrue: [ bodyText _bodyText decodeQuotedPrintable ].	body _ MIMEDocument contentType: contentType content: bodyText! !!MailMessage class methodsFor: 'preferences' stamp: 'mdr 7/14/1999 16:38'!omittedHeaderFields	"Reply a list of fields to omit when displaying a nice simple message"	^ #(			'comments'			'priority'			'disposition-notification-to'			'x-envelope-info'			'x-mime-autoconverted'			'content-id'			'received'			'x-accept-language'			'x-mailer-version'			'x-unityuser'			'return-path'			'newsgroups'			'message-id'			'path'			'reply-to'			'in-reply-to'			'sender'			'x-sender'			'fonts'			'x-mailer'			'mime-version'			'x-uidl'			'status'			'content-type'			'content-transfer-encoding'			'errors-to'			'keywords'			'references'			'x-vms-to'			'x-delivery-notice'			'x-reply-of'			'x-newsreader'			'x-icon'			'x-mailing-list'			'x-loop'			'x-priority'			'x-msmail-priority'			'x-mimeole'			'x-organization'			'x-originating-ip'			'x-sun-charset'			'x-url'			'x-nextstep-mailer'			'x-authentication-warning'			'x-lotus-fromdomain'			'x-blackmail'			'x-authenticated-timestamp'			'nntp-posting-host'			'lines'			'return-receipt-to'			'precedence'			'originator'			'distribution'			'content-disposition'			'importance'			'resent-to'			'resent-cc'			'resent-message-id'			'resent-date'			'resent-sender'			'resent-from'		)! !Celeste removeSelector: #removeTrailingSeparators:!Celeste removeSelector: #openSenderInMVC:!Celeste removeSelector: #openSenderInMorphic:!Celeste removeSelector: #changeMessage:!MailMessage removeSelector: #removeTrailingSeparators:!"Postscript:"!