'From Squeak2.8alpha of 4 February 2000 [latest update: #2098] on 12 May 2000 at 6:16:12 pm'!"Change Set:		059FontSetStuff-smaDate:			30 December 1999Author:			Stefan Matthias Aust (sma@3plus4.de)Refactored and reworked FontSet stuff.  Additional to the BitFont converter (which hopefully still works) you can now store complete TextStyles into FontSet classes using	FontSet convertTextStyleNamed: 'Bookworm'As already implemented, you can then use either	FontSetBookworm installAsTextStyleor	FontSetBookworm installAsDefaultto (re)install that font family again.The mechanism requires a strike font which is named according to these rules:¥ family name without spaces, starting with an uppercase letter¥ point size as two-digit number¥ optionally 'B', 'I' or 'BI' for bold, italic or bold-italic fonts"!Object subclass: #FontSet	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Support'!!FontSet class methodsFor: 'private' stamp: 'sma 12/30/1999 14:59'!compileFont: strikeFont	| tempName literalString header |	tempName _ 'FontTemp.sf2'.	strikeFont writeAsStrike2named: tempName.	literalString _ (FileStream oldFileNamed: tempName) contentsOfEntireFile printString.	header _ 'sizeNNN	^ self fontNamed: ''NNN'' fromLiteral:' copyReplaceAll: 'NNN' with: strikeFont name.	self class compile: header , literalString classified: 'fonts' notifying: nil.	FileDirectory default deleteFileNamed: tempName! !!FontSet class methodsFor: 'private' stamp: 'sma 12/29/1999 12:58'!fontCategory	^ 'Graphics-Fonts' asSymbol! !!FontSet class methodsFor: 'private' stamp: 'sma 12/31/1999 10:48'!fontName	^ (self name copyFrom: superclass name size + 1 to: self name size) asSymbol! !!FontSet class methodsFor: 'private' stamp: 'sma 12/29/1999 12:58'!fontSetClass: aString	| className fontSet |	className _ (self name , (aString select: [:c | c isAlphaNumeric]) capitalized) asSymbol.	fontSet _ Smalltalk		at: className		ifAbsentPut: [self			subclass: className			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			category: self fontCategory].	(fontSet inheritsFrom: self) ifFalse: [^ self error: 'The name ' , className , ' is already in use'].	^ fontSet! !!FontSet class methodsFor: 'converting' stamp: 'sma 12/29/1999 21:18'!convertFontsNamed: familyName inDirectoryNamed: dirName		"FontSet convertFontsNamed: 'Tekton' inDirectoryNamed: 'Tekton Fonts' "	"This utility is for use after you have used BitFont to produce data files 	for the fonts you wish to use.  It will read the BitFont files and build	a fontset class from them.  If one already exists, the sizes that can be	found will be overwritten."	"For this utility to work as is, the BitFont data files must be named 'familyNN.BF',	and must reside in the directory named by dirName (use '' for the current directory)."	| allFontNames fontSet dir |	"Check first for matching file names and usable FontSet class name."	dir _ dirName isEmpty		ifTrue: [FileDirectory default]		ifFalse: [FileDirectory default directoryNamed: dirName].	allFontNames _ dir fileNamesMatching: familyName , '##.BF'.	allFontNames isEmpty ifTrue: [^ self error: 'No files found like ' , familyName , 'NN.BF'].	fontSet _ self fontSetClass: familyName.	allFontNames do:		[:each |		Transcript cr; show: each.		fontSet compileFont: (StrikeFont new readFromBitFont: (dir fullNameFor: each))]! !!FontSet class methodsFor: 'converting' stamp: 'sma 12/29/1999 12:27'!convertTextStyleNamed: aString	| style fontSet |	(style _ TextStyle named: aString) ifNil: [^ self error: 'unknown text style ' , aString].	fontSet _ self fontSetClass: aString.	style fontArray do: [:each | fontSet compileFont: each]! !!FontSet class methodsFor: 'filein/out' stamp: 'sma 12/29/1999 11:49'!fileOut	"FileOut and then change the properties of the file so that it won't be	treated as text by, eg, email attachment facilities"	super fileOut.	(FileStream oldFileNamed: self name , '.st') setFileTypeToObject; close! !!FontSet class methodsFor: 'installing' stamp: 'sma 12/30/1999 15:01'!fontNamed: fontName fromLiteral: aString	"This method allows a font set to be captured as sourcecode in a subclass.	The string literals will presumably be created by printing, eg,		(FileStream readOnlyFileNamed: 'Palatino24.sf2') contentsOfEntireFile,		and then pasting into a browser after a heading like, eg,sizeNewYork10	^ self fontNamed: 'NewYork10' fromLiteral:	'--unreadable binary data--'	See the method installAsTextStyle to see how this can be used."	^ StrikeFont new 		name: fontName;		readFromStrike2Stream: (ReadStream on: aString asByteArray)! !!FontSet class methodsFor: 'installing' stamp: 'sma 12/30/1999 15:07'!installAsDefault  "FontSetNewYork installAsDefault"	(SelectionMenu confirm: 'Do you want to install''' , self fontName , ''' as default font?')		ifFalse: [^ self].	self installAsTextStyle.	"TextConstants at: #OldDefaultTextStyle put: TextStyle default."	TextConstants at: #DefaultTextStyle put: (TextStyle named: self fontName).	ListParagraph initialize.	PopUpMenu initialize.	StandardSystemView initialize.	"SelectionMenu notify: 'The old text style has been savedas ''OldDefaultTextStyle''.'"! !!FontSet class methodsFor: 'installing' stamp: 'sma 12/30/1999 15:05'!installAsTextStyle  "FontSetNewYork installAsTextStyle"	| selectors |	(TextConstants includesKey: self fontName) ifTrue:		[(self confirm: self fontName , ' is already defined in TextConstants.Do you want to replace that definition?')			ifFalse: [^ self]].	selectors _ (self class selectors select: [:s | s beginsWith: 'size']) asSortedCollection.	TextConstants		at: self fontName		put: (TextStyle fontArray: (selectors collect: [:each | self perform: each]))! !!FontSet class methodsFor: 'installing' stamp: 'sma 12/30/1999 14:58'!size: pointSize fromLiteral: aString	"This method allows a font set to be captured as sourcecode in a subclass.	The string literals will presumably be created by printing, eg,		(FileStream readOnlyFileNamed: 'Palatino24.sf2') contentsOfEntireFile,		and then pasting into a browser after a heading like, eg,size24	^ self size: 24 fromLiteral:	'--unreadable binary data--'	See the method installAsTextStyle to see how this can be used."	"This method is old and for backward compatibility only.	please use fontNamed:fromLiteral: instead."	^ StrikeFont new 		name: self fontName , (pointSize < 10			ifTrue: ['0' , pointSize printString]			ifFalse: [pointSize printString]);		readFromStrike2Stream: (ReadStream on: aString)! !!FontSet class methodsFor: 'compiling' stamp: 'sma 12/29/1999 11:48'!acceptsLoggingOfCompilation	"Dont log sources for my subclasses, so as not to waste time	and space storing printString versions of the string literals."	^ self == FontSet! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'sma 12/30/1999 15:29'!changeStyle	"Let user change styles for the current text pane  	 Moved from experimentalCommand to its own method  "	| aList reply style |	aList _ StrikeFont familyNames remove: 'DefaultTextStyle' ifAbsent: []; asOrderedCollection.	aList addFirst: 'DefaultTextStyle'.	reply _ (SelectionMenu labelList: aList lines: #(1) selections: aList) startUp.	reply ~~ nil ifTrue:		[(style _ TextStyle named: reply) ifNil: [self beep. ^ true].		paragraph textStyle: style copy.		paragraph composeAll.		self recomputeSelection.		self mvcRedisplay].	^ true! !!StrikeFont methodsFor: 'emphasis' stamp: 'sma 12/30/1999 15:02'!reset	"Reset the cache of derivative emphasized fonts"	| style font |	derivativeFonts _ Array new: 32.	#('B' 'I' 'BI') doWithIndex:		[:tag :index | 		(style _ TextStyle named: self familyName) ifNotNil:			[(font _ style fontArray				detect: [:each | each name = (self name , tag)]				ifNone: [nil]) ifNotNil: [derivativeFonts at: index put: font]]]! !!StrikeFont methodsFor: 'file in/out' stamp: 'sma 12/30/1999 14:20'!readFromStrike2: fileName  "StrikeFont new readFromStrike2: 'Palatino14.sf2'"	"Build an instance from the strike font stored in strike2 format.	fileName is of the form: <family name><pointSize>.sf2"	| file |	('*.sf2' match: fileName) ifFalse: [self halt.  "likely incompatible"].	name _ fileName copyUpTo: $. .  "Drop filename extension"	file _ FileStream readOnlyFileNamed: fileName.	file binary.	[self readFromStrike2Stream: file] ensure: [file close]! !!StrikeFont methodsFor: 'file in/out' stamp: 'sma 12/30/1999 14:20'!readFromStrike2Stream: file 	"Build an instance from the supplied binary stream on data in strike2 format"	type _ file nextInt32.  type = 2 ifFalse: [file close. self halt "not strike2 format"].	minAscii _ file nextInt32.	maxAscii _ file nextInt32.	maxWidth _ file nextInt32.	ascent _ file nextInt32.	descent _ file nextInt32.	pointSize _ file nextInt32.	superscript _ ascent - descent // 3.		subscript _ descent - ascent // 3.		emphasis _ file nextInt32.	xTable _ (Array new: maxAscii + 3) atAllPut: 0.	(minAscii + 1 to: maxAscii + 3) do:		[:index | xTable at: index put: file nextInt32].	glyphs _ Form new readFrom: file.	"Set up space character"	((xTable at: (Space asciiValue + 2))  = 0 or:			[(xTable at: (Space asciiValue + 2)) = (xTable at: (Space asciiValue + 1))])		ifTrue:	[(Space asciiValue + 2) to: xTable size do:					[:index | xTable at: index put: ((xTable at: index) + DefaultSpace)]].	self setStopConditions! !!StrikeFont methodsFor: 'file in/out' stamp: 'sma 12/30/1999 14:25'!writeAsStrike2named: fileName	"Write me onto a file in strike2 format.	fileName should be of the form: <family name><pointSize>.sf2"	| file |	file _ FileStream fileNamed: fileName.	file binary.	[file nextInt32Put: 2. "type"	file nextInt32Put: minAscii.	file nextInt32Put: maxAscii.	file nextInt32Put: maxWidth.	file nextInt32Put: ascent.	file nextInt32Put: descent.	file nextInt32Put: pointSize.	superscript _ ascent - descent // 3.		subscript _ descent - ascent // 3.		file nextInt32Put: emphasis.	(minAscii + 1 to: maxAscii + 3) do: [:index | file nextInt32Put: (xTable at: index)].	glyphs writeOn: file] ensure: [file close]! !!StrikeFont class methodsFor: 'accessing' stamp: 'sma 12/30/1999 13:53'!familyName: aName size: aSize	"Answer a font (or the default font if the name is unknown) in the specified size."	^ ((TextStyle named: aName asSymbol) ifNil: [TextStyle default]) fontOfSize: aSize! !!StrikeFont class methodsFor: 'accessing' stamp: 'sma 12/30/1999 13:48'!familyNames	^ (TextConstants select: [:each | each isKindOf: TextStyle]) keys asSortedCollection! !!TextStyle methodsFor: 'accessing' stamp: 'sma 12/30/1999 13:57'!printOn: aStream	super printOn: aStream.	aStream space; nextPutAll: self defaultFont name! !StrikeFont class removeSelector: #size:fromLiteral:!