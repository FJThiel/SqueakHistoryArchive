'From Squeak 2.0 BETA of May 8, 1998 on 10 May 1998 at 3:01:02 pm'!"Change Set:		BetaChanges1-diDate:			10 May 1998Author:			Dan IngallsNumerous fixes...Dirties FillInTheBlankMorph initial text so accept worksConversion of MVC menus now works with text in title	It used to only work with strings. But my fix ignores	any style as in bold var name from compiler corrector.Project creation fixed to make a new transcript (used to share).System window only tries to step model if it responds to step.ComponentLikeModel moved to Components category.New features...World open... menu now offers to open transcriptWorld changeBackgroundColor now does continuous updatingTranscript now works, albeit slowly, in morphic.Numerous changes to PluggableTextMorph to support Transcript.TextPanes now try to keep selection in view in many cases."!MorphicModel subclass: #ComponentLikeModel	instanceVariableNames: 'pinSpecs '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Components'!!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'di 5/9/1998 12:00'!setQuery: queryString initialAnswer: initialAnswer answerHeight: answerHeight	response _ initialAnswer.	done _ false.	self removeAllMorphs.	self extent: 200@70.	self addQuery: queryString.	self width: (self width max: self firstSubmorph width + (2 * borderWidth)).	self addLine.	textPane _ PluggableTextMorph on: self		text: #response		accept: #response:		readSelection: nil		menu: #codePaneMenu:shifted:.	textPane hasUnacceptedEdits: true.	textPane retractableOrNot.	textPane extent: self innerBounds width@answerHeight.	textPane position: self innerBounds left@self lastSubmorph bottom.	self addMorphBack: textPane.	self addLine.	self addButtonRow.	self height: (self height max: (self lastSubmorph bottom - self top) + borderWidth).! !!HandMorph methodsFor: 'meta menu' stamp: 'di 5/9/1998 12:06'!changeBackgroundColor	| colorPicker |	colorPicker _ self changeColorTarget: self world selector: #color:.	colorPicker updateContinuously: true.! !!HandMorph methodsFor: 'meta menu' stamp: 'di 5/8/1998 21:03'!openTranscript	Transcript open! !!ParagraphEditor methodsFor: 'new selection' stamp: 'di 5/9/1998 21:05'!selectInvisiblyAt: characterIndex	"Select an insertion point before characterIndex.  Make no visual changes."	^ self selectInvisiblyFrom: characterIndex to: characterIndex-1! !!ParagraphEditor methodsFor: 'new selection' stamp: 'di 5/9/1998 20:59'!selectInvisiblyFrom: start to: stop	"Select the designated characters, inclusive.  Make no visual changes."	^ self computeIntervalFrom: start to: stop! !!PluggableTextController methodsFor: 'transcript' stamp: 'di 5/9/1998 21:21'!appendEntry	"Append the text in the model's writeStream to the editable text. "	view topView isCollapsed ifTrue:		[^ paragraph text replaceFrom: 1 to: paragraph text size				with: model contents asText].	self deselect.	paragraph text size > model characterLimit		ifTrue: ["Knock off last half of text"				self selectInvisiblyFrom: paragraph text size - (model characterLimit//2)							to: paragraph text size]		ifFalse: ["...or just add entry at end"				self selectInvisiblyAt: paragraph text size + 1].	self replaceSelectionWith: model contents asText.	self selectInvisiblyAt: paragraph text size + 1! !!PluggableTextController methodsFor: 'transcript' stamp: 'di 5/9/1998 21:06'!changeText: aText	"The paragraph to be edited is changed to aText."	paragraph text: aText.	self resetState.	self selectInvisiblyAt: paragraph text size + 1.	self selectAndScroll.	self deselect! !!Project methodsFor: 'initialization' stamp: 'di 5/8/1998 20:52'!initFromParent:  aProject	"Written so that Morphic can still be removed."	world _ (Smalltalk at: #WorldMorph ifAbsent: [^ nil]) new.	changeSet _ ChangeSet new initialize.	transcript _ TranscriptStream new.	displayDepth _ Display depth.	parentProject _ aProject! !!ScrollPane methodsFor: 'geometry' stamp: 'di 5/10/1998 14:02'!scrollBy: delta	"Move the contents in the direction delta."	"For now, delta is assumed to have a zero x-component"	scroller offset: scroller offset x @ (scroller offset y - delta y max: 0)! !!PluggableTextMorph methodsFor: 'editor access' stamp: 'di 5/10/1998 14:13'!handleEdit: editBlock	textMorph handleEdit: editBlock.   "Update selection after edit"	self scrollSelectionIntoView! !!PluggableTextMorph methodsFor: 'editor access' stamp: 'di 5/10/1998 14:44'!scrollSelectionIntoView	| selRects delta selRect |	selRects _ textMorph paragraph selectionRects.	selRects isEmpty ifTrue: [^ self].	selRect _  (scroller transformFrom: self) invertRect: (selRects first merge: selRects last).	(delta _ selRect amountToTranslateWithin: self bounds) y ~= 0 ifTrue:		["Scroll end of selection into view if necessary"		self scrollBy: 0@delta y]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:41'!again	self handleEdit: [textMorph editor again]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:43'!browseIt	textMorph editor browseIt! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:41'!changeStyle	self handleEdit: [textMorph editor changeStyle]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:41'!cut	self handleEdit: [textMorph editor cut]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:41'!explain	self handleEdit: [textMorph editor explain]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:43'!fileItIn	textMorph editor fileItIn! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:42'!find	self handleEdit: [textMorph editor find]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:42'!findAgain	self handleEdit: [textMorph editor findAgain]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:42'!format	self handleEdit: [textMorph editor format]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:42'!implementorsOfIt	textMorph editor implementorsOfIt! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:43'!methodNamesContainingIt	textMorph editor methodNamesContainingIt! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:43'!methodSourceContainingIt	textMorph editor methodSourceContainingIt! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:44'!methodStringsContainingit	textMorph editor methodStringsContainingit! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:44'!offerFontMenu	self handleEdit: [textMorph editor offerFontMenu]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:44'!paste	self handleEdit: [textMorph editor paste]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:44'!presentSpecialMenu	self handleEdit: [textMorph editor presentSpecialMenu]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:44'!printIt	self handleEdit: [textMorph editor printIt]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:45'!recognizeCharacters	self handleEdit: [textMorph editor recognizeCharacters]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:45'!referencesToIt	textMorph editor referencesToIt! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:45'!sendersOfIt	textMorph editor sendersOfIt! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:45'!spawn	textMorph editor spawn! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 12:45'!undo	textMorph editor undo! !!PluggableTextMorph methodsFor: 'updating' stamp: 'di 5/10/1998 13:40'!update: aSymbol	aSymbol == #flash ifTrue: [^ self flash].	aSymbol == getTextSelector ifTrue: [^ self setText: self getText].	aSymbol == getSelectionSelector ifTrue: [^ self setSelection: self getSelection].	aSymbol == #autoSelect ifTrue:			["self setSearch: model autoSelectString; againOrSame: true."			"Dan, I did not know what to do here...."			^ self].	aSymbol == #clearUserEdits ifTrue: [^ self hasUnacceptedEdits: false].	aSymbol == #wantToChange ifTrue:			[self canDiscardEdits ifFalse: [^ self promptForCancel].			^ self].	aSymbol == #appendEntry ifTrue:			[self handleEdit: [self appendEntry].			"self invalidRect: self bounds."			^ self world displayWorld].	aSymbol == #clearText ifTrue:			[self handleEdit: [self changeText: Text new].			"self invalidRect: self bounds."			^ self world displayWorld].! !!PluggableTextMorph methodsFor: 'transcript' stamp: 'di 5/10/1998 10:37'!appendEntry	"Append the text in the model's writeStream to the editable text. "	| end |	end _ textMorph asText size.	end > model characterLimit		ifTrue: ["Knock off last half of text"				self selectInvisiblyFrom: end - (model characterLimit//2) to: end]		ifFalse: ["...or just add entry at end"				self selectInvisiblyFrom: end + 1 to: end].	self replaceSelectionWith: model contents asText.	self selectInvisiblyFrom: textMorph asText size + 1 to: textMorph asText size! !!PluggableTextMorph methodsFor: 'transcript' stamp: 'di 5/8/1998 21:22'!changeText: aText	"The paragraph to be edited is changed to aText."	self setText: aText! !!PluggableTextMorph methodsFor: 'transcript' stamp: 'di 5/9/1998 21:40'!replaceSelectionWith: aText	^ textMorph editor replaceSelectionWith: aText! !!SystemWindow methodsFor: 'initialization' stamp: 'di 5/8/1998 21:00'!step	model step! !!SystemWindow methodsFor: 'initialization' stamp: 'di 5/8/1998 20:59'!wantsSteps	"Return true if the model responds to step (except if it is a debugger)."	| c |	c _ model class.	[c == nil] whileFalse:		[(c includesSelector: #step) ifTrue: [^ c ~= Debugger].		c _ c superclass].	^ false! !!TextMorphForEditView methodsFor: 'all' stamp: 'di 5/10/1998 14:14'!keyStroke: evt	super keyStroke: evt.	editView scrollSelectionIntoView! !!TextMorphForEditView methodsFor: 'all' stamp: 'di 5/10/1998 14:14'!mouseUp: evt	super mouseUp: evt.	editView scrollSelectionIntoView! !!TranscriptStream methodsFor: 'all' stamp: 'di 5/9/1998 21:20'!characterLimit	"Tell the views how much to retain on screen"	^ 1000! !!TranscriptStream methodsFor: 'all' stamp: 'di 5/8/1998 20:16'!openAsMorphLabel: labelString 	"Build a morph viewing this transcriptStream"	| window |	window _ (SystemWindow labelled: labelString) model: self.	window addMorph: (PluggableTextMorph on: self text: nil accept: nil			readSelection: nil menu: nil)		frame: (0@0 corner: 1@1).	^ window! !!TranscriptStream methodsFor: 'all' stamp: 'di 5/8/1998 20:10'!openLabel: aString 	"Open a window on this transcriptStream"	| topView codeView |	World ifNotNil: [^ (self openAsMorphLabel: aString) openInWorld].	Sensor leftShiftDown ifTrue: [^ (self openAsMorphLabel: aString) openInMVC].	 "testing"	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.	topView label: aString.	topView minimumSize: 100 @ 50.	codeView _ PluggableTextView on: self text: nil accept: nil					readSelection: nil menu: nil.	codeView window: (0@0 extent: 200@200).	topView addSubView: codeView.	topView controller open! !PluggableTextController removeSelector: #clearText!PluggableTextController removeSelector: #selectWithoutComp:!