'From Squeak 2.3 of January 14, 1999 on 8 April 1999 at 4:29:22 pm'!"Change Set:		wnld-names-jspDate:			8 April 1999Author:			Jeff PierceChanges to the Wonderland namespace model: part names now move after reparenting.ex. bunny head becomeChildOf: ground- bunny head is no longer valid- ground head now accesses that objectThese changes also prevent namespace clashes by renaming actors at need"!!Wonderland methodsFor: 'accessing' stamp: 'jsp 4/8/1999 15:58'!getActorClassList	"Return the list of actor classes"	^ actorClassList.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/8/1999 12:25'!makeActor	"Creates a new actor without any geometry"	| newClass newActor name |	newClass _ WonderlandActor newUniqueClassInstVars: '' classInstVars: ''.	newActor _ (newClass createFor: self).	actorClassList addLast: newClass.	scriptEditor ifNotNil: [ 				name _ self uniqueNameFrom: 'unnamed'.				newActor setName: name.				myNamespace at: name put: newActor.				scriptEditor updateActorBrowser.						].	"Add an undo item to undo the creation of this object"	myUndoStack push: (UndoAction new: [ newActor removeFromScene.											myNamespace removeKey: name ifAbsent: [].						 					scriptEditor updateActorBrowser. ]).	^ newActor.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/8/1999 16:09'!makeActorFrom: filename	"Creates a new actor using the specification from the given file"	| aFile words line startSubstr index parent name texture meshFile matrix baseActor newActor protoClass actorClass |	myUndoStack closeStack.	words _ (filename findTokens: #.).	((words last) = 'mdl') ifTrue: [			aFile _ (CrLfFileStream readOnlyFileNamed: filename) ascii.			"First see if we need to create a prototype class for this model"			(ActorPrototypeClasses includesKey: (aFile localName))					ifTrue: [ protoClass _ ActorPrototypeClasses at: (aFile localName) ]					ifFalse: [							"Make a new prototype class for this model"							protoClass _ (WonderlandActor newUniqueClassInstVars: ''															classInstVars: '').							ActorPrototypeClasses at: (aFile localName) put: protoClass.							].			newActor _ OrderedCollection new.			[(aFile upTo: $() = ''] whileFalse: [					line _ aFile upTo: (Character cr).					"See if we're creating a new object"					(line beginsWith: 'MakeObject') ifTrue: [						words _ line findTokens: #,.						parent _ (words at: 2) withBlanksTrimmed.						name _ (((words at: 3) withBlanksTrimmed) findBetweenSubStrs: '"') at: 1.						"Now pull in the texture to use"						startSubstr _ name , '.SetTexture'.						[(line _ aFile upTo: (Character cr)) beginsWith: startSubstr] whileFalse: [].						texture _ (line findBetweenSubStrs: '"') at: 2.						texture _ (aFile directory pathName), '\', texture.						"Read the composite matrix to use"						startSubstr _ name , '._SetLocalTransformation'.						[(line _ aFile upTo: (Character cr)) beginsWith: startSubstr] whileFalse: [].						matrix _ B3DMatrix4x4 new.						words _ line findBetweenSubStrs: ',()'.						words removeAllSuchThat: [:str | str = ' '].						index _ words size.						4 to: 1 by: -1 do: [:i | 							4 to: 1 by: -1 do: [:j | matrix at: i at: j put: 										((words at: index) withBlanksTrimmed) asNumber.										   		index _ index - 1. ]. ].						1 to: 4 do: [:i | index _ matrix at: i at: 4.									   matrix at: i at: 4 put: (matrix at: 4 at: i).									   matrix at: 4 at: i put: index. ].						matrix a14: (matrix a14 negated).						"Read the mesh file to use"						startSubstr _ 'LoadGeometry'.						[(line _ aFile upTo: (Character cr)) beginsWith: startSubstr] whileFalse: [].						meshFile _ (line findBetweenSubStrs: '"') at: 2.						meshFile _ (aFile directory pathName), '\', meshFile.						"Now build the actor name"						words _ name findTokens: '.'.						name _ words last.						name at: 1 put: ((name at: 1) asLowercase).						"Now build the parent name"						parent _ parent copyReplaceAll: '.' with: ' '.						"Now create the object"						(parent = 'None') ifTrue: [								actorClass _ protoClass newUniqueClassInstVars: '' classInstVars: ''.								baseActor _ actorClass createFor: self.								actorClassList addLast: actorClass.								baseActor setName: name.								baseActor setTexture: texture.								baseActor loadMeshFromFile: meshFile.								baseActor setComposite: matrix.												]  "end base actor creation"										ifFalse: [								actorClass _ WonderlandActor newUniqueClassInstVars: ''																classInstVars: ''.								newActor _ actorClass createFor: self.								actorClassList addLast: actorClass.								newActor setName: name.								parent _ (baseActor getChildNamed: parent).								newActor reparentTo: parent.								newActor becomePart.								newActor setTexture: texture.								newActor loadMeshFromFile: meshFile.								newActor setComposite: matrix.												]. "end new actor with parent"															]. "end MakeObject parsing"											]. "end file parsing"			aFile close.			myUndoStack openStack.			"Ensure that the new actor's name is unique"			name _ self uniqueNameFrom: (baseActor getName).			baseActor setName: name.			myNamespace at: name put: baseActor.			scriptEditor updateActorBrowser.			"Add an undo item to undo the creation of this object"			myUndoStack push: (UndoAction new: [ baseActor removeFromScene.													myNamespace removeKey: name ifAbsent: [].													scriptEditor updateActorBrowser.  ] ).			^ baseActor.								]. " end mdl file parsing"! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/8/1999 13:54'!makeCamera	"Add a new camera to the Wonderland"	| newCamera name |	newCamera _ WonderlandCamera createFor: self.	name _ self uniqueNameFrom: 'camera'.	newCamera setName: name.	myNamespace at: name put: newCamera.	cameraList addLast: newCamera.	scriptEditor updateActorBrowser.	"Add an undo action to remove this camera"	myUndoStack push: (UndoAction new: [  cameraList remove: newCamera.											newCamera removeFromScene.											myNamespace removeKey: name ifAbsent: [].											newCamera release.											scriptEditor updateActorBrowser ]).	^ newCamera.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/8/1999 11:41'!uniqueNameFrom: aName	"If aName is unique to this wonderland's namespace, returns that name. Otherwise creates a unique variant and returns that."	| index |	(myNamespace includesKey: aName)			ifFalse: [ ^ aName ]			ifTrue: [						index _ 2.						[ myNamespace includesKey: (aName , (index asString)) ]							whileTrue: [ index _ index + 1 ].						^ aName , (index asString).					].! !!WonderlandActor methodsFor: 'private' stamp: 'jsp 4/8/1999 14:46'!getChildNamed: childName	"Returns the child with the specified name if it is a child of this object"	| theChild nameParts |	childName at: 1 put: ((childName at: 1) asLowercase).	"First see if they're looking for me"	(myName = childName) ifTrue: [ ^ self ].	nameParts _ childName findTokens: ' '.	nameParts do: [:name | name at: 1 put: ((name at: 1) asLowercase) ].	((nameParts first) = myName) ifTrue: [ nameParts removeFirst ].	theChild _ self.	nameParts do: [:aName | theChild _ theChild perform: (aName asSymbol) ].	^ theChild.! !!WonderlandActor methodsFor: 'private' stamp: 'jsp 4/8/1999 16:23'!reparentTo: anObject	"Make this actor a child of the specified object."	| newComposite classList parentClass |	classList _ myWonderland getActorClassList.	"First break ties with the current parent"	myParent removeChild: self.	parentClass _ myParent class.	(parentClass == WonderlandScene)		ifFalse: [				classList remove: parentClass.				parentClass removeSelector: (myName asSymbol).				parentClass removeInstVarName: myName.				classList addLast: (myParent class).				].	"Figure out the new composite transformation matrix"	newComposite _ anObject getMatrixToRoot.	newComposite _ newComposite composeWith: (self getMatrixFromRoot).		"Now build ties with the new parent"	anObject addChild: self.	myParent _ anObject.	parentClass _ myParent class.	(parentClass == WonderlandScene)		ifFalse: [				myName _ parentClass uniqueNameFrom: myName.						classList remove: parentClass.				myParent addInstanceVarNamed: myName withValue: self.				(myParent class) compile: (myName , '											^ ' , myName, '.').				classList addLast: (myParent class).				].	composite _ newComposite.	"Now update the actor browser"	myWonderland getEditor updateActorBrowser.! !!WonderlandActor class methodsFor: 'unique name creation' stamp: 'jsp 4/8/1999 16:20'!uniqueNameFrom: aName	"If aName is not an instance variable of this class, returns aName.  Otherwise it returns a unique name based on aName that is not an instance var."	| index |	(self instVarNames includes: aName) ifFalse: [ ^ aName ].	index _ 2.	[ self instVarNames includes: (aName , (index asString)) ]		whileTrue: [ index _ index + 1 ].	^ aName , (index asString).	! !