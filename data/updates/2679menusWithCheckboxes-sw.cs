'From Squeak2.9alpha of 5 August 2000 [latest update: #2676] on 21 September 2000 at 10:55:22 pm'!"Change Set:		menusWithCheckboxes-swDate:			20 September 2000Author:			Scott WallaceConverts numerous menu items over to using the new kind that has checkboxes for boolean items.  Affected are the Playfield Options menu, the World menu, the morph red-halo menu, and the flap-tab menu"!!Morph methodsFor: 'menus' stamp: 'sw 9/21/2000 22:47'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	self maybeAddCollapseItemTo: aMenu.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	aMenu addLine.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	self player ifNotNil:		[aMenu addLine.		aMenu add: 'make a sibling instance' action: #makeNewPlayerInstance.		aMenu balloonTextForLastItem: 'Makes another morph whose player is of the same class as this one.  Both siblings will share the same scripts'].	aMenu addLine.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	aMenu addUpdating: #lockedString target: self action: #lockUnlockMorph.	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu		defaultTarget: self;		add: 'add mouse up action' action: #addMouseUpAction;		add: 'remove mouse up action' action: #removeMouseUpAction.	aMenu addLine.	aMenu defaultTarget: self topRendererOrSelf.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	(owner == nil) ifFalse:		[aMenu add: 'send to back' action: #goBehind.		aMenu add: 'bring to front' action: #comeToFront].	aMenu defaultTarget: aHandMorph.! !!Morph methodsFor: 'menus' stamp: 'sw 9/21/2000 22:50'!lockUnlockMorph	"If the receiver is locked, unlock it; if unlocked, lock it"	self isLocked ifTrue: [self unlock] ifFalse: [self lock]! !!Morph methodsFor: 'menus' stamp: 'sw 9/21/2000 22:50'!lockedString	"Answer the string to be shown in a menu to represent the 'locked' status"	^ self isLocked		ifTrue:			['<on>locked']		ifFalse:			['<off>locked']! !!Morph methodsFor: 'menus' stamp: 'sw 9/21/2000 22:50'!stickinessString	"Answer the string to be shown in a menu to represent the stickiness status"	^ self isSticky		ifTrue: ['<yes>sticky']		ifFalse: ['<no>sticky']! !!FlapTab methodsFor: 'parts bin' stamp: 'sw 9/21/2000 22:49'!partsBinString	"Answer the string to be shown in a menu to represent the parts-bin status"	^ referent isPartsBin		ifTrue:	['<yes>parts-bin']		ifFalse:	['<no>parts-bin']! !!FlapTab methodsFor: 'menu' stamp: 'sw 9/21/2000 22:49'!addCustomMenuItems: aMenu hand: aHandMorph	"Add further items to the menu as appropriate"	aMenu addUpdating: #edgeString action: #setEdgeToAdhereTo.	aMenu addLine.	aMenu addUpdating: #textualTabString action: #textualTab.	aMenu addUpdating: #graphicalTabString action: #graphicalTab.	aMenu addUpdating: #solidTabString enablement: #notSolid action: #solidTab.	aMenu addLine.	(referent isKindOf: PasteUpMorph) ifTrue: 		[aMenu addUpdating: #partsBinString action: #togglePartsBinMode].	aMenu addUpdating: #dragoverString action: #toggleDragOverBehavior.	aMenu addUpdating: #mouseoverString action: #toggleMouseOverBehavior.	"aMenu addUpdating: #slideString action: #toggleSlideBehavior.	aMenu addUpdating: #inboardString action: #toggleInboardness."	"aMenu addUpdating: #thicknessString ('thickness... (current: ', self thickness printString, ')') action: #setThickness."	aMenu addLine.	aMenu add: 'destroy this flap' action: #destroyFlap.! !!FlapTab methodsFor: 'mouseover & dragover' stamp: 'sw 9/21/2000 22:49'!dragoverString	"Answer the string to be shown in a menu to represent the dragover status"	^ popOutOnDragOver		ifTrue:			['<yes>pop out on dragover']		ifFalse:			['<no>pop out on dragover']! !!FlapTab methodsFor: 'mouseover & dragover' stamp: 'sw 9/21/2000 22:49'!mouseoverString	"Answer the string to be shown in a menu to represent the mouseover status"	^ popOutOnMouseOver		ifTrue:			['<yes>pop out on mouseover']		ifFalse:			['<no>pop out on mouseover']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:50'!autoExpansionString	"Answer the string to be shown in a menu to represent the auto-phrase-expansion status"	^ (self hasProperty: #automaticPhraseExpansion)		ifTrue:			['<on>auto-phrase-expansion']		ifFalse:			['<off>auto-phrase-expansion']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:50'!autoLineLayoutString	"Answer the string to be shown in a menu to represent the auto-line-layout status"	^ self autoLineLayout		ifTrue:			['<on>auto-line-layout']		ifFalse:			['<off>auto-line-layout']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:51'!autoViewingString	"Answer the string to be shown in a menu to represent the automatic-viewing status"	^ self automaticViewing		ifTrue:			['<on>automatic viewing']		ifFalse:			['<off>automatic viewing']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:51'!indicateCursorString	"Answer the string to be shown in a menu to represent the whether-to-indicate-cursor status"	^ self indicateCursor		ifTrue:			['<on>indicate cursor']		ifFalse:			['<off>indicate cursor']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:51'!isOpenForDragNDropString	"Answer the string to be shown in a menu to represent the open-to-drag-n-drop status"	^ self dragNDropEnabled		ifTrue:			['<on>open to drag & drop']		ifFalse:			['<off>open to drag & drop']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:51'!isPartsBinString	"Answer the string to be shown in a menu to represent the parts-bin status"	^ self isPartsBin		ifTrue:			['<on>parts bin']		ifFalse:			['<off>parts bin']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:54'!mouseOverHalosString	"Answer the string to be shown in a menu to represent the mouse-over-halos status"	^ self wantsMouseOverHalos		ifTrue:			['<on>mouse-over halos']		ifFalse:			['<off>mouse-over halos']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:54'!originAtCenterString	"Answer the string to be shown in a menu to represent the origin-at-center status"	^ (self hasProperty: #originAtCenter)		ifTrue:			['<on>origin-at-center']		ifFalse:			['<off>origin-at-center']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/19/2000 17:00'!playfieldOptionsMenu	"Answer an auxiliary menu with options specific to playfields -- too many to be housed in the main menu"	| aMenu isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'save on file...' action: #saveOnFile.	aMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	aMenu add: 'update all from resources' action: #updateAllFromResources.	(self valueOfProperty: #classAndMethod) ifNotNil:		[aMenu add: 'broadcast as documentation' action: #saveDocPane].	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu addLine.	aMenu add: 'shuffle contents' action: #shuffleSubmorphs.	aMenu balloonTextForLastItem: 'Rearranges my contents in random order'.	self griddingOn		ifTrue: [aMenu add: 'turn gridding off' action: #griddingOnOff.				aMenu add: (self gridVisible ifTrue: ['hide'] ifFalse: ['show']) , ' grid'						action: #gridVisibleOnOff.				aMenu add: 'set grid spacing...' action: #setGridSpec]		ifFalse: [aMenu add: 'turn gridding on' action: #griddingOnOff].	aMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(isOpenForDragNDropString	toggleDragNDrop			'whether objects can be dropped into and dragged out of me')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(originAtCenterString	toggleOriginAtCenter			'whether the cartesian origin of the playfield should be at its lower-left corner or at the center of the playfield')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	aMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing.	aMenu balloonTextForLastItem:  'governs whether, when an object is touched inside me, a viewer should automatically be launched for it.'.	((isWorld not or: [self backgroundSketch notNil]) or: [presenter isNil])		ifTrue:			[aMenu addLine].	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'.		aMenu add: 'behave like a Holder' action: #becomeLikeAHolder.		aMenu balloonTextForLastItem: 'Set properties to make this object nicely set up to hold frames of a scripted animation.'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	presenter ifNil:		[aMenu add: 'make detachable' action: #makeDetachable.		aMenu balloonTextForLastItem: 'Allow this area to be separately governed by its own controls.'].	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'playfield options...'.	^ aMenu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 9/21/2000 22:53'!showThumbnailString	"Answer the string to be shown in a menu to represent the show-thumbnails status"	^( self hasProperty: #alwaysShowThumbnail)		ifTrue:			['<on>show thumbnails']		ifFalse:			['<off>show thumbnails']! !!Preferences class methodsFor: 'misc' stamp: 'sw 9/21/2000 22:53'!staggerPolicyString	"Answer the string to be shown in a menu to represent the stagger-policy status"	^ (self valueOfFlag: #reverseWindowStagger)		ifTrue: ['<yes>stagger windows']		ifFalse: ['<no>stagger windows']! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 9/21/2000 22:53'!windowsMenu        "Build the windows menu for the world."        ^ self fillIn: (self menu: 'windows & flaps...') from: {                  { 'find window' . { #myHand . #findWindow }. 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'}.                { 'find changed browsers...' . { #myHand . #findDirtyBrowsers }. 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.                { 'find changed windows...' . { #myHand . #findDirtyWindows }. 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.			 nil.                { #staggerPolicyString . { self . #toggleWindowPolicy }. 'stagger: new windows positioned so you can see a portion of each one.                tile: new windows positioned so that they do not overlap others, if possible.'}.                nil.                { 'collapse all windows' . { #myHand . #collapseAll }. 'Reduce all open windows to collapsed forms that only show titles.'}.                { 'expand all windows' . { #myHand . #expandAll }. 'Expand all collapsed windows back to their expanded forms.'}.                nil.                { 'delete unchanged windows' . { #myHand . #closeUnchangedWindows }. 'Deletes all windows that do not have unsaved text edits.'}.                { 'delete non-windows' . { #myHand . #deleteNonWindows }. 'Deletes all non-window morphs lying on the world.'}.                { 'delete both of the above' . { self .#cleanUpWorld }. 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'}.                nil.                { #suppressFlapsString . { self . #toggleFlapSuppressionInProject }. 'Governs whether flaps should be shown in this project'}.                { #useGlobalFlapsString . { self. #toggleWhetherToUseGlobalFlaps }. 'Governs whether a universal set of "global" flaps should be used in all morphic projects that currently are showing flaps.'}.                nil.                { 'new global flap...'  . { Utilities . #addGlobalFlap }. 'Create a new flap that will be shared by all morphic projects'}.                { 'new project flap...'  . { Utilities . #addLocalFlap }. 'Create a new flap to be used only in this project.'}.                { 'about flaps...' . { Utilities . #explainFlaps }. 'Gives a window full of details about how to use flaps.'}.        }! !!Utilities class methodsFor: 'flaps' stamp: 'sw 9/21/2000 22:52'!suppressFlapsString	"Answer the string to be shown in a menu to represent the suppress-flaps-in-this-project status"	^ (CurrentProjectRefactoring currentFlapsSuppressed)		ifFalse: ['<yes>show flaps']		ifTrue: ['<no>show flaps']! !!Utilities class methodsFor: 'flaps' stamp: 'sw 9/21/2000 22:52'!useGlobalFlapsString	"Answer the string to be shown in a menu to represent the use-global-flaps status"	^ (Preferences valueOfFlag: #useGlobalFlaps)			ifTrue: ['<yes>use global flaps']			ifFalse: ['<no>use global flaps']! !