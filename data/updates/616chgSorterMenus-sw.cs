'From Squeak 2.3 of January 14, 1999 on 28 January 1999 at 11:18:02 pm'!"Change Set:		chgSorterMenus-swDate:			28 January 1999Author:			Scott WallaceSome adjustments to the change-set-list menu in the change sorter:*  Split the menu, now quite large, into a 'main' branch and a 'shifted' branch, in the same manner as numerous other menus are now split, with the two branches linked by 'more...' items.  Tries to put the more frequently needed commands in the primary menu, the less frequently needed ones on the shifted side.  The one judgment call on which I hesitated was where to put the rename-changeset command; it ended up on the shifted side -- hopefully not making *too* many people unhappy.*  Add two new commands, placing both on the 'shifted' side:'inspect change set' opens up a traditional Inspector on the currently-selected change set.  This can be useful because there are things in a change set that do not show up in the change sorter, such as class reorganizations.'go to change set's project transports you immediately to the project that contains the selected change set as its current change set (if any).*  Minor adjustments to wording and order of the menu items.*  Removes a host of obsolete methods."!!ChangeSet methodsFor: 'testing' stamp: 'sw 1/22/1999 14:10'!correspondingProject	"If the receiver is the current change set for any project, answer it, else answer nil"	Project allInstancesDo: [:proj |		proj projectChangeSet == self ifTrue: [^ proj]].	^ nil! !!ChangeSorter methodsFor: 'creation' stamp: 'sw 1/26/1999 09:15'!openAsMorphIn: window rect: rect	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| chgSetList aListMorph |	contents _ ''.	self addDependent: window.		"so it will get changed: #relabel"	window addMorph: (chgSetList _ PluggableListMorphByItem on: self			list: #changeSetList			selected: #currentCngSet			changeSelected: #showChangeSetNamed:			menu: #changeSetMenu:shifted:)		frame: (((0@0 extent: 0.5@0.25) scaleBy: rect extent) translateBy: rect origin).	chgSetList autoDeselect: false.	window addMorph: (PluggableListMorphByItem on: self			list: #classList			selected: #currentClassName			changeSelected: #currentClassName:			menu: #classMenu:			keystroke: #classListKey:from:)		frame: (((0.5@0 extent: 0.5@0.25) scaleBy: rect extent) translateBy: rect origin).	aListMorph _ PluggableListMorphByItem on: self			list: #messageList			selected: #currentSelector			changeSelected: #currentSelector:			menu: #messageMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph  menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph		frame: (((0@0.25 extent: 1@0.25) scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableTextMorph on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (((0@0.5 corner: 1@1) scaleBy: rect extent) translateBy: rect origin).! !!ChangeSorter methodsFor: 'creation' stamp: 'sw 1/26/1999 09:15'!openView: topView offsetBy: offset	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 360@0."	| classView messageView codeView cngSetListView |	contents _ ''.	self addDependent: topView.		"so it will get changed: #relabel"	cngSetListView _ PluggableListViewByItem on: self		list: #changeSetList		selected: #currentCngSet		changeSelected: #showChangeSetNamed:		menu: #changeSetMenu:shifted:.	cngSetListView window: ((0 @ 0 extent: 180 @ 100) translateBy: offset).	topView addSubView: cngSetListView.	classView _ PluggableListViewByItem on: self		list: #classList		selected: #currentClassName		changeSelected: #currentClassName:		menu: #classMenu:		keystroke: #classListKey:from:.	classView window: (180 @ 0 extent: 180 @ 100).	topView addSubView: classView toRightOf: cngSetListView.	messageView _ PluggableListViewByItem on: self		list: #messageList		selected: #currentSelector		changeSelected: #currentSelector:		menu: #messageMenu:shifted:		keystroke: #messageListKey:from:.	messageView menuTitleSelector: #messageListSelectorTitle.	messageView window: (0 @ 100 extent: 360 @ 100).	topView addSubView: messageView below: cngSetListView.	codeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	codeView window: (0 @ 0 extent: 360 @ 180).	topView addSubView: codeView below: messageView.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 1/28/1999 23:15'!changeSetMenu: aMenu shifted: aBoolean	"Could be for a single or double changeSorter"	aBoolean ifTrue:		[^ self shiftedChangeSetMenu: aMenu].	parent ifNotNil:	[^ aMenu labels: 'make changes go to menew change set...find...show...file outbrowse methodscopy all to other sidesubmerge into other sidesubtract other sideedit preamble...edit postscript...destroy change setmore...'		lines: #(1 4 6 9 12)		selections: #(newCurrent newSet  findCngSet chooseCngSet  fileOut browseChangeSet  copyAllToOther submergeIntoOtherSide subtractOtherSide editPreamble editPostscript  remove shiftedYellowButtonActivity)]	ifNil: ["Single ChangeSorter"	^ aMenu labels: 'make changes go to menew change set...find...show...file outbrowse methodsedit preamble...edit postscript...destroy change setmore...'		lines: #(1 4 6  9)		selections: #(newCurrent newSet  findCngSet chooseCngSet fileOut browseChangeSet   editPreamble editPostscript  remove shiftedYellowButtonActivity)]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 1/22/1999 14:13'!goToChangeSetsProject	"Transport the user to a project which bears the selected changeSet as its current changeSet"	| aProject |	(aProject _ myChangeSet correspondingProject) 		ifNotNil:			[aProject enter: false]		ifNil:			[self inform: 'Has no project']! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 1/25/1999 13:36'!shiftedChangeSetMenu: aMenu	^ aMenu labels: 'file into new...updateinspect change setrename change setgo to change set''s projectclearmore...'		lines: #(6)		selections: #( fileIntoNewChangeSet update  inspectChangeSet rename goToChangeSetsProject clearChangeSet unshiftedYellowButtonActivity)! !!ChangeSorter methodsFor: 'class list' stamp: 'sw 1/26/1999 08:59'!classMenu: aMenu	"Could be for a single or double changeSorter"	^ parent ifNotNil:		[aMenu labels: 'copy class chgs to other sidemove class chgs to other sidedelete class chgs from this change setbrowse full (b)inst var refs...inst var defs...class var refs...class variablesclass refs (N)'		lines: #(3 4 )		selections: #(copyClassToOther moveClassToOther forgetClass browseMethodFull browseInstVarRefs browseInstVarDefs browseClassVarRefs browseClassVariables browseClassRefs)]	ifNil:		[ aMenu labels: 'delete class chgs from this change setbrowse full (b)inst var refs...inst var defs...class var refs...class variablesclass refs (N)'		lines: #(1 2 )		selections: #(forgetClass browseMethodFull browseInstVarRefs browseInstVarDefs browseClassVarRefs browseClassVariables browseClassRefs)]! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 1/26/1999 08:26'!messageMenu: aMenu shifted: shifted	"Could be for a single or double changeSorter"	shifted ifTrue: [^ self shiftedMessageMenu: aMenu].	parent ifNotNil:		[^ aMenu labels: 'copy method to other sidemove method to other sidedelete method from change setremove method from systembrowse full (b)fileOutprintOutsenders of... (n)implementors of... (m)method inheritanceversions (v)more...'		lines: #(2 4 7 11)		selections: #(copyMethodToOther moveMethodToOtherforget removeMessagebrowseMethodFull fileOutMessage printOutMessagebrowseSendersOfMessages browseMessages methodHierarchy browseVersions shiftedYellowButtonActivity )]	ifNil: [^ aMenu labels: 'delete method from change setremove method from systembrowse full (b)fileOutprintOutsenders of... (n)implementors of... (n)method inheritanceversions (v)more...'		lines: #(2 5 9 )		selections: #( forget removeMessagebrowseMethodFull fileOutMessage printOutMessagebrowseSendersOfMessages browseMessages methodHierarchy browseVersions shiftedYellowButtonActivity )]! !!ChangeSorter methodsFor: 'code pane' stamp: 'sw 1/25/1999 14:10'!setContents	"return the source code that shows in the bottom pane"	| sel class strm changeType |	self clearUserEditFlag.	currentClassName ifNil: [^ contents _ myChangeSet preambleString ifNil: ['']].	class _ self selectedClassOrMetaClass.	(sel _ currentSelector) == nil		ifFalse: [changeType _ (myChangeSet atSelector: (sel _ sel asSymbol) class: class).			changeType == #remove				ifTrue: [^ contents _ 'Method has been removed (see versions)'].			changeType == #addedThenRemoved				ifTrue: [^ contents _ 'Added then removed (see versions)'].			class ifNil: [^ contents _ 'Method was added, but cannot be found!!'].			(class includesSelector: sel)				ifFalse: [^ contents _ 'Method was added, but cannot be found!!'].			contents _ class sourceCodeAt: sel.			Preferences browseWithPrettyPrint ifTrue:				[contents _ class compilerClass new					format: contents in: class notifying: nil].			^ contents _ contents asText makeSelectorBoldIn: class]		ifTrue: [strm _ WriteStream on: (String new: 100).			(myChangeSet classChangeAt: currentClassName) do: [:each |				each = #remove ifTrue: [strm nextPutAll: 'Entire class was removed.'; cr].				each = #add ifTrue: [strm nextPutAll: 'Entire class was added.'; cr].				each = #change ifTrue: [strm nextPutAll: 'Class definition was added or changed.'; cr].				each = #comment ifTrue: [strm nextPutAll: 'New class comment.'; cr]].			^ contents _ strm contents].! !ChangeSorter removeSelector: #changeSetMenu:!ChangeSorter removeSelector: #changeSetMenuStart!ChangeSorter removeSelector: #mainButtonState!ChangeSorter removeSelector: #oldOpenView:offsetBy:!ChangeSorter removeSelector: #oldOpenAsMorphIn:rect:!