'From Squeak2.9alpha of 26 July 2000 [latest update: #2574] on 8 September 2000 at 8:53:57 pm'!"Change Set:		projectHierarchy-swDate:			8 September 2000Author:			Scott WallaceProduce structures derived from the inherent containment hierarchy of projects, and on request (from a new cmd in project menu) place that hierarchy information in a window"!!Project methodsFor: 'accessing' stamp: 'sw 9/7/2000 06:56'!addSubProjectNamesTo: aStream indentation: anIndentation	"Add the names of the receiver and all its subprojects, and all *their* subprojects recursively, to aStream, indenting by the specified number of tab stops "	self isTopProject ifFalse:  "circumvent an annoying cr at the top "		[aStream cr].  	aStream tab: anIndentation; nextPutAll: self name.	self subProjects do:		[:p |			p addSubProjectNamesTo: aStream indentation: anIndentation + 1]! !!Project methodsFor: 'release' stamp: 'sw 9/8/2000 20:36'!okToChange	"Answer whether the window in which the project is housed can be dismissed -- which is destructive. We never clobber a project without confirmation"	| ok is list |	self subProjects size  >0 ifTrue:		[PopUpMenu notify: 'The project ', self name printString, 'contains sub-projects.  You must remove theseexplicitly before removing their parent.'.		^ false].	ok _ world isMorph not and: [world scheduledControllers size <= 1].	ok ifFalse: [self isMorphic ifTrue: [		self parent == CurrentProject 			ifFalse: [^true]]].  "view from elsewhere.  just delete it."	ok _ (self confirm:'Really delete the project', self name printString, 'and all its windows?').			ok ifFalse: [^ false].	"about to delete this project; clear previous links to it from other Projects:"	ImageSegment allSubInstancesDo: [:seg |		seg ifOutPointer: self thenAllObjectsDo: [:obj |			(obj isKindOf: ProjectViewMorph) ifTrue: [				obj deletingProject: self.  obj abandon].			obj class == Project ifTrue: [obj deletingProject: self]]].	Project allProjects do: [:p | p deletingProject: self].	"ones that are in"	ProjectViewMorph allSubInstancesDo: [:p | 		p deletingProject: self.		p project == self ifTrue: [p abandon]].	world isMorph 		ifTrue: [world submorphs do:   "special release for wonderlands"						[:m | (m isKindOf: WonderlandCameraMorph)								and: [m getWonderland release]].			"Remove Player classes and metaclasses owned by project"			is _ ImageSegment new arrayOfRoots: (Array with: self).			(list _ is rootsIncludingPlayers) ifNotNil: [				(list copyWithout: self) do: [:playerCls | 					playerCls isMeta ifFalse: [						playerCls removeFromSystemUnlogged]]]].	self removeChangeSetIfPossible.	^ true! !!Project methodsFor: 'release' stamp: 'sw 9/7/2000 07:15'!subProjects	"Answer a list of all the subprojects  of the receiver.  This is nastily idiosyncratic."	^ self isMorphic		ifTrue: 			[world submorphs				select:					[:m | (m isKindOf: SystemWindow)						and: [m model isKindOf: Project]]				thenCollect:					[:m | m model]]		ifFalse:			[(world controllersSatisfying:					[:m | m model isKindOf: Project])				collect:					[:c | c model]]! !!Project class methodsFor: 'utilities' stamp: 'sw 9/7/2000 06:42'!projectHierarchy	"Answer a string representing all the projects in the system in hierarchical order"	^ String streamContents:		[:aStream |			self topProject addSubProjectNamesTo: aStream indentation: 0] "Project projectHierarchy"! !!Project class methodsFor: 'utilities' stamp: 'sw 9/7/2000 06:50'!showProjectHierarchyInWindow	"Open a window that displays the project hierarchy"	| hierarchyString numberOfProjects |	hierarchyString _ self projectHierarchy.	numberOfProjects _ hierarchyString lineCount.	((StringHolder new contents: hierarchyString)		embeddedInMorphicWindowLabeled: 'Projects (', numberOfProjects printString, ') ', Date today printString, ' ', Time now printString)			setWindowColor:  (Color r: 1.0 g: 0.829 b: 0.909);			openInWorld: self currentWorld extent: (300 @ (((numberOfProjects * (TextStyle  defaultFont lineGrid + 4) min: (self currentWorld height - 50)))))"Project showProjectHierarchyInWindow"! !!Project class methodsFor: 'utilities' stamp: 'sw 9/7/2000 06:53'!topProject	"Answer the top project.  There is only one"	^ self allSubInstances detect: [:p | p isTopProject]! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 9/7/2000 07:21'!fillIn: aMenu from: dataForMenu	"A menu constructor utility by RAA.  dataForMenu is a list of items which mean:			nil							Indicates to add a line			first element is symbol		Add updating item with the symbol as the wording selector			second element is a list		second element has the receiver and selector			first element is a string		Add menu item with the string as its wording			second element is a list		second element has the receiver and selector			a third element exists		Use it as the balloon text"	dataForMenu do: [ :itemData |		itemData ifNil: [aMenu addLine] ifNotNil:			[(itemData first isKindOf: Symbol)				ifTrue: 					[aMenu 						addUpdating: itemData first 						target: self 						selector: #doMenuItem: 						argumentList: {itemData second}]				 ifFalse:					[aMenu 						add: itemData first 						target: self 						selector: #doMenuItem: 						argumentList: {itemData second}].			itemData size >= 3 ifTrue:				[aMenu balloonTextForLastItem: itemData third]]].	^ aMenu! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 9/7/2000 07:09'!projectMenu        "Build the project menu for the world."        | menu |        menu _ self menu: 'projects...'.        self fillIn: menu from: {                { 'save project on file...' . { #myWorld . #saveOnFile } }.                { 'load project from file...' . { self . #loadProject } }.                nil.        }.	self fillIn: menu from:		{{'show project hierarchy'. {Project. #showProjectHierarchyInWindow}. 'Opens a window that shows names and relationships of all the projects in your system.'}.		nil}.        self mvcProjectsAllowed ifTrue: [                self fillIn: menu from: {                        { 'create new mvc project'. { self . #openMVCProject } }.                }        ].        self fillIn: menu from: {                 { 'create new morphic project' . { self . #openMorphicProject } }.                nil.                { 'go to previous project' . { Project . #returnToPreviousProject } }.                { 'go to next project' . { Project . #advanceToNextProject } }.                { 'jump to project...' . { #myWorld . #jumpToProject } }.                nil.                { 'save on server (also makes a local copy)' . { #myProject . #storeOnServer } }.                { 'saveAs' . { #myProject . #saveAs } }.                { 'see if server version is more recent...' . { #myProject . #loadFromServer } }.        }.        Preferences simpleMenus ifFalse: [                self fillIn: menu from: {                         nil.                        { 'save for future revert' . { #myProject . #saveForRevert } }.                        { 'revert to saved copy' . { #myProject . #revert } }.                }.        ].        ^ menu! !Project removeSelector: #hasSubProjects!