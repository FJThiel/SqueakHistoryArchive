'From Squeak2.8 of 2 August 2000 [latest update: #2348] on 11 August 2000 at 5:33:56 pm'!"Change Set:		FixAsyncFilePluginDate:			10 August 2000Author:			John M McIntoshThe Async file plugin interface is checking for byte or word sized arrays, this check was wrong and cause the primitive to write out 4x more data than required, reading also attempted to read in 4x too much data but another feature prevented that from being an issue since we instruct the primitive to read data based on byte counts, not word counts. This too is a problem but the primitive does not know the byte/word type of the smalltalk buffer when it is asked to start reading data"!!AsynchFilePlugin methodsFor: 'primitives' stamp: 'JMM 8/10/2000 13:04'!primitiveAsyncFileReadResult: fhandle intoBuffer: buffer at: start count: num 	| bufferSize bufferPtr r f count startIndex |	self var: #f declareC: 'AsyncFile *f'.	self primitive: 'primitiveAsyncFileReadResult'		parameters: #(Oop Oop SmallInteger SmallInteger ).	f _ self asyncFileValueOf: fhandle.	count _ num.	startIndex _ start.	bufferSize _ interpreterProxy slotSizeOf: buffer. "in bytes or words"	(interpreterProxy isWords: buffer)		ifTrue: ["covert word counts to byte counts"			count _ count * 4.			startIndex _ startIndex - 1 * 4 + 1.			bufferSize _ bufferSize * 4].	interpreterProxy success: (startIndex >= 1 and: [startIndex + count - 1 <= bufferSize]).	bufferPtr _ (self cCoerce: (interpreterProxy firstIndexableField: buffer)				to: 'int')				+ startIndex - 1. 	"adjust for zero-origin indexing"	interpreterProxy failed ifFalse: [r _ self cCode: 'asyncFileReadResult(f, bufferPtr, count)'].	^ r asOop: SmallInteger! !!AsynchFilePlugin methodsFor: 'primitives' stamp: 'JMM 8/10/2000 13:05'!primitiveAsyncFileWriteStart: fHandle fPosition: fPosition fromBuffer: buffer at: start count: num 	| f bufferSize bufferPtr count startIndex |	self var: #f declareC: 'AsyncFile *f'.	self primitive: 'primitiveAsyncFileWriteStart'		parameters: #(Oop SmallInteger Oop SmallInteger SmallInteger ).	f _ self asyncFileValueOf: fHandle.	interpreterProxy failed ifTrue: [^ nil].	count _ num.	startIndex _ start.	bufferSize _ interpreterProxy slotSizeOf: buffer.	"in bytes or words"	(interpreterProxy isWords: buffer)		ifTrue: ["covert word counts to byte counts"			count _ count * 4.			startIndex _ startIndex - 1 * 4 + 1.			bufferSize _ bufferSize * 4].	interpreterProxy success: (startIndex >= 1 and: [startIndex + count - 1 <= bufferSize]).	bufferPtr _ (self cCoerce: (interpreterProxy firstIndexableField: buffer)				to: 'int')				+ startIndex - 1.	"adjust for zero-origin indexing"	interpreterProxy failed ifFalse: [self cCode: 'asyncFileWriteStart(f, fPosition, bufferPtr, count)']! !