'From Squeakland 3.2.4913 of 10 July 2002 [latest update: #198] on 11 March 2004 at 12:13:41 am'!"Change Set:		q21scriptNameChoices-swDate:			21 December 2003, 11 March 2004Author:			Scott WallaceAdapted for Squeak 3.7a from Squeakland update 0201scriptNameChoices-sw.Fixes the script-name-choice popups and arrow-actions (on script-name tiles in viewers and scriptors) so that...¥  Choice list is now dynamically determined; thus even script-names established after the tile was created will now be offered.¥  The default choice on a new script-name tile is now #emptyScript (Yoshiki's suggestion), rather than an actual user-script selector which may or may not actually exist in a given player.¥  Script-names for scripts that have *parameters* are no longer offered in the pop-ups of script-name-valued tiles.¥  The tell-all commands are bulletproofed against run-time MNU errors in cases where a script of the given name does not exist in a player being sent the request.¥  Appropriate help-message supplied on a script-name tile." !SymbolListTile subclass: #ScriptNameTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting Tiles'!!ScriptNameTile commentStamp: 'sw 3/18/2004 01:14' prior: 0!A tile which refers to a script name.  The choices available to the user, via the arrows and via the pop-up she gets when she clicks on the current script-name, are the names of all the user scripts in any Players in the active World.!!Player methodsFor: 'scripts-standard' stamp: 'sw 12/20/2003 18:03'!tellAllSiblings: aMessageSelector	"Send the given message selector to all my sibling instances, but not to myself"	self belongsToUniClass		ifTrue:			[[(self class allSubInstances copyWithout: self) do:				[:anInstance | anInstance perform: aMessageSelector asSymbol]]					on: MessageNotUnderstood do:						[:ex | ScriptingSystem reportToUser: ('Cannot "tell" ', aMessageSelector, ' to ', self externalName)]]		ifFalse:			[(aMessageSelector ~~ #emptyScript) ifTrue:				[ScriptingSystem reportToUser: ('Cannot "tell" ', aMessageSelector, ' to ', self externalName)]]! !!Player methodsFor: 'scripts-standard' stamp: 'sw 12/20/2003 18:02'!tellSelfAndAllSiblings: aMessageSelector	"Send the given message selector to myself and to all my sibling instances"	self belongsToUniClass		ifTrue:			[[self class allSubInstances do:				[:anInstance | anInstance perform: aMessageSelector asSymbol]]					on: MessageNotUnderstood do:						[:ex | ScriptingSystem reportToUser: ('Cannot "tell" ', aMessageSelector, ' to ', self externalName)]]		ifFalse:			[(aMessageSelector ~~ #emptyScript) ifTrue:				[ScriptingSystem reportToUser: ('Cannot "tell" ', aMessageSelector, ' to ', self externalName)]]! !!Player class methodsFor: 'scripts' stamp: 'sw 12/19/2003 23:28'!namedUnaryTileScriptSelectors	"Answer a list of all the selectors of named unary tile scripts"	| sel |	scripts ifNil: [^ OrderedCollection new].	^ scripts select: [:aScript | ((sel _ aScript selector) ~~ nil) and: [sel numArgs == 0]] 		thenCollect: [:aScript | aScript selector]! !!Presenter methodsFor: 'playerList' stamp: 'sw 12/19/2003 23:39'!allKnownUnaryScriptSelectors	"Answer a list of all the unary selectors implemented by any user-scripted objected within the scope of the receiver; include #emptyScript as a bail-out"	| aSet allUniclasses |	aSet _ Set with: #emptyScript.	allUniclasses _ (self allPlayersWithUniclasses collect:		[:aPlayer | aPlayer class]) asSet.	allUniclasses do:		[:aUniclass | aSet addAll: aUniclass namedUnaryTileScriptSelectors].	^ aSet asSortedArray"ActiveWorld presenter allKnownUnaryScriptSelectors"! !!ScriptNameType methodsFor: 'queries' stamp: 'sw 12/19/2003 23:42'!choices	"Answer an alphabetized list of known script selectors in the current project"	^ ActiveWorld presenter allKnownUnaryScriptSelectors! !!ScriptNameType methodsFor: 'tile' stamp: 'sw 12/19/2003 23:07'!newReadoutTile	"Answer a tile that can serve as a readout for data of this type"	^ ScriptNameTile new dataType: self vocabularyName! !!ScriptNameType methodsFor: 'tiles' stamp: 'sw 12/19/2003 23:11'!defaultArgumentTile	"Answer a tile to represent the type"	| aTile  |	aTile _ ScriptNameTile new dataType: self vocabularyName.	aTile addArrows.	aTile setLiteral: #emptyScript.	^ aTile! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 12/20/2003 18:02'!reportToUser: aString	"Make a message accessible to the user.  For the moment, we simply defer to the Transcript mechanism"	Transcript cr; show: aString! !!SymbolListTile methodsFor: 'user interface' stamp: 'sw 12/19/2003 23:26'!arrowAction: delta	"Do what is appropriate when an arrow on the tile is pressed; delta will be +1 or -1"	| index |	owner ifNil: [^ self].	literal ifNotNil:		[(index _ (choices _ self choices) indexOf: literal) > 0			ifTrue:				[self literal: (choices atWrap: index + delta).				self adjustHelpMessage.				self acceptNewLiteral.				self labelMorph informTarget]]! !!SymbolListTile methodsFor: 'user interface' stamp: 'sw 12/21/2003 00:07'!choices	"Answer the list of current choices for the receiver's symbol"	dataType == #ScriptName ifTrue: "Backward compatibility with old tiles"		[^ ActiveWorld presenter allKnownUnaryScriptSelectors].	^ choices! !!SymbolListTile methodsFor: 'user interface' stamp: 'sw 12/19/2003 23:11'!offerAllChoicesInAPopUp	"Offer all choices in a pop-up menu"	| aMenu |	owner ifNil: [^ self].	aMenu _ MenuMorph new defaultTarget: self.	self choices do:		[:aSym | aMenu add: aSym target: self selector: #acceptNewLiteral: argument: aSym].	aMenu popUpInWorld: ActiveWorld! !!ScriptNameTile methodsFor: 'initialization' stamp: 'sw 12/19/2003 23:30'!choices	"Answer the current list of choices"	^ ActiveWorld presenter allKnownUnaryScriptSelectors! !!ScriptNameTile methodsFor: 'initialization' stamp: 'sw 12/19/2003 23:09'!dataType: aDataType	"Initialize the receiver with the given data type"	dataType _ aDataType.	literal _ #emptyScript! !!ScriptNameTile methodsFor: 'user interface' stamp: 'sw 3/9/2004 18:46'!adjustHelpMessage	"Adjust the help message to reflect the new literal"	self labelMorph setBalloonText: 'The name of the script to which this operation applies' translated! !Presenter removeSelector: #allKnownScriptSelectors!