'From Squeak3.4alpha of ''11 November 2002'' [latest update: #5105] on 12 November 2002 at 2:27:56 pm'!"Change Set:		ArchiveFixes2-nkDate:			12 November 2002Author:			Ned KonzThis fixes zip archive extraction so that:- directories are created as needed- zip members with absolute path names or '..' portions have their names cleaned up so they don't cause security problems when extractedThis will allow (for instance) Connectors to install properly from SqueakMap.I will include the appropriate methods with a new version of the SARInstaller code on SqueakMap."!!Archive methodsFor: 'archive operations' stamp: 'nk 11/11/2002 14:08'!extractMember: aMemberOrName	| member |	member _ self member: aMemberOrName.	member ifNil: [ ^nil ].	member extractToFileNamed: member fileName inDirectory: FileDirectory default.! !!Archive methodsFor: 'archive operations' stamp: 'nk 11/11/2002 14:09'!extractMemberWithoutPath: aMemberOrName	self extractMemberWithoutPath: aMemberOrName inDirectory: FileDirectory default.! !!Archive methodsFor: 'archive operations' stamp: 'nk 11/11/2002 14:09'!extractMemberWithoutPath: aMemberOrName inDirectory: dir	| member |	member _ self member: aMemberOrName.	member ifNil: [ ^nil ].	member extractToFileNamed: (FileDirectory localNameFor: member fileName) inDirectory: dir! !!ArchiveMember methodsFor: 'printing' stamp: 'nk 11/11/2002 21:03'!printOn: aStream	super printOn: aStream.	aStream nextPut: $(;		nextPutAll: self rawFileName;		nextPut: $)! !!ArchiveViewer methodsFor: 'archive operations' stamp: 'nk 11/11/2002 22:42'!extractAll	"Extracts all in a directory of the users' choosing."	| directory |	self canExtractAll		ifFalse: [^ self].	directory _ FileList2 modalFolderSelector				ifNil: [^ self].	[self extractAllPossibleInDirectory: directory]		whileFalse: [self confirm: 'Try a different directory?'].	[["first extract directories if any"	self extractDirectoriesIntoDirectory: directory.	"then files"	self extractFilesIntoDirectory: directory]		on: FileStreamException		do: [:ex | (self confirm: ex class name, ': ' , ex messageText , '. Continue?')				ifTrue: [ex resume]				ifFalse: [^ self]]] on: Error do: [ :ex | self inform: 'Error: ', ex messageText ].! !!ArchiveViewer methodsFor: 'archive operations' stamp: 'nk 11/11/2002 22:14'!extractDirectoriesIntoDirectory: directory 	(self members select: [:ea | ea isDirectory]) 		do: [:ea | ea extractInDirectory: directory]! !!ArchiveViewer methodsFor: 'archive operations' stamp: 'nk 11/11/2002 22:13'!extractFilesIntoDirectory: directory 	(self members reject: [:ea | ea isDirectory]) 		do: [:ea | ea extractInDirectory: directory]! !!ZipArchiveMember methodsFor: 'accessing' stamp: 'nk 11/11/2002 22:03'!extractInDirectory: dir	self extractToFileNamed: self fileName inDirectory: dir! !!ZipArchiveMember methodsFor: 'accessing' stamp: 'nk 11/11/2002 14:08'!extractToFileNamed: aFileName	self extractToFileNamed: aFileName inDirectory: FileDirectory default.! !!ZipArchiveMember methodsFor: 'accessing' stamp: 'nk 11/11/2002 22:34'!extractToFileNamed: aFileName inDirectory: dir	| stream fullName fullDir |	self isEncrypted ifTrue: [ ^self error: 'encryption unsupported' ].	fullName _ dir fullPathFor: aFileName.	fullDir _ FileDirectory forFileName: fullName.	fullDir assureExistence.	self isDirectory ifFalse: [		stream _ fullDir forceNewFileNamed: (FileDirectory localNameFor: fullName).		self extractTo: stream.		stream close.	] ifTrue: [ fullDir assureExistence ]! !!ZipArchiveMember methodsFor: 'accessing' stamp: 'nk 11/11/2002 21:01'!fileName	"Answer my fileName in terms of the local directory naming convention"	^fileName copyReplaceAll: '/' with: FileDirectory slash ! !!ZipArchiveMember methodsFor: 'accessing' stamp: 'nk 11/11/2002 21:03'!fileName: aString	"Set my internal filename.	Returns the (possibly new) filename.	aString will be translated from local FS format into Unix format."	^fileName _ aString copyReplaceAll: FileDirectory slash with: '/'.! !!ZipArchiveMember methodsFor: 'accessing' stamp: 'nk 11/11/2002 21:03'!rawFileName	^fileName! !!ZipArchiveMember methodsFor: 'accessing' stamp: 'nk 11/11/2002 21:03'!splitFileName	"Answer my name split on slash boundaries. A directory will have a trailing empty string."	^ fileName findTokens: '/'.! !!ZipFileMember methodsFor: 'private-reading' stamp: 'nk 11/11/2002 21:46'!canonicalizeFileName	"For security reasons, make all paths relative and remove any ../ portions"	[fileName beginsWith: '/'] whileTrue: [fileName := fileName allButFirst].	fileName := fileName copyReplaceAll: '../' with: ''! !!ZipFileMember methodsFor: 'private-reading' stamp: 'nk 11/11/2002 21:48'!readFrom: aStream 	"assumes aStream positioned after CD header; leaves stream positioned after my CD entry"	self readCentralDirectoryFileHeaderFrom: aStream.	self readLocalDirectoryFileHeaderFrom: aStream.	self endRead.	self canonicalizeFileName.! !