'From Squeak3.1alpha of 28 February 2001 [latest update: #3868] on 20 March 2001 at 10:47:36 pm'!"Change Set:		lexiconSupport-swDate:			20 March 2001Author:			Scott WallaceHere lies all code in classes outside the Lexicon hierarchy that is part of the lexicon support package.NB has postscript:ScriptingSystem saveForm: (Form	extent: 14@7	depth: 1	fromArray: #( 264241152 972029952 1541931008 2682519552 1338507264 934281216 264241152)	offset: 0@0) atKey: #SeeAlso"!!Object methodsFor: 'printing' stamp: 'sw 3/7/2001 13:14'!nominallyUnsent: aSelectorSymbol	"From within the body of a method which is not formally sent within the system, but which you intend to have remain in the system (for potential manual invocation, or for documentation, or perhaps because it's sent by commented-out-code that you anticipate uncommenting out someday, send this message, with the selector itself as the argument.This will serve two purposes:	(1)  The method will not be returned by searches for unsent selectors (because it, in a manner of speaking, sends itself).	(2)	You can locate all such methods by browsing senders of #nominallyUnsent:"	false ifTrue: [self flag: #nominallyUnsent:]    "So that this method itself will appear to be sent"! !!Object methodsFor: 'testing' stamp: 'sw 1/30/2001 22:24'!haveFullProtocolBrowsed	"Open up a Lexicon on the receiver"	^ self haveFullProtocolBrowsedShowingSelector: nil	"(2@3) haveFullProtocolBrowsed"! !!Object methodsFor: 'testing' stamp: 'sw 3/20/2001 12:20'!haveFullProtocolBrowsedShowingSelector: aSelector	"Open up a Lexicon on the receiver, having it open up showing aSelector, which may be nil"	| aBrowser |	aBrowser _ InstanceBrowser new useVocabulary: Vocabulary fullVocabulary.	aBrowser openOnObject: self inWorld: ActiveWorld showingSelector: aSelector	"(2@3) haveFullProtocolBrowsed"! !!Object methodsFor: 'viewer' stamp: 'sw 12/11/2000 15:37'!browseOwnClassSubProtocol	"Open up a ProtocolBrowser on the subprotocol of the receiver"	ProtocolBrowser openSubProtocolForClass: self class! !!ClassDescription methodsFor: 'instance variables' stamp: 'sw 3/20/2001 20:38'!chooseClassVarName 	"Present the user with a list of class variable names and answer the one selected, or nil if none"	| lines labelStream vars allVars index |	lines _ OrderedCollection new.	allVars _ OrderedCollection new.	labelStream _ WriteStream on: (String new: 200).	self withAllSuperclasses reverseDo:		[:class |		vars _ class classVarNames asSortedCollection.		vars do:			[:var |			labelStream nextPutAll: var; cr.			allVars add: var].		vars isEmpty ifFalse: [lines add: allVars size]].	labelStream contents isEmpty ifTrue: [^1 beep]. "handle nil superclass better"	labelStream skip: -1 "cut last CR".	index _ (PopUpMenu labels: labelStream contents lines: lines) startUp.	index = 0 ifTrue: [^ nil].	^ allVars at: index! !!ClassDescription methodsFor: 'instance variables' stamp: 'sw 3/20/2001 20:51'!classThatDefinesClassVariable: classVarName	"Answer the class that defines the given class variable"	(self classPool includesKey: classVarName asSymbol) ifTrue: [^ self]. 	^ superclass ifNotNil: [superclass classThatDefinesClassVariable: classVarName]! !!Morph methodsFor: 'debug and other' stamp: 'sw 1/3/2001 07:11'!buildDebugMenu: aHand	"Answer a debugging menu for the receiver.  The hand argument is seemingly historical and plays no role presently"	| aMenu aPlayer |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	(self hasProperty: #errorOnDraw) ifTrue:		[aMenu add: 'start drawing again' action: #resumeAfterDrawError.		aMenu addLine].	(self hasProperty: #errorOnStep) ifTrue:		[aMenu add: 'start stepping again' action: #resumeAfterStepError.		aMenu addLine].	aMenu add: 'inspect morph' action: #inspectInMorphic:.	aMenu add: 'inspect owner chain' action: #inspectOwnerChain.	Smalltalk isMorphic ifFalse:		[aMenu add: 'inspect morph (in MVC)' action: #inspect].	(self isKindOf: MorphicModel) ifTrue:		[aMenu add: 'inspect model' target: self model action: #inspect].	(aPlayer _ self player) ifNotNil:		[aMenu add: 'inspect player' target: aPlayer action: #inspect].     aMenu add: 'explore morph' target: self selector: #explore.	aPlayer ifNotNil: [aPlayer class isUniClass ifTrue: [aMenu add: 'browse player class' target: aPlayer action: #browseHierarchy].		"aMenu add: 'browse player protocol' target: self action: #browseProtocolForPlayer"].	aMenu add: 'browse morph class' target: self selector: #browseHierarchy.	"aMenu add: 'browse morph protocol' target: self selector: #haveFullProtocolBrowsed."	aMenu addLine.	self addViewingItemsTo: aMenu.	aMenu 		add: 'make own subclass' action: #subclassMorph;		add: 'internal name ' action: #choosePartName;		add: 'save morph in file'  action: #saveOnFile;		addLine;		add: 'call #tempCommand' action: #tempCommand;		add: 'define #tempCommand' action: #defineTempCommand;		addLine;		add: 'control-menu...' target: self selector: #invokeMetaMenu:;		add: 'edit balloon help' action: #editBalloonHelpText.	^ aMenu! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 3/20/2001 13:28'!isUniversalTiles	"Return true if I (my world) uses universal tiles.  This message can be called in places where the current World is not known, such as when writing out a project.  For information about the writingUniversalTiles thing, contact Ted Kaehler."	^ costume world		ifNil:			[ScriptEditorMorph writingUniversalTiles == true  "only valid during a project write"]		ifNotNil:			[Preferences universalTiles]! !!Player methodsFor: 'misc' stamp: 'sw 3/20/2001 12:21'!browseEToyVocabulary	"Open a protocol browser on the receiver, showing its etoy vocabulary"	| littleMe | 	littleMe _ self assureUniClass.	(InstanceBrowser new useVocabulary: Vocabulary eToyVocabulary) openOnObject: littleMe  inWorld: ActiveWorld showingSelector: nil! !!Player methodsFor: 'misc' stamp: 'sw 3/7/2001 12:56'!openSearchingVocabularyBrowser	"Open a vocabulary browser on the receiver, showing its etoy vocabulary.  No senders; a disused but presumably still viable path, provisionally retained"	(Lexicon new useVocabulary: Vocabulary fullVocabulary) openWithSearchPaneOn: self class inWorld: self currentWorld! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'sw 11/22/2000 15:19'!accept 	"Inform the model of text to be accepted, and return true if OK."	| textToAccept ok |	(self canDiscardEdits and: [(self hasProperty: #alwaysAccept) not])		ifTrue: [^ self flash].	self hasEditingConflicts ifTrue:		[(self confirm: 'Caution!! This method may have beenchanged elsewhere since you startedediting it here.  Accept anyway?') ifFalse: [^ self flash]].	textToAccept _ textMorph asText.	ok _ (setTextSelector == nil) or:		[setTextSelector numArgs = 2			ifTrue: [model perform: setTextSelector with: textToAccept with: self]			ifFalse: [model perform: setTextSelector with: textToAccept]].	ok ifTrue:		[self setText: self getText.		self hasUnacceptedEdits: false.		(model dependents detect: [:dep | (dep isKindOf: PluggableTextMorph) and: [dep getTextSelector == #annotation]] ifNone: [nil]) doIfNotNil:			[:aPane | model changed: #annotation]]! !!PluggableTextMorph methodsFor: 'pane events' stamp: 'sw 12/12/2000 14:42'!keyStroke: evt	"A keystroke was hit while the receiver had keyboard focus.  Pass the keywtroke on to my textMorph, and and also, if I have an event handler, pass it on to that handler"	textMorph keyStroke: evt.	self eventHandler ifNotNil:		[self eventHandler keyStroke: evt fromMorph: self].! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 3/20/2001 13:43'!browseFullProtocol	"Open up a protocol-category browser on the value of the receiver's current selection.    If in mvc, an old-style protocol browser is opened instead.  Someone who still uses mvc might wish to make the protocol-category-browser work there too, thanks."	| aClass |	(Smalltalk isMorphic and: [Smalltalk includesKey: #Lexicon]) ifFalse: [^ self spawnFullProtocol].	(aClass _ self selectedClassOrMetaClass) ifNotNil:		[(Smalltalk at: #Lexicon) new openOnClass: aClass inWorld: ActiveWorld showingSelector: self selectedMessageName]! !!CodeHolder methodsFor: 'categories & search pane' stamp: 'sw 3/7/2001 12:17'!listPaneWithSelector: aSelector	"If, among my window's paneMorphs, there is a list pane defined with aSelector as its retriever, answer it, else answer nil"	| aWindow |	^ (aWindow _ self containingWindow) ifNotNil:		[aWindow paneMorphSatisfying:			[:aMorph | (aMorph isKindOf: PluggableListMorph) and:				[aMorph getListSelector == aSelector]]]! !!CodeHolder methodsFor: 'categories & search pane' stamp: 'sw 12/1/2000 20:44'!newSearchPane	"Answer a new search pane for the receiver"	| aTextMorph |	aTextMorph _ PluggableTextMorph on: self					text: #lastSearchString accept: #lastSearchString:					readSelection: nil menu: nil.	aTextMorph setProperty: #alwaysAccept toValue: true.	aTextMorph askBeforeDiscardingEdits: false.	aTextMorph acceptOnCR: true.	aTextMorph setBalloonText: 'Type here and hit ENTER, and all methods whose selectors match what you typed will appear in the list pane below.'.	^ aTextMorph! !!CodeHolder methodsFor: 'categories & search pane' stamp: 'sw 3/7/2001 12:22'!searchPane	"Answer the search pane associated with the receiver in its window, or nil if none.  Morphic only"	^ self textPaneWithSelector: #lastSearchString! !!CodeHolder methodsFor: 'categories & search pane' stamp: 'sw 3/7/2001 12:21'!textPaneWithSelector: aSelector	"If, among my window's paneMorphs, there is a text pane defined with aSelector as its retriever, answer it, else answer nil"	| aWindow |	^ (aWindow _ self containingWindow) ifNotNil:		[aWindow paneMorphSatisfying:			[:aMorph | (aMorph isKindOf: PluggableTextMorph) and:				[aMorph getTextSelector == aSelector]]]! !!Inspector methodsFor: 'menu commands' stamp: 'sw 3/7/2001 12:42'!addCollectionItemsTo: aMenu	"If the current selection is an appropriate collection, add items to aMenu that cater to that kind of selection"	| sel |	((((sel _ self selection) isMemberOf: Array) or: [sel isMemberOf: OrderedCollection]) and: [sel size >= 1])		ifTrue:			[aMenu addList: #(				('inspect element...'					inspectElement))]! !!Inspector methodsFor: 'menu commands' stamp: 'sw 3/20/2001 12:20'!browseFullProtocol	"Open up a protocol-category browser on the value of the receiver's current selection.  If in mvc, an old-style protocol browser is opened instead."	| objectToRepresent |	Smalltalk isMorphic ifFalse: [^ self spawnProtocol].	objectToRepresent _ self selectionIndex == 0 ifTrue: [object] ifFalse: [self selection].	InstanceBrowser new openOnObject: objectToRepresent inWorld: ActiveWorld showingSelector: nil! !!Inspector methodsFor: 'menu commands' stamp: 'sw 3/7/2001 12:45'!fieldListMenu: aMenu	"Arm the supplied menu with items for the field-list of the receiver"	Smalltalk isMorphic ifTrue:		[aMenu addStayUpItemSpecial].	aMenu addList: #(		('inspect (i)'						inspectSelection)		('explore (I)'						exploreSelection)).	self addCollectionItemsTo: aMenu.	aMenu addList: #(		-		('method refs to this inst var'		referencesToSelection)		('methods storing into this inst var'	defsOfSelection)		('objects pointing to this value'		objectReferencesToSelection)		-		('browse full (b)'					browseMethodFull)		('browse class'						browseClass)		('browse hierarchy'					classHierarchy)		('browse protocol (p)'				browseFullProtocol)		-		('inst var refs...'					browseInstVarRefs)		('inst var defs...'					browseInstVarDefs)		('class var refs...'					classVarRefs)		('class variables'					browseClassVariables)		('class refs (N)'						browseClassRefs)		-		('copy name (c)'					copyName)				('basic inspect'						inspectBasic)).	Smalltalk isMorphic ifTrue:		[aMenu addList: #(			-			('tile for this value	(t)'			tearOffTile)			('viewer for this value (v)'		viewerForValue))].	^ aMenu"			-			('alias for this value'			aliasForValue)			('watcher for this slot'			watcherForSlot)"! !!Inspector methodsFor: 'menu commands' stamp: 'sw 3/7/2001 12:36'!inspectorKey: aChar from: view	"Respond to a Command key issued while the cursor is over my field list"	aChar == $i ifTrue: [^ self selection inspect].	aChar == $I ifTrue: [^ self selection explore].	aChar == $b ifTrue:	[^ self browseMethodFull].	aChar == $c ifTrue: [^ self copyName].	aChar == $p ifTrue: [^ self browseFullProtocol].	aChar == $N ifTrue: [^ self browseClassRefs].	aChar == $v ifTrue: [^ self viewerForValue].	^ self arrowKey: aChar from: view! !!Inspector methodsFor: 'menu commands' stamp: 'sw 12/11/2000 15:52'!spawnFullProtocol	"Spawn a window showing full protocol for the receiver's selection"	| objectToRepresent |	objectToRepresent _ self selectionIndex == 0 ifTrue: [object] ifFalse: [self selection].	ProtocolBrowser openFullProtocolForClass: objectToRepresent class! !!Inspector methodsFor: 'menu commands' stamp: 'sw 12/11/2000 15:52'!spawnProtocol	"Spawn a protocol on browser on the receiver's selection"	| objectToRepresent |	objectToRepresent _ self selectionIndex == 0 ifTrue: [object] ifFalse: [self selection].	ProtocolBrowser openSubProtocolForClass: objectToRepresent class! !Inspector removeSelector: #fieldListMenuForCollection:!CodeHolder removeSelector: #categoriesPane!PluggableTextMorph removeSelector: #isSetTextSelector:!Morph removeSelector: #browseProtocolForPlayer!!Object reorganize!('accessing' addInstanceVarNamed:withValue: at: at:modify: at:put: basicAt: basicAt:put: basicSize bindWithTemp: doIfNotNil: ifNotNilDo: in: presenter readFromString: size yourself)('associating' ->)('binding' bindingOf:)('casing' caseOf: caseOf:otherwise:)('class membership' class isKindOf: isKindOf:orOf: isMemberOf: respondsTo: xxxClass)('comparing' = closeTo: hash hashMappedBy: identityHashMappedBy: identityHashPrintString ~=)('converting' adaptToFloat:andSend: adaptToFraction:andSend: adaptToInteger:andSend: as: asDraggableMorph asOrderedCollection asString complexContents withoutListWrapper)('copying' clone copy copyAddedStateFrom: copyFrom: copySameFrom: copyTwoLevel deepCopy initialDeepCopierSize shallowCopy veryDeepCopy veryDeepCopyWith: veryDeepCopyWithSiblingOf: veryDeepFixupWith: veryDeepInner: veryDeepPvtSibling:)('dependents access' addDependent: breakDependents canDiscardEdits dependents evaluate:wheneverChangeIn: hasUnacceptedEdits myDependents myDependents: release removeDependent:)('drag and drop' acceptDroppingMorph:event:inMorph: dragAnimationFor:transferMorph: dragPassengerFor:inMorph: dragTransferType dragTransferTypeForMorph: wantsDroppedMorph:event:inMorph:)('error handling' assert: cannotInterpret: caseError confirm: confirm:orCancel: doesNotUnderstand: error: externalCallFailed halt halt: handles: notify: notify:at: primitiveFailed shouldNotImplement subclassResponsibility tryToDefineVariableAccess:)('events' myEvents myEvents: noEventsDo: removeAllEventsTriggered removeEvent: removeEventsTriggeredFor: trigger: trigger:with: trigger:withArguments: when:perform: when:send:to: when:send:to:with: when:send:to:withArguments: when:sendTo:)('filter streaming' byteEncode: drawOnCanvas: elementSeparator encodePostscriptOn: flattenOnStream: fullDrawPostscriptOn: printOnStream: putOn: storeOnStream: writeOnFilterStream:)('finalization' actAsExecutor executor finalize retryWithGC:until:)('flagging' isThisEverCalled isThisEverCalled: logEntry logExecution logExit)('logging' flag:log: flag:streamLog: log:)('macpal' beep: codeStrippedOut: contentsChanged currentEvent currentHand currentWorld flash ifKindOf:thenDo: instanceVariableValues isUniversalTiles methodInterfacesForCategory:inViewer: objectRepresented playSoundNamed: scriptPerformer slotInfo)('message handling' perform: perform:orSendTo: perform:with: perform:with:with: perform:with:with:with: perform:withArguments: perform:withArguments:inSuperclass:)('objects from disk' comeFullyUpOnReload: convertToCurrentVersion:refStream: indexIfCompact objectForDataStream: readDataFrom:size: saveOnFile storeDataOn:)('printing' fullPrintString isLiteral longPrintOn: longPrintString nominallyUnsent: printOn: printString printStringLimitedTo: propertyList reportableSize showInTranscript: storeOn: storeString stringForReadout stringRepresentation)('scripting' adaptedToWorld: contentsGetz: defaultFloatPrecisionFor: evaluateUnloggedForSelf: selfWrittenAsIll selfWrittenAsIm selfWrittenAsMe selfWrittenAsMy selfWrittenAsThis)('system primitives' asOop becomeForward: className creationStamp instVarAt: instVarAt:put: instVarNamed: instVarNamed:put: oopString primitiveChangeClassTo: rootStubInImageSegment: someObject tryNamedPrimitive tryNamedPrimitive: tryNamedPrimitive:with: tryNamedPrimitive:with:with: tryNamedPrimitive:with:with:with: tryNamedPrimitive:with:with:with:with: tryNamedPrimitive:with:with:with:with:with: tryNamedPrimitive:with:with:with:with:with:with: tryNamedPrimitive:with:with:with:with:with:with:with: tryPrimitive:withArgs:)('testing' basicType beViewed costumes haltIfNil haveFullProtocolBrowsed haveFullProtocolBrowsedShowingSelector: isBehavior isCollection isColor isFloat isForm isFraction isInteger isMorph isMorphicEvent isNumber isPoint isPseudoContext isStream isString isText isTransparent isWebBrowser knownName name nameForViewer notNil showDiffs stepAt:in: stepIn: stepTime stepTimeIn: wantsSteps wantsStepsIn:)('translation support' asIf:var: asIf:var:asValue: asIf:var:put: asOop: asSmallIntegerObj asValue: cCode: cCode:inSmalltalk: cCoerce:to: export: inline: primitive:parameters:receiver: remapOop:in: returnTypeC: sharedCodeNamed:inCase: stAt: stAt:put: stSize static: suppressFailureGuards: var:declareC: var:type: var:type:array:)('undo' capturedState commandHistory purgeAllCommands redoFromCapturedState: refineRedoTarget:selector:arguments:in: refineUndoTarget:selector:arguments:in: rememberCommand: rememberUndoableAction:named: undoFromCapturedState:)('updating' changed changed: handledListVerification noteSelectionIndex:for: okToChange update: updateListsAndCodeIn: windowIsClosing)('user interface' addModelItemsToWindowMenu: addModelMenuItemsTo:forMorph:hand: asExplorerString basicInspect beep browseHierarchy defaultBackgroundColor defaultLabelForInspector eToyStreamedRepresentationNotifying: explore fullScreenSize hasContentsInExplorer inform: initialExtent inspect inspectWithLabel: launchTileToRefer modelSleep modelWakeUp modelWakeUpIn: mouseUpBalk: newTileMorphRepresentative notYetImplemented windowActiveOnFirstClick windowReqNewLabel:)('viewer' assureUniClass belongsToUniClass browseOwnClassSubProtocol categoriesForViewer: categoryElementsFor: chooseNewNameForReference defaultNameStemForInstances elementTypeFor: infoFor:inViewer: initialTypeForSlotNamed: newScriptorAround: offerViewerMenuFor:event: offerViewerMenuForEvt:morph: renameScript: tileForArgType:inViewer: tilePhrasesForCategory:inViewer: uniqueInstanceVariableNameLike:excluding: uniqueNameForReference uniqueNameForReferenceOrNil usableMethodInterfacesIn: usablePhraseSpecsIn:)('world hacking' couldOpenInMorphic)('private-example')('private' errorImproperStore errorNonIntegerIndex errorNotIndexable errorSubscriptBounds: mustBeBoolean primitiveError: species storeAt:inTempFrame:)!"Postscript:"ScriptingSystem saveForm: (Form extent: 14@7 depth: 1	fromArray: #( 264241152 972029952 1541931008 2682519552 1338507264 934281216 264241152)	offset: 0@0) atKey: #SeeAlso.ScriptingSystem saveForm: (Form extent: 20@15 depth: 16	fromArray: #( 0 0 0 1 65536 1 65536 0 0 0 0 0 0 1 65537 65537 65537 0 0 0 0 0 0 65537 1 65536 1 65536 0 0 0 0 1 65536 0 65536 0 65536 0 0 0 0 65537 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 65536 0 65537 65537 65537 1 65536 65537 65536 1 65536 1 0 1 65537 0 0 0 1 65537 65537 65537 65537 65537 65537 0 1 0 0 65537 0 0 0 1 65536 0 0 0 0 65537 65537 0 0 65537 65536 65537 65537 65537 1 65536 0 0 1 0 65536 0 65537 0 1 65537 0 0 0 0 65537 0 0 1 65537 0 0 0 0 0 1 65537 65537 65537 0 0 0 0) offset: 294@190) atKey: #Cat.!