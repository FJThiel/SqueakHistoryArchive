'From Squeak 2.0 of May 22, 1998 on 29 June 1998 at 11:21:08 am'!"Change Set:		BetterParts-swDate:			29 June 1998Author:			Scott Wallace(1)  The button offered is now compatible with the tile-scripting system.(2)  Next and prev buttons of the dynamic sort (i.e., buttons that control whichever book they find themselves in at the moment) are available, and are grouped with the BookMorph.(3)  A configurable Random tile is added.(4)  Three other tiles are offered, one for arithmetic, two for comparisons"!RectangleMorph subclass: #BasicButton	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!TileMorph subclass: #RandomNumberTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting-Tiles'!!BasicButton class methodsFor: 'all' stamp: 'sw 6/16/1998 16:58'!defaultNameStemForInstances	^ 'button'! !!BookMorph class methodsFor: 'all' stamp: 'sw 5/13/1998 11:43'!authoringPrototype	"Answer an instance of the receiver suitable for placing in a parts bin for authors"		| book |	book _ self new markAsPartsDonor.	book removeEverything; pageSize: 128@102; color: (Color r: 0.9 g: 0.9 b: 0.9).	book borderWidth: 1; borderColor: Color black.	book addDressing; insertPage.	^ book! !!Integer methodsFor: 'truncation and round off' stamp: 'sw 6/26/1998 15:48'!atRandom	"Return a random integer from 1 to self.  Heavy users should use Interval atRandom or atRandom: directly."	self < 1 ifTrue: [^ self].	^ (1 to: self) atRandom! !!Morph methodsFor: 'aug97 additions' stamp: 'sw 6/26/1998 16:05'!previousPageButton	| aButton |	aButton _ SimpleButtonMorph new.	aButton target: aButton; actionSelector: #previousOwnerPage; color: Color yellow; label: '<-'.	aButton setNameTo: 'previous'.	^ aButton! !!BasicButton commentStamp: 'sw 6/29/1998 11:21' prior: 0!A minimalist button-like object intended for use with the tile-scripting system.!!BasicButton methodsFor: 'all' stamp: 'sw 6/16/1998 17:02'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'change label...' action: #setLabel.! !!BasicButton methodsFor: 'all' stamp: 'sw 6/16/1998 16:59'!initialize	super initialize.	self borderWidth: 1.	self borderColor: #raised.	self color: Color  yellow.	self label: 'Button'.! !!BasicButton methodsFor: 'all' stamp: 'sw 6/16/1998 16:49'!label	| s |	s _ ''.	self allMorphsDo: [:m | (m isKindOf: StringMorph) ifTrue: [s _ m contents]].	^ s! !!BasicButton methodsFor: 'all' stamp: 'sw 6/16/1998 16:53'!label: aString	| oldLabel m |	(oldLabel _ self findA: StringMorph)		ifNotNil: [oldLabel delete].	m _ StringMorph new contents: aString.	self extent: m extent + (borderWidth + 6).	m position: self center - (m extent // 2).	self addMorph: m.	m lock! !!BasicButton methodsFor: 'all' stamp: 'sw 6/16/1998 16:48'!label: aString font: aFont	| oldLabel m |	(oldLabel _ self findA: StringMorph)		ifNotNil: [oldLabel delete].	m _ aFont		ifNil:			[StringMorph contents: aString]		ifNotNil:			[StringMorph contents: aString font: aFont].	self extent: (m width + 6) @ (m height + 6).	m position: self center - (m extent // 2).	self addMorph: m.	m lock! !!BasicButton methodsFor: 'all' stamp: 'sw 6/16/1998 16:48'!setLabel	| newLabel |	newLabel _ FillInTheBlank		request:'Please a new label for this button'		initialAnswer: self label.	newLabel isEmpty ifFalse: [self label: newLabel font: nil].! !!PhraseTileMorph methodsFor: 'all' stamp: 'sw 6/29/1998 09:22'!inPartsBin	| o |	o _ self owner.	[o == nil] whileFalse:		[(o isKindOf: PartsBinMorph) ifTrue: [^ true].  "special case for ancient Parts Viewer stuff"		o _ o owner].	^ super inPartsBin! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 6/29/1998 09:50'!classNamesForStandardPartsBin	^	#(			(RectangleMorph EllipseMorph StarMorph  CurveMorph PolygonMorph TextMorph ImageMorph		PasteUpMorph PaintInvokingMorph  StringMorph)		(TabbedPaletteComplex)		(BasicButton JoystickMorph ClockMorph RecordingControlsMorph))! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 6/26/1998 16:39'!createTilePartsBin	"currently disused"	associatedMorph primaryHand attachMorph: self newTilePartsBin ! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 6/29/1998 10:09'!customPagesForPartsBin	| aPage |	^ #(BookMorph "WebBookMorph") collect:		[:sym |			aPage _ self newPageForStandardPartsBin.			aPage addMorphBack: (Smalltalk at: sym) authoringPrototype.			aPage addMorphBack: associatedMorph previousPageButton markAsPartsDonor.			aPage addMorphBack: associatedMorph nextPageButton markAsPartsDonor.			aPage fixLayout.			aPage]! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 6/29/1998 10:40'!newStandardPartsBin	| aBook aPage aSize |	aSize _ 340 @ 160.	aBook _ BookMorph new color: Color blue veryMuchLighter.	aBook borderWidth: 2.	aBook removeEverything.	aBook openToDragNDrop: false.	aBook addMorphBack: (aBook makeMinimalControlsWithColor: Color transparent title: '    Parts Bin    ').	self classNamesForStandardPartsBin do:		[:aList |			aPage _ self newPageForStandardPartsBin.			aList do:				[:sym | aPage addMorphBack: (Smalltalk at: sym) authoringPrototype].			aPage fixLayout.			aBook insertPage: aPage pageSize: aSize].	self customPagesForPartsBin do:		[:pg | aBook insertPage: pg pageSize: aSize].	self tilesPagesForPartsBin do:		[:pg | aBook insertPage: pg pageSize: aSize].	aBook goToPage: 1.	^ aBook! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 6/24/1998 16:00'!newTilePartsBin	| aPartsContainer aPage aSize |	aSize _ 340 @ 160.	aPartsContainer _ BookMorph new color: Color red veryMuchLighter.	aPartsContainer borderWidth: 2.	aPartsContainer removeEverything.	aPartsContainer openToDragNDrop: false.	aPartsContainer addMorphBack: (aPartsContainer makeMinimalControlsWithColor: Color transparent title: '    Tiles    ').	#(valueTiles booleanTiles arithmeticTiles) do:		[:aSym |			aPage _ self newPageForStandardPartsBin.			(self perform: aSym) do:				[:aTile | aPage addMorphBack: aTile markAsPartsDonor].			aPage fixLayout.			self coloredTilesEnabled ifFalse:				[aPage makeAllTilesGreen].			aPartsContainer insertPage: aPage pageSize: aSize].	aPartsContainer goToPage: 1.^ aPartsContainer! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 6/29/1998 09:46'!tilesPagesForPartsBin	| aPage bools |	aPage _ self newPageForStandardPartsBin padding: 30.	bools _ self booleanTiles.	aPage addMorphBack: bools first markAsPartsDonor.	aPage addMorphBack: bools last markAsPartsDonor.	aPage addMorphBack: self arithmeticTiles first markAsPartsDonor.	aPage addMorphBack: RandomNumberTile new markAsPartsDonor.	aPage makeAllTilesGreen.	aPage fixLayout.	^ OrderedCollection with: aPage  "room to grow"! !!RandomNumberTile methodsFor: 'all' stamp: 'sw 6/26/1998 16:17'!initialize	| m1 m2 |	super initialize.	self typeColor: (TilePadMorph colorForType: #number).	self addArrows.	m1 _ StringMorph contents: 'random' font: ScriptingSystem fontForTiles.	self addMorph: m1.	m2 _ StringMorph contents: '180' font: ScriptingSystem fontForTiles.	m2 position: m1 topRight.	self addMorphBack: m2.	literal _ 180.	self updateLiteralLabel! !!RandomNumberTile methodsFor: 'all' stamp: 'sw 6/25/1998 17:44'!numericValue	^ super numericValue atRandom! !!RandomNumberTile methodsFor: 'all' stamp: 'sw 6/25/1998 17:45'!storeCodeOn: aStream indent: tabCount	aStream			nextPut: $(;			nextPutAll: literal printString;			nextPutAll: ' atRandom)'.! !!RandomNumberTile methodsFor: 'all' stamp: 'sw 6/26/1998 16:14'!updateLiteralLabel	|  desiredW leader myLabel myReadout |	(myLabel _ self labelMorph) ifNil: [^ self].	myReadout _ submorphs reversed detect: [:m | m isKindOf: StringMorph].	myReadout contents: literal stringForReadout.	leader _ (upArrow ifNil: [0] ifNotNil: [UpArrowAllowance]) + 4.	desiredW _ leader + myLabel width + myReadout width + 5.	suffixArrow ifNotNil: [desiredW _ desiredW + SuffixArrowAllowance].	self extent: (desiredW max: self minimumWidth) @ self class defaultH.	myReadout position: (self left + (leader + 0)) @ (bounds top + 2); fullBounds.	myLabel position: myReadout topRight + (5@0).	suffixArrow ifNotNil: [suffixArrow align: suffixArrow topRight with:				bounds topRight + (-2 @ (self height // 2)) - (0 @ (suffixArrow height // 2))].	self changed! !