'From Squeak 2.0 of May 22, 1998 on 25 May 1998 at 3:28:48 pm'!"Change Set:		CSFileIn-diDate:			25 May 1998Author:			Dan IngallsThese changes cause fileIn to recognize Change Set preamble and postscript chunks, and to store them into the current change set."!!ChangeSet methodsFor: 'fileIn/Out' stamp: 'di 5/25/1998 15:02'!assurePostscriptExists	"Make sure there is a StringHolder holding the postscript.  "	"NOTE: FileIn recognizes the postscript by the line with Postscript: on it"	postscript == nil ifTrue: [postscript _ StringHolder new contents: '"Postscript:<Comments here, if any>Executable statements after this comment quote..."']! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'di 5/25/1998 14:34'!preambleTemplate	"Answer a string that will form the default contents for a change set's preamble.	Just a first stab at what the content should be."	^ String streamContents: [:strm |		strm nextPutAll: '"Change Set:'.  "NOTE: fileIn recognizes preambles by this string."		strm tab;tab; nextPutAll: self name.		strm cr; nextPutAll: 'Date:'; tab; tab; tab; nextPutAll: Date today printString.		strm cr; nextPutAll: 'Author:'; tab; tab; tab; nextPutAll: 'Your Name'.		strm cr; cr; nextPutAll: '<your descriptive text goes here>"']"Smalltalk changes preambleTemplate"! !!ChangeSet methodsFor: 'accessing' stamp: 'di 5/25/1998 14:24'!editPostscript	"edit the receiver's postscript, in a separate window.  "	self assurePostscriptExists.	postscript openLabel: 'Postscript for ChangeSet named ', name! !!PositionableStream methodsFor: 'positioning' stamp: 'di 5/25/1998 15:16'!padToNextLongPut: char 	"Make position be on long word boundary, writing the padding 	character, char, if necessary."	[self position \\ 4 = 0]		whileFalse: [self nextPut: char]! !!ReadWriteStream methodsFor: 'fileIn/Out' stamp: 'di 5/25/1998 15:25'!checkForPreamble: chunk	((chunk beginsWith: '"Change Set:') and: [Smalltalk changes preambleString == nil])		ifTrue: [Smalltalk changes preambleString: chunk].	((chunk beginsWith: '"Postscript:') and: [Smalltalk changes postscriptString == nil])		ifTrue: [Smalltalk changes postscriptString: chunk].							! !!ReadWriteStream methodsFor: 'fileIn/Out' stamp: 'di 5/25/1998 15:25'!fileIn	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation."	| val chunk |	'Reading ' , self name		displayProgressAt: Sensor cursorPoint		from: 0 to: self size		during:		[:bar |		[self atEnd]			whileFalse: 				[bar value: self position.				self skipSeparators.				val _ (self peekFor: $!!)					ifTrue: [(Compiler evaluate: self nextChunk logged: false)								scanFrom: self]					ifFalse: [chunk _ self nextChunk.							self checkForPreamble: chunk.							Compiler evaluate: chunk logged: true].				self skipStyleChunk].		self close].	^ val! !StandardFileStream removeSelector: #padToNextLongPut:!"Postscript:This is a testExecutable statements after this comment quote..."3+4!