'From Squeak2.8 of 13 June 2000 [latest update: #2359] on 27 October 2000 at 4:36:45 pm'!!BlockContext methodsFor: 'exceptions' stamp: 'ikp 9/18/2000 21:42'!on: exception do: handlerAction	"Evaluate the receiver in the scope of an exception handler."	| handlerActive |	handlerActive _ true.	^self value! !!Exception methodsFor: 'private' stamp: 'ikp 9/18/2000 21:36'!findHandlerFrom: startCtx       | ctx handler |       ctx := startCtx.       [ctx == nil]               whileFalse:                       [ctx isHandlerContext                               ifTrue:                                       [handler := ctx tempAt: 1. "the first argument"                                       ((handler handles: self) and: [(ctx tempAt: 3)])                                               ifTrue: [^ctx]].                       ctx := ctx sender].       ^nil! !!Exception methodsFor: 'private' stamp: 'ikp 9/18/2000 21:47'!handlerAction	| na handler returnValue |	handler := handlerContext tempAt: 2.		"the second argument"	na := handler numArgs.	handlerContext tempAt: 3 put: false.	returnValue := na == 0		ifTrue: [handler value]		ifFalse: [handler value: self].	resignalException == nil ifFalse: [^returnValue].	"Execution will only continue beyond this point if the handler did not specify a handler action."	self return: returnValue! !!Exception methodsFor: 'signaledException' stamp: 'ikp 9/18/2000 21:41'!resume	"Return from the message that signaled the receiver."	handlerContext ifNotNil: [handlerContext tempAt: 3 put: true].	^self resume: nil! !!MethodContext methodsFor: 'controlling' stamp: 'ikp 10/2/2000 15:26'!answer: anObject	"Modify my code, from the current program counter value, to answer anObject."	self push: anObject.	(method at: pc) = 124 ifFalse: [		method _ (			(method clone)				at: pc + 1 put: 124;				yourself)]! !