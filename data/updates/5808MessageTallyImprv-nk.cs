'From Squeak3.7alpha of ''11 September 2003'' [latest update: #5657] on 8 March 2004 at 1:42:30 pm'!"Change Set:		MessageTallyImprovements-nkDate:			8 March 2004Author:			Ned Konz* Centralizes the idea of a default polling period for MessageTally and TimeProfileBrowser. Also changes that default polling period to 1msec. We were using numbers like 10 and 16 msec, which are no longer good choices for today's faster machines.* Makes default polling period changeable by saying	MessageTally defaultPollPeriod: msec* Adds #spyOn: and #spyOnProcess:forMilliseconds: to TimeProfileBrowser* Improves MessageTally class comment* Adds ability to change formatting of MessageTally output (class/selector shortening, tab compression)* Makes ProcessBrowser use TimeProfileBrowser for its profiling."!Magnitude subclass: #MessageTally	instanceVariableNames: 'class method tally receivers senders time gcStats maxClassPlusSelectorSize maxClassNameSize maxTabs '	classVariableNames: 'ObservedProcess Timer DefaultPollPeriod '	poolDictionaries: ''	category: 'Tools-Debugger'!!MessageTally commentStamp: 'nk 3/8/2004 12:43' prior: 0!My instances observe and report the amount of time spent in methods.NOTE: a higher-level user interface (combining the MessageTally result tree with a method browser) is available from TimeProfileBrowser.MessageTally provides two different strategies available for profiling:* spyOn: and friends use a high-priority Process to interrupt the block or process being spied on at periodic intervals. The interrupted call stack is then examined for caller information.* tallySends: and friends use the interpreter simulator to run the block, recording every method call.The two give you different results:* spyOn: gives you a view of where the time is being spent in your program, at least on a rough statistical level (assuming you've run the block for long enough and have a high enough poll rate). If you're trying to optimize your code, start here and optimize the methods where most of the time is being spent first.* tallySends: gives you accurate counts of how many times methods get called, and by exactly which route. If you're debugging, or trying to figure out if a given method is getting called too many times, this is your tool.You can change the printing format (that is, the whitespace and string compression) by using these instance methods: 	maxClassNameSize:	maxClassPlusSelectorSize:	maxTabs:You can change the default polling period (initially set to 1) by calling	MessageTally defaultPollPeriod: numberOfMillisecondsQ: How do you interpret MessageTally>>tallySendsA: The methods #tallySends and #spyOn: measure two very different quantities, but broken down in the same who-called-who format.  #spyOn: is approximate, but more indicative of real time spent, whereas #tallySends is exact and a precise record of how many times each method got executed.!!MessageTally methodsFor: 'initialize-release' stamp: 'nk 3/8/2004 12:29'!initialize	maxClassNameSize _ self class defaultMaxClassNameSize.	maxClassPlusSelectorSize _ self class defaultMaxClassPlusSelectorSize.	maxTabs _ self class defaultMaxTabs.! !!MessageTally methodsFor: 'printing' stamp: 'nk 3/8/2004 12:14'!printOn: aStream 	| aSelector className aClass |	(class isNil or: [method isNil]) ifTrue: [^super printOn: aStream].	aSelector := class selectorAtMethod: method setClass: [:c | aClass := c].	className := aClass name contractTo: self maxClassNameSize.	aStream		nextPutAll: className;		nextPutAll: ' >> ';		nextPutAll: (aSelector 					contractTo: self maxClassPlusSelectorSize - className size)! !!MessageTally methodsFor: 'printing' stamp: 'nk 3/8/2004 12:15'!printOn: aStream total: total totalTime: totalTime tallyExact: isExact 	| aSelector className myTally aClass percentage |	isExact 		ifTrue: 			[myTally := tally.			receivers == nil 				ifFalse: [receivers do: [:r | myTally := myTally - r tally]].			aStream				print: myTally;				space]		ifFalse: 			[percentage := tally asFloat / total * 100.0 roundTo: 0.1.			aStream				print: percentage;				nextPutAll: '% {';				print: (percentage * totalTime / 100) rounded;				nextPutAll: 'ms} '].	receivers == nil 		ifTrue: 			[aStream				nextPutAll: 'primitives';				cr]		ifFalse: 			[aSelector := class selectorAtMethod: method setClass: [:c | aClass := c].			className := aClass name contractTo: self maxClassNameSize.			aStream				nextPutAll: class name;				nextPutAll: (aClass = class 							ifTrue: ['>>']							ifFalse: ['(' , aClass name , ')>>']);				nextPutAll: (aSelector 							contractTo: self maxClassPlusSelectorSize - className size);				cr]! !!MessageTally methodsFor: 'printing' stamp: 'nk 3/8/2004 12:23'!treePrintOn: aStream tabs: tabs thisTab: myTab total: total totalTime: totalTime tallyExact: isExact orThreshold: threshold 	| sons sonTab |	tabs do: [:tab | aStream nextPutAll: tab].	tabs size > 0 		ifTrue: 			[self 				printOn: aStream				total: total				totalTime: totalTime				tallyExact: isExact].	sons := isExact ifTrue: [receivers] ifFalse: [self sonsOver: threshold].	sons isEmpty 		ifFalse: 			[tabs addLast: myTab.			sons := sons asSortedCollection.			(1 to: sons size) do: 					[:i | 					sonTab := i < sons size ifTrue: ['  |'] ifFalse: ['  '].					(sons at: i) 						treePrintOn: aStream						tabs: (tabs size < self maxTabs 								ifTrue: [tabs]								ifFalse: [(tabs select: [:x | x = '[']) copyWith: '['])						thisTab: sonTab						total: total						totalTime: totalTime						tallyExact: isExact						orThreshold: threshold].			tabs removeLast]! !!MessageTally methodsFor: 'printing format' stamp: 'nk 3/8/2004 12:29'!maxClassNameSize	^maxClassNameSize! !!MessageTally methodsFor: 'printing format' stamp: 'nk 3/8/2004 12:30'!maxClassNameSize: aNumber	maxClassNameSize := aNumber! !!MessageTally methodsFor: 'printing format' stamp: 'nk 3/8/2004 12:29'!maxClassPlusSelectorSize	^maxClassPlusSelectorSize! !!MessageTally methodsFor: 'printing format' stamp: 'nk 3/8/2004 12:30'!maxClassPlusSelectorSize: aNumber	maxClassPlusSelectorSize := aNumber! !!MessageTally methodsFor: 'printing format' stamp: 'nk 3/8/2004 12:29'!maxTabs	^maxTabs! !!MessageTally methodsFor: 'printing format' stamp: 'nk 3/8/2004 12:30'!maxTabs: aNumber	maxTabs := aNumber! !!MessageTally class methodsFor: 'spying' stamp: 'nk 3/8/2004 10:34'!spyOn: aBlock    "MessageTally spyOn: [100 timesRepeat: [3.14159 printString]]"	| node result |	node _ self new.	result _ node spyEvery: self defaultPollPeriod on: aBlock.	(StringHolder new contents: (String streamContents: [:s | node report: s; close]))		openLabel: 'Spy Results'.	^ result! !!MessageTally class methodsFor: 'spying' stamp: 'nk 3/8/2004 10:34'!spyOn: aBlock toFileNamed: fileName 	"Spy on the evaluation of aBlock. Write the data collected on a file	named fileName."	| file value node |	node _ self new.	value _ node spyEvery: self defaultPollPeriod on: aBlock.	file _ FileStream newFileNamed: fileName.	node report: file; close.	file close.	^value! !!MessageTally class methodsFor: 'spying' stamp: 'nk 3/8/2004 10:35'!spyOnProcess: aProcess forMilliseconds: msecDuration 	"| p |  	p _ [100000 timesRepeat: [3.14159 printString]] fork.  	(Delay forMilliseconds: 100) wait.  	MessageTally spyOnProcess: p forMilliseconds: 1000"	| node |	node _ self new.	node		spyEvery: self defaultPollPeriod		onProcess: aProcess		forMilliseconds: msecDuration.	(StringHolder new		contents: (String				streamContents: [:s | node report: s;						 close]))		openLabel: 'Spy Results'! !!MessageTally class methodsFor: 'spying' stamp: 'nk 3/8/2004 10:35'!spyOnProcess: aProcess forMilliseconds: msecDuration toFileNamed: fileName 	"Spy on the evaluation of aProcess. Write the data collected on a file  	named fileName. Will overwrite fileName"	| file node |	node _ self new.	node		spyEvery: self defaultPollPeriod		onProcess: aProcess		forMilliseconds: msecDuration.	file _ FileStream fileNamed: fileName.	node report: file;		 close.	file close! !!MessageTally class methodsFor: 'defaults' stamp: 'nk 3/8/2004 12:27'!defaultMaxClassNameSize	"Return the default maximum width of the class name alone"	^30! !!MessageTally class methodsFor: 'defaults' stamp: 'nk 3/8/2004 12:27'!defaultMaxClassPlusSelectorSize	"Return the default maximum width of the class plus selector together (not counting the '>>')"	^60! !!MessageTally class methodsFor: 'defaults' stamp: 'nk 3/8/2004 12:26'!defaultMaxTabs	"Return the default number of tabs after which leading white space is compressed"	^18! !!MessageTally class methodsFor: 'defaults' stamp: 'nk 3/8/2004 12:41'!defaultPollPeriod	"Answer the number of milliseconds between interrupts for spyOn: and friends.	This should be faster for faster machines."	^DefaultPollPeriod ifNil: [ DefaultPollPeriod _ 1 ]! !!MessageTally class methodsFor: 'defaults' stamp: 'nk 3/8/2004 12:41'!defaultPollPeriod: numberOfMilliseconds	"Set the default number of milliseconds between interrupts for spyOn: and friends.	This should be faster for faster machines."	DefaultPollPeriod := numberOfMilliseconds! !!ProcessBrowser methodsFor: 'stack list' stamp: 'nk 3/8/2004 13:09'!messageTally	| secString secs |	secString _ FillInTheBlank request: 'Profile for how many seconds?' initialAnswer: '4'.	secs _ secString asNumber asInteger.	(secs isNil			or: [secs isZero])		ifTrue: [^ self].	[ TimeProfileBrowser spyOnProcess: selectedProcess forMilliseconds: secs * 1000 ] forkAt: selectedProcess priority + 1.! !!TimeProfileBrowser methodsFor: 'private' stamp: 'nk 3/8/2004 13:22'!messageListKey: aChar from: view 	"Respond to a Command key. Cmd-D means re-run block."	aChar == $d ifTrue: [^Cursor execute showWhile: [ block value ]].	^super messageListKey: aChar from: view! !!TimeProfileBrowser methodsFor: 'private' stamp: 'nk 3/8/2004 12:51'!runBlock: aBlock	^self runBlock: aBlock pollingEvery: MessageTally defaultPollPeriod! !!TimeProfileBrowser methodsFor: 'private' stamp: 'nk 3/8/2004 13:23'!runBlock: aBlock pollingEvery: pollPeriod 	| stream list result |	block := MessageSend 				receiver: self				selector: #runBlock:pollingEvery:				arguments: { 						aBlock.						pollPeriod}.	"so we can re-run it"	tally := MessageTally new.	tally		maxClassNameSize: 1000;		maxClassPlusSelectorSize: 1000;		maxTabs: 100.	result := tally spyEvery: pollPeriod on: aBlock.	stream := ReadWriteStream 				with: (String streamContents: 							[:s | 							tally								report: s;								close]).	stream reset.	list := OrderedCollection new.	[stream atEnd] whileFalse: [list add: stream nextLine].	self initializeMessageList: list.	self changed: #messageList.	self changed: #messageListIndex.	^result! !!TimeProfileBrowser methodsFor: 'private' stamp: 'nk 3/8/2004 13:24'!runProcess: aProcess forMilliseconds: msecDuration pollingEvery: pollPeriod 	| stream list result |	block := MessageSend 				receiver: self				selector: #runProcess:forMilliseconds:pollingEvery: 				arguments: { 						aProcess.						msecDuration.						pollPeriod}.	"so we can re-run it"	tally := MessageTally new.	tally		maxClassNameSize: 1000;		maxClassPlusSelectorSize: 1000;		maxTabs: 100.	result := tally 				spyEvery: pollPeriod				onProcess: aProcess				forMilliseconds: msecDuration.	stream := ReadWriteStream 				with: (String streamContents: 							[:s | 							tally								report: s;								close]).	stream reset.	list := OrderedCollection new.	[stream atEnd] whileFalse: [list add: stream nextLine].	self initializeMessageList: list.	self changed: #messageList.	self changed: #messageListIndex.	^result! !!TimeProfileBrowser class methodsFor: 'instance creation' stamp: 'nk 3/8/2004 12:52'!onBlock: block	"Open a profile browser on the given block, thereby running the block and 	 collecting the message tally."	"TimeProfileBrowser onBlock: [20 timesRepeat: 			[Transcript show: 100 factorial printString]]"	| inst result |	inst := self new.	result _ inst runBlock: block.	self open: inst name: 'Time Profile'.	^ result! !!TimeProfileBrowser class methodsFor: 'instance creation' stamp: 'nk 3/8/2004 12:46'!spyOn: block	"Open a profile browser on the given block, thereby running the block and 	 collecting the message tally."	"TimeProfileBrowser spyOn:  [20 timesRepeat: 			[Transcript show: 100 factorial printString]]"	^self onBlock: block! !!TimeProfileBrowser class methodsFor: 'instance creation' stamp: 'nk 3/8/2004 13:02'!spyOnProcess: aProcess forMilliseconds: msecDuration 	"Run aProcess for msecDuration milliseconds, then open a TimeProfileBrowser on the results."	"| p |  	p _ [100000 timesRepeat: [3.14159 printString]] fork.  	(Delay forMilliseconds: 100) wait.  	TimeProfileBrowser spyOnProcess: p forMilliseconds: 1000"	| inst |	inst := self new.	inst runProcess: aProcess forMilliseconds: msecDuration pollingEvery: MessageTally defaultPollPeriod.	self open: inst name: (String streamContents: [ :s | s nextPutAll: 'Time Profile for '; print: msecDuration; nextPutAll: ' msec' ]).	^ inst! !TimeProfileBrowser removeSelector: #block!TimeProfileBrowser removeSelector: #block:!TimeProfileBrowser removeSelector: #runBlock!TimeProfileBrowser removeSelector: #runBlockPollingEvery:!MessageTally removeSelector: #tabWidth!Magnitude subclass: #MessageTally	instanceVariableNames: 'class method tally receivers senders time gcStats maxClassNameSize maxClassPlusSelectorSize maxTabs'	classVariableNames: 'DefaultPollPeriod ObservedProcess Timer'	poolDictionaries: ''	category: 'Tools-Debugger'!!MessageTally reorganize!('collecting leaves' bump: bump:fromSender: into:fromSender: leavesInto:fromSender:)('comparing' < = > hash isPrimitives sonsOver: species)('initialize-release' close initialize spyEvery:on: spyEvery:onProcess:forMilliseconds:)('printing' fullPrintOn:tallyExact:orThreshold: leavesPrintOn:tallyExact:orThreshold: printOn: printOn:total:totalTime:tallyExact: printSenderCountsOn: treePrintOn:tabs:thisTab:total:totalTime:tallyExact:orThreshold:)('printing format' maxClassNameSize maxClassNameSize: maxClassPlusSelectorSize maxClassPlusSelectorSize: maxTabs maxTabs:)('reporting' report: report:cutoff: reportGCStatsOn: tally time)('tallying' bumpBy: tally:by: tallyPath:by:)('private' class:method: copyWithTally: method primitives:)!