'From Squeak 2.0 of May 22, 1998 on 26 May 1998 at 3:16:02 pm'!!ServerDirectory methodsFor: 'accessing' stamp: 'tk 5/23/1998 09:41'!printOn: aStrm	aStrm nextPutAll: self class name; nextPut: $<.	aStrm nextPutAll: self moniker.	aStrm nextPut: $>.! !!Utilities class methodsFor: 'fetching updates' stamp: 'tk 5/23/1998 08:56'!absorbUpdatesFromServer	"Go to two common servers and look for updates.  Do not bring themto the user's disk.  A file on the server called updates.list has the namesof the last N update files.  We look backwards for the first one we do nothave, and start there bringing them in.  tk 9/10/97""* To add a new update:  Name it starting with a new two-digit code.  * Do not use %, /, *, space, or more than one period in the name of an update file.* The update name does not need to have any relation to the version name.* Figure out which versions of the system the update makes sense for.* Add the name of the file to each version's category below.* Put this file and the update file on all of the servers.** To make a new version of the system:  Pick a name for it (no restrictions)* Put # and exactly that name on a new line at the end of this file.* During the release process, fill in exactly that name in the dialog box.* Put this file on the server.""Utilities absorbUpdatesFromServer"| doc urls failed str |Utilities chooseUpdateList ifFalse: [^ self].	"ask the user which kind of updates"Cursor wait showWhile: [	(Smalltalk includesKey: #EToySystem)		ifTrue: [(Smalltalk at: #EToySystem) guessDOLProxy].	urls _ self newUpdatesOn: 		(Utilities serverUrls collect: [:url | url, 'updates/']).	failed _ 0.	urls do: [:this |		doc _ HTTPSocket httpGet: this accept: 'application/octet-stream'.		"check here that it worked"		doc class == String			ifTrue: [failed _ failed + 1]	"an error loading"			ifFalse: [				doc reset; text.				doc peek asciiValue = 4	"pure object file"					ifTrue: [failed _ failed + 1]	"Must be fileIn, not pure object file"					ifFalse: [						"(this endsWith: '.html') ifTrue: [doc _ doc asHtml]."							"HTML source code not supported here yet"						ChangeSorter newChangesFromStream: doc							named: (this findTokens: '/') last.						self saveUpdate: doc onFile: (this findTokens: '/') last]]].	"if wanted"	].str _ 'Loaded ', (urls size - failed) printString ,' new update files.'.failed > 0 ifTrue: [str _ str, '\Could not find ' withCRs, failed printString ,' update files.'].self inform: str.! !!Utilities class methodsFor: 'fetching updates' stamp: 'tk 5/23/1998 08:55'!chooseUpdateList	"When there is more than one set of update servers, let the user choose which we will update from.  Put it at the front of the list. Return false if the user aborted"	| index him |	UpdateUrlLists size > 1 ifTrue: [		index _ (PopUpMenu labelArray: (UpdateUrlLists collect: [:each | each first]) lines: #()) 			startUpWithCaption: 'Choose a group of serversfrom which to fetch updates.'.		index > 0 ifTrue: [			him _ UpdateUrlLists at: index.			UpdateUrlLists removeAt: index.			UpdateUrlLists addFirst: him].		^ index > 0].	^ true! !