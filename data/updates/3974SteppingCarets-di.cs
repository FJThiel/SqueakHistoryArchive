'From Squeak3.1alpha of 5 February 2001 [latest update: #3972] on 3 May 2001 at 11:27:14 am'!"Change Set:		SteppingCaretsDate:			3 May 2001Author:			Dan IngallsEndows value-changing carets in universal tiles with stepping behavior as in classic tiles.Currently recompiles on every step, so it's not very zippy."!!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/3/2001 11:20'!upDown: delta event: evt arrow: arrowMorph	| st aList index now want instVar |	st _ submorphs detect: [:mm | mm isKindOf: StringMorph] ifNone: [^ self].	(self nodeClassIs: LiteralNode) ifTrue:		[ "+/- 1"		st contents: (self decompile asNumber + delta) printString.		^ self acceptSilently].	(self nodeClassIs: VariableNode) ifTrue:		[ "true/false"		st contents: (self decompile asString = 'true') not printString.		^ self acceptSilently.	"maybe set parseNode's key"].	(self nodeClassIs: SelectorNode) ifTrue:		[aList _ #(+ - * / // \\ min: max:).		(index _ aList indexOf: self decompile asString) > 0 ifTrue:			[^ self setSelector: (aList atWrap: index + delta) in: st].		aList _ #(= ~= > >= isDivisibleBy: < <=).		(index _ aList indexOf: self decompile asString) > 0 ifTrue:			[^ self setSelector: (aList atWrap: index + delta) in: st].		aList _ #(== ~~).		(index _ aList indexOf: self decompile asString) > 0 ifTrue:			[^ self setSelector: (aList atWrap: index + delta) in: st].		'beep:' = self decompile asString ifTrue:			["replace sound arg"			self changeSound: delta.			^ self acceptSilently].		].	(self nodeClassIs: SelectorNode) ifTrue:		["kinds of assignment"		((now _ self decompile asString) beginsWith: 'set') ifTrue:			["a setX: 3"			want _ 1+delta.  instVar _ (now allButFirst: 3) allButLast].		(now endsWith: 'IncreaseBy:') ifTrue:			["a xIncreaseBy: 3 a setX: (a getX +3)."			want _ 2+delta.  instVar _ now allButLast: 11].		(now endsWith: 'DecreaseBy:') ifTrue:			["a xDecreaseBy: 3 a setX: (a getX -3)."			want _ 3+delta.  instVar _ now allButLast: 11].		(now endsWith: 'MultiplyBy:') ifTrue:			["a xMultiplyBy: 3 a setX: (a getX *3)."			want _ 4+delta.  instVar _ now allButLast: 11].		want ifNil: [^ self].		instVar _ instVar asLowercase.		want _ #(1 2 3 4) atWrap: want.		want = 1 ifTrue:			["setter method is present"			^ self setSelector: ('set', instVar capitalized, ':') in: st].		want = 2 ifTrue:			["notUnderstood will create the method if needed"			^ self setSelector: instVar, 'IncreaseBy:' in: st].		want = 3 ifTrue:			["notUnderstood will create the method if needed"			^ self setSelector: instVar, 'DecreaseBy:' in: st].		want = 4 ifTrue:			["notUnderstood will create the method if needed"			^ self setSelector: instVar, 'MultiplyBy:' in: st].		].! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/3/2001 10:27'!upDownArrows	"Return an array of two up/down arrow buttons.	It replaces the selector or arg with a new one.	I am a number or boolean or a selector (beep:, +,-,*,//,\\, or setX: incX: decX: for any X."	| patch sel any ok |	any _ (self nodeClassIs: LiteralNode) and: [parseNode key isNumber].	any _ any or: [(self nodeClassIs: VariableNode) and:						[(#('true' 'false') includes: self decompile asString)]].	any _ any or: [(self nodeClassIs: SelectorNode) and:				[ok _ #(beep: + - * // \\) includes: (sel _ parseNode key).				ok _ ok or: [(sel beginsWith: 'set') and: [(sel atWrap: 4) isUppercase]].				ok _ ok or: [sel size > 11 and:						[#('IncreaseBy:' 'DecreaseBy:' 'MultiplyBy:') includes: (sel last: 11)]].				ok]].	any _ any or: [(self nodeClassIs: SelectorNode) and:				[ok _ #(= ~= == ~~) includes: (sel _ parseNode key).				ok]].	any ifFalse: [^ nil].	patch _ {(ImageMorph new image: TileMorph upPicture)				on: #mouseDown send: #upDown:event:arrow: to: self withValue: 1;				on: #mouseStillDown send: #upDownMore:event:arrow: to: self withValue: 1;				on: #mouseUp send: #upDownDone to: self.			(ImageMorph new image: TileMorph downPicture)				on: #mouseDown send: #upDown:event:arrow: to: self withValue: -1;				on: #mouseStillDown send: #upDownMore:event:arrow: to: self withValue: -1;				on: #mouseUp send: #upDownDone to: self}.	^ patch! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/3/2001 10:54'!upDownDone	self removeProperty: #timeOfLastTick;		removeProperty: #currentDelay.! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/3/2001 10:58'!upDownMore: delta event: evt arrow: arrowMorph	| st delay1 delay2 now timeOfLastTick currentDelay |	(self nodeClassIs: LiteralNode) ifFalse: [^ self].	st _ submorphs detect: [:mm | mm isKindOf: StringMorph] ifNone: [^ self].	delay1 _ 500.  "ms"	delay2 _ 50.  "ms"	now _ Time millisecondClockValue.	timeOfLastTick _ (self valueOfProperty: #timeOfLastTick) ifNil: [now - delay1].	currentDelay _ (self valueOfProperty: #currentDelay) ifNil: [delay1].	now >= (timeOfLastTick + currentDelay) ifTrue:		[self setProperty: #timeOfLastTick toValue: now.		"decrease the delay"		self setProperty: #currentDelay toValue: (currentDelay*8//10 max: delay2).		st contents: (self decompile asNumber + delta) printString.		^ self acceptSilently].! !