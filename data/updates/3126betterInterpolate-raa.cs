'From Squeak2.9alpha of 17 July 2000 [latest update: #3183] on 17 December 2000 at 2:27:21 pm'!"Change Set:		betterInterpolateDate:			17 December 2000Author:			Bob Arning- allow use of B3D on crunched sketches in the storyboard"!!FormCanvas methodsFor: 'private' stamp: 'RAA 12/17/2000 13:24'!privateClipRect	^clipRect! !!FormCanvas methodsFor: 'private' stamp: 'RAA 12/17/2000 13:25'!privatePort	^port! !!MultiResolutionCanvas methodsFor: 'as yet unclassified' stamp: 'RAA 12/17/2000 13:25'!initializeFrom: aFormCanvas	origin _ aFormCanvas origin.	clipRect _ aFormCanvas privateClipRect.	form _ aFormCanvas form.	port _ aFormCanvas privatePort.	shadowColor _ aFormCanvas shadowColor.! !!SketchMorph methodsFor: 'drawing' stamp: 'RAA 12/17/2000 12:53'!canBeEnlargedWithB3D	| answer |	^self 		valueOfProperty: #canBeEnlargedWithB3D		ifAbsent: [			answer _ self rotatedForm colorsUsed allSatisfy: [ :c | c isTranslucent not].			self setProperty: #canBeEnlargedWithB3D toValue: answer.			answer		]! !!SketchMorph methodsFor: 'drawing' stamp: 'RAA 12/17/2000 14:24'!drawHighResolutionOn: aCanvas in: aRectangle	| r finalClipRect scale sourceOrigin sourceExtent sourceRect biggerSource biggerDestExtent interForm offsetInBigger |	r _ aRectangle translateBy: aCanvas origin.	finalClipRect _ r intersect: (aCanvas clipRect translateBy: aCanvas origin).	self canBeEnlargedWithB3D ifTrue: [		(WarpBlt toForm: aCanvas form)			clipRect: finalClipRect;			sourceForm: originalForm;			cellSize: 2;  "installs a colormap"			combinationRule: Form paint;			copyQuad: originalForm boundingBox innerCorners 			toRect: r.		^self	].	scale _ aRectangle extent / originalForm extent.	sourceOrigin _ originalForm offset + (aCanvas clipRect origin - aRectangle origin / scale).	sourceExtent _ aCanvas clipRect extent / scale.	sourceRect _ sourceOrigin rounded extent: sourceExtent rounded.	biggerSource _ sourceRect expandBy: 1.	biggerDestExtent _ (biggerSource extent * scale) rounded.	offsetInBigger _ (sourceOrigin - biggerSource origin * scale) rounded.	interForm _ Form extent: biggerDestExtent depth: aCanvas depth.	(originalForm copy: biggerSource)		displayInterpolatedIn: interForm boundingBox		on: interForm.	aCanvas 		drawImage: interForm 		at: aCanvas clipRect origin 		sourceRect: (offsetInBigger extent: aCanvas clipRect extent).! !!TransformationB2Morph methodsFor: 'as yet unclassified' stamp: 'RAA 12/17/2000 13:25'!drawSubmorphsOn: aCanvas	| r1 fullG r2 actualCanvas newClip where deferredMorphs case |	(self innerBounds intersects: aCanvas clipRect) ifFalse: [^self].	useRegularWarpBlt == true ifTrue: [		^aCanvas 			transformBy: transform			clippingTo: ((self innerBounds intersect: aCanvas clipRect) expandBy: 1) rounded			during: [:myCanvas |				submorphs reverseDo:[:m | myCanvas fullDrawMorph: m]			]			smoothing: smoothing	].	r1 _ self innerBounds intersect: aCanvas clipRect.	r1 area = 0 ifTrue: [^self].	fullG _ (transform localBoundsToGlobal: self firstSubmorph fullBounds) rounded.	r2 _ r1 intersect: fullG.	r2 area = 0 ifTrue: [^self].	newClip _ (r2 expandBy: 1) rounded intersect: self innerBounds rounded.	deferredMorphs _ #().	aCanvas 		transform2By: transform		"#transformBy: for pure WarpBlt"		clippingTo: newClip		during: [:myCanvas |			self scale > 1.0 ifTrue: [				actualCanvas _ MultiResolutionCanvas new initializeFrom: myCanvas.				actualCanvas deferredMorphs: (deferredMorphs _ OrderedCollection new).			] ifFalse: [				actualCanvas _ myCanvas.			].			submorphs reverseDo:[:m | actualCanvas fullDrawMorph: m].		]		smoothing: smoothing.	deferredMorphs do: [ :each |		where _ each bounds: each fullBounds in: self.		case _ 2.		case = 1 ifTrue: [where _ where origin rounded extent: where extent rounded].		case = 2 ifTrue: [where _ where rounded].		each drawHighResolutionOn: aCanvas in: where.	].! !