'From Squeak 2.3 of January 14, 1999 on 18 February 1999 at 9:02:15 pm'!"Change Set:		CelesteMisc-mdrDate:			18 February 1999Author:			Michael Rutenberg (mdr@scn.org)Includes a variety of small but useful fixes and additions to Squeak EMail (Celeste):	Add Date: to newly composed messages (for finding things later!!)	Stop the insertion of an annoying extra CR between the header and the body of messages	Show the header fields in a predictable order for easier scanning.	Put an expand list of headers which are not normally displayed in it's own method	Change the Reply message field order for easier editing of the CC: list	Use a Reply-To: field when forming a reply template. 	Forwarded messages now include the basic header lines of the original	Update the .tosend. category (if it is showing) when adding a newly composed message.Also,	Fix the caching of the POP3 message count (though the bug was nicely avoided by Celeste)."!!Celeste methodsFor: 'sending mail' stamp: 'mdr 2/18/1999 17:03'!queueMessageWithText: aStringOrText	"Queue a message to be sent later. The message is added to the database and filed in the '.tosend.' category."	| messageText id |	messageText _		'X-Mailer: ', Celeste versionString, String cr,		'Date: ', MailMessage dateStampNow, String cr.	messageText _ messageText,		aStringOrText asString.		"queue the message"	id _ mailDB addNewMessage: (MailMessage from: messageText).	mailDB file: id inCategory: '.tosend.'.	(self category = '.tosend.') ifTrue: [self updateTOC].	self changed: #categoryList.	self changed: #tocEntryList.! !!Celeste methodsFor: 'sending mail' stamp: 'mdr 2/18/1999 09:07'!replyTextFor: msgID	"Answer the template for a reply to the message with the given ID."	| msg s anyCCs replyaddress |	msg _ mailDB getMessage: msgID.	s _ WriteStream on: (String new: 500).	"add From:"	s nextPutAll: 'From: ', Celeste userName; cr.	"add Subject:"	((msg subject asLowercase indexOfSubCollection: 're:' startingAt: 1) ~= 0)		ifTrue: [s nextPutAll: 'Subject: ', msg subject]		ifFalse: [s nextPutAll: 'Subject: Re: ', msg subject].	s cr.	"add To:"	"Use the Reply-To: address if there is one, otherwise the From: address"	replyaddress _ msg from.	msg headerFieldsNamed: 'reply-to' do: [ :destAdd | replyaddress _ destAdd ].	s nextPutAll: 'To: ', replyaddress; cr.		"add CC:s from the message and from the user's CC list"	s nextPutAll: 'CC: '.	anyCCs _ false.	(msg to isEmpty) ifFalse: [		anyCCs ifTrue:[ s nextPutAll: ', '] ifFalse: [ anyCCs _ true ].		s nextPutAll: msg to ].	(msg cc isEmpty) ifFalse: [		anyCCs ifTrue: [ s nextPutAll: ', ' ] ifFalse: [ anyCCs _ true ].		s nextPutAll: msg cc ].	(Celeste ccList isEmpty) ifFalse: [		anyCCs ifTrue: [ s nextPutAll: ', ' ] ifFalse: [ anyCCs _ true ].			s nextPutAll: Celeste ccList ].	s cr.	"add contents of previous message"	s cr.	s nextPutAll: msg from; nextPutAll: ' wrote:'; cr.	msg bodyText linesDo: [ :line |		s nextPutAll: '> '.		s nextPutAll: line.		s cr ].	s cr.	^s contents! !!Celeste methodsFor: 'abc' stamp: 'mdr 2/15/1999 18:11'!forwardTextFor: msgID	"Answer the template for forwarding the message with the given ID."	^self composeText, '---------- Forwarded ----------',	(mailDB getMessage: msgID) formattedText, '-------------------------------'! !!MailMessage methodsFor: 'parsing' stamp: 'mdr 2/17/1999 23:42'!headerFieldsNamed: fieldName do: aBlock	"Evalue aBlock once for each header field which matches fieldName.  The block is valued with one parameter, the value of the field"	self fieldsFrom: (ReadStream on: text) do:		[: fName : fValue |			fieldName = fName ifTrue: [aBlock value: fValue]].! !!MailMessage methodsFor: 'printing/formatting' stamp: 'mdr 2/17/1999 23:47'!cleanedHeader	"Reply with a cleaned up version email header.  First show fields people would normally want to see (in a regular order for easy browsing), and then any other fields not explictly excluded"	"Note: Capitalization of letters in a field name is not exactly preserved"	| new priorityFields omittedFields |	new _ WriteStream on: (String new: text size).	priorityFields _ #('date' 'from' 'subject' 'to' 'cc').	omittedFields _ MailMessage omittedHeaderFields.	"Show the priority fields first, in the order given in priorityFields"	priorityFields do: [ :pField |		"We don't check whether the priority field is in the omitted list!!"		self headerFieldsNamed: pField do:			[: fValue | new nextPutAll: pField capitalized, ': ', fValue; cr]].	"Show the rest of the fields, omitting the uninteresting ones and ones we have already shown"	self fieldsFrom: (ReadStream on: text) do:		[: fName : fValue |		 ((omittedFields includes: fName) or: [ priorityFields includes: fName]) ifFalse:				[new nextPutAll: fName capitalized.				 new nextPutAll: ': '.				 new nextPutAll: fValue; cr]].	^new contents! !!MailMessage methodsFor: 'printing/formatting' stamp: 'mdr 2/15/1999 18:11'!formattedText	"Answer a version of my text with a cleaned up header"	^self cleanedHeader, String cr, self bodyText! !!MailMessage class methodsFor: 'utilities' stamp: 'mdr 2/18/1999 20:47'!dateStampNow	"Return the current date and time formatted as a email Date: line"	"The result conforms to RFC822 with a long year, e.g.  'Thu, 18 Feb 1999 20:38:51'"	^	(Date today weekday copyFrom: 1 to: 3), ', ',		(Date today printFormat: #(1 2 3 $  2 1 1)), ' ',		Time now print24! !!MailMessage class methodsFor: 'preferences' stamp: 'mdr 2/17/1999 23:48'!omittedHeaderFields	"Reply a list of fields to omit when displaying a nice simple message"	^ #(			'content-id'			'received'			'x-accept-language'			'x-mailer-version'			'x-unityuser'			'return-path'			'newsgroups'			'message-id'			'path'			'reply-to'			'in-reply-to'			'sender'			'x-sender'			'fonts'			'x-mailer'			'mime-version'			'x-uidl'			'status'			'content-type'			'content-transfer-encoding'			'errors-to'			'keywords'			'references'			'x-vms-to'			'x-delivery-notice'			'x-reply-of'			'x-newsreader'			'x-icon'			'x-mailing-list'			'x-loop'			'x-priority'			'x-msmail-priority'			'x-mimeole'			'x-organization'			'x-originating-ip'			'x-sun-charset'			'x-url'			'x-nextstep-mailer'			'x-authentication-warning'			'x-lotus-fromdomain'			'x-blackmail'			'x-authenticated-timestamp'			'nntp-posting-host'			'lines'			'return-receipt-to'			'precedence'			'originator'			'distribution'			'content-disposition'			'importance'			'resent-to'			'resent-cc'			'resent-message-id'			'resent-date'			'resent-sender'			'resent-from'		)! !!POPSocket methodsFor: 'low-level protocol' stamp: 'mdr 2/16/1999 12:53'!numMessages	"Query the server and answer the number of messages that are in the user's mailbox."	| response answerString |	numMessages ifNotNil: [^ numMessages].  "cached result of earlier query"	self sendCommand: 'STAT'.	response _ self getResponse.	self reportToObservers: response.	(response beginsWith: '+OK') ifFalse: [^ 0].  "error"	answerString _ (response findTokens: Character separators) second.	"NB: It is important to cache the result so that all operations, especially delete and deleteAll, are done on the same set of messages"	numMessages _ answerString asNumber asInteger.	"cache the result"	^ numMessages! !"Postscript:"!