'From Squeak2.8alpha of 4 February 2000 [latest update: #2210] on 1 June 2000 at 1:05:14 pm'!"Change Set:		082PrettyPrint-smaDate:			28 May 2000Author:			Stefan Matthias AustI never understood why 'pretty print' always wanted to reformat the accepted method and not the currently edited text - so I changed that.  I also refactored pp and ppWithColor to use a common method and put the new command on Cmd+t (works only in MVC as I don't want to fiddle around with that tempCommand hack in Morphic)."!!ParagraphEditor methodsFor: 'menu messages' stamp: 'sma 5/28/2000 09:34'!experimentalCommand	"Use for experimental command-key implementation.  Using this, 	you can try things out without forever needing to reinitialize the 	ParagraphEditor."	self prettyPrint.	^ true! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'sma 5/28/2000 09:40'!prettyPrint	self prettyPrint: false! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'sma 5/28/2000 09:41'!prettyPrint: decorated	"Reformat the contents of the receiver's view (a Browser)."	| selectedClass newText |	model selectedMessageCategoryName ifNil: [^ view flash].	selectedClass _ model selectedClassOrMetaClass.	newText _ selectedClass compilerClass new		format: self text		in: selectedClass		notifying: self		decorated: decorated.	newText ifNotNil:		[self deselect; selectInvisiblyFrom: 1 to: paragraph text size.		self replaceSelectionWith: (newText asText makeSelectorBoldIn: selectedClass).		self selectAt: 1]! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'sma 5/28/2000 09:40'!prettyPrintWithColor	self prettyPrint: true! !!ParseNode methodsFor: 'private' stamp: 'sma 5/28/2000 10:47'!nextWordFrom: aStream setCharacter: aBlock	| outStream char |	outStream _ WriteStream on: (String new: 16).	[(aStream peekFor: Character space) 		or: [aStream peekFor: Character tab]] whileTrue.	[aStream atEnd		or:			[char _ aStream next.			char = Character cr or: [char = Character space]]]		whileFalse: [outStream nextPut: char].	aBlock value: char.	^ outStream contents! !!ParseNode methodsFor: 'private' stamp: 'sma 5/28/2000 10:45'!printSingleComment: aString on: aStream indent: indent 	"Print the comment string, assuming it has been indented indent tabs.	Break the string at word breaks, given the widths in the default	font, at 450 points."	| readStream word position lineBreak font wordWidth tabWidth spaceWidth lastChar |	readStream _ ReadStream on: aString.	font _ TextStyle default defaultFont.	tabWidth _ TextConstants at: #DefaultTab.	spaceWidth _ font widthOf: Character space.	position _ indent * tabWidth.	lineBreak _ 450.	[readStream atEnd]		whileFalse: 			[word _ self nextWordFrom: readStream setCharacter: [:lc | lastChar _ lc].			wordWidth _ word inject: 0 into: [:width :char | width + (font widthOf: char)].			position _ position + wordWidth.			position > lineBreak				ifTrue: 					[aStream crtab: indent.					position _ indent * tabWidth + wordWidth + spaceWidth.					lastChar = Character cr						ifTrue: [[readStream peekFor: Character tab] whileTrue].					word isEmpty ifFalse: [aStream nextPutAll: word; space]]				ifFalse: 					[aStream nextPutAll: word.					readStream atEnd						ifFalse: 							[position _ position + spaceWidth.							aStream space].					lastChar = Character cr						ifTrue: 							[aStream crtab: indent.							position _ indent * tabWidth.							[readStream peekFor: Character tab] whileTrue]]]! !