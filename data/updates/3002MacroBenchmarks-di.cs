'From Squeak2.9alpha of 12 June 2000 [latest update: #3051] on 29 November 2000 at 10:56:04 pm'!"Change Set:		MacroBenchmarksDate:			29 November 2000Author:			Dan IngallsThis changeSet defines several macro benchmarks for Squeak.  They are designed to serve both as torture tests and as typical profiles for a number of modes of operation.  The current relevance is in testing the J3 VM, and in measuring improvements to garbage collection.To use the benchmarks, start a morphic project with 10MB free, and print the result of	Smalltalk macroBenchmarks.This should give you a list something like #(43215 53122 81336 26927 8993 12607 9024) -- from a 400MHz G3.  The seven tests are are...1:	Decompile, pretty-print, and compile a bunch of methods	does not install in classes, so does not flush cache2:	Build morphic tiles for all methods over 800 bytes (!!)	does no display3:	Translate the interpreter with inlining	does not include any plugins4:	Run the context step simulator	200 runs printing pi and 15 factorial5:	Run the InterpreterSimulator for 150,000 bytecodes	will only happen if you have mini.image in your directory6:	Open 10 browsers and close them	includes browsing to a specific method7:	Play a game of FreeCell with display, while running the MessageTally	thanks to Bob Arning for the clever part of this one"!!SystemDictionary methodsFor: 'housekeeping' stamp: 'di 11/29/2000 11:14'!macroBenchmark1    "Smalltalk macroBenchmark1"	"Decompiles and prettyPrints the source for every method in the system (or less depending on the *FILTER*, and then compiles that source and verifies that it generates (and decompiles to) identical code.  This currently fails in a number of places because some different patterns (esp involving conditionals where the first branch returns) decompile the same.  Because it never installs the new method, it should not cause any flusing of the method cache."	 | methodNode oldMethod newMethod badOnes oldCodeString n classes |	classes _ Smalltalk allClasses select: [:c | c name < 'B3'].	badOnes _ OrderedCollection new.'Decompiling and recompiling...'displayProgressAt: Sensor cursorPointfrom: 0 to: (classes detectSum: [:c | c selectors size])during: [:bar | n _ 0.	classes do:		[:cls | 		"Transcript cr; show: cls name."		cls selectors do:			[:selector | bar value: (n _ n+1).			oldMethod _ cls compiledMethodAt: selector.			oldCodeString _ (cls decompilerClass new								decompile: selector in: cls method: oldMethod)							decompileString.			methodNode _ cls compilerClass new						compile: oldCodeString						in: cls notifying: nil ifFail: [].			newMethod _ methodNode generate: #(0 0 0 0).			oldCodeString = (cls decompilerClass new								decompile: selector in: cls method: newMethod)							decompileString ifFalse: [badOnes add: cls name , ' ' , selector]]].].	^ badOnes size! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'di 11/29/2000 20:55'!macroBenchmark2  "Smalltalk macroBenchmark2"	"Copied from Interpreter class>>translate:doInlining:forBrowserPlugin:"	| doInlining cg fileName inlineFlag pluginFlag |	fileName _ 'benchmark2.out'.	inlineFlag _ true.	pluginFlag _ false.	doInlining _ inlineFlag.	pluginFlag ifTrue: [doInlining _ true].  "must inline when generating browser plugin"	Interpreter initialize.	ObjectMemory initialize.	cg _ CCodeGenerator new initialize.	cg addClass: Interpreter.	cg addClass: ObjectMemory.	Interpreter declareCVarsIn: cg.	ObjectMemory declareCVarsIn: cg.	FileDirectory default deleteFileNamed: fileName.	cg storeCodeOnFile: fileName doInlining: doInlining.	FileDirectory default deleteFileNamed: fileName.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'di 11/29/2000 11:15'!macroBenchmark3   "Smalltalk macroBenchmark3"	| testBlock tallies prev receiver |	"Runs the stepping simulator with the messageTally tree (like tallySends)."	testBlock _		['Running the context step simulator'			displayProgressAt: Sensor cursorPoint			from: 0 to: 200			during:				[:bar |				1 to: 200 do:				[:x | bar value: x.				Float pi printString.				15 factorial printString]]].	tallies _ MessageTally new class: testBlock receiver class							method: testBlock method.	receiver _ nil.	prev _ testBlock.	thisContext sender		runSimulated: testBlock		contextAtEachStep:			[:current |			current == prev ifFalse: 				["call or return"				prev sender == nil ifFalse: 					["call only"					(receiver == nil or: [current receiver == receiver])						ifTrue: [tallies tally: current by: 1]].				prev _ current]].! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'di 11/29/2000 22:33'!macroBenchmarks    | interp time saveMorphs freeCell report |	"Smalltalk macroBenchmarks #(43215 53122 81336 26927 8993 12607)"	^ {	Time millisecondsToRun: [Smalltalk macroBenchmark1  "decompile, prettyprint, compile"].		Time millisecondsToRun: [SyntaxMorph testAllMethodsOver: 800  "morphic layout without display"].		Time millisecondsToRun: [Smalltalk macroBenchmark2  "translate the interpreter with inlining"].		Time millisecondsToRun: [Smalltalk macroBenchmark3 "run the context step simulator"].		(FileDirectory default includesKey: 'mini.image')			ifTrue: ["Run the InterpreterSimulator for 150,000 bytecodes"					interp _ InterpreterSimulator new openOn: 'mini.image'.					time _ Time millisecondsToRun: [interp runForNBytes: 150000].					interp close. Display restore.					time]			ifFalse: [0].		Smalltalk isMorphic			ifTrue: ["Open 10 browsers and close them."					saveMorphs _ self currentWorld submorphs.					self currentWorld removeAllMorphs.  "heh, heh"					time _ Time millisecondsToRun:						[1 to: 10 do: [:i | Browser fullOnClass: SystemDictionary selector: #macroBenchmarks].						self currentWorld submorphs do:							[:m | m delete. self currentWorld doOneCycle]].					self currentWorld addAllMorphs: saveMorphs.					time]			ifFalse: [0].		Smalltalk isMorphic			ifTrue: ["Play a trivial game of FreeCell with spy and spy report."					(freeCell _ FreeCell new) openInWorld.					time _ Time millisecondsToRun: [freeCell board pickGame: 1].					(((report _ self currentWorld firstSubmorph) isKindOf: SystemWindow)						and: [self currentWorld firstSubmorph label = 'Spy Results'])						ifTrue: [report delete].					freeCell delete.					time]			ifFalse: [0].		}"If you have the right image then run this and print the tinyBenchmarks in the simulation window.  Note that you have to use the menu printIt rather than cmd-p...	(InterpreterSimulator new openOn: 'mini.image') testWhile you are at it, print out the result of	ContextPart runSimulated: [0 tinyBenchmarks]"! !