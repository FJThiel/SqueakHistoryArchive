'From Squeak 2.3 of January 14, 1999 on 2 April 1999 at 9:41:43 am'!"Change Set:		miscchangesDate:			2 April 1999Author:			Jeff PierceA collection of changes made to a variety of classes to support Wonderlands."!Form subclass: #B3DTexture	instanceVariableNames: 'wrap interpolate envMode '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon-3D-Lights'!!B3DColor4 methodsFor: 'interpolating' stamp: 'jsp 2/8/1999 19:57'!interpolateTo: end at: amountDone	"Return the color vector yielded by interpolating from the state of the object to the specified end state at the specified amount done"	| newColor r g b a |	r _ self red.	g _ self green.	b _ self blue.	a _ self alpha.	newColor _ B3DColor4 new.	newColor red: r + (((end red) - r) * amountDone).	newColor green: g + (((end green) - g) * amountDone).	newColor blue: b + (((end blue) - b) * amountDone).	newColor alpha: a + (((end alpha) - a) * amountDone).	^ newColor.! !!B3DColor4 class methodsFor: 'instance creation' stamp: 'jsp 2/8/1999 18:46'!red: r green: g blue: b alpha: a	"Create an initialize a color vector."	| newColor |	newColor _ B3DColor4 new.	newColor red: r.	newColor green: g.	newColor blue: b.	newColor alpha: a.	^ newColor.! !!B3DIndexedMesh methodsFor: 'accessing' stamp: 'jsp 3/11/1999 11:44'!faces: newFaces	faces _ newFaces.! !!B3DIndexedMesh methodsFor: 'accessing' stamp: 'jsp 3/11/1999 11:43'!texCoords: newTexCoords	vtxTexCoords _ newTexCoords.! !!B3DIndexedMesh methodsFor: 'accessing' stamp: 'jsp 3/11/1999 11:44'!vertexNormals: newNormals	vtxNormals _ newNormals.! !!B3DIndexedMesh methodsFor: 'accessing' stamp: 'jsp 3/11/1999 11:43'!vertices: newVertices	vertices _ newVertices.! !!B3DMatrix4x4 methodsFor: 'row-access' stamp: 'jsp 2/24/1999 17:10'!row1	"Return row 1"	^ (B3DVector3 x: (self a11) y: (self a12) z: (self a13)).! !!B3DMatrix4x4 methodsFor: 'row-access' stamp: 'jsp 2/24/1999 17:11'!row2	"Return row 2"	^ (B3DVector3 x: (self a21) y: (self a22) z: (self a23)).! !!B3DMatrix4x4 methodsFor: 'row-access' stamp: 'jsp 2/24/1999 17:11'!row3	"Return row 3"	^ (B3DVector3 x: (self a31) y: (self a32) z: (self a33)).! !!B3DMatrix4x4 methodsFor: 'accessing' stamp: 'jsp 2/25/1999 13:58'!alternateRotation	"Return the angular rotation around each axis of the matrix"
	| cp sp cy sy cr sr vAngles |	vAngles _ B3DVector3 new.	((self a13) = 0) ifTrue: [ ((self a33) >= 0)  ifTrue: [ vAngles at: 2 put: 0.													  cr _ (self a11).													  sr _ (self a12).													  cp _ (self a33). ]											 ifFalse: [ vAngles at: 2 put: (Float pi).														cr _ (self a11) negated.														sr _ (self a12) negated.														cp _ (self a33) negated. ]							]					ifFalse: [								vAngles at: 2 put: (((self a13) negated) arcTan: (self a33)).								cy _ (vAngles at: 3) cos.								sy _ (vAngles at: 3) sin.								cr _ (cy * (self a11)) + (sy * (self a31)).								sr _ (cy* (self a12)) + (sy * (self a32)).								cp _ (cy * (self a33)) - (sy * (self a13)).							].	sp _ (self a23). 	vAngles at: 1 put: (sp arcTan: cp).	vAngles at: 3 put: (sr arcTan: cr).	vAngles at: 1 put: ((vAngles at: 1) radiansToDegrees).	vAngles at: 2 put: ((vAngles at: 2) radiansToDegrees).	vAngles at: 3 put: ((vAngles at: 3) radiansToDegrees).	^ vAngles.! !!B3DMatrix4x4 methodsFor: 'accessing' stamp: 'jsp 2/11/1999 14:09'!at: i at: j	^ self at: ((i - 1) * 4 + j).! !!B3DMatrix4x4 methodsFor: 'accessing' stamp: 'jsp 2/11/1999 14:09'!at: i at: j put: aValue	^ self at: ((i - 1) * 4 + j) put: aValue.! !!B3DMatrix4x4 methodsFor: 'accessing' stamp: 'jsp 2/25/1999 13:58'!rotation	"Return the angular rotation around each axis of the matrix"
	| vRow1 vRow2 vRow3 vScale vShear vAngles vRowCross determinate |	vRow1 _ self row1.	vRow2 _ self row2.	vRow3 _ self row3.	vScale _ B3DVector3 new.	vShear _ B3DVector3 new.	vAngles _ B3DVector3 new.	vScale at: 1 put: (vRow1 length).	vRow1 normalize.	vShear at: 1 put: (vRow1 dot: vRow2).	vRow2 _ vRow2 + (vRow1 * ((vShear at: 1) negated)).	vScale at: 2 put: (vRow2 length).	vRow2 normalize.	vShear at: 1 put: ((vShear at: 1) / (vScale at: 2)).	vShear at: 2 put: (vRow1 dot: vRow3).	vRow3 _ vRow3 + (vRow1 * ((vShear at: 2) negated)).	vShear at: 3 put: (vRow2 dot: vRow3).	vRow3 _ vRow3 + (vRow2 * ((vShear at: 3) negated)).	vScale at: 3 put: (vRow3 length).	vRow3 normalize.	vShear at: 2 put: ((vShear at: 2) / (vScale at: 3)).	vShear at: 3 put: ((vShear at: 3) / (vScale at: 3)).	vRowCross _ vRow2 cross: vRow3.	determinate _ vRow1 dot: vRowCross.	(determinate < 0.0) ifTrue: [ vRow1 _ vRow1 negated.								vRow2 _ vRow2 negated.								vRow3 _ vRow3 negated.								vScale _ vScale negated. ].	vAngles at: 2 put: ((vRow1 at: 3) negated) arcSin.	(((vAngles at: 2) cos) ~= 0.0) 								ifTrue: [ vAngles at: 1 put:												((vRow2 at: 3) arcTan: (vRow3 at: 3)).										  vAngles at: 3 put:												((vRow1 at: 2) arcTan: (vRow1 at: 1)). ]								ifFalse: [ vAngles at: 1 put:												((vRow2 at: 1) arcTan: (vRow2 at: 2)).										  vAngles at: 3 put: 0.0 ].	vAngles at: 1 put: ((vAngles at: 1) radiansToDegrees).	vAngles at: 2 put: ((vAngles at: 2) radiansToDegrees).	vAngles at: 3 put: ((vAngles at: 3) radiansToDegrees).	^ vAngles.! !!B3DMatrix4x4 methodsFor: 'accessing' stamp: 'jsp 2/24/1999 09:46'!rotation: aVector
	| xRot yRot zRot cosPitch sinPitch cosYaw sinYaw cosRoll sinRoll |	xRot _ (aVector x) degreesToRadians.	yRot _ (aVector y) degreesToRadians.	zRot _ (aVector z) degreesToRadians.
	cosPitch _ xRot cos.	sinPitch _ xRot sin.	cosYaw _ yRot cos.	sinYaw _ yRot sin.	cosRoll _ zRot cos.	sinRoll _ zRot sin.	self a11: (cosRoll*cosYaw).	self a12: (sinRoll*cosYaw).	self a13: (sinYaw negated).	self a21: ((cosRoll*sinYaw*sinPitch) - (sinRoll*cosPitch)).	self a22: ((cosRoll*cosPitch) + (sinRoll*sinYaw*sinPitch)).	self a23: (cosYaw*sinPitch).	self a31: ((cosRoll*sinYaw*cosPitch) + (sinRoll*sinPitch)).	self a32: ((sinRoll*sinYaw*cosPitch) - (cosRoll*sinPitch)).	self a33: (cosYaw*cosPitch).	^ self.! !!B3DMatrix4x4 methodsFor: 'accessing' stamp: 'jsp 2/25/1999 13:58'!trotation	"Return the angular rotation around each axis of the matrix"
	| cp sp cy sy cr sr vAngles |	vAngles _ B3DVector3 new.	((self a13) = 0) ifTrue: [ ((self a33) >= 0)  ifTrue: [ vAngles at: 2 put: 0.													  cr _ (self a11).													  sr _ (self a12).													  cp _ (self a33). ]											 ifFalse: [ vAngles at: 2 put: (Float pi).														cr _ (self a11) negated.														sr _ (self a12) negated.														cp _ (self a33) negated. ]							]					ifFalse: [								vAngles at: 2 put: (((self a13) negated) arcTan: (self a33)).								cy _ (vAngles at: 3) cos.								sy _ (vAngles at: 3) sin.								cr _ (cy * (self a11)) + (sy * (self a31)).								sr _ (cy* (self a12)) + (sy * (self a32)).								cp _ (cy * (self a33)) - (sy * (self a13)).							].	sp _ (self a23). 	vAngles at: 1 put: (sp arcTan: cp).	vAngles at: 3 put: (sr arcTan: cr).	vAngles at: 1 put: ((vAngles at: 1) radiansToDegrees).	vAngles at: 2 put: ((vAngles at: 2) radiansToDegrees).	vAngles at: 3 put: ((vAngles at: 3) radiansToDegrees).	^ vAngles.! !!B3DMatrix4x4 methodsFor: 'transforming' stamp: 'jsp 2/9/1999 17:22'!composeWith: m2	"Perform a 4x4 matrix multiplication."	| c1 c2 c3 c4 m3 |	m3 _ B3DMatrix4x4 new.	c1 _ ((self a11 * m2 a11) + (self a12 * m2 a21) + 				(self a13 * m2 a31) + (self a14 * m2 a41)).	c2 _ ((self a11 * m2 a12) + (self a12 * m2 a22) + 				(self a13 * m2 a32) + (self a14 * m2 a42)).	c3 _ ((self a11 * m2 a13) + (self a12 * m2 a23) + 				(self a13 * m2 a33) + (self a14 * m2 a43)).	c4 _ ((self a11 * m2 a14) + (self a12 * m2 a24) + 				(self a13 * m2 a34) + (self a14 * m2 a44)).	m3 a11: c1; a12: c2; a13: c3; a14: c4.	c1 _ ((self a21 * m2 a11) + (self a22 * m2 a21) + 				(self a23 * m2 a31) + (self a24 * m2 a41)).	c2 _ ((self a21 * m2 a12) + (self a22 * m2 a22) + 				(self a23 * m2 a32) + (self a24 * m2 a42)).	c3 _ ((self a21 * m2 a13) + (self a22 * m2 a23) + 				(self a23 * m2 a33) + (self a24 * m2 a43)).	c4 _ ((self a21 * m2 a14) + (self a22 * m2 a24) + 				(self a23 * m2 a34) + (self a24 * m2 a44)).	m3 a21: c1; a22: c2; a23: c3; a24: c4.	c1 _ ((self a31 * m2 a11) + (self a32 * m2 a21) + 				(self a33 * m2 a31) + (self a34 * m2 a41)).	c2 _ ((self a31 * m2 a12) + (self a32 * m2 a22) + 				(self a33 * m2 a32) + (self a34 * m2 a42)).	c3 _ ((self a31 * m2 a13) + (self a32 * m2 a23) + 				(self a33 * m2 a33) + (self a34 * m2 a43)).	c4 _ ((self a31 * m2 a14) + (self a32 * m2 a24) + 				(self a33 * m2 a34) + (self a34 * m2 a44)).	m3 a31: c1; a32: c2; a33: c3; a34: c4.	c1 _ ((self a41 * m2 a11) + (self a42 * m2 a21) + 				(self a43 * m2 a31) + (self a44 * m2 a41)).	c2 _ ((self a41 * m2 a12) + (self a42 * m2 a22) + 				(self a43 * m2 a32) + (self a44 * m2 a42)).	c3 _ ((self a41 * m2 a13) + (self a42 * m2 a23) + 				(self a43 * m2 a33) + (self a44 * m2 a43)).	c4 _ ((self a41 * m2 a14) + (self a42 * m2 a24) + 				(self a43 * m2 a34) + (self a44 * m2 a44)).	m3 a41: c1; a42: c2; a43: c3; a44: c4.	^m3! !!B3DMatrix4x4 methodsFor: 'converting' stamp: 'jsp 3/5/1999 15:31'!asQuaternion	"Convert the matrix to a quaternion"	| x y z a a2 x2 y2 a4 |	a2 _ 0.25 * (1.0 + (self a11) + (self a22) + (self a33)).	(a2 > 0) ifTrue: [						a _ a2 sqrt.						a4 _ 4.0 * a.						x _ ((self a32) - (self a23)) / a4.						y _ ((self a13) - (self a31)) / a4.						z _ ((self a21) - (self a12)) / a4.					]			ifFalse: [						a _ 0.						x2 _ -0.5 * ((self a22) + (self a33)).						(x2 > 0) ifTrue: [											x _ x2 sqrt.											x2 _ 2 * x.											y _ (self a21) / x2.											z _ (self a31) / x2.										]								ifFalse: [											x _ 0.											y2 _ 0.5 * (1.0 - (self a33)).											(y2 > 0) ifTrue: [																y _ y2 sqrt.																y2 _ 2 * y.																z _ (self a32) / y2.															]													ifFalse: [																y _ 0.0.																z _ 1.0.															]										]					].	^ (B3DRotation a: a b: x c: y d: z).! !!B3DRenderEngine methodsFor: 'transforming' stamp: 'ar 2/5/1999 23:27'!popMatrix	^transformer popMatrix! !!B3DRenderEngine methodsFor: 'transforming' stamp: 'ar 2/5/1999 23:27'!pushMatrix	^transformer pushMatrix! !!B3DRotation methodsFor: 'interpolating' stamp: 'jsp 2/25/1999 15:57'!interpolateTo: aRotation at: t
	"Spherical linear interpolation (slerp) from the receiver to aQuaternion"
	^self slerpTo: aRotation at: t extraSpins: 0! !!B3DRotation methodsFor: 'interpolating' stamp: 'ar 3/24/1999 14:58'!slerpTo: aRotation at: t extraSpins: spin
	"Sperical Linear Interpolation (slerp).
	Calculate the new quaternion when applying slerp from the receiver (t = 0.0)
	to aRotation (t = 1.0). spin indicates the number of extra rotations to be added.
	The code shown below is from Graphics Gems III"
	| cosT alpha beta flip theta phi sinT |
	alpha := t.
	flip := false.
	"calculate the cosine of the two quaternions on the 4d sphere"
	cosT := self dot: aRotation.
	"if aQuaternion is on the opposite hemisphere reverse the direction
	(note that in quaternion space two points describe the same rotation)"
	cosT < 0.0 ifTrue:[
		flip := true.
		cosT := cosT negated].
	"If the aQuaternion is nearly the same as I am use linear interpolation"
	cosT > 0.99999 ifTrue:[
		"Linear Interpolation"
		beta := 1.0 - alpha
	] ifFalse:[
		"Spherical Interpolation"
		theta := cosT arcCos.
		phi := (spin * Float pi) + theta.
		sinT := theta sin.
		beta := (theta - (alpha * phi)) sin / sinT.
		alpha := (alpha * phi) sin / sinT].

	flip ifTrue:[alpha := alpha negated].
	^B3DRotation 
		a: (alpha * aRotation a) + (beta * self a)
		b: (alpha * aRotation b) + (beta * self b)
		c: (alpha * aRotation c) + (beta * self c)
		d: (alpha * aRotation d) + (beta * self d)! !!B3DScene methodsFor: 'accessing' stamp: 'jsp 3/1/1999 10:46'!lights	^lights! !!B3DVector3 methodsFor: 'interpolating' stamp: 'jsp 2/9/1999 11:17'!interpolateTo: end at: amountDone	"Interpolates a new vector based on the instance vector, the end state vector, and the amount already done (between 0 and 1)."	| tX tY tZ |	tX _ self x.	tY _ self y.	tZ _ self z.	^ (B3DVector3 x: (tX + (((end x) - tX) * amountDone))				y: (tY + (((end y) - tY) * amountDone))				z: (tZ + (((end z) - tZ) * amountDone))).! !!Form methodsFor: 'copying' stamp: 'jsp 3/1/1999 10:52'!asTexture	| newForm |	newForm _ B3DTexture extent: self extent depth: 32.	(BitBlt toForm: newForm)		colorMap: (self colormapIfNeededForDepth: 32);		copy: (self boundingBox)		from: 0@0 in: self		fillColor: nil rule: Form over.	newForm interpolate: false.	newForm wrap: false.	newForm envMode: 0.	^newForm! !!B3DTexture methodsFor: 'flipping' stamp: 'jsp 3/15/1999 14:20'!flipVertically	"Flip the texture vertically"	| temp h w row |	h _ self height.	w _ self width.	0 to: ((h // 2) - 1) do: [:i |		row _ h - i - 1.		1 to: w do: [:j |				temp _ bits at: ((i * w) + j).				bits at:  ((i * w) + j) put: (bits at: ((row * w) + j)).				bits at: ((row * w) + j) put: temp.					].				].! !!Number methodsFor: 'mathematical functions' stamp: 'jsp 2/24/1999 15:20'!arcTan: denominator	"The receiver is the tangent of an angle. Answer the angle measured in 	radians."	^(self asFloat) arcTan: denominator.! !!Float methodsFor: 'mathematical functions' stamp: 'jsp 3/30/1999 12:38'!arcTan: denominator	"Answer the angle in radians.	 Optional. See Object documentation whatIsAPrimitive."	| result |	(self = 0.0) ifTrue: [ (denominator > 0.0) ifTrue: [ result _ 0 ]										    ifFalse: [ result _ Pi ]						]			    ifFalse: [(denominator = 0.0)					ifTrue: [ (self > 0.0) ifTrue: [ result _ Halfpi ]												ifFalse: [ result _ Halfpi negated ]							]					ifFalse: [ (denominator > 0) ifTrue: [ result _ (self / denominator) arcTan ]								 ifFalse: [ result _ ((self / denominator) arcTan) + Pi ]							].						].		^ result.! !!Point methodsFor: 'interpolating' stamp: 'jsp 3/22/1999 16:31'!interpolateTo: end at: amountDone	"Interpolate between the instance and end after the specified amount has been done (0 - 1)."	^ self + ((end - self) * amountDone).! !!Workspace methodsFor: 'accessing' stamp: 'jsp 3/23/1999 12:19'!setBindings: aDictionary	"Sets the Workspace to use the specified dictionary as its namespace"	bindings _ aDictionary.! !B3DMatrix4x4 removeSelector: #newrotation!B3DMatrix4x4 removeSelector: #oldrotation!Float removeSelector: #oldArcTan:!