'From Squeak2.8alpha of 4 February 2000 [latest update: #2005] on 22 April 2000 at 6:44:17 pm'!"Change Set:		1037Array2DEnh-smaDate:			22 April 2000Author:			Stefan Matthias AustRefactored and improved Array2D, including changes from Michael RŸger.It's still not really useful and I'd propose to move it out of the Collection hierarchy."!!Array2D commentStamp: 'sma 4/22/2000 18:35' prior: 0!A simple 2D-Array implementation. Neither storing nor sorting (otherwise inherited from ArrayedCollection) will work. Neither comparing nor most accessing mehods inherited from Sequenceable collection will work.  Actually, it's a bad idea to inherit this class from collection at all!!!!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:16'!at: x at: y	"Answer the element at index x,y."	^ contents at: (self indexX: x y: y)! !!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:20'!at: x at: y add: value	"Add value (using #+) to the existing element at index x,y."	| index |	index _ self indexX: x y: y.	^ contents at: index put: (contents at: index) + value! !!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:20'!at: x at: y put: value	"Store value at index x,y and answer it."	^ contents at: (self indexX: x y: y) put: value! !!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:20'!atAllPut: anObject	"Put anObject at every one of the receiver's indices."	contents atAllPut: anObject! !!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:22'!extent	"Answer the receiver's dimensions as point."	^ self width @ self height! !!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:21'!height    "Answer the receiver's second dimension."	^ contents size // width! !!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:22'!size	^ contents size! !!Array2D methodsFor: 'accessing' stamp: 'sma 4/22/2000 18:22'!width	"Answer the receiver's first dimension."	^ width! !!Array2D methodsFor: 'accessing rows/columns' stamp: 'sma 4/22/2000 18:27'!atCol: x	"Answer a whole column."	| column |	column _ contents class new: self height.	1 to: self height do: [:index | column at: index put: (self at: x at: index)].	^ column! !!Array2D methodsFor: 'accessing rows/columns' stamp: 'sma 4/22/2000 18:30'!atCol: x put: aCollection	"Put in a whole column."	aCollection size = self height ifFalse: [self error: 'wrong column size'].	aCollection doWithIndex: [:value :y | self at: x at: y put: value].	^ aCollection! !!Array2D methodsFor: 'accessing rows/columns' stamp: 'sma 4/22/2000 18:27'!atRow: y    "Answer a whole row."	(y < 1 or: [y > self height]) ifTrue: [self errorSubscriptBounds: y].	^ contents copyFrom: y - 1 * width + 1 to: y * width! !!Array2D methodsFor: 'accessing rows/columns' stamp: 'sma 4/22/2000 18:30'!atRow: y put: aCollection	"Put in a whole row."	aCollection size = self width ifFalse: [self error: 'wrong row size'].	aCollection doWithIndex: [:value :x | self at: x at: y put: value].	^ aCollection! !!Array2D methodsFor: 'converting' stamp: 'sma 4/22/2000 18:38'!asArray	^ contents copy! !!Array2D methodsFor: 'copying' stamp: 'sma 4/22/2000 18:37'!copy	^ super copy setContents: contents copy! !!Array2D methodsFor: 'enumeration' stamp: 'sma 4/22/2000 18:14'!do: aBlock	"Iterate with X varying most quickly.  6/20/96 tk"	contents do: aBlock! !!Array2D methodsFor: 'enumeration' stamp: 'sma 4/22/2000 18:39'!rowAndColumnValuesDo: aBlock	1 to: self width do: [:col |		1 to: self height do: [:row |			aBlock value: row value: col value: (self at: row at: col)]]! !!Array2D methodsFor: 'enumeration' stamp: 'sma 4/22/2000 18:39'!rowsAndColumnsDo: aBlock	1 to: self width do: [:col |		1 to: self height do: [:row |			aBlock value: row value: col]]! !!Array2D methodsFor: 'private' stamp: 'sma 4/22/2000 18:24'!extent: extent fromArray: anArray	"Load receiver up from a 1-D array.  X varies most quickly.  6/20/96 tk"	extent x * extent y = anArray size ifFalse:		[^ self error: 'dimensions don''t match'].	width _ extent x.	contents _ anArray! !!Array2D methodsFor: 'private' stamp: 'sma 4/22/2000 18:16'!indexX: x y: y	(x < 1 or: [x > width]) ifTrue: [self errorSubscriptBounds: x].	^ y - 1 * width + x! !!Array2D methodsFor: 'private' stamp: 'sma 4/22/2000 18:37'!setContents: aCollection	contents _ aCollection! !!Array2D methodsFor: 'private' stamp: 'sma 4/22/2000 18:13'!width: x height: y type: collectionClass	"Set the number of elements in the first and second dimension.	collectionClass can be Array or String or ByteArray."	contents == nil ifFalse:		[self error: 'No runtime size change yet'].		"later move all the elements to the new sized array"	width _ x.	contents _ collectionClass new: x * y! !!Array2D class methodsFor: 'instance creation' stamp: 'sma 4/22/2000 18:40'!extent: aPoint	^ self width: aPoint x height: aPoint y! !!Array2D class methodsFor: 'instance creation' stamp: 'sma 4/22/2000 18:11'!new: size	self error: 'Use >>self width: x height: y<< instead'! !!Array2D class methodsFor: 'instance creation' stamp: 'sma 4/22/2000 18:10'!width: width height: height	^ self basicNew width: width height: height type: Array! !!Array2D class methodsFor: 'instance creation' stamp: 'sma 4/22/2000 18:10'!width: width height: height type: collectionClass	^ self basicNew width: width height: height type: collectionClass! !!Array2D class reorganize!('instance creation' extent: new new: width:height: width:height:type:)!!Array2D reorganize!('accessing' at:at: at:at:add: at:at:put: atAllPut: extent height size width)('accessing rows/columns' atCol: atCol:put: atRow: atRow:put:)('converting' asArray)('copying' copy)('enumeration' do: rowAndColumnValuesDo: rowsAndColumnsDo:)('private' extent:fromArray: indexX:y: setContents: width:height:type:)!