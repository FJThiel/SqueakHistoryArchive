'From Squeak2.9alpha of 17 July 2000 [latest update: #2524] on 21 August 2000 at 2:16:58 pm'!"Change Set:		EToyComm3Date:			18 August 2000Author:			Bob Arning- fixed the 'send on return' option in multi-chat- made cachedObjects an instance var instead of class var in CanvasEncoder to better support multiple clients. There is probably still room for improvement in the handling multiple clients.--some actual code---"CanvasEncoder stopCaching.!Object subclass: #CanvasEncoder	instanceVariableNames: 'connection lastClipRect lastTransform fontCache junk cachedObjects '	classVariableNames: 'CachedObjects CachingEnabled SentTypesAndSizes SimpleCounters '	poolDictionaries: ''	category: 'Morphic-Remote'!!CanvasEncoder methodsFor: 'drawing' stamp: 'RAA 8/18/2000 17:22'!image: aForm at: aPoint sourceRect: sourceRect rule: rule	| cacheID cacheNew cacheReply formToSend cacheEntry destRect visRect aFormArea |	"first if we are only going to be able to draw a small part of the form,	it may be faster just to send the part of the form that will actually show up"	destRect _ aPoint extent: sourceRect extent.	(destRect intersects: lastClipRect) ifFalse: [		^NebraskaDebug at: #bigImageSkipped add: {lastClipRect. aPoint. sourceRect extent}.	].	aFormArea _ aForm boundingBox area.	(aFormArea > 20000 and: [aForm isStatic not]) ifTrue: [		visRect _ destRect intersect: lastClipRect.		visRect area < (aFormArea // 20) ifTrue: [			"NebraskaDebug 				at: #bigImageReduced 				add: {lastClipRect. aPoint. sourceRect extent. lastTransform}."			formToSend _ aForm copy: (visRect translateBy: sourceRect origin - aPoint).			^self 				image: formToSend 				at: visRect origin 				sourceRect: formToSend boundingBox				rule: rule				cacheID: 0 		"no point in trying to cache this - it's a one-timer"				newToCache: false.		].	].	cacheID _ 0.	cacheNew _ false.	formToSend _ aForm.	(aFormArea > 1000 and: [(cacheReply _ self testCache: aForm) notNil]) ifTrue: [		cacheID _ cacheReply first.		cacheEntry _ cacheReply third.		(cacheNew _ cacheReply second) ifFalse: [			formToSend _ aForm isStatic 				ifTrue: [nil] 				ifFalse: [aForm deltaFrom: cacheEntry fourth].		].		cacheEntry at: 4 put: (aForm isStatic ifTrue: [aForm] ifFalse: [aForm deepCopy]).	].	self		image: formToSend 		at: aPoint 		sourceRect: sourceRect 		rule: rule 		cacheID: cacheID 		newToCache: cacheNew.! !!CanvasEncoder methodsFor: 'drawing' stamp: 'RAA 8/18/2000 15:56'!image: aFormOrNil at: aPoint sourceRect: sourceRect rule: rule cacheID: cacheID newToCache: newToCache	| t destRect |	destRect _ aPoint extent: sourceRect extent.	(destRect intersects: lastClipRect) ifFalse: [		^NebraskaDebug at: #bigImageSkipped add: {lastClipRect. aPoint. sourceRect extent}.	].	t _ Time millisecondsToRun: [		self sendCommand: {			String with: CanvasEncoder codeImage.			self class encodeImage: aFormOrNil.			self class encodePoint: aPoint.			self class encodeRectangle: sourceRect.			self class encodeInteger: rule.			self class encodeInteger: cacheID.			self class encodeInteger: (newToCache ifTrue: [1] ifFalse: [0]).		}.	].	(aFormOrNil notNil and: [aFormOrNil boundingBox area > 100]) ifTrue: [		NebraskaDebug 			at: #bigImage 			add: {lastClipRect. aPoint. sourceRect extent. t. cacheID. newToCache}.	].! !!CanvasEncoder methodsFor: 'drawing' stamp: 'RAA 8/18/2000 14:05'!testCache: anObject	| firstFree cachedObject newEntry |	CachingEnabled ifFalse: [		cachedObjects _ nil.		^nil	].	cachedObjects ifNil: [		cachedObjects _ (1 to: 100) collect: [ :x | {WeakArray new: 1. nil. nil. nil}].	].	firstFree _ nil.	cachedObjects withIndexDo: [ :each :index |		cachedObject _ each first first.		cachedObject ifNil: [			firstFree ifNil: [firstFree _ index].			each second ifNotNil: [				2 to: each size do: [ :j | each at: j put: nil].				self sendCommand: {					String with: CanvasEncoder codeReleaseCache.					self class encodeInteger: index.				}.			].		] ifNotNil: [			cachedObject == anObject ifTrue: [				each at: 2 put: (each at: 2) + 1.				^{index. false. each}			].		].	].	firstFree ifNil: [^nil].	newEntry _ {		WeakArray with: anObject.		1.		Time millisecondClockValue.		nil.	}.	cachedObjects at: firstFree put: newEntry.	^{firstFree. true. newEntry}! !!CanvasEncoder class methodsFor: 'as yet unclassified' stamp: 'RAA 8/18/2000 13:53'!beginCaching	CachingEnabled _ true.! !!CanvasEncoder class methodsFor: 'as yet unclassified' stamp: 'RAA 8/18/2000 14:04'!cachingString	^CachingEnabled ifTrue: ['C'] ifFalse: ['c']! !!CanvasEncoder class methodsFor: 'as yet unclassified' stamp: 'RAA 8/18/2000 13:54'!stopCaching	CachingEnabled _ false.! !!EToyMultiChatMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/18/2000 13:37'!rebuild	| r1 r2 |	r1 _ self addARow: {		self simpleToggleButtonFor: self attribute: #acceptOnCR help: 'Send with Return?'.		self inAColumn: {StringMorph new contents: 'Multi chat with:'; lock}.		self textEntryFieldNamed: #ipAddress with: ''					help: 'Click to edit participant list'.	}.	self		addMorphBack: (			sendingPane _ PluggableTextMorph				on: self				text: nil				accept: #acceptTo:forMorph:		).	r2 _ self addARow: {self inAColumn: {StringMorph new contents: 'Replies'; lock}}.	self		addMorphBack: (			receivingPane _ PluggableTextMorph				on: self				text: nil				accept: nil		).	{r1. r2} do: [ :each |		each			vResizing: #spaceFill;			color: Color veryLightGray.	].	heights _ #(18 0.25 18 9999999).	self updateIPAddressField: targetIPAddresses.	sendingPane acceptOnCR: (acceptOnCR ifNil: [acceptOnCR _ true]).! !"Postscript:"CanvasEncoder beginCaching.		"the default behavior. also serves to initiallize the variable"!