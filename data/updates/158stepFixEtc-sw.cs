'From Squeak 2.1 of June 30, 1998 on 19 July 1998 at 1:11:27 pm'!"Change Set:		stepFixEtc-swDate:			19 July 1998Author:			Scott WallaceFor reloading morphs from object files, provides a startStepping protocol which includes the host world as a parameter, so that morphs not yet added to the world can still start functioning properly, and also, before attaching such a reloaded morph to the hand, detaches it first from its historical world to avoid numerous intractable bugs therewith associated"!!Morph methodsFor: 'stepping' stamp: 'sw 7/19/1998 11:51'!startSteppingIn: aWorld	"Start getting sent the 'step' message in aWorld"	self step.  "one to get started!!"	aWorld ifNotNil: [aWorld startStepping: self].	self changed! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 7/19/1998 13:10'!prepareToBeSaved	super prepareToBeSaved.	turtlePen _ nil.	lastTurtlePositions _ IdentityDictionary new.! !!WorldMorph methodsFor: 'stepping' stamp: 'sw 7/19/1998 11:50'!startSteppingSubmorphsOf: aMorph	"Ensure that all submorphs of the given morph that want to be stepped are added to the step list.   Typically used after adding a morph to the world."	aMorph allMorphsDo: [:m |		m wantsSteps ifTrue: [m startSteppingIn: self]]! !!WorldMorph methodsFor: 'save/store' stamp: 'sw 7/19/1998 12:46'!addMorphsAndModel: aMorphOrList	"Dump in submorphs, model, and stepList from aMorphOrList.  Used to bring a world, paste-up, or other morph in from an object file."	aMorphOrList isMorph		ifTrue:			[aMorphOrList isWorldMorph				ifFalse:					["one morph, put on hand"					"aMorphOrList installModelIn: self.  	a chance to install model pointers"					aMorphOrList privateOwner: nil.					self hands first attachMorph: aMorphOrList.					self startSteppingSubmorphsOf: aMorphOrList]				ifTrue: 					[model == nil						ifTrue:							[self setModel: (aMorphOrList modelOrNil)]						ifFalse:							[aMorphOrList modelOrNil ifNotNil:								[aMorphOrList modelOrNil privateOwner: nil.								self addMorph: (aMorphOrList modelOrNil)]].					aMorphOrList privateSubmorphs reverseDo: [:m |						m privateOwner: nil.						self addMorph: m.						m changed].					(aMorphOrList instVarNamed: 'stepList') do:						[:entry | entry first startSteppingIn: self]]]		ifFalse:  "list, add them all"			[aMorphOrList reverseDo: [:m |				m privateOwner: nil.				self addMorph: m.				self startSteppingSubmorphsOf: m.	"It may not want this!!"				m changed]]! !