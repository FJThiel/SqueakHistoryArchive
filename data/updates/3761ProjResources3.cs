'From Squeak3.1alpha of 4 February 2001 [latest update: #3769] on 3 March 2001 at 6:06:06 pm'!"Change Set:		ProjResources3Date:			3 March 2001Author:			Andreas RaabIntroduces a simple client caching mechanism for resources stored independently from the project. The caching mechanism is disabled if we're running in the browser - in this case we use the browser cache instead of the local cache."!Object subclass: #ResourceManager	instanceVariableNames: 'resourceMap loaded unloaded stopSemaphore stopFlag loaderProcess '	classVariableNames: 'CachedResources '	poolDictionaries: ''	category: 'System-Support'!!Project methodsFor: 'menu messages' stamp: 'ar 3/3/2001 17:45'!finalEnterActions	| navigator armsLengthCmd navType thingsToUnhibernate |	thingsToUnhibernate _ world valueOfProperty: #thingsToUnhibernate ifAbsent: [#()].	thingsToUnhibernate do: [ :each | each unhibernate].	world removeProperty: #thingsToUnhibernate.	navType _ ProjectNavigationMorph preferredNavigator.	armsLengthCmd _ self parameterAt: #armsLengthCmd ifAbsent: [nil].	navigator _ world findA: navType.	Preferences showProjectNavigator & navigator isNil ifTrue: [		(navigator _ navType new)			bottomLeft: world bottomLeft;			openInWorld: world.	].	navigator notNil & armsLengthCmd notNil ifTrue: [		navigator color: Color lightBlue	].	armsLengthCmd notNil ifTrue: [		Preferences showFlapsWhenPublishing			ifFalse:[self flapsSuppressed: true.					navigator ifNotNil:[navigator visible: false]].		armsLengthCmd openInWorld: world	].	WorldState addDeferredUIMessage: [self startResourceLoading].! !!ResourceManager methodsFor: 'loading' stamp: 'ar 3/3/2001 17:49'!loadCachedResources	"Load all the resources that we have cached locally"	| resource |	self class reloadCachedResources.	self prioritizedUnloadedResources do:[:loc|		self class lookupCachedResource: loc urlString ifPresentDo:[:stream|			resource _ resourceMap at: loc ifAbsent:[nil].			self installResource: resource				from: stream				locator: loc.			(resource isKindOf: Form) ifTrue:[				self formChangedReminder value.				World displayWorldSafely].		].	].! !!ResourceManager methodsFor: 'loading' stamp: 'ar 3/3/2001 17:41'!loaderProcess	| loader requests req locator resource stream |	loader _ HTTPLoader default.	requests _ Dictionary new.	self prioritizedUnloadedResources do:[:loc|		req _ HTTPLoader httpRequestClass for: (self hackURL: loc urlString) in: loader.		loader addRequest: req.		requests at: req put: loc].	[stopFlag or:[requests isEmpty]] whileFalse:[		stopSemaphore waitTimeoutMSecs: 500.		requests keys "need a copy" do:[:r|			r isSemaphoreSignaled ifTrue:[				locator _ requests at: r.				requests removeKey: r.				stream _ r contentStream.				resource _ resourceMap at: locator ifAbsent:[nil].				self class cacheResource: locator urlString stream: stream.				self installResource: resource					from: stream					locator: locator.				(resource isKindOf: Form) ifTrue:[					WorldState addDeferredUIMessage: self formChangedReminder].			].		].	].	"Either done downloading or terminating process"	stopFlag ifTrue:[loader abort].	loaderProcess _ nil.	stopSemaphore _ nil.! !!ResourceManager methodsFor: 'loading' stamp: 'ar 3/3/2001 18:01'!startDownload	"Start downloading unloaded resources"	self stopDownload.	unloaded isEmpty ifTrue:[^self].	self loadCachedResources.	unloaded isEmpty ifTrue:[^self].	stopFlag _ false.	stopSemaphore _ Semaphore new.	loaderProcess _ [self loaderProcess] newProcess.	loaderProcess priority: Processor lowIOPriority.	loaderProcess resume.! !!ResourceManager class methodsFor: 'resource caching' stamp: 'ar 3/3/2001 18:03'!cacheResource: urlString stream: aStream	| fd localName file buf |	HTTPClient isRunningInBrowser ifTrue:[^self]. "use browser cache"	fd _ Project squeakletDirectory.	localName _ fd nextNameFor: 'resource' extension:'cache'.	file _ fd forceNewFileNamed: localName.	buf _ String new: 10000.	[aStream atEnd] whileFalse:[		buf _ aStream next: buf size into: buf.		file nextPutAll: buf.	].	file close.	"update cache"	file _ [fd oldFileNamed: self resourceCacheName] 			on: FileDoesNotExistException			do:[:ex| ex return: (fd forceNewFileNamed: self resourceCacheName)].	file setToEnd.	file nextPutAll: urlString; cr.	file nextPutAll: localName; cr.	file close.	CachedResources at: urlString put: (fd fullNameFor: localName).	aStream position: 0.! !!ResourceManager class methodsFor: 'resource caching' stamp: 'ar 3/3/2001 17:30'!lookupCachedResource: urlString ifPresentDo: streamBlock	"See if we have cached the resource described by the given url and if so, evaluate streamBlock with the cached resource."	| fileName file |	CachedResources ifNil:[^self].	fileName _ CachedResources at: urlString ifAbsent:[nil].	fileName ifNil:[^self].	file _ [FileStream readOnlyFileNamed: fileName] 			on: FileDoesNotExistException			do:[:ex| ex return: nil].	file ifNil:[^self].	[streamBlock value: file] ensure:[file close].! !!ResourceManager class methodsFor: 'resource caching' stamp: 'ar 3/3/2001 18:03'!reloadCachedResources	"ResourceManager reloadCachedResources"	"Reload cached resources from the disk"	| fd files stream url localName storeBack |	HTTPClient isRunningInBrowser ifTrue:[^CachedResources _ nil]. "use browser cache"	CachedResources _ Dictionary new.	fd _ Project squeakletDirectory.	files _ fd fileNames asSet.	stream _ [fd readOnlyFileNamed: self resourceCacheName]				on: FileDoesNotExistException 				do:[:ex| ex return: (fd forceNewFileNamed: self resourceCacheName)].	stream size < 50000 ifTrue:[stream _ ReadStream on: stream contentsOfEntireFile].	storeBack _ false.	[stream atEnd] whileFalse:[		url _ stream upTo: Character cr.			localName _ stream upTo: Character cr.		(files includes: localName) 			ifTrue:[CachedResources at: url put: (fd fullNameFor: localName)]			ifFalse:[storeBack _ true]].	(stream respondsTo: #close) ifTrue:[stream close].	storeBack ifTrue:[		stream _ fd forceNewFileNamed: self resourceCacheName.		CachedResources keysAndValuesDo:[:urlString :fullName|			stream nextPutAll: urlString; cr.			stream nextPutAll: (fd localNameFor: fullName); cr.		].		stream close.	].! !!ResourceManager class methodsFor: 'resource caching' stamp: 'ar 3/3/2001 17:27'!resourceCacheName	^'resourceCache.map'! !