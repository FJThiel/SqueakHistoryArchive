'From Squeak3.1alpha of 4 February 2001 [latest update: #3570] on 12 February 2001 at 3:30:52 pm'!"Change Set:		OpenSourceFiles-arDate:			12 February 2001Author:			Andreas RaabModifies the mechanisms for finding sources and changes not to manipulate the default directory (so it can be set to something different).Also fixes an issue when the changes file is set to read-only."!!FileDirectory class methodsFor: 'system start up' stamp: 'ar 2/12/2001 15:30'!openChanges: changesName forImage: imageName	"Initialize the default directory to the image directory and open the  	sources and changes files, if possible. Look for the changes file in  	image directory. Look for the system sources (or an alias to it) first in  	the VM directory, then in the image directory. Open the changes and  	sources files and install them in SourceFiles."	| changes fd |	"look for the changes file or an alias to it in the image directory"	fd _ FileDirectory on: (FileDirectory dirPathFor: imageName).	(fd fileExists: changesName)		ifTrue: [changes _ fd oldFileNamed: changesName].	changes ifNotNil:[^changes].	"look for the changes in the current directory"	fd _ DefaultDirectory.	(fd fileExists: changesName)		ifTrue: [changes _ fd oldFileNamed: changesName].	changes ifNotNil:[^changes].	"look for read-only changes in the image directory"	fd _ FileDirectory on: (FileDirectory dirPathFor: imageName).	(fd fileExists: changesName)		ifTrue: [changes _ fd readOnlyFileNamed: changesName].	changes ifNotNil:[^changes].	"look for read-only changes in the current directory"	fd _ DefaultDirectory.	(fd fileExists: changesName)		ifTrue: [changes _ fd readOnlyFileNamed: changesName].	^changes! !!FileDirectory class methodsFor: 'system start up' stamp: 'ar 2/12/2001 15:23'!openSources: sourcesName andChanges: changesName forImage: imageName 	"Initialize the default directory to the image directory and open the  	sources and changes files, if possible. Look for the changes file in  	image directory. Look for the system sources (or an alias to it) first in  	the VM directory, then in the image directory. Open the changes and  	sources files and install them in SourceFiles."	"Note: SourcesName and imageName are full paths; changesName is a  	local name."	| sources changes msg wmsg |	msg _ 'Squeak cannot locate &fileRef.Please check that the file is named properly and is in thesame directory as this image.  Further explanation can foundin the startup window, ''How Squeak Finds Source Code''.'.	wmsg _ 'Squeak cannot write to &fileRef.Please check that you have write permission for this file.You won''t be able to save this image correctly until you fix this.'.	sources _ self openSources: sourcesName forImage: imageName.	changes _ self openChanges: changesName forImage: imageName.	((sources == nil or: [sources atEnd])		and: [Preferences valueOfFlag: #warnIfNoSourcesFile])		ifTrue: 			[PopUpMenu notify: (msg copyReplaceAll: '&fileRef' with: 'the sources file named ' , sourcesName).			Smalltalk platformName = 'Mac OS'				ifTrue: [PopUpMenu notify: 'Make sure the sources file is not an Alias.']].	(changes == nil and: [Preferences valueOfFlag: #warnIfNoChangesFile])		ifTrue: [PopUpMenu notify: (msg copyReplaceAll: '&fileRef' with: 'the changes file named ' , changesName)].	(Preferences valueOfFlag: #warnIfNoChangesFile) ifTrue: [		changes isReadOnly ifTrue:[			PopUpMenu notify: 				(wmsg copyReplaceAll: '&fileRef' with: 'the changes file named ' , changesName)].		((changes next: 200) includesSubString: String crlf) ifTrue: [			PopUpMenu notify: 'The changes file named ' , changesName, 'has been injured by an unpacking utility.  Crs were changed to CrLfs.Please set the preferences in your decompressing program to "do not convert text files" and unpack the system again.']].	SourceFiles _ Array with: sources with: changes! !!FileDirectory class methodsFor: 'system start up' stamp: 'ar 2/12/2001 15:19'!openSources: fullSourcesName forImage: imageName 	"Initialize the default directory to the image directory and open the  	sources and changes files, if possible. Look for the changes file in  	image directory. Look for the system sources (or an alias to it) first in  	the VM directory, then in the image directory. Open the changes and  	sources files and install them in SourceFiles."	| sources fd sourcesName |	sourcesName _ FileDirectory localNameFor: fullSourcesName.	"look for the sources file or an alias to it in the VM's directory"	fd _ FileDirectory on: Smalltalk vmPath.	(fd fileExists: sourcesName)		ifTrue: [sources _ fd readOnlyFileNamed: sourcesName].	sources ifNotNil:[^sources].	"look for the sources file or an alias to it in the image directory"	fd _ FileDirectory on: (FileDirectory dirPathFor: imageName).	(fd fileExists: sourcesName)		ifTrue: [sources _ fd readOnlyFileNamed: sourcesName].	sources ifNotNil:[^sources].	"look for the sources in the current directory"	fd _ DefaultDirectory.	(fd fileExists: sourcesName)		ifTrue: [sources _ fd readOnlyFileNamed: sourcesName].	^sources! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'ar 2/12/2001 15:24'!assureStartupStampLogged	"If there is a startup stamp not yet actually logged to disk, do it now."	| changesFile |	StartupStamp ifNil: [^ self].	(SourceFiles isNil or: [(changesFile _ SourceFiles at: 2) == nil]) ifTrue: [^ self].	changesFile isReadOnly ifTrue:[^self].	changesFile setToEnd; cr; cr.	changesFile nextChunkPut: StartupStamp asString; cr.	StartupStamp _ nil.	self forceChangesToDisk.! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'ar 2/12/2001 15:24'!logChange: aStringOrText 	"Write the argument, aString, onto the changes file."	| aString changesFile |	(SourceFiles isNil or: [(SourceFiles at: 2) == nil]) ifTrue: [^ self].	self assureStartupStampLogged.	aStringOrText isText		ifTrue: [aString _ aStringOrText string]		ifFalse: [aString _ aStringOrText].	(aString isMemberOf: String)		ifFalse: [self error: 'can''t log this change'].	(aString findFirst: [:char | char isSeparator not]) = 0		ifTrue: [^ self].  "null doits confuse replay"	(changesFile _ SourceFiles at: 2).	changesFile isReadOnly ifTrue:[^self].	changesFile setToEnd; cr; cr.	changesFile nextChunkPut: aString.		"If want style changes in DoIt, use nextChunkPutWithStyle:, and allow Texts to get here"	self forceChangesToDisk.! !