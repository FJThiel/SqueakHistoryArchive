'From Squeak3.8gamma of ''24 November 2004'' [latest update: #6485] on 26 November 2004 at 5:45:43 pm'!"Change Set:		releaseBuilder-mirDate:			26 November 2004Author:			Michael RuegerMoves the release cleanup code to the new ReleaseBuilder classes.ReleaseBuilder zaps all change setsReleaseBuilderDeveloper keeps the change setsReleaseBuilderSqueakland zaps everything and applies Squeakland specific settings and version information"!!ReleaseBuilder commentStamp: '<historical>' prior: 0!I'm responsible to help people releasing various distribution of Squeak!ReleaseBuilder subclass: #ReleaseBuilderDeveloper	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support'!ReleaseBuilder subclass: #ReleaseBuilderSqueakland	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support'!!Project class methodsFor: 'utilities' stamp: 'mir 11/26/2004 16:15'!removeAll: projects	"Project removeAll: (Project allSubInstances copyWithout: Project current)"	AllProjects _ nil.	Smalltalk garbageCollect.	ProjectHistory currentHistory initialize.	projects do: [:project |		Project deletingProject: project.		StandardScriptingSystem removePlayersIn: project].	Smalltalk garbageCollect.	Smalltalk garbageCollect.! !!Project class methodsFor: 'utilities' stamp: 'mir 11/26/2004 15:22'!removeAllButCurrent	"Project removeAllButCurrent"	AllProjects _ nil.	Smalltalk garbageCollect.	self removeAll: (Project allSubInstances copyWithout: Project current).	AllProjects _ nil.	Smalltalk garbageCollect.	Smalltalk garbageCollect.	Project rebuildAllProjects.	^AllProjects! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/26/2004 16:19'!cleanUpChanges	"Clean up the change sets"	"ReleaseBuilder new cleanUpChanges"		| projectChangeSetNames |	"Delete all changesets except those currently used by existing projects."	projectChangeSetNames _ Project allSubInstances collect: [:proj | proj changeSet name].	ChangeSorter removeChangeSetsNamedSuchThat:		[:cs | (projectChangeSetNames includes: cs) not].! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/26/2004 15:28'!cleanUpEtoys	"ReleaseBuilder new cleanUpEtoys"	StandardScriptingSystem removeUnreferencedPlayers.	(self confirm: 'Remove all projects and players?')		ifFalse: [^self].	Project removeAllButCurrent.	#('Morphic-UserObjects' 'EToy-UserObjects' 'Morphic-Imported' )		do: [:each | SystemOrganization removeSystemCategory: each]! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/26/2004 15:33'!finalCleanup	"ReleaseBuilder new finalCleanup"	Smalltalk forgetDoIts.	DataStream initialize.	Behavior flushObsoleteSubclasses.	"The pointer to currentMethod is not realy needed (anybody care to fix this) and often holds on to obsolete bindings"	MethodChangeRecord allInstancesDo: [:each | each noteNewMethod: nil].	self cleanUpEtoys.	SmalltalkImage current fixObsoleteReferences.	Smalltalk flushClassNameCache.	3 timesRepeat: [		Smalltalk garbageCollect.		Symbol compactSymbolTable.	].! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:41'!finalStripping	"ReleaseBuilder new finalStripping"! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/26/2004 16:19'!initialCleanup	"Perform various image cleanups in preparation for making a Squeak gamma release candidate image."	"ReleaseBuilder new initialCleanup"		Undeclared removeUnreferencedKeys.	StandardScriptingSystem initialize.	(Object classPool at: #DependentsFields) size > 1 ifTrue: [self error:'Still have dependents'].	Undeclared isEmpty ifFalse: [self error:'Please clean out Undeclared'].	Browser initialize.	ScriptingSystem deletePrivateGraphics.  "?"		self cleanUpChanges.	ChangeSet current clear.	ChangeSet current name: 'Unnamed1'.	Smalltalk garbageCollect.	"Reinitialize DataStream; it may hold on to some zapped entitities"	DataStream initialize.	Smalltalk garbageCollect.	ScheduledControllers _ nil.	Smalltalk garbageCollect.		SMSqueakMap default purge.	! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/25/2004 16:25'!installPreferences	Preferences initialize.	Preferences chooseInitialSettings.! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/26/2004 11:02'!installReleaseSpecifics	"ReleaseBuilder new installReleaseSpecifics"! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:53'!installVersionInfo	"ReleaseBuilder new installVersionInfo"! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:58'!prepareReleaseImage	"Perform various image cleanups in preparation for making a Squeak gamma release candidate image."	"ReleaseBuilder new prepareReleaseImage"		(self confirm: 'Are you sure you want to prepare a release image?This will perform several irreversible cleanups on this image.')		ifFalse: [^ self].	self		initialCleanup;		installPreferences;		finalStripping;		installReleaseSpecifics;		finalCleanup;		installVersionInfo! !!ReleaseBuilderDeveloper methodsFor: 'utilities' stamp: 'mir 11/26/2004 16:18'!cleanUpChanges	"Clean up the change sets"	"ReleaseBuilderDeveloper new cleanUpChanges"	! !!ReleaseBuilderSqueakland methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:14'!finalCleanup	"ReleaseBuilder new initialCleanup"	Smalltalk abandonTempNames.	Smalltalk zapAllOtherProjects.		super finalCleanup! !!ReleaseBuilderSqueakland methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:40'!finalStripping	"ReleaseBuilderSqueakland new finalStripping"	#(#Helvetica #Palatino #Courier #ComicSansMS )		do: [:n | TextConstants				removeKey: n				ifAbsent: []].	Smalltalk		at: #Player		ifPresent: [:superCls | superCls				allSubclassesDo: [:cls | 					cls isSystemDefined						ifFalse: [cls removeFromSystem].					cls := nil]].	Smalltalk garbageCollect.	Smalltalk discardFFI; discardSUnit; discardSpeech; yourself.	"discardMVC;"	SystemOrganization removeEmptyCategories.! !!ReleaseBuilderSqueakland methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:19'!initialCleanup	"ReleaseBuilder new initialCleanup"	Browser initialize.	ChangeSorter removeChangeSetsNamedSuchThat:		[:cs| cs name ~= ChangeSet current name].	super initialCleanup! !!ReleaseBuilderSqueakland methodsFor: 'utilities' stamp: 'mir 11/25/2004 16:30'!installPreferences	#(		(honorDesktopCmdKeys false)		(warnIfNoChangesFile false)		(warnIfNoSourcesFile false)		(showDirectionForSketches true)		(menuColorFromWorld false)		(unlimitedPaintArea true)		(useGlobalFlaps false)		(mvcProjectsAllowed false)		(projectViewsInWindows false)		(automaticKeyGeneration true)		(securityChecksEnabled true)		(showSecurityStatus false)		(startInUntrustedDirectory true)		(warnAboutInsecureContent false)		(promptForUpdateServer false)		(fastDragWindowForMorphic false)		(externalServerDefsOnly true)		(expandedFormat false)		(allowCelesteTell false)		(eToyFriendly true)		(eToyLoginEnabled true)		(magicHalos true)		(mouseOverHalos true)		(biggerHandles false)		(selectiveHalos true)		(includeSoundControlInNavigator true)		(readDocumentAtStartup true)		(preserveTrash true)		(slideDismissalsToTrash true)		(propertySheetFromHalo true)	) do:[:spec|		Preferences setPreference: spec first toValue: spec last].	"Workaround for bug"	Preferences enable: #readDocumentAtStartup.! !!ReleaseBuilderSqueakland methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:51'!installReleaseSpecifics	"ReleaseBuilderSqueakland new installReleaseSpecifics"	| serverName serverURL serverDir updateServer |	ProjectLauncher splashMorph: (FileDirectory default readOnlyFileNamed: 'scripts\SqueaklandSplash.morph') fileInObjectAndCode.	"Dump all morphs so we don't hold onto anything"	World submorphsDo:[:m| m delete].	World color: (Color r: 0.9 g: 0.9 b: 1.0).	"Clear all server entries"	ServerDirectory serverNames do: [:each | ServerDirectory removeServerNamed: each].	SystemVersion current resetHighestUpdate.	"Add the squeakalpha update stream"	serverName _ 'Squeakalpha'.	serverURL _ 'squeakalpha.org'.	serverDir _ serverURL , '/'.	updateServer _ ServerDirectory new.	updateServer		server: serverURL;		directory: 'updates/';		altUrl: serverDir;		user: 'sqland';		password: nil.	Utilities updateUrlLists addFirst: {serverName. {serverDir. }.}.	"Add the squeakland update stream"	serverName _ 'Squeakland'.	serverURL _ 'squeakland.org'.	serverDir _ serverURL , '/'.	updateServer _ ServerDirectory new.	updateServer		server: serverURL;		directory: 'public_html/updates/';		altUrl: serverDir.	Utilities updateUrlLists addFirst: {serverName. {serverDir. }.}.! !!ReleaseBuilderSqueakland methodsFor: 'utilities' stamp: 'mir 11/25/2004 17:52'!installVersionInfo	"ReleaseBuilderSqueakland new installVersionInfo"	| highestUpdate newVersion |	highestUpdate _ SystemVersion current highestUpdate.	(self confirm: 'Reset highest update (' , highestUpdate printString , ')?')		ifTrue: [SystemVersion current highestUpdate: 0].	newVersion _ FillInTheBlank request: 'New version designation:' initialAnswer: 'Squeakland 3.8.' , highestUpdate printString. 	SystemVersion newVersion: newVersion.	(self confirm: self version , 'Is this the correct version designation?If not, choose no, and fix it.') ifFalse: [^ self].! !!SmalltalkImage methodsFor: 'image cleanup' stamp: 'mir 11/26/2004 15:33'!fixObsoleteReferences	"SmalltalkImage current fixObsoleteReferences"	| informee obsoleteBindings obsName realName realClass |	Smalltalk garbageCollect; garbageCollect.	Preference allInstances do: [:each | 		informee _ each instVarNamed: #changeInformee.		((informee isKindOf: Behavior)			and: [informee isObsolete])			ifTrue: [				Transcript show: 'Preference: '; show: each name; cr.				each instVarNamed: #changeInformee put: (Smalltalk at: (informee name copyReplaceAll: 'AnObsolete' with: '') asSymbol)]]. 	CompiledMethod allInstances do: [:method |		obsoleteBindings _ method literals select: [:literal |			literal isVariableBinding				and: [literal value isBehavior]				and: [literal value isObsolete]].		obsoleteBindings do: [:binding |			obsName _ binding value name.			Transcript show: 'Binding: '; show: obsName; cr.			realName _ obsName copyReplaceAll: 'AnObsolete' with: ''.			realClass _ Smalltalk at: realName asSymbol ifAbsent: [UndefinedObject].			binding isSpecialWriteBinding				ifTrue: [binding privateSetKey: binding key value: realClass]				ifFalse: [binding key: binding key value: realClass]]].	Behavior flushObsoleteSubclasses.	Smalltalk garbageCollect; garbageCollect.	SystemNavigation default obsoleteBehaviors size > 0		ifTrue: [			SystemNavigation default obsoleteBehaviors inspect.			self error:'Still have obsolete behaviors. See inspector'].! !!StandardScriptingSystem class methodsFor: 'utilities' stamp: 'mir 11/26/2004 16:14'!removePlayersIn: project	"Remove existing player references for project"	References keys do: 		[:key | (References at: key) costume pasteUpMorph == project world			ifTrue: [References removeKey: key]].! !!StandardScriptingSystem class methodsFor: 'utilities' stamp: 'mir 11/25/2004 19:01'!removeUnreferencedPlayers	"Remove existing but unreferenced player references"	"StandardScriptingSystem removeUnreferencedPlayers"	References keys do: 		[:key | (References at: key) costume pasteUpMorph			ifNil: [References removeKey: key]].! !SystemDictionary removeSelector: #makeSqueaklandRelease!SmalltalkImage removeSelector: #prepareReleaseImage!