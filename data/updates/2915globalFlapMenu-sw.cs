'From Squeak2.9alpha of 5 August 2000 [latest update: #2960] on 6 November 2000 at 3:59:43 pm'!"Change Set:		globalFlapMenu-swDate:			6 November 2000Author:			Scott Wallace* Allows each project to decide which global flaps should show within it.* Allows any flap easily to be toggled back and forth between being global and being local.* Suppress the directional halo-handles for objects that really should not have them.* Enhance UpdatingMenuItemMorph so that its wording selector can have a parameter.* Extends Bob Arning's menu-constructor mechnism (TheWorldMenu.fillIn:from:) so that it can specify an enablement selector for items.* Make various MenuMorph constructor methods return the item they have just added."!MenuItemMorph subclass: #UpdatingMenuItemMorph	instanceVariableNames: 'wordingProvider wordingSelector enablementSelector wordingArgument '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!!CurrentProjectRefactoring class methodsFor: 'as yet unclassified' stamp: 'sw 11/6/2000 15:37'!isFlapEnabled: aFlapTab	"Answer whether the given flap tab is enabled in the current project"	^ self xxxCurrent isFlapEnabled: aFlapTab! !!Morph methodsFor: 'halos and balloon help' stamp: 'sw 11/6/2000 14:06'!mightEntertainDirectionHandles	"Answer whether the receiver, by its very nature, might possibly be happy to have direction handles shown for it in its halo"	^ true! !!FlapTab methodsFor: 'menu' stamp: 'sw 11/6/2000 14:52'!addCustomMenuItems: aMenu hand: aHandMorph	"Add further items to the menu as appropriate"	aMenu addUpdating: #edgeString action: #setEdgeToAdhereTo.	aMenu addLine.	aMenu addUpdating: #textualTabString action: #textualTab.	aMenu addUpdating: #graphicalTabString action: #graphicalTab.	aMenu addUpdating: #solidTabString enablement: #notSolid action: #solidTab.	aMenu addLine.	(referent isKindOf: PasteUpMorph) ifTrue: 		[aMenu addUpdating: #partsBinString action: #togglePartsBinMode].	aMenu addUpdating: #dragoverString action: #toggleDragOverBehavior.	aMenu addUpdating: #mouseoverString action: #toggleMouseOverBehavior.	aMenu addLine.	aMenu addUpdating: #isGlobalFlapString action: #toggleIsGlobalFlap.	aMenu balloonTextForLastItem: 'If checked, this flap will be available in all morphic projects; if not, it will be private to this project.,'.	aMenu addLine.	aMenu add: 'destroy this flap' action: #destroyFlap.	"aMenu addUpdating: #slideString action: #toggleSlideBehavior.	aMenu addUpdating: #inboardString action: #toggleInboardness.	aMenu addUpdating: #thicknessString ('thickness... (current: ', self thickness printString, ')') action: #setThickness."! !!FlapTab methodsFor: 'globalness' stamp: 'sw 11/6/2000 14:15'!isGlobalFlap	"Answer whether the receiver is currently a Global flap"	^ Utilities globalFlapTabsIfAny includes: self! !!FlapTab methodsFor: 'globalness' stamp: 'sw 11/6/2000 15:38'!isGlobalFlapString	"Answer a string to construct a menu item representing control over whether the receiver is or is not a global flap"	^ (self isGlobalFlap		ifTrue:			['<yes>']		ifFalse:			['<no>']), 'global (sharable by all projects)'! !!FlapTab methodsFor: 'globalness' stamp: 'sw 11/6/2000 14:56'!toggleIsGlobalFlap	"Toggle whether the receiver is currently a global flap or not"	| oldWorld |	self hideFlap.  "In case showing"	oldWorld _ self currentWorld.	self isGlobalFlap		ifTrue:			[Utilities removeFromGlobalFlapTabList: self.			oldWorld addMorphFront: self]		ifFalse:			[self delete.			Utilities addGlobalFlap: self.			self currentWorld addGlobalFlaps]		! !!FlapTab methodsFor: 'miscellaneous' stamp: 'sw 11/6/2000 14:07'!mightEntertainDirectionHandles	"Answer whether the receiver, by its very nature, might possibly be happy to have direction handles shown for it in its halo"	^ false! !!FlapTab methodsFor: 'miscellaneous' stamp: 'sw 11/6/2000 15:41'!printOn: aStream	"Append a textual representation of the receiver to aStream"	super printOn: aStream.	aStream nextPutAll: ' "', self wording, '"'! !!HaloMorph methodsFor: 'private' stamp: 'sw 11/6/2000 14:08'!doMenu: evt with: menuHandle	"Ask hand to invoke the halo menu for my inner target."	| menu |	evt hand obtainHalo: self.	self removeAllHandlesBut: nil.  "remove all handles"	self world displayWorld.	menu _ innerTarget buildHandleMenu: evt hand.	innerTarget mightEntertainDirectionHandles ifTrue:		[self showingDirectionHandles			ifTrue: [menu add: 'hide direction handles' target: self selector: #showDirectionHandles: argument: false]			ifFalse: [menu add: 'show direction handles' target: self selector: #showDirectionHandles: argument: true]].	innerTarget addTitleForHaloMenu: menu.	menu popUpEvent: evt in: self world.! !!MenuMorph methodsFor: 'construction' stamp: 'sw 11/6/2000 13:44'!add: aString target: target selector: aSymbol argumentList: argList	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object with the given arguments. If the selector takes one more argument than the number of arguments in the given list, then the triggering event is supplied as as the last argument.  Answer the appended menu item."	| item |	item _ MenuItemMorph new		contents: aString;		target: target;		selector: aSymbol;		arguments: argList asArray.	self addMorphBack: item.	^ item! !!MenuMorph methodsFor: 'construction' stamp: 'sw 11/6/2000 13:39'!addUpdating: wordingSelector enablementSelector: enablementSelector target: target selector: aSymbol argumentList: argList	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object with the given arguments. If the selector takes one more argument than the number of arguments in the given list, then the triggering event is supplied as as the last argument.  In this variant, the wording of the menu item is obtained by sending the wordingSelector to the target, and the optional enablementSelector determines whether or not the item should be enabled.  Answer the item itself."	| item |	item _ UpdatingMenuItemMorph new		target: target;		selector: aSymbol;		wordingProvider: target wordingSelector: wordingSelector;		enablementSelector: enablementSelector;		arguments: argList asArray.	self addMorphBack: item.	^ item! !!MenuMorph methodsFor: 'construction' stamp: 'sw 11/6/2000 13:43'!addUpdating: wordingSelector target: target selector: aSymbol argumentList: argList	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object with the given arguments. If the selector takes one more argument than the number of arguments in the given list, then the triggering event is supplied as as the last argument.  In this variant, the wording of the menu item is obtained by sending the wordingSelector to the target,  Answer the item added."	| item |	item _ UpdatingMenuItemMorph new		target: target;		selector: aSymbol;		wordingProvider: target wordingSelector: wordingSelector;		arguments: argList asArray.	self addMorphBack: item.	^ item! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 11/6/2000 14:08'!mightEntertainDirectionHandles	"Answer whether the receiver, by its very nature, might possibly be happy to have direction handles shown for it in its halo"	^ false! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 11/6/2000 11:41'!addGlobalFlaps 	"Must make global flaps adapt to world.  Do this even if not shown, so the old world will not be pointed at by the flaps."	| use thisWorld |	use _ true.	(Preferences valueOfFlag: #useGlobalFlaps) ifFalse: [use _ false].	CurrentProjectRefactoring currentFlapsSuppressed ifTrue: [use _ false].	"Smalltalk isMorphic ifFalse: [use _ false]."	thisWorld _ use 		ifTrue: [self]		ifFalse: [(PasteUpMorph new) initForProject:  "fake to be flap owner"						WorldState new;					bounds: (0@0 extent: 4000@4000);					viewBox: (0@0 extent: 4000@4000)].		Utilities globalFlapTabs do: [:aFlapTab |		(CurrentProjectRefactoring isFlapEnabled: aFlapTab) ifTrue:			[(aFlapTab world == thisWorld) ifFalse:				[thisWorld addMorphFront: aFlapTab.				aFlapTab adaptToWorld: thisWorld].	"always do"			use ifTrue: [				aFlapTab spanWorld.				aFlapTab adjustPositionAfterHidingFlap.				aFlapTab flapShowing ifTrue: [aFlapTab showFlap]]]]."	Utilities clobberFlapTabList.	Utilities initializeStandardFlaps.	self currentWorld deleteAllFlapArtifacts.	self currentWorld addGlobalFlaps."! !!Project methodsFor: 'project parameters' stamp: 'sw 11/6/2000 15:22'!cleanseDisabledGlobalFlapsList	"Make certain that the items on the disabled-global-flap list are actually global flaps, and if not, get rid of them"	| disabledFlaps currentGlobals |	disabledFlaps _ self parameterAt: #disabledGlobalFlaps ifAbsent: [^ self].	currentGlobals _ Utilities globalFlapTabsIfAny.	disabledFlaps _ disabledFlaps select: [:aFlapTab | currentGlobals includes: aFlapTab].	self projectParameterAt: #disabledGlobalFlaps put: disabledFlaps! !!Project methodsFor: 'project parameters' stamp: 'sw 11/6/2000 15:28'!enableDisableGlobalFlap: aFlapTab	"Toggle the enable/disable status of the given global flap"	| disabledFlaps |	disabledFlaps _ self parameterAt: #disabledGlobalFlaps ifAbsent: [self projectParameterAt: #disabledGlobalFlaps put: Set new].	aFlapTab hideFlap.  "in case open"	(disabledFlaps includes: aFlapTab)		ifTrue:			[disabledFlaps remove: aFlapTab.			self currentWorld addGlobalFlaps]		ifFalse:			[disabledFlaps add: aFlapTab.			aFlapTab delete].	self cleanseDisabledGlobalFlapsList	! !!Project methodsFor: 'project parameters' stamp: 'sw 11/6/2000 11:20'!globalFlapEnabledString: aFlapTab	"Answer the string to be shown in a menu to represent the status of the givne flap regarding whether it it should be shown in this project."	^ (self isFlapEnabled: aFlapTab)		ifTrue:			['<on>', aFlapTab wording]		ifFalse:			['<off>', aFlapTab wording]! !!Project methodsFor: 'project parameters' stamp: 'sw 11/6/2000 15:18'!isFlapEnabled:  aFlapTab	"Answer whether the given flap tab is enabled in this project"	| disabledFlaps  |	disabledFlaps _ self parameterAt: #disabledGlobalFlaps ifAbsent: [^ true].	^ (disabledFlaps includes: aFlapTab) not! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 11/6/2000 15:16'!fillIn: aMenu from: dataForMenu	"A menu constructor utility by RAA.  dataForMenu is a list of items which mean:			nil							Indicates to add a line			first element is symbol		Add updating item with the symbol as the wording selector			second element is a list		second element has the receiver and selector			first element is a string		Add menu item with the string as its wording			second element is a list		second element has the receiver and selector			a third element exists		Use it as the balloon text			a fourth element exists		Use it as the enablement selector (updating case only)"	| item |	dataForMenu do: [ :itemData |		itemData ifNil: [aMenu addLine] ifNotNil:			[item _ (itemData first isKindOf: Symbol)				ifTrue: 					[aMenu 						addUpdating: itemData first 						target: self 						selector: #doMenuItem:with: 						argumentList: {itemData second}]				 ifFalse:					[aMenu 						add: itemData first 						target: self 						selector: #doMenuItem:with: 						argumentList: {itemData second}].			itemData size >= 3 ifTrue:				[aMenu balloonTextForLastItem: itemData third.			itemData size >= 4 ifTrue:				[item enablementSelector: itemData fourth]]]].	^ aMenu! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'sw 11/6/2000 13:56'!globalFlapsEnabled	"Answer whether global flaps are enabled"	^ Preferences useGlobalFlaps! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'sw 11/6/2000 13:54'!newGlobalFlapString	"Answer a string for the new-global-flap item in the flap menu"	^ 'new global flap...'! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'sw 11/6/2000 13:52'!whichGlobalFlapsString	"Answer a string for the which-global-flaps menu item"	^ 'which global flaps...'! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'sw 11/6/2000 14:50'!windowsMenu        "Build the windows menu for the world."        ^ self fillIn: (self menu: 'windows & flaps...') from: {                  { 'find window' . { #myWorld . #findWindow: }. 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'}.                { 'find changed browsers...' . { #myWorld . #findDirtyBrowsers: }. 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.                { 'find changed windows...' . { #myWorld . #findDirtyWindows: }. 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.			 nil.                { #staggerPolicyString . { self . #toggleWindowPolicy }. 'stagger: new windows positioned so you can see a portion of each one.                tile: new windows positioned so that they do not overlap others, if possible.'}.                nil.                { 'collapse all windows' . { #myWorld . #collapseAll }. 'Reduce all open windows to collapsed forms that only show titles.'}.                { 'expand all windows' . { #myWorld . #expandAll }. 'Expand all collapsed windows back to their expanded forms.'}.                nil.                { 'delete unchanged windows' . { #myWorld . #closeUnchangedWindows }. 'Deletes all windows that do not have unsaved text edits.'}.                { 'delete non-windows' . { #myWorld . #deleteNonWindows }. 'Deletes all non-window morphs lying on the world.'}.                { 'delete both of the above' . { self .#cleanUpWorld }. 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'}.                nil.            "    { #suppressFlapsString . { self . #toggleFlapSuppressionInProject }. 'Governs whether flaps should be shown in this project'}."                { #useGlobalFlapsString . { self. #toggleWhetherToUseGlobalFlaps }. 'Governs whether a universal set of "global" flaps should be sharable by all morphic projects.'}.			{ #whichGlobalFlapsString . { Utilities. #offerGlobalFlapsMenu }. 'Put up a menu that allows you to choose which global flaps to show in this project'. #globalFlapsEnabled}.                { #newGlobalFlapString  . { Utilities . #addGlobalFlap }. 'Create a new flap that will be shared by all morphic projects'.  #globalFlapsEnabled}.                nil.                { 'new project flap...'  . { Utilities . #addLocalFlap }. 'Create a new flap to be used only in this project.'}.                { 'add stack-tools flap'  . { Utilities . #addStackToolsFlap }. 'Add a flap in this project that offers tools for creating stacks and cards.'}.				nil.                { 'about flaps...' . { Utilities . #explainFlaps }. 'Gives a window full of details about how to use flaps.'}.        }! !!UpdatingMenuItemMorph methodsFor: 'stepping' stamp: 'sw 11/6/2000 14:40'!updateContents	"Update the wording on the receiver"	| newString enablement |	wordingProvider ifNotNil:		[wordingSelector ifNotNil:			[newString _ wordingArgument				ifNotNil:					[wordingProvider perform: wordingSelector with: wordingArgument]				ifNil:					[wordingProvider perform: wordingSelector].			newString = contents ifFalse: [self contents: newString]].		enablementSelector ifNotNil:			[(enablement _ self enablement) == isEnabled ifFalse:				[self isEnabled: enablement]]]! !!UpdatingMenuItemMorph methodsFor: 'wording' stamp: 'sw 11/6/2000 09:55'!wordingArgument: anArgument	"Set the receiver's wordingArgument as indicated"	wordingArgument _ anArgument! !!UpdatingMenuItemMorph methodsFor: 'object fileIn' stamp: 'sw 11/6/2000 14:26'!convertbosfcefechisitsawwe0: varDict bosfcefechisitsawwew0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'font' 'emphasis' 'contents' 'hasFocus' 'isEnabled' 'subMenu' 'isSelected' 'target' 'selector' 'arguments' 'wordingProvider' 'wordingSelector' 'enablementSelector').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('wordingArgument')  If a non-nil value is needed, please assign it."! !!Utilities class methodsFor: 'flaps' stamp: 'sw 11/6/2000 13:58'!offerGlobalFlapsMenu	"Put up a menu that lets the user control which global flaps are to be shown in this project"	| aMenu anItem |	aMenu _ MenuMorph new defaultTarget: Project current.	aMenu addTitle: 'Global flaps toshow in this project'.	aMenu addStayUpItem.	Utilities globalFlapTabs do:		[:aFlapTab |			anItem _ aMenu addUpdating: #globalFlapEnabledString: enablementSelector: nil target: Project current selector: #enableDisableGlobalFlap: argumentList: (Array with: aFlapTab).			anItem wordingArgument: aFlapTab].	aMenu popUpForHand: self currentHand in: self currentWorld! !!Utilities class methodsFor: 'flaps' stamp: 'sw 11/6/2000 14:24'!removeFlapTab: aFlapTab keepInList: aBoolean	"Remove the given flap tab from the screen, and, if aBoolean is true, also from the global list"	(FlapTabs ~~ nil and: [FlapTabs includes: aFlapTab])		ifTrue:			[aBoolean ifFalse: [self removeFromGlobalFlapTabList: aFlapTab].			aFlapTab referent delete.			aFlapTab delete]! !!Utilities class methodsFor: 'flaps' stamp: 'sw 11/6/2000 14:23'!removeFromGlobalFlapTabList: aFlapTab	"If the flap tab is in the global list, remove it"	FlapTabs remove: aFlapTab ifAbsent: []! !Utilities class removeSelector: #newGlobalFlapString!Utilities class removeSelector: #whichGlobalFlapsString!!UpdatingMenuItemMorph reorganize!('world' adaptToWorld:)('enablement' enablement enablementSelector:)('stepping' arrangeToStartSteppingIn: step stepTime updateContents)('wording' wordingArgument: wordingProvider:wordingSelector:)('object fileIn' convertbosfcefechisitsawwe0:bosfcefechisitsawwew0:)!!TheWorldMenu reorganize!('as yet unclassified' adaptToWorld: beIsolated changeBackgroundColor cleanUpWorld createStandardPartsBin inspectWorldModel launchCustomPartsBin loadProject lookForSlips menu: mvcProjectsAllowed newMorphOfClass:event: openChangeSorter1 openChangeSorter2 openEmail openFileList openIRC openMVCProject openMorphicProject openSelectorBrowser openTranscript openWorkspace printWorldOnFile projectForMyWorld propagateChanges quitSession readMorphFromAFile saveAndQuit saveSession saveWorldInFile setDisplayDepth splitNewMorphList:depth: startMessageTally startThenBrowseMessageTally world:project:hand: worldMenuHelp)('construction' alphabeticalMorphMenu appearanceMenu buildWorldMenu changesMenu colorForDebugging: debugMenu fillIn:from: helpMenu myMenuColor newMorph openMenu playfieldMenu projectMenu remoteMenu scriptingMenu)('windows & flaps menu' globalFlapsEnabled newGlobalFlapString suppressFlapsString useGlobalFlapsString whichGlobalFlapsString windowsDo windowsMenu)('action' doMenuItem:with: menuColorString projectThumbnail roundedCornersString setGradientColor soundEnablingString staggerPolicyString toggleFlapSuppressionInProject toggleWhetherToUseGlobalFlaps toggleWindowPolicy)('popups' appearanceDo changesDo debugDo doPopUp: helpDo openWindow playfieldDo projectDo remoteDo scriptingDo standardFontDo)!!FlapTab reorganize!('initialization' adaptToWorld initialize preserveDetails)('access' flapShowing isCandidateForAutomaticViewing isGlobal morphicLayerNumber orientation permitsThumbnailing referentThickness tabThickness)('parts bin' partsBinString togglePartsBinMode)('edge' edgeString edgeToAdhereTo edgeToAdhereTo: setEdge: setEdgeToAdhereTo)('menu' addAddHandMenuItemsForHalo:hand: addCustomMenuItems:hand: addTitleForHaloMenu: applyThickness: changeColor changeFlapColor destroyFlap dismissViaHalo flapMenuTitle thicknessString wording)('mouseover & dragover' arrangeToPopOutOnDragOver: arrangeToPopOutOnMouseOver: dragoverString mouseoverString setToPopOutOnDragOver: setToPopOutOnMouseOver: toggleDragOverBehavior toggleMouseOverBehavior)('positioning' adjustPositionVisAVisFlap fitOnScreen layoutChanged mouseMove: mouseUp: ownerChanged positionObject: positionObject:atEdgeOf: positionReferent spanWorld stickOntoReferent transposeParts)('show & hide' adjustPositionAfterHidingFlap hideFlap hideFlapUnlessBearingHalo hideFlapUnlessOverReferent maybeHideFlapOnMouseLeave maybeHideFlapOnMouseLeaveDragging showFlap showFlapIfHandLaden: succeededInRevealing: tabSelected)('textual tabs' assumeString:font:orientation:color: changeTabText existingWording isCurrentlyTextual reformatTextualTab textualTab textualTabString useStringTab: useTextualTab)('graphical tabs' graphicalTab graphicalTabString isCurrentlyGraphical)('solid tabs' applyTabThickness: changeTabSolidity changeTabThickness isCurrentlySolid notSolid solidTab solidTabString useSolidTab)('disused options' inboard inboard: inboardString slideString slidesOtherObjects toggleInboardness toggleSlideBehavior)('rounding' roundedCorners wantsRoundedCorners)('globalness' isGlobalFlap isGlobalFlapString toggleIsGlobalFlap)('miscellaneous' isFlapTab mightEntertainDirectionHandles printOn:)('fileIn/out' objectForDataStream:)!