'From Squeak3.4 of 1 March 2003 [latest update: #5170] on 28 March 2003 at 4:09:32 pm'!"Change Set:		KCP-0014-rmSmalltalkInClassDate:			28 March 2003Author:			stephane ducasse, alexandre bergel, and nathanael schaerliReplace all the Smalltalk by self environment in class Class"!!Class methodsFor: 'initialize-release' stamp: 'sd 3/28/2003 15:24'!removeFromSystem: logged	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."		"tell class to deactivate and unload itself-- two separate events in the module system"	self deactivate; unload.	self superclass ifNotNil:		["If we have no superclass there's nothing to be remembered"		self superclass addObsoleteSubclass: self].	self environment removeClassFromSystem: self logged: logged.	self obsolete! !!Class methodsFor: 'initialize-release' stamp: 'sd 3/28/2003 16:09'!sharing: poolString 	"Set up sharedPools. Answer whether recompilation is advisable."	| oldPools found |	oldPools _ self sharedPools.	sharedPools _ OrderedCollection new.	(Scanner new scanFieldNames: poolString) do: 		[:poolName | 		sharedPools add: (self environment at: poolName asSymbol ifAbsent:[			(self confirm: 'The pool dictionary ', poolName,' does not exist.',						'\Do you want it automatically created?' withCRs)				ifTrue:[self environment at: poolName asSymbol put: Dictionary new]				ifFalse:[^self error: poolName,' does not exist']])].	sharedPools isEmpty ifTrue: [sharedPools _ nil].	oldPools do: [:pool | found _ false.				self sharedPools do: [:p | p == pool ifTrue: [found _ true]].				found ifFalse: [^ true "A pool got deleted"]].	^ false! !!Class methodsFor: 'class name' stamp: 'sd 3/28/2003 15:25'!rename: aString	"The new name of the receiver is the argument, aString."	| newName |	(newName _ aString asSymbol) ~= self name		ifTrue:			[(self environment includesKey: newName)				ifTrue: [^self error: newName , ' already exists'].			(Undeclared includesKey: newName)				ifTrue: [self inform: 'There are references to, ' , aString printString , 'from Undeclared. Check them after this change.'].			self environment renameClass: self as: newName.			name _ newName]! !!Class methodsFor: 'class variables' stamp: 'sd 3/28/2003 15:24'!addClassVarName: aString 	"Add the argument, aString, as a class variable of the receiver.	Signal an error if the first character of aString is not capitalized,	or if it is already a variable named in the class."	| symbol |	aString first isLowercase		ifTrue: [^self error: aString, ' class variable name should be capitalized; proceed to include anyway.'].	symbol _ aString asSymbol.	self withAllSubclasses do: 		[:subclass | 		subclass scopeHas: symbol			ifTrue: [:temp | 					^ self error: aString 						, ' is already used as a variable name in class ' 						, subclass name]].	classPool == nil ifTrue: [classPool _ Dictionary new].	(classPool includesKey: symbol) ifFalse: 		["Pick up any refs in Undeclared"		self environment changes changeClass: self from: self.		classPool declare: symbol from: Undeclared]! !!Class methodsFor: 'compiling' stamp: 'sd 3/28/2003 15:24'!possibleVariablesFor: misspelled continuedFrom: oldResults	| results |	results _ misspelled correctAgainstDictionary: self classPool continuedFrom: oldResults.	self sharedPools do: [:pool | 		results _ misspelled correctAgainstDictionary: pool continuedFrom: results ].	superclass == nil		ifTrue: 			[ ^ misspelled correctAgainstDictionary: self environment continuedFrom: results ]		ifFalse:			[ ^ superclass possibleVariablesFor: misspelled continuedFrom: results ]! !!Class methodsFor: 'subclass creation' stamp: 'sd 3/28/2003 15:24'!newSubclass	| i className |	i _ 1.	[className _ (self name , i printString) asSymbol.	 self environment includesKey: className]		whileTrue: [i _ i + 1].	^ self subclass: className		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: Object categoryForUniclasses"Point newSubclass new"! !!Class methodsFor: 'fileIn/Out' stamp: 'sd 3/28/2003 15:24'!fileOutPool: aPool onFileStream: aFileStream 	| aPoolName aValue |	aPoolName _ self environment keyAtIdentityValue: aPool.	Transcript cr; show: aPoolName.	aFileStream nextPutAll: 'Transcript show: ''' , aPoolName , '''; cr!!'; cr.	aFileStream nextPutAll: 'Smalltalk at: #' , aPoolName , ' put: Dictionary new!!'; cr.	aPool keys asSortedCollection do: [ :aKey |		aValue _ aPool at: aKey.		aFileStream nextPutAll: aPoolName , ' at: #''' , aKey asString , '''', ' put:  '.		(aValue isKindOf: Number)			ifTrue: [aValue printOn: aFileStream]			ifFalse: [aFileStream nextPutAll: '('.					aValue printOn: aFileStream.					aFileStream nextPutAll: ')'].		aFileStream nextPutAll: '!!'; cr].	aFileStream cr! !!Class methodsFor: 'fileIn/Out' stamp: 'sd 3/28/2003 15:24'!fileOutSharedPoolsOn: aFileStream	"file out the shared pools of this class after prompting the user about each pool"	| poolsToFileOut |	poolsToFileOut _ self sharedPools select: 		[:aPool | (self shouldFileOutPool: (self environment keyAtIdentityValue: aPool))].	poolsToFileOut do: [:aPool | self fileOutPool: aPool onFileStream: aFileStream].	! !!Class methodsFor: 'fileIn/Out' stamp: 'sd 3/28/2003 15:24'!removeFromChanges	"References to the receiver, a class, and its metaclass should no longer be included in the system ChangeSet.	7/18/96 sw: call removeClassAndMetaClassChanges:"	self environment changes removeClassAndMetaClassChanges: self! !!Class methodsFor: 'module compatibility' stamp: 'sd 3/28/2003 15:24'!existingCategoryFor: className orConvert: pathArray 	| existing | 	existing _ self environment at: className ifAbsent: [nil].	(existing isKindOf: Class) ifTrue: [^ existing category].	^ String streamContents:			[:s | pathArray do: [:pathSymbol | s nextPutAll: pathSymbol]					separatedBy: [s nextPutAll: '-']]! !!Class class methodsFor: 'fileIn/Out' stamp: 'sd 3/28/2003 15:25'!fileOutPool: aString	"file out the global pool named aString"	| f |	f _ FileStream newFileNamed: aString, '.st'.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: f. 	f close.	! !