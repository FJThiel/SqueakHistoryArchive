'From Squeak3.1alpha of 28 February 2001 [latest update: #4244] on 12 August 2001 at 6:10:28 pm'!"Change Set:		moreFilters-swDate:			12 August 2001Author:			Scott WallaceAdds five more filters to the filter-message-set feature"!!MessageSet methodsFor: 'filtering' stamp: 'sw 8/12/2001 13:12'!filterMessageList	"Allow the user to refine the list of messages."	| aMenu evt |	Smalltalk isMorphic ifFalse: [^ self inform: 'sorry, morphic only at this time.'].	messageList size <= 1 ifTrue: [^ self inform: 'this is not a propitious filtering situation'].	"would like to get the evt coming in but thwarted by the setInvokingView: circumlocution"	evt _ self currentWorld activeHand lastEvent.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: 'Filter by only showing...'.	aMenu addStayUpItem.	aMenu addList: #(		('unsent messages'						filterToUnsentMessages		'filter to show only messages that have no senders')		-		('messages that send...'					filterToSendersOf			'filter to show only messages that send a selector I specify')		('messages that do not send...'			filterToNotSendersOf		'filter to show only messages that do not send a selector I specify')		-		('messages whose selector is...'			filterToImplementorsOf		'filter to show only messages with a given selector I specify')		('messages whose selector is NOT...'		filterToNotImplementorsOf	'filter to show only messages whose selector is NOT a seletor I specify')		-		('messages in current change set'		filterToCurrentChangeSet	'filter to show only messages that are in the current change set')		('messages not in current change set'	filterToNotCurrentChangeSet	'filter to show only messages that are not in the current change set')		-		('messages in any change set'			filterToAnyChangeSet		'filter to show only messages that occur in at least one change set')		('messages not in any change set'		filterToNotAnyChangeSet		'filter to show only messages that do not occur in any change set in the system')		-		('messages authored by me'				filterToCurrentAuthor		'filter to show only messages whose authoring stamp has my initials')		('messages not authored by me'			filterToNotCurrentAuthor	'filter to show only messages whose authoring stamp does not have my initials')		-		('messages logged in .changes file'		filterToMessagesInChangesFile	'filter to show only messages whose latest source code is logged in the .changes file')		('messages only in .sources file'			filterToMessagesInSourcesFile	'filter to show only messages whose latest source code is logged in the .sources file')		-		('messages with prior versions'			filterToMessagesWithPriorVersions	'filter to show only messages that have at least one prior version')		('messages without prior versions'		filterToMessagesWithoutPriorVersions	'filter to show only messages that have no prior versions')		-		('uncommented messages' filterToUncommentedMethods 'filter to show only messages that do not have comments at the beginning')		('commented messages' filterToCommentedMethods 'fileter to show only messages that have comments at the beginning')		-		('messages in hardened classes'			filterToMessagesWithHardenedClasses	'filter to show only messages of established classes (as opposed to Uniclasses such as Player23)')		-		('messages that...'						filterToMessagesThat			'let me type in a block taking a class and a selector, which will specify yea or nay concerning which elements should remain in the list')			).	aMenu popUpEvent: evt hand lastEvent in: evt hand world.! !!MessageSet methodsFor: 'filtering' stamp: 'sw 8/10/2001 14:45'!filterToCommentedMethods	"Filter the receiver's list down to only those items which have comments"	self filterFrom:		[:aClass :aSelector |			(aClass selectors includes: aSelector) and:						[(aClass firstPrecodeCommentFor: aSelector) isEmptyOrNil not]]! !!MessageSet methodsFor: 'filtering' stamp: 'sw 8/10/2001 14:33'!filterToImplementorsOf	"Filter the receiver's list down to only those items with a given selector"	| aFragment inputWithBlanksTrimmed |	aFragment _ FillInTheBlank request: 'type selector:' initialAnswer: ''.	aFragment  isEmptyOrNil ifTrue: [^ self].	inputWithBlanksTrimmed _ aFragment withBlanksTrimmed.	Symbol hasInterned: inputWithBlanksTrimmed ifTrue:		[:aSymbol | 			self filterFrom:				[:aClass :aSelector |					aSelector == aSymbol]]! !!MessageSet methodsFor: 'filtering' stamp: 'sw 8/10/2001 14:34'!filterToNotImplementorsOf	"Filter the receiver's list down to only those items whose selector is NOT one solicited from the user."	| aFragment inputWithBlanksTrimmed |	aFragment _ FillInTheBlank request: 'type selector: ' initialAnswer: ''.	aFragment  isEmptyOrNil ifTrue: [^ self].	inputWithBlanksTrimmed _ aFragment withBlanksTrimmed.	Symbol hasInterned: inputWithBlanksTrimmed ifTrue:		[:aSymbol | 			self filterFrom:				[:aClass :aSelector |					aSelector ~~ aSymbol]]! !!MessageSet methodsFor: 'filtering' stamp: 'sw 8/12/2001 13:11'!filterToNotSendersOf	"Filter the receiver's list down to only those items which do not send a given selector"	| aFragment inputWithBlanksTrimmed aMethod |	aFragment _ FillInTheBlank request: 'type selector:' initialAnswer: ''.	aFragment  isEmptyOrNil ifTrue: [^ self].	inputWithBlanksTrimmed _ aFragment withBlanksTrimmed.	Symbol hasInterned: inputWithBlanksTrimmed ifTrue:		[:aSymbol | 			self filterFrom:				[:aClass :aSelector |					(aMethod _ aClass compiledMethodAt: aSelector) isNil or:						[(aMethod hasLiteralThorough: aSymbol) not]]]! !!MessageSet methodsFor: 'filtering' stamp: 'sw 8/10/2001 14:43'!filterToUncommentedMethods	"Filter the receiver's list down to only those items which lack comments"	self filterFrom:		[:aClass :aSelector |			(aClass selectors includes: aSelector) and:						[(aClass firstPrecodeCommentFor: aSelector) isEmptyOrNil]]! !												!MessageSet methodsFor: 'filtering' stamp: 'sw 8/12/2001 22:25'!filterToMessagesWithPriorVersions	"Filter down only to messages which have at least one prior version"	self filterFrom:		[:aClass :aSelector |			(aClass notNil and: [aSelector notNil]) and:				[(self class isPseudoSelector: aSelector) not and:					[(VersionsBrowser versionCountForSelector: aSelector class: aClass) > 1]]]! !