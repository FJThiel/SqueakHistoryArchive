'From Squeak3.1alpha of 5 February 2001 [latest update: #3833] on 14 March 2001 at 11:27:24 am'!"Change Set:		MPEGFixes2Date:			14 March 2001Author:			Karl Ramberg, Bob ArningHere are some fixing to the MPEGPlayerMorph and MPEGPlayer2.-Removed some unused methods. -Added abillity to play mp3.-Made fileName-extension-casing-bug-workaround platform aware.(Bug only reported on mac. Workaround only checked on mac)-Fixed issue that occured when image/project was saved with MPEGPlayerMorphopen and reffering to a MPEG file, and that MPEG file not was presentwhen opening/loading image/project-General cleanup"!Object subclass: #MPEGPlayer2	instanceVariableNames: 'foo soundQueue startTime audioPlayerProcess videoPlayerProcess timecode volume videoMorph startFrame dropOut time myMpegFile '	classVariableNames: ''	poolDictionaries: ''	category: 'MPEG3-Kernel'!Morph subclass: #MPEGPlayerMorph	instanceVariableNames: 'foo play progress videoMorph volume playOrStop ledWasUndeclared myMpegPlayer '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Media'!!MPEGPlayer2 methodsFor: 'video' stamp: 'RAA 3/14/2001 10:27'!getVideoPicture	| morphsForm |	self mpegFile ifNil: [^nil].	self mpegFile hasVideo ifFalse: [^self].	morphsForm _ videoMorph rotatedForm.	myMpegFile		videoReadNextFrameInto: morphsForm bits		width: morphsForm width		height: morphsForm height		stream: 0.	videoMorph changed.! !!MPEGPlayer2 methodsFor: 'video' stamp: 'RAA 3/14/2001 10:38'!playVideo: aStream	| morphsForm |	dropOut _ OrderedCollection new.	time _  OrderedCollection new.	morphsForm _ self videoMorph rotatedForm.	startTime _ Time millisecondClockValue.	startFrame _ myMpegFile videoGetFrame: aStream.	"delay _ 1000// (myMpegFile videoFrameRate:0)."	videoPlayerProcess _ [		[ (myMpegFile videoGetFrame: 0) <= (myMpegFile videoFrames: 0) ] whileTrue: [			self timing.			 myMpegFile				videoReadNextFrameInto: morphsForm bits				width: morphsForm width				height: morphsForm height				stream: aStream.      		morphsForm displayAt: videoMorph topLeft.			"videoMorph changed."			"(Delay forMilliseconds: delay) wait."		].		videoPlayerProcess _ nil	] forkAt:4	! !!MPEGPlayer2 methodsFor: 'video' stamp: 'RAA 3/14/2001 10:33'!timing		| frameNow frameItShouldBe timeNow frameRate totalFrames delay |	frameRate _ myMpegFile videoFrameRate: 0.	frameNow _ myMpegFile videoGetFrame: 0.	totalFrames _ myMpegFile videoFrames: 0.	delay _ 1000 // frameRate.	timeNow _ Time millisecondsSince: startTime .	frameItShouldBe _ timeNow * frameRate // 1000 + startFrame.	timecode _ frameItShouldBe / totalFrames.	frameNow < frameItShouldBe ifTrue:[		myMpegFile videoDropFrames: (frameItShouldBe - frameNow) stream: 0	] ifFalse: [		frameNow > frameItShouldBe ifTrue:[			(Delay forMilliseconds: frameNow - frameItShouldBe * delay) wait		]	].	"dropOut add:(frameItShouldBe - frameNow)".	 ! !!MPEGPlayer2 methodsFor: 'video' stamp: 'RAA 3/14/2001 10:29'!videoMorph	| y x fum |	myMpegFile hasVideo ifFalse: [^ nil].	videoMorph ifNil: [		y _ myMpegFile videoFrameHeight: 0.		x _ myMpegFile videoFrameWidth: 0.		fum _ Form extent: x @ y depth: 32.		videoMorph _ MPEGImageMorph withForm: fum.		self getVideoPicture.	].	^ videoMorph! !!MPEGPlayer2 methodsFor: 'access' stamp: 'RAA 3/14/2001 10:27'!isPlaying		^videoPlayerProcess notNil or: [audioPlayerProcess notNil]	! !!MPEGPlayer2 methodsFor: 'access' stamp: 'RAA 3/14/2001 10:28'!mpegFile	| answer |	answer _ myMpegFile.	[myMpegFile hasVideo | myMpegFile hasAudio] 		on: Error 		do: [			(self initialize: myMpegFile fileName) ifNil: [answer _ nil]		].	^answer! !!MPEGPlayer2 methodsFor: 'access' stamp: 'RAA 3/14/2001 10:30'!playMPEG	self mpegFile ifNil: [^nil].	myMpegFile hasAudio ifTrue: [self playAudio: 0].	myMpegFile hasVideo ifTrue: [self playVideo: 0].! !!MPEGPlayer2 methodsFor: 'access' stamp: 'RAA 3/14/2001 10:31'!setLocation: aPercentage	self mpegFile ifNil: [^nil].	myMpegFile hasAudio ifTrue: [		myMpegFile 			audioSetSample: ((myMpegFile audioSamples: 0) * aPercentage) rounded			stream: 0	].	myMpegFile hasVideo ifTrue: [		myMpegFile 			videoSetFrame: (( myMpegFile videoFrames:0) * aPercentage) rounded			stream: 0	].     timecode _ aPercentage	! !!MPEGPlayer2 methodsFor: 'access' stamp: 'RAA 3/14/2001 11:17'!stop	videoPlayerProcess ifNotNil: [		videoPlayerProcess terminate.		videoPlayerProcess _ nil.	].	audioPlayerProcess ifNotNil: [		audioPlayerProcess terminate.		audioPlayerProcess _ nil.		SoundPlayer stopPlayerProcess.	].! !!MPEGPlayer2 methodsFor: 'audio' stamp: 'RAA 3/14/2001 11:14'!createSoundFrom: aStream	(myMpegFile audioChannels: aStream) = 2		ifTrue: [self stereo]		ifFalse: [self mono].	! !!MPEGPlayer2 methodsFor: 'audio' stamp: 'RAA 3/14/2001 10:29'!mono	| sound sampleRate buffer |	sound _ MixedSound new.	sampleRate _ myMpegFile audioSampleRate: 0.	buffer _ SoundBuffer newMonoSampleCount: sampleRate.	myMpegFile		audioReadBuffer: buffer		stream: 0		channel: 0.	sound		add: (SampledSound samples: buffer samplingRate: sampleRate)		pan: 0.5		volume: volume.		soundQueue add: sound! !!MPEGPlayer2 methodsFor: 'audio' stamp: 'RAA 3/14/2001 11:15'!playAudio: aStream	| sampleRate number |	soundQueue _ QueueSound new startTime: 0.	number _ 5.	sampleRate _ myMpegFile audioSampleRate: 0.	SoundPlayer		startPlayerProcessBufferSize: 8192 		rate: sampleRate		stereo: true.	2 timesRepeat: [self createSoundFrom: aStream].	soundQueue play.	audioPlayerProcess _ [		[ myMpegFile endOfAudio: aStream] whileFalse: [			[soundQueue sounds size > number] whileTrue: [				myMpegFile hasVideo ifFalse: [					timecode _ myMpegFile getPercentage				].				(Delay forMilliseconds: 3000) wait			].			self createSoundFrom: aStream		].		audioPlayerProcess _ nil	] forkAt:4		! !!MPEGPlayer2 methodsFor: 'audio' stamp: 'RAA 3/14/2001 10:30'!stereo	| sound sampleRate buffer buffer2 |	sound _ MixedSound new.	sampleRate _  myMpegFile audioSampleRate: 0.	buffer _ SoundBuffer newMonoSampleCount: sampleRate .	buffer2 _ SoundBuffer newMonoSampleCount: sampleRate .	myMpegFile		audioReadBuffer: buffer		stream: 0		channel: 0.	sound		add: (SampledSound samples: buffer samplingRate: sampleRate)		pan: 0.0		volume: volume.	myMpegFile		audioReReadBuffer: buffer2		stream: 0		channel: 1.	sound		add: (SampledSound samples: buffer2 samplingRate: sampleRate)		pan: 1.0		volume: volume.	soundQueue add: sound.	! !!MPEGPlayer2 methodsFor: 'initializing' stamp: 'RAA 3/14/2001 10:40'!convertToCurrentVersion: varDict refStream: smartRefStrm		varDict at: 'foo' ifPresent: [ :x | x ifNotNil: [myMpegFile _ x]].! !!MPEGPlayer2 methodsFor: 'initializing' stamp: 'RAA 3/14/2001 10:52'!getRidOfFoo		"one-time method to move instvar"	foo ifNotNil: [		myMpegFile _ foo.		foo _ nil.	].! !!MPEGPlayer2 methodsFor: 'initializing' stamp: 'RAA 3/14/2001 11:15'!initialize: aPath 		(MPEGFile isFileValidMPEG: aPath) ifFalse: [^nil].		timecode _ 0.	myMpegFile ifNotNil: [myMpegFile finalize].	myMpegFile _ MPEGFile openFile: aPath.	self volume ifNil: [ volume _ 1.0].	myMpegFile hasVideo ifTrue: [self videoMorph]			! !!MPEGPlayer2 class methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 11:17'!openFile: aPath	^self new initialize: aPath.! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 11:10'!addButtons	^Morph new		listDirection: #leftToRight;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		changeTableLayout;		color: Color transparent; 		addMorphBack: (			IconicButton new 				labelGraphic: (ScriptingSystem formAtKey: 'openMPEG');				target: self;				color: Color transparent;				borderWidth: 0;				actionSelector: #openMPEGFile		);		addMorphBack: (			IconicButton new 				labelGraphic: (ScriptingSystem formAtKey: 'volumeMPEG');				target: self;				color: Color transparent;				borderWidth: 0;				actionSelector: #setVolume		);		addMorphBack: (			play _ IconicButton new 				labelGraphic: (ScriptingSystem formAtKey: 'playMPEG');				target: self;				color: Color transparent;				borderWidth: 0;				actionSelector: #playMPEG		)! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 10:41'!convertToCurrentVersion: varDict refStream: smartRefStrm		varDict at: 'foo' ifPresent: [ :x | x ifNotNil: [myMpegPlayer _ x]].! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 10:52'!getRidOfFoo		"one-time method to move instvar"	foo ifNotNil: [		myMpegPlayer _ foo.		foo _ nil.	].! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 11:04'!initialize		| alignment |	super initialize.		volume _ VolumeMorph new extent: 13@75; value: 1.0.	progress _ Slider new extent: 120@13.	alignment _ Morph new listDirection: #leftToRight;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		changeTableLayout;		color: Color transparent;		addMorphBack: self addButtons;		addMorphBack: progress;		addTransparentSpacerOfSize: 4@1.     self 		listDirection: #topToBottom;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		changeTableLayout;		color: Color orange;		addMorph: alignment		! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 11:10'!openMPEGFile	| file |	file _ (FileList2 modalFileSelectorForSuffixes: #('mp3' 'mpg' 'mpeg')) fullName.	file ifNil: [^self].	(FileDirectory activeDirectoryClass isCaseSensitive) ifTrue:[		((FileDirectory extensionFor: file) anySatisfy: [ :ch | ch isUppercase]) ifTrue: [			^self inform: 'MPEG file extension must be lowercase!!'		]	] ifFalse: [		file _ file asLowercase	].	myMpegPlayer _ MPEGPlayer2 openFile: file.	myMpegPlayer ifNil: [^nil].	videoMorph ifNotNil: [videoMorph delete. videoMorph _ nil].	myMpegPlayer videoMorph		ifNotNil: [self addMorph: (videoMorph _ myMpegPlayer videoMorph)].			progress setValue: 0! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 11:12'!playMPEG	myMpegPlayer ifNil: [^self inform: 'No MPEGFile !!'].	myMpegPlayer mpegFile ifNil: [^self inform: 'The path to the MPEGFile is invalid !!'].	 	myMpegPlayer playMPEG.	self setPlayOrStop			! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 11:12'!playOrStop	playOrStop ifFalse: [		play  			labelGraphic: (ScriptingSystem formAtKey: 'playMPEG');			actionSelector: #playMPEG	] ifTrue: [		play			labelGraphic: (ScriptingSystem formAtKey: 'stopMPEG');			actionSelector: #stopPlaying	]		! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 10:22'!setPlayOrStop	playOrStop _ myMpegPlayer isPlaying.	self playOrStop	! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 11:13'!setVolume	volume 		openInWorld;		position: play position - (18@20 negated).! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 10:25'!step	myMpegPlayer ifNil: [^self].	myMpegPlayer mpegFile ifNil: [^self].		playOrStop = myMpegPlayer isPlaying ifFalse: [		self setPlayOrStop	].	myMpegPlayer isPlaying ifTrue: [		progress setValue: myMpegPlayer timecode	] ifFalse: [		progress value = myMpegPlayer timecode ifFalse: [			myMpegPlayer setLocation: progress value.			myMpegPlayer getVideoPicture		]	].	(myMpegPlayer volume) = (volume value) ifFalse: [		myMpegPlayer volume: volume value.	]! !!MPEGPlayerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/14/2001 10:21'!stopPlaying	myMpegPlayer ifNil: [^self].	myMpegPlayer stop.	myMpegPlayer setLocation: progress value.     self setPlayOrStop.			! !MPEGPlayerMorph removeSelector: #addLed!MPEGPlayerMorph removeSelector: #addProgress!MPEGPlayerMorph removeSelector: #addVolume!MPEGPlayerMorph removeSelector: #fileNameToLed:!MPEGPlayerMorph removeSelector: #playMPEG:video:audio:x:y:!MPEGPlayerMorph removeSelector: #playWhatEver:!MPEGPlayer2 removeSelector: #foo!"Postscript:Move contents of foo to their new home."MPEGPlayer2 allInstancesDo: [ :x | x getRidOfFoo].MPEGPlayerMorph allInstancesDo: [ :x | x getRidOfFoo].!