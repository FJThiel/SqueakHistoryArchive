'From Squeak3.6alpha of ''17 March 2003'' [latest update: #5179] on 14 April 2003 at 8:32:33 pm'!"Change Set:		dynamicFlaps-asmDate:			13 March 2003Author:			Alejandro Magistrellonow a tool can register itself to live in a flapfor an example:-select the next two lines and do itFlaps registerQuad: #(FileList2 openMorphicViewInWorld	'Enhanced File List'	'A nicer File List.')	forFlapNamed: 'Tools'.Flaps replaceToolsFlap-if you don''t like the FileList2 in the tools flap, remove it with the next two lines:Flaps unregisterQuadsWithReceiver: FileList2 fromFlapNamed:'Tools'.Flaps replaceToolsFlapa more drastic test is the following:-- unregister all classesObject withAllSubclasses do: [:aClass |			(aClass class includesSelector: #registerInFlapsRegistry)			ifTrue:[Flaps unregisterQuadsWithReceiver: aClass ]				]--plus one special caseFlaps unregisterQuadsWithReceiver: ScriptingSystem-- replace the FlapsFlaps replaceGlobalFlapwithID: 'Tools';replaceGlobalFlapwithID: 'Supplies';replaceGlobalFlapwithID: 'Stack Tools';replaceGlobalFlapwithID: 'Widgets'.- look at the flaps, but don''t panic ;-)-- register all classesObject withAllSubclasses do: [:aClass |			(aClass class includesSelector: #registerInFlapsRegistry)			ifTrue:[aClass registerInFlapsRegistry ]				]-- replace flaps againFlaps replaceGlobalFlapwithID: 'Tools';replaceGlobalFlapwithID: 'Supplies';replaceGlobalFlapwithID: 'Stack Tools';replaceGlobalFlapwithID: 'Widgets'.- if the flaps are still empty, call an ambulance"!Object subclass: #Flaps	instanceVariableNames: ''	classVariableNames: 'FlapsQuads SharedFlapTabs SharedFlapsAllowed '	poolDictionaries: ''	category: 'Morphic-Flaps'!!Flaps commentStamp: 'asm 3/13/2003 12:46' prior: 0!ClassVariablesFlapsQuads               quads defining predefined flaps			default flaps are: 'PlugIn Supplies', 'Stack Tools', 'Supplies', 'Tools', 'Widgets' and 'Scripting'SharedFlapTabs          an  array of flaps shared between squeak projectsSharedFlapsAllowed     boolean!!BouncingAtomsMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:57'!initialize	self registerInFlapsRegistry.	! !!BouncingAtomsMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:58'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(BouncingAtomsMorph	new	'Bouncing Atoms'	'Atoms, mate')						forFlapNamed: 'Widgets']! !!BouncingAtomsMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:32'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!Browser class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:27'!initialize	"Browser initialize"	RecentClasses := OrderedCollection new.	self registerInFlapsRegistry.	! !!Browser class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:32'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(#Browser #prototypicalToolWindow 'Browser' 'A Browser is a tool that allows you to view all the code of all the classes in the system' ) 						forFlapNamed: 'Tools']! !!Browser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:32'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!Celeste class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:37'!initialize	"Celeste initialize"	"user preferences"	CCList _ nil.	DeleteInboxAfterFetching _ false.	PopServer _ nil.	PopUserName _ nil.	SmtpServer _ nil.	SuppressWorthlessHeaderFields _ true.	UserName _ nil.	"options with no UI; just set their values directly"	FormatWhenFetching _ false.	"dictionary of custom filters"	CustomFilters _ Dictionary new.	MessageCountLimit _ 200.	"Add global preferences"	Preferences addPreferenceForOptionalCelesteStatusPane.	Preferences addPreferenceForCelesteShowingAttachmentsFlag.	self registerInOpenMenu.	self registerInFlapsRegistry.! !!Celeste class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:38'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(Celeste		newOpenableMorph		'Celeste'		'Celeste -- an EMail reader') 						forFlapNamed: 'Tools']! !!Celeste class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:32'!unload	"Unload the receiver from global registries"	TheWorldMenu unregisterOpenCommandWithReceiver: self.	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!ChangeSorter class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:41'!initialize	"Initialize the class variables"	AllChangeSets == nil ifTrue:		[AllChangeSets _ OrderedCollection new].	self gatherChangeSets.	ChangeSetCategories ifNil:		[self initializeChangeSetCategories].	RecentUpdateMarker _ 0.	"ChangeSorter initialize"	FileList registerFileReader: self.	self registerInFlapsRegistry.! !!ChangeSorter class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:42'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(ChangeSorter			prototypicalToolWindow		'Change Set'			'A tool that allows you to view and manipulate all the code changes in a single change set')						forFlapNamed: 'Tools']! !!ChangeSorter class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:32'!unload	"Unload the receiver from global registries"	self environment at: #FileList ifPresent: [:cl |	cl unregisterFileReader: self].	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!ClockMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:00'!initialize	self registerInFlapsRegistry.	! !!ClockMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:02'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(ClockMorph	authoringPrototype		'Clock'			'A simple digital clock')						forFlapNamed: 'Supplies'.						cl registerQuad: #(ClockMorph	authoringPrototype		'Clock'			'A simple digital clock')						forFlapNamed: 'PlugIn Supplies'.]! !!ClockMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:33'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!DualChangeSorter class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:44'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(DualChangeSorter		prototypicalToolWindow		'Change Sorter'		'Shows two change sets side by side')						forFlapNamed: 'Tools']! !!DualChangeSorter class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:33'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!EllipseMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:03'!initialize	self registerInFlapsRegistry.	! !!EllipseMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:05'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(EllipseMorph	authoringPrototype		'Ellipse'			'An ellipse or circle')						forFlapNamed: 'Supplies'.						cl registerQuad: #(EllipseMorph	authoringPrototype		'Ellipse'			'An ellipse or circle')						forFlapNamed: 'PlugIn Supplies'.]! !!EllipseMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:33'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!FileList class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:46'!initialize	"FileList initialize"	RecentDirs := OrderedCollection new.	(self environment allClassesImplementing: #fileReaderServicesForFile:suffix:) do: 		[:providerMetaclass |			self registerFileReader: providerMetaclass soleInstance].	self registerInFlapsRegistry.! !!FileList class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:47'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(FileList					prototypicalToolWindow		'File List'			'A File List is a tool for browsing folders and files on disks and on ftp types.') 						forFlapNamed: 'Tools']! !!FileList class methodsFor: 'class initialization' stamp: 'asm 4/08/2003 12:15'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!Flaps class methodsFor: 'predefined flaps' stamp: 'asm 3/13/2003 10:52'!quadsDefiningPlugInSuppliesFlap	"Answer a list of quads which define the objects to appear in the default 	Supplies flap used in the Plug-in image"	^ self registeredFlapsQuadsAt: 'PlugIn Supplies'! !!Flaps class methodsFor: 'predefined flaps' stamp: 'asm 3/13/2003 10:25'!quadsDefiningStackToolsFlap	"Answer a structure defining the items on the default system Stack Tools flap"	^ self registeredFlapsQuadsAt: 'Stack Tools'	"Flaps replaceGlobalFlapwithID: 'Stack Tools'"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'asm 3/13/2003 10:26'!quadsDefiningSuppliesFlap	"Answer a list of quads which define the objects to appear in the default Supplies flap"	^ self registeredFlapsQuadsAt: 'Supplies'! !!Flaps class methodsFor: 'predefined flaps' stamp: 'asm 3/13/2003 10:51'!quadsDefiningToolsFlap	"Answer a structure defining the default Tools flap"	^ self registeredFlapsQuadsAt: 'Tools'! !!Flaps class methodsFor: 'predefined flaps' stamp: 'asm 3/13/2003 10:26'!quadsDefiningWidgetsFlap	"Answer a structure defining the default Widgets flap"	^ self registeredFlapsQuadsAt: 'Widgets'! !!Flaps class methodsFor: 'predefined flaps' stamp: 'asm 3/13/2003 10:26'!quadsDeiningScriptingFlap	"Answer a structure defining the default items in the Scripting flap"	^ self registeredFlapsQuadsAt: 'Scripting'! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:22'!defaultsQuadsDefiningPlugInSuppliesFlap	"Answer a list of quads which define the objects to appear in the default Supplies flap used in the Plug-in image.	previously in quadsDefiningPlugInSuppliesFlap"	^  #(	(ObjectsTool				newStandAlone				'Object Catalog'		'A tool that lets you browse the catalog of available objects')	(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you see and control all the running scripts in your project')	(TrashCanMorph			new						'Trash'				'A tool for discarding objects')	(PaintInvokingMorph	new						'Paint'				'Drop this into an area to start making a fresh painting there')	(TextMorph				authoringPrototype			'Text'				'Text that you can edit into anything you desire.')	(RecordingControlsMorph	authoringPrototype		'Sound'				'A device for making sound recordings.')	(RectangleMorph 		authoringPrototype		'Rectangle' 		'A rectangle')	(RectangleMorph		roundRectPrototype		'RoundRect'		'A rectangle with rounded corners')	(EllipseMorph			authoringPrototype		'Ellipse'			'An ellipse or circle')	(StarMorph				authoringPrototype		'Star'			'A star')	(CurveMorph			authoringPrototype		'Curve'			'A curve')	(PolygonMorph			authoringPrototype		'Polygon'		'A straight-sided figure with any number of sides')	(ScriptableButton		authoringPrototype		'Button'			'A Scriptable button')	(BookMorph				nextPageButton			'NextPage'		'A button that takes you to the next page')	(BookMorph				previousPageButton 		'PreviousPage'	'A button that takes you to the previous page')	(ScriptingSystem		prototypicalHolder 		'Holder'			'A place for storing alternative pictures in an animation, etc.')	(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')	(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')	(JoystickMorph			authoringPrototype		'Joystick'		'A joystick-like control')	(BookMorph				authoringPrototype		'Book'			'A multi-paged structure')	(ClockMorph				authoringPrototype		'Clock'			'A simple digital clock')	(RandomNumberTile		new					'Random'		'A random-number tile for use with tile scripting')) asOrderedCollection! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:22'!defaultsQuadsDefiningScriptingFlap	"Answer a structure defining the default items in the Scripting flap.	previously in quadsDeiningScriptingFlap"	^ #(	(TrashCanMorph			new						'Trash'				'A tool for discarding objects')		(ScriptingSystem 		scriptControlButtons 			'Status'				'Buttons to run, stop, or single-step scripts')	(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you control all the running scripts in your world')	(ScriptingSystem		newScriptingSpace			'Scripting'			'A confined place for drawing and scripting, with its own private stop/step/go buttons.')	(PaintInvokingMorph	new						'Paint'				'Drop this into an area to start making a fresh painting there')	(ScriptableButton		authoringPrototype		'Button'			'A Scriptable button')	(ScriptingSystem		prototypicalHolder 		'Holder'			'A place for storing alternative pictures in an animation, etc.')	(RandomNumberTile		new		'Random'		'A tile that will produce a random number in a given range')	(ScriptingSystem		anyButtonPressedTiles	'ButtonDown?'	'Tiles for querying whether the mouse button is down')	(ScriptingSystem		noButtonPressedTiles		'ButtonUp?'		'Tiles for querying whether the mouse button is up')	(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')	(JoystickMorph			authoringPrototype		'Joystick'		'A joystick-like control')	(TextFieldMorph			exampleBackgroundField		'Scrolling Field'	'A scrolling data field which will have a different value on every card of the background')	(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')	(StackMorph 			authoringPrototype		'Stack' 			'A multi-card data base'	)	(TextMorph				exampleBackgroundLabel	'Background Label' 'A piece of text that will occur on every card of the background')	(TextMorph				exampleBackgroundField		'Background Field'	'A  data field which will have a different value on every card of the background')		) asOrderedCollection! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:22'!defaultsQuadsDefiningStackToolsFlap	"Answer a structure defining the items on the default system Stack Tools flap.	previously in quadsDefiningStackToolsFlap"	^ #(	(StackMorph 			authoringPrototype		'Stack' 				'A multi-card data base'	)	(StackMorph			stackHelpWindow		'Stack Help'			'Some hints about how to use Stacks')	(TextMorph				authoringPrototype		'Simple Text'		'Text that you can edit into anything you wish')	(TextMorph				fancyPrototype			'Fancy Text' 		'A text field with a rounded shadowed border, with a fancy font.')	(ScrollableField			newStandAlone			'Scrolling Text'		'Holds any amount of text; has a scroll bar')	(ScriptableButton		authoringPrototype		'Scriptable Button'	'A button whose script will be a method of the background Player')	(StackMorph			previousCardButton 		'Previous Card' 		'A button that takes the user to the previous card in the stack')	(StackMorph			nextCardButton			'Next Card'			'A button that takes the user to the next card in the stack')) asOrderedCollection! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:22'!defaultsQuadsDefiningSuppliesFlap	"Answer a list of quads which define the objects to appear in the default Supplies flap.	previously in quadsDefiningSuppliesFlap"	^  #(	(RectangleMorph 		authoringPrototype		'Rectangle' 		'A rectangle')	(RectangleMorph		roundRectPrototype		'RoundRect'		'A rectangle with rounded corners')	(EllipseMorph			authoringPrototype		'Ellipse'			'An ellipse or circle')	(StarMorph				authoringPrototype		'Star'			'A star')	(CurveMorph			authoringPrototype		'Curve'			'A curve')	(PolygonMorph			authoringPrototype		'Polygon'		'A straight-sided figure with any number of sides')	(TextMorph				authoringPrototype		'Text'			'Text that you can edit into anything you desire.')	(ScriptingSystem		prototypicalHolder 		'Holder'			'A place for storing alternative pictures in an animation, etc.')	(ImageMorph			authoringPrototype		'Picture'		'A non-editable picture of something')	(ScriptableButton		authoringPrototype		'Button'			'A Scriptable button')	(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')	(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')	(BookMorph				authoringPrototype		'Book'			'A multi-paged structure')	(TabbedPalette			authoringPrototype		'TabbedPalette'	'A structure with tabs')	(JoystickMorph			authoringPrototype		'Joystick'		'A joystick-like control')	(ClockMorph				authoringPrototype		'Clock'			'A simple digital clock')	(BookMorph				previousPageButton 		'PreviousPage'	'A button that takes you to the previous page')	(BookMorph				nextPageButton			'NextPage'		'A button that takes you to the next page')		) asOrderedCollection! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:21'!defaultsQuadsDefiningToolsFlap	"Answer a structure defining the default Tools flap.	previously in quadsDefiningToolsFlap"	^ #(	(Browser 				prototypicalToolWindow		'Browser'			'A Browser is a tool that allows you to view all the code of all the classes in the system')	(TranscriptStream				openMorphicTranscript				'Transcript'			'A Transcript is a window usable for logging and debugging; browse references to #Transcript for examples of how to write to it.')	(Workspace				prototypicalToolWindow		'Workspace'			'A Workspace is a simple window for editing text.  You can later save the contents to a file if you desire.')	(FileList					prototypicalToolWindow		'File List'			'A File List is a tool for browsing folders and files on disks and on ftp types.')	(DualChangeSorter		prototypicalToolWindow		'Change Sorter'		'Shows two change sets side by side')	(SelectorBrowser			prototypicalToolWindow		'Method Finder'		'A tool for discovering methods by providing sample values for arguments and results')	(MessageNames			prototypicalToolWindow		'Message Names'		'A tool for finding, viewing, and editing all methods whose names contain a given character sequence.')	(Preferences			preferencesControlPanel	'Preferences'			'Allows you to control numerous options')	(Utilities				recentSubmissionsWindow	'Recent'				'A message browser that tracks the most recently-submitted methods')	(ProcessBrowser			prototypicalToolWindow		'Processes'			'A Process Browser shows you all the running processes')	(Preferences			annotationEditingWindow	'Annotations'		'Allows you to specify the annotations to be shown in the annotation panes of browsers, etc.')	(Scamper				newOpenableMorph			'Scamper'			'A web browser')	(Celeste					newOpenableMorph			'Celeste'				'Celeste -- an EMail reader')	(PackagePaneBrowser	prototypicalToolWindow		'Packages'			'Package Browser:  like a System Browser, except that if has extra level of categorization in the top-left pane, such that class-categories are further organized into groups called "packages"')	(ChangeSorter			prototypicalToolWindow		'Change Set'			'A tool that allows you to view and manipulate all the code changes in a single change set')) asOrderedCollection! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:21'!defaultsQuadsDefiningWidgetsFlap	"Answer a structure defining the default Widgets flap.     previously in quadsDefiningWidgetsFlap"	^ #(	(TrashCanMorph			new						'Trash'				'A tool for discarding objects')	(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you see and control all the running scripts in your project')	(PaintInvokingMorph	new						'Paint'				'Drop this into an area to start making a fresh painting there')	(GeeMailMorph			new						'Gee-Mail'			'A place to present annotated content')	(RecordingControlsMorph	authoringPrototype		'Sound'				'A device for making sound recordings.')	(MPEGMoviePlayerMorph	authoringPrototype		'Movie Player'		'A Player for MPEG movies')	(FrameRateMorph		authoringPrototype			'Frame Rate'		'An indicator of how fast your system is running')	(MagnifierMorph		newRound					'Magnifier'			'A magnifying glass')	(ScriptingSystem		newScriptingSpace			'Scripting'			'A confined place for drawing and scripting, with its own private stop/step/go buttons.')	(ScriptingSystem		holderWithAlphabet			'Alphabet'			'A source for single-letter objects')	(BouncingAtomsMorph	new						'Bouncing Atoms'	'Atoms, mate')	(ObjectsTool				newStandAlone				'Object Catalog'		'A tool that lets you browse the catalog of objects')	) asOrderedCollection! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 10:58'!initializeFlapsQuads	"initialize the list of dynamic flaps quads.	self initializeFlapsQuads"	FlapsQuads _ nil. 	self registeredFlapsQuads at: 'PlugIn Supplies' put: self defaultsQuadsDefiningPlugInSuppliesFlap;		 at: 'Stack Tools' put: self defaultsQuadsDefiningStackToolsFlap;		 at: 'Supplies' put: self defaultsQuadsDefiningSuppliesFlap;		 at: 'Tools' put: self defaultsQuadsDefiningToolsFlap;		 at: 'Widgets' put: self defaultsQuadsDefiningWidgetsFlap;		 at: 'Scripting' put: self defaultsQuadsDefiningScriptingFlap.	^ self registeredFlapsQuads! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:09'!registerQuad: aQuad forFlapNamed: aLabel	"If any previous registration of the same label string is already known, delete the old one."	"aQuad received must be an array of the form {TargetObject. #command label  'A Help String'} Flaps registerQuad: #(FileList2 openMorphicViewInWorld	'Enhanced File List'	'A nicer File List.')	forFlapNamed: 'Tools' "	self unregisterQuad: aQuad forFlapNamed: aLabel.	(self registeredFlapsQuads at: aLabel) add: aQuad! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 09:55'!registeredFlapsQuads	"Answer the list of dynamic flaps quads"		FlapsQuads ifNil: [FlapsQuads _ Dictionary new].	^ FlapsQuads" FlapsQuads _ nil. "! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 11:02'!registeredFlapsQuadsAt: aLabel	"Answer the list of dynamic flaps quads at aLabel"	^ (self registeredFlapsQuads at: aLabel)		removeAllSuchThat: [:q | (self environment at: q first) isNil]! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 3/13/2003 10:34'!unregisterQuad: aQuad forFlapNamed: aLabel 	"If any previous registration at the same label string has the same receiver-command,	delete the old one."	(self registeredFlapsQuadsAt: aLabel)		removeAllSuchThat: [:q | q first = aQuad first				and: [q second = aQuad second]]! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 4/12/2003 14:36'!unregisterQuadsWithReceiver: aReceiver 	"delete all quads with receiver aReceiver."	self registeredFlapsQuads		do: [:assoc | assoc value				removeAllSuchThat: [:q | (self environment at: (q first)) = aReceiver ]]! !!Flaps class methodsFor: 'flaps registry' stamp: 'asm 4/12/2003 14:16'!unregisterQuadsWithReceiver: aReceiver fromFlapNamed: aLabel	"delete all quads with receiver aReceiver."	(self registeredFlapsQuads at: aLabel) removeAllSuchThat: [:q | q first = aReceiver name]! !!FrameRateMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:05'!initialize	self registerInFlapsRegistry.	! !!FrameRateMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:06'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(FrameRateMorph		authoringPrototype		'Frame Rate'		'An indicator of how fast your system is running')						forFlapNamed: 'Widgets']! !!FrameRateMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:36'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!GeeMailMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:07'!initialize	self registerInFlapsRegistry.! !!GeeMailMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:08'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(GeeMailMorph		new	'Gee-Mail'			'A place to present annotated content') 						forFlapNamed: 'Widgets']! !!GeeMailMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:36'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!ImageMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:09'!initialize	"ImageMorph initialize"	| h p d |	DefaultForm _ (Form extent: 80@40 depth: 16).	h _ DefaultForm height // 2.	0 to: h - 1 do: [:i |		p _ (i * 2)@i.		d _ i asFloat / h asFloat.		DefaultForm fill:			(p corner: DefaultForm extent - p)			fillColor: (Color r: d g: 0.5 b: 1.0 - d)].	self registerInFlapsRegistry.! !!ImageMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:10'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(ImageMorph		authoringPrototype		'Picture'		'A non-editable picture of something') 						forFlapNamed: 'Supplies']! !!ImageMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:36'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!JoystickMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:10'!initialize	self registerInFlapsRegistry.! !!JoystickMorph class methodsFor: 'class initialization' stamp: 'asm 4/14/2003 20:32'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(JoystickMorph		authoringPrototype		'Joystick'	'A joystick-like control') 						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(JoystickMorph		authoringPrototype		'Joystick'	'A joystick-like control') 						forFlapNamed: 'Scripting'.						cl registerQuad: #(JoystickMorph		authoringPrototype		'Joystick'	'A joystick-like control') 						forFlapNamed: 'Supplies']! !!JoystickMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:36'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!MagnifierMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:14'!initialize	self registerInFlapsRegistry.! !!MagnifierMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:14'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(MagnifierMorph		newRound	'Magnifier'			'A magnifying glass') 						forFlapNamed: 'Widgets']! !!MagnifierMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:37'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!MessageNames class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:53'!initialize	self registerInFlapsRegistry.	! !!MessageNames class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 12:53'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(MessageNames			prototypicalToolWindow		'Message Names'		'A tool for finding, viewing, and editing all methods whose names contain a given character sequence.')						forFlapNamed: 'Tools']! !!MessageNames class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:37'!unload	"Unload the receiver from global registries"	self environment at: #FileList ifPresent: [:cl |	cl unregisterFileReader: self].	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!PackagePaneBrowser class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:15'!initialize	self registerInFlapsRegistry.! !!PackagePaneBrowser class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:15'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(PackagePaneBrowser	prototypicalToolWindow		'Packages'			'Package Browser:  like a System Browser, except that if has extra level of categorization in the top-left pane, such that class-categories are further organized into groups called "packages"') 						forFlapNamed: 'Tools']! !!PackagePaneBrowser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:38'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!PaintInvokingMorph class methodsFor: 'class initialization' stamp: 'asm 4/10/2003 13:16'!initialize	self registerInFlapsRegistry.! !!PaintInvokingMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:09'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(PaintInvokingMorph	new	'Paint'	'Drop this into an area to start making a fresh painting there')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(PaintInvokingMorph	new	'Paint'	'Drop this into an area to start making a fresh painting there')						forFlapNamed: 'Widgets'.						cl registerQuad: #(PaintInvokingMorph	new	'Paint'	'Drop this into an area to start making a fresh painting there')						forFlapNamed: 'Scripting']! !!PaintInvokingMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:38'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!PasteUpMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:00'!initialize	self registerInFlapsRegistry.	! !!PasteUpMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:10'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')						forFlapNamed: 'Supplies'.						cl registerQuad: #(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')						forFlapNamed: 'Scripting']! !!PasteUpMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:38'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!PolygonMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:03'!initialize	self registerInFlapsRegistry.	! !!PolygonMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:10'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(PolygonMorph	authoringPrototype		'Polygon'	'A straight-sided figure with any number of sides')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(PolygonMorph	authoringPrototype		'Polygon'	'A straight-sided figure with any number of sides')						forFlapNamed: 'Supplies'.]! !!PolygonMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:38'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!CurveMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:15'!initialize	self registerInFlapsRegistry.	! !!CurveMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:16'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(CurveMorph		authoringPrototype		'Curve'		'A curve')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(CurveMorph		authoringPrototype		'Curve'		'A curve')						forFlapNamed: 'Supplies'.]! !!CurveMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:33'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!Preferences class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:18'!initialize	self registerInFlapsRegistry.	! !!Preferences class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:20'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(Preferences	preferencesControlPanel	'Preferences'	'Allows you to control numerous options')						forFlapNamed: 'Tools'.						cl registerQuad: #(Preferences			annotationEditingWindow	'Annotations'		'Allows you to specify the annotations to be shown in the annotation panes of browsers, etc.')						forFlapNamed: 'Tools'.]! !!Preferences class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:38'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!ProcessBrowser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:21'!initialize	self registerInFlapsRegistry.	! !!ProcessBrowser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:22'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | 	cl registerQuad: #(ProcessBrowser			prototypicalToolWindow		'Processes'			'A Process Browser shows you all the running processes')						forFlapNamed: 'Tools'.]! !!ProcessBrowser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:39'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!RectangleMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:23'!initialize	self registerInFlapsRegistry.	! !!RectangleMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:27'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(RectangleMorph	roundRectPrototype		'RoundRect'		'A rectangle with rounded corners')						forFlapNamed: 'Supplies'.						cl registerQuad: #(RectangleMorph	authoringPrototype		'Rectangle' 		'A rectangle')						forFlapNamed: 'Supplies'.						cl registerQuad: #(RectangleMorph	roundRectPrototype		'RoundRect'		'A rectangle with rounded corners')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(RectangleMorph	authoringPrototype		'Rectangle' 		'A rectangle')						forFlapNamed: 'PlugIn Supplies'.]! !!RectangleMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:39'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!AllScriptsTool class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:28'!initialize	self registerInFlapsRegistry.	! !!AllScriptsTool class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:30'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you see and control all the running scripts in your project')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you control all the running scripts in your world')						forFlapNamed: 'Scripting'.						cl registerQuad: #(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you see and control all the running scripts in your project')						forFlapNamed: 'Widgets']! !!AllScriptsTool class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:30'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!BookMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:31'!initialize	FileList registerFileReader: self.	self registerInFlapsRegistry.	! !!BookMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:37'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(BookMorph		nextPageButton			'NextPage'		'A button that takes you to the next page')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(BookMorph	previousPageButton 		'PreviousPage'	'A button that takes you to the previous page')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(BookMorph	authoringPrototype		'Book'			'A multi-paged structure')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(BookMorph		nextPageButton			'NextPage'		'A button that takes you to the next page')						forFlapNamed: 'Supplies'.						cl registerQuad: #(BookMorph	previousPageButton 		'PreviousPage'	'A button that takes you to the previous page')						forFlapNamed: 'Supplies'.						cl registerQuad: #(BookMorph	authoringPrototype		'Book'			'A multi-paged structure')						forFlapNamed: 'Supplies']! !!BookMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:31'!unload	"Unload the receiver from global registries"	self environment		at: #FileList		ifPresent: [:cl | cl unregisterFileReader: self].	self environment		at: #Flaps		ifPresent: [:cl | cl unregisterQuadsWithReceiver: self]! !!MPEGMoviePlayerMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:40'!initialize     "MPEGMoviePlayerMorph initialize."    FileList registerFileReader: self.	self registerInFlapsRegistry.	! !!MPEGMoviePlayerMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 19:17'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(MPEGMoviePlayerMorph	authoringPrototype		'Movie Player'		'A Player for MPEG movies') 						forFlapNamed: 'Widgets']! !!MPEGMoviePlayerMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:36'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!ObjectsTool class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:45'!initialize	self registerInFlapsRegistry.	! !!ObjectsTool class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:47'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(ObjectsTool			newStandAlone				'Object Catalog'		'A tool that lets you browse the catalog of objects')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(ObjectsTool		newStandAlone				'Object Catalog'		'A tool that lets you browse the catalog of objects')						forFlapNamed: 'Widgets'.]! !!ObjectsTool class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:37'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!RandomNumberTile class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:50'!initialize	self registerInFlapsRegistry.	! !!RandomNumberTile class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:51'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(RandomNumberTile		new		'Random'		'A random-number tile for use with tile scripting')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(RandomNumberTile	new	'Random'		'A tile that will produce a random number in a given range')						forFlapNamed: 'Scripting'.]! !!RandomNumberTile class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:39'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!RecordingControlsMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:53'!initialize	self registerInFlapsRegistry.	! !!RecordingControlsMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:54'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(RecordingControlsMorph	authoringPrototype	'Sound' 	'A device for making sound recordings.')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(RecordingControlsMorph	authoringPrototype	'Sound' 	'A device for making sound recordings.')						forFlapNamed: 'Widgets'.]! !!RecordingControlsMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:39'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!Scamper class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:48'!initialize	self registerInFlapsRegistry.	! !!Scamper class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:49'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(Scamper	newOpenableMorph	'Scamper'	'A web browser')						forFlapNamed: 'Tools']! !!Scamper class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:39'!unload	"Unload the receiver from global registries"	TheWorldMenu unregisterOpenCommandWithReceiver: self.	self environment at: #FileList ifPresent: [:cl |	cl unregisterFileReader: self].	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!ScriptableButton class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:56'!initialize	self registerInFlapsRegistry.	! !!ScriptableButton class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:58'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(ScriptableButton		authoringPrototype	'Button' 		'A Scriptable button')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(ScriptableButton		authoringPrototype	'Button' 		'A Scriptable button')						forFlapNamed: 'Scripting'.						cl registerQuad: #(ScriptableButton		authoringPrototype		'Scriptable Button'	'A button whose script will be a method of the background Player')						forFlapNamed: 'Stack Tools'.						cl registerQuad: #(ScriptableButton		authoringPrototype	'Button' 		'A Scriptable button')						forFlapNamed: 'Supplies'.]! !!ScriptableButton class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:40'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!ScrollableField class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 10:59'!initialize	self registerInFlapsRegistry.	! !!ScrollableField class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:01'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(ScrollableField			newStandAlone		'Scrolling Text'		'Holds any amount of text; has a scroll bar')						forFlapNamed: 'Stack Tools'.]! !!ScrollableField class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:40'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!SelectorBrowser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:01'!initialize	self registerInFlapsRegistry.	! !!SelectorBrowser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:03'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(SelectorBrowser			prototypicalToolWindow		'Method Finder'		'A tool for discovering methods by providing sample values for arguments and results')						forFlapNamed: 'Tools']! !!SelectorBrowser class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:40'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!SimpleSliderMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:04'!initialize	self registerInFlapsRegistry.	! !!SimpleSliderMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:29'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')						forFlapNamed: 'Supplies'.						cl registerQuad: #(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')						forFlapNamed: 'Scripting']! !!SimpleSliderMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:40'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!StackMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:30'!initialize	self registerInFlapsRegistry.	! !!StackMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:36'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(StackMorph	authoringPrototype	'Stack'		'A multi-card data base'	)						forFlapNamed: 'Scripting'.						cl registerQuad: #(StackMorph	authoringPrototype	'Stack'		'A multi-card data base'	)						forFlapNamed: 'Stack Tools'.						cl registerQuad: #(StackMorph	stackHelpWindow	'Stack Help'	'Some hints about how to use Stacks')						forFlapNamed: 'Stack Tools'.						cl registerQuad: #(StackMorph	previousCardButton	'Previous Card'	'A button that takes the user to the previous card in the stack')						forFlapNamed: 'Stack Tools'.						cl registerQuad: #(StackMorph	nextCardButton	'Next Card'		'A button that takes the user to the next card in the stack')						forFlapNamed: 'Stack Tools']! !!StackMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:40'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!StandardScriptingSystem class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 19:04'!initialize	"Initialize the scripting system.  Sometimes this method is vacuously changed just to get it in a changeset so that its invocation will occur as part of an update"	(self environment at: #ScriptingSystem ifAbsent: [nil]) ifNil:		[self environment at: #ScriptingSystem put: self new].	ScriptingSystem		initializeHelpStrings.	self registerInFlapsRegistry."StandardScriptingSystem initialize"! !!StandardScriptingSystem class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 19:08'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(ScriptingSystem	prototypicalHolder	'Holder'		'A place for storing alternative pictures in an animation, etc.')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(ScriptingSystem	prototypicalHolder	'Holder'		'A place for storing alternative pictures in an animation, etc.')						forFlapNamed: 'Supplies'.						cl registerQuad: #(ScriptingSystem	newScriptingSpace	'Scripting'	'A confined place for drawing and scripting, with its own private stop/step/go buttons.')						forFlapNamed: 'Widgets'.						cl registerQuad: #(ScriptingSystem	holderWithAlphabet	'Alphabet'	'A source for single-letter objects')						forFlapNamed: 'Widgets'.]! !!StandardScriptingSystem class methodsFor: 'class initialization' stamp: 'asm 4/12/2003 14:38'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: ScriptingSystem] ! !!StarMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:37'!initialize	self registerInFlapsRegistry.	! !!StarMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:39'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(StarMorph		authoringPrototype	'Star'	'A star')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(StarMorph	authoringPrototype	'Star'	'A star')						forFlapNamed: 'Supplies'.]! !!StarMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:41'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!TabbedPalette class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:40'!initialize	self registerInFlapsRegistry.	! !!TabbedPalette class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:41'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(TabbedPalette	authoringPrototype	'TabbedPalette'	'A structure with tabs')						forFlapNamed: 'Supplies'.]! !!TabbedPalette class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:41'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!TextFieldMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:56'!initialize	self registerInFlapsRegistry.	! !!TextFieldMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 11:58'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(TextFieldMorph  exampleBackgroundField	'Scrolling Field'	'A scrolling data field which will have a different value on every card of the background')						forFlapNamed: 'Scripting'.]! !!TextFieldMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:41'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!TextMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:00'!initialize	"TextMorph initialize"	"Initialize constants shared by classes associated with text display."	CaretForm _ (ColorForm extent: 16@5					fromArray: #(2r001100e26 2r001100e26 2r011110e26 2r111111e26 2r110011e26)					offset: -2@0)					colors: (Array with: Color transparent with: self new selectionColor).	self registerInFlapsRegistry.! !!TextMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:04'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(TextMorph		authoringPrototype			'Text'				'Text that you can edit into anything you desire.')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(TextMorph		exampleBackgroundLabel	'Background Label' 'A piece of text that will occur on every card of the background')						forFlapNamed: 'Scripting'.						cl registerQuad: #(TextMorph		exampleBackgroundField		'Background Field'	'A  data field which will have a different value on every card of the background')						forFlapNamed: 'Scripting'.						cl registerQuad: #(TextMorph		authoringPrototype		'Simple Text'		'Text that you can edit into anything you wish')						forFlapNamed: 'Stack Tools'.						cl registerQuad: #(TextMorph		fancyPrototype			'Fancy Text' 		'A text field with a rounded shadowed border, with a fancy font.')						forFlapNamed: 'Stack Tools'.						cl registerQuad: #(TextMorph		authoringPrototype		'Text'			'Text that you can edit into anything you desire.')						forFlapNamed: 'Supplies'.]! !!TextMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:41'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!TranscriptStream class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:05'!initialize	self registerInFlapsRegistry.	! !!TranscriptStream class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:06'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(TranscriptStream		openMorphicTranscript	'Transcript'			'A Transcript is a window usable for logging and debugging; browse references to #Transcript for examples of how to write to it.')						forFlapNamed: 'Tools']! !!TranscriptStream class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:41'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!TrashCanMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:07'!initialize	self registerInFlapsRegistry.	! !!TrashCanMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:08'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(TrashCanMorph	new	'Trash'		'A tool for discarding objects')						forFlapNamed: 'PlugIn Supplies'.						cl registerQuad: #(TrashCanMorph	new	'Trash'		'A tool for discarding objects')						forFlapNamed: 'Widgets'.						cl registerQuad: #(TrashCanMorph	new	'Trash'		'A tool for discarding objects')						forFlapNamed: 'Scripting']! !!TrashCanMorph class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:41'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!Utilities class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:11'!initialize	"Initialize the class variables.  5/16/96 sw"	self initializeCommonRequestStrings.	RecentSubmissions _ OrderedCollection new.	self registerInFlapsRegistry.	! !!Utilities class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:12'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(Utilities	recentSubmissionsWindow	'Recent'		'A message browser that tracks the most recently-submitted methods')						forFlapNamed: 'Tools'.]! !!Utilities class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:42'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !!Workspace class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:13'!initialize	self registerInFlapsRegistry.	! !!Workspace class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:14'!registerInFlapsRegistry	"Register the receiver in the system's flaps registry"	self environment		at: #Flaps		ifPresent: [:cl | cl registerQuad: #(Workspace	prototypicalToolWindow	'Workspace'		'A Workspace is a simple window for editing text.  You can later save the contents to a file if you desire.')						forFlapNamed: 'Tools'.]! !!Workspace class methodsFor: 'class initialization' stamp: 'asm 4/11/2003 12:42'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self] ! !"Postscript:"Flaps initializeFlapsQuads!