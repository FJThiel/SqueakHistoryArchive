'From Squeak 2.5 of August 6, 1999 on 17 September 1999 at 8:13:19 pm'!"Change Set:		B3DClipFixDate:			17 September 1999Author:			Andreas RaabFixes a problem in the low-level rasterizer introduced by wrongly reporting completely clipped objects as (partially) visible."!!B3DVertexClipper methodsFor: 'processing' stamp: 'ar 9/17/1999 20:08'!processIndexedQuads: vb	"Clip an indexed quad set"	| vtxArray idxArray tempVB idx1 idx2 idx3 maxVtx maxIdx index lastIndex clipFlags vtx returnValue |	self flag: #b3dPrimitive.	returnValue _ false. "Assume we don't see nothing"	tempVB _ B3DVertexBuffer new.	vtxArray _ vb vertexArray.	idxArray _ vb indexArray.	maxVtx _ vb indexCount.	maxIdx _ vb indexCount.	lastIndex _ -3. "Hack the lastIndex ;-)"	[index _ self primNextClippedQuadAfter: lastIndex + 4					vertices: vtxArray count: maxVtx					indexes: idxArray count: maxIdx.	index = 0] whileFalse:[		"Need a partial clip here, storing the triangulated polygon at the end"		tempVB reset.		clipFlags _ InAllMask + OutAllMask.		"Copy the poly into tempVB"		0 to: 3 do:[:i|			vtx _ vtxArray at: (idxArray at: index+i).			idxArray at: index+i put: 0.			tempVB addClipVertex: vtx.			clipFlags _ clipFlags bitAnd: vtx clipFlags].		tempVB clipFlags: clipFlags.		self processPolygon: tempVB.		tempVB vertexCount > 2 ifTrue:[			returnValue _ nil. "We see some parts and not others"			idx1 _ vb addClipVertex: (tempVB vertexArray at: 1).			3 to: tempVB vertexCount do:[:j|				idx2 _ vb addClipVertex: (tempVB vertexArray at: j-1).				idx3 _ vb addClipVertex: (tempVB vertexArray at: j).				vb addClipIndex: idx1.				vb addClipIndex: idx2.				vb addClipIndex: idx3.				vb addClipIndex: idx3.			].		].		lastIndex _ index.	].	^returnValue! !!B3DVertexClipper methodsFor: 'processing' stamp: 'ar 9/17/1999 20:08'!processIndexedTriangles: vb	"Clip an indexed triangle set"	| vtxArray idxArray tempVB idx1 idx2 idx3 maxVtx maxIdx index lastIndex clipFlags vtx returnValue |	self flag: #b3dPrimitive.	returnValue _ false. "Assume we don't see nothing"	tempVB _ B3DVertexBuffer new.	vtxArray _ vb vertexArray.	idxArray _ vb indexArray.	maxVtx _ vb indexCount.	maxIdx _ vb indexCount.	lastIndex _ -2. "Hack the lastIndex ;-)"	[index _ self primNextClippedTriangleAfter: lastIndex + 3					vertices: vtxArray count: maxVtx					indexes: idxArray count: maxIdx.	index = 0] whileFalse:[		"Need a partial clip here, storing the triangulated polygon at the end"		tempVB reset.		clipFlags _ InAllMask + OutAllMask.		"Copy the poly into tempVB"		0 to: 2 do:[:i|			vtx _ vtxArray at: (idxArray at: index+i).			idxArray at: index+i put: 0.			tempVB addClipVertex: vtx.			clipFlags _ clipFlags bitAnd: vtx clipFlags].		tempVB clipFlags: clipFlags.		self processPolygon: tempVB.		tempVB vertexCount > 2 ifTrue:[			returnValue _ nil. "We see some parts and not others"			idx1 _ vb addClipVertex: (tempVB vertexArray at: 1).			3 to: tempVB vertexCount do:[:j|				idx2 _ vb addClipVertex: (tempVB vertexArray at: j-1).				idx3 _ vb addClipVertex: (tempVB vertexArray at: j).				vb addClipIndex: idx1.				vb addClipIndex: idx2.				vb addClipIndex: idx3.			].		].		lastIndex _ index.	].	^returnValue! !!B3DVertexClipper methodsFor: 'processing' stamp: 'ar 9/17/1999 20:10'!processPolygon: vb	"Process a polygon from the vertex buffer that requires partial clipping"	| outMask vtxArray tempVtxArray count |	outMask := vb clipFlags bitAnd: OutAllMask.	vtxArray _ vb vertexArray.	tempVtxArray _ vtxArray clone.	"Note: tempVtxArray has the SAME contents as vtxArray since the data is stored inplace.	Thus we can decide from which buffer to start the clipping operation later on."	count _ self clipPolygon: vtxArray count: vb vertexCount with: tempVtxArray mask: outMask.	vb vertexCount: count.	count < 3 ifTrue:[^false].	^nil! !!B3DVertexClipper methodsFor: 'processing' stamp: 'ar 9/17/1999 20:05'!processVertexBuffer: vb	"Clip the elements in the vertex buffer. Return true if all vertices are inside.	Return false if all vertices are outside. If partial clipping occurs, return nil."	| fullMask |	fullMask _ self determineClipFlags: vb vertexArray count: vb vertexCount.	vb clipFlags: fullMask.	"Check if all vertices are inside, so no clipping is necessary"	(fullMask allMask: InAllMask) ifTrue:[^true].	"Check if all vertices are outside, so we can get rid of the entire buffer"	(fullMask anyMask: OutAllMask) ifTrue:[		"Reset the number of vertices in the vertex buffer to zero to indicate all outside"		vb reset.		^false].	"Must clip individual items depending on the primitive type"	vb growForClip. "Make sure we have enough space during primitive operation"	^super processVertexBuffer: vb.! !