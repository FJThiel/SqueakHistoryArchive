'From Squeak3.1alpha of 28 February 2001 [latest update: #4274] on 22 August 2001 at 5:17:05 pm'!"Change Set:		pluginFixesDate:			22 August 2001Author:			Michael RuegerUpdates and fixes taken from the plugin update stream:	- better handling of update notifications	- external server defs enable via preference	- en/disable tell function in standalone mode."!!HTTPServerDirectory methodsFor: 'accessing' stamp: 'mir 5/3/2001 12:58'!dirListUrl	| listURL |	listURL _ self altUrl.	listURL last ~= $/		ifTrue: [listURL _ listURL , '/'].	^ listURL! !!Object class methodsFor: 'private' stamp: 'mir 8/22/2001 15:20'!releaseExternalSettings	"Do nothing as a default"! !!AutoStart class methodsFor: 'updating' stamp: 'mir 8/10/2001 12:31'!checkForUpdates	| availableUpdate updateServer |	World 		ifNotNil: [			World install.			ActiveHand position: 100@100].	HTTPClient determineIfRunningInBrowser.	HTTPClient isRunningInBrowser		ifFalse: [^self processUpdates].	availableUpdate _ (AbstractLauncher extractParameters		at: 'UPDATE'		ifAbsent: [''] ) asInteger.	availableUpdate		ifNil: [^false].	updateServer _ AbstractLauncher extractParameters		at: 'UPDATE_SERVER'		ifAbsent: ['Squeakland'].	Utilities setUpdateServer: updateServer.	^SystemVersion checkAndApplyUpdates: availableUpdate! !!ExternalSettings class methodsFor: 'accessing' stamp: 'mir 8/22/2001 15:11'!preferenceDirectory	| prefDirName prefDir |	prefDirName _ 'prefs'.	^((FileDirectory on: Smalltalk vmPath) directoryExists: prefDirName)		ifTrue: [(FileDirectory on: Smalltalk vmPath) directoryNamed: prefDirName]		ifFalse: [			prefDir _ FileDirectory default directoryNamed: prefDirName.			prefDir assureExistance.			prefDir]! !!ExternalSettings class methodsFor: 'class initialization' stamp: 'mir 8/22/2001 15:17'!initialize	"ExternalSettings initialize"	Smalltalk addToStartUpList: self.	Smalltalk addToShutDownList: self! !!ExternalSettings class methodsFor: 'class initialization' stamp: 'mir 8/22/2001 15:17'!shutDown	"Look for external defs and load them."	"ExternalSettings shutDown"	self registeredClients do: [:client | 		client releaseExternalSettings]! !!ExternalSettings class methodsFor: 'class initialization' stamp: 'mir 8/22/2001 15:11'!startUp	"Look for external defs and load them."	"ExternalSettings startUp"	self registeredClients do: [:client | 		client fetchExternalSettingsIn: self preferenceDirectory]! !!Flaps class methodsFor: 'predefined flaps' stamp: 'mir 8/17/2001 18:48'!addAndEnableEToyFlaps	"Initialize the standard default out-of-box set of global flaps.  This method creates them and places them in my class variable #SharedFlapTabs, but does not itself get them displayed."	SharedFlapTabs ifNil: [SharedFlapTabs _ OrderedCollection new].	SharedFlapTabs add: self newSuppliesFlap.	SharedFlapTabs add: self newPaintingFlap delete.	self enableGlobalFlapWithID: 'Supplies'.	self enableGlobalFlapWithID: 'Painting'.	SharedFlapTabs do:		[:aFlapTab | 			aFlapTab setToPopOutOnMouseOver: false].	"The above amends some historic behavior imparted by the initializers of the individual flaps"	SharedFlapsAllowed _ true.	Project current flapsSuppressed: false.	^ SharedFlapTabs"Flaps addAndEnableEToyFlaps"! !!HTTPClient class methodsFor: 'utilities' stamp: 'mir 8/22/2001 12:29'!composeMailTo: address subject: subject body: body	"HTTPClient composeMailTo: 'michael.rueger@squeakland.org' subject: 'test subject' body: 'message' "	| mailTo |	mailTo _ WriteStream on: String new.	mailTo nextPutAll: 'mailto:'.	mailTo		nextPutAll: address;		nextPut: $?.	subject isEmptyOrNil		ifFalse: [mailTo nextPutAll: 'subject='; nextPutAll: subject; nextPut: $&].	body isEmptyOrNil		ifFalse: [mailTo nextPutAll: 'body='; nextPutAll: body].	self httpGet: mailTo contents! !!HTTPClient class methodsFor: 'utilities' stamp: 'mir 8/22/2001 17:16'!tellAFriend: emailAddressOrNil url: urlForLoading name: projectName	| recipient subject body linkToInclude |	recipient _ emailAddressOrNil ifNil: ['RECIPIENT.GOESHERE'].	subject _ 'New/Updated Squeak project'.	body _ 'This is a link to the Squeak project ' , projectName , ': ' , SimpleClientSocket crLf.	linkToInclude _ urlForLoading.	HTTPClient shouldUsePluginAPI		ifTrue: [			self composeMailTo: recipient subject: subject body: body , (linkToInclude copyReplaceAll: '%' with: '%25')]		ifFalse: [Preferences allowCelesteTell			ifTrue: [FancyCelesteComposition new				celeste: nil 				to: recipient				subject: subject				initialText: body				theLinkToInclude: linkToInclude;				open]			ifFalse: [self inform: 'You need to run inside a web browser to use the tell function.']]! !!HTTPClient class methodsFor: 'post/get' stamp: 'mir 5/11/2001 12:55'!httpGetDocument: url	| stream content | 	^self shouldUsePluginAPI		ifTrue: [			stream _ FileStream requestURLStream: url ifError: [self error: 'Error in get from ' , url printString].			stream ifNil: [^''].			stream position: 0.			content _ stream upToEnd.			stream close.			MIMEDocument content: content]		ifFalse: [HTTPSocket httpGetDocument: url]! !!Project methodsFor: 'file in/out' stamp: 'mir 8/10/2001 17:49'!serverList	| servers server |	"Take my list of server URLs and return a list of ServerDirectories to write on."	urlList isEmptyOrNil ifTrue: [^ nil].	servers _ OrderedCollection new.	urlList do: [:url |		server _ ServerDirectory serverForURL: url.		server ifNotNil: [servers add: server].		server _ ServerDirectory serverForURL: url asUrl downloadUrl.		server ifNotNil: [servers add: server]].	^servers isEmpty		ifTrue: [nil]		ifFalse: [servers]! !!Project methodsFor: 'file in/out' stamp: 'mir 8/8/2001 17:58'!urlForLoading	"compose a url that will load me in someone's browser"	| myServer serverList myUrl downloadUrl |	serverList _ self serverList.	serverList isEmptyOrNil		ifTrue: [			urlList isEmptyOrNil ifTrue: [^nil].			downloadUrl _ urlList first asUrl downloadUrl]		ifFalse: [			myServer _ serverList first.			myUrl _ myServer altUrl.			myUrl last == $/				ifFalse: [myUrl _ myUrl , '/'].			downloadUrl _ myUrl].	^downloadUrl , (self name, FileDirectory dot,'html') encodeForHTTP! !!Project methodsFor: 'SuperSwiki' stamp: 'mir 8/8/2001 18:23'!tellAFriend: emailAddressOrNil	| urlForLoading |"Project current tellAFriend"	(urlForLoading _ self urlForLoading) ifNil: [		urlForLoading _ self url		"fallback for dtp servers"	].	urlForLoading isEmptyOrNil ifTrue: [		^self inform: 'Since this project has not been saved yet,I cannot tell someone where it is.'	].	HTTPClient tellAFriend: emailAddressOrNil url: urlForLoading name: self name! !!Project class methodsFor: 'squeaklet on server' stamp: 'mir 8/8/2001 17:57'!loaderUrl	"Return a url that will allow to launch a project in a browser by composing a url like	<loaderURL>?<projectURL>"	^AbstractLauncher extractParameters at: 'LOADER_URL' ifAbsent: [nil].! !!ProjectLauncher methodsFor: 'initialization' stamp: 'mir 8/17/2001 18:49'!setupFlaps	"Only called when the image has been launched in a browser.  If I am requested to show etoy flaps, then remove any pre-existing shared flaps and put up the supplies flap only.  if I am requested to show all flaps, then if flaps already exist, use them as is, else set up to show the default set of standard flaps."	whichFlaps = 'etoy'		ifTrue:			[Flaps addAndEnableEToyFlaps].	whichFlaps = 'all'		ifTrue: [Flaps sharedFlapsAllowed				ifFalse: [Flaps enableGlobalFlaps]]! !!ServerDirectory class methodsFor: 'server prefs' stamp: 'mir 8/22/2001 17:01'!releaseExternalSettings	"Release for server configurations"	"ServerDirectory releaseExternalSettings"	Preferences externalServerDefsOnly		ifTrue: [			self resetLocalProjectDirectories.			Servers _ Dictionary new]! !!SystemVersion class methodsFor: 'accessing' stamp: 'mir 8/10/2001 11:52'!parseVersionString: versionString	"Answer the version of this release as version, date, update."	"SystemVersion parseVersionString: 'Squeak3.1alpha of 28 February 2001 [latest update: #3966]' "	| stream version date update |	[stream _ ReadStream on: versionString.	version _ stream upToAll: ' of '.	date _ Date readFrom: stream.	stream upToAll: ' #'.	update _ Number readFrom: stream]		on: Error		do: [^nil].	^{version. date. update.}! !!SystemVersion class methodsFor: 'accessing' stamp: 'mir 8/10/2001 11:53'!pluginVersion: availableVersionString newerThan: currentVersionString	| currentVersion availableVersion |	(currentVersionString isEmptyOrNil		or: [availableVersionString isEmptyOrNil])		ifTrue: [^true].	currentVersion _ self parseVersionString: currentVersionString.	availableVersion _ self parseVersionString: availableVersionString.	(currentVersion isNil		or: [availableVersion isNil])		ifTrue: [^false].	^(currentVersion at: 2) < (availableVersion at: 2)! !!SystemVersion class methodsFor: 'updating' stamp: 'mir 8/10/2001 11:52'!check: pluginVersion andRequestPluginUpdate: updateURL	"SystemVersion check: 'zzz' andRequestPluginUpdate: 'http://www.squeakland.org/installers/update.html' "	"We don't have a decent versioning scheme yet, so we are basically checking for a nil VM version on the mac."	(self pluginVersion: pluginVersion newerThan: self currentPluginVersion)		ifFalse: [^true].	(self confirm: 'There is a newer plugin version available. Do you want to install it now?')		ifFalse: [^false].	HTTPClient		requestURL: updateURL , (Smalltalk platformName copyWithout: Character space) asLowercase , '.html'		target: '_top'.	^false! !!Url methodsFor: 'converting' stamp: 'mir 8/17/2001 10:52'!downloadUrl	^self toText! !!FtpUrl methodsFor: 'downloading' stamp: 'mir 8/10/2001 17:45'!downloadUrl	"Returns a http download url for the location defined by this url."	|  auth idx serverName |	auth _ self authority.	idx _ auth indexOf: $@.	idx > 0 ifTrue:[		serverName _ (auth copyFrom: idx+1 to: auth size).	].	^'http://' , serverName , self pathString! !!Utilities class methodsFor: 'fetching updates' stamp: 'mir 8/10/2001 12:30'!setUpdateServer: groupName	"Utilities setUpdateServer: 'Squeakland' "	| entry index |	entry _ UpdateUrlLists detect: [:each | each first = groupName] ifNone: [^self].	index _ UpdateUrlLists indexOf: entry.	UpdateUrlLists removeAt: index.	UpdateUrlLists addFirst: entry! !!ProjectNavigationMorph class methodsFor: 'as yet unclassified' stamp: 'mir 8/22/2001 18:09'!preferredNavigator	"Preferences eToyFriendly ifTrue: [^KidNavigationMorph]."	^ProjectNavigationMorph! !!Flaps class methodsFor: 'menu commands' stamp: 'mir 8/22/2001 18:54'!disableGlobalFlaps: interactive	"Clobber all the shared flaps structures.  First read the user her Miranda rights."	interactive		ifTrue: [(self confirm: 'CAUTION!! This will destroy all the sharedflaps, so that they will not be present in *any* project.  If, later, you want themback, you will have to reenable them, fromthis same menu, whereupon the standarddefault set of shared flaps will be created.Do you really want to go ahead and clobberall shared flaps at this time?') ifFalse: [^ self]].	self globalFlapTabsIfAny do:		[:aFlapTab | self removeFlapTab: aFlapTab keepInList: false.		aFlapTab isInWorld ifTrue: [self error: 'Flap problem']].	self clobberFlapTabList.	SharedFlapsAllowed _ false.	Smalltalk isMorphic ifTrue:		[ActiveWorld restoreMorphicDisplay.		ActiveWorld reformulateUpdatingMenus]! !!Flaps class methodsFor: 'menu commands' stamp: 'mir 8/22/2001 18:55'!disableGlobalFlaps	"Clobber all the shared flaps structures.  First read the user her Miranda rights."	self disableGlobalFlaps: true! !ServerDirectory class removeSelector: #startUp!ExternalSettings initialize!"Postscript:"Preferences addPreference: #allowCelesteTell category: 'publishing' default: true balloonHelp:'When true, the tell function also works standalone using Celeste'.!