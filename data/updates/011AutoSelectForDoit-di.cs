'From Squeak 2.0 BETA of May 8, 1998 on 10 May 1998 at 11:09:34 pm'!!FakeClassPool class methodsFor: 'all' stamp: 'di 5/10/1998 21:32'!adopt: classOrNil	"Temporarily use the classPool and sharedPools of another class"	classOrNil == nil		ifTrue: [classPool _ nil.				sharedPools _ nil]		ifFalse: [classPool _ classOrNil classPool.				sharedPools _ classOrNil sharedPools]! !!ParagraphEditor methodsFor: 'new selection' stamp: 'di 5/10/1998 22:00'!afterSelectionInsertAndSelect: aString	self insertAndSelect: aString at: stopBlock stringIndex ! !!ParagraphEditor methodsFor: 'new selection' stamp: 'di 5/10/1998 22:24'!insertAndSelect: aString at: anInteger	self replace: (anInteger to: anInteger - 1)		with: (' ' , aString) asText		and: [self selectAndScroll]! !!ParagraphEditor methodsFor: 'new selection' stamp: 'di 5/10/1998 21:01'!selectLine	"Make the receiver's selection, if it currently consists of an insertion point only, encompass the current line."	| string left right |	string _ paragraph text string.	left _ startBlock stringIndex.	right _ stopBlock stringIndex - 1.	left > right ifFalse: [^ self].	[left > 1 and: [(string at: (left - 1)) ~= Character cr]] whileTrue:		[left _ left - 1].	[right < string size and: [(string at: (right + 1)) ~= Character cr]] whileTrue:		[right _ right + 1].	self selectFrom: left to: (right min: string size)! !!ParagraphEditor methodsFor: 'do-its' stamp: 'di 5/10/1998 21:38'!doIt	"Set the context to include pool vars of the model.  Then evaluate."	^ self evaluateSelection.! !!ParagraphEditor methodsFor: 'do-its' stamp: 'di 5/10/1998 23:08'!evaluateSelection	"Treat the current selection as an expression; evaluate it and return the result"	| result rcvr ctxt |	self lineSelectAndEmptyCheck: [^ ''].	(model isKindOf: Model)		ifTrue: [FakeClassPool adopt: model selectedClass.  "Include model pool vars if any"				rcvr _ model doItReceiver.				ctxt _ model doItContext]		ifFalse: [rcvr _ ctxt _ nil].	result _ rcvr class evaluatorClass new evaluate: self selectionAsStream				in: ctxt to: rcvr notifying: self				ifFail: [FakeClassPool adopt: nil.						^ #failedDoit].	FakeClassPool adopt: nil.	Smalltalk logChange: self selection string.	^ result! !!ParagraphEditor methodsFor: 'do-its' stamp: 'di 5/10/1998 21:45'!inspectIt	"1/13/96 sw: minor fixup"	| result |	self controlTerminate.	result _ self evaluateSelection.	((result isKindOf: FakeClassPool) or: [result == #failedDoit])			ifTrue: [view flash]			ifFalse: [result inspect].	self controlInitialize! !!ParagraphEditor methodsFor: 'do-its' stamp: 'di 5/10/1998 21:46'!objectsReferencingIt	"Open a list inspector on all objects that reference the object that results when the current selection is evaluated.  "	| result |	self controlTerminate.	result _ self evaluateSelection.	((result isKindOf: FakeClassPool) or: [result == #failedDoit])		ifTrue: [view flash]		ifFalse: [Smalltalk					browseAllObjectReferencesTo: result					except: #()					ifNone: [:obj | view topView flash]].	self controlInitialize! !!ParagraphEditor methodsFor: 'do-its' stamp: 'di 5/10/1998 21:52'!printIt	"Treat the current text selection as an expression; evaluate it. Insert the 	description of the result of evaluation after the selection and then make 	this description the new text selection."	| result |	result _ self evaluateSelection.	((result isKindOf: FakeClassPool) or: [result == #failedDoit])			ifTrue: [view flash]			ifFalse: [self afterSelectionInsertAndSelect: result printString]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 22:04'!doIt	self handleEdit: [textMorph editor evaluateSelection]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 22:07'!inspectIt	| result |	self handleEdit:		[result _ textMorph editor evaluateSelection.		((result isKindOf: FakeClassPool) or: [result == #failedDoit])			ifTrue: [self flash]			ifFalse: [result inspect]]! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'di 5/10/1998 22:02'!printIt	| result |	self handleEdit:		[result _ textMorph editor evaluateSelection.		((result isKindOf: FakeClassPool) or: [result == #failedDoit])			ifTrue: [self flash]			ifFalse: [textMorph editor afterSelectionInsertAndSelect: result printString]]! !!PluggableTextMorph methodsFor: 'editor access' stamp: 'di 5/10/1998 22:33'!handleEdit: editBlock	textMorph editor model: model.  "For evaluateSelection"	textMorph handleEdit: editBlock.   "Update selection after edit"	self scrollSelectionIntoView! !!TextMorphForEditView methodsFor: 'all' stamp: 'di 5/10/1998 22:53'!keyStroke: evt	self editor model: editView model.  "For evaluateSelection"	super keyStroke: evt.	editView scrollSelectionIntoView! !FakeClassPool class removeSelector: #classPool:!FakeClassPool class removeSelector: #sharedPools:!Paragraph removeSelector: #removeFirstChars:!StringHolderController removeSelector: #inspectIt!StringHolderController removeSelector: #evaluateSelection!StringHolderController removeSelector: #doIt!StringHolderController removeSelector: #printIt!StringHolderController removeSelector: #afterSelectionInsertAndSelect:!PluggableTextController removeSelector: #doIt!TextMorphEditor removeSelector: #doIt!TextMorphEditor removeSelector: #printIt!TextMorphEditor removeSelector: #inspectIt!