'From Squeak2.9alpha of 13 June 2000 [latest update: #2915] on 12 November 2000 at 6:10:22 pm'!"Change Set:		250ScamperEnc-bfDate:			4 November 1999Author:			Bert FreudenbergMakes Scamper recognize special character entities (like sch&ouml;ne German umlauts) and does iso8859-1 to Squeak character conversion."!Object subclass: #HtmlEntity	instanceVariableNames: 'contents attribs '	classVariableNames: 'ReverseCharacterEntities '	poolDictionaries: ''	category: 'HTML-Parser-Entities'!!Character methodsFor: 'converting' stamp: 'sma 3/15/2000 22:57'!isoToSqueak	"Convert receiver from iso8895-1 (actually CP1252) to mac encoding.	Does not do lf/cr conversion!! Characters not available in MacRoman	encoding have been remapped to their base characters or to $?."	value < 128 ifTrue: [^ self].	^ Character value: (#(		219 63 226 196 227 201 160 224 246 228 83 220 206 63 90 63		"80-8F"		63 212 213 210 211 165 208 209 247 170 115 221 207 63 122 217		"90-9F"		202 193 162 163 63 180 124 164 172 169 187 199 194 45 168 248	 	"A0-AF"		161 177 50 51 171 181 166 225 252 49 188 200 63 63 63 192 			"B0-BF"		203 231 229 204 128 129 174 130 233 131 230 232 237 234 235 236 	"C0-CF"		63 132 241 238 239 205 133 42 175 244 242 243 134 89 63 167	 	"D0-DF"		136 135 137 139 138 140 190 141 143 142 144 145 147 146 148 149		"E0-EF"		63 150 152 151 153 155 154 214 191 157 156 158 159 121 63 216		"F0-FF"	) at: value - 127)! !!HtmlEntity class methodsFor: 'class initialization' stamp: 'bf 11/4/1999 23:10'!initialize	"HtmlEntity initialize"	ReverseCharacterEntities _ Dictionary new: 128.	#('quot' $" 'lt' $< 'amp' $& 'gt' $> ) pairsDo:		[:s :c | ReverseCharacterEntities at: s put: c asciiValue].	#('nbsp' 'iexcl' 'cent' 'pound' 'curren' 'yen' 'brvbar' 'sect' 'uml' 'copy' 'ordf' 'laquo' 'not' 'shy' 'reg' 'hibar' 'deg' 'plusmn' 'sup2' 'sup3' 'acute' 'micro' 'para' 'middot' 'cedil' 'sup1' 'ordm' 'raquo' 'frac14' 'frac12' 'frac34' 'iquest' 'Agrave' 'Aacute' 'Acirc' 'Atilde' 'Auml' 'Aring' 'AElig' 'Ccedil' 'Egrave' 'Eacute' 'Ecirc' 'Euml' 'Igrave' 'Iacute' 'Icirc' 'Iuml' 'ETH' 'Ntilde' 'Ograve' 'Oacute' 'Ocirc' 'Otilde' 'Ouml' 'times' 'Oslash' 'Ugrave' 'Uacute' 'Ucirc' 'Uuml' 'Yacute' 'THORN' 'szlig' 'agrave' 'aacute' 'acirc' 'atilde' 'auml' 'aring' 'aelig' 'ccedil' 'egrave' 'eacute' 'ecirc' 'euml' 'igrave' 'iacute' 'icirc' 'iuml' 'eth' 'ntilde' 'ograve' 'oacute' 'ocirc' 'otilde' 'ouml' 'divide' 'oslash' 'ugrave' 'uacute' 'ucirc' 'uuml' 'yacute' 'thorn' 'yuml' ) withIndexDo:		[:s :i | ReverseCharacterEntities at: s put: i - 1 + 160].! !!HtmlEntity class methodsFor: 'character entities' stamp: 'bf 11/4/1999 23:13'!valueOfHtmlEntity: specialEntity	^Character value: (ReverseCharacterEntities at: specialEntity ifAbsent:		[(specialEntity beginsWith: '#') ifTrue:			[(specialEntity copyFrom: 2 to: specialEntity size) asNumber]			ifFalse: [^nil]])! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'bf 11/4/1999 22:23'!startListItem	"begin a new list item"	listTypes size = 0 ifTrue: [ ^self ].	self ensureNewlines: 1.	listTypes last = #unordered		ifTrue: [ self addString: '¥ ' ]		ifFalse: [ self addString: (listLengths last + 1) printString.			self addString: '. ' ].	listLengths at: (listLengths size) put: (listLengths last + 1).! !!HtmlText methodsFor: 'private-initialization' stamp: 'bf 11/4/1999 23:22'!initialize: source0	super initialize: source0.	self text: source0 replaceHtmlCharRefs isoToSqueak.! !!String methodsFor: 'internet' stamp: 'sma 3/11/2000 20:40'!isoToSqueak	^ self collect: [:each | each isoToSqueak]! !!String methodsFor: 'internet' stamp: 'bf 11/4/1999 23:15'!replaceHtmlCharRefs        | pos ampIndex scIndex special specialValue outString outPos newOutPos |        outString _ String new: self size.        outPos _ 0.        pos _ 1.                [ pos <= self size ] whileTrue: [                 "read up to the next ampersand"                ampIndex _ self indexOf: $& startingAt: pos ifAbsent: [0].                                ampIndex = 0 ifTrue: [                        pos = 1 ifTrue: [ ^self ] ifFalse: [ ampIndex _ self size+1 ] ].                newOutPos _ outPos + ampIndex - pos.                outString                        replaceFrom: outPos + 1                        to: newOutPos                        with: self                        startingAt: pos.                outPos _ newOutPos.                pos _ ampIndex.                ampIndex <= self size ifTrue: [                        "find the $;"                        scIndex _ self indexOf: $; startingAt: ampIndex ifAbsent: [ self size + 1 ].                        special _ self copyFrom: ampIndex+1 to: scIndex-1.                               specialValue _ HtmlEntity valueOfHtmlEntity: special.                         specialValue                                ifNil: [                                        "not a recognized entity.  wite it back"								  scIndex > self size ifTrue: [ scIndex _ self size ].                                        newOutPos _ outPos + scIndex - ampIndex + 1.                                        outString                                                replaceFrom: outPos+1                                                to: newOutPos                                                with: self                                                startingAt: ampIndex.                                        outPos _ newOutPos.]                                ifNotNil: [                                        outPos _ outPos + 1.                                        outString at: outPos put: specialValue.].                                                pos _ scIndex + 1. ]. ].        ^outString copyFrom: 1 to: outPos! !String class removeSelector: #valueOfHtmlEntity:!HtmlEntity initialize!