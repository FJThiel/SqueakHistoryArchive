'From Squeak 2.2 of Sept 23, 1998 on 2 October 1998 at 12:12:53 pm'!"Change Set:		MorphicFixes2-diDate:			2 October 1998Author:			Dan IngallsChanged the TransformMorph #invertRect: to #invertBoundsRect:	to clarify that it returns the resulting outer bounds.Aggregated submorph display in TransformMorph (much faster).Passed depth to subCanvas in TransformMorph>>fullDispOn:without.."!!Morph methodsFor: 'drawing' stamp: 'di 10/2/1998 08:54'!flash	| w |	w _ self world.	w ifNotNil:		[Display flash: (((self transformFrom: w) invertBoundsRect: bounds)								translateBy: w viewBox origin)].! !!Morph methodsFor: 'geometry' stamp: 'di 10/2/1998 08:54'!boundsInWorld	owner ifNil: [^ bounds].	^ (owner transformFrom: self world) invertBoundsRect: bounds.! !!Morph methodsFor: 'geometry' stamp: 'di 10/2/1998 08:54'!fullBoundsInWorld	owner ifNil: [^ self fullBounds].	^ (owner transformFrom: self world) invertBoundsRect: self fullBounds.! !!MorphicTransform methodsFor: 'transformations' stamp: 'di 10/2/1998 08:57'!invertBoundsRect: aRectangle	"Return a rectangle whose coordinates have been transformed	from local back to global coordinates.  NOTE: if the transformation	is not just a translation, then it will compute the bounding box	in global coordinates."	| outerRect |	self isPureTranslation	ifTrue:		[^ (self invert: aRectangle topLeft)			corner: (self invert: aRectangle bottomRight)]	ifFalse:		[outerRect _ Rectangle encompassing:			(aRectangle innerCorners collect: [:p | self invert: p]).		^ outerRect expandBy: 1]! !!MorphicTransform methodsFor: 'transformations' stamp: 'di 10/2/1998 08:54'!invertRect: aRectangle	self error: 'method name changed to emphasize enclosing bounds'.	^ self invertBoundsRect: aRectangle! !!MorphicTransform methodsFor: 'transformations' stamp: 'di 10/2/1998 09:09'!transformBoundsRect: aRectangle	"Return a rectangle whose coordinates have been transformed	from global to local coordinates.  NOTE: if the transformation	is not just a translation, then it will compute the bounding box	in global coordinates."	| outerRect |	self isPureTranslation	ifTrue:		[^ (self transform: aRectangle topLeft)			corner: (self transform: aRectangle bottomRight)]	ifFalse:		[outerRect _ Rectangle encompassing:			(aRectangle innerCorners collect: [:p | self transform: p]).		^ outerRect expandBy: 1]! !!PluggableListMorph methodsFor: 'drawing' stamp: 'di 10/2/1998 08:54'!drawOn: aCanvas	super drawOn: aCanvas.	selectedMorph ifNotNil:		[aCanvas fillRectangle:			(((scroller transformFrom: self) invertBoundsRect: selectedMorph bounds)						intersect: scroller bounds)				color: color darker]! !!PluggableTextMorph methodsFor: 'editor access' stamp: 'di 10/2/1998 08:54'!scrollSelectionIntoView: event 	"Scroll my text into view if necessary and return true, else return false"	| selRects delta selRect rectToTest transform cpHere |	selectionInterval _ textMorph editor selectionInterval.	selRects _ textMorph paragraph selectionRects.	selRects isEmpty ifTrue: [^ false].	rectToTest _ selRects first merge: selRects last.	transform _ scroller transformFrom: self.	(event notNil and: [event anyButtonPressed]) ifTrue:  "Check for autoscroll"		[cpHere _ transform invert: event cursorPoint.		cpHere y <= self top			ifTrue: [rectToTest _ selRects first topLeft extent: 2@2]			ifFalse: [cpHere y >= self bottom					ifTrue: [rectToTest _ selRects last bottomRight extent: 2@2]					ifFalse: [^ false]]].	selRect _ transform invertBoundsRect: rectToTest.	selRect height > bounds height		ifTrue: [^ false].  "Would not fit, even if we tried to scroll"	(delta _ selRect amountToTranslateWithin: self bounds) y ~= 0 ifTrue:		["Scroll end of selection into view if necessary"		self scrollBy: 0@delta y.		^ true].	^ false! !!TransformMorph methodsFor: 'drawing' stamp: 'di 10/2/1998 09:58'!fullDrawOn: aCanvas	"Overridden to clip submorph drawing to my bounds,	and to translate, rotate and scale as appropriate."	| clippingCanvas sourceQuad warp innerRect patchRect subCanvas offsetCanvas patchForm |	(aCanvas isVisible: self bounds) ifFalse: [^ self].	self drawOn: aCanvas.	self hasSubmorphs ifFalse: [^ self].	transform isPureTranslation		ifTrue:		[clippingCanvas _ aCanvas copyOffset: transform offset negated truncated									clipRect: self innerBounds.		submorphs reverseDo: [:m | m fullDrawOn: clippingCanvas]]		ifFalse:		[innerRect _ self innerBounds.		"Render the submorphs visible in the clipping rectangle, as patchForm"		patchRect _ 			(transform transformBoundsRect: (aCanvas clipRect intersect: innerRect))			intersect:			(Rectangle merging: (self submorphs collect: [:m | m fullBounds])).		subCanvas _ FormCanvas extent: patchRect extent depth: aCanvas depth.		offsetCanvas _ subCanvas copyOffset: patchRect topLeft negated.		submorphs reverseDo:			[:m | m fullDrawOn: offsetCanvas].		patchForm _ subCanvas form.		"Now do a warping blt of the patchForm onto the incoming canvas"		sourceQuad _ (transform sourceQuadFor: innerRect)						collect: [:p | p - patchRect topLeft].		warp _ aCanvas warpFrom: sourceQuad toRect: innerRect.		warp cellSize: smoothing;  "installs a colormap if smoothing > 1"			sourceForm: patchForm;			warpBits]	! !!TransformMorph methodsFor: 'drawing' stamp: 'di 10/2/1998 11:26'!fullDrawOn: aCanvas without: stopMorph andStopThere: stopThere	"Like fullDrawOn:, except it does not display stopMorph,	and it will not display anything above it if stopThere is true.	Returns true if it has hit stopMorph, and should stop."	| clippingCanvas sourceQuad warp innerRect patchRect subCanvas offsetCanvas stopped patchForm |	(aCanvas isVisible: self bounds) ifFalse: [^ false].	self drawOn: aCanvas.	self hasSubmorphs ifFalse: [^ self].	transform isPureTranslation	ifTrue:		[clippingCanvas _ aCanvas copyOffset: transform offset negated truncated									clipRect: self innerBounds.		submorphs reverseDo:			[:m | m == stopMorph				ifTrue: [stopThere ifTrue: [^ true]]				ifFalse: [(m fullDrawOn: clippingCanvas								without: stopMorph								andStopThere: stopThere)							ifTrue: [^ true]]].		^ false]	ifFalse:		[innerRect _ self innerBounds.		"Render the submorphs visible in the clipping rectangle, as patchForm"		patchRect _ 			(transform transformBoundsRect: (aCanvas clipRect intersect: innerRect))			intersect:			(Rectangle merging: (self submorphs collect: [:m | m fullBounds])).		subCanvas _ FormCanvas extent: patchRect extent depth: aCanvas depth.		offsetCanvas _ subCanvas copyOffset: patchRect topLeft negated.		stopped _ false.		submorphs reverseDo:			[:m | stopped ifFalse:				["If we have not hit stopMorph..."				(m == stopMorph  "and this submorph is not stopMorph"					or: ["Then display it"						m fullDrawOn: offsetCanvas							without: stopMorph							andStopThere: stopThere])					ifTrue: ["We hit stopMorph here or below, so..."							stopped _ stopThere]]].		patchForm _ subCanvas form.		"Now do a warping blt of the patchForm onto the incoming canvas"		sourceQuad _ (transform sourceQuadFor: innerRect)						collect: [:p | p - patchRect topLeft].		warp _ aCanvas warpFrom: sourceQuad toRect: innerRect.		warp cellSize: smoothing;  "installs a colormap if smoothing > 1"			sourceForm: patchForm;			warpBits.		^ stopped]! !!TransformMorph methodsFor: 'change reporting' stamp: 'di 10/2/1998 08:54'!invalidRect: damageRect	"Translate damage reports from submorphs by the scrollOffset."	owner ifNil: [^ self].	^ owner invalidRect: ((transform invertBoundsRect: damageRect) intersect: bounds)! !!TransformationMorph methodsFor: 'change reporting' stamp: 'di 10/2/1998 08:59'!layoutChanged	"Recompute bounds as a result of change"	self hasSubmorphs ifTrue:		[bounds _ (transform invertBoundsRect:					(Rectangle merging:						(self submorphs collect: [:m | m fullBounds])))				expandBy: 1].	super layoutChanged! !!WorldMorph methodsFor: 'sensing' stamp: 'di 10/2/1998 11:51'!colorAt: aPoint belowMorph: aMorph	"Return the color of the pixel immediately behind the given morph at the given point.	NOTE: due to some bounds wobble in flexing, we take the middle of 3x3 rect."	^ (self patchAt: (aPoint-1 extent: 3) without: aMorph andNothingAbove: true)		colorAt: 1@1! !Morph removeSelector: #imageFormDepth:clippedTo:!Morph removeSelector: #imageFormDepth:without:andStopThere:!