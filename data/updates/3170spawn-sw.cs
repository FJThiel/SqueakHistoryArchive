'From Squeak2.9alpha of 5 August 2000 [latest update: #3226] on 4 January 2001 at 5:32:06 pm'!"Change Set:		spawn-swDate:			4 January 2001Author:			Scott WallaceCleanups and improvements to 'spawn' (cmd-o), a command that can be issued in any text-bearing pane.When 'spawn' is issued from a code pane, as often as not the intention of the user is to define a new selector in the spawned browser rather than to submit a code change for the existing selector, but the traditional implementation of 'spawn' has never been too friendly to that use, because the selector shown both in the window title and in the top (message-list) pane always misleadingly continued to be the old one.  So 'spawn' is changed such that most of the time it now launches a message-category browser rather than a single-message browser.  This approach serves both typical uses of 'spawn' equally well.Also fixed here is the problem that when you spawned from a code pane when there was a class but no message-category selected, you got a useless spawned browser because it was not set up to accept a method, and various other similar glitches in spawning.Also, the spawning code is elevated to CodeHolder, thus allowing various redundant implementations in various subclasses to be removed.Also, the (possibly long-standing) bug that made the menus of selector lists in message-category-browsers mysteriously not have menu titles is fixed."!!CodeHolder methodsFor: 'categories' stamp: 'sw 1/4/2001 12:04'!categoryOfCurrentMethod	"Answer the category that owns the current method.  If unable to determine a category, answer nil."	| aClass aSelector |	^ (aClass _ self selectedClassOrMetaClass) ifNotNil: [(aSelector _ self selectedMessageName) ifNotNil: [aClass whichCategoryIncludesSelector: aSelector]]! !!CodeHolder methodsFor: 'commands' stamp: 'sw 1/4/2001 12:34'!buildClassBrowserEditString: aString 	"Create and schedule a new class browser for the current selection, with initial textual contents set to aString.  This is used specifically in spawning where a class is established but a method-category is not."	| newBrowser  |	newBrowser _ Browser new.	newBrowser setClass: self selectedClassOrMetaClass selector: nil.	newBrowser editSelection: #newMessage.	Browser openBrowserView: (newBrowser openOnClassWithEditString: aString)			label: 'Class Browser: ', self selectedClassOrMetaClass name! !!CodeHolder methodsFor: 'commands' stamp: 'sw 1/4/2001 12:17'!spawn: aString 	"Create and schedule a spawned message category browser for the currently selected message category.  The initial text view contains the characters in aString.  In the spawned browser, preselect the current selector (if any) as the going-in assumption, though upon acceptance this will often change"	| newBrowser aCategory aClass |	(aClass _ self selectedClassOrMetaClass) isNil ifTrue:		[^ aString isEmptyOrNil ifFalse: [(Workspace new contents: aString) openLabel: 'spawned workspace']].	(aCategory _ self categoryOfCurrentMethod)		ifNil:			[self buildClassBrowserEditString: aString]		ifNotNil:			[newBrowser _ Browser new setClass: aClass selector: self selectedMessageName.			newBrowser setOriginalCategoryIndexForCurrentMethod.			Browser openBrowserView: (newBrowser openMessageCatEditString: aString)		label: 'category "', aCategory, '" in ', 				newBrowser selectedClassOrMetaClassName]! !!Browser methodsFor: 'accessing' stamp: 'sw 12/17/2000 23:24'!editSelection: aSelection	"Set the editSelection as requested."	editSelection _ aSelection! !!Browser methodsFor: 'accessing' stamp: 'sw 1/4/2001 12:24'!spawn: aString 	"Create and schedule a fresh browser and place aString in its code pane.  This method is called when the user issues the #spawn command (cmd-o) in any code pane.  Whatever text was in the original code pane comes in to this method as the aString argument; the changes in the original code pane have already been cancelled by the time this method is called, so aString is the only copy of what the user had in his code pane."	self selectedClassOrMetaClass ifNotNil: [^ super spawn: aString].	systemCategoryListIndex ~= 0		ifTrue:			["This choice is slightly useless but is the historical implementation"			^ self buildSystemCategoryBrowserEditString: aString].			^ super spawn: aString  	"This bail-out at least saves the text being spawned, which would otherwise be lost"! !!Browser methodsFor: 'initialize-release' stamp: 'sw 12/29/2000 12:19'!openAsMorphMsgCatEditing: editString	"Create a pluggable version a Browser on just a message category."	| window codePane baseline aTextMorph |	window _ (SystemWindow labelled: 'later') model: self.	window addMorph: ((PluggableListMorph on: self list: #messageCatListSingleton			selected: #indexIsOne changeSelected: #indexIsOne:			menu: #messageCategoryMenu:) enableDragNDrop: Preferences browseWithDragNDrop)		frame: (0@0 corner: 1.0@0.06).	window addMorph: ((PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:) enableDragNDrop: Preferences browseWithDragAndDrop; menuTitleSelector: #messageListSelectorTitle; yourself)		frame: (0@0.06 corner: 1.0@(baseline _ 0.30)).	Preferences useAnnotationPanes		ifTrue:			[aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@baseline corner: 1@(baseline + 0.05)).			baseline _ baseline + 0.05].	Preferences optionalButtons		ifTrue:			[window addMorph: self optionalButtonRow frame: ((0@baseline corner: 1 @ (baseline + 0.08))).			baseline _ baseline + 0.08].	codePane _ PluggableTextMorph on: self text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	editString ifNotNil: [codePane editString: editString.					codePane hasUnacceptedEdits: true].	window addMorph: codePane		frame: (0@baseline corner: 1@1).	window setUpdatablePanesFrom: #(messageCatListSingleton messageList).	^ window! !!Browser methodsFor: 'message category functions' stamp: 'sw 1/4/2001 12:05'!categoryOfCurrentMethod	"Determine the method category associated with the receiver.  If there is a method currently selected, answer its category.  If no that owns the current method.  Return the category name."	| aCategory |	^ super categoryOfCurrentMethod ifNil:		[(aCategory _ self messageCategoryListSelection) == ClassOrganizer allCategory					ifTrue:						[nil]					ifFalse:						[aCategory]]! !MessageSet removeSelector: #buildMessageCategoryBrowserEditString:!MessageSet removeSelector: #spawn:!Debugger removeSelector: #spawn:!ChangeSorter removeSelector: #spawn:!Browser removeSelector: #buildClassBrowserEditString:!!CodeHolder reorganize!('annotation' annotation annotationRequests)('categories' categoryOfCurrentMethod changeCategory methodCategoryChanged selectedMessageCategoryName)('diffs' diffButton diffFromPriorSourceFor: showDiffs showDiffs: toggleDiff toggleDiffing)('contents' commentContents contents contentsChanged contentsSymbol contentsSymbol:)('commands' adoptMessageInCurrentChangeset  makeSampleInstance    showUnreferencedInstVars spawn: spawnFullProtocol spawnHierarchy spawnProtocol)('source vs documentation' showComment showDocumentation: showingDocumentation showingSource sourceOrInfoButton toggleShowDocumentation)('misc' buildClassBrowserEditString: containingWindow decorateForInheritance  isThereAnOverride  modelWakeUpIn: okayToAccept priorSourceOrNil releaseCachedState sampleInstanceOfSelectedClass setClassAndSelectorIn:)('self-updating' didCodeChangeElsewhere stepIn: updateCodePaneIfNeeded updateListsAndCodeIn: wantsStepsIn:)!