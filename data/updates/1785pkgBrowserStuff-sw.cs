'From Squeak2.7 of 5 January 2000 [latest update: #1783] on 13 January 2000 at 6:10:21 pm'!"Change Set:		pkgBrowserStuff-swDate:			13 January 2000Author:			Scott WallaceGives the Package Brower a more first-class status in the system through the following changes:* Puts a prototypical PackageBrowser in the tools flap and in the standard parts bin* Adds a separate item to the 'open...' menus to allow the user to request a package browser.* If the 'browserShowsPackagePane' preference is true, then all the 'browse full' and 'browse it' commands will launch a Package rather than a System browser."!!Browser methodsFor: 'initialize-release' stamp: 'sw 1/13/2000 16:45'!defaultBrowserTitle	^ 'System Browser'! !!Browser class methodsFor: 'instance creation' stamp: 'sw 1/13/2000 16:45'!fullOnClass: aClass selector: aSelector	"Open a new full browser set to class."	| brow classToUse |	classToUse _ Preferences browseToolClass.	brow _ classToUse new.	brow setClass: aClass selector: aSelector.	classToUse openBrowserView: (brow openEditString: nil)		label: brow defaultBrowserTitle! !!Browser class methodsFor: 'instance creation' stamp: 'sw 1/13/2000 16:46'!openBrowser	"Create and schedule a BrowserView with label 'System Browser'. The 	view consists of five subviews, starting with the list view of system 	categories of SystemOrganization. The initial text view part is empty."	Browser openBrowserView: (Browser new openEditString: nil)			label: 'System Browser'! !!HandMorph methodsFor: 'world menu' stamp: 'sw 1/12/2000 18:09'!openMenu"temporary support of WorldWindow (easy open)"	"Build the open window menu for the world."	| menu |	menu _ (MenuMorph entitled: 'open...') defaultTarget: self.	menu addStayUpItem.	menu add: 'browser' action: #openBrowser.	menu add: 'package browser' action: #openPackageBrowser.	menu add: 'method finder' action: #openSelectorBrowser.	menu add: 'workspace' action: #openWorkspace.	menu add: 'file list' action: #openFileList.	menu add: 'file...' action: #openFileDirectly.	menu add: 'transcript' action: #openTranscript.	menu add: 'inner world' action: #openWorldInWindow.	menu addLine.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu addLine.	menu add: 'email reader' action: #openEmail.	menu add: 'web browser' action: #openWebBrowser.	menu add: 'IRC chat' action: #openIRC.	menu addLine.	(Preferences allowMVCprojects and: [Smalltalk includesKey: #StandardSystemView])		ifTrue: [menu add: 'mvc project' action: #openMVCProject].	menu add: 'morphic project' action: #openMorphicProject.	menu add: 'construction project' action: #openConstructionProject.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 1/10/2000 10:41'!openPackageBrowser	PackageBrowser openBrowser! !!PackageBrowser methodsFor: 'initialize-release' stamp: 'sw 1/13/2000 16:45'!defaultBrowserTitle	^ 'Package Browser'! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'sw 1/13/2000 16:42'!browseIt	"Launch a browser for the current selection, if appropriate"	| aSymbol anEntry brow toolClass label |	self lineSelectAndEmptyCheck: [^ self].	(aSymbol _ self selectedSymbol) isNil ifTrue: [^ view flash].	self terminateAndInitializeAround:		[aSymbol first isUppercase			ifTrue:				[anEntry _ (Smalltalk at: aSymbol ifAbsent: [nil]).				anEntry isNil ifTrue: [^ view flash].				(anEntry isKindOf: Class)					ifFalse:	[anEntry _ anEntry class].				toolClass _ Preferences browseToolClass.				brow _ toolClass new.				(toolClass == HierarchyBrowser) ifTrue:					[brow initHierarchyForClass: anEntry meta: false.					label _ 'Hierarchy for ', anEntry name].				(toolClass == Browser or: [toolClass == PackageBrowser]) ifTrue:					[brow setClass: anEntry selector: nil.					label _ 'Browser'].				toolClass openBrowserView: (brow openEditString: nil)						label: label]			ifFalse:				[Smalltalk browseAllImplementorsOf: aSymbol]]! !!Preferences class methodsFor: 'hard-coded prefs' stamp: 'sw 1/13/2000 16:42'!browseToolClass	^ Preferences browserShowsPackagePane		ifTrue:			[PackageBrowser]		ifFalse:			[Browser]! !!Preferences class methodsFor: 'help' stamp: 'sw 1/13/2000 18:09'!initHelpMsgsD	"Automatically called whenever you call   	Preferences initializeHelpMessages		or	Preferences callHelpMessageInitializersby virtue of its being in the 'help' category of Preferences class"	#((browserShowsPackagePane			'If true, then the various ''browse full'' and ''browse it'' commands (usually invoked via cmd-b) will open a Package Browser rather than a System Browser.  The Package Browser includes a package pane which groups system categories into packages based on the initial portion of their category name.')	(projectsSentToDisk			'If true, entering a new project swaps it in and swaps out other projects as appropriate. Projects are swapped in and out as ImageSegments, stored as files on disk in an image segment folder associated with the current image.')	(scrollBarsNarrow			'If true, morphic scrollbars will be narrow.')	(scrollBarsOnRight			'If true, morphic scrollbars in subsequently opened windows will appear on the right side of their pane.')	(scrollBarsWithoutMenuButton			'If true, morphic scrollbars in subsequently opened windows will not include a menu button.')	) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!Preferences class methodsFor: 'standard preferences' stamp: 'programmatic 1/13/2000 10:57'!browserShowsPackagePane	^ self valueOfFlag: #browserShowsPackagePane! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 1/10/2000 10:48'!customPagesForPartsBin	| aPage aWindow  pu pageList aClass |	pageList _ OrderedCollection new.	pageList add: (aPage _ self newPageForStandardPartsBin).	aPage addMorphBack: (PasteUpMorph authoringPrototype color: (Color r: 0.96 g: 0.96 b: 0.96)).	aPage addMorphBack: TabbedPalette authoringPrototype.	aPage addMorphBack: BookMorph authoringPrototype.	aPage addMorphBack: ScriptingSystem prototypicalHolder.	aPage addMorphBack: Morph new previousPageButton markAsPartsDonor.	aPage addMorphBack: Morph new nextPageButton markAsPartsDonor.	#(DatumMorph) do:		[:aName | (aClass _ Smalltalk at: aName ifAbsent: [nil]) ifNotNil:			[aPage addMorphBack: aClass authoringPrototype]].	pageList add: (aPage _ self newPageForStandardPartsBin).	aWindow _ Browser new openAsMorphEditing: nil.	aWindow setLabel: 'System Browser'.	aPage addMorphBack: aWindow applyModelExtent.	aWindow _ PackageBrowser new openAsMorphEditing: nil.	aWindow setLabel: 'Package Browser'.	aPage addMorphBack: aWindow applyModelExtent.	aWindow _ Workspace new embeddedInMorphicWindowLabeled: 'Workspace'.	aPage addMorphBack: aWindow applyModelExtent.	aPage addMorphBack: FileList openAsMorph applyModelExtent.	aPage addMorphBack: DualChangeSorter new morphicWindow applyModelExtent.	aPage addMorphBack: ChangeSorter new morphicWindow applyModelExtent.	aWindow _ SelectorBrowser new morphicWindow.	aWindow setLabel: 'Selector Browser'.	aPage addMorphBack: aWindow.	pageList add: (aPage _ self newPageForStandardPartsBin).	aPage addMorphBack: ScriptingSystem newScriptingSpace.	aPage addMorphBack: ScriptingSystem scriptControlButtons.	aPage addMorphBack: TrashCanMorph new.	aPage addMorphBack: PasteUpMorph authoringPrototype.	aPage addMorphBack: ((pu _ PasteUpMorph newSticky) embeddedInMorphicWindowLabeled: 'assembly').	pu color: (Color r: 0.839 g: 1.0 b: 0.935).	pageList do:		[:page |			page  replaceTallSubmorphsByThumbnails.			page fixLayout].	^ pageList! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 1/10/2000 10:40'!openPackageBrowser 	"Create and schedule a Browser view for browsing code."	PackageBrowser openBrowser! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 1/10/2000 10:41'!openMenu	^ SelectionMenu labelList:		#(	'keep this menu up'			'browser'			'package browser'			'method finder'			'workspace'			'file list'			'file...'			'transcript'			'morphic world'			'simple change sorter'			'dual change sorter'			'mvc project'			'morphic project'			'construction project'			)		lines: #(1 9 11)		selections: #(durableOpenMenuopenBrowser openPackageBrowser openSelectorBrowser openWorkspace openFileList openFile openTranscript openMorphicWorldopenSimpleChangeSorter openChangeManageropenProject  openMorphicProject  openConstructionProject )"ScreenController  new openMenu startUp"! !!Utilities class methodsFor: 'miscellaneous' stamp: 'sw 1/10/2000 10:44'!addSampleWindowsTo: aPage	"Add windows representing a browser, a workspace, etc., to aPage"	|  aWindow pu |	aWindow _ Browser new openAsMorphEditing: nil.	aWindow setLabel: 'System Browser'.	aPage addMorphBack: aWindow applyModelExtent.	aWindow _ PackageBrowser new openAsMorphEditing: nil.	aWindow setLabel: 'Package Browser'.	aPage addMorphBack: aWindow applyModelExtent.	aWindow _ Workspace new embeddedInMorphicWindowLabeled: 'Workspace'.	aPage addMorphBack: aWindow applyModelExtent.	aPage addMorphBack: FileList openAsMorph applyModelExtent.	aPage addMorphBack: DualChangeSorter new morphicWindow applyModelExtent.	aPage addMorphBack: ChangeSorter new morphicWindow applyModelExtent.	aWindow _ SelectorBrowser new morphicWindow.	aWindow setLabel: 'Selector Browser'.	aPage addMorphBack: aWindow.	aPage addMorphBack: ((pu _ PasteUpMorph newSticky borderInset) embeddedInMorphicWindowLabeled: 'assembly').	pu color: (Color r: 0.839 g: 1.0 b: 0.935)! !"Postscript:"Utilities replaceToolsFlap.ScriptingSystem resetStandardPartsBin.Preferences callHelpMessageInitializers.!