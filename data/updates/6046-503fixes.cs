!Morph class methodsFor: 'scripting' stamp: 'yo 8/2/2004 16:45'!additionsToViewerCategoryColorAndBorder	"Answer viewer additions for the 'color & border' category"	^#(		#'color & border' 		(			(slot color 'The color of the object' Color readWrite Player getColor  Player  setColor:)			(slot borderStyle 'The style of the object''s border' BorderStyle readWrite Player getBorderStyle player setBorderStyle:)			(slot borderColor 'The color of the object''s border' Color readWrite Player getBorderColor Player  setBorderColor:)			(slot borderWidth 'The width of the object''s border' Number readWrite Player getBorderWidth Player setBorderWidth:)			(slot roundedCorners 'Whether corners should be rounded' Boolean readWrite Player getRoundedCorners Player setRoundedCorners:)			(slot gradientFill 'Whether a gradient fill should be used' Boolean readWrite Player getUseGradientFill Player setUseGradientFill:)			(slot secondColor 'The second color used when gradientFill is in effect' Color readWrite Player getSecondColor Player setSecondColor:)			(slot radialFill 'Whether the gradient fill, if used, should be radial' Boolean readWrite Player getRadialGradientFill Player setRadialGradientFill:)			(slot dropShadow 'Whether a drop shadow is shown' Boolean readWrite Player getDropShadow Player setDropShadow:)			(slot shadowColor 'The color of the drop shadow' Color readWrite Player getShadowColor Player setShadowColor:)		)	)! !!Player methodsFor: 'slots-kernel' stamp: 'yo 8/1/2004 02:04'!methodInterfacesForInstanceVariablesCategoryIn: aVocabulary	"Return a collection of methodInterfaces for the instance-variables category.  The vocabulary parameter, at present anyway, is not used."	| aList anInterface itsSlotName |	aList _ OrderedCollection new.	self slotInfo associationsDo:		[:assoc |			anInterface _ MethodInterface new.			itsSlotName _ assoc key.			anInterface				wording: itsSlotName;				helpMessage: 'a variable defined by this object' translated.			anInterface selector: (Utilities getterSelectorFor: itsSlotName) type: assoc value type setter: (Utilities setterSelectorFor: itsSlotName).			anInterface setToRefetch.			aList add: anInterface].	^ aList! !!Player methodsFor: 'slots-user' stamp: 'yo 8/1/2004 01:08'!removeSlotNamed: aSlotName	"The user has requested that an instance variable be removed..."	| aSetter aGetter |	(self okayToRemoveSlotNamed: aSlotName) ifFalse:		[^ self inform: 'Sorry, ', aSlotName, ' is inuse in a script.'].	aSetter _ Utilities setterSelectorFor: aSlotName.	aGetter _ Utilities getterSelectorFor: aSlotName.	((self systemNavigation allCallsOn: aSetter) size > 0 or: [(self systemNavigation allCallsOn: aGetter) size > 0]) ifTrue:		[self inform: 'Caution!!  There may be scripts belonging toother objects that may rely on the presence ofthis variable.  If there are, they may now be broken.You may need to fix them up manually.'].	self class removeInstVarName: aSlotName asString.	self updateAllViewers! !!Player methodsFor: 'slots-user' stamp: 'yo 8/1/2004 19:46'!setPrecisionFor: slotName 	"Set the precision for the given slot name"	| aList aMenu reply val aGetter places |	aGetter := Utilities getterSelectorFor: slotName.	places := Utilities 				decimalPlacesForFloatPrecision: (self defaultFloatPrecisionFor: aGetter).	aList := #('0' '1' '2' '3' '4' '5' '6').	aMenu := SelectionMenu labels: aList				selections: (aList collect: [:m | m asNumber]).	reply := aMenu 				startUpWithCaption: ('How many decimal places? (currently {1})' translated						format: {places}).	reply ifNotNil: 			[(self slotInfo includesKey: slotName) 				ifTrue: 					["it's a user slot"					(self slotInfoAt: slotName) 						floatPrecision: (Utilities floatPrecisionForDecimalPlaces: reply).					self class allInstancesDo: 							[:anInst | 							reply == 0 								ifFalse: 									[((val := anInst instVarNamed: slotName asString) isInteger) 										ifTrue: [anInst instVarNamed: slotName asString put: val asFloat]].							anInst updateAllViewers]]				ifFalse: 					["it's specifying a preference for precision on a system-defined numeric slot"					self noteDecimalPlaces: reply forGetter: aGetter.					self updateAllViewers]]! !!ReturnNode methodsFor: 'printing' stamp: 'yo 8/2/2004 17:21'!expr	^ expr.! !!SlotInformation methodsFor: 'access' stamp: 'yo 8/1/2004 02:05'!documentation	"Answer the receiver's documentation"	documentation ifNil: [documentation _ 'This is a variable defined by you.  Please edit this into your own meaningful documentation.' translated].	^ documentation! !!StandardViewer methodsFor: 'initialization' stamp: 'sw 3/3/2004 00:56'!addHeaderMorphWithBarHeight: anInteger includeDismissButton: aBoolean	"Add the header morph to the receiver, using anInteger as a guide for its height, and if aBoolean is true, include a dismiss buton for it"	| header aFont aButton aTextMorph nail wrpr costs headWrapper |	header _ AlignmentMorph newRow color: self color muchLighter; wrapCentering: #center; cellPositioning: #leftCenter.	aFont _ Preferences standardButtonFont.	aBoolean ifTrue:		[header addMorph: (aButton _ SimpleButtonMorph new label: 'O' font: aFont).		aButton target: self;				color:  Color tan;				actionSelector: #dismiss;				setBalloonText: 'remove this entire Viewer from the screendon''t worry -- nothing will be lost!!.' translated.		header addTransparentSpacerOfSize: 4@1].	aButton _ IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: #AddCategoryViewer); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addCategoryViewer;			setBalloonText: 'click here to addanother category pane' translated;			shedSelvedge.	header addMorphBack: aButton.	header addTransparentSpacerOfSize: 4@1.	costs _ scriptedPlayer costumes.	costs ifNotNil:	[(costs size > 1 or: [costs size = 1 and: [costs first ~~ scriptedPlayer costume]]) ifTrue:		[header addUpDownArrowsFor: self.		(wrpr _ header submorphs last) submorphs second setBalloonText: 'switch to previous costume' translated.			wrpr submorphs first  setBalloonText: 'switch to next costume' translated]].		nail _ (self hasProperty: #noInteriorThumbnail)		ifFalse:			[ThumbnailMorph new objectToView: scriptedPlayer viewSelector: #costume]		ifTrue:			[ImageMorph new image: Cursor menu].	nail on: #mouseDown send: #offerViewerMenuForEvt:morph: to: scriptedPlayer.	header addMorphBack: nail.	nail setBalloonText: 'click here to get a menuthat will allow you toadd a variable,tear off a tile, etc..' translated.	(self hasProperty: #noInteriorThumbnail)		ifFalse:			[nail borderWidth: 3; borderColor: #raised].	header addTransparentSpacerOfSize: 5@5."	aButton _ SimpleButtonMorph new target: self; actionSelector: #newEmptyScript; label: 'S' translated font: (aFont _ StrikeFont familyName: #ComicBold size: 16);  color: Color transparent; borderWidth: 0; actWhen: #buttonDown.	aButton setBalloonText: 'drag from here tocreate a new scriptfor this object' translated.		header addMorphBack: aButton.	header addTransparentSpacerOfSize: 8@5."		aButton _ SimpleButtonMorph new target: scriptedPlayer; actionSelector: #addInstanceVariable; label: 'v' translated font: aFont;  color: Color transparent; borderWidth: 1; actWhen: #buttonUp.	"aButton firstSubmorph color: Color gray."	aButton setBalloonText: 'click here to add a variableto this object.' translated.	header addMorphBack: aButton.	header addTransparentSpacerOfSize: 5@5.	self viewsMorph ifTrue: [scriptedPlayer costume assureExternalName].	aTextMorph _ UpdatingStringMorph new		useStringFormat;		target:  scriptedPlayer;		getSelector: #nameForViewer;		setNameTo: 'name';		font: ScriptingSystem fontForNameEditingInScriptor.	self viewsMorph ifTrue:		[aTextMorph putSelector: #setName:.		aTextMorph setProperty: #okToTextEdit toValue: true].	aTextMorph step.	header  addMorphBack: aTextMorph.	aTextMorph setBalloonText: 'Click here to edit the player''s name.' translated.		header beSticky.	anInteger > 0		ifTrue:			[headWrapper _ AlignmentMorph newColumn color: self color.			headWrapper addTransparentSpacerOfSize: (0 @ anInteger).			headWrapper addMorphBack: header.			self addMorph: headWrapper]		ifFalse:			[self addMorph: header]! !!TTCFont methodsFor: 'accessing' stamp: 'yo 7/31/2004 19:30'!ascentOf: aCharacter"	(self hasGlyphFor: aCharacter) ifFalse: [		fallbackFont ifNotNil: [			^ fallbackFont ascentOf: aCharacter.		].	]."	^ self ascent.! !!TTCFont methodsFor: 'accessing' stamp: 'yo 7/31/2004 19:30'!descentOf: aCharacter"	(self hasGlyphFor: aCharacter) ifFalse: [		fallbackFont ifNotNil: [			^ fallbackFont descentOf: aCharacter.		].	]."	^ self descent.! !!TTCFont methodsFor: 'private' stamp: 'yo 7/31/2004 19:41'!at: char put: form	self cache at: (char asInteger + 1) put: (foregroundColor -> form).! !!TTCFont methodsFor: 'private' stamp: 'yo 7/31/2004 19:41'!formOf: char	| f assoc code |	char charCode > 255 ifTrue: [		fallbackFont ifNotNil: [			^ fallbackFont formOf: char		].		code _ $? charCode	] ifFalse: [		code _ char charCode	].		assoc _ self cache at: (code + 1).	assoc ifNotNil: [		(assoc key = foregroundColor) ifTrue: [			^ assoc value.		].	].	f _ self computeForm: code.	self at: code put: f.	^ f.! !!MultiByteBinaryOrTextStream methodsFor: 'as yet unclassified' stamp: 'yo 7/30/2004 06:59'!contents	| ret state |	state _ converter saveStateOf: self.	ret _ self upToEnd.	converter restoreStateOf: self with: state.	^ ret.! !ScrollController subclass: #ParagraphEditor	instanceVariableNames: 'paragraph startBlock stopBlock beginTypeInBlock emphasisHere initialText selectionShowing otherInterval lastParentLocation '	classVariableNames: 'ChangeText CmdActions FindText Keyboard ShiftCmdActions TextEditorYellowButtonMenu UndoInterval UndoMessage UndoParagraph UndoSelection Undone '	poolDictionaries: 'TextConstants'	category: 'Kernel-ST80 Remnants'!ArrayedCollection subclass: #Text	instanceVariableNames: 'string runs'	classVariableNames: ''	poolDictionaries: 'TextConstants'	category: 'Collections-Text'!!ParagraphEditor methodsFor: 'parenblinking' stamp: 'mir 8/3/2004 13:31'!blinkParenAt: parenLocation 	self text		addAttribute: TextEmphasis bold		from: parenLocation		to: parenLocation.	lastParentLocation _ parenLocation.! !!ParagraphEditor methodsFor: 'parenblinking' stamp: 'mir 8/3/2004 13:31'!clearParens	lastParentLocation ifNotNil:		[self text string size >= lastParentLocation ifTrue: [			self text				removeAttribute: TextEmphasis bold				from: lastParentLocation				to: lastParentLocation]]! !!StrikeFont methodsFor: 'private' stamp: 'mir 8/3/2004 12:08'!createCharacterToGlyphMap	"Private. Create the character to glyph mapping for a font that didn't have any before. This is basically equivalent to what the former setStopCondition did, only based on indexes."	| map |	map _ Array new: 256.	0 to: minAscii - 1 do:[:i| map at: i + 1 put: maxAscii + 1].	minAscii to: maxAscii do:[:i| map at: i + 1 put: i].	maxAscii + 1 to: 255 do:[:i| map at: i + 1 put: maxAscii + 1].	^map! !!Text class methodsFor: 'class initialization' stamp: 'mir 8/3/2004 13:30'!initTextConstants 	"Initialize constants shared by classes associated with text display, e.g., 	Space, Tab, Cr, Bs, ESC."		"1/24/96 sw: in exasperation and confusion, changed cmd-g mapping from 231 to 232 to see if I could gain any relief?!!"	| letter varAndValue tempArray width |	"CtrlA..CtrlZ, Ctrla..Ctrlz"	letter _ $A. 	#(		212 230 228 196 194 226 241 243 214 229 200 217 246 			245 216 202 210 239 211 240 197 198 209 215 242 231	 		1 166 228 132 130 12 232 179 150 165 136 153 182 			14 15 138 17 18 19 11 21 134 145 151 178 167 ) do:		[:kbd |		TextConstants at: ('Ctrl', letter asSymbol) asSymbol put: kbd asCharacter.		letter _ letter == $Z ifTrue: [$a] ifFalse: [(letter asciiValue + 1) asCharacter]].	varAndValue _ #(		Space	32		Tab		9		CR		13		Enter	3		BS		8		BS2		158		ESC		160		Clear 	173	).	varAndValue size odd ifTrue: [self error: 'unpaired text constant'].	(2 to: varAndValue size by: 2) do:		[:i | TextConstants at: (varAndValue at: i - 1) put: (varAndValue at: i) asCharacter].	varAndValue _ #(		CtrlDigits 			(159 144 143 128 127 129 131 180 149 135)		CtrlOpenBrackets	(201 7 218 249 219 15)			"lparen gottn by ctrl-_ = 201; should be 213 but can't type that on Mac"			"location of non-character stop conditions"		EndOfRun	257		CrossedX	258			"values for alignment"		LeftFlush	0		RightFlush	1		Centered	2		Justified	3			"subscripts for a marginTabsArray tuple"		LeftMarginTab	1		RightMarginTab	2			"font faces"		Basal	0		Bold	1		Italic	2			"in case font doesn't have a width for space character"			"some plausible numbers-- are they the right ones?"		DefaultSpace			4		DefaultTab				24		DefaultLineGrid			16		DefaultBaseline			12		DefaultFontFamilySize	3	"basal, bold, italic"	).	varAndValue size odd ifTrue: [self error: 'unpaired text constant'].	(2 to: varAndValue size by: 2) do:		[:i | TextConstants at: (varAndValue at: i - 1) put: (varAndValue at: i)].	TextConstants at: #DefaultRule	put: Form over.	TextConstants at: #DefaultMask	put: Color black.	width _ Display width max: 720.	tempArray _ Array new: width // DefaultTab.	1 to: tempArray size do:		[:i | tempArray at: i put: DefaultTab * i].	TextConstants at: #DefaultTabsArray put: tempArray.	tempArray _ Array new: (width // DefaultTab) // 2.	1 to: tempArray size do:		[:i | tempArray at: i put: (Array with: (DefaultTab*i) with: (DefaultTab*i))].	TextConstants at: #DefaultMarginTabsArray put: tempArray."Text initTextConstants "! !!TextMorphEditor methodsFor: 'typing support' stamp: 'mir 8/3/2004 13:29'!recognizeCharactersWhileMouseIn: box	"Recognize hand-written characters and put them into the receiving TextMorph.  Invokes Alan's character recognizer.  box is in world coordinates."	| aRecognizer |	Cursor marker showWhile:		[aRecognizer _ CharRecog new textMorph: morph.		aRecognizer recognizeAndDispatch:			[:char | morph handleInteraction:				[char == BS					ifTrue:						[self simulatedBackspace]					ifFalse:						[self simulatedKeystroke: char]] fromEvent: nil.			morph updateFromParagraph.			World doOneCycle]		until:			[(box containsPoint: Sensor cursorPoint) not]]! !!ChangeList class methodsFor: 'fileIn/Out' stamp: 'yo 7/29/2004 14:43'!browseCompressedChangesFile: fullName	"Browse the selected file in fileIn format."	| zipped unzipped stream |	fullName ifNil: [ ^self beep ].	stream _ FileStream readOnlyFileNamed: fullName.	stream converter: Latin1TextConverter new.	zipped _ GZipReadStream on: stream.	unzipped _ zipped contents asString.	stream _ (MultiByteBinaryOrTextStream with: unzipped) reset.	ChangeList browseStream: stream.! !!StrikeFont class methodsFor: 'derivative font caching' stamp: 'yo 8/3/2004 13:37'!shutDown  "StrikeFont shutDown"	"Deallocate synthetically derived copies of base fonts to save space"	self allSubInstancesDo: [:sf | sf reset].	DefaultStringScanner _ nil.! !"Postscript:"StrikeFont shutDown.!