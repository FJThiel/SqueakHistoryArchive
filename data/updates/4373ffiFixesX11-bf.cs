'From Squeak3.0 of 4 February 2001 [latest update: #3552] on 28 March 2001 at 4:46:21 pm'!"Change Set:		ffiFixesX11-bfDate:			28 March 2001Author:			Bert FreudenbergMakes X11 FFI examples work with 3.0 VM. Also fixes ExternalAddress conversion to/from Integers. It grossly ignored endianness and worse, I think it even wrote to external space instead of changing the address. Besides, do we need this at all?"!ExternalStructure subclass: #X11Drawable	instanceVariableNames: 'display '	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-X11'!!ExternalAddress methodsFor: 'converting' stamp: 'bf 2/21/2001 23:50'!asInteger	"convert address to integer"	^ self asByteArrayPointer unsignedLongAt: 1! !!ExternalAddress methodsFor: 'converting' stamp: 'bf 2/21/2001 23:50'!fromInteger: address	"set my handle to point at address."	"Do we really need this? bf 2/21/2001 23:48"	| pointer |	pointer _ ByteArray new: 4.	pointer unsignedLongAt: 1 put: address.	self basicAt: 1 put: (pointer byteAt: 1);		basicAt: 2 put: (pointer byteAt: 2);		basicAt: 3 put: (pointer byteAt: 3);		basicAt: 4 put: (pointer byteAt: 4)! !!X11Display methodsFor: 'accessing' stamp: 'bf 3/28/2001 16:22'!getInputFocus	| focus revert |	focus _ X11Window display: self.	revert _ WordArray new: 1.	self XGetInputFocus: self with: focus with: revert.	^focus! !!X11Display methodsFor: 'accessing' stamp: 'bf 3/28/2001 16:24'!ourWindow	"Guess the window to draw on."	| window ptr child |	window _ self getInputFocus.	ptr _ self queryPointer: window.	 "{root. child. root pos. win pos. mask}"	child _ ptr second.	child xid = 0 ifTrue: [^ window].	^ child! !!X11Display methodsFor: 'accessing' stamp: 'bf 3/28/2001 16:22'!queryPointer: aX11Window	| root child rootX rootY winX winY mask |	root _ X11Window display: self.	child _ X11Window display: self.	rootX _ WordArray new: 1.	rootY _ WordArray new: 1.	winX _ WordArray new: 1.	winY _ WordArray new: 1.	mask _ WordArray new: 1.	self XQueryPointer: self window: aX11Window returnRoot: root child: child		rootX: rootX rootY: rootY winX: winX winY: winY mask: mask.	^{root. child. rootX first @ rootY first. winX first @ winY first. mask first}! !!X11Display class methodsFor: 'examples' stamp: 'bf 3/28/2001 15:32'!coloredEllipses	"X11Display coloredEllipses"	| display window gc colors rnd w h pt1 pt2 r |	display _ X11Display XOpenDisplay: nil.	window _ display ourWindow.	gc _ X11GC on: window.	colors _ Color colorNames collect:[:n| (Color perform: n) pixelWordForDepth: 32].	rnd _ Random new.	w _ Display width.	h _ Display height.	[Sensor anyButtonPressed] whileFalse:[		pt1 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		pt2 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		r _ Rectangle encompassing: (Array with: pt1 with: pt2).		gc foreground: colors atRandom.		gc fillOval: r.		gc foreground: 0.		gc drawOval: r.		display sync.	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Display class methodsFor: 'examples' stamp: 'bf 3/28/2001 15:33'!coloredRectangles	"X11Display coloredRectangles"	| display window gc colors rnd w h pt1 pt2 r nPixels time n |	display _ X11Display XOpenDisplay: nil.	window _ display ourWindow.	gc _ X11GC on: window.	colors _ Color colorNames collect:[:cn| (Color perform: cn) pixelWordForDepth: 32].	rnd _ Random new.	w _ Display width.	h _ Display height.	n _ 0.	nPixels _ 0.	time _ Time millisecondClockValue.	[Sensor anyButtonPressed] whileFalse:[		pt1 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		pt2 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.		r _ Rectangle encompassing: (Array with: pt1 with: pt2).		gc foreground: colors atRandom.		gc fillRectangle: r.		gc foreground: 0.		gc drawRectangle: r.		display sync.		n _ n + 1.		nPixels _ nPixels + ((r right - r left) * (r bottom - r top)).		(n \\ 100) = 0 ifTrue:[			'Pixel fillRate: ', (nPixels * 1000 // (Time millisecondClockValue - time))				asStringWithCommas displayAt: 0@0].	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Display class methodsFor: 'examples' stamp: 'bf 3/28/2001 16:16'!x11Draw	"X11Display x11Draw"	| display window gc nextPt lastPt ptr |	display _ X11Display XOpenDisplay: nil.	window _ display ourWindow.	gc _ X11GC on: window.	gc foreground: 0.	lastPt _ nil.	[ptr _ display queryPointer: window.	"{root. child. root pos. win pos. mask}"	ptr last anyMask: 256] whileFalse:[		nextPt _ ptr fourth.		nextPt = lastPt ifFalse:[			lastPt ifNotNil: [				gc drawLineFrom: lastPt to: nextPt.				display sync].			lastPt _ nextPt].	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Drawable methodsFor: 'accessing' stamp: 'bf 2/22/2001 15:53'!xid	^ handle unsignedLongAt: 1! !!X11Drawable methodsFor: 'printing' stamp: 'bf 2/22/2001 15:53'!printOn: aStream	aStream		nextPutAll: self class name;		nextPut: $(;		nextPutAll: self xid hex;		nextPut: $) ! !!X11Drawable class methodsFor: 'instance creation' stamp: 'bf 3/28/2001 16:23'!display: aX11Display	^ self new display: aX11Display! !