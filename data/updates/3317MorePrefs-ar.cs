'From Squeak2.9alpha of 13 June 2000 [latest update: #3383] on 2 February 2001 at 2:09:48 pm'!"Change Set:		MorePrefs-arDate:			2 February 2001Author:			Andreas RaabTwo more preferences:#soundStopWhenDone: Shut down the sound player when it finished.#automaticPlatformSettings: Enable automatic settings of certain preferences depending on the platform we're coming up." Preferences addPreference: #soundStopWhenDone category: #media default: false balloonHelp: 'If true, the sound player is shut down after playing finished.'.Preferences addPreference: #automaticPlatformSettings category: #general default: true balloonHelp: 'If true, certain preferences are automatically set according to the current platform.'.!!SoundPlayer class methodsFor: 'player process' stamp: 'ar 2/2/2001 13:58'!playLoop	"The sound player process loop."	| bytesPerSlice count willStop mayStop |	mayStop _ Preferences soundStopWhenDone.	bytesPerSlice _ Stereo ifTrue: [4] ifFalse: [2].	[true] whileTrue: [		[(count _ self primSoundAvailableBytes // bytesPerSlice) > 100]			whileFalse: [ReadyForBuffer wait].		count _ count min: Buffer stereoSampleCount.		PlayerSemaphore critical: [			ActiveSounds _ ActiveSounds select: [:snd | snd samplesRemaining > 0].			ActiveSounds do: [:snd |				snd ~~ SoundJustStarted ifTrue: [					snd playSampleCount: count into: Buffer startingAt: 1]].			ReverbState == nil ifFalse: [				ReverbState applyReverbTo: Buffer startingAt: 1 count: count].			self primSoundPlaySamples: count from: Buffer startingAt: 1.			willStop _ mayStop and:[						(ActiveSounds size = 0) and:[							self isAllSilence: Buffer size: count]].			willStop				ifTrue:[self shutDown. PlayerProcess _ nil]				ifFalse:[Buffer primFill: 0].			SoundJustStarted _ nil].		willStop ifTrue:[^self].	].! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'ar 2/2/2001 14:08'!setPlatformPreferences	"Set some platform specific preferences on system startup"	| platform specs |	Preferences automaticPlatformSettings ifFalse:[^self].	platform _ self platformName.	specs _ 	#(						(soundStopWhenDone false)					(soundQuickStart false)			).	platform = 'Win32' ifTrue:[		specs _ #(						(soundStopWhenDone true)					(soundQuickStart false)				)].	platform = 'Mac OS' ifTrue:[		specs _ #(						(soundStopWhenDone false)					(soundQuickStart true)				)].	specs do:[:tuple|		Preferences setPreference: tuple first toValue: (tuple last == #true).	].! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'ar 2/2/2001 14:08'!snapshot: save andQuit: quit embedded: embeddedFlag	"Mark the changes file and close all files. If save is true, save the current state of this Smalltalk in the image file. If quit is true, then exit to the outer shell. The latter part of this method runs when resuming a previously saved image. The resume logic checks for a document file to process when starting up."	| resuming msg sourceLink |	save & (SourceFiles at: 2) notNil ifTrue:		[msg _  (quit			ifTrue: ['----QUIT----']			ifFalse: ['----SNAPSHOT----'])			, Date dateAndTimeNow printString.		sourceLink _ ' priorSource: ' , LastQuitLogPosition printString.		self assureStartupStampLogged.		LastQuitLogPosition _ (SourceFiles at: 2) setToEnd; position.		self logChange: msg , sourceLink.		Transcript cr; show: msg].	self processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming _ embeddedFlag 					ifTrue: [self snapshotEmbeddedPrimitive] 					ifFalse: [self snapshotPrimitive].  "<-- PC frozen here on image file"				resuming == false "guard against failure" ifTrue:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming _ false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	self setGCParameters.	resuming == true ifTrue: [self clearExternalObjects].	self processStartUpList: resuming == true.	resuming == true ifTrue:[		self setPlatformPreferences.		self readDocumentFile].	Smalltalk isMorphic ifTrue: [SystemWindow wakeUpTopWindowUponStartup].	"Now it's time to raise an error"	resuming == nil ifTrue:[self error:'Failed to write image file (disk full?)'].	^ resuming! !