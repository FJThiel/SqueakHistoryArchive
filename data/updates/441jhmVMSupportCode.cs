'From Squeak 2.2 of Sept 23, 1998 on 25 November 1998 at 2:44:23 pm'!"Change Set:		jhmVMSupportCodeDate:			25 November 1998Author:			John MaloneyChanges the the C support code for Squeak 2.3. Includessupport for pluggable primitives."!!InterpreterSupportCode class methodsFor: 'source file exporting' stamp: 'jm 11/25/1998 13:39'!compareWithFilesInFolder: folderName	"InterpreterSupportCode compareWithFilesInFolder: 'Tosh:Desktop Folder:Squeak VM Project'"	| dir |	dir _ FileDirectory on: folderName.	(dir readOnlyFileNamed: 'projectArchive.sit') binary contentsOfEntireFile =	InterpreterSupportCode archiveBinaryFileBytes		ifFalse: [self inform: 'File projectArchive.sit differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'readme') contentsOfEntireFile =	InterpreterSupportCode readmeFile		ifFalse: [self inform: 'File readme differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sq.h') contentsOfEntireFile =	InterpreterSupportCode squeakHeaderFile		ifFalse: [self inform: 'File sq.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqConfig.h') contentsOfEntireFile =	InterpreterSupportCode squeakConfigFile		ifFalse: [self inform: 'File sqConfig.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMachDep.h') contentsOfEntireFile =	InterpreterSupportCode squeakMachDepFile		ifFalse: [self inform: 'File sqMachDep.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqPlatformSpecific.h') contentsOfEntireFile =	InterpreterSupportCode squeakPlatSpecFile		ifFalse: [self inform: 'File sqPlatformSpecific.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqFilePrims.c') contentsOfEntireFile =	InterpreterSupportCode squeakFilePrimsFile		ifFalse: [self inform: 'File sqFilePrims.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacAsyncFilePrims.c') contentsOfEntireFile =	InterpreterSupportCode macAsyncFilePrimsFile		ifFalse: [self inform: 'File sqMacAsyncFilePrims.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacDirectory.c') contentsOfEntireFile =	InterpreterSupportCode macDirectoryFile		ifFalse: [self inform: 'File sqMacDirectory.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacExternalPrims.c') contentsOfEntireFile =	InterpreterSupportCode macExternalPrimsFile		ifFalse: [self inform: 'File sqMacExternalPrims.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacJoystick.c') contentsOfEntireFile =	InterpreterSupportCode macJoystickFile		ifFalse: [self inform: 'File sqMacJoystick.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacMinimal.c') contentsOfEntireFile =	InterpreterSupportCode macMinimal		ifFalse: [self inform: 'File sqMacMinimal.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacNetwork.c') contentsOfEntireFile =	InterpreterSupportCode macNetworkFile		ifFalse: [self inform: 'File sqMacNetwork.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacSerialAndMIDIPort.c') contentsOfEntireFile =	InterpreterSupportCode macSerialAndMIDIPortFile		ifFalse: [self inform: 'File sqMacSerialAndMIDIPort.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacSound.c') contentsOfEntireFile =	InterpreterSupportCode macSoundFile		ifFalse: [self inform: 'File sqMacSound.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacWindow.c') contentsOfEntireFile =	InterpreterSupportCode macWindowFile		ifFalse: [self inform: 'File sqMacWindow.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqOldSoundPrims.c') contentsOfEntireFile =	InterpreterSupportCode squeakOldSoundPrimsFile		ifFalse: [self inform: 'File sqOldSoundPrims.c differs from the version stored in this image.'].	dir _ dir directoryNamed: 'MacTCP'.	(dir readOnlyFileNamed: 'MacTCP.h') contentsOfEntireFile =	InterpreterSupportCode macTCPFile		ifFalse: [self inform: 'File MacTCP.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'AddressXlation.h') contentsOfEntireFile =	InterpreterSupportCode macAddressXlationFile		ifFalse: [self inform: 'File AddressXlation.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'dnr.c') contentsOfEntireFile =	InterpreterSupportCode macDNRFile		ifFalse: [self inform: 'File dnr.c differs from the version stored in this image.'].! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 11/25/1998 14:17'!macArchiveBinaryFile	"To create this method use:	  (FileStream oldFileNamed: 'projectArchive.sit') binary contentsOfEntireFile asArray"	^ #(83 73 84 33 0 3 0 0 49 96 114 76 97 117 2 66 0 0 0 22 7 147 13 13 14 83 113 117 101 97 107 54 56 75 46 112 114 111 106 46 112 114 111 106 0 0 0 0 0 0 0 0 0 0 0 0 186 147 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 180 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 90 110 178 129 191 175 0 0 40 235 0 0 37 50 0 0 8 193 0 0 9 109 153 1 222 33 0 0 0 0 0 0 174 78 13 192 248 163 239 117 178 149 249 29 97 132 37 161 156 94 135 223 198 138 30 225 118 43 151 108 35 116 211 77 201 179 91 47 153 151 157 135 39 84 66 159 211 75 158 246 248 94 218 42 211 243 218 248 143 157 21 217 199 214 142 91 39 25 240 8 37 191 201 38 236 229 73 216 38 155 145 125 236 54 217 100 31 35 156 220 62 178 143 17 78 54 225 73 40 161 132 21 97 132 19 70 246 217 155 177 109 140 108 194 200 115 194 179 35 183 37 183 143 108 175 35 124 5 190 186 146 211 231 231 145 45 221 210 162 39 95 217 102 132 235 17 182 201 241 147 240 200 115 114 251 200 38 155 225 201 6 232 4 2 208 79 0 3 224 0 224 198 103 0 214 226 191 104 153 96 238 214 132 152 44 69 13 33 33 75 170 96 198 36 83 48 180 132 172 169 178 32 199 141 242 174 79 165 100 105 160 190 161 205 151 212 181 157 109 60 86 23 197 80 103 176 119 75 51 7 91 215 78 163 127 196 211 175 175 111 222 117 135 10 80 243 34 178 30 151 133 112 92 138 12 8 90 202 140 43 72 144 40 27 22 103 51 166 24 2 254 204 152 44 68 229 126 41 21 55 113 111 12 152 90 82 72 234 138 106 202 186 111 75 55 59 60 117 72 136 72 170 170 153 66 24 217 104 187 228 168 160 245 247 219 36 172 58 97 57 34 165 12 89 80 76 162 135 130 240 224 194 221 90 102 132 127 44 23 240 88 168 8 145 17 220 93 174 57 183 120 100 225 113 0 96 145 93 91 73 145 74 81 138 8 29 93 66 125 195 128 16 188 53 184 110 157 239 59 211 85 252 180 41 182 55 246 254 118 110 132 43 227 63 61 85 199 7 165 54 178 168 179 247 181 74 62 40 225 32 147 201 194 153 12 71 139 160 213 214 150 214 129 3 0 27 51 244 217 10 150 185 68 77 149 34 218 28 211 98 168 3 15 247 56 159 158 216 191 182 24 61 106 79 0 43 128 227 6 120 157 63 93 244 8 196 1 2 143 161 5 150 226 185 42 242 241 94 166 206 249 93 209 10 102 13 14 253 238 193 250 141 208 135 248 246 87 30 134 190 155 158 179 48 0 36 210 231 79 255 242 21 252 255 222 159 246 167 127 245 244 141 219 81 237 10 120 10 43 15 227 30 122 136 66 187 127 232 203 39 161 239 150 86 216 254 167 123 32 253 236 41 72 223 63 232 79 31 244 176 51 233 125 59 45 38 22 63 161 210 63 68 245 252 67 15 61 11 119 254 226 129 105 46 136 164 63 127 196 150 56 171 121 26 206 218 158 32 126 147 70 31 58 182 218 63 244 109 60 109 243 131 229 119 193 83 248 159 226 115 255 89 232 219 120 6 247 223 101 92 78 48 206 47 194 1 166 244 114 172 138 140 185 223 0 95 211 40 202 166 174 237 150 245 1 67 232 50 37 53 42 233 81 161 93 9 235 146 190 167 81 236 106 23 130 141 0 238 209 163 30 24 117 255 238 215 251 144 141 199 218 215 33 84 135 39 143 252 53 51 86 253 136 133 225 145 209 90 170 86 157 25 219 112 239 76 189 163 55 79 215 59 148 198 51 173 153 177 143 153 36 157 123 244 209 19 238 234 251 54 177 255 215 110 30 1 238 182 83 153 177 235 62 7 21 74 123 230 39 131 35 180 119 215 156 124 30 107 30 203 140 103 50 84 7 171 86 195 71 122 126 0 215 29 31 201 140 15 223 147 25 223 71 156 30 67 119 244 189 124 8 145 47 16 47 102 30 143 187 6 255 86 181 59 88 71 89 14 124 69 35 54 87 236 173 93 169 100 82 211 205 198 251 192 189 122 243 126 198 158 42 142 30 189 9 134 108 15 28 124 199 3 7 127 190 254 93 15 132 142 157 247 192 222 35 236 63 235 129 31 146 50 182 7 246 98 247 248 183 7 176 153 158 6 23 37 12 22 48 218 208 254 234 128 172 159 235 206 118 133 80 40 248 247 10 176 106 131 123 244 240 211 248 175 28 6 190 37 243 179 63 179 236 80 12 135 215 3 255 219 58 168 10 132 66 237 215 226 16 53 195 64 50 137 61 223 9 128 135 40 182 55 21 234 148 99 51 20 182 36 168 51 144 244 111 212 16 67 237 45 14 1 60 122 131 216 205 156 0 116 237 236 234 156 33 248 30 143 238 230 109 221 69 190 112 44 130 142 102 14 102 221 233 240 42 247 232 87 79 81 167 129 186 170 184 183 73 138 199 53 77 21 90 229 120 210 110 39 88 3 232 188 187 236 121 150 103 136 7 239 139 204 243 245 138 189 86 178 157 117 135 197 163 216 23 89 183 206 17 128 71 145 47 50 47 200 63 121 216 178 59 0 232 154 156 35 114 133 135 60 56 47 200 165 101 249 53 246 95 191 86 78 240 200 171 177 20 121 132 36 35 34 197 47 8 107 233 154 148 12 167 0 30 145 57 101 11 186 82 67 35 30 46 226 241 86 39 90 228 193 251 206 231 168 201 85 212 41 223 123 217 175 198 124 159 118 161 12 1 35 193 250 180 93 246 92 159 222 22 236 184 152 99 42 169 72 75 62 201 68 181 72 234 127 45 136 229 15 221 208 243 161 97 129 135 17 139 135 11 117 202 67 205 111 171 138 60 204 148 67 0 15 90 197 62 116 201 127 116 13 145 23 11 153 221 1 37 145 163 244 111 212 184 154 200 103 121 56 6 36 242 142 166 173 116 47 157 215 67 12 245 22 244 112 250 72 246 111 170 122 53 217 231 121 92 73 246 23 121 44 36 251 139 186 46 36 251 2 15 231 133 100 63 163 199 191 146 253 172 176 239 37 251 2 143 133 100 63 67 227 253 100 159 231 225 28 144 236 139 125 134 188 227 173 62 13 205 32 34 126 198 194 215 224 188 206 100 159 126 137 13 131 56 127 36 242 55 141 127 53 145 95 232 176 142 1 137 188 87 81 111 251 168 48 216 80 255 65 34 247 188 155 168 144 232 124 231 88 76 84 121 30 87 146 208 69 61 22 146 80 129 199 98 167 159 225 241 126 167 207 243 40 242 229 187 98 41 242 192 198 112 49 186 95 235 64 57 30 113 101 174 45 78 222 124 92 112 26 241 208 194 56 200 116 129 71 71 120 103 129 71 153 56 59 46 114 185 35 150 138 98 176 213 17 192 20 239 220 85 148 162 90 204 241 111 243 192 78 22 159 203 172 203 136 71 92 50 12 33 168 37 146 74 252 117 245 179 157 3 29 47 247 59 2 232 122 173 115 228 50 125 254 110 96 145 71 161 67 23 124 150 235 172 230 156 205 22 151 11 167 253 24 192 239 186 52 247 88 178 83 139 169 9 41 33 127 192 22 25 114 180 225 113 194 208 225 101 145 17 156 95 60 48 177 86 66 9 142 25 179 62 196 230 101 17 180 39 90 105 22 149 14 89 104 57 184 167 28 4 48 78 39 150 90 83 218 66 143 56 127 137 49 187 90 2 93 221 214 109 127 227 254 74 28 29 189 182 54 226 154 0 255 54 105 12 21 135 206 21 109 128 178 108 255 197 209 133 86 156 73 151 117 99 33 114 120 217 132 118 206 25 207 96 68 156 58 97 185 165 202 246 73 83 74 137 155 183 40 170 16 210 149 132 98 42 187 100 103 128 32 225 132 178 238 190 219 48 37 157 13 162 58 55 44 178 241 10 242 54 107 139 211 103 169 87 230 154 229 24 184 156 0 90 217 70 7 8 197 185 149 236 189 2 103 154 117 156 38 220 11 175 31 80 22 177 178 13 135 23 7 244 167 247 16 182 57 2 164 156 130 113 95 77 65 51 175 45 208 107 5 188 253 102 193 165 197 123 177 86 136 93 31 216 113 208 217 101 173 168 13 118 108 106 174 21 106 55 5 186 3 184 13 109 9 118 215 58 173 88 192 75 175 109 228 214 244 203 46 37 169 135 234 86 142 227 145 106 238 27 192 39 123 216 45 99 85 82 199 43 69 156 239 239 234 238 252 48 86 28 158 164 163 191 192 174 232 88 218 232 124 2 214 224 214 71 216 230 7 129 174 226 26 8 107 13 1 93 229 158 36 44 249 99 192 121 60 174 138 176 196 94 232 68 140 205 11 126 252 73 192 11 102 238 78 194 42 30 6 5 49 124 97 0 224 179 159 4 124 9 6 95 150 192 213 118 24 62 131 216 203 140 235 215 225 65 236 110 171 8 171 55 224 32 94 178 173 39 108 205 30 248 10 74 70 154 192 173 127 128 111 33 198 184 222 254 37 248 30 202 250 69 194 250 119 97 206 131 106 60 139 183 201 10 252 20 177 71 9 107 122 2 206 32 246 36 97 171 174 135 23 240 5 154 253 132 149 12 195 95 16 163 55 54 32 252 125 124 233 3 106 216 91 26 218 114 110 25 50 126 156 176 210 151 184 26 196 208 69 152 30 142 114 232 129 53 207 17 166 212 115 159 0 16 142 17 38 109 224 2 0 31 250 17 227 116 150 19 1 110 120 128 176 193 1 14 223 77 184 225 56 51 212 9 122 9 101 45 171 113 125 154 48 238 52 243 68 8 95 210 145 35 166 128 158 52 20 77 45 103 215 255 19 151 193 75 104 64 36 168 69 229 205 178 234 201 13 139 176 99 118 229 10 123 228 41 91 50 139 247 74 186 170 168 59 12 87 115 84 49 53 189 184 69 83 205 242 44 219 230 65 83 151 140 138 96 202 48 181 132 208 38 239 217 173 233 81 195 27 136 68 100 188 138 14 73 102 204 112 117 75 250 14 217 244 210 253 72 212 46 88 214 19 196 231 47 100 51 149 92 66 179 164 182 48 149 132 109 82 12 188 197 150 19 97 148 192 147 27 52 101 117 108 214 229 214 136 68 86 40 27 158 208 41 216 34 98 177 37 244 108 68 150 24 97 83 196 114 111 74 184 9 194 129 29 86 207 38 232 181 70 151 81 63 85 142 123 113 106 106 130 235 255 1 0 0 13 0 107 153 246 249 57 233 173 115 96 121 251 164 245 244 235 61 57 229 3 55 243 90 243 26 180 94 39 211 99 3 139 28 119 227 249 122 50 15 191 217 26 254 10 255 245 109 123 38 39 251 36 131 205 114 19 78 120 71 70 156 140 248 117 146 77 182 81 153 173 228 121 146 227 100 178 143 108 178 201 38 155 76 246 145 219 3 114 251 36 156 108 194 201 38 60 221 44 235 200 38 207 46 114 251 200 166 192 189 173 219 83 252 209 6 154 207 60 142 39 252 200 38 180 232 38 131 77 70 155 12 55 37 27 79 86 224 11 40 7 221 26 209 180 24 33 196 5 191 155 8 217 241 19 248 125 11 122 65 248 45 132 223 33 82 64 118 193 111 131 59 164 37 244 136 108 16 215 175 127 73 158 34 222 161 233 43 109 196 13 8 244 43 198 154 126 136 87 30 144 34 245 126 229 73 93 210 21 64 237 100 120 69 136 33 112 57 30 253 109 168 104 239 13 117 255 19 240 180 131 71 200 238 41 82 250 68 37 113 253 238 91 132 156 158 118 61 94 245 14 217 67 130 80 127 247 3 52 82 64 103 96 120 248 81 254 88 221 124 166 160 130 20 186 34 181 71 63 196 99 152 123 11 246 157 158 38 23 201 42 66 42 127 74 106 201 59 240 104 29 211 8 67 166 20 0 233 138 106 202 122 188 41 98 195 219 223 0 214 157 201 11 147 95 131 41 202 147 47 157 105 135 250 0 246 87 99 93 147 124 195 44 128 186 2 106 55 212 221 248 174 11 234 103 160 46 194 218 141 117 49 214 37 88 151 37 191 240 219 31 66 221 131 125 63 214 133 169 167 207 189 15 245 99 169 158 85 3 80 31 59 63 246 120 33 212 123 83 19 155 7 161 14 192 251 247 160 126 147 252 30 88 170 77 243 204 164 70 72 185 49 226 83 98 114 80 87 134 141 5 178 183 175 56 193 179 205 239 63 24 177 117 54 191 235 140 17 240 170 118 227 148 26 89 228 217 251 17 191 235 38 183 254 149 246 107 191 191 109 130 242 227 240 93 141 60 58 188 63 132 243 252 143 255 203 228 125 96 111 131 205 127 37 227 191 67 209 229 136 169 233 167 114 18 7 55 92 224 127 229 10 222 109 221 163 127 215 50 222 189 227 96 226 170 20 203 219 219 17 139 247 131 200 203 202 25 252 191 109 229 23 212 253 90 198 127 143 118 202 48 149 200 201 188 179 11 92 91 247 107 144 159 21 35 252 221 85 228 162 57 116 163 173 243 10 198 115 175 108 142 105 250 45 154 201 103 45 158 239 70 63 23 252 174 157 156 186 66 251 165 147 47 157 187 2 245 225 228 187 103 170 174 243 46 248 110 64 125 220 230 253 14 196 179 121 175 123 229 245 63 239 130 122 253 185 55 191 151 248 68 7 95 113 77 0 139 13 182 222 235 152 14 66 178 174 72 177 118 53 26 232 238 232 14 106 186 121 77 17 109 25 191 219 111 249 222 253 147 169 46 218 247 224 59 161 151 7 241 157 157 139 132 126 132 79 246 226 187 190 140 111 62 128 115 8 31 9 34 158 237 163 149 136 83 133 115 180 39 47 252 232 235 255 246 215 221 75 62 187 11 231 252 175 254 202 184 254 180 132 26 93 220 25 236 176 244 119 31 242 179 1 235 123 38 127 241 238 13 29 218 186 107 68 189 205 235 207 209 91 51 226 216 122 107 194 119 194 223 108 253 9 221 237 68 158 238 197 122 94 135 43 15 232 239 9 215 231 153 138 172 28 0 123 12 208 223 17 69 141 106 99 11 2 252 76 70 127 243 254 38 244 212 138 245 157 147 231 190 67 235 14 196 113 242 130 208 157 173 179 135 113 222 150 228 91 219 95 252 64 103 143 44 229 10 59 63 238 193 254 230 76 206 88 210 87 126 79 20 80 140 200 199 123 162 207 173 120 177 39 202 240 91 101 140 244 197 162 204 191 23 57 126 116 165 14 126 33 39 127 66 46 124 251 86 188 224 247 101 66 55 192 229 182 255 87 27 35 135 21 221 76 72 49 136 1 67 138 42 207 115 44 246 193 130 95 155 215 255 240 104 243 247 209 62 114 117 84 213 63 94 42 167 225 96 163 103 229 242 249 188 183 13 235 77 86 78 185 11 251 245 88 219 186 157 207 217 27 177 222 138 245 22 43 95 136 125 134 208 177 189 199 240 145 174 85 127 132 90 240 136 141 186 128 100 14 193 33 64 75 235 129 122 159 212 176 91 105 110 141 238 108 130 7 54 255 190 116 61 51 7 234 125 125 80 215 78 192 66 87 111 105 61 217 224 151 244 65 249 230 20 132 244 47 206 81 2 118 209 23 106 138 221 128 190 250 29 90 156 163 58 16 242 215 247 39 84 83 25 150 129 146 57 46 232 23 90 156 163 142 206 225 105 226 242 208 243 250 8 95 221 225 1 120 91 185 179 243 75 254 234 231 95 117 77 132 189 71 195 180 3 152 128 90 181 195 113 164 169 47 23 252 152 163 210 14 236 137 217 172 206 94 121 234 75 127 59 143 168 208 129 107 19 134 90 104 140 52 13 229 69 70 189 159 163 178 20 176 186 13 80 123 90 138 134 193 51 242 184 204 177 57 175 180 83 196 81 221 134 25 85 180 28 44 243 107 129 250 12 113 115 212 98 64 5 51 200 194 90 168 197 105 84 93 81 7 111 163 150 32 175 212 44 22 121 253 16 181 180 13 118 244 93 53 101 160 187 46 89 138 202 186 113 19 155 237 35 24 42 235 172 161 168 157 173 37 29 178 113 114 127 98 14 18 62 230 230 12 149 117 202 56 170 59 124 42 46 103 49 129 33 234 253 156 33 218 41 231 168 53 30 77 141 42 166 162 193 230 29 200 210 53 107 2 150 100 56 42 237 84 112 212 53 1 101 92 142 6 180 104 70 18 44 175 112 84 218 89 203 81 139 189 163 178 106 230 40 98 41 137 171 129 118 42 113 214 131 9 112 200 168 46 141 205 1 179 44 196 81 105 167 138 163 174 77 163 134 229 113 243 26 178 165 161 106 84 94 95 232 144 169 196 178 20 89 26 170 65 94 3 242 48 245 213 172 163 208 20 39 212 80 64 106 81 175 244 198 37 175 87 139 161 117 66 67 186 174 101 220 132 169 129 38 78 174 6 218 89 207 115 67 49 72 59 236 9 102 81 105 14 228 94 206 18 225 6 84 94 123 60 30 147 195 82 236 228 28 176 197 80 29 159 181 178 61 26 213 101 195 56 234 151 168 173 204 66 211 236 201 103 101 41 116 35 206 218 47 27 252 174 237 95 179 222 33 60 79 151 226 203 26 186 19 85 222 41 27 166 20 187 238 10 168 33 154 198 185 134 104 103 19 162 250 180 88 214 200 175 205 186 25 121 13 195 89 95 222 83 44 212 45 2 21 76 107 25 117 43 122 67 40 162 43 241 44 173 54 106 61 58 101 183 106 198 242 234 179 80 183 9 53 40 227 116 61 176 164 134 187 80 175 221 17 77 93 214 235 118 158 68 157 187 183 41 247 128 31 243 43 116 96 223 204 80 157 45 127 170 241 155 251 48 191 66 7 118 205 98 214 133 221 116 234 169 111 252 9 81 161 3 151 42 12 213 185 108 57 223 56 112 137 163 210 14 185 59 157 243 70 149 172 227 205 122 121 3 122 3 108 83 0 212 88 114 202 157 168 60 46 132 172 242 216 101 0 159 149 118 238 225 168 101 30 109 56 174 169 217 212 102 161 222 139 168 108 214 110 53 158 152 243 34 11 245 62 142 90 206 210 70 46 34 90 188 54 114 212 34 111 48 232 201 231 114 43 83 54 33 67 0 74 141 249 73 109 252 38 182 53 107 51 71 173 232 213 76 229 132 18 153 203 53 179 168 187 80 229 220 76 114 42 159 201 175 247 115 212 82 200 229 166 174 101 163 168 133 250 0 170 60 32 171 185 189 193 44 234 131 194 135 224 16 73 27 188 205 208 110 100 136 102 20 47 236 14 50 176 150 26 246 136 196 6 123 20 253 211 4 208 66 81 125 63 43 141 227 6 49 3 204 238 50 120 194 166 157 135 144 215 16 219 244 220 78 108 173 34 151 131 242 150 51 202 195 136 26 212 198 110 241 106 121 249 35 194 149 35 16 96 63 157 245 81 158 54 156 251 135 169 223 252 225 101 204 67 208 33 143 113 212 82 99 4 60 229 132 50 191 249 162 59 124 76 54 208 33 123 57 42 220 102 6 99 146 121 66 211 135 67 113 57 66 237 239 42 62 221 248 35 42 116 224 162 36 157 162 110 93 160 164 70 15 165 16 21 58 112 199 32 82 212 194 221 67 170 241 217 179 34 177 61 123 22 174 227 24 170 115 77 119 254 245 55 38 49 123 65 135 180 139 172 204 0 243 91 64 184 92 195 125 30 116 246 99 86 134 60 52 188 156 149 61 28 181 218 211 31 224 227 206 5 62 11 181 3 25 242 107 99 176 88 202 109 122 102 92 217 203 213 224 220 80 167 26 159 247 9 13 61 239 35 62 58 171 231 219 206 166 63 121 225 7 113 215 68 32 232 247 209 14 233 228 59 209 50 73 53 148 227 113 73 135 17 111 176 100 237 122 187 196 254 85 249 162 124 60 183 165 176 54 169 221 28 181 72 77 196 114 106 157 157 181 135 163 150 140 74 199 99 138 145 29 214 154 245 0 71 117 71 149 209 60 65 246 172 126 156 117 44 50 36 233 57 92 107 214 0 215 235 181 91 152 25 120 122 161 146 222 178 191 71 122 209 27 14 192 169 180 156 211 131 149 54 250 56 106 13 142 232 29 143 200 113 154 97 45 217 90 62 20 20 169 87 26 150 251 229 65 144 209 205 29 167 53 235 193 180 83 70 101 159 46 13 14 207 229 121 107 214 126 230 67 27 157 75 17 72 119 175 160 15 65 135 132 40 106 199 62 231 158 35 121 233 69 216 110 50 84 232 144 48 213 171 167 217 185 222 72 94 122 225 162 64 125 225 34 57 196 24 170 112 110 80 146 23 94 189 44 156 242 213 203 228 48 191 3 160 255 193 129 119 0 48 239 117 84 122 143 56 17 8 120 186 88 231 72 58 123 45 220 197 167 158 126 237 57 225 13 175 61 7 215 82 25 71 153 73 82 150 163 12 112 84 231 63 52 82 19 103 91 69 206 59 219 74 142 209 91 169 182 242 53 140 161 161 14 57 147 97 233 255 91 96 246 130 14 127 227 130 127 55 33 5 193 144 60 56 61 157 6 130 55 112 86 12 111 232 92 171 19 199 224 78 222 181 133 254 231 71 208 111 152 20 0 222 252 5 182 203 111 195 245 206 223 131 190 152 65 223 252 31 0 0 13 13 14 83 113 117 101 97 107 80 80 67 46 112 114 111 106 46 112 114 111 106 0 0 0 0 0 0 0 0 0 0 0 0 98 187 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 22 0 0 38 62 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 103 33 178 129 191 243 0 0 41 201 0 0 38 200 0 0 9 141 0 0 9 141 243 46 72 29 0 0 0 0 0 0 205 45 13 192 213 101 121 173 204 147 221 94 217 32 163 61 158 109 54 234 188 86 118 100 27 225 81 66 201 109 93 59 251 77 147 83 153 114 250 121 201 47 118 137 167 134 103 158 199 214 9 195 95 199 162 229 149 107 17 86 172 39 191 153 91 194 201 38 155 69 246 25 37 207 59 178 89 132 109 79 178 9 207 200 102 228 247 81 178 143 17 74 216 62 143 108 37 199 110 179 205 182 29 229 79 158 147 237 145 205 242 246 75 24 225 49 194 9 63 241 192 87 87 114 154 229 229 185 165 69 63 143 48 178 153 17 182 201 109 221 108 147 223 228 55 217 100 51 60 217 192 248 211 116 80 30 0 3 128 185 43 0 230 224 223 178 46 162 29 251 252 38 6 218 219 49 184 197 173 29 199 255 187 245 219 22 185 180 55 245 211 178 156 234 117 9 89 90 235 243 121 92 49 37 26 4 1 171 123 189 190 42 79 221 210 18 6 229 217 189 217 99 173 120 253 84 236 92 213 52 19 50 3 47 1 220 28 158 181 196 165 253 126 199 227 229 37 107 108 203 183 237 120 166 96 6 102 166 150 69 180 246 69 46 112 224 223 142 255 49 203 118 191 103 171 252 35 56 86 219 151 111 163 187 49 219 83 85 53 149 139 51 42 142 230 29 215 98 203 86 45 75 44 6 200 224 216 50 248 103 77 131 37 114 123 195 154 129 1 203 106 1 202 94 103 83 230 226 13 1 108 116 143 83 73 103 139 243 135 120 214 169 165 16 50 99 146 127 173 212 36 159 225 82 143 177 198 125 151 186 33 124 246 254 184 234 13 106 92 14 123 66 146 170 202 234 57 8 179 63 100 234 108 216 64 192 66 22 204 180 225 233 82 205 129 16 16 5 106 214 52 32 202 137 17 135 87 242 139 149 213 34 90 132 232 89 228 89 176 192 245 131 222 42 110 93 102 250 193 56 47 103 109 44 75 216 120 178 14 74 191 95 197 125 97 63 85 201 5 25 104 101 90 42 173 105 140 130 82 211 245 35 197 246 237 0 75 52 250 12 6 179 108 222 104 68 242 71 7 144 90 97 62 100 179 159 10 201 238 243 169 224 240 116 7 113 2 99 235 132 103 133 95 89 94 129 16 64 97 7 74 96 28 222 155 74 58 126 128 179 115 230 100 113 114 105 48 212 123 54 214 47 128 122 204 175 60 241 4 212 223 252 134 158 3 64 32 245 238 228 111 79 224 255 168 59 233 78 118 29 154 179 18 217 206 133 3 88 121 51 158 1 93 14 88 133 187 245 155 47 64 253 45 101 176 242 237 213 144 124 121 31 36 31 108 113 39 31 207 230 119 146 91 130 58 18 29 159 232 112 183 82 61 119 235 55 94 134 47 254 230 161 94 44 152 73 110 253 174 65 113 138 243 36 188 102 104 130 240 245 8 189 117 215 116 119 235 51 120 219 192 7 19 86 193 1 252 159 196 243 224 107 80 191 228 85 60 63 199 177 236 229 152 223 130 237 156 233 9 88 21 17 163 154 132 220 2 52 22 244 149 234 68 44 22 85 226 5 164 107 55 176 224 155 251 192 153 179 23 198 63 57 63 45 190 133 58 35 88 149 5 143 44 6 231 242 87 241 127 160 89 251 139 27 243 55 145 21 128 115 226 66 204 29 199 191 3 38 180 214 96 253 142 217 96 181 98 94 124 191 62 226 59 226 211 243 11 227 108 193 243 237 170 95 9 192 228 98 84 245 196 133 220 81 130 71 81 7 200 15 175 63 6 235 19 31 83 210 126 48 235 173 205 238 199 158 141 99 6 69 64 120 142 62 13 206 25 59 89 177 221 135 185 131 136 175 141 235 124 252 147 155 244 250 200 7 213 119 206 140 25 8 166 192 76 114 10 86 5 194 180 2 175 28 87 162 247 202 202 90 85 172 142 75 145 70 73 105 20 43 2 13 138 164 108 40 240 86 87 136 158 2 172 244 226 161 108 120 36 243 200 43 91 176 122 182 126 38 113 204 199 155 191 126 87 219 147 247 125 61 135 87 30 9 198 176 90 158 182 231 246 251 250 234 29 90 216 91 207 230 192 59 101 218 158 207 18 163 120 231 240 94 230 123 167 131 254 153 237 254 213 192 110 221 167 237 153 252 101 200 13 84 104 251 91 218 232 204 238 156 18 196 154 187 180 78 84 11 214 193 170 62 152 91 251 99 152 188 187 77 235 220 188 90 235 220 146 196 251 29 232 16 245 239 180 99 230 43 132 139 51 159 141 149 232 79 213 238 210 197 224 252 29 216 168 195 48 26 140 138 64 100 173 172 156 118 231 145 10 48 169 147 189 184 255 16 254 29 155 65 40 213 14 30 231 189 131 245 133 253 139 65 56 60 31 166 22 250 124 21 215 219 33 50 195 194 88 12 61 223 12 0 135 215 91 81 52 92 39 7 141 64 92 26 38 119 36 234 207 213 240 250 42 74 77 2 112 212 121 208 4 205 0 120 173 170 174 234 3 248 9 142 154 146 21 53 22 87 67 179 191 171 171 11 88 231 99 252 226 225 71 185 75 185 183 6 209 191 45 197 246 34 41 20 138 70 35 98 153 28 226 230 250 169 124 1 14 111 219 5 237 243 242 97 71 193 62 186 66 56 4 151 127 16 175 221 91 167 119 182 253 234 208 113 88 93 254 5 11 76 1 112 88 92 254 65 66 254 142 35 213 83 92 231 53 54 0 228 10 14 185 101 144 144 139 161 235 181 249 191 122 117 116 227 24 98 99 28 226 240 73 170 95 10 157 39 86 231 53 38 245 61 243 252 19 135 127 128 217 97 94 169 9 37 28 54 194 241 177 19 93 198 33 184 206 244 81 61 97 169 146 239 187 164 87 117 208 167 109 72 67 161 26 230 62 205 239 127 232 211 43 60 149 35 125 140 131 138 148 14 117 50 141 81 127 226 127 22 196 251 15 69 85 134 154 134 81 28 106 115 168 97 184 78 142 175 228 2 171 136 35 158 48 9 192 65 97 117 161 74 254 195 171 143 180 168 119 228 183 229 223 97 222 210 145 35 245 231 106 92 237 200 251 113 152 6 116 228 149 69 229 226 8 31 94 95 221 48 31 102 31 157 253 71 172 94 237 236 135 112 92 233 236 71 112 140 118 246 35 188 142 118 246 195 56 204 23 58 251 62 62 254 213 217 247 19 251 73 103 63 140 99 180 179 239 131 113 173 179 31 194 97 30 208 217 91 93 170 220 244 177 79 3 180 223 116 2 167 34 230 67 209 108 244 231 142 94 159 46 229 62 109 254 209 145 127 36 252 171 29 249 121 135 53 13 232 200 235 2 145 91 63 35 182 228 223 246 239 142 60 251 31 29 21 2 29 116 142 203 29 213 16 142 43 157 208 8 31 163 157 208 48 142 203 78 223 135 227 154 211 15 225 176 184 134 92 113 12 226 64 99 24 105 221 175 59 80 26 71 40 48 96 139 61 47 31 231 149 70 56 162 13 56 200 116 30 71 101 67 112 24 71 150 183 127 92 228 146 35 142 241 122 61 101 166 0 162 248 219 91 197 24 100 139 43 254 2 14 116 178 208 64 207 58 158 112 208 104 162 232 137 134 99 129 208 7 236 167 156 3 21 47 175 49 5 224 245 186 115 164 123 250 161 183 129 203 56 134 29 122 88 103 105 103 141 15 200 236 114 216 112 218 143 39 132 245 23 231 30 51 130 209 230 72 88 10 247 207 166 94 8 68 200 232 32 224 132 161 201 75 144 16 204 95 52 208 29 147 104 110 182 91 23 61 25 154 69 37 165 232 217 28 200 196 12 255 25 247 59 33 243 226 4 240 133 88 130 161 191 246 179 228 138 211 147 181 215 130 240 116 39 207 78 26 35 206 211 69 243 33 43 69 62 210 89 38 75 141 178 162 142 182 28 118 176 240 65 99 238 174 248 127 169 103 36 253 3 93 153 249 196 61 247 168 113 73 225 15 140 230 13 65 50 118 130 69 48 108 145 165 118 6 80 144 87 146 7 232 82 223 3 54 62 248 110 250 193 56 155 132 29 42 237 31 56 21 227 244 189 16 181 94 159 18 8 171 129 136 72 231 64 60 176 254 175 11 15 76 73 98 55 185 188 161 3 177 214 75 237 15 237 201 160 45 25 233 40 45 172 174 209 123 155 130 175 3 228 182 227 21 252 59 248 108 184 217 129 112 223 239 130 250 182 45 144 119 9 221 91 47 70 66 176 99 45 156 141 55 62 211 151 112 206 243 84 22 151 204 19 231 21 23 214 20 226 209 183 212 83 51 207 108 69 2 118 99 9 139 17 189 123 101 50 18 223 218 121 3 109 120 200 99 191 4 33 86 203 95 25 167 198 20 124 82 156 1 115 171 107 170 102 97 197 239 244 212 207 42 228 79 116 180 155 5 238 250 25 208 214 134 28 202 221 185 17 232 157 102 18 229 202 31 6 154 9 164 189 5 144 184 1 238 198 227 78 202 141 171 129 38 60 18 94 152 57 7 16 43 43 167 92 230 159 224 75 152 67 231 5 184 191 11 104 211 192 47 40 39 253 25 158 224 125 58 70 112 61 124 155 187 27 70 120 11 60 133 57 190 213 226 246 22 248 17 230 90 40 183 252 123 240 115 204 125 141 114 37 95 133 131 248 16 247 52 199 221 6 93 72 43 226 2 88 245 58 252 1 115 28 235 250 231 225 24 192 180 9 148 139 63 68 202 152 134 219 35 112 214 238 13 54 30 115 252 221 105 211 86 150 135 57 62 227 184 241 39 12 23 48 76 231 28 87 191 199 62 135 185 42 202 221 237 96 56 43 56 157 63 152 207 58 194 188 0 34 111 42 55 61 192 234 49 135 74 3 144 31 101 216 112 136 252 169 118 142 198 112 150 102 166 139 114 85 107 216 253 0 159 230 239 211 202 115 236 97 68 192 181 53 209 202 144 199 89 249 92 116 123 105 171 198 28 94 227 198 36 229 4 190 119 33 215 135 93 140 236 143 139 168 91 53 16 141 76 241 74 77 1 191 232 145 98 167 158 142 241 233 39 117 81 127 73 31 159 190 96 96 200 225 227 5 221 21 199 210 0 138 39 218 40 127 65 142 100 167 135 81 248 53 163 98 174 49 82 149 42 153 202 215 73 74 36 16 105 82 109 37 141 129 120 84 177 150 70 35 241 156 20 83 37 45 113 69 82 115 61 9 53 30 13 139 119 200 27 238 141 42 141 170 189 208 239 151 145 47 159 20 111 86 109 53 146 210 36 199 237 69 137 64 168 209 40 152 85 235 193 21 35 114 60 17 27 75 179 170 6 49 14 202 21 7 84 164 90 14 55 32 5 217 233 65 86 94 39 197 173 62 130 145 34 202 72 119 243 228 41 245 98 177 177 252 93 204 0 70 185 147 192 210 59 43 50 41 133 3 65 188 158 1 208 174 143 70 35 127 17 57 100 199 169 172 110 172 255 7 0 0 13 0 107 249 150 57 201 203 6 249 155 89 94 158 220 142 94 151 189 155 110 223 244 248 218 201 28 120 236 86 230 201 188 228 215 233 198 179 245 164 143 223 212 180 240 95 131 61 162 17 158 100 176 245 200 49 194 54 217 100 31 185 77 6 155 108 70 54 35 155 236 167 118 173 100 147 77 24 57 30 217 146 45 217 228 55 217 228 55 217 145 223 100 147 227 132 19 78 54 217 100 147 253 140 240 65 228 54 249 173 228 56 185 205 128 123 91 185 23 5 136 114 83 243 57 125 60 225 71 158 182 233 66 6 60 130 132 77 201 94 195 3 95 64 57 232 104 72 215 35 132 16 23 124 183 17 178 231 179 240 29 131 94 0 190 249 240 253 14 89 67 14 144 60 120 107 14 214 48 140 169 173 127 132 154 144 196 245 110 86 219 191 60 134 87 251 31 188 84 255 245 218 130 120 239 207 239 96 113 60 250 173 37 63 115 143 239 123 89 255 18 197 35 196 61 14 175 54 194 31 241 20 145 14 178 233 38 222 46 196 219 152 255 107 214 119 189 19 76 189 125 150 60 151 247 185 61 3 239 205 231 6 184 195 121 71 190 118 131 188 14 220 147 202 90 82 77 254 6 239 170 153 70 216 4 148 2 66 138 180 168 165 26 177 250 80 134 42 252 245 98 221 154 184 54 249 117 152 194 157 184 244 66 19 212 62 236 215 96 93 154 120 213 202 131 186 8 106 55 212 237 248 174 13 234 231 161 222 137 245 189 88 239 194 122 55 214 133 137 47 188 242 75 168 59 176 239 199 122 71 242 236 212 117 168 15 37 219 215 244 66 253 244 149 209 103 242 161 110 72 78 108 239 135 186 5 222 191 5 245 107 132 42 117 67 138 103 38 53 66 74 205 97 175 22 81 3 134 54 100 46 144 125 100 213 9 158 109 126 255 197 136 221 108 243 91 109 14 251 149 80 147 57 30 13 45 242 220 184 196 111 249 228 142 127 208 126 217 79 118 78 80 126 28 190 75 144 71 135 247 71 113 158 255 242 255 79 114 29 216 219 100 243 95 193 248 111 214 12 53 100 233 198 120 86 226 219 151 248 95 189 130 119 91 247 232 223 27 24 239 45 99 96 226 81 37 146 179 183 102 201 187 23 121 89 61 131 255 191 200 252 130 186 47 103 252 183 235 227 166 165 133 6 115 206 254 153 180 238 31 67 126 86 141 240 119 87 161 171 8 88 218 98 243 92 198 120 62 166 90 163 186 241 33 205 228 168 228 121 47 250 185 224 119 237 228 244 219 180 127 223 228 165 169 183 161 222 147 120 227 133 189 183 121 23 124 215 162 62 238 242 190 1 241 108 222 43 127 252 226 223 15 64 93 49 245 218 143 226 31 235 224 171 174 9 96 177 214 246 187 205 76 7 93 170 161 41 145 166 104 216 223 214 220 22 208 13 235 125 69 60 158 246 187 195 210 247 30 154 76 182 210 254 147 248 78 232 229 97 124 103 231 34 161 31 225 147 199 240 221 241 180 111 30 196 57 132 143 4 16 207 246 209 98 196 89 135 115 60 145 184 246 242 55 254 223 95 31 89 246 217 3 56 231 39 250 67 31 42 225 250 211 227 209 240 226 206 224 83 82 127 15 34 63 235 177 222 55 249 127 111 124 160 67 91 119 117 168 183 121 253 57 122 219 143 56 182 222 234 241 157 240 55 91 127 66 119 247 35 79 15 96 61 175 195 213 7 244 247 172 235 243 160 158 221 182 255 193 30 3 244 215 163 69 195 250 232 130 0 59 211 250 155 247 55 161 167 46 172 171 39 167 126 64 235 32 226 56 121 65 232 206 214 217 73 156 247 84 226 79 187 190 127 83 103 221 203 185 194 206 143 61 216 223 148 206 25 203 250 154 221 19 221 212 151 102 134 62 218 19 53 173 122 177 39 74 239 193 214 155 195 199 35 97 230 223 139 28 127 122 181 14 126 33 39 127 76 46 252 158 90 245 130 223 203 228 135 212 142 108 127 170 52 135 187 53 195 138 43 17 136 1 3 90 84 157 231 216 35 249 181 121 253 132 71 155 191 165 189 84 65 56 106 124 180 84 166 64 88 139 92 40 116 56 159 247 182 98 189 81 230 148 109 216 191 7 107 91 183 243 57 187 10 235 45 88 111 150 249 66 236 51 132 142 237 61 134 151 180 174 249 43 212 156 118 234 67 76 9 101 254 30 79 103 60 106 105 67 106 189 79 59 147 229 31 182 243 236 103 207 33 242 136 191 203 87 227 169 15 4 60 139 99 144 19 233 57 144 15 183 95 177 6 22 39 184 101 163 153 57 74 218 232 189 64 159 18 82 151 134 17 126 144 158 163 60 102 232 125 176 168 54 40 179 145 220 40 244 126 131 142 3 121 152 205 33 244 34 244 209 53 28 87 149 193 154 110 127 205 161 134 142 28 31 207 136 198 187 121 184 32 254 45 126 213 65 92 21 5 241 111 127 239 86 30 46 232 185 92 177 202 74 30 102 50 104 4 81 121 170 28 141 39 78 252 182 209 53 97 90 241 51 180 67 242 56 170 227 48 18 117 13 69 109 62 231 248 100 226 218 213 139 174 9 127 192 231 165 29 146 207 102 221 226 184 7 104 235 167 136 10 29 200 24 128 186 126 183 147 73 166 191 146 247 43 215 68 176 229 84 144 118 72 33 157 245 104 131 59 56 30 83 205 250 153 251 154 91 179 82 93 51 84 214 113 115 212 42 143 30 13 107 150 166 195 86 30 146 154 161 203 9 88 202 225 168 180 83 196 81 215 249 181 49 53 236 215 195 234 220 188 44 203 112 84 218 89 203 81 139 90 70 212 168 149 165 136 37 40 134 202 58 197 56 235 137 56 108 204 195 134 50 58 7 204 124 131 163 210 206 58 142 90 158 66 13 170 99 214 251 200 204 133 24 42 235 148 112 212 181 199 187 78 90 90 36 67 145 212 80 41 242 234 87 135 232 45 199 60 175 204 105 133 26 242 72 25 234 149 222 191 228 244 42 25 42 23 26 50 12 221 200 105 136 186 54 87 3 237 84 112 71 41 2 105 7 61 129 12 42 205 136 220 81 88 90 92 143 202 107 138 197 34 106 80 137 12 206 1 75 134 42 249 172 21 77 225 176 161 154 230 41 159 66 109 101 22 154 230 82 62 43 75 168 85 56 107 167 106 234 113 35 52 175 8 57 235 6 225 121 134 18 91 209 80 53 170 252 168 106 90 74 228 182 43 160 134 104 130 226 26 162 157 141 136 234 213 35 97 53 43 61 57 235 38 228 53 8 39 127 57 79 145 168 155 5 42 152 214 10 234 22 244 134 174 144 161 197 50 180 218 168 247 160 83 66 138 138 228 212 39 81 183 10 53 104 99 52 72 45 171 97 27 234 181 45 164 71 87 244 186 157 58 74 99 169 115 51 53 253 229 119 174 96 30 130 14 108 244 25 170 115 1 144 172 251 230 17 142 74 59 100 7 71 205 55 135 179 244 80 84 72 167 136 74 115 106 77 35 228 252 246 67 133 67 57 41 208 4 64 179 53 79 0 180 179 147 163 186 77 43 172 233 185 196 70 147 177 64 125 158 220 203 81 139 0 21 162 100 54 109 204 160 238 74 161 26 90 180 255 46 234 110 228 149 229 221 5 94 111 161 222 71 85 222 90 85 2 186 107 85 149 140 89 178 141 4 247 87 218 217 195 81 75 223 69 133 180 124 123 86 186 191 152 240 251 61 173 172 179 23 125 168 89 29 209 50 169 97 54 15 213 162 191 6 12 29 64 205 229 180 113 63 186 23 55 147 140 28 216 229 5 159 149 118 246 113 212 18 143 62 20 211 163 153 228 43 81 31 64 84 54 107 91 52 22 159 243 115 137 250 32 71 45 101 137 45 27 179 37 175 117 28 181 176 133 174 39 178 42 151 185 188 30 25 2 80 26 110 206 232 99 119 176 229 172 251 57 106 217 49 221 210 250 180 208 92 54 156 69 61 128 42 231 135 36 89 149 207 236 0 30 226 168 197 176 219 176 12 61 19 231 37 234 65 84 185 95 141 198 115 25 69 162 62 44 124 8 14 189 244 254 187 12 61 130 12 209 156 215 2 251 151 52 172 84 195 163 56 107 23 243 242 187 73 244 16 79 54 197 230 48 232 161 79 155 207 0 116 223 134 201 6 58 112 87 193 80 157 59 140 233 63 252 249 50 102 47 232 144 6 142 10 215 158 129 136 98 245 233 198 80 87 76 13 81 193 191 55 53 221 233 225 172 208 129 155 71 134 234 220 72 38 126 255 187 231 56 42 237 144 199 82 9 192 28 124 42 171 88 169 134 199 249 172 206 125 222 149 23 95 157 228 179 210 14 121 66 36 108 6 152 75 81 112 11 135 121 8 58 135 49 97 67 2 24 90 73 216 79 114 212 74 79 167 159 143 59 23 113 36 234 17 206 171 115 63 62 237 238 245 161 94 161 3 87 214 12 213 185 202 78 214 93 244 138 172 124 209 11 55 69 98 214 133 27 164 228 200 201 36 162 66 7 46 89 24 170 115 249 146 172 59 119 94 204 122 238 60 220 135 48 84 231 158 132 110 135 83 185 252 45 184 34 22 62 180 112 117 156 60 123 245 130 64 189 122 129 180 204 207 58 163 60 57 171 55 165 242 176 234 53 148 254 161 185 244 37 245 122 52 165 134 133 123 217 43 117 189 111 162 15 65 135 180 242 92 94 162 68 77 237 116 76 49 128 207 15 188 72 238 27 218 196 14 64 251 162 122 58 187 31 146 105 190 157 163 22 70 227 145 172 227 205 206 218 193 81 215 142 40 167 35 154 153 25 86 206 234 227 168 238 176 54 146 35 200 158 213 143 179 142 134 6 20 35 139 43 103 61 134 94 222 1 166 160 102 153 149 155 131 227 28 181 10 45 161 101 44 164 198 104 134 149 2 148 42 15 136 212 171 12 169 157 106 63 8 226 206 158 88 206 122 130 242 234 217 239 220 212 36 222 252 110 16 175 7 160 3 151 148 41 87 254 240 242 50 121 246 37 183 112 175 151 220 164 75 108 163 33 43 175 108 230 130 168 33 159 62 10 203 239 172 134 102 82 239 73 156 53 160 143 170 70 46 97 207 168 161 27 81 97 187 169 196 254 205 80 15 162 6 97 131 149 155 85 162 158 162 168 222 223 20 139 187 141 52 48 187 137 225 142 66 59 189 92 121 206 255 40 73 78 156 111 16 169 247 124 3 121 154 94 179 52 150 174 99 122 29 104 86 211 220 210 255 31 130 9 0 58 112 31 196 85 190 116 79 148 60 251 139 87 92 19 77 129 128 143 118 248 27 23 252 207 25 146 23 232 82 251 111 220 72 1 193 27 56 246 134 55 148 141 130 248 165 11 208 135 155 232 202 218 128 207 180 40 64 65 252 50 220 54 85 121 225 123 48 224 141 152 244 205 255 0 0 13 13 19 83 113 117 101 97 107 80 114 105 109 115 80 80 67 46 112 114 111 106 0 0 0 0 0 0 0 0 0 0 0 0 75 202 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 180 0 0 0 0 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 103 33 178 129 192 215 0 0 41 201 0 0 2 240 0 0 9 117 0 0 1 61 97 47 37 171 0 0 0 0 0 0 139 188 13 192 85 103 121 173 204 147 221 94 185 159 155 13 240 44 39 242 83 190 178 219 94 132 31 37 148 220 62 182 214 218 111 154 124 61 166 204 239 76 222 177 75 60 53 60 167 231 229 132 225 175 99 209 26 116 107 17 86 230 145 223 76 178 79 178 201 102 183 95 66 201 243 142 108 22 97 132 159 100 147 61 32 155 145 219 71 40 239 40 161 132 213 73 182 146 205 46 115 219 81 158 228 57 217 79 54 203 219 231 17 70 120 140 112 194 99 120 224 171 43 57 205 242 242 220 210 162 217 26 97 251 152 17 182 201 109 221 108 147 223 228 55 217 100 51 60 217 192 248 211 116 80 30 0 3 128 249 171 1 230 225 223 178 62 162 29 249 216 253 12 180 55 98 112 179 75 59 138 255 183 26 182 44 114 106 175 234 167 229 249 181 235 19 178 212 234 243 185 157 49 37 26 4 1 171 123 189 190 26 119 253 178 114 6 85 121 3 217 35 237 120 253 68 236 88 219 60 27 114 2 47 2 220 20 158 179 196 169 253 102 251 182 170 242 187 173 43 183 108 127 170 100 22 102 166 85 70 180 206 69 78 176 227 223 134 255 113 203 119 253 217 90 253 7 176 175 179 173 220 66 119 99 214 39 106 234 170 23 103 123 14 79 63 170 197 150 175 93 158 88 12 144 205 177 101 243 47 43 13 150 200 29 136 172 108 12 88 190 10 160 242 183 108 234 124 188 33 128 149 238 113 42 233 108 113 124 15 207 58 181 20 66 78 76 242 183 74 205 242 41 46 245 24 111 220 119 170 27 195 167 239 79 168 221 168 198 229 176 59 36 169 170 172 158 129 48 247 93 166 78 135 21 4 44 100 193 76 7 158 46 214 28 14 1 81 160 102 77 3 162 138 24 177 123 37 191 88 93 43 162 69 136 238 69 238 133 11 157 223 25 168 226 210 101 166 31 140 243 74 214 193 114 133 251 142 215 65 233 15 169 120 48 108 39 42 57 33 27 173 76 75 165 53 141 81 80 106 166 126 164 216 186 21 96 137 70 159 193 96 174 213 27 141 72 254 232 48 210 44 40 132 60 246 35 33 217 119 62 17 28 158 238 32 14 96 108 141 80 40 60 109 241 64 28 160 180 11 37 48 1 239 77 35 29 127 134 179 115 234 100 113 112 105 48 212 123 30 214 47 129 6 204 175 57 246 24 52 220 244 59 61 7 128 64 26 92 201 95 30 195 255 97 87 210 149 236 61 48 111 13 178 93 0 251 176 242 38 60 3 186 28 48 143 171 253 107 207 66 195 205 149 176 230 141 117 144 124 105 15 36 31 108 115 37 183 229 241 59 201 205 65 29 137 142 79 180 187 218 169 158 171 253 171 47 193 167 126 241 185 1 44 152 73 62 244 77 131 226 20 231 73 120 197 208 4 225 235 23 122 251 206 153 174 246 167 240 182 129 15 38 173 133 125 248 63 142 231 193 87 160 97 201 203 120 254 46 199 178 155 99 126 29 182 114 166 39 97 85 68 140 106 18 10 74 208 88 208 87 106 19 177 88 84 137 151 144 174 93 192 130 175 238 1 71 254 110 152 248 120 97 90 124 69 58 35 88 149 5 15 45 6 199 202 151 241 191 175 69 251 147 11 243 55 146 21 128 227 186 34 204 29 197 191 29 38 181 215 97 253 174 185 144 149 133 121 241 237 250 136 239 144 79 207 23 197 217 194 159 118 170 126 37 0 83 202 80 213 215 21 113 71 9 30 70 29 32 63 188 254 56 172 79 124 76 77 251 193 156 215 55 185 30 253 54 234 158 68 64 120 14 63 9 142 89 59 88 153 205 135 185 253 136 175 131 235 124 226 227 247 235 245 145 15 170 239 152 29 51 16 76 133 217 228 20 172 6 132 25 37 94 57 174 68 239 145 149 86 85 172 141 75 145 38 73 105 18 61 129 70 69 82 54 150 120 107 61 162 187 4 43 61 119 32 15 30 201 57 244 235 205 88 61 79 63 147 56 10 241 230 11 111 105 221 211 191 165 231 240 202 35 193 24 86 155 174 117 127 252 222 193 122 7 138 6 234 89 237 120 167 82 235 254 40 49 138 119 14 238 102 190 55 187 232 159 211 233 95 7 236 214 61 90 247 148 207 66 65 192 163 237 109 235 160 51 91 49 53 136 53 119 106 61 168 22 172 131 85 125 48 127 213 15 97 202 174 14 173 103 211 58 173 103 115 18 239 119 161 67 52 188 217 137 153 207 19 46 206 124 30 86 162 63 85 187 83 23 131 227 87 96 165 14 195 104 48 60 129 72 171 172 156 116 231 209 10 48 185 135 61 183 247 0 254 237 155 64 168 208 246 31 229 189 67 214 179 123 23 131 112 176 16 166 149 250 124 158 107 237 16 153 97 105 44 22 50 7 192 225 245 122 150 102 234 228 163 17 136 203 194 228 142 68 253 153 26 94 159 167 194 36 0 71 189 27 77 208 12 128 215 154 218 154 65 128 31 224 168 43 95 93 103 113 54 182 248 123 123 123 129 245 60 202 47 30 252 2 119 41 215 67 65 244 111 75 153 109 169 20 10 69 163 17 177 82 14 113 115 253 80 177 0 7 183 236 132 206 5 197 176 189 100 15 93 33 28 130 211 127 14 175 205 91 175 119 182 67 234 208 113 100 57 253 11 23 154 2 224 176 56 253 231 8 249 59 142 84 79 113 141 215 216 48 144 203 56 228 182 115 132 92 8 93 175 45 255 213 171 189 15 199 8 27 19 16 135 79 82 253 82 232 44 177 58 175 49 105 240 153 231 159 56 252 195 204 102 120 165 38 148 112 88 9 199 251 78 116 9 135 224 60 213 71 245 135 165 70 190 247 162 94 213 115 62 109 69 26 74 213 48 247 105 126 255 93 159 94 237 174 30 237 99 236 84 164 98 164 147 105 138 250 19 255 179 32 222 127 40 170 50 210 52 140 225 80 91 66 141 153 58 249 190 242 243 172 34 142 120 194 36 0 7 69 150 19 85 242 31 94 125 164 69 189 35 191 173 248 14 243 150 142 28 169 63 83 227 74 71 62 132 195 52 160 35 175 94 90 37 142 242 225 245 213 103 248 48 251 232 236 223 99 245 74 103 63 130 227 114 103 63 138 99 172 179 31 229 117 172 179 207 224 48 95 232 236 7 249 248 87 103 63 68 236 7 157 125 6 199 88 103 63 8 227 106 103 63 130 195 60 160 179 207 114 170 114 243 251 62 13 208 121 227 49 156 138 40 132 165 115 209 159 187 6 124 186 130 251 180 249 71 71 254 158 240 175 116 228 103 29 214 52 160 35 175 15 68 110 189 69 108 43 190 237 223 29 121 222 63 58 42 4 122 206 57 46 117 84 35 56 46 119 66 163 124 140 117 66 25 28 151 156 126 16 199 85 167 31 193 97 113 142 184 226 56 196 129 198 48 218 186 95 115 160 52 142 80 96 216 22 251 95 62 206 42 141 112 68 27 113 144 233 44 142 234 198 96 6 71 174 119 104 92 228 162 35 142 243 122 221 149 166 0 162 248 219 91 197 56 100 139 43 254 60 14 116 178 208 112 207 58 145 112 208 104 162 232 142 134 99 129 208 59 236 167 156 3 21 47 223 109 10 192 235 53 231 72 247 244 35 111 3 151 112 100 28 58 163 179 180 179 198 135 101 118 41 172 56 237 199 19 194 134 11 115 143 217 193 104 75 36 44 133 135 102 83 207 7 34 100 116 16 112 194 208 228 37 72 8 230 47 26 232 139 201 52 55 219 167 139 254 12 205 162 146 82 244 108 62 228 96 134 255 140 251 61 144 115 97 2 248 124 44 193 208 95 251 89 114 245 201 201 218 171 65 120 250 146 167 39 141 17 231 201 162 197 144 155 34 31 233 172 148 165 38 89 81 199 90 14 27 88 248 160 177 81 159 189 216 63 146 254 142 174 204 124 226 174 187 212 184 164 240 7 70 243 134 32 25 59 192 34 24 182 200 82 59 3 40 200 43 211 102 217 205 183 12 152 0 80 110 254 192 56 155 140 60 210 254 129 19 49 222 216 11 161 4 194 106 32 226 83 68 202 4 226 129 13 127 89 120 96 74 18 187 208 229 89 191 14 78 143 84 169 235 91 197 191 190 40 155 17 8 247 237 46 104 112 219 2 121 151 208 183 245 98 52 4 27 214 194 217 120 227 51 125 9 199 2 119 117 89 249 2 113 65 89 105 93 41 30 125 203 220 117 11 204 86 36 96 51 150 176 24 49 176 87 38 59 241 149 61 215 211 134 135 233 236 103 32 196 86 241 87 198 105 49 5 159 20 103 193 252 218 186 154 57 88 241 27 253 245 115 75 249 19 29 239 154 238 252 49 208 214 134 124 202 173 184 15 232 157 102 50 229 170 30 6 154 9 164 189 5 144 184 30 62 137 199 29 148 155 80 7 205 120 36 188 48 123 30 32 86 86 69 185 156 63 194 167 49 247 101 202 61 208 11 180 105 224 39 148 147 94 131 199 120 159 142 17 220 0 95 231 238 134 209 90 15 79 96 142 111 181 184 125 30 124 31 115 109 148 187 229 121 120 6 115 95 162 220 13 219 96 63 62 196 61 73 185 143 88 160 23 105 69 92 200 77 7 252 30 115 28 107 206 23 225 8 192 140 73 148 139 254 128 148 49 3 183 71 224 14 140 73 108 34 230 248 187 83 240 25 54 29 115 124 198 177 241 105 134 11 24 102 114 142 87 188 198 110 199 92 13 231 169 147 225 172 224 76 222 61 172 13 51 47 128 200 183 169 44 251 57 107 192 28 42 13 160 228 121 134 15 225 34 127 170 157 223 197 112 150 102 182 147 114 139 28 236 1 100 139 191 79 183 84 178 135 113 53 5 215 86 209 11 12 121 156 83 204 69 183 155 182 106 204 227 53 62 156 164 156 192 247 46 20 248 112 215 143 236 143 139 168 91 53 16 141 76 245 74 205 1 191 232 150 98 39 158 142 241 233 39 117 81 127 73 159 152 190 96 96 200 231 227 5 125 21 199 211 0 138 59 218 36 127 66 142 228 165 135 81 248 53 163 98 129 49 82 149 42 153 202 215 75 74 36 16 105 86 173 229 77 129 120 84 201 170 136 70 226 249 41 166 202 219 226 138 164 22 184 19 106 60 26 22 239 144 55 222 19 85 154 84 91 169 223 47 35 95 62 41 222 162 90 235 36 165 89 142 219 150 38 2 161 38 163 96 238 42 55 174 24 145 227 137 216 120 154 85 53 136 177 83 174 44 160 34 213 114 184 17 41 200 75 15 178 242 58 41 110 245 17 140 20 81 70 186 143 39 119 133 23 139 141 231 239 98 6 48 202 29 7 150 222 89 145 67 41 28 8 226 245 12 128 54 125 52 26 249 139 200 33 27 78 101 245 97 253 63 0 65 109 177 88 4 208 212 91 0 250 233 234 221 163 88 189 122 21 245 86 41 103 5 58 51 73 108 54 156 140 247 31 254 184 154 129 155 14 180 56 115 74 180 9 205 179 37 61 59 51 251 176 143 220 111 35 239 69 95 216 253 151 60 41 147 247 175 253 236 188 253 217 219 103 221 29 251 144 221 15 155 245 40 87 174 250 160 210 203 177 140 63 152 55 54 147 151 235 190 55 189 159 103 154 135 188 231 115 154 254 193 233 93 127 234 231 85 113 103 235 43 118 90 60 139 75 241 135 213 20 117 246 74 55 203 26 208 21 0 133 203 183 199 122 227 70 79 60 220 29 78 134 183 152 70 71 56 98 38 142 41 110 251 243 198 104 11 170 185 4 92 79 191 213 131 143 122 77 52 105 198 59 66 109 102 109 120 211 95 87 126 60 239 197 30 153 117 107 43 27 123 163 201 112 183 89 252 159 155 240 245 89 217 17 69 103 143 253 175 59 184 245 184 31 248 180 84 34 217 187 201 38 160 219 169 181 231 252 215 198 183 254 246 182 243 181 84 93 67 237 74 155 224 29 96 106 100 228 191 220 13 73 53 87 175 27 190 83 208 212 191 9 244 134 38 179 211 178 134 76 232 33 216 30 122 1 106 239 101 234 63 64 38 217 23 91 95 155 72 218 1 106 239 241 237 202 115 76 161 119 54 172 140 36 108 143 0)! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 11/25/1998 13:41'!macExternalPrimsFile	^ '#include <CodeFragments.h>#include <Strings.h>#include "sq.h"/*** Variables ***/CFragConnectionID squeakVMLib = nil;  /* connection to the VM itself as a shared library *//*** Function Type Declaration ***/typedef int (*RecordVMProxyProc)(struct VirtualMachine *interpreterProxy);CFragConnectionID FindOrLoadLib(char *libName, int loadFlag);CFragConnectionID FindOrLoadLib(char *libName, int loadFlag) {	CFragLoadOptions action;	CFragConnectionID libHandle;	Ptr mainAddr;	Str255 errorMsg;	OSErr err;	action = loadFlag ? kLoadCFrag : kFindCFrag;	err = GetSharedLibrary(		c2pstr(libName), kCurrentCFragArch, action, &libHandle, &mainAddr, errorMsg);	p2cstr((unsigned char *) libName);  /* undo C to Pascal conversion */	if (err) {		return null;	}	return libHandle;}int ioLoadExternalFunctionOfLengthFromModuleOfLength(  int functionNameIndex, int functionNameLength, int moduleNameIndex, int moduleNameLength){	Str255 functionName, moduleName;	CFragConnectionID libHandle;	CFragSymbolClass ignored;	Ptr functionPtr;	OSErr err;	int i;	/* copy function and module names into C strings */	for (i = 0; i < functionNameLength; i++) {		functionName[i] = ((char *) functionNameIndex)[i];	}	functionName[functionNameLength] = 0;	for (i = 0; i < moduleNameLength; i++) {		moduleName[i] = ((char *) moduleNameIndex)[i];	}	moduleName[moduleNameLength] = 0;	/* find the library */	if (moduleNameLength > 0) {		/* look for the primitive in named library */		/* first try to find it */		libHandle = FindOrLoadLib((char *) moduleName, false);		if (!!libHandle) {			/* then try to load it */			libHandle = FindOrLoadLib((char *) moduleName, true);		}	} else {		/* look for the primitive in the Squeak VM itself */		if (!!squeakVMLib) {			/* try to get a handle on the Squeak VM itself, viewed as a library */			squeakVMLib = FindOrLoadLib("SqueakVMPrims", false);		}		libHandle = squeakVMLib;	}	if (!!libHandle) return success(false);  /* could not open the library */	/* if library is external, initialize its VMProxy pointer */	if (libHandle !!= squeakVMLib) {		/* get the setInterpreter() function */		err = FindSymbol(libHandle, "\psetInterpreter", &functionPtr, &ignored);		if (err) return success(false);		/* call setInterpreter() */		((RecordVMProxyProc) functionPtr)(sqGetInterpreterProxy());	}	/* get the address of the desired primitive function */	c2pstr((char *) functionName);	err = FindSymbol(libHandle, functionName, &functionPtr, &ignored);	if (err) return success(false);	return (int) functionPtr;}'! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 11/25/1998 14:16'!macWindowFile	^ '#include <MacHeaders.h>#include <AppleEvents.h>#include <Dialogs.h>#include <Devices.h>#include <Files.h>#include <Fonts.h>#include <Gestalt.h>#include <LowMem.h>#include <Memory.h>#include <Menus.h>#include <OSUtils.h>#include <Power.h>#include <QuickDraw.h>#include <Scrap.h>#include <Strings.h>#include <Timer.h>#include <ToolUtils.h>#include <Windows.h>#include <profiler.h>#include "sq.h"/*** Compilation Options:**	define PLUGIN		to compile code for Netscape Plug-in*	define MAKE_PROFILE	to compile code for profiling****///#define PLUGIN//#define MAKE_PROFILE/*** Enumerations ***/enum { appleID = 1, fileID, editID };enum { quitItem = 1 };/*** Variables -- Imported from Virtual Machine ***/extern int fullScreenFlag;extern int interruptCheckCounter;extern int interruptKeycode;extern int interruptPending;  /* set to true by recordKeystroke if interrupt key is pressed */extern unsigned char *memory;extern int savedWindowSize;   /* set from header when image file is loaded *//*** Variables -- image and path names ***/#define IMAGE_NAME_SIZE 300char imageName[IMAGE_NAME_SIZE + 1];  /* full path to image */#define SHORTIMAGE_NAME_SIZE 100char shortImageName[SHORTIMAGE_NAME_SIZE + 1];  /* just the image file name */#define DOCUMENT_NAME_SIZE 300char documentName[DOCUMENT_NAME_SIZE + 1];  /* full path to document or image file */#define SHORTDOCUMENT_NAME_SIZE 100char shortDocumentName[SHORTDOCUMENT_NAME_SIZE + 1];  /* just the document file name */#define VMPATH_SIZE 300char vmPath[VMPATH_SIZE + 1];  /* full path to interpreter''s directory *//*** Variables -- Mac Related ***/MenuHandle		appleMenu = nil;Handle			clipboardBuffer = nil;MenuHandle		editMenu = nil;int				menuBarHeight = 20;RgnHandle		menuBarRegion = nil;  /* if non-nil, then menu bar has been hidden */MenuHandle		fileMenu = nil;CTabHandle		stColorTable = nil;PixMapHandle	stPixMap = nil;WindowPtr		stWindow = nil;/*** Variables -- Event Recording ***/#define KEYBUF_SIZE 64int keyBuf[KEYBUF_SIZE];	/* circular buffer */int keyBufGet = 0;			/* index of next item of keyBuf to read */int keyBufPut = 0;			/* index of next item of keyBuf to write */int keyBufOverflows = 0;	/* number of characters dropped */int buttonState = 0;		/* mouse button and modifier state when mouse							   button went down or 0 if not pressed */Point savedMousePosition;	/* mouse position when window is inactive */int windowActive = true;	/* true if the Squeak window is the active window *//* This table maps the 5 Macintosh modifier key bits to 4 Squeak modifier   bits. (The Mac shift and caps lock keys are both mapped to the single   Squeak shift bit).		Mac bits: <control><option><caps lock><shift><command>		ST bits:  <command><option><control><shift>*/char modifierMap[32] = {	0,  8, 1,  9, 1,  9, 1,  9, 4, 12, 5, 13, 5, 13, 5, 13,	2, 10, 3, 11, 3, 11, 3, 11, 6, 14, 7, 15, 7, 15, 7, 15};/*** Functions ***/void AdjustMenus(void);void FreeClipboard(void);void FreePixmap(void);char * GetAttributeString(int id);int  HandleEvents(void);void HandleMenu(int mSelect);void HandleMouseDown(EventRecord *theEvent);void InitMacintosh(void);void InstallAppleEventHandlers(void);int  IsImageName(char *name);void MenuBarHide(void);void MenuBarRestore(void);void SetColorEntry(int index, int red, int green, int blue);void SetUpClipboard(void);void SetUpMenus(void);void SetUpPixmap(void);void SetUpWindow(void);void SetWindowTitle(char *title);void StoreFullPathForLocalNameInto(char *shortName, char *fullName, int length);/* event capture */int recordKeystroke(EventRecord *theEvent);int recordModifierButtons(EventRecord *theEvent);int recordMouseDown(EventRecord *theEvent);/*** Apple Event Handlers ***/static pascal OSErr HandleOpenAppEvent(AEDescList *aevt, AEDescList *reply, int refCon);static pascal OSErr HandleOpenDocEvent(AEDescList *aevt, AEDescList *reply, int refCon);static pascal OSErr HandlePrintDocEvent(AEDescList *aevt, AEDescList *reply, int refCon);static pascal OSErr HandleQuitAppEvent(AEDescList *aevt, AEDescList *reply, int refCon);/*** Apple Event Handling ***/void InstallAppleEventHandlers() {	OSErr	err;	long	result;	shortImageName[0] = 0;	err = Gestalt(gestaltAppleEventsAttr, &result);	if (err == noErr) {		AEInstallEventHandler(kCoreEventClass, kAEOpenApplication, NewAEEventHandlerProc(HandleOpenAppEvent),  0, false);		AEInstallEventHandler(kCoreEventClass, kAEOpenDocuments,   NewAEEventHandlerProc(HandleOpenDocEvent),  0, false);		AEInstallEventHandler(kCoreEventClass, kAEPrintDocuments,  NewAEEventHandlerProc(HandlePrintDocEvent), 0, false);		AEInstallEventHandler(kCoreEventClass, kAEQuitApplication, NewAEEventHandlerProc(HandleQuitAppEvent),  0, false);	}}pascal OSErr HandleOpenAppEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	/* User double-clicked application; look for "squeak.image" in same directory */	aevt; reply; refCon;  /* reference args to avoid compiler warnings */	/* record path to VM''s home folder */	dir_PathToWorkingDir(vmPath, VMPATH_SIZE);	/* use default image name in same directory as the VM */	strcpy(shortImageName, "squeak.image");	return noErr;}pascal OSErr HandleOpenDocEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	/* User double-clicked an image file. Record the path to the VM''s directory,	   then set the default directory to the folder containing the image and	   record the image name. Fail if mullitple image files were selected. */	OSErr		err;	AEDesc		fileList = {''NULL'', NULL};	long		numFiles, size;	DescType	type;	AEKeyword	keyword;	FSSpec		fileSpec;	WDPBRec		pb;	reply; refCon;  /* reference args to avoid compiler warnings */	/* record path to VM''s home folder */	dir_PathToWorkingDir(vmPath, VMPATH_SIZE);	/* copy document list */	err = AEGetKeyDesc(aevt, keyDirectObject, typeAEList, &fileList);	if (err) goto done;	/* count list elements */	err = AECountItems( &fileList, &numFiles);	if (err) goto done;	if (numFiles !!= 1) {		error("You may only open one Squeak image or document file at a time.");	}	/* get image name */	err = AEGetNthPtr(&fileList, 1, typeFSS,					  &keyword, &type, (Ptr) &fileSpec, sizeof(fileSpec), &size);	if (err) goto done;	strcpy(shortImageName, p2cstr(fileSpec.name));	if (!!IsImageName(shortImageName)) {		/* record the document name, but run the default image in VM directory */		strcpy(shortDocumentName, shortImageName);		strcpy(shortImageName, "squeak.image");		StoreFullPathForLocalNameInto(shortImageName, imageName, IMAGE_NAME_SIZE);	}	/* make the image or document directory the working directory */	pb.ioNamePtr = NULL;	pb.ioVRefNum = fileSpec.vRefNum;	pb.ioWDDirID = fileSpec.parID;	PBHSetVolSync(&pb);	if (shortDocumentName[0] !!= 0) {		/* record the document''s full name */		StoreFullPathForLocalNameInto(shortDocumentName, documentName, DOCUMENT_NAME_SIZE);	}done:	AEDisposeDesc(&fileList);	return err;}pascal OSErr HandlePrintDocEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	aevt; reply; refCon;  /* reference args to avoid compiler warnings */	return errAEEventNotHandled;}pascal OSErr HandleQuitAppEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	aevt; reply; refCon;  /* reference args to avoid compiler warnings */	return errAEEventNotHandled;}/*** VM Home Directory Path ***/int vmPathSize(void) {	return strlen(vmPath);}int vmPathGetLength(int sqVMPathIndex, int length) {	char *stVMPath = (char *) sqVMPathIndex;	int count, i;	count = strlen(vmPath);	count = (length < count) ? length : count;	/* copy the file name into the Squeak string */	for (i = 0; i < count; i++) {		stVMPath[i] = vmPath[i];	}	return count;}/*** Mac-related Functions ***/void AdjustMenus(void) {	WindowPeek		wp;	int				isDeskAccessory;	wp = (WindowPeek) FrontWindow();	if (wp !!= NULL) {		isDeskAccessory = (wp->windowKind < 0);	} else {		isDeskAccessory = false;	}	if (isDeskAccessory) {		/* Enable items in the Edit menu */		EnableItem(editMenu, 1);		EnableItem(editMenu, 3);		EnableItem(editMenu, 4);		EnableItem(editMenu, 5);		EnableItem(editMenu, 6);	} else {		/* Disable items in the Edit menu */		DisableItem(editMenu, 1);		DisableItem(editMenu, 3);		DisableItem(editMenu, 4);		DisableItem(editMenu, 5);		DisableItem(editMenu, 6);	}}int HandleEvents(void) {	EventRecord		theEvent;	int				ok;	SystemTask();	ok = GetNextEvent(everyEvent, &theEvent);	if (ok) {		switch (theEvent.what) {			case mouseDown:				HandleMouseDown(&theEvent);				return false;			break;			case mouseUp:				recordModifierButtons(&theEvent);				return false;			break;			case keyDown:			case autoKey:				if ((theEvent.modifiers & cmdKey) !!= 0) {					AdjustMenus();					HandleMenu(MenuKey(theEvent.message & charCodeMask));				}				recordModifierButtons(&theEvent);				recordKeystroke(&theEvent);			break;			case updateEvt:				BeginUpdate(stWindow);				fullDisplayUpdate();  /* this makes VM call ioShowDisplay */				EndUpdate(stWindow);			break;			case activateEvt:				if (theEvent.modifiers & activeFlag) {					windowActive = true;				} else {					GetMouse(&savedMousePosition);					windowActive = false;				}				InvalRect(&stWindow->portRect);			break;			case kHighLevelEvent:				AEProcessAppleEvent(&theEvent);			break;		}	}	return ok;}void HandleMenu(int mSelect) {	int			menuID, menuItem;	Str255		name;	GrafPtr		savePort;	menuID = HiWord(mSelect);	menuItem = LoWord(mSelect);	switch (menuID) {		case appleID:			GetPort(&savePort);			GetMenuItemText(appleMenu, menuItem, name);			OpenDeskAcc(name);			SetPort(savePort);		break;		case fileID:			if (menuItem == quitItem) {				ioExit();			}		break;		case editID:			if (!!SystemEdit(menuItem - 1)) {				SysBeep(5);			}		break;	}}void HandleMouseDown(EventRecord *theEvent) {	WindowPtr	theWindow;	Rect		growLimits = { 20, 20, 4000, 4000 };	Rect		dragBounds;	int			windowCode, newSize;	windowCode = FindWindow(theEvent->where, &theWindow);	switch (windowCode) {		case inSysWindow:			SystemClick(theEvent, theWindow);		break;		case inMenuBar:			AdjustMenus();			HandleMenu(MenuSelect(theEvent->where));		break;		case inDrag:			dragBounds = qd.screenBits.bounds;			if (theWindow == stWindow) {				DragWindow(stWindow, theEvent->where, &dragBounds);			}		break;		case inGrow:			if (theWindow == stWindow) {				newSize = GrowWindow(stWindow, theEvent->where, &growLimits);				if (newSize !!= 0) {					SizeWindow(stWindow, LoWord(newSize), HiWord(newSize), true);				}			}		break;		case inContent:			if (theWindow == stWindow) {				if (theWindow !!= FrontWindow()) {					SelectWindow(stWindow);				}				recordMouseDown(theEvent);			}		break;		case inGoAway:			if ((theWindow == stWindow) &&				(TrackGoAway(stWindow, theEvent->where))) {					/* HideWindow(stWindow); noop for now */			}		break;	}}void InitMacintosh(void) {	MaxApplZone();	InitGraf(&qd.thePort);	InitFonts();	FlushEvents(everyEvent, 0);	InitWindows();	InitMenus();	TEInit();	InitDialogs(NULL);	InitCursor();}void MenuBarHide(void) {  /* Remove the menu bar, saving its old state. */  /* Many thanks to John McIntosh for this code!! */	Rect screenRect, mBarRect;	if (menuBarRegion !!= nil) return;  /* saved state, so menu bar is already hidden */	screenRect = (**GetMainDevice()).gdRect;	menuBarHeight = GetMBarHeight();	SetRect(&mBarRect, screenRect.left, screenRect.top, screenRect.right, screenRect.top + menuBarHeight);	menuBarRegion = NewRgn();	if (menuBarRegion !!= nil) {		LMSetMBarHeight(0);		RectRgn(menuBarRegion, &mBarRect);		UnionRgn(LMGetGrayRgn(), menuBarRegion, LMGetGrayRgn());	}}void MenuBarRestore(void) {  /* Restore the menu bar from its saved state. Do nothing if it isn''t hidden. */  /* Many thanks to John McIntosh for this code!! */ 	if (menuBarRegion == nil) return;  /* no saved state, so menu bar is not hidden */	DiffRgn(LMGetGrayRgn(), menuBarRegion, LMGetGrayRgn());	LMSetMBarHeight(menuBarHeight);	DisposeRgn(menuBarRegion);	menuBarRegion = nil;	DrawMenuBar();}void SetUpMenus(void) {	InsertMenu(appleMenu = NewMenu(appleID, "\p\024"), 0);	InsertMenu(fileMenu  = NewMenu(fileID,  "\pFile"), 0);	InsertMenu(editMenu  = NewMenu(editID,  "\pEdit"), 0);	DrawMenuBar();	AppendResMenu(appleMenu, ''DRVR'');	AppendMenu(fileMenu, "\pQuit");	AppendMenu(editMenu, "\pUndo/Z;(-;Cut/X;Copy/C;Paste/V;Clear");}void SetColorEntry(int index, int red, int green, int blue) {	(*stColorTable)->ctTable[index].value = index;	(*stColorTable)->ctTable[index].rgb.red = red;	(*stColorTable)->ctTable[index].rgb.green = green;	(*stColorTable)->ctTable[index].rgb.blue = blue;}void FreePixmap(void) {	if (stPixMap !!= nil) {		DisposePixMap(stPixMap);		stPixMap = nil;	}	if (stColorTable !!= nil) {		DisposeHandle((void *) stColorTable);		stColorTable = nil;	}}void SetUpPixmap(void) {	int i, r, g, b;	stColorTable = (CTabHandle) NewHandle(sizeof(ColorTable) + (256 * sizeof(ColorSpec)));	(*stColorTable)->ctSeed = GetCTSeed();	(*stColorTable)->ctFlags = 0;	(*stColorTable)->ctSize = 255;	/* 1-bit colors (monochrome) */	SetColorEntry(0, 65535, 65535, 65535);	/* white or transparent */	SetColorEntry(1,     0,     0,     0);	/* black */	/* additional colors for 2-bit color */	SetColorEntry(2, 65535, 65535, 65535);	/* opaque white */	SetColorEntry(3, 32768, 32768, 32768);	/* 1/2 gray */	/* additional colors for 4-bit color */	SetColorEntry( 4, 65535,     0,     0);	/* red */	SetColorEntry( 5,     0, 65535,     0);	/* green */	SetColorEntry( 6,     0,     0, 65535);	/* blue */	SetColorEntry( 7,     0, 65535, 65535);	/* cyan */	SetColorEntry( 8, 65535, 65535,     0);	/* yellow */	SetColorEntry( 9, 65535,     0, 65535);	/* magenta */	SetColorEntry(10,  8192,  8192,  8192);	/* 1/8 gray */	SetColorEntry(11, 16384, 16384, 16384);	/* 2/8 gray */	SetColorEntry(12, 24576, 24576, 24576);	/* 3/8 gray */	SetColorEntry(13, 40959, 40959, 40959);	/* 5/8 gray */	SetColorEntry(14, 49151, 49151, 49151);	/* 6/8 gray */	SetColorEntry(15, 57343, 57343, 57343);	/* 7/8 gray */	/* additional colors for 8-bit color */	/* 24 more shades of gray (does not repeat 1/8th increments) */	SetColorEntry(16,  2048,  2048,  2048);	/*  1/32 gray */	SetColorEntry(17,  4096,  4096,  4096);	/*  2/32 gray */	SetColorEntry(18,  6144,  6144,  6144);	/*  3/32 gray */	SetColorEntry(19, 10240, 10240, 10240);	/*  5/32 gray */	SetColorEntry(20, 12288, 12288, 12288);	/*  6/32 gray */	SetColorEntry(21, 14336, 14336, 14336);	/*  7/32 gray */	SetColorEntry(22, 18432, 18432, 18432);	/*  9/32 gray */	SetColorEntry(23, 20480, 20480, 20480);	/* 10/32 gray */	SetColorEntry(24, 22528, 22528, 22528);	/* 11/32 gray */	SetColorEntry(25, 26624, 26624, 26624);	/* 13/32 gray */	SetColorEntry(26, 28672, 28672, 28672);	/* 14/32 gray */	SetColorEntry(27, 30720, 30720, 30720);	/* 15/32 gray */	SetColorEntry(28, 34815, 34815, 34815);	/* 17/32 gray */	SetColorEntry(29, 36863, 36863, 36863);	/* 18/32 gray */	SetColorEntry(30, 38911, 38911, 38911);	/* 19/32 gray */	SetColorEntry(31, 43007, 43007, 43007);	/* 21/32 gray */	SetColorEntry(32, 45055, 45055, 45055);	/* 22/32 gray */	SetColorEntry(33, 47103, 47103, 47103);	/* 23/32 gray */	SetColorEntry(34, 51199, 51199, 51199);	/* 25/32 gray */	SetColorEntry(35, 53247, 53247, 53247);	/* 26/32 gray */	SetColorEntry(36, 55295, 55295, 55295);	/* 27/32 gray */	SetColorEntry(37, 59391, 59391, 59391);	/* 29/32 gray */	SetColorEntry(38, 61439, 61439, 61439);	/* 30/32 gray */	SetColorEntry(39, 63487, 63487, 63487);	/* 31/32 gray */	/* The remainder of color table defines a color cube with six steps	   for each primary color. Note that the corners of this cube repeat	   previous colors, but simplifies the mapping between RGB colors and	   color map indices. This color cube spans indices 40 through 255.	*/	for (r = 0; r < 6; r++) {		for (g = 0; g < 6; g++) {			for (b = 0; b < 6; b++) {				i = 40 + ((36 * r) + (6 * b) + g);				if (i > 255) error("index out of range in color table compuation");				SetColorEntry(i, (r * 65535) / 5, (g * 65535) / 5, (b * 65535) / 5);			}		}	}	stPixMap = NewPixMap();	(*stPixMap)->pixelType = 0; /* chunky */	(*stPixMap)->cmpCount = 1;	(*stPixMap)->pmTable = stColorTable;}void SetUpWindow(void) {	Rect windowBounds = {44, 8, 300, 500};	stWindow = NewCWindow(		0L, &windowBounds,		"\p Welcome to Squeak!!  Reading Squeak image file... ",		true, documentProc, (WindowPtr) -1L, true, 0);}void SetWindowTitle(char *title) {	SetWTitle(stWindow, c2pstr(title));	p2cstr((unsigned char *) title);}/*** Event Recording Functions ***/int recordKeystroke(EventRecord *theEvent) {	int keystate;	/* keystate: low byte is the ascii character; next 4 bits are modifier bits */	keystate =		(modifierMap[(theEvent->modifiers >> 8) & 0x1F] << 8) |		(theEvent->message & 0xFF);	if (keystate == interruptKeycode) {		/* Note: interrupt key is "meta"; it not reported as a keystroke */		interruptPending = true;		interruptCheckCounter = 0;	} else {		keyBuf[keyBufPut] = keystate;		keyBufPut = (keyBufPut + 1) % KEYBUF_SIZE;		if (keyBufGet == keyBufPut) {			/* buffer overflow; drop the last character */			keyBufGet = (keyBufGet + 1) % KEYBUF_SIZE;			keyBufOverflows++;		}	}}int recordMouseDown(EventRecord *theEvent) {	int stButtons;	stButtons = 4;		/* red button by default */	if ((theEvent->modifiers & optionKey) !!= 0) {		stButtons = 2;	/* yellow button if option down */	}	if ((theEvent->modifiers & cmdKey) !!= 0) {		stButtons = 1;	/* blue button if command down */	}	/* button state: low three bits are mouse buttons; next 4 bits are modifier bits */	buttonState =		(modifierMap[(theEvent->modifiers >> 8) & 0x1F] << 3) |		(stButtons & 0x7);}int recordModifierButtons(EventRecord *theEvent) {	int stButtons = 0;	if (Button()) {		stButtons = buttonState & 0x7;	} else {		stButtons = 0;	}	/* button state: low three bits are mouse buttons; next 4 bits are modifier bits */	buttonState =		(modifierMap[(theEvent->modifiers >> 8) & 0x1F] << 3) |		(stButtons & 0x7);}/*** I/O Primitives ***/int ioBeep(void) {	SysBeep(1000);}int ioExit(void) {	sqNetworkShutdown();	MenuBarRestore();	ExitToShell();}int ioForceDisplayUpdate(void) {	/* do nothing on a Mac */}int ioFormPrint(int bitsAddr, int width, int height, int depth, double hScale, double vScale, int landscapeFlag) {	/* experimental: print a form with the given bitmap, width, height, and depth at	   the given horizontal and vertical scales in the given orientation */	printf("ioFormPrint width %d height %d depth %d hScale %f vScale %f landscapeFlag %d\n",		width, height, depth, hScale, vScale, landscapeFlag);	bitsAddr;	return true;}int ioGetButtonState(void) {	ioProcessEvents();  /* process all pending events */	return buttonState;}int ioGetKeystroke(void) {	int keystate;	ioProcessEvents();  /* process all pending events */	if (keyBufGet == keyBufPut) {		return -1;  /* keystroke buffer is empty */	} else {		keystate = keyBuf[keyBufGet];		keyBufGet = (keyBufGet + 1) % KEYBUF_SIZE;		/* set modifer bits in buttonState to reflect the last keystroke fetched */		buttonState = ((keystate >> 5) & 0xF8) | (buttonState & 0x7);	}	return keystate;}int ioMicroMSecs(void) {	/* millisecond clock based on microsecond timer (about 60 times slower than clock()!!!!) */	/* Note: This function and ioMSecs() both return a time in milliseconds. The difference	   is that ioMicroMSecs() is called only when precise millisecond resolution is essential,	   and thus it can use a more expensive timer than ioMSecs, which is called frequently.	   However, later VM optimizations reduced the frequency of calls to ioMSecs to the point	   where clock performance became less critical, and we also started to want millisecond-	   resolution timers for real time applications such as music. Thus, on the Mac, we''ve	   opted to use the microsecond clock for both ioMSecs() and ioMicroMSecs(). */	UnsignedWide microTicks;	Microseconds(&microTicks);	return (microTicks.lo / 1000) + (microTicks.hi * 4294967);}int ioMSecs(void) {	/* return a time in milliseconds for use in Delays and Time millisecondClockValue */	/* Note: This was once a macro based on clock(); it now uses the microsecond clock for	   greater resolution. See the comment in ioMicroMSecs(). */	UnsignedWide microTicks;	Microseconds(&microTicks);	return (microTicks.lo / 1000) + (microTicks.hi * 4294967);}int ioMousePoint(void) {	Point p;	ioProcessEvents();  /* process all pending events */	if (windowActive) {		GetMouse(&p);	} else {		/* don''t report mouse motion if window is not active */		p = savedMousePosition;	}	return (p.h << 16) | (p.v & 0xFFFF);  /* x is high 16 bits; y is low 16 bits */}int ioPeekKeystroke(void) {	int keystate;	ioProcessEvents();  /* process all pending events */	if (keyBufGet == keyBufPut) {		return -1;  /* keystroke buffer is empty */	} else {		keystate = keyBuf[keyBufGet];		/* set modifer bits in buttonState to reflect the last keystroke peeked at */		buttonState = ((keystate >> 5) & 0xF8) | (buttonState & 0x7);	}	return keystate;}int ioProcessEvents(void) {	/* This is a noop when running as a plugin; the browser handles events. */	int maxPollsPerSec = 30;	static clock_t nextPollTick = 0;#ifndef PLUGIN	if (clock() > nextPollTick) {		/* time to process events!! */		while (HandleEvents()) {			/* process all pending events */		}		/* wait a while before trying again */		nextPollTick = clock() + (CLOCKS_PER_SEC / maxPollsPerSec);	}#endif	return interruptPending;}int ioRelinquishProcessorForMicroseconds(int microSeconds) {	/* This operation is platform dependent. On the Mac, it simply calls	 * HandleEvents(), which gives other applications a chance to run.	 */	while (HandleEvents()) {		/* process all pending events */	}	return microSeconds;}int ioScreenSize(void) {	int w = 10, h = 10;	if (stWindow !!= nil) {		w = stWindow->portRect.right - stWindow->portRect.left;		h = stWindow->portRect.bottom - stWindow->portRect.top;	}	return (w << 16) | (h & 0xFFFF);  /* w is high 16 bits; h is low 16 bits */}int ioSeconds(void) {	struct tm timeRec;	time_t time1904, timeNow;	/* start of ANSI epoch is midnight of Jan 1, 1904 */	timeRec.tm_sec   = 0;	timeRec.tm_min   = 0;	timeRec.tm_hour  = 0;	timeRec.tm_mday  = 1;	timeRec.tm_mon   = 0;	timeRec.tm_year  = 4;	timeRec.tm_wday  = 0;	timeRec.tm_yday  = 0;	timeRec.tm_isdst = 0;	time1904 = mktime(&timeRec);	timeNow = time(NULL);	/* Squeak epoch is Jan 1, 1901, 3 non-leap years earlier than ANSI one */	return (timeNow - time1904) + (3 * 365 * 24 * 60 * 60);}int ioSetCursor(int cursorBitsIndex, int offsetX, int offsetY) {	/* Old version; forward to new version. */	ioSetCursorWithMask(cursorBitsIndex, nil, offsetX, offsetY);}int ioSetCursorWithMask(int cursorBitsIndex, int cursorMaskIndex, int offsetX, int offsetY) {	/* Set the 16x16 cursor bitmap. If cursorMaskIndex is nil, then make the mask the same as	   the cursor bitmap. If not, then mask and cursor bits combined determine how cursor is	   displayed:			mask	cursor	effect			 0		  0		transparent (underlying pixel shows through)			 1		  1		opaque black			 1		  0		opaque white			 0		  1		invert the underlying pixel	*/	Cursor macCursor;	int i;	if (cursorMaskIndex == nil) {		for (i = 0; i < 16; i++) {			macCursor.data[i] = (checkedLongAt(cursorBitsIndex + (4 * i)) >> 16) & 0xFFFF;			macCursor.mask[i] = (checkedLongAt(cursorBitsIndex + (4 * i)) >> 16) & 0xFFFF;		}	} else {		for (i = 0; i < 16; i++) {			macCursor.data[i] = (checkedLongAt(cursorBitsIndex + (4 * i)) >> 16) & 0xFFFF;			macCursor.mask[i] = (checkedLongAt(cursorMaskIndex + (4 * i)) >> 16) & 0xFFFF;		}	}	/* Squeak hotspot offsets are negative; Mac''s are positive */	macCursor.hotSpot.h = -offsetX;	macCursor.hotSpot.v = -offsetY;	SetCursor(&macCursor);}int ioSetFullScreen(int fullScreen) {	Rect screen = qd.screenBits.bounds;	int width, height, maxWidth, maxHeight;	int oldWidth, oldHeight;	if (fullScreen) {		MenuBarHide();		oldWidth = stWindow->portRect.right - stWindow->portRect.left;		oldHeight = stWindow->portRect.bottom - stWindow->portRect.top;		width  = screen.right - screen.left;		height = (screen.bottom - screen.top);		if ((oldWidth < width) || (oldHeight < height)) {			/* save old size if it wasn''t already full-screen */ 			savedWindowSize = (oldWidth << 16) + (oldHeight & 0xFFFF);		}		MoveWindow(stWindow, 0, 0, true);		SizeWindow(stWindow, width, height, true);		fullScreenFlag = true;	} else {		MenuBarRestore();		/* get old window size */		width  = (unsigned) savedWindowSize >> 16;		height = savedWindowSize & 0xFFFF;		/* minimum size is 64 x 64 */		width  = (width  > 64) ?  width : 64;		height = (height > 64) ? height : 64;		/* maximum size is screen size inset slightly */		maxWidth  = (screen.right  - screen.left) - 16;		maxHeight = (screen.bottom - screen.top)  - 52;		width  = (width  <= maxWidth)  ?  width : maxWidth;		height = (height <= maxHeight) ? height : maxHeight;		MoveWindow(stWindow, 8, 44, true);		SizeWindow(stWindow, width, height, true);		fullScreenFlag = false;	}}int ioShowDisplay(	int dispBitsIndex, int width, int height, int depth,	int affectedL, int affectedR, int affectedT, int affectedB) {	Rect		dstRect = { 0, 0, 0, 0 };	Rect		srcRect = { 0, 0, 0, 0 };	RgnHandle	maskRect = nil;	if (stWindow == nil) {		return;	}	dstRect.left	= 0;	dstRect.top		= 0;	dstRect.right	= width;	dstRect.bottom	= height;	srcRect.left	= 0;	srcRect.top		= 0;	srcRect.right	= width;	srcRect.bottom	= height;	(*stPixMap)->baseAddr = (void *) dispBitsIndex;	/* Note: top three bits of rowBytes indicate this is a PixMap, not a BitMap */	(*stPixMap)->rowBytes = (((((width * depth) + 31) / 32) * 4) & 0x1FFF) | 0x8000;	(*stPixMap)->bounds = srcRect;	(*stPixMap)->pixelSize = depth;	(*stPixMap)->cmpSize = depth;	/* create a mask region so that only the affected rectangle is copied */	maskRect = NewRgn();	SetRectRgn(maskRect, affectedL, affectedT, affectedR, affectedB);	SetPort(stWindow);	CopyBits((BitMap *) *stPixMap, &stWindow->portBits, &srcRect, &dstRect, srcCopy, maskRect);	DisposeRgn(maskRect);}/*** Image File Naming ***/void StoreFullPathForLocalNameInto(char *shortName, char *fullName, int length) {	int offset, sz, i;	offset = dir_PathToWorkingDir(fullName, length);	/* copy the file name into a null-terminated C string */	sz = strlen(shortName);	for (i = 0; i <= sz; i++) {		/* append shortName to fullName, including terminator */		fullName[i + offset] = shortName[i];	}}int imageNameSize(void) {	return strlen(imageName);}int imageNameGetLength(int sqImageNameIndex, int length) {	char *sqImageName = (char *) sqImageNameIndex;	int count, i;	count = strlen(imageName);	count = (length < count) ? length : count;	/* copy the file name into the Squeak string */	for (i = 0; i < count; i++) {		sqImageName[i] = imageName[i];	}	return count;}int imageNamePutLength(int sqImageNameIndex, int length) {	char *sqImageName = (char *) sqImageNameIndex;	int count, i, ch, j;	int lastColonIndex = -1;	count = (IMAGE_NAME_SIZE < length) ? IMAGE_NAME_SIZE : length;	/* copy the file name into a null-terminated C string */	for (i = 0; i < count; i++) {		ch = imageName[i] = sqImageName[i];		if (ch == '':'') {			lastColonIndex = i;		}	}	imageName[count] = 0;	/* copy short image name into a null-terminated C string */	for (i = lastColonIndex + 1, j = 0; i < count; i++, j++) {		shortImageName[j] = imageName[i];	}	shortImageName[j] = 0;	SetWindowTitle(shortImageName);	return count;}/*** Clipboard Support (text only for now) ***/void SetUpClipboard(void) {	/* allocate clipboard in the system heap to support really big copy/paste */	THz oldZone;	oldZone = GetZone();	SetZone(SystemZone());	clipboardBuffer = NewHandle(0);	SetZone(oldZone);}void FreeClipboard(void) {	if (clipboardBuffer !!= nil) {		DisposeHandle(clipboardBuffer);		clipboardBuffer = nil;	}}int clipboardReadIntoAt(int count, int byteArrayIndex, int startIndex) {	long clipSize, charsToMove;	char *srcPtr, *dstPtr, *end;	clipSize = clipboardSize();	charsToMove = (count < clipSize) ? count : clipSize;	srcPtr = (char *) *clipboardBuffer;	dstPtr = (char *) byteArrayIndex + startIndex;	end = srcPtr + charsToMove;	while (srcPtr < end) {		*dstPtr++ = *srcPtr++;	}	return charsToMove;}int clipboardSize(void) {	long count, offset;	count = GetScrap(clipboardBuffer, ''TEXT'', &offset);	if (count < 0) {		return 0;	} else {		return count;	}}int clipboardWriteFromAt(int count, int byteArrayIndex, int startIndex) {	ZeroScrap();	PutScrap(count, ''TEXT'', (char *) (byteArrayIndex + startIndex));}/*** Profiling ***/int clearProfile(void) {#ifdef MAKE_PROFILE	ProfilerClear();#endif}int dumpProfile(void) {#ifdef MAKE_PROFILE	ProfilerDump("\pProfile.out");#endif}int startProfiling(void) {#ifdef MAKE_PROFILE	ProfilerSetStatus(true);#endif}int stopProfiling(void) {#ifdef MAKE_PROFILE	ProfilerSetStatus(false);#endif}/*** Plugin Support ***/int plugInInit(char *fullImagePath) {	if (memory == nil) {		return;	/* failed to read image */	}	/* check the interpreter''s size assumptions for basic data types */	if (sizeof(int) !!= 4) {		error("This C compiler''s integers are not 32 bits.");	}	if (sizeof(double) !!= 8) {		error("This C compiler''s floats are not 64 bits.");	}	if (sizeof(time_t) !!= 4) {		error("This C compiler''s time_t''s are not 32 bits.");	}	strcpy(imageName, fullImagePath);	dir_PathToWorkingDir(vmPath, VMPATH_SIZE);	SetUpClipboard();	SetUpPixmap();	sqFileInit();	joystickInit();}int plugInShutdown(void) {	snd_Stop();	FreeClipboard();	FreePixmap();	if (memory !!= nil) {		DisposePtr((void *) memory);		memory = nil;	}}/*** System Attributes ***/int IsImageName(char *name) {	char *suffix;	suffix = strrchr(name, ''.'');  /* pointer to last period in name */	if (suffix == NULL) return false;	if (strcmp(suffix, ".ima") == 0) return true;	if (strcmp(suffix, ".image") == 0) return true;	if (strcmp(suffix, ".IMA") == 0) return true;	if (strcmp(suffix, ".IMAGE") == 0) return true;	return false;}char * GetAttributeString(int id) {	/* This is a hook for getting various status strings back from	   the OS. In particular, it allows Squeak to be passed arguments	   such as the name of a file to be processed. Command line options	   are reported this way as well, on platforms that support them.	*/	// id #0 should return the full name of VM; for now it just returns its path	if (id == 0) return vmPath;	// id #1 should return imageName, but returns empty string in this release to	// ease the transition (1.3x images otherwise try to read image as a document)	if (id == 1) return "";  /* will be imageName */	if (id == 2) return documentName;	if (id == 1001) return "Mac OS";	if (id == 1002) return "System 7 or Later";	if (id == 1003) return "PowerPC or 68K";	/* attribute undefined by this platform */	success(false);	return "";}int attributeSize(int id) {	return strlen(GetAttributeString(id));}int getAttributeIntoLength(int id, int byteArrayIndex, int length) {	char *srcPtr, *dstPtr, *end;	int charsToMove;	srcPtr = GetAttributeString(id);	charsToMove = strlen(srcPtr);	if (charsToMove > length) {		charsToMove = length;	}	dstPtr = (char *) byteArrayIndex;	end = srcPtr + charsToMove;	while (srcPtr < end) {		*dstPtr++ = *srcPtr++;	}	return charsToMove;}/*** Image File Operations ***/void sqImageFileClose(sqImageFile f) {	FSClose(f);}sqImageFile sqImageFileOpen(char *fileName, char *mode) {	short int err, err2, fRefNum;	unsigned char *pascalFileName;	pascalFileName = c2pstr(fileName);	err = FSOpen(pascalFileName, 0, &fRefNum);	if ((err !!= 0) && (strchr(mode, ''w'') !!= null)) {		/* creating a new file for "save as" */		err2 = Create(pascalFileName, 0, ''FAST'', ''STim'');		if (err2 == 0) {			err = FSOpen(pascalFileName, 0, &fRefNum);		}	}	p2cstr(pascalFileName);	if (err !!= 0) return null;	if (strchr(mode, ''w'') !!= null) {		/* truncate file if opening in write mode */		err = SetEOF(fRefNum, 0);		if (err !!= 0) {			FSClose(fRefNum);			return null;		}	}	return (sqImageFile) fRefNum;}int sqImageFilePosition(sqImageFile f) {	long int currentPosition = 0;	GetFPos(f, &currentPosition);	return currentPosition;}int sqImageFileRead(void *ptr, int elementSize, int count, sqImageFile f) {	long int byteCount = elementSize * count;	short int err;	err = FSRead(f, &byteCount, ptr);	if (err !!= 0) return 0;	return byteCount / elementSize;}void sqImageFileSeek(sqImageFile f, int pos) {	SetFPos(f, fsFromStart, pos);}int sqImageFileWrite(void *ptr, int elementSize, int count, sqImageFile f) {	long int byteCount = elementSize * count;	short int err;	err = FSWrite(f, &byteCount, ptr);	if (err !!= 0) return 0;	return byteCount / elementSize;}/*** Main ***/#ifndef PLUGINvoid main(void) {	EventRecord theEvent;	sqImageFile f;	int reservedMemory, availableMemory;	InitMacintosh();	SetUpMenus();	SetUpClipboard();	SetUpWindow();	SetUpPixmap();	sqFileInit();	joystickInit();	/* install apple event handlers and wait for open event */	imageName[0] = shortImageName[0] = documentName[0] = vmPath[0] = 0;	InstallAppleEventHandlers();	while (shortImageName[0] == 0) {		GetNextEvent(everyEvent, &theEvent);		if (theEvent.what == kHighLevelEvent) {			AEProcessAppleEvent(&theEvent);		}	}	if (imageName[0] == 0) {		StoreFullPathForLocalNameInto(shortImageName, imageName, IMAGE_NAME_SIZE);	}	/* check the interpreter''s size assumptions for basic data types */	if (sizeof(int) !!= 4) {		error("This C compiler''s integers are not 32 bits.");	}	if (sizeof(double) !!= 8) {		error("This C compiler''s floats are not 64 bits.");	}	if (sizeof(time_t) !!= 4) {		error("This C compiler''s time_t''s are not 32 bits.");	}#ifdef MAKE_PROFILE	ProfilerInit(collectDetailed, bestTimeBase, 1000, 50);	ProfilerSetStatus(false);	ProfilerClear();#endif	/* compute the desired memory allocation */	reservedMemory = 500000;	availableMemory = MaxBlock() - reservedMemory;	/******	  Note: This is platform-specific. On the Mac, the user specifies the desired	    memory partition for each application using the Finder''s Get Info command.	    MaxBlock() returns the amount of memory in the partition minus space for	    the code segment and other resources. On other platforms, the desired heap	    size would be specified in other ways (e.g, via a command line argument).	    The maximum size of the object heap is fixed at at startup. If you run low	    on space, you must save the image and restart with more memory.	  Note: Some memory must be reserved for Mac toolbox calls, sound buffers, etc.	    A 30K reserve is too little. 40K allows Squeal to run but crashes if the	    console is opened. 50K allows the console to be opened (with and w/o the	    profiler). I added another 30K to provide for sound buffers and reliability.	    (Note: Later discovered that sound output failed if SoundManager was not	    preloaded unless there is about 100K reserved. Added 30K to that.)	******/	/* uncomment the following when using the C transcript window for debugging: */	//printf("Move this window, then hit CR\n"); getchar();	/* read the image file and allocate memory for Squeak heap */	f = sqImageFileOpen(imageName, "rb");	if (f == NULL) {		/* give a Mac-specific error message if image file is not found */		printf("Could not open the Squeak image file ''%s''\n\n", imageName);		printf("There are several ways to open a Squeak image file. You can:\n");		printf("  1. Double-click on the desired image file.\n");		printf("  2. Drop the image file icon onto the Squeak application or an alias to it.\n");		printf("  3. Name your image ''squeak.image'' and put it in the same folder as the\n");		printf("     Squeak application, then double-click on the Squeak application.\n\n");		printf("Press the return key to exit.\n");		getchar();		printf("Aborting...\n");		ioExit();	}	readImageFromFileHeapSize(f, availableMemory);	sqImageFileClose(f);	SetWindowTitle(shortImageName);	ioSetFullScreen(fullScreenFlag);	/* run Squeak */	interpret();}#endif'.! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 11/25/1998 12:57'!squeakHeaderFile	^ '#include <math.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <time.h>#include "sqConfig.h"#include "sqVirtualMachine.h"#define true 1#define false 0#define null 0  /* using ''null'' because nil is predefined in Think C *//* pluggable primitives macros *//* Note: All pluggable primitives are defined as	EXPORT(int) somePrimitive(void)   If the platform requires special declaration modifiers   the EXPORT macro can be redefined*/#define EXPORT(returnType) returnType/* image save/restore macros *//* Note: The image file save and restore code uses these macros; they   can be redefined in sqPlatformSpecific.h if desired. These default   versions are defined in terms of the ANSI Standard C libraries.*/#define sqImageFile FILE *#define sqImageFileClose(f)                  fclose(f)#define sqImageFileOpen(fileName, mode)      fopen(fileName, mode)#define sqImageFilePosition(f)               ftell(f)#define sqImageFileRead(ptr, sz, count, f)   fread(ptr, sz, count, f)#define sqImageFileSeek(f, pos)              fseek(f, pos, SEEK_SET)#define sqImageFileWrite(ptr, sz, count, f)  fwrite(ptr, sz, count, f)#define sqAllocateMemory(minHeapSize, desiredHeapSize)   malloc(desiredHeapSize)/* platform-dependent float conversion macros *//* Note: Second argument must be a variable name, not an expression!! *//* Note: Floats in image are always in PowerPC word order; change   these macros to swap words if necessary. This costs no extra and   obviates sometimes having to word-swap floats when reading an image.*/#if defined(DOUBLE_WORD_ALIGNMENT) || defined(DOUBLE_WORD_ORDER)# ifdef DOUBLE_WORD_ORDER/* word-based copy with swapping for non-PowerPC order */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 1); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 0);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 1); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 0);# else /*!!DOUBLE_WORD_ORDER*//* word-based copy for machines with alignment restrictions */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 0); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 1);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 0); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 1);# endif /*!!DOUBLE_WORD_ORDER*/#else /*!!(DOUBLE_WORD_ORDER||DOUBLE_WORD_ALIGNMENT)*//* for machines that allow doubles to be on any word boundary */# define storeFloatAtfrom(i, floatVarName) \	*((double *) (i)) = (floatVarName);# define fetchFloatAtinto(i, floatVarName) \	(floatVarName) = *((double *) (i));#endif/* this include file may redefine earlier definitions and macros: */#include "sqPlatformSpecific.h"/*** increment this version number when the image file format changes ***/#define CURRENT_VERSION 6502/* squeak file record; see sqFilePrims.c for details */typedef struct {	FILE	*file;	int		sessionID;	int		writable;	int		fileSize;	int		lastOp;  /* 0 = uncommitted, 1 = read, 2 = write */} SQFile;/* file i/o */int sqFileAtEnd(SQFile *f);int sqFileClose(SQFile *f);int sqFileDeleteNameSize(int sqFileNameIndex, int sqFileNameSize);int sqFileGetPosition(SQFile *f);int sqFileInit(void);int sqFileOpen(SQFile *f, int sqFileNameIndex, int sqFileNameSize, int writeFlag);int sqFileReadIntoAt(SQFile *f, int count, int byteArrayIndex, int startIndex);int sqFileRenameOldSizeNewSize(int oldNameIndex, int oldNameSize, int newNameIndex, int newNameSize);int sqFileSetPosition(SQFile *f, int position);int sqFileSize(SQFile *f);int sqFileValid(SQFile *f);int sqFileWriteFromAt(SQFile *f, int count, int byteArrayIndex, int startIndex);/* directories */int dir_Create(char *pathString, int pathStringLength);int dir_Delimitor(void);int dir_Lookup(char *pathString, int pathStringLength, int index,	/* outputs: */	char *name, int *nameLength, int *creationDate, int *modificationDate,	int *isDirectory, int *sizeIfFile);int dir_PathToWorkingDir(char *pathName, int pathNameMax);int dir_SetMacFileTypeAndCreator(char *filename, int filenameSize, char *fType, char *fCreator);/* interpreter entry points */void error(char *s);int checkedByteAt(int byteAddress);int checkedByteAtput(int byteAddress, int byte);int checkedLongAt(int byteAddress);int checkedLongAtput(int byteAddress, int a32BitInteger);int fullDisplayUpdate(void);int initializeInterpreter(int bytesToShift);int interpret(void);int primitiveFail(void);int signalSemaphoreWithIndex(int index);int success(int);/* display, mouse, keyboard, time i/o */int ioBeep(void);int ioExit(void);int ioForceDisplayUpdate(void);int ioFormPrint(	int bitsAddr, int width, int height, int depth,	double hScale, double vScale, int landscapeFlag);int ioSetFullScreen(int fullScreen);int ioGetButtonState(void);int ioGetKeystroke(void);int ioMicroMSecs(void);int ioMSecs(void);int ioMousePoint(void);int ioPeekKeystroke(void);int ioProcessEvents(void);int ioRelinquishProcessorForMicroseconds(int microSeconds);int ioScreenSize(void);int ioSeconds(void);int ioSetCursor(int cursorBitsIndex, int offsetX, int offsetY);int ioSetCursorWithMask(int cursorBitsIndex, int cursorMaskIndex, int offsetX, int offsetY);int ioShowDisplay(	int dispBitsIndex, int width, int height, int depth,	int affectedL, int affectedR, int affectedT, int affectedB);/* cheap clock with coarse resolution (about 17 msecs on Mac) */# define ioLowResMSecs() ((1000 * clock()) / CLOCKS_PER_SEC)/* optional millisecond clock macro */#ifdef USE_CLOCK_MSECS# define ioMSecs() ((1000 * clock()) / CLOCKS_PER_SEC)#endif/* image file and VM path names */extern char imageName[];int imageNameGetLength(int sqImageNameIndex, int length);int imageNamePutLength(int sqImageNameIndex, int length);int imageNameSize(void);int vmPathSize(void);int vmPathGetLength(int sqVMPathIndex, int length);/* save/restore */int readImageFromFileHeapSize(sqImageFile f, int desiredHeapSize);/* clipboard (cut/copy/paste) */int clipboardSize(void);int clipboardReadIntoAt(int count, int byteArrayIndex, int startIndex);int clipboardWriteFromAt(int count, int byteArrayIndex, int startIndex);/* sound output */int snd_AvailableSpace(void);int snd_InsertSamplesFromLeadTime(int frameCount, int srcBufPtr, int samplesOfLeadTime);int snd_PlaySamplesFromAtLength(int frameCount, int arrayIndex, int startIndex);int snd_PlaySilence(void);int snd_Start(int frameCount, int samplesPerSec, int stereo, int semaIndex);int snd_Stop(void);/* sound input */int snd_SetRecordLevel(int level);int snd_StartRecording(int desiredSamplesPerSec, int stereo, int semaIndex);int snd_StopRecording(void);double snd_GetRecordingSampleRate(void);int snd_RecordSamplesIntoAtLength(int buf, int startSliceIndex, int bufferSizeInBytes);/* joystick support */int joystickInit(void);int joystickRead(int stickIndex);/* netscape plug-in support */int plugInInit(char *imageName);int plugInShutdown(void);int plugInInterpretCycles(int cycleCount);/* interpreter entry points needed by compiled primitives */void * arrayValueOf(int arrayOop);int checkedIntegerValueOf(int intOop);void * fetchArrayofObject(int fieldIndex, int objectPointer);double fetchFloatofObject(int fieldIndex, int objectPointer);int fetchIntegerofObject(int fieldIndex, int objectPointer);double floatValueOf(int floatOop);int pop(int nItems);int pushInteger(int integerValue);int sizeOfSTArrayFromCPrimitive(void *cPtr);int storeIntegerofObjectwithValue(int fieldIndex, int objectPointer, int integerValue);/* sound generation primitives (old, for backward compatibility) */int primWaveTableSoundmixSampleCountintostartingAtpan(void);int primFMSoundmixSampleCountintostartingAtpan(void);int primPluckedSoundmixSampleCountintostartingAtpan(void);int primSampledSoundmixSampleCountintostartingAtpan(void);/* sound generation primitives */int primFMSoundmixSampleCountintostartingAtleftVolrightVol(void);int primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);int primPluckedSoundmixSampleCountintostartingAtleftVolrightVol(void);int primReverbSoundapplyReverbTostartingAtcount(void);int primSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);/* squeak socket record; see sqMacNetwork.c for details */typedef struct {	int		sessionID;	int		socketType;  /* 0 = TCP, 1 = UDP */	void	*privateSocketPtr;}  SQSocket, *SocketPtr;/* networking primitives */int		sqNetworkInit(int resolverSemaIndex);void	sqNetworkShutdown(void);void	sqResolverAbort(void);void	sqResolverAddrLookupResult(char *nameForAddress, int nameSize);int		sqResolverAddrLookupResultSize(void);int		sqResolverError(void);int		sqResolverLocalAddress(void);int		sqResolverNameLookupResult(void);void	sqResolverStartAddrLookup(int address);void	sqResolverStartNameLookup(char *hostName, int nameSize);int		sqResolverStatus(void);void	sqSocketAbortConnection(SocketPtr s);void	sqSocketCloseConnection(SocketPtr s);int		sqSocketConnectionStatus(SocketPtr s);void	sqSocketConnectToPort(SocketPtr s, int addr, int port);void	sqSocketCreateNetTypeSocketTypeRecvBytesSendBytesSemaID(			SocketPtr s, int netType, int socketType,			int recvBufSize, int sendBufSize, int semaIndex);void	sqSocketDestroy(SocketPtr s);int		sqSocketError(SocketPtr s);void	sqSocketListenOnPort(SocketPtr s, int port);int		sqSocketLocalAddress(SocketPtr s);int		sqSocketLocalPort(SocketPtr s);int		sqSocketReceiveDataAvailable(SocketPtr s);int		sqSocketReceiveDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketRemoteAddress(SocketPtr s);int		sqSocketRemotePort(SocketPtr s);int		sqSocketSendDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketSendDone(SocketPtr s);/* profiling */int clearProfile(void);int dumpProfile(void);int startProfiling(void);int stopProfiling(void);/* system attributes */int attributeSize(int id);int getAttributeIntoLength(int id, int byteArrayIndex, int length);/* miscellaneous primitives */int primBitmapcompresstoByteArray(void);int primBitmapdecompressfromByteArrayat(void);int primSampledSoundconvert8bitSignedFromto16Bit(void);int primStringcomparewithcollated(void);int primStringfindFirstInStringinSetstartingAt(void);int primStringfindSubstringinstartingAtmatchTable(void);int primStringindexOfAsciiinStringstartingAt(void);int primStringtranslatefromtotable(void);/* serial port primitives */int serialPortClose(int portNum);int serialPortOpen(  int portNum, int baudRate, int stopBitsType, int parityType, int dataBits,  int inFlowCtrl, int outFlowCtrl, int xOnChar, int xOffChar);int serialPortReadInto(int portNum, int count, int bufferPtr);int serialPortWriteFrom(int portNum, int count, int bufferPtr);/* MIDI primitives */int sqMIDIGetClock(void);int sqMIDIGetPortCount(void);int sqMIDIGetPortDirectionality(int portNum);int sqMIDIGetPortName(int portNum, int namePtr, int length);int sqMIDIClosePort(int portNum);int sqMIDIOpenPort(int portNum, int readSemaIndex, int interfaceClockRate);int sqMIDIParameter(int whichParameter, int modify, int newValue);int sqMIDIPortReadInto(int portNum, int count, int bufferPtr);int sqMIDIPortWriteFromAt(int portNum, int count, int bufferPtr, int time);/*** Experimental Asynchronous File I/O ***/typedef struct {	int			sessionID;	void		*state;} AsyncFile;int asyncFileClose(AsyncFile *f);int asyncFileOpen(AsyncFile *f, int fileNamePtr, int fileNameSize, int writeFlag, int semaIndex);int asyncFileRecordSize();int asyncFileReadResult(AsyncFile *f, int bufferPtr, int bufferSize);int asyncFileReadStart(AsyncFile *f, int fPosition, int count);int asyncFileWriteResult(AsyncFile *f);int asyncFileWriteStart(AsyncFile *f, int fPosition, int bufferPtr, int bufferSize);/*** pluggable primitive support ***/int ioLoadExternalFunctionOfLengthFromModuleOfLength(  int functionNameIndex, int functionNameLength,  int moduleNameIndex, int moduleNameLength);'.! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 11/25/1998 12:55'!squeakVirtualMachineHeaderFile^ '#ifndef _SqueakVM_H#define _SqueakVM_H/* Increment the following number if you change the order of   functions listed or if you remove functions */#define VM_PROXY_MAJOR 1/* Increment the following number if you add functions at the end */#define VM_PROXY_MINOR 0struct VirtualMachine* sqGetInterpreterProxy(void);typedef struct VirtualMachine {	int (*minorVersion) (void);	int (*majorVersion) (void);	/* InterpreterProxy methodsFor: ''stack access'' */	int (*pop)(int nItems);	int (*popthenPush)(int nItems, int oop);	int (*push)(int object);	int (*pushBool)(int trueOrFalse);	int (*pushFloat)(double f);	int (*pushInteger)(int integerValue);	double (*stackFloatValue)(int offset);	int (*stackIntegerValue)(int offset);	int (*stackObjectValue)(int offset);	int (*stackValue)(int offset);		/* InterpreterProxy methodsFor: ''object access'' */	int (*argumentCountOf)(int methodPointer);	void * (*arrayValueOf)(int oop);	int (*byteSizeOf)(int oop);	void * (*fetchArrayofObject)(int fieldIndex, int objectPointer);	int (*fetchClassOf)(int oop);	double (*fetchFloatofObject)(int fieldIndex, int objectPointer);	int (*fetchIntegerofObject)(int fieldIndex, int objectPointer);	int (*fetchPointerofObject)(int index, int oop);	int (*fetchWordofObject)(int fieldIndex, int oop);	void * (*firstFixedField)(int oop);	void * (*firstIndexableField)(int oop);	int (*literalofMethod)(int offset, int methodPointer);	int (*literalCountOf)(int methodPointer);	int (*methodArgumentCount)(void);	int (*methodPrimitiveIndex)(void);	int (*primitiveIndexOf)(int methodPointer);	int (*sizeOfSTArrayFromCPrimitive)(void *cPtr);	int (*slotSizeOf)(int oop);	int (*stObjectat)(int array, int index);	int (*stObjectatput)(int array, int index, int value);	int (*stSizeOf)(int oop);	int (*storeIntegerofObjectwithValue)(int index, int oop, int integer);	int (*storePointerofObjectwithValue)(int index, int oop, int valuePointer);		/* InterpreterProxy methodsFor: ''testing'' */	int (*isKindOf)(int oop, char *aString);	int (*isMemberOf)(int oop, char *aString);	int (*isBytes)(int oop);	int (*isFloatObject)(int oop);	int (*isIndexable)(int oop);	int (*isIntegerObject)(int objectPointer);	int (*isIntegerValue)(int intValue);	int (*isPointers)(int oop);	int (*isWeak)(int oop);	int (*isWords)(int oop);	int (*isWordsOrBytes)(int oop);		/* InterpreterProxy methodsFor: ''converting'' */	int (*booleanValueOf)(int obj);	int (*checkedIntegerValueOf)(int intOop);	int (*floatObjectOf)(double aFloat);	double (*floatValueOf)(int oop);	int (*integerObjectOf)(int value);	int (*integerValueOf)(int oop);	int (*positive32BitIntegerFor)(int integerValue);	int (*positive32BitValueOf)(int oop);		/* InterpreterProxy methodsFor: ''special objects'' */	int (*characterTable)(void);	int (*displayObject)(void);	int (*falseObject)(void);	int (*nilObject)(void);	int (*trueObject)(void);		/* InterpreterProxy methodsFor: ''special classes'' */	int (*classArray)(void);	int (*classBitmap)(void);	int (*classByteArray)(void);	int (*classCharacter)(void);	int (*classFloat)(void);	int (*classLargePositiveInteger)(void);	int (*classPoint)(void);	int (*classSemaphore)(void);	int (*classSmallInteger)(void);	int (*classString)(void);		/* InterpreterProxy methodsFor: ''instance creation'' */	int (*clone)(int oop);	int (*instantiateClassindexableSize)(int classPointer, int size);	int (*makePointwithxValueyValue)(int xValue, int yValue);	int (*popRemappableOop)(void);	int (*pushRemappableOop)(int oop);		/* InterpreterProxy methodsFor: ''other'' */	int (*becomewith)(int array1, int array2);	int (*byteSwapped)(int w);	int (*failed)(void);	int (*fullDisplayUpdate)(void);	int (*fullGC)(void);	int (*incrementalGC)(void);	int (*primitiveFail)(void);	int (*showDisplayBitsLeftTopRightBottom)(int aForm, int l, int t, int r, int b);	int (*signalSemaphoreWithIndex)(int semaIndex);	int (*success)(int aBoolean);	int (*superclassOf)(int classPointer);	} VirtualMachine;#endif /* _SqueakVM_H */'! !InterpreterSupportCode class removeSelector: #macExternalPrims!