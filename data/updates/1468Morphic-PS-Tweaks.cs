'From Squeak 2.5 of August 6, 1999 on 18 September 1999 at 11:07:41 am'!Canvas subclass: #PostscriptCanvas	instanceVariableNames: 'origin clipRect currentColor currentFont morphLevel gstateStack fontMap usedFonts psBounds topLevelMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Postscript'!!B3DEnginePlugin class methodsFor: 'translation' stamp: 'mpw 9/18/1999 00:08'!translateB3D		"B3DEnginePlugin translateB3D"	"Translate all the basic plugins into one support module	and write the C sources for the rasterizer."	| cg |	cg _ PluggableCodeGenerator new initialize.	{	InterpreterPlugin. 		B3DEnginePlugin.		B3DTransformerPlugin. 		B3DVertexBufferPlugin.		B3DShaderPlugin.		B3DClipperPlugin.		B3DPickerPlugin.		B3DRasterizerPlugin	} do:[:theClass|		theClass initialize.		cg addClass: theClass.		theClass declareCVarsIn: cg]."	cg storeCodeOnFile: self moduleName,'.c' doInlining: true."	cg storeCodeOnFile: '/tmp/Ballon3D.c' doInlining: true.	B3DRasterizerPlugin writeSupportCode: true.! !!BookMorph methodsFor: 'drawing' stamp: 'mpw 9/13/1999 20:22'!fullDrawPostscriptOn:aCanvas	^aCanvas fullDrawBookMorph:self.! !!InterpreterSupportCode class methodsFor: 'source file exporting' stamp: 'mpw 9/18/1999 08:00'!writePluginSupportFiles	"InterpreterSupportCode writePluginSupportFiles"	self	storeString: self squeakConfigFile			onFileNamed: '/tmp/sqConfig.h'.	self	storeString: self squeakPlatSpecFile			onFileNamed: '/tmp/sqPlatformSpecific.h'.	self	storeString: self squeakVirtualMachineHeaderFile			onFileNamed: '/tmp/sqVirtualMachine.h'.! !!PolygonMorph methodsFor: 'drawing' stamp: 'mpw 9/13/1999 20:49'!drawPostscriptOn: aCanvas 	"Display the receiver, a spline curve, approximated by straight line segments."	vertices size < 1 ifTrue: [self error: 'a polygon must have at least one point'].	aCanvas drawPolygon: self getVertices color: self color borderWidth:self borderWidth borderColor: self borderColor.! !!PostscriptCanvas methodsFor: 'initialization' stamp: 'mpw 9/18/1999 11:01'!writeProcset	target print:'%%BeginProcset: Squeak-Printing/textclip { rectclip } bind def/_showpageSqueak /showpage load def/showpage { gsave _showpageSqueak grestore } bind def/countspaces {	[ exch { dup 32 ne { pop } if  } forall ] length } bind def/jshow { 	10 dict begin	/width exch def	/str exch def	str length 0 gt {		str dup length 1 sub get 32 eq { /str str dup length 1 sub 0 exch getinterval def } if		/strw str stringwidth pop def		/diffwidth width strw sub def		/numspaces str countspaces def		numspaces 0 eq { /numspaces 1 def } if		/adjspace width strw sub numspaces div def		/adjchar 0 def		diffwidth 0 lt {			/adjspace adjspace 0.2 mul def			/adjchar diffwidth str length div 0.8 mul def		} if		adjspace 0 32 adjchar 0 str awidthshow	} if	end} bind def/transparentimage {  gsave  32 dict begin  /tinteger exch def  /transparent 1 string def  transparent 0 tinteger put  /olddict exch def  olddict /DataSource get dup type /filetype ne {    olddict /DataSource 3 -1 roll 0 () /SubFileDecode filter put  } {    pop  } ifelse  /newdict olddict maxlength dict def  olddict newdict copy pop  /w newdict /Width get def  /str w string def  /substrlen 2 w log 2 log div floor exp cvi def  /substrs [  {     substrlen string     0 1 substrlen 1 sub {       1 index exch tinteger put     } for     /substrlen substrlen 2 idiv def     substrlen 0 eq {exit} if  } loop  ] def  /h newdict /Height get def  1 w div 1 h div matrix scale  olddict /ImageMatrix get exch matrix concatmatrix  matrix invertmatrix concat  newdict /Height 1 put  newdict /DataSource str put  /mat [w 0 0 h 0 0] def  newdict /ImageMatrix mat put  0 1 h 1 sub {    mat 5 3 -1 roll neg put    olddict /DataSource get str readstring pop pop    /tail str def    /x 0 def    {      tail transparent search dup /done exch not def      {exch pop exch pop} if      /w1 1 index length def      w1 0 ne {        newdict /DataSource 3 -1 roll put        newdict /Width w1 put        mat 4 x neg put        /x x w1 add def        newdict image        /tail tail w1 tail length w1 sub getinterval def      } if      done {exit} if      tail substrs {        anchorsearch {pop} if      } forall      /tail exch def      tail length 0 eq {exit} if      /x w tail length sub def    } loop  } for  end  grestore} bind def/copydict {	dup length dict begin 		 { 1 index /FID eq {pop pop} {  def  } ifelse } forall	currentdict end} bind def/getSymbolcharproc {	1 dict begin 		/charstring exch def 	 [ 550 0 0 0 650 600 /setcachedevice cvx 50 100 /translate cvx  /pop cvx 		<< /setbbox { pop pop pop } bind >> /begin cvx   		gsave  /Symbol 600 selectfont 0 0 moveto charstring false charpath false upath grestore	 /exec cvx /fill cvx /end cvx ] cvx bind 	end} bind def/adjustFontForSqueak		% converts _ to left-arrow, ^to upArrow and tab -> 4 spaces{ 	gsave dup 1000 selectfont	dup dup findfont copydict	begin	CharStrings 	/CharStrings exch copydict	dup /leftarrow (\254) getSymbolcharproc  put	dup /uparrow (\255) getSymbolcharproc  put	dup /tab [ /pop cvx ( ) stringwidth pop 6 mul 0 0 0 0 0  /setcachedevice cvx ] cvx bind  put	def	/Encoding Encoding dup length array copy 	dup 94 /uparrow put	dup 95 /leftarrow put	dup 9 /tab put	def	currentdict end definefont pop	grestore} bind def%%endProcset'.! !!PostscriptCanvas methodsFor: 'initialization' stamp: 'mpw 9/15/1999 20:43'!writeSetupForRect:aRect	target translate: psBounds origin.	target translate: 0 @ aRect extent y;			scale:1 @ -1;		print:' [ {true setstrokeadjust} stopped ] pop[ currenttransfer /exec cvx 1.2 /exp cvx ] cvx bind  settransfer'; cr.! !!PostscriptCanvas methodsFor: 'drawing-general' stamp: 'mpw 9/14/1999 07:00'!fullDraw:aMorph	"self comment:'begin morph: ' with:aMorph."	self comment:'level: ' with:morphLevel.	morphLevel_morphLevel+1.	self gsave.	self setupGStateForMorph:aMorph.	aMorph fullDrawPostscriptOn:self.	self grestore.	morphLevel_morphLevel-1.	self comment:'end morph: ' with:aMorph.	self comment:'level: ' with:morphLevel.	! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'mpw 9/12/1999 21:25'!comment:aString with:anObject"	target comment:aString with:anObject."! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'mpw 9/12/1999 07:24'!grestore     target grestore.	currentColor _ gstateStack removeLast.	currentFont _ gstateStack removeLast.              ! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'mpw 9/12/1999 22:13'!outlinePolygon:vertices	target moveto:(vertices at:1).	2 to:vertices size  do:[ :i |		target lineto:(vertices at:i)		].	target closepath.! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'mpw 9/13/1999 21:01'!outlineQuardraticBezierShape:vertices	target moveto:(vertices at:1).	3 to:vertices size by:3 do:[ :i |		target curvetoQuadratic:(vertices at:i) from:(vertices at:i-2) via:(vertices at:i-1)		].	target closepath.! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'mpw 9/13/1999 21:04'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock	| retval |	self comment:'drawing clipped ' with:aClipRect.	self comment:'drawing transformed ' with:aDisplayTransform.     self gsave.	aClipRect ifNotNil:[ self rect:aClipRect; clip].	self transformBy:aDisplayTransform.	retval _ aBlock value:self.     self grestore.		self comment:'end of drawing clipped ' with:aClipRect.	^retval! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'mpw 9/13/1999 21:02'!drawGeneralBezierShape: shapeArray					color: color 					borderWidth: borderWidth 					borderColor: borderColor	shapeArray do:[ :shape | self outlineQuardraticBezierShape:shape ].	self setLinewidth:borderWidth;		fill:color andStroke:borderColor.! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'mpw 9/13/1999 21:02'!drawPolygon: vertices color: aColor borderWidth: bw borderColor: bc	self outlinePolygon:vertices;	     setLinewidth:bw;	     fill:aColor andStroke:bc.! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'mpw 9/17/1999 21:32'!text: s at:point font: fontOrNil color: c justified:justify	self setFont:(fontOrNil ifNil:[self defaultFont]).	self comment:' text color: ',c printString.	self setColor:c.	self comment:'  origin ',  origin printString.     self moveto: point.	target print:' (';     	 print:s asPostscript;		print:(justify ifTrue:[') jshow'] ifFalse:[') show']);		 cr.! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'mpw 9/17/1999 21:36'!text: s at:point font: fontOrNil color: c justified:justify parwidth:parwidth	self setFont:(fontOrNil ifNil:[self defaultFont]).	self comment:' text color: ',c printString.	self setColor:c.	self comment:'  origin ',  origin printString.     self moveto: point.	target print:' (';     	 print:s asPostscript; print:') '.		justify ifTrue:[			target write:parwidth; print:' jshow'; cr.		] ifFalse:[			target print:'show'.		].		target cr.! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'mpw 9/17/1999 22:14'!text: s at:point font: fontOrNil color: c spacePad:pad	self setFont:(fontOrNil ifNil:[self defaultFont]).	self comment:' text color: ',c printString.	self setColor:c.	self comment:'  origin ',  origin printString.     self moveto: point.		target write:pad; print:' 0 32 (';     	 print:s asPostscript; print:') widthshow'; cr.! !!PostscriptCanvas methodsFor: 'accessing' stamp: 'mpw 9/14/1999 06:58'!topLevelMorph	^topLevelMorph! !!PostscriptCanvas methodsFor: 'accessing' stamp: 'mpw 9/14/1999 06:58'!topLevelMorph:newMorph	topLevelMorph _ newMorph.! !!PostscriptCanvas methodsFor: 'ballon compatibility' stamp: 'mpw 9/13/1999 20:57'!aaLevel:newLevel	"ignore "! !!PostscriptCanvas methodsFor: 'ballon compatibility' stamp: 'mpw 9/13/1999 21:05'!transformBy:aTransform during:aBlock	^self transformBy:aTransform clippingTo: nil during:aBlock! !!DSCPostscriptCanvas methodsFor: 'as yet unclassified' stamp: 'mpw 9/15/1999 20:14'!defaultImageableArea	^ self defaultPageSize insetBy:self defaultMargin.! !!DSCPostscriptCanvas methodsFor: 'as yet unclassified' stamp: 'mpw 9/15/1999 20:13'!defaultMargin	^ 0.25.! !!DSCPostscriptCanvas methodsFor: 'as yet unclassified' stamp: 'mpw 9/12/1999 21:53'!fullDrawBookMorph:aBookMorph	" draw all the pages in a book morph, but only if it is the top-level morph "	morphLevel == 1 ifTrue:[		self drawPages:aBookMorph pages.	] ifFalse:[		^super fullDrawBookMorph:aBookMorph.	].	target print:'%%EOF'; cr.! !!DSCPostscriptCanvas methodsFor: 'as yet unclassified' stamp: 'mpw 9/15/1999 20:20'!pageBBox	| pageSize offset bbox |	pageSize _ self defaultImageableArea.	offset _ (pageSize extent x - psBounds extent x) / 2 @ 			((pageSize extent y - psBounds extent y) /2 ).	offset _ offset + self defaultMargin.	bbox _ offset extent:psBounds extent.	^bbox! !!DSCPostscriptCanvas methodsFor: 'as yet unclassified' stamp: 'mpw 9/13/1999 20:38'!setupGStateForMorph:aMorph	" position the morph on the page  "	morphLevel == 2 ifTrue:[ 		self writeSetupForRect:aMorph bounds.		target translate:self pageOffset.		target translate:aMorph bounds origin negated.	].! !!EPSCanvas methodsFor: 'as yet unclassified' stamp: 'mpw 9/12/1999 07:29'!fullDraw:aMorph	super fullDraw:aMorph.	morphLevel = 0 ifTrue: [		target showpage.	].! !!EPSCanvas methodsFor: 'as yet unclassified' stamp: 'mpw 9/15/1999 20:44'!writePSIdentifier	target print:'%!!PS-Adobe-2.0 EPSF-1.2'; cr;		print:'%%BoundingBox: '; write:psBounds offset rounded; print:' '; 								 write:psBounds bottomRight rounded; cr;		print:'%%Title: '; write:self topLevelMorph externalName; cr.! !!PostscriptCanvas class reorganize!('testing' morphAsPostscript: morphAsPostscript:rotated:offsetBy: worldAsPostscript)('configuring' baseOffset defaultTarget filterSelector)('creating')!!PostscriptCanvas class methodsFor: 'testing' stamp: 'mpw 9/18/1999 11:02'!morphAsPostscript:aMorph	^self morphAsPostscript:aMorph rotated:false offsetBy:self baseOffset.! !!PostscriptCanvas class methodsFor: 'testing' stamp: 'mpw 9/15/1999 20:42'!morphAsPostscript:aMorph rotated:rotateFlag offsetBy:offset | psCanvas |  psCanvas _ self new.  psCanvas reset.  psCanvas bounds:(offset extent:aMorph bounds extent).  psCanvas topLevelMorph:aMorph.  psCanvas resetContent.  psCanvas fullDrawMorph: aMorph .  ^psCanvas contents.! !!PostscriptCanvas class methodsFor: 'configuring' stamp: 'mpw 9/18/1999 11:04'!baseOffset	^0@0.! !!EPSCanvas class methodsFor: 'as yet unclassified' stamp: 'mpw 9/18/1999 11:04'!baseOffset	^10@10.! !!PostscriptCharacterScanner methodsFor: 'displaying' stamp: 'mpw 9/17/1999 22:52'!displayLine: line offset: baseOffset leftInRun: leftInRun   | drawFont offset |   self setTextStylesForOffset:((line first) + 1).		" sets up various instance vars from text styles "   drawFont _ self font.   offset _ baseOffset.   offset _ offset + (bounds origin x @ (line top + line baseline - drawFont ascent )).    offset _ offset + ((self textStyle alignment caseOf:{	[2] -> [ line paddingWidth /2 ].	[1] -> [ line paddingWidth ] } otherwise:[0]) @ 0).   " missing: support for justified text "   canvas text: ((paragraph string) copyFrom:line first to:line last)            at:  offset             font:drawFont            color:foregroundColor		  justified:((paragraph textStyle alignment = 3) and:[ (paragraph text at:line last) ~= Character cr ]) 		  parwidth:paragraph extent x.! !!PostscriptEncoder methodsFor: 'Postscript generation' stamp: 'mpw 9/12/1999 22:11'!curvetoQuadratic:targetPoint from:sourcePoint via:offPoint	self write:(sourcePoint + offPoint) / 2; print:' ';		 write:(offPoint + targetPoint) / 2; print:' ';		 write:targetPoint;		 print:' curveto'; cr.! !!StandardFileStream class methodsFor: 'file creation' stamp: 'mpw 9/18/1999 00:05'!isAFileNamed: fileName	"Answer true if a file of the given name exists."	| f |	f _ self new open: fileName forWrite: false.	f ifNil: [^ false].	f close.	^ true! !BookMorph removeSelector: #drawPostscriptOn:!PolygonMorph removeSelector: #drawOnPostscriptCanvas:!PostscriptCanvas removeSelector: #drawBookMorph:!PostscriptCanvas removeSelector: #text:bounds:font:color:justified:!DSCPostscriptCanvas removeSelector: #drawBookMorph:!PostscriptCanvas class removeSelector: #baseOFfset!EPSCanvas class removeSelector: #baseOFfset!