'From Squeak 2.4b of April 23, 1999 on 28 June 1999 at 3:51:31 pm'!"Change Set:		EllipseDrawing-arDate:			28 June 1999Author:			Andreas RaabFixes ellipse drawing in the form canvas in several ways by using the Bresenham midpoint algorithms for ellipses; avoiding the extra pass for translucent ovals, drawing accurate wide borders and speeding up things a bit."!Object subclass: #EllipseMidpointTracer	instanceVariableNames: 'rect x y a b aSquared bSquared d1 d2 inFirstRegion '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Support'!!EllipseMidpointTracer methodsFor: 'initialize' stamp: 'ar 6/28/1999 15:33'!on: aRectangle	rect _ aRectangle.	a _ rect width // 2.	b _ rect height // 2.	x _ 0.	y _ b.	aSquared _ a * a.	bSquared _ b * b.	d1 _ bSquared - (aSquared * b) + (0.25 * aSquared).	d2 _ nil.	inFirstRegion _ true.! !!EllipseMidpointTracer methodsFor: 'computing' stamp: 'ar 6/28/1999 15:35'!stepInY	"Step to the next y value"	inFirstRegion ifTrue:[		"In the upper region we must step until we reach the next y value"		[(aSquared * (y-0.5)) > (bSquared * (x+1))] whileTrue:[			d1 < 0.0				ifTrue:[d1 _ d1 + (bSquared * (2*x+3)).						x _ x + 1]				ifFalse:[d1 _ d1 + (bSquared * (2*x+3)) + (aSquared * (-2*y+2)).						y _ y - 1.						^x _ x + 1]].		"Stepping into second region"		d2 _ (bSquared * (x + 0.5) squared) + (aSquared * (y-1) squared) - (aSquared * bSquared).		inFirstRegion _ false.	].	"In the lower region each step is a y-step"	d2 < 0.0		ifTrue:[d2 _ d2 + (bSquared * (2*x+2)) + (aSquared * (-2*y+3)).				x _ x + 1]		ifFalse:[d2 _ d2 + (aSquared * (-2*y+3))].	y _ y - 1.	^x! !!FormCanvas methodsFor: 'drawing' stamp: 'ar 6/28/1999 15:42'!fillOval: r color: c borderWidth: borderWidth borderColor: borderColor	| rect fillC borderC borderRule |	rect _ r.	c isTransparent		ifTrue: [fillC _ nil]		ifFalse: [fillC _ self drawColor: c].	borderColor isTransparent		ifTrue: [fillC == nil ifTrue: [^ self].  "both border and fill are transparent"				borderC _ nil.				rect _ rect insetBy: borderWidth]		ifFalse: [borderC _ self drawColor: borderColor.				borderRule _ self drawRule: Form over color: borderColor].	port combinationRule: (self drawRule: Form over color: c).	port fillOval: (rect translateBy: origin)		color: fillC		borderWidth: borderWidth		borderColor: borderC		borderRule: borderRule.! !!GrafPort methodsFor: 'as yet unclassified' stamp: 'ar 6/28/1999 15:41'!fillOval: rect color: fillColor borderWidth: borderWidth borderColor: borderColor borderRule: borderRule	| centerX centerY nextY yBias xBias wp fillTone borderTone outer inner nextOuterX nextInnerX fillRule fillAlpha borderAlpha |	rect area <= 0 ifTrue: [^ self].	fillRule _ combinationRule.	sourceForm _ nil. 	height _ 1.	wp _ borderWidth asPoint.	(fillColor == nil or:[fillColor isColor and:[fillColor isTransparent]])		ifTrue: [fillTone _ nil]		ifFalse: [self fillColor: fillColor.  fillTone _ halftoneForm].	fillColor isColor		ifTrue:[fillAlpha _ fillColor privateAlpha]		ifFalse:[fillAlpha _ 255].	borderColor isColor		ifTrue: [borderAlpha _ borderColor privateAlpha]		ifFalse: [borderAlpha _ 255].	((wp x * wp y) = 0 or: [borderColor == nil or:[borderColor isColor and:[borderColor isTransparent]]])		ifTrue: [borderTone _ nil]		ifFalse: [self fillColor: borderColor.  borderTone _ halftoneForm].	yBias _ rect height odd ifTrue: [0] ifFalse: [-1].	xBias _ rect width odd ifTrue: [1] ifFalse: [0].	centerX _ rect center x.	centerY _ rect center y.	outer _ EllipseMidpointTracer new on: rect.	inner _ EllipseMidpointTracer new on: (rect insetBy: wp).	nextY _ rect height // 2.	combinationRule _ borderRule.	halftoneForm _ borderTone.	alpha _ borderAlpha.	1 to: (wp y min: nextY) do:[:i|		nextOuterX _ outer stepInY.		borderTone == nil ifFalse:[			width _ (nextOuterX bitShift: 1) + xBias.			destX _ centerX - nextOuterX.			destY _ centerY - nextY.			self copyBits.			destY _ centerY + nextY + yBias.			self copyBits].		nextY _ nextY - 1.	].	[nextY > 0] whileTrue:[		nextOuterX _ outer stepInY.		nextInnerX _ inner stepInY.		"Interior"		fillTone == nil ifFalse:[			combinationRule _ fillRule.			halftoneForm _ fillTone.			alpha _ fillAlpha.			width _ (nextInnerX bitShift: 1) + xBias.			destX _ centerX - nextInnerX.			destY _ centerY - nextY.			self copyBits.			destY _ centerY + nextY + yBias.			self copyBits].		"Border"		borderTone == nil ifFalse:[			combinationRule _ borderRule.			halftoneForm _ borderTone.			alpha _ borderAlpha.			destX _ centerX - nextOuterX.			destY _ centerY - nextY.			width _ nextOuterX - nextInnerX.			self copyBits.			destX _ centerX + nextInnerX + xBias.			self copyBits.			destX _ centerX - nextOuterX.			destY _ centerY + nextY + yBias.			self copyBits.			destX _ centerX + nextInnerX + xBias.			self copyBits].		nextY _ nextY - 1.	].	"Interior"	destY _ centerY.	height _ 1 + yBias.	fillTone == nil ifFalse:[		combinationRule _ fillRule.		halftoneForm _ fillTone.		alpha _ fillAlpha.		width _ rect width - wp x - wp x.		destX _ rect left + wp x.		self copyBits].	"Border"	borderTone == nil ifFalse:[		combinationRule _ borderRule.		halftoneForm _ borderTone.		alpha _ borderAlpha.		width _ wp x.		destX _ rect left.		self copyBits.		destX _ rect right - wp x.		self copyBits].! !FormCanvas removeSelector: #fillTranslucentOval:color:borderWidth:borderColor:!