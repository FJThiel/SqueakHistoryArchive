'From Squeak2.8 of 18 June 2000 [latest update: #2348] on 26 July 2000 at 1:34:31 pm'!"Change Set:		StreamFileIn.csDate:			26 July 2000Author:			Michael RuegerMoves some methods up the stream hierarchy so fileIn may be performed on internal streams."!!Stream methodsFor: 'testing'!closed	^true! !!Stream methodsFor: 'file open/close' stamp: 'mir 8/10/1999 12:04'!close! !!PositionableStream methodsFor: 'fileIn/Out'!checkForPreamble: chunk	((chunk beginsWith: '"Change Set:') and: [Smalltalk changes preambleString == nil])		ifTrue: [Smalltalk changes preambleString: chunk].	((chunk beginsWith: '"Postscript:') and: [Smalltalk changes postscriptString == nil])		ifTrue: [Smalltalk changes postscriptString: chunk].							! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'mir 7/26/2000 13:28'!fileIn	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation."	^ self fileInAnnouncing: 'Reading ' , self name! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'mir 7/26/2000 13:30'!fileInAnnouncing: announcement	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation.  Put up a progress report with     the given announcement as the title."	| val chunk |	announcement displayProgressAt: Sensor cursorPoint		from: 0 to: self size		during:		[:bar |		[self atEnd]			whileFalse: 				[bar value: self position.				self skipSeparators.				val _ (self peekFor: $!!)					ifTrue: [(Compiler evaluate: self nextChunk logged: false)								scanFrom: self]					ifFalse: [chunk _ self nextChunk.							self checkForPreamble: chunk.							Compiler evaluate: chunk logged: true].				self skipStyleChunk].		self close].	^ val! !!PositionableStream methodsFor: 'nonhomogeneous accessing'!nextNumber: n 	"Answer the next n bytes as a positive Integer or LargePositiveInteger."	| s |	s _ 0.	1 to: n do: 		[:i | s _ (s bitShift: 8) bitOr: self next asInteger].	^ s normalize! !!ReadStream methodsFor: 'accessing'!ascii! !!ReadStream methodsFor: 'accessing'!binary! !!WriteStream methodsFor: 'file open/close' stamp: 'mir 8/10/1999 11:56'!flush! !ReadWriteStream removeSelector: #checkForPreamble:!ReadWriteStream removeSelector: #fileIn!ReadWriteStream removeSelector: #fileInAnnouncing:!