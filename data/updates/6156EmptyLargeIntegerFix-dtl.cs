'From Squeak3.7beta of ''1 April 2004'' [latest update: #5923] on 26 May 2004 at 7:02:22 pm'!"Change Set:		EmptyLargeIntegerFix-dtlDate:			26 May 2004Author:			David T. LewisInspecting the special objects array (Smalltalk specialObjectsArray) has the annoying side effect of crashing the VM. The offending element of the special objects array is an uninitialized instance of LargePositiveInteger intended for use as a template for fast large integer creation (but not actually used in the present Squeak image or VM).This change set corrects the problem with a small change to Integer>>printOn:base:Test case methods are provided to confirm reasonableness of the new #printOn:base: method.Related note: The VM crash occurs in the LargeIntegers plugin. If the plugin is disabled, other errors occur but are contained to image side problems that throw up a debugger. This means that some additional bounds checking in the LargeInteger plugin would be a good idea. This change set does not address that issue, but it does eliminate the symptoms and considerably reduces the likelihood of someone accidentally causing a crash during normal Squeak usage."!!Integer methodsFor: 'printing' stamp: 'dtl 5/26/2004 18:21'!printOn: aStream base: base	"Print a representation of the receiver on the stream	<aStream> in base <base> where	2 <= <baseInteger> <= 16. If <base> is other than 10	it is written first separated by $r followed by the number	like for example: 16rFCE2"		| current letters digits quo i |	self < 0 ifTrue: [		aStream nextPut: $-.		^self negated printOn: aStream base: base].	digits _ '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.	base = 10 ifFalse: [aStream print: base; nextPut: $r].	current _ self normalize.	i _ self digitLength * 8.	letters _ String new: i.	[current < base] whileFalse: 		[quo _ current quo: base.		letters at: i put: (digits at: (current - (quo * base)) + 1).		i _ i - 1.		current _ quo].	letters at: i put: (digits at: current + 1).	aStream nextPutAll: (letters copyFrom: i to: letters size)! !!LargeNegativeIntegerTest methodsFor: 'testing' stamp: 'dtl 5/26/2004 18:34'!testEmptyTemplate	"Check that an uninitialized instance behaves reasonably."	| i |	i _ LargeNegativeInteger new: 4.	self assert: i size == 4.	self assert: i printString = '-0'.	self assert: i normalize == 0! !!LargePositiveIntegerTest methodsFor: 'testing' stamp: 'dtl 5/26/2004 18:33'!testEmptyTemplate	"Check that an uninitialized instance behaves reasonably."	| i |	i _ LargePositiveInteger new: 4.	self assert: i size == 4.	self assert: i printString = '0'.	self assert: i normalize == 0! !!LargePositiveIntegerTest reorganize!('testing' testBitShift testEmptyTemplate testMultDicAddSub testNormalize)!!LargeNegativeIntegerTest reorganize!('testing' testEmptyTemplate)!