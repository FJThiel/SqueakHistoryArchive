'From Squeak 2.5 of August 6, 1999 on 2 September 1999 at 1:24:49 pm'!"Change Set:		paintingFixups-swDate:			2 September 1999Author:			Scott WallaceFixes a host of long-standing problems involving painting.  High spots:*  When you activate a window which has painting underway, the paint palette and the onion-skin are brought to the front so that rational painting can resume.*  When you dismiss a window that has painting underway anywhere in it its interior, the paint palette and the onion-skin are deleted.*  The task of reacting appropriately when any attempt is made to launch a new painting session while one is already underway is (hopefully) completed."!!Morph methodsFor: 'submorphs-add/remove' stamp: 'sw 9/2/1999 11:06'!comeToFront	owner addMorphFront: self! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 9/2/1999 13:16'!newDrawingFromMenu	self world assureNotPaintingElse: [^ self].	self attachMorph: PaintInvokingMorph new markAsPartsDonor! !!HandMorph methodsFor: 'from EToyHand' stamp: 'sw 9/2/1999 13:15'!makeNewDrawingInBounds: rect pasteUpMorph: aPasteUpMorph	| w newSketch newPlayer sketchEditor aPaintBox aPalette |	self world assureNotPaintingElse: [^ self].	aPalette _ aPasteUpMorph standardPalette.	aPalette ifNotNil: [aPalette showNoPalette; layoutChanged].	w _ aPasteUpMorph world.	w stopRunningAll; abandonAllHalos.	newSketch _ self drawingClass new player: (newPlayer _ UnscriptedPlayer newUserInstance).	newPlayer costume: newSketch.	newSketch form: (Form extent: rect extent depth: w assuredCanvas depth).	newSketch bounds: rect.	sketchEditor _ SketchEditorMorph new.	w addMorphFront: sketchEditor.	sketchEditor initializeFor: newSketch inBounds: rect pasteUpMorph: aPasteUpMorph.	sketchEditor		afterNewPicDo: [:aForm :aRect |			newSketch form: aForm.			newSketch position: aRect origin.			newSketch rotationStyle: sketchEditor rotationStyle.			newSketch setupAngle: sketchEditor forwardDirection.			newSketch privateOwner: aPasteUpMorph.  "temp for halo access"			newPlayer setHeading: sketchEditor forwardDirection.			"Includes  newSketch rotationDegrees: sketchEditor forwardDirection."			aPasteUpMorph addMorphFront: newPlayer costume.			w startSteppingSubmorphsOf: newSketch.			self presenter drawingJustCompleted: newSketch]		 ifNoBits:			[(aPaintBox _ self world paintBox) ifNotNil:				[aPaintBox delete].			aPalette ifNotNil: [aPalette showNoPalette].]! !!PasteUpMorph methodsFor: 'world state' stamp: 'sw 9/2/1999 13:18'!assureNotPaintingElse: aBlock	"If painting is already underway in the receiver, put up an informer to that effect and evalute aBlock"	self sketchEditorOrNil ifNotNil:		[self inform: 'Sorry, you can only paintone object at a time'.		Cursor normal show.		^ aBlock value]! !!PasteUpMorph methodsFor: 'world state' stamp: 'sw 9/2/1999 12:01'!paintBoxOrNil	"Return the painting controls widget (PaintBoxMorph) to be used for painting in this world. If there is not already a PaintBox morph return nil"	self allMorphsDo: [:m | (m isKindOf: PaintBoxMorph) ifTrue: [^ m]].	^ nil! !!PasteUpMorph methodsFor: 'world state' stamp: 'sw 9/2/1999 13:09'!sketchEditorOrNil	"Return a SketchEditorMorph found in the world, if any, else nil"	^ self findA: SketchEditorMorph! !!SketchEditorMorph methodsFor: 'initialization' stamp: 'sw 9/2/1999 11:00'!initializeFor: aSketchMorph inBounds: boundsToUse pasteUpMorph: aPasteUpMorph paintBoxPosition: aPosition	"NB: if aPosition is nil, then it's assumed that the paintbox is obtained from a flap or some such, so do nothing special regarding a palette in this case.  The palette needs already to be in the world for this to work."	| w  |	(w _ aPasteUpMorph world) addMorphFront: self.	enclosingPasteUpMorph _ aPasteUpMorph.	hostView _ aSketchMorph.  "may be ownerless"	self bounds: boundsToUse.	canvasRectangle _ bounds translateBy: w viewBox origin.	palette _ w paintBox.	aPosition ifNotNil:		[w addMorphFront: palette.  "bring to front"		palette position: aPosition].	paintingForm _ Form extent: bounds extent depth: w assuredCanvas depth.	self dimTheWindow.	self addRotationScaleHandles.	aSketchMorph ifNotNil:		[aSketchMorph rotationDegrees: 0.		aSketchMorph form			displayOn: paintingForm			at: (hostView boundsInWorld origin - bounds origin)			clippingBox: (0@0 extent: paintingForm extent)			rule: Form over			fillColor: nil.  "assume they are the same depth"		rotationCenter _ aSketchMorph rotationCenter]! !!SketchEditorMorph methodsFor: 'access' stamp: 'sw 9/2/1999 11:03'!enclosingPasteUpMorph	^ enclosingPasteUpMorph! !!SketchEditorMorph methodsFor: 'start & finish' stamp: 'sw 9/2/1999 12:54'!cancelOutOfPainting	self deleteSelfAndSubordinates.	emptyPicBlock ifNotNil: [emptyPicBlock value].	"note no args to block!!"	hostView ifNotNil: [hostView changed].	^ nil! !!SketchEditorMorph methodsFor: 'start & finish' stamp: 'sw 9/2/1999 12:54'!deleteSelfAndSubordinates	"Delete the receiver and, if it has one, its subordinate dimForm"	self delete.	dimForm ifNotNil: [dimForm delete]! !!SketchMorph methodsFor: 'menu' stamp: 'sw 9/2/1999 13:15'!editDrawingIn: aPasteUpMorph forBackground: forBackground	| w oldRotation bnds sketchEditor pal aPaintTab aWorld aPaintBox |	self world assureNotPaintingElse: [^ self].	w _ aPasteUpMorph world.	w stopRunningAll; abandonAllHalos.	w displayWorld.	oldRotation _ rotationDegrees.	forBackground		ifTrue:			[bnds _ aPasteUpMorph boundsInWorld]		ifFalse:			[bnds _ (self boundsInWorld expandBy: (60 @ 60)) intersect: self world bounds.			bnds _ (aPasteUpMorph paintingBoundsAround: bnds center) merge: bnds].	sketchEditor _ SketchEditorMorph new.	forBackground ifTrue: [sketchEditor setProperty: #background toValue: true].	w addMorphFront: sketchEditor.	sketchEditor initializeFor: self inBounds: bnds pasteUpMorph: aPasteUpMorph.		"self rotationDegrees: 0.  inside the init"	self rotationDegrees: oldRotation.  "restore old rotation so that cancel leaves it right"	sketchEditor		afterNewPicDo: [:aForm :aRect |			self form: aForm.			self topRendererOrSelf position: aRect origin.			self rotationStyle: sketchEditor rotationStyle.			self setupAngle: sketchEditor forwardDirection.			self rotationDegrees: sketchEditor forwardDirection.			self presenter drawingJustCompleted: self.			forBackground ifTrue: [self goBehind]]  "shouldn't be necessary"		ifNoBits: ["If no bits drawn.  Must keep old pic.  Can't have no picture"			aWorld _ self currentWorld.				"sometimes by now I'm no longer in a world myself, but we still need				 to get ahold of the world so that we can deal with the palette"			((pal _ aPasteUpMorph standardPalette) notNil and: [pal isInWorld])				ifTrue:					[(aPaintBox _ aWorld paintBox) ifNotNil: [aPaintBox delete].					pal viewMorph: self]				ifFalse:					[(aPaintTab _ aWorld paintingFlapTab)						ifNotNil:							[aPaintTab hideFlap]						ifNil:							[(aPaintBox _ aWorld paintBox) ifNotNil: [aPaintBox delete]]]]! !!SystemWindow methodsFor: 'open/close' stamp: 'sw 9/2/1999 12:54'!delete	| thisWorld sketchEditor aPaintBox |	model okToChange ifFalse: [^ self].	thisWorld _ self world.	sketchEditor _ self extantSketchEditor.	super delete.	model windowIsClosing; release.	model _ nil.	sketchEditor ifNotNil:		[sketchEditor deleteSelfAndSubordinates.		thisWorld notNil ifTrue:			[(aPaintBox _ thisWorld paintBoxOrNil) ifNotNil: [aPaintBox delete]]].			SystemWindow noteTopWindowIn: thisWorld.! !!SystemWindow methodsFor: 'top window' stamp: 'sw 9/2/1999 11:59'!activate	"Bring me to the front and make me able to respond to mouse and keyboard"	| oldTop outerMorph sketchEditor pal |	outerMorph _ self topRendererOrSelf.	outerMorph owner ifNil: [^ self "avoid spurious activate when drop in trash"].	oldTop _ TopWindow.	TopWindow _ self.	oldTop ifNotNil: [oldTop passivate].	outerMorph owner firstSubmorph == outerMorph		ifFalse: ["Bring me (with any flex) to the top if not already"				outerMorph owner addMorphFront: outerMorph].	self submorphsDo: [:m | m unlock].	self setStripeColorsFrom: self paneColor.	self isCollapsed ifFalse:		[model modelWakeUp.		self positionSubmorphs].	(sketchEditor _ self extantSketchEditor) ifNotNil:		[sketchEditor comeToFront.		(pal _ self world findA: PaintBoxMorph) ifNotNil:			[pal comeToFront]]! !!SystemWindow methodsFor: 'top window' stamp: 'sw 9/2/1999 13:10'!extantSketchEditor	| sketchEditor |	"If my world has an extant SketchEditorMorph associated with anything in this window, return that SketchEditor, else return nil"	^ (sketchEditor _ self world sketchEditorOrNil) ifNotNil:		[(self allMorphs includes: sketchEditor enclosingPasteUpMorph)			ifTrue:				[sketchEditor]			ifFalse:				[nil]]! !