'From Squeak 2.3 of January 14, 1999 on 12 April 1999 at 8:44:30 pm'!"Change Set:		fixups-swDate:			12 April 1999Author:			Scott WallaceFixes up Morph #embeddedInMorphicWindowLabeled: so that it does not set the receiver to be the window's model.Patches the Dependents dictionary by removing such problematical keys.Removes the redundant 'assembly' window in the default parts bin.Fixes a spelling error in the balloon help associated with the annotation-specification window.Upon mouse-down on the morphic desktop, flap-tabs are brought to the front.  This is not yet true floating-windows, but it does make flaps much more assuredly accessible.Commands to destroy a script and to rename it are now available directly in the Scriptor as well as in Viewers."!!Morph methodsFor: 'e-toy support' stamp: 'sw 4/12/1999 19:43'!embeddedInMorphicWindowLabeled: labelString	| window |	window _ (SystemWindow labelled: labelString) model: nil.	window addMorph: self frame: (0@0 extent: 1@1).	^ window! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 4/9/1999 10:19'!invokeMetaMenu: evt	"Invoke the meta menu. If the hand is over the background, the world menu is presented. If it is over a morph, a menu of operations for that morph is presented. Each menu entry contains a string to be presented in the menu and a selector. If the selector takes an argument, the mouse-down event that invoked the menu is passed as an argument. This lets the command know which hand invoked it in  order to do things like attaching the result of the command to that hand."	"Shortcut: If the shift key is pressed, the user is given a chance to select a submorph on which to operate."	| menu |	Preferences noviceMode ifTrue: [^ self].	"if carrying morphs, just drop them"	self hasSubmorphs ifTrue: [^ self dropMorphsEvent: evt].	targetOffset _ menuTargetOffset _ self position.	argument _ self argumentOrNil.	argument == nil		ifTrue:			[menu _ self buildWorldMenu.			menu addTitle: 'World'.			Utilities bringFlapsToFront]		ifFalse:			[menu _ self buildMorphMenuFor: argument.			menu addTitle: argument class name].	self invokeMenu: menu event: evt.! !!Preferences class methodsFor: 'parameters' stamp: 'sw 4/12/1999 08:14'!annotationInfo 	^ #(		(timeStamp			'The time stamp of the last submission of the method.')		(messageCategory	'Which method category the method lies in')		(sendersCount		'A report of how many senders there of the message.')		(implementorsCount	'A report of how many implementors there are of the message.')		(recentChangeSet	'The most recent change set bearing the method.')		(allChangeSets		'A list of all change sets bearing the method.'))! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 4/12/1999 19:38'!customPagesForPartsBin	| aPage aWindow  pu pageList aClass |	pageList _ OrderedCollection new.	pageList add: (aPage _ self newPageForStandardPartsBin).	aPage addMorphBack: (PasteUpMorph authoringPrototype color: (Color r: 0.96 g: 0.96 b: 0.96)).	aPage addMorphBack: TabbedPalette authoringPrototype.	aPage addMorphBack: BookMorph authoringPrototype.	aPage addMorphBack: Morph new previousPageButton markAsPartsDonor.	aPage addMorphBack: Morph new nextPageButton markAsPartsDonor.	#(DatumMorph) do:		[:aName | (aClass _ Smalltalk at: aName ifAbsent: [nil]) ifNotNil:			[aPage addMorphBack: aClass authoringPrototype]].	pageList add: (aPage _ self newPageForStandardPartsBin).	aWindow _ Browser new openAsMorphEditing: nil.	aWindow setLabel: 'System Browser'.	aPage addMorphBack: aWindow applyModelExtent.	aWindow _ Workspace new embeddedInMorphicWindowLabeled: 'Workspace'.	aPage addMorphBack: aWindow applyModelExtent.	aPage addMorphBack: FileList openAsMorph applyModelExtent.	aPage addMorphBack: DualChangeSorter new morphicWindow applyModelExtent.	aPage addMorphBack: ChangeSorter new morphicWindow applyModelExtent.	aWindow _ SelectorBrowser new morphicWindow.	aWindow setLabel: 'Selector Browser'.	aPage addMorphBack: aWindow.	pageList add: (aPage _ self newPageForStandardPartsBin).	aPage addMorphBack: ScriptingSystem newScriptingSpace.	aPage addMorphBack: ScriptingSystem scriptControlButtons.	aPage addMorphBack: TrashCanMorph new.	aPage addMorphBack: PasteUpMorph authoringPrototype.	aPage addMorphBack: ((pu _ PasteUpMorph newSticky) embeddedInMorphicWindowLabeled: 'assembly').	pu color: (Color r: 0.839 g: 1.0 b: 0.935).	pageList do:		[:page |			page  replaceTallSubmorphsByThumbnails.			page fixLayout].	^ pageList! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'sw 4/12/1999 20:41'!destroyScript	| aMenu reply |	true ifTrue: [^ playerScripted removeScript: scriptName].	self flag: #deferred.  "revisit"	(playerScripted okayToDestroyScriptNamed: scriptName)		ifFalse:			[^ self inform: 'Sorry, this script is being calledfrom another script.'].	(self isAnonymous not and: [submorphs size > 1]) ifTrue:		[aMenu _ SelectionMenu selections: #('destroy it' 'oops, no, don''t destroy').		reply _ aMenu startUpWithCaption: 'Do you really want todestroy this script?'.		(reply = 'destroy it') ifFalse: [^ self]].	self actuallyDestroyScript! !!ScriptEditorMorph methodsFor: 'other' stamp: 'sw 4/12/1999 20:43'!renameScript	"Invoked at user menu request"	| reply aPosition oldSelector dflt oldStatus oldOwner |	oldSelector _ self scriptName.	oldStatus _ self scriptInstantiation status.	dflt _ self isAnonymous ifTrue: [''] ifFalse: [self scriptTitle].	reply _   FillInTheBlank request: 'Script Name' initialAnswer: dflt. 	reply size == 0 ifTrue: [^ self].	reply first isUppercase ifTrue: [^ self inform: 'Illegal script name'].	((reply _ reply asSymbol) == scriptName) ifTrue: [^ self].	(Scanner isLiteralSymbol: reply) ifFalse: [^ self inform: 'Bad script name, please try again'].	self titleMorph borderColor: Color black.	scriptName _ reply.	playerScripted class atSelector: reply putScriptEditor: self.	self scriptInstantiation status: oldStatus.	playerScripted class removeScriptNamed: oldSelector.	playerScripted actorState instantiatedUserScriptsDictionary removeKey: oldSelector.	submorphs first delete.  "the button row"	self addMorphFront: self buttonRowForEditor.  "up to date"	self install.	aPosition _ self position.	oldOwner _ self topRendererOrSelf owner.	self delete	playerScripted costume viewAfreshIn: oldOwner showingScript: scriptName at: aPosition! !"Postscript:"DependentsFields copy keysDo:	[:aKey | (aKey isMemberOf: PasteUpMorph) ifTrue: [aKey breakDependents]].!