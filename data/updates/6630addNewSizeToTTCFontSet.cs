'From Squeakland.396-Nihongo7.29 of 14 March 2005 [latest update: #54] on 16 March 2005 at 4:25:01 pm'!"Change Set:		addNewSizeToTTCFontSetDate:			14 March 2005Author:			Tooru Nosse and Yoshiki OhshimaBased on Noose-san's change, care is taken to the registry of TTCFontSet."!!TTCFontSet methodsFor: 'as yet unclassified' stamp: 'TN 3/14/2005 23:46'!emphasis	^ fontArray first emphasis! !!TTCFontSet methodsFor: 'as yet unclassified' stamp: 'TN 3/14/2005 23:53'!ttcDescription	^ fontArray first ttcDescription! !!TTCFontSet class methodsFor: 'as yet unclassified' stamp: 'yo 3/16/2005 16:12'!familyName: n pointSize: s	"(self familyName: 'MultiMSGothic' pointSize: 14) pointSize"	| t ret index |	t _ self registry at: n asSymbol ifAbsent: [#()].	t isEmpty ifTrue: [		t _ (TextConstants at: #DefaultTextStyle) fontArray.		ret _ t first.		ret pointSize >= s ifTrue: [^ ret].		index _ 2.		[index <= t size and: [(t at: index) pointSize <= s]] whileTrue: [			ret _ t at: index.			index _ index + 1.		].		^ ret.	].	^ (TextStyle named: n) addNewFontSize: s.! !!TextStyle methodsFor: 'fonts and font indexes' stamp: 'yo 3/16/2005 16:05'!addNewFontSize: pointSize	"Add a font in specified size to the array of fonts."	| f d newArray t isSet |	fontArray first emphasis ~= 0 ifTrue: [		t _ TextConstants at: self fontArray first familyName asSymbol.		t fonts first emphasis = 0 ifTrue: [			^ t addNewFontSize: pointSize.		].	].	pointSize <= 0 ifTrue: [^ nil].	fontArray do: [:s |		s pointSize = pointSize ifTrue: [^ s].	].	(isSet _ fontArray first isKindOf: TTCFontSet) 	ifTrue:[		| fonts |		fonts _ fontArray first fontArray collect: [ :font |			| newFont |			(font isNil)			ifTrue: [newFont _ nil]			ifFalse: [				newFont _ (font ttcDescription size > 256)					ifTrue: [MultiTTCFont new initialize]					ifFalse: [TTCFont new initialize].				newFont ttcDescription: font ttcDescription.				newFont pixelSize: pointSize * 96 // 72.				font derivativeFonts notEmpty ifTrue: [font derivativeFonts do: [ :proto |					proto ifNotNil: [						d _ proto class new initialize.						d ttcDescription: proto ttcDescription.						d pixelSize: newFont pixelSize.						newFont derivativeFont: d]]].				].			newFont].		f _ TTCFontSet newFontArray: fonts]	ifFalse: [		f _ TTCFont new initialize.		f ttcDescription: fontArray first ttcDescription.		f pointSize: pointSize.		fontArray first derivativeFonts do: [:proto |			proto ifNotNil: [				d _ TTCFont new initialize.				d ttcDescription: proto ttcDescription.				d pointSize: f pointSize.				f derivativeFont: d.			].		].	].	newArray _ ((fontArray copyWith: f) asSortedCollection: [:a :b | a pointSize <= b pointSize]) asArray.	self newFontArray: newArray.	isSet ifTrue: [		TTCFontSet register: newArray at: newArray first familyName asSymbol.	].	^ self fontOfPointSize: pointSize! !