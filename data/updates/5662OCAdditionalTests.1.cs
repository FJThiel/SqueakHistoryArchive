'From Squeak3.7alpha of ''15 October 2003'' [latest update: #5623] on 10 January 2004 at 10:48:23 pm'!"Change Set:		OCAdditionalTestsDate:			10 January 2004Author:			Boris Gaertneradditional test cases for OrderedCollections. This change set requires OrderedCollectionTest, posted by Stefane (Ducasse) "!!OrderedCollectionTest commentStamp: 'BG 1/10/2004 22:07' prior: 0!These test cases demonstrate addition of items into an OrderedCollection as well as item removal.Some of the assertions are quite complicated and use a lot of collection protocol. Such methods do not test one single method, but protocol in general.!!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'BG 1/10/2004 21:52'!testAddBeforeAndRemove	"self run: #testAddBefore"	| l initialCollection |	l := #(1 2 3 4) asOrderedCollection.	initialCollection := l shallowCopy.	l add: 88 before: 1.	self assert: (l =  #(88 1 2 3 4) asOrderedCollection).	l add: 99 before: 2.	self assert: (l =  #(88 1 99 2 3 4) asOrderedCollection). 	l remove: 99.	l remove: 88.	self assert: l = initialCollection.! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'BG 1/10/2004 21:46'!testAddDuplicateItem1   | collection |   collection := #('Jim' 'Mary' 'John' 'Andrew' ) asOrderedCollection.   collection add: 'John' before: 'John'.   self assert: ((collection asBag occurrencesOf: 'John') = 2                  and: [(collection at: (collection indexOf: 'John') + 1)					= (collection at: (collection indexOf: 'John'))])! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'BG 1/10/2004 21:49'!testAddItem1   | collection size |   collection := #('Jim' 'Mary' 'John' 'Andrew' ) asOrderedCollection.   size := collection size.   collection add: 'James' before: 'Jim'.   collection add: 'Margaret' before: 'Andrew'.   self assert: size + 2 = collection size.! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'BG 1/10/2004 21:50'!testAddItem2   | collection |   collection := #('Jim' 'Mary' 'John' 'Andrew' ) asOrderedCollection.   collection add: 'James' before: 'Jim'.   collection add: 'Margaret' before: 'Andrew'.   self assert: (collection indexOf: 'James') + 1 = (collection indexOf: 'Jim').   self assert: (collection indexOf: 'Margaret') + 1 = (collection indexOf: 'Andrew').! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'BG 1/10/2004 21:55'!testIndexOf   | collection indices |   collection := #('Jim' 'Mary' 'John' 'Andrew' ) asOrderedCollection.   indices := collection collect: [:item | collection indexOf: item].   self assert: (1 to: 4) asOrderedCollection = indices.   " note that this assertion does not hold in the presence of duplicate items. "! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'BG 1/10/2004 22:45'!testIndexOfWithDuplicates   | collection indices bagOfIndices |   collection := #('Jim' 'Mary' 'John' 'Andrew' 'Mary' 'John' 'Jim' 'Micheal') asOrderedCollection.   indices := collection collect: [:item | collection indexOf: item].   self assert: indices asSet size = collection asSet size.   bagOfIndices := indices asBag.   self assert: (indices asSet                     allSatisfy: [:index | (bagOfIndices occurrencesOf: index)	                                       = (collection occurrencesOf: (collection at: index))]).  "  indexOf:  returns the index of the first occurrence of an item.     For an item with n occurrences, the index of its first occurrence     is found  n  times. "! !