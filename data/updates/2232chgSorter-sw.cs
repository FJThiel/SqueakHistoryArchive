'From Squeak2.8alpha of 13 January 2000 [latest update: #2227] on 29 May 2000 at 11:41:08 am'!"Change Set:		chgSorter-swDate:			30 May 2000Author:			Scott Wallace*  When a preamble or postscript would be lost in a dual-change-sorter 'submerge' operation, a warning confirmer is put up before the submersion is actually carried out.*  When a change-set removal would result in the loss of a preamble or postscript, similarly, a confirmer is put up.  Otherwise, it's easy to lose vital do-its housed in postscripts when submerging, because the presence of a postscript is not visually obvious in a change-sorter.*  Adds a cmd in the shifted-change-set menu of the changeSorter to expunge uniclasses from the changeset."!!ChangeSet methodsFor: 'moving changes' stamp: 'sw 4/19/2000 16:17'!expungeUniclasses	changeRecords keysAndValuesRemove:		[:className :classRecord | className endsWithDigit]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 4/19/2000 16:18'!expungeUniclasses	"remove all memory of uniclasses in the receiver"	self okToChange ifFalse: [^ self].	myChangeSet expungeUniclasses.	self changed: #classList.	self changed: #messageList.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 5/26/2000 22:34'!removePrompting: doPrompt	"Completely destroy my change set.  Check if it's OK first,  and if doPrompt is true, get the user to confirm his intentions first"	| message aName |	aName _ myChangeSet name.	myChangeSet okayToRemove ifFalse: [^ self]. "forms current changes for some project"	(myChangeSet isEmpty or: [doPrompt not]) ifFalse:		[message _ 'Are you certain that you want to remove (destroy) the change setnamed  "', aName, '" ?'.		(self confirm: message) ifFalse: [^ self]].	(doPrompt and: [myChangeSet hasPreamble or: [myChangeSet hasPostscript]])		ifTrue:			[(self confirm: 'Caution!!  This change set has a preambleand/or a postscript, which will be lost if you destroy the change set.Do you really want to go ahead with this?') ifFalse: [^ self]].	"Go ahead and remove the change set"	AllChangeSets remove: myChangeSet.	myChangeSet wither.		"clear out its contents"	self showChangeSet: Smalltalk changes.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 5/26/2000 16:21'!shiftedChangeSetMenu: aMenu	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with opposite side' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.].	aMenu addLine.	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'go to change set''s project' action: #goToChangeSetsProject.	aMenu balloonTextForLastItem: 'If this change set is currently associated with a Project, go to that project right now.'.	aMenu add: 'promote to top of list' action: #promoteToTopChangeSet.	aMenu balloonTextForLastItem:'Make this change set appear first in change-set lists in all change sorters.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'expunge uniclasses' action: #expungeUniclasses.	aMenu balloonTextForLastItem:'Remove from the change set all memory of uniclasses, e.g. classes added on behalf of etoys, fabrik, etc., whose classnames end with a digit.'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'file into new...' action: #fileIntoNewChangeSet.	aMenu balloonTextForLastItem: 'Load a fileout from disk and place its changes into a new change set (seldom needed -- much better to do this from a file-list browser these days.)'.	aMenu addLine.	aMenu add: 'more...' action: #unshiftedYellowButtonActivity.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 5/26/2000 18:23'!submergeIntoOtherSide	"Copy the contents of the receiver to the other side, then remove the receiver -- all after checking that all is well."	| other message nextToView i |	self checkThatSidesDiffer: [^ self].	self okToChange ifFalse: [^ self].	other _ (parent other: self) changeSet.	other == myChangeSet ifTrue: [^ self inform: 'Both sides are the same!!'].	myChangeSet isEmpty ifTrue: [^ self inform: 'Nothing to copy.  To remove,simply choose "remove".'].	myChangeSet okayToRemove ifFalse: [^ self].	message _ 'Please confirm:  copy all changesin "', myChangeSet name, '" into "', other name, '"and then destroy the change setnamed "', myChangeSet name, '"?'. 	(self confirm: message) ifFalse: [^ self].	(myChangeSet hasPreamble or: [myChangeSet hasPostscript]) ifTrue:		[(self confirm: 'Caution!!  This change set has a preamble ora postscript or both.  If you submerge it intothe other side, these will be lost.Do you really want to go ahead with this?') ifFalse: [^ self]].	other assimilateAllChangesFoundIn: myChangeSet.	nextToView _ ((AllChangeSets includes: myChangeSet)		and: [(i _ AllChangeSets indexOf: myChangeSet) < AllChangeSets size])		ifTrue: [AllChangeSets at: i+1]		ifFalse: [other].	self removePrompting: false.	self showChangeSet: nextToView.	self class gatherChangeSets.	parent modelWakeUp.	"(parent other: self) changed: #classList.	(parent other: self) changed: #messageList."! !