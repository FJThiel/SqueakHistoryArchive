'From Squeak2.8alpha of 12 January 2000 [latest update: #1916] on 8 March 2000 at 10:57:16 am'!"Change Set:		ClassComments1Date:			8 March 2000Author:			Dan IngallsA collection (with some minor tweaks) of various class comments that have been submitted recently on the Squeak mail list."!BorderedMorph subclass: #MarqueeMorph	instanceVariableNames: 'colors count '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!ProtoObject commentStamp: 'di 3/8/2000 10:43' prior: 0!ProtoObject establishes minimal behavior required of any object in Squeak, even objects that should balk at normal object behavior. Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message. Current examples are ObjectOut and ImageSegmentRootStub, and one could argue that ObjectTracer should also inherit from this class.ProtoObject has no instance variables, nor should any be added.!!Object commentStamp: 'di 3/8/2000 10:55' prior: 0!Object is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.Class Object provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.Object has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.Class Variables:	DependentsFields		an IdentityDictionary		Provides a virtual 'dependents' field so that any object may have one		or more dependent views, synchronized by the changed:/update: protocol.		Note that class Model has a real slot for its dependents, and overrides		the associated protocol with more efficient implementations.	EventsFields			an IdentityDictionary that maps each object to its dependents.		Registers a message send (consisting of a selector and a receiver object)		which should be performed when anEventSymbol is triggered by the receiver.		Part of a new event notification framework which could eventually replace		the existing changed/update mechanism.  It is intended to be compatible		with Dolphin Smalltalk and VSE as much as possible.Because Object is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.!!ClassBuilder commentStamp: 'di 3/8/2000 10:05' prior: 0!Responsible for creating a new class or changing the format of an existing class (from a class definition in a browser or a fileIn). This includes validating the definition, computing the format of instances, creating or modifying the accompanying Metaclass, setting up the class and metaclass objects themselves, registering the class as a global, recompiling methods, modifying affected subclasses, mutating existing instances to the new format, and more.You typically only need to use or modify this class, or even know how it works, when making fundamental changes to how the Smalltalk system and language works.!!LimitedWriteStream commentStamp: 'di 3/8/2000 10:53' prior: 0!A LimitedWriteStream is a specialized WriteStream that has a maximum size of the collection it streams over. When this limit is reached a special limitBlock is executed. This can for example be used to "bail out" of lengthy streaming operations before they have finished.  For a simple example take a look at the universal Object printString.The message SequenceableCollection class streamContents:limitedTo: creates a LimitedWriteStream. In this case it prevents very large (or possibly recursive) object structures to "overdo" their textual representation. !]style[(323 18 15 54 151)f1,f1LObject printString;,f1,f1LSequenceableCollection class streamContents:limitedTo:;,f1!!MarqueeMorph commentStamp: 'di 3/8/2000 10:10' prior: 0!The MarqueeMorph is a subclass of the BorderedMorph which quickly cycles its border color.The implementation could be simplified and generalized.  The color values and cycle speed are hard-coded for example.!!TimeProfileBrowser commentStamp: 'di 3/8/2000 10:46' prior: 0!A TimeProfileBrowser is a browser visualizing the runtime profile of an executed Smalltalk block.  It is useful for finding performance bottlenecks in code. When optimizing code it canbe hard to know what methods actually constitute the bulk of the execution time. Is it a fewmethods that take very long time to execute or is it perhaps a single method that gets executed a thousand times?The block is first spied on using a MessageTally instance (which has even more funtionality than used by the TimeProfileBrowser) which samples the block during it's execution and collects the amount of time approximately spent in the methods executed. Then the methods are shown in the browser with their relative execution time in percent.Example:TimeProfileBrowser onBlock: [20 timesRepeat:  [Transcript show: 100 factorial printString]]!