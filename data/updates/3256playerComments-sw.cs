'From Squeak2.9alpha of 5 August 2000 [latest update: #3318] on 29 January 2001 at 1:06:05 am'!"Change Set:		playerComments-swDate:			28 January 2001Author:			Scott WallaceProvides comments for the various player accessors, in preparation for forthcoming tools in which these comments play a role in the ui"!!Object methodsFor: 'macpal' stamp: 'sw 12/14/2000 10:46'!beep: soundName	"Make the given sound, unless the making of sound is disabled in Preferences"	Preferences soundsEnabled		ifTrue: [self playSoundNamed: soundName]! !!Player methodsFor: 'costume' stamp: 'sw 11/28/2000 10:58'!wearCostumeOf: anotherPlayer	"Put on a costume similar to the one currently worn by anotherPlayer"	self renderedCostume: anotherPlayer costume renderedMorph asWearableCostume.! !!Player methodsFor: 'name' stamp: 'sw 1/28/2001 20:17'!externalName	"Answer an external name for the receiver.  If it has none, supply a backstop name"	| aCostume |	^ (aCostume _ self costume) ifNotNil: [aCostume externalName] ifNil: ['an orphaned Player']! !!Player methodsFor: 'pen' stamp: 'sw 11/28/2000 07:25'!getPenColor	"Answer the current pen color"	^ self actorState getPenColor! !!Player methodsFor: 'pen' stamp: 'sw 11/28/2000 07:26'!getPenDown	"Answer a boolean indicating whether the receiver's pen is currently down (true) or up (false)"	^ self actorState getPenDown! !!Player methodsFor: 'pen' stamp: 'sw 11/28/2000 07:26'!getPenSize	"Answer a number indicating the current pen size"	^ self actorState getPenSize! !!Player methodsFor: 'pen' stamp: 'sw 11/28/2000 09:03'!setPenColor: aColor	"Set the turtle pen color as indicated"	self actorState setPenColor: aColor! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 12/15/2000 13:31'!getBorderColor	"Answer the border color of my costume"	^ self getValueFromCostume: #borderColor! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 12/15/2000 13:31'!getBorderWidth	"Answer the border width of my costume"	^ self getValueFromCostume: #borderWidth! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:06'!getBottom	"Answer the bottom coordinate, in the cartesian sense (decreases towards bottom of screen)"	^ self costume cartesianBoundsTopLeft y - self costume height! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 12/15/2000 13:31'!getColor	"Answer the color of my costume"	^ self costume renderedMorph color! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 12/15/2000 13:30'!getColorUnder	"Answer the color beneath the center of the costume"	^ self costume colorUnder! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 07:21'!getHeading	"Answer the heading of the object, always given as a whole number"	^ self getHeadingUnrounded rounded! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:08'!getHeight	"Answer the height of the object"	^ self costume height! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 07:24'!getIsUnderMouse	"Answer true or false, depending on whether the object currently is or is not under the mouse"	costume isInWorld ifFalse: [^ false].	^ costume containsPoint: (costume pointFromWorld: costume primaryHand lastEvent cursorPoint)! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:09'!getLeft	"answer the left coordinate"	^ self costume cartesianBoundsTopLeft x! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:09'!getRight	"Answer the coordinate of the right edge of the object"	^ self costume cartesianBoundsTopLeft x + self costume width! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:10'!getScaleFactor	"Answer the scale factor of the object"	| aCostume |	^ (aCostume _ self costume) isFlexMorph		ifTrue: [aCostume scale]		ifFalse: [1.0]! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:10'!getTop	"Answer the coordinate of the topmost point of the object, using cartesian sense"	^ self costume cartesianBoundsTopLeft y! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:10'!getWidth	"Answer the width of the object"	^ self costume width! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 07:22'!getY	"Answer the y coordinate of the object, relative to its container"	^ self costume y! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 12/15/2000 13:30'!setBorderColor: aColor	"Set the border color as requested"	self setCostumeSlot: #borderColor: toValue: aColor! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 12/15/2000 13:30'!setBorderWidth: aWidth	"Set the border width to the given number"	self setCostumeSlot: #borderWidth: toValue: aWidth! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:11'!setBottom: w	"Set the bottom coordinate (cartesian sense) of the object as requested"	| topLeftNow |	topLeftNow _ self costume cartesianBoundsTopLeft.	^ self costume bottom: self costume top + topLeftNow y - w! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 12/15/2000 13:29'!setColor: aColor	"Set the color of the graphic as requested"	self costume renderedMorph color: aColor! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 1/6/2001 06:25'!setHeading: newHeading	"Set the heading as indicated"	| aCostume |	aCostume _ self costume.	(newHeading closeTo: aCostume heading) ifTrue: [^ self].	aCostume heading: newHeading.	aCostume _ self costume. "in case we just got flexed for no apparent reason"	(aCostume isFlexMorph and:[aCostume hasNoScaleOrRotation]) 		ifTrue:	[aCostume removeFlexShell]! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:12'!setHeight: w	"Set the height of the object as indicated"	^ self costume height: w! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:12'!setLeft: w	"Set the object's left coordinate as indicated"	| topLeftNow |	topLeftNow _ self costume cartesianBoundsTopLeft.	^ self costume left: self costume left - topLeftNow x + w! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:08'!setRight: w	"Set the right coordinate to the given value"	| topLeftNow  |	topLeftNow _ self costume cartesianBoundsTopLeft.	^ self costume right: self costume left - topLeftNow x + w! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:07'!setScaleFactor: aNumber	"Set the scale factor to be the given value"	| aCostume |	aCostume _ self costume.	1.0 = aNumber		ifTrue:			[0.0 = self getHeading ifTrue:				[aCostume isFlexMorph ifTrue: [aCostume removeFlexShell].				^ self]]		ifFalse:			[aCostume isFlexMorph ifFalse: [aCostume addFlexShell]].	costume scale: (aNumber asFloat max: 0.125)! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:07'!setTop: w	"Set the top coordinate as indicated, using cartesian sense"	| topLeftNow |	topLeftNow _ self costume cartesianBoundsTopLeft.	^ self costume top: self costume top + topLeftNow y - w! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:06'!setWidth: w	"Set the width to the given value"	^ self costume width: w! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:03'!setX: val	"Set the x coordinate as indicated"	^ self costume x: val! !!Player methodsFor: 'slot getters/setters' stamp: 'sw 11/28/2000 11:03'!setY: val	"Set the y coordinate as indicated"	^ self costume y: val! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 09:01'!bounce: soundName	"If the receiver's current bounds obtrude beyond the bounds of its container, then 'bounce' it back within the container, and make the indicated sound while doing so"	| box bounced aCostume |	(aCostume _ self costume) ifNil: [^ self].	(aCostume owner == nil or: [aCostume owner isHandMorph]) ifTrue: [^ self].	box _ aCostume owner bounds.	bounced _ false.	(aCostume left < box left)			ifTrue: [self headRight. bounced _ true].	(aCostume right > box right)		ifTrue: [self headLeft. bounced _ true].	(aCostume top < box top)			ifTrue: [self headDown. bounced _ true].	(aCostume bottom > box bottom)	ifTrue: [self headUp. bounced _ true].	bounced ifTrue: [^ self makeBounceSound: soundName].! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 10:58'!doMenuItem: menuString	"Do the menu item whose wording is provided"	self costume doMenuItem: menuString! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 10:59'!followPath	"If there is a path defined for this object, follow it now"	self costume followPath! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 07:20'!forward: dist 	"Move forward (viz. in the direction of my heading) by the given amount"	| rho radians delta didStray p aCostume |	(aCostume _ self costume) isInWorld ifFalse: [^ self].	aCostume isWorldOrHandMorph ifTrue: [^ self].	rho _ (aCostume asNumber: dist) asFloat.	radians _ (self getHeadingUnrounded asFloat - 90.0) degreesToRadians.	delta _ (radians cos @ radians sin) * rho.	((aCostume owner isHandMorph not) and:	 [aCostume owner fenceEnabled]) ifTrue:		[(aCostume owner bounds containsRect: aCostume bounds) ifFalse:			["If I stray out of the bounds of my owner, pull me back, but			 without changing my heading as bounce would. Do nothing if			 bounce has already corrected the direction."			didStray _ false.			((aCostume left < aCostume owner left and: [delta x < 0]) or:			 [aCostume right > aCostume owner right and: [delta x > 0]]) ifTrue: [				delta _ delta x negated @ delta y.				didStray _ true].			((aCostume top < aCostume owner top and: [delta y < 0]) or:			 [aCostume bottom > aCostume owner bottom and: [delta y > 0]]) ifTrue: [				delta _ delta x @ delta y negated.				didStray _ true].			didStray ifTrue: [aCostume makeFenceSound]]].	"use and record the fractional position"	p _ aCostume referencePosition + delta.	aCostume referencePosition: p.! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 11:05'!goToRightOf: aPlayer	"Place the object so that it lies directly to the right of the given object"	| hisCostume aCostume |	(aPlayer == nil or: [aPlayer == self]) ifTrue: [^ self].	(hisCostume _ aPlayer costume) isInWorld ifFalse: [^ self].	((aCostume _ self costume) owner == hisCostume owner) ifFalse:		[hisCostume owner addMorphFront: aCostume].	aCostume position:		(hisCostume bounds rightCenter - (0 @ (aCostume height // 2)))! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 10:57'!hide	"Make the object be hidden, as opposed to visible"	self costume hide! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 11:04'!moveToward: aPlayer	"Move a standard amount in the direction of the given player.  If the object has an instance variable named 'speed', the speed of the motion will be governed by that value"	| angle aCostume |	(aPlayer == nil or: [aPlayer == self]) ifTrue: [^ self].	((aCostume _ self costume) bounds intersects: aPlayer costume bounds) ifTrue: [^ self].	angle _ aCostume referencePosition bearingToPoint: aPlayer costume referencePosition.	self setHeading: angle.	self forward: self getSpeed! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 10:57'!pauseScript: scriptName	"Change the status of my script of the given name to be #paused"	self changeScript: scriptName toStatus: #paused! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 09:03'!setPenDown: penDown	"Set the penDown state as indicated, to true or false"	| morph trailMorph tfm |	self actorState setPenDown: penDown.	((morph _ self costume) notNil and: [(trailMorph _ morph trailMorph) notNil])		ifTrue:		[tfm _ morph owner transformFrom: trailMorph.		trailMorph notePenDown: penDown forPlayer: self					at: (tfm localPointToGlobal: morph referencePosition)]! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 09:03'!setPenSize: aSize	"Set the pen size as indicated"	self actorState setPenSize: aSize! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 10:56'!show	"Make the object be visible, as opposed to hidden"	self costume show! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 10:56'!startScript: scriptName	"Change the status of my script of the given name to be #ticking"	self changeScript: scriptName toStatus: #ticking! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 10:56'!stopScript: scriptName	"Change the status of my script of the given name to be #normal"	self changeScript: scriptName toStatus: #normal! !!Player methodsFor: 'scripts-standard' stamp: 'sw 1/6/2001 06:24'!turn: degrees	"Rotate the heading of the object by the given number of degrees"	degrees ifNil: [^ self].	degrees = 0 ifTrue: [^ self].	self setHeading: (self getHeading + degrees asFloat) \\ 360.0! !!Player methodsFor: 'scripts-standard' stamp: 'sw 11/28/2000 11:02'!wrap	"If the object has gone outside the bounds of its container, zap it over to the opposite edge of the container, providing a 'wrapping' impression "	self costume wrap! !!Player methodsFor: 'misc' stamp: 'sw 11/28/2000 07:25'!dummy	"this space for rent"! !