'From Squeak2.9alpha of 12 June 2000 [latest update: #2456] on 16 July 2000 at 6:33:05 pm'!"Change Set:		FasterRamps-arDate:			11 July 2000Author:			Andreas RaabSpeeds up the computation of pixel ramps for gradient fills by open-coding a single critical method."!!GradientFillStyle methodsFor: 'private' stamp: 'ar 7/16/2000 18:32'!computePixelRampOfSize: length	"Compute the pixel ramp in the receiver"	| bits lastColor lastIndex nextIndex nextColor distance theta lastValue ramp lastWord nextWord step |	ramp _ colorRamp asSortedCollection:[:a1 :a2| a1 key < a2 key].	bits _ Bitmap new: length.	lastColor _ ramp first value.	lastWord _ lastColor pixelWordForDepth: 32.	lastIndex _ 0.	ramp do:[:assoc|		nextIndex _ (assoc key * length) rounded.		nextColor _ assoc value.		nextWord _ nextColor pixelWordForDepth: 32.		distance _ (nextIndex - lastIndex).		distance = 0 ifTrue:[distance _ 1].		step _ 1.0 / distance asFloat.		theta _ 0.0.		lastIndex+1 to: nextIndex do:[:i|			theta _ theta + step.			"The following is an open-coded version of:				color _ nextColor alphaMixed: theta with: lastColor.				bits at: i put: (color scaledPixelValue32).			"			bits at: i put: (self scaledAlphaMix: theta of: lastWord with: nextWord).		].		lastIndex _ nextIndex.		lastColor _ nextColor.		lastWord _ nextWord.	].	lastValue _ lastColor scaledPixelValue32.	lastIndex+1 to: length do:[:i| bits at: i put: lastValue].	^bits! !!GradientFillStyle methodsFor: 'private' stamp: 'ar 7/11/2000 16:47'!scaledAlphaMix: theta of: lastWord with: nextWord	"Open-coded version of alpha mixing two 32bit pixel words and returning the scaled pixel value."	| word0 word1 a0 a1 alpha v0 v1 vv value |	word0 _ lastWord.	word1 _ nextWord.	"note: extract alpha first so we'll be in SmallInteger range afterwards"	a0 _ word0 bitShift: -24. a1 _ word1 bitShift: -24.	alpha _ a0 + (a1 - a0 * theta) truncated.	"Now make word0 and word1 SmallIntegers"	word0 _ word0 bitAnd: 16rFFFFFF. word1 _ word1 bitAnd: 16rFFFFFF.	"Compute first component value"	v0 _ (word0 bitAnd: 255). v1 _ (word1 bitAnd: 255).	vv _ (v0 + (v1 - v0 * theta) truncated) * alpha // 255.	value _ vv.	"Compute second component value"	v0 _ ((word0 bitShift: -8) bitAnd: 255). v1 _ ((word1 bitShift: -8) bitAnd: 255).	vv _ (v0 + (v1 - v0 * theta) truncated) * alpha // 255.	value _ value bitOr: (vv bitShift: 8).	"Compute third component value"	v0 _ ((word0 bitShift: -16) bitAnd: 255). v1 _ ((word1 bitShift: -16) bitAnd: 255).	vv _ (v0 + (v1 - v0 * theta) truncated) * alpha // 255.	value _ value bitOr: (vv bitShift: 16).	"Return result"	^value bitOr: (alpha bitShift: 24)! !