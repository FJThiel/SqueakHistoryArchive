'From Squeak2.6 of 11 October 1999 [latest update: #1567] on 23 October 1999 at 11:30:02 pm'!"Change Set:		methodMorph-swDate:			23 October 1999Author:			Scott WallaceProvides a code-holding morph, MethodMorph, that can function on a stand-alone basis; it needs neither a surrounding window nor an accompanying list pane.MethodMorphs are self-updating, so that you can edit the corresponding code anywhere and it will keep itself abreast of the changes.  And of course you can edit the code in the MethodMorph and have its effect felt everywhere else.  (This differs from the other smart-updating mechanisms in that everything else is based on windows and list panes, whereas MethodMorphs live happily outside that regime.)Adds an item to the message-list panes of browsers, etc., allowing you to launch one of these stand-alone MethodMorphs for any method.Also adds an item to the Scriptor menus so that a MethodMorph can be torn off from any Scriptor as well.The menu for a MethodMorph sports an item 'whose script is this', which you can invoke if you have lost track of which object or class the method is associated with."!PluggableTextMorph subclass: #MethodMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!StringHolder subclass: #CodeHolder	instanceVariableNames: 'showDiffs currentCompiledMethod '	classVariableNames: ''	poolDictionaries: ''	category: 'Interface-Support'!CodeHolder subclass: #MethodHolder	instanceVariableNames: 'methodClass methodSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Interface-Support'!!Morph methodsFor: 'accessing' stamp: 'sw 10/23/1999 22:35'!modelOrNil	^ nil! !!MorphicModel methodsFor: 'access' stamp: 'sw 10/23/1999 22:36'!modelOrNil	^ model! !!ComponentLikeModel methodsFor: 'components' stamp: 'sw 10/23/1999 22:35'!justDroppedInto: aMorph event: anEvent	| theModel |	theModel _ aMorph modelOrNil.	((aMorph isKindOf: ComponentLayout) 		and: [theModel isKindOf: Component]) ifFalse:		["Disconnect prior to removal by move"		(theModel isKindOf: Component) ifTrue: [self unwire.  model _ nil].		^ super justDroppedInto: aMorph event: anEvent].	theModel == model ifTrue: [^ self  "Presumably just a move"].	self initComponentIn: aMorph! !!MethodMorph methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 09:41'!step	model updateCodePaneIfNeeded! !!MethodMorph methodsFor: 'as yet unclassified' stamp: 'sw 10/23/1999 23:03'!stepTime	^ 3000! !!Object class methodsFor: 'instance creation' stamp: 'sw 10/23/1999 22:51'!isUniClass	^ false! !!Player class methodsFor: 'housekeeping' stamp: 'sw 10/23/1999 22:50'!isUniClass	"UnscriptedPlayer reimplements to false"	^ true! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'sw 10/21/1999 12:34'!makeIsolatedCodePane	MethodHolder makeIsolatedCodePaneForClass: playerScripted class selector: scriptName! !!ScriptEditorMorph methodsFor: 'other' stamp: 'sw 10/21/1999 13:18'!offerScriptorMenu	| aMenu result  aList lines title |	self isAnonymous		ifTrue:			[^ self inform: 'ancient structure!!please modernize!!']		ifFalse:			[title _ scriptName asString.			self isTextuallyCoded				ifTrue:					[title _ title, ' (textually coded)'.					aList _ #(						('revert to tile version...'		revertScriptVersion)						('modify textual script'			editScriptTextually)						('stand-alone script pane'		makeIsolatedCodePane)						('fires per tick...'				chooseFrequency)				"		('view all scripts'				browseScripts)"						('destroy this script'				destroyScript)						('rename this script'				renameScript)						('explain status alternatives' 	explainStatusAlternatives)						('button to fire this script'		tearOfButtonToFireScript)).					lines _ #(3 4 6)]				ifFalse:					[aList _ #(						('save this version'				saveScriptVersion)						('revert to prior version...'		revertScriptVersion)						('edit this script textually'		editScriptTextually)						('stand-alone script pane'		makeIsolatedCodePane)						('fires per tick...'				chooseFrequency)					"	('view all scripts'				browseScripts)"						('destroy this script'				destroyScript)						('rename this script'				renameScript)						('explain status alternatives' 	explainStatusAlternatives)						('button to fire this script'		tearOfButtonToFireScript)).					lines _ #(4 5 7)]].	aMenu _ SelectionMenu labelList: (aList collect: [:pair | pair first]) lines: lines selections: (aList collect: [:pair | pair second]).	result _ aMenu startUpWithCaption: title.	result ifNotNil: [self perform: result]"		('add parameter to this script'	addParameter)"! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 10/21/1999 13:33'!makeIsolatedCodePane	| msgName |	(msgName _ self selectedMessageName) ifNil: [^ self beep].	MethodHolder makeIsolatedCodePaneForClass: self selectedClassOrMetaClass selector: msgName! !!CodeHolder methodsFor: 'object fileIn' stamp: 'sw 10/21/1999 13:33'!convertdcscm0: varDict dcsc0: smartRefStrm	"'methodChangedElsewhere' goes away but nobody cares"! !!Browser methodsFor: 'message functions' stamp: 'sw 10/21/1999 13:17'!messageListMenu: aMenu shifted: shifted	^ shifted ifFalse: [aMenu labels:'browse full (b)fileOutprintOutsenders of... (n)implementors of... (m)method inheritanceversions (v)inst var refs...inst var defs...class var refs...class variablesclass refs (N)removemore...'	lines: #(3 7 12)	selections:		#(browseMethodFull fileOutMessage printOutMessage		browseSendersOfMessages browseMessages methodHierarchy browseVersions		browseInstVarRefs browseInstVarDefs browseClassVarRefs 			browseClassVariables browseClassRefs		removeMessage shiftedYellowButtonActivity )]	ifTrue: [aMenu labels: 'browse class hierarchybrowse classbrowse method (O)make stand-alone method panetoggle diffingimplementors of sent messageschange sets with this methodinspect instancesinspect subinstancesremove from this browserchange category...revert to previous versionremove from current change setrevert and forgetfetch documentationmore...' 	lines:  #(5 7 9 11 14)	selections: #(classHierarchy browseClass 		openSingleMessageBrowser makeIsolatedCodePane toggleDiffing browseAllMessages findMethodInChangeSets 		inspectInstances inspectSubInstances		removeMessageFromBrowser 		changeCategory		revertToPreviousVersion 		removeFromCurrentChanges revertAndForget 		fetchDocPane		unshiftedYellowButtonActivity)]! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/23/1999 22:48'!addModelMenuItemsTo: aCustomMenu forMorph: aMorph hand: aHandMorph	aCustomMenu addLine.	aCustomMenu add: 'whose script is this?' target: self action: #identifyScript	! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 17:40'!contents	contents _ methodClass sourceCodeAt: methodSelector ifAbsent: [''].	currentCompiledMethod _ methodClass compiledMethodAt: methodSelector ifAbsent: [nil].	self showDiffs ifTrue:		[contents _ self diffFromPriorSourceFor: contents].	contents _ contents asText makeSelectorBoldIn: methodClass.		^ contents! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 13:06'!contents: input notifying: aController 	| selector |	(selector _ Parser new parseSelector: input asText) ifNil:		[self inform: 'Sorry - invalid format for the method name and arguments -- cannot accept.'.		^ false].	selector == methodSelector ifFalse:		[self inform:'You cannot change the name ofthe method here -- it must continueto be ', methodSelector.		^ false].	selector _ methodClass				compile: input asText				classified: self selectedMessageCategoryName				notifying: aController.	selector == nil ifTrue: [^ false].	contents _ input asString copy.	currentCompiledMethod _ methodClass compiledMethodAt: methodSelector.	^ true! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/23/1999 23:01'!identifyScript	| msg aPlayer |	msg _ methodClass isUniClass		ifTrue:			[aPlayer _ methodClass someInstance.			aPlayer costume				ifNotNil:					['This holds code for a scriptnamed ', methodSelector, ' belongingto an object named ', aPlayer externalName]				ifNil:					['This formerly held code for a scriptnamed ', methodSelector, ' for a Playerwho once existed but now is moribund.']]		ifFalse:			['This holds code for the methodnamed ', methodSelector, 'for class ', methodClass name].	self inform: msg! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 13:05'!methodClass: aClass methodSelector: aSelector	methodClass _ aClass.	methodSelector _ aSelector.	currentCompiledMethod _ aClass compiledMethodAt: aSelector ifAbsent: [nil]! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 09:40'!selectedClass	^ methodClass theNonMetaClass! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 09:40'!selectedClassOrMetaclass	^ methodClass! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 10:16'!selectedMessageCategoryName	^ methodClass organization categoryOfElement: methodSelector! !!MethodHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 09:39'!selectedMessageName	^ methodSelector! !!MethodHolder class methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 17:08'!makeIsolatedCodePaneForClass: aClass selector: aSelector	| aCodePane aMethodHolder |	"Create and schedule a message list browser populated only by the currently selected message"	Smalltalk isMorphic ifFalse:		[^ self inform: 'sorry, this feature is currentlyonly available in morphic projects.'].	aMethodHolder _ self new.	aMethodHolder methodClass: aClass methodSelector: aSelector.	aCodePane _ MethodMorph on: aMethodHolder text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	aMethodHolder addDependent: aCodePane.	aCodePane borderWidth: 2; color: Color white.	aCodePane scrollBarOnLeft: false.	aCodePane width: 300.	"aCodePane changeStyleTo: 'ComicBold'.	aCodePane changeFontForAllTo: 'ComicBold16'."	self currentHand attachMorph: aCodePane! !!UnscriptedPlayer class methodsFor: 'as yet unclassified' stamp: 'sw 10/23/1999 22:51'!isUniClass	^ false! !CodeHolder removeSelector: #currentCompiledMethod:!