'From Squeak 2.3 beta of Nov 25, 1998 on 16 December 1998 at 7:51:50 am'!"Change Set:		LongFilesAndStringsDate:			15 December 1998Author:			Dan IngallsThis changeSet allows file size and positioning to tolerate offsets up to 32-bit positive integers.It also documents the fact that String sizes and indices are still limited to 31-bit integers, which is to say 30-bit positive integers."!!Interpreter commentStamp: 'di 12/16/1998 07:51' prior: 0!This class is a complete implementation of the Smalltalk-80 virtual machine, derived originally from the Blue Book specification.It has been modernized with 32-bit pointers, better management of Contexts, and attention to variable use that allows the CCodeGenerator (qv) to keep, eg, the instruction pointer and stack pointer in registers.In addition to SmallInteger arithmetic and Floats, it supports logic on 32-bit PositiveLargeIntegers, thus allowing it to simulate itself much more effectively than would otherwise be the case.NOTE:  Here follows a list of things to be borne in mind when working on this code, or when making changes for the future.1.  There are a number of things that should be done the next time we plan to release a copletely incompatible image format.  These include unifying the instanceSize field of the class format word -- see instantiateClass:indexableSize:, and unifying the bits of the method primitive index (if we decide we need more than 512, after all) -- see primitiveIndexOf:.2.  There are several fast checks for contexts (see isMethodContext:header: and isContextHeader:) which will fail if the oops or compact class indices of BlockContext or MethodContext change.  It's not clear how to allow this dynamically, but it's important to be aware of it statically when writing a new image using the systemTracer.3.  We have made normal files tolerant to size and positions up to 32 bits.  This has not been done for string sizes and indices, nor for async files, since they are still experimental.4.  Right now, Float and String should be made compact, and Color probably should be too.5.  Note that 0 is used in a couple of places as an impossible oop.  This should be changed to a constant that really is impossible (or perhaps there is code somewhere that guarantees it --if so it should be put in this comment).  The places include the method cache and the at cache. !!Interpreter methodsFor: 'file primitives' stamp: 'di 12/15/1998 21:55'!primitiveFileGetPosition	| file position |	self var: 'file' declareC: 'SQFile *file'.	file _ self fileValueOf: (self stackTop).	successFlag ifTrue: [position _ self sqFileGetPosition: file].	successFlag ifTrue: [self pop: 2 thenPush: (self positive32BitIntegerFor: position)].! !!Interpreter methodsFor: 'file primitives' stamp: 'di 12/15/1998 21:58'!primitiveFileSetPosition	| newPosition file |	self var: 'file' declareC: 'SQFile *file'.	newPosition _ self positive32BitValueOf: (self stackValue: 0).	file _ self fileValueOf: (self stackValue: 1).	successFlag ifTrue: [ self sqFile: file SetPosition: newPosition ].	successFlag ifTrue: [ self pop: 2 "pop position, file; leave rcvr on stack" ].! !!Interpreter methodsFor: 'file primitives' stamp: 'di 12/15/1998 21:56'!primitiveFileSize	| file size |	self var: 'file' declareC: 'SQFile *file'.	file _ self fileValueOf: (self stackTop).	successFlag ifTrue: [size _ self sqFileSize: file].	successFlag ifTrue: [self pop: 2 thenPush: (self positive32BitIntegerFor: size)].! !