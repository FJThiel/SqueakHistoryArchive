'From Squeak2.9alpha of 12 June 2000 [latest update: #2940] on 4 November 2000 at 10:12:24 am'!"Change Set:		InsetPointsDate:			4 November 2000Author:			Dan IngallsQuick and dirty support for AlignmentMorph inset being a point as well as a scalar."!!AlignmentMorph methodsFor: 'layout' stamp: 'di 11/4/2000 10:11'!maxWidth	"Return the minimum width for this morph."	| spaceNeeded minW |	hResizing = #rigid ifTrue: [^ self fullBounds width].	submorphs isEmpty ifTrue: [^ self minWidthWhenEmpty].	orientation == #horizontal ifTrue:		[spaceNeeded _ 2 * (inset asPoint x + borderWidth).		submorphs do: [:m | spaceNeeded _ spaceNeeded + (m minWidth max: minCellSize)]].	orientation == #vertical ifTrue:		[minW _ 0.		submorphs do: [:m | minW _ minW max: m minWidth].		spaceNeeded _ minW + (2 * (inset asPoint x + borderWidth))].	^ spaceNeeded! !!AlignmentMorph methodsFor: 'layout' stamp: 'di 11/2/2000 15:19'!minHeight	"Return the minimum height for this morph."	| minH spaceNeeded |	vResizing = #rigid ifTrue: [^ self fullBounds height].	submorphs isEmpty ifTrue: [^ self minHeightWhenEmpty].	orientation == #horizontal ifTrue:		[minH _ 0.		submorphs do: [:m | minH _ minH max: m minHeight].		spaceNeeded _ minH + (2 * (inset asPoint y + borderWidth))].	orientation == #vertical ifTrue:		[spaceNeeded _ 2 * (inset asPoint y + borderWidth).		submorphs do: [:m | spaceNeeded _ spaceNeeded + (m minHeight max: minCellSize)]].	^ spaceNeeded! !!AlignmentMorph methodsFor: 'layout' stamp: 'di 11/2/2000 15:18'!minWidth	"Return the minimum width for this morph."	| spaceNeeded minW |	hResizing = #rigid ifTrue: [^ self fullBounds width].	submorphs isEmpty ifTrue: [^ self minWidthWhenEmpty].	orientation == #horizontal ifTrue:		[spaceNeeded _ 2 * (inset asPoint x + borderWidth).		submorphs do: [:m | spaceNeeded _ spaceNeeded + (m minWidth max: minCellSize)]].	orientation == #vertical ifTrue:		[minW _ 0.		submorphs do: [:m | minW _ minW max: m minWidth].		spaceNeeded _ minW + (2 * (inset asPoint x + borderWidth))].	^ spaceNeeded! !!AlignmentMorph methodsFor: 'private' stamp: 'di 11/2/2000 15:20'!extraSpacePerMorph	| spaceFillingMorphs spaceNeeded extra |	spaceFillingMorphs _ 0.	spaceNeeded _ 2 * (inset + borderWidth).	orientation = #horizontal ifTrue: [		spaceNeeded _ spaceNeeded asPoint x.		submorphs do: [:m |			spaceNeeded _ spaceNeeded + (m minWidth max: minCellSize).			(m isAlignmentMorph and: [m hResizing = #spaceFill])				ifTrue: [spaceFillingMorphs _ spaceFillingMorphs + 1]].		extra _ (bounds width - spaceNeeded) max: 0.	] ifFalse: [		spaceNeeded _ spaceNeeded asPoint y.		submorphs do: [:m |			spaceNeeded _ spaceNeeded + (m minHeight max: minCellSize).			(m isAlignmentMorph and: [m vResizing = #spaceFill])				ifTrue: [spaceFillingMorphs _ spaceFillingMorphs + 1]].		extra _ (bounds height - spaceNeeded) max: 0].	(submorphs size <= 1 or: [spaceFillingMorphs <= 1]) ifTrue: [^ extra].	^ extra asFloat / spaceFillingMorphs! !!AlignmentMorph methodsFor: 'private' stamp: 'di 11/2/2000 15:39'!fixLayout	| extraPerMorph fractionalExtra fractionAccumulator nextPlace extra space |	extraPerMorph _ self extraSpacePerMorph asFloat.	fractionalExtra _ extraPerMorph fractionPart.	extraPerMorph _ extraPerMorph truncated.	orientation = #horizontal		ifTrue: [nextPlace _ bounds left + inset asPoint x + borderWidth]		ifFalse: [nextPlace _ bounds top + inset asPoint y + borderWidth].	fractionAccumulator _ 0.0.	submorphs do: [:m |		fractionAccumulator _ fractionAccumulator + fractionalExtra.		fractionAccumulator > 0.5			ifTrue: [				extra _ extraPerMorph + 1.				fractionAccumulator _ fractionAccumulator - 1.0]			ifFalse: [extra _ extraPerMorph].		space _ self placeAndSize: m at: nextPlace padding: extra.		nextPlace _ nextPlace + space].! !!AlignmentMorph methodsFor: 'private' stamp: 'di 11/2/2000 15:35'!placeAndSize: m at: nextPlace padding: padding	| space fullBnds left top insetX insetY |	inset isPoint		ifTrue: [insetX _ inset x + borderWidth.  insetY _ inset y + borderWidth]		ifFalse: [insetX _ insetY _ inset + borderWidth].	orientation = #horizontal ifTrue: [		space _ m minWidth max: minCellSize.		m isAlignmentMorph ifTrue: [			(m hResizing = #spaceFill) ifTrue: [space _ space + padding].			m layoutInWidth: space height: (bounds height - (2 * insetY))].	] ifFalse: [		space _ m minHeight max: minCellSize.		m isAlignmentMorph ifTrue: [			(m vResizing = #spaceFill) ifTrue: [space _ space + padding].			m layoutInWidth: (bounds width - (2 * insetX)) height: space]].	fullBnds _ m fullBounds.	orientation = #horizontal ifTrue: [		left _ nextPlace.		centering = #topLeft			ifTrue: [top _ bounds top + insetY].		centering = #bottomRight			ifTrue: [top _ bounds bottom - insetY - fullBnds height].		centering = #center			ifTrue: [top _ bounds top + ((bounds height - fullBnds height) // 2)].	] ifFalse: [		top _ nextPlace.		centering = #topLeft			ifTrue: [left _ bounds left + insetX].		centering = #bottomRight			ifTrue: [left _ bounds right - insetX - fullBnds width].		centering = #center			ifTrue: [left _ bounds left + ((bounds width - fullBnds width) // 2)]].	m position: (left + (m bounds left - fullBnds left)) @ (top + (m bounds top - fullBnds top)).	^ space! !