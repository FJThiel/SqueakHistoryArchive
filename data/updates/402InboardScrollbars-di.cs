'From Squeak 2.2 of Sept 23, 1998 on 11 November 1998 at 9:58:14 am'!"Change Set:		InboardScrollbarPrefDate:			11 November 1998Author:			Dan IngallsThis changeSet installs a preference for using inboard scrollbars in Morphic.  It is initialized to false.  The same preference controls the side on which scrollbars appear.  Inboard scrollbars appear on the right; retractable scrollbars appear on the left."!!Preferences class methodsFor: 'initialization' stamp: 'di 11/11/1998 08:16'!chooseInitialSettings	"Restore the default choices for Preferences."	"Preferences chooseInitialSettings"	#(	(allowSysWindowEmbedding			false)		(browseWithPrettyPrint				false)		(cmdDotEnabled						true)		(confirmFirstUseOfStyle				true)		(disableSounds						false)		(fastDragWindowForMorphic			false)		(ignoreStyleIfOnlyBold				true)		(inboardScrollbars					false)		(logDebuggerStackToFile				true)		(noviceMode							false)		(printAlternateSyntax				false)		(reverseWindowStagger				true)		(showDebugHaloHandle				true)		(showScriptSource					false)		(showTimeStampsInMenuTitles		false)		(suppressCheckForSlips				false)		(suppressUpdateServerPrompt		false)		(thoroughSenders					true)		(unlimitedPaintArea					false)		(updateSavesFile						false)		(warnIfNoChangesFile				true)		(warnIfNoSourcesFile				true))	do:		[:aPair |			aPair last == #true				ifTrue:					[self enable: aPair first]				ifFalse:					[self disable: aPair first]]! !!Preferences class methodsFor: 'initialization' stamp: 'di 11/11/1998 08:21'!initializeHelpMessages	"Preferences initializeHelpMessages"  	HelpDictionary _ Dictionary new.	#((allowSysWindowEmbedding'Determines whether, in Morphic, SystemWindows should automatically be droppable into willing receptors')(browseWithPrettyPrint'If true, browsers will automatically format their contents')(cautionBeforeClosing 'If true, Morphic windows seen in an mvc project will put up a warning before allowing themselves to be dismissed')(cmdDotEnabled'If true, cmd-dot brings up a debugger;if false, the cmd-dot interrupt is disabled')(confirmFirstUseOfStyle'If true, the first attempt to submit a method with non-standard style will bring up a confirmation dialog')(disableSounds'If true, all sound playing is disabled')	(editPlayerScriptsInPlace 'If true, textual player scripts are edited in place in Scriptors (still imperfectly implemented)')(eToyScheme'If true, new scripting spaces place the Playfield to the left and the the palette to the right of the window; if false, the opposite is true.')(fastDragWindowForMorphic'If true, morphic window drag will be done by dragging an outline of the window.')(ignoreStyleIfOnlyBold'If true, then any method submission in which the only style change is for bolding will be treated as a method with no style specifications')(inboardScrollbars'If true, then ScrollPane will place scrollbars inside on the right and will not hide them on exit')(logDebuggerStackToFile'If true, whenever you fall into a debugger a summary of its stack will be written to a file named''SqueakDebug.log''')(noviceMode 'If true, certain novice-mode accommodations are made.')(printAlternateSyntax'If true, thenprettyPrint using experimental syntax.Otherwise use normal ST-80 syntax.')(reverseWindowStagger'If true, a reverse-stagger strategy  is used for determining where newly launched windows will be placed; if false, a direct- stagger strategy is used.')(showDebugHaloHandle 'If true, a special debugging halo handle is displayed at the right of the halo; if false, no such handle is shown.')(showPlayerSource'If true, then all Player methods with fewer than 2 arguments are included in Viewers, whether or not they are intended for end-user use.  This can be dangerous')(showScriptSource'If true, then the actual Smalltalk source code for methods is shown in the detail panes for scripts in a viewer; if false, then a help message for scripts is shown instead.')(showTimeStampsInMenuTitles'If true, then the author''s timestamp is displayed as the menu title of any message list; if false, no author''s timestamps are shown')(suppressCheckForSlips 'If false, then whenever you file out a change set, it is checked for ''slips'' and if any are found, you are so informed and given a chance to open a browser on them')(suppressUpdateServerPrompt'If true, the prompt for server choice when updating code from the server is suppressed.  Set this to true to leave the server choice unchanged from update to update.')(thoroughSenders'If true, then ''senders'' browsers will dive inside structured literals in their search')(uniformWindowColors'If true, then all standard windows are given the same color rather than their customized window-type-specific colors')(unlimitedPaintArea'If true, the painting area for a new drawing will not be limited in size; if false, a reasonablelimit will be applied, in an attempt to hold down memory and time price.')(updateRemoveSequenceNum'If true, then remove the leading sequence number from the filename before automatically saving a local copy of any update loaded.')(updateSavesFile'If true, then when an update is loaded from the server, a copy of it will automatically be saved on a local file as well.')(useNewViewers'If true, then the new kinds of viewers introduced in Squeak 2.3 are used; if false, then the old style, from earlier releases, are still used.  Old viewers will hopefully soon be removed from the system.')(warnIfNoChangesFile'If true, then you will be warned, whenever you start up, if no changes filecan be found')(warnIfNoSourcesFile 'If true, then you will be warned, whenever you start up, if no sources file can be found')) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!ScrollBar methodsFor: 'geometry' stamp: 'di 11/11/1998 09:27'!extent: p	p x > p y		ifTrue: [super extent: (p max: 36@8)]		ifFalse: [super extent: (p max: 8@36)]! !!ScrollPane methodsFor: 'initialization' stamp: 'di 11/11/1998 09:53'!initialize	super initialize.	borderWidth _ 2.  borderColor _ #inset.	retractableScrollBar _ scrollBarOnLeft _		(Preferences valueOfFlag: #inboardScrollbars) not.	scrollBar := ScrollBar new model: self slotName: 'scrollBar'.	scrollBar borderWidth: 2; borderColor: #inset.	retractableScrollBar ifFalse: [self addMorph: scrollBar].	scroller := TransformMorph new color: Color transparent.	scroller offset: -3@0.	self addMorph: scroller.	self on: #mouseEnter send: #mouseEnter: to: self.	self on: #mouseLeave send: #mouseLeave: to: self.	self extent: 150@120! !!ScrollPane methodsFor: 'geometry' stamp: 'di 11/11/1998 08:59'!extent: newExtent	super extent: (newExtent max: (self scrollbarWidth + 20)@16).	self resizeScrollBar; resizeScroller! !!ScrollPane methodsFor: 'geometry' stamp: 'di 11/11/1998 09:52'!innerBounds	| inner w |	inner _ super innerBounds.	w _ self scrollbarWidth.	retractableScrollBar		ifTrue: [^ inner]		ifFalse: [^ (scrollBarOnLeft					ifTrue: [inner topLeft + ((w-1)@0) corner: inner bottomRight]					ifFalse: [inner topLeft corner: inner bottomRight - ((w-2)@0)])]! !!ScrollPane methodsFor: 'geometry' stamp: 'di 11/11/1998 09:11'!resizeScrollBar	| w topLeft |	w _ self scrollbarWidth.	topLeft _ scrollBarOnLeft		ifTrue: [retractableScrollBar ifTrue: [bounds topLeft - ((w-1)@0)]									ifFalse: [bounds topLeft]]		ifFalse: [retractableScrollBar ifTrue: [bounds topRight]									ifFalse: [bounds topRight - ((w-1)@0)]].	scrollBar bounds: (topLeft extent: w @ bounds height)! !!ScrollPane methodsFor: 'geometry' stamp: 'di 11/11/1998 09:48'!resizeScroller	scroller bounds: self innerBounds! !!ScrollPane methodsFor: 'geometry' stamp: 'di 11/11/1998 09:54'!scrollbarWidth  "Includes border"	^ 16! !"Postscript:Install a preference for inboard scrollbars, and set it to false."Preferences setPreference: #inboardScrollbars toValue: false.Preferences setHelpFor: #inboardScrollbars toString: 'If true, then ScrollPane will place scrollbars inside on the right and will not hide them on exit'.!