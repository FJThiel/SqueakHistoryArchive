'From Squeak 2.3 of January 14, 1999 on 13 February 1999 at 9:22:00 pm'!"Change Set:		ClassTweaksDate:			13 February 1999Author:			Andreas RaabThree basic changes:#1 - Allow removal of class variables that are still in use after asking the user if it's okay to move them to Undeclared.#2 - Allow creation of non-existing pool dictionaries after asking the user if it's okay to do so.#3 - Introduces Dictionary>>keyAtIdentityValue: to	a) fix buggy reports of pool dictionaries (Note that two pool dictionaries may be equal but not identical)	b) speed up access to keys of global objects (e.g., from Smalltalk) by using #== instead of #="!!Behavior methodsFor: 'accessing method dictionary' stamp: 'ar 2/13/1999 21:18'!selectorAtMethod: method setClass: classResultBlock 	"Answer both the message selector associated with the compiled method 	and the class in which that selector is defined."	| sel |	sel _ methodDict keyAtIdentityValue: method				ifAbsent: 					[superclass == nil						ifTrue: 							[classResultBlock value: self.							^self defaultSelectorForMethod: method].					sel _ superclass selectorAtMethod: method setClass: classResultBlock.					"Set class to be self, rather than that returned from 					superclass. "					sel == (self defaultSelectorForMethod: method) ifTrue: [classResultBlock value: self].					^sel].	classResultBlock value: self.	^sel! !!ClassDescription methodsFor: 'printing' stamp: 'ar 2/13/1999 21:18'!sharedPoolsString	"Answer a string of my shared pool names separated by spaces."	| aStream |	aStream _ WriteStream on: (String new: 100).	self sharedPools do: [:x | aStream nextPutAll: (Smalltalk keyAtIdentityValue: x ifAbsent: ['private']); space].	^ aStream contents! !!Class methodsFor: 'initialize-release' stamp: 'ar 2/13/1999 21:04'!sharing: poolString 	"Set up sharedPools. Answer whether recompilation is advisable."	| oldPools found |	oldPools _ self sharedPools.	sharedPools _ OrderedCollection new.	(Scanner new scanFieldNames: poolString) do: 		[:poolName | 		sharedPools add: (Smalltalk at: poolName asSymbol ifAbsent:[			(self confirm: 'The pool dictionary ', poolName,' does not exist.',						'\Do you want it automatically created?' withCRs)				ifTrue:[Smalltalk at: poolName asSymbol put: Dictionary new]				ifFalse:[^self error: poolName,' does not exist']])].	sharedPools isEmpty ifTrue: [sharedPools _ nil].	oldPools do: [:pool | found _ false.				self sharedPools do: [:p | p == pool ifTrue: [found _ true]].				found ifFalse: [^ true "A pool got deleted"]].	^ false! !!Class methodsFor: 'class variables' stamp: 'ar 2/13/1999 20:47'!removeClassVarName: aString 	"Remove the class variable whose name is the argument, aString, from 	the names defined in the receiver, a class. Create an error notification if 	aString is not a class variable or if it is still being used in the code of 	the class."	| aSymbol |	aSymbol _ aString asSymbol.	(classPool includesKey: aSymbol)		ifFalse: [^self error: aString, ' is not a class variable'].	self withAllSubclasses do:[:subclass |		(Array with: subclass with: subclass class) do:[:classOrMeta |			(classOrMeta whichSelectorsReferTo: (classPool associationAt: aSymbol))				isEmpty ifFalse: [					(self confirm: (aString,' is still used in code of class ', classOrMeta name,						'.\Is it okay to move it to Undeclared?') withCRs)						ifTrue:[^Undeclared declare: aSymbol from: classPool]						ifFalse:[^self]]]].	classPool removeKey: aSymbol! !!Class methodsFor: 'fileIn/Out' stamp: 'ar 2/13/1999 21:17'!fileOutPool: aPool onFileStream: aFileStream 	| aPoolName aValue |	aPoolName _ Smalltalk keyAtIdentityValue: aPool.	Transcript cr; show: aPoolName.	aFileStream nextPutAll: 'Transcript show: ''' , aPoolName , '''; cr!!'; cr.	aFileStream nextPutAll: 'Smalltalk at: #' , aPoolName , ' put: Dictionary new!!'; cr.	aPool keys asSortedCollection do: [ :aKey |		aValue _ aPool at: aKey.		aFileStream nextPutAll: aPoolName , ' at: #' , aKey asString , ' put:  '.		(aValue isKindOf: Number)			ifTrue: [aValue printOn: aFileStream]			ifFalse: [aFileStream nextPutAll: '('.					aValue printOn: aFileStream.					aFileStream nextPutAll: ')'].		aFileStream nextPutAll: '!!'; cr].	aFileStream cr! !!Class methodsFor: 'fileIn/Out' stamp: 'ar 2/13/1999 21:17'!fileOutSharedPoolsOn: aFileStream	"file out the shared pools of this class after prompting the user about each pool"	| poolsToFileOut |	poolsToFileOut _ self sharedPools select: 		[:aPool | (self shouldFileOutPool: (Smalltalk keyAtIdentityValue: aPool))].	poolsToFileOut do: [:aPool | self fileOutPool: aPool onFileStream: aFileStream].	! !!Dictionary methodsFor: 'accessing' stamp: 'ar 2/13/1999 21:16'!keyAtIdentityValue: value 	"Answer the key that is the external name for the argument, value. If 	there is none, answer nil.	Note: There can be multiple keys with the same value. Only one is returned."	^self keyAtIdentityValue: value ifAbsent: [self errorValueNotFound]! !!Dictionary methodsFor: 'accessing' stamp: 'ar 2/13/1999 21:16'!keyAtIdentityValue: value ifAbsent: exceptionBlock	"Answer the key that is the external name for the argument, value. If 	there is none, answer the result of evaluating exceptionBlock.	Note: There can be multiple keys with the same value. Only one is returned." 	self associationsDo: 		[:association | value == association value ifTrue: [^association key]].	^exceptionBlock value! !!Encoder methodsFor: 'results' stamp: 'ar 2/13/1999 21:18'!associationFor: aClass	| name |	name _ Smalltalk keyAtIdentityValue: aClass ifAbsent: [^Association new value: aClass].	^Smalltalk associationAt: name! !!MethodDictionary methodsFor: 'accessing' stamp: 'ar 2/13/1999 21:17'!keyAtIdentityValue: value ifAbsent: exceptionBlock	"Answer the key whose value equals the argument, value. If there is	none, answer the result of evaluating exceptionBlock."	| theKey |	1 to: self basicSize do:		[:index |		value == (array at: index)			ifTrue:				[(theKey _ self basicAt: index) == nil					ifFalse: [^ theKey]]].	^ exceptionBlock value! !!MethodDictionary methodsFor: 'accessing' stamp: 'ar 2/13/1999 21:00'!keyAtValue: value ifAbsent: exceptionBlock	"Answer the key whose value equals the argument, value. If there is	none, answer the result of evaluating exceptionBlock."	| theKey |	1 to: self basicSize do:		[:index |		value = (array at: index)			ifTrue:				[(theKey _ self basicAt: index) == nil					ifFalse: [^ theKey]]].	^ exceptionBlock value! !!ParagraphEditor methodsFor: 'explain' stamp: 'ar 2/13/1999 21:17'!explainClass: symbol 	"Is symbol a class variable or a pool variable?"	| class reply classes |	(model respondsTo: #selectedClassOrMetaClass) ifFalse: [^ nil].	(class _ model selectedClassOrMetaClass) ifNil: [^nil].	  "no class is selected"	(class isKindOf: Metaclass) ifTrue: [class _ class soleInstance].	classes _ (Array with: class) , class allSuperclasses.	"class variables"	reply _ classes detect: [:each | (each classVarNames			detect: [:name | symbol = name] ifNone: [])			~~ nil] ifNone: [].	reply == nil ifFalse: [^'"is a class variable; defined in class ' , reply printString, '"\' withCRs,		'Smalltalk browseAllCallsOn: (', reply printString, ' classPool associationAt: #', symbol, ').'].	"pool variables"	classes do: [:each | (each sharedPools			detect: [:pool | (pool includesKey: symbol) and: [reply _ pool. true]]			ifNone: []) ~~ nil].	reply == nil ifTrue: [(Undeclared includesKey: symbol) ifTrue: [reply _ Undeclared]].	reply == nil		ifFalse: 			[classes _ WriteStream on: Array new.			Smalltalk allBehaviorsDo: [:each |					(each sharedPools detect: [:pool | pool == reply] ifNone: [])					~~ nil ifTrue: [classes nextPut: each]].			"Perhaps not print whole list of classes if too long. (unlikely)"			^'"is a pool variable from the pool ' , (Smalltalk keyAtIdentityValue: reply),			', which is used by the following classes ' , classes contents printString , '"\' withCRs,			'Smalltalk browseAllCallsOn: (', (Smalltalk keyAtIdentityValue: reply) printString,			' associationAt: #', symbol, ').'].	^nil! !!SystemOrganizer methodsFor: 'fileIn/Out' stamp: 'ar 2/13/1999 21:17'!fileOutCategory: category on: aFileStream 	"Store on the file associated with aFileStream, all the classes associated 	with the category and any requested shared pools."	| first poolSet tempClass classes |	classes _ (self superclassOrder: category).	poolSet _ Set new.	classes do: 		[:class | class sharedPools do: [:eachPool | poolSet add: eachPool]].	poolSet size > 0 ifTrue:		[tempClass _ Class new.		tempClass shouldFileOutPools ifTrue:			[poolSet _ poolSet select: [:aPool | tempClass shouldFileOutPool: (Smalltalk keyAtIdentityValue: aPool)].			poolSet do: [:aPool | tempClass fileOutPool: aPool onFileStream: aFileStream]]].	first _ true.	classes do: 		[:class | 		first			ifTrue: [first _ false]			ifFalse: [aFileStream cr; nextPut: Character newPage; cr].		class			fileOutOn: aFileStream			moveSource: false			toFile: 0]! !