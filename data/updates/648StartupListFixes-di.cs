'From Squeak 2.3 of January 14, 1999 on 4 February 1999 at 4:22:12 pm'!"Change Set:		StartupListFixesDate:			4 February 1999Author:			Dan IngallsIntroduces StartUpList and ShutDownList as class variables of SystemDictionary.  Completely replaces the old implementation of processStartUpList and processShutDownList.The new lists store only the names of clases.  If, during startUp or shutDown, a symbol lookup fails, then that entry is removed immediately following processing of the list.removeClassFromSystemUnlogged: and renameClass:as: now update StartUpList and ShutDownList appropriately if the class was named in either list.The globals SystemStartupList and SystemShutdownList are removed from the system."!Dictionary subclass: #SystemDictionary	instanceVariableNames: ''	classVariableNames: 'CachedClassNames LastImageName LastQuitLogPosition LowSpaceProcess LowSpaceSemaphore ShutDownList SpecialSelectors StartUpList SystemChanges '	poolDictionaries: ''	category: 'System-Support'!!ControlManager class methodsFor: 'snapshots' stamp: 'di 2/4/1999 15:16'!shutDown  "Saves space in snapshots"	Smalltalk isMorphic ifFalse: [ScheduledControllers unCacheWindows]! !!ControlManager class methodsFor: 'snapshots' stamp: 'di 2/4/1999 09:00'!startUp	Smalltalk isMorphic ifFalse: [ScheduledControllers restore]! !!CrLfFileStream class methodsFor: 'class initialization' stamp: 'di 2/4/1999 09:16'!initialize	"CrLfFileStream initialize"	Cr := Character cr.	Lf := Character lf.	CrLf := String with: Cr with: Lf.	LineEndStrings := Dictionary new.	LineEndStrings at: #cr put: (String with: Character cr).	LineEndStrings at: #lf put: (String with: Character lf).	LineEndStrings at: #crlf put: (String with: Character cr with: Character lf).	LookAheadCount := 2048.	Smalltalk addToStartUpList: self.	self startUp.! !!FileDirectory class methodsFor: 'system start up' stamp: 'di 2/4/1999 15:27'!shutDown	Smalltalk closeSourceFiles.! !!FileDirectory class methodsFor: 'system start up' stamp: 'di 2/4/1999 08:50'!startUp	"Establish the platform-specific FileDirectory subclass. Do any platform-specific startup."	self setDefaultDirectoryFrom: Smalltalk imageName.	Smalltalk openSourceFiles.! !!InputSensor methodsFor: 'user interrupts' stamp: 'di 2/4/1999 15:24'!userInterruptWatcher	"Wait for user interrupts and open a notifier on the active process when one occurs."	[true] whileTrue: [		InterruptSemaphore wait.		Display deferUpdates: false.		Smalltalk at: #SoundPlayer ifPresent: [:theClass | theClass shutDown].		Smalltalk handleUserInterrupt]! !!MailDB class methodsFor: 'shut down' stamp: 'di 2/4/1999 15:13'!shutDown	"snapshot all mail databases to disk"	self allInstancesDo: [:db | db saveDB]! !!PWS class methodsFor: 'Serving' stamp: 'di 2/4/1999 15:15'!shutDown	self stopServer! !!ProcessorScheduler class methodsFor: 'background process' stamp: 'di 2/4/1999 08:45'!startUp	"Install a background process of the lowest possible priority that is always runnable."	"Details: The virtual machine requires that there is aways some runnable process that can be scheduled; this background process ensures that this is the case."	Smalltalk installLowSpaceWatcher.	BackgroundProcess == nil ifFalse: [BackgroundProcess terminate].	BackgroundProcess _ [self idleProcess] newProcess.	BackgroundProcess priority: SystemRockBottomPriority.	BackgroundProcess resume.! !!ShortIntegerArray class methodsFor: 'class initialization' stamp: 'di 2/4/1999 09:16'!initialize	"ShortIntegerArray initialize"	Smalltalk addToStartUpList: self.	LastSaveOrder _ self new: 2.	LastSaveOrder at: 1 put: 42.	LastSaveOrder at: 2 put: 13.! !!ShortRunArray class methodsFor: 'class initialization' stamp: 'di 2/4/1999 09:17'!initialize	"ShortRunArray initialize"	Smalltalk addToStartUpList: self.	LastSaveOrder _ #(42 42 42) as: self.! !!SystemDictionary methodsFor: 'class names' stamp: 'di 2/3/1999 22:21'!removeClassFromSystem: aClass	"Delete the class, aClass, from the system."	aClass wantsChangeSetLogging ifTrue:		[SystemChanges noteRemovalOf: aClass].	aClass acceptsLoggingOfCompilation ifTrue:		[Smalltalk logChange:  'Smalltalk removeClassNamed: #', aClass name].	self removeClassFromSystemUnlogged: aClass! !!SystemDictionary methodsFor: 'class names' stamp: 'di 2/3/1999 22:23'!removeClassFromSystemUnlogged: aClass	"Delete the class, aClass, from the system, but log the removal neither to the current change set nor to the changes log"	SystemOrganization removeElement: aClass name.	self removeFromStartUpList: aClass.	self removeFromShutDownList: aClass.	self removeKey: aClass name.	self flushClassNameCache! !!SystemDictionary methodsFor: 'class names' stamp: 'di 2/3/1999 22:33'!renameClass: aClass as: newName 	"Rename the class, aClass, to have the title newName."	| oldref i |	SystemOrganization classify: newName under: aClass category.	SystemOrganization removeElement: aClass name.	SystemChanges renameClass: aClass as: newName.	oldref _ self associationAt: aClass name.	self removeKey: aClass name.	oldref key: newName.	self add: oldref.  "Old association preserves old refs"	(Array with: StartUpList with: ShutDownList) do:		[:list |  i _ list indexOf: aClass name ifAbsent: [0].		i > 0 ifTrue: [list at: i put: newName]].	self flushClassNameCache! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/4/1999 08:05'!add: aClass toList: startUpOrShutDownList after: predecessor	"Add the name of aClass to the startUp or shutDown list.	Add it after the name of predecessor, or at the end if predecessor is nil."	| name earlierName |	name _ aClass name.	(self at: name ifAbsent: [nil]) == aClass ifFalse:		[self error: name , ' cannot be found in Smalltalk dictionary.'].	predecessor == nil		ifTrue: ["No-op if alredy in the list."				(startUpOrShutDownList includes: name) ifFalse:					[startUpOrShutDownList == StartUpList						ifTrue: ["Add to end of startUp list"								startUpOrShutDownList addLast: name]						ifFalse: ["Add to front of shutDown list"								startUpOrShutDownList addFirst: name]]]		ifFalse: ["Add after predecessor, moving it if already there."				earlierName _ predecessor name.				(self at: earlierName) == predecessor ifFalse:					[self error: earlierName , ' cannot be found in Smalltalk dictionary.'].				(startUpOrShutDownList includes: earlierName) ifFalse:					[self error: earlierName , ' cannot be found in the list.'].				startUpOrShutDownList remove: name.				startUpOrShutDownList add: name after: earlierName]! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/4/1999 15:38'!addToShutDownList: aClass	"This will add a ref to this class at the BEGINNING of the shutDown list."	self addToShutDownList: aClass after: nil! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/3/1999 22:04'!addToShutDownList: aClass after: predecessor	self add: aClass toList: ShutDownList after: predecessor! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/4/1999 15:37'!addToStartUpList: aClass	"This will add a ref to this class at the END of the startUp list."	self addToStartUpList: aClass after: nil! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/3/1999 22:04'!addToStartUpList: aClass after: predecessor	self add: aClass toList: StartUpList after: predecessor! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/4/1999 15:36'!processShutDownList	"Send #shutDown to each class that needs to wrap up before a snapshot."	self send: #shutDown toClassesNamedIn: ShutDownList.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/4/1999 09:12'!processStartUpList	"Send #startUp to each class that needs to run initialization after a snapshot."	self send: #startUp toClassesNamedIn: StartUpList.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/3/1999 22:22'!removeFromShutDownList: aClass	ShutDownList remove: aClass name ifAbsent: []! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/3/1999 22:22'!removeFromStartUpList: aClass	StartUpList remove: aClass name ifAbsent: []! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/4/1999 08:09'!send: startUpOrShutDown toClassesNamedIn: startUpOrShutDownList	"Send the message #startUp or #shutDown to each class named in the list.	If any name cannot be found, then remove it from the list."	| removals class |	removals _ OrderedCollection new.	startUpOrShutDownList do:		[:name |		class _ self at: name ifAbsent: [nil].		class == nil			ifTrue: [removals add: name]			ifFalse: [class perform: startUpOrShutDown]].	"Remove any obsolete entries, but after the iteration"	startUpOrShutDownList removeAll: removals! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'di 2/4/1999 15:23'!shutDownSound	"No longer used in the release, but retained for backward compatibility"	Smalltalk at: #SoundPlayer ifPresent: [:class | class shutDown].! !!SystemDictionary class reorganize!('initialization' initialize)!!SystemDictionary class methodsFor: 'initialization' stamp: 'di 2/4/1999 16:11'!initialize	"SystemDictionary initialize"	| oldList |	oldList _ StartUpList.	StartUpList _ OrderedCollection new.	"These get processed from the top down..."	Smalltalk addToStartUpList: FileDirectory.  "Enables file stack dump and opens sources."	Smalltalk addToStartUpList: ProcessorScheduler.  "Starts low space watcher and bkground."	Smalltalk addToStartUpList: DisplayScreen.	Smalltalk addToStartUpList: Cursor.	Smalltalk addToStartUpList: InputSensor.	Smalltalk addToStartUpList: Delay.	Smalltalk addToStartUpList: ShortIntegerArray.	Smalltalk addToStartUpList: ShortRunArray.	Smalltalk addToStartUpList: CrLfFileStream.	oldList ifNotNil: [oldList do: [:className | Smalltalk at: className						ifPresent: [:theClass | Smalltalk addToStartUpList: theClass]]].	Smalltalk addToStartUpList: WorldMorph.	Smalltalk addToStartUpList: ControlManager.	oldList _ ShutDownList.	ShutDownList _ OrderedCollection new.	"These get processed from the bottom up..."	Smalltalk addToShutDownList: DisplayScreen.	Smalltalk addToShutDownList: Form.	Smalltalk addToShutDownList: ControlManager.	Smalltalk addToShutDownList: StrikeFont.	Smalltalk addToShutDownList: Color.	Smalltalk addToShutDownList: FileDirectory.	Smalltalk addToShutDownList: Delay.	Smalltalk addToShutDownList: SoundPlayer.	Smalltalk addToShutDownList: HttpUrl.	Smalltalk addToShutDownList: Password.	Smalltalk addToShutDownList: PWS.	Smalltalk addToShutDownList: MailDB.	oldList ifNotNil: [oldList reverseDo: [:className | Smalltalk at: className						ifPresent: [:theClass | Smalltalk addToShutDownList: theClass]]].! !!WorldMorph class methodsFor: 'all' stamp: 'di 2/4/1999 09:02'!startUp	Smalltalk isMorphic ifTrue: [World fullRepaintNeeded]! !ShortIntegerArray class removeSelector: #obsolete!ShortRunArray class removeSelector: #obsolete!SystemDictionary removeSelector: #startUp!SystemDictionary initialize!"Postscript:Remove the old global startup lists."(Smalltalk allCallsOn: (Smalltalk associationAt: #SystemStartupList)) isEmpty	ifFalse: [(self confirm: 'This system still has references to SystemStartupList.If you proceed they would be difficult to find,but they should not cause a problem nor waste much space.If you want to track this down, choose no and have at it!!Do you wish to proceed blithely on?') ifFalse: [self halt]].SystemStartupList do: [:c | Smalltalk addToStartUpList: c].Smalltalk removeKey: #SystemStartupList ifAbsent: [].(Smalltalk allCallsOn: (Smalltalk associationAt: #SystemShutdownList)) isEmpty	ifFalse: [(self confirm: 'This system still has references to SystemShutdownList.If you proceed they would be difficult to find,but they should not cause a problem nor waste much space.If you want to track this down, choose no and have at it!!Do you wish to proceed blithely on?') ifFalse: [self halt]].SystemShutdownList reverseDo: [:c | Smalltalk addToShutDownList: c].Smalltalk removeKey: #SystemShutdownList ifAbsent: [].!