'From Squeak3.7-m17n of 30 June 2004 [latest update: #16] on 21 July 2004 at 12:15:47 pm'!!CategoryViewer methodsFor: 'e-toy support' stamp: 'mir 7/15/2004 15:19'!localeChanged	"Update myself to reflect the change in locale"	chosenCategorySymbol ifNil: [^ self delete].	self updateCategoryNameTo: ((self currentVocabulary ifNil: [Vocabulary eToyVocabulary]) categoryWordingAt: chosenCategorySymbol)! !!CategoryViewer methodsFor: 'entries' stamp: 'mir 7/12/2004 19:37'!phraseForCommandFrom: aMethodInterface	"Answer a phrase for the non-slot-like command represented by aMethodInterface - classic tiles"	| aRow resultType cmd names argType argTile selfTile aPhrase balloonTextSelector stat inst aDocString universal tileBearingHelp |	aDocString _ aMethodInterface documentation.	names _ scriptedPlayer class namedTileScriptSelectors.	resultType _ aMethodInterface resultType.	cmd _ aMethodInterface selector.	(universal _ scriptedPlayer isUniversalTiles)		ifTrue:			[aPhrase _ scriptedPlayer universalTilesForInterface: aMethodInterface]		ifFalse: [cmd numArgs == 0			ifTrue:				[aPhrase _ PhraseTileMorph new vocabulary: self currentVocabulary.				aPhrase setOperator: cmd					type: resultType					rcvrType: #Player]			ifFalse:				["only one arg supported in classic tiles, so if this is fed				with a selector with > 1 arg, results will be very strange"				argType _ aMethodInterface typeForArgumentNumber: 1.				aPhrase _ PhraseTileMorph new vocabulary: self currentVocabulary.				aPhrase setOperator: cmd					type: resultType					rcvrType: #Player					argType: argType.				argTile _ ScriptingSystem tileForArgType: argType.				argTile position: aPhrase lastSubmorph position.				aPhrase lastSubmorph addMorph: argTile]].	(scriptedPlayer slotInfo includesKey: cmd)		ifTrue: [balloonTextSelector _ #userSlot].	(scriptedPlayer belongsToUniClass and: [scriptedPlayer class includesSelector: cmd])		ifTrue:			[aDocString ifNil:				[aDocString _ (scriptedPlayer class userScriptForPlayer: scriptedPlayer selector: cmd) documentation].			aDocString ifNil:				[balloonTextSelector _ #userScript]].	tileBearingHelp _ universal ifTrue: [aPhrase submorphs second] ifFalse: [aPhrase operatorTile]. 	aDocString		ifNotNil:			[tileBearingHelp setBalloonText: aDocString translated]		ifNil:			[balloonTextSelector ifNil:				[tileBearingHelp setProperty: #inherentSelector toValue: cmd.				balloonTextSelector _ #methodComment].			tileBearingHelp balloonTextSelector: balloonTextSelector].	aPhrase markAsPartsDonor.	cmd == #emptyScript ifTrue:		[aPhrase setProperty: #newPermanentScript toValue: true.		aPhrase setProperty: #newPermanentPlayer toValue: scriptedPlayer.		aPhrase submorphs second setBalloonText: 'drag and drop to add a new script' translated].	universal ifFalse:		[selfTile _ self tileForSelf.		selfTile position: aPhrase firstSubmorph position.		aPhrase firstSubmorph addMorph: selfTile].	aRow _ ViewerLine newRow borderWidth: 0; color: self color.	aRow elementSymbol: cmd asSymbol.	aRow addMorphBack: (ScriptingSystem tryButtonFor: aPhrase).	aRow addMorphBack: (Morph new extent: 2@2; beTransparent).	aRow addMorphBack: (self infoButtonFor: cmd).	aRow addMorphBack: aPhrase.	aPhrase on: #mouseEnter send: #addCommandFeedback to: aRow.	aPhrase on: #mouseLeave send: #removeHighlightFeedback to: aRow.	aPhrase on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow.	(names includes: cmd) ifTrue:		[aPhrase userScriptSelector: cmd.		cmd numArgs == 0 ifTrue:			[aPhrase beTransparent.			aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.			aRow addMorphBack: (stat _ (inst _ scriptedPlayer scriptInstantiationForSelector: cmd) statusControlMorph).			inst updateStatusMorph: stat]].	aRow beSticky; disableDragNDrop.	^ aRow! !!CategoryViewer methodsFor: 'entries' stamp: 'mir 7/12/2004 19:38'!phraseForVariableFrom: aMethodInterface	"Return a structure consisting of tiles and controls and a readout representing a 'variable' belonging to the player, complete with an appropriate readout when indicated.  Functions in both universalTiles mode and classic mode.  Slightly misnamed in that this path is used for any methodInterface that indicates an interesting resultType."	| anArrow slotName getterButton cover inner aRow doc setter tryer universal hotTileForSelf spacer buttonFont |	aRow _ ViewerLine newRow		color: self color;		beSticky;		elementSymbol: (slotName _ aMethodInterface selector);		wrapCentering: #center;		cellPositioning: #leftCenter.	(universal _ scriptedPlayer isUniversalTiles) ifFalse:		[buttonFont _ Preferences standardEToysFont.			aRow addMorphBack: (Morph new color: self color;					 extent: (((buttonFont widthOfString: '!!') + 6) @ (buttonFont height + 6));					 yourself)].  "spacer"	aRow addMorphBack: (self infoButtonFor: slotName).	aRow addMorphBack: (Morph new color: self color; extent: 0@10).  " spacer"	universal		ifTrue:			[inner _ scriptedPlayer universalTilesForGetterOf: aMethodInterface.			cover _ Morph new color: Color transparent.			cover extent: inner fullBounds extent.			(getterButton _ cover copy) addMorph: cover; addMorphBack: inner.			cover on: #mouseDown send: #makeUniversalTilesGetter:event:from: 					to: self withValue: aMethodInterface.			aRow addMorphFront:  (tryer _ ScriptingSystem tryButtonFor: inner).			tryer color: tryer color lighter lighter]		ifFalse:			[hotTileForSelf _ self tileForSelf bePossessive.			hotTileForSelf  on: #mouseDown send: #makeGetter:event:from:				to: self				withValue: (Array with: aMethodInterface selector with: aMethodInterface resultType).			aRow addMorphBack: hotTileForSelf.			aRow addMorphBack: (spacer _ Morph new color: self color; extent: 2@10).			spacer on: #mouseEnter send: #addGetterFeedback to: aRow.			spacer on: #mouseLeave send: #removeHighlightFeedback to: aRow.			spacer on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow.			spacer  on: #mouseDown send: #makeGetter:event:from:				to: self				withValue: (Array with: aMethodInterface selector with: aMethodInterface resultType).			hotTileForSelf on: #mouseEnter send: #addGetterFeedback to: aRow.			hotTileForSelf on: #mouseLeave send: #removeHighlightFeedback to: aRow.			hotTileForSelf on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow.			getterButton _ self getterButtonFor: aMethodInterface selector type: aMethodInterface resultType].	aRow addMorphBack: getterButton.	getterButton on: #mouseEnter send: #addGetterFeedback to: aRow.	getterButton on: #mouseLeave send: #removeHighlightFeedback to: aRow.	getterButton on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow.	(doc _ aMethodInterface documentation) ifNotNil:		[getterButton setBalloonText: doc].	universal ifFalse:		[(slotName == #seesColor:) ifTrue:			[self addIsOverColorDetailTo: aRow.			^ aRow].		(slotName == #touchesA:) ifTrue:			[self addTouchesADetailTo: aRow.			^ aRow].		(slotName == #overlaps:) ifTrue:			[self addOverlapsDetailTo: aRow.			^ aRow]].	aRow addMorphBack: (AlignmentMorph new beTransparent).  "flexible spacer"	(setter _ aMethodInterface companionSetterSelector) ifNotNil:		[aRow addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"		anArrow _ universal 			ifTrue: [self arrowSetterButton: #newMakeSetterFromInterface:evt:from:  						args: aMethodInterface]			ifFalse: [self arrowSetterButton: #makeSetter:from:forPart:						args: (Array with: slotName with: aMethodInterface resultType)].		anArrow beTransparent.		universal ifFalse:			[anArrow on: #mouseEnter send: #addSetterFeedback to: aRow.			anArrow on: #mouseLeave send: #removeHighlightFeedback to: aRow.			anArrow on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow].		aRow addMorphBack: anArrow].	(#(color:sees: playerSeeingColor copy touchesA: overlaps:) includes: slotName) ifFalse: 		[(universal and: [slotName == #seesColor:]) ifFalse:			[aMethodInterface wantsReadoutInViewer ifTrue: 				[aRow addMorphBack: (self readoutFor: slotName type: aMethodInterface resultType readOnly: setter isNil getSelector: aMethodInterface selector putSelector: setter)]]].	anArrow ifNotNil: [anArrow step].	^ aRow! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 21:21'!documentation	"Answer the receiver's documentation"	^self helpMessage! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 19:33'!documentation: somethingUsefulHopefully	"Set the receiver's documentation, in the current langauge"	self helpMessage: somethingUsefulHopefully! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 21:37'!helpMessage	"Check if there is a getterSetterHelpMessage. 	Otherwise try the normal help message or return nil."	^self getterSetterHelpMessage		ifNil: [(self propertyAt: #helpMessage ifAbsent: [^nil]) translated]! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 19:32'!helpMessage: somethingUsefulHopefully	"Set the receiver's documentation, in the current langauge"	self propertyAt: #helpMessage put: somethingUsefulHopefully! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 23:57'!untranslatedHelpMessage	"Check if there is a getterSetterHelpMessage. 	Otherwise try the normal help message or return nil."	^(self propertyAt: #getterSetterHelpMessage ifAbsent: [nil])		ifNil: [(self propertyAt: #helpMessage ifAbsent: [nil])]! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 23:56'!untranslatedWording	"Answer the receiver's wording"	^self propertyAt: #wording ifAbsent: [nil]! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 21:34'!wording	"Answer the receiver's wording"	| wording |	(wording := self propertyAt: #wording ifAbsent: [nil])		ifNotNil: [^wording translated].	self initWordingAndDocumentation.	^self propertyAt: #wording ifAbsent: ['']! !!ObjectWithDocumentation methodsFor: 'accessing' stamp: 'mir 7/12/2004 21:39'!wording: aString	"Set the receiver's wording, in the current langauge"	self propertyAt: #wording put: aString! !!ObjectWithDocumentation methodsFor: 'miscellaneous' stamp: 'mir 7/12/2004 23:20'!naturalLanguageTranslations	^naturalLanguageTranslations ifNil: [OrderedCollection new]! !!ObjectWithDocumentation methodsFor: 'migration' stamp: 'mir 7/12/2004 23:45'!migrateWordAndHelpMessage	"Migrate the English wording and help message to the new structure"	| englishElement |	self initWordingAndDocumentation.	(self properties includes: #wording)		ifFalse: [			englishElement := self naturalLanguageTranslations				detect: [:each | each language == #English] ifNone: [^nil].			self wording: englishElement wording.			self helpMessage: englishElement helpMessage]! !!ObjectWithDocumentation methodsFor: 'private' stamp: 'mir 7/12/2004 21:28'!getterSetterHelpMessage	"Returns a helpMessage that has been computed previously and needs to be translated and then formatted with the elementSymbol.	'get value of {1}' translated format: {elSym}"	^(self propertyAt: #getterSetterHelpMessage ifAbsent: [^nil])		translated format: {self elementSymbol}! !!ObjectWithDocumentation methodsFor: 'private' stamp: 'mir 7/12/2004 21:29'!getterSetterHelpMessage: aString	"Sets a helpMessage that needs to be translated and then formatted with the elementSymbol.	'get value of {1}' translated format: {elSym}"	self propertyAt: #getterSetterHelpMessage put: aString! !!ObjectWithDocumentation methodsFor: 'private' stamp: 'mir 7/12/2004 21:31'!initWordingAndDocumentation	"Initialize wording and documentation (helpMessage) for getters and setters"	| elSym |	elSym := self elementSymbol.	elSym		ifNil: [^self].	((elSym beginsWith: 'get')		and: [elSym size > 3])		ifTrue: [			self wording: (elSym allButFirst: 3) withFirstCharacterDownshifted.			self getterSetterHelpMessage: 'get value of {1}']		ifFalse: [			((elSym beginsWith: 'set')				and: [elSym size > 4])				ifTrue: [					self wording: (elSym allButFirst: 3) withFirstCharacterDownshifted.					self getterSetterHelpMessage: 'set value of {1}']]! !!ObjectWithDocumentation methodsFor: 'private' stamp: 'mir 7/12/2004 19:30'!properties	^properties ifNil: [properties := Dictionary new]! !!ObjectWithDocumentation methodsFor: 'private' stamp: 'mir 7/12/2004 19:30'!propertyAt: key	^self propertyAt: key ifAbsent: [nil]! !!ObjectWithDocumentation methodsFor: 'private' stamp: 'mir 7/12/2004 19:29'!propertyAt: key ifAbsent: aBlock	^properties		ifNil: aBlock		ifNotNil: [properties at: key ifAbsent: aBlock]! !!ObjectWithDocumentation methodsFor: 'private' stamp: 'mir 7/12/2004 19:29'!propertyAt: key put: aValue	self properties at: key put: aValue! !!DataType methodsFor: 'queries' stamp: 'mir 7/15/2004 10:34'!representsAType	"Answer whether this vocabulary represents an end-user-sensible data type"	"^ (self class == DataType) not"  "i.e. subclasses yes, myself no"	"Assuming this is an abstract class"	^true! !!EToyVocabulary methodsFor: 'initialization' stamp: 'mir 7/15/2004 12:30'!initialize	"Initialize the receiver (automatically called when instances are created via 'new')"	|   classes aMethodCategory selector selectors categorySymbols aMethodInterface |	super initialize.	self vocabularyName: #eToy.	self documentation: '"EToy" is a vocabulary that provides the equivalent of the 1997-2000 etoy prototype'.	categorySymbols _ Set new.	classes _ self morphClassesDeclaringViewerAdditions.	classes do:		[:aMorphClass | categorySymbols addAll: aMorphClass basicNew categoriesForViewer].	self addCustomCategoriesTo: categorySymbols.  "For benefit, e.g., of EToyVectorVocabulary"	categorySymbols asOrderedCollection do:		[:aCategorySymbol |			aMethodCategory _ ElementCategory new categoryName: aCategorySymbol.			selectors _ Set new.			classes do:				[:aMorphClass |					 (aMorphClass additionsToViewerCategory: aCategorySymbol) do:						[:anElement |						aMethodInterface _ self methodInterfaceFrom: anElement.						selectors add: (selector _ aMethodInterface selector).						(methodInterfaces includesKey: selector) ifFalse:							[methodInterfaces at: selector put: aMethodInterface].						self flag: #deffered.						"NB at present, the *setter* does not get its own method interface.  Need to revisit"].			(selectors copyWithout: #unused) asSortedArray do:				[:aSelector |					aMethodCategory elementAt: aSelector put: (methodInterfaces at: aSelector)]].				 			self addCategory: aMethodCategory].	self addCategoryNamed: ScriptingSystem nameForInstanceVariablesCategory.	self addCategoryNamed: ScriptingSystem nameForScriptsCategory.	self setCategoryDocumentationStrings."	self addToTranslationTableFrom: #((:						'_'						'assign value')(Incr:					'increase by'			'increase value by')(Decr:					'decrease by'			'decrease value by')(Mult:					'multiply by'			'multiply value by')) language: #English"! !!EToyVocabulary methodsFor: 'initialization' stamp: 'mir 7/15/2004 19:27'!setCategoryDocumentationStrings	"Initialize the documentation strings associated with the old etoy categories, in English"	self setCategoryStrings: #((basic					'basic'					'a few important things')(#'book navigation'		'book navigation'		'relating to book, stacks, etc')(button					'button'					'for thinking of this object as a push-button control')(collections				'collections'				'for thinking of this object as a collection')(fog					'fog'					'3D fog')(geometry				'geometry' 				'measurements and coordinates')(#'color & border'		'color & border'			'matters concerning the colors and borders of objects')(graphics				'graphics'				'for thinking of this object as a picture')(variables				'variables'				'variables added by this object')(joystick				'joystick	'				'the object as a Joystick')(miscellaneous			'miscellaneous' 			'various commands')(motion					'motion' 				'matters relating to moving and turning')(paintbox				'paintbox'				'the painting palette')(#'pen trails'			'pen trails'				'relating to trails put down by pens')(#'pen use'				'pen use' 				'use of an object''s "pen"')(playfield				'playfield'				'the object as a container for other visible objects')(sampling				'sampling'				'sampling')(scripting				'scripting'				'commands to start and stop scripts')(scripts					'scripts'					'methods added by this object')(slider					'slider'					'functions useful to sliders')(speaker				'speaker'				'the object as an audio Speaker')(#'stack navigation'		'stack navigation'		'navigation within a stck')(storyboard				'storyboard'				'storyboard')(tests					'tests'					'yes/no tests, to use in "Test" panes of scripts')(text					'text'					'The object as text')(vector					'vector'					'The object as a vector')(viewing				'viewing'				'matters relating to viewing') ) ! !!EToyVectorVocabulary methodsFor: 'initialization' stamp: 'mir 7/15/2004 19:29'!initialize	"Initialize the vocabulary"	super initialize.	self addFromTable: self eToyVectorTable.	self vocabularyName: #Vector.	self documentation: 'This vocabulary adds to the basic etoy experience an interpretation of "players are vectors", requested by Alan Kay and implemented by Ted Kaehler in summer 2001'.! !!MethodInterface methodsFor: 'initialization' stamp: 'mir 7/12/2004 19:36'!conjuredUpFor: aSelector class: aClass	"Initialize the receiver to have the given selector, obtaining whatever info one can from aClass.  This basically covers the situation where no formal definition has been made."	| parts |	self initializeFor: aSelector.	self wording: aSelector.	receiverType _ #unknown.	parts _ aClass formalHeaderPartsFor: aSelector.	argumentVariables _ (1 to: selector numArgs) collect:		[:anIndex | Variable new name: (parts at: (4 * anIndex)) type: #Object].	parts last isEmptyOrNil ifFalse: [self documentation: parts last].! !!MethodInterface methodsFor: 'initialization' stamp: 'mir 7/12/2004 19:39'!initializeFromEToyCommandSpec: tuple category: aCategorySymbol	"tuple holds an old etoy command-item spec, of the form found in #additionsToViewerCategories methods.   Initialize the receiver to hold the same information"	selector _ tuple second.	receiverType _ #Player.	selector numArgs == 1 ifTrue:		[argumentVariables _ OrderedCollection with:			(Variable new name: (Player formalHeaderPartsFor: selector) fourth type: tuple fourth)].	aCategorySymbol ifNotNil: [self flagAttribute: aCategorySymbol].	self		wording: (ScriptingSystem wordingForOperator: selector);		helpMessage:  tuple third! !!MethodInterface methodsFor: 'initialization' stamp: 'mir 7/12/2004 19:40'!initializeFromEToySlotSpec: tuple	"tuple holds an old etoy slot-item spec, of the form found in #additionsToViewerCategories methods.   Initialize the receiver to hold the same information"	| setter |	selector _ tuple seventh.	self		wording: (ScriptingSystem wordingForOperator: tuple second);		helpMessage: tuple third.	receiverType _ #Player.	resultSpecification _ ResultSpecification new.	resultSpecification resultType: tuple fourth.	(#(getNewClone  "etc.") includes: selector)		ifTrue:			[self setNotToRefresh]  "actually should already be nil"		ifFalse:			[self setToRefetch].	((tuple fifth == #readWrite) and: [((tuple size >= 9) and: [(setter _ tuple at: 9) ~~ #unused])]) ifTrue:		[resultSpecification companionSetterSelector: setter].		"An example of an old slot-item spec:(slot numericValue 'A number representing the current position of the knob.' number readWrite Player getNumericValue Player setNumericValue:)	1	#slot	2	wording	3	balloon help	4	type	5	#readOnly or #readWrite	6	#Player (not used -- ignore)	7	getter selector	8	#Player (not used -- ignore)	9	setter selector"	! !!MethodInterface methodsFor: 'initialization' stamp: 'mir 7/12/2004 19:40'!initializeSetterFromEToySlotSpec: tuple	"tuple holds an old etoy slot-item spec, of the form found in #additionsToViewerCategories methods.   Initialize the receiver to represent the getter of this item"	selector _ tuple ninth.	self		wording: ('set ', tuple second);		helpMessage: ('setter for', tuple third).	receiverType _ #Player.	argumentVariables _ Array with: (Variable new variableType: tuple fourth)	! !!MethodInterface methodsFor: 'access' stamp: 'mir 7/12/2004 20:23'!printOn: aStream	"print the receiver on a stream.  Overridden to provide details about wording, selector, result type, and companion setter."	super printOn: aStream.	aStream nextPutAll: ' - wording: ''', self wording asString, ''' selector: #', selector asString.	self argumentVariables size > 0 ifTrue:		[aStream nextPutAll: 'Arguments: '.		argumentVariables doWithIndex:			[:aVariable :anIndex | 				aStream nextPutAll: 'argument #', anIndex printString, ' name = ', aVariable variableName asString, ', type = ', aVariable variableType]].	resultSpecification ifNotNil:		[aStream nextPutAll: ' result type = ', resultSpecification resultType asString.		resultSpecification companionSetterSelector ifNotNil:			[aStream nextPutAll: ' setter = ', resultSpecification companionSetterSelector asString]]	! !!PasteUpMorph methodsFor: 'objects from disk' stamp: 'yo 7/2/2004 13:21'!saveOnFile	"Ask the user for a filename and save myself on a SmartReferenceStream file.  Writes out the version and class structure.  The file is fileIn-able.  UniClasses will be filed out."	| aFileName fileStream ok |	self flag: #bob0302.	self isWorldMorph ifTrue: [^self project saveAs].	aFileName _ ('my {1}' translated format: {self class name}) asFileName.	"do better?"	aFileName _ FillInTheBlank request: 'File name? (".project" will be added to end)' translated 			initialAnswer: aFileName.	aFileName isEmpty ifTrue: [^ Beeper beep].	self allMorphsDo: [:m | m prepareToBeSaved].	ok _ aFileName endsWith: '.project'.	"don't double them"	ok _ ok | (aFileName endsWith: '.sp').	ok ifFalse: [aFileName _ aFileName,'.project'].	fileStream _ FileStream newFileNamed: aFileName asFileName.	fileStream fileOutClass: nil andObject: self.	"Puts UniClass definitions out anyway"! !!Player methodsFor: 'scripts-kernel' stamp: 'mir 7/12/2004 19:41'!methodInterfaceForEmptyScript	"Answer a MethodInterface representing Andreas's 'emptyScript' feature"	| anInterface |	anInterface _ MethodInterface new.	anInterface receiverType: #Player.	anInterface flagAttribute: #scripts.	anInterface		wording: (ScriptingSystem wordingForOperator: #emptyScript);		helpMessage: 'an empty script; drop on desktop to get a new empty script for this object'.	anInterface selector: #emptyScript type: nil setter: nil.	^ anInterface! !!Player methodsFor: 'scripts-kernel' stamp: 'mir 7/12/2004 19:36'!tilesToCall: aMethodInterface	"Answer a phrase for the non-typed command represented by aMethodInterface."	| resultType cmd argType argTile selfTile aPhrase balloonTextSelector aDocString universal |	self class namedTileScriptSelectors.	resultType _ aMethodInterface resultType.	cmd _ aMethodInterface selector.	(universal _ self isUniversalTiles)		ifTrue:			[aPhrase _ self universalTilesForInterface: aMethodInterface]		ifFalse: [cmd numArgs == 0			ifTrue:				[aPhrase _ PhraseTileMorph new setOperator: cmd					type: resultType					rcvrType: #Player]			ifFalse:				["only one arg supported in classic tiles, so if this is fed				with a selector with > 1 arg, results will be very strange"				argType _ aMethodInterface typeForArgumentNumber: 1.				aPhrase _ PhraseTileMorph new setOperator: cmd					type: resultType					rcvrType: #Player					argType: argType.				argTile _ ScriptingSystem tileForArgType: argType.				argTile position: aPhrase lastSubmorph position.				aPhrase lastSubmorph addMorph: argTile]].	(self slotInfo includesKey: cmd)		ifTrue: [balloonTextSelector _ #userSlot].	(self belongsToUniClass and: [self class includesSelector: cmd])		ifTrue:			[aDocString _ (self class userScriptForPlayer: self selector: cmd) documentation.			aDocString				ifNotNil: [aPhrase submorphs second setBalloonText: aDocString]				ifNil: [balloonTextSelector _ #userScript]].	(universal ifTrue: [aPhrase submorphs second] ifFalse: [aPhrase operatorTile]) balloonTextSelector: 			(balloonTextSelector ifNil: [cmd]).	universal ifFalse:		[selfTile _ self tileToRefer.		selfTile position: aPhrase firstSubmorph position.		aPhrase firstSubmorph addMorph: selfTile.		aPhrase makeAllTilesGreen.		aPhrase justGrabbedFromViewer: false].	^ aPhrase! !!Player methodsFor: 'slots-kernel' stamp: 'mir 7/12/2004 19:41'!methodInterfacesForInstanceVariablesCategoryIn: aVocabulary	"Return a collection of methodInterfaces for the instance-variables category.  The vocabulary parameter, at present anyway, is not used."	| aList anInterface itsSlotName |	aList _ OrderedCollection new.	self slotInfo associationsDo:		[:assoc |			anInterface _ MethodInterface new.			itsSlotName _ assoc key.			anInterface				wording: itsSlotName;				helpMessage: 'a variable defined by this object'.			anInterface selector: (Utilities getterSelectorFor: itsSlotName) type: assoc value type setter: (Utilities setterSelectorFor: itsSlotName).			anInterface setToRefetch.			aList add: anInterface].	^ aList! !!Player methodsFor: 'slots-user' stamp: 'mir 7/12/2004 20:23'!tearOffFancyWatcherFor: aGetter	"Create 'Player3 heading = 43' as in independent entity.  It keeps up with the truth, and may be edited to change the variable."	| aWatcher aTile aLine aColor aTower precision ms slotMsg info isNumeric anInterface watcherWording |	info _ self slotInfoForGetter: aGetter.	info ifNotNil:			[isNumeric _ info type == #Number.			watcherWording _ Utilities inherentSelectorForGetter: aGetter]		ifNil:			[anInterface _Vocabulary eToyVocabulary methodInterfaceAt: aGetter ifAbsent: [nil].			isNumeric _ anInterface notNil and: [anInterface resultType == #Number].			watcherWording _ anInterface wording].	aColor _ Color r: 0.387 g: 0.581 b: 1.0.	isNumeric		ifTrue:	[aTile _ NumericReadoutTile new typeColor: aColor].	aWatcher _ UpdatingStringMorph new.	isNumeric ifTrue: [(precision _ self defaultFloatPrecisionFor: aGetter) ~= 1 			ifTrue: [aWatcher floatPrecision: precision]].	aWatcher growable: true;		getSelector: aGetter;		putSelector: (info notNil			ifTrue:				[ScriptingSystem setterSelectorForGetter: aGetter]			ifFalse:				[anInterface companionSetterSelector]).	aWatcher target: self.	aTile addMorphBack: aWatcher.	aTile addArrows.	aTile setLiteralTo: (self perform: aGetter) width: 30.	(#(getScaleFactor "etc.") includes: aGetter) ifTrue:		[aTile setProperty: #arrowDelta toValue: 0.1.		(aTile findA: UpdatingStringMorph) floatPrecision: 0.1].Preferences universalTiles 	ifTrue: [		ms _ MessageSend receiver: self selector: aGetter asSymbol arguments: #().		slotMsg _ ms asTilesIn: self class globalNames: (self class officialClass ~~ CardPlayer).			"For CardPlayers, use 'self'.  For others, name it, and use its name."		ms _ MessageSend receiver: 3 selector: #= asSymbol arguments: #(5).		aLine _ ms asTilesIn: self class globalNames: false.		aLine firstSubmorph delete.		aLine addMorphFront: slotMsg.		aLine lastSubmorph delete.		aLine lastSubmorph delete.		aLine color: aColor.		aLine addMorphBack: aTile.		aLine cellPositioning: #leftCenter]	ifFalse: [		aLine _ AlignmentMorph newRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; color: aColor.		aLine layoutInset: -1.		aLine borderWidth: 1; borderColor: aColor darker.		aLine addMorphBack: 			(self tileReferringToSelf borderWidth: 0; typeColor: aColor; 				color: aColor; bePossessive).		aLine addTransparentSpacerOfSize: (4@0).		aTower _ AlignmentMorph newColumn color: aColor.		aTower addTransparentSpacerOfSize: (0 @ 1).		aTower addMorphBack: 			(StringMorph contents: watcherWording, ' = ' font: ScriptingSystem fontForTiles).		aLine addMorphBack: aTower.		aLine addMorphBack: aTile].	aWatcher step; fitContents.	self currentHand attachMorph: aLine.! !!Player methodsFor: 'slots-user' stamp: 'mir 7/12/2004 20:23'!tearOffWatcherFor: aSlotGetter	"Tear off a watcher for the slot whose getter is provided"	| aWatcher precision anInterface info isNumeric |	info _ self slotInfoForGetter: aSlotGetter.	info		ifNotNil:			[isNumeric _ info type == #Number]		ifNil:			[anInterface _ Vocabulary eToyVocabulary methodInterfaceAt: aSlotGetter ifAbsent: [nil].			isNumeric _ anInterface notNil and: [anInterface resultType == #Number]].	aWatcher _ UpdatingStringMorph new.		isNumeric		ifFalse:			[aWatcher useStringFormat]		ifTrue:			[precision _ self defaultFloatPrecisionFor: aSlotGetter.			precision ~= 1 ifTrue: [aWatcher floatPrecision: precision]].	aWatcher		growable: true;		getSelector: aSlotGetter;		putSelector: (info notNil			ifTrue:				[ScriptingSystem setterSelectorForGetter: aSlotGetter]			ifFalse:				[anInterface companionSetterSelector]);		setNameTo: (info notNil			ifTrue:				[Utilities inherentSelectorForGetter: aSlotGetter]			ifFalse:				[anInterface wording]); 		target: self;		step;		fitContents.	self currentHand attachMorph: aWatcher! !!ScriptEditorMorph methodsFor: 'e-toy support' stamp: 'mir 7/15/2004 15:19'!localeChanged	"Update myself to reflect the change in locale"	self fixLayout! !!SearchingViewer methodsFor: 'search' stamp: 'mir 7/12/2004 20:23'!doSearchFrom:  aSource interactive: isInteractive	"Perform the search operation.  If interactive is true, this actually happened because a search button was pressed; if false, it was triggered some other way for which an informer would be inappropriate."	| searchFor aVocab aList all anInterface useTranslations scriptNames addedMorphs |	searchString _ (aSource isKindOf: PluggableTextMorph)		ifFalse:			[aSource]		ifTrue:			[aSource text string].	searchFor _ searchString asString asLowercase withBlanksTrimmed.	aVocab _ self outerViewer currentVocabulary.	(useTranslations _ (scriptedPlayer isKindOf: Player) and: [aVocab isKindOf: EToyVocabulary])		ifTrue:			[all _ scriptedPlayer costume selectorsForViewer.			all addAll: (scriptNames _ scriptedPlayer class namedTileScriptSelectors)]		ifFalse:			[all _ scriptNames _ scriptedPlayer class allSelectors].	aList _ all select:		[:aSelector | (aVocab includesSelector: aSelector forInstance: scriptedPlayer ofClass: scriptedPlayer class limitClass: ProtoObject) and:			[(useTranslations and: [(anInterface _ aVocab methodInterfaceAt: aSelector ifAbsent: [nil]) notNil and: [anInterface wording includesSubstring: searchFor caseSensitive: false]])				or:					[((scriptNames includes: aSelector) or: [useTranslations not]) and:						[aSelector includesSubstring: searchFor caseSensitive: false]]]].	aList _ aList asSortedArray.	self removeAllButFirstSubmorph. "that being the header"	self addAllMorphs:		((addedMorphs _ scriptedPlayer tilePhrasesForSelectorList: aList inViewer: self)).	self enforceTileColorPolicy.	self secreteCategorySymbol.	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	self adjustColorsAndBordersWithin.	owner ifNotNil: [owner isStandardViewer ifTrue: [owner fitFlap].	(isInteractive and: [addedMorphs isEmpty]) ifTrue:		[self inform: ('No matches found for "' translated), searchFor, '"']]! !!StringType methodsFor: 'initialization' stamp: 'mir 7/13/2004 00:47'!initialize	"Initialize the receiver (automatically called when instances are created via 'new')"	| aMethodCategory aMethodInterface |	super initialize.	self vocabularyName: #String.#((accessing 			'The basic info'		(at: at:put: size endsWithDigit findString: findTokens: includesSubString: indexOf: indexOf:startingAt: indexOf:startingAt:ifAbsent: lineCorrespondingToIndex: lineCount lineNumber: startsWithDigit numArgs))(#'more accessing' 		'More basic info'		(allButFirst allButFirst: allButLast allButLast: at:ifAbsent: atAllPut: atPin: atRandom: atWrap: atWrap:put: fifth first first: fourth from:to:put: last last: lastIndexOf: lastIndexOf:ifAbsent: middle replaceAll:with: replaceFrom:to:with: replaceFrom:to:with:startingAt: second sixth third))(comparing				'Determining which comes first alphabeticly'		(< <= = > >= beginsWith: endsWith: endsWithAnyOf: howManyMatch: match:))(testing 				'Testing'		(includes: isEmpty ifNil: ifNotNil: isAllDigits isAllSeparators isString lastSpacePosition))(converting 			'Converting it to another form'		(asCharacter asDate asInteger asLowercase asNumber asString asStringOrText asSymbol asText asTime asUppercase asUrl capitalized keywords numericSuffix romanNumber reversed splitInteger surroundedBySingleQuotes withBlanksTrimmed withSeparatorsCompacted withoutTrailingBlanks withoutTrailingDigits asSortedCollection))(copying 				'Make another one like me'		(copy copyFrom:to: copyUpTo: copyUpToLast: shuffled))(enumerating		'Passing over the letters'		(collect: collectWithIndex: do: from:to:do: reverseDo: select: withIndexDo: detect: detect:ifNone:))) do: [:item | 			aMethodCategory _ ElementCategory new categoryName: item first.			aMethodCategory documentation: item second.			item third do:				[:aSelector | 					aMethodInterface _ MethodInterface new initializeFor: aSelector.					self atKey: aSelector putMethodInterface: aMethodInterface.					aMethodCategory elementAt: aSelector put: aMethodInterface].			self addCategory: aMethodCategory].! !!SymbolListType methodsFor: 'tiles' stamp: 'mir 7/15/2004 10:35'!representsAType	"Answer whether this vocabulary represents an end-user-sensible data type"	^false! !!ButtonPhaseType methodsFor: 'queries' stamp: 'mir 7/15/2004 10:35'!representsAType	"Answer whether this vocabulary represents an end-user-sensible data type"	^true! !!ScriptNameType methodsFor: 'queries' stamp: 'mir 7/15/2004 10:35'!representsAType	"Answer whether this vocabulary represents an end-user-sensible data type"	^true! !!TileLikeMorph methodsFor: 'initialization' stamp: 'mir 7/15/2004 15:20'!localeChanged	"Update myself to reflect the change in locale"	self updateWordingToMatchVocabulary! !!TileMorph methodsFor: 'e-toy support' stamp: 'mir 7/15/2004 15:20'!localeChanged	"Update myself to reflect the change in locale"	self updateWordingToMatchVocabulary! !!TileMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 21:44'!updateWordingToMatchVocabulary	"The current vocabulary has changed; change the wording on my face, if appropriate"	| aMethodInterface |	type == #operator ifTrue:		[self line1: (self currentVocabulary tileWordingForSelector: operatorOrExpression).		(ScriptingSystem doesOperatorWantArrows: operatorOrExpression)			ifTrue: [self addArrows].		self updateLiteralLabel.		aMethodInterface _ self currentVocabulary methodInterfaceAt: operatorOrExpression			ifAbsent: [				Vocabulary eToyVocabulary					methodInterfaceAt: operatorOrExpression ifAbsent: [^ self]].		self setBalloonText: aMethodInterface documentation.	].	type == #objRef ifTrue: [		self isPossessive			ifTrue: [self bePossessive]			ifFalse: [self labelMorph contents: self actualObject nameForViewer asSymbol translated]].		"submorphs last setBalloonText: aMethodInterface documentation"! !!AssignmentTileMorph methodsFor: 'initialization' stamp: 'mir 7/12/2004 20:22'!computeOperatorOrExpression	"Compute the operator or expression to use, and set the wording correectly on the tile face"	| aSuffix wording anInterface getter doc |	operatorOrExpression _ (assignmentRoot, assignmentSuffix) asSymbol.	aSuffix _ self currentVocabulary translatedWordingFor:  assignmentSuffix.	getter _ Utilities getterSelectorFor: assignmentRoot.	anInterface _ self currentVocabulary methodInterfaceAt: getter ifAbsent: [Vocabulary eToyVocabulary methodInterfaceAt: getter ifAbsent: [nil]].	wording _ anInterface ifNotNil: [anInterface wording] ifNil: [assignmentRoot copyWithout: $:].	(anInterface notNil and: [(doc _ anInterface documentation) notNil])		ifTrue:			[self setBalloonText: doc].	operatorReadoutString _ wording, ' ', aSuffix. 	self line1: operatorReadoutString.	self addArrowsIfAppropriate! !!ColorSeerTile methodsFor: 'initialization' stamp: 'mir 7/12/2004 20:23'!initialize"initialize the state of the receiver"	| m1 m2 desiredW wording |	super initialize.""	self removeAllMorphs.	"get rid of the parts of a regular Color tile"	type _ #operator.	operatorOrExpression _ #color:sees:.	wording _ (Vocabulary eToyVocabulary				methodInterfaceAt: operatorOrExpression				ifAbsent: []) wording.	m1 _ StringMorph contents: wording font: ScriptingSystem fontForTiles.	m2 _ Morph new extent: 12 @ 8;								color: (Color						r: 0.8						g: 0						b: 0).	desiredW _ m1 width + 6.	self extent: (desiredW max: self basicWidth)			@ self class defaultH.	m1 position: bounds center x - (m1 width // 2) @ (bounds top + 5).	m2 position: bounds center x - (m2 width // 2) + 3 @ (bounds top + 8).	self addMorph: m1;		 addMorphFront: m2.	colorSwatch _ m2! !!ColorSeerTile methodsFor: 'initialization' stamp: 'mir 7/15/2004 15:20'!updateWordingToMatchVocabulary	"The current vocabulary has changed; change the wording on my face, if appropriate"	| aMethodInterface |	aMethodInterface _ self currentVocabulary methodInterfaceAt: operatorOrExpression ifAbsent: [Vocabulary eToyVocabulary methodInterfaceAt: operatorOrExpression ifAbsent: [^ self]].	self labelMorph contents: aMethodInterface wording.	self setBalloonText: aMethodInterface helpMessage.! !!SymbolListTile methodsFor: 'user interface' stamp: 'yo 7/2/2004 14:33'!offerAllChoicesInAPopUp	"Offer all choices in a pop-up menu"	| aMenu s |	owner ifNil: [^ self].	aMenu _ MenuMorph new defaultTarget: self.	self choices do:		[:aSym |			s _ aSym = #emptyScript ifTrue: [aSym "translated"] ifFalse: [aSym].			aMenu add: s target: self selector: #acceptNewLiteral: argument: aSym].	aMenu popUpInWorld: ActiveWorld! !!Vocabulary class methodsFor: 'class initialization' stamp: 'mir 7/15/2004 10:40'!embraceAddedTypeVocabularies	"If there are any type-vocabulary subclases not otherwise accounted for, acknowledge them at this time"	| vocabulary |	DataType allSubclasses do:		[:dataType |			vocabulary _ dataType new.			vocabulary representsAType				ifTrue: [(self allStandardVocabularies includesKey: vocabulary vocabularyName)					ifFalse: 	[self addStandardVocabulary: vocabulary]]]! !!Vocabulary class methodsFor: 'class initialization' stamp: 'mir 7/15/2004 19:10'!initialize	"Initialize a few standard vocabularies and place them in the AllVocabularies list.  Call this to update all vocabularies."	self initializeStandardVocabularies.	self embraceAddedTypeVocabularies.	"Vocabulary initialize"! !!Vocabulary class methodsFor: 'class initialization' stamp: 'mir 7/15/2004 19:28'!initializeStandardVocabularies	"Initialize a few standard vocabularies and place them in the AllStandardVocabularies list."	AllStandardVocabularies _ nil.	self addStandardVocabulary: EToyVocabulary new.	self addStandardVocabulary: EToyVectorVocabulary new.	self addStandardVocabulary: self newPublicVocabulary.	self addStandardVocabulary: FullVocabulary new.	self addStandardVocabulary: self newQuadVocabulary.	self addStandardVocabulary: ColorType new.	self addStandardVocabulary: BooleanType new.	self addStandardVocabulary: GraphicType new.	self addStandardVocabulary: PlayerType new.	self addStandardVocabulary: SoundType new.	self addStandardVocabulary: StringType new.	self addStandardVocabulary: MenuType new.	self addStandardVocabulary: UnknownType new.	self addStandardVocabulary: ScriptNameType new.	self addStandardVocabulary: (SymbolListType new symbols: #(simple raised inset complexFramed complexRaised complexInset complexAltFramed complexAltRaised complexAltInset); vocabularyName: #BorderStyle; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(lines arrows arrowheads dots); vocabularyName: #TrailStyle; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(leftToRight rightToLeft topToBottom bottomToTop); vocabularyName: #ListDirection; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(topLeft bottomRight center justified); vocabularyName: #ListCentering; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(buttonDown whilePressed buttonUp); vocabularyName: #ButtonPhase; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(rigid spaceFill shrinkWrap); vocabularyName: #Resizing; yourself).	self addStandardVocabulary: self newSystemVocabulary.  "A custom vocabulary for Smalltalk -- still under development)"	self numberVocabulary.  		"creates and adds it"	self wonderlandVocabulary.  	"creates and adds it"	self vocabularyForClass: Time.   "creates and adds it"	"Vocabulary initialize"! !!Vocabulary class methodsFor: 'testing and demo' stamp: 'mir 7/15/2004 10:53'!quadVocabulary	"Answer the Quad vocabulary lurking in my AllStandardVocabularies list, creating it if necessary"	"Vocabulary quadVocabulary"	^ self allStandardVocabularies at: #Quad ifAbsentPut: [self newQuadVocabulary]! !!Vocabulary class methodsFor: 'testing and demo' stamp: 'mir 7/15/2004 10:54'!testVocabulary	"Answer the Test vocabulary lurking in my AllStandardVocabularies list, creating it if necessary"	"Vocabulary testVocabulary"	^ self allStandardVocabularies at: #Test ifAbsentPut: [self newTestVocabulary]! !!Vocabulary class methodsFor: 'universal vocabularies' stamp: 'mir 7/15/2004 10:52'!fullVocabulary	"Answer the full vocabulary in my AllStandardVocabularies list, creating it if necessary"	^ self allStandardVocabularies at: #Full ifAbsentPut: [FullVocabulary new]! !!Vocabulary class methodsFor: 'standard vocabulary access' stamp: 'mir 7/15/2004 10:55'!addStandardVocabulary: aVocabulary	"Add a vocabulary to the list of standard vocabularies"	self allStandardVocabularies at: aVocabulary vocabularyName put: aVocabulary! !!Vocabulary class methodsFor: 'standard vocabulary access' stamp: 'mir 7/15/2004 10:27'!allStandardVocabularies	"Answer a list of the currently-defined vocabularies in my AllStandardVocabularies list"	"Vocabulary allStandardVocabularies"	^AllStandardVocabularies ifNil: [AllStandardVocabularies _ IdentityDictionary new].! !!Vocabulary class methodsFor: 'standard vocabulary access' stamp: 'mir 7/15/2004 10:57'!vocabularyNamed: aName	"Answer the standard vocabulary of the given name, or nil if none found"	^ self allStandardVocabularies at: aName asSymbol! !!Vocabulary class methodsFor: 'eToy vocabularies' stamp: 'mir 7/15/2004 10:49'!changeMadeToViewerAdditions	"A change to some morph-subclass class-side #additionsToViewer... was made, which means that the existing etoy vocabularies need updating."	"Vocabulary changeMadeToViewerAdditions"	AllStandardVocabularies		ifNotNil: [			self addStandardVocabulary: EToyVocabulary new.			self addStandardVocabulary: EToyVectorVocabulary new]			 ! !!Vocabulary class methodsFor: 'eToy vocabularies' stamp: 'mir 7/15/2004 10:50'!eToyVocabulary	"Answer the etoy vocabulary in the AllStandardVocabularies list, creating it if necessary."	^ self allStandardVocabularies at: #eToy ifAbsentPut: [EToyVocabulary new]! !!Vocabulary class methodsFor: 'type vocabularies' stamp: 'mir 7/15/2004 10:54'!newWonderlandVocabulary	"Answer a Wonderland vocabulary -- highly experimental"	| aVocabulary  |	"Vocabulary newWonderlandVocabulary"	aVocabulary _ Vocabulary new vocabularyName: #Wonderland.	aVocabulary documentation: 'A simple vocabulary for scripting Alice objects'.	aVocabulary initializeFromTable:  #(		(color color: () Color (basic color) 'The color of the object' unused updating)		"--"		(getX setX: () Number (basic geometry) 'The x position' unused updating)		(getY setY: () Number (basic geometry) 'The y position' unused updating)		(getZ setZ: () Number (basic geometry) 'The z position' unused updating)		"--"		(width setWidth: () Number (geometry) 'The width of the object' unused updating)		(height setHeight: () Number (geometry) 'The height of the object' unused updating)		(depth setDepth: () Number (geometry) 'The depth of the object' unused updating)		"--"		(heading setHeading: () Number (basic geometry) 'The heading of the object' unused updating)		(forwardBy: unused ((distance Number)) none (basic motion) 'Moves the object by the specified distance' 'forward by')		(turnBy: unused ((angle Number)) none (basic motion) 'Turns the object by the specified number of degrees' 'turn by')		(graphic setGraphic: () Graphic (basic graphics) 'The picture currently being worn' unused updating)		(animationIndex setAnimationIndex: () Number (graphics) 'The index in the object''s animation chain' unused updating)		(emptyScript unused () none (scripts) 'The empty script')		(distanceToCamera setDistanceToCamera: () Number (geometry) 'The distance of the object from the camera' unused updating)		(distanceTo: unused ((target Player)) Number (geometry) 'The distance of the object to the given target')	).	^ aVocabulary! !!Vocabulary class methodsFor: 'type vocabularies' stamp: 'mir 7/15/2004 10:31'!numberVocabulary	"Answer the standard vocabulary representing numbers, creating it if necessary"	^self allStandardVocabularies at: #Number ifAbsentPut: [self newNumberVocabulary]! !!Vocabulary class methodsFor: 'type vocabularies' stamp: 'mir 7/15/2004 10:44'!vocabularyForClass: aClass	"Answer the standard vocabulary for that class.  Create it if not present and init message exists.  Answer nil if none exists and no init message present."	| initMsgName newTypeVocab |	(self allStandardVocabularies includesKey: aClass name)		ifTrue: [^self allStandardVocabularies at: aClass name].	initMsgName _ ('new', aClass name, 'Vocabulary') asSymbol.	^(self respondsTo: initMsgName)		 ifTrue:	[			newTypeVocab _ self perform: initMsgName.			self addStandardVocabulary: newTypeVocab.			newTypeVocab]		ifFalse: [nil]! !!Vocabulary class methodsFor: 'type vocabularies' stamp: 'mir 7/15/2004 10:59'!vocabularyForType: aType	"Answer a vocabulary appropriate to the given type, which is normally going to be a symbol such as #Number or #Color.  Answer the Unknown vocabulary as a fall-back"	| ucSym |	(aType isKindOf: Vocabulary) ifTrue: [^ aType].	ucSym _ aType capitalized asSymbol.	^self allStandardVocabularies at: ucSym ifAbsent: [self vocabularyNamed: #unknown]! !!Vocabulary class methodsFor: 'type vocabularies' stamp: 'mir 7/15/2004 10:55'!wonderlandVocabulary	"Answer the Quad vocabulary lurking in my AllStandardVocabularies list, creating it if necessary"	"Vocabulary newWonderlandVocabulary"	^ self allStandardVocabularies at: #Wonderland ifAbsentPut: [self newWonderlandVocabulary]! !!Project methodsFor: 'initialization' stamp: 'mir 7/15/2004 19:07'!initMorphic	"Written so that Morphic can still be removed.  Note that #initialize is never actually called for a morphic project -- see the senders of this method."	Smalltalk verifyMorphicAvailability ifFalse: [^ nil].	changeSet := ChangeSet new.	transcript := TranscriptStream new.	displayDepth := Display depth.	parentProject := CurrentProject.	isolatedHead := false.	world := PasteUpMorph newWorldForProject: self.	Locale switchToID: CurrentProject localeID.	self initializeProjectPreferences "Do this *after* a world is installed so that the project will be recognized as a morphic one."! !!Project methodsFor: 'language' stamp: 'mir 7/15/2004 20:33'!chooseNaturalLanguage	"Put up a menu allowing the user to choose the natural language for the project"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: 'choose language' translated.	aMenu lastItem setBalloonText: 'This controls the human language in which tiles should be viewed.  It is potentially extensible to be a true localization mechanism, but initially it only works in the classic tile scripting system.  Each project has its own private language choice' translated.	aMenu addStayUpItem.	NaturalLanguageTranslator availableLanguageLocaleIDs do:		[:localeID |			aMenu addUpdating: #stringForLanguageNameIs: target: Locale selector:  #switchToID: argumentList: {localeID}].	aMenu popUpInWorld"Project current chooseNaturalLanguage"! !!Project methodsFor: 'language' stamp: 'mir 7/15/2004 16:16'!localeChanged	"Set the project's natural language as indicated"	| |	self localeID = LocaleID current		ifTrue: [^self].	self projectParameterAt: #localeID put: LocaleID current.	ActiveWorld allTileScriptingElements do: [:viewerOrScriptor |			viewerOrScriptor localeChanged].	Flaps disableGlobalFlaps: false.	Flaps enableGlobalFlaps.	(Project current isFlapIDEnabled: 'Navigator' translated)		ifFalse: [Flaps enableDisableGlobalFlapWithID: 'Navigator' translated].	ParagraphEditor initializeTextEditorMenus.	Utilities emptyScrapsBook.	MenuIcons initializeTranslations.	LanguageEnvironment localeChanged.	#(PartsBin ParagraphEditor BitEditor FormEditor StandardSystemController) 		do: [ :key | Smalltalk at: key ifPresent: [ :class | class initialize ]].	"self setFlaps.	self setPaletteFor: aLanguageSymbol."! !!Project methodsFor: 'language' stamp: 'mir 7/15/2004 14:51'!localeID	"Answer the natural language for the project"	| prev |	^ self projectParameterAt: #localeID		ifAbsentPut: [			(prev _ self previousProject)				ifNotNil: [prev projectParameterAt: #localeID ifAbsent: [LocaleID default]]				ifNil: [LocaleID default]]! !!Vocabulary methodsFor: 'queries' stamp: 'mir 7/15/2004 15:15'!categoryWordingAt: aSymbol	"Answer the wording for the category at the given symbol"	| result |	result _ self categoryAt: aSymbol.	^result		ifNotNil: [result wording]		ifNil: [aSymbol]! !!Vocabulary methodsFor: 'queries' stamp: 'mir 7/12/2004 20:24'!tileWordingForSelector: aSelector	"Answer the wording to emblazon on tiles representing aSelector"	| anInterface inherent |	anInterface _ self methodInterfaceAt: aSelector asSymbol ifAbsent:		[inherent _ Utilities inherentSelectorForGetter: aSelector.		^ inherent			ifNil:				[self translatedWordingFor: aSelector]			ifNotNil:				[inherent]].	^ anInterface wording! !!Vocabulary methodsFor: 'initialization' stamp: 'mir 7/15/2004 19:29'!addFromTable: aTable	"Add each method-specification tuples, each of the form:		(1)	selector		(2)	companion setter selector (#none or nil indicate none)		(3)  argument specification array, each element being an array of the form				<arg name>  <arg type>		(4)  result type, (#none or nil indicate none)		(5)  array of category symbols, i.e. the categories in which this element should appear.		(6)  help message. (optional)		(7)  wording (optional)		(8)  auto update flag (optional) - if #updating, set readout to refetch automatically	Make new categories as needed.	Consult Vocabulary class.initializeTestVocabulary for an example of use"					| aMethodCategory aMethodInterface aSelector doc wording |	aTable do:		[:tuple |   tuple fifth do: [:aCategorySymbol |			(aMethodCategory _ self categoryAt: aCategorySymbol) ifNil: [ 					aMethodCategory _ ElementCategory new categoryName: aCategorySymbol.					self addCategory: aMethodCategory].							aMethodInterface _ MethodInterface new.			aSelector _ tuple first.			aMethodInterface selector: aSelector type: tuple fourth setter: tuple second.			aMethodCategory elementAt: aSelector put: aMethodInterface.			self atKey: aSelector putMethodInterface: aMethodInterface.			((tuple third ~~ #none) and: [tuple third isEmptyOrNil not])				ifTrue:					[aMethodInterface argumentVariables: (tuple third collect:						[:pair | Variable new name: pair first type: pair second])].					doc _ (tuple size >= 6 and: [(#(nil none unused) includes: tuple sixth) not])				ifTrue:					[tuple sixth]				ifFalse:					[nil].			wording _ (tuple size >= 7 and: [(#(nil none unused) includes: tuple seventh) not])				ifTrue:					[tuple seventh]				ifFalse:					[aSelector].			aMethodInterface				wording: wording;				helpMessage: doc.			tuple size >= 8 ifTrue:				[aMethodInterface setToRefetch]]].! !!Vocabulary methodsFor: 'initialization' stamp: 'mir 7/12/2004 19:43'!initializeFromTable: aTable	"Initialize the receiver from a list of method-specification tuples, each of the form:		(1)	selector		(2)	companion setter selector (#none or nil indicate none)		(3)  argument specification array, each element being an array of the form				<arg name>  <arg type>		(4)  result type, (#none or nil indicate none)		(5)  array of category symbols, i.e. the categories in which this element should appear.		(6)  help message. (optional)		(7)  wording (optional)		(8)  auto update flag (optional) - if #updating, set readout to refetch automatically	Consult Vocabulary class.initializeTestVocabulary for an example of use"					|  aMethodCategory categoryList aMethodInterface aSelector doc wording |	categoryList _ Set new.	aTable do:		[:tuple | categoryList addAll: tuple fifth].	categoryList _ categoryList asSortedArray.	categoryList do:		[:aCategorySymbol |			aMethodCategory _ ElementCategory new categoryName: aCategorySymbol.			aTable do:				[:tuple | (tuple fifth includes: aCategorySymbol) ifTrue:					[aMethodInterface _ MethodInterface new.					aSelector _ tuple first.					aMethodInterface selector: aSelector type: tuple fourth setter: tuple second.					aMethodCategory elementAt: aSelector put: aMethodInterface.					self atKey: aSelector putMethodInterface: aMethodInterface.					((tuple third ~~ #none) and: [tuple third isEmptyOrNil not])						ifTrue:							[aMethodInterface argumentVariables: (tuple third collect:								[:pair | Variable new name: pair first type: pair second])].					doc _ (tuple size >= 6 and: [(#(nil none unused) includes: tuple sixth) not])						ifTrue:							[tuple sixth]						ifFalse:							[nil]. 					wording _ (tuple size >= 7 and: [(#(nil none unused) includes: tuple seventh) not])						ifTrue:							[tuple seventh]						ifFalse:							[aSelector asString].					aMethodInterface						wording: wording;						helpMessage: doc.					tuple size >= 8 ifTrue:						[aMethodInterface setToRefetch]]].			self addCategory: aMethodCategory]! !!Vocabulary methodsFor: 'initialization' stamp: 'mir 7/12/2004 20:23'!strings	| strm |	"Get started making a vocabulary for a foreign language.  That is, build a method like #addGermanVocabulary, but for another language.  	Returns this vocabulary in the same form used as the input used for foreign languages.  To avoid string quote problems, execute	Transcript show: Vocabulary eToyVocabulary strings.and copy the text from the transcript to the method you are building."	"selector		wording			documentation"strm _ WriteStream on: (String new: 400).methodInterfaces keys asSortedCollection do: [:sel |	strm cr; nextPut: $(;		nextPutAll: sel; tab; tab; tab; nextPut: $';		nextPutAll: (methodInterfaces at: sel) wording;		nextPut: $'; tab; tab; tab; nextPut: $';		nextPutAll: (methodInterfaces at: sel) documentation;		nextPut: $'; nextPut: $)].^ strm contents! !!Vocabulary methodsFor: 'translation' stamp: 'mir 7/12/2004 20:59'!translatedWordingFor: aSymbol	"If I have a translated wording for aSymbol, return it, else return aSymbol.  Caveat: at present, this mechanism is only germane for *assignment-operator wordings*"	^aSymbol translated! !!Vocabulary methodsFor: 'translation' stamp: 'mir 7/13/2004 00:42'!translationTable	^translationTable ifNil: [ElementCategory new]! !!Vocabulary methodsFor: 'private' stamp: 'mir 7/15/2004 19:27'!setCategoryStrings: categoryTriplets	"Establish the category strings as per (internalCategorySymbol newCategoryWording balloon-help)"	| category |	categoryTriplets do:		[:triplet |			(category := self categoryAt: triplet first) ifNotNil: [				category wording: triplet second.				category helpMessage: triplet third]]! !