'From Squeak2.9alpha of 5 August 2000 [latest update: #3217] on 3 January 2001 at 7:15:55 am'!"Change Set:		debugMenu-swDate:			3 January 2001Author:			Scott WallaceFixes a bug in the player-related items of the morph debug menu (thank to Robert Hirschfeld) and adds an item there for inspecting the model of the morph, if any, and regroups the inspect/browse/explore items in a more ingratiating fashion.Also revives the interface to #tempCommand, whose support got broken some time ago."!!Morph methodsFor: 'debug and other' stamp: 'sw 1/3/2001 06:42'!addViewingItemsTo: aMenu	"Add viewing-related items to the given menu.  If any are added, this method is also responsible for adding a line after them"! !!Morph methodsFor: 'debug and other' stamp: 'sw 1/3/2001 07:11'!buildDebugMenu: aHand	"Answer a debugging menu for the receiver.  The hand argument is seemingly historical and plays no role presently"	| aMenu aPlayer |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	(self hasProperty: #errorOnDraw) ifTrue:		[aMenu add: 'start drawing again' action: #resumeAfterDrawError.		aMenu addLine].	(self hasProperty: #errorOnStep) ifTrue:		[aMenu add: 'start stepping again' action: #resumeAfterStepError.		aMenu addLine].	aMenu add: 'inspect morph' action: #inspectInMorphic:.	aMenu add: 'inspect owner chain' action: #inspectOwnerChain.	Smalltalk isMorphic ifFalse:		[aMenu add: 'inspect morph (in MVC)' action: #inspect].	(self isKindOf: MorphicModel) ifTrue:		[aMenu add: 'inspect model' target: self model action: #inspect].	(aPlayer _ self player) ifNotNil:		[aMenu add: 'inspect player' target: aPlayer action: #inspect].     aMenu add: 'explore morph' target: self selector: #explore.	aPlayer ifNotNil: [aPlayer class isUniClass ifTrue: [aMenu add: 'browse player class' target: aPlayer action: #browseHierarchy].		"aMenu add: 'browse player protocol' target: self action: #browseProtocolForPlayer"].	aMenu add: 'browse morph class' target: self selector: #browseHierarchy.	"aMenu add: 'browse morph protocol' target: self selector: #haveFullProtocolBrowsed."	aMenu addLine.	self addViewingItemsTo: aMenu.	aMenu 		add: 'make own subclass' action: #subclassMorph;		add: 'internal name ' action: #choosePartName;		add: 'save morph in file'  action: #saveOnFile;		addLine;		add: 'call #tempCommand' action: #tempCommand;		add: 'define #tempCommand' action: #defineTempCommand;		addLine;		add: 'control-menu...' target: self selector: #invokeMetaMenu:;		add: 'edit balloon help' action: #editBalloonHelpText.	^ aMenu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 1/3/2001 06:43'!presentViewMenu	"Answer an auxiliary menu with options specific to viewing playfields -- this is put up from the provisional 'view' halo handle, on pasteup morphs only."	| aMenu isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	self addViewingItemsTo: aMenu.	#(	"(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')"		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(resizeToFitString		toggleResizeToFit			'whether I should automatically strive exactly to fit my contents')		(behaveLikeAHolderString	toggleBehaveLikeAHolder			'whether auto-line-layout, resize-to-fit, and indicate-cursor should be set to true; useful for animation control, etc.')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(isOpenForDragNDropString	toggleDragNDrop			'whether objects can be dropped into and dragged out of me')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(originAtCenterString	toggleOriginAtCenter			'whether the cartesian origin of the playfield should be at its lower-left corner or at the center of the playfield')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')		(fenceEnabledString	toggleFenceEnabled			'whether moving objects should stop at the edge of their container')		(autoViewingString		toggleAutomaticViewing			'governs whether, when an object is touched inside me, a viewer should automatically be launched for it.')		(griddingString			griddingOnOff			'whether gridding should be used in my interior')		(gridVisibleString		gridVisibleOnOff			'whether the grid should be shown when gridding is on')	) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail toggleAutomaticViewing ) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	aMenu addLine.	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu add: 'shuffle contents' action: #shuffleSubmorphs.	aMenu balloonTextForLastItem: 'Rearranges my contents in random order'.	aMenu add: 'set grid spacing...' action: #setGridSpec.	aMenu balloonTextForLastItem: 'Set the spacing to be used when gridding is on'.	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	aMenu addLine.	self addPenTrailsMenuItemsTo: aMenu.	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'viewing options for "', self externalName, '"'.	aMenu popUpForHand: self activeHand in: self world! !!PasteUpMorph methodsFor: 'viewing' stamp: 'sw 1/3/2001 06:42'!addViewingItemsTo: aMenu	"Add viewing-related items to the given menu.  If any are added, this method is also responsible for adding a line after them"	#(	(viewingByIconString 			viewByIcon)		(viewingByNameString 			viewByName)		"(viewingBySizeString 			viewBySize)"		(viewingNonOverlappingString 	viewNonOverlapping)) do:			[:pair |  aMenu addUpdating: pair first target:  self action: pair second].	aMenu addLine! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 1/3/2001 07:12'!debugMenu        | menu |        menu _ self menu: 'debug...'.        ^self fillIn: menu from: {                 { 'inspect world' . { #myWorld . #inspect } }.                { 'explore world' . { #myWorld . #explore } }.                { 'inspect model' . { self . #inspectWorldModel } }.                        " { 'talk to world...' . { self . #typeInMessageToWorld } }."                { 'start MessageTally' . { self . #startMessageTally } }.                { 'start/browse MessageTally' . { self . #startThenBrowseMessageTally } }.                { 'open process browser' . { ProcessBrowser . #open } }.                nil.                        "(self hasProperty: #errorOnDraw) ifTrue:  Later make this come up only when needed."                { 'start drawing again' . { #myWorld . #resumeAfterDrawError } }.                { 'start stepping again' . { #myWorld . #resumeAfterStepError } }.                nil.                { 'call #tempCommand' . { #myWorld . #tempCommand } }.                { 'define #tempCommand' . { #myWorld . #defineTempCommand } }.        }! !