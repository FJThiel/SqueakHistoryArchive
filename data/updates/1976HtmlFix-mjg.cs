'From Squeak2.8alpha of 4 February 2000 [latest update: #1919] on 15 March 2000 at 10:57:52 pm'!"Change Set:		08HtmlFix-mjgDate:			11 March 2000Author:			Mark Guzdial, Bert Freudenberg & Stefan Matthias AustA crude fix to ignore HTML (and XML) unicode entities.  This was done by Mark.  Then I noticed that the whole handling of non ASCII characters was broken and started to fix it.  Then I noticed that Bert already worked on this. So I put everything together, corrected the iso to mac mapping, changed the TTFontReader to use that new mapping instead of have its own variant and voil‡, Scamber can show umlauts.  Attached to this changeset is a test.html page that demonstrats a few things.This change set also contains a EURO character for NewYork10 and fixes the width of the non-breaking-space character (#202 in Mac encoding, #160 in ISO8895-1).  Please look at the postscript.  --sma"!ArrayedCollection variableByteSubclass: #String	instanceVariableNames: ''	classVariableNames: 'AsciiOrder CSLineEnders CSNonSeparators CSSeparators CaseInsensitiveOrder CaseSensitiveOrder HtmlEntities LowercasingTable '	poolDictionaries: ''	category: 'Collections-Text'!Object subclass: #TTFontReader	instanceVariableNames: 'charMap glyphs nGlyphs kernPairs infoBar fontDescription '	classVariableNames: 'WinToMacTable'	poolDictionaries: ''	category: 'Balloon-TrueType Support'!!Character methodsFor: 'converting' stamp: 'sma 3/11/2000 17:21'!asString	^ String with: self! !!Character methodsFor: 'converting' stamp: 'sma 3/15/2000 22:57'!isoToSqueak	"Convert receiver from iso8895-1 (actually CP1252) to mac encoding.	Does not do lf/cr conversion!! Characters not available in MacRoman	encoding have been remapped to their base characters or to $?."	value < 128 ifTrue: [^ self].	^ Character value: (#(		219 63 226 196 227 201 160 224 246 228 83 220 206 63 90 63		"80-8F"		63 212 213 210 211 165 208 209 247 170 115 221 207 63 122 217		"90-9F"		202 193 162 163 63 180 124 164 172 169 187 199 194 45 168 248	 	"A0-AF"		161 177 50 51 171 181 166 225 252 49 188 200 63 63 63 192 			"B0-BF"		203 231 229 204 128 129 174 130 233 131 230 232 237 234 235 236 	"C0-CF"		63 132 241 238 239 205 133 42 175 244 242 243 134 89 63 167	 	"D0-DF"		136 135 137 139 138 140 190 141 143 142 144 145 147 146 148 149		"E0-EF"		63 150 152 151 153 155 154 214 191 157 156 158 159 121 63 216		"F0-FF"	) at: value - 127)! !!Character class methodsFor: 'accessing untypeable characters' stamp: 'sma 3/15/2000 22:33'!euro	"The Euro currency sign, that E with two dashes. The key code is a wild guess"	^ Character value: 219! !!Character class methodsFor: 'accessing untypeable characters' stamp: 'sma 3/11/2000 20:47'!nbsp	"non-breakable space."	^ Character value: 202! !!HtmlFormatter methodsFor: 'formatting commands' stamp: 'bf 11/4/1999 22:23'!startListItem	"begin a new list item"	listTypes size = 0 ifTrue: [ ^self ].	self ensureNewlines: 1.	listTypes last = #unordered		ifTrue: [ self addString: '¥ ' ]		ifFalse: [ self addString: (listLengths last + 1) printString.			self addString: '. ' ].	listLengths at: (listLengths size) put: (listLengths last + 1).! !!Scamper methodsFor: 'document handling' stamp: 'sma 3/11/2000 20:41'!displayTextHtmlPage: newSource	"HTML page--format it"	| formatter |	currentUrl _ newSource url.	pageSource _ newSource content isoToSqueak.	self status: 'parsing...'.	document _ (HtmlParser parse: (ReadStream on: pageSource)).	self status: 'laying out...'.	formatter _ HtmlFormatter new.	formatter browser: self.	formatter baseUrl: currentUrl.	document addToFormatter: formatter.	formattedPage _ formatter text.	currentUrl fragment		ifNil: [ currentAnchorLocation _ nil ]		ifNotNil: [ currentAnchorLocation _				formatter anchorLocations 					at: currentUrl fragment asLowercase					ifAbsent: [ nil ] ].	self startDownloadingMorphState: (formatter incompleteMorphs).	self changeAll: 	#(currentUrl title hasLint lint formattedPage formattedPageSelection).	^true! !!String methodsFor: 'converting' stamp: 'sma 3/11/2000 17:25'!asHtml	"Do the basic character conversion for HTML.  Leave all original return 	and tabs in place, so can conver back by simply removing bracked 	things. 4/4/96 tk"	| temp |	temp _ self copyReplaceAll: '&' with: '&amp;'.	HtmlEntities keysAndValuesDo:		[:entity :char |		char = $& ifFalse:			[temp _ temp copyReplaceAll: char asString with: '&' , entity , ';']].	temp _ temp copyReplaceAll: '	' with: '	<IMG SRC="tab.gif" ALT="    ">'.	temp _ temp copyReplaceAll: '' with: '<BR>'.	^ temp"	'A<&>B' asHtml"! !!String methodsFor: 'internet' stamp: 'sma 3/11/2000 20:40'!isoToSqueak	^ self collect: [:each | each isoToSqueak]! !!String class methodsFor: 'initialization' stamp: 'sma 3/11/2000 20:43'!initializeHtmlEntities	"String initializeHtmlEntities"	HtmlEntities _ (Dictionary new: 128)		at: 'amp'	put: $&;		at: 'lt'		put: $<;		at: 'gt'		put: $>;		at: 'quot'	put: $";		at: 'euro'	put: Character euro;		yourself.	#('nbsp' 'iexcl' 'cent' 'pound' 'curren' 'yen' 'brvbar' 'sect' 'uml' 'copy' 'ordf' 'laquo' 'not' 'shy' 'reg' 'hibar' 'deg' 'plusmn' 'sup2' 'sup3' 'acute' 'micro' 'para' 'middot' 'cedil' 'sup1' 'ordm' 'raquo' 'frac14' 'frac12' 'frac34' 'iquest' 'Agrave' 'Aacute' 'Acirc' 'Atilde' 'Auml' 'Aring' 'AElig' 'Ccedil' 'Egrave' 'Eacute' 'Ecirc' 'Euml' 'Igrave' 'Iacute' 'Icirc' 'Iuml' 'ETH' 'Ntilde' 'Ograve' 'Oacute' 'Ocirc' 'Otilde' 'Ouml' 'times' 'Oslash' 'Ugrave' 'Uacute' 'Ucirc' 'Uuml' 'Yacute' 'THORN' 'szlig' 'agrave' 'aacute' 'acirc' 'atilde' 'auml' 'aring' 'aelig' 'ccedil' 'egrave' 'eacute' 'ecirc' 'euml' 'igrave' 'iacute' 'icirc' 'iuml' 'eth' 'ntilde' 'ograve' 'oacute' 'ocirc' 'otilde' 'ouml' 'divide' 'oslash' 'ugrave' 'uacute' 'ucirc' 'uuml' 'yacute' 'thorn' 'yuml' ) withIndexDo: [:each :index | HtmlEntities at: each put: (index + 159) asCharacter isoToSqueak]! !!String class methodsFor: 'internet' stamp: 'sma 3/11/2000 20:25'!valueOfHtmlEntity: specialEntity 	"Please note: the 'min: 255' is a crude fix to silently ignore unicode characters."	(specialEntity beginsWith: '#')		ifTrue:			[^ ((specialEntity				copyFrom: 2				to: specialEntity size) asNumber min: 255) asCharacter isoToSqueak].	^ HtmlEntities at: specialEntity ifAbsent: [nil]! !!TTFontReader methodsFor: 'processing' stamp: 'sma 3/11/2000 20:30'!processCharMap: assoc	"Process the given character map"	| charTable glyph cmap |	cmap _ assoc value.	charTable _ Array new: 256 withAll: glyphs first. "Initialize with default glyph"	assoc key = 1 ifTrue: "Mac encoded table"		[1 to: (cmap size min: charTable size) do:			[:i |			glyph _ glyphs at: (cmap at: i) + 1.			charTable at: i put: glyph]].	assoc key = 3 ifTrue: "Win encoded table"		[1 to: (cmap size min: charTable size) do:			[:i |			glyph _ glyphs at: (cmap at: i) + 1.			charTable at: (self winToMac: i) put: glyph]].	^ charTable! !!TTFontReader methodsFor: 'private' stamp: 'sma 3/11/2000 20:33'!winToMac: index	^ (index - 1) asCharacter isoToSqueak asciiValue + 1! !TTFontReader class removeSelector: #initialize!Object subclass: #TTFontReader	instanceVariableNames: 'charMap glyphs nGlyphs kernPairs infoBar fontDescription '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon-TrueType Support'!"Postscript:Initialize new entity table, fix nbsp in NewYork fonts and add an euro symbol to NewYork10"String initializeHtmlEntities.(TextStyle named: 'NewYork') fontArray do:	[:each | each characterFormAt: Character nbsp put: (each characterFormAt: $ )].	(TextStyle named: 'NewYork') defaultFont extendMaxAsciiTo: Character euro asciiValue.(TextStyle named: 'NewYork') defaultFont	characterFormAt: Character euro 	put: (Form		extent: 8@12		depth: 1		fromArray: #( 0 469762048 570425344 1073741824 4227858432 1073741824 4160749568 1073741824 570425344 469762048 0 0)		offset: 0@0)!