'From Squeak3.3alpha of 30 January 2002 [latest update: #4981] on 10 November 2002 at 1:18:29 pm'!"Change Set:		emphChanges2-lsDate:			10 November 2002Author:			Lex SpoonThis changeset improves the change of emphasis via keyboard commands like cmd-8.  There are several improvements.First, don't reset the emphasis at every keystroke, but only in response to cursor-moving keystrokes.Always set emphasisHere in changeEmphasis:, even if nothing is currently selected.If nothing is selected, then compute the new emphasis using the character to the *left* of the cursor, not to the right.  This is consistent with the emphasis that setEmphasisHere selects automatically, and appears to be more useful, anyway.Additionally, this changeset fixes the comment of makeUppercase: ."!!ParagraphEditor methodsFor: 'editing keys' stamp: 'ls 11/10/2002 12:58'!changeEmphasis: characterStream 	"Change the emphasis of the current selection or prepare to accept characters with the change in emphasis. Emphasis change amounts to a font change.  Keeps typeahead."	| keyCode attribute oldAttributes index thisSel colors extras indexOfOldAttributes |		 "control 0..9 -> 0..9"	keyCode _ ('0123456789-=' indexOf: sensor keyboard ifAbsent: [1]) - 1.	"grab the old set of attributes"	indexOfOldAttributes _		startBlock stringIndex < stopBlock stringIndex			ifTrue: [ startBlock stringIndex ]			ifFalse: [				"if selection is empty, look on character to the left; this is consistent with setEmphasisHere"				(startBlock stringIndex - 1) max: 1 ].	oldAttributes _ paragraph text attributesAt: indexOfOldAttributes forStyle: paragraph textStyle.	thisSel _ self selection.	"Decipher keyCodes for Command 0-9..."	(keyCode between: 1 and: 5) ifTrue:		[attribute _ TextFontChange fontNumber: keyCode].	keyCode = 6 ifTrue:		[colors _ #(black magenta red yellow green blue cyan white).		extras _ ((self class name = #TextMorphEditor) and: 			[(self morph isKindOf: TextMorphForEditView) not]) "not a system window"				ifTrue: [#()]				ifFalse: [#('Link to comment of class' 'Link to definition of class' 						'Link to hierarchy of class' 'Link to method')].		index _ (PopUpMenu labelArray: colors , #('choose color...' 'Do it' 'Print it'), 			extras, #('be a web URL link' 			'Edit hidden info' 'Copy hidden info')							lines: (Array with: colors size +1)) startUp.		index = 0 ifTrue: [^ true].		index <= colors size		ifTrue:			[attribute _ TextColor color: (Color perform: (colors at: index))]		ifFalse:			[index _ index - colors size - 1.	"Re-number!!!!!!"			index = 0 ifTrue: [attribute _ self chooseColor].			index = 1 ifTrue: [attribute _ TextDoIt new.				thisSel _ attribute analyze: self selection asString].			index = 2 ifTrue: [attribute _ TextPrintIt new.				thisSel _ attribute analyze: self selection asString].			(extras size = 0) & (index > 2) ifTrue: [index _ index + 5].	"skip those"			index = 3 ifTrue: [attribute _ TextLink new. 				thisSel _ attribute analyze: self selection asString with: 'Comment'].			index = 4 ifTrue: [attribute _ TextLink new. 				thisSel _ attribute analyze: self selection asString with: 'Definition'].			index = 5 ifTrue: [attribute _ TextLink new. 				thisSel _ attribute analyze: self selection asString with: 'Hierarchy'].			index = 6 ifTrue: [attribute _ TextLink new. 				thisSel _ attribute analyze: self selection asString].			index = 7 ifTrue: [attribute _ TextURL new. 				thisSel _ attribute analyze: self selection asString].			index = 8 ifTrue: ["Edit hidden info"				thisSel _ self hiddenInfo.	"includes selection"				attribute _ TextEmphasis normal].			index = 9 ifTrue: ["Copy hidden info"				self copyHiddenInfo.  ^ true].	"no other action"		thisSel ifNil: [^ true]].	"Could not figure out what to link to"		].	(keyCode between: 7 and: 11) ifTrue:		[sensor leftShiftDown		ifTrue:			[keyCode = 10 ifTrue: [attribute _ TextKern kern: -1].			keyCode = 11 ifTrue: [attribute _ TextKern kern: 1]]		ifFalse:			[attribute _ TextEmphasis perform:					(#(bold italic narrow underlined struckOut) at: keyCode - 6).			oldAttributes do:				[:att | (att dominates: attribute) ifTrue: [attribute turnOff]]]].	(keyCode = 0) ifTrue:		[attribute _ TextEmphasis normal].	beginTypeInBlock ~~ nil		ifTrue:  "only change emphasisHere while typing"			[self insertTypeAhead: characterStream]		ifFalse:			[self replaceSelectionWith: (thisSel asText addAttribute: attribute)].	emphasisHere _ 	Text addAttribute: attribute toArray: oldAttributes.	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'ls 11/10/2002 12:11'!makeUppercase: characterStream 	"Force the current selection to uppercase.  Triggered by Cmd-Y."	sensor keyboard.		"flush the triggering cmd-key character"	self replaceSelectionWith: (Text fromString: (self selection string asUppercase)).	^ true! !!ParagraphEditor methodsFor: 'typing support' stamp: 'ls 11/10/2002 12:59'!readKeyboard	"Key struck on the keyboard. Find out which one and, if special, carry 	out the associated special action. Otherwise, add the character to the 	stream of characters.  Undoer & Redoer: see closeTypeIn."	| typeAhead char |	typeAhead _ WriteStream on: (String new: 128).	[sensor keyboardPressed] whileTrue: 		[self deselect.		 [sensor keyboardPressed] whileTrue: 			[char _ sensor keyboardPeek.			(self dispatchOnCharacter: char with: typeAhead) ifTrue:				[self doneTyping.				^self selectAndScroll; updateMarker].			self openTypeIn].		startBlock = stopBlock ifFalse: "save highlighted characters"			[UndoSelection _ self selection]. 		self zapSelectionWith: 			(Text string: typeAhead contents emphasis: emphasisHere).		typeAhead reset.		startBlock _ stopBlock copy.		sensor keyboardPressed ifFalse: 			[self selectAndScroll.			sensor keyboardPressed				ifFalse: [self updateMarker]]]! !!ParagraphEditor methodsFor: 'new selection' stamp: 'ls 11/10/2002 13:00'!selectFrom: start to: stop	"Deselect, then select the specified characters inclusive.	 Be sure the selection is in view."	(start = startBlock stringIndex and: [stop + 1 = stopBlock stringIndex]) ifFalse:		[self deselect.		self selectInvisiblyFrom: start to: stop].	self selectAndScroll.	"the cursor or selection is, in general,  moving.  Drop any user-specified emphasis in favor of the emphasis at the new cursor location.  Rationale: It is not recorded whether the current emphasisHere was user-specified or was picked up automatically from neighboring text with setEmphasisHere; in the former case, it is unclear whether the emphasis should be reset, and in the later it should definitely be reset.  Reseting it is always either a reasonable choice or clearly the best choice."	self setEmphasisHere.  ! !!PluggableTextController methodsFor: 'as yet unclassified' stamp: 'ls 11/10/2002 12:26'!selectFrom: start to: stop	"Deselect, then select the specified characters inclusive.	 Be sure the selection is in view."	(start = startBlock stringIndex and: [stop + 1 = stopBlock stringIndex]) ifFalse:		[view superView ifNotNil: [self deselect].		self selectInvisiblyFrom: start to: stop].	view superView ifNotNil: [self selectAndScroll].	self setEmphasisHere.! !!TextMorphEditor methodsFor: 'mvc compatibility' stamp: 'ls 11/10/2002 12:26'!selectFrom: start to: stop	"Select the specified characters inclusive."	self selectInvisiblyFrom: start to: stop.	self closeTypeIn.	self storeSelectionInParagraph.	self setEmphasisHere.! !