'From Squeak2.6 of 11 October 1999 [latest update: #1571] on 26 October 1999 at 1:08:57 am'!"Change Set:		flexedViewerEtc-swDate:			26 October 1999Author:			Scott WallaceSeveral fixes relating to FV's = flexed (rotated and/or scaled) viewers (but because display of viewers and of flexed objects are both slow, display of flexed viewers can be VERY slow, and there also are probably more glitches in use of FV's, so use them at your own peril.):(1)  When you dismiss a FV, it now entirely disappears rather than leaving a TransformationMorph behind.(2)  Arrow buttons in numeric readouts and on various tiles now work correctly in a FV.(3)  When you pull a phrase out of a FV, it sticks to the hand right where it ought to now, rather than at a considerable offset.(4)  When you switch categories in a FV, the new entries now show up at the proper place.Other bugs fixed in this update:*  When you drop a paint-invoking morph back into a parts bin, you no longer fall into a debugger.*  Free-standing viewers now retain their dismiss buttons after a structural change."!!Morph methodsFor: 'submorphs-add/remove' stamp: 'sw 10/25/1999 23:34'!replaceSubmorph: oldMorph by: newMorph	| index itsPosition w |	oldMorph stopStepping.	itsPosition _ oldMorph referencePositionInWorld.	index _ submorphs indexOf: oldMorph.	oldMorph privateDelete.	self privateAddMorph: newMorph atIndex: index.	newMorph referencePositionInWorld: itsPosition.	(w _ newMorph world) ifNotNil:		[w startSteppingSubmorphsOf: newMorph]! !!Morph methodsFor: 'geometry eToy' stamp: 'sw 10/25/1999 16:49'!referencePositionInWorld	^ self pointInWorld: self referencePosition! !!Morph methodsFor: 'geometry eToy' stamp: 'sw 10/25/1999 23:33'!referencePositionInWorld: aPoint	| localPosition |	localPosition _ owner		ifNil: [aPoint]		ifNotNil: [(owner transformFrom: self world) globalPointToLocal: aPoint].	self referencePosition: localPosition! !!CategoryViewer methodsFor: 'support' stamp: 'sw 10/25/1999 23:36'!replaceSubmorph: oldMorph by: newMorph	super replaceSubmorph: oldMorph by: newMorph.	self fixLayout! !!PaintInvokingMorph methodsFor: 'as yet unclassified' stamp: 'sw 10/25/1999 15:55'!justDroppedInto: aPasteUpMorph event: anEvent	"This message is sent to a dropped morph after it has been dropped on--and been accepted by--a drop-sensitive morph"	self isPartsDonor ifFalse: [^ self].	(aPasteUpMorph isPlayfieldLike not or:		[aPasteUpMorph isPartsBin]) ifTrue: [self beep.  self delete.  ^ self].	self delete.	anEvent hand makeNewDrawingInBounds: (aPasteUpMorph paintingBoundsAround: anEvent cursorPoint) pasteUpMorph: aPasteUpMorph! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 10/25/1999 22:08'!dismiss	| aFlapTab |	"User hit the dismiss button."	(owner isKindOf: TabbedPalette)		ifTrue:			[^ owner showNoPalette].	(aFlapTab _ self pasteUpMorph correspondingFlapTab) ifNotNil:		[^ aFlapTab dismissViaHalo].	self topRendererOrSelf delete! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 10/26/1999 01:07'!hasDismissButton	submorphs isEmptyOrNil ifTrue: [^ false].	^ (submorphs first allMorphs detect:		[:possible |  (possible isKindOf: SimpleButtonMorph) and: [possible actionSelector == #dismiss]]			ifNone: [nil]) notNil! !!TileMorph methodsFor: 'mouse handling' stamp: 'sw 10/25/1999 22:02'!handlesMouseDown: evt	| aPoint |	aPoint _ evt cursorPoint.	upArrow ifNotNil: [((upArrow boundsInWorld containsPoint: aPoint) or: [downArrow boundsInWorld containsPoint: aPoint])		ifTrue: [^ true]].	suffixArrow ifNotNil: [(suffixArrow boundsInWorld containsPoint: aPoint)		ifTrue: [^ true]].	^ super handlesMouseDown: evt! !!TileMorph methodsFor: 'mouse handling' stamp: 'sw 10/25/1999 22:03'!mouseDown: evt	| aPoint |	aPoint _ evt cursorPoint.	nArrowTicks _ 0.	upArrow ifNotNil:		[(upArrow boundsInWorld containsPoint: aPoint) ifTrue: [^ self].		(downArrow boundsInWorld containsPoint: aPoint) ifTrue: [^ self]].	suffixArrow ifNotNil:		[(suffixArrow boundsInWorld containsPoint: aPoint)			 ifTrue: [self showSuffixChoices.  ^ self]].	^ super mouseDown: evt! !!TileMorph methodsFor: 'mouse handling' stamp: 'sw 10/25/1999 22:52'!trumpsMouseDown: evt	"Return true if this morph wants to handle mouse down events even when the mouse is pressed under a submorph that also wishes to preepmpt mouse down events. Complete the comment."	| aPoint |	upArrow ifNotNil:		[(upArrow boundsInWorld containsPoint: (aPoint _ evt cursorPoint))			ifTrue: [^ true].		(downArrow boundsInWorld containsPoint: aPoint)			ifTrue: [^ true]].	^ false! !!ViewerRow methodsFor: 'user interface' stamp: 'sw 10/25/1999 23:12'!rootForGrabOf: aMorph	(aMorph isKindOf: PhraseTileMorph) ifFalse: [^ nil].	^ (aMorph fullCopy isPartsDonor: false) position: aMorph positionInWorld! !