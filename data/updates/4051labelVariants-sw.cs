'From Squeak3.1alpha of 28 February 2001 [latest update: #4050] on 20 May 2001 at 10:41:35 pm'!"Change Set:		labelVariants-swDate:			20 May 2001Author:			Scott WallaceMakes it possible for a SystemWindow to exist without the standard label parapharnalia.Makes it possible for pane-border morphs and subpane dividers to have gentler colors on demand."!!Lexicon methodsFor: 'initialization' stamp: 'sw 5/18/2001 11:45'!openOnClass: aTargetClass inWorld: aWorld showingSelector: aSelector	"Create and open a SystemWindow to house the receiver, showing the categories pane.  The target-object parameter is optional -- if nil, the browser will be associated with the class as a whole but not with any particular instance of it."	| window aListMorph  catListFraction msgListFraction |	currentVocabulary ifNil: [currentVocabulary _ Vocabulary fullVocabulary].	limitClass ifNil: [limitClass _ ProtoObject].	targetClass _ aTargetClass.		window _ self windowWithLabel: self startingWindowTitle.	catListFraction _ 0.15.	msgListFraction _ 0.2.		window addMorph: self newCategoryPane frame: (0 @ 0 corner: 1 @ catListFraction).	aListMorph _ PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph setNameTo: 'messageList'.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph frame: (0 @ catListFraction corner: 1 @ (catListFraction + msgListFraction)).	self 		addLowerPanesTo: window 		at: (0 @ (catListFraction + msgListFraction)  corner: 1@1) 		with: nil.	window changeAllBorderColorsFrom: Color black to: (self defaultBackgroundColor mixed: 0.5 with: Color black).	window color: self defaultBackgroundColor.	window openInWorld: aWorld.	self reformulateCategoryList.	aSelector ifNotNil: [self selectSelectorItsNaturalCategory: aSelector] ifNil: [self categoryListIndex: 1].	self adjustWindowTitle.! !!Morph methodsFor: 'e-toy support' stamp: 'sw 5/18/2001 11:17'!changeAllBorderColorsFrom: oldColor to: newColor	"Set any occurrence of oldColor as a border color in my entire submorph tree to be newColor"	(self allMorphs select: [:m | m respondsTo: #borderColor:]) do:		[:aMorph | aMorph borderColor = oldColor ifTrue: [aMorph borderColor: newColor]]! !!BorderedMorph methodsFor: 'geometry' stamp: 'sw 5/18/2001 22:52'!acquireBorderWidth: aBorderWidth	"Gracefully acquire the new border width, keeping the interior area intact and not seeming to shift"	| delta |	(delta _ aBorderWidth- self borderWidth) == 0 ifTrue: [^ self].	self bounds: ((self bounds origin - (delta @ delta)) corner: (self bounds corner + (delta @ delta))).	self borderWidth: aBorderWidth.	self layoutChanged! !!SubpaneDividerMorph methodsFor: 'initialization' stamp: 'sw 5/18/2001 11:27'!borderColor	"I behave like a border for the purpose of browser beautifying, so I obey this protocol, to advantage"	^ self color! !!SubpaneDividerMorph methodsFor: 'initialization' stamp: 'sw 5/18/2001 11:26'!borderColor: aColor	"I behave like a border for the purpose of browser beautifying, so I obey this protocol, to advantage"	self color: aColor! !!SystemWindow methodsFor: 'initialization' stamp: 'sw 5/18/2001 16:11'!addCloseBox	"If I have a labelArea, add a close box to it"	| frame |	labelArea ifNil: [^ self].	closeBox _ SimpleButtonMorph new borderWidth: 0;			label: 'X' font: Preferences standardButtonFont; color: Color transparent;			actionSelector: #closeBoxHit; target: self; extent: 14@14;			setBalloonText: 'close this window'.	frame _ LayoutFrame new.	frame leftFraction: 0; leftOffset: 4; topFraction: 0; topOffset: 1.	closeBox layoutFrame: frame.	labelArea addMorph: closeBox.! !!SystemWindow methodsFor: 'initialization' stamp: 'sw 5/19/2001 10:42'!addLabel	"Add a label latterly.  Does not yet get layouts right"	| aFont |	label _ StringMorph contents: (labelString ifNil: ['Untitled'])				font: Preferences windowTitleFont emphasis: 1.		"Add collapse box so #labelHeight will work"		aFont _ Preferences standardButtonFont.		collapseBox _ SimpleButtonMorph new borderWidth: 0;				label: 'O' font: aFont; color: Color transparent;				actionSelector: #collapseOrExpand; target: self; extent: 14@14;				setBalloonText: 'collapse this window'.		stripes _ Array with: (RectangleMorph newBounds: bounds)  "see extent:"					with: (RectangleMorph newBounds: bounds).		self addLabelArea.		labelArea addMorph: (stripes first borderWidth: 1).		labelArea addMorph: (stripes second borderWidth: 2).		self setLabelWidgetAllowance.		self addCloseBox.		self addMenuControl.		labelArea addMorph: label.		labelArea addMorph: collapseBox.		self setFramesForLabelArea.		label on: #mouseDown send: #relabelEvent: to: self.		Preferences noviceMode ifTrue:			[closeBox ifNotNil: [closeBox setBalloonText: 'close window'].			menuBox ifNotNil: [menuBox setBalloonText: 'window menu'].			collapseBox ifNotNil: [collapseBox setBalloonText: 'collapse/expand window']]! !!SystemWindow methodsFor: 'initialization' stamp: 'sw 5/20/2001 22:31'!addMenuControl	"If I have a label area, add a menu control to it.  NB: for the moment, we always supply balloon help for this control, until people get used to it; eventually, we mays switch to showing this balloon help only in novice mode, as we do for the other standard window controls."	| frame |	labelArea ifNil: [^ self].  "No menu if no label area"	menuBox _ IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'TinyMenu'); color: Color transparent; 			actWhen: #buttonDown;			actionSelector: #offerWindowMenu; target: self;			setBalloonText: 'window menu'.	frame _ LayoutFrame new.	frame leftFraction: 0; leftOffset: 19; topFraction: 0; topOffset: 1.	menuBox layoutFrame: frame.	labelArea addMorph: menuBox.! !!SystemWindow methodsFor: 'initialization' stamp: 'sw 5/20/2001 22:34'!initialize	"Initialize a system window.  Add label, stripes, etc., if desird"	| aFont |	super initialize.	allowReframeHandles := true.	labelString ifNil: [labelString _ 'Untitled Window'].	isCollapsed _ false.	activeOnlyOnTop _ true.	paneMorphs _ Array new.	borderColor _ Color black.	borderWidth _ 1.	color _ Color black.	self layoutPolicy: ProportionalLayout new.	self wantsLabel ifTrue:		[label _ StringMorph new contents: labelString;				font: Preferences windowTitleFont emphasis: 1.		"Add collapse box so #labelHeight will work"		aFont _ Preferences standardButtonFont.		collapseBox _ SimpleButtonMorph new borderWidth: 0;				label: 'O' font: aFont; color: Color transparent;				actionSelector: #collapseOrExpand; target: self; extent: 14@14;				setBalloonText: 'collapse this window'.		stripes _ Array with: (RectangleMorph newBounds: bounds)  "see extent:"					with: (RectangleMorph newBounds: bounds).		self addLabelArea.		labelArea addMorph: (stripes first borderWidth: 1).		labelArea addMorph: (stripes second borderWidth: 2).		self setLabelWidgetAllowance.		self addCloseBox.		self addMenuControl.		labelArea addMorph: label.		labelArea addMorph: collapseBox.		self setFramesForLabelArea.		label on: #mouseDown send: #relabelEvent: to: self.		Preferences noviceMode ifTrue:			[closeBox ifNotNil: [closeBox setBalloonText: 'close window'].			menuBox ifNotNil: [menuBox setBalloonText: 'window menu'].			collapseBox ifNotNil: [collapseBox setBalloonText: 'collapse/expand window']]].	self on: #mouseEnter send: #spawnReframeHandle: to: self.	self on: #mouseLeave send: #spawnReframeHandle: to: self.	self extent: 300@200.	mustNotClose _ false.	updatablePanes _ Array new.! !!SystemWindow methodsFor: 'initialization' stamp: 'sw 5/19/2001 10:39'!setFramesForLabelArea	"an aid to converting old instances, but then I found convertAlignment (jesse welton's note)"	| frame |	labelArea ifNil: [^ self].	frame _ LayoutFrame new.	frame leftFraction: 0.5; topFraction: 0; leftOffset: label width negated // 2.	label layoutFrame: frame.	frame _ LayoutFrame new.	frame rightFraction: 1; topFraction: 0; rightOffset: -1; topOffset: 1.	collapseBox ifNotNilDo: [:cb | cb layoutFrame: frame].	stripes isEmptyOrNil ifFalse:		[frame _ LayoutFrame new.		frame leftFraction: 0; topFraction: 0; rightFraction: 1;			leftOffset: 1; topOffset: 1; rightOffset: -1.		stripes first layoutFrame: frame.		stripes first height: self labelHeight - 2.		stripes first hResizing: #spaceFill.		frame _ LayoutFrame new.		frame leftFraction: 0; topFraction: 0; rightFraction: 1;				leftOffset: 3; topOffset: 3; rightOffset: -3.		stripes last layoutFrame: frame.		stripes last height: self labelHeight - 6.		stripes last hResizing: #spaceFill].	labelArea ifNotNil:		[frame _ LayoutFrame new.		frame leftFraction: 0; topFraction: 0; rightFraction: 1;				topOffset: self labelHeight negated.		labelArea layoutFrame: frame]! !!SystemWindow methodsFor: 'geometry' stamp: 'sw 5/19/2001 02:53'!extent: newExtent 	"Set the receiver's extent to value provided"	isCollapsed		ifTrue: [super extent: newExtent x @ (self labelHeight + 2)]		ifFalse: [super extent: newExtent].	labelArea ifNotNil:		[self setStripeColorsFrom: self paneColorToUse.		label fitContents; setWidth: (label width min: bounds width - self labelWidgetAllowance).		label layoutFrame leftOffset: label width negated // 2].	isCollapsed		ifTrue: [collapsedFrame _ self bounds]		ifFalse: [fullFrame _ self bounds]! !!SystemWindow methodsFor: 'label' stamp: 'sw 5/20/2001 22:34'!labelHeight	"Answer the height for the window label.  The standard behavior is at bottom; a hook is provided so that models can stipulate other heights, in support of various less-window-looking demos."	| aHeight |	(model notNil and: [model respondsTo: #desiredWindowLabelHeightIn:]) ifTrue:		[(aHeight _ model desiredWindowLabelHeightIn: self) ifNotNil: [^ aHeight]].	^ label ifNil: [0] ifNotNil:		 [(label height + 1) max:			(collapseBox ifNotNil: [collapseBox height] ifNil: [10])]! !!SystemWindow methodsFor: 'label' stamp: 'sw 5/19/2001 10:43'!setStripeColorsFrom: paneColor	"Set the stripe color based on the given paneColor"	stripes ifNil: [^ self].	self isActive		ifTrue: [stripes second color: paneColor;					borderColor: stripes second color darker.				stripes first color: stripes second borderColor darker;					borderColor: stripes first color darker]		ifFalse: ["This could be much faster"				stripes second color: paneColor; borderColor: paneColor.				stripes first color: paneColor; borderColor: paneColor].! !!SystemWindow methodsFor: 'label' stamp: 'sw 5/18/2001 16:01'!wantsLabel	"Answer whether the receiver wants a label.  At the moment, the only way to suppress this at initialization is to call SystemWindow newWithoutLabel"	^ (self hasProperty: #suppressLabel) not! !!SystemWindow methodsFor: 'top window' stamp: 'sw 5/18/2001 23:20'!activate	"Bring me to the front and make me able to respond to mouse and keyboard"	| oldTop outerMorph sketchEditor pal |	outerMorph _ self topRendererOrSelf.	outerMorph owner ifNil: [^ self "avoid spurious activate when drop in trash"].	oldTop _ TopWindow.	TopWindow _ self.	oldTop ifNotNil: [oldTop passivate].	outerMorph owner firstSubmorph == outerMorph		ifFalse: ["Bring me (with any flex) to the top if not already"				outerMorph owner addMorphFront: outerMorph].	self submorphsDo: [:m | m unlock].	labelArea ifNotNil:		[labelArea submorphsDo: [:m | m unlock].		self setStripeColorsFrom: self paneColorToUse].	self isCollapsed ifFalse:		[model modelWakeUpIn: self.		self positionSubmorphs.		labelArea ifNil: [self adjustBorderUponActivationWhenLabeless]].	(sketchEditor _ self extantSketchEditor) ifNotNil:		[sketchEditor comeToFront.		(pal _ self world findA: PaintBoxMorph) ifNotNil:			[pal comeToFront]].! !!SystemWindow methodsFor: 'top window' stamp: 'sw 5/20/2001 22:32'!adjustBorderUponActivationWhenLabeless	"Adjust the border upon, um, activation when, um, labelless"	| aWidth |	(aWidth _ self valueOfProperty: #borderWidthWhenActive) ifNotNil:		[self acquireBorderWidth: aWidth]! !!SystemWindow methodsFor: 'top window' stamp: 'sw 5/20/2001 22:32'!adjustBorderUponDeactivationWhenLabeless	"Adjust the border upon deactivation when, labelless"	| aWidth |	(aWidth _ self valueOfProperty: #borderWidthWhenInactive) ifNotNil:		[self acquireBorderWidth: aWidth]! !!SystemWindow methodsFor: 'top window' stamp: 'sw 5/20/2001 22:36'!lockInactivePortions	"Make me unable to respond to mouse and keyboard.  Control boxes remain active, except in novice mode"	self submorphsDo:		[:m | m == labelArea ifFalse: [m lock]].	labelArea ifNotNil:		[labelArea submorphsDo: [:m |			(m == closeBox or: [m == collapseBox]) ifTrue:				[Preferences noviceMode ifTrue: [m lock] ifFalse: [m lock]]]]! !!SystemWindow methodsFor: 'top window' stamp: 'sw 5/18/2001 23:20'!passivate	"Make me unable to respond to mouse and keyboard"	self setStripeColorsFrom: self paneColorToUse.	model modelSleep.	"Control boxes remain active, except in novice mode"	self submorphsDo: [:m |		m == labelArea ifFalse:			[m lock]].	labelArea ifNotNil:		[labelArea submorphsDo: [:m |			(m == closeBox or: [m == collapseBox])				ifTrue:					[Preferences noviceMode ifTrue: [m lock]]				ifFalse:					[m lock]]]		ifNil: "i.e. label area is nil, so we're titleless"			[self adjustBorderUponDeactivationWhenLabeless].	self world ifNotNil:  "clean damage now, so dont merge this rect with new top window"		[self world == World ifTrue: [self world displayWorld]].! !!SystemWindow methodsFor: 'panes' stamp: 'sw 5/20/2001 22:33'!existingPaneColor	"Answer the existing pane color for the window, obtaining it from the first paneMorph if any, and fall back on using the second stripe color if necessary."	| aColor |	paneMorphs isEmptyOrNil		ifFalse:			[((aColor _ paneMorphs first color) isKindOf: Color)				ifTrue:					[^ aColor]].	^ stripes		ifNotNil:			[stripes second color]		ifNil:			[Color blue lighter]! !!SystemWindow methodsFor: 'layout' stamp: 'sw 5/19/2001 10:42'!convertAlignment	"Primarily Jesse Welton's code to convert old system windows to ones with modern layout scheme"	| frame |	self layoutPolicy: ProportionalLayout new.	(paneMorphs == nil or: [paneRects == nil or:[paneMorphs size ~= paneRects size]]) ifFalse:[		self addLabelArea.		self putLabelItemsInLabelArea.		self setFramesForLabelArea.		paneMorphs with: paneRects do:[:m :r|			frame _ LayoutFrame new.			frame leftFraction: r left; rightFraction: r right; topFraction: r top; bottomFraction: r bottom.			m layoutFrame: frame.			m hResizing: #spaceFill; vResizing: #spaceFill]].	(labelArea isNil and: [self wantsLabel]) ifTrue:		[self addLabelArea.		self putLabelItemsInLabelArea.		self setFramesForLabelArea.		paneMorphs ifNotNil:			[paneMorphs do: [:m |				frame := m layoutFrame ifNil: [LayoutFrame new].				frame topOffset: (frame topOffset ifNil: [0]) - self labelHeight.				(frame bottomFraction ~= 1.0) ifTrue:					[ frame bottomOffset: (frame bottomOffset ifNil: [0]) - self labelHeight ]]]].	label ifNotNil:		[frame _ LayoutFrame new.		frame leftFraction: 0.5; topFraction: 0; leftOffset: label width negated // 2.		label layoutFrame: frame].	collapseBox ifNotNil:		[frame _ LayoutFrame new.		frame rightFraction: 1; topFraction: 0; rightOffset: -1; topOffset: 1.		collapseBox layoutFrame: frame].	stripes ifNotNil:		[frame _ LayoutFrame new.		frame leftFraction: 0; topFraction: 0; rightFraction: 1;				leftOffset: 1; topOffset: 1; rightOffset: -1.		stripes first layoutFrame: frame.		stripes first height: self labelHeight - 2.		stripes first hResizing: #spaceFill.		frame _ LayoutFrame new.		frame leftFraction: 0; topFraction: 0; rightFraction: 1;				leftOffset: 3; topOffset: 3; rightOffset: -3.		stripes last layoutFrame: frame.		stripes last height: self labelHeight - 6.		stripes last hResizing: #spaceFill].	menuBox ifNotNil:		[frame _ LayoutFrame new.		frame leftFraction: 0; leftOffset: 19; topFraction: 0; topOffset: 1.		menuBox layoutFrame: frame].	closeBox ifNotNil:		[frame _ LayoutFrame new.		frame leftFraction: 0; leftOffset: 4; topFraction: 0; topOffset: 1.		closeBox layoutFrame: frame].! !!SystemWindow methodsFor: 'layout' stamp: 'sw 5/18/2001 16:09'!putLabelItemsInLabelArea	"Put label items into the label area, if there is one"	labelArea ifNotNil:		[stripes ifNotNil: [stripes do: [:stripe | labelArea addMorph: stripe]].		closeBox ifNotNil: [labelArea addMorph: closeBox].		menuBox ifNotNil: [labelArea addMorph: menuBox].		collapseBox ifNotNil: [labelArea addMorph: collapseBox].		label ifNotNil: [labelArea addMorph: label]]! !!NewWorldWindow methodsFor: 'color' stamp: 'sw 5/19/2001 10:44'!setStripeColorsFrom: paneColor	"Since our world may be *any* color, try to avoid really dark colors so title will show"	| revisedColor |	stripes ifNil: [^ self].	revisedColor _ paneColor atLeastAsLuminentAs: 0.1 .	self isActive ifTrue:		[stripes second 			color: revisedColor; 			borderColor: stripes second color darker.		stripes first 			color: stripes second borderColor darker;			borderColor: stripes first color darker.		^ self].	"This could be much faster"	stripes second 		color: revisedColor; 		borderColor: revisedColor.	stripes first 		color: revisedColor; 		borderColor: revisedColor! !!SystemWindow class methodsFor: 'instance creation' stamp: 'sw 5/18/2001 16:19'!newWithoutLabel	"Answer an instance of me without a label"	| inst |	inst _ self basicNew.	inst setProperty: #suppressLabel toValue: true.	inst initialize.	^ inst! !!NewWorldWindow reorganize!('initialization' addMorph:frame: openInWorld:)('reframe ' spawnReframeHandle:)('stepping' amendSteppingStatus wantsSteps)('color' setStripeColorsFrom: setWindowColor: updatePaneColors)!