'From Squeak2.9alpha of 12 June 2000 [latest update: #2657] on 19 September 2000 at 11:03:40 pm'!"Change Set:		SelectionTweaksPlusDate:			19 September 2000Author:			Dan IngallsRepairs the handling of color changes in selectionMorphs, and also undo for color and border changes.Also repairs the recent feature that allows control of line color by the halo set-color handle.Allow area selections to be made in paste-ups (playfields).Introduces the Preference: #emptyDragStartsASelection which determines whether selection shall be initiated by drag in the background (default) or by world/pasteUp menu (if disabled)."!BorderedMorph subclass: #SelectionMorph	instanceVariableNames: 'selectedItems slippage dupLoc dupDelta itemsAlreadySelected otherSelection undoProperties '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Support'!!Morph methodsFor: 'menus' stamp: 'di 9/19/2000 22:44'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	self maybeAddCollapseItemTo: aMenu.	(Preferences emptyDragStartsASelection not and: [self isKindOf: PasteUpMorph]) ifTrue:		[aMenu add: 'make a selection' action: #makeSelection].	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	aMenu addLine.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	self player ifNotNil:		[aMenu addLine.		aMenu add: 'make a sibling instance' action: #makeNewPlayerInstance.		aMenu balloonTextForLastItem: 'Makes another morph whose player is of the same class as this one.  Both siblings will share the same scripts'].	aMenu addLine.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	self isLocked		ifFalse:			[aMenu add: 'lock' action: #lockMorph]		ifTrue:			[aMenu add: 'unlock' action: #unlockMorph].  "probably not possible -- wouldn't get halo"	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu		defaultTarget: self;		add: 'add mouse up action' action: #addMouseUpAction;		add: 'remove mouse up action' action: #removeMouseUpAction.	aMenu addLine.	aMenu defaultTarget: self topRendererOrSelf.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	(owner == nil) ifFalse:		[aMenu add: 'send to back' action: #goBehind.		aMenu add: 'bring to front' action: #comeToFront].	aMenu defaultTarget: aHandMorph.! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/19/2000 22:46'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	(Preferences emptyDragStartsASelection not and: [argument isKindOf: PasteUpMorph]) ifTrue:		[menu add: 'make a selection' action: #makeSelection].	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	argMorph maybeAddCollapseItemTo: menu.	menu add: 'delete' action: #dismissMorph.	menu addLine.	menu add: 'copy Postscript' target: argMorph action: #clipPostscript.	menu add: 'print PS to file...' target: argMorph action: #printPSToFile.	menu addLine.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	"Give the argument control over what should be done about fill styles"	argMorph addFillStyleMenuItems: menu hand: self.	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	Smalltalk isMorphic		ifTrue: [menu add: 'inspect' action: #inspectMorph]		ifFalse: [menu add: 'inspect (in MVC)' action: #inspectMorph.				menu add: 'inspect' action: #inspectMorphInMorphic].	menu add: 'explore' target: argument action: #explore.	menu add: 'browse hierarchy' target: argument action: #browseHierarchy.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	(argMorph hasProperty: #resourceFilePath)		ifTrue: [((argMorph valueOfProperty: #resourceFilePath) endsWith: '.morph')				ifTrue: [menu add: 'save as resource' target: argMorph action: #saveAsResource].				menu add: 'update from resource' target: argMorph action: #updateFromResource]		ifFalse: [menu add: 'attach to resource' target: argMorph action: #attachToResource].	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'di 9/19/2000 22:44'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo.  Copied down from morph and hand-edited for the world"	self isWorldMorph ifFalse: [^ super addAddHandMenuItemsForHalo: aMenu hand: aHandMorph].	aMenu addLine.	Preferences emptyDragStartsASelection ifFalse:		[aMenu add: 'make a selection' action: #makeSelection].	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	aMenu addLine.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	aMenu		defaultTarget: self;		add: 'add mouse up action' action: #addMouseUpAction;		add: 'remove mouse up action' action: #removeMouseUpAction;		defaultTarget: aHandMorph.! !!PasteUpMorph methodsFor: 'world state' stamp: 'di 9/19/2000 22:17'!dragThroughOnDesktop: evt	"Draw out a selection rectangle"	| selection |	selection _ SelectionMorph newBounds: (evt cursorPoint extent: 8@8).	self addMorph: selection.	^ selection extendByHand: evt hand! !!PasteUpMorph methodsFor: 'world state' stamp: 'di 9/19/2000 22:16'!handlesMouseDown: evt	^ true! !!PasteUpMorph methodsFor: 'world state' stamp: 'di 9/19/2000 22:30'!mouseDown: evt	"Handle a mouse down event."	self isWorldMorph		ifTrue:			[evt hand newKeyboardFocus: self.			evt hand testEvent: evt				ifQuickClick: [^ self quickClickOnDesktop: evt]				ifMoved: [Preferences emptyDragStartsASelection							ifTrue: [^ self dragThroughOnDesktop: evt]].			evt hand invokeMetaMenu: evt]		ifFalse:			[evt hand testEvent: evt				ifQuickClick: [^ super mouseDown: evt]				ifMoved: [Preferences emptyDragStartsASelection							ifTrue: [^ self dragThroughOnDesktop: evt]].			^ super mouseDown: evt]! !!PolygonMorph methodsFor: 'editing' stamp: 'di 9/19/2000 22:00'!fillStyle	self isOpen		ifTrue: [^ self borderColor  "easy access to line color from halo"]		ifFalse: [^ super fillStyle]! !!PolygonMorph methodsFor: 'editing' stamp: 'di 9/19/2000 22:00'!fillStyle: newColor	self isOpen		ifTrue: [^ self borderColor: newColor  "easy access to line color from halo"]		ifFalse: [^ super fillStyle: newColor]! !!SelectionMorph methodsFor: 'undo' stamp: 'di 9/19/2000 21:53'!fillStyleForItems: fillStyleCollection	selectedItems with: fillStyleCollection do: [:m :c | m fillStyle: c]! !!SelectionMorph methodsFor: 'undo' stamp: 'di 9/19/2000 21:52'!refineUndoTarget: target selector: selector arguments: arguments in: refineBlock	"Any morph can override this method to refine its undo specification"	selector == #fillStyle: ifTrue:		[refineBlock value: target value: #fillStyleForItems: value: {undoProperties}.		^ undoProperties _ nil].	selector == #borderColor: ifTrue:		[refineBlock value: target value: #borderColorForItems: value: {undoProperties}.		^ undoProperties _ nil].	selector == #borderWidth: ifTrue:		[refineBlock value: target value: #borderWidthForItems: value: {undoProperties}.		^ undoProperties _ nil].	selector == #undoMove:redo:owner:bounds:predecessor: ifTrue:		["This is the biggy.  Need to gather parameters for all selected items"		refineBlock value: target			value: #undoMove:redo:owner:bounds:predecessor:			value: {arguments first.					arguments second.					selectedItems collect: [:m | m owner].					selectedItems collect: [:m | m bounds].					selectedItems collect: [:m | m owner morphPreceding: m]}].	refineBlock value: target value: selector value: arguments! !!SelectionMorph methodsFor: 'halo commands' stamp: 'di 9/19/2000 18:25'!borderColor: aColor	| bordered |	bordered _ selectedItems select: [:m | m isKindOf: BorderedMorph].	undoProperties ifNil: [undoProperties _ bordered collect: [:m | m borderColor]].	bordered do: [:m | m borderColor: aColor]! !!SelectionMorph methodsFor: 'halo commands' stamp: 'di 9/19/2000 18:25'!borderWidth: aWidth	| bordered |	bordered _ selectedItems select: [:m | m isKindOf: BorderedMorph].	undoProperties ifNil: [undoProperties _ bordered collect: [:m | m borderWidth]].	bordered do: [:m | m borderWidth: aWidth]! !!SelectionMorph methodsFor: 'halo commands' stamp: 'di 9/19/2000 21:53'!fillStyle: aColor	undoProperties ifNil: [undoProperties _ selectedItems collect: [:m | m fillStyle]].	selectedItems do: [:m | m fillStyle: aColor]! !!TextPlusPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'di 9/19/2000 22:31'!mouseDown: evt	"Handle a mouse down event."	evt hand 		testEvent: evt		ifQuickClick: ["^ self" "quickClickOnDesktop: evt"]		ifMoved: [Preferences emptyDragStartsASelection							ifTrue: [^ self dragThroughOnDesktop: evt]].! !!TheWorldMenu methodsFor: 'construction' stamp: 'di 9/19/2000 22:56'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu _ MenuMorph new defaultTarget: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu from: {		{'previous project' . { #myWorld . #goBack } }.		{'jump to project...' . { #myWorld . #jumpToProject } }.		{'save project on file...' . { #myWorld  . #saveOnFile } }.		{'load project from file...' . { self  . #loadProject } }.		nil}.	myHand addUndoItemsTo: menu.		self fillIn: menu from: {		{'restore display' . { Display . #restoreMorphicDisplay } }.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'open...' . { self  . #openWindow } }.			{'windows & flaps...' . { self  . #windowsDo } }.			{'changes...' . { self  . #changesDo } }}].	self fillIn: menu from: { 		{'help...' . { self  . #helpDo } }.		{'appearance...' . { self  . #appearanceDo } }}.	Preferences simpleMenus ifFalse:		[Preferences emptyDragStartsASelection ifFalse:			[self fillIn: menu from: { {'make a selection' . { #myHand . #makeSelection} } }].		self fillIn: menu from: {			{'do...' . { Utilities . #offerCommonRequests} } }].	self fillIn: menu from: { 		nil.		{'new morph...' . { self  . #newMorph } }.		{'authoring tools...' . { self  . #scriptingDo } }.		{'playfield options...' . { self  . #playfieldDo } }.		{'projects...' . { self  . #projectDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'print PS to file...' . { self  . #printWorldOnFile } }.			{'debug...' . { self  . #debugDo } }}].	self fillIn: menu from: { 		nil.		{'save' . { self  . #saveSession } }.		{'save as...' . { Smalltalk . #saveAs } }.		{'save and quit' . { self  . #saveAndQuit } }.		{'quit' . { self  . #quitSession } }}.	^ menu! !SelectionMorph removeSelector: #color:!SelectionMorph removeSelector: #colorForItems:!PolygonMorph removeSelector: #color!PolygonMorph removeSelector: #color:!"Postscript:Establish the areaSelect preference."Preferences addPreference: #emptyDragStartsASelection category: #morphic default: trueballoonHelp: 'A click and drag in the background of a world or playfield will start a selection, allowing you to grab and operate on several morphs at a time.  If disabled, you may use the ''make a selection'' command in the world or playfield menu instead.'!