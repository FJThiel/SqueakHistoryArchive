'From Squeak2.9alpha of 13 June 2000 [latest update: #3269] on 16 January 2001 at 5:06:01 pm'!!MenuItemMorph methodsFor: 'accessing' stamp: 'ar 1/16/2001 16:58'!contentString	^self valueOfProperty: #contentString! !!MenuItemMorph methodsFor: 'accessing' stamp: 'ar 1/16/2001 16:58'!contentString: aString	aString == nil		ifTrue:[self removeProperty: #contentString]		ifFalse:[self setProperty: #contentString toValue: aString]! !!MenuItemMorph methodsFor: 'accessing' stamp: 'ar 1/16/2001 16:57'!contents: aString withMarkers: aBool	^self contents: aString withMarkers: aBool inverse: false! !!MenuItemMorph methodsFor: 'accessing' stamp: 'ar 1/16/2001 17:02'!contents: aString withMarkers: aBool inverse: inverse	"Set the menu item entry. If aBool is true, parse aString for embedded markers."	| markerIndex marker indent |	self contentString: nil. "get rid of old"	aBool ifFalse:[^super contents: aString].	self removeAllMorphs. "get rid of old markers if updating"	(aString at: 1) = $< ifFalse:[^super contents: aString].	markerIndex _ aString indexOf: $>.	markerIndex = 0 ifTrue:[^super contents: aString].	marker _ (aString copyFrom: 1 to: markerIndex) asLowercase.	(#('<on>' '<off>' '<yes>' '<no>') includes: marker) ifFalse:[^super contents: aString].	self contentString: aString. "remember actual string"	(marker = '<on>' or:[marker = '<yes>']) ~= inverse		ifTrue:[marker _ self onImage]		ifFalse:[marker _ self offImage].	"Indent the string using white spaces"	indent _ ' '.	font _ self fontToUse.	[ (font widthOfString: indent) < (marker width + 4) ] 		whileTrue:[indent _ indent copyWith: Character space].	"Set the string"	super contents: indent, (aString copyFrom: markerIndex+1 to: aString size).	"And set the marker"	marker _ ImageMorph new image: marker.	marker position: (self left) @ (self top + 2).	self addMorphFront: marker.! !!MenuItemMorph methodsFor: 'events' stamp: 'ar 1/16/2001 17:04'!mouseUp: evt	"Handle a mouse up event. Menu items get activated when the mouse is over them. Do nothing if we're not in a 'valid menu transition', meaning that the current hand focus must be aimed at the owning menu."	evt hand mouseFocus == owner ifFalse:[^self].	self contentString ifNotNil:[		self contents: self contentString withMarkers: true inverse: true.		self refreshWorld.		(Delay forMilliseconds: 200) wait].	self invokeWithEvent: evt.		! !