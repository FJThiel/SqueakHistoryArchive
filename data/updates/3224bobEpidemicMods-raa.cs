'From Squeak2.9alpha of 17 July 2000 [latest update: #3286] on 19 January 2001 at 3:08:22 pm'!"Change Set:		bobEpidemicModsDate:			19 January 2001Author:			Bob ArningSome changes to make Epidemic more doable in EToys:- added a phrase 'touchesA:' to test for intersection with another morph with a certain appearance.- decreased the step time for morphs with players from 125 ms to 10- ensured that flexed morphs use the lower step time (the player is on the transformation!!)"!!Form methodsFor: 'testing' stamp: 'RAA 1/19/2001 15:04'!appearsToBeSameCostumeAs: anotherForm	(anotherForm isKindOf: self class) ifFalse: [^false].	anotherForm depth = self depth ifFalse: [^false].	^anotherForm bits = bits! !!Morph methodsFor: 'stepping and presenter' stamp: 'RAA 1/16/2001 17:20'!stepTime	"Answer the desired time between steps in milliseconds. This default implementation requests that the 'step' method be called once every second."	^ self topRendererOrSelf player ifNotNil: [10] ifNil: [1000]! !!Morph methodsFor: 'e-toy support' stamp: 'RAA 1/13/2001 11:27'!appearsToBeSameCostumeAs: aMorph	^false! !!Morph class methodsFor: 'scripting' stamp: 'RAA 1/13/2001 07:45'!additionsToViewerCategories	"Answer a list of (<categoryName> <list of category specs>) pairs that characterize the phrases this kind of morph wishes to add to various Viewer categories."	^ #(		(#basic (			(slot x 'The x coordinate' number readWrite player getX player setX:)			(slot y  	'The y coordinate' number readWrite	player 	getY player setY:)			(slot heading  'Which direction the object is facing.  0 is straight up' number readWrite player getHeading player setHeading:)			(command forward: 'Moves the object forward in the direction it is heading' number)			(command turn: 'Change the heading of the object by the specified amount' number)			(command beep: 'Make the specified sound' sound)))		(#'color & border' (			(slot color 'The color of the object' color readWrite player getColor  player  setColor:)			(slot colorUnder 'The color under the center of the object' color readOnly player getColorUnder unused  unused )			(slot borderColor 'The color of the object''s border' color readWrite player getBorderColor player  setBorderColor:)			(slot borderWidth 'The width of the object''s border' number readWrite player getBorderWidth player setBorderWidth:)			(slot roundedCorners 'Whether corners should be rounded' boolean readWrite player getRoundedCorners player setRoundedCorners:)))		(geometry (			(slot  scaleFactor 'Yeah, the scale factor' number readWrite player getScaleFactor player setScaleFactor:)			(slot  left   'The left edge, yeah' number readWrite player getLeft  player  setLeft:)			(slot right  'The right edge, yeah' number readWrite player getRight  player  setRight:)			(slot  top  'The top edge' number readWrite player getTop  player  setTop:) 			(slot  bottom  'The bottom edge' number readWrite player getBottom  player  setBottom:) 			(slot  width  'The width' number readWrite player getWidth  player  setWidth:)			(slot  height  'The height' number readWrite player getHeight  player  setHeight:) 			(slot x   'The x coordinate' number readWrite player  getX   player setX:)			(slot y   'The y coordinate' number readWrite player  getY  player setY:)			(slot heading  'Which direction the object is facing.  0 is straight up' number readWrite player getHeading  player setHeading:)))		(miscellaneous (			(command doMenuItem: 'do the menu item' menu) 			(command show 'show the guy')			(command hide 'hide the guy')			(command wearCostumeOf: 'wear the costume of...' player)			(command startScript: 'start the given script ticking' string)			(command stopScript: 'make the given script be "normal"' string)			(command pauseScript: 'make the given script be "paused"' string)			(slot copy 'returns a copy of this object' player readOnly player getNewClone	 unused unused)			(slot elementNumber 'my index in my container' number readWrite player getIndexInOwner player setIndexInOwner:)))		(motion (			(slot x 'The x coordinate' number readWrite player getX player setX:)			(slot y  	'The y coordinate' number readWrite	player 	getY player setY:)			(slot heading  'Which direction the object is facing.  0 is straight up' number readWrite player getHeading player setHeading:)			(command forward: 'Moves the object forward in the direction it is heading' number)			(slot obtrudes 'whether the object sticks out over its container''s edge' boolean readOnly player getObtrudes unused unused) 			(command moveToward: 'move toward the given object' player) 			(command turn: 'Change the heading of the object by the specified amount' number)			(command bounce: 'bounce off the edge if hit' sound) 			(command wrap 'wrap off the edge if appropriate') 			(command followPath 'follow the yellow brick road') 			(command goToRightOf: 'place this object to the right of another' player)))		(#'pen use' (			(slot penColor 'the color of ink used by the pen' color readWrite player getPenColor player setPenColor:) 			(slot penSize 'the width of the pen' number readWrite player getPenSize player setPenSize:) 			(slot penDown 'whether the pen is currently down' boolean readWrite player getPenDown player setPenDown:)))		(#tests (			(slot isOverColor 'whether any part of the object is over the given color' boolean	readOnly player dummy unused unused) 			(slot isUnderMouse 'whether the object is under the current mouse position' boolean readOnly	player getIsUnderMouse unused unused)			(slot colorSees	'whether the given color sees the given color' boolean readOnly	player dummy	unused	unused)			(slot touchesA	'whether I touch something that looks like...' boolean readOnly	player dummy	unused	unused)			(slot obtrudes 'whether the object sticks out over its container''s edge' boolean readOnly player getObtrudes unused unused))))! !!Player methodsFor: 'misc' stamp: 'RAA 1/16/2001 17:22'!touchesA: aPrototypicalPlayer	| envelope myBounds trueNeighbor trueGoal trueSelf |	aPrototypicalPlayer ifNil: [^false].	envelope _ costume owner ifNil: [^false].	myBounds _ costume bounds.	trueSelf _ costume renderedMorph.	trueGoal _ aPrototypicalPlayer costume renderedMorph.	envelope submorphs do: [ :each |		trueNeighbor _ each renderedMorph.		(trueNeighbor == trueGoal or: [trueNeighbor == trueSelf]) ifFalse: [			(myBounds intersects: each bounds) ifTrue: [				(trueGoal appearsToBeSameCostumeAs: trueNeighbor) ifTrue: [ ^true].			].		].	].	^false! !!SketchMorph methodsFor: 'e-toy support' stamp: 'RAA 1/13/2001 11:38'!appearsToBeSameCostumeAs: aMorph	(aMorph isKindOf: self class) ifFalse: [^false].	^originalForm == aMorph form or: [		originalForm appearsToBeSameCostumeAs: aMorph form	]! !!Viewer methodsFor: 'as yet unclassified' stamp: 'RAA 1/13/2001 11:14'!touchesAPhrase	| outerPhrase |	outerPhrase _ PhraseTileMorph new setOperator: #+ "temp dummy" 				type: #boolean rcvrType: #player argType: #player.	(outerPhrase submorphs at: 2) delete.	"operator"	outerPhrase addMorphBack: (TileMorph new setOperator: #touchesA:).	(outerPhrase submorphs at: 2) goBehind.		"Make it third"	outerPhrase submorphs last addMorph: (		TileMorph new			setObjectRef: nil "disused parm"			actualObject: scriptedPlayer;			typeColor: (ScriptingSystem colorForType: #player)	).	^ outerPhrase! !!CategoryViewer methodsFor: 'entries' stamp: 'RAA 1/13/2001 09:37'!addTouchesADetailTo: aRow	| clrTile readout aTile |	aRow addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer".	aRow addMorphBack: (clrTile _ self tileForSelf).	aRow addMorphBack: (AlignmentMorph new beTransparent).  "flexible spacer"	"readout _ UpdatingStringMorphWithArgument new			target: scriptedPlayer; getSelector: #seesColor:; growable: false; putSelector: nil;			argumentTarget: clrTile colorSwatch argumentGetSelector: #color.	readout useDefaultFormat.	aTile _ StringReadoutTile new typeColor: Color lightGray lighter.	aTile addMorphBack: readout.	aRow addMorphBack: aTile.	aTile setLiteralTo: (scriptedPlayer seesColor: clrTile colorSwatch color) printString width: 30"! !!CategoryViewer methodsFor: 'entries' stamp: 'RAA 1/13/2001 09:32'!phraseForSlot: slotSpec	"Return a PhraseTileMorph representing a variable belonging to the player"	"The slot spec if a tuple with the following structure:		1	#slot		2	slot name		3	balloon help		4	slot type		5	#readOnly,# readWrite, or #writeOnly		6	getter receiver indicator		7	getter selector		8	setter receiver indicator		9	setter selector	NB:	all are symbols except #3, which is a string"	| r anArrow slotName getterButton ut cover inner |	r _ ViewerRow newRow		color: self color;		beSticky;		elementSymbol: (slotName _ slotSpec second);		wrapCentering: #center;		cellPositioning: #leftCenter.	r addMorphBack: (self slotHeaderFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: (self infoButtonFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	ut _ scriptedPlayer costume world valueOfProperty: #universalTiles ifAbsent: [false].	ut ifTrue: [inner _ self newTilesFor: scriptedPlayer getter: slotSpec.			cover _ (Morph new) color: Color transparent.			cover extent: inner fullBounds extent.			(getterButton _ cover copy) addMorph: cover; addMorphBack: inner.			cover on: #mouseDown send: #newMakeGetter:from:forPart:					to: self withValue: slotSpec]		ifFalse: [r addMorphBack: self tileForSelf bePossessive.			r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"			getterButton _ self getterButtonFor: slotName type: slotSpec fourth].	r addMorphBack: getterButton.	getterButton setBalloonText: slotSpec third.	(slotName == #isOverColor) ifTrue: [		self addIsOverColorDetailTo: r.		^ r	].	(slotName == #touchesA) ifTrue: [		self addTouchesADetailTo: r.		^ r	].	(slotSpec fifth == #readOnly) ifFalse:		[r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"		anArrow _ ut 			ifTrue: [self arrowSetterButton: #newMakeSetter:from:forPart:						args: slotSpec]			ifFalse: [self arrowSetterButton: #makeSetter:from:forPart:						args: (Array with: slotName with: slotSpec fourth)].		r addMorphBack: anArrow.		].	r addMorphBack: (AlignmentMorph new beTransparent).  "flexible spacer"	(#(colorSees playerSeeingColor copy touchesA) includes: slotName) ifFalse: 		[r addMorphBack: (self readoutFor: slotName type: slotSpec fourth readOnly: slotSpec fifth getSelector: slotSpec seventh putSelector: slotSpec ninth)].	anArrow ifNotNil: [anArrow step].	^ r! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'RAA 1/13/2001 11:42'!makeGetter: evt from: aMorph forPart: args	| m selfTile selector aType firstArg |	(aType _ args last) == #unknown ifTrue: [^ self beep].	(#(colorSees isOverColor touchesA) includes: (firstArg _ args first))		ifFalse:			[m _ PhraseTileMorph new setSlotRefOperator: args first asSymbol type: aType]		ifTrue:			[(firstArg == #colorSees) ifTrue: [m _ self colorSeesPhrase].			(firstArg == #isOverColor) ifTrue: [m _ self seesColorPhrase].			(firstArg == #touchesA) ifTrue: [m _ self touchesAPhrase].		].	selfTile _ self tileForSelf bePossessive.	selfTile position: m firstSubmorph position.	m firstSubmorph addMorph: selfTile.	selector _ m submorphs at: 2.	(aType == #number) ifTrue:		[selector addSuffixArrow].	selector updateLiteralLabel.	m enforceTileColorPolicy.	owner ifNotNil: [self primaryHand attachMorph: m]		ifNil: [^ m].! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'RAA 1/13/2001 09:42'!newTilesFor: aPlayer command: aSpec	| ms messageNodeMorph argTile argArray sel |	"Return universal tiles for a command.  Record who self is."	sel _ aSpec second.	aSpec size > 3 		ifTrue: [argTile _ aPlayer tileForArgType: aSpec fourth inViewer: nil.				argArray _ Array with: (aSpec fourth == #player 					ifTrue: [argTile actualObject]					ifFalse: [argTile literal]).	"default value for each type"				sel == #colorSees ifTrue: [sel _ #color:sees:.  							argArray _ argArray, argArray].	"two colors"				sel == #isOverColor ifTrue: [sel _ #seesColor:].				sel == #touchesA ifTrue: [sel _ #touchesA:].		]		ifFalse: [argArray _ #()].	ms _ MessageSend receiver: aPlayer selector: sel arguments: argArray.	messageNodeMorph _ ms asTilesIn: aPlayer class.	^ messageNodeMorph setProperty: #whoIsSelf toValue: aPlayer. ! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'RAA 1/13/2001 11:42'!newTilesFor: aPlayer getter: aSpec	| ms messageNodeMorph argTile argArray |	"Return universal tiles for a getter on this property.  Record who self is."	ms _ MessageSend receiver: aPlayer selector: aSpec seventh arguments: #().	aSpec second == #colorSees ifTrue: [		ms selector: #color:sees:.		argTile _ aPlayer tileForArgType: #color inViewer: nil.		argArray _ Array with: argTile colorSwatch color with: argTile colorSwatch color copy. 		ms arguments: argArray].	aSpec second == #isOverColor ifTrue: [		ms selector: #seesColor:.		argTile _ aPlayer tileForArgType: #color inViewer: nil.		ms arguments: (Array with: argTile colorSwatch color)].	aSpec second == #touchesA ifTrue: [		ms selector: #touchesA:.		argTile _ aPlayer tileForArgType: #player inViewer: nil.		ms arguments: (Array with: argTile colorSwatch color)].	messageNodeMorph _ ms asTilesIn: aPlayer class.	^ messageNodeMorph setProperty: #whoIsSelf toValue: aPlayer. ! !