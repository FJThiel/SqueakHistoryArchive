'From Squeak3.2 of 11 July 2002 [latest update: #4952] on 11 August 2002 at 9:29:26 pm'!"Change Set:		ClassPoolFix-bgDate:			11 August 2002Author:			Boris GaertnerAt Aug 9, 2002 Bob Arning reported that it is currently not possible to add an instance variable and a class variable at the same time. The reason is seemingly that classPool is not copied when the new class is created. This change set is a proposal to fix that but it should be carefully checked by others. "!!Class methodsFor: 'accessing' stamp: 'BG 8/11/2002 20:53'!classPoolFrom: aClass	"share the classPool with aClass."	classPool := aClass classPool! !!ClassBuilder methodsFor: 'class definition' stamp: 'BG 8/11/2002 20:53'!newSubclassOf: newSuper type: type instanceVariables: instVars from: oldClass unsafe: unsafe	"Create a new subclass of the given superclass.	Note: The new class may be meta."	| newFormat newClass meta |	"Compute the format of the new class"	newFormat _ 		self computeFormat: type 			instSize: instVars size 			forSuper: newSuper 			ccIndex: (oldClass ifNil:[0] ifNotNil:[oldClass indexIfCompact]).	newFormat == nil ifTrue:[^nil].	"Check if we really need a new subclass"	(oldClass ~~ nil and:[		newSuper == oldClass superclass and:[			newFormat = oldClass format and:[				instVars = oldClass instVarNames]]]) 					ifTrue:[^oldClass].	unsafe ifFalse:[		"Make sure we don't redefine any dangerous classes"		(self tooDangerousClasses includes: oldClass name) ifTrue:[			self error: oldClass name, ' cannot be changed'.		].		"Check if the receiver should not be redefined"		(oldClass ~~ nil and:[oldClass shouldNotBeRedefined]) ifTrue:[			self notify: oldClass name asText allBold, 						' should not be redefined!! \Proceed to store over it.' withCRs]].	(oldClass == nil or:[oldClass isMeta not]) ifTrue:["Requires new metaclass"		meta _ Metaclass new.		meta			superclass: (newSuper ifNil:[Class] ifNotNil:[newSuper class])			methodDictionary: MethodDictionary new			format: (newSuper ifNil:[Class format] ifNotNil:[newSuper class format]).		meta superclass addSubclass: meta. "In case of Class"		newClass _ meta new.          oldClass notNil            ifTrue: [newClass classPoolFrom: oldClass].	] ifFalse:[ newClass _ oldClass shallowCopy].	newClass 		superclass: newSuper		methodDictionary: MethodDictionary new		format: newFormat;		setInstVarNames: instVars;		organization: (oldClass ifNotNil:[oldClass organization]).	^newClass! !