'From Squeak2.8alpha of 4 February 2000 [latest update: #1919] on 15 March 2000 at 10:58:02 pm'!"Change Set:		11MoreUnimplemented-smaDate:			15 March 2000Author:			Stefan Matthias AustAs previous changeset, removal of sends of unimplemented methods, either dead code, remains of porting code from other Smalltalks or simply spelling mistakes."!!ApplescriptInstance methodsFor: 'interpreting' stamp: 'sma 3/15/2000 21:46'!compile: aString	^ self compile: aString mode: 0! !!BitEditor methodsFor: 'menu messages' stamp: 'sma 3/15/2000 21:10'!setTransparentColor	squareForm fillColor: Color gray.	color _ Color transparent! !!PluggableTextController methodsFor: 'transcript' stamp: 'sma 3/15/2000 21:39'!bsText	self changeText: (self text copyFrom: 1 to: (self text size - 1 max: 0))! !!PluggableTextMorph methodsFor: 'updating' stamp: 'sma 3/15/2000 21:40'!update: aSymbol	aSymbol == #flash ifTrue: [^ self flash].	aSymbol == getTextSelector ifTrue:			[self setText: self getText.			^ self setSelection: self getSelection].	aSymbol == getSelectionSelector ifTrue: [^ self setSelection: self getSelection].	(aSymbol == #autoSelect and: [getSelectionSelector ~~ nil]) ifTrue:			[self handleEdit:				[textMorph editor setSearch: model autoSelectString;							againOrSame: true]].	aSymbol == #clearUserEdits ifTrue: [^ self hasUnacceptedEdits: false].	aSymbol == #wantToChange ifTrue:			[self canDiscardEdits ifFalse: [^ self promptForCancel].			^ self].	aSymbol == #appendEntry ifTrue:			[self handleEdit: [self appendEntry].			^ self refreshWorld].	aSymbol == #clearText ifTrue:			[self handleEdit: [self changeText: Text new].			^ self refreshWorld].	aSymbol == #bs ifTrue:			[self handleEdit: [self bsText].			^ self refreshWorld].	aSymbol == #codeChangedElsewhere ifTrue:			[self hasEditingConflicts: true.			^ self changed]! !!PluggableTextMorph methodsFor: 'transcript' stamp: 'sma 3/15/2000 21:40'!bsText	self changeText: (self text copyFrom: 1 to: (self text size - 1 max: 0))! !!PluggableTextView methodsFor: 'updating' stamp: 'sma 3/15/2000 21:39'!update: aSymbol	"Refer to the comment in View|update:. Do nothing if the given symbol does not match any action. "	aSymbol == #wantToChange ifTrue:			[self canDiscardEdits ifFalse: [self promptForCancel].  ^ self].	aSymbol == #flash ifTrue: [^ controller flash].	aSymbol == getTextSelector ifTrue: [^ self updateDisplayContents].	aSymbol == getSelectionSelector ifTrue: [^ self setSelection: self getSelection].	aSymbol == #clearUserEdits ifTrue: [^ self hasUnacceptedEdits: false].	(aSymbol == #autoSelect and: [getSelectionSelector ~~ nil]) ifTrue:			[^ controller setSearch: model autoSelectString;					againOrSame: true].	aSymbol == #appendEntry ifTrue:			[^ controller doOccluded: [controller appendEntry]].	aSymbol == #clearText ifTrue:			[^ controller doOccluded:				[controller changeText: Text new]].	aSymbol == #bs ifTrue:			[^ controller doOccluded:				[controller bsText]].	aSymbol == #codeChangedElsewhere ifTrue:			[^ self hasEditingConflicts: true]! !!StrikeFont methodsFor: 'file in/out' stamp: 'sma 3/15/2000 21:54'!newFromStrike: fileName	"Build an instance from the strike font file name. The '.strike' extension	is optional."	| strike startName raster16 |	name _ fileName copyUpTo: $..	"assumes extension (if any) is '.strike'".	strike _ FileStream oldFileNamed: name, '.strike.'.	strike binary.	strike readOnly.		"strip off direcory name if any"	startName _ name size.	[startName > 0 and: [((name at: startName) ~= $>) & ((name at: startName) ~= $])]]		whileTrue: [startName _ startName - 1].	name _ name copyFrom: startName+1 to: name size.	type			_		strike nextWord.		"type is ignored now -- simplest												assumed.  Kept here to make												writing and consistency more												straightforward."	minAscii		_		strike nextWord.	maxAscii		_		strike nextWord.	maxWidth		_		strike nextWord.	strikeLength	_		strike nextWord.	ascent			_		strike nextWord.	descent			_		strike nextWord.	"xOffset			_"		strike nextWord. 		raster16			_		strike nextWord.		superscript		_		ascent - descent // 3.		subscript		_		descent - ascent // 3.		emphasis		_		0.	glyphs			_	Form extent: (raster16 * 16) @ (self height)  							offset: 0@0.		glyphs bits fromByteStream: strike.	xTable _ (Array new: maxAscii + 3) atAllPut: 0.	(minAscii + 1 to: maxAscii + 3) do:		[:index | xTable at: index put: strike nextWord].	"Set up space character"	((xTable at: (Space asciiValue + 2))  = 0 or:			[(xTable at: (Space asciiValue + 2)) = (xTable at: (Space asciiValue + 1))])		ifTrue:	[(Space asciiValue + 2) to: xTable size do:					[:index | xTable at: index put: ((xTable at: index) + DefaultSpace)]].	strike close.	self setStopConditions ! !!ThreeDSParser class methodsFor: 'utilities' stamp: 'sma 3/15/2000 20:59'!initializeChunkDescriptions	"Initialize Class variable ChunkDescriptions from the documentation"	"ThreeDSParser initializeChunkDescriptions "	| s id tag comment sl c |	s := ReadStream on: self chunkDocumentation.	ChunkDescriptions := Dictionary new: 100.	id := tag := comment := nil.	[s atEnd] whileFalse: [		s peek = Character tab			ifFalse: [				id isNil ifFalse: [					ChunkDescriptions add: (ThreeDSChunkDescription						id: id name: tag comment: comment contents)].				id := Integer readFrom: s base: 16.				s skip: 2.				sl := ReadStream on: (s upTo: Character cr).				tag := OrderedCollection new.				[(c := sl next) isNil or: [c isSeparator]] whileFalse: [tag add: c].				tag := String withAll: tag.				sl skipSeparators.				comment := WriteStream on: String new]			ifTrue: [comment nextPutAll: s nextLine; nextPut: Character cr]		].	ChunkDescriptions add: (ThreeDSChunkDescription						id: id name: tag comment: comment contents)! !!TimeProfileBrowser methodsFor: 'private' stamp: 'sma 3/15/2000 21:42'!selectedMessage	"Answer the source method for the currently selected message."	| source |	self setClassAndSelectorIn: [:class :selector | 		source _ class sourceMethodAt: selector ifAbsent: [^ 'Missing'].		Preferences browseWithPrettyPrint ifTrue:			[source _ class compilerClass new				format: source in: class notifying: nil decorated: false].		^ source asText makeSelectorBoldIn: class].	^''! !!TranscriptStream methodsFor: 'stream extensions' stamp: 'sma 3/15/2000 21:28'!bs	self position > 0 ifTrue: [^ self skip: -1].	self changed: #bs! !Compiler removeSelector: #translate:withLocals:noPattern:ifFail:!TTFontDescription class removeSelector: #glyphs:mapping:bounds:!