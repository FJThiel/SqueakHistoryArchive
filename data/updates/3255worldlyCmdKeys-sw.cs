'From Squeak2.9alpha of 5 August 2000 [latest update: #3318] on 29 January 2001 at 1:06:14 am'!"Change Set:		worldlyCmdKeys-swDate:			29 January 2001Author:			Scott WallaceMore cmd-key shortcuts for the morphic desktop, including:	cmd-r	restore display	cmd-R	find a recent-submissions browser	cmd-C	find a change sorter	cmd-k	open a new worKspaceLook in method PasteUpMorph.keystrokeInWorld: for the complete current list; you might be surprised at what you can obtain via the keyboard these days; some of the other commands avaiilable are:	cmd-b	open a new browser	cmd-t	find a transcript	cmd-w	close the top window	cmd-\	send top window to backSome users will surely want to modify that method.  A cleaner and more malleable architecture for associating cmd keys with desktop actions would be welcome."!!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 1/11/2001 12:57'!findAChangeSorter: evt	"Locate a change sorter, open it, and bring it to the front.  Create one if necessary.  Only works in morphic, initially, probably"	| aWindow |	submorphs do:		[:aMorph | (((aWindow _ aMorph renderedMorph) isKindOf: SystemWindow) and:			[aWindow model isKindOf: ChangeSorter orOf: DualChangeSorter])				ifTrue:					[aWindow isCollapsed ifTrue: [aWindow expand].					aWindow activateAndForceLabelToShow.					^ self]].	"None found, so create one"	DualChangeSorter open! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 1/25/2001 15:22'!keystrokeInWorld: evt	"A keystroke was hit when no keyboard focus was in set, so it is sent here to the world instead.  This current implementation is regrettably hard-coded; until someone cleans this up, you may be tempted to edit this method to suit your personal taste in interpreting cmd-keys issued to the desktop."	|  aChar isCmd |	aChar _ evt keyCharacter.	isCmd _ evt commandKeyPressed and: [Preferences cmdKeysInText].	isCmd ifTrue:		[(aChar == $z) ifTrue: [^ self commandHistory undoOrRedoCommand].		(aChar == $w) ifTrue: [^ SystemWindow closeTopWindow].		(aChar == $\) ifTrue: [^ SystemWindow sendTopWindowToBack].		(aChar == $t) ifTrue: [^ self findATranscript: evt].		(aChar == $b) ifTrue: [^ Browser openBrowser].		(aChar == $k) ifTrue: [^ Workspace open].		(aChar == $C) ifTrue: [^ self findAChangeSorter: evt].		(aChar == $R) ifTrue: [^ self openRecentSubmissionsBrowser: evt].		(aChar == $r) ifTrue: [^ Display restoreMorphicDisplay].		(aChar == $W) ifTrue: [^ self invokeWorldMenu: evt]]			"This last item is a weirdo feature requested by the Open School in Fall of 2000 as a keyhole to the world menu in systems that normally do not offer a world menu"! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 1/25/2001 15:19'!openRecentSubmissionsBrowser: evt	"Locate a recent-submissions browser, open it, and bring it to the front.  Create one if necessary.  Only works in morphic"	| aWindow |	submorphs do:		[:aMorph | (((aWindow _ aMorph renderedMorph) isKindOf: SystemWindow) and:			[aWindow model isKindOf: RecentMessageSet])				ifTrue:					[aWindow isCollapsed ifTrue: [aWindow expand].					aWindow activateAndForceLabelToShow.					^ self]].	"None found, so create one"	Utilities browseRecentSubmissions! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 1/25/2001 15:28'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu _ MenuMorph new defaultTarget: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu from: {		{'previous project' . { #myWorld . #goBack } }.		{'jump to project...' . { #myWorld . #jumpToProject } }.		{'save project on file...' . { #myWorld  . #saveOnFile } }.		{'load project from file...' . { self  . #loadProject } }.		nil}.	myWorld addUndoItemsTo: menu.		self fillIn: menu from: {		{'restore display (r)' . { Display . #restoreMorphicDisplay } }.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'open...' . { self  . #openWindow } }.			{'windows & flaps...' . { self  . #windowsDo } }.			{'changes...' . { self  . #changesDo } }}].	self fillIn: menu from: { 		{'help...' . { self  . #helpDo } }.		{'appearance...' . { self  . #appearanceDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: {			{'do...' . { Utilities . #offerCommonRequests} } }].	self fillIn: menu from: { 		nil.		{'new morph...' . { self  . #newMorph } }.		{'authoring tools...' . { self  . #scriptingDo } }.		{'playfield options...' . { self  . #playfieldDo } }.		{'projects...' . { self  . #projectDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'print PS to file...' . { self  . #printWorldOnFile } }.			{'debug...' . { self  . #debugDo } }}].	self fillIn: menu from: { 		nil.		{'save' . { self  . #saveSession } }.		{'save as...' . { Smalltalk . #saveAs } }.		{'save and quit' . { self  . #saveAndQuit } }.		{'quit' . { self  . #quitSession } }}.	^ menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 1/25/2001 15:36'!changesMenu        "Build the changes menu for the world."        | menu |        menu _ self menu: 'changes...'.        self fillIn: menu from: {                { 'file out current change set' . { Utilities . #fileOutChanges}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'create new change set...' . { ChangeSorter . #newChangeSet}. 'Create a new change set and make it the current one.'}.                { 'browse changed methods' . { Smalltalk . #browseChangedMessages}.  'Open a message-list browser showing all methods in the current change set'}.                { 'check change set for slips' . { Smalltalk changes . #lookForSlips}.                                'Check the current change set for halts, references to the Transcript, etc., and if any such thing is found, open up a message-list browser detailing all possible slips.'}.                nil.                { 'simple change sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'dual change sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.			{ 'find change sorter (C)' .  {self. #findChangeSorter}.						'Make an open change sorter be the front window, expanding a collapsed one or creating a new one if necessary'}.                nil.                { 'browse recent submissions' . { Utilities . #browseRecentSubmissions}.                                'Open a new recent-submissions browser.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'}.                { 'find recent submissions (R)' . { #myWorld . #openRecentSubmissionsBrowser:}.                                'Make an open recent-submissions browser be the the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.			nil.                { 'recently logged changes...' . { ChangeList . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.'}.                { 'recent log file...' . { Smalltalk . #writeRecentToFile}.                                'Create a file holding the logged changes (going as far back as you wish), and open a window on that file.'}.                nil.                { 'save world as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.                nil.        }.        self projectForMyWorld isIsolated ifTrue: [                self fillIn: menu from: {                         { 'propagate changes upward' . {self. #propagateChanges}.                                'The changes made in this isolated project will propagate to projects up to the next isolation layer.'}.                }.        ] ifFalse: [                self fillIn: menu from: {                         { 'isolate changes of this project' . {self. #beIsolated}.                                'Isolate this project and its subprojects from the rest of the system.  Changes to methods here will be revoked when you leave this project.'}.                }.        ].        ^ menu! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'sw 1/25/2001 15:02'!windowsMenu        "Build the windows menu for the world."        ^ self fillIn: (self menu: 'windows & flaps...') from: {                  { 'find window' . { #myWorld . #findWindow: }. 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'}.                { 'find changed browsers...' . { #myWorld . #findDirtyBrowsers: }. 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.                { 'find changed windows...' . { #myWorld . #findDirtyWindows: }. 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.                { 'find a transcript' . { #myWorld . #findATranscript: }. 'Brings an open Transcript to the front, creating one if necessary, and makes it the active window'}.			 nil.               { 'find a change sorter (C)' . { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window'}.			 nil.                { #staggerPolicyString . { self . #toggleWindowPolicy }. 'stagger: new windows positioned so you can see a portion of each one.                tile: new windows positioned so that they do not overlap others, if possible.'}.                nil.                { 'collapse all windows' . { #myWorld . #collapseAll }. 'Reduce all open windows to collapsed forms that only show titles.'}.                { 'expand all windows' . { #myWorld . #expandAll }. 'Expand all collapsed windows back to their expanded forms.'}.                { 'close top window (w)' . { SystemWindow . #closeTopWindow }. 'Close the topmost window if possible.'}.                { 'send top window to back (\)' . { SystemWindow . #sendTopWindowToBack  }. 'Make the topmost window become the backmost one, and activate the window just beneath it.'}.                nil.                { 'delete unchanged windows' . { #myWorld . #closeUnchangedWindows }. 'Deletes all windows that do not have unsaved text edits.'}.                { 'delete non-windows' . { #myWorld . #deleteNonWindows }. 'Deletes all non-window morphs lying on the world.'}.                { 'delete both of the above' . { self .#cleanUpWorld }. 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'}.                nil.            "    { #suppressFlapsString . { self . #toggleFlapSuppressionInProject }. 'Governs whether flaps should be shown in this project'}."                { #useGlobalFlapsString . { self. #toggleWhetherToUseGlobalFlaps }. 'Governs whether a universal set of "global" flaps should be sharable by all morphic projects.'}.			{ #whichGlobalFlapsString . { Utilities. #offerGlobalFlapsMenu }. 'Put up a menu that allows you to choose which global flaps to show in this project'. #globalFlapsEnabled}.                { #newGlobalFlapString  . { Utilities . #addGlobalFlap }. 'Create a new flap that will be shared by all morphic projects'.  #globalFlapsEnabled}.                nil.                { 'new project flap...'  . { Utilities . #addLocalFlap }. 'Create a new flap to be used only in this project.'}.                { 'add stack-tools flap'  . { Utilities . #addStackToolsFlap }. 'Add a flap in this project that offers tools for creating stacks and cards.'}.				nil.                { 'about flaps...' . { Utilities . #explainFlaps }. 'Gives a window full of details about how to use flaps.'}.        }! !