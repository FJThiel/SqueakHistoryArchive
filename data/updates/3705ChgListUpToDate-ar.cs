'From Squeak3.1alpha of 4 February 2001 [latest update: #3714] on 24 February 2001 at 6:37:59 pm'!"Change Set:		ChgListUpToDateDate:			24 February 2001Author:			Andreas RaabAdds a menu item to the change list allowing to remove all up-to-date method entries (that is those changes that are identical with current version of method)"!!ChangeList methodsFor: 'menu actions' stamp: 'ar 2/24/2001 18:19'!changeListMenu: aMenu	"Fill aMenu up so that it comprises the primary changelist-browser menu"	Smalltalk isMorphic ifTrue:		[aMenu addTitle: 'change list'.		aMenu addStayUpItemSpecial].	aMenu addList: #(	('fileIn selections'							fileInSelections)	('fileOut selections...	'						fileOutSelections)	-	('compare to current'						compareToCurrentVersion)	('toggle diffing (D)'							toggleDiffing)	-	('select conflicts with any changeset'		selectAllConflicts)	('select conflicts with current changeset'	selectConflicts)	-	('select conflicts with...'						selectConflictsWith)	('select unchanged methods'					selectUnchangedMethods)	('select methods for this class'				selectMethodsForThisClass)	('invert selections'							invertSelections)	-	('select all (a)'								selectAll)	('deselect all'								deselectAll)	-	('browse current versions of selections'		browseCurrentVersionsOfSelections)	('remove current methods of selections'		destroyCurrentCodeOfSelections)	-	('remove doIts'								removeDoIts)	('remove older versions'						removeOlderMethodVersions)	('remove up-to-date versions'				removeExistingMethodVersions)	('remove selected items'						removeSelections)	('remove unselected items'					removeNonSelections)).	^ aMenu! !!ChangeList methodsFor: 'menu actions' stamp: 'ar 2/24/2001 18:29'!removeExistingMethodVersions	"Remove all up to date version of entries from the receiver"	| newChangeList newList str keep cls sel |	newChangeList _ OrderedCollection new.	newList _ OrderedCollection new.	changeList with: list do:[:chRec :strNstamp | 			keep _ true.			(cls _ chRec methodClass) ifNotNil:[				str _ chRec string.				sel _ cls parserClass new parseSelector: str.				keep _ (cls sourceCodeAt: sel ifAbsent:['']) asString ~= str.			].			keep ifTrue:[					newChangeList add: chRec.					newList add: strNstamp]].	newChangeList size < changeList size		ifTrue:			[changeList _ newChangeList.			list _ newList.			listIndex _ 0.			listSelections _ Array new: list size withAll: false].	self changed: #list! !