'From Squeak 2.4c of May 10, 1999 on 21 June 1999 at 4:55:41 pm'!"Change Set:		menuStuff-swDate:			21 June 1999Author:			Scott WallaceA variety of improvements and fixes regarding menus in Morphic.  The following is a partial list.Many menu items that formerly were sent to the hand, which in turn would revector them to their true recipients, now go directly to the true recipient.  This circumvents a broad class of bugs involving persistent menus associated with the hand, wherein once the hand changed to focus on a different morph, menu items would be forwarded to the wrong object.Menu titles can be self-updating, as can the 'enabled' property of menu items.The 'remote' branch of the world menu is demoted to being in the help menu, where it is renamed 'telemorphic'.Individual morphs types can supply their own titles for halo menu.The path-drawing menu items are relocated to allow their circumvention where they don't make sense, such as in flaps.Morph dismissal via halo now allows the morph to participate in the flow of control so that it can dismiss other objects as well or take other special actions as needed."!MenuItemMorph subclass: #UpdatingMenuItemMorph	instanceVariableNames: 'wordingProvider wordingSelector enablementSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!!Morph methodsFor: 'submorphs-add/remove' stamp: 'sw 6/17/1999 14:21'!dismissViaHalo	"The user has clicked in the delete halo-handle.  This provides a hook in case some concomitant action should be taken, or if the paticular morph is not one which should be put in the trash can, for example."	TrashCanMorph moveToTrash: self! !!Morph methodsFor: 'menus' stamp: 'sw 6/14/1999 20:10'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	self player ifNotNil:		[aMenu add: 'make another instance of me' action: #makeNewPlayerInstance].	aMenu addLine.	aMenu add: 'change costume...' action: #chooseNewCostumeForArgument.	self colorSettable ifTrue:		[aMenu add: 'change color...' action: #changeColor].	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	self isLocked		ifFalse:			[aMenu add: 'lock' action: #lockMorph]		ifTrue:			[aMenu add: 'unlock' action: #unlockMorph].  "probably not possible -- wouldn't get halo"	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu addLine.	aMenu defaultTarget: self.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	aMenu defaultTarget: aHandMorph.	(owner == nil or: [self == owner submorphs last]) ifFalse:		[aMenu add: 'send to back' action: #goBehind]! !!Morph methodsFor: 'menus' stamp: 'sw 6/19/1999 23:15'!addTitleForHaloMenu: aMenu	aMenu addTitle: self externalName! !!Morph methodsFor: 'menus' stamp: 'sw 6/20/1999 23:25'!changeColor	| m box points b |	m _ ColorPickerMorph new		sourceHand: self activeHand;		target: self;		selector: #color:.	self isInWorld ifTrue:		[box _ self fullBounds.		points _ #(topCenter rightCenter bottomCenter leftCenter).  "possible anchors"		1 to: 4 do: [:i |  "Try the four obvious anchor points"			b _ m bounds					align: (m bounds perform: (points at: i))					with: (box perform: (points atWrap: i + 2)).			(self worldBounds containsRect: b) ifTrue: [  "Yes, it fits"				m position: b topLeft.				self world addMorphFront: m.				m changed.				^ m]]].	"when all else fails..."	m position: 20@20.	self currentWorld addMorphFront: m.	m changed.	^ m! !!Morph methodsFor: 'debug and other' stamp: 'sw 6/20/1999 21:22'!debuggingMenuFor: aHandMorph	| aMenu aPlayer |	aMenu _ MenuMorph new defaultTarget: self.	(self hasProperty: #errorOnDraw) ifTrue:		[aMenu add: 'start drawing again' action: #resumeAfterDrawError.		aMenu addLine].	(self hasProperty: #errorOnStep) ifTrue:		[aMenu add: 'start stepping again' action: #resumeAfterStepError.		aMenu addLine].	aMenu add: 'control-menu...' target: aHandMorph selector: #invokeMetaMenuFor: argument: self.	aMenu add: 'inspect morph' action: #inspectInMorphic.	Smalltalk isMorphic ifFalse:		[aMenu add: 'inspect morph (in MVC)' action: #inspectArgument].	aMenu add: 'browse morph class' target: aHandMorph selector: #browseMorphClassFor: argument: self.	(aPlayer _ self player) ifNotNil:		[aMenu add: 'inspect player' target: aPlayer action: #inspect.		World ifNil: [aMenu add: 'inspect player (morphic)' action: #inspectArgumentsPlayerInMorphic].		aMenu add: 'browse player class' target: aPlayer action: #inspect].	aMenu add: 'make own subclass' action: #subclassMorph.	aMenu add: 'internal name ' action: #choosePartName.	aMenu add: 'save morph in file'  action: #saveOnFile.	aMenu addLine.	aMenu add: 'call #tempCommand' target: aHandMorph action: #callTempCommand.	aMenu add: 'define #tempCommand' target: aHandMorph action: #defineTempCommand.	aMenu addLine.	aMenu add: 'edit balloon help' action: #editBalloonHelpText.	^ aMenu! !!HaloMorph methodsFor: 'private' stamp: 'sw 6/17/1999 16:58'!dismiss	"Remove my target from the world."	| w |	self isThisEverCalled. "Seemingly no longer enfranchised"	w _ self world.	w ifNotNil: [w stopStepping: target].	self delete.	target dismissViaHalo! !!HaloMorph methodsFor: 'private' stamp: 'sw 6/19/1999 23:15'!doMenu: evt with: menuHandle	"Ask hand to invoke the halo menu for my inner target."	| menu |	self removeAllHandlesBut: nil.  "remove all handles"	self world displayWorld.	menu _ evt hand buildMorphHandleMenuFor: innerTarget.	innerTarget addTitleForHaloMenu: menu.	evt hand invokeMenu: menu event: evt.! !!HaloMorph methodsFor: 'private' stamp: 'sw 6/17/1999 14:20'!maybeDismiss: evt with: dismissHandle	"Ask hand to dismiss my target if mouse comes up in it."	(dismissHandle containsPoint: evt cursorPoint)		ifFalse:			[self delete.			target addHalo]		ifTrue:			[self delete.			target dismissViaHalo]! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/17/1999 12:04'!buildWorldMenu	"Build the meta menu for the world."	| menu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'previous project' target: owner action: #goBack.	menu add: 'jump to project...' action: #jumpToProject.	menu add: 'restore display' target: self world action: #restoreDisplay.	menu addLine.	menu add: 'open...' action: #openWindow.	menu add: 'windows & flaps...' action: #windowsDo.	menu add: 'changes...' action: #changesDo.	menu add: 'help...' action: #helpDo.	menu add: 'do...' target: Utilities action: #offerCommonRequests.	menu addLine.	menu add: 'new morph...' action: #newMorph.	menu add: 'authoring tools...' action: #scriptingDo.	menu add: 'playfield options...' action: #playfieldDo.	menu add: 'debug...' action: #debugDo.	menu addLine.	menu add: 'save' action: #saveSession.	menu add: 'save as...' action: #saveAs.	menu add: 'save and quit' action: #saveAndQuit.	menu add: 'quit' action: #quitSession.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/21/1999 12:41'!helpMenu	"Build the help menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'help...') defaultTarget: self.	menu addStayUpItem.	menu add: 'about this system...' target: Smalltalk action: #aboutThisSystem.	menu balloonTextForLastItem: 'current version information.'.	menu add: 'update code from server' action: #absorbUpdatesFromServer.	menu balloonTextForLastItem: 'load latest code updates via the internet'.	menu add: 'preferences...' target: Preferences action: #openPreferencesInspector.	menu balloonTextForLastItem: 'view and change various options.'.	menu addLine.	menu add: 'command-key help' target: Utilities action: #openCommandKeyHelp.	menu balloonTextForLastItem: 'summary of keyboard shortcuts.'.	menu add: 'world menu help' target: self action: #worldMenuHelp.	menu balloonTextForLastItem: 'helps find menu items buried in submenus.'.	"menu add: 'info about flaps' target: Utilities action: #explainFlaps."	menu balloonTextForLastItem: 'describes how to enable and use flaps.'.	menu add: 'font size summary' target: Utilities action: #fontSizeSummary.	menu balloonTextForLastItem: 'summary of names and sizes of available fonts.'.	menu add: 'useful expressions' target: Utilities action: #openStandardWorkspace.	menu balloonTextForLastItem: 'a window full of useful expressions.'.	menu add: 'view image imports' target: Smalltalk action: #viewImageImports.	menu balloonTextForLastItem: 'lets you look at graphical imports.'.	menu addLine.	menu add: 'full screen on' target: screenCtrl action: #fullScreenOn.	menu balloonTextForLastItem: 'puts you in full-screen mode, if not already there.'.	menu add: 'full screen off' target: screenCtrl action: #fullScreenOff.	menu balloonTextForLastItem: 'if in full-screen mode, takes you out of it.'.	menu add: 'set display depth...' action: #setDisplayDepth.	menu balloonTextForLastItem: 'choose how many bits per pixel.'.	menu add: 'set desktop color...' action: #changeBackgroundColor.	menu balloonTextForLastItem: 'choose a uniform color to use as desktop background.'.	menu add: 'use texture background' target: self world action: #setStandardTexture.	menu balloonTextForLastItem: 'apply a graph-paper-like texture background to the desktop.'.	menu addUpdating: #gridOnString action: #setGridding.	menu balloonTextForLastItem: 'turn gridding on or off.'.	menu addLine.	menu add: 'telemorphic...' action: #remoteDo.	menu balloonTextForLastItem: 'commands for doing multi-machine "telemorphic" experiments'.	menu addUpdating: #soundEnablingString target: Preferences action: #toggleSoundEnabling.	menu balloonTextForLastItem: 'turning sound off will completely disable Squeak''s use of sound.'.	menu addLine.	menu add: 'set author initials...' target: screenCtrl action: #setAuthorInitials.	menu balloonTextForLastItem: 'supply initials to be used to identify the author of code and other content.'.	menu add: 'vm statistics' target: screenCtrl action: #vmStatistics.	menu balloonTextForLastItem: 'obtain some intriguing data about the vm.'.	menu add: 'space left' target: screenCtrl action: #garbageCollect.	menu balloonTextForLastItem: 'perform a full garbage-collection and report how many bytes of space remain in the image.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/21/1999 16:43'!scriptingMenu	"Build the scripting menu for the world."	| menu |	menu _ (MenuMorph entitled: 'authoring tools...') defaultTarget: self.	menu addStayUpItem.	menu add: 'standard parts bin' target: self presenter action: #createStandardPartsBin.	menu balloonTextForLastItem: 'A bin of standard parts, from which you can drag out useful morphs.'.	menu add: 'custom parts bin' target: self presenter action: #launchCustomPartsBin.	menu balloonTextForLastItem: 'A customized bin of parts.  To define what the custom parts bin is, edit any existing parts bin and tell it to be saved as the custom parts bin.'.	menu add: 'view trash contents' target: self action: #openScrapsBook.	menu balloonTextForLastItem: 'The place where all your trashed morphs go.'.	menu add: 'empty trash can' target: Utilities action: #emptyScrapsBook.	menu balloonTextForLastItem: 'Empty out all the morphs that have accumulated in the trash can.'.	menu add: 'new scripting area' target: self action: #detachableScriptingSpace.	menu balloonTextForLastItem: 'A window set up for simple scripting.'.	menu addLine.	menu add: 'unlock locked objects' action: #unlockWorldContents.	menu balloonTextForLastItem: 'If any items on the world desktop are currently locked, unlock them.'.	menu add: 'unhide hidden objects' action: #showHiders.	menu balloonTextForLastItem: 'If any items on the world desktop are currently hidden, make them visible.'.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 6/20/1999 21:22'!browseMorphClassFor: aMorph	| mClass newBrowser |	mClass _ aMorph class.	newBrowser _ HierarchyBrowser new		initHierarchyForClass: mClass		meta: false.	Browser openBrowserView: (newBrowser openSystemCatEditString: nil)		label: mClass name, ' hierarchy'! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 6/14/1999 20:01'!buildMorphHandleMenuFor: argMorph	"Build the morph menu for the given morph's halo's menu handle. This menu has two sections. The first section contains commands that are interpreted by the hand; the second contains commands provided by the target morph. This method allows the morph to decide which items should be included in the hand's section of the menu."	| menu |	argMorph == owner "i.e., the world" ifTrue:		[^ self buildWorldMenu].	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	argMorph addAddHandMenuItemsForHalo: menu hand: self.	menu defaultTarget: argMorph.	argMorph addCustomHaloMenuItems: menu hand: self.	menu addLine.	argMorph player ifNotNil: [argMorph player addPlayerMenuItemsTo: menu hand: self].	menu defaultTarget: self.	Preferences noviceMode ifFalse:		[argMorph addDebuggingItemsTo: menu hand: self].	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 6/17/1999 14:03'!changeColor	argument changeColor! !!MenuItemMorph methodsFor: 'private' stamp: 'sw 6/20/1999 23:39'!bringMenuChainToFront	| menusToPopUp menu owningItem |	menusToPopUp _ OrderedCollection new.	menu _ self owner.	[menu isKindOf: MenuMorph] whileTrue: [		menusToPopUp addFirst: menu.		owningItem _ menu popUpOwner.		(owningItem isKindOf: MenuItemMorph)			ifTrue: [menu _ owningItem owner]			ifFalse: [menu _ nil]].	menusToPopUp do: [:m | (m owner isKindOf: AlignmentMorph)		ifFalse:			[m owner addMorphFront: m]].! !!MenuMorph methodsFor: 'construction' stamp: 'sw 6/19/1999 23:09'!addTitle: aString	"Add a title line at the top of this menu."	self addTitle: aString updatingSelector: nil updateTarget: nil! !!MenuMorph methodsFor: 'construction' stamp: 'sw 6/20/1999 19:05'!addTitle: aString updatingSelector: aSelector updateTarget: aTarget	"Add a title line at the top of this menu  Make aString its initial contents.  If aSelector is not nil, then periodically obtain fresh values for its contents by sending aSelector to aTarget.."	| title |	title _ AlignmentMorph new.	self setTitleParametersFor: title.	title vResizing: #shrinkWrap.	title orientation: #vertical.	title centering: #center.	aSelector		ifNotNil:			[title addMorphBack: (UpdatingStringMorph new lock; useStringFormat; target: aTarget; getSelector: aSelector)]		ifNil:			[(aString asString findTokens: String cr) do:				[:line | title addMorphBack: (StringMorph new contents: line)]].		self addMorphFront: title.! !!MenuMorph methodsFor: 'construction' stamp: 'sw 6/21/1999 11:34'!addUpdating: aWordingSelector enablement: anEnablementSelector action: aSymbol	self addUpdating: aWordingSelector enablementSelector: anEnablementSelector target: defaultTarget selector: aSymbol argumentList: EmptyArray! !!MenuMorph methodsFor: 'construction' stamp: 'sw 6/21/1999 11:32'!addUpdating: wordingSelector enablementSelector: enablementSelector target: target selector: aSymbol argumentList: argList	"Append a menu item with the given label. If the item is selected, it will send the given selector to the target object with the given arguments. If the selector takes one more argument than the number of arguments in the given list, then the triggering event is supplied as as the last argument.  In this variant, the wording of the menu item is obtained by sending the wordingSelector to the target, and the optional enablementSelector determines whether or not the item should be enabled."	| item |	item _ UpdatingMenuItemMorph new		target: target;		selector: aSymbol;		wordingProvider: target wordingSelector: wordingSelector;		enablementSelector: enablementSelector;		arguments: argList asArray.	self addMorphBack: item.! !!UpdatingMenuItemMorph commentStamp: 'sw 6/21/1999 11:27' prior: 0!A menu item whose textual label and whose enablement are updatable.  The wordingProvider provides the current wording, upon being being sent the wordingSelector.The item can also dynamically update whether or not it should be enabled; to do this, give it an enablementSelector, which is also sent to the wordingProvider..!!UpdatingMenuItemMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/21/1999 11:28'!enablementSelector: aSelector	enablementSelector _ aSelector! !!UpdatingMenuItemMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/21/1999 11:28'!step	| newString enablement |	wordingProvider ifNotNil:		[newString _ wordingProvider perform: wordingSelector.		newString = contents ifFalse: [self contents: newString].		enablementSelector ifNotNil:			[enablement _ wordingProvider perform: enablementSelector.			enablement == isEnabled ifFalse:				[self isEnabled: enablement]]]! !HandMorph removeSelector: #offerFlapsMenu!