'From Squeak 2.3 beta of Nov 25, 1998 on 11 January 1999 at 10:18:12 pm'!"Change Set:		invisibilium-swDate:			11 January 1999Author:			Scott WallaceSome improvements relating to visibility, making it now possible to script a pop-up flap rather simply  Also, remove the residual support for disused #repelling property."!!Morph methodsFor: 'dropping/grabbing' stamp: 'sw 1/11/1999 20:07'!repelsMorph: aMorph event: ev	^ false! !!PartsViewer methodsFor: 'initialization' stamp: 'sw 1/11/1999 22:17'!setPlayer: aPlayer	scriptedPlayer _ aPlayer.	self removeAllMorphs.	self addMorphBack: self rowBeforeParts.	self addTilesForPlayerParts.	self enforceTileColorPolicy. "prematurely here to avoid momentarily flashing wrong policy"	self addTransparentSpacerOfSize: 1 @ 8.	self addMorphBack: self rowBeforeScripts.	self addMorphBack: self commandTilesPartsBin.	self enforceTileColorPolicy.	self isInWorld ifTrue: [self world startSteppingSubmorphsOf: self].	self layoutChanged.! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 1/11/1999 20:05'!repelsMorph: aMorph event: ev	(Preferences allowSysWindowEmbedding not and:		[aMorph isKindOf: SystemWindow]) ifTrue: [^ false].	self visible ifFalse: [^ false].	isPartsBin == true ifTrue: [^ true].	openToDragNDrop ifFalse: [^ true].	(self wantsDroppedMorph: aMorph event: ev) ifFalse: [^ true].	^ super repelsMorph: aMorph event: ev "consults #repelling flag"! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 1/11/1999 17:50'!wantsDroppedMorph: aMorph event: evt	self visible ifFalse: [^ false].	(self isPartsBin or: [self openToDragNDrop]) not ifTrue: [^ false].	(self bounds containsPoint: (self pointFromWorld: evt cursorPoint)) ifFalse: [^ false].	((aMorph isKindOf: SystemWindow) and: [Preferences allowSysWindowEmbedding not])		ifTrue:	[^ false].	((aMorph isKindOf: BookPageSorterMorph) and: [self isWorldMorph not])		ifTrue:	[^ false].	^ true! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 1/11/1999 17:51'!wantsHaloFor: aSubMorph	^ self visible and: [(isPartsBin ~~ true and: [openToDragNDrop ~~ false]) and:		[self wantsMouseOverHalos]]! !!TabbedPalette methodsFor: 'user-interface' stamp: 'sw 1/11/1999 20:08'!repelsMorph: aMorph event: ev	self visible ifFalse: [^ false].	^ openToDragNDrop not! !!WorldMorph methodsFor: 'drawing' stamp: 'sw 1/11/1999 17:39'!drawInvalidAreasOn: aCanvas 	"Redraw the damaged areas of the given canvas and clear the damage list. Return a collection of the areas that were redrawn."	| rectList c i n mm morphs rects rectToFill remnants rect |	rectList _ damageRecorder invalidRectsFullBounds: (0@0 extent: viewBox extent).	damageRecorder reset.	n _ self submorphs size.	morphs _ OrderedCollection new: n*2.	rects _ OrderedCollection new: n*2.	rectList do: [:r |		true		ifTrue:			["Experimental top-down drawing --			Traverses top to bottom, stopping if the entire area is filled.			If only a single rectangle remains, then continue with the reduced rectangle."			rectToFill _ r.			i _ 1.			[rectToFill == nil or: [i > n]] whileFalse:				[mm _ submorphs at: i.				((mm fullBounds intersects: r) and: [mm visible]) ifTrue:					[morphs addLast: mm.  rects addLast: rectToFill.					remnants _ mm areasRemainingToFill: rectToFill.					remnants size = 1 ifTrue: [rectToFill _ remnants first].					remnants size = 0 ifTrue: [rectToFill _ nil]].				i _ i+1].			"Now paint from bottom to top, but using the reduced rectangles."			rectToFill ifNotNil:				[c _ aCanvas copyClipRect: rectToFill.				c fillColor: color.				turtleTrailsForm ifNotNil: [c image: turtleTrailsForm at: 0@0]].			[morphs isEmpty] whileFalse:				[(rect _ rects removeLast) == rectToFill ifFalse:					[c _ aCanvas copyClipRect: (rectToFill _ rect)].				morphs removeLast fullDrawOn: c].			morphs reset.  rects reset]		ifFalse: [c _ aCanvas copyClipRect: r.				c fillColor: color.				turtleTrailsForm ifNotNil: [c image: turtleTrailsForm at: 0@0].				submorphs reverseDo: [:m | m fullDrawOn: c]]		].	^ rectList! !Morph removeSelector: #beRepelling!BookMorph removeSelector: #beThoroughlyRepelling!