'From Squeak 2.2 of Sept 23, 1998 on 11 November 1998 at 5:40:36 pm'!"Change Set:		paintBoxLocEtc-swDate:			11 November 1998Author:			Scott WallaceA few fixes centered around work toward getting the paintbox properly aligned with the standard palette in constructions such as the etoy-template-from-bare-parts one (though some of the changes here ultimately are quite unrelated to that.)  Specifically;*  The 'make detachable' command no longer adds stop-step-go buttons and trashcan; add them manually from a parts bin if you need them.  And, to assist *  A workaround remedy is added for the not-yet-fully-understood phenomenon in which two StandardViewers stack up in the same palette.*  Stop-step-go buttons in the default 'standard scripting area' are again linked together for proper highlighting.*  Stop-step-go buttons dragged from the parts bin dock up dynamically and fairly cleverly with the appropriate presenter.*  The step button highlighting is left in the correct state, a situation that had not obtained for at least the past nine months.*  Find-changed-browsers and find-changed-windows features no longer bring up a debugger if they find no qualifying windows.*  The former failure associated with the situation where you drag something into a trash can which is statically associated with a palette that no longer is in the world is now avoided.*  The fix to a Preferences method for setting a help string which got omitted from an earlier, retracted, version of mouseLeavingsEtc-sw.cs, is included.*  Several obsolete methods removed."!!HandMorph methodsFor: 'world menu commands' stamp: 'sw 11/11/1998 15:20'!findDirtyBrowsers	"Present a menu of window titles for browsers with changes,	and activate the one that gets chosen."	| menu |	menu _ MenuMorph new.	(SystemWindow windowsIn: self world		satisfying: [:w | (w model isKindOf: Browser) and: [w model canDiscardEdits not]])		do: [:w | menu add: w label target: w action: #activate].	menu submorphs size > 0 ifTrue:		[self invokeMenu: menu event: lastEvent]! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 11/11/1998 15:22'!findDirtyWindows	"Present a menu of window titles for all windows with changes,	and activate the one that gets chosen."	| menu |	menu _ MenuMorph new.	(SystemWindow windowsIn: self world		satisfying: [:w | w model canDiscardEdits not])		do: [:w | menu add: w label target: w action: #activate].	menu submorphs size > 0 ifTrue:		[self invokeMenu: menu event: lastEvent]! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 11/11/1998 16:10'!addPlayfieldMenuItems: menu hand: aHandMorph	| subMenu prefix hasPalette |	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'save on file...' action: #saveOnFile.	subMenu add: 'navigate to...' action: #navigateTo.	subMenu add: 'round up strays' action: #roundUpStrays.	subMenu addLine.	#(	(autoLineLayout			'auto layout'			toggleAutoLineLayout)		(resizeToFit				'resize-to-fit'			toggleResizeToFit)		(indicateCursor			'showing cursor'		toggleIndicateCursor)		(isPartsBin				'being a parts bin'		toggleIsPartsBin)		(wantsMouseOverHalos	'mouse-over halos'		toggleMouseOverHalos))	do:		[:triplet |			prefix _ (self perform: triplet first) ifTrue: ['stop '] ifFalse: ['start '].			subMenu add:  (prefix, triplet second) action: triplet third].	prefix _ (self hasProperty: #automaticPhraseExpansion) ifTrue: ['stop '] ifFalse: ['start '].	subMenu add: (prefix, 'phrase expansion') action: #toggleAutomaticPhraseExpansion.	prefix _ (self hasProperty: #alwaysShowThumbnail) ifTrue: ['stop '] ifFalse: ['start '].	subMenu add: (prefix, 'showing thumbnails') action: #toggleAlwaysShowThumbnail.	(self hasProperty: #alwaysShowThumbnail) ifTrue:		[subMenu add: 'set thumbnail height...' action: #setThumbnailHeight].	(hasPalette _ self standardPalette ~~ nil) ifTrue:		[prefix _ self automaticViewing ifTrue: ['stop '] ifFalse: ['start '].		subMenu add: (prefix, 'automatic viewing') action: #toggleAutomaticViewing].	subMenu addLine.	hasPalette ifTrue: [subMenu add: 'clear palette area' action: #clearPaletteArea].	(self resizeToFit & self indicateCursor & self autoLineLayout) ifFalse:		[subMenu add: 'behave like a Holder' action: #behaveLikeHolder].	self backgroundSketch ifNotNil: [subMenu add: 'delete background painting' action: #deleteBackgroundPainting].	presenter ifNil:		[subMenu add: 'make detachable' action: #makeDetachable].	subMenu addLine.	subMenu add: 'use standard texture' action: #setStandardTexture.	subMenu add: 'make graph paper...' action: #makeGraphPaper.	subMenu addTitle: 'Playfield options'.	menu add: 'playfield options...' subMenu: subMenu.! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 11/11/1998 13:45'!impartPrivatePresenter	presenter ifNil:		[presenter _ Presenter new associatedMorph: self.		presenter initializeToggles.		presenter standardPlayer]! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 11/11/1998 16:13'!makeDetachable	presenter ifNil:		[self impartPrivatePresenter.		self borderWidth: 1;  borderColor: Color green darker]! !!PasteUpMorph class methodsFor: 'all' stamp: 'sw 11/11/1998 17:33'!authoringPrototype	"Answer an instance of the receiver suitable for placing in a parts bin for authors"		| proto |	proto _ self new markAsPartsDonor.	proto color: Color green muchLighter;  extent: 100 @ 80; borderColor: (Color r: 0.645 g: 0.935 b: 0.161).	proto setProperty: #expandedExtent toValue: 300 @ 240.	proto beSticky.	^ proto! !!Preferences class methodsFor: 'preferences panel' stamp: 'sw 11/11/1998 16:39'!setHelpFor: prefName toString: aString	HelpDictionary ifNil: [self initializeHelpMessages].	HelpDictionary at: prefName put: aString! !!Presenter methodsFor: 'button creation' stamp: 'sw 11/11/1998 15:06'!addStopStepGoButtonsTo: aPasteUpMorph	| controls |	controls _ ScriptingSystem scriptControlButtons.	controls setToAdhereToEdge: #bottomLeft.	aPasteUpMorph addMorphBack: controls.	stopButton _ controls submorphs first.	stepButton _ controls submorphs second.	goButton _ controls submorphs third! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/11/1998 15:18'!startRunningScriptsFrom: aGoButton	(goButton == nil or: [goButton isInWorld not]) ifTrue: [goButton _ aGoButton].	self stopButtonState: false.	self stepButtonState: false.	self goButtonState: true.	associatedMorph startRunningAll.	associatedMorph borderColor: self borderColorWhenRunning.	ThumbnailMorph recursionReset.  "needs to be done once in a while"! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/11/1998 15:51'!stepStillDown: dummy with: theButton	(stepButton == nil or: [stepButton isInWorld not]) ifTrue: [stepButton _ theButton].	self stepButtonState: true.	self stopButtonState: false.	associatedMorph stepAll.	associatedMorph world displayWorld.	(Delay forMilliseconds: 200) wait.	self stepButtonState: false.	self stopButtonState: true! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/11/1998 15:50'!stepUp: evt with: aMorph	(stepButton == nil or: [stepButton isInWorld not]) ifTrue: [stepButton _ aMorph].	stepButton state: #off! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/11/1998 15:16'!stopRunningScriptsFrom: aStopButton	(stopButton == nil or: [stopButton isInWorld not]) ifTrue: [stopButton _ aStopButton].	self stopButtonState: true.	self stepButtonState: false.	self goButtonState: false.	associatedMorph stopRunningAll.	associatedMorph borderColor: self borderColorWhenStopped! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 11/11/1998 13:46'!newScriptingSpace	"Answer a complete scripting space"	| aTemplate  palette aPlayfield aWindow |	aWindow _ (SystemWindow labelled: 'scripting area') model: ScriptingDomain new.	aWindow extent: 640 @ 480.	aTemplate _ PasteUpMorph new setNameTo: 'etoy'.	aTemplate extent: 638 @ 470.	aWindow addMorph: aTemplate frame: (0@0 corner: 1@1).	aTemplate setStandardTexture.	aTemplate impartPrivatePresenter; setProperty: #automaticPhraseExpansion toValue: true; beSticky.	aTemplate presenter addStopStepGoButtons; addTrashCan.	palette _ TabbedPalette new pageSize: 200@320.	palette beSticky.	aTemplate addMorph: palette.	palette addMenuTab.	palette addPartsTab.	palette addControlsTab.	palette addScrapsTab.	"palette addViewerTab."	aPlayfield _ PasteUpMorph new setNameTo: 'playfield'.	(Preferences valueOfFlag: #eToyScheme)  "Not widely advertised"		ifFalse:				[aPlayfield setToAdhereToEdge: #topRight.			palette setToAdhereToEdge: #topLeft]		ifTrue:			[aPlayfield setToAdhereToEdge: #topLeft.			palette setToAdhereToEdge: #topRight].	aTemplate addMorph: aPlayfield.	aPlayfield extent: 340@300; position: aTemplate topRight - (400@0).	aPlayfield beSticky.	aPlayfield automaticViewing: true.	aPlayfield wantsMouseOverHalos: true.	aTemplate presenter standardPlayfield: aPlayfield.		^ aWindow! !!StandardScriptingSystem methodsFor: 'script-control' stamp: 'sw 11/11/1998 15:24'!goUp: evt with: aGoButton	aGoButton presenter startRunningScriptsFrom: aGoButton! !!StandardScriptingSystem methodsFor: 'script-control' stamp: 'sw 11/11/1998 15:49'!stepButton	| aButton |	aButton _ ThreePhaseButtonMorph new.		aButton			image:  (ScriptingSystem formAtKey: 'StepPicOn');			offImage: (ScriptingSystem formAtKey: 'StepPic');			pressedImage:  (ScriptingSystem formAtKey: 'StepPicOn');			arguments: (Array with: nil with: aButton);			setNameTo: 'Step Button'; 			setProperty: #scriptingControl toValue: true;			actWhen: #whilePressed;			on: #mouseDown send: #stepDown:with: to: self;			on: #mouseStillDown send: #stepStillDown:with: to: self;			on: #mouseUp send: #stepUp:with: to: self;			setBalloonText:'Run every paused script exactly once.  Keep the mouse button down over "Step" and everything will keep running until you release it'.	^ aButton! !!StandardScriptingSystem methodsFor: 'script-control' stamp: 'sw 11/11/1998 15:16'!stopUp: dummy with: theButton	| aPresenter |	(aPresenter _ theButton presenter) flushPlayerListCache.  "catch guys not in cache but who're running"	aPresenter stopRunningScriptsFrom: theButton! !!TabbedPalette methodsFor: 'palette menu' stamp: 'sw 11/11/1998 14:42'!showPaletteMenu	| aMenu evt |	evt _ self primaryHand lastEvent.	aMenu _ MenuMorph new defaultTarget: self.	self currentPalette		ifNotNil:			[aMenu add:  'clear' action: #showNoPalette.			aMenu addLine]		ifNil:			[submorphs size > 1				ifTrue: 					[aMenu add: 'clear!!' action: #showNoPalette.					aMenu addLine]].	aMenu add:  'sort tabs' action: #sortTabs:.	aMenu add:  'choose new colors for tabs' action: #recolorTabs.	(self presenter standardPaletteIsAlready: self) ifFalse:		[aMenu add:  'make me the Standard palette' action: #becomeStandardPalette].	aMenu addLine.	self hasScrapsTab ifFalse:	[aMenu add:  'add "scraps" tab' action: #addScrapsTab].	aMenu add: 'add a tab for me to script' action: #addScriptableTab.	aMenu addTitle: 'Palette'.	aMenu popUpAt: self cursorPoint event: evt! !!TabbedPalette methodsFor: 'misc menu items' stamp: 'sw 11/11/1998 14:02'!showNoPalette	| aMenuTab |	currentPage ifNotNil: [currentPage delete].	currentPage _ nil.	submorphs size > 1 ifTrue: "spurious submorphs, yecch"		[(submorphs copyFrom: 2 to: submorphs size) do: [:m | m delete]].	(aMenuTab _ tabsMorph submorphWithProperty: #tabsMenu) ifNotNil:		[tabsMorph highlightTab: aMenuTab].	"self snapToEdgeIfAppropriate"! !!ThreePhaseButtonMorph methodsFor: 'all' stamp: 'sw 11/11/1998 15:01'!printOn: aStream	| string |	aStream nextPutAll: '3PButton'.	arguments size > 0 ifTrue: [string _ arguments at: (2 min: arguments size)].	aStream nextPutAll: '('.	(string ~~ nil and: [string ~~ self])		ifTrue:			[aStream print: string; space]		ifFalse:			[aStream print: actionSelector; space].	aStream print: self identityHash;			nextPutAll: ')'.! !!TrashCanMorph methodsFor: 'dropping' stamp: 'sw 11/11/1998 16:01'!acceptDroppingMorph: aMorph event: evt	| palette |	self presenter soundsEnabled ifTrue: [self class playDeleteSound].	evt hand endDisplaySuppression.	self state: #off.	aMorph delete.	palette _ self standardPalette.	(palette notNil and: [palette isInWorld]) ifTrue: [palette addToTrash: aMorph].! !Presenter removeSelector: #flushButton!Presenter removeSelector: #newControlsButton!Presenter removeSelector: #stopButton!Presenter removeSelector: #newPaintingButton!Presenter removeSelector: #goButton!Presenter removeSelector: #newPartsBinButton!Presenter removeSelector: #stepButton!"Postscript:"ScriptingSystem resetStandardPartsBin.ScriptingSystem newStandardPartsBin.!