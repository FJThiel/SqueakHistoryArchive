'From Squeak3.1alpha of 5 February 2001 [latest update: #3847] on 16 March 2001 at 9:36:27 am'!"Change Set:		buttonProps4Date:			16 March 2001Author:			Bob Arningimproved editing capabilities for text within a button and other minor tweaks"!AlignmentMorph subclass: #AlignmentMorphBob1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!GenericPropertiesMorph subclass: #TextPropertiesMorph	instanceVariableNames: 'activeTextMorph applyToWholeText '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!!ButtonProperties methodsFor: 'events' stamp: 'RAA 3/16/2001 08:28'!addMouseOverHalo	self wantsRolloverIndicator ifTrue: [		visibleMorph 			addMouseActionIndicatorsWidth: mouseOverHaloWidth 			color: mouseOverHaloColor.	].! !!ButtonProperties methodsFor: 'events' stamp: 'RAA 3/16/2001 08:29'!mouseEnter: evt	self displayCostume: #mouseEnter.	self addMouseOverHalo.! !!ButtonProperties methodsFor: 'events' stamp: 'RAA 3/16/2001 08:29'!mouseUp: evt	(self displayCostume: #mouseEnter) ifFalse: [self displayCostume: #normal].	self addMouseOverHalo.! !!ButtonProperties methodsFor: 'copying' stamp: 'RAA 3/16/2001 08:21'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."target _ target.		Weakly copied""actionSelector _ actionSelector.		a Symbol""arguments _ arguments.		All weakly copied"actWhen _ actWhen veryDeepCopyWith: deepCopier."oldColor _ oldColor veryDeepCopyWith: deepCopier."visibleMorph _ visibleMorph.	"I guess this will have been copied already if needed"delayBetweenFirings _ delayBetweenFirings.mouseDownHaloColor _ mouseDownHaloColor.stateCostumes _ stateCostumes veryDeepCopyWith: deepCopier.currentLook _ currentLook.! !!Morph methodsFor: 'meta-actions' stamp: 'RAA 3/15/2001 12:56'!openATextPropertySheet	"should only be sent to morphs that are actually supportive"	TextPropertiesMorph basicNew		targetMorph: self;		initialize;		openNearTarget! !!GenericPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 12:57'!doTextProperties	myTarget openATextPropertySheet.	self delete.! !!GenericPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:52'!initialize	super initialize.	self borderWidth: 4.	self layoutInset: 4.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	thingsToRevert _ Dictionary new.	self useRoundedCorners.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:25'!acceptDroppingMorph: aMorph event: evt in: aSubmorph	| why |	self clearDropHighlightingEvt: evt morph: aSubmorph.	why _ aSubmorph valueOfProperty: #intentOfDroppedMorphs.	why == #changeTargetMorph ifTrue: [		self targetProperties replaceVisibleMorph: aMorph.		myTarget _ aMorph.		self rebuild.		^true	].	why == #changeTargetTarget ifTrue: [		(aMorph setAsActionInButtonProperties: self targetProperties) ifFalse: [			^false		].		^true	].	why == #changeTargetMouseDownLook ifTrue: [		self targetProperties mouseDownLook: aMorph.		^false	].	why == #changeTargetMouseEnterLook ifTrue: [		self targetProperties mouseEnterLook: aMorph.		^false	].	^false! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:45'!addTextToTarget	self targetProperties currentTextInButton ifNil: [		self targetProperties addTextToButton: '???'.	].	self targetProperties currentTextInButton openATextPropertySheet.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:26'!allowDropsInto: aMorph withIntent: aSymbol	aMorph		on: #mouseEnterDragging send: #mouseEnterDraggingEvt:morph: to: self;		on: #mouseLeaveDragging send: #mouseLeaveDraggingEvt:morph: to: self;		on: #mouseLeave send: #clearDropHighlightingEvt:morph: to: self;		setProperty: #handlerForDrops toValue: self;		setProperty: #intentOfDroppedMorphs toValue: aSymbol;		borderWidth: 1;		borderColor: Color gray! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:24'!clearDropHighlightingEvt: evt morph: aMorph	aMorph color: Color transparent.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 12:51'!doAccept	"self targetProperties lockAnyText."	super doAccept.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 12:51'!doMainProperties 	"self targetProperties lockAnyText."	super doMainProperties.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:53'!initialize	super initialize.	myTarget ifNil: [myTarget _ RectangleMorph new openInWorld].	self color: (Color r: 0.935 g: 0.839 b: 0.452).	self borderColor: self color darker.	thingsToRevert at: #buttonProperties: put: myTarget buttonProperties.	self rebuild.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:24'!mouseLeaveDraggingEvt: evt morph: aMorph	self clearDropHighlightingEvt: evt morph: aMorph.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 12:51'!rebuild	| buttonColor |	myTarget ensuredButtonProperties.	"self targetProperties unlockAnyText."	"makes styling the text easier"	self removeAllMorphs.	self addAColumn: {		self lockedString: 'Button Properties for ',myTarget name.	}.	self addAColumn: {		self paneForButtonTargetReport.	}.	self addAColumn: {		self paneForButtonSelectorReport.	}.	self addAColumn: {		(self inARow: {			self paneForActsOnMouseDownToggle.			self paneForActsOnMouseUpToggle.		})  hResizing: #shrinkWrap.	}.	self addAColumn: {		self inARow: {			(self paneForWantsFiringWhileDownToggle) hResizing: #shrinkWrap.			self paneForRepeatingInterval.		}.	}.	self addAColumn: {		(self inAColumn: {			self paneForWantsRolloverToggle.		}) hResizing: #shrinkWrap.	}.	self addARow: {		self paneForMouseOverColorPicker.		self paneForMouseDownColorPicker.	}.	self addARow: {		self paneForChangeMouseEnterLook.		self paneForChangeMouseDownLook.	}.	buttonColor _ color lighter.	self addARow: {		self inAColumn: {			self addARow: {				self 					buttonNamed: 'Add label' action: #addTextToTarget color: buttonColor					help: 'add some text to the button'.				self 					buttonNamed: 'Remove label' action: #removeTextFromTarget color: buttonColor					help: 'remove text from the button'.			}.			self addARow: {				self 					buttonNamed: 'Accept' action: #doAccept color: buttonColor					help: 'keep changes made and close panel'.				self 					buttonNamed: 'Cancel' action: #doCancel color: buttonColor					help: 'cancel changes made and close panel'.				self transparentSpacerOfSize: 10@3.				self 					buttonNamed: 'Main' action: #doMainProperties color: color lighter 					help: 'open a main properties panel for the morph'.				self 					buttonNamed: 'Remove' action: #doRemoveProperties color: color lighter 					help: 'remove the button properties of this morph'.			}.		}.		self inAColumn: {			self paneForChangeVisibleMorph		}.	}.! !!ButtonPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:41'!valueForRepeatingInterval	| n s |	n _ self targetProperties delayBetweenFirings.	s _ n ifNil: [		'*none*'	] ifNotNil: [		n < 1000 ifTrue: [n printString,' ms'] ifFalse: [(n // 1000) printString,' secs']	].	^'interval: ',s! !!HaloMorph methodsFor: 'handles' stamp: 'RAA 3/15/2001 11:24'!addRecolorHandle: haloSpec	"Add a recolor handle to the receiver, if appropriate"	| recolorHandle |	"since this halo now opens a more general properties panel, allow it in all cases"	"innerTarget canSetColor ifTrue:"	recolorHandle _ self addHandle: haloSpec on: #mouseUp send: #doRecolor:with: to: self.	recolorHandle on: #mouseUp send: #doRecolor:with: to: self! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:52'!initialize	super initialize.	myTarget ifNil: [myTarget _ RectangleMorph new openInWorld].	self color:  (Color r: 0.548 g: 0.839 b: 0.452).	self borderColor: self color darker.	self rebuild.! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 16:35'!rebuild	self removeAllMorphs.	self addARow: {		self lockedString: 'Properties for ',myTarget name.	}.	self addARow: {		self inAColumn: {			self paneForCornerRoundingToggle.			self paneForStickinessToggle.			self paneForLockedToggle.		}.	}.	self addARow: {		self paneForMainColorPicker.		self paneFor2ndGradientColorPicker.	}.	self addARow: {		self paneForBorderColorPicker.		self paneForShadowColorPicker.	}.	self addARow: {		self 			buttonNamed: 'Accept' action: #doAccept color: color lighter 			help: 'keep changes made and close panel'.		self 			buttonNamed: 'Cancel' action: #doCancel color: color lighter 			help: 'cancel changes made and close panel'.	}, self rebuildOptionalButtons.	thingsToRevert _ Dictionary new.	"thingsToRevert at: #fillStyle: put: myTarget fillStyle."	(myTarget isKindOf: SystemWindow) ifTrue: [		thingsToRevert at: #setWindowColor: put: myTarget paneColorToUse	].	thingsToRevert at: #hasDropShadow: put: myTarget hasDropShadow.	thingsToRevert at: #shadowColor: put: myTarget shadowColor.	(myTarget respondsTo: #borderColor:) ifTrue: [		thingsToRevert at: #borderColor: put: myTarget borderColor.	].	thingsToRevert at: #borderWidth: put: myTarget borderWidth.	thingsToRevert at: #cornerStyle: put: myTarget cornerStyle.	thingsToRevert at: #sticky: put: myTarget isSticky.	thingsToRevert at: #lock: put: myTarget isLocked.! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 13:02'!rebuildOptionalButtons	| answer |	answer _ {		self transparentSpacerOfSize: 20@3.		self 			buttonNamed: 'Button' action: #doButtonProperties color: color lighter 			help: 'open a button properties panel for the morph'.	}.	(myTarget isKindOf: TextMorph) ifTrue: [		answer _ answer, {			self 				buttonNamed: 'Text' action: #doTextProperties color: color lighter 				help: 'open a text properties panel for the morph'.		}.	].	^answer! !!ObjectPropertiesMorph methodsFor: 'panes' stamp: 'RAA 3/16/2001 08:55'!paneForBorderColorPicker	^self 		inAColumn: {			self 				colorPickerFor: self				getter: #targetBorderColor				setter: #targetBorderColor:.			self lockedString: 'Border Color'.			(self paneForBorderToggles)  hResizing: #shrinkWrap.			self paneForBorderWidth.		} 		named: #pickerForBorderColor.! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'RAA 3/15/2001 12:10'!changeStyleTo: aNewStyle	paragraph textStyle: aNewStyle.	paragraph composeAll.	self recomputeSelection.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:41'!activeEditor	^self activeTextMorph editor! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:41'!activeTextMorph	^activeTextMorph! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:57'!applyToWholeText	^applyToWholeText! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:06'!changeKernBy: delta	self changeSelectionAttributeTo: (TextKern kern: delta)! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:05'!changeSelectionAttributeTo: newAttribute	self applyToWholeText ifTrue: [self activeEditor selectAll].	self activeEditor replaceSelectionWith: (		self activeEditor selection asText addAttribute: newAttribute	).	self activeTextMorph updateFromParagraph.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:14'!changeStyle	| aList reply style |	aList _ StrikeFont familyNames remove: 'DefaultTextStyle' ifAbsent: []; asOrderedCollection.	aList addFirst: 'DefaultTextStyle'.	reply _ (SelectionMenu labelList: aList lines: #(1) selections: aList) startUp.	reply ifNil: [^self].	(style _ TextStyle named: reply) ifNil: [self beep. ^ true].	self applyToWholeText ifTrue: [self activeEditor selectAll].	self activeEditor changeStyleTo: style copy.	self activeTextMorph updateFromParagraph.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:06'!changeTargetColorTo: aColor	self changeSelectionAttributeTo: (TextColor color: aColor)! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:07'!changeToNormalText	self changeSelectionAttributeTo: (TextEmphasis normal)! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 16:48'!doAccept	myTarget 		text: self activeTextMorph contents textStyle: self activeTextMorph textStyle;		releaseCachedState;		changed.	super doAccept.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:47'!initialize	super initialize.	applyToWholeText _ true.	myTarget ifNil: [myTarget _ TextMorph new openInWorld].	self color: (Color r: 0.355 g: 0.742 b: 0.839).	self borderColor: self color darker.	activeTextMorph _ TextMorph new		extent: 300@100;		contents: myTarget contents wrappedTo: 300;		text: myTarget contents textStyle: myTarget textStyle;		releaseCachedState.	self rebuild.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:00'!kernMinus	self changeKernBy: -1! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:01'!kernPlus	self changeKernBy: 1! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 12:01'!offerFontMenu	"Present a menu of available fonts, and if one is chosen, apply it to the current selection.  	Use only names of Fonts of this paragraph  "	| aList reply |	aList _ self activeTextMorph textStyle fontNamesWithPointSizes.	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ifNil: [^self].	self applyToWholeText ifTrue: [self activeEditor selectAll].	self activeEditor replaceSelectionWith:		(Text string: self activeEditor selection asString 			attribute: (TextFontChange fontNumber: (aList indexOf: reply))).	self activeTextMorph updateFromParagraph.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:57'!paneForApplyToWholeText	^self inARow: {		self			directToggleButtonFor: self 			getter: #applyToWholeText			setter: #toggleApplyToWholeText			help: 'Whether to apply style changes to entire text or just selection'.		self lockedString: ' Apply changes to entire text '.	}! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:55'!paneForTextColorPicker	^self 		inAColumn: {			self 				colorPickerFor: self				getter: #targetTextColor				setter: #changeTargetColorTo:.			self lockedString: 'Text Color'.		} 		named: #pickerForTextColor.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:19'!rebuild	| buttonColor c |	self removeAllMorphs.	self addAColumn: {		self lockedString: 'Text Properties for ',myTarget name.	}.	self addAColumn: {		self paneForApplyToWholeText.	}.	c _ self addAColumn: {		self activeTextMorph.	}.	c 		wrapCentering: #topLeft;		color: Color white;		borderWidth: 2;		borderColor: color darker.	self addAColumn: {		self paneForTextColorPicker.	}.	buttonColor _ color lighter.	self addARow: {		self inAColumn: {			self addARow: {				self 					buttonNamed: 'Size' action: #offerFontMenu color: buttonColor					help: 'font changing'.				self 					buttonNamed: 'Style' action: #changeStyle color: buttonColor					help: 'font changing'.				self 					buttonNamed: 'N' action: #changeToNormalText color: buttonColor					help: 'normal text'.				self 					buttonNamed: 'B' action: #toggleBold color: buttonColor					help: 'bold text'.				self 					buttonNamed: 'I' action: #toggleItalic color: buttonColor					help: 'italic text'.				self 					buttonNamed: 'n' action: #toggleNarrow color: buttonColor					help: 'narrow text'.				self 					buttonNamed: 'U' action: #toggleUnderlined color: buttonColor					help: 'underlined text'.				self 					buttonNamed: 'S' action: #toggleStruckOut color: buttonColor					help: 'struck out text'.				self 					buttonNamed: 'Kern-' action: #kernMinus color: buttonColor					help: 'decrease kern'.				self 					buttonNamed: 'Kern+' action: #kernPlus color: buttonColor					help: 'increase kern'.			}.		}.	}.	self addARow: {		self inAColumn: {			self addARow: {				self 					buttonNamed: 'Accept' action: #doAccept color: buttonColor					help: 'keep changes made and close panel'.				self 					buttonNamed: 'Cancel' action: #doCancel color: buttonColor					help: 'cancel changes made and close panel'.			}.		}.	}.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 08:56'!targetTextColor	^Color black! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/15/2001 11:50'!toggleApplyToWholeText	applyToWholeText _ applyToWholeText not.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:16'!toggleBold	self toggleSelectionAttribute: TextEmphasis bold! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:16'!toggleItalic	self toggleSelectionAttribute: TextEmphasis italic! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:16'!toggleNarrow	self toggleSelectionAttribute: TextEmphasis narrow! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:15'!toggleSelectionAttribute: newAttribute	| selText oldAttributes |	self applyToWholeText ifTrue: [self activeEditor selectAll].	selText _ self activeEditor selection asText.	oldAttributes _ selText attributesAt: 1 forStyle: self activeTextMorph textStyle.	oldAttributes do: [:att |		(att dominates: newAttribute) ifTrue: [newAttribute turnOff]	].	self activeEditor replaceSelectionWith: (selText addAttribute: newAttribute).	self activeTextMorph updateFromParagraph.! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:17'!toggleStruckOut	self toggleSelectionAttribute: TextEmphasis struckOut! !!TextPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 3/16/2001 09:17'!toggleUnderlined	self toggleSelectionAttribute: TextEmphasis underlined! !ButtonPropertiesMorph removeSelector: #clearDropHighlightingOf:!