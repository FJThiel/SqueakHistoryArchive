'From Squeak3.2alpha of 1 November 2001 [latest update: #4461] on 3 November 2001 at 7:47:54 pm'!TestCase subclass: #PoolTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Language-Modules-Tests'!!Object methodsFor: 'testing' stamp: 'hg 11/2/2001 13:32'!knownName	"If a formal name has been handed out for this object, answer it, else nil"		^ Preferences capitalizedReferences		ifTrue:			[References definedNames keyAtValue: self ifAbsent: [nil]]		ifFalse:			[nil]! !!Object methodsFor: 'viewer' stamp: 'hg 11/2/2001 13:32'!chooseNewNameForReference	"Offer an opportunity for the receiver, presumed already to be known in the References registry, to be renamed"	|  nameSym current newName |	current _ References definedNames keyAtValue: self ifAbsent: [^ self error: 'not found in References'].	newName _ FillInTheBlank request: 'Please enter new name' initialAnswer: current.	"Want to user some better way of determining the validity of the chosen identifier, and also want to give more precise diagnostic if the string the user types in is not acceptable.  Work to be done here."	newName isEmpty ifTrue: [^ nil].	((Scanner isLiteralSymbol: newName) and: [(newName includes: $:) not])		ifTrue:			[nameSym _ newName capitalized asSymbol.			(((References definedNames includesKey:  nameSym) not and:				[(Smalltalk includesKey: nameSym) not]) and:						[(ScriptingSystem allKnownClassVariableNames includes: nameSym) not])					ifTrue:						[(References definedNames associationAt: current) key: nameSym.						References definedNames rehash.						^ nameSym]].	self inform: 'Sorry, that name is not available.'.	^ nil! !!Object methodsFor: 'viewer' stamp: 'hg 11/3/2001 19:42'!uniqueNameForReference	"Answer a nice name by which the receiver can be referred to by other objects.  At present this uses a global References dictionary to hold the database of references, but in due course this will need to acquire some locality"	| aName nameSym stem knownClassVars |	(References definedNames includesIdentity: self) 		ifTrue: [^ References definedNames keyAtValue: self].	(stem _ self knownName) ifNil:		[stem _ self defaultNameStemForInstances asString].	stem _ stem select: [:ch | ch isLetter or: [ch isDigit]].	stem size == 0 ifTrue: [stem _ 'A'].	stem first isLetter ifFalse:		[stem _ 'A', stem].	stem _ stem capitalized.	knownClassVars _ ScriptingSystem allKnownClassVariableNames.	aName _ Utilities keyLike:  stem satisfying:		[:jinaLake |			nameSym _ jinaLake asSymbol.			 ((References definedNames includesKey:  nameSym) not and:				[(Module root moduleDefining: nameSym) notNil]) and:						[(knownClassVars includes: nameSym) not]].	References defineName: (aName _ aName asSymbol) as: self export: true.	^ aName! !!AliceNamespace methodsFor: 'initialize' stamp: 'hg 11/2/2001 13:59'!initialize	"Initialize the namespace"	myDictionary _ AliceConstants definedNames copy.	myWorkspace _ Workspace new.	myWorkspace setBindings: myDictionary.	myWorkspace embeddedInMorphicWindowLabeled: 'Namespace'.! !!AlicePoolDefiner class methodsFor: 'pool definition' stamp: 'hg 11/2/2001 15:00'!initPool	"Create the pool dictionary if necessary"	| poolName |	"dummy to show up in search for users of this name"	AliceConstants.	poolName _ #AliceConstants.	(Module root definitionFor: poolName ifAbsent: [nil]) doIfNotNil: [:poolModule |		[(Module root definitionFor: #WonderlandConstants ifAbsent: [nil]) 			definedNames keysAndValuesDo: [:key :value |			 	poolModule defineName: key as: value export: true].		self initPool: (Smalltalk at: poolName)]			on: Warning do: [:ex | ex resume: true]].! !!AlicePoolDefiner class methodsFor: 'pool definition' stamp: 'hg 11/2/2001 12:31'!initPool: aModule	"Initialize the dictionary"	aModule defineName: #inOrder as: #inOrder export: true.	aModule defineName: #together as: #together export: true.! !!Array methodsFor: 'file in/out' stamp: 'hg 11/2/2001 13:41'!objectForDataStream: refStrm	| dp |	"I am about to be written on an object file.  If I am one of two shared global arrays, write a proxy instead."self == (TextConstants DefaultTabsArray) ifTrue: [	dp _ DiskProxy global: #TextConstants selector: #at: args: #(DefaultTabsArray).	refStrm replace: self with: dp.	^ dp].self == (TextConstants at: #DefaultMarginTabsArray) ifTrue: [	dp _ DiskProxy global: #TextConstants selector: #at: args: #(DefaultMarginTabsArray).	refStrm replace: self with: dp.	^ dp].^ super objectForDataStream: refStrm! !!B3DPoolDefiner class methodsFor: 'pool definition' stamp: 'hg 11/2/2001 12:22'!initFromSpecArray: specArray in: aModule	specArray do:[:spec|		self initPoolVariable: spec first value: spec last in: aModule.	]! !!B3DPoolDefiner class methodsFor: 'pool definition' stamp: 'hg 11/2/2001 12:22'!initPool	"B3DPoolDefiner initPool"	| poolName |	poolName _ self poolName asSymbol.	self initPool: (Module root definitionFor: poolName ifAbsent: [nil]).! !!B3DPoolDefiner class methodsFor: 'pool definition' stamp: 'hg 11/2/2001 12:26'!initPoolFull	"B3DPoolDefiner initPoolFull"	"Move old stuff to Undeclared and re-initialize the receiver"	| pool |	pool _ Module root definitionFor: self poolName asSymbol ifAbsent:[Module new].	pool definedNames associationsDo:[:assoc|		Undeclared declare: assoc key from: pool.	].	self initPool.	Undeclared removeUnreferencedKeys.! !!B3DPoolDefiner class methodsFor: 'pool definition' stamp: 'hg 11/2/2001 12:23'!initPoolVariable: token value: value in: aModule	aModule defineName: token as: value export: true.	aModule redefineName: token as: value export: true.! !!B3DPoolDefiner class methodsFor: 'pool definition' stamp: 'hg 11/2/2001 12:20'!poolName	"dummy reference just to make this show up in a search for users of the pool"	B3DEngineConstants.	^#B3DEngineConstants! !!DeepCopier methodsFor: 'like fullCopy' stamp: 'hg 11/2/2001 21:31'!mapUniClasses	"For new Uniclasses, map their class vars to the new objects.  And their additional class instance vars.  (scripts slotInfo) and cross references like (player321)."	"Players also refer to each other using associations in the References dictionary.  Search the methods of our Players for those.  Make new entries in References and point to them."| pp oldPlayer newKey newAssoc oldSelList newSelList |"Uniclasses use class vars to hold onto siblings who are referred to in code"pp _ Player class superclass instSize.uniClasses do: [:playersClass | "values = new ones"	playersClass classPool associationsDo: [:assoc |		assoc value: (assoc value veryDeepCopyWith: self)].	playersClass scripts: (playersClass privateScripts veryDeepCopyWith: self).	"pp+1"	"(pp+2) slotInfo was deepCopied in copyUniClass and that's all it needs"	pp+3 to: playersClass class instSize do: [:ii | 		playersClass instVarAt: ii put: 			((playersClass instVarAt: ii) veryDeepCopyWith: self)].	]."Make new entries in References and point to them."References definedNames keys"copy" do: [:playerName |	oldPlayer _ References definitionFor: playerName ifAbsent: [nil].	(references includesKey: oldPlayer) ifTrue: [		newKey _ (references at: oldPlayer) "new player" uniqueNameForReference.		"now installed in References"		(references at: oldPlayer) renameTo: newKey]].uniClasses "values" do: [:newClass |	oldSelList _ OrderedCollection new.   newSelList _ OrderedCollection new.	newClass selectorsDo: [:sel | 		(newClass compiledMethodAt: sel)	 literals do: [:assoc |			assoc isVariableBinding ifTrue: [				(References associationAt: assoc key ifAbsent: [nil]) == assoc ifTrue: [					newKey _ (references at: assoc value ifAbsent: [assoc value]) 									externalName asSymbol.					(assoc key ~= newKey) & (References definedNames includesKey: newKey) ifTrue: [						newAssoc _ References definedNames associationAt: newKey.						newClass methodDictionary at: sel put: 							(newClass compiledMethodAt: sel) clone.	"were sharing it"						(newClass compiledMethodAt: sel)							literalAt: ((newClass compiledMethodAt: sel) literals indexOf: assoc)							put: newAssoc.						(oldSelList includes: assoc key) ifFalse: [							oldSelList add: assoc key.  newSelList add: newKey]]]]]].	oldSelList with: newSelList do: [:old :new |			newClass replaceSilently: old to: new]].	"This is text replacement and can be wrong"! !!DeflateStream class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 14:09'!initialize	"DeflateStream initialize"		| size bits min |	size _ 16r8000.	bits _ 15.	min _ 3.	ZipConstants defineName: #WindowSize as: size export: true.	ZipConstants defineName: #WindowMask as: size - 1 export: true.	ZipConstants defineName: #MaxDistance as: size export: true.	ZipConstants defineName: #MinMatch as: min export: true.	ZipConstants defineName: #MaxMatch as: 258 export: true.	ZipConstants defineName: #HashBits as: bits export: true.	ZipConstants defineName: #HashMask as: (1 << bits) - 1 export: true.	ZipConstants defineName: #HashShift as: (bits + min - 1) // min export: true.! !!EventSensor class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 12:34'!initializeEventSensorConstants	"EventSensor initialize"	#(		(RedButtonBit 4)		(BlueButtonBit 2)		(YellowButtonBit 1)		(ShiftKeyBit 1)		(CtrlKeyBit 2)		(OptionKeyBit 4)		(CommandKeyBit 8)		"Types of events"		(EventTypeNone 0)		(EventTypeMouse 1)		(EventTypeKeyboard 2)		(EventTypeDragDropFiles 3)		"Press codes for keyboard events"		(EventKeyChar 0)		(EventKeyDown 1)		(EventKeyUp 2)	) do:[:spec|		EventSensorConstants defineName: spec first as: spec last export: true].! !!ExternalFunction class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 12:36'!initializeCallingConventions	"ExternalFunction initializeCallingConventions"	#(		(FFICallTypeCDecl 0)		(FFICallTypeApi 1)	) do:[:spec|		FFIConstants defineName: spec first as: spec second export: true.	].! !!ExternalFunction class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 12:35'!initializeErrorConstants	"ExternalFunction initializeErrorConstants"	FFIErrorMessages _ Dictionary new.	#(		"No callout mechanism available"		(FFINoCalloutAvailable -1 'Callout mechanism not available')		"generic error"		(FFIErrorGenericError 0 'A call to an external function failed')		"primitive invoked without ExternalFunction"		(FFIErrorNotFunction 1 'Only ExternalFunctions can be called')		"bad arguments to primitive call"		(FFIErrorBadArgs 2 'Bad arguments in primitive invokation')		"generic bad argument"		(FFIErrorBadArg 3 'Bad argument for external function')		"int passed as pointer"		(FFIErrorIntAsPointer 4 'Cannot use integer as pointer')		"bad atomic type (e.g., unknown)"		(FFIErrorBadAtomicType 5 'Unknown atomic type in external call')		"argument coercion failed"		(FFIErrorCoercionFailed 6 'Could not coerce arguments')		"Type check for non-atomic types failed"		(FFIErrorWrongType 7 'Wrong type in external call')		"struct size wrong or too large"		(FFIErrorStructSize 8 'Bad structure size in external call')		"unsupported calling convention"		(FFIErrorCallType 9 'Unsupported calling convention')		"cannot return the given type"		(FFIErrorBadReturn 10 'Cannot return the given type')		"bad function address"		(FFIErrorBadAddress 11 'Bad function address')		"no module given but required for finding address"		(FFIErrorNoModule 12 'No module to load address from')		"function address not found"		(FFIErrorAddressNotFound 13 'Unable to find function address')		"attempt to pass 'void' parameter"		(FFIErrorAttemptToPassVoid 14 'Cannot pass ''void'' parameter')		"module not found"		(FFIErrorModuleNotFound 15 'External module not found')		"external library invalid"		(FFIErrorBadExternalLibrary 16 'External library is invalid')		"external function invalid"		(FFIErrorBadExternalFunction 17 'External function is invalid')		"ExternalAddress points to ST memory (don't you dare to do this!!)"		(FFIErrorInvalidPointer 18 'Attempt to pass invalid pointer')	) do:[:spec|		FFIConstants defineName: spec first as: spec second export: true.		FFIErrorMessages at: spec second put: spec third.	].! !!FontSet class methodsFor: 'installing' stamp: 'hg 11/2/2001 13:43'!installAsDefault  "FontSetNewYork installAsDefault"	(SelectionMenu confirm: 'Do you want to install''' , self fontName , ''' as default font?')		ifFalse: [^ self].	self installAsTextStyle.	"TextConstants redefineName: #OldDefaultTextStyle as: TextStyle default export: true."	TextConstants redefineName: #DefaultTextStyle as: (TextStyle named: self fontName) export: true.	ListParagraph initialize.	PopUpMenu initialize.	StandardSystemView initialize.	"SelectionMenu notify: 'The old text style has been savedas ''OldDefaultTextStyle''.'"! !!FontSet class methodsFor: 'installing' stamp: 'hg 11/2/2001 13:44'!installAsTextStyle  "FontSetNewYork installAsTextStyle"	| selectors |	(TextConstants definedNames includesKey: self fontName) ifTrue:		[(self confirm: self fontName , ' is already defined in TextConstants.Do you want to replace that definition?')			ifFalse: [^ self]].	selectors _ (self class selectors select: [:s | s beginsWith: 'size']) asSortedCollection.	TextConstants		redefineName: self fontName		as: (TextStyle fontArray: (selectors collect: [:each | self perform: each]))		export: true! !!GZipReadStream class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 12:38'!initialize	"GZipReadStream initialize"	#(		(GZipMagic 16r8B1F)		"GZIP magic number"		(GZipDeflated 8)			"Compression method"		(GZipAsciiFlag 16r01)		"Contents is ASCII"		(GZipContinueFlag 16r02)	"Part of a multi-part archive"		(GZipExtraField 16r04)	"Archive has extra fields"		(GZipNameFlag 16r08)	"Archive has original file name"		(GZipCommentFlag 16r10)	"Archive has comment"		(GZipEncryptFlag 16r20)	"Archive is encrypted"		(GZipReservedFlags 16rC0)"Reserved" 	) do:[:spec|		GZipConstants defineName: spec first as: spec last export: true.	].! !!ImageSegment methodsFor: 'read/write segment' stamp: 'hg 11/2/2001 13:29'!savePlayerReferences: dictOfAllObjects	| save world |	"Save our associations we own in the shared References table.  They will be installed when the segment is imported."	save _ OrderedCollection new.	References definedNames associationsDo: [:assoc |		(dictOfAllObjects includesKey: assoc) ifTrue: [save add: assoc]].	1 to: 5 do: [:ii | ((arrayOfRoots at: ii) respondsTo: #isCurrentProject) ifTrue: [					world _ (arrayOfRoots at: ii) world]].	world setProperty: #References toValue: save.		"assume it is not refed from outside and will be traced"! !!KlattSynthesizer class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 12:41'!initializePool	| mod |	"dummy reference just to make this show up in a search for users of the pool"	KlattResonatorIndices.	mod _ Module root definitionFor: #KlattResonatorIndices ifAbsent:[nil].	#(Rnpp Rtpp R1vp R2vp R3vp R4vp R2fp R3fp R4fp R5fp R6fp R1c R2c R3c R4c R5c R6c R7c R8c Rnpc Rnz Rtpc Rtz Rout)		doWithIndex: [ :each :i | mod defineName: each as: i export: true]! !!Morph methodsFor: 'naming' stamp: 'hg 11/2/2001 13:31'!renameTo: aName	"Set Player name in costume.  Update Viewers.  Fix all tiles (old style).  fix References.  New tiles: recompile, and recreate open scripts.  If coming in from disk, and have name conflict, References will already have new name."	| aPresenter putInViewer aPasteUp renderer oldKey assoc classes oldName |	oldName _ self knownName.	(renderer _ self topRendererOrSelf) setNameTo: aName.	putInViewer _ false.	((aPresenter _ self presenter) isNil or: [renderer player isNil]) ifFalse:		[putInViewer _ aPresenter currentlyViewing: renderer player.		putInViewer ifTrue:			[renderer player viewerFlapTab hibernate]].  "empty it temporarily"	(aPasteUp _ self topPasteUp) ifNotNil:		[aPasteUp allTileScriptingElements do: [:m | m bringUpToDate]].	"Fix References dictionary.  See restoreReferences to know why oldKey is 		already aName, but oldName is the old name."	oldKey _ References definedNames keyAtIdentityValue: renderer player ifAbsent: [nil].	oldKey ifNotNil:		[assoc _ References definedNames associationAt: oldKey.		oldKey = aName ifFalse: ["normal rename"			assoc key: aName asSymbol.			References definedNames rehash]].	putInViewer ifTrue: [aPresenter viewMorph: self].	"recreate my viewer"	oldKey ifNil: [^ aName].	"Force strings in tiles to be remade with new name.  New tiles only."	Preferences universalTiles ifFalse: [^ aName].	classes _ (Smalltalk allCallsOn: assoc) collect: [ :each | each classSymbol].	(classes asSet) do: [:clsName |		(Smalltalk at: clsName) replaceSilently: oldName to: aName].		"replace in text body of all methods.  Can be wrong!!"	"Redo the tiles that are showing.  This is also done in caller in unhibernate."	aPasteUp ifNotNil: [		aPasteUp allTileScriptingElements do: [:mm | "just ScriptEditorMorphs".			(mm isKindOf: ScriptEditorMorph) ifTrue:				[((mm playerScripted class compiledMethodAt: mm scriptName) hasLiteral: assoc)					ifTrue: [mm hibernate; unhibernate]]]].	^ aName! !!ParseNode methodsFor: 'private' stamp: 'hg 11/2/2001 13:45'!printSingleComment: aString on: aStream indent: indent 	"Print the comment string, assuming it has been indented indent tabs.	Break the string at word breaks, given the widths in the default	font, at 450 points."	| readStream word position lineBreak font wordWidth tabWidth spaceWidth lastChar |	readStream _ ReadStream on: aString.	font _ TextStyle default defaultFont.	tabWidth _ TextConstants DefaultTab.	spaceWidth _ font widthOf: Character space.	position _ indent * tabWidth.	lineBreak _ 450.	[readStream atEnd]		whileFalse: 			[word _ self nextWordFrom: readStream setCharacter: [:lc | lastChar _ lc].			wordWidth _ word inject: 0 into: [:width :char | width + (font widthOf: char)].			position _ position + wordWidth.			position > lineBreak				ifTrue: 					[aStream crtab: indent.					position _ indent * tabWidth + wordWidth + spaceWidth.					lastChar = Character cr						ifTrue: [[readStream peekFor: Character tab] whileTrue].					word isEmpty ifFalse: [aStream nextPutAll: word; space]]				ifFalse: 					[aStream nextPutAll: word.					readStream atEnd						ifFalse: 							[position _ position + spaceWidth.							aStream space].					lastChar = Character cr						ifTrue: 							[aStream crtab: indent.							position _ indent * tabWidth.							[readStream peekFor: Character tab] whileTrue]]]! !!Player methodsFor: 'misc' stamp: 'hg 11/2/2001 13:34'!tileReferringToSelf	"answer a tile that refers to the receiver"	| aTile  nn tile |	Preferences universalTiles ifTrue:		[nn _ self externalName. 	"name it, if necessary, and put in References"		(References definedNames includesKey: nn asSymbol) ifFalse: [			 References defineName: nn as: self export: true].		tile _ SyntaxMorph new parseNode: 			(VariableNode new name: nn key: nn code: nil).		tile layoutInset: 1; addMorph: (tile addString: nn special: false).		tile color: (SyntaxMorph translateColor: #variable).		tile extent: tile firstSubmorph extent + (2@2).		^ tile].	aTile _ TileMorph new setToReferTo: self.	^ aTile! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:23'!alice	self tryInitialize: #AlicePoolDefiner andCompileForPoolNamed: #AliceConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!b3d	self tryInitialize: #B3DPoolDefiner andCompileForPoolNamed: #B3DEngineConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!balloon	self tryInitialize: #BalloonEngineBase andCompileForPoolNamed: #BalloonEngineConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!event	self tryInitialize: #EventSensor andCompileForPoolNamed: #EventSensorConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!ffi	self tryInitialize: #ExternalFunction andCompileForPoolNamed: #FFIConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!gzip	self tryInitialize: #GZipReadStream andCompileForPoolNamed: #GZipConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:18'!initialize: classSymbol andCompileForPoolNamed: aSymbol	| poolModule users initializer |	Transcript cr; cr; show: 'Testing ', aSymbol, ' ', Smalltalk garbageCollect printString; cr.	poolModule _ Module root definitionFor: aSymbol ifAbsent: [^false].	users _ OrderedCollection new.	Module root deepSubmodulesDo: [:mod |		(mod refForNeighborModule: poolModule)			ifNotNil: [users add: mod]].		"reinitialize pool"	initializer _ Module root definitionFor: classSymbol ifAbsent: [^false].	[initializer initialize] on: Warning do: [:ex | ex resume: true].	"recompile all classes in all modules importing this pool module"	Transcript show: 'Recompiling'.	users do: [:mod | mod allClassesDo: [:cl | 		Transcript space; show: cl name.		cl compileAll]].	^true! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!klatt	self tryInitialize: #KlattSynthesizer andCompileForPoolNamed: #KlattResonatorIndices.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!players	self tryInitialize: #References andCompileForPoolNamed: #Object.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!textConstants	self tryInitialize: #Text andCompileForPoolNamed: #TextConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:23'!tryInitialize: classSymbol andCompileForPoolNamed: aSymbol	self should: [self initialize: classSymbol andCompileForPoolNamed: aSymbol]! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!wonderland	self tryInitialize: #WonderlandEvent andCompileForPoolNamed: #WonderlandConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!zip	self tryInitialize: #DeflateStream andCompileForPoolNamed: #ZipConstants.! !!PoolTests methodsFor: 'tests' stamp: 'hg 11/2/2001 16:24'!zipFile	self tryInitialize: #ZipArchive andCompileForPoolNamed: #ZipFileConstants.	self tryInitialize: #ZipWriteStream andCompileForPoolNamed: #ZipFileConstants.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:29'!testAlice	| case |	case := self class selector: #alice.	case run! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:29'!testB3d	| case |	case := self class selector: #b3d.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:29'!testBalloon	| case |	case := self class selector: #balloon.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:29'!testEvent	| case |	case := self class selector: #event.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testFFI	| case |	case := self class selector: #ffi.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testGZip	| case |	case := self class selector: #gzip.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testKlatt	| case |	case := self class selector: #klatt.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testPlayers	| case |	case := self class selector: #players.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testTextConstants	| case |	case := self class selector: #textConstants.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testWonderland	| case |	case := self class selector: #wonderland.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testZip	| case |	case := self class selector: #zip.	case run.! !!PoolTests methodsFor: 'Testing' stamp: 'hg 11/2/2001 16:30'!testZipFile	| case |	case := self class selector: #zipFile.	case run.! !!Preferences class methodsFor: 'fonts' stamp: 'hg 11/2/2001 13:45'!setSystemFontTo: aFont	"Establish the default text font and style"	| aStyle newDefaultStyle |	aFont ifNil: [^ self].	aStyle _ aFont textStyle ifNil: [^ self].	newDefaultStyle _ aStyle copy.	newDefaultStyle defaultFontIndex: (aStyle fontIndexOf: aFont).	TextConstants redefineName:  #DefaultTextStyle as: newDefaultStyle export: true.	Flaps replaceToolsFlap.	ScriptingSystem resetStandardPartsBin! !!ProgressMorph methodsFor: 'private' stamp: 'hg 11/2/2001 13:45'!fontOfPointSize: size	^ (TextConstants definitionFor: #ComicBold ifAbsent: [TextStyle default]) fontOfPointSize: size! !!Project methodsFor: 'file in/out' stamp: 'hg 11/2/2001 13:36'!restoreReferences	| key newKey |	"I just came in from an exported segment.  Take all my players that were in References, and reinstall them."	(world valueOfProperty: #References ifAbsent: [#()]) do: [:assoc | "just came in"		key _ assoc key.		(References definedNames includesKey: key) 			ifTrue: ["must rename" 				(References definedNames at: key) == assoc value ifTrue: [					self error: 'why object already present?'].				newKey _ assoc value uniqueNameForReference.				References removeName: newKey.				assoc key: newKey.				References addAssoc: assoc export: true.	"use the known association"				assoc value renameTo: newKey.	"Player name and recompile scripts"				]			ifFalse: [References addAssoc: assoc export: true]].	world removeProperty: #References.! !!ReadWriteStream methodsFor: 'converting' stamp: 'hg 11/2/2001 12:37'!asUnZippedStream	| isGZip outputStream first |	"Decompress this file if needed, and return a stream.  No file is written.  File extension may be .gz or anything else."	self binary.	first _ self next.	isGZip _ (self next * 256 + first) = (GZipConstants definitionFor: #GZipMagic ifAbsent: [nil]).	self skip: -2.	isGZip 		ifTrue: [outputStream _ (RWBinaryOrTextStream with:					(GZipReadStream on: self) upToEnd) reset.				self close]		ifFalse: [outputStream _ self].	^ outputStream! !!BDFFontReader class methodsFor: 'resource download' stamp: 'hg 11/2/2001 13:42'!installX11Fonts "BDFFontReader installX11Fonts"	"Installs previously-converted .sf2 fonts into the TextConstants dictionary.  This makes them available as TextStyles everywhere in the image."	| families fontArray textStyle |	families _ #( 'Courier' 'Helvetica' 'LucidaBright' 'Lucida' 'LucidaTypewriter' 'NewCenturySchoolbook' 'TimesRoman' ).	families do: [:family |		fontArray _ StrikeFont readStrikeFont2Family: family.		textStyle _ TextStyle fontArray: fontArray.		TextConstants defineName: family as: textStyle export: true.	].! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'hg 11/2/2001 13:36'!referenceAt: aSymbol	"Answer the object referred to by aSymbol in the 'References' scheme of things, or nil if none"	^ References definitionFor: aSymbol ifAbsent: [nil]! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'hg 11/2/2001 13:37'!referenceAt: aSymbol put: anObject	"Store a reference to anObject at the given symbol in the References directory"	^ References redefineName: aSymbol as: anObject export: true! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'hg 11/2/2001 13:37'!resetStaleScriptingReferences	"Remove all scripting references that are no longer needed"	References definedNames removeUnreferencedKeys	"ScriptingSystem resetStaleScriptingReferences"! !!EToySystem class methodsFor: 'misc' stamp: 'hg 11/2/2001 13:42'!fixComicCharacters	"EToySystem fixComicCharacters"	((TextConstants ComicBold) fontAt: 3) characterFormAt: $_ put:		(Form	extent: 9@16	depth: 1	fromArray: #( 0 0 0 134217728 402653184 805306368 2139095040 4278190080 2139095040 805306368 402653184 134217728 0 0 0 0)	offset: 0@0).	((TextConstants ComicBold) fontAt: 3) characterFormAt: $1 put:		(Form	extent: 5@16	depth: 1	fromArray: #( 0 0 0 0 1610612736 3758096384 3758096384 1610612736 1610612736 1610612736 1610612736 4026531840 4026531840 0 0 0)	offset: 0@0).	((TextConstants ComicBold) fontAt: 3) characterFormAt: $2 put:		(Form	extent: 6@16	depth: 1	fromArray: #( 0 0 0 0 1879048192 4160749568 2550136832 939524096 1879048192 3758096384 3221225472 4160749568 4160749568 0 0 0)	offset: 0@0).	((TextConstants ComicBold) fontAt: 3) characterFormAt: $4 put:		(Form	extent: 7@16	depth: 1	fromArray: #( 0 0 0 0 134217728 402653184 402653184 939524096 1476395008 4227858432 4227858432 402653184 402653184 0 0 0)	offset: 0@0).	((TextConstants ComicBold) fontAt: 3) characterFormAt: $j put:		(Form	extent: 4@16	depth: 1	fromArray: #( 0 0 0 0 1610612736 1610612736 0 1610612736 1610612736 1610612736 1610612736 1610612736 1610612736 1610612736 3758096384 3221225472)	offset: 0@0).! !!StrikeFont methodsFor: 'file in/out' stamp: 'hg 11/2/2001 13:46'!objectForDataStream: refStrm	| dp |	"I am about to be written on an object file.  Write a reference to a known Font in the other system instead.  "	"A path to me"	(TextConstants definitionFor: #forceFontWriting ifAbsent: [false]) ifTrue: [^ self].		"special case for saving the default fonts on the disk.  See collectionFromFileNamed:"	dp _ DiskProxy global: #StrikeFont selector: #familyName:size:emphasized:			args: (Array with: self familyName   with: self height					with: self emphasis).	refStrm replace: self with: dp.	^ dp! !!StrikeFont class methodsFor: 'accessing' stamp: 'hg 11/2/2001 13:46'!familyNames	^ (TextConstants definedNames select: [:each | each isKindOf: TextStyle]) keys asSortedCollection! !!SyntaxMorph methodsFor: 'accessing' stamp: 'hg 11/2/2001 13:37'!actualObject	| sub |	"Who is self in these tiles?  Usually a Player."	(self nodeClassIs: LiteralVariableNode) ifTrue: [		(sub _ self findA: StringMorph) ifNil: [^ nil].		"Need to decompile here for odd synonyms of 'self' ?"		^ Compiler evaluate: sub contents for: Player logged: false].	(self nodeClassIs: VariableNode) ifTrue: [		(sub _ self findA: StringMorph) ifNil: [^ nil].		^ References definitionFor: (self cleanUpString: sub) asSymbol ifAbsent: [nil]].	(self nodeClassIs: LiteralNode) ifTrue: [		(sub _ self findA: StringMorph) ifNil: [^ nil].		^ Compiler evaluate: sub contents for: nil logged: false].	(sub _ self findA: SyntaxMorph) ifNil: [^ nil].	^ sub actualObject	"receiver"! !!SyntaxMorph methodsFor: 'new tiles' stamp: 'hg 11/2/2001 13:38'!attachTileForCode: expression nodeType: nodeClass	| nn master tile |	"create a new tile for a part of speech, and put it into the hand"	"a few special cases"	expression = 'self' ifTrue: [		^ (((self string: expression toTilesIn: Object) 				findA: ReturnNode) findA: nodeClass) attachToHand].	expression = '<me by name>' ifTrue: ["Tile for the variable in References"		nn _ nodeClass knownName ifNil: [#+].		(References definitionFor: nn ifAbsent: [nil]) == nodeClass ifTrue: [			^ self attachTileForCode: nn nodeType: LiteralVariableNode].		"otherwise just give a tile for self"		^ self attachTileForCode: 'self' nodeType: VariableNode].	expression = '<assignment>' ifTrue: ["do something really special"		master _ self class new.		master addNoiseString: '  _  ' emphasis: 1.		tile _ master firstSubmorph.		^ (tile parseNode: AssignmentNode new) attachToHand].	"special marker"		"When this is dropped on a variable, enclose it in 			a new assignment statement"	"general case -- a tile for a whole line of code is returned"	^ ((self string: expression toTilesIn: Object) 				findA: nodeClass) attachToHand.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'hg 11/2/2001 13:48'!makeExternalRelease		"Smalltalk makeExternalRelease"	(self confirm: self version , 'Is this the correct version designation?If not, choose no, and fix it.') ifFalse: [^ self].	"Object classPool at: #DependentsFields"	Smalltalk reclaimDependents.	Preferences enable: #mvcProjectsAllowed.	Preferences enable: #fastDragWindowForMorphic.	Browser initialize.	Undeclared isEmpty ifFalse: [self halt].	ScriptingSystem deletePrivateGraphics.	#(Helvetica Palatino Courier) do:		[:k | TextConstants associationFor: k ifPresent: [:a :m | 			TextConstants removeName: k]].	(Utilities classPool at: #UpdateUrlLists) copy do:		[:pair | (pair first includesSubstring: 'Disney' caseSensitive: false) ifTrue: [			(Utilities classPool at: #UpdateUrlLists) remove: pair]].	(ServerDirectory serverNames copyWithoutAll: #('UCSBCreateArchive' 'UIUCArchive' 'UpdatesExtUIUC' 'UpdatesExtWebPage'))		do: [:sn | ServerDirectory removeServerNamed: sn].	Smalltalk garbageCollect.	Smalltalk obsoleteClasses isEmpty ifFalse: [self halt].	Symbol rehash.	self halt: 'Ready to condense changes or sources'.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'hg 11/2/2001 13:49'!makeSqueaklandRelease	"Smalltalk makeSqueaklandRelease"	"NOTE: This method assumes that		* ALL WINDOWS HAVE BEEN CLOSED (most importantly all project windows)		* ALL GLOBAL FLAPS HAVE BEEN DESTROYED (not just disabled)	This method may needs to be run twice - upon the first run you will probably receive an error message saying 'still have obsolete behaviors'. Close the notifier and try again. If there are still obsolete behaviors then go looking for them.	Last update: ar 8/18/2001 01:14 for Squeak 3.1"	| ss |	(self confirm: self version , 'Is this the correct version designation?If not, choose no, and fix it.') ifFalse: [^ self].	"Delete all projects"	Project allSubInstancesDo:[:p|		(p == Project current) ifFalse:[Project deletingProject: p].	].	"Fix up for some historical problem"	Smalltalk allObjectsDo:[:o|		o isMorph ifTrue:[o removeProperty: #undoGrabCommand].	].	"Hm ... how did this come in?!!"	Smalltalk keys do:[:x|		(x class == String and:[(Smalltalk at: x) isBehavior]) ifTrue:[Smalltalk removeKey: x].	].	"Remove stuff from References"	References definedNames do:[:k| References removeName: k].	"Reset command history"	CommandHistory resetAllHistory.	"Clean out Undeclared"	Undeclared removeUnreferencedKeys.	"Reset scripting system"	StandardScriptingSystem initialize.	"Reset preferences"	Preferences		chooseInitialSettings;		installBrightWindowColors.	"Do a nice fat GC"	Smalltalk garbageCollect.	"Dependents mean that we're holding onto stuff"	(Object classPool at: #DependentsFields) size > 1 		ifTrue: [self error:'Still have dependents'].	"Set a few default preferences"	#(		(honorDesktopCmdKeys false)		(warnIfNoChangesFile false)		(warnIfNoSourcesFile false)		(showDirectionForSketches true)		(menuColorFromWorld false)		(unlimitedPaintArea true)		(useGlobalFlaps false)		(mvcProjectsAllowed false)		(projectViewsInWindows false)		(automaticKeyGeneration true)		(securityChecksEnabled true)		(showSecurityStatus false)		(startInUntrustedDirectory true)		(warnAboutInsecureContent false)		(promptForUpdateServer false)		(fastDragWindowForMorphic false)	) do:[:spec|		Preferences setPreference: spec first toValue: (spec last == #true).	].	"Initialize Browser (e.g., reset recent classes etc)"	Browser initialize.	"Check for Undeclared"	Undeclared isEmpty 		ifFalse: [self error:'Please clean out Undeclared'].	"Remove graphics we don't want"	ScriptingSystem deletePrivateGraphics.	"Remove a few text styles"	#(Helvetica Palatino Courier) do:		[:k | TextConstants associationFor: k ifPresent: [:a :m | 			TextConstants removeName: k]].	"Dump all player uniclasses"	Smalltalk at: #Player ifPresent:[:player|		player allSubclassesDo:[:cls|			cls isSystemDefined ifFalse:[cls removeFromSystem]]].	"Dump all Wonderland uniclasses"	Smalltalk at: #WonderlandActor ifPresent:[:wnldActor|		wnldActor allSubclassesDo:[:cls|			cls isSystemDefined ifFalse:[cls removeFromSystem]]].	"Attempt to get rid of them"	Smalltalk garbageCollect.	"Now remove larger parts"	Smalltalk		discardFFI;		discard3D;		discardSUnit;		discardSpeech;		discardVMConstruction;		discardPWS;		discardIRC.	"Dump change sets"	ChangeSorter removeChangeSetsNamedSuchThat:		[:cs| cs name ~= Smalltalk changes name].	"Clear current change set"	Smalltalk changes clear.	Smalltalk changes name: 'Unnamed1'.	Smalltalk garbageCollect.	"Reinitialize DataStream; it may hold on to some zapped entitities"	DataStream initialize.	"Remove refs to old ControlManager"	ScheduledControllers _ nil.	"Flush obsolete subclasses"	Behavior flushObsoleteSubclasses.	Smalltalk garbageCollect.	Smalltalk obsoleteBehaviors isEmpty 		ifFalse:[self error:'Still have obsolete behaviors'].	"Clear all server entries"	ServerDirectory serverNames do: [:each | ServerDirectory removeServerNamed: each].	SystemVersion current resetHighestUpdate.	ss _ Set allSubInstances.	'Rehashing all sets' displayProgressAt: Sensor cursorPoint from: 1 to: ss size during:[:bar|		1 to: ss size do:[:i|			bar value: i.			(ss at: i) rehash.		].	].	Smalltalk obsoleteClasses isEmpty ifFalse: [self halt].	self halt: 'Ready to condense changes or sources'.	SystemDictionary removeSelector: #makeSqueaklandRelease.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'hg 11/2/2001 13:47'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently used."	"Smalltalk discardOddsAndEnds"	SystemOrganization removeSystemCategory: 'System-Serial Port'.	SystemOrganization removeSystemCategory: 'ST80-Symbols'.	SystemOrganization removeSystemCategory: 'Tools-File Contents Browser'.	SystemOrganization removeSystemCategory: 'System-Compression'.	SystemOrganization removeSystemCategory: 'Tools-Explorer'.	SystemOrganization removeSystemCategory: 'System-Digital Signatures'.	Form removeSelector: #edit.	Smalltalk at: #FormView ifPresent:		[:c | c compile: 'defaultControllerClass  ^ NoController'			classified: 'controller access'].	Smalltalk removeClassNamed: #FormEditorView.	Smalltalk removeClassNamed: #FormEditor.	SystemOrganization removeSystemCategory: 'ST80-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	Smalltalk removeClassNamed: #FormButtonCache.	Smalltalk removeClassNamed: #FormMenuController.	Smalltalk removeClassNamed: #FormMenuView.	Smalltalk removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	SystemDictionary removeSelector: #viewImageImports.	ScreenController removeSelector: #viewImageImports.	Smalltalk removeClassNamed: #FormHolderView.	Smalltalk removeClassNamed: #FormInspectView.	"experimental hand-drawn character recoginizer:"	ParagraphEditor removeSelector: #recognizeCharacters.	ParagraphEditor removeSelector: #recognizer:.	ParagraphEditor removeSelector: #recognizeCharactersWhileMouseIn:.	Smalltalk removeClassNamed: #CharRecog.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	Smalltalk removeClassNamed: #ObjectViewer.	Smalltalk removeClassNamed: #ObjectTracer.	"miscellaneous classes:"	Smalltalk removeClassNamed: #Array2D.	Smalltalk removeClassNamed: #DriveACar.	Smalltalk removeClassNamed: #EventRecorder.	Smalltalk removeClassNamed: #FindTheLight.	Smalltalk removeClassNamed: #PluggableTest.	Smalltalk removeClassNamed: #SystemMonitor.	Smalltalk removeClassNamed: #DocLibrary.	Smalltalk removeClassNamed: #ProtocolBrowser.	Smalltalk removeClassNamed: #ObjectExplorerWrapper.	Smalltalk removeClassNamed: #HierarchyBrowser.	Smalltalk removeClassNamed: #LinkedMessageSet.	Smalltalk removeClassNamed: #ObjectExplorer.	Smalltalk removeClassNamed: #PackageBrowser.	Smalltalk removeClassNamed: #AbstractHierarchicalList.	Smalltalk removeClassNamed: #ChangeList.	Smalltalk removeClassNamed: #VersionsBrowser.	Smalltalk removeClassNamed: #ChangeRecord.	Smalltalk removeClassNamed: #SelectorBrowser.	Smalltalk removeClassNamed: #HtmlFileStream.	Smalltalk removeClassNamed: #CrLfFileStream.	Smalltalk removeClassNamed: #FXGrafPort.	Smalltalk removeClassNamed: #FXBlt.	Smalltalk at: #SampledSound ifPresent: [:c |c initialize].	#(Helvetica Palatino Courier ComicBold ComicPlain) do:		[:k | TextConstants associationFor: k ifPresent: [:a :m | 			TextConstants removeName: k]].Preferences setButtonFontTo:	(StrikeFont familyName: #NewYork size: 12).Preferences setFlapsFontTo:	(StrikeFont familyName: #NewYork size: 12).#(GZipConstants ZipConstants KlattResonatorIndices ) do:	[:k | Smalltalk removeKey: k ifAbsent: []].! !!SystemDictionary methodsFor: 'shrinking' stamp: 'hg 11/2/2001 13:39'!removeNormalCruft 	"Remove various graphics, uniclasses, references.   Caution: see comment at bottom of method"	"Smalltalk removeNormalCruft"		ScriptingSystem stripGraphicsForExternalRelease.	ScriptingSystem spaceReclaimed.	References definedNames do: [:k | References removeName: k].	Smalltalk classNames do:		[:cName | #( 'Player' 'CardPlayer' 'Component' 'WonderlandActor' 'MorphicModel' 'PlayWithMe') do:			[:superName | ((cName ~= superName and: [cName beginsWith: superName])				and: [(cName allButFirst: superName size) allSatisfy: [:ch | ch isDigit]])				ifTrue: [Smalltalk removeClassNamed: cName]]].	Smalltalk at: #Wonderland ifPresent:[:cls | cls removeActorPrototypesFromSystem].	Smalltalk changes clear"Caution: if any worlds in the image happen to have uniclass players associated with them, running this method would likely compromise their functioning and could cause errors, especially if the uniclass player of the current world had any scripts set to ticking.  If that happens to you somehow, you will probably want to find a way to reset the offending world's player to be an UnscriptedCardPlayer, or perhaps nil"! !!TTFontReader class methodsFor: 'instance creation' stamp: 'hg 11/2/2001 13:49'!installTTF: ttfFileName asTextStyle: textStyleName sizes: sizeArray	"TTFontReader		installTTF: 'F:\fonts\amazon__.TTF' 		asTextStyle: #Amazon		sizes: #(24 60)"	| ttf fontArray |	ttf _ self parseFileNamed: ttfFileName.	fontArray _ sizeArray collect:		[:each |		(ttf asStrikeFontScale: each / ttf unitsPerEm)			name: textStyleName;			pointSize: each].	TextConstants redefineName: textStyleName as: (TextStyle fontArray: fontArray) export: true! !!Text class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 13:51'!initTextConstants 	"Initialize constants shared by classes associated with text display, e.g., 	Space, Tab, Cr, Bs, ESC."		"1/24/96 sw: in exasperation and confusion, changed cmd-g mapping from 231 to 232 to see if I could gain any relief?!!"	| letter varAndValue tempArray width |	"CtrlA..CtrlZ, Ctrla..Ctrlz"	letter _ $A. 	#(		212 230 228 196 194 226 241 243 214 229 200 217 246 			245 216 202 210 239 211 240 197 198 209 215 242 231	 		1 166 228 132 130 12 232 179 150 165 136 153 182 			14 15 138 17 18 19 11 21 134 145 151 178 167 ) do:		[:kbd |		TextConstants defineName: ('Ctrl', letter asSymbol) as: kbd asCharacter export: true.		letter _ letter == $Z ifTrue: [$a] ifFalse: [(letter asciiValue + 1) asCharacter]].	varAndValue _ #(		Space	32		Tab		9		CR		13		Enter	3		BS		8		BS2		158		ESC		160		Clear 	173	).	varAndValue size odd ifTrue: [self error: 'unpaired text constant'].	(2 to: varAndValue size by: 2) do:		[:i | TextConstants defineName: (varAndValue at: i - 1) as: (varAndValue at: i) asCharacter export: true].	varAndValue _ #(		CtrlDigits 			(159 144 143 128 127 129 131 180 149 135)		CtrlOpenBrackets	(201 7 218 249 219 15)			"lparen gottn by ctrl-_ = 201; should be 213 but can't type that on Mac"			"location of non-character stop conditions"		EndOfRun	257		CrossedX	258			"values for alignment"		LeftFlush	0		RightFlush	1		Centered	2		Justified	3			"subscripts for a marginTabsArray tuple"		LeftMarginTab	1		RightMarginTab	2			"font faces"		Basal	0		Bold	1		Italic	2			"in case font doesn't have a width for space character"			"some plausible numbers-- are they the right ones?"		DefaultSpace			4		DefaultTab				24		DefaultLineGrid			16		DefaultBaseline			12		DefaultFontFamilySize	3	"basal, bold, italic"	).	varAndValue size odd ifTrue: [self error: 'unpaired text constant'].	(2 to: varAndValue size by: 2) do:		[:i | TextConstants defineName: (varAndValue at: i - 1) as: (varAndValue at: i) export: true].	TextConstants at: #DefaultRule	put: Form over.	TextConstants at: #DefaultMask	put: Color black.	width _ Display width max: 720.	tempArray _ Array new: width // DefaultTab.	1 to: tempArray size do:		[:i | tempArray at: i put: DefaultTab * i].	TextConstants defineName: #DefaultTabsArray as: tempArray export: true.	tempArray _ Array new: (width // DefaultTab) // 2.	1 to: tempArray size do:		[:i | tempArray at: i put: (Array with: (DefaultTab*i) with: (DefaultTab*i))].	TextConstants defineName: #DefaultMarginTabsArray as: tempArray export: true."Text initTextConstants "! !!Text class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 13:51'!initialize	"Text initialize"	"Initialize constants shared by classes associated with text display."	TextConstants defineName: #CaretForm as:				(Form extent: 16@5					fromArray: #(2r001100e26 2r001100e26 2r011110e26 2r111111e26 2r110011e26)					offset: -3@0) export: true.	self initTextConstants! !!TextMorphEditor methodsFor: 'attributes' stamp: 'hg 11/2/2001 13:51'!changeStyle	"Let user change styles for the current text pane."	| aList reply style theStyle menuList |	self flag: #arNote. "Move this up once we get rid of MVC"	aList _ StrikeFont familyNames remove: 'DefaultTextStyle' ifAbsent: []; asOrderedCollection.	theStyle _ paragraph textStyle.	menuList _ aList collect:[:styleName|		"Hack!! use defaultFont for comparison - we have no name that we could use for compare and the style changes with alignment so they're no longer equal."		(TextConstants definedNames at: styleName) defaultFont == theStyle defaultFont			ifTrue:['<on>', styleName]			ifFalse:['<off>',styleName]].	theStyle = TextStyle default		ifTrue:[menuList addFirst: '<on>DefaultTextStyle']		ifFalse:[menuList addFirst: '<off>DefaultTextStyle'].	aList addFirst: 'DefaultTextStyle'.	reply _ (SelectionMenu labelList: menuList lines: #(1) selections: aList) startUp.	reply ~~ nil ifTrue:		[(style _ TextStyle named: reply) ifNil: [self beep. ^ true].		paragraph textStyle: style copy.		paragraph composeAll.		self recomputeSelection.		self mvcRedisplay].	^ true! !!TextStyle methodsFor: 'fonts and font indexes' stamp: 'hg 11/2/2001 13:52'!collectionFromFileNamed: fileName	"Read the file.  It is an TextStyle whose StrikeFonts are to be added to the system.  (Written by fooling SmartRefStream, so it won't write a DiskProxy!!)  These fonts will be added to the master TextSytle for this font family.  	To write out fonts: 		| ff | ff _ ReferenceStream fileNamed: 'new fonts'.		TextConstants redefineName: #forceFontWriting  as: true export: true.		ff nextPut: (TextConstants AFontName).			'do not mix font families in the TextStyle written out'.		TextConstants redefineName: #forceFontWriting as: false export: true.		ff close.	To read: (TextStyle default collectionFromFileNamed: 'new fonts')*** Do not remove this method *** "	| ff this newName style heights |	ff _ ReferenceStream fileNamed: fileName.	this _ ff nextAndClose.	"Only works if file created by special code above"	newName _ this fontArray first name.	this fontArray do: [:aFont | aFont name = newName ifFalse: [		self error: 'All must be same family']].	style _ TextConstants at: newName asSymbol ifAbsent: [		^ TextConstants at: newName asSymbol put: this].		"new family"	this fontArray do: [:aFont | "add new fonts"		heights _ style fontArray collect: [:bFont | bFont height].		(heights includes: aFont height) ifFalse: [			style fontAt: style fontArray size + 1 put: aFont]].! !!TextStyle class methodsFor: 'instance creation' stamp: 'hg 11/2/2001 13:53'!changeDefaultFontSizeBy: delta      "TextStyle changeDefaultFontSizeBy: 1"	"This sample method recreates the default textStyle, with font 1 being a size	larger than the smallest.  It then initializes most references in the system	as well, although most windows will have to beclosed and reopened to get the effect."	| allFonts |	allFonts _ TextStyle default fontArray asSortedCollection: [:a :b | a height < b height].	TextConstants redefineName: #DefaultTextStyle as:		(TextStyle fontArray: ((1 to: allFonts size) collect: [:i | allFonts atWrap: i+delta])) export: true.	PopUpMenu initialize.  "Change this method for difft menu font"	ListParagraph initialize.  "Change this method for difft ListPane font"	StandardSystemView initialize.  "Change this method for difft Window label font"! !!TextStyle class methodsFor: 'instance creation' stamp: 'hg 11/2/2001 13:53'!initDefaultFontsAndStyle	"This provides the system with 10 and 12-pt basal fonts.	Bold and italic versions will be automatically generated as needed"	| fontArray |		fontArray _ Array new: 2.	fontArray at: 1 put: (StrikeFont new readFromStrike2: 'NewYork10.sf2').	fontArray at: 2 put: (StrikeFont new readFromStrike2: 'NewYork12.sf2').	TextConstants redefineName: #DefaultTextStyle as:		(TextStyle fontArray: fontArray) export: true.	"TextStyle initDefaultFontsAndStyle."! !!TextStyle class methodsFor: 'constants' stamp: 'hg 11/2/2001 13:53'!named: familyName	^ TextConstants definitionFor: familyName ifAbsent: [nil]! !!UpdatingStringMorph methodsFor: 'editing' stamp: 'hg 11/2/2001 13:54'!setFontStyle	| aList reply style |	aList _ (TextConstants definedNames select: [:anItem | anItem isKindOf: TextStyle])			keys asOrderedCollection.	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ~~ nil ifTrue:		[(style _ TextStyle named: reply) ifNil: [self beep. ^ true].		self font: (style defaultFont)]! !!Utilities class methodsFor: 'summer97 additions' stamp: 'hg 11/2/2001 13:54'!actualTextStyles	| aDict |	"Utilities actualTextStyles"	"Answer dictionary whose keys are the names of styles in the system and whose values are the actual styles"	aDict _ TextConstants definedNames select: [:thang | thang isKindOf: TextStyle].	aDict removeKey: #DefaultTextStyle.	^ aDict! !!Utilities class methodsFor: 'summer97 additions' stamp: 'hg 11/2/2001 13:54'!knownTextStyles   "Utilities knownTextStyles"	^ (TextConstants definedNames select: [:thang | thang isKindOf: TextStyle]) keys asSortedArray! !!Wonderland methodsFor: 'initialize-reset-release' stamp: 'hg 11/2/2001 13:59'!initialize	"This method initializes the Wonderland."	| ground |	"Initialize the list of actor UniClasses"	actorClassList _ OrderedCollection new.	"Initialize the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants definedNames copy.	"Create the Wonderland's scheduler"	myScheduler _ Scheduler new.	myNamespace at: 'scheduler' put: myScheduler.	"Create the undo stack for this Wonderland."	myUndoStack _ WonderlandUndoStack new.	"The scene object is the root of the object tree - all objects in the Wonderland are children (directly or indirectly) of the scene. "	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Create a script editor for this Wonderland"	self makeScriptEditor.	"Create some default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	ground setName: 'ground'.	myNamespace at: 'ground' put: ground.	"Initialize the light list and create a default light"	lightList _ OrderedCollection new.	self makeLight.	lightList last moveTo: {0. 2. 0} duration: rightNow.		"Create the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ self makeCamera.	"Clean out the Undo stack - we don't want people undoing the init stuff"	myUndoStack reset.	"Throw this Wonderland into the shared namespace"	myNamespace at: 'w' put: self.! !!Wonderland methodsFor: 'initialize-reset-release' stamp: 'hg 11/2/2001 14:00'!reset	"Reset this Wonderland"	| ground |	"Reset the scheduler"	myScheduler reset.	"Reset the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Reset the list of actor uniclasses"	actorClassList do: [:aClass | aClass removeFromSystem ].	actorClassList _ OrderedCollection new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants definedNames copy.	"Rebuild the namespace"	myNamespace at: 'scheduler' put: myScheduler.	myNamespace at: 'w' put: self.	"Create a new scene"	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Recreate the default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants definitionFor: 'groundMesh' ifAbsent: [nil]).	ground setTexturePointer: (WonderlandConstants definitionFor: 'groundTexture' ifAbsent: [nil]).	ground becomePart.	ground setName: 'ground'.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	myNamespace at: 'ground' put: ground.	"Re-initialize the light list and create a default light"	lightList _ OrderedCollection new.	self makeLight.	lightList last moveTo: {0. 2. 0} duration: rightNow.	"Wipe out the existing cameras"	cameraList do: [:camera | camera release].		"Recreate the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ self makeCamera.	"Reset the script editor's namespace"	scriptEditor resetNamespace.	"Update the actor browser"	scriptEditor updateActorBrowser.	"Reset the undo stack"	myUndoStack reset.! !!Wonderland class methodsFor: 'accessing' stamp: 'hg 11/2/2001 14:01'!wonderlandConstants	^WonderlandConstants definedNames! !!WonderlandActor methodsFor: 'eToy-support' stamp: 'hg 11/2/2001 13:40'!tileReferringToSelf	"answer a tile that refers to the receiver"	| aTile  nn tile |	Preferences universalTiles ifTrue:		[nn _ self externalName. 	"name it, if necessary, and put in References"		(References definedNames includesKey: nn asSymbol) ifFalse: [			 References defineName: nn as: self export: true].		tile _ SyntaxMorph new parseNode: 			(VariableNode new name: nn key: nn code: nil).		tile layoutInset: 1; addMorph: (tile addString: nn special: false).		tile color: (SyntaxMorph translateColor: #variable).		tile extent: tile firstSubmorph extent + (2@2).		^ tile].	aTile _ TileMorph new setToReferTo: self.	^ aTile! !!WonderlandActor methodsFor: 'eToy-fake' stamp: 'hg 11/2/2001 13:40'!renameTo: aName	| aPresenter putInViewer oldKey assoc |	self setName: aName.	putInViewer _ false.	((aPresenter _ self presenter) isNil) ifFalse:		[putInViewer _ aPresenter currentlyViewing: self.		putInViewer ifTrue:			[self viewerFlapTab hibernate]].  "empty it temporarily"	"Fix References dictionary.  See restoreReferences to know why oldKey is 		already aName, but oldName is the old name."	oldKey _ References definedNames keyAtIdentityValue: self ifAbsent: [nil].	oldKey ifNotNil:		[assoc _ References definedNames associationAt: oldKey.		oldKey = aName ifFalse: ["normal rename"			assoc key: aName asSymbol.			References definedNames rehash]].	World allTileScriptingElements do: [:m | m bringUpToDate].	putInViewer ifTrue: [aPresenter viewObject: self].	"recreate my viewer"	oldKey ifNil: [^ aName].	^ aName! !!WonderlandCamera methodsFor: 'initialize-release' stamp: 'hg 11/2/2001 14:01'!initializeFor: aWonderland	"Initializes the camera."	super initializeFor: aWonderland.	"Set the camera's mesh and geometry"	self setMesh: (WonderlandConstants definitionFor: 'cameraMesh' ifAbsent: [nil]).	self setTexturePointer: (WonderlandConstants definitionFor: 'cameraTexture' ifAbsent: [nil]).		"Set the camera initial position"	composite translation: (B3DVector3 x: -1.5 y: 0.5 z: 2.6).	self turnTo: #(180 -30 180) duration: #rightNow.	"Initialize the camera viewing parameters"	perspective _ B3DCameraPerspective new.	self setFieldOfView: 40.0.	self setAspectRatio: 1.0.	self setNearClippingPlane: 0.1.	self setFarClippingPlane: 10000.0.	viewMatrix _ B3DMatrix4x4 new.	"Create a WonderlandCameraMorph for the camera to render into"	myMorph _ WonderlandCameraMorph new.	myMorph initializeWithCamera: self.	"Initially draw the scene background"	drawSceneBackground _ true.! !!WonderlandEvent class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 14:02'!initialize	"Add some new constants to the WonderlandConstants shared pool"	WonderlandConstants defineName: 'leftMouseDown' as: 'leftMouseDown' export: true.	WonderlandConstants defineName: 'leftMouseUp' as: 'leftMouseUp' export: true.	WonderlandConstants defineName: 'rightMouseDown' as: 'rightMouseDown' export: true.	WonderlandConstants defineName: 'rightMouseUp' as: 'rightMouseUp' export: true.	WonderlandConstants defineName: 'leftMouseClick' as: 'leftMouseUp' export: true.	WonderlandConstants defineName: 'rightMouseClick' as: 'rightMouseUp' export: true.	WonderlandConstants defineName: 'mouseMove' as: 'mouseMove' export: true.	WonderlandConstants defineName: 'keyPress' as: 'keyPress' export: true.	 ! !!WonderlandLightSource methodsFor: 'initialization' stamp: 'hg 11/2/2001 14:02'!initializeFor: aWonderland	"Initialize the light"	super initializeFor: aWonderland.	"Set the light's mesh and texture"	self setMesh: (WonderlandConstants definitionFor: 'lightMesh' ifAbsent: [nil]).	self setTexturePointer: (WonderlandConstants definitionFor: 'lightTexture' ifAbsent: [nil]).	lightColor _ B3DMaterialColor new.	self setColorVector: (B3DColor4 r: 1.0 g: 1.0 b: 1.0 a: 1.0).! !!WonderlandLightSource class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 14:03'!initialize	"Add the light names to WonderlandConstants"	WonderlandConstants defineName: 'ambient' as: 'ambientLight' export: true.	WonderlandConstants defineName: 'positional' as: 'positionalLight' export: true.	WonderlandConstants defineName: 'directional' as: 'directionalLight' export: true.	WonderlandConstants defineName: 'spotlight' as: 'spotLight' export: true.! !!WonderlandUndoStack methodsFor: 'initialization' stamp: 'hg 11/2/2001 14:03'!initialize	"Initializes the undo stack."	theStack _ OrderedCollection new.	stackIsOpen _ true.	maxStackDepth _ (WonderlandConstants definitionFor: 'maxUndoDepth' ifAbsent: [nil]).! !!ZipArchive class methodsFor: 'constants' stamp: 'hg 11/2/2001 14:13'!initializeZipFileConstants	"ZipArchive initializeZipFileConstants"	#(			(FaMsdos	0)			(FaUnix		3)			(DeflatingCompressionNormal	0)			(DeflatingCompressionMaximum	2)			(DeflatingCompressionFast		4)			(DeflatingCompressionSuperFast	6)			(CompressionStored				0)			(CompressionDeflated			8)			(CompressionLevelNone			0)			(CompressionLevelDefault		6)			(IfaTextFile		1)			(IfaBinaryFile	0)			(CentralDirectoryFileHeaderSignature		0)			(LocalFileHeaderSignature 				0)			(EndOfCentralDirectorySignature 		0)			(DataDescriptorLength 	12)			"Unix permission bits"			(DefaultDirectoryPermissions		8r040755)			(DefaultFilePermissions			8r0100666)			(DirectoryAttrib 				8r040000)			(FileAttrib 						8r0100000)	) do:[:spec|		ZipFileConstants defineName: spec first as: spec last export: true.	].	ZipFileConstants defineName: CentralDirectoryFileHeaderSignature as: 		(ByteArray with: 16r50 with: 16r4B with: 16r01 with: 16r02) asString export: true.	ZipFileConstants defineName: LocalFileHeaderSignature as:		(ByteArray with: 16r50 with: 16r4B with: 16r03 with: 16r04) asString export: true.	ZipFileConstants defineName: EndOfCentralDirectorySignature as:		(ByteArray with: 16r50 with: 16r4B with: 16r05 with: 16r06) asString export: true.! !!ZipWriteStream class methodsFor: 'class initialization' stamp: 'hg 11/2/2001 14:11'!initialize	"ZipWriteStream initialize"	| numLiterals maxLengthCodes |	ZipConstants defineName: #VerboseLevel as: 0 export: true.	ZipConstants defineName: #MaxBits as: 15 export: true.	ZipConstants defineName: #MaxBitLengthBits as: 7 export: true.	ZipConstants defineName: #EndBlock as: 256 export: true.	ZipConstants defineName: #StoredBlock as: 0 export: true.	ZipConstants defineName: #FixedBlock as: 1 export: true.	ZipConstants defineName: #DynamicBlock as: 2 export: true.	numLiterals _ 256.	ZipConstants defineName: #NumLiterals as: numLiterals export: true.	maxLengthCodes _ 29.	ZipConstants defineName: #MaxLengthCodes as: maxLengthCodes export: true.	ZipConstants defineName: #MaxDistCodes as: 30 export: true.	ZipConstants defineName: #MaxBitLengthCodes as: 19 export: true.	ZipConstants defineName: #MaxLiteralCodes as: numLiterals + maxLengthCodes + 1 export: true. "+ End of Block"	ZipConstants defineName: #Repeat3To6 as: 16 export: true. "Repeat previous bit length 3-6 times (2 bits repeat count)"	ZipConstants defineName: #Repeat3To10 as: 17 export: true. "Repeat previous bit length 3-10 times (3 bits repeat count)"	ZipConstants defineName: #Repeat11To138 as: 18 export: true. "Repeat previous bit length 11-138 times (7 bits repeat count)"	self initializeExtraBits.	self initializeLengthCodes.	self initializeDistanceCodes.	self initializeFixedTrees.	self initializeCrcTable.! !!PoolTests reorganize!('tests' alice b3d balloon event ffi gzip initialize:andCompileForPoolNamed: klatt players textConstants tryInitialize:andCompileForPoolNamed: wonderland zip zipFile)('Testing' testAlice testB3d testBalloon testEvent testFFI testGZip testKlatt testPlayers testTextConstants testWonderland testZip testZipFile)!