'From Squeak 2.1 of June 30, 1998 on 17 September 1998 at 6:02:56 am'!"Change Set:		CelesteTweaks-lsDate:			17 September 1998Author:			Lex Spoona myriad of tweaks to Celeste:	1. import and export to Unix/Eudora format files (requires CrLfFileStream on non-macs to work correctly).	2. several user prompts are re-worded.	3. SystemWindow doesn't reset pane colors after a resize.  Before, buttons would get reset to the color of the SystemWindow, no matter whether they are turned on or off.	4. If you say 'no' when it asks you to create the initial mailbox, Celeste gracefully exits instead of trying to operate on a nil mailbox."!!Celeste methodsFor: 'categories pane' stamp: 'ls 9/17/1998 05:54'!categoryMenu: aMenu	"Answer the menu for the categories pane."	| labels lineSeparations selectors lines |	labels _ 'save\close\fetch mail\send queued mail\add category' withCRs.	lineSeparations _  #(2 2).	selectors _ #(save saveAndClose fetchMail sendQueuedMail addCategory).	"add extra commands if a normal category is selected"	((currentCategory notNil) and:	 [(currentCategory ~= '.all.') &	  (currentCategory ~= '.unclassified.')])		ifTrue: [			labels _ labels, '\rename category\remove category\import into category\export category\export category, Unix/Eudora format' withCRs.			lineSeparations _ lineSeparations, #(3 3).			selectors _ selectors, #(renameCategory removeCategory importIntoCategory exportCategory exportCategoryUnix ). ]		ifFalse: [			lineSeparations _ lineSeparations, #(1) ].	labels _ labels, '\empty trash\compact\find duplicates\toggle headers\set user name\set auto-cc: list\set POP server\set POP username\set SMTP server' withCRs.	lineSeparations _ lineSeparations, #(3 1 5).	selectors _ selectors, #(emptyTrash compact findDuplicates toggleSuppressHeaders setUserName setCCList setPopServer setPopUSername setSmtpServer).	"add toggle for whether to delete messages on download"	DeleteInboxAfterFetching		ifTrue: [ labels _ labels, '\leave messages on server' withCRs.			selectors _ selectors, #(keepMessagesOnServer) ]		ifFalse: [ labels _ labels, '\don''t leave messages on server' withCRs.			selectors _ selectors, #(deleteMessagesAfterFetching) ].	lineSeparations _ lineSeparations, #(1).	"convert lineSeperations into absolute line positions"	lines _ lineSeparations copyFrom: 1 to: (lineSeparations size - 1).	(2 to: lines size) do: [ :i |		lines at: i put: ((lines at: i) + (lines at: i-1)) ].	^aMenu labels: labels lines: lines  selections: selectors! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/17/1998 05:42'!exportCategory	"Store the filtered message list of the current category to another mail database. The user is prompted for the name of the other database."	| destDBName destDB |	currentCategory ifNil: [ ^self ].	destDBName _ FillInTheBlank		request: 'Destination mail database?'		initialAnswer: ''.	(destDBName isEmpty) ifTrue: [^self].	destDB _ MailDB openOn: destDBName.	(destDB isNil) ifTrue: [^self].	destDB mergeMessages: (self filteredMessagesIn: currentCategory) from: mailDB.	destDB saveDB.	destDB changed: #categoryList.! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/17/1998 05:42'!exportCategoryUnix	"Store the filtered message list of the current category into a Eudora/Unix database"	| destFileName destFile messageIds count |	currentCategory ifNil: [ ^self ].	destFileName _ FillInTheBlank		request: 'Destination mail file?'		initialAnswer: ''.	(destFileName isEmpty) ifTrue: [^self].	destFile _ FileStream fileNamed: destFileName.	destFile ifNil: [ ^self error: 'could not open file' ].	destFile setToEnd.	messageIds _ self filteredMessagesIn: currentCategory.	('exporting ', messageIds size printString, ' messages')		displayProgressAt: Sensor mousePoint		from: 0		to: messageIds size		during: [ :bar |			count _ 0.			messageIds do: [ :messageId |				destFile nextPutAll: Celeste eudoraSeparator.				(mailDB getMessage: messageId) text linesDo: [ :line |					(line beginsWith: 'From ') ifTrue: [ destFile nextPut: $> ].					destFile nextPutAll: line.					destFile cr ].				count _ count + 1.				bar value: count. ].		].	destFile close.! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/15/1998 18:58'!fetchMail	"Add the messages from the mail inbox file into this mail database."	| count server userName password |	self checkTrash.	server _ self class popServer.	userName _ self class popUserName.	password _ self class popPassword.	[count _ mailDB POPMailFrom: server		userName: userName		password: password		doFormatting: FormatWhenFetching		deleteInbox: DeleteInboxAfterFetching		informingUser: true.	 self inform: count printString, ' messages fetched'.	 currentCategory _ 'new'. 	] ifError: [ :err :rcvr | 			Transcript show: err.			(self confirm: 'Error: ', err, String cr,'debug it?') ifTrue: [ self halt ]. ].	self changed: #categoryList.	self updateTOC.! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/17/1998 05:43'!fetchNews	"Add the messages from the news inbox file into this mail database."	| inboxPath count |	self halt: 'This is probably out of date.  Feel lucky?'.	inboxPath _ Celeste inOutFolder.	inboxPath size > 0		ifTrue: [ inboxPath _ inboxPath, ':newsInbox' ]		ifFalse: [ inboxPath _ 'newsInbox' ].	Transcript show: 'Fetching news from ', inboxPath.	count _ mailDB fetchNewsFrom: inboxPath		doFormatting: FormatWhenFetching		deleteInbox: DeleteInboxAfterFetching. 	Transcript nextPutAll: count printString, ' messages'; cr; endEntry.	count > 0 ifTrue: [		self changed: #categoryList.		self updateTOC].! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/15/1998 05:23'!findDuplicates	"find duplicate messages, and move them all to a given category"	|duplicatesCategory |	duplicatesCategory _ FillInTheBlank request: 'category to move duplicates to?' initialAnswer: '.duplicates.'.	duplicatesCategory isEmpty ifTrue:[ ^self ].	Utilities informUser: 'searching for duplicates...' during: [		mailDB fileDuplicatesIn: duplicatesCategory ].	self setCategory: duplicatesCategory.! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/17/1998 05:17'!importIntoCategory	"Add the messages from a Unix or Eudora format file into this category"	| inboxPath count |	currentCategory ifNil: [ ^self ].	"get the file to import from"	inboxPath _ ''.	[	inboxPath _ FillInTheBlank request: 'file to import from?\(should be Eudora or Unix format)' withCRs.		inboxPath isEmpty ifTrue: [ ^self ].		FileStream isAFileNamed: inboxPath 	] whileFalse: [		self inform: 'file does not exist' ].	Utilities informUser: 'Fetching mail from ', inboxPath during: [		count _ mailDB importMailFrom: inboxPath  intoCategory: currentCategory. ].	self inform: count printString, ' messages imported'.	self updateTOC.! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/17/1998 05:57'!removeCategory	"Remove the existing category with the user-specified name."	| msgList |	currentCategory ifNil: [ ^self ].	msgList _ mailDB messagesIn: currentCategory.	(mailDB messagesIn: '.trash.') do: [: id |		msgList remove: id ifAbsent: []].	msgList isEmpty ifFalse: [		(self confirm:'This category is not empty. Areyou sure you wish to remove it?') ifFalse: [^self]].	mailDB removeCategory: currentCategory.	self setCategory: nil.! !!Celeste methodsFor: 'categories pane' stamp: 'ls 9/17/1998 05:45'!renameCategory	"Rename the category with the user-specified name."	| newCatName |	currentCategory ifNil: [ ^self ].	newCatName _ FillInTheBlank		request: 'New name?'		initialAnswer: currentCategory.	(newCatName isEmpty) ifTrue: [^self].	"user aborted"	mailDB renameCategory: currentCategory to: newCatName.	currentCategory _ newCatName.	self changed: #categoryList.! !!Celeste methodsFor: 'table of contents pane' stamp: 'ls 9/10/1998 02:19'!updateTOC	"Update the table of contents after a moving, removing, or deleting a message. Select a message near the removed message in the table of contents if possible."	| currentMsgIndex |	((currentCategory isNil) |	 (currentMsgID isNil) |	 (currentMessages size < 2))		ifTrue: [currentMsgIndex _ 1]		ifFalse: [currentMsgIndex _ currentMessages indexOf: currentMsgID].	currentMsgID _ nil.	self setCategory: currentCategory.  "update currentMessages, currentTOC"	currentMessages isEmpty ifFalse: [		(currentMsgIndex <= currentMessages size)			ifTrue: [currentMsgID _ currentMessages at: currentMsgIndex]			ifFalse: [currentMsgID _ currentMessages last].	].	self changed: #tocEntryList.	self changed: #messageText.! !!Celeste methodsFor: 'filtering' stamp: 'ls 9/15/1998 06:49'!editFilterNamed: filterName filterExpr: oldExpr	| newDefinition |	newDefinition _ FillInTheBlank		request:'Enter a filter definition where "m" is the message being testing. The expression can send"fromHas:", "toHas:", "ccHas:", "subjectHas:", "participantHas:", or "textHas:" to m to test forinclusion of a string--or one of an array of strings--in a field. It can also test m''s timeand/or date and can combine several tests with logical operators. Examples:      m fromHas: ''johnm''                       -- messages from johnm     m participantHas: ''johnm''                -- messages from, to, or cc-ing johnm     m textHas: #(squeak smalltalk java)      -- messages with any of these words     m subjectHas: #(0 1 2 3 4 5 6 7 8 9)       -- numbers in lists treated as strings NOTE: "textHas:" is very slow, since it must read the message from disk.'		initialAnswer: oldExpr.	newDefinition isEmpty ifTrue: [^''].	CustomFilters at: filterName put: newDefinition.	^newDefinition! !!Celeste methodsFor: 'other' stamp: 'ls 9/15/1998 00:56'!checkTrash	"check the .trash. folder, and inform the user if it's getting excessively large"	| numTrash numTotal |	numTrash _ (mailDB messagesIn: '.trash.') size.	numTotal _ (mailDB messagesIn: '.all.') size.	(numTrash > 20 and: [ numTrash > (numTotal / 2)]) ifTrue: [		self inform: 'You have more deleted email than non-deleted.You might consider running "empty trash" and "compact"' ].! !!Celeste class methodsFor: 'instance creation' stamp: 'ls 9/17/1998 03:05'!openOn: rootFilename	"Open a MailReader on the mail database with the given root filename."	|database |	database _  MailDB openOn: rootFilename.	database ifNotNil: [ ^ self openOnDatabase: database ].! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:46'!ccList	"Answer the default cc list to be used in composing messages."	CCList isNil ifTrue: [CCList _ ''].	^CCList! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:52'!inOutFolder	"Answer the folder for the inbox/outbox files."	self halt: 'someone asked for InOutFolder'.	InOutFolder isNil ifTrue: [self setInOutFolder].	^InOutFolder! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:51'!popPassword	"answer the password to use when retrieving mail via POP"	"theoretically, this could remember the password for a little while.  But let's keep it simple for now"	^FillInTheBlank request: 'POP password'! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:51'!popServer	"Answer the server for downloading email via POP"	(PopServer isNil or: [PopServer isEmpty])		ifTrue: [self setPopServer].	PopServer isEmpty ifTrue: [		self error: 'POP server not specified' ].	^PopServer! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:51'!popUserName	"Answer the user's username on the POP server"	(PopUserName isNil or: [PopUserName isEmpty])		ifTrue: [self setPopUserName].	PopUserName isEmpty ifTrue: [ 		self error: 'no POP user name specified' ].	^PopUserName! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:46'!setCCList	"Change the list of names used in the default cc list. Items in the list should be valid mail addresses and should be separated by commas."	| newList |	(CCList isNil) ifTrue: [CCList _ ''].	newList _ FillInTheBlank		request: 'addresses to automatically add to CC: fields?'		initialAnswer: CCList.	CCList _ newList.! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:48'!setPopServer	"Change the user's email name for use in composing messages."	(PopServer isNil) ifTrue: [PopServer _ ''].	PopServer _ FillInTheBlank		request: 'What is your POP server''s hostname?'		initialAnswer: PopServer.! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:48'!setPopUserName	"set the POP server used for downloading email"	(PopUserName isNil) ifTrue: [PopUserName _ ''].	PopUserName _ FillInTheBlank		request: 'What is your username on your POP server?'		initialAnswer: PopUserName.	"be kind, if they include the host name here"	(PopUserName includes: $@) ifTrue: [		PopUserName _ PopUserName copyFrom: 1 to: (PopUserName indexOf: $@)-1 ].! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:48'!setSmtpServer	"Set the SMTP server used to send outgoing messages via"	(SmtpServer isNil) ifTrue: [		PopServer isNil			ifTrue: [ SmtpServer _ '' ]			ifFalse: [ SmtpServer _ PopServer ] ].	SmtpServer _ FillInTheBlank		request: 'What is your mail server for outgoing mail?'		initialAnswer: SmtpServer.! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:49'!setUserName	"Change the user's email name for use in composing messages."	(UserName isNil) ifTrue: [UserName _ ''].	UserName _ FillInTheBlank		request: 'What is your email address?\(This is the address other people will reply to you)' withCRs		initialAnswer: UserName.! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:50'!smtpServer	"Answer the server for sending email"	(SmtpServer isNil or: [SmtpServer isEmpty])		ifTrue: [self setSmtpServer].	SmtpServer isEmpty ifTrue: [		self error: 'no SMTP server specified' ].	^SmtpServer! !!Celeste class methodsFor: 'user preferences' stamp: 'ls 9/17/1998 05:50'!userName	"Answer the user name to be used in composing messages."	(UserName isNil or: [UserName isEmpty])		ifTrue: [self setUserName].	UserName isEmpty ifTrue: [ self error: 'no user name specified' ].	^UserName! !!FileStream class methodsFor: 'instance creation' stamp: 'ls 9/17/1998 05:19'!isAFileNamed: fName	"return whether a file exists with the given name"	^self concreteStream isAFileNamed: fName! !!MailDB methodsFor: 'open-create-save'!createDB	"Create a new mail database."	(self confirm:'Shall I create a new mail databasenamed: ', rootFilename, '?')		ifFalse:	"abort create operation"			[rootFilename _ nil.			 self release.			^nil].	self openDB.							"creates new DB files"	self saveDB.							"save the new mail database to disk"! !!MailDB methodsFor: 'fetch-merge-compact' stamp: 'ls 9/15/1998 22:30'!findDuplicates	"MailDB someInstance findDuplicates"	| msgsAtTime m duplicates list text1 msg1 msg2 id1 id2 |	msgsAtTime _ Dictionary new.	(self messagesIn: '.all.') do: [ :msgID |		m _ indexFile at: msgID.		(msgsAtTime includesKey: m time) ifFalse: [			msgsAtTime at: m time put: OrderedCollection new.		].		(msgsAtTime at: m time) add: (Array with: msgID with: m).	].	duplicates _ Set new.	msgsAtTime associationsDo: [ :assoc |		list _ assoc value asOrderedCollection.		list do: [ :arr1 |  			id1 _ arr1 at: 1.			msg1 _ arr1 at: 2.			text1 _ self getText: id1.			list do: [ :arr2 |				id2 _ arr2 at: 1.				msg2 _ arr2 at: 2.				(id1 < id2 and: 				 [ (duplicates includes: id2) not and:				 [ msg2 _ self getMessage: id2.  msg1 to = msg2 to and:				 [ msg1 subject = msg2 subject and: 				 [ msg1 from = msg2 from and:				 [ text1 = (self getText: id2) ] ] ] ] ]) ifTrue: [ duplicates add: id2 ]. ] ] ].	^duplicates asArray! !!MailDB methodsFor: 'fetch-merge-compact' stamp: 'ls 9/17/1998 05:06'!importMailFrom: inboxFileName intoCategory: category	"Append the messages from the given mail inbox file to this mail database. Answer the number of messages fetched."	| inbox nextID count msg location |	"is there any mail?"	(StandardFileStream isAFileNamed: inboxFileName) ifFalse: [^0].	inbox _ MailInboxFile openOn: inboxFileName.	nextID _ self nextUnusedID.	count _ 0.	messageFile beginAppend.	inbox mailMessagesDo:		[: msgText |		 msg _ MailMessage from: msgText.		 location _ messageFile basicAppend: msg text id: nextID.		 indexFile			at: nextID			put: (IndexFileEntry					message: msg					location: location					messageFile: messageFile					msgID: nextID).		 categoriesFile file: nextID inCategory: category.		 nextID _ nextID + 1.		 count _ count + 1].	messageFile endAppend.	LastID _ nextID.	"snapshot the database and remove the inbox file"	self saveDB.	^count! !!SystemWindow methodsFor: 'geometry' stamp: 'ls 9/16/1998 05:01'!extent: newExtent	| inner panelRect labelRect paneColor |	self removeHandles.	isCollapsed		ifTrue: [super extent: newExtent x @ (self labelHeight + 2)]		ifFalse: [super extent: newExtent].	inner _ self innerBounds.	labelRect _ self labelRect.	panelRect _ self panelRect.	paneColor _ Color perform: model defaultBackgroundColor.	stripes first bounds: (labelRect insetBy: 1).	stripes second bounds: (labelRect insetBy: 3).	self setStripeColorsFrom: paneColor.	closeBox align: closeBox topLeft with: inner topLeft + (4@0).	collapseBox align: collapseBox topRight with: inner topRight - (4@0).	label fitContents; setWidth: (label width min: bounds width - 50).	label align: label bounds topCenter with: inner topCenter.	paneMorphs with: paneRects do:		[:m :frame |  "m color: paneColor."		m bounds: (((frame scaleBy: panelRect extent) translateBy: panelRect topLeft)) truncated].	isCollapsed		ifTrue: [collapsedFrame _ self bounds]		ifFalse: [fullFrame _ self bounds].	self isActive ifTrue: [self addHandles]! !Celeste removeSelector: #importMail!