'From Squeak 2.3 of January 14, 1999 on 12 February 1999 at 5:22:38 pm'!"Change Set:		startupLogTweak-swDate:			12 February 1999Author:			Scott Wallacemore fixup for the logging of startup  CAVEAT: order in this fileout is important -- it had to be rearranged manually."!!SystemDictionary methodsFor: 'sources, change log' stamp: 'sw 2/12/1999 17:15'!assureStartupStampLogged	"If there is a startup stamp not yet actually logged to disk, do it now."	| changesFile startupStamp |	(SourceFiles isNil or: [(changesFile _ SourceFiles at: 2) == nil]) ifTrue: [^ self].	startupStamp _ self at: #StartupStamp ifAbsent: [^ self].	changesFile setToEnd; cr; cr.	changesFile nextChunkPut: startupStamp asString; cr.	self removeKey: #StartupStamp.	self forceChangesToDisk.! !!CompiledMethod methodsFor: 'source code management' stamp: 'sw 2/12/1999 17:19'!putSource: sourceStr fromParseNode: methodNode inFile: fileIndex withPreamble: preambleBlock	"Store the source code for the receiver on an external file.	If no sources are available, i.e., SourceFile is nil, then store	temp names for decompilation at the end of the method.	If the fileIndex is 1, print on *.sources;  if it is 2, print on *.changes,	in each case, storing a 4-byte source code pointer at the method end."	| file remoteString  |	(SourceFiles == nil or: [(file _ SourceFiles at: fileIndex) == nil]) ifTrue:		[^ self become: (self copyWithTempNames: methodNode tempNames)].	Smalltalk assureStartupStampLogged.	file setToEnd.	preambleBlock value: file.  "Write the preamble"	remoteString _ RemoteString newString: sourceStr						onFileNumber: fileIndex toFile: file.	file nextChunkPut: ' '; flush.	self setSourcePosition: remoteString position inFile: fileIndex! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'sw 2/12/1999 17:18'!logChange: aStringOrText 	"Write the argument, aString, onto the changes file."	| aString changesFile |	(SourceFiles isNil or: [(SourceFiles at: 2) == nil]) ifTrue: [^ self].	self assureStartupStampLogged.	aStringOrText isText		ifTrue: [aString _ aStringOrText string]		ifFalse: [aString _ aStringOrText].	(aString isMemberOf: String)		ifFalse: [self error: 'can''t log this change'].	(aString findFirst: [:char | char isSeparator not]) = 0		ifTrue: [^ self].  "null doits confuse replay"	(changesFile _ SourceFiles at: 2) setToEnd; cr; cr.	changesFile nextChunkPut: aString.		"If want style changes in DoIt, use nextChunkPutWithStyle:, and allow Texts to get here"	self forceChangesToDisk.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sw 2/12/1999 17:21'!snapshot: save andQuit: quit	"Mark the changes file and close all files. If save is true, save the current state of this Smalltalk in the image file. If quit is true, then exit to the outer shell. The latter part of this method runs when resuming a previously saved image. The resume logic checks for a document file to process when starting up."	| resuming msg sourceLink |	save & (SourceFiles at: 2) notNil ifTrue:		[msg _  (quit			ifTrue: ['----QUIT----']			ifFalse: ['----SNAPSHOT----'])			, Date dateAndTimeNow printString.		sourceLink _ ' priorSource: ' , LastQuitLogPosition printString.		self assureStartupStampLogged.		LastQuitLogPosition _ (SourceFiles at: 2) setToEnd; position.		self logChange: msg , sourceLink.		Transcript cr; show: msg].	self processShutDownList.	Smalltalk isMorphic ifFalse: [Cursor write show].	save		ifTrue: [resuming _ self snapshotPrimitive]  "<-- PC frozen here on image file"		ifFalse: [resuming _ false].	quit & resuming not ifTrue: [self quitPrimitive].	Smalltalk isMorphic ifFalse: [Cursor normal show].	self processStartUpList.	resuming ifTrue: [		self clearExternalObjects.		self readDocumentFile].! !