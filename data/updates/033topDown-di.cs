'From Squeak 2.0 BETA of May 8, 1998 on 14 May 1998 at 4:22:49 pm'!!Morph methodsFor: 'submorphs-accessing' stamp: 'di 5/13/1998 20:42'!submorphsDo: aBlock	submorphs size = 0 ifTrue: [^ self].	submorphs do: aBlock.! !!Morph methodsFor: 'drawing' stamp: 'di 5/13/1998 20:46'!topDownDrawOn: aCanvas	"Draw me and then my submorphs from back to front.	Return true if I completely fill the canvas clipping region."	| clipRect |	(aCanvas isVisible: self fullBounds) ifFalse: [^ self].	clipRect _ aCanvas clipRect.	self submorphsDo:  "Front to back..."		[:m | "Look for a submorph that fills the region"		(m drawOnFills: clipRect) ifTrue:				["If any submorph fills the region, then display it				and those in front, and return."				(submorphs findFirst: [:x | x==m]) to: 1 by: -1 do:					[:i | (submorphs at: i) topDownDrawOn: aCanvas].				^ self]].	"Otherwise do a normal display"	self fullDrawOn: aCanvas! !!TransformMorph methodsFor: 'drawing' stamp: 'di 5/13/1998 20:48'!topDownDrawOn: aCanvas	self fullDrawOn: aCanvas! !!TransformMorph methodsFor: 'change reporting' stamp: 'di 5/13/1998 16:30'!invalidRect: damageRect	"Translate damage reports from submorphs by the scrollOffset."	owner ifNil: [^ self].	^ owner invalidRect: ((transform invertRect: damageRect) intersect: bounds)! !!WorldMorph methodsFor: 'drawing' stamp: 'di 5/14/1998 16:07'!displayWorld	"Update this world's display."	| updateNeeded worldDamageRects handsToDraw handDamageRects allDamage |	submorphs do: [:m | m fullBounds].  "force re-layout if needed"	updateNeeded _ damageRecorder updateIsNeeded.	updateNeeded ifFalse: [		hands do: [:h |			(h hasChanged and: [h needsToBeDrawn])				ifTrue: [updateNeeded _ true]]].	updateNeeded ifFalse: [^ self].  "display is already up-to-date"	self assuredCanvas.	worldDamageRects _ self drawInvalidAreasOn: canvas.  "repair world's damage on canvas"	handsToDraw _ self selectHandsToDrawForDamage: worldDamageRects.	handDamageRects _ handsToDraw collect: [:h | h savePatchFrom: canvas].	allDamage _ worldDamageRects, handDamageRects.	handsToDraw reverseDo: [:h | h fullDrawOn: canvas].  "draw hands onto world canvas"	false ifTrue: [  "*make this true to flash damaged areas for testing*"		self flashRects: allDamage color: Color black].	canvas		showAt: viewBox origin  "quickly copy altered rects of canvas to Display"		invalidRects: allDamage.	handsToDraw do: [:h | h restoreSavedPatchOn: canvas].  "restore saved hand patches"	Smalltalk forceDisplayUpdate.! !!WorldMorph methodsFor: 'drawing' stamp: 'di 5/14/1998 16:18'!drawInvalidAreasOn: aCanvas	"Redraw the damaged areas of the given canvas and clear the damage list. Return a collection of the areas that were redrawn."	| rectList c i |	rectList _ damageRecorder invalidRectsFullBounds: (0@0 extent: aCanvas extent).	damageRecorder reset.	rectList do: [:r |		c _ aCanvas copyClipRect: r.		true		ifTrue:			["Experimental top-down drawing"			(i _ submorphs findFirst: [:m | m drawOnFills: r]) > 0				ifTrue: ["Only draw up from topmost complete occlusion"						(submorphs copyFrom: 1 to: i) reverseDo:							[:m | m topDownDrawOn: c]]				ifFalse: [c fillColor: color.						submorphs reverseDo:							[:m | m topDownDrawOn: c]]]		ifFalse: [c fillColor: color.				submorphs reverseDo: [:m | m fullDrawOn: c]]		].	^ rectList! !Morph removeSelector: #visibleMorphsIn:!Morph removeSelector: #morphsIntersecting:do:!Smalltalk removeClassNamed: #ClippingMorph!