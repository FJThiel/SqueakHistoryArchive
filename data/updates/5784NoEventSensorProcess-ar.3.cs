'From Squeak3.6 of ''6 October 2003'' [latest update: #5429] on 6 February 2004 at 2:55:45 pm'!"Change Set:		NoEventSensorProcess-arDate:			6 February 2004Author:			Andreas RaabRemoves the ioProcess from event sensor.(merged ProcessBrowser class>>nameAndRulesFor: with 5574. -dew)"Sensor inputProcess terminate.!InputSensor subclass: #EventSensor	instanceVariableNames: 'mouseButtons mousePosition keyboardBuffer interruptKey interruptSemaphore eventQueue inputSemaphore '	classVariableNames: 'EventPollFrequency'	poolDictionaries: 'EventSensorConstants '	category: 'Kernel-Processes'!!Object methodsFor: 'private' stamp: 'ar 2/6/2004 14:47'!primitiveError: aString 	"This method is called when the error handling results in a recursion in 	calling on error: or halt or halt:."	| context |	(String		streamContents: 			[:s |			s nextPutAll: '***System error handling failed***'.			s cr; nextPutAll: aString.			context _ thisContext sender sender.			20 timesRepeat: [context == nil ifFalse: [s cr; print: (context _ context sender)]].			s cr; nextPutAll: '-------------------------------'.			s cr; nextPutAll: 'Type CR to enter an emergency evaluator.'.			s cr; nextPutAll: 'Type any other character to restart.'])		displayAt: 0 @ 0.	[Sensor keyboardPressed] whileFalse.	Sensor keyboard = Character cr ifTrue: [Transcripter emergencyEvaluator].	Smalltalk isMorphic		ifTrue: [World install "init hands and redisplay"]		ifFalse: [ScheduledControllers searchForActiveController]! !!EventSensor methodsFor: 'initialize' stamp: 'ar 2/6/2004 14:45'!initialize	"Initialize the receiver"	mouseButtons _ 0.	mousePosition _ 0@0.	keyboardBuffer _ SharedQueue new.	interruptKey _ interruptKey ifNil:[2094].  "cmd-."	interruptSemaphore _ (Smalltalk specialObjectsArray at: 31) ifNil:[Semaphore new].	self flushAllButDandDEvents.	inputSemaphore _ Semaphore new.! !!EventSensor methodsFor: 'initialize' stamp: 'ar 2/6/2004 14:45'!shutDown	inputSemaphore ifNotNil:[Smalltalk unregisterExternalObject: inputSemaphore].! !!EventSensor methodsFor: 'initialize' stamp: 'ar 2/6/2004 14:45'!startUp	"Run the I/O process"	self shutDown.	self initialize.	self primSetInputSemaphore: (Smalltalk registerExternalObject: inputSemaphore).	super startUp.	Smalltalk isMorphic ifTrue:[self flushAllButDandDEvents].! !!EventSensor methodsFor: 'accessing' stamp: 'ar 2/6/2004 14:48'!flushAllButDandDEvents	| newQueue oldQueue  |		newQueue _ SharedQueue new.	self eventQueue ifNil: 		[eventQueue := newQueue.		^self].	oldQueue _ self eventQueue.	[oldQueue size > 0] whileTrue: 		[| item type | 		item _ oldQueue next.		type _ item at: 1.		type = EventTypeDragDropFiles ifTrue: [ newQueue nextPut: item]].	eventQueue := newQueue.! !!EventSensor methodsFor: 'accessing' stamp: 'ar 2/6/2004 14:54'!inputSemaphore	^inputSemaphore! !!EventSensor methodsFor: 'accessing' stamp: 'ar 2/6/2004 14:42'!nextEventFromQueue	"Return the next event from the receiver."	eventQueue isEmpty ifTrue:[self fetchMoreEvents].	eventQueue isEmpty		ifTrue:[^nil]		ifFalse:[^eventQueue next]! !!EventSensor methodsFor: 'accessing' stamp: 'ar 2/6/2004 14:41'!peekButtons	self fetchMoreEvents.	^mouseButtons! !!EventSensor methodsFor: 'accessing' stamp: 'ar 2/6/2004 14:51'!peekEvent	"Look ahead at the next event."	eventQueue ifNil:[^nil].	self fetchMoreEvents.	^eventQueue peek! !!EventSensor methodsFor: 'accessing' stamp: 'ar 2/6/2004 14:41'!peekPosition	self fetchMoreEvents.	^mousePosition! !!EventSensor methodsFor: 'private-I/O' stamp: 'ar 2/6/2004 14:44'!fetchMoreEvents	"Fetch more events from the VM"	| eventBuffer type |	"Reset input semaphore so clients can wait for the next events after this one"	inputSemaphore initSignals.	eventBuffer _ Array new: 8.	[self primGetNextEvent: eventBuffer.	type _ eventBuffer at: 1.	type = EventTypeNone] whileFalse:[self processEvent: eventBuffer].! !!EventSensor methodsFor: 'private' stamp: 'ar 2/6/2004 14:42'!primMouseButtons	self fetchMoreEvents.	self flushNonKbdEvents.	^ mouseButtons! !!EventSensor methodsFor: 'private' stamp: 'ar 2/6/2004 14:41'!primMousePt	self fetchMoreEvents.	self flushNonKbdEvents.	^ mousePosition! !!EventSensor methodsFor: 'keyboard' stamp: 'ar 2/6/2004 14:41'!primKbdNext	"Allows for use of old Sensor protocol to get at the keyboard,	as when running kbdTest or the InterpreterSimulator in Morphic"	| evtBuf |	self fetchMoreEvents.	keyboardBuffer isEmpty ifFalse:[^ keyboardBuffer next].	eventQueue ifNotNil:		[evtBuf _ eventQueue nextOrNilSuchThat: [:buf | self isKbdEvent: buf].		self flushNonKbdEvents].	^ evtBuf ifNotNil: [evtBuf at: 3]! !!EventSensor methodsFor: 'keyboard' stamp: 'ar 2/6/2004 14:41'!primKbdPeek	"Allows for use of old Sensor protocol to get at the keyboard,	as when running kbdTest or the InterpreterSimulator in Morphic"	| char |	self fetchMoreEvents.	keyboardBuffer isEmpty ifFalse: [^ keyboardBuffer peek].	char _ nil.	eventQueue ifNotNil:		[eventQueue nextOrNilSuchThat:  "NOTE: must not return out of this block, so loop to end"			[:buf | (self isKbdEvent: buf) ifTrue: [char ifNil: [char _ buf at: 3]].			false  "NOTE: block value must be false so Queue won't advance"]].	^ char! !!ProcessBrowser class methodsFor: 'process control' stamp: 'ar 2/6/2004 14:45'!nameAndRulesFor: aProcess 	"Answer a nickname and two flags: allow-stop, and allow-debug"	^ [aProcess caseOf: {		[] -> [{'no process'. false. false}].		[Smalltalk lowSpaceWatcherProcess] -> [{'the low space watcher'. false. false}].		[WeakArray runningFinalizationProcess] -> [{'the WeakArray finalization process'. false. false}].		[Processor activeProcess] -> [{'the UI process'. false. true}].		[Processor backgroundProcess] -> [{'the idle process'. false. false}].		[Sensor interruptWatcherProcess] -> [{'the user interrupt watcher'. false. false}].		[Project uiProcess] -> [{'the inactive Morphic UI process'. false. false}].		[Smalltalk			at: #SoundPlayer			ifPresent: [:sp | sp playerProcess]] -> [{'the Sound Player'. false. false}].		[ScheduledControllers			ifNotNil: [ScheduledControllers activeControllerProcess]] -> [{'the inactive MVC controller process'. false. true}].		[Smalltalk			at: #CPUWatcher			ifPresent: [:cw | cw currentWatcherProcess]] -> [{'the CPUWatcher'. false. false}]}		 otherwise: 			[(aProcess priority = Processor timingPriority					and: [aProcess suspendedContext receiver == Delay])				ifTrue: [{'the timer interrupt watcher'. false. false}]				ifFalse: [{aProcess suspendedContext asString. true. true}]]]		ifError: [:err :rcvr | {aProcess suspendedContext asString. true. true}]! !EventSensor removeSelector: #eventQueue:!EventSensor removeSelector: #higherPerformanceNotes!EventSensor removeSelector: #inputProcess!EventSensor class removeSelector: #initialize!EventSensor removeSelector: #ioProcess!