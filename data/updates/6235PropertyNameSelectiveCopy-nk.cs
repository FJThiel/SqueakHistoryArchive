'From Squeak3.7beta of ''1 April 2004'' [latest update: #5905] on 1 May 2004 at 8:31:03 pm'!"Change Set:		PropertyNameSelectiveCopy-nkDate:			1 May 2004Author:			Ned KonzA small enhancement for the copying of Morph extensions. Adds a method MorphExtension>>propertyNamesNotCopied that can be used to suppress the copying of particular properties (like copyWeakly does for the weak copying of the properties). Also removes the unnecessary instVar accessors within veryDeepFixupWith: and veryDeepInner:, simplifies the code, and adds some comments."!!MorphExtension methodsFor: '*connectors-copying' stamp: 'nk 5/1/2004 17:20'!copyWeakly	"list of names of properties whose values should be weak-copied when veryDeepCopying a morph.  See DeepCopier."	^ #(formerOwner newPermanentPlayer logger graphModel gestureDictionaryOrName)	"add yours to this list" 	"formerOwner should really be nil at the time of the copy, but this will work just fine."! !!MorphExtension methodsFor: '*connectors-copying' stamp: 'nk 5/1/2004 17:23'!propertyNamesNotCopied	"list of names of properties whose values should be deleted when veryDeepCopying a morph.	See DeepCopier."	^ #(connectedConstraints connectionHighlights highlightedTargets)	"add yours to this list" ! !!MorphExtension methodsFor: '*connectors-copying' stamp: 'nk 5/1/2004 17:39'!veryDeepFixupWith: deepCopier 	"If target and arguments fields were weakly copied, fix them here.	If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"	super veryDeepFixupWith: deepCopier.	otherProperties ifNil: [ ^self ].	"Properties whose values are only copied weakly replace those values if they were copied via another path"	self copyWeakly do: [ :propertyName |		otherProperties at: propertyName ifPresent: [ :property |			otherProperties at: propertyName				put: (deepCopier references at: property ifAbsent: [ property ])]].! !!MorphExtension methodsFor: '*connectors-copying' stamp: 'nk 5/1/2004 17:45'!veryDeepInner: deepCopier 	"Copy all of my instance variables.	Some otherProperties need to be not copied at all, but shared. Their names are given by copyWeakly.	Some otherProperties should not be copied or shared. Their names are given by propertyNamesNotCopied.	This is special code for the dictionary. See DeepCopier, and veryDeepFixupWith:."	| namesOfWeaklyCopiedProperties weaklyCopiedValues |	super veryDeepInner: deepCopier.	locked _ locked veryDeepCopyWith: deepCopier.	visible _ visible veryDeepCopyWith: deepCopier.	sticky _ sticky veryDeepCopyWith: deepCopier.	balloonText _ balloonText veryDeepCopyWith: deepCopier.	balloonTextSelector _ balloonTextSelector veryDeepCopyWith: deepCopier.	externalName _ externalName veryDeepCopyWith: deepCopier.	isPartsDonor _ isPartsDonor veryDeepCopyWith: deepCopier.	actorState _ actorState veryDeepCopyWith: deepCopier.	player _ player veryDeepCopyWith: deepCopier.		"Do copy the player of this morph"	eventHandler _ eventHandler veryDeepCopyWith: deepCopier. 	"has its own restrictions"	otherProperties ifNil: [ ^self ].	otherProperties := otherProperties copy.	self propertyNamesNotCopied do: [ :propName | otherProperties removeKey: propName ifAbsent: [] ].	namesOfWeaklyCopiedProperties _ self copyWeakly.	weaklyCopiedValues _ namesOfWeaklyCopiedProperties collect: [  :propName | otherProperties removeKey: propName ifAbsent: [] ].	"Now copy all the others."	otherProperties := otherProperties veryDeepCopyWith: deepCopier.	"And replace the weak ones."	namesOfWeaklyCopiedProperties with: weaklyCopiedValues do: [ :name :value | value ifNotNil: [ otherProperties at: name put: value ]].! !