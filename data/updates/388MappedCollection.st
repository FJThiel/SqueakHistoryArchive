'From Squeak 1.19d of April 13, 1997 on 5 November 1998 at 10:11:05 pm'!SequenceableCollection subclass: #MappedCollection	instanceVariableNames: 'domain map '	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Sequenceable'!MappedCollection comment:'I represent an access mechanism for a sequencable collection re-ordering or filtering its elements.'!!MappedCollection methodsFor: 'accessing'!at: anIndex	^domain at: (map at: anIndex)!at: anIndex put: anObject	^domain at: (map at: anIndex) put: anObject!atPin: anIndex 	"Return this element of an indexable object.  Return the first or last element if index is out of bounds.  6/18/96 tk"	^domain at: (map atPin: anIndex)!atWrap: anIndex 	"Return this element of an indexable object.  If index is out of bounds, let it wrap around from the end to the beginning unil it is in bounds.  6/18/96 tk"	^domain at: (map atWrap: anIndex)!contents	"Answer the receiver's domain for mapping, a Dictionary or 	SequenceableCollection."	^map collect: [:mappedIndex | domain at: mappedIndex]!size	^map size! !!MappedCollection methodsFor: 'adding'!add: newObject	self shouldNotImplement! !!MappedCollection methodsFor: 'copying'!copy	"This returns another MappedCollection whereas copyFrom:to: will return	an object like my domain."	^MappedCollection collection: domain map: map! !!MappedCollection methodsFor: 'enumerating'!collect: aBlock 	"Refer to the comment in Collection|collect:."	| aStream |	aStream _ WriteStream on: (self species new: self size).	self do:		[:domainValue | 		aStream nextPut: (aBlock value: domainValue)].	^aStream contents!do: aBlock 	"Refer to the comment in Collection|do:."	map do:		[:mapValue | aBlock value: (domain at: mapValue)]!select: aBlock 	"Refer to the comment in Collection|select:."	| aStream |	aStream _ WriteStream on: (self species new: self size).	self do:		[:domainValue | 		(aBlock value: domainValue)			ifTrue: [aStream nextPut: domainValue]].	^aStream contents! !!MappedCollection methodsFor: 'printing'!storeOn: aStream	aStream nextPut: $(.	domain storeOn: aStream.	aStream nextPutAll: ' mappedBy: '.	map storeOn: aStream.	aStream nextPut: $)! !!MappedCollection methodsFor: 'private'!setCollection: aCollection map: aDictionary	domain _ aCollection.	map _ aDictionary!species	^domain species! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MappedCollection class	instanceVariableNames: ''!!MappedCollection class methodsFor: 'instance creation'!collection: aCollection map: aSequenceableCollection 	"Answer an instance of me that maps aCollection by 	aSequenceableCollection."	^self basicNew setCollection: aCollection map: aSequenceableCollection!new	self error: 'MappedCollections must be created using the collection:map: message'!newFrom: aCollection 	"Answer an instance of me containing the same elements as aCollection."	^ self collection: aCollection map: (1 to: aCollection size)"	MappedCollection newFrom: {1. 2. 3}	{4. 3. 8} as: MappedCollection"! !