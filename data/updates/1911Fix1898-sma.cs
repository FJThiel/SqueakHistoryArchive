'From Squeak2.8alpha of 4 February 2000 [latest update: #1873] on 3 March 2000 at 7:34:13 pm'!"Change Set:		33Fix1898-smaDate:			3 March 2000Author:			Stefan Matthias AustFixes a problem introduced in #1898 and also do some small refactorings to reduce the number of different ways to initialize a BlockNode."!!BlockNode methodsFor: 'initialize-release' stamp: 'sma 3/3/2000 13:38'!statements: statementsCollection returns: returnBool 	"Decompile."	| returnLast |	returnLast _ returnBool.	returns _ false.	statements _ 		(statementsCollection size > 1 			and: [(statementsCollection at: statementsCollection size - 1) 					isReturningIf])				ifTrue: 					[returnLast _ false.					statementsCollection allButLast]				ifFalse: [statementsCollection size = 0						ifTrue: [Array with: NodeNil]						ifFalse: [statementsCollection]].	arguments _ #().	temporaries _ #().	returnLast ifTrue: [self returnLast]! !!BlockNode class methodsFor: 'instance creation' stamp: 'sma 3/3/2000 13:34'!statements: statements returns: returns	^ self new statements: statements returns: returns! !!BlockNode class methodsFor: 'instance creation' stamp: 'sma 3/3/2000 13:34'!withJust: aNode	^ self statements: (Array with: aNode) returns: false! !!DecompilerConstructor methodsFor: 'constructor' stamp: 'sma 3/3/2000 13:34'!codeBlock: statements returns: returns	^ BlockNode statements: statements returns: returns! !!DecompilerConstructor methodsFor: 'constructor' stamp: 'sma 3/3/2000 13:35'!codeEmptyBlock	^ BlockNode withJust: NodeNil! !!MessageNode methodsFor: 'macro transformations' stamp: 'sma 3/3/2000 13:37'!toDoFromWhileWithInit: initStmt	"Return nil, or a to:do: expression equivalent to this whileTrue:"	| variable increment limit toDoBlock body test |	(selector key == #whileTrue:		and: [(initStmt isMemberOf: AssignmentNode) and:				[initStmt variable isTemp]])		ifFalse: [^ nil].	body _ arguments last statements.	variable _ initStmt variable.	increment _ body last toDoIncrement: variable.	(increment == nil or: [receiver statements size ~= 1])		ifTrue: [^ nil].	test _ receiver statements first.	"Note: test chould really be checked that <= or >= comparison	jibes with the sign of the (constant) increment"	((test isMemberOf: MessageNode)		and: [(limit _ test toDoLimit: variable) notNil])		ifFalse: [^ nil].	toDoBlock _ BlockNode statements: body allButLast returns: false.	toDoBlock arguments: (Array with: variable).	^ MessageNode new		receiver: initStmt value		selector: (SelectorNode new key: #to:by:do: code: #macro)		arguments: (Array with: limit with: increment with: toDoBlock)		precedence: precedence! !