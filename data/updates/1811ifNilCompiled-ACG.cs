'From Squeak2.7 of 5 January 2000 [latest update: #1807] on 30 January 2000 at 12:15:54 pm'!"Change Set:		ifNilCompiledDate:			28 January 2000Author:			Andrew GreenbergThis changeSet causes the Squeak compiler to compile the messages	ifNil: ifNil:ifNotNil: ifNotNil: ifNotNil:ifNil:inline.  The downside is that, as with ifTrue:ifFalse, you can no longer change their definitions, nor can you easily search for their senders.  The upside is that these patterns now run three to eight times faster.  Not only that, but the improved code generation saves more space than the entire size of this change set.The postscript recompiles all occurrences take advantage of this enhanced compactness and performance."!!HtmlTag methodsFor: 'private-initialization' stamp: 'di 2/3/2000 07:29'!name: name0  negated: isNegated0 attribs: attribs0 	"initialize from the given attributes"	name _ name0.	isNegated _ isNegated0.	attribs _ attribs0 ifNil: [Dictionary new].! !!MessageNode methodsFor: 'macro transformations' stamp: 'di 1/28/2000 21:19'!noteSpecialSelector: selectorSymbol	" special > 0 flags specially treated messages. "	special _ MacroSelectors indexOf: selectorSymbol.! !!MessageNode methodsFor: 'initialize-release' stamp: 'di 1/28/2000 21:19'!receiver: rcvr selector: selName arguments: args precedence: p from: encoder 	"Compile."	self receiver: rcvr		arguments: args		precedence: p.	self noteSpecialSelector: selName.	(self transform: encoder)		ifTrue: 			[selector isNil				ifTrue: [selector _ SelectorNode new 							key: (MacroSelectors at: special)							code: #macro]]		ifFalse: 			[selector _ encoder encodeSelector: selName.			rcvr == NodeSuper ifTrue: [encoder noteSuper]].	self pvtCheckForPvtSelector: encoder! !!MessageNode methodsFor: 'macro transformations' stamp: 'acg 1/28/2000 00:48'!transformIfFalseIfTrue: encoder	((self checkBlock: (arguments at: 1) as: 'False arg' from: encoder)		and: [self checkBlock: (arguments at: 2) as: 'True arg' from: encoder])		ifTrue: 			[selector _ #ifTrue:ifFalse:.			arguments swap: 1 with: 2.			^true]		ifFalse: 			[^false]! !!MessageNode methodsFor: 'macro transformations' stamp: 'acg 1/27/2000 23:41'!transformIfNil: encoder	^(self transformBoolean: encoder)! !!MessageNode methodsFor: 'macro transformations' stamp: 'acg 1/28/2000 21:49'!transformIfNilIfNotNil: encoder	((self checkBlock: (arguments at: 1) as: 'Nil arg' from: encoder)		and: [self checkBlock: (arguments at: 2) as: 'NotNil arg' from: encoder])		ifTrue: 			[selector _ SelectorNode new key: #ifTrue:ifFalse: code: #macro.			receiver _ MessageNode new				receiver: receiver				selector: #==				arguments: (Array with: NodeNil)				precedence: 2				from: encoder.			^true]		ifFalse: 			[^false]! !!MessageNode methodsFor: 'macro transformations' stamp: 'acg 1/28/2000 21:50'!transformIfNotNilIfNil: encoder	((self checkBlock: (arguments at: 1) as: 'NotNil arg' from: encoder)		and: [self checkBlock: (arguments at: 2) as: 'Nil arg' from: encoder])		ifTrue: 			[selector _ SelectorNode new key: #ifTrue:ifFalse: code: #macro.			receiver _ MessageNode new				receiver: receiver				selector: #==				arguments: (Array with: NodeNil)				precedence: 2				from: encoder.			arguments swap: 1 with: 2.			^true]		ifFalse: 			[^false]! !!MessageNode methodsFor: 'macro transformations' stamp: 'acg 1/27/2000 22:29'!transformIfTrueIfFalse: encoder	^(self checkBlock: (arguments at: 1) as: 'True arg' from: encoder)		and: [self checkBlock: (arguments at: 2) as: 'False arg' from: encoder]! !!MessageNode methodsFor: 'code generation' stamp: 'acg 1/28/2000 21:59'!emitIfNil: stack on: strm value: forValue	| theNode theSize theSelector |	theNode _ arguments first.	theSize _ sizes at: 1.	theSelector _ #ifNotNil:.	receiver emitForValue: stack on: strm.	forValue ifTrue: [strm nextPut: Dup. stack push: 1].	strm nextPut: LdNil. stack push: 1.	equalNode emit: stack args: 1 on: strm.	self 		emitBranchOn: (selector key == theSelector)		dist: theSize 		pop: stack 		on: strm.	forValue 		ifTrue: 			[strm nextPut: Pop. stack pop: 1.			theNode emitForEvaluatedValue: stack on: strm]			ifFalse: [theNode emitForEvaluatedEffect: stack on: strm].! !!MessageNode methodsFor: 'code generation' stamp: 'acg 1/28/2000 22:00'!sizeIfNil: encoder value: forValue	| theNode theSize theSelector |	equalNode _ encoder encodeSelector: #==.	sizes _ Array new: 1.	theNode _ arguments first.	theSelector _ #ifNotNil:.	forValue		ifTrue:			[sizes at: 1 put: (theSize _ (1 "pop" + (theNode sizeForEvaluatedValue: encoder))).			 ^(receiver sizeForValue: encoder) +				2 "Dup. LdNil" +				(equalNode size: encoder args: 1 super: false) +				(self 					sizeBranchOn: (selector key == theSelector) 					dist: theSize) +				theSize]		ifFalse:			[sizes at: 1 put: (theSize _ (theNode sizeForEvaluatedEffect: encoder)).			 ^(receiver sizeForValue: encoder) +				1 "LdNil" +				(equalNode size: encoder args: 1 super: false) +				(self 					sizeBranchOn: (selector key == theSelector) 					dist: theSize) +				theSize]! !!MessageNode methodsFor: 'printing' stamp: 'acg 1/28/2000 00:45'!printIfNil: aStream indent: level	^self 		printKeywords: selector key		arguments: (Array with: arguments first)		on: aStream indent: level! !!MessageNode methodsFor: 'printing' stamp: 'di 1/28/2000 23:51'!printIfNilNotNil: aStream indent: level	receiver ifNotNil:		[receiver ifNilReceiver printOn: aStream indent: level precedence: precedence].	(arguments first isJust: NodeNil) ifTrue:		[^ self printKeywords: #ifNotNil:				arguments: { arguments second }				on: aStream indent: level].	(arguments second isJust: NodeNil) ifTrue:		[^ self printKeywords: #ifNil:				arguments: { arguments first }				on: aStream indent: level].	^ self printKeywords: #ifNil:ifNotNil:			arguments: arguments			on: aStream indent: level! !!MessageNode methodsFor: 'printing' stamp: 'di 1/28/2000 23:47'!printOn: aStream indent: level	| printer |	special > 0 ifTrue: [printer _ MacroPrinters at: special].	(printer == #printCaseOn:indent:) ifTrue: 		[^self printCaseOn: aStream indent: level].	(printer == #printIfNilNotNil:indent:) ifTrue: 		[^self printIfNilNotNil: aStream indent: level].	receiver == nil 		ifFalse: [receiver printOn: aStream indent: level precedence: precedence].	(special > 0)		ifTrue: 			[self perform: printer with: aStream with: level]		ifFalse: 			[self 				printKeywords: selector key				arguments: arguments				on: aStream				indent: level]! !!MessageNode methodsFor: 'private' stamp: 'acg 1/28/2000 00:57'!ifNilReceiver	^receiver! !!MessageNode class methodsFor: 'class initialization' stamp: 'acg 1/28/2000 21:58'!initialize		"MessageNode initialize"	MacroSelectors _ 		#(ifTrue: ifFalse: ifTrue:ifFalse: ifFalse:ifTrue:			and: or:			whileFalse: whileTrue: whileFalse whileTrue			to:do: to:by:do:			caseOf: caseOf:otherwise:			ifNil: ifNotNil:  ifNil:ifNotNil: ifNotNil:ifNil:).	MacroTransformers _ 		#(transformIfTrue: transformIfFalse: transformIfTrueIfFalse: transformIfFalseIfTrue:			transformAnd: transformOr:			transformWhile: transformWhile: transformWhile: transformWhile:			transformToDo: transformToDo:			transformCase: transformCase:			transformIfNil: transformIfNil:  transformIfNilIfNotNil: transformIfNotNilIfNil:).	MacroEmitters _ 		#(emitIf:on:value: emitIf:on:value: emitIf:on:value: emitIf:on:value:			emitIf:on:value: emitIf:on:value:			emitWhile:on:value: emitWhile:on:value: emitWhile:on:value: emitWhile:on:value:			emitToDo:on:value: emitToDo:on:value:			emitCase:on:value: emitCase:on:value:			emitIfNil:on:value: emitIfNil:on:value: emitIf:on:value: emitIf:on:value:).	MacroSizers _ 		#(sizeIf:value: sizeIf:value: sizeIf:value: sizeIf:value:			sizeIf:value: sizeIf:value:			sizeWhile:value: sizeWhile:value: sizeWhile:value: sizeWhile:value:			sizeToDo:value: sizeToDo:value:			sizeCase:value: sizeCase:value:			sizeIfNil:value: sizeIfNil:value: sizeIf:value: sizeIf:value: ).	MacroPrinters _ 		#(printIfOn:indent: printIfOn:indent: printIfOn:indent: printIfOn:indent:			printIfOn:indent: printIfOn:indent:			printWhileOn:indent: printWhileOn:indent: printWhileOn:indent: printWhileOn:indent:			printToDoOn:indent: printToDoOn:indent:			printCaseOn:indent: printCaseOn:indent:			printIfNil:indent: printIfNil:indent: printIfNilNotNil:indent: printIfNilNotNil:indent:)! !MessageNode initialize!"Postscript:Initialize MessageNode to enable the new code generation, and then recompile the system." | sels m n | MessageNode initialize.m _ 0. Smalltalk allBehaviorsDo: [:c | m _ m+1].'Please stand by while we locate and recompile    all occurrences of ifNil: and ifNotNil: ...'	displayProgressAt: Sensor cursorPoint	from: 0 to: m	during:		[:bar | n _ 0.		Smalltalk allBehaviorsDo:			[:c | bar value: (n _ n+1).			sels _ Set new.			#(ifNil: ifNotNil: ifNil:ifNotNil: ifNotNil:ifNil:) do:				[:sel | sels addAll: (c whichSelectorsReferTo: sel special: false byte: 0)].			sels do: [:sel | c recompile: sel from: c]]].!