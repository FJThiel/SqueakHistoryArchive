'From Squeak2.9alpha of 16 June 2000 [latest update: #2447] on 15 July 2000 at 1:48:04 pm'!"Change Set:		textMorphMenu-tkDate:			14 July 2000Author:			Ted KaehlerAllows the normal code pane editing menu to be obtained in any TextMorph.  Control-click brings up the standard TextMorph menu with two new items, 'code pane menu...' and 'code pane shift menu....'.  Such items as 'print it', implementors, and 'translate it' are now available.  (May have to use the halo to get the menu.  Why does Control-click not being up the menu when the TextMorph is embedded?)	Access to the code pane menus is blocked if either #noviceMode or #simpleMenus is in force.Some additions FreeTranslation (not finished yet)."!!Preferences commentStamp: 'tk 7/14/2000 15:23' prior: 0!A general mechanism to store preference choices.  The default setup treats any symbol as a potential boolean flag; flags unknown to the preference dictionary are always returned as false.  It is also possible to store non-boolean data in the preference table.  sw 8/91	To open the control panel:		Preferences openFactoredPanelAll messages are to the class.	Preferences logDebuggerStackToFileYou can make up a new preference any time.  Do not define a new message in Preferences class.  When Preferences does not understand a selector, it looks in the flags dictionary.  It calls:	Preferences valueOfFlag: #logDebuggerStackToFileTo set a preference,	Preferences setPreference: #logDebuggerStackToFile toValue: false.Or,	Preferences disable: #logDebuggerStackToFile.Or to turn it on,	Preferences enable: #logDebuggerStackToFile.!!FreeTranslation class methodsFor: 'as yet unclassified' stamp: 'tk 7/15/2000 13:40'!extract: aMimeDoc	| pageSource document |	"Extract the translated text from the web page"	(aMimeDoc content beginsWith: 'error') ifTrue: [^ aMimeDoc content].	pageSource _ aMimeDoc content isoToSqueak.	document _ (HtmlParser parse: (ReadStream on: pageSource)).	document error: 'This code is not finished'.	"Take the parsing and find the translated part."! !!FreeTranslation class methodsFor: 'as yet unclassified' stamp: 'tk 7/15/2000 07:33'!translate: aString from: fromLang to: toLang	| inputs |	"Submit the string to the translation server at www.freetranslation.com.  Return the entire web page that freetranslation sends back."	aString size >= 10000 ifTrue: [^ self inform: 'Text selection is too long.'].	inputs _ Dictionary new.	inputs at: 'SrcText' put: (Array with: aString).	inputs at: 'Sequence' put: #('core').	inputs at: 'Mode' put: #('html').	inputs at: 'template' put: #('TextResult2.htm').	inputs at: 'Language' put: (Array with: fromLang, '/', toLang).	^ 'http://ets.freetranslation.com:5081' asUrl postFormArgs: inputs.	! !!FreeTranslation class methodsFor: 'as yet unclassified' stamp: 'tk 7/15/2000 07:40'!translatePanel: buttonPlayer fromTo: normalDirection	| ow fromTM toTM fromLang toLang tt doc answer |	"Gather up all the info I need from the morphs in the button's owner and do the translation.  Insert the results in a TextMorph.  Use www.freeTranslation.com Refresh the banner ad.	TextMorph with 'from' in the title is starting text.	PopUpChoiceMorph  with 'from' in the title is the starting language.	TextMorph with 'from' in the title is place to put the answer.	PopUpChoiceMorph  with 'from' in the title is the target language.		If normalDirection is false, translate the other direction."	ow _ buttonPlayer costume ownerThatIsA: PasteUpMorph.	ow allMorphs do: [:mm |		(mm isKindOf: TextMorph) ifTrue: [ 			(mm externalName includesSubString: 'from') ifTrue: [				 fromTM _ mm].			(mm externalName includesSubString: 'to') ifTrue: [				 toTM _ mm]].		(mm isKindOf: PopUpChoiceMorph) ifTrue: [ 			(mm externalName includesSubString: 'from') ifTrue: [				 fromLang _ mm contents asString].			(mm owner externalName includesSubString: 'from') ifTrue: [				 fromLang _ mm contents asString].			(mm externalName includesSubString: 'to') ifTrue: [				 toLang _ mm contents asString].			(mm owner externalName includesSubString: 'to') ifTrue: [				 toLang _ mm contents asString]]].	normalDirection ifFalse: ["switch"		tt _ fromTM.  fromTM _ toTM.  toTM _ tt.		tt _ fromLang.  fromLang _ toLang.  toLang _ tt].	doc _ self translate: fromTM contents asString from: fromLang to: toLang.	answer _ self extract: doc.	"pull out the translated text"	toTM contents: answer; changed.! !!ParagraphEditor methodsFor: 'private' stamp: 'tk 7/14/2000 12:15'!getPluggableYellowButtonMenu: shiftKeyState	| customMenu |	^ ((view ~~ nil) and: [(customMenu _ view getMenu: shiftKeyState) notNil])		ifTrue: [customMenu]		ifFalse:			[shiftKeyState				ifTrue: [self class shiftedYellowButtonMenu]				ifFalse: [self class yellowButtonMenu]]! !!Scamper class methodsFor: 'instance creation' stamp: 'tk 7/14/2000 15:20'!newOrExistingOn: aStringOrUrl	| aUrl siteStr |	"If a Scamper is open on the same site, return its SystemWindow, else return a new Scamper."aUrl _ aStringOrUrl asUrl.siteStr _ aUrl schemeName, '://', aUrl authority.Smalltalk isMorphic ifTrue: [	World submorphsDo: [:m | 		((m isKindOf: SystemWindow) and: [m model isKindOf: Scamper]) ifTrue: [			(m model currentUrl asString beginsWith: siteStr) ifTrue: [					m expand.					^ m]]]].^ self new openAsMorph! !!TextMorph methodsFor: 'menu' stamp: 'tk 7/15/2000 13:44'!addCustomMenuItems: aCustomMenu hand: aHandMorph	| outer |	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'add predecessor' action: #addPredecessor:.	aCustomMenu add: 'add successor' action: #addSuccessor:.	(Preferences valueOfFlag: #noviceMode) not & 		(Preferences valueOfFlag: #simpleMenus) not ifTrue: [			aCustomMenu add: 'code pane menu...' action: #yellowButtonActivity.			aCustomMenu add: 'code pane shift menu....' action: #shiftedYellowButtonActivity].	outer _ self meOrMyDropShadow owner.	((outer isKindOf: PolygonMorph) and: [outer isOpen]) ifTrue:		[container == nil			ifTrue: [aCustomMenu add: 'follow owner''s curve' action: #followCurve]			ifFalse: [aCustomMenu add: 'reverse direction' action: #reverseCurveDirection.					aCustomMenu add: 'set baseline' action: #setCurveBaseline:]]		ifFalse:		[(container == nil or: [container fillsOwner not])			ifTrue: [aCustomMenu add: 'fill owner''s shape' action: #fillingOnOff]			ifFalse: [aCustomMenu add: 'rectangluar bounds' action: #fillingOnOff].		(container == nil or: [container avoidsOcclusions not])			ifTrue: [aCustomMenu add: 'avoid occlusions' action: #occlusionsOnOff]			ifFalse: [aCustomMenu add: 'ignore occlusions' action: #occlusionsOnOff]].! !!TextMorph methodsFor: 'menu' stamp: 'tk 7/14/2000 12:20'!shiftedYellowButtonActivity	"Supply the normal 'code pane' menu to use its text editing commands from a menu."	self editor pluggableYellowButtonActivity: true.	self changed.! !!TextMorph methodsFor: 'menu' stamp: 'tk 7/14/2000 12:17'!yellowButtonActivity	"Supply the normal 'code pane' menu to use its text editing commands from a menu."	self editor pluggableYellowButtonActivity: false.	self changed.! !!UpdatingThreePhaseButtonMorph methodsFor: 'as yet unclassified' stamp: 'tk 7/14/2000 15:27'!step	| newBoolean |	super step.	state == #pressed ifTrue: [^ self].	newBoolean _ target perform: getSelector.	newBoolean == self isOn		ifFalse:			[self state: (newBoolean == true ifTrue: [#on] ifFalse: [#off])]! !!WordNet class methodsFor: 'as yet unclassified' stamp: 'tk 7/14/2000 16:19'!canTranslateFrom	^ CanTranslateFrom! !Scamper class removeSelector: #newOrExistingOn2:!FreeTranslation removeSelector: #translatePanel:fromTo:!