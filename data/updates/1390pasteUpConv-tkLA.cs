'From Squeak 2.5 of August 6, 1999 on 17 August 1999 at 4:06:55 pm'!!PasteUpMorph methodsFor: 'object fileIn' stamp: 'tk 8/16/1999 13:48'!convertbosfcebbfgccpmcpbttloiairfidcuwp0: varDictbosfcebbfgccpmcpbttloiairfidcuww0: smartRefStrm	"These variables are automatically stored into the new instance('presenter' 'model' 'cursor' 'padding' 'backgroundMorph''turtleTrailsForm' 'turtlePen' 'lastTurtlePositions' 'openToDragNDrop''isPartsBin' 'autoLineLayout' 'indicateCursor' 'resizeToFit' 'fileName''isStackLike' 'dataInstances' 'currentDataInstance' 'userFrameRectangle''wantsMouseOverHalos' ).	This method is for additional changes. Use statements like (foo _varDict at: 'foo')."	"New variables: ('worldState' )  If a non-nil value is needed,please assign it."	"These are going away ('project' ).  Possibly store their info inanother variable?"	worldState _ varDict at: 'project'.! !!SmartRefStream methodsFor: 'read write' stamp: 'tk 8/17/1999 15:17'!restoreClassInstVars	"Install the values of the class instance variables of UniClasses(i.e. scripts slotInfo).  classInstVars is ((#Player25 scripts slotInfo)...).  Thank you Mark Wai for the bug fix."	| normal aName newName newCls trans rList start |	self moreObjects ifFalse: [^ self]. 	"are no UniClasses withclass inst vars"	classInstVars _ super next.	"Array of arrays"	normal _ Object class instSize.	"might give trouble if Player classsuperclass changes size"	(structures at: #Player ifAbsent: [#()]) = #(0 'dependents''costume') ifTrue:		[trans _ 1].	"now (0 costume costumes).  Do theconversion of Player class			inst vars in Update 509."	classInstVars do: [:list |		aName _ (list at: 1) asSymbol.		rList _ list.		newName _ renamed at: aName ifAbsent: [aName].		newCls _ Smalltalk at: newName				ifAbsent: [self error: 'UniClass definitionmissing'].		("old conversion" trans == 1 and: [newCls inheritsFrom:Player]) ifTrue: [			"remove costumeDictionary from Player class inst vars"			rList _ rList asOrderedCollection.			rList removeAt: 4].	"costumeDictionary's value"		start _ list second = 'Update to read classPool' ifTrue:[4] ifFalse: [2].		newCls class instSize = (normal + (rList size) - start + 1)ifFalse:			[self error: 'UniClass superclass class has changedsize'].			"Need to install a conversion method mechanism"		start = 4 ifTrue: [newCls instVarAt: normal - 1 "classPool"put: (list at: 3)].		start to: rList size do: [:ii |			newCls instVarAt: normal + ii - start + 1 put: (rList at:ii)]].! !!SmartRefStream methodsFor: 'read write' stamp: 'tk 8/17/1999 16:06'!saveClassInstVars	"Install the values of the instance variables of UniClasses.classInstVars is an array of arrays (#Player3 (Player3 class's inst varscripts) (Player3 class's inst var slotInfo) ...) "	| normal mySize list clsPoolIndex |	classInstVars _ OrderedCollection new: 100.	normal _ Object class instSize.	clsPoolIndex _ Object class allInstVarNames indexOf: 'classPool'.	self uniClasesDo: [:aUniClass |		list _ OrderedCollection new.		mySize _ aUniClass class instSize.		mySize = normal ifFalse:			[list add: aUniClass name.	"a symbol"			list add: 'Update to read classPool'.	"newconvention for saving the classPool"			list add: (aUniClass instVarAt: clsPoolIndex)"classPool".						"write actual value of nilinstead of Dictionary()"			normal + 1 to: mySize do: [:ii |				list addLast: (aUniClass instVarAt: ii)]].		classInstVars add: list asArray].	classInstVars _ classInstVars asArray.	! !