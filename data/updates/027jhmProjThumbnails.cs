'From Squeak 2.0 BETA of May 8, 1998 on 14 May 1998 at 5:33:26 pm'!"Change Set:		jhmProjThumbnailsDate:			14 May 1998Author:			John MaloneyMake ProjectView's be useable as raw project aliases.They can be resized. They can be pasted in bookmorphs.They update themselves lazily from the project thumbnailwhen re-drawn. They can be created from the World menuin either an all-morphic world or an MVC Morphic window.Note: This change set modifies buildWorldMenu."!ImageMorph subclass: #ProjectViewMorph	instanceVariableNames: 'project lastProjectThumbnail '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!HandMorph methodsFor: 'meta menu' stamp: 'jm 5/14/1998 16:38'!buildWorldMenu	"Build the meta menu for the world."	| menu subMenu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	Project current isTopProject ifFalse:		[menu add: 'exit this world' action: #exitWorld.		menu addLine].	menu add: 'new morph...' action: #newMorph.	PasteBuffer ifNotNil: [menu add: 'paste morph' action: #pasteMorph].	menu add: 'project thumbnail...' action: #projectThumbnail.	World ifNotNil: [		subMenu _ MenuMorph new defaultTarget: self.		subMenu add: 'workspace' action: #openWorkspace.		subMenu add: 'browser' action: #openBrowser.		subMenu add: 'recent changes' action: #openRecentChanges.		subMenu add: 'change sorter' action: #openChangeSorter.		subMenu add: 'changes log' action: #openChangesLog.		subMenu add: 'file list' action: #openFileList.		subMenu add: 'transcript' action: #openTranscript.		subMenu add: 'project (mvc)' action: #openMVCProject.		subMenu add: 'project (morphic)' action: #openMorphicProject."coming soon...		subMenu addLine.		subMenu add: 'collapse all' action: #collapseAll.		subMenu add: 'expand all' action: #expandAll.		subMenu add: 'find window' action: #findWindow."		menu add: 'windows...' subMenu: subMenu].	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'grab drawing from screen' action: #grabDrawingFromScreen.	subMenu add: 'read drawing from file' action: #importImageFromDisk.	subMenu add: 'make new drawing' target: self presenter associatedMorph action: #makeNewDrawingWithin.	menu add: 'graphics...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'add slot to model' action: #newVariable.	subMenu add: 'write init method for model' action: #writeInitMethodForModel.	subMenu add: 'grab model for this world' action: #grabModel.	menu add: 'model...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'change background color' action: #changeBackgroundColor.	subMenu add: 'set display depth...' action: #setDisplayDepth.	subMenu add: 'use texture background' target: self world action: #setStandardTexture.	subMenu add: 'unlock contents' action: #unlockWorldContents.	subMenu add: 'unhide hidden objects' action: #showHiders.	subMenu add: 'round up stray objects' action: #roundUpStrayObjects.	gridOn		ifTrue: [subMenu add: 'turn gridding off' action: #setGridding]		ifFalse: [subMenu add: 'turn gridding on' action: #setGridding].	menu add: 'options...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'local host address' action: #reportLocalAddress.	subMenu add: 'connect remote user' action: #connectRemoteUser.	subMenu add: 'disconnect remote user' action: #disconnectRemoteUser.	subMenu add: 'disconnect all remote users' action: #disconnectAllRemoteUsers.	menu add: 'remote...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'read drawing from file' action: #importImageFromDisk.	subMenu add: 'save world in file' action: #saveWorldInFile.	subMenu add: 'read morph(s) from file' action: #readMorphFile.	menu add: 'file...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self world.	subMenu add: 'add stop, step, & go buttons' target: self world presenter action: #addStopStepGoButtons.	subMenu add: 'add scripting knobs' target: self presenter action: #addStandardControls.	subMenu add: 'remove scripting knobs' target: self world action: #removeScriptingControls.	subMenu addLine.	subMenu add: 'parts bin' target: self presenter action: #createStandardPartsBin.	subMenu add: 'control panel' target: self presenter action: #createControlPanel.	menu add: 'scripting...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'inspect world' action: #inspectWorld.	subMenu add: 'inspect model' action: #inspectWorldModel.	subMenu add: 'clear palette area' action: #clearPaletteArea.	subMenu add: 'flush viewer cache' action: #flushViewerCache.	subMenu add: 'full screen' action: #fullScreen.	subMenu add: 'start MessageTally' action: #startMessageTally.	subMenu add: 'call #tempCommand' action: #callTempCommand.	menu add: 'debug...' subMenu: subMenu.	menu addLine.	menu add: 'save' action: #saveSession.	menu add: 'save as...' action: #saveAs.	menu add: 'save and quit' action: #saveAndQuit.	menu add: 'quit...' action: #quitSession.	^ menu! !!HandMorph methodsFor: 'meta menu' stamp: 'jm 5/14/1998 17:25'!newMorph	| menu subMenu catDict shortCat class |	menu _ MenuMorph entitled: 'New Morph'.	menu addStayUpItem.	catDict _ Dictionary new.	SystemOrganization categories do:		[:cat |		((cat beginsWith: 'Morphic-')				and: [(#('Morphic-Menus' 'Morphic-Support') includes: cat) not])		ifTrue:			[shortCat _ cat copyFrom: 'Morphic-' size+1 to: cat size.			(SystemOrganization listAtCategoryNamed: cat) do:				[:cName | class _ Smalltalk at: cName.				((class inheritsFrom: Morph)					and: [class includeInNewMorphMenu])					ifTrue:					[(catDict includesKey: shortCat) 					ifTrue: [(catDict at: shortCat) addLast: class]					ifFalse: [catDict at: shortCat put: (OrderedCollection with: class)]]]]].	catDict keys asSortedCollection do:		[:categ |		subMenu _ MenuMorph new.		((catDict at: categ) asSortedCollection: [:c1 :c2 | c1 name < c2 name]) do:			[:cl | subMenu add: cl name					target: self					selector: #newMorphOfClass:event:					argument: cl].		menu add: categ subMenu: subMenu].	menu popUpAt: self position forHand: self.! !!HandMorph methodsFor: 'meta menu' stamp: 'jm 5/14/1998 17:21'!projectThumbnail	"Offer the user a menu of project names. Attach to the hand a thumbnail of the project the user selects."	| menu projName |	menu _ MVCMenuMorph entitled: 'Select Project'.	Project allNames do: [:n | menu add: n action: n].	projName _ menu invokeAt: self position in: self world.	projName ifNotNil: [		self attachMorph:			(ProjectViewMorph on: (Project named: projName))].! !!MVCMenuMorph commentStamp: 'jm 5/14/1998 17:33' prior: 0!I simulate the MVC menu classes PopUpMenu, SelectionMenu, and CustomMenu when running in a Morphic world. I am also used to implement Utilities>informUser:during:.!!MVCMenuMorph reorganize!('invoking' displayAt:during: invokeAt:in:)('private' cancelValue: invokeItem:)!!MVCMenuMorph methodsFor: 'invoking' stamp: 'jm 5/14/1998 16:59'!invokeAt: aPoint in: aWorld	"Add this menu to the given world centered at the given point. Wait for the user to make a selection and answer it. The selection value returned matches the semantics of the original MVC menu from which this menu was created. If the original menu was a PopUpMenu, the answer is the index of the selection, or zero if no selection was made. If the original menu was a SelectionMenu or CustomMenu, the answer the selection stored in the menu, or nil if no selection was made."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	aWorld addMorph: self centeredNear: (aPoint - aWorld viewBox origin).	done _ false.	[self isInWorld & done not] whileTrue: [aWorld doOneCycle].	self delete.	^ selectedItem! !!MenuMorph class methodsFor: 'instance creation' stamp: 'jm 5/14/1998 17:21'!entitled: aString	"Answer a new instance of me with the given title."	^ self new addTitle: aString! !!PopUpMenu methodsFor: 'basic control sequence' stamp: 'jm 5/14/1998 17:06'!startUpCenteredWithCaption: captionOrNil	"Differs from startUpWithCaption: by appearing with cursor in the menu,	and thus ready to act on mouseUp, without requiring user tweak to confirm"	World ifNotNil: [		^ (MVCMenuMorph from: self title: captionOrNil)			invokeAt: Sensor cursorPoint in: World].	Cursor normal showWhile:		[self displayAt: Sensor cursorPoint - (frame width//2@0)			withCaption: captionOrNil			during: [[Sensor anyButtonPressed] whileFalse: [].					[Sensor anyButtonPressed] whileTrue: [self manageMarker]]].	^selection! !!PopUpMenu methodsFor: 'basic control sequence' stamp: 'jm 5/14/1998 17:06'!startUpWithCaption: captionOrNil	"Display the menu, with caption if supplied. Wait for the mouse button to go down, then track the selection as long as the button is pressed. When the button is released, answer the index of the current selection, or zero if the mouse is not released over any menu item."	World ifNotNil: [		^ (MVCMenuMorph from: self title: captionOrNil)			invokeAt: Sensor cursorPoint in: World].	Cursor normal showWhile:		[self displayAt: Sensor cursorPoint			withCaption: captionOrNil			during: [Sensor cursorPoint: marker center.					[Sensor anyButtonPressed] whileFalse: [].					[Sensor anyButtonPressed] whileTrue: [self manageMarker]]].	^ selection! !!Project class methodsFor: 'instance creation' stamp: 'jm 5/14/1998 17:17'!allNames	| names |	names _ OrderedCollection new.	self allInstancesDo: [:proj |		proj == CurrentProject ifFalse: [names add: proj name]].	^ names! !!ProjectViewMorph commentStamp: 'jm 5/14/1998 17:33' prior: 0!I am a Morphic view of a project. I display a scaled version of the project's thumbnail, which itself is a scaled-down snapshot of the screen taken when the project was last exited. When I am displayed, I check to see if the project thumbnail has changed and, if so, I update my own view of that thumbnail.!!ProjectViewMorph methodsFor: 'all' stamp: 'jm 5/14/1998 15:47'!borderWidth: ignored	"Sent by SystemWindow, but ignored here."! !!ProjectViewMorph methodsFor: 'all' stamp: 'jm 5/14/1998 15:42'!drawOn: aCanvas	(project ~~ nil and: [project thumbnail ~~ lastProjectThumbnail])		ifTrue: [  "scale thumbnail to fit my bounds"			(WarpBlt toForm: image)				sourceForm: project thumbnail;				cellSize: 2;  "installs a colormap"				combinationRule: Form over;				copyQuad: (project thumbnail boundingBox) innerCorners				toRect: (0@0 extent: image extent).			lastProjectThumbnail _ project thumbnail].	super drawOn: aCanvas.! !!ProjectViewMorph methodsFor: 'all' stamp: 'jm 5/14/1998 16:13'!extent: aPoint	"Set my image form to the given extent."	| newExtent scaleP scale fillColor |	((bounds extent = aPoint) and:	 [image depth = Display depth]) ifFalse: [		lastProjectThumbnail			ifNil: [newExtent _ aPoint]			ifNotNil: [				scaleP _ aPoint / lastProjectThumbnail extent.				scale _ scaleP x asFloat max: scaleP y asFloat.				newExtent _ (lastProjectThumbnail extent * scale) rounded].		self image: (Form extent: newExtent depth: Display depth).		project world			ifNil: [fillColor _ project world color]			ifNotNil: [fillColor _ Color veryLightGray].		image fill: image boundingBox fillColor: fillColor.		lastProjectThumbnail _ nil].! !!ProjectViewMorph methodsFor: 'all' stamp: 'jm 5/14/1998 17:13'!on: aProject	project _ aProject.	lastProjectThumbnail _ nil.	project thumbnail		ifNil: [self extent: 80@100]		ifNotNil: [self extent: project thumbnail extent].! !!ProjectViewMorph class reorganize!('instance creation' on:)('project window creation' newMVCProject newMorphicProject)!!ProjectViewMorph class methodsFor: 'instance creation' stamp: 'jm 5/14/1998 16:19'!on: aProject	^ self new on: aProject! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'jm 5/14/1998 16:19'!newMVCProject	"Create an instance of me on a new MVC project (in a SystemWindow)."	| proj window |	proj _ Project new.	window _ (SystemWindow labelled: proj name) model: proj.	window		addMorph: (self on: proj)		frame: (0@0 corner: 1.0@1.0).	^ window! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'jm 5/14/1998 16:19'!newMorphicProject	"Return an instance of me on a new Morphic project (in a SystemWindow)."	| proj window |	proj _ Project newMorphic.	window _ (SystemWindow labelled: proj name) model: proj.	window		addMorph: (self on: proj)		frame: (0@0 corner: 1.0@1.0).	^ window! !!SelectionMenu methodsFor: 'basic control sequence' stamp: 'jm 5/14/1998 17:06'!startUpWithCaption: captionOrNil	"Overridden to return value returned by manageMarker."	| selectedItem |	World ifNotNil: [		^ (MVCMenuMorph from: self title: captionOrNil)			invokeAt: Sensor cursorPoint in: World].	self displayAt: Sensor cursorPoint 		withCaption: captionOrNil		during: [Sensor cursorPoint: marker center.				[Sensor anyButtonPressed] whileFalse: [].				[Sensor anyButtonPressed]					whileTrue: [selectedItem _ self manageMarker]].	^ selectedItem! !MVCMenuMorph removeSelector: #invokeAt:!MenuMorph class removeSelector: #fromPopupMenu:title:!