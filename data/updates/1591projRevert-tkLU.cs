'From Squeak2.6 of 11 October 1999 [latest update: #1581] on 31 October 1999 at 3:55:41 pm'!"Change Set:		projRevert-tkLUDate:			31 October 1999Author:			Ted KaehlerAllows the user to save a version of a Project, and revert back to it later.In any project (but the top one), choose 'save for future revert' to save that state of the project.Make changes in the project, exit and enter freely, at any later time, choose 'revert to saved copy'.This feature only works even if you do *not* enable sending projects to disk.  (Preferences enable: #projectsSentToDisk) If you want it to revert and never ask for confirmation when you leave the project,       Project current projectParameters at: #revertWithoutAsking put: true.Watch out, this is very dangerous!!!!!!  People who turn on this feature and then complain that Squeak is broken will be laughed at.Segment files aren't erased so agessively now, because they may be revert segments.The Transcript is always pointed at from outside.  Thus it is not in the reveted stegment.  I fix up its owner pointer via a hack.  The text in the Transcript *will* reflect changes made after the revert copy was saved.  Please just ignore this.  Everything else has been truly reverted."!!ChangeSorter methodsFor: 'changeSet menu' stamp: 'tk 10/26/1999 14:24'!goToChangeSetsProject	"Transport the user to a project which bears the selected changeSet as its current changeSet"	| aProject |	(aProject _ myChangeSet correspondingProject) 		ifNotNil:			[aProject enter: false revert: false saveForRevert: false]		ifNil:			[self inform: 'Has no project']! !!HandMorph methodsFor: 'world menu' stamp: 'tk 10/25/1999 19:38'!buildWorldMenu	"Build the meta menu for the world."	| menu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'previous project' target: owner action: #goBack.	menu add: 'jump to project...' action: #jumpToProject.	menu add: 'save for future revert' target: self world project 			action: #saveForRevert.	menu add: 'revert to saved copy' target: self world project action: #revert.	menu add: 'restore display' target: self world action: #restoreDisplay.	menu addLine.	menu add: 'open...' action: #openWindow.	menu add: 'windows & flaps...' action: #windowsDo.	menu add: 'changes...' action: #changesDo.	menu add: 'help...' action: #helpDo.	menu add: 'appearance...' action: #appearanceDo.	menu add: 'do...' target: Utilities action: #offerCommonRequests.	menu addLine.	menu add: 'new morph...' action: #newMorph.	menu add: 'authoring tools...' action: #scriptingDo.	menu add: 'playfield options...' action: #playfieldDo.	menu add: 'print PS to file...' action: #printWorldOnFile.	menu add: 'debug...' action: #debugDo.	menu addLine.	menu add: 'save' action: #saveSession.	menu add: 'save as...' action: #saveAs.	menu add: 'save and quit' action: #saveAndQuit.	menu add: 'quit' action: #quitSession.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'tk 10/26/1999 14:24'!openConstructionProject	| aSystemWindow |	self world addMorph: (aSystemWindow _ ProjectViewMorph newMorphicConstruction).	aSystemWindow model "the Project itself" 		enter: false revert: false saveForRevert: false! !!ImageSegment methodsFor: 'read/write segment' stamp: 'tk 10/26/1999 14:39'!localName	"Return the local file name for this segment."	^ fileName ifNil: [nil]		ifNotNil: [FileDirectory localNameFor: fileName]! !!ImageSegment methodsFor: 'read/write segment' stamp: 'tk 10/26/1999 13:07'!revert	"Pretend this segment was never brought in.  Check that it has a fileName.  Replace (using become:) all the original roots of a segment with segmentRootStubs.  Thus the original objects will be reclaimed, and the root stubs will remain to bring the segment back in if it is needed.	How to use revert:  In the project, choose 'save for reverting'.	ReEnter the project.  Make changes.	Either exit normally, and change will be kept, or		Choose 'Revert to saved version'."	fileName ifNil: [^ self].	(state = #inactive) | (state = #onFile) ifFalse: [^ self].	Cursor write showWhile: [		arrayOfRoots elementsForwardIdentityTo:			(arrayOfRoots collect: [:r | r rootStubInImageSegment: self]).		state _ #onFile.		segment _ nil.		endMarker _ nil]."Old version:	How to use revert:  In the project, execute (Project current projectParameters at: #frozen put: true)	Leave the project.  Check that the project went out to disk (it is gray in the Jump to Project list).	ReEnter the project.  Hear a plink as it comes in from disk.  Make a change.	Exit the project.  Choose 'Revert to previous version' in the dialog box.	Check that the project went out to disk (it is gray in the Jump to Project list).	ReEnter the project and see that it is in the original state."! !!ImageSegment class methodsFor: 'fileIn/Out' stamp: 'tk 10/27/1999 18:35'!reclaimObsoleteSegmentFiles  "ImageSegment reclaimObsoleteSegmentFiles"	"Delete segment files that can't be used after this image is saved.	Note that this is never necessary -- it just saves file space."	| segDir segFiles folderName byName exists |	folderName _ FileDirectory default class localNameFor: self folder.	(FileDirectory default includesKey: folderName) ifFalse: [^ self "don't create if absent"].	segDir _ self segmentDirectory.	segFiles _ (segDir fileNames select: [:fn | fn endsWith: '.seg']) asSet.	exists _ segFiles clone.	segFiles isEmpty ifTrue: [^ self].	byName _ Set new.	"Remove (save) every file owned by a segment in memory"	ImageSegment allInstancesDo: [:is | 		is localName ifNotNil: [			segFiles remove: is localName ifAbsent: [].			(exists includes: is localName) ifFalse: [				Transcript cr; show: 'Segment file not found: ', is localName].			byName add: is segmentName]].	"Of the segments we have seen, delete unclaimed the files."	segFiles do: [:fName | 		"Delete other file versions with same project name as one known to us"		(byName includes: (fName sansPeriodSuffix stemAndNumericSuffix first))			ifTrue: [segDir deleteFileNamed: fName]].! !!ImageSegmentRootStub methodsFor: 'fetch from disk' stamp: 'tk 10/24/1999 10:57'!xxxSegment	^ imageSegment! !!PasteUpMorph commentStamp: 'tk 10/26/1999 12:16' prior: 0!A morph whose submorphs comprise a paste-up of rectangular subparts which "show through".Facilities commonly needed on pages of graphical presentations and on simulation playfields, such as the painting of new objects, turtle trails, gradient fills, background paintings, parts-bin behavior, collision-detection, etc., are (or will be) provided.A World, the entire Smalltalk screen, is a PasteUpMorph.  A World responds true to isWorld.  Morph subclasses that have specialized menus (BookMorph) build them in the message addBookMenuItemsTo:hand:.  A PasteUpMorph that is a world, builds its menu in HandMorph buildWorldMenu.This class is young and still under construction, and a number of its (many) instance variables are not yet fully deployed.!!PasteUpMorph methodsFor: 'world state' stamp: 'tk 10/27/1999 18:28'!install	submorphs do: [:ss | ss owner == nil ifTrue: [ss privateOwner: self]].		"Transcript that was in outPointers and then got deleted."	self viewBox: Display boundingBox.	self handsDo: [:h | h initForEvents].	self installFlaps.	SystemWindow noteTopWindowIn: self.	self displayWorldSafely.! !!Project methodsFor: 'menu messages' stamp: 'tk 10/26/1999 14:25'!enter	"Enter the new project"	self enter: (CurrentProject parent == self) revert: false saveForRevert: false.! !!Project methodsFor: 'menu messages' stamp: 'tk 10/26/1999 12:55'!enter: returningFlag	"Install my ChangeSet, Transcript, and scheduled views as current globals. If returningFlag is true, we will return to the project from whence the current project was entered; don't change its previousProject link in this case."	| showZoom recorderOrNil same old |	self == CurrentProject ifTrue: [^ self].	"Check the guards"	guards ifNotNil:		[guards _ guards reject: [:obj | obj isNil].		guards do: [:obj | obj okayToEnterProject ifFalse: [^ self]]].	World isMorph ifTrue: [World triggerClosingScripts].	"Update the display depth and make a thumbnail of the current project"	CurrentProject displayDepth: Display depth.	old _ CurrentProject.		"for debugging"	old askIfSaveChanges ifTrue: [old makeThumbnail].		"May mark me awaitingARevert to the version on disk"	"Show the project transition.	Note: The project zoom is run in the context of the old project,		so that eventual errors can be handled accordingly"	displayDepth == nil ifTrue: [displayDepth _ Display depth].	Display newDepthNoRestore: displayDepth.	(showZoom _ self showZoom) ifTrue: [		self displayZoom: CurrentProject parent ~~ self].	(world isMorph and: [world hasProperty: #letTheMusicPlay])		ifTrue: [world removeProperty: #letTheMusicPlay]		ifFalse: [Smalltalk at: #ScorePlayer ifPresent: [:playerClass | 					playerClass allSubInstancesDo: [:player | player pause]]].	returningFlag		ifTrue: [nextProject _ CurrentProject]		ifFalse: [previousProject _ CurrentProject].	CurrentProject saveState.	(same _ CurrentProject topIsolated == self topIsolated) ifFalse: [		CurrentProject revoke].	CurrentProject _ self.	same ifFalse: [CurrentProject invoke].	Smalltalk newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Sensor flushKeyboard.	World isMorph ifTrue:		[recorderOrNil _ World pauseEventRecorder].	world isMorph		ifTrue:			[World _ world.  "Signifies Morphic"			world install.			(Preferences valueOfFlag: #projectsSentToDisk) ifTrue: [				self storeSomeSegment].			recorderOrNil ifNotNil: [recorderOrNil resumeIn: World].			world triggerOpeningScripts.			self spawnNewProcessAndTerminateOld: true]		ifFalse:			[World _ nil.  "Signifies MVC"			Smalltalk at: #ScheduledControllers put: world.			showZoom ifFalse: [ScheduledControllers restore].			ScheduledControllers searchForActiveController]! !!Project methodsFor: 'menu messages' stamp: 'tk 10/31/1999 15:48'!enter: returningFlag revert: revertFlag saveForRevert: saveForRevert	"Install my ChangeSet, Transcript, and scheduled views as current globals. If returningFlag is true, we will return to the project from whence the current project was entered; don't change its previousProject link in this case.	If saveForRevert is true, save the ImageSegment of the project being left.	If revertFlag is true, make stubs for the world of the project being left.	If revertWithoutAsking is true in the project being left, then always revert."	| showZoom recorderOrNil same old forceRevert response seg result |	self == CurrentProject ifTrue: [^ self].	"Check the guards"	guards ifNotNil:		[guards _ guards reject: [:obj | obj isNil].		guards do: [:obj | obj okayToEnterProject ifFalse: [^ self]]].	forceRevert _ false.	CurrentProject rawParameters 		ifNil: [revertFlag ifTrue: [^ self inform: 'nothing to revert to']]		ifNotNil: [saveForRevert ifFalse: [				forceRevert _ CurrentProject projectParameters 								at: #revertWithoutAsking ifAbsent: [false]]].	forceRevert not & revertFlag ifTrue: [		response _ SelectionMenu confirm: 'Are you sure you want to destroy this Project\ and revert to an older version?\\(From the parent project, click on this project''s thumbnail.)' withCRs			trueChoice: 'Revert to saved version' 			falseChoice: 'Cancel'.		response ifFalse: [^ self]].	revertFlag | forceRevert 		ifTrue: [seg _ CurrentProject projectParameters at: #revertToMe ifAbsent: [					^ self inform: 'nothing to revert to']]		ifFalse: [CurrentProject makeThumbnail].	World isMorph ifTrue: [World triggerClosingScripts].	"Update the display depth and make a thumbnail of the current project"	CurrentProject displayDepth: Display depth.	old _ CurrentProject.		"for later"	"Show the project transition.	Note: The project zoom is run in the context of the old project,		so that eventual errors can be handled accordingly"	displayDepth == nil ifTrue: [displayDepth _ Display depth].	Display newDepthNoRestore: displayDepth.	(showZoom _ self showZoom) ifTrue: [		self displayZoom: CurrentProject parent ~~ self].	(world isMorph and: [world hasProperty: #letTheMusicPlay])		ifTrue: [world removeProperty: #letTheMusicPlay]		ifFalse: [Smalltalk at: #ScorePlayer ifPresent: [:playerClass | 					playerClass allSubInstancesDo: [:player | player pause]]].	returningFlag		ifTrue: [nextProject _ CurrentProject]		ifFalse: [previousProject _ CurrentProject].	CurrentProject saveState.	(same _ CurrentProject topIsolated == self topIsolated) ifFalse: [		CurrentProject revoke].	CurrentProject _ self.	same ifFalse: [CurrentProject invoke].	Smalltalk newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Sensor flushKeyboard.	World isMorph ifTrue:		[recorderOrNil _ World pauseEventRecorder].	world isMorph		ifTrue:			[World _ world.  "Signifies Morphic"			world install.			(revertFlag | saveForRevert | forceRevert) ifFalse: [				(Preferences valueOfFlag: #projectsSentToDisk) ifTrue: [					self storeSomeSegment]].			recorderOrNil ifNotNil: [recorderOrNil resumeIn: World].			world triggerOpeningScripts]		ifFalse:			[World _ nil.  "Signifies MVC"			Smalltalk at: #ScheduledControllers put: world].	saveForRevert ifTrue: [		Smalltalk garbageCollect.	"let go of pointers"		old storeSegment.		result _ old world isInMemory 			ifTrue: ['Can''t seem to write the project.']			ifFalse: [old projectParameters at: #revertToMe put: 					old world xxxSegment clone].				'Project written.'].			"original is for coming back in and continuing."	revertFlag | forceRevert ifTrue: [		seg clone revert].	"non-cloned one is for reverting again later"	"Complete the enter: by launching a new process"	world isMorph		ifTrue:			[self spawnNewProcessAndTerminateOld: true]		ifFalse:			[showZoom ifFalse: [ScheduledControllers restore].			ScheduledControllers searchForActiveController]! !!Project methodsFor: 'menu messages' stamp: 'tk 10/26/1999 14:25'!exit	"Leave the current project and return to the project in which this one was created."	self isTopProject ifTrue: [^ PopUpMenu notify: 'Can''t exit the top project'].	parentProject enter: false revert: false saveForRevert: false.! !!Project methodsFor: 'file in/out' stamp: 'tk 10/26/1999 14:23'!revert	| |	"Exit this project and do not save it.  Warn user unless in dangerous projectRevertNoAsk mode.  Exit to the parent project.  Do a revert on a clone of the segment, to allow later reverts."	projectParameters ifNil: [^ self inform: 'nothing to revert to'].	parentProject enter: false revert: true saveForRevert: false.	"does not return!!"! !!Project methodsFor: 'file in/out' stamp: 'tk 10/26/1999 14:22'!saveForRevert	| |	"Exit to the parent project.  Do a GC.  Save the project in a segment.  Record the ImageSegment object as the revertToMe in Project parameters"	self isTopProject ifTrue: [^ PopUpMenu notify: 'Can''t exit the top project'].	parentProject enter: false revert: false saveForRevert: true.	"does not return!!"! !!Project methodsFor: 'file in/out' stamp: 'tk 10/26/1999 12:22'!storeSomeSegment	| cnt pList start proj |	"Try all projects to see if any is ready to go out.  Send at most three of them.  Previous one has to wait for a garbage collection before it can go out."	cnt _ 0.	pList _ Project allInstances.	start _ pList size atRandom.	"start in a random place"	start to: pList size + start do: [:ii | 		proj _ pList atWrap: ii.		proj storeSegment ifTrue: ["Yes, did send its morphs to the disk"			"self beep."			(PluckedSound pitch: 261.625*4 dur: 1 loudness: 0.1) play.			(cnt _ cnt + 1) >= 2 ifTrue: [				"(PluckedSound pitch: 261.625*2 dur: 0.25 loudness: 0.1) play."				^ self]]].	(PluckedSound pitch: 261.625*4 dur: 0.35 loudness: 0.1) play.	"high = none"! !!Project methodsFor: 'project parameters' stamp: 'tk 10/26/1999 13:55'!rawParameters	^ projectParameters! !!Project methodsFor: 'displaying' stamp: 'tk 10/26/1999 12:53'!showZoom	"Decide if user wants a zoom transition, and if there is enough memory to do it."	^ Preferences showProjectZoom and: [		"Only show zoom if there is room for the both displays plus a megabyte"		Smalltalk garbageCollectMost > 						(Display boundingBox area*displayDepth //8+1000000)]! !!Project class methodsFor: 'utilities' stamp: 'tk 10/26/1999 14:25'!advanceToNextProject	| nextProj |	(nextProj _ CurrentProject nextProject) ifNotNil:		 [nextProj enter: true revert: false saveForRevert: false]! !!Project class methodsFor: 'utilities' stamp: 'tk 10/26/1999 14:25'!jumpToSelection: selection	"Enter the project corresponding to this menu selection."	"Project jumpToProject"	| nBack prev |	selection ifNil: [^ self].	(selection beginsWith: '%back') ifTrue:		[nBack _ (selection copyFrom: 6 to: selection size) asNumber.		prev _ CurrentProject previousProject.		1 to: nBack-1 do:			[:i | prev ifNotNil: [prev _ prev previousProject]].		prev ifNotNil: [prev enter: true revert: false saveForRevert: false]].	selection = #parent ifTrue: [		CurrentProject parent enter: false revert: false saveForRevert: false.		^ self].	(Project named: selection) enter: false revert: false saveForRevert: false! !!Project class methodsFor: 'utilities' stamp: 'tk 10/26/1999 14:25'!returnToPreviousProject	"Return to the project from which this project was entered. Do nothing if the current project has no link to its previous project."	| prevProj |	prevProj _ CurrentProject previousProject.	prevProj ifNotNil: [prevProj enter: true revert: false saveForRevert: false].! !!ProjectController methodsFor: 'control activity' stamp: 'tk 10/26/1999 14:26'!redButtonActivity	| index |	view isCollapsed ifTrue: [^ super redButtonActivity].	(view insetDisplayBox containsPoint: Sensor cursorPoint)		ifFalse: [^ super redButtonActivity].	index _ (PopUpMenu labelArray: #('enter' 'jump to project...') lines: #()) 		startUpCenteredWithCaption: nil.	index = 0 ifTrue: [^ self].	"save size on enter for thumbnail on exit"	model setViewSize: view insetDisplayBox extent.	index = 1 ifTrue: [^ model enter: false revert: false saveForRevert: false].	index = 2 ifTrue: [Project jumpToProject. ^ self].! !!ProjectView class methodsFor: 'as yet unclassified' stamp: 'tk 10/26/1999 14:26'!openAndEnter: aProject 	"Answer an instance of me for the argument, aProject. It is created on the	display screen."	| topView |	topView _ self new model: aProject.	topView minimumSize: 50 @ 30.	topView borderWidth: 2.	topView window: (RealEstateAgent initialFrameFor: topView).	ScheduledControllers schedulePassive: topView controller.	aProject enter: false revert: false saveForRevert: false! !!ProjectViewMorph methodsFor: 'as yet unclassified' stamp: 'tk 10/26/1999 14:26'!enter	"Enter my project."	(owner isKindOf: SystemWindow)		ifTrue: [project setViewSize: self extent].	self showBorderAs: Color gray.	project enter: false revert: false saveForRevert: false.! !