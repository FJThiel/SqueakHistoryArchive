'From Squeakland 3.8.5976 of 25 August 2004 [latest update: #348] on 25 November 2004 at 3:37:34 pm'!"Change Set:		FontFixupSpeedup-nkDate:			8 November 2004Author:			Ned KonzThis CS makes loading of projects only pay the price for font fixup if they actually had missing fonts.On my system, a particularly complicated project with 278 ScriptEditorMorphs took the following time to load and enter:        load   enterbefore  32       14after    29       3This is important because on entry there is no indication that anything is actually taking place, and so it looks dead for the 14 seconds.(shouldn't we add some kind of indication that it's still working?)"!Notification subclass: #FontSubstitutionDuringLoading	instanceVariableNames: 'familyName pixelSize'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support'!!FontSubstitutionDuringLoading commentStamp: '<historical>' prior: 0!signaled by font loading code when reading a DiskProxy that calls for a missing font.!!FontSubstitutionDuringLoading methodsFor: 'accessing' stamp: 'nk 11/8/2004 15:04'!defaultAction	familyName ifNil: [ familyName := 'NoName' ].	pixelSize ifNil: [ pixelSize := 12 ].	^((familyName beginsWith: 'Comic')		ifTrue: [ TextStyle named: (Preferences standardEToysFont familyName) ]		ifFalse: [ TextStyle default ]) fontOfSize: pixelSize.! !!FontSubstitutionDuringLoading methodsFor: 'accessing' stamp: 'nk 11/8/2004 15:01'!familyName	"Answer the value of familyName"	^ familyName! !!FontSubstitutionDuringLoading methodsFor: 'accessing' stamp: 'nk 11/8/2004 15:01'!familyName: anObject	"Set the value of familyName"	familyName _ anObject! !!FontSubstitutionDuringLoading methodsFor: 'accessing' stamp: 'nk 11/8/2004 15:01'!pixelSize	"Answer the value of pixelSize"	^ pixelSize! !!FontSubstitutionDuringLoading methodsFor: 'accessing' stamp: 'nk 11/8/2004 15:01'!pixelSize: anObject	"Set the value of pixelSize"	pixelSize _ anObject! !!FontSubstitutionDuringLoading methodsFor: 'accessing' stamp: 'nk 11/8/2004 16:55'!printOn: aStream	super printOn: aStream.	aStream nextPut: $(;		nextPutAll: familyName;		nextPut: $-;		print: pixelSize;		nextPut: $).! !!FontSubstitutionDuringLoading class methodsFor: 'as yet unclassified' stamp: 'nk 11/8/2004 15:07'!forFamilyName: aName pixelSize: aSize	^(self new)		familyName: aName;		pixelSize: aSize;		yourself.! !!Project methodsFor: 'menu messages' stamp: 'ar 11/25/2004 15:36'!finalEnterActions	"Perform the final actions necessary as the receiver project is entered"	| navigator armsLengthCmd navType thingsToUnhibernate fixBlock |	self projectParameters 		at: #projectsToBeDeleted 		ifPresent: [ :projectsToBeDeleted |			self removeParameter: #projectsToBeDeleted.			projectsToBeDeleted do: [ :each | 				Project deletingProject: each.				each removeChangeSetIfPossible]].	thingsToUnhibernate _ world valueOfProperty: #thingsToUnhibernate ifAbsent: [#()].	(thingsToUnhibernate anySatisfy:[:each| 		each isMorph and:[each hasProperty: #needsLayoutFixed]]) 			ifTrue:[fixBlock := self displayFontProgress].	thingsToUnhibernate do: [:each | each unhibernate].	world removeProperty: #thingsToUnhibernate.	fixBlock ifNotNil:[		fixBlock value.		world fullRepaintNeeded.	].	navType _ ProjectNavigationMorph preferredNavigator.	armsLengthCmd _ self parameterAt: #armsLengthCmd ifAbsent: [nil].	navigator _ world findA: navType.	(Preferences classicNavigatorEnabled and: [Preferences showProjectNavigator and: [navigator isNil]]) ifTrue:		[(navigator _ navType new)			bottomLeft: world bottomLeft;			openInWorld: world].	navigator notNil & armsLengthCmd notNil ifTrue:		[navigator color: Color lightBlue].	armsLengthCmd notNil ifTrue:		[Preferences showFlapsWhenPublishing			ifFalse:				[self flapsSuppressed: true.				navigator ifNotNil:	[navigator visible: false]].		armsLengthCmd openInWorld: world].	Smalltalk isMorphic ifTrue:		[world reformulateUpdatingMenus.		world presenter positionStandardPlayer].	WorldState addDeferredUIMessage: [self startResourceLoading].! !!ProjectLoading class methodsFor: 'as yet unclassified' stamp: 'nk 11/8/2004 17:19'!openName: aFileName stream: preStream fromDirectory: aDirectoryOrNil withProjectView: existingView	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world."	 	| morphOrList proj trusted localDir projStream archive mgr projectsToBeDeleted baseChangeSet enterRestricted substituteFont numberOfFontSubstitutes exceptions |	(preStream isNil or: [preStream size = 0]) ifTrue: [		ProgressNotification  signal: '9999 about to enter project'.		"the hard part is over"		^self inform: 'It looks like a problem occurred whilegetting this project. It may be temporary,so you may want to try again,' translated	].	ProgressNotification signal: '2:fileSizeDetermined ',preStream size printString.	preStream isZipArchive 		ifTrue:[	archive _ ZipArchive new readFrom: preStream.				projStream _ self projectStreamFromArchive: archive]		ifFalse:[projStream _ preStream].	trusted _ SecurityManager default positionToSecureContentsOf: projStream.	trusted ifFalse:		[enterRestricted := (preStream isTypeHTTP or: [aFileName isNil])			ifTrue: [Preferences securityChecksEnabled]			ifFalse: [Preferences standaloneSecurityChecksEnabled].		enterRestricted 			ifTrue: [SecurityManager default enterRestrictedMode				ifFalse:					[preStream close.					^ self]]].	localDir _ Project squeakletDirectory.	aFileName ifNotNil: [		(aDirectoryOrNil isNil or: [aDirectoryOrNil pathName ~= localDir pathName]) ifTrue: [			localDir deleteFileNamed: aFileName.			(localDir fileNamed: aFileName) binary				nextPutAll: preStream contents;				close.		].	].	morphOrList _ projStream asUnZippedStream.	preStream sleep.		"if ftp, let the connection close"	ProgressNotification  signal: '3:unzipped'.	ResourceCollector current: ResourceCollector new.	baseChangeSet _ ChangeSet current.	self useTempChangeSet.		"named zzTemp"	"The actual reading happens here"	substituteFont := Preferences standardEToysFont copy.	numberOfFontSubstitutes := 0.	exceptions := Set new.	[[morphOrList _ morphOrList fileInObjectAndCode]		on: FontSubstitutionDuringLoading do: [ :ex | 				exceptions add: ex.				numberOfFontSubstitutes := numberOfFontSubstitutes + 1.				ex resume: substituteFont ]]			ensure: [ ChangeSet  newChanges: baseChangeSet].	mgr _ ResourceManager new initializeFrom: ResourceCollector current.	mgr fixJISX0208Resource.	mgr registerUnloadedResources.	archive ifNotNil:[mgr preLoadFromArchive: archive cacheName: aFileName].	(preStream respondsTo: #close) ifTrue:[preStream close].	ResourceCollector current: nil.	ProgressNotification  signal: '4:filedIn'.	ProgressNotification  signal: '9999 about to enter project'.		"the hard part is over"	(morphOrList isKindOf: ImageSegment) ifTrue: [		proj _ morphOrList arrayOfRoots 			detect: [:mm | mm isKindOf: Project] 			ifNone: [^self inform: 'No project found in this file'].		proj resourceManager: mgr.		"proj versionFrom: preStream."		proj lastDirectory: aDirectoryOrNil.		CurrentProjectRefactoring currentBeParentTo: proj.		projectsToBeDeleted _ OrderedCollection new.		existingView ifNil: [			Smalltalk isMorphic ifTrue: [				proj createViewIfAppropriate.			] ifFalse: [				ChangeSorter allChangeSets add: proj changeSet.				ProjectView openAndEnter: proj.				"Note: in MVC we get no further than the above"			].		] ifNotNil: [			(existingView project isKindOf: DiskProxy) ifFalse: [				existingView project changeSet name: ChangeSet defaultName.				projectsToBeDeleted add: existingView project.			].			(existingView owner isSystemWindow) ifTrue: [				existingView owner model: proj			].			existingView project: proj.		].		ChangeSorter allChangeSets add: proj changeSet.		Project current projectParameters 			at: #deleteWhenEnteringNewProject 			ifPresent: [ :ignored | 				projectsToBeDeleted add: Project current.				Project current removeParameter: #deleteWhenEnteringNewProject.			].		projectsToBeDeleted isEmpty ifFalse: [			proj projectParameters 				at: #projectsToBeDeleted 				put: projectsToBeDeleted.		].			proj world ifNotNilDo: [ :world |			numberOfFontSubstitutes > 0 ifTrue: [				morphOrList arrayOfRoots do: [ :m |					m isMorph ifTrue: [						(m isStringMorph and: [ m font == substituteFont ])							ifTrue: [ m fitContents  ]							ifFalse: [ (m isTextMorph								and: [ m textStyle fontArray includes: substituteFont ]) 									ifTrue: [ m fit ]].						(m isKindOf: ScriptEditorMorph)							ifTrue: [ m setProperty: #needsLayoutFixed toValue: true ] ]]].			(world valueOfProperty: #soundAdditions) ifNotNilDo:				[:additions | SampledSound assimilateSoundsFrom: additions]].		^ ProjectEntryNotification signal: proj	].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList _ morphOrList contentsMorph	].	(morphOrList isKindOf: PasteUpMorph) ifFalse:		[^ self inform: 'This is not a PasteUpMorph or exported Project.' translated].	(Project newMorphicOn: morphOrList) enter! !!ScriptEditorMorph methodsFor: 'other' stamp: 'ar 11/25/2004 15:20'!unhibernate	"I have been loaded as part of an ImageSegment.	Make sure that I am fixed up properly."	| fixMe |	(fixMe := self valueOfProperty: #needsLayoutFixed ifAbsent: [ false ])		ifTrue: [self removeProperty: #needsLayoutFixed ].	self topEditor == self		ifFalse: [^ self]. "Part of a compound test"	self updateHeader.	fixMe ifTrue: [ self fixLayout. self removeProperty: #needsLayoutFixed ].	"Recreate my tiles from my method if i have new universal tiles."	self world		ifNil: [(playerScripted isNil					or: [playerScripted isUniversalTiles not])				ifTrue: [^ self]]		ifNotNil: [Preferences universalTiles				ifFalse: [^ self]].	self insertUniversalTiles.	self showingMethodPane: false! !!StrikeFont class methodsFor: 'accessing' stamp: 'ar 11/25/2004 15:19'!familyName: aName size: aSize	"Answer a font (or the default font if the name is unknown) in the specified size."	| style |	style := TextStyle named: aName asSymbol.	style ifNil: [^(FontSubstitutionDuringLoading forFamilyName: aName pixelSize: aSize)			signal: 'missing font' ].	^style fontOfSize: aSize! !!TileLikeMorph methodsFor: 'user interface' stamp: 'nk 11/8/2004 16:15'!fixLayout	"Having just been loaded from a project, do repairs as needed."	self minCellSize: 0 @ (Preferences standardEToysFont height rounded + 10).	self allMorphsDo: [:m |		(m respondsTo: #fixLayout)			ifTrue: [ m ~~ self ifTrue: [ m fixLayout ] ]			ifFalse: [ m layoutChanged ] ].	self layoutChanged; fullBounds! !!TileMorph methodsFor: 'as yet unclassified' stamp: 'nk 11/8/2004 16:15'!fixLayout	"Having just been loaded from a project, do repairs as needed."	self allMorphsDo: [:m | (m respondsTo: #fixLayout)			ifTrue: [ m ~~ self ifTrue: [ m fixLayout ] ]			ifFalse: [ m layoutChanged ] ].	self layoutChanged; fullBounds! !TileMorph removeSelector: #unhibernate!TileLikeMorph removeSelector: #unhibernate!