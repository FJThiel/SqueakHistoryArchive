'From Squeak2.6 of 13 October 1999 [latest update: #1682] on 1 December 1999 at 3:03:19 pm'!"Change Set:		FFI-VMPrepsDate:			29 November 1999Author:			Andreas RaabVM modifications necessary for the foreign function interface. Exports a number of new classes, most noticably LargeNegativeInteger. Also provides a number of useful support functions, such as:	#signed32BitValueOf: oop		Return the signed value of a 32bit integer object	#signed32BitIntegerFor: intValue		Create an ST object for a signed 32bit integer	#includesBehavior: classOop ThatOf: superClassOop		Return true if 'classOop includesBehavior: superClassOop'	#primitiveMethod		Return the method in which the pluggable primitive was found	#isInMemory: address		Return true if the given address is inside Smalltalk memory (heh heh - you will *never*ever* pass a pointer to 'inside Smalltalk' unless I deliberately allow it for some reason).Also, the classes ExternalStructure, ExternalData, ExternalFunction, ExternalLibrary, and ExternalAddress are now exported. Note that these classes are not contained in this change set - these classes (from Smalltalk specialObjectsArray) will just contain nil after the change set is installed. Which is okay until we put out the actual FFI stuff.NOTE TO VM IMPLEMENTORS: The changes require two new functions in the support code which should go into sqXYZExternalPrims.c since they do basically what the pluggable primitive code does:int ioLoadModuleOfLength(int moduleNameIndex, int moduleNameLength);Loads and returns an opaque handle for the module with the given name. If moduleNameLength is Null then it is assumed that the module is the VM. primitiveFail() if anything goes wrong. The returned value will never actually be used except in a call to the following function (so it should be quite safe to return Null for the VM handle). Note that this function will *not* require any exported symbol or startup code in the loaded module (that's the basic difference to the pluggable primitive support which requires the module to export setInterpreter() and also to return true when this guy is called on load).int ioLoadSymbolOfLengthFromModule(int functionNameIndex, int functionNameLength, int moduleHandle);Loads and returns the address of the given function from the module identified by the given handle. If moduleHandle is Null it is assumed that the symbol is looked up in the VM itself. primitiveFail() OR return NULL if the symbol can't be found."!ExternalData rename: #MacExternalData!Object subclass: #ObjectMemory	instanceVariableNames: 'memory youngStart endOfMemory memoryLimit nilObj falseObj trueObj specialObjectsOop rootTable rootTableCount child field parentField freeBlock lastHash allocationCount lowSpaceThreshold signalLowSpace compStart compEnd fwdTableNext fwdTableLast remapBuffer remapBufferCount allocationsBetweenGCs tenuringThreshold statFullGCs statFullGCMSecs statIncrGCs statIncrGCMSecs statTenures statRootTableOverflows freeContexts freeLargeContexts interruptCheckCounter displayBits '	classVariableNames: 'AllButHashBits AllButMarkBit AllButMarkBitAndTypeMask AllButRootBit AllButTypeMask BaseHeaderSize BlockContextProto CharacterTable ClassArray ClassBitmap ClassBlockContext ClassByteArray ClassCharacter ClassCompiledMethod ClassExternalAddress ClassExternalData ClassExternalFunction ClassExternalLibrary ClassExternalStructure ClassFloat ClassInteger ClassLargeNegativeInteger ClassLargePositiveInteger ClassMessage ClassMethodContext ClassPoint ClassProcess ClassPseudoContext ClassSemaphore ClassString ClassTranslatedMethod CompactClassMask CompactClasses ConstMinusOne ConstOne ConstTwo ConstZero CtxtTempFrameStart DoAssertionChecks Done ExternalObjectsArray FalseObject FloatProto GCTopMarker HashBits HashBitsOffset HeaderTypeClass HeaderTypeFree HeaderTypeGC HeaderTypeShort HeaderTypeSizeAndClass LargeContextBit LargeContextSize MarkBit MethodContextProto MinimumForwardTableBytes NilContext NilObject RemapBufferSize RootBit RootTableSize SchedulerAssociation SelectorCannotInterpret SelectorCannotReturn SelectorDoesNotUnderstand SelectorMustBeBoolean SizeMask SmallContextSize SpecialSelectors StackStart StartField StartObj TheDisplay TheFinalizationSemaphore TheInputSemaphore TheInterruptSemaphore TheLowSpaceSemaphore TheTimerSemaphore TrueObject TypeMask Upward '	poolDictionaries: ''	category: 'Squeak-Interpreter'!!InterpreterProxy methodsFor: 'object access' stamp: 'ar 11/28/1999 17:43'!primitiveMethod	"Return the method an external primitive was defined in"	^method! !!InterpreterProxy methodsFor: 'testing' stamp: 'ar 11/17/1999 22:04'!includesBehavior: aClass ThatOf: aSuperclass	^aClass includesBehavior: aSuperclass! !!InterpreterProxy methodsFor: 'converting' stamp: 'ar 11/29/1999 22:01'!signed32BitIntegerFor: integerValue	integerValue isInteger ifFalse:[self error:'Not an Integer object'].	^integerValue! !!InterpreterProxy methodsFor: 'converting' stamp: 'ar 11/29/1999 22:00'!signed32BitValueOf: oop	oop isInteger ifFalse:[self error:'Not an integer object'].	^oop! !!InterpreterProxy methodsFor: 'special classes' stamp: 'ar 11/19/1999 14:29'!classLargeNegativeInteger	^LargeNegativeInteger! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/29/1999 22:03'!classExternalAddress	^Smalltalk at: #ExternalAddress ifAbsent:[nil]! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/29/1999 22:03'!classExternalData	^Smalltalk at: #ExternalData ifAbsent:[nil]! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/29/1999 22:03'!classExternalFunction	^Smalltalk at: #ExternalFunction ifAbsent:[nil]! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/29/1999 22:04'!classExternalLibrary	^Smalltalk at: #ExternalLibrary ifAbsent:[nil]! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/29/1999 22:04'!classExternalStructure	^Smalltalk at: #ExternalStructure ifAbsent:[nil]! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/28/1999 18:33'!ioLoadModule: moduleNameIndex OfLength: moduleLength	"Dummy - provided by support code"	^0! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/28/1999 18:34'!ioLoadSymbol: functionNameIndex OfLength: functionLength FromModule: moduleHandle	"Dummy - provided by support code"	^0! !!InterpreterProxy methodsFor: 'FFI support' stamp: 'ar 11/28/1999 19:04'!isInMemory: address	"Return true if the given address is in ST object memory"	^true! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'ar 11/29/1999 22:05'!squeakVirtualMachineFile^'#include <math.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <time.h>#include "sqVirtualMachine.h"/*** Function prototypes ***//* InterpreterProxy methodsFor: ''stack access'' */int pop(int nItems);int popthenPush(int nItems, int oop);int push(int object);int pushBool(int trueOrFalse);int pushFloat(double f);int pushInteger(int integerValue);double stackFloatValue(int offset);int stackIntegerValue(int offset);int stackObjectValue(int offset);int stackValue(int offset);/*** variables ***/extern int (*compilerHooks[])();extern int setCompilerInitialized(int flagValue);/* InterpreterProxy methodsFor: ''object access'' */int argumentCountOf(int methodPointer);void * arrayValueOf(int oop);int byteSizeOf(int oop);void * fetchArrayofObject(int fieldIndex, int objectPointer);int fetchClassOf(int oop);double fetchFloatofObject(int fieldIndex, int objectPointer);int fetchIntegerofObject(int fieldIndex, int objectPointer);int fetchPointerofObject(int index, int oop);int fetchWordofObject(int fieldIndex, int oop);void * firstFixedField(int oop);void * firstIndexableField(int oop);int literalofMethod(int offset, int methodPointer);int literalCountOf(int methodPointer);int methodArgumentCount(void);int methodPrimitiveIndex(void);int primitiveMethod(void);int primitiveIndexOf(int methodPointer);int sizeOfSTArrayFromCPrimitive(void *cPtr);int slotSizeOf(int oop);int stObjectat(int array, int index);int stObjectatput(int array, int index, int value);int stSizeOf(int oop);int storeIntegerofObjectwithValue(int index, int oop, int integer);int storePointerofObjectwithValue(int index, int oop, int valuePointer);/* InterpreterProxy methodsFor: ''testing'' */int isKindOf(int oop, char *aString);int isMemberOf(int oop, char *aString);int isBytes(int oop);int isFloatObject(int oop);int isIndexable(int oop);int isIntegerObject(int objectPointer);int isIntegerValue(int intValue);int isPointers(int oop);int isWeak(int oop);int isWords(int oop);int isWordsOrBytes(int oop);int includesBehaviorThatOf(int aClass, int aSuperClass);/* InterpreterProxy methodsFor: ''converting'' */int booleanValueOf(int obj);int checkedIntegerValueOf(int intOop);int floatObjectOf(double aFloat);double floatValueOf(int oop);int integerObjectOf(int value);int integerValueOf(int oop);int positive32BitIntegerFor(int integerValue);int positive32BitValueOf(int oop);int signed32BitIntegerFor(int integerValue);int signed32BitValueOf(int oop);/* InterpreterProxy methodsFor: ''special objects'' */int characterTable(void);int displayObject(void);int falseObject(void);int nilObject(void);int trueObject(void);/* InterpreterProxy methodsFor: ''special classes'' */int classArray(void);int classBitmap(void);int classByteArray(void);int classCharacter(void);int classFloat(void);int classLargePositiveInteger(void);int classLargeNegativeInteger(void);int classPoint(void);int classSemaphore(void);int classSmallInteger(void);int classString(void);/* InterpreterProxy methodsFor: ''instance creation'' */int clone(int oop);int instantiateClassindexableSize(int classPointer, int size);int makePointwithxValueyValue(int xValue, int yValue);int popRemappableOop(void);int pushRemappableOop(int oop);/* InterpreterProxy methodsFor: ''other'' */int becomewith(int array1, int array2);int byteSwapped(int w);int failed(void);int fullDisplayUpdate(void);int fullGC(void);int incrementalGC(void);int primitiveFail(void);int showDisplayBitsLeftTopRightBottom(int aForm, int l, int t, int r, int b);int signalSemaphoreWithIndex(int semaIndex);int success(int aBoolean);int superclassOf(int classPointer);/* InterpreterProxy methodsFor: ''BitBlt support'' */int loadBitBltFrom(int bbOop);int copyBits(void);int copyBitsFromtoat(int leftX, int rightX, int yValue);/* InterpreterProxy methodsFor: ''FFI support'' */int classExternalAddress(void);int classExternalData(void);int classExternalFunction(void);int classExternalLibrary(void);int classExternalStructure(void);int ioLoadModuleOfLength(int moduleNameIndex, int moduleNameLength);int ioLoadSymbolOfLengthFromModule(int functionNameIndex, int functionNameLength, int moduleHandle);int isInMemory(int address);struct VirtualMachine *VM = NULL;static int majorVersion(void) {	return VM_PROXY_MAJOR;}static int minorVersion(void) {	return VM_PROXY_MINOR;}static CompilerHook *compilerHookVector(void) {  return compilerHooks;}struct VirtualMachine* sqGetInterpreterProxy(void){	if(VM) return VM;	VM = (struct VirtualMachine *) calloc(1, sizeof(VirtualMachine));	/* Initialize Function pointers */	VM->majorVersion = majorVersion;	VM->minorVersion = minorVersion;	/* InterpreterProxy methodsFor: ''stack access'' */	VM->pop = pop;	VM->popthenPush = popthenPush;	VM->push = push;	VM->pushBool = pushBool;	VM->pushFloat = pushFloat;	VM->pushInteger = pushInteger;	VM->stackFloatValue = stackFloatValue;	VM->stackIntegerValue = stackIntegerValue;	VM->stackObjectValue = stackObjectValue;	VM->stackValue = stackValue;		/* InterpreterProxy methodsFor: ''object access'' */	VM->argumentCountOf = argumentCountOf;	VM->arrayValueOf = arrayValueOf;	VM->byteSizeOf = byteSizeOf;	VM->fetchArrayofObject = fetchArrayofObject;	VM->fetchClassOf = fetchClassOf;	VM->fetchFloatofObject = fetchFloatofObject;	VM->fetchIntegerofObject = fetchIntegerofObject;	VM->fetchPointerofObject = fetchPointerofObject;	VM->fetchWordofObject = fetchWordofObject;	VM->firstFixedField = firstFixedField;	VM->firstIndexableField = firstIndexableField;	VM->literalofMethod = literalofMethod;	VM->literalCountOf = literalCountOf;	VM->methodArgumentCount = methodArgumentCount;	VM->methodPrimitiveIndex = methodPrimitiveIndex;	VM->primitiveIndexOf = primitiveIndexOf;	VM->primitiveMethod = primitiveMethod;	VM->sizeOfSTArrayFromCPrimitive = sizeOfSTArrayFromCPrimitive;	VM->slotSizeOf = slotSizeOf;	VM->stObjectat = stObjectat;	VM->stObjectatput = stObjectatput;	VM->stSizeOf = stSizeOf;	VM->storeIntegerofObjectwithValue = storeIntegerofObjectwithValue;	VM->storePointerofObjectwithValue = storePointerofObjectwithValue;		/* InterpreterProxy methodsFor: ''testing'' */	VM->isKindOf = isKindOf;	VM->isMemberOf = isMemberOf;	VM->isBytes = isBytes;	VM->isFloatObject = isFloatObject;	VM->isIndexable = isIndexable;	VM->isIntegerObject = isIntegerObject;	VM->isIntegerValue = isIntegerValue;	VM->isPointers = isPointers;	VM->isWeak = isWeak;	VM->isWords = isWords;	VM->isWordsOrBytes = isWordsOrBytes;	VM->includesBehaviorThatOf = includesBehaviorThatOf;		/* InterpreterProxy methodsFor: ''converting'' */	VM->booleanValueOf = booleanValueOf;	VM->checkedIntegerValueOf = checkedIntegerValueOf;	VM->floatObjectOf = floatObjectOf;	VM->floatValueOf = floatValueOf;	VM->integerObjectOf = integerObjectOf;	VM->integerValueOf = integerValueOf;	VM->positive32BitIntegerFor = positive32BitIntegerFor;	VM->positive32BitValueOf = positive32BitValueOf;	VM->signed32BitIntegerFor = signed32BitIntegerFor;	VM->signed32BitValueOf = signed32BitValueOf;	/* InterpreterProxy methodsFor: ''special objects'' */	VM->characterTable = characterTable;	VM->displayObject = displayObject;	VM->falseObject = falseObject;	VM->nilObject = nilObject;	VM->trueObject = trueObject;		/* InterpreterProxy methodsFor: ''special classes'' */	VM->classArray = classArray;	VM->classBitmap = classBitmap;	VM->classByteArray = classByteArray;	VM->classCharacter = classCharacter;	VM->classFloat = classFloat;	VM->classLargePositiveInteger = classLargePositiveInteger;	VM->classLargeNegativeInteger = classLargeNegativeInteger;	VM->classPoint = classPoint;	VM->classSemaphore = classSemaphore;	VM->classSmallInteger = classSmallInteger;	VM->classString = classString;		/* InterpreterProxy methodsFor: ''instance creation'' */	VM->clone = clone;	VM->instantiateClassindexableSize = instantiateClassindexableSize;	VM->makePointwithxValueyValue = makePointwithxValueyValue;	VM->popRemappableOop = popRemappableOop;	VM->pushRemappableOop = pushRemappableOop;		/* InterpreterProxy methodsFor: ''other'' */	VM->becomewith = becomewith;	VM->byteSwapped = byteSwapped;	VM->failed = failed;	VM->fullDisplayUpdate = fullDisplayUpdate;	VM->fullGC = fullGC;	VM->incrementalGC = incrementalGC;	VM->primitiveFail = primitiveFail;	VM->showDisplayBitsLeftTopRightBottom = showDisplayBitsLeftTopRightBottom;	VM->signalSemaphoreWithIndex = signalSemaphoreWithIndex;	VM->success = success;	VM->superclassOf = superclassOf;		VM->compilerHookVector= compilerHookVector;	VM->setCompilerInitialized= setCompilerInitialized;	/* InterpreterProxy methodsFor: ''BitBlt support'' */	VM->loadBitBltFrom = loadBitBltFrom;	VM->copyBits = copyBits;	VM->copyBitsFromtoat = copyBitsFromtoat;	/* InterpreterProxy methodsFor: ''FFI support'' */	VM->classExternalAddress = classExternalAddress;	VM->classExternalData = classExternalData;	VM->classExternalFunction = classExternalFunction;	VM->classExternalLibrary = classExternalLibrary;	VM->classExternalStructure = classExternalStructure;	VM->ioLoadModuleOfLength = ioLoadModuleOfLength;	VM->ioLoadSymbolOfLengthFromModule = ioLoadSymbolOfLengthFromModule;	VM->isInMemory = isInMemory;	return VM;}'! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'ar 11/29/1999 22:05'!squeakVirtualMachineHeaderFile^ '#ifndef _SqueakVM_H#define _SqueakVM_H/* Increment the following number if you change the order of   functions listed or if you remove functions */#define VM_PROXY_MAJOR 1/* Increment the following number if you add functions at the end */#define VM_PROXY_MINOR 3typedef int (*CompilerHook)();struct VirtualMachine* sqGetInterpreterProxy(void);typedef struct VirtualMachine {	int (*minorVersion) (void);	int (*majorVersion) (void);	/* InterpreterProxy methodsFor: ''stack access'' */	int (*pop)(int nItems);	int (*popthenPush)(int nItems, int oop);	int (*push)(int object);	int (*pushBool)(int trueOrFalse);	int (*pushFloat)(double f);	int (*pushInteger)(int integerValue);	double (*stackFloatValue)(int offset);	int (*stackIntegerValue)(int offset);	int (*stackObjectValue)(int offset);	int (*stackValue)(int offset);		/* InterpreterProxy methodsFor: ''object access'' */	int (*argumentCountOf)(int methodPointer);	void * (*arrayValueOf)(int oop);	int (*byteSizeOf)(int oop);	void * (*fetchArrayofObject)(int fieldIndex, int objectPointer);	int (*fetchClassOf)(int oop);	double (*fetchFloatofObject)(int fieldIndex, int objectPointer);	int (*fetchIntegerofObject)(int fieldIndex, int objectPointer);	int (*fetchPointerofObject)(int index, int oop);	int (*fetchWordofObject)(int fieldIndex, int oop);	void * (*firstFixedField)(int oop);	void * (*firstIndexableField)(int oop);	int (*literalofMethod)(int offset, int methodPointer);	int (*literalCountOf)(int methodPointer);	int (*methodArgumentCount)(void);	int (*methodPrimitiveIndex)(void);	int (*primitiveIndexOf)(int methodPointer);	int (*sizeOfSTArrayFromCPrimitive)(void *cPtr);	int (*slotSizeOf)(int oop);	int (*stObjectat)(int array, int index);	int (*stObjectatput)(int array, int index, int value);	int (*stSizeOf)(int oop);	int (*storeIntegerofObjectwithValue)(int index, int oop, int integer);	int (*storePointerofObjectwithValue)(int index, int oop, int valuePointer);		/* InterpreterProxy methodsFor: ''testing'' */	int (*isKindOf)(int oop, char *aString);	int (*isMemberOf)(int oop, char *aString);	int (*isBytes)(int oop);	int (*isFloatObject)(int oop);	int (*isIndexable)(int oop);	int (*isIntegerObject)(int objectPointer);	int (*isIntegerValue)(int intValue);	int (*isPointers)(int oop);	int (*isWeak)(int oop);	int (*isWords)(int oop);	int (*isWordsOrBytes)(int oop);		/* InterpreterProxy methodsFor: ''converting'' */	int (*booleanValueOf)(int obj);	int (*checkedIntegerValueOf)(int intOop);	int (*floatObjectOf)(double aFloat);	double (*floatValueOf)(int oop);	int (*integerObjectOf)(int value);	int (*integerValueOf)(int oop);	int (*positive32BitIntegerFor)(int integerValue);	int (*positive32BitValueOf)(int oop);		/* InterpreterProxy methodsFor: ''special objects'' */	int (*characterTable)(void);	int (*displayObject)(void);	int (*falseObject)(void);	int (*nilObject)(void);	int (*trueObject)(void);		/* InterpreterProxy methodsFor: ''special classes'' */	int (*classArray)(void);	int (*classBitmap)(void);	int (*classByteArray)(void);	int (*classCharacter)(void);	int (*classFloat)(void);	int (*classLargePositiveInteger)(void);	int (*classPoint)(void);	int (*classSemaphore)(void);	int (*classSmallInteger)(void);	int (*classString)(void);		/* InterpreterProxy methodsFor: ''instance creation'' */	int (*clone)(int oop);	int (*instantiateClassindexableSize)(int classPointer, int size);	int (*makePointwithxValueyValue)(int xValue, int yValue);	int (*popRemappableOop)(void);	int (*pushRemappableOop)(int oop);		/* InterpreterProxy methodsFor: ''other'' */	int (*becomewith)(int array1, int array2);	int (*byteSwapped)(int w);	int (*failed)(void);	int (*fullDisplayUpdate)(void);	int (*fullGC)(void);	int (*incrementalGC)(void);	int (*primitiveFail)(void);	int (*showDisplayBitsLeftTopRightBottom)(int aForm, int l, int t, int r, int b);	int (*signalSemaphoreWithIndex)(int semaIndex);	int (*success)(int aBoolean);	int (*superclassOf)(int classPointer);		/* InterpreterProxy methodsFor: ''compiler'' */	CompilerHook *(*compilerHookVector)(void);	int (*setCompilerInitialized)(int initFlag);	/* InterpreterProxy methodsFor: ''BitBlt support'' */	int (*loadBitBltFrom)(int bbOop);	int (*copyBits)(void);	int (*copyBitsFromtoat)(int leftX, int rightX, int yValue);	/* New for proxy version 1.3 */	int (*classLargeNegativeInteger)(void);	int (*signed32BitIntegerFor)(int integerValue);	int (*signed32BitValueOf)(int oop);	int (*includesBehaviorThatOf)(int aClass, int aSuperClass);	int (*primitiveMethod) (void);	/* InterpreterProxy methodsFor: ''FFI support'' */	int (*classExternalAddress)(void);	int (*classExternalData)(void);	int (*classExternalFunction)(void);	int (*classExternalLibrary)(void);	int (*classExternalStructure)(void);	int (*ioLoadModuleOfLength)(int modIndex, int modLength);	int (*ioLoadSymbolOfLengthFromModule)(int fnIndex, int fnLength, int handle);	int (*isInMemory)(int address);} VirtualMachine;#endif /* _SqueakVM_H */'! !!ObjectMemory methodsFor: 'plugin support' stamp: 'ar 11/21/1999 00:50'!classExternalAddress	^self splObj: ClassExternalAddress! !!ObjectMemory methodsFor: 'plugin support' stamp: 'ar 11/17/1999 18:23'!classExternalData	^self splObj: ClassExternalData! !!ObjectMemory methodsFor: 'plugin support' stamp: 'ar 11/17/1999 18:23'!classExternalFunction	^self splObj: ClassExternalFunction! !!ObjectMemory methodsFor: 'plugin support' stamp: 'ar 11/17/1999 19:45'!classExternalLibrary	^self splObj: ClassExternalLibrary! !!ObjectMemory methodsFor: 'plugin support' stamp: 'ar 11/21/1999 15:23'!classExternalStructure	^self splObj: ClassExternalStructure! !!ObjectMemory methodsFor: 'plugin support' stamp: 'ar 11/21/1999 23:22'!classLargeNegativeInteger	^self splObj: ClassLargeNegativeInteger! !!ObjectMemory methodsFor: 'plugin support' stamp: 'ar 11/28/1999 19:04'!isInMemory: address	"Return true if the given address is in ST object memory"	^address >= self startOfMemory and:[address < endOfMemory]! !!Interpreter methodsFor: 'primitive support' stamp: 'ar 11/29/1999 22:01'!signed32BitIntegerFor: integerValue	"Return a full 32 bit integer object for the given integer value"	| newLargeInteger value largeClass |	self inline: false.	(self isIntegerValue: integerValue)		ifTrue: [^ self integerObjectOf: integerValue].	integerValue < 0		ifTrue:[	largeClass _ self classLargeNegativeInteger.				value _ 0 - integerValue]		ifFalse:[	largeClass _ self classLargePositiveInteger.				value _ integerValue].	newLargeInteger _		self instantiateClass: largeClass indexableSize: 4.	self storeByte: 3 ofObject: newLargeInteger		withValue: ((value >> 24) bitAnd: 16rFF).	self storeByte: 2 ofObject: newLargeInteger		withValue: ((value >> 16) bitAnd: 16rFF).	self storeByte: 1 ofObject: newLargeInteger		withValue: ((value >> 8) bitAnd: 16rFF).	self storeByte: 0 ofObject: newLargeInteger		withValue: (value bitAnd: 16rFF).	^ newLargeInteger! !!Interpreter methodsFor: 'primitive support' stamp: 'ar 11/29/1999 22:00'!signed32BitValueOf: oop	"Convert the given object into an integer value.	The object may be either a positive ST integer or a four-byte LargeInteger."	| sz value largeClass negative |	self inline: false.	(self isIntegerObject: oop) ifTrue: [^self integerValueOf: oop].	largeClass _ self fetchClassOf: oop.	largeClass = self classLargePositiveInteger		ifTrue:[negative _ false]		ifFalse:[largeClass = self classLargeNegativeInteger					ifTrue:[negative _ true]					ifFalse:[^self primitiveFail]].	sz _ self lengthOf: oop.	sz = 4 ifFalse: [^ self primitiveFail].	value _ (self fetchByte: 0 ofObject: oop) +		  ((self fetchByte: 1 ofObject: oop) <<  8) +		  ((self fetchByte: 2 ofObject: oop) << 16) +		  ((self fetchByte: 3 ofObject: oop) << 24).	negative		ifTrue:[^0 - value]		ifFalse:[^value]! !!Interpreter methodsFor: 'other primitives' stamp: 'ar 11/28/1999 19:50'!primitiveCalloutToFFI	"Perform a function call to a foreign function.	Only invoked from method containing explicit external call spec.	Due to this we use the pluggable prim mechanism explicitly here	(the first literal of any FFI spec'ed method is an ExternalFunction	and not an array as used in the pluggable primitive mechanism)."	| function moduleName functionName |	self var: #function declareC:'static int function = 0'.	self var: #moduleName declareC:'static char *moduleName = "SqueakFFIPrims"'.	self var: #functionName declareC:'static char *functionName = "primitiveCallout"'.	function = 0 ifTrue:[		function _ self			ioLoadExternalFunction: (self cCoerce: functionName to:'int')			OfLength: 16			FromModule: (self cCoerce: moduleName to:'int')			OfLength: 14.		function == 0 ifTrue:[^self primitiveFail]].	^self cCode: '((int (*) (void)) function) ()'.! !!Interpreter methodsFor: 'plugin support' stamp: 'ar 11/21/1999 00:11'!includesBehavior: aClass ThatOf: aSuperclass	"Return the equivalent of 		aClass includesBehavior: aSuperclass.	Note: written for efficiency and better inlining (only 1 temp)"	| theClass |	self inline: true.	(((theClass _ aClass) = aSuperclass) "aClass == aSuperclass"		or:[aSuperclass = nilObj]) "every class inherits from nil"			ifTrue:[^true].	[(theClass _ self superclassOf: theClass) = aSuperclass ifTrue:[^true].	theClass ~= nilObj] whileTrue.	^false! !!Interpreter methodsFor: 'plugin support' stamp: 'ar 11/28/1999 17:42'!primitiveMethod	"Return the method an external primitive was defined in"	^newMethod! !!ObjectMemory class methodsFor: 'initialization' stamp: 'ar 11/21/1999 15:23'!initializeSpecialObjectIndices	"Initialize indices into specialObjects array."	NilObject _ 0.	FalseObject _ 1.	TrueObject _ 2.	SchedulerAssociation _ 3.	ClassBitmap _ 4.	ClassInteger _ 5.	ClassString _ 6.	ClassArray _ 7.	"SmalltalkDictionary _ 8."  "Do not delete!!"	ClassFloat _ 9.	ClassMethodContext _ 10.	ClassBlockContext _ 11.	ClassPoint _ 12.	ClassLargePositiveInteger _ 13.	TheDisplay _ 14.	ClassMessage _ 15.	ClassCompiledMethod _ 16.	TheLowSpaceSemaphore _ 17.	ClassSemaphore _ 18.	ClassCharacter _ 19.	SelectorDoesNotUnderstand _ 20.	SelectorCannotReturn _ 21.	TheInputSemaphore _ 22.	SpecialSelectors _ 23.	CharacterTable _ 24.	SelectorMustBeBoolean _ 25.	ClassByteArray _ 26.	ClassProcess _ 27.	CompactClasses _ 28.	TheTimerSemaphore _ 29.	TheInterruptSemaphore _ 30.	FloatProto _ 31.	SelectorCannotInterpret _ 34.	MethodContextProto _ 35.	BlockContextProto _ 37.	ExternalObjectsArray _ 38.	ClassPseudoContext _ 39.	ClassTranslatedMethod _ 40.	TheFinalizationSemaphore _ 41.	ClassLargeNegativeInteger _ 42.	ClassExternalAddress _ 43.	ClassExternalStructure _ 44.	ClassExternalData _ 45.	ClassExternalFunction _ 46.	ClassExternalLibrary _ 47.! !!Interpreter class methodsFor: 'initialization' stamp: 'ar 11/28/1999 19:39'!initializePrimitiveTable 	"This table generates a C switch statement for primitive dispatching."	"NOTE: The real limit here is 2047, but our C compiler currently barfs over 700"	MaxPrimitiveIndex _ 700.	PrimitiveTable _ Array new: MaxPrimitiveIndex + 1.	self table: PrimitiveTable from: 	#(	"Integer Primitives (0-19)"		(0 primitiveFail)		(1 primitiveAdd)		(2 primitiveSubtract)		(3 primitiveLessThan)		(4 primitiveGreaterThan)		(5 primitiveLessOrEqual)		(6 primitiveGreaterOrEqual)		(7 primitiveEqual)		(8 primitiveNotEqual)		(9 primitiveMultiply)		(10 primitiveDivide)		(11 primitiveMod)		(12 primitiveDiv)		(13 primitiveQuo)		(14 primitiveBitAnd)		(15 primitiveBitOr)		(16 primitiveBitXor)		(17 primitiveBitShift)		(18 primitiveMakePoint)		(19 primitiveFail)					"Guard primitive for simulation -- *must* fail"		"LargeInteger Primitives (20-39)"		"32-bit logic is aliased to Integer prims above"		(20 39 primitiveFail)		"Float Primitives (40-59)"		(40 primitiveAsFloat)		(41 primitiveFloatAdd)		(42 primitiveFloatSubtract)		(43 primitiveFloatLessThan)		(44 primitiveFloatGreaterThan)		(45 primitiveFloatLessOrEqual)		(46 primitiveFloatGreaterOrEqual)		(47 primitiveFloatEqual)		(48 primitiveFloatNotEqual)		(49 primitiveFloatMultiply)		(50 primitiveFloatDivide)		(51 primitiveTruncated)		(52 primitiveFractionalPart)		(53 primitiveExponent)		(54 primitiveTimesTwoPower)		(55 primitiveSquareRoot)		(56 primitiveSine)		(57 primitiveArctan)		(58 primitiveLogN)		(59 primitiveExp)		"Subscript and Stream Primitives (60-67)"		(60 primitiveAt)		(61 primitiveAtPut)		(62 primitiveSize)		(63 primitiveStringAt)		(64 primitiveStringAtPut)		(65 primitiveNext)		(66 primitiveNextPut)		(67 primitiveAtEnd)		"StorageManagement Primitives (68-79)"		(68 primitiveObjectAt)		(69 primitiveObjectAtPut)		(70 primitiveNew)		(71 primitiveNewWithArg)		(72 primitiveArrayBecomeOneWay)	"Blue Book: primitiveBecome"		(73 primitiveInstVarAt)		(74 primitiveInstVarAtPut)		(75 primitiveAsOop)		(76 primitiveStoreStackp)					"Blue Book: primitiveAsObject"		(77 primitiveSomeInstance)		(78 primitiveNextInstance)		(79 primitiveNewMethod)		"Control Primitives (80-89)"		(80 primitiveBlockCopy)		(81 primitiveValue)		(82 primitiveValueWithArgs)		(83 primitivePerform)		(84 primitivePerformWithArgs)		(85 primitiveSignal)		(86 primitiveWait)		(87 primitiveResume)		(88 primitiveSuspend)		(89 primitiveFlushCache)		"Input/Output Primitives (90-109)"		(90 primitiveMousePoint)		(91 primitiveTestDisplayDepth)			"Blue Book: primitiveCursorLocPut"		(92 primitiveSetDisplayMode)				"Blue Book: primitiveCursorLink"		(93 primitiveInputSemaphore)		(94 primitiveFail)						"Blue Book: primitiveSampleInterval"		(95 primitiveInputWord)		(96 primitiveCopyBits)		(97 primitiveSnapshot)		(98 primitiveStoreImageSegment)		(99 primitiveLoadImageSegment)		(100 primitivePerformInSuperclass)		"Blue Book: primitiveSignalAtTick"		(101 primitiveBeCursor)		(102 primitiveBeDisplay)		(103 primitiveScanCharacters)		(104 primitiveDrawLoop)		(105 primitiveStringReplace)		(106 primitiveScreenSize)		(107 primitiveMouseButtons)		(108 primitiveKbdNext)		(109 primitiveKbdPeek)		"System Primitives (110-119)"		(110 primitiveEquivalent)		(111 primitiveClass)		(112 primitiveBytesLeft)		(113 primitiveQuit)		(114 primitiveExitToDebugger)		(115 primitiveFail)					"Blue Book: primitiveOopsLeft"		(116 primitiveFlushCacheByMethod)		(117 primitiveExternalCall)		(118 primitiveDoPrimitiveWithArgs)		(119 primitiveFlushCacheSelective)			"Squeak 2.2 and earlier use 119.  Squeak 2.3 and later use 116.			Both are supported for backward compatibility."		"Miscellaneous Primitives (120-127)"		(120 primitiveCalloutToFFI)		(121 primitiveImageName)		(122 primitiveNoop)					"Blue Book: primitiveImageVolume"		(123 primitiveFail)		(124 primitiveLowSpaceSemaphore)		(125 primitiveSignalAtBytesLeft)		"Squeak Primitives Start Here"		"Squeak Miscellaneous Primitives (128-149)"		(126 primitiveDeferDisplayUpdates)		(127 primitiveShowDisplayRect)		(128 primitiveArrayBecome)		(129 primitiveSpecialObjectsOop)		(130 primitiveFullGC)		(131 primitiveIncrementalGC)		(132 primitiveObjectPointsTo)		(133 primitiveSetInterruptKey)		(134 primitiveInterruptSemaphore)		(135 primitiveMillisecondClock)		(136 primitiveSignalAtMilliseconds)		(137 primitiveSecondsClock)		(138 primitiveSomeObject)		(139 primitiveNextObject)		(140 primitiveBeep)		(141 primitiveClipboardText)		(142 primitiveVMPath)		(143 primitiveShortAt)		(144 primitiveShortAtPut)		(145 primitiveConstantFill)		(146 primitiveReadJoystick)		(147 primitiveWarpBits)		(148 primitiveClone)		(149 primitiveGetAttribute)		"File Primitives (150-169)"		(150 primitiveFileAtEnd)		(151 primitiveFileClose)		(152 primitiveFileGetPosition)		(153 primitiveFileOpen)		(154 primitiveFileRead)		(155 primitiveFileSetPosition)		(156 primitiveFileDelete)		(157 primitiveFileSize)		(158 primitiveFileWrite)		(159 primitiveFileRename)		(160 primitiveDirectoryCreate)		(161 primitiveDirectoryDelimitor)		(162 primitiveDirectoryLookup)		(163 primitiveDirectoryDelete)		(164 168 primitiveFail)		(169 primitiveDirectorySetMacTypeAndCreator)		"Sound Primitives (170-199)"		(170 primitiveSoundStart)		(171 primitiveSoundStartWithSemaphore)		(172 primitiveSoundStop)		(173 primitiveSoundAvailableSpace)		(174 primitiveSoundPlaySamples)		(175 primitiveSoundPlaySilence)		"obsolete; will be removed in the future"		(176 primWaveTableSoundmixSampleCountintostartingAtpan)		(177 primFMSoundmixSampleCountintostartingAtpan)		(178 primPluckedSoundmixSampleCountintostartingAtpan)		(179 primSampledSoundmixSampleCountintostartingAtpan)		(180 primFMSoundmixSampleCountintostartingAtleftVolrightVol)		(181 primPluckedSoundmixSampleCountintostartingAtleftVolrightVol)		(182 oldprimSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(183 primReverbSoundapplyReverbTostartingAtcount)		(184 primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(185 primSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(186 188 primitiveFail)		(189 primitiveSoundInsertSamples)		(190 primitiveSoundStartRecording)		(191 primitiveSoundStopRecording)		(192 primitiveSoundGetRecordingSampleRate)		(193 primitiveSoundRecordSamples)		(194 primitiveSoundSetRecordLevel)		(195 199 primitiveFail)		"Networking Primitives (200-229)"		(200 primitiveInitializeNetwork)		(201 primitiveResolverStartNameLookup)		(202 primitiveResolverNameLookupResult)		(203 primitiveResolverStartAddressLookup)		(204 primitiveResolverAddressLookupResult)		(205 primitiveResolverAbortLookup)		(206 primitiveResolverLocalAddress)		(207 primitiveResolverStatus)		(208 primitiveResolverError)		(209 primitiveSocketCreate)		(210 primitiveSocketDestroy)		(211 primitiveSocketConnectionStatus)		(212 primitiveSocketError)		(213 primitiveSocketLocalAddress)		(214 primitiveSocketLocalPort)		(215 primitiveSocketRemoteAddress)		(216 primitiveSocketRemotePort)		(217 primitiveSocketConnectToPort)		(218 primitiveSocketListenOnPort)		(219 primitiveSocketCloseConnection)		(220 primitiveSocketAbortConnection)		(221 primitiveSocketReceiveDataBufCount)		(222 primitiveSocketReceiveDataAvailable)		(223 primitiveSocketSendDataBufCount)		(224 primitiveSocketSendDone)		(225 primitiveSocketAccept)		(226 229 primitiveFail)		"Other Primitives (230-249)"		(230 primitiveRelinquishProcessor)		(231 primitiveForceDisplayUpdate)		(232 primitiveFormPrint)		(233 primitiveSetFullScreen)		(234 primBitmapdecompressfromByteArrayat)		(235 primStringcomparewithcollated)		(236 primSampledSoundconvert8bitSignedFromto16Bit)		(237 primBitmapcompresstoByteArray)		(238 primitiveSerialPortOpen)		(239 primitiveSerialPortClose)		(240 primitiveSerialPortWrite)		(241 primitiveSerialPortRead)		(242 primitiveFail)		(243 primStringtranslatefromtotable)		(244 primStringfindFirstInStringinSetstartingAt)		(245 primStringindexOfAsciiinStringstartingAt)		(246 primStringfindSubstringinstartingAtmatchTable)		(247 249 primitiveFail)		"VM Implementor Primitives (250-255)"		(250 clearProfile)		(251 dumpProfile)		(252 startProfiling)		(253 stopProfiling)		(254 primitiveVMParameter)		(255 primitiveInstVarsPutFromStack) "Never used except in Disney tests.  Remove after 2.3 release."		"Quick Push Const Methods"		(256 primitivePushSelf)		(257 primitivePushTrue)		(258 primitivePushFalse)		(259 primitivePushNil)		(260 primitivePushMinusOne)		(261 primitivePushZero)		(262 primitivePushOne)		(263 primitivePushTwo)		"Quick Push Const Methods"		(264 519 primitiveLoadInstVar)		"MIDI Primitives (520-539)"		(520 primitiveFail)		(521 primitiveMIDIClosePort)		(522 primitiveMIDIGetClock)		(523 primitiveMIDIGetPortCount)		(524 primitiveMIDIGetPortDirectionality)		(525 primitiveMIDIGetPortName)		(526 primitiveMIDIOpenPort)		(527 primitiveMIDIParameterGetOrSet)		(528 primitiveMIDIRead)		(529 primitiveMIDIWrite)		(530 539 primitiveFail)  "reserved for extended MIDI primitives"		"Experimental Asynchrous File Primitives"		(540 primitiveAsyncFileClose)		(541 primitiveAsyncFileOpen)		(542 primitiveAsyncFileReadResult)		(543 primitiveAsyncFileReadStart)		(544 primitiveAsyncFileWriteResult)		(545 primitiveAsyncFileWriteStart)		(546 547 primitiveFail)		"Pen Tablet Primitives"		(548 primitiveGetTabletParameters)		(549 primitiveReadTablet)		"Sound Codec Primitives"		(550 primADPCMCodecprivateDecodeMono)			(551 primADPCMCodecprivateDecodeStereo)			(552 primADPCMCodecprivateEncodeMono)			(553 primADPCMCodecprivateEncodeStereo)			(554 569 primitiveFail)  "reserved for additional codec primitives"		"Unassigned Primitives"		(570 700 primitiveFail)).! !!SystemDictionary methodsFor: 'special objects' stamp: 'ar 12/1/1999 15:00'!recreateSpecialObjectsArray    "Smalltalk recreateSpecialObjectsArray"	"The Special Objects Array is an array of object pointers used by the	Smalltalk virtual machine.  Its contents are critical and unchecked,	so don't even think of playing here unless you know what you are doing."	| newArray |	newArray _ Array new: 48.	"Nil false and true get used throughout the interpreter"	newArray at: 1 put: nil.	newArray at: 2 put: false.	newArray at: 3 put: true.	"This association holds the active process (a ProcessScheduler)"	newArray at: 4 put: (Smalltalk associationAt: #Processor).	"Numerous classes below used for type checking and instantiation"	newArray at: 5 put: Bitmap.	newArray at: 6 put: SmallInteger.	newArray at: 7 put: String.	newArray at: 8 put: Array.	newArray at: 9 put: Smalltalk. 	newArray at: 10 put: Float.	newArray at: 11 put: MethodContext.	newArray at: 12 put: BlockContext.	newArray at: 13 put: Point.	newArray at: 14 put: LargePositiveInteger.	newArray at: 15 put: Display.	newArray at: 16 put: Message.	newArray at: 17 put: CompiledMethod.	newArray at: 18 put: (self specialObjectsArray at: 18)  "(low space Semaphore)".	newArray at: 19 put: Semaphore.	newArray at: 20 put: Character.	newArray at: 21 put: #doesNotUnderstand:.	newArray at: 22 put: #cannotReturn:.	newArray at: 23 put: nil.  "*unused*"	"An array of the 32 selectors that are compiled as special bytecodes,	paired alternately with the number of arguments each takes."	newArray at: 24 put: #(+ 1 - 1 < 1 > 1 <= 1 >= 1 = 1 ~= 1 * 1 / 1 \\ 1 @ 1 bitShift: 1 // 1 bitAnd: 1 bitOr: 1 at: 1 at:put: 2 size 0 next 0 nextPut: 1 atEnd 0 == 1 class 0 blockCopy: 1 value 0 value: 1 do: 1 new 0 new: 1 x 0 y 0 ).	"An array of the 255 Characters in ascii order."	newArray at: 25 put: ((0 to: 255) collect: [:ascii | Character value: ascii]).	newArray at: 26 put: #mustBeBoolean.	newArray at: 27 put: ByteArray.	newArray at: 28 put: Process.	"An array of up to 31 classes whose instances will have compact headers"	newArray at: 29 put: self compactClassesArray.	newArray at: 30 put: (self specialObjectsArray at: 30)   "(delay Semaphore)".	newArray at: 31 put: (self specialObjectsArray at: 31)   "(user input Semaphore)".	"Prototype instances that can be copied for fast initialization"	newArray at: 32 put: (Float new: 2).	newArray at: 33 put: (LargePositiveInteger new: 4).	newArray at: 34 put: Point new.	newArray at: 35 put: #cannotInterpret:.	"Note: This must be fixed once we start using context prototypes"	newArray at: 36 put: (self specialObjectsArray at: 36). 						"(MethodContext new: CompiledMethod fullFrameSize)."	newArray at: 37 put: nil.	newArray at: 38 put: (self specialObjectsArray at: 38). 						"(BlockContext new: CompiledMethod fullFrameSize)."	newArray at: 39 put: Array new.  "array of objects referred to by external code"	newArray at: 40 put: PseudoContext.	newArray at: 41 put: TranslatedMethod.	"finalization Semaphore"	newArray at: 42 put: ((self specialObjectsArray at: 30) ifNil:[Semaphore new]).	newArray at: 43 put: LargeNegativeInteger.	"External objects for callout.	Note: Written so that one can actually completely remove the FFI."	newArray at: 44 put: (Smalltalk at: #ExternalAddress ifAbsent:[nil]).	newArray at: 45 put: (Smalltalk at: #ExternalStructure ifAbsent:[nil]).	newArray at: 46 put: (Smalltalk at: #ExternalData ifAbsent:[nil]).	newArray at: 47 put: (Smalltalk at: #ExternalFunction ifAbsent:[nil]).	newArray at: 48 put: (Smalltalk at: #ExternalLibrary ifAbsent:[nil]).	"Now replace the interpreter's reference in one atomic operation"	self specialObjectsArray become: newArray! !"Postscript:Recreate the Smalltalk special objects array."Smalltalk recreateSpecialObjectsArray.!