'From Squeak3.8alpha of 8 September 2004 [latest update: #6139] on 14 September 2004 at 1:04:24 pm'!"Change Set:		ResizeWithAspect-stDate:			14 September 2004Author:			Samuel TardieuMake shift on the grow (resize) handle preserve the aspect ratio. Shift can be pressed at any time while moving the mouse. Also, add comments about shift actions in halos in balloon help messages (Debug, Change color and Resize handles)."!Morph subclass: #HaloMorph	instanceVariableNames: 'target innerTarget positionOffset angleOffset minExtent growingOrRotating directionArrowAnchor haloBox simpleMode originalExtent'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!Morph methodsFor: 'halos and balloon help' stamp: 'st 9/14/2004 12:46'!balloonHelpTextForHandle: aHandle	"Answer a string providing balloon help for the given halo handle"	|  itsSelector |	itsSelector _ aHandle eventHandler firstMouseSelector.	#(	(addFullHandles							'More halo handles')		(addSimpleHandles						'Fewer halo handles')		(chooseEmphasisOrAlignment				'Emphasis & alignment')		(chooseFont								'Change font')		(chooseNewGraphicFromHalo				'Choose a new graphic')		(chooseStyle								'Change style')		(dismiss									'Remove')		(doDebug:with:							'Debug (press shift to inspect morph)')		(doDirection:with:						'Choose forward direction')		(doDup:with:							'Duplicate')		(doMakeSibling:with: 					'Make a sibling')		(doMenu:with:							'Menu')		(doGrab:with:							'Pick up')		(doRecolor:with:							'Change color (press shift for more properties)')		(editButtonsScript						'See the script for this button')		(editDrawing							'Repaint')		(maybeDoDup:with:						'Duplicate')		(makeNascentScript						'Make a scratch script')		(makeNewDrawingWithin				'Paint new object')		(mouseDownInCollapseHandle:with:		'Collapse')		(mouseDownOnHelpHandle:				'Help')		(openViewerForArgument				'Open a Viewer for me')		(openViewerForTarget:with:				'Open a Viewer for me')		(paintBackground						'Paint background')		(prepareToTrackCenterOfRotation:with:	'Move object or set center of rotation')		(presentViewMenu						'Present the Viewing menu')		(startDrag:with:							'Move')		(startGrow:with:							'Change size (press shift to preserve aspect)') 		(startRot:with:							'Rotate')		(startScale:with:							'Change scale') 		(tearOffTile								'Make a tile representing this object')		(tearOffTileForTarget:with:				'Make a tile representing this object')		(trackCenterOfRotation:with:				'Set center of rotation')) 	do:		[:pair | itsSelector == pair first ifTrue: [^ pair last]].	(itsSelector == #mouseDownInDimissHandle:with:) ifTrue:		[^ Preferences preserveTrash			ifTrue:				['Move to trash']			ifFalse:				['Remove from screen']].	^ 'unknown halo handle'! !!Morph methodsFor: 'meta-actions' stamp: 'st 9/14/2004 12:30'!resizeMorph: evt	| handle |	handle _ HandleMorph new forEachPointDo: [:newPoint | 		self extent: (self griddedPoint: newPoint) - self bounds topLeft].	evt hand attachMorph: handle.	handle startStepping.! !!HaloMorph methodsFor: 'copying' stamp: 'st 9/14/2004 13:03'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."	super veryDeepInner: deepCopier.	"target _ target.		Weakly copied"	"innerTarget _ innerTarget.		Weakly copied"	positionOffset _ positionOffset veryDeepCopyWith: deepCopier.	angleOffset _ angleOffset veryDeepCopyWith: deepCopier.	growingOrRotating _ growingOrRotating veryDeepCopyWith: deepCopier.	directionArrowAnchor _ directionArrowAnchor.	simpleMode _ simpleMode.	haloBox _ haloBox.	originalExtent _ originalExtent! !!HaloMorph methodsFor: 'private' stamp: 'st 9/14/2004 12:54'!doGrow: evt with: growHandle	"Called while the mouse is down in the grow handle"	| newExtent extentToUse scale |	evt hand obtainHalo: self.	newExtent _ (target pointFromWorld: (target griddedPoint: evt cursorPoint - positionOffset))								- target topLeft.	evt shiftPressed ifTrue: [		scale _ (newExtent x / (originalExtent x max: 1)) min:					(newExtent y / (originalExtent y max: 1)).		newExtent _ (originalExtent x * scale) asInteger @ (originalExtent y * scale) asInteger	].	(newExtent x < 1 or: [newExtent y < 1 ]) ifTrue: [^ self].	target renderedMorph setExtentFromHalo: (extentToUse _ newExtent).	growHandle position: evt cursorPoint - (growHandle extent // 2).	self layoutChanged.	(self valueOfProperty: #commandInProgress) ifNotNilDo:  		[:cmd | "Update the final extent"		cmd redoTarget: target selector: #setExtentFromHalo: argument: extentToUse]! !!HaloMorph methodsFor: 'private' stamp: 'st 9/14/2004 12:51'!startGrow: evt with: growHandle	"Initialize resizing of my target.  Launch a command representing it, to support Undo"	| botRt |	self obtainHaloForEvent: evt andRemoveAllHandlesBut: growHandle.	botRt _ target point: target bottomRight in: owner.	positionOffset _ (self world viewBox containsPoint: botRt)		ifTrue: [evt cursorPoint - botRt]		ifFalse: [0@0].	self setProperty: #commandInProgress toValue:		(Command new			cmdWording: 'resizing' translated;			undoTarget: target selector: #setExtentFromHalo: argument: target extent).	originalExtent _ target extent! !