'From Squeak2.9alpha of 5 August 2000 [latest update: #3288] on 19 January 2001 at 12:49:21 pm'!"Change Set:		searchInPrefs-swDate:			19 January 2001Author:			Scott WallaceEnhances the 'find' feature of Preferences so that it puts the results of its query in a special 'search results' category.  Use cmd-f to initiate the search, or else request it from the window menu.  At the moment, cmd-f does not trigger the search when in mvc, nor is the 'find preference' menu item available in the window title (since it's an mvc window) -- someone who cares and who uses mvc should fix those shortcomings."!!Preferences class methodsFor: 'factored pref panel' stamp: 'sw 1/19/2001 03:02'!factoredCategories	| prefsWithoutInits extraItem |	"Preferences factoredCategories"	"CategoryInfo _ nil"	CategoryInfo ifNil:		[CategoryInfo _ self initialCategoryInfo].	((prefsWithoutInits _ self preferencesLackingInitializers) size > 0)		ifTrue:			[extraItem _ (Array with: 'uncategorized' with: prefsWithoutInits asSortedArray)].	^ (extraItem		ifNil:			[CategoryInfo]		ifNotNil:			[CategoryInfo, (Array with: extraItem)]) copyWith: {'search results'. OrderedCollection new}! !!Preferences class methodsFor: 'factored pref panel' stamp: 'sw 1/19/2001 12:34'!openFactoredPanelWithWidth: aWidth 	"Open up a preferences panel of the given width"	"Preferences openFactoredPanelWithWidth: 325"	| tabbedPalette controlPage window playfield aColor aFont maxEntriesPerCategory tabsMorph anExtent aPanel |	aFont _ StrikeFont familyName: 'NewYork' size: 19.	aPanel _ PreferencesPanel new.	aColor _ aPanel defaultBackgroundColor.	tabbedPalette _ TabbedPalette newSticky.	(tabsMorph _ tabbedPalette tabsMorph) color: aColor darker;		 highlightColor: Color red regularColor: Color brown darker darker.	maxEntriesPerCategory _ 0.	"tabbedPalette addTabFor: self helpPaneForFactoredPanel font: aFont.  	LATER!!"	self factoredCategories		do: 			[:aCat | 			controlPage _ AlignmentMorph newColumn beSticky color: aColor.			controlPage borderColor: aColor;				 layoutInset: 4.			aCat second				do: [:aPrefSymbol | controlPage						addMorphBack: (Preferences								buttonRepresenting: aPrefSymbol								wording: aPrefSymbol								color: nil)].			controlPage setNameTo: aCat first asString.			aCat first == #halos				ifTrue: [aPanel addHaloControlsTo: controlPage].			tabbedPalette addTabFor: controlPage font: aFont.			aCat first = 'search results' ifTrue:				[(tabbedPalette tabNamed: aCat first) setBalloonText:					'User cmd-f to find preferences by keyword; the results of your search will show up here'].			maxEntriesPerCategory _ maxEntriesPerCategory max: aCat second size].	tabbedPalette selectTabNamed: 'general'.	tabsMorph rowsNoWiderThan: aWidth.	playfield _ Morph newSticky.	anExtent _ aWidth @ (25 + tabsMorph height + (20 * maxEntriesPerCategory)).	playfield extent: anExtent.	playfield color: aColor.	playfield addMorphBack: tabbedPalette.	self couldOpenInMorphic		ifTrue: [window _ (SystemWindow labelled: 'Preferences')						model: aPanel.			window on: #keyStroke send: #keyStroke: to: aPanel.			window				bounds: (100 @ 100 - (0 @ window labelHeight + window borderWidth) extent: playfield extent + (2 * window borderWidth)).			window				addMorph: playfield				frame: (0 @ 0 extent: 1 @ 1).			window updatePaneColors.			window setProperty: #minimumExtent toValue: anExtent + (2 @ 2).			window position: 200 @ 20.			self currentHand attachMorph: window.			self currentWorld startSteppingSubmorphsOf: window]		ifFalse:			[(window _ MVCWiWPasteUpMorph newWorldForProject: nil) addMorph: playfield.			window startSteppingSubmorphsOf: playfield.			MorphWorldView				openOn: window				label: 'Preferences'				extent: playfield extent]! !!PreferencesPanel methodsFor: 'halo pane' stamp: 'sw 1/19/2001 12:46'!addHaloControlsTo: controlPage	"Add special controls relating to halo schemes to the page"	| aButton |	controlPage addTransparentSpacerOfSize: (0 @ 4).	controlPage addMorphBack: self haloThemeRadioButtons.	controlPage addTransparentSpacerOfSize: (0 @ 4).	aButton _ SimpleButtonMorph new target: self; color: Color transparent; actionSelector: #editCustomHalos; label: 'Edit custom halos'.	controlPage addMorphBack: aButton.	aButton setBalloonText: 'Click here to edit the method that defines the custom halos'.			! !!PreferencesPanel methodsFor: 'halo pane' stamp: 'sw 1/19/2001 12:48'!haloThemeRadioButtons	"Answer a column of butons representing the choices of halo theme"	| buttonColumn aRow aRadioButton aStringMorph |	buttonColumn _ AlignmentMorph newColumn beTransparent.	#(	(iconicHaloSpecifications iconic iconicHalosInForce	'circular halos with icons inside')		(classicHaloSpecs	classic	classicHalosInForce		'plain circular halos')		(simpleFullHaloSpecifications		simple	simpleHalosInForce	'fewer, larger halos')		(customHaloSpecs	custom	customHalosInForce		'customizable halos')) do:		[:quad |			aRow _ AlignmentMorph newRow beTransparent.			aRow addMorph: (aRadioButton _ UpdatingThreePhaseButtonMorph radioButton).			aRadioButton target: Preferences.			aRadioButton setBalloonText: quad fourth.			aRadioButton actionSelector: #installHaloTheme:.			aRadioButton getSelector: quad third.			aRadioButton arguments: (Array with: quad first).			aRow addTransparentSpacerOfSize: (4 @ 0).			aRow addMorphBack: (aStringMorph _ StringMorph contents: quad second asString).			aStringMorph setBalloonText: quad fourth.			buttonColumn addMorphBack: aRow].	^ buttonColumn	"self currentHand attachMorph: Preferences haloThemeRadioButtons"! !!PreferencesPanel methodsFor: 'find' stamp: 'sw 1/19/2001 12:31'!findPreference: evt	"Allow the user to submit a selector fragment; search for that among preference names; put up a list of qualifying preferences; if the user selects one of those, redirect the preferences panel to reveal the chosen preference"	| result aList aPalette controlPage |	result _ FillInTheBlank request: 'Search for preferences containing:' initialAnswer: 'color'.	result _ result asLowercase copyWithout: $ .	result isEmptyOrNil ifTrue: [^ self].	aList _ Preferences allPreferenceFlagKeys select:		[:aKey | 			aKey includesSubstring: result caseSensitive: false].	aPalette _ self containingWindow findDeeplyA: TabbedPalette.	aPalette ifNil: [^ self].	aPalette selectTabNamed:  'search results'.	aPalette currentPage ifNil: [^ self].  "bkwd compat"	controlPage _ aPalette currentPage.	controlPage removeAllMorphs.	aList do:		[:aPrefSymbol |			controlPage addMorphBack: (Preferences								buttonRepresenting: aPrefSymbol								wording: aPrefSymbol								color: nil)].	aPalette world startSteppingSubmorphsOf: aPalette."	result _ (SelectionMenu selections: aList) startUpWithCaption: 'Choose which Preference you want to find'.	Preferences factoredCategories do:		[:aCategoryPair |			(aCategoryPair second includes: result)				ifTrue:					[^ self switchToCategoryNamed: aCategoryPair first event: evt]]"! !!TabbedPalette methodsFor: 'user-interface' stamp: 'sw 1/19/2001 12:47'!selectTabNamed: aName	"If the receiver has a tab with the given name, select it"	| aTab |	aTab _ self tabNamed: aName.	aTab ifNotNil: [self selectTab: aTab]! !!TabbedPalette methodsFor: 'user-interface' stamp: 'sw 1/19/2001 03:23'!tabNamed: aName	"Answer the tab of the given name, or nil if none"	^ self tabMorphs detect: [:m | ((m isKindOf: StringMorph) and: [m contents = aName])		or: [(m isKindOf: ReferenceMorph) and: [(m firstSubmorph isKindOf: StringMorph) and:				[m firstSubmorph contents = aName]]]] ifNone: [nil]! !!PreferencesPanel reorganize!('initialization' addModelItemsToWindowMenu: defaultBackgroundColor)('category switch' switchToCategoryNamed:event:)('halo pane' addHaloControlsTo: haloThemeRadioButtons)('find' findPreference: keyStroke:)!Preferences class removeSelector: #addHaloControlsTo:!Preferences class removeSelector: #haloThemeRadioButtons!