'From Squeak 2.5 of August 6, 1999 on 22 September 1999 at 11:05:49 am'!"Change Set:		PostScriptMenusDate:			22 September 1999Author:			Dan IngallsSome simple changes to support postscript generation from morphic menus.We still need work on paper size and scaling to fit, but the basic functions are in place now."!!Morph methodsFor: 'menus' stamp: 'di 9/22/1999 10:43'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	self player ifNotNil:		[aMenu add: 'make another instance of me' action: #makeNewPlayerInstance].	aMenu addLine.	"aMenu add: 'open viewer' action: #openViewerForArgument.	(self isKindOf: MorphThumbnail) ifFalse:		[aMenu add: 'make alias' action: #makeAliasForArgument]."	aMenu add: 'change costume...' action: #chooseNewCostumeForArgument.	((self isKindOf: SketchMorph) and: [Smalltalk imageImports size > 0]) ifTrue:		[aMenu add: 'use imported graphic...' action: #chooseNewFormForSketchMorph].	self colorSettable ifTrue:		[aMenu add: 'change color...' action: #changeColor].	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	self isLocked		ifFalse:			[aMenu add: 'lock' action: #lockMorph]		ifTrue:			[aMenu add: 'unlock' action: #unlockMorph].  "probably not possible -- wouldn't get halo"	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	"aMenu add: 'make mouse-sensitive' action: #makeMouseSensitive."	(owner == nil or: [self == owner submorphs last]) ifFalse:		[aMenu add: 'send to back' action: #goBehind].! !!Morph methodsFor: 'menus' stamp: 'di 9/22/1999 10:51'!printPSToFile	"Ask the user for a filename and print this morph as postscript."	| fileName rotateFlag |	fileName _ ('MyMorph') asFileName.	fileName _ FillInTheBlank request: 'File name? (".eps" will be added to end)' 			initialAnswer: fileName.	fileName size == 0 ifTrue: [^ self beep].	(fileName endsWith: '.eps') ifFalse: [fileName _ fileName,'.eps'].	rotateFlag _ ((PopUpMenu labels:'portrait (tall)landscape (wide)')			startUpWithCaption: 'Choose orientation...') = 2.	(FileStream newFileNamed: fileName)		nextPutAll: (EPSCanvas morphAsPostscript: self rotated: rotateFlag); close.! !!Morph methodsFor: 'printing' stamp: 'di 9/22/1999 08:45'!asEPS	^ EPSCanvas morphAsPostscript: self rotated: false.! !!Morph methodsFor: 'printing' stamp: 'di 9/22/1999 08:45'!asPostscriptPrintJob	^ DSCPostscriptCanvas morphAsPostscript: self rotated: false.! !!BookMorph methodsFor: 'printing' stamp: 'di 9/22/1999 10:51'!printPSToFile	"Ask the user for a filename and print this morph as postscript."	| fileName rotateFlag |	fileName _ ('MyBook') asFileName.	fileName _ FillInTheBlank request: 'File name? (".ps" will be added to end)' 			initialAnswer: fileName.	fileName size == 0 ifTrue: [^ self beep].	(fileName endsWith: '.ps') ifFalse: [fileName _ fileName,'.ps'].	rotateFlag _ ((PopUpMenu labels:'portrait (tall)landscape (wide)')			startUpWithCaption: 'Choose orientation...') = 2.	(FileStream newFileNamed: fileName)		nextPutAll: (DSCPostscriptCanvas morphAsPostscript: self rotated: rotateFlag); close.! !!HandMorph methodsFor: 'world menu' stamp: 'di 9/22/1999 08:51'!buildWorldMenu	"Build the meta menu for the world."	| menu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'previous project' target: owner action: #goBack.	menu add: 'jump to project...' action: #jumpToProject.	menu add: 'restore display' target: self world action: #restoreDisplay.	menu addLine.	menu add: 'open...' action: #openWindow.	menu add: 'windows & flaps...' action: #windowsDo.	menu add: 'changes...' action: #changesDo.	menu add: 'help...' action: #helpDo.	menu add: 'appearance...' action: #appearanceDo.	menu add: 'do...' target: Utilities action: #offerCommonRequests.	menu addLine.	menu add: 'new morph...' action: #newMorph.	menu add: 'authoring tools...' action: #scriptingDo.	menu add: 'playfield options...' action: #playfieldDo.	menu add: 'print PS to file...' action: #printWorldOnFile.	menu add: 'debug...' action: #debugDo.	menu addLine.	menu add: 'save' action: #saveSession.	menu add: 'save as...' action: #saveAs.	menu add: 'save and quit' action: #saveAndQuit.	menu add: 'quit' action: #quitSession.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/22/1999 10:58'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	menu add: 'delete' action: #dismissMorph.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	"Give the argument control over what should be done about fill styles"	argMorph addFillStyleMenuItems: menu hand: self.	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	World ifNil:		[menu add: 'inspect (in MVC)' action: #inspectMorph.		menu add: 'inspect' action: #inspectMorphInMorphic]		ifNotNil:		[menu add: 'inspect' action: #inspectMorph].	menu add: 'browse' action: #browseMorphClass.	menu add: 'print PS to file...' target: argMorph selector: #printPSToFile.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/22/1999 09:09'!printWorldOnFile	"Ask the user for a filename and print the world as postscript."	| fileName rotateFlag |	fileName _ ('SqueakScreen') asFileName.	fileName _ FillInTheBlank request: 'File name? (".eps" will be added to end)' 			initialAnswer: fileName.	fileName size == 0 ifTrue: [^ self beep].	(fileName endsWith: '.eps') ifFalse: [fileName _ fileName,'.eps'].	rotateFlag _ ((PopUpMenu labels:'portrait (tall)landscape (wide)')			startUpWithCaption: 'Choose orientation...') = 2.	(FileStream newFileNamed: fileName)		nextPutAll: (EPSCanvas worldAsPostscriptRotated: rotateFlag); close.! !!PostscriptCanvas methodsFor: 'initialization' stamp: 'di 9/22/1999 08:16'!resetContentRotated: rotateFlag	target _ self class defaultTarget.	self writeHeaderRotated: rotateFlag.     ^self.! !!PostscriptCanvas methodsFor: 'initialization' stamp: 'di 9/22/1999 08:15'!writeHeaderRotated: rotateFlag	self writePSIdentifierRotated: rotateFlag.	self writeProcset.! !!PostscriptCanvas methodsFor: 'initialization' stamp: 'di 9/22/1999 08:24'!writePSIdentifierRotated: rotateFlag	"NB: rotation not yet supported"	target print:'%!!'; cr.! !!DSCPostscriptCanvas methodsFor: 'as yet unclassified' stamp: 'di 9/22/1999 08:24'!writePSIdentifierRotated: rotateFlag	"NB: rotation not yet supported"	^target print:'%!!'; cr.	" cannot use the DSC-compliance header yet!! "	" target	print:'%!!PS-Adobe-2.0'; cr; 			print:'%%Pages: (atend)'; cr;			print:'%%BoundingBox: '; write:self pageBBox rounded; cr;			print:'%%EndComments'; cr. "! !!EPSCanvas methodsFor: 'as yet unclassified' stamp: 'di 9/22/1999 09:27'!writePSIdentifierRotated: rotateFlag	target print:'%!!PS-Adobe-2.0 EPSF-1.2'; cr.	rotateFlag		ifTrue: [target print: '%%BoundingBox: '; write: psBounds rounded; cr;					print: '90 rotate'; cr;					print: '0 -'; write: psBounds height rounded; print: ' translate'; cr]		ifFalse: [target print: '%%BoundingBox: '; write: psBounds rounded; cr].	target print:'%%Title: '; write:self topLevelMorph externalName; cr.! !!PostscriptCanvas class methodsFor: 'testing' stamp: 'di 9/22/1999 09:31'!morphAsPostscript: aMorph rotated: rotateFlag	^ self morphAsPostscript: aMorph rotated: rotateFlag offsetBy: self baseOffset.! !!PostscriptCanvas class methodsFor: 'testing' stamp: 'di 9/22/1999 08:16'!morphAsPostscript:aMorph rotated:rotateFlag offsetBy:offset | psCanvas |  psCanvas _ self new.  psCanvas reset.  psCanvas bounds:(offset extent:aMorph bounds extent).  psCanvas topLevelMorph:aMorph.  psCanvas resetContentRotated: rotateFlag.  psCanvas fullDrawMorph: aMorph .  ^psCanvas contents.! !!PostscriptCanvas class methodsFor: 'testing' stamp: 'di 9/22/1999 08:44'!worldAsPostscriptRotated: rotateFlag     ^ self morphAsPostscript: World rotated: rotateFlag.! !PostscriptCanvas removeSelector: #writePSIdentifier!PostscriptCanvas removeSelector: #resetContent!PostscriptCanvas removeSelector: #writeHeader!DSCPostscriptCanvas removeSelector: #writePSIdentifier!EPSCanvas removeSelector: #writePSIdentifier!PostscriptCanvas class removeSelector: #worldAsPostscript!