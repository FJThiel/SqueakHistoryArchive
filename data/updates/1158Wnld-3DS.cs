'From Squeak 2.4b of April 23, 1999 on 28 April 1999 at 11:45:17 pm'!"Change Set:		Wnld-3DSDate:			28 April 1999Author:			Andreas RaabThis change set adds the ability to read 3DS models from Wonderland directly."!!ThreeDSParser class methodsFor: 'class initialization' stamp: 'ar 4/24/1999 04:00'!initializeB3D		"ThreeDSParser initializeB3D"	"Initialize the 3DS Parser to use the Balloon 3D standard representations"	| spec |	spec _ Dictionary new.	#(	(#camera 		#B3DCamera)		(#material  		#B3DMaterial)		(#meshObject 	nil"#B3DSceneObject")		(#pointLight 	#B3DPositionalLight)		(#spotLight 		#B3DSpotLight)		(#splineVertex	nil "#B3DSplineVertex3DS")		(#scene 		nil "#B3DScene")		(#vertexArray 	#B3DVector3Array)		(#textureArray 	#B3DTexture2Array)	) do:[:array| spec at: array first put: array last].	self defaultSpec: spec.! !!Wonderland methodsFor: 'creating' stamp: 'ar 4/24/1999 04:48'!createHierarchyFrom3DS: globals	| keyframes objects hierarchy name parentID parentName parent |	hierarchy _ Dictionary new.	keyframes _ globals at: #keyframes ifAbsent:[^hierarchy].	objects _ keyframes at: #objects ifAbsent:[^hierarchy].	objects do:[:obj|		name _ obj at: #name.		parentID _ obj at: #hierarchy.		parent _ objects at: parentID ifAbsent:[nil].		parent == nil ifFalse:[			parentName _ parent at: #name.			name = parentName				ifFalse:[hierarchy at: name put: parentName]].	].	^hierarchy! !!Wonderland methodsFor: 'creating' stamp: 'ar 4/24/1999 05:39'!fixNameFrom: aString	"Fix the name to be a valid Smalltalk name (e.g., so that we can compile it as an inst var and accessor message)"	| aName |	aName _ aString select:[:c| c isAlphaNumeric].	aName isEmpty ifTrue:[aName _ 'unkwown'].	aName first isUppercase ifTrue:[aName _ aName first asLowercase asString, (aName copyFrom: 2 to: aName size)].	aName first isLetter ifFalse:[aName _ 'a', aName].	^aName! !!Wonderland methodsFor: 'creating' stamp: 'ar 4/24/1999 06:05'!makeActorFrom3DS: filename	"Creates a new actor using the specification from the given file"	| parent name baseActor newActor protoClass actorClass scene globals hierarchy meshSize materials material textureName cameras newCamera |	myUndoStack closeStack.	scene _ ThreeDSParser parseFileNamed: filename.	scene ifNil:[^nil].	globals _ scene at: #globals.	materials _ globals at: #materials ifAbsent:[Dictionary new].	"The remaining objects are the actual named meshes,"	scene removeKey: #globals.	hierarchy _ self createHierarchyFrom3DS: globals.	"First see if we need to create a prototype class for this model"	protoClass _ self protoClassFor: filename.	"Base actor creation"	actorClass _ protoClass newUniqueClassInstVars: '' classInstVars: ''.	baseActor _ actorClass createFor: self.	actorClassList addLast: actorClass.	name _ FileDirectory localNameFor: filename.	(name findString: FileDirectory dot) = 0 ifFalse:[		name _ name copyFrom: 1 to: (name findString: FileDirectory dot)-1].	baseActor setName: (self uniqueNameFrom: name).	"Now create the actors"	scene associationsDo:[:assoc|		name _ assoc key.		actorClass _ WonderlandActor newUniqueClassInstVars: '' classInstVars: ''.		newActor _ actorClass createFor: self.		actorClassList addLast: actorClass.		newActor setName: (self fixNameFrom: name).		"newActor setTexture: texture."		newActor setMesh: (B3DSTriangleMesh from3DS: assoc value).		material _ materials at: (assoc value at: #triList) last ifAbsent:[nil].		(material isKindOf: Association) ifTrue:[			"Note: In this case the name of the texture is the key"			textureName _ material key.			material _ material value].		newActor setMaterial: material.		"newActor setComposite: matrix."		assoc value: newActor.	].	"Create hierarchy"	scene associationsDo:[:assoc|		name _ assoc key.		newActor _ assoc value.		newActor setName: (self uniqueNameFrom: name).		parent _ hierarchy at: name ifAbsent:[nil].		parent == nil ifFalse:[parent _ scene at: parent ifAbsent:[nil]].		parent == nil ifTrue:[parent _ baseActor].		newActor reparentTo: parent.		newActor becomePart.	].	"Create the cameras"	cameras _ globals at: #cameras.	cameras associationsDo:[:assoc|		name _ assoc key.		newCamera _ WonderlandCamera createFor: self.		newCamera setName: (self fixNameFrom: name).		newCamera copySettingsFrom: assoc value.		newCamera reparentTo: baseActor.		newCamera becomePart.	].	meshSize _ baseActor getBoundingBox extent length.	meshSize > 100.0 ifTrue:[		(self inform:'This actor is huge!!You should rescale it to a reasonable size.')].	meshSize < 0.01 ifTrue:[		self inform:'This actor is tiny!!You should rescale it to a reasonable size.'].			myUndoStack openStack.	"Ensure that the new actor's name is unique"	myNamespace at: baseActor getName put: baseActor.	scriptEditor updateActorBrowser.	"Add an undo item to undo the creation of this object"	myUndoStack push: (UndoAction new: [ baseActor removeFromScene.											myNamespace removeKey: name ifAbsent: [].											scriptEditor updateActorBrowser.  ] ).	^ baseActor.! !!Wonderland methodsFor: 'creating' stamp: 'ar 4/24/1999 03:52'!protoClassFor: aFilename	| localName protoClass |	localName _ FileDirectory localNameFor: aFilename.	(ActorPrototypeClasses includesKey: localName)			ifTrue: [ protoClass _ ActorPrototypeClasses at: localName ]			ifFalse: ["Make a new prototype class for this model"					protoClass _ (WonderlandActor newUniqueClassInstVars: '' classInstVars: '').					ActorPrototypeClasses at: localName put: protoClass].	^protoClass! !!Wonderland methodsFor: 'creating' stamp: 'ar 4/24/1999 05:10'!uniqueNameFrom: aString	"If aName is unique to this wonderland's namespace, returns that name. Otherwise creates a unique variant and returns that."	| index aName |	aName _ self fixNameFrom: aString.	(myNamespace includesKey: aName)			ifFalse: [ ^ aName ]			ifTrue: [						index _ 2.						[ myNamespace includesKey: (aName , (index asString)) ]							whileTrue: [ index _ index + 1 ].						^ aName , (index asString).					].! !!WonderlandActor methodsFor: 'get property' stamp: 'ar 4/24/1999 05:25'!getMaterial	^myMaterial! !!WonderlandActor methodsFor: 'set property' stamp: 'ar 4/24/1999 05:25'!setMaterial: aMaterial	myMaterial _ aMaterial! !!WonderlandCamera methodsFor: 'initialize-release' stamp: 'ar 4/25/1999 06:48'!copySettingsFrom: aB3DCamera	"Copy my settings from the given B3DCamera"	| transformer |	transformer _ B3DVertexTransformer new.	transformer loadIdentity.	transformer lookFrom: aB3DCamera position to: aB3DCamera target up: aB3DCamera up.	self setComposite: transformer modelViewMatrix inverseTransformation.	perspective _ aB3DCamera perspective.! !"Postscript:Initialize the 3ds parser to use the right spec."ThreeDSParser initializeB3D.!