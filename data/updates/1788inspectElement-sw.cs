'From Squeak2.7 of 5 January 2000 [latest update: #1787] on 14 January 2000 at 2:41:22 pm'!"Change Set:		inspectElement-swDate:			14 January 2000Author:			Scott WallaceIn Inspectors (and inspect-lists of Debuggers), if the current selection is a non-empty Array or OrderedCollection then the inspect-list menu will now offer a new item, 'inspect element...', which will allow you to open an inspector directly on any element of the selection.The former #smartInspect feature is removed."!!Inspector methodsFor: 'menu commands' stamp: 'sw 1/14/2000 11:55'!fieldListMenu: aMenu	| sel |	((((sel _ self selection) isMemberOf: Array) or: [sel isMemberOf: OrderedCollection])			and: [sel size >= 1])		ifTrue:			[^ self fieldListMenuForCollection: aMenu].	^ aMenu labels: 'inspect (i)explore (I)method refs to this inst varmethods storing into this inst varobjects pointing to this valuecopy namebrowse full (b)browse classbrowse hierarchyinst var refs...inst var defs...class var refs...class variablesclass refsbasic inspect'	lines: #(2 5 6 9 11 14)	selections: #(inspectSelection exploreSelection referencesToSelection defsOfSelection objectReferencesToSelection copyName  browseMethodFull browseClass classHierarchy browseInstVarRefs browseInstVarDefs classVarRefs browseClassVariables browseClassRefs inspectBasic).! !!Inspector methodsFor: 'menu commands' stamp: 'sw 1/14/2000 11:45'!fieldListMenuForCollection: aMenu	^ aMenu labels: 'inspect (i)inspect element...explore (I)method refs to this inst varmethods storing into this inst varobjects pointing to this valuecopy namebrowse full (b)browse classbrowse hierarchyinst var refs...inst var defs...class var refs...class variablesclass refsbasic inspect'	lines: #(3 6 7 10 12 15)	selections: #(inspectSelection inspectElement exploreSelection referencesToSelection defsOfSelection objectReferencesToSelection copyName  browseMethodFull browseClass classHierarchy browseInstVarRefs browseInstVarDefs classVarRefs browseClassVariables browseClassRefs inspectBasic).! !!Inspector methodsFor: 'menu commands' stamp: 'sw 1/14/2000 12:19'!inspectElement	| sel selSize countString count |	"Create and schedule an Inspector on an element of the receiver's model's currently selected collection."	self selectionIndex = 0 ifTrue: [^ self changed: #flash].	((sel _ self selection) isKindOf: SequenceableCollection) ifFalse:		[^ sel inspect].	(selSize _ sel size) == 1 ifTrue: [^ sel first inspect].	selSize <= 10 ifTrue:		[count _ (SelectionMenu selections: (1 to: selSize) asArray) startUpWithCaption: 'which element?'.		count ifNil: [^ self] ifNotNil: [^ (sel at: count) inspect]].	countString _ FillInTheBlank request: 'Which element? (1 - ', selSize printString, ')' initialAnswer: '1'.	countString isEmptyOrNil ifTrue: [^ self].	count _ Integer readFrom: (ReadStream on: countString).	(count > 0 and: [count <= selSize])		ifTrue:			[(sel  at: count) inspect]		ifFalse:			[self beep]! !!Inspector methodsFor: 'menu commands' stamp: 'sw 1/14/2000 13:39'!inspectSelection	"Create and schedule an Inspector on the receiver's model's currently selected object."	self selectionIndex = 0 ifTrue: [^ self changed: #flash].	^ self selection inspect! !!MethodFinder methodsFor: 'initialize' stamp: 'sw 1/14/2000 14:03'!noteDangerous	"Remember the methods with really bad side effects."	Dangerous _ Set new."Object accessing, testing, copying, dependent access, macpal, flagging"	#(addInstanceVarNamed:withValue: haltIfNil copyAddedStateFrom: veryDeepCopy veryDeepCopyWith: veryDeepFixupWith: veryDeepInner: addDependent: evaluate:wheneverChangeIn: codeStrippedOut: playSoundNamed: isThisEverCalled isThisEverCalled: logEntry logExecution logExit)		do: [:sel | Dangerous add: sel]."Object error handling"	#(cannotInterpret: caseError confirm: confirm:orCancel: doesNotUnderstand: error: halt halt: notify: notify:at: primitiveFailed shouldNotImplement subclassResponsibility tryToDefineVariableAccess:)		do: [:sel | Dangerous add: sel]."Object user interface"	#(basicInspect beep inform: inspect inspectWithLabel: notYetImplemented inspectElement )		do: [:sel | Dangerous add: sel]."Object system primitives"	#(become: becomeForward: instVarAt:put: instVarNamed:put: nextInstance nextObject rootStubInImageSegment: someObject tryPrimitive:withArgs:)		do: [:sel | Dangerous add: sel]."Object private"	#(errorImproperStore errorNonIntegerIndex errorNotIndexable errorSubscriptBounds: mustBeBoolean primitiveError: species storeAt:inTempFrame:)		do: [:sel | Dangerous add: sel]."Object, translation support"	#(cCode: cCode:inSmalltalk: cCoerce:to: export: inline: returnTypeC: sharedCodeNamed:inCase: var:declareC:)		do: [:sel | Dangerous add: sel]."Object, objects from disk, finalization.  And UndefinedObject"	#(comeFullyUpOnReload: objectForDataStream: readDataFrom:size: rehash saveOnFile storeDataOn: actAsExecutor executor finalize retryWithGC:until:   suspend)		do: [:sel | Dangerous add: sel]."No Restrictions:   Boolean, False, True, ""Morph"	#(fullCopy copyRecordingIn:)		do: [:sel | Dangerous add: sel]."Behavior"	#(obsolete confirmRemovalOf: copyOfMethodDictionary literalScannedAs:notifying: storeLiteral:on: addSubclass: removeSubclass: superclass: "creating method dictionary" addSelector:withMethod: compile: compile:notifying: compileAll compileAllFrom: compress decompile: defaultSelectorForMethod: methodDictionary: recompile:from: recompileChanges removeSelector: compressedSourceCodeAt: selectorAtMethod:setClass: allInstances allSubInstances inspectAllInstances inspectSubInstances thoroughWhichSelectorsReferTo:special:byte: "enumerating" allInstancesDo: allSubInstancesDo: allSubclassesDo: allSuperclassesDo: selectSubclasses: selectSuperclasses: subclassesDo: withAllSubclassesDo:"user interface" allCallsOn: browse browseAllAccessesTo: browseAllCallsOn: browseAllStoresInto: "too slow->" crossReference removeUninstantiatedSubclassesSilently "too slow->" unreferencedInstanceVariables"private" becomeCompact becomeUncompact flushCache format:variable:words:pointers: format:variable:words:pointers:weak: printSubclassesOn:level: removeSelectorSimply:)		do: [:sel | Dangerous add: sel]."Others "	#("no tangible result" do: associationsDo:  "private" adaptToCollection:andSend: adaptToNumber:andSend: adaptToPoint:andSend: adaptToString:andSend: instVarAt:put: asDigitsToPower:do: combinations:atATimeDo: doWithIndex: pairsDo: permutationsDo: reverseDo: reverseWith:do: with:do: withIndexDo: asDigitsAt:in:do: combinationsAt:in:after:do: errorOutOfBounds permutationsStartingAt:do: fromUser)		do: [:sel | Dangerous add: sel].	#(    fileOutPrototype addSpareFields makeFileOutFile )		do: [:sel | Dangerous add: sel].	#(recompile:from: recompileAllFrom: recompileChanges asPrototypeWithFields: asPrototype addInstanceVarNamed:withValue: addInstanceVariable addClassVarName: removeClassVarName: findOrAddClassVarName: tryToDefineVariableAccess: instanceVariableNames: )		do: [:sel | Dangerous add: sel]. ! !!ObjectExplorer methodsFor: 'as yet unclassified' stamp: 'sw 1/14/2000 13:50'!genericMenu: aMenu	| insideObject menu |	currentSelection ifNil:		[menu _ aMenu.		menu add: '*nothing selected*' target: self selector: #yourself]	 ifNotNil:		[menu _ DumberMenuMorph new defaultTarget: self.		insideObject _ currentSelection withoutListWrapper.		menu 			add: 'explore' target: insideObject  selector: #explore;			add: 'inspect' target: insideObject  selector: #inspect;			addLine;			add: 'objects pointing to this value' target: Smalltalk  selector:  #browseAllObjectReferencesTo:except:ifNone:  argumentList: (Array with: insideObject with: #() with: nil);			addLine;			add: 'browse full' target: Browser  selector: #fullOnClass:  argument: insideObject class;			add: 'browse class' target: insideObject class  selector: #browse;			add: 'browse hierarchy' target: Utilities  selector:  #spawnHierarchyForClass:selector: argumentList: (Array with: insideObject class with: nil)].	^ menu! !Object removeSelector: #smartInspect!SequenceableCollection removeSelector: #smartInspect!Semaphore removeSelector: #smartInspect!