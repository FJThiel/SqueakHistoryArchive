'From Squeak2.9alpha of 15 June 2000 [latest update: #2472] on 5 August 2000 at 9:24:02 pm'!"Change Set:		wearCostume-swDate:			5 August 2000Author:			Scott WallaceThis update fixes several bugs that could arise when you changed a morph's 'costume' from one morph type to another.Changes the wearCostume: command (which appears in the etoy scripting system as the 'look like' tile) so that it always installs a SketchMorph, whatever kind of morph the donor may be.  Thus, only *appearance* is copied over.Viewers no longer show up-down carets inviting you to traverse the history of costumes, and the choose-new-costume items in object menus are removed.Bug-fix: when a costume-change is installed, event-handlers are now properly moved over to the new costume.Bug fix: if the identity of the morph underlying an existing halo changes (via some costume-change command, etc.) you no longer fall into a debugger."!!HaloMorph methodsFor: 'private' stamp: 'sw 7/31/2000 12:36'!startRot: evt with: rotHandle	"Initialize rotation of my target if it is rotatable."	target isFlexMorph ifFalse: 		[target isInWorld ifFalse: [self setTarget: target player costume].		target addFlexShell].	growingOrRotating _ true.	self removeAllHandlesBut: rotHandle.  "remove all other handles"	angleOffset _ evt cursorPoint - (target pointInWorld: target referencePosition).	angleOffset _ Point			r: angleOffset r			degrees: angleOffset degrees - target rotationDegrees.! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 8/3/2000 10:14'!chooseNewCostumeForArgument	"disused"	argument notNil ifTrue:		[argument assuredPlayer newCostume]! !!Player methodsFor: 'costume' stamp: 'sw 8/3/2000 10:16'!forgetOtherCostumes	self resetCostumeList.	self updateAllViewers! !!Player methodsFor: 'costume' stamp: 'sw 8/2/2000 13:47'!renderedCostume: aMorph	"Make aMorph be the receiver's rendered costume; if flexing is currently in effect, make the new morph be flexed correspondingly"	| renderedMorph known anEventHandler |	renderedMorph _ costume renderedMorph.	renderedMorph == aMorph ifTrue: [^ self].	self rememberCostume: renderedMorph.	anEventHandler _ renderedMorph eventHandler.	costume isFlexMorph		ifTrue:			[costume adjustAfter:				[costume replaceSubmorph: renderedMorph by: aMorph]]		ifFalse:			[costume owner replaceSubmorph: costume by: aMorph.			aMorph player: self.			aMorph actorState: costume actorState.			(known _ costume knownName) ifNotNil:				[aMorph setNameTo: known].			costume _ aMorph].	aMorph eventHandler: anEventHandler! !!Player methodsFor: 'costume' stamp: 'sw 8/3/2000 10:16'!resetCostumeList	costumes _ nil! !!Player methodsFor: 'costume' stamp: 'sw 8/3/2000 09:40'!wearCostumeOf: anotherPlayer	"Put on a costume similar to the one currently worn by anotherPlayer"	| itsCostume |	itsCostume _ anotherPlayer costume renderedMorph.	(itsCostume isKindOf: SketchMorph)		ifTrue:			[self wearSketchCostumeResembling: itsCostume]		ifFalse:			[self wearSketchCostumeWithForm: itsCostume imageForm using: nil].	costume layoutChanged! !!Player methodsFor: 'costume' stamp: 'sw 8/3/2000 09:37'!wearSketchCostumeResembling: aSketchMorph	^ self wearSketchCostumeWithForm: aSketchMorph form using: aSketchMorph! !!Player methodsFor: 'costume' stamp: 'sw 8/3/2000 09:49'!wearSketchCostumeWithForm: itsForm using: existingSketchMorph	|  aSketchMorph degs chgd |	((aSketchMorph _ costume renderedMorph) isKindOf: SketchMorph)		ifFalse:			[aSketchMorph _ SketchMorph new player: self].	chgd _ false.	aSketchMorph form: itsForm.	existingSketchMorph ifNotNil:		[aSketchMorph			rotationCenter: existingSketchMorph rotationCenter;			framesToDwell: existingSketchMorph framesToDwell;			rotationStyle: existingSketchMorph rotationStyle.		(existingSketchMorph rotationStyle ~~ #normal)			ifTrue:				[aSketchMorph rotationStyle: existingSketchMorph rotationStyle.				aSketchMorph rotationDegrees: existingSketchMorph rotationDegrees.				degs _ existingSketchMorph valueOfProperty: #setupAngle ifAbsent: [nil].				degs ifNotNil: [aSketchMorph setupAngle: degs].				chgd _ true]].	chgd ifTrue: [aSketchMorph layoutChanged].	self renderedCostume: aSketchMorph! !!Player methodsFor: 'misc' stamp: 'sw 8/3/2000 10:12'!thumbnailMenuEvt: anEvent forMorph: aMorph	"The mouse went down in the thumbnail of a Viewer for the receiver"	| aMenu aWorld aViewer |	aWorld _ aMorph world.	aViewer _ aMorph ownerThatIsA: Viewer.	aMenu _ MenuMorph new defaultTarget: self.	costumes ifNotNil:		[(costumes size > 1 or: [costumes size == 1 and: [costumes first ~~ costume renderedMorph]])			ifTrue:				[aMenu add: 'forget other costumes' target: self selector: #forgetOtherCostumes]].	aMenu addLine.	aMenu add: 'add a new instance variable' target: self action: #addInstanceVariable.	aMenu add: 'add a new script' target: aViewer action: #newPermanentScript.	aMenu add: 'expunge empty scripts' target: self action: #expungeEmptyScripts.	aMenu addLine.	aMenu add: 'tile representing me' action: #tearOffTileForSelf.	aMenu add: 'reveal me' target: self selector: #revealPlayerIn: argument: aWorld.	aMenu add: 'grab me' target: self selector: #grabPlayerIn: argument: aWorld.	aMenu popUpEvent: aWorld primaryHand lastEvent.	aMenu addLine.	aMenu add: 'inspect morph' target: costume selector: #inspect.	aMenu add: 'inspect player' target: self selector: #inspect.	self belongsToUniClass ifTrue:		[aMenu add: 'browse class' target: self action: #browsePlayerClass.		aMenu add: 'inspect class' target: self class action: #inspect]! !!StandardViewer methodsFor: 'as yet unclassified' stamp: 'sw 8/3/2000 10:33'!addHeaderMorphWithBarHeight: anInteger includeDismissButton: aBoolean	| header aFont aButton aTextMorph nail headWrapper inner |	header _ AlignmentMorph newRow color: self color muchLighter; centering: #center.	aFont _ Preferences standardButtonFont.	aBoolean ifTrue:		[header addMorph: (aButton _ SimpleButtonMorph new label: 'X' font: aFont).		aButton target: self;				color:  Color lightRed;				actionSelector: #dismiss;				setBalloonText: 'Delete this entire Viewer'.		header addTransparentSpacerOfSize: 4@1].	aButton _ IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: #AddCategoryViewer); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addCategoryViewer;			setBalloonText: 'click here to addanother category pane';			shedSelvedge.	header addMorphBack: aButton.	header addTransparentSpacerOfSize: 4@1.	(self hasProperty: #noInteriorThumbnail)		ifFalse:			[nail _ ThumbnailMorph new objectToView: scriptedPlayer viewSelector: #costume]		ifTrue:			[inner _ ImageMorph new image: (ScriptingSystem formAtKey: 'Menu').			nail _ RectangleMorph new beTransparent extent: inner extent.			nail addMorph: inner lock].	nail on: #mouseDown send: #thumbnailMenuEvt:forMorph: to: scriptedPlayer.	header addMorphBack: nail.	nail setBalloonText: 'click here to get a menuthat will allow you toadd an instance variable,,tear off a tile, etc..'.	(self hasProperty: #noInteriorThumbnail)		ifFalse:			[nail borderWidth: 3; borderColor: #raised].	header addTransparentSpacerOfSize: 5@5."	aButton _ SimpleButtonMorph new target: self; actionSelector: #newEmptyScript; label: 'S' font: (aFont _ StrikeFont familyName: #ComicBold size: 16);  color: Color transparent; borderWidth: 0; actWhen: #buttonDown.	aButton setBalloonText: 'drag from here tocreate a new scriptfor this object'.		header addMorphBack: aButton.	header addTransparentSpacerOfSize: 8@5.	aButton _ SimpleButtonMorph new target: scriptedPlayer; actionSelector: #addInstanceVariable; label: 'I' font: aFont;  color: Color transparent; borderWidth: 0; actWhen: #buttonUp.	aButton setBalloonText: 'click here to addan instance variableto this object.'.	header addMorphBack: aButton.	header addTransparentSpacerOfSize: 5@5."	scriptedPlayer costume assureExternalName.	aTextMorph _ UpdatingStringMorph new		useStringFormat;		target:  scriptedPlayer;		getSelector: #getName;		putSelector: #setName:;		setNameTo: 'name';		font: ScriptingSystem fontForNameEditingInScriptor.	aTextMorph setProperty: #okToTextEdit toValue: true.	aTextMorph step.	header  addMorphBack: aTextMorph.	aTextMorph setBalloonText: 'Click here to edit the player''s name.'.		header beSticky.	anInteger > 0		ifTrue:			[headWrapper _ AlignmentMorph newColumn color: self color.			headWrapper addTransparentSpacerOfSize: (0 @ anInteger).			headWrapper addMorphBack: header.			self addMorph: headWrapper]		ifFalse:			[self addMorph: header]! !"Postscript:"Player allSubInstancesDo: [:aPlayer | aPlayer resetCostumeList].!