'From Squeak3.6beta of ''4 July 2003'' [latest update: #5411] on 9 September 2003 at 6:28:45 pm'!"Change Set:		MailMessageAccentedDate:			6 September 2003Author:			Mike RutenbergMakes MailMessage properly display accented characters which are part of an email message, especially text message body, HTML message body, text header lines, and header lines encoded with mime."!!MailMessage methodsFor: 'printing/formatting' stamp: 'ads 9/6/2003 11:58'!bodyTextFormatted	"Answer a version of the text in my body suitable for display.  This will parse multipart forms, decode HTML, and other such things"	"check for multipart"	self body isMultipart ifTrue: [		"check for alternative forms"		self body isMultipartAlternative ifTrue: [			"it's multipart/alternative.  search for a part that we can display, biasing towards nicer formats"			#('text/html' 'text/plain') do: [ :format |				self parts do: [ :part |					part body contentType = format ifTrue: [ ^part bodyTextFormatted ] ] ].			"couldn't find a desirable part to display; just display the first part"			^self parts first bodyTextFormatted ].		"not alternative parts.  put something for each part"		^Text streamContents: [ :str |			self parts do: [ :part |				((#('text' 'multipart') includes: part body mainType) or: 					[ part body contentType = 'message/rfc822'])				ifTrue: [					"try to inline the message part"					str nextPutAll: part bodyTextFormatted. ]				ifFalse: [ 					|descript |					str cr.					descript := part name ifNil: [ 'attachment' ].					str nextPutAll: (Text string: '[', descript, ']'  attribute: (TextMessageLink message: part)). ] ] ]. ].	"check for HTML"	(self body contentType = 'text/html') ifTrue: [		Smalltalk at: #HtmlParser ifPresentAndInMemory: [ :htmlParser |			^(htmlParser parse: (ReadStream on: body content)) formattedText		]	].	"check for an embedded message"	self body contentType = 'message/rfc822' ifTrue: [		^(MailMessage from: self body content) formattedText ].	"nothing special--just return the text"	^body content isoToSqueak.! !!MailMessage methodsFor: 'printing/formatting' stamp: 'mdr 10/24/2001 18:14'!cleanedHeader	"Reply with a cleaned up version email header.  First show fields people would normally want to see (in a regular order for easy browsing), and then any other fields not explictly excluded"	| new priorityFields omittedFields |	new _ WriteStream on: (String new: text size).	priorityFields _ #('Date' 'From' 'Subject' 'To' 'Cc').	omittedFields _ MailMessage omittedHeaderFields.	"Show the priority fields first, in the order given in priorityFields"	priorityFields do: [ :pField |		"We don't check whether the priority field is in the omitted list!!"		self headerFieldsNamed: pField do:			[: fValue | new nextPutAll: pField, ': ', fValue decodeMimeHeader isoToSqueak; cr]].	"Show the rest of the fields, omitting the uninteresting ones and ones we have already shown"	omittedFields _ omittedFields, priorityFields.	self fieldsFrom: (ReadStream on: text) do:		[: fName : fValue |		((fName beginsWith: 'x-') or:			[omittedFields anySatisfy: [: omitted | fName sameAs: omitted]])				ifFalse: [new nextPutAll: fName, ': ', fValue; cr]].	^new contents! !