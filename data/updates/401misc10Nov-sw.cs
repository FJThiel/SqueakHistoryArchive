'From Squeak 2.2 of Sept 23, 1998 on 10 November 1998 at 6:46:01 pm'!"Change Set:		misc10Nov-swDate:			10 November 1998Author:			Scott Wallace*  Offer costume-appropriate script categories in viewer even when costume is flexed.*  Don't try to project a viewer into a palette that is not currently in world*  Make change-costume work even when the object's parent is not a PasteUpMorph*  Offer 'cursor' and 'valueAtCursor' in Viewer for PasteUpMorphs*  Don't fail on first attempt to create custom parts bin."!!Player methodsFor: 'costume' stamp: 'sw 11/10/1998 15:43'!hasCostumeOfClass: aClass	(costume renderedMorph class == aClass) ifTrue: [^ true].	costumes ifNotNil:		[costumes do:			[:aCostume | (aCostume class  == aClass)				ifTrue:					[^ true]]].	^ false! !!Player methodsFor: 'costume' stamp: 'sw 11/10/1998 17:03'!renderedCostume: aMorph	"Make aMorph be the receiver's rendered costume; if flexing is currently in effect, make the new morph be flexed correspondingly"	| renderedMorph |	renderedMorph _ costume renderedMorph.	renderedMorph == aMorph ifTrue: [^ self].	self rememberCostume: renderedMorph.	costume isFlexMorph		ifTrue:			[costume adjustAfter:				[costume replaceSubmorph: renderedMorph by: aMorph]]		ifFalse:			[costume owner replaceSubmorph: costume by: aMorph.			aMorph player: self.			aMorph actorState: costume actorState.			aMorph setNameTo: costume knownName.			costume _ aMorph]! !!Player methodsFor: 'slots-kernel' stamp: 'sw 11/10/1998 17:23'!tilePhrasesSpecsForCategory: aCategory	"Return an array of slot and script names and info for use in a viewer on the receiver.  These can be of two flavors - script and slot.		(slot		heading		number				readWrite	getHeading		setHeading:)		(script		command 	wearCostumeOf: 	player)"	| aList nameString |	(aCategory = 'instance variables') ifTrue:		[^ self slotNames collect: [:aName |		nameString _ aName asString capitalized.		Array			with:	#slot			with: 	aName 								"name"			with: 	(self typeForSlot: aName asSymbol)	"type"			with:	#readWrite							"r/w"			with:	('get', nameString) asSymbol		"get selector"			with:	('set', nameString, ':') asSymbol]].	"set selector"	(aCategory = 'scripts') ifTrue:		[^ self tileScriptCommands].	(aCategory = 'basic') ifTrue:		[aList _ #((slot x) (slot y) (slot heading) (slot colorUnder) (script forward:) (script turn:) (script beep:))].	(aCategory = 'tests') ifTrue:		[aList _ #((slot isOverColor) (slot isUnderMouse) (slot colorSees) )].	(aCategory = 'color & border') ifTrue:		[aList _ #((slot color) (slot colorUnder) (slot borderColor) (slot borderWidth))].	(aCategory = 'geometry') ifTrue:		[aList _ #((slot left) (slot right) (slot top) (slot bottom) (slot width) (slot height) (slot x) (slot y) (slot heading))].	(aCategory = 'miscellaneous') ifTrue:		[aList _ #((script show) (script hide) (script wearCostumeOf:) (script startScript:) (script stopScript:) (script pauseScript:))]. 	(aCategory = 'motion') ifTrue:		[aList _ #((slot x) (slot y) (slot heading) (script forward:) (script moveToward:) (script turn:) (script bounce:) (script wrap) (script goToRightOf:))].	(aCategory = 'pen trails') ifTrue:		[aList _ #((script liftAllPens) (script lowerAllPens) (script clearTurtleTrails))].	(aCategory = 'pen use') ifTrue:		[aList _ #((slot penColor) (slot penSize) (slot penDown))].	(aCategory = 'card/stack') ifTrue:		[aList _ #((script goToNextCard) (script goToPreviousCard) (script deleteCard) (script newCard))].	(aCategory = 'joystick') ifTrue:		[aList _ #((slot amount) (slot angle) (slot leftRight) (slot upDown))].	(aCategory = 'playfield') ifTrue:		[aList _ #((script initiatePainting) (slot cursor) (slot valueAtCursor) (slot mouseX) (slot mouseY))].	(aCategory = 'book navigation') ifTrue:		[aList _ #((script nextPage) (script previousPage) (script firstPage) (script lastPage) (script goto:))].	aList ifNil:		[^ (Player organization categories includes: aCategory)			ifTrue:				[self tilePhraseSpecsForPlayerCategory: aCategory]			ifFalse:				[self error: 'faulty category: ', aCategory.				Array new]].	^ aList collect: [:aPair | self phraseSpecFor: aPair]! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 11/10/1998 17:57'!standardPartsWindow	| aPartsWindow aWorld |	aPartsWindow _ ScriptingSystem newStandardPartsBin wrappedInPartsWindowWithTitle: 'Standard Parts'.	aWorld _ (associatedMorph == nil or: [associatedMorph isInWorld not])		ifTrue:		[World]		ifFalse:		[associatedMorph world].	aWorld addMorph: aPartsWindow.  "So that closeEditing won't bomb"	aPartsWindow closeEditing.  "a bit redundant but gets the last details right"	^ aPartsWindow! !!Presenter methodsFor: 'viewer' stamp: 'sw 11/10/1998 15:36'!viewMorph: aMorph	| aPlayer aViewer aPalette |	Sensor leftShiftDown ifFalse:		[((aPalette _ aMorph standardPalette) ~~ nil and: [aPalette isInWorld])			ifTrue:	[^ aPalette viewMorph: aMorph]].	aPlayer _ aMorph assuredPlayer.	associatedMorph addMorph: (aViewer _ self nascentPartsViewer).	aViewer setPlayer: aPlayer.	self harmonizeTileColorPolicyFor: aViewer.	aMorph primaryHand attachMorph: (aViewer visible: true)! !!StandardScriptingSystem methodsFor: 'universal slots & scripts' stamp: 'sw 11/10/1998 17:39'!initStandardSlotInfo	"ScriptingSystem initStandardSlotInfo"	StandardSlotInfo _ Dictionary new.	#((color			color		readWrite	getColor				setColor:)	(borderWidth 	number		readWrite	getBorderWidth	setBorderWidth:)	(borderColor		color		readWrite	getBorderColor	setBorderColor:)		(leftRight	number		readOnly	getLeftRight				unused)		(upDown	number		readOnly	getUpDown				unused)		(angle		number		readOnly	getAngle				unused)		(amount	number		readOnly	getAmount				unused)		(mouseX			number		readOnly	getMouseX			unused)		(mouseY		number		readOnly	getMouseY			unused)		(cursor 			number		readWrite	getCursor			setCursor:)		(valueAtCursor	player		readOnly	getValueAtCursor	unused)		(rotationStyle	rotationStyle									readWrite	getRotationStyle		setRotationStyle:)		(heading	number		readWrite	getHeading			setHeading:)		(x 			number		readWrite	getX					setX:)		(y			number		readWrite	getY				setY:)		(colorUnder	color		readOnly	getColorUnder		unused)		(penDown	boolean		readWrite	getPenDown			setPenDown:)		(penColor	color		readWrite	getPenColor			setPenColor:)		(penSize 	number		readWrite	getPenSize			setPenSize:)		(isOverColor	boolean		readOnly	dummy				unused)		(colorSees	boolean		readOnly	dummy				unused)		(isUnderMouse					boolean		readOnly	getIsUnderMouse		unused)		(scaleFactor	number		readWrite	getScaleFactor		setScaleFactor:)		(width 		number		readWrite	getWidth			setWidth:)		(height 		number		readWrite	getHeight			setHeight:)		(left 		number		readWrite	getLeft				setLeft:)		(right 		number		readWrite	getRight			setRight:)		(top 		number		readWrite	getTop				setTop:)		(bottom 		number		readWrite	getBottom			setBottom:))	do:		[:anArray | StandardSlotInfo at: anArray first put: anArray]! !!StandardScriptingSystem methodsFor: 'tile colors' stamp: 'sw 11/10/1998 18:18'!brightColorForType: typeSymbol	^ (TypeColorDictionary		at: typeSymbol asSymbol		ifAbsent: [^ Color magenta]) at: 2! !"Postscript:"ScriptingSystem initStandardSlotInfo.!