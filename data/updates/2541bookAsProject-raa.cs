'From Squeak2.9alpha of 17 July 2000 [latest update: #2538] on 30 August 2000 at 3:39:27 pm'!"Change Set:		bookAsProjectDate:			23 August 2000Author:			Bob Arning- added full-screen option to BookMorph. When in full-screen mode, there is a set of page controls floating in front of the book.- reverted BookMorph pageSize to 160@300 from 1060@800- changed internal title in ProjectViewMorph to Helvetica and changed rectangular background to more of a drop-shadow- changed URLMorph to add a TextMorph rather than a StringMorph in response to change label... This will allow the user to make prettier bookmarks.- changed ProjectNavigatorMorph to remember user's preference for top vs. bottom edge"!AlignmentMorph subclass: #FloatingBookControlsMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!BooklikeMorph methodsFor: 'misc' stamp: 'RAA 8/23/2000 12:19'!showingFullScreenString	^ self isInFullScreenMode		ifTrue:			['exit full screen']		ifFalse:			['show full screen']! !!BookMorph methodsFor: 'initialization' stamp: 'RAA 8/24/2000 13:43'!setInitialState	orientation _ #vertical.	centering _ #topLeft.	hResizing _ #shrinkWrap.	vResizing _ #shrinkWrap.	inset _ 5.	color _ Color white.							"pageSize _ 1060@800."	pageSize _ 160@300.		"back to the original since the pother was way too big"	self enableDragNDrop! !!BookMorph methodsFor: 'navigation' stamp: 'RAA 8/23/2000 12:48'!buildFloatingPageControls	| pageControls |	pageControls _ self makePageControlsFrom: self fullControlSpecs.	pageControls borderWidth: 0; inset: 4.	pageControls  setProperty: #pageControl toValue: true.	pageControls setNameTo: 'Page Controls'.	pageControls color: Color yellow.	^FloatingBookControlsMorph new addMorph: pageControls.! !!BookMorph methodsFor: 'navigation' stamp: 'RAA 8/23/2000 13:01'!goToPageMorph: newPage transitionSpec: transitionSpec	| pageIndex aWorld oldPageIndex ascending tSpec readIn |	pages isEmpty ifTrue: [^ self].	self setProperty: #searchContainer toValue: nil.	"forget previous search"	self setProperty: #searchOffset toValue: nil.	self setProperty: #searchKey toValue: nil.	pageIndex _ pages identityIndexOf: newPage ifAbsent: [^ self "abort"].	readIn _ newPage isInMemory not.	oldPageIndex _ pages identityIndexOf: currentPage ifAbsent: [nil].	ascending _ ((oldPageIndex == nil) or: [newPage == currentPage])			ifTrue: [nil]			ifFalse: [oldPageIndex < pageIndex].	tSpec _ transitionSpec ifNil:  "If transition not specified by requestor..."		[newPage valueOfProperty: #transitionSpec  " ... then consult new page"			ifAbsent: [self transitionSpecFor: self  " ... otherwise this is the default"]].	(aWorld _ self world) ifNotNil:		[self primaryHand newKeyboardFocus: nil].	currentPage ifNotNil: [currentPage updateCachedThumbnail].	self currentPage ~~ nil		ifTrue:		[(((pages at: pageIndex) owner isKindOf: TransitionMorph)			and: [(pages at: pageIndex) isInWorld])			ifTrue: [^ self  "In the process of a prior pageTurn"].		self currentPlayerDo: [:aPlayer | aPlayer runAllClosingScripts].		ascending ifNotNil:			["Show appropriate page transition and start new page when done"			currentPage stopStepping.			(pages at: pageIndex) position: currentPage position.			^ (TransitionMorph					effect: tSpec second					direction: tSpec third					inverse: (ascending or: [transitionSpec notNil]) not)				showTransitionFrom: currentPage				to: (pages at: pageIndex)				in: self				whenStart: [self playPageFlipSound: tSpec first]				whenDone:					[currentPage delete; fullReleaseCachedState.					self addMorphBack: (currentPage _ pages at: pageIndex).					self adjustCurrentPageForFullScreen.					self snapToEdgeIfAppropriate.					aWorld ifNotNil: [self world startSteppingSubmorphsOf: currentPage].					self currentPlayerDo: [:aPlayer | aPlayer runAllOpeningScripts].					(aWorld _ self world) ifNotNil: ["WHY??" aWorld displayWorld].					readIn ifTrue: [currentPage updateThumbnailUrlInBook: self url.						currentPage sqkPage computeThumbnail].	"just store it"					]].		"No transition, but at least decommission current page"		currentPage delete; fullReleaseCachedState].	self addMorphBack: (currentPage _ pages at: pageIndex).	self adjustCurrentPageForFullScreen.	self snapToEdgeIfAppropriate.	aWorld ifNotNil: [self world startSteppingSubmorphsOf: currentPage].	self currentPlayerDo: [:aPlayer | aPlayer runAllOpeningScripts].	(aWorld _ self world) ifNotNil: ["WHY??" aWorld displayWorld].	readIn ifTrue: [currentPage updateThumbnailUrl.		currentPage sqkPage computeThumbnail].	"just store it"! !!BookMorph methodsFor: 'menu' stamp: 'RAA 8/23/2000 12:14'!addBookMenuItemsTo: aMenu hand: aHandMorph	| controlsShowing subMenu |	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'previous page' action: #previousPage.	subMenu add: 'next page' action: #nextPage.	subMenu add: 'goto page' action: #goToPage.	subMenu add: 'insert a page' action: #insertPage.	subMenu add: 'delete this page' action: #deletePage.	controlsShowing _ self hasSubmorphWithProperty: #pageControl.	controlsShowing		ifTrue:			[subMenu add: 'hide page controls' action: #hidePageControls.			subMenu add: 'fewer page controls' action: #fewerPageControls]		ifFalse:			[subMenu add: 'show page controls' action: #showPageControls].	self isInFullScreenMode ifTrue: [		subMenu add: 'exit full screen' action: #exitFullScreen.	] ifFalse: [		subMenu add: 'show full screen' action: #goFullScreen.	].	subMenu addLine.	subMenu add: 'sound effect for all pages' action: #menuPageSoundForAll:.	subMenu add: 'sound effect this page only' action: #menuPageSoundForThisPage:.	subMenu add: 'visual effect for all pages' action: #menuPageVisualForAll:.	subMenu add: 'visual effect this page only' action: #menuPageVisualForThisPage:.	subMenu addLine.	subMenu add: 'sort pages' action: #sortPages:.	subMenu add: 'uncache page sorter' action: #uncachePageSorter.	(self hasProperty: #dontWrapAtEnd)		ifTrue: [subMenu add: 'wrap after last page' selector: #setWrapPages: argument: true]		ifFalse: [subMenu add: 'stop at last page' selector: #setWrapPages: argument: false].	subMenu addLine.	subMenu add: 'search for text' action: #textSearch.	(aHandMorph classOfPasteBuffer isKindOf: PasteUpMorph class) ifTrue:		[subMenu add: 'paste book page'	action: #pasteBookPage].	subMenu add: 'send all pages to server' action: #savePagesOnURL.	subMenu add: 'send this page to server' action: #saveOneOnURL.	subMenu add: 'reload all from server' action: #reload.	subMenu add: 'copy page url to clipboard' action: #copyUrl.	subMenu add: 'keep in one file' action: #keepTogether.	subMenu add: 'save as new-page prototype' action: #setNewPagePrototype.	newPagePrototype ifNotNil:		[subMenu add: 'clear new-page prototype' action: #clearNewPagePrototype].	aMenu add: 'book...' subMenu: subMenu! !!BookMorph methodsFor: 'menu' stamp: 'RAA 8/23/2000 12:21'!invokeBookMenu	"Invoke the book's control panel menu."	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'find...' action: #textSearch.	aMenu add: 'go to page...' action: #goToPage.	aMenu addLine.	aMenu addList:		#(('sort pages'			sortPages)		('uncache page sorter'	uncachePageSorter)).	(self hasProperty: #dontWrapAtEnd)		ifTrue: [aMenu add: 'wrap after last page' selector: #setWrapPages: argument: true]		ifFalse: [aMenu add: 'stop at last page' selector: #setWrapPages: argument: false].	aMenu addList:		#(('make bookmark'		bookmarkForThisPage)		('make thumbnail'		thumbnailForThisPage)).	aMenu addUpdating: #showingPageControlsString action: #toggleShowingOfPageControls.	aMenu addUpdating: #showingFullScreenString action: #toggleFullScreen.	aMenu addLine.	aMenu add: 'sound effect for all pages' action: #menuPageSoundForAll:.	aMenu add: 'sound effect this page only' action: #menuPageSoundForThisPage:.	aMenu add: 'visual effect for all pages' action: #menuPageVisualForAll:.	aMenu add: 'visual effect this page only' action: #menuPageVisualForThisPage:.	aMenu addLine.	(self primaryHand classOfPasteBuffer isKindOf: PasteUpMorph class) ifTrue:		[aMenu add: 'paste book page'   action: #pasteBookPage].	aMenu add: 'save as new-page prototype' action: #setNewPagePrototype.	newPagePrototype ifNotNil: [		aMenu add: 'clear new-page prototype' action: #clearNewPagePrototype].	aMenu add: (self dragNDropEnabled ifTrue: ['close'] ifFalse: ['open']) , ' dragNdrop'			action: #toggleDragNDrop.	aMenu add: 'make all pages this size' action: #makeUniformPageSize.	aMenu add: 'send all pages to server' action: #savePagesOnURL.	aMenu add: 'send this page to server' action: #saveOneOnURL.	aMenu add: 'reload all from server' action: #reload.	aMenu add: 'copy page url to clipboard' action: #copyUrl.	aMenu add: 'keep in one file' action: #keepTogether.	aMenu addLine.	aMenu add: 'load PPT images from slide #1' action: #loadImagesIntoBook.	aMenu add: 'background color for all pages...' action: #setPageColor.	aMenu popUpEvent: self world activeHand lastEvent in: self world! !!BookMorph methodsFor: 'menu' stamp: 'RAA 8/23/2000 12:20'!toggleFullScreen	self isInFullScreenMode		ifTrue:	[self exitFullScreen]		ifFalse:	[self goFullScreen]! !!BookMorph methodsFor: 'other' stamp: 'RAA 8/23/2000 13:02'!adjustCurrentPageForFullScreen	self isInFullScreenMode ifTrue: [		(currentPage hasProperty: #sizeWhenNotFullScreen) ifFalse: [			currentPage setProperty: #sizeWhenNotFullScreen toValue: currentPage extent.		].		currentPage extent: Display extent.	] ifFalse: [		(currentPage hasProperty: #sizeWhenNotFullScreen) ifTrue: [			currentPage extent: (currentPage valueOfProperty: #sizeWhenNotFullScreen).			currentPage removeProperty: #sizeWhenNotFullScreen.		].	].! !!BookMorph methodsFor: 'other' stamp: 'RAA 8/23/2000 12:43'!exitFullScreen	| floater |	self isInFullScreenMode ifFalse: [^self].	self setProperty: #fullScreenMode toValue: false.	floater _ self valueOfProperty: #floatingPageControls ifAbsent: [nil].	floater ifNotNil: [		floater delete.		self removeProperty: #floatingPageControls.	].	self position: 0@0.	self adjustCurrentPageForFullScreen.! !!BookMorph methodsFor: 'other' stamp: 'RAA 8/23/2000 12:42'!goFullScreen	| floater |	self isInFullScreenMode ifTrue: [^self].	self setProperty: #fullScreenMode toValue: true.	self position: (currentPage topLeft - self topLeft) negated.	self adjustCurrentPageForFullScreen.	floater _ self buildFloatingPageControls.	self setProperty: #floatingPageControls toValue: floater.	floater openInWorld.! !!BookMorph methodsFor: 'other' stamp: 'RAA 8/23/2000 11:58'!isInFullScreenMode	^self valueOfProperty: #fullScreenMode ifAbsent: [false]! !!FloatingBookControlsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/23/2000 12:50'!initialize	super initialize.	borderWidth _ 1.	borderColor _ Color black.	inset _ 0.	hResizing _ vResizing _ #shrinkWrap.! !!FloatingBookControlsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/23/2000 12:47'!morphicLayerNumber	"helpful for insuring some morphs always appear in front of or behind others.	smaller numbers are in front"	^23		"page controls are behind menus and balloons, but in front of most other stuff"! !!FloatingBookControlsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/23/2000 12:48'!step	owner == self world ifFalse: [^ self].	owner addMorphInLayer: self.! !!FloatingBookControlsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/23/2000 12:47'!stepTime	^1000! !!FloatingBookControlsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/23/2000 12:47'!wantsSteps	^true! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/30/2000 15:32'!fullScreenOff	self setProperty: #showingFullScreenMode toValue: false.	ScreenController new fullScreenOff.	self removeProperty: #currentNavigatorVersion.	mouseInside _ false.! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/30/2000 15:32'!fullScreenOn	self setProperty: #showingFullScreenMode toValue: true.	ScreenController new fullScreenOn.	self removeProperty: #currentNavigatorVersion.	mouseInside _ false.! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/30/2000 15:30'!justDroppedInto: aMorph event: anEvent	self setProperty: #stickToTop toValue: nil.	self positionVertically.! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/30/2000 15:30'!positionVertically	| wb stickToTop |	wb _ self worldBounds.	stickToTop _ self valueOfProperty: #stickToTop.	stickToTop ifNil: [		stickToTop _ (self top - wb top) abs < (self bottom - wb bottom) abs.		self setProperty: #stickToTop toValue: stickToTop.	].	mouseInside == true ifTrue: [		stickToTop ifTrue: [			self top: wb top		] ifFalse: [			self bottom: wb bottom		].	] ifFalse: [		stickToTop ifTrue: [			self bottom: wb top + 8		] ifFalse: [			self top: wb bottom - 8		].	].! !!ProjectViewMorph methodsFor: 'drawing' stamp: 'RAA 8/29/2000 17:14'!drawOn: aCanvas	| projectName nameForm rectForName font negOne |	self ensureImageReady.	super drawOn: aCanvas.	font _ ((TextStyle named: #Helvetica) ifNil: [TextStyle default]) fontOfSize: 13.	projectName _ self safeProjectName.	nameForm _ (StringMorph contents: projectName font: font) imageForm.	nameForm _ nameForm scaledToSize: (self extent - (4@2) min: nameForm extent).	rectForName _ self bottomLeft + 			(self width - nameForm width // 2 @ (nameForm height + 2) negated)				extent: nameForm extent.	negOne _ 1 negated.	rectForName topLeft eightNeighbors do: [ :pt |		aCanvas			stencil: nameForm 			at: pt			color: Color white.	].	aCanvas		stencil: nameForm 		at: rectForName topLeft 		color: Color black.	! !!URLMorph methodsFor: 'private' stamp: 'RAA 8/30/2000 11:56'!label: aString font: aFontOrNil	| oldLabel m aFont |	(oldLabel _ self findA: StringMorph)		ifNotNil: [oldLabel delete].	(oldLabel _ self findA: TextMorph)		ifNotNil: [oldLabel delete].	aFont _ aFontOrNil ifNil: [Preferences standardButtonFont].	m _ TextMorph new contents: aString; beAllFont: aFont.	self extent: (m width + 6) @ (m height + 6).	m position: self center - (m extent // 2).	self addMorph: m.	m lock! !