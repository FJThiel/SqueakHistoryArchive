'From Squeak2.8alpha of 12 January 2000 [latest update: #2139] on 16 May 2000 at 9:54:35 am'!"Change Set:		FileMenuFix2Date:			16 May 2000Author:			Dan IngallsFixes the FileList pattern matching so that the pattern is not reset whenever you change directories, and so that the pattern is only applied to file names, not folder names.Also includes a couple of changes from Tobias Isenberg."!!FileList methodsFor: 'initialization' stamp: 'di 5/16/2000 09:42'!directory: dir	"Set the path of the volume to be displayed."	self okToChange ifFalse: [^ self].	self modelSleep.	directory _ dir.	self modelWakeUp.	sortMode == nil ifTrue: [sortMode _ #date].	volList _ ((Array with: '[]'), directory pathParts)  "Nesting suggestion from RvL"			withIndexCollect: [:each :i | ( String new: i-1 withAll: $ ), each].	self changed: #relabel.	self changed: #volumeList.	self pattern: pattern! !!FileList methodsFor: 'volume list and pattern' stamp: 'di 5/16/2000 09:48'!listForPattern: pat	"Make the list be those file names which match the pattern."	| entries sizePad newList allFiles sortBlock |	entries _ directory entries.	sizePad _ (entries inject: 0 into: [:mx :entry | mx max: (entry at: 5)])					asStringWithCommas size - 1.	"create block to decide what order to display the entries"	sortBlock _ [ :x :y |			(x isDirectory = y isDirectory) 				ifTrue: [  					"sort by user-specified criterion"					sortMode = #name 						ifTrue: [(x name compare: y name) <= 2]						ifFalse: [ sortMode = #date							ifTrue: [ x modificationTime = y modificationTime									ifTrue: [ (x name compare: y name) <= 2 ]									ifFalse: [ x modificationTime > y modificationTime ] ]							ifFalse: [ "size"								x fileSize = y fileSize 									ifTrue: [ (x name compare: y name) <= 2 ]									ifFalse: [ x fileSize > y fileSize ] ] ] ]				ifFalse: [					"directories always precede files"					x isDirectory ] ].	newList _ (SortedCollection new: 30) sortBlock: sortBlock.	allFiles _ pat = '*'.	entries do:		[:entry | "<dirflag><name><creationTime><modificationTime><fileSize>"		(allFiles or: [entry isDirectory or: [pat match: entry first]]) ifTrue:			[newList add: entry]].	newList _ newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList asArray ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	^ newList asArray.! !!PluggableFileList methodsFor: 'file list menu' stamp: 'di 5/16/2000 09:49'!listForPattern: pat	"Make the list be those file names which match the pattern."	| entries sizePad newList allFiles sortBlock |	entries _ directory entries select: fileFilterBlock.	sizePad _ (entries inject: 0 into: [:mx :entry | mx max: (entry at: 5)])					asStringWithCommas size - 1.	"create block to decide what order to display the entries"	sortBlock _ [ :x :y |			(x isDirectory = y isDirectory) 				ifTrue: [  					"sort by user-specified criterion"					sortMode = #name 						ifTrue: [(x name compare: y name) <= 2]						ifFalse: [ sortMode = #date							ifTrue: [ x modificationTime = y modificationTime									ifTrue: [ (x name compare: y name) <= 2 ]									ifFalse: [ x modificationTime > y modificationTime ] ]							ifFalse: [ "size"								x fileSize = y fileSize 									ifTrue: [ (x name compare: y name) <= 2 ]									ifFalse: [ x fileSize > y fileSize ] ] ] ]				ifFalse: [					"directories always precede files"					x isDirectory ] ].	newList _ (SortedCollection new: 30) sortBlock: sortBlock.	allFiles _ pat = '*'.	entries do:		[:entry | "<dirflag><name><creationTime><modificationTime><fileSize>"		(allFiles or: [entry isDirectory or: [pat match: entry first]]) ifTrue:			[newList add: entry]].	newList _ newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList asArray ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	newFiles _ OrderedCollection new.	^ newList asArray.! !!StandardFileMenu methodsFor: 'menu building' stamp: 'ti 5/10/2000 11:18'!menuLinesArray: aDirectory"Answer a menu lines object corresponding to aDirectory"	| typeCount nameCnt |	typeCount _ canTypeFileName 		ifTrue: [1] 		ifFalse: [0].	nameCnt _ aDirectory directoryNames size.	^Array streamContents: [:s |		canTypeFileName ifTrue: [s nextPut: 1].		s nextPut: aDirectory pathParts size + typeCount + 1.		s nextPut: aDirectory pathParts size + 					nameCnt + typeCount + 1]! !!StandardFileMenu methodsFor: 'private'!oldFileFrom: aDirectory withPattern: aPattern	canTypeFileName _ false.	pattern _ aPattern.	^self makeFileMenuFor: aDirectory! !!StandardFileMenu class methodsFor: 'instance creation'!oldFileMenu: aDirectory withPattern: aPattern	World ifNil: [^PluggableFileList oldFileMenu: aDirectory].	^super new oldFileFrom: aDirectory withPattern: aPattern! !