'From Squeak3.5 of ''11 April 2003'' [latest update: #5180] on 12 May 2003 at 8:04:21 pm'!"Change Set:		ValidateSubclassFormatFixDate:			2 April 2003Author:			Brent VukmerFollowing Tim Rowledge's hint, I put added a little bit of 'typeOfClass' logic to ClassBuilder>>validateSubclassFormat:from:forSuper:extra:.  Actually, I put the logic inside a new method: ClassBuilder>>validateSubclass:canKeepLayoutFrom:forSubclassFormat:.  If the subClass is 'weak' and the superclass is 'variable', then the ClassBuilder should proceed with its bidness. "!!ClassBuilder methodsFor: 'validation' stamp: 'bkv 4/2/2003 17:13'!validateSubclass: subclass canKeepLayoutFrom: oldClass forSubclassFormat: newType 	"Returns whether the immediate subclasses of oldClass can keep its layout"	"Note: Squeak does not appear to model classFormat relationships.. so I'm putting some logic here. bkv 4/2/2003"	 "isWeak implies isVariant"						 (oldClass isVariable and: [ subclass isWeak ])		ifFalse: [ "In general we discourage format mis-matches"				  (subclass typeOfClass == newType) 				   	ifFalse: [ self error: subclass name,' cannot be recompiled'.							  ^ false ]].	^ true! !!ClassBuilder methodsFor: 'validation' stamp: 'bkv 4/2/2003 17:19'!validateSubclassFormat: newType from: oldClass forSuper: newSuper extra: newInstSize	"Validate the # of instVars and the format of the subclasses"	| deltaSize |	oldClass == nil ifTrue: [^ true]. "No subclasses"	"Compute the # of instvars needed for all subclasses"	deltaSize _ newInstSize.	(oldClass notNil)		ifTrue: [deltaSize _ deltaSize - oldClass instVarNames size].	(newSuper notNil)		ifTrue: [deltaSize _ deltaSize + newSuper instSize].	(oldClass notNil and: [oldClass superclass notNil]) 		ifTrue: [deltaSize _ deltaSize - oldClass superclass instSize].	(oldClass == nil)		 ifTrue: [ (deltaSize > 254)					ifTrue: [ self error: 'More than 254 instance variables'.							^ false].				  ^ true].	oldClass withAllSubclassesDo: [:sub |  ( sub instSize + deltaSize > 254 )											ifTrue: [ self error: sub name,' has more than 254 instance variables'.					 								^ false].										"If we get this far, check whether the immediate subclasses of oldClass can keep its layout."               							(newType ~~ #normal) 											ifTrue: [ self validateSubclass: sub canKeepLayoutFrom: oldClass forSubclassFormat: newType ]].	^ true! !