'From Squeak3.6 of ''6 October 2003'' [latest update: #5424] on 17 January 2004 at 12:37:31 pm'!"Change Set:		shadowed-mirDate:			17 January 2004Author:			Michael RuegerMakes the recompile provide sueful information about where a variable is shadowed."!!Parser methodsFor: 'expression types' stamp: 'mir 1/17/2004 12:27'!temporariesIn: methodSelector	" [ '|' (variable)* '|' ]"	| vars theActualText |	(self match: #verticalBar) ifFalse: 		["no temps"		doitFlag ifTrue: [requestor				ifNil: [tempsMark _ 1]				ifNotNil: [tempsMark _ requestor selectionInterval first].			^ #()].		tempsMark _ (prevEnd ifNil: [0]) + 1.		tempsMark _ hereMark	"formerly --> prevMark + prevToken".		tempsMark > 0 ifTrue:			[theActualText _ source contents.			[tempsMark < theActualText size and: [(theActualText at: tempsMark) isSeparator]]				whileTrue: [tempsMark _ tempsMark + 1]].			^ #()].	vars _ OrderedCollection new.	[hereType == #word]		whileTrue: [vars addLast: (encoder bindTemp: self advance in: methodSelector)].	(self match: #verticalBar) ifTrue: 		[tempsMark _ prevMark.		^ vars].	^ self expected: 'Vertical bar'! !!Encoder methodsFor: 'temps' stamp: 'mir 1/17/2004 12:22'!bindTemp: name 	"Declare a temporary; error not if a field or class variable."	scopeTable at: name ifPresent:[:node|		"When non-interactive raise the error only if its a duplicate"		(node isTemp or:[requestor interactive])			ifTrue:[^self notify:'Name is already defined']			ifFalse:[Transcript halt 				show: '(', name, ' is shadowed in "' , class printString, '")']].	^self reallyBind: name! !!Encoder methodsFor: 'temps' stamp: 'mir 1/17/2004 12:31'!bindTemp: name in: methodSelector	"Declare a temporary; error not if a field or class variable."	scopeTable at: name ifPresent:[:node|		"When non-interactive raise the error only if its a duplicate"		(node isTemp or:[requestor interactive])			ifTrue:[^self notify:'Name is already defined']			ifFalse:[Transcript 				show: '(', name, ' is shadowed in "' , class printString , '>>' , methodSelector printString , '")']].	^self reallyBind: name! !!Parser methodsFor: 'public access' stamp: 'mir 1/17/2004 12:29'!parseArgsAndTemps: aString notifying: req         "Parse the argument, aString, notifying req if an error occurs. Otherwise,         answer a two-element Array containing Arrays of strings (the argument         names and temporary variable names)."        (req notNil and: [RequestAlternateSyntaxSetting signal]) ifTrue:                [^ (self as: DialectParser) parseArgsAndTemps: aString notifying: req].        aString == nil ifTrue: [^#()].        doitFlag _ false.               "Don't really know if a doit or not!!"        ^self initPattern: aString                notifying: req                return: [:pattern | (pattern at: 2) , 	self temporariesIn: (pattern at: 1)]! !!Parser methodsFor: 'expression types' stamp: 'mir 1/17/2004 12:29'!method: doit context: ctxt encoder: encoderToUse	" pattern [ | temporaries ] block => MethodNode."	| sap blk prim temps messageComment methodNode |	encoder _ encoderToUse.	sap _ self pattern: doit inContext: ctxt.	"sap={selector, arguments, precedence}"	(sap at: 2) do: [:argNode | argNode isArg: true].	temps _ self temporariesIn: (sap at: 1).	messageComment _ currentComment.	currentComment _ nil.	prim _ doit ifTrue: [0] ifFalse: [self primitive].	self statements: #() innerBlock: doit.	blk _ parseNode.	doit ifTrue: [blk returnLast]		ifFalse: [blk returnSelfIfNoOther].	hereType == #doIt ifFalse: [^self expected: 'Nothing more'].	self interactive ifTrue: [self removeUnusedTemps].	methodNode _ self newMethodNode comment: messageComment.	^ methodNode		selector: (sap at: 1)		arguments: (sap at: 2)		precedence: (sap at: 3)		temporaries: temps		block: blk		encoder: encoder		primitive: prim! !