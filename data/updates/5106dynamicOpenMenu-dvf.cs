'From Squeak3.4alpha of 6 November 2002 [latest update: #5100] on 11 November 2002 at 11:27:48 am'!"Change Set:		dynamicOpenMenuDate:			5 October 2002Author:			Daniel VainsencherThis converts the World>open menu to be have a dynamic portion. Celeste and IRC, being removable application are removed from the static portion.Requires the implementation of three trivial methods in clients -the GUI class initialize should registerOpenCommand:, its unload should unregisterOpenCommand:, and it should have some unary message to open the GUI.Tweaked for Squeak 3.2.1 by Scott Wallace, to be compatible with the #unload protocol used in 3.4a"!Object subclass: #TheWorldMenu	instanceVariableNames: 'myProject myWorld myHand '	classVariableNames: 'OpenMenuRegistry '	poolDictionaries: ''	category: 'Morphic-Kernel'!!Class methodsFor: 'initialize-release' stamp: 'hg 10/30/2001 13:38'!deactivate	"A remnant from the 3.3a modules work, retained . Does nothing, but may be overridden in Metaclasses."! !!Class methodsFor: 'initialize-release' stamp: 'sw 11/11/2002 11:17'!removeFromSystem: logged	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."		"tell class to deactivate and unload itself-- two separate events in the module system"	self deactivate; unload.		"The generic versions of these two methods are empty; the class #unload method is a good one to reimplement to de-register the class from the open-menu and file-list registries"	self superclass ifNotNil:		["If we have no superclass there's nothing to be remembered"		self superclass addObsoleteSubclass: self].	Smalltalk removeClassFromSystem: self logged: logged.	self obsolete! !!Class methodsFor: 'initialize-release' stamp: 'hg 12/12/2001 12:00'!unload	"Sent when a the class is removed.  Does nothing, but may be overridden by (class-side) subclasses."! !!TheWorldMenu methodsFor: 'construction' stamp: 'dvf 5/24/2002 11:24'!openMenu	"Build the open window menu for the world."	| menu |	menu _ self menu: 'open...'.	self fillIn: menu from: {		{'browser (b)' . { Browser . #openBrowser} }.		{'package browser' . { PackagePaneBrowser . #openBrowser} }.		{'workspace (k)' . {self . #openWorkspace} }.		{'file list' . {self . #openFileList} }.		{'file...' . { FileList . #openFileDirectly} }.		{'transcript (t)' . {self . #openTranscript} }.		"{'inner world' . { WorldWindow . #test1} }."		nil.		{'method finder' . { self . #openSelectorBrowser} }.		{'message names (W)' . { self . #openMessageNames} }.			 nil.		{'simple change sorter' . {self . #openChangeSorter1} }.		{'dual change sorter' . {self . #openChangeSorter2} }.		nil.		{'email reader' . {self . #openEmail} }.		{'web browser' . { Scamper . #openAsMorph} }.		{'IRC chat' . {self . #openIRC} }.		nil.	}.	self fillIn: menu from: self class registeredOpenCommands, {nil}.	self mvcProjectsAllowed ifTrue:		[self fillIn: menu from: { {'mvc project' . {self. #openMVCProject} } }].	^ self fillIn: menu from: { 		{'morphic project' . {self. #openMorphicProject} }.	}.! !!TheWorldMenu class methodsFor: 'as yet unclassified' stamp: 'dvf 5/24/2002 10:45'!registerOpenCommand: anArray	"The array received should be of form {'A Label String'. {TargetObject. #command} }"	| registeredCommands |	registeredCommands := self registeredOpenCommands.	(registeredCommands includes: anArray) 			ifFalse: [registeredCommands addLast: anArray]! !!TheWorldMenu class methodsFor: 'as yet unclassified' stamp: 'dvf 5/24/2002 10:38'!registeredOpenCommands	"Answer the list of dynamic open commands"		OpenMenuRegistry ifNil: [OpenMenuRegistry _ OrderedCollection new].	^ OpenMenuRegistry! !!TheWorldMenu class methodsFor: 'as yet unclassified' stamp: 'dvf 5/24/2002 10:57'!unregisterOpenCommand: label	"Remove the open command with the given label from the registry"		self registeredOpenCommands removeAllSuchThat: [:e | e first = label]! !