'From Squeak2.9alpha of 5 August 2000 [latest update: #3249] on 10 January 2001 at 3:44:46 pm'!"Change Set:		findPreference-swDate:			10 January 2001Author:			Scott WallaceAdds the abilility, in a Preferences Panel, to search for preferences by word or fragment; after the users chooses which Preference she wants from the resulting list, it is then revealed in the Panel.The search can be initiated by hitting the 'f' character while the preference panel is active, or by choosing 'find preference...' from the Preference Panel's window-title menu.Caution: these changes only apply to newly-launched Preferences panels -- preexisting ones will not have the new feature.Note:  In due course, various methods should be moved from Preferences to PreferencesPanel for better factoring."!Model subclass: #PreferencesPanel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support'!!PreferencesPanel commentStamp: 'sw 1/9/2001 11:31' prior: 0!I represent a the model of a Preferences window.!!Model methodsFor: 'dependents' stamp: 'sw 1/9/2001 12:46'!containingWindow	"Answer the window that holds the receiver.  The dependents technique is odious and may not be airtight, if multiple windows have the same model."	^ self dependents detect:		[:d | (d isKindOf: SystemWindow orOf: StandardSystemView) and: [d model == self]] ifNone: [nil]! !!Morph methodsFor: 'submorphs-accessing' stamp: 'sw 1/9/2001 12:30'!findDeeplyA: aClass	"Return a morph in the submorph tree of the receiver that is descended from the given class. Return nil if there is no such morph. Clients of this code should always check for a nil return value so that the code will be robust if the user takes the morph apart."	^ (self allMorphs copyWithout: self)		detect: [:p | p isKindOf: aClass]		ifNone: [nil]! !!Preferences class methodsFor: 'factored pref panel' stamp: 'sw 1/9/2001 12:55'!openFactoredPanelWithWidth: aWidth 	"Open up a preferences panel of the given width"	"Preferences openFactoredPanelWithWidth: 325"	| tabbedPalette controlPage window playfield aColor aFont maxEntriesPerCategory tabsMorph anExtent aPanel |	aFont _ StrikeFont familyName: 'NewYork' size: 19.	aPanel _ PreferencesPanel new.	aColor _ aPanel defaultBackgroundColor.	tabbedPalette _ TabbedPalette newSticky.	(tabsMorph _ tabbedPalette tabsMorph) color: aColor darker;		 highlightColor: Color red regularColor: Color brown darker darker.	maxEntriesPerCategory _ 0.	"tabbedPalette addTabFor: self helpPaneForFactoredPanel font: aFont.  	LATER!!"	self factoredCategories		do: [:aCat | 			controlPage _ AlignmentMorph newColumn beSticky color: aColor.			controlPage borderColor: aColor;				 layoutInset: 4.			aCat second				do: [:aPrefSymbol | controlPage						addMorphBack: (Preferences								buttonRepresenting: aPrefSymbol								wording: aPrefSymbol								color: nil)].			controlPage setNameTo: aCat first asString.			aCat first == #halos				ifTrue: [self addHaloControlsTo: controlPage].			tabbedPalette addTabFor: controlPage font: aFont.			maxEntriesPerCategory _ maxEntriesPerCategory max: aCat second size].	tabbedPalette selectTabNamed: 'general'.	tabsMorph rowsNoWiderThan: aWidth.	playfield _ Morph newSticky.	anExtent _ aWidth @ (25 + tabsMorph height + (20 * maxEntriesPerCategory)).	playfield extent: anExtent.	playfield color: aColor.	playfield addMorphBack: tabbedPalette.	self couldOpenInMorphic		ifTrue: [window _ (SystemWindow labelled: 'Preferences')						model: aPanel.			window on: #keyStroke send: #keyStroke: to: aPanel.			window				bounds: (100 @ 100 - (0 @ window labelHeight + window borderWidth) extent: playfield extent + (2 * window borderWidth)).			window				addMorph: playfield				frame: (0 @ 0 extent: 1 @ 1).			window updatePaneColors.			window setProperty: #minimumExtent toValue: anExtent + (2 @ 2).			window position: 200 @ 20.			self currentHand attachMorph: window.			self currentWorld startSteppingSubmorphsOf: window]		ifFalse: [			(window _ MVCWiWPasteUpMorph newWorldForProject: nil) addMorph: playfield.			window startSteppingSubmorphsOf: playfield.			MorphWorldView				openOn: window				label: 'Preferences'				extent: playfield extent]! !!PreferencesPanel methodsFor: 'as yet unclassified' stamp: 'sw 1/10/2001 15:37'!addModelItemsToWindowMenu: aMenu	"aMenu is being constructed to be presented to the user in response to the user's pressing on the menu widget in the title bar of a morphic SystemWindow.  Here, the model is given the opportunity to add any model-specific items to the menu, whose default target is the SystemWindow itself."	aMenu addLine.	aMenu add: 'find preference... (f)' target: self action: #findPreference:! !!PreferencesPanel methodsFor: 'as yet unclassified' stamp: 'sw 1/10/2001 15:40'!defaultBackgroundColor 	"Answer the color of the day for the preferences panel"	^ Color r: 0.645 g: 1.0 b: 1.0! !!PreferencesPanel methodsFor: 'as yet unclassified' stamp: 'sw 1/9/2001 12:36'!findPreference: evt	"Allow the user to submit a selector fragment; search for that among preference names; put up a list of qualifying preferences; if the user selects one of those, redirect the preferences panel to reveal the chosen preference"	| result aList |	result _ FillInTheBlank request: 'Search for preferences containing:' initialAnswer: 'color'.	result _ result asLowercase copyWithout: $ .	result isEmptyOrNil ifTrue: [^ self].	aList _ Preferences allPreferenceFlagKeys select:		[:aKey | 			aKey includesSubstring: result caseSensitive: false].	aList size == 0 ifTrue: [^ self].	result _ (SelectionMenu selections: aList) startUpWithCaption: 'Choose which Preference you want to find'.	Preferences factoredCategories do:		[:aCategoryPair |			(aCategoryPair second includes: result)				ifTrue:					[^ self switchToCategoryNamed: aCategoryPair first event: evt]]! !!PreferencesPanel methodsFor: 'as yet unclassified' stamp: 'sw 1/10/2001 15:41'!keyStroke: anEvent	"Handle a keystroke event in the panel; we map f into a #findPreference: call here"	(anEvent keyCharacter == $f) ifTrue:		[^ self findPreference: anEvent]! !!PreferencesPanel methodsFor: 'as yet unclassified' stamp: 'sw 1/9/2001 12:47'!switchToCategoryNamed: aName event: anEvent	"Switch the panel so that it looks at the category of the given name"	| aPalette |	aPalette _ self containingWindow findDeeplyA: TabbedPalette.	aPalette ifNil: [^ self].	aPalette selectTabNamed: aName! !Preferences class removeSelector: #defaultBackgroundColor!Preferences class removeSelector: #toggleButtons!CodeHolder removeSelector: #containingWindow!