'From Squeak 2.3 beta of Nov 25, 1998 on 5 December 1998 at 12:47:44 pm'!"Change Set:		FasterCacheDate:			2 December 1998Author:			Dan IngallsCauses reprobe chains to be cleared in case of cache conflicts.NOTE: These changes were developed together with several others and so may not work in isolation."!!Interpreter methodsFor: 'method lookup cache' stamp: 'di 12/1/1998 16:43'!addToMethodCacheSel: selector class: class method: meth primIndex: primIndex	"Add the given entry to the method cache.	The policy is as follows:		Look for an empty entry anywhere in the reprobe chain.		If found, install the new entry there.		If not found, then install the new entry at the first probe position			and delete the entries in the rest of the reprobe chain.		This has two useful purposes:			If there is active contention over the first slot, the second				or third will likely be free for reentry after ejection.			Also, flushing is good when reprobe chains are getting full."	| probe hash |	self inline: false.	hash _ (selector bitXor: class) >> 2.  "drop low-order zeros from addresses"	0 to: CacheProbeMax-1 do:		[:p | probe _ ((hash >> p) bitAnd: MethodCacheMask) + 1.		(methodCache at: probe) = 0 ifTrue:				["Found an empty entry -- use it"				methodCache at: probe put: selector.				methodCache at: probe + MethodCacheEntries put: class.				methodCache at: probe + (MethodCacheEntries * 2) put: meth.				methodCache at: probe + (MethodCacheEntries * 3) put: primIndex.				^ nil]].	"OK, we failed to find an entry -- install at the first slot..."	probe _ (hash bitAnd: MethodCacheMask) + 1.  "first probe"	methodCache at: probe put: selector.	methodCache at: probe + MethodCacheEntries put: class.	methodCache at: probe + (MethodCacheEntries * 2) put: meth.	methodCache at: probe + (MethodCacheEntries * 3) put: primIndex.	"...and zap the following entries"	1 to: CacheProbeMax-1 do:		[:p | probe _ ((hash >> p) bitAnd: MethodCacheMask) + 1.		(methodCache at: probe) = 0 ifTrue:				["Found an empty entry -- use it"				methodCache at: probe put: 0.				methodCache at: probe + MethodCacheEntries put: 0.				methodCache at: probe + (MethodCacheEntries * 2) put: 0.				methodCache at: probe + (MethodCacheEntries * 3) put: 0]].! !!Interpreter methodsFor: 'method lookup cache' stamp: 'di 12/2/1998 16:25'!lookupInMethodCacheSel: selector class: class	"This method implements a simple method lookup cache. If an entry for the given selector and class is found in the cache, set the values of 'newMethod' and 'primitiveIndex' and return true. Otherwise, return false."	"About the re-probe scheme: The hash is the low bits of the XOR of two large addresses, minus their useless lowest two bits. If a probe doesn't get a hit, the hash is shifted right one bit to compute the next probe, introducing a new randomish bit. The cache is probed CacheProbeMax times before giving up."	"WARNING: Since the hash computation is based on the object addresses of the class and selector, we must rehash or flush when compacting storage. We've chosen to flush, since that also saves the trouble of updating the addresses of the objects in the cache."	| hash probe |	self inline: true.	hash _ (selector bitXor: class) >> 2.  "shift drops two low-order zeros from addresses"	probe _ (hash bitAnd: MethodCacheMask) + 1.  "first probe"	(((methodCache at: probe) = selector) and:		 [(methodCache at: probe + MethodCacheEntries) = class]) ifTrue:			[newMethod _ methodCache at: probe + (MethodCacheEntries * 2).			primitiveIndex _ methodCache at: probe + (MethodCacheEntries * 3).			^ true	"found entry in cache; done"].	probe _ ((hash >> 1) bitAnd: MethodCacheMask) + 1.  "second probe"	(((methodCache at: probe) = selector) and:		 [(methodCache at: probe + MethodCacheEntries) = class]) ifTrue:			[newMethod _ methodCache at: probe + (MethodCacheEntries * 2).			primitiveIndex _ methodCache at: probe + (MethodCacheEntries * 3).			^ true	"found entry in cache; done"].	probe _ ((hash >> 2) bitAnd: MethodCacheMask) + 1.	(((methodCache at: probe) = selector) and:		 [(methodCache at: probe + MethodCacheEntries) = class]) ifTrue:			[newMethod _ methodCache at: probe + (MethodCacheEntries * 2).			primitiveIndex _ methodCache at: probe + (MethodCacheEntries * 3).			^ true].	^ false! !