'From Squeak 2.3 of January 14, 1999 on 28 March 1999 at 1:50:43 pm'!"Change Set:		WithoutWithoutDate:			28 March 1999Author:			Dan IngallsThis renames the keyword, 'withOutPointers:', which can be read as 'withoutPointers:' to be 'outPointers:'.  Requested by Ted Kaehler."!!ImageSegment methodsFor: 'initialization' stamp: 'di 3/28/1999 13:49'!copyFromRoots: aRootArray 	| segmentWordArray outPointerArray segSize |	aRootArray ifNil: [self errorWrongState].	arrayOfRoots _ aRootArray.	segSize _ 50000.		["Guess a reasonable segment size"	segmentWordArray _ WordArray new: segSize.	outPointerArray _ Array new: segSize // 20.	(self storeSegmentFor: arrayOfRoots					into: segmentWordArray					outPointers: outPointerArray) == nil]		whileTrue:			["Double the segment size and try again"			segmentWordArray _ outPointerArray _ nil.			segSize _ segSize * 2].	segment _ segmentWordArray.	outPointers _ outPointerArray.	state _ #activeCopy.! !!ImageSegment methodsFor: 'changing state' stamp: 'di 3/28/1999 13:47'!extractThenInstall	"For testing only"	| newRoots |	state = #activeCopy ifFalse: [self errorWrongState].	arrayOfRoots elementsForwardIdentityTo:		(arrayOfRoots collect: [:r | r rootStubInImageSegment: self]).	state _ #active.	newRoots _ self loadSegmentFrom: segment outPointers: outPointers.	state _ #inactive.	arrayOfRoots elementsForwardIdentityTo: newRoots.! !!ImageSegment methodsFor: 'changing state' stamp: 'di 3/28/1999 13:48'!install	"This operation retrieves the segment if necessary from file storage, installs it in memory, and replaces (using become:) all the root stubs with the reconstructed roots of the segment."	| newRoots |	state = #onFile ifTrue: [self readFromFile].	state = #onFileWithSymbols ifTrue: [self readFromFileWithSymbols].	state = #active ifFalse: [self errorWrongState].	newRoots _ self loadSegmentFrom: segment outPointers: outPointers.	state _ #inactive.	arrayOfRoots elementsForwardIdentityTo: newRoots.! !!ImageSegment methodsFor: 'changing state' stamp: 'di 3/28/1999 13:48'!segmentCopy	"This operation will install a copy of the segment in memory, and return a copy of the array of roots.  The effect is to perform a deep copy of the original structure.  Note that installation destroys the segment, so it must be copied before doing the operation."	state = #activeCopy ifFalse: [self errorWrongState].	^ self loadSegmentFrom: segment copy outPointers: outPointers! !!ImageSegment methodsFor: 'primitives' stamp: 'di 3/28/1999 13:47'!loadSegmentFrom: segmentWordArray outPointers: outPointerArray	"This primitive will install a binary image segment and return as its value the array of roots of the tree of objects represented.  Upon successful completion, the wordArray will have been transmuted into an object of zero length.  If this primitive should fail, it will have destroyed the contents of the segment wordArray."	<primitive: 99>	"successful completion returns the array of roots"	^ nil			"failure returns nil"! !!ImageSegment methodsFor: 'primitives' stamp: 'di 3/28/1999 13:49'!storeSegmentFor: rootsArray into: segmentWordArray outPointers: outPointerArray	"This primitive will store a binary image segment (in the same format as the Squeak image file) of the receiver and every object in its proper tree of subParts (ie, that is not refered to from anywhere else outside the tree).  Note: all elements of the reciever are treated as roots indetermining the extent of the tree.  All pointers from within the tree to objects outside the tree will be copied into the array of outpointers.  In their place in the image segment will be an oop equal to the offset in the outpointer array (the first would be 4). but with the high bit set."	"The primitive expects the array and wordArray to be more than adequately long.  In this case it returns normally, and truncates the two arrays to exactly the right size.  If either array is too small, the primitive will fail, but in no other case."	<primitive: 98>	"successful completion returns self"	^ nil			"failure returns nil"! !ImageSegment removeSelector: #storeSegmentFor:into:withOutPointers:!ImageSegment removeSelector: #loadSegmentFrom:withOutPointers:!