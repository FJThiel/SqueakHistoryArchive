'From Squeak2.6 of 11 October 1999 [latest update: #1717] on 13 December 1999 at 2:04:23 pm'!"Change Set:		optionalPanes-sbwDate:			10 December 1999Author:			Stephan B. WesselsMakes the optional tool buttons that have long been available in morphic tools now also available in many of their mvc counterparts, and also makes the optional annotation panes that in mvc were formerly only available for message-list-browsers now also available in other mvc browsers, and also in more browser flavors in morphic than previously."!!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 12:32'!buildOptionalButtonsView	| aView buttonView offset bWidth bHeight first previousView |	aView _ View new model: self.	bHeight _ self optionalButtonHeight.	aView window: (0 @ 0 extent: 200 @ bHeight).	offset _ 0.	first _ true.	previousView _ nil.	self optionalButtonPairs do: [:pair |		buttonView _ PluggableButtonView on: self			getState: nil			action: pair last.		buttonView			label: pair first asParagraph.		bWidth _ buttonView label boundingBox width // 2.  "Need something more deterministic."		buttonView window: (offset@0 extent: bWidth@bHeight).		offset _ offset + bWidth + 0.		first			ifTrue:				[aView addSubView: buttonView.				first _ false]			ifFalse:				[buttonView borderWidthLeft: 1 right: 0 top: 0 bottom: 0.				aView addSubView: buttonView toRightOf: previousView]. 		previousView _ buttonView].	^ aView! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 17:40'!openAsMorphClassEditing: editString	"Create a pluggable version a Browser on just a single class."	| window switches codePane baseline aTextMorph |	window _ (SystemWindow labelled: 'later') model: self.	window addMorph: (PluggableListMorph on: self list: #classListSingleton			selected: #indexIsOne changeSelected: #indexIsOne:			menu: #classListMenu: keystroke: #classListKey:from:)		frame: (0@0 extent: 0.5@0.06).	switches _ self buildMorphicSwitches.	window addMorph: switches frame: (0.5@0 extent: 0.5@0.06).	switches borderWidth: 0.	window addMorph: (PluggableMessageCategoryListMorph on: self list: #messageCategoryList			selected: #messageCategoryListIndex changeSelected: #messageCategoryListIndex:			menu: #messageCategoryMenu: keystroke: #arrowKey:from:	 getRawListSelector: #rawMessageCategoryList)		frame: (0@0.06 extent: 0.5@0.30).	window addMorph: (PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:)		frame: (0.5@0.06 extent: 0.5@0.30).	Preferences useAnnotationPanes		ifFalse:			[baseline _ 0.36]		ifTrue:			[aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.36 corner: 1@0.41).			baseline _ 0.41].	Preferences optionalButtons		ifTrue:			[window addMorph: self optionalButtonRow frame: ((0@baseline corner: 1 @ (baseline + 0.08))).			baseline _ baseline + 0.08].	codePane _ PluggableTextMorph on: self text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	editString ifNotNil: [codePane editString: editString.					codePane hasUnacceptedEdits: true].	window addMorph: codePane		frame: (0@baseline corner: 1@1).	window setUpdatablePanesFrom: #(messageCategoryList messageList).	^ window! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 17:45'!openAsMorphMessageEditing: editString	"Create a pluggable version a Browser that shows just one message"	| window codePane baseline aTextMorph |	window _ (SystemWindow labelled: 'later') model: self.	window addMorph: (PluggableListMorph on: self list: #messageListSingleton			selected: #indexIsOne changeSelected: #indexIsOne:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:)		frame: (0@0 extent: 1.0@0.06).	Preferences useAnnotationPanes		ifFalse:			[baseline _ 0.06]		ifTrue:			[aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.06 corner: 1@0.11).			baseline _ 0.11].	Preferences optionalButtons		ifTrue:			[window addMorph: self optionalButtonRow frame: ((0@baseline corner: 1 @ (baseline + 0.08))).			baseline _ baseline + 0.08].	codePane _ PluggableTextMorph on: self text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	editString ifNotNil: [codePane editString: editString.					codePane hasUnacceptedEdits: true].	window addMorph: codePane		frame: (0@baseline corner: 1@1).	^ window! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 17:48'!openAsMorphMsgCatEditing: editString	"Create a pluggable version a Browser on just a messageCategory."	| window codePane baseline aTextMorph |	window _ (SystemWindow labelled: 'later') model: self.	window addMorph: (PluggableListMorph on: self list: #messageCatListSingleton			selected: #indexIsOne changeSelected: #indexIsOne:			menu: #messageCategoryMenu:)		frame: (0@0 extent: 1.0@0.06).	window addMorph: (PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:)		frame: (0@0.06 extent: 1.0@0.30).	Preferences useAnnotationPanes		ifFalse:			[baseline _ 0.30]		ifTrue:			[aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.30 corner: 1@0.35).			baseline _ 0.35].	Preferences optionalButtons		ifTrue:			[window addMorph: self optionalButtonRow frame: ((0@baseline corner: 1 @ (baseline + 0.08))).			baseline _ baseline + 0.08].	codePane _ PluggableTextMorph on: self text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	editString ifNotNil: [codePane editString: editString.					codePane hasUnacceptedEdits: true].	window addMorph: codePane		frame: (0@baseline corner: 1@1).	window setUpdatablePanesFrom: #(messageCatListSingleton messageList).	^ window! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/5/1999 10:50'!openAsMorphSysCatEditing: editString	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window switches codePane baseline aTextMorph |	window _ (SystemWindow labelled: 'later') model: self.	window addMorph: (PluggableListMorph on: self list: #systemCategorySingleton			selected: #indexIsOne changeSelected: #indexIsOne:			menu: #systemCatSingletonMenu: keystroke: #systemCatSingletonKey:from:)		frame: (0@0 extent: 1.0@0.06).	window addMorph: (PluggableListMorph on: self list: #classList			selected: #classListIndex changeSelected: #classListIndex:			menu: #classListMenu: keystroke: #classListKey:from:)		frame: (0@0.06 extent: 0.3333@0.24).	switches _ self buildMorphicSwitches.	window addMorph: switches frame: (0@0.3 extent: 0.3333@0.06).	switches borderWidth: 0.	window addMorph: (PluggableMessageCategoryListMorph on: self list: #messageCategoryList			selected: #messageCategoryListIndex changeSelected: #messageCategoryListIndex:			menu: #messageCategoryMenu: keystroke: #arrowKey:from:	 getRawListSelector: #rawMessageCategoryList)		frame: (0.3333@0.06 extent: 0.3333@0.30).	window addMorph: (PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:)		frame: (0.6666@0.06 extent: 0.3333@0.30).	Preferences useAnnotationPanes		ifFalse: 	[baseline _ 0.36]		ifTrue: [baseline _ 0.41.			aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.36 corner: 1@baseline)].	Preferences optionalButtons		ifTrue:			[window addMorph: self optionalButtonRow frame: ((0@baseline corner: 1 @ (baseline + 0.08))).			baseline _ baseline + 0.08].	codePane _ PluggableTextMorph on: self text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	editString ifNotNil: [codePane editString: editString.					codePane hasUnacceptedEdits: true].	window addMorph: codePane		frame: (0@baseline corner: 1@1).	window setUpdatablePanesFrom: #( classList messageCategoryList messageList).	^ window! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 12:42'!openEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	| systemCategoryListView classListView 	messageCategoryListView messageListView browserCodeView topView switchView underPane y optionalButtonsView annotationPane |	World ifNotNil: [^ self openAsMorphEditing: aString].	"Sensor leftShiftDown ifTrue: [^ self openAsMorphEditing: aString].		uncomment-out for testing morphic browser embedded in mvc project"	topView _ StandardSystemView new model: self.	topView borderWidth: 1. "label and minSize taken care of by caller"	systemCategoryListView _ PluggableListView on: self		list: #systemCategoryList		selected: #systemCategoryListIndex		changeSelected: #systemCategoryListIndex:		menu: #systemCategoryMenu:		keystroke: #systemCatListKey:from:.	systemCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: systemCategoryListView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 50 @ 62).	topView addSubView: classListView toRightOf: systemCategoryListView.	switchView _ self buildInstanceClassSwitchView.	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView window: (0 @ 0 extent: 50 @ 70).	messageListView menuTitleSelector: #messageListSelectorTitle.	topView addSubView: messageListView toRightOf: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: systemCategoryListView.			underPane _ annotationPane.			y _ 110 - self optionalAnnotationHeight]		ifFalse: [			underPane _ systemCategoryListView.			y _ 110].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/9/1999 13:51'!openMessageCatEditString: aString	"Create a pluggable version of the views for a Browser that just shows one message category."	| messageCategoryListView messageListView browserCodeView topView annotationPane underPane y optionalButtonsView |	World ifNotNil: [^ self openAsMorphMsgCatEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	messageCategoryListView _ PluggableListView on: self		list: #messageCatListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: messageCategoryListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 200 @ 70).	topView addSubView: messageListView below: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageListView.			underPane _ annotationPane.			y _ (200 - 12 - 70) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageListView.			y _ (200 - 12 - 70)].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(messageCatListSingleton messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/9/1999 13:54'!openMessageEditString: aString	"Create a pluggable version of the views for a Browser that just shows one message."	| messageListView browserCodeView topView annotationPane underPane y |	World ifNotNil: [^ self openAsMorphMessageEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	messageListView _ PluggableListView on: self		list: #messageListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #messageListMenu:shifted:.	messageListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: messageListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageListView.			underPane _ annotationPane.			y _ (200 - 12) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageListView.			y _ 200 - 12].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/9/1999 13:57'!openOnClassWithEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	| classListView messageCategoryListView messageListView browserCodeView topView switchView annotationPane underPane y optionalButtonsView |	World ifNotNil: [^ self openAsMorphClassEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	classListView _ PluggableListView on: self		list: #classListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #classListMenu:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 100 @ 12).	topView addSubView: classListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 100 @ 70).	topView addSubView: messageCategoryListView below: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 100 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	switchView _ self buildInstanceClassSwitchView.	switchView borderWidth: 1.	switchView 		window: switchView window 		viewport: (classListView viewport topRight 					corner: messageListView viewport topRight).	topView addSubView: switchView toRightOf: classListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageCategoryListView.			underPane _ annotationPane.			y _ (200-12-70) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageCategoryListView.			y _ (200-12-70)].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(messageCategoryList messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 12:58'!openSystemCatEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers.  The top list view is of the currently selected system class category--a single item list."	| systemCategoryListView classListView messageCategoryListView messageListView browserCodeView topView switchView y annotationPane underPane optionalButtonsView |	World ifNotNil: [^ self openAsMorphSysCatEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	systemCategoryListView _ PluggableListView on: self		list: #systemCategorySingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #systemCatSingletonMenu:		keystroke: #systemCatSingletonKey:from:.	systemCategoryListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: systemCategoryListView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 67 @ 62).	topView addSubView: classListView below: systemCategoryListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 66 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	switchView _ self buildInstanceClassSwitchView.	switchView 		window: switchView window 		viewport: (classListView viewport bottomLeft 					corner: messageCategoryListView viewport bottomLeft).	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 67 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue: [			annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: switchView.			y _ 110 - 12 - self optionalAnnotationHeight.			underPane _ annotationPane]		ifFalse: [			y _ 110 - 12.			underPane _ switchView].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(classList messageCategoryList messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 12:37'!optionalAnnotationHeight	^ 10! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 12:23'!optionalButtonHeight	^ 10! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 06:49'!optionalButtonPairs	^#(('senders' 		browseSendersOfMessages)	('implementors'		browseMessages)	('versions'			browseVersions)	('inheritance'		methodHierarchy)	('hierarchy'		classHierarchy)	('inst vars'			browseInstVarRefs)	('class vars'			browseClassVarRefs))! !!Browser methodsFor: 'initialize-release' stamp: 'sbw 12/8/1999 06:49'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color transparent; borderWidth: 1; borderColor: Color black.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs  do:			[:pair |				aButton _ aButton fullCopy.				aButton actionSelector: pair second.				aButton label: pair first.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!PackageBrowser methodsFor: 'package list' stamp: 'sbw 12/9/1999 14:04'!openEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	"PackageBrowser openBrowser"	| packageListView systemCategoryListView classListView messageCategoryListView	  messageListView browserCodeView topView switchView annotationPane underPane y optionalButtonsView |	World ifNotNil: [^ self openAsMorphEditing: aString].	topView := (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	packageListView := PluggableListView on: self		list: #packageList		selected: #packageListIndex		changeSelected: #packageListIndex:		menu: #packageMenu:.	packageListView window: (0 @ 0 extent: 20 @ 70).	topView addSubView: packageListView.	systemCategoryListView := PluggableListView on: self		list: #systemCategoryList		selected: #systemCategoryListIndex		changeSelected: #systemCategoryListIndex:		menu: #systemCategoryMenu:.	systemCategoryListView window: (20 @ 0 extent: 30 @ 70).	topView addSubView: systemCategoryListView.	classListView := PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:.	classListView window: (0 @ 0 extent: 50 @ 62).	topView addSubView: classListView toRightOf: systemCategoryListView.	switchView := self buildInstanceClassSwitchView.	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageCategoryListView := PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	messageListView := PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: packageListView.			underPane _ annotationPane.			y _ 110 - self optionalAnnotationHeight]		ifFalse: [			underPane _ packageListView.			y _ 110].	Preferences optionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView := PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	^ topView! !