'From Squeak3.1alpha of 28 February 2001 [latest update: #4248] on 15 August 2001 at 11:37:06 am'!"Change Set:		PenArrows-tkDate:			15 August 2001Author:			Ted KaehlerAdds the ability for Pen tracks to have arrowheads at the end.  Try:| pen | pen _ Pen new.pen home; north; arrowHeads: true; go: 190; color: Color black; down.pen turn: 45.1 to: 4 do: [:ii | pen go: 30; up; go: 10; turn: 90; down].pen arrowHeads: false.	The arrow head is drawn when you tell the pen 'up'.  The property is stored per-World not per-Pen.  Be sure to turn arrowheads off again when you are done.  Only works in Morphic.	Added the message #color to Bitblt.  It attempts to give back a Color object for the current fillColor.	Fixed a bug about recognising the Color black."!!BitBlt methodsFor: 'accessing' stamp: 'tk 8/15/2001 10:56'!color	"Return the current fill color as a Color.  	 Gives the wrong answer if the halftoneForm is a complex pattern of more than one word."	halftoneForm ifNil: [^ Color black].	^ Color colorFromPixelValue: halftoneForm first depth: destForm depth! !!Color class methodsFor: 'instance creation' stamp: 'tk 8/15/2001 11:03'!colorFromPixelValue: p depth: d	"Convert a pixel value for the given display depth into a color."	"Details: For depths of 8 or less, the pixel value is simply looked up in a table. For greater depths, the color components are extracted and converted into a color."	| r g b alpha |	d = 8 ifTrue: [^ IndexedColors at: (p bitAnd: 16rFF) + 1].	d = 4 ifTrue: [^ IndexedColors at: (p bitAnd: 16r0F) + 1].	d = 2 ifTrue: [^ IndexedColors at: (p bitAnd: 16r03) + 1].	d = 1 ifTrue: [^ IndexedColors at: (p bitAnd: 16r01) + 1].	(d = 16) | (d = 15) ifTrue: [		"five bits per component"		r _ (p bitShift: -10) bitAnd: 16r1F.		g _ (p bitShift: -5) bitAnd: 16r1F.		b _ p bitAnd: 16r1F.		(r = 0 and: [g = 0]) ifTrue: [			b = 0 ifTrue: [^Color transparent].			b = 1 ifTrue: [^Color black]].		^ Color r: r g: g b: b range: 31].	d = 32 ifTrue: [		"eight bits per component; 8 bits of alpha"		r _ (p bitShift: -16) bitAnd: 16rFF.		g _ (p bitShift: -8) bitAnd: 16rFF.		b _ p bitAnd: 16rFF.		alpha _ p bitShift: -24.		alpha = 0 ifTrue: [^Color transparent].		(r = 0 and: [g = 0 and: [b = 0]])  ifTrue: [^Color transparent].		alpha < 255			ifTrue: [^ (Color r: r g: g b: b range: 255) alpha: (alpha asFloat / 255.0)]			ifFalse: [^ (Color r: r g: g b: b range: 255)]].	d = 12 ifTrue: [		"four bits per component"		r _ (p bitShift: -8) bitAnd: 16rF.		g _ (p bitShift: -4) bitAnd: 16rF.		b _ p bitAnd: 16rF.		^ Color r: r g: g b: b range: 15].	d = 9 ifTrue: [		"three bits per component"		r _ (p bitShift: -6) bitAnd: 16r7.		g _ (p bitShift: -3) bitAnd: 16r7.		b _ p bitAnd: 16r7.		^ Color r: r g: g b: b range: 7].	self error: 'unknown pixel depth: ', d printString! !!Pen methodsFor: 'operations' stamp: 'tk 8/15/2001 09:36'!arrowHeads: wantArrowHeads	"Turn and off the feature of putting an arrowhead on each line at penUp time.  Only works in a Morphic World."	World isMorph ifFalse: [^ self].	wantArrowHeads 		ifTrue: [World setProperty: #PenArrowHeads toValue: true]		ifFalse: [World removeProperty: #PenArrowHeads].! !!Pen methodsFor: 'operations' stamp: 'tk 8/15/2001 11:22'!up	"Set the state of the receiver's pen to up (no drawing)."	| prevPt pm af myColor finalPt |	penDown _ false.	World isMorph ifTrue: ["optional arrowheads on pen strokes"		(World valueOfProperty: #PenArrowHeads) == true ifTrue: [			"make a morph"			myColor _ self color.			prevPt _ (direction degreeCos @ direction degreeSin) * -40 + location.			finalPt _ (direction degreeCos @ direction degreeSin) * sourceForm width + location.			pm _ PolygonMorph vertices: (Array with: prevPt with: finalPt) 				color: myColor  "not used"				borderWidth: sourceForm width borderColor: myColor.			pm makeOpen; makeForwardArrow.			af _ pm arrowForms first.			"render it onto the destForm"			(FormCanvas on: destForm "Display") stencil: af at: af offset + (1@1)				color: myColor			]].! !Pen removeSelector: #color!