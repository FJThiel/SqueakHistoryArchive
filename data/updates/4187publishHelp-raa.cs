'From Squeak3.1alpha of 5 February 2001 [latest update: #4186] on 1 July 2001 at 6:56:44 pm'!"Change Set:		publishHelpDate:			1 July 2001Author:			Bob ArningPer Ted:Please add balloon help to everything.Please add a new button that says 'Save on local disk only'.Its balloon says, 'saves in the Squeaklets folder'.Then make the Cancel button return to the original project immediately.Name the 'OK' button, 'Save'.Make its balloon say 'Save in the place specified below, and in the Squeaklets folder on your local disk'."!!BalloonMorph methodsFor: 'initialization' stamp: 'RAA 7/1/2001 18:48'!popUpForHand: aHand	"Pop up the receiver as balloon help for the given hand"	| worldBounds |	self lock.	self fullBounds. "force layout"	self setProperty: #morphicLayerNumber toValue: self morphicLayerNumber.	aHand world addMorphFront: self.	"So that if the translation below makes it overlap the receiver, it won't	interfere with the rootMorphsAt: logic and hence cause flashing.  Without	this, flashing happens, believe me!!"	((worldBounds _ aHand world bounds) containsRect: self bounds) ifFalse:		[self bounds: (self bounds translatedToBeWithin: worldBounds)].	aHand balloonHelp: self.! !!FileList2 methodsFor: 'as yet unclassified' stamp: 'RAA 7/1/2001 18:08'!saveLocalOnlyHit	modalView delete.	directory _ fileName _ nil.	currentDirectorySelected _ #localOnly.! !!FileList2 class methodsFor: 'blue ui' stamp: 'RAA 7/1/2001 18:50'!morphicViewProjectSaverFor: aProject"(FileList2 morphicViewProjectSaverFor: Project current) openInWorld"	| window aFileList buttons treePane pane2 textColor1 option treeExtent buttonData |	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	aFileList _ self new directory: FileDirectory default.	aFileList dirSelectionBlock: self hideSqueakletDirectoryBlock.	window _ AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	aFileList modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: 4;		borderColor: (Color r: 0.355 g: 0.516 b: 1.0);		useRoundedCorners.	buttonData _ #( 		('Save' okHit 'Save in the place specified below, and in the Squeaklets folder on your local disk') 		('Save on local disk only' saveLocalOnlyHit 'saves in the Squeaklets folder')		('Cancel' cancelHit 'return without saving') 	).	buttons _ buttonData collect: [ :each |		(self blueButtonText: each first textColor: textColor1 inWindow: window)			setBalloonText: each third;			hResizing: #shrinkWrap;			on: #mouseUp send: each second to: aFileList	].	option _ aProject world 		valueOfProperty: #SuperSwikiPublishOptions 		ifAbsent: [#initialDirectoryList].	aProject world removeProperty: #SuperSwikiPublishOptions.	World height < 500 ifTrue: [		treeExtent _ 350@150.	] ifFalse: [		treeExtent _ 350@300.	].	(treePane _ aFileList morphicDirectoryTreePaneFiltered: option) 		extent: treeExtent; 		retractable: false;		borderWidth: 0.	window		addARowCentered: {			window fancyText: 'Publish This Project' ofSize: 21 color: textColor1		};		addARowCentered: {			buttons first. 			(Morph new extent: 30@5) color: Color transparent. 			buttons second.			(Morph new extent: 30@5) color: Color transparent. 			buttons third		};		addARowCentered: { (window inAColumn: {(ProjectViewMorph on: aProject) lock}) layoutInset: 4};		addARowCentered: {			window fancyText: 'Please select a folder' ofSize: 21 color: Color blue		};		addARow: {			(				window inAColumn: {					(pane2 _ window inARow: {window inAColumn: {treePane}}) 						useRoundedCorners; layoutInset: 6				}			) layoutInset: 10		}.	window fullBounds.	window fillWithRamp: self blueRamp1 oriented: 0.65.	pane2 fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	window setProperty: #morphicLayerNumber toValue: 11.	aFileList postOpen.	^ window ! !!FileList2 class methodsFor: 'modal dialogs' stamp: 'RAA 7/1/2001 18:31'!modalFolderSelectorForProject: aProject"FileList2 modalFolderSelectorForProject: Project current"	| window fileModel w |	window _ FileList2 morphicViewProjectSaverFor: aProject.	fileModel _ window valueOfProperty: #FileList.	w _ self currentWorld.	window position: w topLeft + (w extent - window extent // 2).	w addMorphInLayer: window.	w startSteppingSubmorphsOf: window.	[window world notNil] whileTrue: [		window outermostWorldMorph doOneCycleNow.	].	^fileModel getSelectedDirectory withoutListWrapper! !!Project methodsFor: 'file in/out' stamp: 'RAA 7/1/2001 18:12'!storeOnServerInnards	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	| resp newName primaryServerDirectory serverVersionPair localDirectory localVersionPair myVersionNumber warning maxNumber suppliedPassword oldResourceUrl |	self assureIntegerVersion.	"Find out what version"	primaryServerDirectory _ self primaryServerIfNil: [		(primaryServerDirectory _ self findAFolderToStoreProjectIn) ifNil: [^self].		primaryServerDirectory == #localOnly ifTrue: [			nil		] ifFalse: [			oldResourceUrl _ self resourceUrl.			self storeNewPrimaryURL: primaryServerDirectory downloadUrl.			primaryServerDirectory		].	].	localDirectory _ self squeakletDirectory.	serverVersionPair _ self class mostRecent: self name onServer: primaryServerDirectory.	localVersionPair _ self class mostRecent: self name onServer: localDirectory.	maxNumber _ myVersionNumber _ self currentVersionNumber.	ProgressNotification signal: '2:versionsDetected'.	warning _ ''.	myVersionNumber < serverVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) on the server'.		maxNumber _ maxNumber max: serverVersionPair second.	].	myVersionNumber < localVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) in the local directory'.		maxNumber _ maxNumber max: localVersionPair second.	].	"8 Nov 2000 - only check on the first attempt to publish"	myVersionNumber = 0 ifTrue: [		warning isEmpty ifFalse: [			myVersionNumber = 0 ifTrue: [				warning _ warning,'\THIS PROJECT HAS NEVER BEEN SAVED'			].			warning _ 'WARNING', '\Project: ',self name,warning.			resp _ (PopUpMenu labels: 'Store anyway\Cancel' withCRs) startUpWithCaption: 				(warning, '\Please cancel, rename this project, and see what is there.') withCRs.				resp ~= 1 ifTrue: [^ nil]		].	].	version _ self bumpVersion: maxNumber.	oldResourceUrl		ifNotNil: [self resourceManager adjustToNewServer: self resourceUrl from: oldResourceUrl].	"write locally - now zipped automatically"	newName _ self versionedFileName.	lastSavedAtSeconds _ Time totalSeconds.	self exportSegmentFileName: newName directory: localDirectory.	ProgressNotification signal: '4:localSaveComplete'.	"3 is deep in export logic"	primaryServerDirectory ifNotNil: [		suppliedPassword _ ''.		Preferences passwordsOnPublish ifTrue: [			suppliedPassword _ FillInTheBlank requestPassword: 'Project password'		].		[		self			writeFileNamed: newName 			fromDirectory: localDirectory 			toServer: primaryServerDirectory.		] on: ProjectPasswordNotification do: [ :ex |			ex resume: (suppliedPassword ifNil: [''])		].	].	ProgressNotification signal: '9999 save complete'.	"Later, store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	"2 to: servers size do: [:aServer | aServer putFile: local named: newName]."! !