'From Squeak 2.3 beta of Nov 25, 1998 on 31 December 1998 at 1:53 pm'!"Change Set:		worldMouse-swDate:			31 December 1998Author:			Scott WallaceTunes the list of commands offered in viewers open on a World; the immediate motivation was to allow the World to produce its own world-relative mouse coordinates."!!Player methodsFor: 'slots-kernel' stamp: 'sw 12/31/1998 13:20'!categories	| aList aRef |	(self hasCostumeOfClass: WorldMorph)		ifTrue:	[^ self categoriesForWorld].	aList _ #('basic' ) asOrderedCollection.	self slotNames size > 0 ifTrue:		[aList add: 'instance variables'].	self class scripts size > 0 ifTrue:		[aList add: 'scripts'].	(self hasCostumeOfClass: JoystickMorph)		ifTrue:	[aList add: 'joystick'].	(self hasCostumeOfClass: BookMorph)		ifTrue:	[aList add: 'book navigation'].	(self hasCostumeOfClass: PasteUpMorph)		ifTrue:	[aList addAll: #('pen trails' 'card/stack' 'playfield')].	aList addAll: #('tests' 'color & border' 'geometry' 'motion' 'pen use' 'miscellaneous' ).	self flag: #deferred."	((aRef _ self existingCostumeOfClass: ReferenceMorph) notNil and:		[aRef referent isKindOf: PaintBoxMorph])			ifTrue:	[aList add: 'paintbox'].      coming SOON, un-comment-out as soon                                                        as ReferenceMorph is shipped"	Preferences showPlayerSource ifTrue:		[aList addAll: Player organization categories].	aList removeAllFoundIn: #('card/stack commands' 'object fileIn').	^ aList! !!Player methodsFor: 'slots-kernel' stamp: 'sw 12/31/1998 12:49'!categoriesForWorld	"Answer the list of categories given that the receiver is the Player representing a World"	| aList |	aList _ #('basic' 'color & border' 'pen trails' 'playfield') asOrderedCollection.	self slotNames size > 0 ifTrue:		[aList add: 'instance variables'].	self class scripts size > 0 ifTrue:		[aList add: 'scripts'].	Preferences showPlayerSource ifTrue:		[aList addAll: Player organization categories].	aList removeAllFoundIn: #('card/stack commands' 'object fileIn').	^ aList! !!Player methodsFor: 'slots-kernel' stamp: 'sw 12/31/1998 13:53'!tilePhrasesSpecsForCategory: aCategory	"Return an array of slot and script names and info for use in a viewer on the receiver.  These can be of two flavors - script and slot.		(slot		heading		number				readWrite	getHeading		setHeading:)		(script		command 	wearCostumeOf: 	player)"	| aList nameString isWorld |	isWorld _ self hasCostumeOfClass: WorldMorph.	(aCategory = 'instance variables') ifTrue:		[^ self slotNames collect: [:aName |		nameString _ aName asString capitalized.		Array			with:	#slot			with: 	aName 								"name"			with: 	(self typeForSlot: aName asSymbol)	"type"			with:	#readWrite							"r/w"			with:	('get', nameString) asSymbol		"get selector"			with:	('set', nameString, ':') asSymbol]].	"set selector"	(aCategory = 'scripts') ifTrue:		[^ self tileScriptCommands].	(aCategory = 'basic') ifTrue:		[aList _ isWorld			ifFalse:				[#((slot x) (slot y) (slot heading) (slot colorUnder) (script forward:) (script turn:) (script beep:))]			ifTrue:				[#((script beep:))]].	(aCategory = 'tests') ifTrue:		[aList _ isWorld			ifFalse:				[#((slot isOverColor) (slot isUnderMouse) (slot colorSees))]			ifTrue:				[#()]].	(aCategory = 'color & border') ifTrue:		[aList _ isWorld			ifFalse:				[#((slot color) (slot colorUnder) (slot borderColor) (slot borderWidth))]			ifTrue:				[#((slot color))]].	(aCategory = 'geometry') ifTrue:		[aList _ #((slot left) (slot right) (slot top) (slot bottom) (slot width) (slot height) (slot x) (slot y) (slot heading))].	(aCategory = 'miscellaneous') ifTrue:		[aList _ isWorld			ifFalse:				[#((script show) (script hide) (script wearCostumeOf:) (script startScript:) (script stopScript:) (script pauseScript:))]			ifTrue:				[#((script startScript:) (script stopScript:) (script pauseScript:))]].	(aCategory = 'motion') ifTrue:		[aList _ #((slot x) (slot y) (slot heading) (script forward:) (script moveToward:) (script turn:) (script bounce:) (script wrap) (script goToRightOf:))].	(aCategory = 'pen trails') ifTrue:		[aList _ #((script liftAllPens) (script lowerAllPens) (script clearTurtleTrails))].	(aCategory = 'pen use') ifTrue:		[aList _ #((slot penColor) (slot penSize) (slot penDown))].	(aCategory = 'card/stack') ifTrue:		[aList _ #((script goToNextCard) (script goToPreviousCard) (script deleteCard) (script newCard))].	(aCategory = 'joystick') ifTrue:		[aList _ #((slot amount) (slot angle) (slot leftRight) (slot upDown))].	(aCategory = 'playfield') ifTrue:		[aList _ #((script initiatePainting) (slot cursor) (slot valueAtCursor) (slot mouseX) (slot mouseY))].	(aCategory = 'book navigation') ifTrue:		[aList _ #((script nextPage) (script previousPage) (script firstPage) (script lastPage) (script goto:))].	aList ifNil:		[^ (Player organization categories includes: aCategory)			ifTrue:				[self tilePhraseSpecsForPlayerCategory: aCategory]			ifFalse:				[self error: 'faulty category: ', aCategory.				Array new]].	^ aList collect: [:aPair | self phraseSpecFor: aPair]! !