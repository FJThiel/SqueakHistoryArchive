'From Vancouver1.0 of 29 September 2004 [latest update: #293] on 13 October 2004 at 6:43:39 pm'!"Change Set:		keyboardEvents-nkDate:			13 October 2004Author:			Ned KonzAdds a String property #lastKeystroke to the World. This is set when unhandled keyboard events are received.Adds an event trigger 'keyStroke' to the World.So you can trigger scripts on the World using the 'keyStroke' event and in them read the lastKeystroke property.Adapted sw 11/16/2004 14:53 from Vancouver update 0314EtoyKeyboardEvent, for Squeakland."!!KeyboardEvent methodsFor: 'keyboard' stamp: 'nk 10/13/2004 10:43'!keyString	"Answer the string value for this keystroke. This is defined only for keystroke events."	^ String streamContents: [ :s | self printKeyStringOn: s ]! !!KeyboardEvent methodsFor: 'printing' stamp: 'tk 10/13/2004 15:19'!printKeyStringOn: aStream	"Print a readable string representing the receiver on a given stream"	| kc inBrackets firstBracket keyString |	kc := self keyCharacter.	inBrackets := false.	firstBracket := [ inBrackets ifFalse: [ aStream nextPut: $<. inBrackets := true ]].	self controlKeyPressed ifTrue: [ 	firstBracket value. aStream nextPutAll: 'Ctrl-' ].	self commandKeyPressed ifTrue: [ firstBracket value. aStream nextPutAll: 'Cmd-' ].	(buttons anyMask: 32) ifTrue: [ firstBracket value. aStream nextPutAll: 'Opt-' ].	(self shiftPressed and: [ keyValue between: 1 and: 31 ])		ifTrue: [ firstBracket value. aStream nextPutAll: 'Shift-' ].	(self controlKeyPressed and: [ keyValue <= 26 ])			ifTrue:				[aStream nextPut: (keyValue + $a asciiValue - 1) asCharacter]			ifFalse: 				[keyString := (kc caseOf: {					[ Character space ] -> [ ' ' ].					[ Character tab ] -> [ 'tab' ].					[ Character cr ] -> [ 'cr' ].					[ Character lf ] -> [ 'lf' ].					[ Character enter ] -> [ 'enter' ].					[ Character backspace ] -> [ 'backspace' ].					[ Character delete ] -> [ 'delete' ].					[ Character escape ] -> [ 'escape' ].					[ Character arrowDown ] -> [ 'down' ].					[ Character arrowUp ] -> [ 'up' ].					[ Character arrowLeft ] -> [ 'left' ].					[ Character arrowRight ] -> [ 'right' ].					[ Character end ] -> [ 'end' ].					[ Character home ] -> [ 'home' ].					[ Character pageDown ] -> [ 'pageDown' ].					[ Character pageUp ] -> [ 'pageUp' ].					[ Character euro ] -> [ 'euro' ].					[ Character insert ] -> [ 'insert' ].				} otherwise: [ String with: kc ]).				keyString size > 1 ifTrue: [ firstBracket value ].				aStream nextPutAll: keyString].	inBrackets ifTrue: [aStream nextPut: $> ]! !!KeyboardEvent methodsFor: 'printing' stamp: 'nk 10/13/2004 10:42'!printOn: aStream	"Print the receiver on a stream"	aStream nextPut: $[.	aStream nextPutAll: type; nextPutAll: ' '''.	self printKeyStringOn: aStream.	aStream nextPut: $'.	aStream nextPut: $]! !!PasteUpMorph methodsFor: 'e-toy support' stamp: 'nk 10/13/2004 11:26'!lastKeystroke	"Answer the last keystroke fielded by the receiver"	^ self valueOfProperty: #lastKeystroke ifAbsent: ['']! !!PasteUpMorph methodsFor: 'e-toy support' stamp: 'nk 10/13/2004 11:27'!lastKeystroke: aString	"Remember the last keystroke fielded by the receiver"	^ self setProperty: #lastKeystroke toValue: aString! !!PasteUpMorph methodsFor: 'world menu' stamp: 'nk 10/13/2004 11:29'!keystrokeInWorld: evt	"A keystroke was hit when no keyboard focus was set, so it is sent here to the world instead."	|  aChar isCmd ascii |	aChar _ evt keyCharacter.	(ascii _ aChar asciiValue) = 27 ifTrue: "escape key"		[^ self putUpWorldMenuFromEscapeKey].	(#(1 4 8 28 29 30 31 32) includes: ascii) ifTrue:  "home, end, backspace, arrow keys, space"		[self keyboardNavigationHandler ifNotNilDo:			[:aHandler | ^ aHandler navigateFromKeystroke: aChar]].	isCmd _ evt commandKeyPressed and: [Preferences cmdKeysInText].	(evt commandKeyPressed and: [Preferences eToyFriendly])			ifTrue:				[(aChar == $W) ifTrue: [^ self putUpWorldMenu: evt]].	(isCmd and: [Preferences honorDesktopCmdKeys]) ifTrue:		[^ self dispatchCommandKeyInWorld: aChar event: evt].	"It was unhandled. Remember the keystroke."	self lastKeystroke: evt keyString.	self triggerEvent: #keyStroke! !!PasteUpMorph class methodsFor: 'class initialization' stamp: 'nk 10/13/2004 10:35'!initialize	"Initialize the class"	self registerInFlapsRegistry.		ScriptingSystem addCustomEventFor: self named: #keyStroke help: 'when a keystroke happens and nobody heard it'.! !!PasteUpMorph class methodsFor: 'scripting' stamp: 'nk 10/13/2004 11:39'!additionsToViewerCategoryInput	"Answer a list of (<categoryName> <list of category specs>) pairs that characterize the phrases this kind of morph wishes to add to various Viewer categories."	^ #(input (			(slot lastKeystroke 'The last unhandled keystroke' String readWrite Player getLastKeystroke Player setLastKeystroke:)	))! !!Player methodsFor: 'slot getters/setters' stamp: 'nk 10/13/2004 11:30'!getLastKeystroke	"Answer the last keystroke fielded"	^ self getValueFromCostume: #lastKeystroke! !!Player methodsFor: 'slot getters/setters' stamp: 'nk 10/13/2004 11:30'!setLastKeystroke: aString	"Set the last keystroke fielded"	self setCostumeSlot: #lastKeystroke: toValue: aString! !!Player methodsFor: 'slots-kernel' stamp: 'nk 10/13/2004 11:34'!categoriesForWorld	"Answer the list of categories given that the receiver is the Player representing a World"	| aList |	aList _ #(#'color & border' #'pen trails' playfield collections #'stack navigation') asOrderedCollection.	aList addFirst: ScriptingSystem nameForScriptsCategory.	aList addFirst: ScriptingSystem nameForInstanceVariablesCategory.	aList add: #input.	^ aList! !PasteUpMorph initialize!