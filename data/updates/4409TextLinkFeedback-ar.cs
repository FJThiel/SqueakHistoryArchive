'From Squeak3.1alpha of 28 February 2001 [latest update: #4348] on 26 September 2001 at 10:49:44 pm'!"Change Set:		TextLinkFeedback-arDate:			26 September 2001Author:			Andreas RaabAdd cursor feedback when we're moving over a textlink that can be clicked on."!Form subclass: #Cursor	instanceVariableNames: ''	classVariableNames: 'BlankCursor CornerCursor CrossHairCursor CurrentCursor DownCursor MarkerCursor MenuCursor MoveCursor NormalCursor OriginCursor ReadCursor RightArrowCursor SquareCursor UpCursor WaitCursor WebLinkCursor WriteCursor XeqCursor '	poolDictionaries: ''	category: 'Graphics-Display Objects'!!Cursor class methodsFor: 'constants' stamp: 'ar 9/26/2001 22:37'!webLink	"Return a cursor that can be used for emphasizing web links"	"Cursor webLink showWhile: [Sensor waitButton]"	^WebLinkCursor ifNil:[		WebLinkCursor _  (CursorWithMask extent: 16@16			fromArray: #(3072 4608 4608 4608 4608 5046 4681 29257 37449 37449 32769 32769 49155 16386 24582 16380 )			offset: -5@0) setMaskForm:		(Form extent: 16@16 			fromArray: (#(3072 7680 7680 7680 7680 8118 8191 32767 65535 65535 65535 65535 65535 32766 32766 16380 )  collect: [:bits | bits bitShift: 16])			offset: 0@0)].! !!NewParagraph methodsFor: 'editing' stamp: 'ar 9/26/2001 22:46'!clickAt: clickPoint for: model controller: editor	"Give sensitive text a chance to fire.  Display flash: (100@100 extent: 100@100)."	| startBlock action target range boxes box |	action _ false.	startBlock _ self characterBlockAtPoint: clickPoint.	(text attributesAt: startBlock stringIndex forStyle: textStyle) 		do: [:att | att mayActOnClick ifTrue:				[				(target _ model) ifNil: [target _ editor morph].				range _ text rangeOf: att startingAt: startBlock stringIndex forStyle: textStyle.				boxes _ self selectionRectsFrom: (self characterBlockForIndex: range first) 							to: (self characterBlockForIndex: range last+1).				box _ boxes detect: [:each | each containsPoint: clickPoint].				Utilities awaitMouseUpIn: ((editor transformFrom: nil) invertBoundsRect: box)						repeating: []						ifSucceed: [(att actOnClickFor: target in: self at: clickPoint editor: editor) ifTrue: [action _ true]].				Cursor currentCursor == Cursor webLink ifTrue:[Cursor normal show].				]].	^ action! !!TextMorph methodsFor: 'editing' stamp: 'ar 9/26/2001 22:45'!enterClickableRegion: evt	| index isLink |	evt hand hasSubmorphs ifTrue:[^self].	evt hand temporaryCursor ifNotNil:[^self].	paragraph ifNotNil:[		index _ (paragraph characterBlockAtPoint: evt position) stringIndex.		isLink _ (paragraph text attributesAt: index forStyle: paragraph textStyle) 					anySatisfy:[:attr| attr mayActOnClick].		isLink ifTrue:[Cursor webLink show] ifFalse:[Cursor normal show].	].! !!TextMorph methodsFor: 'editing' stamp: 'ar 9/22/2001 16:50'!handleInteraction: interactionBlock fromEvent: evt	"Perform the changes in interactionBlock, noting any change in selection	and possibly a change in the size of the paragraph (ar 9/22/2001 - added for TextPrintIts)"	"Also couple ParagraphEditor to Morphic keyboard events"	| oldEditor oldParagraph oldSize |	self editor sensor: (KeyboardBuffer new startingEvent: evt).	oldEditor _ editor.	oldParagraph _ paragraph.	oldSize _ oldParagraph text size.	self selectionChanged.  "Note old selection"		interactionBlock value.	(oldParagraph == paragraph) ifTrue:[		"this will not work if the paragraph changed"		editor _ oldEditor.     "since it may have been changed while in block"	].	self selectionChanged.  "Note new selection"	(oldSize = paragraph text size)		ifFalse:[self updateFromParagraph].! !!TextMorph methodsFor: 'editing' stamp: 'ar 9/26/2001 22:21'!handleMouseMove: anEvent	"Re-implemented to allow for mouse-up move events"	anEvent wasHandled ifTrue:[^self]. "not interested"	(anEvent hand hasSubmorphs) ifTrue:[^self].	anEvent wasHandled: true.	self mouseMove: anEvent.	(anEvent anyButtonPressed and:[anEvent hand mouseFocus == self]) ifFalse:[^self].	(self handlesMouseStillDown: anEvent) ifTrue:[		"Step at the new location"		self startStepping: #handleMouseStillDown: 			at: Time millisecondClockValue			arguments: {anEvent copy resetHandlerFields}			stepTime: 1].! !!TextMorph methodsFor: 'editing' stamp: 'ar 9/26/2001 22:22'!mouseMove: evt	evt redButtonPressed ifFalse: [^ self enterClickableRegion: evt].	self handleInteraction: [editor mouseMove: evt] fromEvent: evt! !!TextMorphForEditView methodsFor: 'event handling' stamp: 'ar 9/26/2001 22:28'!mouseMove: evt	| editEvt |	super mouseMove: evt.	evt redButtonPressed ifFalse: [^ self].	editEvt _ evt transformedBy: (self transformedFrom: editView) inverseTransformation.	(editEvt position y between: editView top and: editView bottom) ifFalse:[		"Start auto-scrolling"		self startStepping: #autoScrollView:			at: Time millisecondClockValue			arguments: (Array with: editEvt)			stepTime: 100. "fast enough"	] ifTrue:[		self stopSteppingSelector: #autoScrollView:.	].! !