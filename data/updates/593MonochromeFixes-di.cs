'From Squeak 2.3 beta of Nov 25, 1998 on 14 January 1999 at 9:06:15 pm'!"Change Set:		MonochromeFixesDate:			14 January 1999Author:			Dan IngallsA number of fixes to make morphic display better at Display depths of 1 and 2."!!BalloonMorph class methodsFor: 'all' stamp: 'di 1/14/1999 21:02'!string: str for: morph corner: cornerName	"Make up and return a balloon for morph.  Find the quadrant thatclips the text the least, using cornerName as a tie-breaker.  tk 9/12/97"	| txt tm corners p1 p2 vertices c r maxArea aa verts mp dir mbc pref rectCorner morphPoint balloonColor |	BalloonFont		ifNil: [txt _ str]		ifNotNil: [txt _ Text string: str attribute: (TextFontReference toFont: BalloonFont)].	tm _ (TextMorph new contents: txt) centered.	"Construct vertices for a balloon below and to left of anchor"	corners _ tm bounds corners atAll: #(1 4 3 2).	p1 _ (corners at: 1) + ((0 - tm width//3)@0).	p2 _ (corners at: 1) + ((0 - tm width//6)@(tm height//2)).	vertices _ (Array with: p1 with: p2) , corners.	r _ p1 rect: (corners at: 3).	corners _ #(bottomRight bottomLeft topLeft topRight).	pref _ corners indexOf: cornerName.	c _ tm center.	maxArea _ 0.	(0 to: 3) do:		[:i | "Try four rel locations of the balloon for greatest unclipped area"		rectCorner _ corners atWrap: i+pref+2.		morphPoint _ (#(bottomRight bottomLeft) includes: rectCorner)						ifTrue: [#topCenter] ifFalse: [#bottomCenter].		aa _ ((r align: (r perform: rectCorner)				with: (mbc _ morph fullBoundsInWorld perform: morphPoint))			intersect: (0@0 extent: morph world viewBox extent)) area.		aa > maxArea ifTrue: [verts _ vertices.							maxArea _ aa.							mp _ mbc].		dir _ (i+pref) odd ifTrue: [#horizontal] ifFalse: [#vertical].		vertices _ vertices collect: [:p | p flipBy: dir centerAt: c]].	balloonColor _ Display depth <= 2					ifTrue: [Color white]					ifFalse: [Color r: 1.0 g: 1.0 b: 0.6].	^ self new color: balloonColor;			setBorderWidth: 1 borderColor: Color black;			setVertices: verts;			addMorph: tm;			align: verts first with: mp;			setTarget: morph! !!MenuItemMorph methodsFor: 'drawing' stamp: 'di 1/14/1999 20:29'!drawOn: aCanvas	| selectionColor |	selectionColor _ Display depth <= 2						ifTrue: [Color gray]						ifFalse: [owner color darker].	(isSelected & isEnabled) ifTrue: [		aCanvas fillRectangle: self bounds color: selectionColor].	super drawOn: aCanvas.	subMenu == nil ifFalse: [		aCanvas			image: SubMenuMarker			at: (self right - 8 @ ((self top + self bottom - SubMenuMarker height) // 2))].! !!NewParagraph methodsFor: 'display' stamp: 'di 1/14/1999 20:49'!displaySelectionInLine: line on: aCanvas	| leftX rightX w caretColor |	selectionStart ifNil: [^ self].  "No selection"	selectionStart = selectionStop		ifTrue: ["Only show caret on line where clicked"				selectionStart textLine ~= line ifTrue: [^ self]]		ifFalse: ["Test entire selection before or after here"				(selectionStop stringIndex < line first					or: [selectionStart stringIndex > (line last+1)])					ifTrue: [^ self].  "No selection on this line"				(selectionStop stringIndex = line first					and: [selectionStop textLine ~= line])					ifTrue: [^ self].  "Selection ends on line above"				(selectionStart stringIndex = (line last+1)					and: [selectionStop textLine ~= line])					ifTrue: [^ self]].  "Selection begins on line below"	selectionStart stringIndex < line first		ifTrue: [leftX _ line left]		ifFalse: [leftX _ selectionStart left].	(selectionStop stringIndex > (line last+1)			or: [selectionStop stringIndex = (line last+1)					and: [selectionStop textLine ~= line]])		ifTrue: [rightX _ line right]		ifFalse: [rightX _ selectionStop left].	selectionStart = selectionStop		ifTrue:		[rightX _ rightX + 1.		w _ self caretWidth.		caretColor _ Display depth <= 2					ifTrue: [Color black]					ifFalse: [self selectionColor].		1 to: w do:			[:i |  "Draw caret triangles at top and bottom"			aCanvas fillRectangle: ((leftX-w+i-1)@(line top+i-1) extent: (w-i*2+3)@1)				color: caretColor.			aCanvas fillRectangle: ((leftX-w+i-1)@(line bottom-i) extent: (w-i*2+3)@1)				color: caretColor].		aCanvas fillRectangle: (leftX@line top corner: rightX@line bottom)				color: caretColor]	ifFalse:		[aCanvas fillRectangle: (leftX@line top corner: rightX@line bottom)				color: self selectionColor]! !!NewParagraph methodsFor: 'display' stamp: 'di 1/14/1999 20:56'!selectionColor	Display depth = 1 ifTrue: [^ Color veryLightGray].	Display depth = 2 ifTrue: [^ Color gray].	^ (Color r: 0.4 g: 1.0 b: 0)! !!Preferences class methodsFor: 'menu parameters' stamp: 'di 1/14/1999 20:16'!menuBorderColor	Display depth <= 2 ifTrue: [^ Color black].	^ Parameters at: #menuBorderColor! !!Preferences class methodsFor: 'menu parameters' stamp: 'di 1/14/1999 20:17'!menuColor	Display depth <= 2 ifTrue: [^ Color white].	^ Parameters at: #menuColor! !!Preferences class methodsFor: 'menu parameters' stamp: 'di 1/14/1999 20:19'!menuTitleBorderColor	Display depth <= 2 ifTrue: [^ Color black].	^ Parameters at: #menuTitleBorderColor! !!Preferences class methodsFor: 'menu parameters' stamp: 'di 1/14/1999 20:18'!menuTitleColor	Display depth = 1 ifTrue: [^ Color white].	Display depth = 2 ifTrue: [^ Color gray].	^ Parameters at: #menuTitleColor! !!TranslucentColor methodsFor: 'conversions' stamp: 'di 1/14/1999 20:05'!bitPatternForDepth: depth	"Return an appropriate bit pattern or stipple.  This will almost never be meaningful for tranlucentColors, except for the degenerate case of tranparency."	alpha = 0 ifTrue: [^ Bitmap with: 0].	^ super bitPatternForDepth: depth! !