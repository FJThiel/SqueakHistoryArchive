'From Squeak2.6 of 11 October 1999 [latest update: #1655] on 26 November 1999 at 10:28:18 pm'!"Change Set:		AlignmentTweaksDate:			25 November 1999Author:			Dan IngallsAn attempt to stamp out rampant redisplay in Alignment morphs when very little is really changing."!RectangleMorph subclass: #AlignmentMorph	instanceVariableNames: 'orientation centering hResizing vResizing inset minCellSize openToDragNDrop layoutNeeded priorFullBounds '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!!AlignmentMorph methodsFor: 'geometry' stamp: 'di 11/26/1999 22:16'!layoutChanged	layoutNeeded ifTrue: [^ self].  "In process."	layoutNeeded _ true.	priorFullBounds _ fullBounds.  "Remember fullBounds"	super layoutChanged.! !!AlignmentMorph methodsFor: 'layout' stamp: 'di 11/26/1999 21:37'!fullBounds	"This is the hook that triggers lazy re-layout of layout morphs. It works because layoutChanged clears the fullBounds cache. Once per cycle, the fullBounds is requested from every morph in the world, and that request gets propagated through the entire submorph hierarchy, causing re-layout where needed. Note that multiple layoutChanges to the same morph can be done with little cost, since the layout is only done when the morph needs to be displayed."	fullBounds ifNil: [		self resizeIfNeeded.		self fixLayout.		super fullBounds.  "updates cache"		priorFullBounds == nil			ifTrue: [self invalidRect: fullBounds]			ifFalse: [fullBounds = priorFullBounds					ifFalse: ["report change due to layout"							self invalidRect: (fullBounds merge: priorFullBounds)]].		layoutNeeded _ false].	^ super fullBounds! !!AlignmentMorph methodsFor: 'private' stamp: 'di 11/26/1999 22:11'!layoutInWidth: w height: h	"Adjust the size of the receiver in its space-filling dimensions during layout. This message is sent to only to layout submorphs."	((hResizing = #spaceFill) and: [bounds width ~= w]) ifTrue: [		bounds _ bounds origin extent: (w @ bounds height).		self layoutChanged].	((vResizing = #spaceFill) and: [bounds height ~= h]) ifTrue: [		bounds _ bounds origin extent: (bounds width @ h).		self layoutChanged].! !!AlignmentMorph methodsFor: 'private' stamp: 'di 11/26/1999 22:27'!resizeIfNeeded	"Resize this morph if it is space-filling or shrink-wrap and its owner is not a layout morph."	| newWidth newHeight |	newWidth _ bounds width.	newHeight _ bounds height.	(owner == nil or: [owner isAlignmentMorph not]) ifTrue: [		"if spaceFill and not in a LayoutMorph, grow to enclose submorphs"		hResizing = #spaceFill ifTrue: [newWidth _ self minWidth max: self bounds width].		vResizing = #spaceFill ifTrue: [newHeight _ self minHeight max: self bounds height]].	"if shrinkWrap, adjust size to just fit around submorphs"	hResizing = #shrinkWrap ifTrue: [newWidth _ self minWidth].	vResizing = #shrinkWrap ifTrue: [newHeight _ self minHeight].	((newWidth ~= bounds width) or: [newHeight ~= bounds height])		ifTrue: ["bounds really changed"				bounds _ bounds origin extent: newWidth@newHeight].! !