'From Squeak3.2alpha of 3 October 2001 [latest update: #4530] on 21 November 2001 at 4:25:31 pm'!"Change Set:		vocabForSmalltalk-swDate:			21 November 2001Author:			Scott WallaceAdds a System vocabulary specially for Smalltalk.Adds -- but does not yet provide a UI to, except via a new item added to the 'do' menu' -- a feature to save the image with a version number, using a scheme quite comparable to the one used  for automatically-generated fileout-version-numbers.  This item is also available as one of the handful of things in the initial illustrative take on the custom System vocabulary.Cleans up issues relating to the names used for reference and in tiles and viewers in the scripting system vis-a-vis Classes and other named globals."!!Object methodsFor: 'testing' stamp: 'sw 11/19/2001 13:28'!nameForViewer	"Answer a name to be shown in a Viewer that is viewing the receiver"	| aName |	(aName _ self uniqueNameForReferenceOrNil) ifNotNil: [^ aName].	(aName _ self knownName) ifNotNil: [^ aName].	^ [(self asString copyWithout: Character cr) truncateTo:  27] ifError:		[:msg :rcvr | ^ self class name printString]! !!Object methodsFor: 'viewer' stamp: 'sw 11/21/2001 15:16'!uniqueNameForReference	"Answer a nice name by which the receiver can be referred to by other objects.  At present this uses a global References dictionary to hold the database of references, but in due course this will need to acquire some locality"	| aName nameSym stem knownClassVars |	(aName _ self uniqueNameForReferenceOrNil) ifNotNil: [^ aName].	(stem _ self knownName) ifNil:		[stem _ self defaultNameStemForInstances asString].	stem _ stem select: [:ch | ch isLetter or: [ch isDigit]].	stem size == 0 ifTrue: [stem _ 'A'].	stem first isLetter ifFalse:		[stem _ 'A', stem].	stem _ stem capitalized.	knownClassVars _ ScriptingSystem allKnownClassVariableNames.	aName _ Utilities keyLike:  stem satisfying:		[:jinaLake |			nameSym _ jinaLake asSymbol.			 ((References includesKey:  nameSym) not and:				[(Smalltalk includesKey: nameSym) not]) and:						[(knownClassVars includes: nameSym) not]].	References at: (aName _ aName asSymbol) put: self.	^ aName! !!Object methodsFor: 'viewer' stamp: 'sw 11/21/2001 15:18'!uniqueNameForReferenceOrNil	"If the receiver has a unique name for reference, return it here, else return nil"	| aName |	(References includesIdentity: self) ifTrue: [^ References keyAtValue: self].	(aName _ Smalltalk keyAtValue: self ifAbsent: [nil]) ifNotNil: [^ aName].	^ nil! !!SystemDictionary methodsFor: 'browsing' stamp: 'sw 11/21/2001 15:09'!browseMethodsWithString: aString	"Launch a browser on all methods that contain string literals with aString as a substring. The search is case-insensitive, unless the shift key is pressed, in which case the search is case-sensitive."	'string for testing'.	^ self browseMethodsWithString: aString matchCase: Sensor shiftPressed	"Smalltalk browseMethodsWithString: 'Testing' matchCase: false"	"Smalltalk browseMethodsWithString: 'Testing' matchCase: true"! !!SystemDictionary methodsFor: 'browsing' stamp: 'sw 10/29/2001 09:00'!browseMethodsWithString: aString matchCase: caseSensitive	"Launch a browser on all methods that contain string literals with aString as a substring. Make the search case-sensitive or insensitive as dictated by the caseSensitive boolean parameter"	self browseAllSelect:			[:method |				method  hasLiteralSuchThat: [:lit |					lit class == String and:					[lit includesSubstring: aString caseSensitive: caseSensitive]]]		name:  'Methods with string ', aString printString, (caseSensitive ifTrue: [' (case-sensitive)'] ifFalse: [' (case-insensitive)'])		autoSelect: aString.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sw 11/19/2001 15:21'!saveAsNewVersion	"Save the image/changes using the next available version number."	"Smalltalk saveAsNewVersion"	| newName changesName aName anIndex |	aName _ FileDirectory baseNameFor: (FileDirectory default localNameFor: Smalltalk imageName).	anIndex _ aName lastIndexOf: FileDirectory dot asCharacter ifAbsent: [nil].	(anIndex notNil and: [(aName copyFrom: anIndex + 1 to: aName size) isAllDigits])		ifTrue:			[aName _ aName copyFrom: 1 to: anIndex - 1].	newName _ FileDirectory default nextNameFor: aName extension: FileDirectory imageSuffix.	changesName _ self fullNameForChangesNamed: newName.	"Check to see if there is a .changes file that would cause a problem if we saved a new .image file with the new version number"	(FileDirectory default includesKey: changesName)		ifTrue:			[^ self inform:'There is already .changes file of the desired name,', newName, 'curiously already present, even though there isno corresponding .image file.   Please remedymanually and then repeat your request.'].	(SourceFiles at: 2) ifNotNil:		[self saveChangesInFileNamed: (self fullNameForChangesNamed: newName)].	self saveImageInFileNamed: (self fullNameForImageNamed: newName)! !!SystemDictionary methodsFor: 'copying' stamp: 'sw 11/21/2001 15:08'!assureUniClass	"Assure that the receiver has a uniclass.  Or rather, in this case, stop short of fulfilling such a request"	self error: 'We do not want uniclasses descending from here'! !!SystemDictionary methodsFor: 'copying' stamp: 'sw 10/23/2001 10:23'!vocabularyDemanded	"Answer the vocabulary that the receiver really would like to use in a Viewer"	^ Vocabulary vocabularyNamed: #System! !!Vocabulary class methodsFor: 'class initialization' stamp: 'sw 11/19/2001 12:13'!initializeStandardVocabularies	"Initialize a few standard vocabularies and place them in the AllStandardVocabularies list."	AllStandardVocabularies _ nil.	self allStandardVocabularies.	self addEToyVocabulary.	self addEToyVectorVocabulary.	self addStandardVocabulary: self newPublicVocabulary.	self addStandardVocabulary: FullVocabulary new.	self addStandardVocabulary: self newQuadVocabulary.	self addStandardVocabulary: ColorType new.	self addStandardVocabulary: BooleanType new.	self addStandardVocabulary: GraphicType new.	self addStandardVocabulary: PlayerType new.	self addStandardVocabulary: SoundType new.	self addStandardVocabulary: StringType new.	self addStandardVocabulary: MenuType new.	self addStandardVocabulary: UnknownType new.	self addStandardVocabulary: (SymbolListType new symbols: #(leftToRight rightToLeft topToBottom bottomToTop); vocabularyName: #ListDirection; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(topLeft bottomRight center justified); vocabularyName: #ListCentering; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(buttonDown whilePressed buttonUp); vocabularyName: #ButtonPhase; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(rigid spaceFill shrinkWrap); vocabularyName: #Resizing; yourself).	self addStandardVocabulary: self newSystemVocabulary.  "A custom vocabulary for Smalltalk -- still under development)"	self numberVocabulary.  		"creates and adds it"	self wonderlandVocabulary.  	"creates and adds it"	self vocabularyForClass: Time.   "creates and adds it"	"Vocabulary initialize"! !!Vocabulary class methodsFor: 'method interfaces' stamp: 'sw 11/16/2001 14:08'!primeMethodInterfacePool	"Artificially place a number of select method interfaces into the pool of same stored by MethodInterface class.  This is an interim and tentative bootstrapping process primarily of value during early development."	| anInterface |	#(	(defaultColor Color 'The default color of an object')	(canHaveFillStyles Boolean 'Whether I can have fill filstyles')	(wantsToBeCachedByHand Boolean 'Whether I would like to be cached by the hand')	(borderWidth Number 'The width of my border')	(couldHaveRoundedCorners Boolean 'Whether I could have rounded corners')	(borderColor Color 'The color of my border')	(doesBevels Boolean 'Whether bevels are appropriate here')	) do:		[:tuple |			anInterface _ MethodInterface new initializeFor: tuple first.			anInterface resultType: tuple second.			anInterface documentation: tuple third.			MethodInterface rememberMethodInterface: anInterface]"Vocabulary primeMethodInterfacePool"! !!Vocabulary class methodsFor: 'eToy vocabularies' stamp: 'sw 11/21/2001 15:20'!newSystemVocabulary	"Answer a Vocabulary object representing significant requests one can make to the Smalltalk object"	| aVocabulary |	aVocabulary _ self new.	aVocabulary vocabularyName: #System.	aVocabulary documentation: 'Useful messages you might want to send to Smallalk'.	aVocabulary initializeFromTable:  #((aboutThisSystem none () none (basic queries) 'put up a message describing the system' unused)(saveAsNewVersion none () none (services) 'advance to the next available image-version number and save the image under that new name' unused znak)(datedVersion none () String (queries) 'the version of the Squeak system')(endianness none () String (queries) 'big or little - the byte-ordering of the hardware Squeak is currently running on')(exitToDebugger none () none (dangerous) 'exits to the host debugger.  Do not use this -- I guarantee you will be sorry.')(bytesLeft none () Number (basic services) 'perform a garbage collection and answer the number of bytes of free space remaining in the system')(browseAllCallsOn: none ((aSelector String)) none (#'queries') 'browse all calls on a selector')(browseAllImplementorsOf: none ((aSelector String)) none (#'queries') 'browse all implementors of a selector')(allMethodsWithSourceString:matchCase: none ((aString String) (caseSensitive Boolean)) none (queries) 'browse all methods that have the given source string, making the search case-sensitive or not depending on the argument provided.')(browseMethodsWithString:matchCase: none ((aString String) (caseSensitive Boolean)) none (queries) 'browse all methods that contain the given string in any string literal, making the search case-sensitive or not depending on the argument provided.')(browseAllImplementorsOf:localTo: none ((aSelector String) (aClass Class)) none (#'queries') 'browse all implementors of a selector that are local to a class'))."(isKindOf: none 	((aClass Class)) Boolean (#'class membership') 'answer whether the receiver''s superclass chain includes aClass')"	^ aVocabulary"Vocabulary initialize""Vocabulary addStandardVocabulary: Vocabulary newSystemVocabulary""Smalltalk basicInspect""Smalltalk beViewed"! !"Postscript:"Utilities appendToCommonRequests: 'Smalltalk saveAsNewVersion'.!