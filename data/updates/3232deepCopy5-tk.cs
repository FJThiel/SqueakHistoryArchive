'From Squeak2.9alpha of 16 June 2000 [latest update: #3284] on 23 January 2001 at 4:47:46 pm'!"Change Set:		deepCopy5-tkDate:			22 January 2001Author:			Ted KaehlerThe property #formerOwner was being very deep copied in Morphs that was being duplicated.  Entire Worlds were being duplicated. 	This fix establishes a list of properties that will always be 'weakly copied'.  See MorphExtension>>copyWeakly.  Just add the name of a property to that list.	Also makes EVERY field of an EventHandler be weakly copied!!  You can not duplicate an object by duplicating a button that operates on it."!!EventHandler methodsFor: 'copying' stamp: 'tk 1/22/2001 17:43'!veryDeepFixupWith: deepCopier	| old |	"ALL inst vars were weakly copied.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"super veryDeepFixupWith: deepCopier.1 to: self class instSize do:	[:ii | old _ self instVarAt: ii.	self instVarAt: ii put: (deepCopier references at: old ifAbsent: [old])].! !!EventHandler methodsFor: 'copying' stamp: 'tk 1/22/2001 17:39'!veryDeepInner: deepCopier	"ALL fields are weakly copied!!  Can't duplicate an object by duplicating a button that activates it.  See DeepCopier."	super veryDeepInner: deepCopier.	"just keep old pointers to all fields"	clickRecipient _ clickRecipient.!]style[(25 108 10 111)f1b,f1,f1LDeepCopier Comment;,f1! !!MorphExtension methodsFor: 'copying' stamp: 'tk 1/22/2001 16:56'!copyWeakly	"list of names of properties whose values should be weak-copied when veryDeepCopying a morph.  See DeepCopier."	^ #(formerOwner )	"add yours to this list" "formerOwner should really be nil at the time of the copy, but this will work just fine."!]style[(10 101 10 139)f1b,f1,f1LDeepCopier Comment;,f1! !!MorphExtension methodsFor: 'copying' stamp: 'tk 1/22/2001 17:51'!veryDeepFixupWith: deepCopier	| list |	"If target and arguments fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!!!"	super veryDeepFixupWith: deepCopier.	otherProperties ifNotNil: [		list _ self copyWeakly.	"Properties whose values are only copied weakly"		"replace those values if they were copied via another path"		list do: [:pp | 			(otherProperties at: pp ifAbsent: [nil]) ifNotNil: [				otherProperties at: pp put: 					(deepCopier references at: (otherProperties at: pp) 									ifAbsent: [(otherProperties at: pp)])]]].! !!MorphExtension methodsFor: 'copying' stamp: 'tk 1/22/2001 17:49'!veryDeepInner: deepCopier	| list values vv |	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  This is special code for the dictionary.  See DeepCopier."	super veryDeepInner: deepCopier.	locked _ locked veryDeepCopyWith: deepCopier. 	visible _ visible veryDeepCopyWith: deepCopier. 	sticky _ sticky veryDeepCopyWith: deepCopier. 	balloonText _ balloonText veryDeepCopyWith: deepCopier. 	balloonTextSelector _ balloonTextSelector veryDeepCopyWith: deepCopier. 	externalName _ externalName veryDeepCopyWith: deepCopier. 	isPartsDonor _ isPartsDonor veryDeepCopyWith: deepCopier. 	actorState _ actorState veryDeepCopyWith: deepCopier. 	player _ player veryDeepCopyWith: deepCopier.	"Do copy the player of this morph" 	eventHandler _ eventHandler veryDeepCopyWith: deepCopier.	"has its own restrictions"	otherProperties ifNotNil: [		list _ self copyWeakly.	"Properties whose values are only copied weakly"		values _ list collect: [:pp | 			vv _ otherProperties at: pp ifAbsent: [nil].			vv ifNotNil: [otherProperties at: pp put: nil]]. "zap it"	 	otherProperties _ otherProperties veryDeepCopyWith: deepCopier.		1 to: list size do: [:ii | "put old values back"			(values at: ii) ifNotNil: [otherProperties at: pp put: (values at: ii)]]].!]style[(25 153 10 1104)f1b,f1,f1LDeepCopier Comment;,f1! !