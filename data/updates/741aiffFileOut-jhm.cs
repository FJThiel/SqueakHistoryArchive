'From Squeak 2.3 of January 14, 1999 on 15 March 1999 at 8:05:12 am'!"Change Set:		aiffFileOut-jhmDate:			15 March 1999Author:			John MaloneyAdds 'storeAIFFOnFileNamed:' for SampledSound and LoopedSampledSoundto allow exporting these sound in uncompressed AIFF files. Also makesthe default loudness for SampledSounds recorded with the sound recorderbe 1.0, rather than 0.25."!!AbstractSound methodsFor: 'file i/o' stamp: 'jm 3/13/1999 11:47'!storeAIFFOnFileNamed: fileName	| f |	f _ (FileStream fileNamed: fileName) binary.	self storeAIFFSamples: self samples samplingRate: self originalSamplingRate on: f.	f close.! !!AbstractSound methodsFor: 'file i/o' stamp: 'jm 3/13/1999 11:48'!storeAIFFSamples: aSoundBuffer samplingRate: rate on: aBinaryStream	| sampleCount s |	sampleCount _ aSoundBuffer monoSampleCount.	aBinaryStream nextPutAll: 'FORM' asByteArray.	aBinaryStream nextInt32Put: (2 * sampleCount) + ((7 * 4) + 18).	aBinaryStream nextPutAll: 'AIFF' asByteArray.	aBinaryStream nextPutAll: 'COMM' asByteArray.	aBinaryStream nextInt32Put: 18.	aBinaryStream nextNumber: 2 put: 1.  "channels"	aBinaryStream nextInt32Put: sampleCount.	aBinaryStream nextNumber: 2 put: 16.  "bits/sample"	self storeExtendedFloat: rate on: aBinaryStream.	aBinaryStream nextPutAll: 'SSND' asByteArray.	aBinaryStream nextInt32Put: (2 * sampleCount) + 8.	aBinaryStream nextInt32Put: 0.	aBinaryStream nextInt32Put: 0.	1 to: sampleCount do: [:i |		s _ aSoundBuffer at: i.		aBinaryStream nextPut: ((s bitShift: -8) bitAnd: 16rFF).		aBinaryStream nextPut: (s bitAnd: 16rFF)].! !!AbstractSound methodsFor: 'file i/o' stamp: 'jm 3/13/1999 11:34'!storeExtendedFloat: aNumber on: aBinaryStream	"Store an Apple extended-precision 80-bit floating point number on the given stream."	"Details: I could not find the specification for this format, so constants were determined empirically based on assumption of 1-bit sign, 15-bit exponent, 64-bit mantissa. This format does not seem to have an implicit one before the mantissa as some float formats do."	| n isNeg exp mantissa |	n _ aNumber asFloat.	isNeg _ false.	n < 0.0 ifTrue: [		n _ 0.0 - n.		isNeg _ true].	exp _ (n log: 2.0) ceiling.	mantissa _ (n * (2 raisedTo: 64 - exp)) truncated.	exp _ exp + 16r4000 - 2.  "not sure why the -2 is needed..."	isNeg ifTrue: [exp _ exp bitOr: 16r8000].  "set sign bit"	aBinaryStream nextPut: ((exp bitShift: -8) bitAnd: 16rFF).	aBinaryStream nextPut: (exp bitAnd: 16rFF).	8 to: 1 by: -1 do: [:i | aBinaryStream nextPut: (mantissa digitAt: i)].! !!LoopedSampledSound methodsFor: 'accessing' stamp: 'jm 3/15/1999 08:01'!samples	"For compatability with SampledSound. Just return my left channel (which is the only channel if I am mono)."	^ leftSamples! !!SampledSound methodsFor: 'initialization' stamp: 'jm 3/15/1999 07:50'!setSamples: anArray samplingRate: rate	"Set my samples array to the given array with the given nominal sampling rate. Altering the rate parameter allows the sampled sound to be played back at different pitches."	"Assume: anArray is either a SoundBuffer or a collection of signed 16-bit sample values."	"(SampledSound		samples: SampledSound coffeeCupClink		samplingRate: 5000) play"	"copy the array into a SoundBuffer if necessary"	anArray class isWords		ifTrue: [samples _ anArray]		ifFalse: [samples _ SoundBuffer fromArray: anArray].	samplesSize _ samples size.	originalSamplingRate _ rate.	initialCount _ (samplesSize * self samplingRate) // originalSamplingRate.	self reset.! !