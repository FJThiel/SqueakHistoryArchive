'From Squeak2.6 of 11 October 1999 [latest update: #1562] on 20 October 1999 at 4:26:48 pm'!"Change Set:		activeVersions-swDate:			20 October 1999Author:			Scott WallaceDefines VersionBrowser as a subclass of ChangeList that specifically deals with versions.  Brings the lazy-updating methodology to Versions browsers.For both mvc and morphic, when you use a versions browser to revert a method, the browser now reformulates itself and emerges fully up to date.In morphic, in addition, versions browsers keep themselves up to date even when they are looking at methods that have been changed elsewhere since the versions browser was launched -- the updates catch up during stepping, or, if the 'lazyUpdating' preference is false, when the window is activated.More buttons available in the morphic versions browser if optionalMorphicButtons is true."!ChangeList subclass: #VersionsBrowser	instanceVariableNames: 'classOfMethod selectorOfMethod '	classVariableNames: ''	poolDictionaries: ''	category: 'Interface-Changes'!!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 10/19/1999 15:12'!changeRecordsAt: selector	"Return a list of ChangeRecords for all versions of the method at selector. Source code can be retrieved by sending string to any one.  Return nil if the method is absent."	"(Pen changeRecordsAt: #go:) collect: [:cRec | cRec string]"	| aList |	aList _ VersionsBrowser new			scanVersionsOf: (self compiledMethodAt: selector ifAbsent: [^ nil])			class: self meta: self isMeta			category: (self whichCategoryIncludesSelector: selector)			selector: selector.	^ aList ifNotNil: [aList changeList]! !!ChangeSet methodsFor: 'method changes' stamp: 'sw 10/19/1999 15:01'!browseMessagesWithPriorVersions	"Open a message list browser on the new and changed methods in the receiver which have at least one prior version.  6/28/96 sw"	| aList aSelector aClass |	aList _ self changedMessageListAugmented select:		[:msg |  Utilities setClassAndSelectorFrom: msg in: 				[:cl :sl | aClass _ cl.  aSelector _ sl].			(VersionsBrowser versionCountForSelector: aSelector class: aClass) > 1].	aList size > 0 ifFalse: [self inform: 'None!!'.  ^ nil].	Smalltalk browseMessageList: aList name: (self name, ' methods that have prior versions')! !!StringHolder methodsFor: 'message list menu' stamp: 'sw 10/12/1999 17:42'!browseVersions	"Create and schedule a message set browser on all versions of the 	currently selected message selector."	| class selector |	(selector _ self selectedMessageName) ifNotNil:		[class _ self selectedClassOrMetaClass.		VersionsBrowser			browseVersionsOf: (class compiledMethodAt: selector)			class: self selectedClass			meta: class isMeta			category: self selectedMessageCategoryName			selector: selector]! !!ChangeList methodsFor: 'initialization-release' stamp: 'sw 10/19/1999 15:13'!initialize	showDiffs _ Preferences showDiffsInChangeList.	changeList _ OrderedCollection new.	list _ OrderedCollection new.	listIndex _ 0.	super initialize! !!ChangeList methodsFor: 'scanning' stamp: 'sw 10/19/1999 15:13'!scanFile: aFile from: startPosition to: stopPosition	| itemPosition item prevChar |	file _ aFile.	changeList _ OrderedCollection new.	list _ OrderedCollection new.	listIndex _ 0.	file position: startPosition.'Scanning ', aFile localName, '...'	displayProgressAt: Sensor cursorPoint	from: startPosition to: stopPosition	during: [:bar |	[file position < stopPosition]		whileTrue:		[bar value: file position.		[file atEnd not and: [file peek isSeparator]]				whileTrue: [prevChar _ file next].		(file peekFor: $!!)		ifTrue:			[(prevChar = Character cr or: [prevChar = Character lf])				ifTrue: [self scanCategory]]		ifFalse:			[itemPosition _ file position.			item _ file nextChunk.			file skipStyleChunk.			item size > 0 ifTrue:				[self addItem: (ChangeRecord new file: file position: itemPosition type: #doIt)					text: 'do it: ' , (item contractTo: 50)]]]].	listSelections _ Array new: list size withAll: false! !!ChangeList methodsFor: 'accessing' stamp: 'sw 10/19/1999 15:11'!showsVersions	^ false! !!ChangeSorter methodsFor: 'message list' stamp: 'sw 10/12/1999 17:41'!browseVersions	"Create and schedule a changelist browser on the versions of the 	selected message."	| class selector method category pair sourcePointer |	(selector _ self selectedMessageName) ifNil: [^ self].	class _ self selectedClassOrMetaClass.	(class includesSelector: selector)		ifTrue: [method _ class compiledMethodAt: selector.				category _ class whichCategoryIncludesSelector: selector.				sourcePointer _ nil]		ifFalse: [pair _ myChangeSet methodRemoves							at: (Array with: class name with: selector)							ifAbsent: [^ nil].				sourcePointer _ pair first.				method _ CompiledMethod toReturnSelf setSourcePointer: sourcePointer.				category _ pair last].	VersionsBrowser		browseVersionsOf: method		class: self selectedClass meta: class isMeta		category: category selector: selector		lostMethodPointer: sourcePointer.! !!Debugger methodsFor: 'context stack menu' stamp: 'sw 10/12/1999 17:41'!browseVersions	"Create and schedule a message set browser on all versions of the 	currently selected message selector."	| class selector |	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	VersionsBrowser		browseVersionsOf: (class compiledMethodAt: selector)		class: self selectedClass		meta: self selectedClass isMeta		category: self selectedMessageCategoryName		selector: selector! !!FileContentsBrowser methodsFor: 'other' stamp: 'sw 10/12/1999 17:42'!browseVersions	"Create and schedule a message set browser on all versions of the 	currently selected message selector."	| class selector |	(selector _ self selectedMessageName) ifNotNil:		[class _ self selectedClassOrMetaClass.		(class exists and: [class realClass includesSelector: selector]) ifTrue:			[VersionsBrowser				browseVersionsOf: (class realClass compiledMethodAt: selector)				class: class realClass				meta: class realClass isMeta				category: self selectedMessageCategoryName				selector: selector]]! !!Utilities class methodsFor: 'summer97 additions' stamp: 'sw 10/12/1999 17:42'!browseVersionsForClass: aClass selector: aSelector	VersionsBrowser		browseVersionsOf: (aClass compiledMethodAt: aSelector)		class: aClass		meta: aClass isMeta		category: (aClass organization categoryOfElement: aSelector)		selector: aSelector! !!VersionsBrowser reorganize!('init & update' optionalMorphicButtons reformulateList scanVersionsOf:class:meta:category:selector: updateListsAndCodeIn:)('menu' fileInSelections offerVersionsHelp removeMethodFromChanges versionsHelpString versionsMenu:)('misc' showsVersions)!!VersionsBrowser methodsFor: 'init & update' stamp: 'sw 10/19/1999 15:09'!optionalMorphicButtons	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightBlue; borderWidth: 1; borderColor: Color blue darker.	aRow addTransparentSpacerOfSize: (5@0).	#(	('compare to current' 	compareToCurrentVersion			'opens a separate window which shows the text differences between the selected version and the current version')		('revert'	fileInSelections			'reverts the method to the version selected')		('remove from changes'	removeMethodFromChanges			'remove this method from the current change set')		('help'	offerVersionsHelp			'further explanation about use of Versions browsers')) do:			[:triplet |				aButton _ aButton fullCopy.				aButton actionSelector: triplet second.				aButton label: triplet first.				aButton setBalloonText: triplet third.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.		^ aRow! !!VersionsBrowser methodsFor: 'init & update' stamp: 'sw 10/12/1999 18:23'!reformulateList	| aMethod |	"Some uncertainty about how to deal with lost methods here"	aMethod _ classOfMethod compiledMethodAt: selectorOfMethod ifAbsent: [^ self].		self scanVersionsOf: aMethod class: classOfMethod theNonMetaClass meta: classOfMethod isMeta category: #elvis selector: selectorOfMethod.	self changed: #list. "for benefit of mvc"	self contentsChanged! !!VersionsBrowser methodsFor: 'init & update' stamp: 'sw 10/19/1999 15:11'!scanVersionsOf: method class: class meta: meta category: category selector: selector	| position prevPos prevFileIndex preamble tokens sourceFilesCopy stamp |	selectorOfMethod _ selector.	currentCompiledMethod _ method.	classOfMethod _ meta ifTrue: [class class] ifFalse: [class].	changeList _ OrderedCollection new.	list _ OrderedCollection new.	listIndex _ 0.	position _ method filePosition.	sourceFilesCopy _ SourceFiles collect:		[:x | x isNil ifTrue: [ nil ]				ifFalse: [x readOnlyCopy]].	method fileIndex == 0 ifTrue: [^ nil].	file _ sourceFilesCopy at: method fileIndex.	[position notNil & file notNil]		whileTrue:		[file position: (0 max: position-150).  "Skip back to before the preamble"		[file position < (position-1)]  "then pick it up from the front"			whileTrue: [preamble _ file nextChunk].		"Preamble is likely a linked method preamble, if we're in			a changes file (not the sources file).  Try to parse it			for prior source position and file index"		prevPos _ nil.		stamp _ ''.		(preamble findString: 'methodsFor:' startingAt: 1) > 0			ifTrue: [tokens _ Scanner new scanTokens: preamble]			ifFalse: [tokens _ Array new  "ie cant be back ref"].		((tokens size between: 7 and: 8)			and: [(tokens at: tokens size-5) = #methodsFor:])			ifTrue:				[(tokens at: tokens size-3) = #stamp:				ifTrue: ["New format gives change stamp and unified prior pointer"						stamp _ tokens at: tokens size-2.						prevPos _ tokens last.						prevFileIndex _ prevPos // 16r1000000.						prevPos _ prevPos \\ 16r1000000]				ifFalse: ["Old format gives no stamp; prior pointer in two parts"						prevPos _ tokens at: tokens size-2.						prevFileIndex _ tokens last].				(prevPos = 0 or: [prevFileIndex = 0]) ifTrue: [prevPos _ nil]].		((tokens size between: 5 and: 6)			and: [(tokens at: tokens size-3) = #methodsFor:])			ifTrue:				[(tokens at: tokens size-1) = #stamp:				ifTrue: ["New format gives change stamp and unified prior pointer"						stamp _ tokens at: tokens size]]. 		self addItem:				(ChangeRecord new file: file position: position type: #method						class: class name category: category meta: meta stamp: stamp)			text: stamp , ' ' , class name , (meta ifTrue: [' class '] ifFalse: [' ']) , selector.		position _ prevPos.		prevPos notNil ifTrue:			[file _ sourceFilesCopy at: prevFileIndex]].	sourceFilesCopy do: [:x | x notNil ifTrue: [x close]].	listSelections _ Array new: list size withAll: false! !!VersionsBrowser methodsFor: 'init & update' stamp: 'sw 10/19/1999 14:11'!updateListsAndCodeIn: aWindow	| aMethod |	aMethod _ classOfMethod compiledMethodAt: selectorOfMethod ifAbsent: [^ false].	aMethod == currentCompiledMethod		ifFalse:			[self reformulateList].	^ true! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 10/12/1999 17:51'!fileInSelections 	super fileInSelections.	self reformulateList! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 10/12/1999 22:49'!offerVersionsHelp	(StringHolder new contents: self versionsHelpString)		openLabel: 'Versions Browsers'! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 10/12/1999 22:36'!removeMethodFromChanges	Smalltalk changes removeSelectorChanges: selectorOfMethod			class: classOfMethod! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 10/12/1999 23:09'!versionsHelpString	^ 'Each entry in the list pane represents a version of the source code for the same method; the topmost entry is the current version, the next entry is the next most recent, etc.To revert to an earlier version, select it (in the list pane) and then do any of the following:  *  Choose "revert to this version" from the list pane menu.  *  Hit the "revert" button,  *  Type ENTER in the code pane  *  Type cmd-s (alt-s) in the code pane.The code pane shows the source for the selected version.  If "diffing" is in effect, then differences betwen the selected version and the version before it are pointed out in the pane.  Turn diffing on and off by choosing "toggle diffing" from the list pane menu, or hitting the "diffs" button.To get a comparison between the selected version and the current version, choose "compare to current" from the list pane menu or hit the "compare to current" button.  (This is meaningless if the current version is selected, and is unnecessary if you''re interested in diffs from between the current version and the next-most-recent version, since the standard in-pane "diff" feature will give you that.)If further versions of the method in question have been submitted elsewhere since you launched a particular Versions Browser, it will still stay nicely up-to-date if you''re in Morphic and have asked that lazy updating be maintained; if you''re in mvc, you can use the "update list" command to make certain the versions list is up to date.Hit the "remove from changes" button, or choose the corresponding command in the list pane menu, to have the method in question deleted from the current change set.  This is useful if you''ve put debugging code into a method, and now want to strip it out and cleanse your current change set of all memory of the excursion.'! !!VersionsBrowser methodsFor: 'menu' stamp: 'sw 10/12/1999 22:32'!versionsMenu: aMenu	^ aMenu labels:'compare to currentrevert to this versionremove from changestoggle diffingupdate listhelp...'	lines: #()	selections: #(compareToCurrentVersion fileInSelections removeMethodFromChanges toggleDiffing reformulateList offerVersionsHelp)! !!VersionsBrowser methodsFor: 'misc' stamp: 'sw 10/19/1999 15:04'!showsVersions	^ true! !!VersionsBrowser class methodsFor: 'as yet unclassified' stamp: 'sw 10/19/1999 14:58'!browseVersionsOf: method class: class meta: meta category: category selector: selector 	^ self browseVersionsOf: method class: class meta: meta category: category selector: selector lostMethodPointer: nil! !!VersionsBrowser class methodsFor: 'as yet unclassified' stamp: 'sw 10/19/1999 15:00'!browseVersionsOf: method class: class meta: meta category: category selector: selector lostMethodPointer: sourcePointer 	| changeList |	Cursor read showWhile:		[changeList _ self new			scanVersionsOf: method class: class meta: meta			category: category selector: selector].	changeList ifNil: [^ self inform: 'No versions available'].	sourcePointer ifNotNil:		[changeList setLostMethodPointer: sourcePointer].	self open: changeList name: 'Recent versions of ' ,selector multiSelect: false! !!VersionsBrowser class methodsFor: 'as yet unclassified' stamp: 'sw 10/19/1999 15:01'!versionCountForSelector: aSelector class: aClass	"Answer the number of versions known to the system for the given class and method, including the current version.  A result of greater than one means that there is at least one superseded version.  Answer zero if no logged version can be obtained."		| method aChangeList |	method _ aClass compiledMethodAt: aSelector ifAbsent: [^ 0].	aChangeList _ self new			scanVersionsOf: method class: aClass meta: aClass isMeta			category: nil selector: aSelector.	^ aChangeList ifNil: [0] ifNotNil: [aChangeList list size]! !ChangeList removeSelector: #scanVersionsOf:class:meta:category:selector:!ChangeList removeSelector: #buttonRowForVersions!ChangeList removeSelector: #versionsMenu:!ChangeList class removeSelector: #browseVersionsOf:class:meta:category:selector:!ChangeList class removeSelector: #versionCountForSelector:class:!ChangeList class removeSelector: #browseVersionsOf:class:meta:category:selector:lostMethodPointer:!