'From Squeak3.6beta of ''4 July 2003'' [latest update: #5331] on 12 July 2003 at 10:40:38 am'!"Change Set:		FITBFocusFix-nkDate:			12 July 2003Author:			Ned KonzFillInTheBlankMorph instances would not get the keyboard focus unless the mouse was over them. This was especially annoying using pen input.This fixes that problem by setting the keyboard focus in getUserResponse.Try it:FillInTheBlankMorph		request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: (ActiveHand position - (100@100))This also includes a version of my prior NewLookFITBFix-nk from 26 June, modified to work without the New Look Preferences package loaded. The comment from that change set was:If you have Diego's New Look Preferences loaded, and have turned off the menuAppearance3d preference, FillInTheBlankMorphs blow up when created."!!FillInTheBlankMorph methodsFor: 'accessing' stamp: 'nk 7/12/2003 10:06'!setQuery: queryString initialAnswer: initialAnswer answerExtent: answerExtent acceptOnCR: acceptBoolean	| query frame topOffset accept cancel buttonAreaHeight |	response _ initialAnswer.	done _ false.	self removeAllMorphs.	self layoutPolicy: ProportionalLayout new.	query _ TextMorph new contents: queryString.	query setNameTo: 'query'.	query lock.		frame _ LayoutFrame new.		frame topFraction: 0.0; topOffset: 2.		frame leftFraction: 0.5; leftOffset: (query width // 2) negated.	query layoutFrame: frame.	self addMorph: query.	topOffset _ query height + 4.	accept _ self createAcceptButton.	self addMorph: accept.	cancel _ self createCancelButton.	self addMorph: cancel.	buttonAreaHeight _ (accept height max: cancel height) + 4.	textPane _ PluggableTextMorph on: self		text: #response		accept: #response:		readSelection: #selectionInterval		menu: #codePaneMenu:shifted:.	textPane extent: answerExtent. 	textPane hResizing: #spaceFill; vResizing: #spaceFill.	textPane borderWidth: 2.	textPane hasUnacceptedEdits: true.	textPane acceptOnCR: acceptBoolean.	textPane setNameTo: 'textPane'.		frame _ LayoutFrame new.		frame leftFraction: 0.0; rightFraction: 1.0; topFraction: 0.0; topOffset: topOffset; bottomFraction: 1.0; bottomOffset: buttonAreaHeight negated.	textPane layoutFrame: frame.	self addMorph: textPane.	self extent: (query extent x max: answerExtent x) + 4 @ (topOffset + answerExtent y + 4 + buttonAreaHeight).! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'nk 7/12/2003 10:07'!createAcceptButton	"create the [accept] button"	| result frame |	result := SimpleButtonMorph new target: self;				 color: Color lightGreen.	result		borderColor: (Preferences menuAppearance3d				ifTrue: [#raised]				ifFalse: [result color twiceDarker]).	result label: 'Accept(s)';		 actionSelector: #accept.	result setNameTo: 'accept'.	frame := LayoutFrame new.	frame rightFraction: 0.5;		 rightOffset: -10;		 bottomFraction: 1.0;		 bottomOffset: -2.	result layoutFrame: frame.	self addMorph: result.	[ self		updateColor: result		color: result color		intensity: 2 ] on: MessageNotUnderstood do: [ :ex | ].	^ result! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'nk 7/12/2003 10:08'!createCancelButton	"create the [cancel] button"	| result frame |	result := SimpleButtonMorph new target: self;				 color: Color lightRed.	result		borderColor: (Preferences menuAppearance3d				ifTrue: [#raised]				ifFalse: [result color twiceDarker]).	result label: 'Cancel(l)';		 actionSelector: #cancel.	result setNameTo: 'cancel'.	frame := LayoutFrame new.	frame leftFraction: 0.5;		 leftOffset: 10;		 bottomFraction: 1.0;		 bottomOffset: -2.	result layoutFrame: frame.	self addMorph: result.	[ self		updateColor: result		color: result color		intensity: 2 ] on: MessageNotUnderstood do: [ :ex | ].	^ result! !!FillInTheBlankMorph methodsFor: 'invoking' stamp: 'nk 6/28/2003 15:24'!getUserResponse	"Wait for the user to accept or cancel, and answer the result string. Answers the empty string if the user cancels."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	| w |	w _ self world.	w ifNil: [^ response].	done _ false.	w activeHand newKeyboardFocus: textPane.	[done] whileFalse: [w doOneCycle].	self delete.	w doOneCycle.	^ response! !