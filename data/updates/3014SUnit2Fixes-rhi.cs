'From Squeak2.9alpha of 13 June 2000 [latest update: #2915] on 11 November 2000 at 2:20:31 pm'!"Change Set:		207SUnit2Fixes-rhiDate:			29 October 2000Author:			Robert HirschfeldIn 2459SUnit2-rh, where the SUnit-Documentation and SUnit-Tests categories got removed, TestFailure must have gotten lost as well. This change set reintroduces TestFailure.Note: Here are some pointers regarding recent CampSmalltalk SUnit ports and enhancements:http://ansi-st-tests.sourceforge.net/SUnit.htmlhttp://minnow.cc.gatech.edu/squeak/1547"!Error subclass: #TestFailure	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Framework'!!TestFailure commentStamp: '<historical>' prior: 0!Signaled in case of a failed test (failure). The test framework distinguishes between failures and errors. A failure is anticipated and checked for with assertions. Errors are unanticipated problems like a division by 0 or an index out of bounds ...!Object subclass: #TestFailureErrorList	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Tests'!!TestFailureErrorList commentStamp: '<historical>' prior: 0!Represents a collection of test cases that are supposed to generate failures and errors to be able to test the generation of failures and errors to be reported in the user interfaces. If this reporting of failures and errors in the user interfaces has to be tested, TestFailureErrorList must be a subclass of TestCase.!]style[(266 20 32)f1,f1LTestFailureErrorList Hierarchy;,f1!!TestInterfaceBase commentStamp: '<historical>' prior: 0!ABSTRACT base class for user interfaces to the SUnit framework.Instance Variables:	result			<TestResult>	classPattern		<String>	selectorPattern	<String>	duration		<Integer> [ms]!]style[(47 1 1 3 44 10 18 6 20 6 14 7 6)f1,f1cgreen;b,f1cred;b,f1bcblack;,f1,f1LTestResult Hierarchy;,f1,f1LString Hierarchy;,f1,f1LString Hierarchy;,f1,f1LInteger Hierarchy;,f1!!TestModel commentStamp: '<historical>' prior: 0!A simple graphical user interface to run all the test cases that exist in this image within the SUnit framework by Kent Beck and Erich Gamma (SUnit release 2, November 1998). A window can be opened via TestModel openAsMorph in a morphic environment, or via TestModel open in a MVC environment. A selection pattern history keeps track of all valid patterns used. The pattern history as well as its management operations are accessible via the yellow button menu of the pattern text entry field.Instance Variables:	summaryText		<String>	detailsText			<String>	failureList			<OrderedCollection of: String>	errorList			<OrderedCollection of: String>	patternHistory		<OrderedCollection of: String>	summaryTextM		<PluggableTextMorph | nil>	summaryTextV		<PluggableTextView | nil>	updateColorSelector	<Symbol>	patternTextM		<PluggableTextMorph | nil>	patternTextV		<PluggableTextView | nil>!]style[(96 1 1 3 12 31 58 21 34 14 259 6 18 6 18 17 5 6 16 17 5 6 20 17 5 6 18 18 24 17 30 6 18 18 24 17 7)f1,f1cgreen;b,f1cred;b,f1bcblack;,f1,f1cblack;,f1,f1dTestModel openAsMorph;;,f1,f1dTestModel open;;,f1,f1LString Hierarchy;,f1,f1LString Hierarchy;,f1,f1LOrderedCollection Hierarchy;,f1,f1LString Hierarchy;,f1,f1LOrderedCollection Hierarchy;,f1,f1LString Hierarchy;,f1,f1LOrderedCollection Hierarchy;,f1,f1LString Hierarchy;,f1,f1LPluggableTextMorph Hierarchy;,f1,f1LPluggableTextView Hierarchy;,f1,f1LSymbol Hierarchy;,f1,f1LPluggableTextMorph Hierarchy;,f1,f1LPluggableTextView Hierarchy;,f1!!TestRunner commentStamp: '<historical>' prior: 0!A simple text-based user interface to run all the test cases that exist in this image within the SUnit framework by Kent Beck and Erich Gamma (SUnit release 2, November 1998). The tests can be executed via TestRunner runTests or TestRunner runTests: '* test*'. The test results appear in the Transcript window.!]style[(97 1 1 3 13 33 58 19 4 30 51)f1,f1cgreen;b,f1cred;b,f1bcblack;,f1,f1cblack;,f1,f1dTestRunner runTests;;,f1,f1dTestRunner runTests: '* test*';;,f1!TestCase subclass: #TestTest	instanceVariableNames: 'hasRun hasSetup '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Tests'!!TestTest commentStamp: '<historical>' prior: 0!Test cases testing the testing framework ;)Instance Variables:	hasRun		<Boolean>	hasSetup	<Boolean>!]style[(75 7 13 7 1)f1,f1LBoolean Hierarchy;,f1,f1LBoolean Hierarchy;,f1!!TestFailureErrorList methodsFor: 'running' stamp: 'rhi 10/29/2000 18:34'!testError	Error new signal.! !!TestFailureErrorList methodsFor: 'running' stamp: 'rhi 10/29/2000 18:34'!testErrorAndFailure	Error new signal.	self assert: false.! !!TestFailureErrorList methodsFor: 'running' stamp: 'rhi 2/5/2000 12:45'!testFailure	self assert: false.! !!TestFailureErrorList methodsFor: 'running' stamp: 'rhi 10/29/2000 18:34'!testFailureAndError	self assert: false.	Error new signal.! !!TestTest methodsFor: 'private accessing' stamp: 'rhi 2/5/2000 12:47'!hasRun: aBoolean	hasRun := aBoolean.! !!TestTest methodsFor: 'private accessing' stamp: 'rhi 2/5/2000 12:47'!hasSetup: aBoolean	hasSetup := aBoolean.! !!TestTest methodsFor: 'private running' stamp: 'rhi 10/29/2000 18:31'!error	Error new signal.! !!TestTest methodsFor: 'private running' stamp: 'rhi 2/5/2000 12:47'!fail	self assert: false.! !!TestTest methodsFor: 'private running'!noop! !!TestTest methodsFor: 'private running' stamp: 'rhi 2/5/2000 12:47'!setRun	self hasRun: true.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!setUp	self hasSetup: true.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testAssert	self assert: true.	self deny: false.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testDefects	| result suite error failure |	suite := TestSuite new.	suite addTest: (error := TestTest selector: #error).	suite addTest: (failure := TestTest selector: #fail).	result := suite run.	self assert: result defects asArray = (Array with: error with: failure).! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testError	| case result |	case := TestTest selector: #error.	result := case run.	self assert: result correctCount = 0.	self assert: result failureCount = 0.	self assert: result runCount = 1.	self assert: result errorCount = 1.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testFail	| case result |	case := TestTest selector: #fail.	result := case run.	self assert: result correctCount = 0.	self assert: result failureCount = 1.	self assert: result runCount = 1.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testResult	| case result |	case := TestTest selector: #noop.	result := case run.	self assert: result runCount = 1.	self assert: result correctCount = 1.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testRun	| case |	case := TestTest selector: #setRun.	case run.	self assert: case hasSetup.	self assert: case hasRun.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testShould	self should: [true].	self shouldnt: [false].! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testShouldRaise	self value: [321/0] shouldRaise: ZeroDivide.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testShouldntRaise	self value: [432/1] shouldntRaise: ZeroDivide.! !!TestTest methodsFor: 'running' stamp: 'rhi 2/5/2000 12:46'!testSuite	| suite result |	suite := TestSuite new.	suite addTest: (TestTest selector: #noop).	suite addTest: (TestTest selector: #fail).	result := suite run.	self assert: result runCount = 2.	self assert: result correctCount = 1.	self assert: result failureCount = 1.! !!TestTest methodsFor: 'testing' stamp: 'rhi 5/22/1999 13:54'!hasRun	^hasRun! !!TestTest methodsFor: 'testing' stamp: 'rhi 5/22/1999 13:54'!hasSetup	^hasSetup! !