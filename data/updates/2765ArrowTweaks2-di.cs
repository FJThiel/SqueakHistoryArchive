'From Squeak2.9alpha of 12 June 2000 [latest update: #2796] on 3 October 2000 at 9:11:12 am'!"Change Set:		ArrowTweaks2Date:			3 October 2000Author:			Dan IngallsA slightly simpler mechanism, a bit more documentation, and a program interface for the specification of custom arrows."!!PolygonMorph methodsFor: 'menu' stamp: 'di 10/3/2000 07:17'!addCustomMenuItems: aMenu hand: aHandMorph	| lineName |	super addCustomMenuItems: aMenu hand: aHandMorph.	aMenu addUpdating: #handlesShowingPhrase target: self action: #showOrHideHandles.	vertices size > 2 ifTrue:		[aMenu addUpdating: #openOrClosePhrase target: self action: #makeOpenOrClosed.		lineName _ closed ifTrue: ['outline'] ifFalse: ['line'].		self isCurve			ifTrue: [aMenu add: 'make segmented ', lineName action: #toggleSmoothing]			ifFalse: [aMenu add: 'make smooth ', lineName action: #toggleSmoothing]]. 	aMenu add: 'specify dashed line' action:  #specifyDashedLine.	self isOpen ifTrue:		[aMenu addLine.		aMenu addWithLabel: '---' enablement: [self isOpen and: [arrows ~~ #none]] action:  #makeNoArrows.		aMenu addWithLabel: '-->' enablement: [self isOpen and: [arrows ~~ #forward]] action:  #makeForwardArrow.		aMenu addWithLabel: '<--' enablement: [self isOpen and: [arrows ~~ #back]] action:  #makeBackArrow.		aMenu addWithLabel: '<->' enablement: [self isOpen and: [arrows ~~ #both]] action:  #makeBothArrows.		aMenu add: 'customize arrows' action: #customizeArrows:.		(self hasProperty: #arrowSpec)			ifTrue: [aMenu add: 'standard arrows' action: #standardArrows]].! !!PolygonMorph methodsFor: 'menu' stamp: 'di 10/3/2000 09:09'!arrowSpec: specPt	"Specify a custom arrow for this line.	specPt x abs gives the length of the arrow (point to base) in terms of borderWidth.	If specPt x is negative, then the base of the arrow will be concave.	specPt y abs gives the width of the arrow.	The standard arrow is equivalent to arrowSpec: 5@4.	See arrowBoundsAt:From: for details."	self setProperty: #arrowSpec toValue: specPt.	self computeBounds! !!PolygonMorph methodsFor: 'menu' stamp: 'di 10/3/2000 09:08'!customizeArrows: evt	| handle origin aHand |	aHand _ evt ifNil: [self primaryHand] ifNotNil: [evt hand].	origin _ aHand position.	handle _ HandleMorph new		forEachPointDo:			[:newPoint | handle removeAllMorphs.			handle addMorph:				(LineMorph from: origin to: newPoint color: Color black width: 1).			self arrowSpec: (newPoint - origin) / 5.0]		lastPointDo:			[:newPoint | handle deleteBalloon.			self halo doIfNotNil: [:halo | halo addHandles].].	aHand attachMorph: handle.	handle setProperty: #helpAtCenter toValue: true.	handle showBalloon:'Move cursor left and rightto change arrow length and style.Move it up and down to change width.Click when done.'.	handle startStepping! !!PolygonMorph methodsFor: 'menu' stamp: 'di 10/3/2000 07:12'!standardArrows	self removeProperty: #arrowSpec.	self computeBounds! !!PolygonMorph methodsFor: 'private' stamp: 'di 10/3/2000 09:02'!arrowBoundsAt: endPoint from: priorPoint 	"Answer a triangle oriented along the line from priorPoint to endPoint."	| d v angle wingBase arrowSpec length width |	v _ endPoint - priorPoint.	angle _ v degrees.	d _ borderWidth max: 1.	arrowSpec _ self valueOfProperty: #arrowSpec ifAbsent: [5@4].	length _ arrowSpec x abs.  width _ arrowSpec y abs.	wingBase _ endPoint + (Point r: d * length degrees: angle + 180.0).	arrowSpec x >= 0		ifTrue: [^ {	endPoint.					wingBase + (Point r: d * width degrees: angle + 125.0).					wingBase + (Point r: d * width degrees: angle - 125.0) }]		ifFalse: ["Negative length means concave base."				^ {	endPoint.					wingBase + (Point r: d * width degrees: angle + 125.0).					wingBase.					wingBase + (Point r: d * width degrees: angle - 125.0) }]! !"Postscript:Convert any Polygons with the old arrow spec format."PolygonMorph allSubInstancesDo:	[:p | (p hasProperty: #arrowLength) ifTrue:		[p arrowSpec: (p valueOfProperty: #arrowLength)@(p valueOfProperty: #arrowWidth).		p removeProperty: #arrowLength;			removeProperty: #arrowWidth]].!