'From Squeak 2.0 of May 22, 1998 on 16 June 1998 at 8:26:25 am'!"Change Set:		WindowMoveTweakDate:			16 June 1998Author:			Dan IngallsMakes it possible to click on a window's label to activate it without moving it.However a long click (still down after repaint) will result in grab for move.Also slightly reorganizes SystemWindow."!!SystemWindow reorganize!('initialization' initialize updateIfOld)('geometry' extent: justDroppedInto:event: labelRect panelRect position:)('label' label labelHeight relabel setLabel: setStripeColorsFrom: update:)('open/close' delete initialExtent openInMVC openInMVCExtent: openInWorld openInWorldExtent:)('resize/collapse' addHandles collapseOrExpand collapsedFrame enterHandle:morph:pointName: fullFrame isCollapsed mouseLeaveEvent:fromPane: removeHandles)('top window' activate activeOnlyOnTop activeOnlyOnTop: isActive passivate)('panes' addMorph:frame: paneColor)('events' handlesMouseDown: mouseDown: mouseMove: mouseUp:)('stepping' step stepTime wantsSteps)('menu' addCustomMenuItems:hand: fullDrawOn:)!!SystemWindow methodsFor: 'geometry' stamp: 'di 6/16/1998 07:57'!extent: newExtent	| inner panelRect labelRect paneColor |	self removeHandles.	isCollapsed		ifTrue: [super extent: newExtent x @ (self labelHeight + 2)]		ifFalse: [super extent: newExtent].	inner _ self innerBounds.	labelRect _ self labelRect.	panelRect _ self panelRect.	paneColor _ Color perform: model defaultBackgroundColor.	stripes first bounds: (labelRect insetBy: 1).	stripes second bounds: (labelRect insetBy: 3).	self setStripeColorsFrom: paneColor.	closeBox align: closeBox topLeft with: inner topLeft + (4@0).	collapseBox align: collapseBox topRight with: inner topRight - (4@0).	label fitContents; setWidth: (label width min: bounds width - 50).	label align: label bounds topCenter with: inner topCenter.	paneMorphs with: paneRects do:		[:m :frame |  m color: paneColor.		m bounds: (((frame scaleBy: panelRect extent) translateBy: panelRect topLeft)) truncated].	isCollapsed		ifTrue: [collapsedFrame _ self bounds]		ifFalse: [fullFrame _ self bounds].	self isActive ifTrue: [self addHandles]! !!SystemWindow methodsFor: 'geometry' stamp: 'di 6/16/1998 07:56'!labelRect	^ self innerBounds withHeight: self labelHeight.! !!SystemWindow methodsFor: 'geometry' stamp: 'di 6/16/1998 07:55'!panelRect	"Return the area below title bar, devoted to panes"	^ self innerBounds topLeft + (0@(self labelHeight))					corner: self innerBounds bottomRight! !!SystemWindow methodsFor: 'top window' stamp: 'di 6/16/1998 08:18'!activate	"Bring me to the front and make me able to respond to mouse and keyboard"	| oldTop |	oldTop _ TopWindow.	TopWindow _ self.	oldTop ifNotNil: [oldTop passivate].	owner firstSubmorph == self ifFalse: [owner addMorphFront: self].	self submorphsDo: [:m | m unlock].	self setStripeColorsFrom: self paneColor.	self addHandles.	self isCollapsed ifFalse: [model modelWakeUp].self world displayWorld.  "paint all changes in this window"! !!SystemWindow methodsFor: 'top window' stamp: 'di 6/16/1998 08:21'!passivate	"Make me unable to respond to mouse and keyboard"	self setStripeColorsFrom: self paneColor.	"Note - the following code is equiv to simply:		self removeHandles.	It has been rewritten so that only 4 damage rects will get repainted, 	all within this window, and none within its subpanes"	"First do the top and bottom handles, together with the label"	self invalidRect: (self bounds topLeft corner: self right@(self top+2)).	self invalidRect: (self left@(self bottom-2) corner: self bounds bottomRight).	(self submorphs select: [:m | (m isMemberOf: Morph)			and: [m bottom <= (self top+2) or: [m top >= (self bottom-2)]]])		do: [:m | m delete].self world displayWorld.	"Now do the left and right handles"	self invalidRect: (self bounds topLeft corner: (self left+2)@self bottom).	self invalidRect: ((self right-2)@self top corner: self bounds bottomRight).	self removeHandles.  "Only these are left"self world displayWorld.	self submorphsDo: [:m | m lock].! !!SystemWindow methodsFor: 'events' stamp: 'di 6/10/1998 14:26'!handlesMouseDown: evt	"If I am not the topWindow, then my mouseDown action dominates"	^ self activeOnlyOnTop and: [self ~~ TopWindow]! !!SystemWindow methodsFor: 'events' stamp: 'di 6/16/1998 08:19'!mouseDown: evt	| cp |	self activate.	(Sensor redButtonPressed "If mouse is really still down after activate"		and: [self labelRect containsPoint: evt cursorPoint]) ifTrue:		[^ evt hand grabMorph: self].	model windowActiveOnFirstClick ifTrue:		["Normally window keeps control of first click.		Need explicit transmission for first-click activity."		cp _ evt cursorPoint.		submorphs do: [:m | (m containsPoint: cp) ifTrue: [m mouseDown: evt]]]! !