"<utf-8>"| me |ctx _ thisContext.[ctx == nil or:[ctx receiver isKindOf: FileStream]] whileFalse:[ctx _ ctx sender].ctx ifNotNil:[me _ ctx receiver].me ifNotNil: [me converter: UTF8TextConverter new.]!Object subclass: #ISOLanguageDefinition	instanceVariableNames: 'iso3 iso2 iso3Alternate language'	classVariableNames: 'ISO2Table ISO3Table ISOCountries'	poolDictionaries: ''	category: 'System-Localization'!!ISOLanguageDefinition methodsFor: 'accessing' stamp: 'mir 7/1/2004 18:20'!iso2	^iso2 ifNil: [self iso3]! !!ISOLanguageDefinition methodsFor: 'accessing' stamp: 'mir 7/1/2004 18:21'!iso3	^iso3 ifNil: ['']! !!ISOLanguageDefinition methodsFor: 'accessing' stamp: 'mir 6/30/2004 15:47'!iso3Alternate	^iso3Alternate ifNil: ['']! !!ISOLanguageDefinition methodsFor: 'accessing' stamp: 'mir 8/15/2003 13:13'!language	^language! !!ISOLanguageDefinition methodsFor: 'initialize' stamp: 'mir 6/30/2004 15:54'!iso2: aString	iso2 := aString ifEmpty: [nil] ifNotEmpty: [aString]! !!ISOLanguageDefinition methodsFor: 'initialize' stamp: 'mir 6/30/2004 15:54'!iso3: aString	iso3 := aString ifEmpty: [nil] ifNotEmpty: [aString]! !!ISOLanguageDefinition methodsFor: 'initialize' stamp: 'mir 6/30/2004 15:54'!iso3Alternate: aString	iso3Alternate := aString ifEmpty: [nil] ifNotEmpty: [aString]! !!ISOLanguageDefinition methodsFor: 'initialize' stamp: 'mir 8/15/2003 13:40'!language: aString	language := aString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ISOLanguageDefinition class	instanceVariableNames: ''!!ISOLanguageDefinition class methodsFor: 'accessing' stamp: 'mir 7/1/2004 18:06'!iso2LanguageDefinition: aString	^self iso2LanguageTable at: aString! !!ISOLanguageDefinition class methodsFor: 'accessing' stamp: 'mir 7/1/2004 18:06'!iso3LanguageDefinition: aString	^self iso3LanguageTable at: aString! !!ISOLanguageDefinition class methodsFor: 'class initialization' stamp: 'mir 7/1/2004 18:19'!initialize	"ISOLanguageDefinition initialize"	ISO3Table := nil.	ISO2Table := nil! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:09'!convertISOCountriesFrom: stream	"Locale convertISOCountriesFrom: Locale isoCountries readStream "	| line c3 c2 |	^String streamContents: [:outStream |	[stream atEnd		or: [(line := stream nextLine readStream) atEnd]]		whileFalse: [			c3 := line upTo: Character tab.			c2 := line upToEnd.			outStream				nextPutAll: c2; tab; nextPutAll: c3; cr]]! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:20'!extraCountryDefinitions	^self readISOCountriesFrom: 'KIDS	Kids' readStream! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:14'!extraISO3Definitions	^self readISOLanguagesFrom: 'jpk		Japanese (Kids)' readStream! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:13'!initISO3LanguageTable	"ISOLanguageDefinition initIso3LanguageTable"	| table |	table := ISOLanguageDefinition readISOLanguagesFrom: ISOLanguageDefinition isoLanguages readStream.	table addAll: self extraISO3Definitions.	^table! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:16'!initISOCountries	| countries |	countries := self readISOCountriesFrom: self isoCountryString readStream.	countries addAll: self extraCountryDefinitions.	^countries! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/1/2004 18:14'!iso2LanguageTable	"ISOLanguageDefinition iso2LanguageTable"	ISO2Table ifNotNil: [^ISO2Table].	ISO2Table := Dictionary new: self iso3LanguageTable basicSize.	self iso3LanguageTable do: [:entry |		ISO2Table at: entry iso2 put: entry].	^ISO2Table! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/21/2004 13:10'!iso3LanguageTable	"ISOLanguageDefinition iso3LanguageTable"	^ISO3Table ifNil: [ISO3Table := self initISO3LanguageTable]! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:20'!isoCountries	"ISOLanguageDefinition isoCountries"	"ISOCountries := nil"	^ISOCountries ifNil: [ISOCountries := self initISOCountries]! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:10'!isoCountryString	"This list states the country names (official short names in English) in alphabetical order as given in ISO 3166-1 and the corresponding ISO 3166-1-alpha-2 code elements. The list is updated whenever a change to the official code list in ISO 3166-1 is effected by the ISO 3166/MA. It lists 240 official short names and code elements. One line of text contains one entry. A country name and its code element are separated by a semicolon (;)."	^'AF	AFGHANISTANAX	¬ÅLAND ISLANDSAL	ALBANIADZ	ALGERIAAS	AMERICAN SAMOAAD	ANDORRAAO	ANGOLAAI	ANGUILLAAQ	ANTARCTICAAG	ANTIGUA AND BARBUDAAR	ARGENTINAAM	ARMENIAAW	ARUBAAU	AUSTRALIAAT	AUSTRIAAZ	AZERBAIJANBS	BAHAMASBH	BAHRAINBD	BANGLADESHBB	BARBADOSBY	BELARUSBE	BELGIUMBZ	BELIZEBJ	BENINBM	BERMUDABT	BHUTANBO	BOLIVIABA	BOSNIA AND HERZEGOVINABW	BOTSWANABV	BOUVET ISLANDBR	BRAZILIO	BRITISH INDIAN OCEAN TERRITORYBN	BRUNEI DARUSSALAMBG	BULGARIABF	BURKINA FASOBI	BURUNDIKH	CAMBODIACM	CAMEROONCA	CANADACV	CAPE VERDEKY	CAYMAN ISLANDSCF	CENTRAL AFRICAN REPUBLICTD	CHADCL	CHILECN	CHINACX	CHRISTMAS ISLANDCC	COCOS (KEELING) ISLANDSCO	COLOMBIAKM	COMOROSCG	CONGOCD	CONGO, THE DEMOCRATIC REPUBLIC OF THECK	COOK ISLANDSCR	COSTA RICACI	COTE D''IVOIREHR	CROATIACU	CUBACY	CYPRUSCZ	CZECH REPUBLICDK	DENMARKDJ	DJIBOUTIDM	DOMINICADO	DOMINICAN REPUBLICEC	ECUADOREG	EGYPTSV	EL SALVADORGQ	EQUATORIAL GUINEAER	ERITREAEE	ESTONIAET	ETHIOPIAFK	FALKLAND ISLANDS (MALVINAS)FO	FAROE ISLANDSFJ	FIJIFI	FINLANDFR	FRANCEGF	FRENCH GUIANAPF	FRENCH POLYNESIATF	FRENCH SOUTHERN TERRITORIESGA	GABONGM	GAMBIAGE	GEORGIADE	GERMANYGH	GHANAGI	GIBRALTARGR	GREECEGL	GREENLANDGD	GRENADAGP	GUADELOUPEGU	GUAMGT	GUATEMALAGN	GUINEAGW	GUINEA-BISSAUGY	GUYANAHT	HAITIHM	HEARD ISLAND AND MCDONALD ISLANDSVA	HOLY SEE (VATICAN CITY STATE)HN	HONDURASHK	HONG KONGHU	HUNGARYIS	ICELANDIN	INDIAID	INDONESIAIR	IRAN, ISLAMIC REPUBLIC OFIQ	IRAQIE	IRELANDIL	ISRAELIT	ITALYJM	JAMAICAJP	JAPANJO	JORDANKZ	KAZAKHSTANKE	KENYAKI	KIRIBATIKP	KOREA, DEMOCRATIC PEOPLE''S REPUBLIC OFKR	KOREA, REPUBLIC OFKW	KUWAITKG	KYRGYZSTANLA	LAO PEOPLE''S DEMOCRATIC REPUBLICLV	LATVIALB	LEBANONLS	LESOTHOLR	LIBERIALY	LIBYAN ARAB JAMAHIRIYALI	LIECHTENSTEINLT	LITHUANIALU	LUXEMBOURGMO	MACAOMK	MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OFMG	MADAGASCARMW	MALAWIMY	MALAYSIAMV	MALDIVESML	MALIMT	MALTAMH	MARSHALL ISLANDSMQ	MARTINIQUEMR	MAURITANIAMU	MAURITIUSYT	MAYOTTEMX	MEXICOFM	MICRONESIA, FEDERATED STATES OFMD	MOLDOVA, REPUBLIC OFMC	MONACOMN	MONGOLIAMS	MONTSERRATMA	MOROCCOMZ	MOZAMBIQUEMM	MYANMARNA	NAMIBIANR	NAURUNP	NEPALNL	NETHERLANDSAN	NETHERLANDS ANTILLESNC	NEW CALEDONIANZ	NEW ZEALANDNI	NICARAGUANE	NIGERNG	NIGERIANU	NIUENF	NORFOLK ISLANDMP	NORTHERN MARIANA ISLANDSNO	NORWAYOM	OMANPK	PAKISTANPW	PALAUPS	PALESTINIAN TERRITORY, OCCUPIEDPA	PANAMAPG	PAPUA NEW GUINEAPY	PARAGUAYPE	PERUPH	PHILIPPINESPN	PITCAIRNPL	POLANDPT	PORTUGALPR	PUERTO RICOQA	QATARRE	REUNIONRO	ROMANIARU	RUSSIAN FEDERATIONRW	RWANDASH	SAINT HELENAKN	SAINT KITTS AND NEVISLC	SAINT LUCIAPM	SAINT PIERRE AND MIQUELONVC	SAINT VINCENT AND THE GRENADINESWS	SAMOASM	SAN MARINOST	SAO TOME AND PRINCIPESA	SAUDI ARABIASN	SENEGALCS	SERBIA AND MONTENEGROSC	SEYCHELLESSL	SIERRA LEONESG	SINGAPORESK	SLOVAKIASI	SLOVENIASB	SOLOMON ISLANDSSO	SOMALIAZA	SOUTH AFRICAGS	SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDSES	SPAINLK	SRI LANKASD	SUDANSR	SURINAMESJ	SVALBARD AND JAN MAYENSZ	SWAZILANDSE	SWEDENCH	SWITZERLANDSY	SYRIAN ARAB REPUBLICTW	TAIWAN, PROVINCE OF CHINATJ	TAJIKISTANTZ	TANZANIA, UNITED REPUBLIC OFTH	THAILANDTL	TIMOR-LESTETG	TOGOTK	TOKELAUTO	TONGATT	TRINIDAD AND TOBAGOTN	TUNISIATR	TURKEYTM	TURKMENISTANTC	TURKS AND CAICOS ISLANDSTV	TUVALUUG	UGANDAUA	UKRAINEAE	UNITED ARAB EMIRATESGB	UNITED KINGDOMUS	UNITED STATESUM	UNITED STATES MINOR OUTLYING ISLANDSUY	URUGUAYUZ	UZBEKISTANVU	VANUATUVE	VENEZUELAVN	VIET NAMVG	VIRGIN ISLANDS, BRITISHVI	VIRGIN ISLANDS, U.S.WF	WALLIS AND FUTUNAEH	WESTERN SAHARAYE	YEMENZM	ZAMBIAZW	ZIMBABWE'! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/1/2004 18:18'!isoLanguages	"ISO 639: 3-letter codes"	^'abk	ab	Abkhazianace		Achineseach		Acoliada		Adangmeaar	aa	Afarafh		Afrihiliafr	af	Afrikaansafa		Afro-Asiatic (Other)aka		Akanakk		Akkadianalb/sqi	sq	Albanianale		Aleutalg		Algonquian languagestut		Altaic (Other)amh	am	Amharicapa		Apache languagesara	ar	Arabicarc		Aramaicarp		Arapahoarn		Araucanianarw		Arawakarm/hye	hy	Armenianart		Artificial (Other)asm	as	Assameseath		Athapascan languagesmap		Austronesian (Other)ava		Avaricave		Avestanawa		Awadhiaym	ay	Aymaraaze	az	Azerbaijaninah		Aztecban		Balinesebat		Baltic (Other)bal		Baluchibam		Bambarabai		Bamileke languagesbad		Bandabnt		Bantu (Other)bas		Basabak	ba	Bashkirbaq/eus	eu	Basquebej		Bejabem		Bembaben	bn	Bengaliber		Berber (Other)bho		Bhojpuribih	bh	Biharibik		Bikolbin		Binibis	bi	Bislamabra		Brajbre	be	Bretonbug		Buginesebul	bg	Bulgarianbua		Buriatbur/mya	my	Burmesebel	be	Byelorussiancad		Caddocar		Caribcat	ca	Catalancau		Caucasian (Other)ceb		Cebuanocel		Celtic (Other)cai		Central American Indian (Other)chg		Chagataicha		Chamorroche		Chechenchr		Cherokeechy		Cheyennechb		Chibchachi/zho	zh	Chinesechn		Chinook jargoncho		Choctawchu		Church Slavicchv		Chuvashcop		Copticcor		Cornishcos	co	Corsicancre		Creemus		Creekcrp		Creoles and Pidgins (Other)cpe		Creoles and Pidgins, English-based (Other)cpf		Creoles and Pidgins, French-based (Other)cpp		Creoles and Pidgins, Portuguese-based (Other)cus		Cushitic (Other)	hr	Croatiances/cze	cs	Czechdak		Dakotadan	da	Danishdel		Delawaredin		Dinkadiv		Divehidoi		Dogridra		Dravidian (Other)dua		Dualadut/nla	nl	Dutchdum		Dutch, Middle (ca. 1050-1350)dyu		Dyuladzo	dz	Dzongkhaefi		Efikegy		Egyptian (Ancient)eka		Ekajukelx		Elamiteeng	en	Englishenm		English, Middle (ca. 1100-1500)ang		English, Old (ca. 450-1100)esk		Eskimo (Other)epo	eo	Esperantoest	et	Estonianewe		Eweewo		Ewondofan		Fangfat		Fantifao	fo	Faroesefij	fj	Fijianfin	fi	Finnishfiu		Finno-Ugrian (Other)fon		Fonfra/fre	fr	Frenchfrm		French, Middle (ca. 1400-1600)fro		French, Old (842- ca. 1400)fry	fy	Frisianful		Fulahgaa		Gagae/gdh		Gaelic (Scots)glg	gl	Galleganlug		Gandagay		Gayogez		Geezgeo/kat	ka	Georgiandeu/ger	de	Germangmh		German, Middle High (ca. 1050-1500)goh		German, Old High (ca. 750-1050)gem		Germanic (Other)gil		Gilbertesegon		Gondigot		Gothicgrb		Grebogrc		Greek, Ancient (to 1453)ell/gre	el	Greek, Modern (1453-)kal	kl	Greenlandicgrn	gn	Guaraniguj	gu	Gujaratihai		Haidahau	ha	Hausahaw		Hawaiianheb	he	Hebrewher		Hererohil		Hiligaynonhim		Himachalihin	hi	Hindihmo		Hiri Motuhun	hu	Hungarianhup		Hupaiba		Ibanice/isl	is	Icelandicibo		Igboijo		Ijoilo		Ilokoinc		Indic (Other)ine		Indo-European (Other)ind	id	Indonesianina	ia	Interlingua (International Auxiliary language Association)ine		 Interlingueiku	iu	Inuktitutipk	ik	Inupiakira		Iranian (Other)gai/iri	ga	Irishsga		Irish, Old (to 900)mga		Irish, Middle (900 - 1200)iro		Iroquoian languagesita	it	Italianjpn	ja	Japanesejav/jaw	jv/jw Javanesejrb		Judeo-Arabicjpr		Judeo-Persiankab		Kabylekac		Kachinkam		Kambakan	kn	Kannadakau		Kanurikaa		Kara-Kalpakkar		Karenkas	ks	Kashmirikaw		Kawikaz	kk	Kazakhkha		Khasikhm	km	Khmerkhi		Khoisan (Other)kho		Khotanesekik		Kikuyukin	rw	Kinyarwandakir	ky	Kirghizkom		Komikon		Kongokok		Konkanikor	ko	Koreankpe		Kpellekro		Krukua		Kuanyamakum		Kumykkur	ku	Kurdishkru		Kurukhkus		Kusaiekut		Kutenailad		Ladinolah		Lahndalam		Lambaoci	oc	Langue d''Oc (post 1500)lao	lo	Laolat	la	Latinlav	lv	Latvianltz		Letzeburgeschlez		Lezghianlin	ln	Lingalalit	lt	Lithuanianloz		Lozilub		Luba-Katangalui		Luisenolun		Lundaluo		Luo (Kenya and Tanzania)mac/mak	mk	Macedonianmad		Maduresemag		Magahimai		Maithilimak		Makasarmlg	mg	Malagasymay/msa	ms	Malaymal		Malayalammlt	ml	Malteseman		Mandingomni		Manipurimno		Manobo languagesmax		Manxmao/mri	mi	Maorimar	mr	Marathichm		Marimah		Marshallmwr		Marwarimas		Masaimyn		Mayan languagesmen		Mendemic		Micmacmin		Minangkabaumis		Miscellaneous (Other)moh		Mohawkmol	mo	Moldavianmkh		Mon-Kmer (Other)lol		Mongomon	mn	Mongolianmos		Mossimul		Multiple languagesmun		Munda languagesnau	na	Naurunav		Navajonde		Ndebele, Northnbl		Ndebele, Southndo		Ndongonep	ne	Nepalinew		Newarinic		Niger-Kordofanian (Other)ssa		Nilo-Saharan (Other)niu		Niueannon		Norse, Oldnai		North American Indian (Other)nor	no	Norwegiannno		Norwegian (Nynorsk)nub		Nubian languagesnym		Nyamwezinya		Nyanjanyn		Nyankolenyo		Nyoronzi		Nzimaoji		Ojibwaori	or	Oriyaorm	om	Oromoosa		Osageoss		Osseticoto		Otomian languagespal		Pahlavipau		Palauanpli		Palipam		Pampangapag		Pangasinanpan	pa	Panjabipap		Papiamentopaa		Papuan-Australian (Other)fas/per	fa	Persianpeo		Persian, Old (ca 600 - 400 B.C.)phn		Phoenicianpol	pl	Polishpon		Ponapepor	pt	Portuguesepra		Prakrit languagespro		Provencal, Old (to 1500)pus	ps	Pushtoque	qu	Quechuaroh	rm	Rhaeto-Romanceraj		Rajasthanirar		Rarotonganroa		Romance (Other)ron/rum	ro	Romanianrom		Romanyrun	rn	Rundirus	ru	Russiansal		Salishan languagessam		Samaritan Aramaicsmi		Sami languagessmo	sm	Samoansad		Sandawesag	sg	Sangosan	sa	Sanskritsrd		Sardiniansco		Scotssel		Selkupsem		Semitic (Other)	sr	Serbianscr	sh	Serbo-Croatiansrr		Serershn		Shansna	sn	Shonasid		Sidamobla		Siksikasnd	sd	Sindhisin	si	Singhalesesit		Sino-Tibetan (Other)sio		Siouan languagessla		Slavic (Other)ssw	ss	Siswantslk/slo	sk	Slovakslv	sl	Sloveniansog		Sogdiansom	so	Somalison		Songhaiwen		Sorbian languagesnso		Sotho, Northernsot	st	Sotho, Southernsai		South American Indian (Other)esl/spa	es	Spanishsuk		Sukumasux		Sumeriansun	su	Sudanesesus		Sususwa	sw	Swahilissw		Swazisve/swe	sv	Swedishsyr		Syriactgl	tl	Tagalogtah		Tahitiantgk	tg	Tajiktmh		Tamashektam	ta	Tamiltat	tt	Tatartel	te	Teluguter		Terenotha	th	Thaibod/tib	bo	Tibetantig		Tigretir	ti	Tigrinyatem		Timnetiv		Tivitli		Tlingittog	to	Tonga (Nyasa)ton		Tonga (Tonga Islands)tru		Truktsi		Tsimshiantso	ts	Tsongatsn	tn	Tswanatum		Tumbukatur	tr	Turkishota		Turkish, Ottoman (1500 - 1928)tuk	tk	Turkmentyv		Tuviniantwi	tw	Twiuga		Ugariticuig	ug	Uighurukr	uk	Ukrainianumb		Umbunduund		Undeterminedurd	ur	Urduuzb	uz	Uzbekvai		Vaiven		Vendavie	vi	Vietnamesevol	vo	Volap¬ükvot		Voticwak		Wakashan languageswal		Walamowar		Waraywas		Washocym/wel	cy	Welshwol	wo	Wolofxho	xh	Xhosasah		Yakutyao		Yaoyap		Yapyid	yi	Yiddishyor	yo	Yorubazap		Zapoteczen		Zenagazha	za	Zhuangzul	zu	Zuluzun		Zuni'! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/15/2004 18:15'!readISOCountriesFrom: stream	"ISOLanguageDefinition readISOCountriesFrom: ISOLanguageDefinition isoCountryString readStream "	| countries line |	countries := Dictionary new.	[stream atEnd		or: [(line := stream nextLine readStream) atEnd]]		whileFalse: [			countries at: (line upTo: Character tab) put: line upToEnd].	^countries! !!ISOLanguageDefinition class methodsFor: 'private' stamp: 'mir 7/1/2004 18:07'!readISOLanguagesFrom: stream	"ISOLanguageDefinition readISOLanguagesFrom: ISOLanguageDefinition isoLanguages readStream "	| languages language code3 index line |	languages := Dictionary new.	[stream atEnd		or: [(line := stream nextLine readStream) atEnd]]		whileFalse: [			language := ISOLanguageDefinition new.			code3 := line upTo: Character tab.			(index := code3 indexOf: $/) > 0				ifTrue: [					language iso3: (code3 copyFrom: 1 to: index-1).					language iso3Alternate: (code3 copyFrom: index+1 to: code3 size)]				ifFalse: [language iso3: code3].			language				iso2: (line upTo: Character tab);				language: line upToEnd.			languages at: language iso3 put: language].	^languages! !Object subclass: #Locale	instanceVariableNames: 'id shortDate longDate time decimalSymbol digitGrouping currencySymbol currencyNotation measurement offsetLocalToUTC offsetVMToUTC dstActive'	classVariableNames: 'Current KnownLocales LanguageSymbols LocaleChangeListeners PlatformEncodings'	poolDictionaries: ''	category: 'System-Localization'!!Locale commentStamp: '<historical>' prior: 0!Main comment stating the purpose of this class and relevant relationship to other classes.	http://www.w3.org/WAI/ER/IG/ert/iso639.htm	http://www.oasis-open.org/cover/iso639a.html	See also	http://oss.software.ibm.com/cvs/icu/~checkout~/icuhtml/design/language_code_issues.html	http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.10	ISO 3166http://mitglied.lycos.de/buran/knowhow/codes/locales/!!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:51'!primCountry	"Returns string with country (sub)tag according to ISO 639"! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 19:00'!primCurrencyNotation	"Returns boolean if symbol is pre- (true) or post-fix (false)"	^true! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 19:00'!primCurrencySymbol	"Returns string with currency symbol"	^'$'! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:57'!primDST	"Returns boolean if DST  (daylight saving time) is active or not"	^false! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:58'!primDecimalSymbol	"Returns string with e.g. '.' or ','"	^'.'! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:58'!primDigitGrouping	"Returns string with e.g. '.' or ',' (thousands etc)"	^','! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:51'!primLanguage	"returns string with language tag according to ISO 639"! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:59'!primLongDateFormat	"Returns the long date format	d day, m month, y year,	double symbol is null padded, single not padded (m=6, mm=06)	dddd weekday	mmmm month name"! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 19:00'!primMeasurement	"Returns string denoting metric or imperial."	^'imperial'! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:59'!primShortSateFormat	"Returns the short date format	d day, m month, y year,	double symbol is null padded, single not padded (m=6, mm=06)	dddd weekday	mmmm month name"! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:59'!primTimeTormat	"Returns string time format	Format is made up of 	h hour (h 12, H 24), m minute, s seconds, x (am/pm String)	double symbol is null padded, single not padded (h=6, hh=06)"! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:56'!primTimezone	"The offset from UTC in seconds, with positive offsets being towards the east.	(San Francisco is in UTC -08*60 and Paris is in GMT +01*60 (daylight savings is not in effect)."	^0! !!Locale methodsFor: 'system primitives' stamp: 'mir 5/13/2004 18:57'!primVMOffsetToUTC	"Returns the offset in seconds between the VM and UTC.	If the VM does not support UTC times, this is 0.	Also gives us backward compatibility with old VMs as the primitive will fail and we then can return 0."	^0! !!Locale methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:18'!isoCountry	^self id isoCountry! !!Locale methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:17'!isoLanguage	^self id isoLanguage! !!Locale methodsFor: 'accessing' stamp: 'mir 7/15/2004 12:41'!isoLocale	"<language>-<country>"	^self isoCountry		ifNil: [self isoLanguage]		ifNotNil: [self isoLanguage , '-' , self isoCountry]! !!Locale methodsFor: 'accessing' stamp: 'mir 7/15/2004 15:52'!languageEnvironment	^LanguageEnvironment localeID: self localeID! !!Locale methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:55'!localeID	^id! !!Locale methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:55'!localeID: anID	id := anID! !!Locale methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:30'!translator	^NaturalLanguageTranslator localeID: self localeID! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Locale class	instanceVariableNames: ''!!Locale class methodsFor: 'accessing' stamp: 'mir 8/16/2003 16:02'!clipboadInterpreter	^NoConversionClipboardInterpreter new! !!Locale class methodsFor: 'accessing' stamp: 'mir 8/18/2003 17:45'!current	"Current := nil"	Current ifNil: [Current := self determineCurrentLocale].	^Current! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:20'!isoLanguage: isoLanguage	^self isoLanguage: isoLanguage isoCountry: nil! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:31'!isoLanguage: isoLanguage isoCountry: isoCountry	^self localeID: (LocaleID  isoLanguage: isoLanguage isoCountry: isoCountry)! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/15/2004 12:42'!isoLocale: aString	! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/13/2004 00:24'!languageSymbol: languageSymbol	"Locale languageSymbol: #Deutsch"	^self isoLanguage: (LanguageSymbols at: languageSymbol)! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:30'!localeID: id	^self knownLocales at: id ifAbsentPut: [Locale new localeID: id]! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/15/2004 20:26'!stringForLanguageNameIs: localeID	"Answer a string for a menu determining whether the given symbol is the project's natural language"	^ (self current localeID = localeID		ifTrue: 	['<yes>']		ifFalse:	['<no>']), ' ', localeID displayLanguage! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/15/2004 18:33'!switchTo: locale	"Locale switchTo: Locale isoLanguage: 'de' "	Current := locale.	self localeChanged! !!Locale class methodsFor: 'accessing' stamp: 'mir 7/15/2004 19:07'!switchToID: localeID	"Locale switchToID: (LocaleID isoLanguage: 'de') "	self switchTo: (Locale localeID: localeID)! !!Locale class methodsFor: 'platform specific' stamp: 'mir 8/16/2003 14:13'!defaultEncodingName: languageSymbol	| encodings platformName osVersion |	platformName _ Smalltalk platformName.	osVersion _ Smalltalk getSystemAttribute: 1002.	encodings := self platformEncodings at: languageSymbol ifAbsent: [self platformEncodings at: #default].	encodings at: platformName ifPresent: [:encoding | ^encoding].	encodings at: platformName , ' ' , osVersion ifPresent: [:encoding | ^encoding].	^encodings at: #default! !!Locale class methodsFor: 'platform specific' stamp: 'mir 8/16/2003 14:13'!defaultInputInterpreter	| platformName osVersion |	platformName _ Smalltalk platformName.	osVersion _ Smalltalk getSystemAttribute: 1002.	(platformName = 'Win32' and: [osVersion = 'CE']) ifTrue: [^NoInputInterpreter new].	platformName = 'Win32' ifTrue: [^MacRomanInputInterpreter new].	^NoInputInterpreter new! !!Locale class methodsFor: 'private' stamp: 'mir 7/15/2004 14:55'!determineCurrentLocale	"For now just return the default locale.	A smarter way would be to determine the current platforms default locale."	^self localeID: LocaleID default! !!Locale class methodsFor: 'private' stamp: 'mir 7/15/2004 19:44'!initKnownLocales	| locales |	locales := Dictionary new.	"Init the locales for which we have translations"	NaturalLanguageTranslator availableLanguageLocaleIDs do: [:id |		locales at: id put: (Locale new localeID: id)].	^locales! !!Locale class methodsFor: 'private' stamp: 'mir 7/15/2004 16:44'!knownLocales	"KnownLocales := nil"	^KnownLocales ifNil: [KnownLocales := self initKnownLocales]! !!Locale class methodsFor: 'private' stamp: 'mir 6/30/2004 16:15'!migrateSystem	"Locale migrateSystem"	"Do all the necessary operations to switch to the new Locale environment."	LocaleChangeListeners _ nil.	self		addLocalChangedListener: HandMorph;		addLocalChangedListener: Clipboard;		addLocalChangedListener: Vocabulary;		addLocalChangedListener: PartsBin;		addLocalChangedListener: Project;		yourself! !!Locale class methodsFor: 'notification' stamp: 'mir 6/30/2004 16:15'!addLocalChangedListener: anObjectOrClass	self localeChangedListeners add: anObjectOrClass! !!Locale class methodsFor: 'notification' stamp: 'mir 7/15/2004 20:43'!localeChanged	#(PartsBin ParagraphEditor BitEditor FormEditor StandardSystemController) 		do: [ :key | Smalltalk at: key ifPresent: [ :class | class initialize ]].	Project current localeChanged.	self localeChangedListeners do: [:each | each localeChanged]! !!Locale class methodsFor: 'notification' stamp: 'mir 6/30/2004 16:15'!localeChangedListeners	^LocaleChangeListeners ifNil: [LocaleChangeListeners _ OrderedCollection new]! !!Locale class methodsFor: 'class initialization' stamp: 'mir 7/15/2004 18:07'!initialize	"Locale initialize"! !!Locale class methodsFor: 'class initialization' stamp: 'mir 8/16/2003 14:11'!initializePlatformEncodings	"Locale initializePlatformEncodings"	| platform |	PlatformEncodings := Dictionary new.	platform := PlatformEncodings at: 'default' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'iso8859-1';		at: 'Win32 CE' put: 'utf-8';		yourself.	platform := PlatformEncodings at: 'ja' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'shift-jis';		at: 'unix' put: 'euc-jp';		at: 'Win32 CE' put: 'utf-8';		yourself.	platform := PlatformEncodings at: 'ko' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'euc-kr';		at: 'Win32 CE' put: 'utf-8';		yourself.	platform := PlatformEncodings at: 'zh' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'gb2312';		at: 'unix' put: 'euc-cn';		at: 'Win32 CE' put: 'utf-8';		yourself.! !Object subclass: #LocaleID	instanceVariableNames: 'isoLanguage isoCountry'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Localization'!!LocaleID methodsFor: 'initialize' stamp: 'mir 7/15/2004 12:44'!isoLanguage: langString isoCountry: countryStringOrNil	isoLanguage := langString.	isoCountry := countryStringOrNil! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 18:20'!displayCountry	^(ISOLanguageDefinition isoCountries at: self isoCountry asUppercase ifAbsent: ['']) ! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 18:18'!displayLanguage	| language |	language := (ISOLanguageDefinition iso2LanguageDefinition: self isoLanguage) language.	^self isoCountry		ifNil: [language]		ifNotNil: [language , ' (' , self displayCountry , ')']! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 12:43'!isoCountry	^isoCountry! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 12:43'!isoLanguage	^isoLanguage! !!LocaleID methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:34'!parent	^self class isoLanguage: self isoLanguage! !!LocaleID methodsFor: 'testing' stamp: 'mir 7/15/2004 14:34'!hasParent	^self isoCountry notNil! !!LocaleID methodsFor: 'printing' stamp: 'mir 7/15/2004 12:45'!printOn: stream	"<language>-<country>"	stream nextPutAll: self isoLanguage.	self isoCountry		ifNotNil: [stream nextPut: $-; nextPutAll: self isoCountry]! !!LocaleID methodsFor: 'comparing' stamp: 'mir 7/15/2004 14:23'!= anotherObject	self class == anotherObject class		ifFalse: [^false].	^self isoLanguage = anotherObject isoLanguage		and: [self isoCountry = anotherObject isoCountry]! !!LocaleID methodsFor: 'comparing' stamp: 'mir 7/15/2004 14:23'!hash	^self isoLanguage hash bitXor: self isoCountry hash! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LocaleID class	instanceVariableNames: ''!!LocaleID class methodsFor: 'instance creation' stamp: 'mir 7/15/2004 14:37'!default	^self isoLanguage: 'en'! !!LocaleID class methodsFor: 'instance creation' stamp: 'mir 7/15/2004 14:35'!isoLanguage: langString	^self isoLanguage: langString isoCountry: nil! !!LocaleID class methodsFor: 'instance creation' stamp: 'mir 7/15/2004 12:46'!isoLanguage: langString isoCountry: countryStringOrNil	^self new isoLanguage: langString isoCountry: countryStringOrNil! !!LocaleID class methodsFor: 'instance creation' stamp: 'mir 7/21/2004 13:59'!isoString: isoString	"Parse the isoString (<language>-<country>) into its components and return the matching LocaleID"	"LocaleID isoString: 'en' "	"LocaleID isoString: 'en-us' "	| parts language country |	parts := isoString findTokens: #($- ).	language := parts first.	parts size > 1		ifTrue: [country := parts second].	^self isoLanguage: language isoCountry: country! !!LocaleID class methodsFor: 'accessing' stamp: 'mir 7/15/2004 15:09'!current	^Locale current localeID! !Object subclass: #NaturalLanguageTranslator	instanceVariableNames: 'id generics contexts'	classVariableNames: 'AllKnownPhrases CachedTranslations Current'	poolDictionaries: ''	category: 'System-Localization'!!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:41'!isoCountry	^self localeID isoCountry! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:42'!isoLanguage	^self localeID isoLanguage! !!NaturalLanguageTranslator methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:42'!localeID	^id! !!NaturalLanguageTranslator methodsFor: 'translation' stamp: 'mir 7/13/2004 00:33'!phrase: phraseString translation: translationString 	self generics at: phraseString put: translationString asString! !!NaturalLanguageTranslator methodsFor: 'translation' stamp: 'mir 7/15/2004 14:34'!translate: aString	^self generics		at: aString		ifAbsent: [self localeID hasParent			ifTrue: [(self class localeID: self localeID parent) translate: aString]			ifFalse: [aString]]! !!NaturalLanguageTranslator methodsFor: 'translation' stamp: 'mir 6/30/2004 20:22'!translate: aString in: aContext! !!NaturalLanguageTranslator methodsFor: 'translation' stamp: 'mir 7/15/2004 14:58'!translationFor: aString	^self translate: aString! !!NaturalLanguageTranslator methodsFor: 'initialize-release' stamp: 'mir 7/15/2004 14:41'!localeID: anID	id := anID! !!NaturalLanguageTranslator methodsFor: 'private store-retrieve' stamp: 'mir 7/15/2004 20:07'!loadFromFileNamed: fileNameString 	"Load translations from an external file"	| stream |	[stream := ReferenceStream readOnlyFileNamed: fileNameString.	self loadFromStream: stream]		ensure: [stream close]! !!NaturalLanguageTranslator methodsFor: 'private store-retrieve' stamp: 'mir 7/15/2004 20:06'!loadFromStream: stream 	"Load translations from an external file"	| loadedArray refStream |	[refStream := ReferenceStream on: stream.	loadedArray := refStream next]		ensure: [refStream close].	self processExternalObject: loadedArray! !!NaturalLanguageTranslator methodsFor: 'private store-retrieve' stamp: 'mir 7/15/2004 20:03'!mergeTranslations: newTranslations	"Merge a new set of translations into the exiting table.	Overwrites existing entries."	newTranslations keysAndValuesDo: [:key :value |		self phrase: (self class registeredPhraseFor: key) translation: value]! !!NaturalLanguageTranslator methodsFor: 'private store-retrieve' stamp: 'mir 7/15/2004 20:04'!processExternalObject: anArray 	"pivate - process the external object"	"new format -> {translations. untranslated}"	anArray second do: [:each | self class registerPhrase: each].	self mergeTranslations: anArray first! !!NaturalLanguageTranslator methodsFor: 'private store-retrieve' stamp: 'mir 7/15/2004 20:07'!saveToFileNamed: fileNameString 	"save the receiver's translations to a file named fileNameString"	| stream translations untranslated |	stream := ReferenceStream fileNamed: fileNameString.	stream nextPut: {translations. untranslated}.	stream close! !!NaturalLanguageTranslator methodsFor: 'private' stamp: 'mir 6/30/2004 20:23'!generics	^generics ifNil: [generics := Dictionary new]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NaturalLanguageTranslator class	instanceVariableNames: ''!!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'mir 7/15/2004 18:27'!availableLanguageLocaleIDs	"Return the locale ids for the currently available languages.	Meaning those which either internally or externally have translations available."	"NaturalLanguageTranslator availableLanguageLocaleIDs"	"Hardcoded for now"	^{ {'en'. nil.}. {'de'. nil.}. {'sv'. nil.}. {'nl'. nil.}. {'no'. nil.}. {'sv'. nil.}. {'ja'.nil.}. {'ja'.'kids'.} }		collect: [:spec | LocaleID isoLanguage: spec first isoCountry: spec second]! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'mir 7/15/2004 15:51'!current	^Current ifNil: [Current := Locale current translator]! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:36'!isoLanguage: isoLanguage	"Return the generic language translator as there is no information about the country code"	^self isoLanguage: isoLanguage isoCountry: nil! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:36'!isoLanguage: isoLanguage isoCountry: isoCountry	^self localeID: (LocaleID  isoLanguage: isoLanguage isoCountry: isoCountry)! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'mir 7/15/2004 14:57'!localeID: id	^self cachedTranslations at: id ifAbsentPut: [self new localeID: id]! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'mir 7/21/2004 14:04'!initialize	"NaturalLanguageTranslator initialize"	FileList registerFileReader: self! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'mir 7/15/2004 19:48'!resetCaches	"NaturalLanguageTranslator resetCaches"	CachedTranslations := nil.! !!NaturalLanguageTranslator class methodsFor: 'file-services' stamp: 'mir 7/21/2004 13:46'!fileReaderServicesForFile: fullName suffix: suffix 	"Answer the file services associated with given file"	^ (suffix = 'translation') | (suffix = '*')		ifTrue: [{self serviceMergeLanguageTranslations}]		ifFalse: [#()]! !!NaturalLanguageTranslator class methodsFor: 'file-services' stamp: 'mir 7/21/2004 14:17'!mergeTranslationFileNamed: fileFullNameString 	"merge the translation in the file named fileFullNameString"	| stream localeID translator |	stream := FileStream readOnlyFileNamed: fileFullNameString.	[localeID := LocaleID isoString: stream localName sansPeriodSuffix.	translator := self localeID: localeID.	translator loadFromStream: stream]		ensure: [stream close]! !!NaturalLanguageTranslator class methodsFor: 'file-services' stamp: 'mir 7/21/2004 13:45'!serviceMergeLanguageTranslations	"Answer a service for merging of translation files"	^ SimpleServiceEntry		provider: self		label: 'merge the translation file'		selector: #mergeTranslationFileNamed:		description: 'merge the translation file into the language named like the file'		buttonLabel: 'merge'! !!NaturalLanguageTranslator class methodsFor: 'file-services' stamp: 'mir 7/21/2004 13:45'!services	"Answer potential file services associated with this class"	^ {self serviceMergeLanguageTranslations}! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 7/2/2004 20:13'!directoryForLanguage: isoLanguage country: isoCountry readOnly: readOnly	"Try to locate the <prefs>/locale/<language>{/<country>} folder.	If readOnly is set, create the path down to country, otherwise return the directory for country, if not exists for language, if that too doesn't exist, nil"	"NaturalLanguageTranslator directoryForLanguage: 'de' country: nil readOnly: true"	"NaturalLanguageTranslator directoryForLanguage: 'de' country: 'DE' readOnly: true"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: 'US' readOnly: false"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: nil readOnly: true"	"If this fails, there is nothing we can do about it here"	| prefDir countryPath  countryDir languagePath languageDir |	prefDir := ExternalSettings assuredPreferenceDirectory.	prefDir exists		ifFalse: [^nil].	languagePath := 'locale' , FileDirectory pathNameDelimiter asString , isoLanguage.	isoCountry ifNil: [		languageDir := prefDir directoryNamed: languagePath.		readOnly			ifFalse: [languageDir assureExistence].		^languageDir exists			ifTrue: [languageDir]			ifFalse: [nil]].	countryPath := languagePath , FileDirectory pathNameDelimiter asString , isoCountry.	countryDir := prefDir directoryNamed: countryPath.	readOnly		ifFalse: [countryDir assureExistence].	^countryDir exists		ifTrue: [countryDir]		ifFalse: [nil]! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 7/15/2004 14:39'!loadExternalTranslationFor: localeID	"Try to load translations from external external files.	The files are located in the <prefs>/locale/<language>{/<country>} folder.	There can be more than one file for each location, so applications can install their own partial translation tables. All files in the specific folder are loaded."	! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 7/15/2004 19:58'!allKnownPhrases	^AllKnownPhrases ifNil: [AllKnownPhrases := Dictionary new: 2051]! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 7/13/2004 00:06'!cachedTranslations	"CachedTranslations := nil" 	^CachedTranslations ifNil: [CachedTranslations := Dictionary new]! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 7/15/2004 14:40'!createTranslationFor: localeID	"Create an empty translator"	| translator |	translator := self new.	translator localeID: localeID.	^translator! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 7/15/2004 14:39'!loadCachedTranslationFor: localeID	"Try to load translations from external external files cached in compressed form."	"Just an idea, we'll see, if will actually package translations this way"	^nil! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 7/15/2004 14:39'!loadTranslationFor: localeID	"Try to load translations in the following order:		- look for external files		- look up translation source in class side translation table		- try to find a initializer method and run it		- create an empty translator"		^self createTranslationFor: localeID! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 7/15/2004 20:02'!registerPhrase: phrase	"Using a Dictionary so we can lookup existing string instead of creating needless copies when loading a translation."	self allKnownPhrases at: phrase put: phrase! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 7/21/2004 14:18'!registeredPhraseFor: phrase	"Using a Dictionary so we can lookup existing string instead of creating needless copies when loading a translation."	^self allKnownPhrases at: phrase ifAbsentPut: [phrase]! !ISOLanguageDefinition initialize!Locale initialize!NaturalLanguageTranslator initialize!