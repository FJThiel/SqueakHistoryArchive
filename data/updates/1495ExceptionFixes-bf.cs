'From Squeak 2.6alpha of August 6, 1999 on 27 September 1999 at 5:29:20 pm'!"Change Set:		ExceptionFixes-bfDate:			27 September 1999Author:			Bert FreudenbergFixes three problems resulting after installing the new exceptions package...* BlockContext>>#ifError: didn't work anymore. I attempted a  compatibility fix which seems to work (until you remove  Processor>>errorHandler at all). value:ifError: could be hacked  the same way but it is not sent at all.* Accidentally defining an invalid exception results in an endless loop:   [1 / 0] on: nil do: [:ex|] This can be fixed (without runtime overhead)  by defining Object>>handles:.* ZeroDivides were signaled twice."!!Object methodsFor: 'error handling' stamp: 'bf 9/27/1999 17:14'!handles: exception	"This method exists to break an endless loop in Exception>>findHandlerFrom: if the exceptionis invalid"	^false! !!Behavior methodsFor: 'accessing method dictionary' stamp: 'bf 9/27/1999 17:23'!>> selector 	"Answer the compiled method associated with the argument, selector (a 	Symbol), a message selector in the receiver's method dictionary. If the 	selector is not in the dictionary, create an error notification."	^self compiledMethodAt: selector ! !!BlockContext methodsFor: 'evaluating' stamp: 'bf 9/27/1999 16:50'!ifError: errorHandlerBlock	"Evaluate the block represented by the receiver. If an error occurs the given is evaluated with the error message and the receiver as parameters. The error handler block may return a value to be used if the receiver block gets an error. The receiver should not contain an explicit return statement as this would leave an obsolete error handler hanging around."	"Examples:		[1 whatsUpDoc] ifError: [:err :rcvr | ^ 'huh?'].		[1 / 0] ifError: [:err :rcvr |			'ZeroDivide' = err				ifTrue: [^ Float infinity]				ifFalse: [self error: err]]"	| lastHandler val activeProcess |	activeProcess _ Processor activeProcess.	lastHandler _ activeProcess errorHandler.	activeProcess errorHandler: [:aString :aReceiver |		activeProcess errorHandler: lastHandler.		^ errorHandlerBlock value: aString value: aReceiver].	val _ self on: Error do: [:ex |		activeProcess errorHandler: lastHandler.		^errorHandlerBlock value: ex description value: ex receiver].	activeProcess errorHandler: lastHandler.	^ val! !!Exception methodsFor: 'private' stamp: 'bf 9/27/1999 16:09'!receiver	^initialContext ifNotNil: [initialContext receiver]! !!ZeroDivide class methodsFor: 'exceptionInstantiator' stamp: 'bf 9/27/1999 17:26'!dividend: argument	^self new dividend: argument; yourself! !