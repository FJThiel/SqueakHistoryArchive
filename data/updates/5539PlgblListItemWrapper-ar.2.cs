'From Squeak3.6 of ''6 October 2003'' [latest update: #5424] on 14 October 2003 at 11:51:45 pm'!"Change Set:		PluggableListItemWrapperDate:			14 October 2003Author:			Andreas RaabluggableListItemWrapper makes it more easy for clients to use hierarchical lists. Rather than having to write a subclass of ListItemWrapper, a PluggableListItemWrapper can be used to provide the appropriate information straight from the model:	string - an explicit string representation (contrary to the 'item' which contains any kind of object)	getStringSelector - a message invoked to retrieve the sting representation of its item dynamically from its model (when a constant representation is undesirable)	hasContentsSelector - a message invoked in the model to answer whether the item has any children or not.	getContentsSelector - a message invoked in the model to retrieve the contents for its item.All callback selectors can have zero, one or two arguments with the item and the wrapper as first and second argument."!ListItemWrapper subclass: #PluggableListItemWrapper	instanceVariableNames: 'string getContentsSelector getStringSelector hasContentsSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Explorer'!!PluggableListItemWrapper commentStamp: 'ar 10/14/2003 23:51' prior: 0!luggableListItemWrapper makes it more easy for clients to use hierarchical lists. Rather than having to write a subclass of ListItemWrapper, a PluggableListItemWrapper can be used to provide the appropriate information straight from the model:	string - an explicit string representation (contrary to the 'item' which contains any kind of object)	getStringSelector - a message invoked to retrieve the sting representation of its item dynamically from its model (when a constant representation is undesirable)	hasContentsSelector - a message invoked in the model to answer whether the item has any children or not.	getContentsSelector - a message invoked in the model to retrieve the contents for its item.All callback selectors can have zero, one or two arguments with the item and the wrapper as first and second argument.!!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 23:39'!asString	string ifNotNil:[^string].	getStringSelector ifNil:[^super asString].	^self sendToModel: getStringSelector! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:48'!contents	getContentsSelector ifNil:[^#()].	^self sendToModel: getContentsSelector.! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:49'!getContentsSelector	^getContentsSelector! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:50'!getContentsSelector: aSymbol	self validateSelector: aSymbol.	getContentsSelector := aSymbol.! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:48'!getStringSelector	^getStringSelector! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:49'!getStringSelector: aSymbol	self validateSelector: aSymbol.	getStringSelector := aSymbol.! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:53'!hasContents	hasContentsSelector ifNil:[^super hasContents].	^self sendToModel: hasContentsSelector! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:49'!hasContentsSelector	^hasContentsSelector! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 21:49'!hasContentsSelector: aSymbol	self validateSelector: aSymbol.	hasContentsSelector := aSymbol.! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 23:49'!item	^item! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 23:49'!item: newItem	item := newItem! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 23:39'!string	^string! !!PluggableListItemWrapper methodsFor: 'accessing' stamp: 'ar 10/11/2003 23:39'!string: aString	string := aString! !!PluggableListItemWrapper methodsFor: 'private' stamp: 'ar 10/11/2003 21:47'!sendToModel: aSelector	aSelector numArgs = 0 		ifTrue:[^model perform: aSelector].	aSelector numArgs = 1 		ifTrue:[^model perform: aSelector with: item].	aSelector numArgs = 2 		ifTrue:[^model perform: aSelector with: item with: self].! !!PluggableListItemWrapper methodsFor: 'private' stamp: 'ar 10/11/2003 21:50'!validateSelector: aSymbol	(aSymbol numArgs between: 0 and: 2) ifFalse:[^self error: 'Invalid pluggable selector'].! !!PluggableListItemWrapper methodsFor: 'printing' stamp: 'ar 10/11/2003 23:21'!printOn: aStream	super printOn: aStream.	aStream nextPut:$(; nextPutAll: self asString; nextPut:$).! !