'From Squeak 2.4b of April 23, 1999 on 28 June 1999 at 5:22:41 pm'!"Change Set:		FlashFixes-arDate:			28 June 1999Author:			Andreas RaabA bunch of fixes related to transparent gradient fills and undocumented (sigh!!) alpha in color transformations"FlashFileReader removeSelector: #processHeader.!Object subclass: #FlashFileReader	instanceVariableNames: 'stream log dataSize nFillBits nLineBits nGlyphBits nAdvanceBits jpegDecoder version '	classVariableNames: 'ActionTable IndexTables StepTable TagTable '	poolDictionaries: ''	category: 'MM-Flash-Import'!!Color methodsFor: 'transformations' stamp: 'ar 6/28/1999 16:46'!alphaMixed: proportion with: aColor	"Same as #mixed:with: but including alpha"	| frac1 frac2 |	frac1 _ proportion asFloat min: 1.0 max: 0.0.	frac2 _ 1.0 - frac1.	^ (Color		r: (self    red * frac1) + (aColor    red * frac2) 		g: (self green * frac1) + (aColor green * frac2) 		b: (self   blue * frac1) + (aColor  blue * frac2))		alpha: (self alpha * frac1) + (aColor alpha * frac2)! !!FlashFileReader methodsFor: 'reading' stamp: 'ar 6/28/1999 16:33'!processHeader	"Read header information from the source stream.	Return true if successful, false otherwise."	| twipsFrameSize frameRate frameCount |	self processSignature ifFalse:[^false].	version _ stream nextByte.	"Check for the version supported"	version > self maximumSupportedVersion ifTrue:[^false].	dataSize _ stream nextLong.	"Check for the minimal file size"	dataSize < 21 ifTrue:[^false].	twipsFrameSize _ stream nextRect.	self recordGlobalBounds: twipsFrameSize.	frameRate _ stream nextWord / 256.0.	self recordFrameRate: frameRate.	frameCount _ stream nextWord.	self recordFrameCount: frameCount.	log ifNotNil:[		log cr; nextPutAll:'------------- Header information --------------'.		log cr; nextPutAll:'File version		'; print: version.		log cr; nextPutAll:'File size			'; print: dataSize.		log cr; nextPutAll:'Movie width		'; print: twipsFrameSize extent x // 20.		log cr; nextPutAll:'Movie height	'; print: twipsFrameSize extent y // 20.		log cr; nextPutAll:'Frame rate		'; print: frameRate.		log cr; nextPutAll:'Frame count	'; print: frameCount.		log cr; cr.		self flushLog].	^true! !!FlashFileReader methodsFor: 'processing buttons' stamp: 'ar 6/28/1999 16:32'!processButtonRecords: id from: data cxForm: haveCxForm	| flags state characterId layer matrix cxForm |	[flags _ data nextByte.	flags = 0] whileFalse:[		state _ flags bitAnd: 15.		characterId _ data nextWord.		layer _ data nextWord.		matrix _ data nextMatrix.		haveCxForm ifTrue:[cxForm _ data nextColorMatrix: version >= 3].		self recordButton: id 			character: characterId 			state: state 			layer: layer 			matrix: matrix			colorTransform: cxForm].! !!FlashFileReader methodsFor: 'processing tags' stamp: 'ar 6/28/1999 17:10'!processPlaceObject2: data	| id flags depth matrix cxForm ratio name move |	flags _ data nextByte.	depth _ data nextWord.	move _ (flags anyMask: 1).	(flags anyMask: 2) ifTrue:[id _ data nextWord].	(flags anyMask: 4) ifTrue:[matrix _ data nextMatrix].	(flags anyMask: 8) ifTrue:[cxForm _ data nextColorMatrix: version >= 3].	self flag: #checkThis.	(flags anyMask: 16) ifTrue:["self halt." ratio _ data nextWord].	(flags anyMask: 32) ifTrue:["self halt." name _ data nextString].	(flags anyMask: 64) ifTrue:["self halt:'Clip shape encountered'"].	log ifNotNil:[		log nextPutAll:' (id = ', id printString,' name = ', name printString,' depth = ', depth printString, ' move: ', move printString, ')'.		self flushLog].	move 		ifTrue:[self recordMoveObject: id depth: depth matrix: matrix colorMatrix: cxForm]		ifFalse:[self recordPlaceObject: id depth: depth matrix: matrix colorMatrix: cxForm].	^true! !!FlashFileStream methodsFor: 'reading data' stamp: 'ar 6/28/1999 16:37'!nextColor: usingAlpha	| hadAlpha color |	hadAlpha _ hasAlpha.	hasAlpha _ usingAlpha.	color _ self nextColor.	hasAlpha _ hadAlpha.	^color! !!FlashFileStream methodsFor: 'reading data' stamp: 'ar 6/28/1999 16:33'!nextColorMatrix: usingAlpha	| hadAlpha transform |	hadAlpha _ hasAlpha.	hasAlpha _ usingAlpha.	transform _ self nextColorMatrix.	hasAlpha _ hadAlpha.	^transform! !!GradientFillStyle methodsFor: 'private' stamp: 'ar 6/28/1999 17:06'!computePixelRampOfSize: length	"Compute the pixel ramp in the receiver"	| bits lastColor lastIndex nextIndex nextColor distance theta color lastValue ramp |	ramp _ colorRamp asSortedCollection:[:a1 :a2| a1 key < a2 key].	bits _ Bitmap new: length.	lastColor _ ramp first value.	lastIndex _ 0.	ramp do:[:assoc|		nextIndex _ (assoc key * length) rounded.		nextColor _ assoc value.		distance _ (nextIndex - lastIndex).		distance = 0 ifTrue:[distance _ 1].		lastIndex+1 to: nextIndex do:[:i|			theta _ (i - lastIndex) asFloat / distance asFloat.			color _ nextColor alphaMixed: theta with: lastColor.			bits at: i put: (color scaledPixelValue32).		].		lastIndex _ nextIndex.		lastColor _ nextColor.	].	lastValue _ lastColor pixelWordForDepth: 32.	lastIndex+1 to: length do:[:i| bits at: i put: lastValue].	^bits! !