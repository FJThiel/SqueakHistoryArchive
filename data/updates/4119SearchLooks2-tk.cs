'From Squeak3.1alpha of 28 February 2001 [latest update: #4118] on 2 June 2001 at 1:20:19 pm'!"Change Set:		SearchLooks2-tkDate:			2 June 2001Author:			Ted Kaehler	Fix a bug in template search results when card is not a gradient fill.  	HyperCard text Find now respects word starts.	Another Find bug fixed, also.My previous update, 4118StackLooks-tk, has an incorrect description.  Here is a better version:	Update to improve the template stack searching.  The 'blank text color' everywhere in the system is now a translucent light gray.The list of search results looks better, and is enclosed in a rectangle.  If the card has a gradient fill, the search results will also."!!StackMorph methodsFor: 'menu' stamp: 'tk 6/2/2001 13:12'!findText: wants	"Turn to the next card that has all of the strings mentioned on it.  Highlight where it is found.  allText and allTextUrls have been set.  Case insensitive search.	Resuming a search.  If container's text is still in the list and secondary keys are still in the page, (1) search rest of that container.  (2) search rest of containers on that page (3) pages till end of book, (4) from page 1 to this page again."	"Later sort wants so longest key is first"	| allText good thisWord here fromHereOn startToHere oldContainer oldIndex otherKeys strings |	allText _ self valueOfProperty: #allText ifAbsent: [#()].	here _ cards identityIndexOf: self currentCard ifAbsent: [1].	fromHereOn _ here+1 to: cards size.	startToHere _ 1 to: here.		"repeat this page"	(self valueOfProperty: #searchKey ifAbsent: [#()]) = wants ifTrue: [		"does page have all the other keys?  No highlight if found!!"		otherKeys _ wants allButFirst.		strings _ allText at: here.		good _ true.		otherKeys do: [:searchString | "each key"			good ifTrue: [thisWord _ false.				strings do: [:longString |					(longString findWordStart: searchString startingAt: 1) > 0 ifTrue: [							thisWord _ true]].				good _ thisWord]].		good ifTrue: ["all are on this page.  Look in rest for string again."			oldContainer _ self valueOfProperty: #searchContainer.			oldIndex _ self valueOfProperty: #searchOffset.			(self findText: (OrderedCollection with: wants first) inStrings: strings					startAt: oldIndex+1 container: oldContainer 				cardNum: here) ifTrue: [					self setProperty: #searchKey toValue: wants.					^ true]]]		ifFalse: [fromHereOn _ here to: cards size].	"do search this page"	"other pages"	fromHereOn do: [:cardNum |		(self findText: wants inStrings: (allText at: cardNum) startAt: 1 container: nil 				cardNum: cardNum) 					ifTrue: [^ true]].	startToHere do: [:cardNum |		(self findText: wants inStrings: (allText at: cardNum) startAt: 1 container: nil 				cardNum: cardNum) 					ifTrue: [^ true]].	"if fail"	self setProperty: #searchContainer toValue: nil.	self setProperty: #searchOffset toValue: nil.	self setProperty: #searchKey toValue: nil.	^ false! !!StackMorph methodsFor: 'menu' stamp: 'tk 6/2/2001 13:12'!findText: keys inStrings: rawStrings	startAt: startIndex container: oldContainer cardNum: cardNum	"Call once to search a card of the stack.  Return true if found and highlight the text.  oldContainer should be NIL.  	(oldContainer is only non-nil when (1) doing a 'search again' and (2) the page is in memory and (3) keys has just one element.  oldContainer is a TextMorph.)"	| good thisWord index insideOf place container start strings old |	good _ true.	start _ startIndex.	strings _ oldContainer 			ifNil: [rawStrings]	"normal case"			ifNotNil: [self currentPage allStringsAfter: oldContainer text].	keys do: [:searchString | "each key"		good ifTrue: [thisWord _ false.			strings do: [:longString |				(index _ longString findWordStart: searchString startingAt: start) > 0 ifTrue: [						thisWord not & (searchString == (keys at: 1)) ifTrue: [							insideOf _ longString. place _ index].						thisWord _ true].				start _ 1].	"only first key on first container"			good _ thisWord]].	good ifTrue: ["all are on this page"		"wasIn _ (pages at: pageNum) isInMemory."		self goToCardNumber: cardNum.		"wasIn ifFalse: ['search again, on the real current text.  Know page is in.'.			^ self findText: keys 				inStrings: ((pages at: pageNum) allStringsAfter: nil)         recompute it					startAt: startIndex container: oldContainer 				pageNum: pageNum]" 			].	(old _ self valueOfProperty: #searchContainer) ifNotNil: [		(old respondsTo: #editor) ifTrue: [			old editor selectFrom: 1 to: 0. 	"trying to remove the previous selection!!"			old changed]].	good ifTrue: ["have the exact string object"		(container _ oldContainer)			ifNil: [container _ self highlightText: (keys at: 1) at: place in: insideOf]			ifNotNil: [				container userString == insideOf 					ifFalse: [						container _ self highlightText: (keys at: 1) at: place 							in: insideOf]					ifTrue: [(container isKindOf: TextMorph) ifTrue: [						container editor selectFrom: place to: 								(keys at: 1) size - 1 + place.						container changed].						]].		self setProperty: #searchContainer toValue: container.		self setProperty: #searchOffset toValue: place.		self setProperty: #searchKey toValue: keys.		"override later"		ActiveHand newKeyboardFocus: container.		^ true].	^ false! !!StackMorph methodsFor: 'menu' stamp: 'tk 6/2/2001 11:40'!formatList: pl	| rr ff |	"Turn this plugglable list into a good looking morph."	pl color: Color transparent; borderWidth: 0.	pl font: ((TextStyle named: #Palatino) fontOfSize: 14).	pl toggleCornerRounding; width: 252; retractableOrNot; hResizing: #spaceFill.	rr _ (RectangleMorph new) toggleCornerRounding; extent: pl extent + (30@30).	rr color: self currentPage color; fillStyle: (ff _ self currentPage fillStyle copy).	ff isGradientFill ifTrue: [		rr fillStyle direction: (ff direction * self currentPage extent / rr extent) rounded.		rr fillStyle origin: rr bounds origin].	rr addMorph: pl.	rr layoutPolicy: TableLayout new.	rr layoutInset: 10@15; cellInset: 10@15; wrapDirection: #leftToRight.	rr listCentering: #center; borderWidth: 5; borderColor: #raised.	"Up and down buttons on left with arrows in a holder."	"lb _ (RectangleMorph new) color: transparent; borderWidth: 0."	^ rr! !!String methodsFor: 'accessing' stamp: 'tk 6/2/2001 12:12'!findWordStart: key startingAt: start	| ind |	"HyperCard style searching.  Answer the index in self of the substring key, when that key is preceeded by a separator character.  Must occur at or beyond start.  The match is case-insensitive.  If no match is found, zero will be returned."	ind _ start.	[ind _ self findSubstring: key in: self startingAt: ind matchTable: CaseInsensitiveOrder.	ind = 0 ifTrue: [^ 0].	"not found"	ind = 1 ifTrue: [^ 1].	"First char is the start of a word"	(self at: ind-1) isSeparator] whileFalse: [ind _ ind + 1].	^ ind	"is a word start"! !