'From Squeak 2.1 of June 30, 1998 on 15 August 1998 at 11:51:07 pm'!"Change Set:		ScrollingTweaks-diDate:			15 August 1998Author:			Dan IngallsA number of tweaks that affect scrolling of text and lists in morphic.	Note:  They will only properly affect newly created scrollPanes.Scrolling in lists should no longer result in half-lines at the top.Ditto with textMorphs of constant line-height.Line scrolling accelerates from 3/sec to 20/second.Page scrolling accelerates from 3/sec to 10/second.Continued page scrolling maintains a constant direction."!Slider subclass: #ScrollBar	instanceVariableNames: 'menuButton upButton downButton pagingArea scrollDelta pageDelta interval menuSelector timeOfMouseDown timeOfLastScroll nextPageDirection '	classVariableNames: 'UpArrow '	poolDictionaries: ''	category: 'Morphic-Windows'!!ScrollBar methodsFor: 'initialize' stamp: 'di 8/15/1998 22:38'!initializeDownButton	downButton := RectangleMorph		newBounds: (self innerBounds bottomRight - self buttonExtent extent: self buttonExtent)		color: Color lightGray.	downButton on: #mouseDown send: #scrollDownInit to: self.	downButton on: #mouseStillDown send: #scrollDown to: self.	downButton on: #mouseUp send: #borderRaised to: downButton.	downButton addMorphCentered: (ImageMorph new image: 		(UpArrow rotateBy: (bounds isWide ifTrue: [#right] ifFalse: [#pi]) centerAt: 0@0)).	downButton setBorderWidth: 2 borderColor: #raised.	self addMorph: downButton! !!ScrollBar methodsFor: 'initialize' stamp: 'di 8/15/1998 23:43'!initializePagingArea	pagingArea := RectangleMorph newBounds: self totalSliderArea								color: (Color r: 0.6 g: 0.6 b: 0.8).	pagingArea borderWidth: 0.	pagingArea on: #mouseDown send: #resetTimer to: self.	pagingArea on: #mouseStillDown send: #scrollByPage: to: self.	self addMorph: pagingArea! !!ScrollBar methodsFor: 'initialize' stamp: 'di 8/15/1998 22:38'!initializeUpButton	upButton := RectangleMorph		newBounds: ((bounds isWide ifTrue: [menuButton bounds topRight]									ifFalse: [menuButton bounds bottomLeft])					extent: self buttonExtent)		color: Color lightGray.	upButton on: #mouseDown send: #scrollUpInit to: self.	upButton on: #mouseStillDown send: #scrollUp to: self.	upButton on: #mouseUp send: #borderRaised to: upButton.	upButton addMorphCentered: (ImageMorph new image: 		(bounds isWide ifTrue: [UpArrow rotateBy: #left centerAt: 0@0] ifFalse: [UpArrow])).	upButton setBorderWidth: 2 borderColor: #raised.	self addMorph: upButton! !!ScrollBar methodsFor: 'scrolling' stamp: 'di 8/15/1998 23:21'!nextPage: event	"Note: this method is no longer called, except by old scrollBars"	(self readyForNextScroll: #(300 200 100)) ifFalse: [^ self].	event cursorPoint y >= slider center y		ifTrue: [self setValue: (value + pageDelta min: 1.0)]		ifFalse: [self setValue: (value - pageDelta max: 0.0)]! !!ScrollBar methodsFor: 'scrolling' stamp: 'di 8/15/1998 23:42'!scrollByPage: event	nextPageDirection == nil ifTrue:		[nextPageDirection _ event cursorPoint y >= slider center y].	(self readyForNextScroll: #(300 200 100)) ifFalse: [^ self].	nextPageDirection		ifTrue: [self setValue: (value + pageDelta min: 1.0)]		ifFalse: [self setValue: (value - pageDelta max: 0.0)]! !!ScrollBar methodsFor: 'scrolling' stamp: 'di 8/15/1998 22:59'!scrollDown	(self readyForNextScroll: #(300 100 50)) ifFalse: [^ self].	self setValue: (value + scrollDelta + 0.000001 min: 1.0)! !!ScrollBar methodsFor: 'scrolling' stamp: 'di 8/15/1998 22:44'!scrollDownInit	downButton borderInset.	self resetTimer.! !!ScrollBar methodsFor: 'scrolling' stamp: 'di 8/15/1998 22:58'!scrollUp	(self readyForNextScroll: #(300 100 50)) ifFalse: [^ self].	self setValue: (value - scrollDelta - 0.000001 max: 0.0)! !!ScrollBar methodsFor: 'scrolling' stamp: 'di 8/15/1998 22:45'!scrollUpInit	upButton borderInset.	self resetTimer.! !!ScrollBar methodsFor: 'scrolling' stamp: 'di 8/14/1998 15:19'!setValue: newValue	^ super setValue: (newValue truncateTo: scrollDelta)! !!ScrollBar methodsFor: 'scroll timing' stamp: 'di 8/15/1998 23:48'!readyForNextScroll: delayArray	"Return true if an appropriate delay has passed since the last scroll operation.	The argument is an array of 3 delays (in milliseconds) to be used	at first, after 1 second, and after 2 seconds, respectively."	| now scrollDelay |	timeOfLastScroll == nil ifTrue: [self resetTimer]. "Only needed for old instances"	now _ Time millisecondClockValue.	now < timeOfLastScroll ifTrue: [self resetTimer].	scrollDelay _ delayArray first.	now > (timeOfMouseDown + 1000) ifTrue: [scrollDelay _ delayArray second].	now > (timeOfMouseDown + 2000) ifTrue: [scrollDelay _ delayArray third].	now > (timeOfLastScroll + scrollDelay) ifFalse: [^ false].	timeOfLastScroll _ now.	^ true! !!ScrollBar methodsFor: 'scroll timing' stamp: 'di 8/15/1998 23:33'!resetTimer	timeOfMouseDown _ Time millisecondClockValue.	timeOfLastScroll _ timeOfMouseDown - 1000 max: 0.	nextPageDirection _ nil! !!ScrollPane commentStamp: 'di 8/15/1998 23:51' prior: 0!The scroller (a transform) of a scrollPane is driven by the scrollBar.  The scroll values vary from 0.0, meaning zero offset to 1.0 meaning sufficient offset such that the bottom of the scrollable material appears halfway down the pane.  The total distance to achieve this range is called the totalScrollRange.!!ScrollPane methodsFor: 'geometry' stamp: 'di 8/14/1998 15:52'!totalScrollRange	^ (scroller submorphBounds encompass: 0@0) height - (bounds height * 3 // 4) max: 0! !!PluggableListMorph methodsFor: 'initialization' stamp: 'di 8/14/1998 15:11'!setScrollDeltas	| range |	scroller hasSubmorphs ifFalse: [^ self].	range _ self totalScrollRange.	range = 0 ifTrue: [^ scrollBar scrollDelta: 0.02 pageDelta: 0.2].	"Set up for one line, or a full pane less one line"	scrollBar scrollDelta: (scroller firstSubmorph height / range) asFloat 			pageDelta: (self innerBounds height - scroller firstSubmorph height / range) asFloat ! !!PluggableTextMorph methodsFor: 'initialization' stamp: 'di 8/14/1998 15:55'!setScrollDeltas	| range |	scroller hasSubmorphs ifFalse: [^ self].	range _ self totalScrollRange.	range = 0 ifTrue: [^ scrollBar scrollDelta: 0.02 pageDelta: 0.2].	scrollBar scrollDelta: (scroller firstSubmorph defaultLineHeight / range) asFloat 			pageDelta: (self innerBounds height - scroller firstSubmorph defaultLineHeight / range) asFloat ! !!TextMorph methodsFor: 'geometry' stamp: 'di 8/14/1998 15:50'!defaultLineHeight	^ textStyle lineGrid! !