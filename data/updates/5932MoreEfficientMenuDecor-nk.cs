'From Squeak3.7beta of ''1 April 2004'' [latest update: #5905] on 1 May 2004 at 4:58:44 pm'!"Change Set:		MoreEfficientMenuDecoration-nkDate:			1 May 2004Author:			Ned KonzThe menus were being decorated by recursing down through every submenu for every possible icon.This change set makes the menu decoration much more efficient by only decorating menus that are actually being shown, and by using a dictionary of translated strings to find the icons.It also eliminates a double call of the translation of the active scripting elements in setNaturalLanguageTo:."!Object subclass: #MenuIcons	instanceVariableNames: ''	classVariableNames: 'Icons TranslatedIcons'	poolDictionaries: ''	category: 'Morphic-Menus'!!Language class methodsFor: 'applying' stamp: 'nk 5/1/2004 16:52'!applyTranslations	"private - try to apply the translations as much as possible all  	over the image"	Cursor wait		showWhile: [""			ActiveWorld allTileScriptingElements				do: [:viewerOrScriptor | viewerOrScriptor setNaturalLanguageTo: Language defaultLanguage name].			self recreateFlaps.			ParagraphEditor initializeTextEditorMenus.			Utilities emptyScrapsBook.			MenuIcons initializeTranslations.]! !!MenuIcons class methodsFor: 'class initialization' stamp: 'nk 5/1/2004 16:41'!initialize	"self initialize"	| methods |	Icons := IdentityDictionary new.	methods := self class selectors select: [:each | '*Icon' match: each asString].	methods do: [:each | Icons at: each put: (MenuIcons perform: each)].	self initializeTranslations.	Smalltalk addToStartUpList: self.! !!MenuIcons class methodsFor: 'class initialization' stamp: 'nk 5/1/2004 16:49'!initializeTranslations	"Initialize the dictionary of <translated menu string>-><icon>"	TranslatedIcons := Dictionary new.	self itemsIcons do: [ :assoc |		assoc key do: [ :str | TranslatedIcons at: str translated asLowercase put: assoc value ]	]! !!MenuIcons class methodsFor: 'class initialization' stamp: 'nk 5/1/2004 16:41'!startUp	self initializeTranslations.! !!MenuIcons class methodsFor: 'menu decoration' stamp: 'nk 5/1/2004 16:50'!decorateMenu: aMenu 	"decorate aMenu with icons"	| numberAdded |	Preferences menuWithIcons		ifFalse: [^ self].	numberAdded := 0.	aMenu items do: [ :item | | icon |		icon _ self iconForMenuItem: item.		icon ifNotNil: [			item icon: icon.			numberAdded := numberAdded + 1. ]].	numberAdded isZero ifTrue: [^ self].	aMenu addBlankIconsIfNecessary: self blankIcon! !!MenuIcons class methodsFor: 'menu decoration' stamp: 'nk 5/1/2004 16:48'!iconForMenuItem: anItem	"Answer the icon (or nil) corresponding to the (translated) string."	^TranslatedIcons at: anItem contents asString asLowercase ifAbsent: [ ]! !!Project methodsFor: 'language' stamp: 'nk 5/1/2004 16:53'!setNaturalLanguageTo: aLanguageSymbol	"Set the project's natural language as indicated"	Vocabulary assureTranslationsAvailableFor: aLanguageSymbol.	aLanguageSymbol = self naturalLanguage ifFalse:		[self projectParameterAt: #naturalLanguage put: aLanguageSymbol.		Language applyTranslations]! !MenuIcons initialize!MenuIcons class removeSelector: #putIcon:onItemWithWording:in:!!MenuIcons class reorganize!('accessing - icons' appearanceIcon backAndForthIcon backIcon blankIcon cancelIcon copyIcon cutIcon deleteIcon doItIcon findIcon forwardIcon helpIcon inspectIcon morphsIcon newIcon okIcon openIcon pasteIcon printIcon quitIcon redoIcon saveAsIcon saveIcon undoIcon windowIcon)('class initialization' initialize initializeTranslations startUp)('menu decoration' decorateMenu: iconForMenuItem: itemsIcons)('import/export' exportAllIconsAsGif exportAllIconsAsPNG exportIcon:asGifNamed: exportIcon:asPNGNamed: importAllIconNamed: importAllIcons importIconNamed: methodEnd methodStart:)!