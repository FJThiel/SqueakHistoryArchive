'From Squeak2.7 of 5 January 2000 [latest update: #1783] on 13 January 2000 at 6:13:41 pm'!"Change Set:		listDblClickDate:			13 January 2000Author:			Scott Wallace (and, mainly, Bob Arning)Based on a custom subclass of PluggableListMorph that was circulated to the Squeak list by Bob Arning in late 1999, but with the feature now elevated to reside in generic PluggableListMorphAllows a PluggableListMorph to have a special action set up to be triggered in response to a double-click on a list item.  Harnessed to make a double-click on an item in an inspect-list-pane (in an Inspector or a Debugger) be interpreted as a request to open an inspector on the selected value.For this purpose, a 'double-click' is defined as two successive clicks on the same list item that occur within the number of milliseconds indicated by PluggableListMorph's DoubleClickTime class variable, which starts out life at 1000, representing 1 second,"!ScrollPane subclass: #PluggableListMorph	instanceVariableNames: 'list selectedMorph selection getListSelector getIndexSelector setIndexSelector keystrokeActionSelector autoDeselect font lastKeystrokeTime lastKeystrokes lastClickTime doubleClickSelector '	classVariableNames: 'DoubleClickTime '	poolDictionaries: ''	category: 'Morphic-Windows'!!Debugger methodsFor: 'initialize' stamp: 'sw 1/12/2000 16:47'!openFullMorphicLabel: labelString	| window aListMorph codeTop aTextMorph |	self expandStack.	window _ (SystemWindow labelled: labelString) model: self.	aListMorph _ PluggableListMorph on: self list: #contextStackList			selected: #contextStackIndex changeSelected: #toggleContextStackIndex:			menu: #contextStackMenu:shifted: keystroke: #contextStackKey:from:.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph		frame: (0@0 corner: 1@0.3).	Preferences useAnnotationPanes		ifFalse:			[codeTop _ 0.3]		ifTrue:			[aTextMorph _ PluggableTextMorph on: self					text: #annotation accept: nil					readSelection: nil menu: nil.			aTextMorph askBeforeDiscardingEdits: false.			window addMorph: aTextMorph				frame: (0@0.3 corner: 1@0.35).			codeTop _ 0.35].	Preferences optionalButtons ifTrue:		[window addMorph: self optionalButtonRow frame: ((0@codeTop corner: 1 @ (codeTop + 0.1))).		codeTop _ codeTop + 0.1].	window addMorph: (PluggableTextMorph on: self			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0 @ codeTop corner: 1 @ 0.7).	window addMorph: ((PluggableListMorph on: self receiverInspector list: #fieldList			selected: #selectionIndex changeSelected: #toggleIndex:			menu: #fieldListMenu: keystroke: #inspectorKey:from:) doubleClickSelector: #inspectSelection)		frame: (0@0.7 corner: 0.2@1).	window addMorph: (PluggableTextMorph on: self receiverInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0.2@0.7 corner: 0.5@1).	window addMorph: ((PluggableListMorph on: self contextVariablesInspector list: #fieldList			selected: #selectionIndex changeSelected: #toggleIndex:			menu: #fieldListMenu: keystroke: #inspectorKey:from:) doubleClickSelector: #inspectSelection)		frame: (0.5@0.7 corner: 0.7@1).	window addMorph: (PluggableTextMorph on: self contextVariablesInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0.7@0.7 corner: 1@1).	^ window openInWorld! !!Inspector class methodsFor: 'instance creation' stamp: 'sw 1/12/2000 16:34'!openAsMorphOn: anObject withLabel: aLabel	"(Inspector openAsMorphOn: SystemOrganization) openInMVC"	| window inspector |	inspector _ self inspect: anObject.	window _ (SystemWindow labelled: aLabel) model: inspector.	window addMorph: ((PluggableListMorph on: inspector list: #fieldList				selected: #selectionIndex changeSelected: #toggleIndex:				menu: ((inspector isMemberOf: DictionaryInspector)						ifTrue: [#dictionaryMenu:]						ifFalse: [#fieldListMenu:])				keystroke: #inspectorKey:from:) doubleClickSelector: #inspectSelection)		frame: (0@0 corner: self horizontalDividerProportion @ self verticalDividerProportion).	window addMorph: (PluggableTextMorph on: inspector text: #contents accept: #accept:				readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (self horizontalDividerProportion @0 corner: 1@self verticalDividerProportion).	window addMorph: ((PluggableTextMorph on: inspector text: #trash accept: #trash:				readSelection: #contentsSelection menu: #codePaneMenu:shifted:)					askBeforeDiscardingEdits: false)		frame: (0@self verticalDividerProportion corner: 1@1).	window setUpdatablePanesFrom: #(fieldList).	window position: 16@0.  "Room for scroll bar."	^ window! !!PluggableListMorph methodsFor: 'initialization' stamp: 'sw 1/12/2000 16:22'!doubleClickSelector: aSymbol	doubleClickSelector _ aSymbol! !!PluggableListMorph methodsFor: 'events' stamp: 'sw 1/13/2000 10:28'!mouseDown: event onItem: aMorph	| now delta |	event yellowButtonPressed ifTrue: [^ self yellowButtonActivity: event shiftPressed].	now _ Time millisecondClockValue.	delta _ ((lastClickTime ifNil: [0]) - now) abs.	lastClickTime _ now.	(aMorph == selectedMorph and: [doubleClickSelector notNil and: [delta < DoubleClickTime]])		ifTrue:			[model perform: doubleClickSelector]		ifFalse:			[model okToChange ifFalse: [^ self].  "No change if model is locked"			((autoDeselect == nil or: [autoDeselect]) and: [aMorph == selectedMorph])				ifTrue: [self setSelectedMorph: nil]				ifFalse: [self setSelectedMorph: aMorph]]! !!PluggableListMorph methodsFor: 'object fileIn' stamp: 'sw 1/12/2000 16:51'!convertbosfcebbmsopssrsggslssggskafll0: varDict bosfcebbmsopssrsggslssggskafllld0: smartRefStrm	"New variables: ('lastClickTime' 'doubleClickSelector' )  If a non-nil value is needed, please assign it."! !!PluggableListMorph class methodsFor: 'class initialization' stamp: 'sw 1/13/2000 10:27'!initialize	DoubleClickTime _ 1000! !PluggableListMorph initialize!