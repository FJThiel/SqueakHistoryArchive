'From Squeak 2.5 of August 6, 1999 on 18 August 1999 at 10:34:16 pm'!!CascadeNode commentStamp: 'dwh 8/18/1999 22:04' prior: 0!The first message has the common receiver, the rest have receiver == nil, which signifies cascading.!!Dictionary commentStamp: 'dwh 8/18/1999 21:44' prior: 0!I represent a set of elements that can be viewed from one of two perspectives: a set of associations, or a set of values that are externally named where the name can be any object that responds to =. The external name is referred to as the key.!!DisplayObject commentStamp: 'dwh 8/18/1999 21:46' prior: 0!The abstract protocol for most display primitives that are used by Views for presenting information on the screen.!!Arc commentStamp: 'dwh 8/18/1999 21:47' prior: 0!Arcs are an unusual implementation of splines due to Ted Kaehler.  Imagine two lines that meet at a corner. Now imagine two moving points; one moves from the corner to the end on one line, the other moves from the end of the other line in to the corner.  Now imagine a series of lines drawn between those moving points at each step along the way (they form a sort of spider web pattern).  By connecting segments of the intersecting lines, a smooth curve is achieved that is tangent to both of the original lines.  Voila.!!CurveFitter commentStamp: 'dwh 8/18/1999 21:48' prior: 0!I represent a conic section determined by three points p1, p2 and p3. I interpolate p1 and p3 and am tangent to line p1, p2 at p1 and line p3, p2 at p3.!!GradientFillMorph commentStamp: 'dwh 8/18/1999 22:01' prior: 0!GradientFills cache an array of bitpatterns for the colors across their rectangle.  It costs a bit of space, but makes display fast enough to eschew the use of a bitmap.  The array must be recomputed whenever the colors, dimensions or display depth change.!!HaloMorph commentStamp: 'dwh 8/18/1999 22:02' prior: 0!This morph provides a halo of handles for its target morph. Dragging, duplicating, rotating, and resizing to be done by mousing down on the appropriate handle. There are also handles for help and for a menu of infrequently used operations.!!ImageReadWriter commentStamp: 'dwh 8/18/1999 21:55' prior: 0!Copyright (c) Kazuki Yasumatsu, 1995. All rights reserved.I am an abstract class to provide for encoding and/or decoding an image on a stream.Instance Variables:	stream		<ReadStream | WriteStream>	stream for image storagesClass Variables:	ImageNotStoredSignal		<Signal>	image not stored error signal	MagicNumberErrorSignal		<Signal>	magic number error signalSubclasses must implement the following messages:	accessing		nextImage		nextPutImage:	testing		canUnderstand         (added tao 10/26/97)!!Integer methodsFor: 'bit manipulation' stamp: 'dwh 8/18/1999 21:57'!>> shiftAmount  "right shift"	shiftAmount < 0 ifTrue: [self error: 'negative arg'].	^ self bitShift: 0 - shiftAmount! !!LessHTMLformatter commentStamp: 'dwh 8/18/1999 21:53' prior: 0!The LessHTMLformatter provides a few more plaintext notations to swikify, to avoid typing HTML a bit more.  Used in rendering -- see FileList renderFile!]style[(133 19)f1,f1LFileList renderFile;!!MethodNode commentStamp: 'dwh 8/18/1999 22:05' prior: 0!I am the root of the parse tree.!!SortedCollection commentStamp: 'dwh 8/18/1999 21:43' prior: 0!I represent a collection of objects ordered by some property of the objects themselves. The ordering is specified in a BlockContext.!!SystemDictionary commentStamp: 'dwh 8/18/1999 21:44' prior: 0!I represent a special dictionary that supports protocol for asking questions about the structure of the system. Other than class names, I contain (print this)...	Smalltalk keys select: [:k | ((Smalltalk at: k) isKindOf: Class) not]			thenCollect: [:k | k -> (Smalltalk at: k) class]!