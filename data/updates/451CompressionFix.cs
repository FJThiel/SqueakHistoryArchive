'From Squeak 2.2 of Sept 23, 1998 on 4 December 1998 at 7:18:23 pm'!ReadStream subclass: #InflateStream	instanceVariableNames: 'state bitBuf bitPos source sourcePos sourceLimit litTable distTable '	classVariableNames: 'BlockProceedBit BlockTypes FixedDistCodes FixedLitCodes MaxBits StateNewBlock StateNoMoreData '	poolDictionaries: ''	category: 'Streams-Compressed'!InflateStream subclass: #FastInflateStream	instanceVariableNames: ''	classVariableNames: 'DistanceMap FixedDistTable FixedLitTable LiteralLengthMap '	poolDictionaries: ''	category: 'Streams-Compressed'!!InflateStream methodsFor: 'inflating' stamp: 'ar 12/4/1998 19:13'!processFixedBlock	litTable _ self 				huffmanTableFrom: FixedLitCodes				mappedBy: self literalLengthMap.	distTable _ self 				huffmanTableFrom: FixedDistCodes				mappedBy: self distanceMap.	state _ state bitOr: BlockProceedBit.	self proceedFixedBlock.! !!FastInflateStream commentStamp: 'ar 12/4/1998 19:17' prior: 0!This class adds the following optimizations to the basic Inflate decompression:a) Bit reversed accessIf we want to fetch the bits efficiently then we have them in the wrong bit order (e.g., when we should fetch 2r100 we would get 2r001). But since the huffman tree lookup determines the efficiency of the decompression, reversing the bits before traversal is expensive. Therefore the entries in each table are stored in REVERSE BIT ORDER. This is achieved by a reverse increment of the current table index in the huffman table construction phase (see method increment:bits:). According to my measures this speeds up the implementation by about 30-40%.b) Inplace storage of code meanings and extra bitsRather than looking up the meaning for each code during decompression of blocks we store the appropriate values directly in the huffman tables, using a pre-defined mapping. Even though this does not make a big difference in speed, it cleans up the code and allows easier translation into primitive code (which is clearly one goal of this implementation).c) Precomputed huffman tables for fixed blocksSo we don't have to compute the huffman tables from scratch. The precomputed tables are not in our superclass to avoid double storage (and my superclass is more intended for documentation anyways).!!FastInflateStream methodsFor: 'inflating' stamp: 'ar 12/4/1998 19:15'!processFixedBlock	litTable _ FixedLitTable.	distTable _ FixedDistTable.	state _ state bitOr: BlockProceedBit.	self proceedFixedBlock.! !!InflateStream class methodsFor: 'class initialization' stamp: 'ar 12/4/1998 19:12'!initialize	"InflateStream initialize"	MaxBits _ 16.	StateNewBlock _ 0.	StateNoMoreData _ 1.	BlockProceedBit _ 8.	BlockTypes _ #(	processStoredBlock	"New block in stored format"					processFixedBlock	"New block with fixed huffman tables"					processDynamicBlock	"New block with dynamic huffman tables"					errorBadBlock		"Bad block format"					proceedStoredBlock	"Continue block in stored format"					proceedFixedBlock	"Continue block in fixed format"					proceedDynamicBlock	"Continue block in dynamic format"					errorBadBlock		"Bad block format").	"Initialize fixed block values"	FixedLitCodes _ 	((1 to: 144) collect:[:i| 8]),					((145 to: 256) collect:[:i| 9]),					((257 to: 280) collect:[:i| 7]),					((281 to: 288) collect:[:i| 8]).	FixedDistCodes _ ((1 to: 32) collect:[:i| 5]).! !!FastInflateStream class methodsFor: 'class initialization' stamp: 'ar 12/4/1998 19:17'!initialize	"FastInflateStream initialize"	| low high |	"Init literal/length map"	low _ #(3 4 5 6 7 8 9 10 11 13 15 17 19 23 27 31 35 43 51 59 67 83 99 115 131 163 195 227 258 ).	high _ #(0 0 0 0 0 0 0 0 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 0 0).	LiteralLengthMap _ Array new: 256 + 32.	1 to: 257 do:[:i| LiteralLengthMap at: i put: i-1].	1 to: 29 do:[:i| LiteralLengthMap at: 257+i put: (low at:i) + ( (high at: i) + 1 << 16)].	"Init distance map"	high _ #(0 0 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13).	low _ #(1 2 3 4 5 7 9 13 17 25 33 49 65 97 129 193 257 385 513 769			1025 1537 2049 3073 4097 6145 8193 12289 16385 24577).	DistanceMap _ Array new: 32.	1 to: 30 do:[:i| DistanceMap at: i put: (low at: i) + ( (high at: i) << 16)].	"Init fixed block huffman tables"	FixedLitTable _ self basicNew				huffmanTableFrom: FixedLitCodes				mappedBy: LiteralLengthMap.	FixedDistTable _ self basicNew				huffmanTableFrom: FixedDistCodes				mappedBy: DistanceMap.! !InflateStream initialize!FastInflateStream initialize!