'From Squeak3.1alpha of 5 February 2001 [latest update: #4091] on 28 May 2001 at 6:38:17 pm'!"Change Set:		fewerBecomes2Date:			28 May 2001Author:			Bob ArningPart 2 of 2 - eliminating a fair number of #become: sends while filing in a change set"!!Compiler methodsFor: 'public access' stamp: 'RAA 5/28/2001 17:09'!evaluate: textOrStream in: aContext to: receiver notifying: aRequestor ifFail: failBlock	"Compiles the sourceStream into a parse tree, then generates code into a 	method. This method is then installed in the receiver's class so that it 	can be invoked. In other words, if receiver is not nil, then the text can 	refer to instance variables of that receiver (the Inspector uses this). If 	aContext is not nil, the text can refer to temporaries in that context (the 	Debugger uses this). If aRequestor is not nil, then it will receive a 	notify:at: message before the attempt to evaluate is aborted. Finally, the 	compiled method is invoked from here as DoIt or (in the case of 	evaluation in aContext) DoItIn:. The method is subsequently removed 	from the class, but this will not get done if the invocation causes an 	error which is terminated. Such garbage can be removed by executing: 	Smalltalk allBehaviorsDo: [:cl | cl removeSelector: #DoIt; removeSelector: 	#DoItIn:]."	| methodNode method value |	class _ (aContext == nil ifTrue: [receiver] ifFalse: [aContext receiver]) class.	self from: textOrStream class: class context: aContext notifying: aRequestor.	methodNode _ self translate: sourceStream noPattern: true ifFail:		[^failBlock value].	method _ methodNode generate: #(0 0 0 0).	self interactive ifTrue:		[method _ method copyWithTempNames: methodNode tempNames].	context == nil		ifTrue: [class addSelector: #DoIt withMethod: method.				value _ receiver DoIt.				InMidstOfFileinNotification signal ifFalse: [					class removeSelectorSimply: #DoIt.				].				^value]		ifFalse: [class addSelector: #DoItIn: withMethod: method.				value _ receiver DoItIn: context.				InMidstOfFileinNotification signal ifFalse: [					class removeSelectorSimply: #DoItIn:.				].				^value]! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'RAA 5/28/2001 18:36'!fileInAnnouncing: announcement	"This is special for reading expressions from text that has been formatted 	with exclamation delimitors. The expressions are read and passed to the 	Compiler. Answer the result of compilation.  Put up a progress report with     the given announcement as the title."	| val chunk |	announcement displayProgressAt: Sensor cursorPoint		from: 0 to: self size		during:		[:bar |		[self atEnd]			whileFalse: 				[bar value: self position.				self skipSeparators.				[					val _ (self peekFor: $!!) ifTrue: [						(Compiler evaluate: self nextChunk logged: false) scanFrom: self					] ifFalse: [						chunk _ self nextChunk.						self checkForPreamble: chunk.						Compiler evaluate: chunk logged: true					].				]					on: InMidstOfFileinNotification					do: [ :ex | ex resume: true].				self skipStyleChunk].		self close].	Smalltalk allBehaviorsDo: [ :cl | 		cl removeSelectorSimply: #DoIt; removeSelectorSimply: #DoItIn:	].	^ val! !"Postscript:"	Smalltalk allBehaviorsDo: [ :cl | 		cl removeSelectorSimply: #DoIt; removeSelectorSimply: #DoItIn:	].!