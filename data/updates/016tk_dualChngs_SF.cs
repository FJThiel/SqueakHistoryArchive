'From Squeak 2.0 BETA of May 8, 1998 on 12 May 1998 at 1:21:53 pm'!PluggableListMorph subclass: #PluggableListMorphByItem	instanceVariableNames: 'itemList '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!ChangeSorter methodsFor: 'creation' stamp: 'tk 5/12/1998 09:38'!open	"ChangeSorterPluggable new open"	| topView |	World ifNotNil: [^ self openAsMorph].	Sensor leftShiftDown ifTrue: [^ self openAsMorph].   "testing"	topView _ StandardSystemView new.	topView model: self.	myChangeSet ifNil: [self myChangeSet: Smalltalk changes]. 	topView label: self labelString.	topView borderWidth: 1; minimumSize: 360@360.	self openView: topView offsetBy: 0@0.	topView controller open.! !!ChangeSorter methodsFor: 'creation' stamp: 'tk 5/12/1998 09:42'!openAsMorph	"ChangeSorter new openAsMorph"	|  window |	myChangeSet ifNil: [self myChangeSet: Smalltalk changes]. 	window _ (SystemWindow labelled: self labelString) model: self.	self openAsMorphIn: window rect: (0@0 extent: 1@1).	World ifNil: [^ window openInMVC].  "test"	window openInWorld! !!ChangeSorter methodsFor: 'creation' stamp: 'tk 5/12/1998 13:17'!openAsMorphIn: window rect: rect	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| buttonView col |	contents _ ''.	self addDependent: window.		"so it will get changed: #relabel"	buttonView _ PluggableButtonMorph		on: self		getState: #mainButtonState		action: #changeSetMenuStart		label: #mainButtonName		menu: #changeSetMenu:.	col _ Color perform: self defaultBackgroundColor.	buttonView		label: myChangeSet name; 		onColor: col offColor: col;		triggerOnMouseDown: true; borderColor: window color.	window addMorph: buttonView		frame: (((0@0 extent: 1.0@0.06) scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem on: self			list: #classList			selected: #currentClassName			changeSelected: #currentClassName:			menu: #classMenu:)		frame: (((0@0.06 extent: 0.5@0.3) scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem on: self			list: #messageList			selected: #currentSelector			changeSelected: #currentSelector:			menu: #messageMenu:shifted:			keystroke: #messageListKey:from:)		frame: (((0.5@0.06 extent: 0.5@0.3) scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableTextMorph on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (((0@0.36 corner: 1@1) scaleBy: rect extent) translateBy: rect origin).! !!DualChangeSorter methodsFor: 'all' stamp: 'tk 5/8/1998 23:35'!open	| topView |	World ifNotNil: [^ self openAsMorph].	Sensor leftShiftDown ifTrue: [^ self openAsMorph].   "testing"	leftCngSorter _ ChangeSorter new myChangeSet: Smalltalk changes.	leftCngSorter parent: self.	rightCngSorter _ ChangeSorter new myChangeSet: 			ChangeSorter secondaryChangeSet.	rightCngSorter parent: self.	topView _ (StandardSystemView new) model: self; borderWidth: 1.	topView label: leftCngSorter label.	topView minimumSize: 300 @ 200.	leftCngSorter openView: topView offsetBy: 0@0.	rightCngSorter openView: topView offsetBy: 360@0.	topView controller open.! !!DualChangeSorter methodsFor: 'all' stamp: 'tk 5/11/1998 10:07'!openAsMorph		| window |	leftCngSorter _ ChangeSorter new myChangeSet: Smalltalk changes.	leftCngSorter parent: self.	rightCngSorter _ ChangeSorter new myChangeSet: 			ChangeSorter secondaryChangeSet.	rightCngSorter parent: self.	window _ (SystemWindow labelled: leftCngSorter label) model: self.	"topView minimumSize: 300 @ 200."	leftCngSorter openAsMorphIn: window rect: (0@0 extent: 0.5@1).	rightCngSorter openAsMorphIn: window rect: (0.5@0 extent: 0.5@1).	World ifNil: [^ window openInMVC].  "test"	window openInWorld! !!HandMorph methodsFor: 'meta menu' stamp: 'tk 5/8/1998 23:31'!openChangeSorter	DualChangeSorter new open! !!PluggableListMorphByItem methodsFor: 'as yet unclassified' stamp: 'tk 5/12/1998 10:01'!changeModelSelection: anInteger	"Change the model's selected item to be the one at the given index."	| item |	setIndexSelector ifNotNil: [		item _ (anInteger = 0 ifTrue: [nil] ifFalse: [itemList at: anInteger]).		model perform: setIndexSelector with: item].! !!PluggableListMorphByItem methodsFor: 'as yet unclassified' stamp: 'tk 5/12/1998 10:01'!getCurrentSelectionIndex	"Answer the index of the current selection."	| item |	getIndexSelector == nil ifTrue: [^ 0].	item _ model perform: getIndexSelector.	^ itemList findFirst: [ :x | x = item]! !!PluggableListMorphByItem methodsFor: 'as yet unclassified' stamp: 'tk 5/12/1998 11:34'!list: arrayOfStrings	"Set the receivers items to be the given list of strings."	"Note: the instance variable 'items' holds the original list.	 The instance variable 'list' is a paragraph constructed from	 this list."	itemList _ arrayOfStrings.	^ super list: arrayOfStrings! !