'From Squeak2.6 of 11 October 1999 [latest update: #1707] on 10 December 1999 at 12:11:11 pm'!"Change Set:		fontChoices-swDate:			10 December 1999Author:			Scott WallaceAllows the user separately to specify list font, window-title font, flap font, menu font, and default (code) font.  The choices are honored in both mvc and morphic.  See 'system fonts...' in the Appearance menu.  Caveat: Some choices, when made, only affect new windows (or other objects) that are created after the change."!!BasicButton methodsFor: 'as yet unclassified' stamp: 'sw 12/10/1999 09:07'!label: aString font: aFontOrNil	| oldLabel m aFont |	(oldLabel _ self findA: StringMorph)		ifNotNil: [oldLabel delete].	aFont _ aFontOrNil ifNil: [Preferences standardButtonFont].	m _ StringMorph contents: aString font: aFont.	self extent: (m width + 6) @ (m height + 6).	m position: self center - (m extent // 2).	self addMorph: m.	m lock! !!BasicButton methodsFor: 'as yet unclassified' stamp: 'sw 12/10/1999 09:08'!setLabel	| newLabel |	newLabel _ FillInTheBlank		request:'Enter a new label for this button'		initialAnswer: self label.	newLabel isEmpty ifFalse: [self label: newLabel font: nil].! !!FlapTab methodsFor: 'edge' stamp: 'sw 12/8/1999 15:01'!setEdge: anEdge	| changedOrientation |	changedOrientation _ nil.	self orientation == #vertical			ifTrue:				[(#(top bottom) includes: anEdge) ifTrue:					[changedOrientation _ #horizontal]]			ifFalse:				[(#(top bottom) includes: anEdge) ifFalse:					[changedOrientation _ #vertical]].	changedOrientation ifNotNil:		[^ self inform:'SORRY -- this sort of switch from horizontal to verticalor vice-versa is not yet permitted.  For now, to achievethe desired effect, create a new flap and copy overthe elements you want.'].	self isCurrentlyTextual ifTrue:		[changedOrientation ifNotNil:			[self assumeString: (submorphs first contents copyWithout: Character cr) font:  Preferences standardFlapFont orientation: changedOrientation color: self color]].	self edgeToAdhereTo: anEdge.	changedOrientation ifNotNil:		[self transposeParts].	referent isInWorld ifTrue: [self positionReferent].	self adjustPositionVisAVisFlap! !!FlapTab methodsFor: 'textual tabs' stamp: 'sw 12/8/1999 15:01'!changeTabText	| reply |	reply _ FillInTheBlankMorph request: 'new wording for this tab:' initialAnswer: self existingWording centerAt: self cursorPoint inWorld: self world.	reply size > 0 ifFalse: [^ self].	self useStringTab: reply.	submorphs first delete.	self assumeString: reply font: Preferences standardFlapFont orientation: (Utilities orientationForEdge: edgeToAdhereTo) color: nil! !!FlapTab methodsFor: 'textual tabs' stamp: 'sw 12/8/1999 18:16'!reformatTextualTab	"The font choice possibly having changed, reformulate the receiver"	self isCurrentlyTextual ifFalse: [^ self].	self assumeString: self existingWording font: Preferences standardFlapFont orientation: self orientation color: self color! !!FlapTab methodsFor: 'textual tabs' stamp: 'sw 12/8/1999 15:01'!useTextualTab	| stringToUse colorToUse |	self preserveDetails.	colorToUse _ self valueOfProperty: #priorColor ifAbsent: [Color green muchLighter].	submorphs size > 0 ifTrue: [self removeAllMorphs].	stringToUse _ self valueOfProperty: #priorWording ifAbsent: ['Unnamed Flap'].	self assumeString: stringToUse font:  Preferences standardFlapFont orientation: self orientation color: colorToUse! !!HandMorph methodsFor: 'world menu' stamp: 'sw 12/10/1999 08:52'!appearanceMenu	"Build the appearance menu for the world."	| menu screenCtrl |	screenCtrl _ ScreenController new.	menu _ (MenuMorph entitled: 'appearance...') defaultTarget: self.	menu addStayUpItem.	menu add: 'window colors...' target: Preferences action: #windowSpecificationPanel.	menu balloonTextForLastItem: 'Lets you specify colors for standard system windows.'.	menu add: 'system fonts...' target: self action: #standardFontDo.	menu balloonTextForLastItem: 'Choose the standard fonts to use for code, lists, menus, window titles, etc.'.	menu add: 'text highlight color...' target: Preferences action: #chooseTextHighlightColor.	menu balloonTextForLastItem: 'Choose which color should be used for text highlighting in Morphic.'.	menu add: 'insertion point color...' target: Preferences action: #chooseInsertionPointColor.	menu balloonTextForLastItem: 'Choose which color to use for the text insertion point in Morphic.'.	menu addLine.	menu addUpdating: #menuColorString target: Preferences action: #toggleMenuColorPolicy.	menu balloonTextForLastItem: 'Governs whether menu colors should be derived from the desktop color.'.	menu addUpdating: #roundedCornersString target: Preferences action: #toggleRoundedCorners.	menu balloonTextForLastItem: 'Governs whether morphic windows and menus should have rounded corners.'.	menu addLine.	menu add: 'full screen on' target: screenCtrl action: #fullScreenOn.	menu balloonTextForLastItem: 'puts you in full-screen mode, if not already there.'.	menu add: 'full screen off' target: screenCtrl action: #fullScreenOff.	menu balloonTextForLastItem: 'if in full-screen mode, takes you out of it.'.	menu addLine.	menu add: 'set display depth...' action: #setDisplayDepth.	menu balloonTextForLastItem: 'choose how many bits per pixel.'.	menu add: 'set desktop color...' action: #changeBackgroundColor.	menu balloonTextForLastItem: 'choose a uniform color to use as desktop background.'.	menu add: 'use texture background' target: self world action: #setStandardTexture.	menu balloonTextForLastItem: 'apply a graph-paper-like texture background to the desktop.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 12/8/1999 17:22'!standardFontDo	"Build and show the standard font menu"	Preferences fontConfigurationMenu popUpAt: self position forHand: self.! !!ListParagraph class methodsFor: 'style' stamp: 'sw 12/10/1999 10:43'!standardListStyle	^ ListStyle! !!ListParagraph class methodsFor: 'initialization' stamp: 'sw 12/10/1999 10:37'!initialize 	"ListParagraph initialize"	| aFont |	"Allow different line spacing for lists"	aFont _ Preferences standardListFont.	ListStyle _ aFont textStyle copy consistOnlyOf: aFont.	ListStyle gridForFont: 1 withLead: 1! !!ListView methodsFor: 'font access' stamp: 'sw 12/9/1999 18:07'!font	^ self assuredTextStyle fontNamed: textStyle fontNames first! !!ListView methodsFor: 'list access' stamp: 'sw 12/10/1999 10:43'!assuredTextStyle	^ textStyle ifNil:		[textStyle _  ListParagraph standardListStyle]! !!ListView methodsFor: 'list access' stamp: 'sw 12/9/1999 18:06'!list: anArray 	"Set the list of items the receiver displays to be anArray."	| arrayCopy i |	isEmpty _ anArray isEmpty.	arrayCopy _ Array new: (anArray size + 2).	arrayCopy at: 1 put: topDelimiter.	arrayCopy at: arrayCopy size put: bottomDelimiter.	i _ 2.	anArray do: [:el | arrayCopy at: i put: el. i _ i+1].	arrayCopy _ arrayCopy copyWithout: nil.	list _ ListParagraph withArray: arrayCopy style: self assuredTextStyle.	selection _ 0.	self positionList.! !!MenuItemMorph methodsFor: 'initialization' stamp: 'sw 12/8/1999 17:26'!initialize	super initialize.	bounds _ 0@0 extent: 10@10.	color _ Color black.	contents _ ''.	hasFocus _ false.	isEnabled _ true.	subMenu _ nil.	isSelected _ false.	target _ nil.	selector _ nil.	arguments _ nil.	font _ Preferences standardMenuFont.! !!MenuMorph methodsFor: 'construction' stamp: 'sw 12/8/1999 17:53'!addTitle: aString updatingSelector: aSelector updateTarget: aTarget	"Add a title line at the top of this menu  Make aString its initial contents.  If aSelector is not nil, then periodically obtain fresh values for its contents by sending aSelector to aTarget.."	| title |	title _ AlignmentMorph new.	self setTitleParametersFor: title.	title vResizing: #shrinkWrap.	title orientation: #vertical.	title centering: #center.	aSelector		ifNotNil:			[title addMorphBack: (UpdatingStringMorph new lock; useStringFormat; target: aTarget; getSelector: aSelector)]		ifNil:			[(aString asString findTokens: String cr) do:				[:line | title addMorphBack: (StringMorph contents: line font: Preferences standardMenuFont)]].		self addMorphFront: title.! !!PluggableListMorph methodsFor: 'initialization' stamp: 'sw 12/8/1999 15:04'!list: listOfStrings 	| morphList handler h loc index |	scroller removeAllMorphs.	list _ listOfStrings ifNil: [Array new].	list isEmpty ifTrue: [self setScrollDeltas.  ^ self selectedMorph: nil].	"NOTE: we will want a quick StringMorph init message, possibly even		combined with event install and positioning"	font ifNil: [font _ Preferences standardListFont].	morphList _ list collect:		[:item | item isText			ifTrue: [StringMorph contents: item font: font emphasis: (item emphasisAt: 1)]			ifFalse: [StringMorph contents: item font: font]].	"Sensitize first morph and copy handler to all the rest"	morphList first on: #mouseDown send: #mouseDown:onItem: to: self.	handler _ morphList first eventHandler.	morphList do: [:m | m eventHandler: handler].	"Lay items out vertically and install them in the scroller"	h _ morphList first height "self listItemHeight".	loc _ 0@0.	morphList do: [:m | m bounds: (loc extent: 9999@h).  loc _ loc + (0@h)].	scroller addAllMorphs: morphList.	index _ self getCurrentSelectionIndex.	self selectedMorph: ((index = 0 or: [index > morphList size]) ifTrue: [nil] ifFalse: [morphList at: index]).	self setScrollDeltas.	scrollBar setValue: 0.0! !!PluggableListView methodsFor: 'initialization' stamp: 'sw 12/9/1999 18:06'!list: arrayOfStrings	"Set the receivers items to be the given list of strings	The instance variable 'items' holds the original list. The instance variable 'list' is a paragraph constructed from this list."	((items == arrayOfStrings) "fastest" or: [items = arrayOfStrings]) ifTrue: [^ self].	items _ arrayOfStrings.	isEmpty _ arrayOfStrings isEmpty.	"add top and bottom delimiters"	list _ ListParagraph		withArray:			(Array streamContents: [:s |				s nextPut: topDelimiter.				arrayOfStrings do: [:item | item == nil ifFalse: [s nextPut: item]].				s nextPut: bottomDelimiter])		 style: self assuredTextStyle.	selection _ self getCurrentSelectionIndex.	self positionList.! !!PluggableListViewByItem methodsFor: 'as yet unclassified' stamp: 'sw 12/9/1999 18:07'!list: arrayOfStrings	"Set the receivers items to be the given list of strings."	"Note: the instance variable 'items' holds the original list.	 The instance variable 'list' is a paragraph constructed from	 this list."	itemList _ arrayOfStrings.	isEmpty _ arrayOfStrings isEmpty.	"add top and bottom delimiters"	list _ ListParagraph		withArray:			(Array streamContents: [:s |				s nextPut: topDelimiter.				arrayOfStrings do: [:item | item == nil ifFalse: [s nextPut: item]].				s nextPut: bottomDelimiter])		 style: self assuredTextStyle.	selection _ self getCurrentSelectionIndex.	self positionList.! !!PopUpMenu methodsFor: 'displaying' stamp: 'sw 12/10/1999 09:55'!displayAt: aPoint withCaption: captionOrNil during: aBlock	"Display the receiver just to the right of aPoint while aBlock is evaluated.  If the receiver is forced off screen, display it just to the right."	| delta savedArea captionForm captionSave outerFrame captionText tFrame frameSaveLoc captionBox |	marker ifNil: [self computeForm].	frame _ frame align: marker leftCenter with: aPoint + (2@0).	outerFrame _ frame.	captionOrNil notNil ifTrue:		[captionText _ (DisplayText				text: captionOrNil asText				textStyle: MenuStyle copy centered)					foregroundColor: Color black					backgroundColor: Color white.		tFrame _ captionText boundingBox insetBy: -2.		outerFrame _ frame merge: (tFrame align: tFrame bottomCenter					with: frame topCenter + (0@2))].	delta _ outerFrame amountToTranslateWithin: Display boundingBox.	frame right > Display boundingBox right		ifTrue: [delta _ 0 - frame width @ delta y].	frame _ frame translateBy: delta.	captionOrNil notNil ifTrue:		[captionForm _ captionText form.		captionBox _ captionForm boundingBox expandBy: 4.		captionBox _ captionBox align: captionBox bottomCenter								with: frame topCenter + (0@2).		captionSave _ Form fromDisplay: captionBox.		Display border: captionBox width: 4 fillColor: Color white.		Display border: captionBox width: 2 fillColor: Color black.		captionForm displayAt: captionBox topLeft + 4].	marker _ marker align: marker leftCenter with: aPoint + delta +  (2@0).	savedArea _ Form fromDisplay: frame.	self menuForm displayOn: Display at: (frameSaveLoc _ frame topLeft).	selection ~= 0 ifTrue: [Display reverse: marker].	Cursor normal showWhile: [aBlock value].	savedArea displayOn: Display at: frameSaveLoc.	captionOrNil notNil ifTrue:		[captionSave displayOn: Display at: captionBox topLeft]! !!CustomMenu methodsFor: 'private' stamp: 'sw 12/10/1999 11:21'!build	"Turn myself into an invokable ActionMenu."	| stream |	stream _ WriteStream on: (String new).	labels do: [:label | stream nextPutAll: label; cr].	(labels isEmpty) ifFalse: [stream skip: -1].  "remove final cr"	super labels: stream contents		font: MenuStyle defaultFont		lines: dividers! !!PopUpMenu class methodsFor: 'class initialization' stamp: 'sw 12/10/1999 11:38'!setMenuFontTo: aFont	MenuStyle _ aFont textStyle copy consistOnlyOf: aFont.	MenuStyle 		gridForFont: 1 withLead: 0;		centered.	self allSubInstancesDo: [:m | m rescan].	Utilities replaceMenuFlap! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 08:58'!chooseCodeFont	"Not currently sent, but once protocols are sorted out so that we can disriminate on whether a text object being launched is for code or not, will be reincorporated"	self chooseFontWithPrompt: 'standard code font' andSendTo: self withSelector: #setCodeFontTo:.! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 18:08'!chooseFlapsFont	self chooseFontWithPrompt: 'flaps font' andSendTo: self withSelector: #setFlapsFontTo:! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 17:03'!chooseFontWithPrompt: aPrompt andSendTo: aReceiver withSelector: aSelector	Smalltalk isMorphic		ifFalse:			[Utilities mvcPromptForFont: aPrompt andSendTo: aReceiver withSelector: aSelector]		ifTrue:			[Utilities promptForFont: aPrompt andSendTo: aReceiver withSelector: aSelector]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 17:30'!chooseListFont	self chooseFontWithPrompt: 'standard list font' andSendTo: self withSelector: #setListFontTo:! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 17:30'!chooseMenuFont	self chooseFontWithPrompt: 'standard menu font' andSendTo: self withSelector: #setMenuFontTo:! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 11:34'!chooseSystemFont	self chooseFontWithPrompt: 'Default text font' andSendTo: self withSelector: #setSystemFontTo:! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 18:39'!chooseWindowTitleFont	self chooseFontWithPrompt: 'window title font' andSendTo: self withSelector: #setWindowTitleFontTo:! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 09:26'!fontConfigurationMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: Preferences.	aMenu addTitle: 'Standard System Fonts'.	aMenu add: 'default text font...' action: #chooseSystemFont.	aMenu balloonTextForLastItem: 'Choose the default font to be used for code and  in workspaces, transcripts, etc.'.	aMenu lastItem font: TextStyle defaultFont.	aMenu add: 'list font...' action: #chooseListFont.	aMenu lastItem font: Preferences standardListFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in list panes'.	aMenu add: 'flaps font...' action: #chooseFlapsFont.	aMenu lastItem font: Preferences standardFlapFont.	aMenu balloonTextForLastItem: 'Choose the font to be used on textual flap tabs'.	aMenu add: 'menu font...' action: #chooseMenuFont.	aMenu lastItem font: Preferences standardMenuFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in menus'.	aMenu add: 'window-title font...' action: #chooseWindowTitleFont.	aMenu lastItem font: Preferences windowTitleFont emphasis: 1.	aMenu balloonTextForLastItem: 'Choose the font to be used in window titles.'.	"aMenu add: 'code font...' action: #chooseCodeFont.	aMenu lastItem font: Preferences standardCodeFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in code panes.'."	aMenu addLine.	aMenu add: 'restore default font choices' action: #restoreDefaultFonts.	aMenu balloonTextForLastItem: 'Use the standard system font defaults'.	^ aMenu! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 09:39'!presentMvcFontConfigurationMenu	| aMenu result |	aMenu _ CustomMenu new.	aMenu title: 'Standard System Fonts'.	aMenu add: 'default text font...' action: #chooseSystemFont.	aMenu add: 'list font...' action: #chooseListFont.	aMenu add: 'flaps font...' action: #chooseFlapsFont.	aMenu add: 'menu font...' action: #chooseMenuFont.	aMenu add: 'window-title font...' action: #chooseWindowTitleFont.	"aMenu add: 'code font...' action: #chooseCodeFont."	aMenu addLine.	aMenu add: 'restore default font choices' action: #restoreDefaultFonts.	(result _ aMenu startUp) ifNotNil:		[self perform: result]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 11:34'!restoreDefaultFonts	"Preferences restoreDefaultFonts"	#(	(setButtonFontTo:		ComicBold		16)		"(setCodeFontTo:			NewYork		12)"  "Later"		(setFlapsFontTo:			ComicBold		16)		(setListFontTo:			NewYork		12)		(setMenuFontTo:			NewYork		12)		(setWindowTitleFontTo:	NewYork		15)		(setSystemFontTo:		NewYork		12)) do:			[:triplet |				self perform: triplet first with: (StrikeFont familyName: triplet second size: triplet third)].	"Note:  The standardCodeFont is not currently used -- the default font is instead; later hopefully we can split the code font out as  a separate choice, but only after we're able to have the protocols reorganized such that we can know whether it's code or not when we launch the text object.	Note:  The standard button font is reset by this code but is not otherwise settable by a public UI (too many things can go afoul) "! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 22:06'!setButtonFontTo: aFont	Parameters at: #standardButtonFont put: aFont! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 11:37'!setCodeFontTo: aFont	"Not currently sent, but once protocols are sorted out so that we can disriminate on whether a text object being launched is for code or not, will be reincorporated"	Parameters at: #standardCodeFont put: aFont.	Utilities replaceToolsFlap! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 18:15'!setFlapsFontTo: aFont	Parameters at: #standardFlapFont put: aFont.	FlapTab allSubInstancesDo:		[:aFlapTab | aFlapTab reformatTextualTab]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 11:39'!setListFontTo: aFont	Parameters at: #standardListFont put: aFont.	ListParagraph initialize.	Utilities replaceToolsFlap! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 18:04'!setMenuFontTo: aFont	Parameters at: #standardMenuFont put: aFont.	PopUpMenu setMenuFontTo: aFont! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 11:35'!setSystemFontTo: aFont	"Establish the default text font and style"	| aStyle newDefaultStyle |	aFont ifNil: [^ self].	aStyle _ aFont textStyle ifNil: [^ self].	newDefaultStyle _ aStyle copy.	newDefaultStyle defaultFontIndex: (aStyle fontIndexOf: aFont).	TextConstants at: #DefaultTextStyle put: newDefaultStyle.	Utilities replaceToolsFlap.	ScriptingSystem resetStandardPartsBin! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/10/1999 11:39'!setWindowTitleFontTo: aFont	Parameters at: #windowTitleFont put: aFont.	StandardSystemView setLabelStyle.	Utilities replaceToolsFlap! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 16:13'!standardButtonFont	"Answer an attractive font to use for buttons"	"Answer the font to be used for textual flap tab labels"	^ Parameters at: #standardButtonFont ifAbsent:		[Parameters at: #standardButtonFont put: (StrikeFont familyName: #ComicBold size: 16)]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 16:58'!standardCodeFont	"Answer the font to be used in code"	 ^ Parameters at: #standardCodeFont ifAbsent:		[Parameters at: #standardCodeFont put: TextStyle defaultFont]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 16:13'!standardFlapFont	"Answer the font to be used for textual flap tab labels"	^ Parameters at: #standardFlapFont ifAbsent:		[Parameters at: #standardFlapFont put: self standardButtonFont]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 16:09'!standardListFont	"Answer the font to be used in lists"	 ^ Parameters at: #standardListFont ifAbsent:		[Parameters at: #standardListFont put: TextStyle defaultFont]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 16:58'!standardMenuFont	"Answer the font to be used in menus"	 ^ Parameters at: #standardMenuFont ifAbsent:		[Parameters at: #standardMenuFont put: TextStyle defaultFont]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 16:10'!windowTitleFont	"Answer the standard font to use for window titles"	^  Parameters at: #windowTitleFont ifAbsent:		[Parameters at: #windowTitleFont put: (StrikeFont familyName: #NewYork size: 15)]! !!Preferences class methodsFor: 'fonts' stamp: 'sw 12/8/1999 22:18'!windowTitleStyle	"Answer the standard style to use for window titles"	^  self windowTitleFont textStyle! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 12/10/1999 11:29'!configureFonts	Preferences presentMvcFontConfigurationMenu! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 12/10/1999 11:29'!appearanceMenu 	"Answer the appearance menu to be put up as a screen submenu"	^ SelectionMenu labelList:		#(	'window colors...'			'system fonts...'			'full screen on'			'full screen off'			'set display depth...'			'set desktop color...' ) 		lines: #(2 4)		selections: #(windowSpecificationPanel configureFontsfullScreenOn fullScreenOff setDisplayDepth setDesktopColor)"ScreenController new appearanceMenu startUp"! !!SimpleButtonMorph methodsFor: 'accessing' stamp: 'sw 12/10/1999 09:06'!label: aString font: aFont	| oldLabel m |	(oldLabel _ self findA: StringMorph)		ifNotNil: [oldLabel delete].	m _ StringMorph contents: aString font: (aFont ifNil: [Preferences standardButtonFont]).	self extent: (m width + 6) @ (m height + 6).	m position: self center - (m extent // 2).	self addMorph: m.	m lock! !!StandardSystemView methodsFor: 'label access' stamp: 'sw 12/9/1999 17:44'!label: aString 	"Set aString to be the receiver's label."	labelText _ Paragraph			withText: (Text string: ((aString == nil or: [aString isEmpty])								ifTrue: ['Untitled' copy]								ifFalse: [aString])							attributes: (Array with: TextEmphasis bold))			style: LabelStyle.	insetDisplayBox == nil ifTrue: [^ self].  "wait for further initialization"	self setLabelRegion! !!StandardSystemView methodsFor: 'label access' stamp: 'sw 12/9/1999 17:47'!labelHeight	^ ((LabelStyle fontAt: 1) height + 4) max: 20! !!StandardSystemView class methodsFor: 'class initialization' stamp: 'sw 12/9/1999 17:43'!setLabelStyle	| aFont |	"StandardSystemView setLabelStyle"	aFont _ Preferences windowTitleFont.	LabelStyle _ aFont textStyle copy consistOnlyOf: aFont.	LabelStyle gridForFont: 1 withLead: 0! !!TextStyle methodsFor: 'fonts and font indexes' stamp: 'sw 12/8/1999 18:02'!consistOnlyOf: aFont	fontArray _ Array with: aFont.	defaultFontIndex _ 1! !!Utilities class methodsFor: 'flaps' stamp: 'sw 12/10/1999 08:55'!newFlapTitled: aString onEdge: anEdge	| aFlap aFlapTab  orientation |	aFlap _ PasteUpMorph newSticky.	aFlapTab _ FlapTab new referent: aFlap.	orientation _ (#(left right) includes: anEdge)		ifTrue:	[#vertical]		ifFalse:	[#horizontal].	aFlapTab assumeString: aString font: Preferences standardFlapFont orientation: orientation color: Color veryLightGray.	aFlapTab edgeToAdhereTo: anEdge; inboard: false.	anEdge == #left ifTrue:		[aFlapTab position: (0 @ 0).		aFlap extent: (200 @ self currentWorld height)].	anEdge == #right ifTrue:		[aFlapTab position: ((self currentWorld width - aFlapTab width) @ 0).		aFlap extent: (200 @ self currentWorld height)].	anEdge == #top ifTrue:		[aFlapTab position: (50 @ 0).		aFlap extent: (self currentWorld width @ 200)].	anEdge == #bottom ifTrue:		[aFlapTab position: (50 @ (self currentWorld height - aFlap height)).		aFlap extent: (self currentWorld width @ 200)].	aFlap setProperty: #flap toValue: true.	aFlap color: (Color veryLightGray muchLighter).	^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 12/8/1999 15:02'!standardBottomFlap	|  aFlapTab aPage |	aPage _ self newPartsFlapPage.	aPage setProperty: #maximumThumbnailWidth toValue: 80.	aFlapTab _ FlapTab new referent: aPage beSticky.	aFlapTab color: Color red lighter.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab assumeString: 'Supplies' font: Preferences standardFlapFont orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aPage extent: self currentWorld width @ 100.	#(PaintInvokingMorph RectangleMorph EllipseMorph StarMorph  CurveMorph PolygonMorph TextMorph ImageMorph BasicButton		PasteUpMorph    BookMorph TabbedPalette 		JoystickMorph  ) do:		[:sym | aPage addMorphBack: (Smalltalk at: sym) authoringPrototype].	aPage addMorphBack: RectangleMorph roundRectPrototype.	aPage addMorphBack: TrashCanMorph new markAsPartsDonor.	aPage addMorphBack: ScriptingSystem scriptControlButtons markAsPartsDonor.	aPage addMorphBack: Morph new previousPageButton markAsPartsDonor.	aPage addMorphBack: Morph new nextPageButton markAsPartsDonor.	aPage addMorphBack: (ClockMorph authoringPrototype showSeconds: false) step.	aPage replaceTallSubmorphsByThumbnails.	aPage fixLayout.	aFlapTab position: ((Display width - aFlapTab width) // 2 @ (self currentWorld height - aFlapTab height)).	aPage setProperty: #flap toValue: true.	aPage color: (Color red muchLighter "alpha: 0.2").	aPage extent: self currentWorld width @ 100.		^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 12/8/1999 15:02'!standardLeftFlap	| aFlap aFlapTab aButton aClock buttonColor anOffset |	aFlap _ PasteUpMorph newSticky borderWidth: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab assumeString: 'Squeak' font: Preferences standardFlapFont orientation: #vertical color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #left; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab position: (0 @ ((Display height - aFlapTab height) // 2)).	aFlap setProperty: #flap toValue: true.	aFlap color: (Color brown muchLighter lighter "alpha: 0.3").	aFlap extent: 200 @ self currentWorld height.	self addProjectNavigationButtonsTo: aFlap.	anOffset _ 16.	buttonColor _ Color green muchLighter.	aButton _ SimpleButtonMorph new target: Smalltalk.	aButton color: buttonColor.	aButton actionSelector: #saveSession.	aButton setBalloonText: 'Make a complete snapshot of the current state of the image onto disk.'.	aButton label: 'snapshot'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ aButton fullCopy target: Utilities.	aButton actionSelector: #fileOutChanges.	aButton label: 'file out changes'.	aButton setBalloonText: 'File out the current change set to disk.'.	aFlap addMorph: aButton.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ aButton fullCopy target: Utilities.	aButton actionSelector: #browseRecentSubmissions.	aButton setBalloonText: 'Open a message-list browser showing the 20 most-recently-submitted methods.'.	aButton label: 'recent submissions'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aClock _ ClockMorph newSticky.	aClock color: Color red.	aClock showSeconds: false.	aClock font: (TextStyle default fontAt: 3).	aClock step.	aClock setBalloonText: 'The time of day.  If you prefer to see seconds, check out my menu.'.	aFlap addCenteredAtBottom: aClock offset: anOffset.	aButton _ aButton fullCopy target: Preferences.	aButton actionSelector: #openPreferencesInspector.	aButton setBalloonText: 'Open a window allowing me to view and change various Preferences.'.	aButton label: 'preferences...'.	aButton color: Color cyan muchLighter.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ aButton fullCopy target: Utilities.	aButton actionSelector: #updateFromServer.	aButton label: 'load code updates'.	aButton setBalloonText: 'Check the Squeak server for any new code updates, and load any that are found.'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	self addSystemStatusLinesTo: aFlap.	aButton _ SimpleButtonMorph new target: self.	aButton actionSelector: #explainFlaps; color: buttonColor.	aButton label: 'About flaps...'.	aButton setBalloonText: 'Click here to get a window of information about flaps.'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ aButton fullCopy target: Preferences; actionSelector: #editAnnotations;		label: 'Annotations...'.	aButton setBalloonText: 'Click here to get a little window that will allow you to specify which types of annotations, in which order, you wish to see in the annotation pane of method-list browsers.'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ TrashCanMorph newSticky.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton startStepping.	^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 12/8/1999 15:02'!standardRightFlap	|  aFlapTab aPage |	aPage _ self newPartsFlapPage.	aFlapTab _ FlapTab new referent: aPage beSticky.	aFlapTab color: Color red lighter.	aFlapTab assumeString: 'Tools' font: Preferences standardFlapFont orientation: #vertical color: Color orange lighter.	aFlapTab edgeToAdhereTo: #right; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aPage extent: (90 @ self currentWorld height).	self addSampleWindowsTo: aPage.	aPage addMorphBack: ScriptingSystem newScriptingSpace.	aPage addMorphBack: RecordingControlsMorph authoringPrototype.	aPage replaceTallSubmorphsByThumbnails.	aPage fixLayout.	aFlapTab position: (self currentWorld width - aFlapTab width) @ ((Display height - aFlapTab height) // 2).	aPage setProperty: #flap toValue: true.	aPage color: (Color brown muchLighter alpha: 0.5).	aPage extent: (90 @ self currentWorld height).		^ aFlapTab! !ListParagraph initialize!ScreenController removeSelector: #chooseSystemFont!Utilities class removeSelector: #setSystemFontTo:!Utilities class removeSelector: #chooseSystemFont!"Postscript:"Preferences restoreDefaultFonts.!