'From Squeak3.2alpha of 8 October 2001 [latest update: #4646] on 10 January 2002 at 6:35:05 pm'!"Change Set:		dragNDropHandlerDate:			10 January 2002Author:			Michael RuegerExtends the handling of external drop events to also look for file extensions.Let's you register handlers for types or extension without the need to modify PasteUpMorph.Look at ExternalDropHandler class default handler messages to see how to use this mechanism."!Object subclass: #ExternalDropHandler	instanceVariableNames: 'action type extension '	classVariableNames: 'DefaultHandler RegisteredHandlers '	poolDictionaries: ''	category: 'System-Support'!!ExternalDropHandler methodsFor: 'testing' stamp: 'mir 1/10/2002 16:36'!matchesExtension: aExtension	(self extension isNil or: [aExtension isNil])		ifTrue: [^false].	^extension = aExtension! !!ExternalDropHandler methodsFor: 'testing' stamp: 'mir 1/10/2002 16:35'!matchesTypes: types	(self type isNil or: [types isNil])		ifTrue: [^false].	^types anySatisfy: [:mimeType | mimeType beginsWith: self type]! !!ExternalDropHandler methodsFor: 'initialize' stamp: 'mir 1/10/2002 17:17'!type: aType extension: anExtension action: anAction 	action _ anAction.	type _ aType.	extension _ anExtension! !!ExternalDropHandler methodsFor: 'accessing' stamp: 'mir 1/10/2002 15:54'!extension	^extension! !!ExternalDropHandler methodsFor: 'accessing' stamp: 'mir 1/10/2002 17:29'!handle: dropStream in: pasteUp dropEvent: anEvent	| numArgs |	numArgs _ action numArgs.	numArgs == 1		ifTrue: [^action value: dropStream].	numArgs == 2		ifTrue: [^action value: dropStream value: pasteUp].	numArgs == 3		ifTrue: [^action value: dropStream value: pasteUp value: anEvent].	self error: 'Wrong number of args for dop action.'! !!ExternalDropHandler methodsFor: 'accessing' stamp: 'mir 1/10/2002 15:54'!type	^type! !!ExternalDropHandler class methodsFor: 'accessing' stamp: 'mir 1/10/2002 17:17'!defaultHandler	DefaultHandler ifNil: [DefaultHandler _ ExternalDropHandler type: nil extension: nil action: [:dropStream | dropStream edit]].	^DefaultHandler! !!ExternalDropHandler class methodsFor: 'accessing' stamp: 'mir 1/10/2002 16:54'!defaultHandler: externalDropHandler	DefaultHandler _ externalDropHandler! !!ExternalDropHandler class methodsFor: 'accessing' stamp: 'mir 1/10/2002 16:32'!lookupExternalDropHandler: stream	| types extension |	types _ stream mimeTypes.	types ifNotNil: [		self registeredHandlers do: [:handler | 			(handler matchesTypes: types)				ifTrue: [^handler]]].	extension _ FileDirectory extensionFor: stream name.	self registeredHandlers do: [:handler | 		(handler matchesExtension: extension)				ifTrue: [^handler]].	^self defaultHandler! !!ExternalDropHandler class methodsFor: 'accessing' stamp: 'mir 1/10/2002 17:19'!registerHandler: aHandler	self registeredHandlers add: aHandler! !!ExternalDropHandler class methodsFor: 'class initialization' stamp: 'mir 1/10/2002 17:37'!initialize	"ExternalDropHandler initialize"	self resetRegisteredHandlers.	self		registerHandler: self defaultImageHandler;		registerHandler: self defaultGZipHandler;		registerHandler: self defaultProjectHandler! !!ExternalDropHandler class methodsFor: 'class initialization' stamp: 'mir 1/10/2002 15:59'!registerStandardExternalDropHandlers	"ExternalDropHandler registerStandardExternalDropHandlers"	self registeredHandlers add: (		ExternalDropHandler			action: [:stream :pasteUp :event |				pasteUp addMorph: (SketchMorph withForm: (Form fromBinaryStream: stream binary)) centeredNear: event position]			type: 'image/'			extension: nil)! !!ExternalDropHandler class methodsFor: 'instance creation' stamp: 'mir 1/10/2002 17:16'!type: aType extension: anExtension action: anAction 	^self new type: aType extension: anExtension action: anAction ! !!ExternalDropHandler class methodsFor: 'private' stamp: 'mir 1/10/2002 17:23'!defaultGZipHandler	^ExternalDropHandler		type: nil		extension: 'gz'		action: [:stream :pasteUp :event |			stream viewGZipContents]! !!ExternalDropHandler class methodsFor: 'private' stamp: 'mir 1/10/2002 17:21'!defaultImageHandler	| image sketch |	^ExternalDropHandler		type: 'image/'		extension: nil		action: [:stream :pasteUp :event |			stream binary.			image _ Form fromBinaryStream: stream.			Project current resourceManager 				addResource: image 				url: (FileDirectory urlForFileNamed: stream name) asString.			sketch _ SketchMorph withForm: image.			pasteUp addMorph: sketch centeredNear: event position] fixTemps! !!ExternalDropHandler class methodsFor: 'private' stamp: 'mir 1/10/2002 17:38'!defaultProjectHandler	^ExternalDropHandler		type: nil		extension: 'pr'		action: [:stream |				ProjectLoading					openName: nil					stream: stream					fromDirectory: nil					withProjectView: nil]! !!ExternalDropHandler class methodsFor: 'private' stamp: 'mir 1/10/2002 15:57'!registeredHandlers	RegisteredHandlers ifNil: [RegisteredHandlers _ OrderedCollection new].	^RegisteredHandlers! !!ExternalDropHandler class methodsFor: 'private' stamp: 'mir 1/10/2002 15:57'!resetRegisteredHandlers	RegisteredHandlers _ nil! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'mir 1/10/2002 17:35'!dropFiles: anEvent	"Handle a number of dropped files from the OS.	TODO:		- use a more general mechanism for figuring out what to do with the file (perhaps even offering a choice from a menu)		- remember the resource location or (when in browser) even the actual file handle	"	| numFiles stream handler |	numFiles _ anEvent contents.	1 to: numFiles do: [:i |		stream _ FileStream requestDropStream: i.		handler _ ExternalDropHandler lookupExternalDropHandler: stream.		[handler ifNotNil: [handler handle: stream in: self dropEvent: anEvent]]			ensure: [stream close]].! !ExternalDropHandler initialize!