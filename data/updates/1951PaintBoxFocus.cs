'From Squeak2.8alpha of 16 February 2000 [latest update: #1950] on 23 March 2000 at 2:38:03 pm'!"Change Set:		PaintBoxFocusDate:			23 March 2000Author:			Andreas RaabThe change set adds a designated focus for a paint box morph so that the queries for	self world findA: SketchEditorMorphcan go away and other morphs can utilize the PaintBox facilities. Also, the messages send from the paint box to the focus morph have been cleaned up to avoid side effects and allow for easier integration into other morphs"!ImageMorph subclass: #PaintBoxMorph	instanceVariableNames: 'action tool currentCursor thumbnail currentColor currentBrush colorMemory colorPatch stampHolder rotationTabForm scaleTabForm colorMemoryThin brushes focusMorph '	classVariableNames: 'AllOffImage AllOnImage AllPressedImage OriginalBounds Prototype '	poolDictionaries: ''	category: 'Morphic-Support'!!PaintBoxMorph methodsFor: 'other' stamp: 'ar 3/23/2000 14:18'!focusMorph	"Note: For backward compatibility we search the world for a SketchEditorMorph if the current focus morph is nil"	^focusMorph ifNil:[focusMorph _ self world findA: SketchEditorMorph]! !!PaintBoxMorph methodsFor: 'other' stamp: 'ar 3/23/2000 14:20'!focusMorph: newFocus	"Set the new focus morph"	focusMorph ifNotNil:[focusMorph paletteDetached: self]. "In case the morph is interested"	focusMorph _ newFocus.	focusMorph ifNotNil:[focusMorph paletteAttached: self]. "In case the morph is interested"! !!PaintBoxMorph methodsFor: 'actions' stamp: 'ar 3/23/2000 14:25'!clear: clearButton with: clearSelector	| ss |	(ss _ self focusMorph) 		ifNotNil: [ss clearPainting: self]		ifNil: [self notCurrentlyPainting].	clearButton state: #off.! !!PaintBoxMorph methodsFor: 'actions' stamp: 'ar 3/23/2000 14:25'!keep: keepButton with: keepSelector	"Showing of the corrent palette (viewer or noPalette) is done by the block submitted to the SketchMorphEditor, see (EToyHand makeNewDrawing) and (SketchMorph editDrawingInWorld:forBackground:)."	| ss |	owner ifNil: [^ self].	keepButton ifNotNil: [keepButton state: #off].	(ss _ self focusMorph) 		ifNotNil: [ss savePainting: self]		ifNil:		[keepSelector == #silent ifTrue: [^ self].		self notCurrentlyPainting].! !!PaintBoxMorph methodsFor: 'actions' stamp: 'ar 3/23/2000 14:22'!pickup: actionButton action: aSelector cursor: aCursor	"Special version for pickup: and stamp:, because of these tests"	| ss picker old map stamper |	self tool: actionButton action: aSelector cursor: aCursor.	aSelector == #stamp: ifTrue: [		(stampHolder pickupButtons includes: actionButton) ifTrue: [				stamper _ stampHolder otherButtonFor: actionButton.				^ self pickup: stamper action: #stamp: cursor: (stamper arguments at: 3)].		(stampHolder stampFormFor: actionButton) 			ifNil: [				"If not stamp there, go to pickup mode"				picker _ stampHolder otherButtonFor: actionButton.				picker state: #on.				^ self pickup: picker action: #pickup: cursor: (picker arguments at: 3)]			ifNotNil: [				old _ stampHolder stampFormFor: actionButton.				currentCursor _ ColorForm extent: old extent depth: 8.				old displayOn: currentCursor.				map _ Color indexedColors copy.				map at: 1 put: Color transparent.				currentCursor colors: map.				currentCursor offset: currentCursor extent // -2.				"Emphisize the stamp button"				actionButton owner "layoutMorph" "color: (Color r: 1.0 g: 0.645 b: 0.419);"					borderColor: (Color r: 0.65 g: 0.599 b: 0.8).				]].	aSelector == #pickup: ifTrue: [		ss _ self focusMorph.		ss ifNotNil: [currentCursor _ aCursor]	 			ifNil: [self notCurrentlyPainting.				self setAction: #paint:]].! !!PaintBoxMorph methodsFor: 'actions' stamp: 'ar 3/23/2000 14:24'!toss: cancelButton with: cancelSelector	"Reject the painting.  Showing noPalette is done by the block submitted to the SketchEditorMorph"	| focus |	owner ifNil: ["it happens"  ^ self].	(focus _ self focusMorph) 		ifNotNil: [focus cancelPainting: self]		ifNil:			[self delete].	cancelButton state: #off.! !!PaintBoxMorph methodsFor: 'actions' stamp: 'ar 3/23/2000 14:24'!undo: undoButton with: undoSelector	| ss |	(ss _ self focusMorph) 		ifNotNil: [ss undoPainting: self]		ifNil: [self notCurrentlyPainting].	undoButton state: #off.! !!PaintBoxMorph methodsFor: 'object fileIn' stamp: 'ar 3/23/2000 14:35'!convertbosfceiatctccccsrscb0: varDict bosfceiatctccccsrscbf0: smartRefStrm	"These variables are automatically stored into the new instance ('action' 'tool' 'currentCursor' 'thumbnail' 'currentColor' 'currentBrush' 'colorMemory' 'colorPatch' 'stampHolder' 'rotationTabForm' 'scaleTabForm' 'colorMemoryThin' 'brushes' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: ('focusMorph' )  If a non-nil value is needed, please assign it."! !!SketchEditorMorph methodsFor: 'initialization' stamp: 'ar 3/23/2000 14:31'!initializeFor: aSketchMorph inBounds: boundsToUse pasteUpMorph: aPasteUpMorph paintBoxPosition: aPosition	"NB: if aPosition is nil, then it's assumed that the paintbox is obtained from a flap or some such, so do nothing special regarding a palette in this case.  The palette needs already to be in the world for this to work."	| w  |	(w _ aPasteUpMorph world) addMorphFront: self.	enclosingPasteUpMorph _ aPasteUpMorph.	hostView _ aSketchMorph.  "may be ownerless"	self bounds: boundsToUse.	canvasRectangle _ bounds.	w paintBox focusMorph: self.	aPosition ifNotNil:		[w addMorphFront: palette.  "bring to front"		palette position: aPosition].	paintingForm _ Form extent: bounds extent depth: w assuredCanvas depth.	self dimTheWindow.	self addRotationScaleHandles.	aSketchMorph ifNotNil:		[aSketchMorph rotationDegrees: 0.		aSketchMorph form			displayOn: paintingForm			at: (hostView boundsInWorld origin - bounds origin)			clippingBox: (0@0 extent: paintingForm extent)			rule: Form over			fillColor: nil.  "assume they are the same depth"		rotationCenter _ aSketchMorph rotationCenter]! !!SketchEditorMorph methodsFor: 'palette handling' stamp: 'ar 3/23/2000 14:24'!cancelPainting: aPaintBoxMorph	"Undo the operation after user issued #cancel in aPaintBoxMorph"	^self cancel! !!SketchEditorMorph methodsFor: 'palette handling' stamp: 'ar 3/23/2000 14:25'!clearPainting: aPaintBoxMorph	"Clear the image after user issued #clear in aPaintBoxMorph"	^self clear! !!SketchEditorMorph methodsFor: 'palette handling' stamp: 'ar 3/23/2000 14:37'!paletteAttached: aPaintBoxMorph	"A new palette has been attached to the receiver.	Don't know what to do here..."! !!SketchEditorMorph methodsFor: 'palette handling' stamp: 'ar 3/23/2000 14:33'!paletteDetached: aPaintBoxMorph	"The palette has been detached to the receiver.	Don't know what to do here...."! !!SketchEditorMorph methodsFor: 'palette handling' stamp: 'ar 3/23/2000 14:37'!savePainting: aPaintBoxMorph	"Save the image after user issued #keep in aPaintBoxMorph"	^self save! !!SketchEditorMorph methodsFor: 'palette handling' stamp: 'ar 3/23/2000 14:24'!undoPainting: aPaintBoxMorph	"Undo the operation after user issued #undo in aPaintBoxMorph"	^self undo! !