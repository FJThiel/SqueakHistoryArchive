'From Squeak2.8alpha of 13 January 2000 [latest update: #1817] on 6 February 2000 at 2:35:31 pm'!!ClassCategoryReader methodsFor: 'fileIn/Out' stamp: 'tk 1/27/2000 23:24'!scanFromNoCompile: aStream 	"Just move the source code for the methods from aStream."	| methodText selector |	[methodText _ aStream nextChunkText.	 methodText size > 0]		whileTrue:		[(SourceFiles at: 2) ifNotNil: [			selector _ class parserClass new parseSelector: methodText.			(class compiledMethodAt: selector) putSource: methodText 				fromParseNode: nil class: class category: category				withStamp: changeStamp inFile: 2 priorMethod: nil]]! !!ClassCommentReader methodsFor: 'as yet unclassified' stamp: 'tk 1/27/2000 22:56'!scanFromNoCompile: aStream 	"File in the class comment from aStream.  Not string-i-fied, just a text, exactly as it is in the browser.  Move to changes file."	self scanFrom: aStream.	"for comments, the same as usual"! !!ImageSegment methodsFor: 'read/write segment' stamp: 'tk 1/29/2000 15:11'!copyFromRootsForExport: rootArray 	"Add to roots:  Any methods pointed to from the outside by blocks."	| newRoots list segSize symbolHolder |	arrayOfRoots _ rootArray.	Smalltalk forgetDoIts.  	symbolHolder _ Symbol allInstances.	"Hold onto Symbols with strong pointers, 		so they will be in outPointers"	(newRoots _ self rootsIncludingPlayers) ifNotNil: [		arrayOfRoots _ newRoots].		"world, presenter, and all Player classes"	"Creation of the segment happens here"	Smalltalk garbageCollect.	"get contexts with Players"	self copyFromRoots: arrayOfRoots sizeHint: 0.	segSize _ segment size.	[(newRoots _ self rootsIncludingBlockMethods) == nil] whileFalse: [		arrayOfRoots _ newRoots.		self copyFromRoots: arrayOfRoots sizeHint: segSize].	"with methods pointed at from outside"	[(newRoots _ self rootsIncludingBlocks) == nil] whileFalse: [		arrayOfRoots _ newRoots.		self copyFromRoots: arrayOfRoots sizeHint: segSize].	"with methods, blocks from outPointers"	list _ self compactClassesArray.	outPointers _ outPointers, (list select: [:cls | cls ~~ nil]),		(Array with: 1717 with: list).	"Zap sender of a homeContext. Can't send live stacks out."	1 to: outPointers size do: [:ii | 		(outPointers at: ii) class == BlockContext ifTrue: [outPointers at: ii put: nil].		(outPointers at: ii) class == MethodContext ifTrue: [outPointers at: ii put: nil]].	symbolHolder.! !!ImageSegment methodsFor: 'read/write segment' stamp: 'tk 2/6/2000 14:35'!writeForExportWithSources: shortName	"Write the segment on the disk with all info needed to reconstruct it in a new image.  For export.  Out pointers are encoded as normal objects on the disk.  Append the source code of any classes in roots.  Target system will quickly transfer the sources to its changes file."	| fileStream temp fName classes |	state = #activeCopy ifFalse: [self error: 'wrong state'].	temp _ endMarker.	endMarker _ nil.	(shortName endsWith: '.extSeg')		ifTrue: [fName _ shortName]		ifFalse: [fName _ shortName , '.extSeg'].	fileStream _ FileStream newFileNamed: fName.	fileStream fileOutClass: nil andObject: self.		"remember extra structures.  Note class names."	endMarker _ temp.	"append sources"	classes _ arrayOfRoots select: [:cls | 		(cls isKindOf: Behavior) and: [cls theNonMetaClass isSystemDefined]].	classes size = 0 ifTrue: [^ self].	fileStream reopen; setToEnd.	fileStream nextPutAll: '\\!!ImageSegment new!!\\' withCRs.	classes do: [:cls | 		cls isMeta ifFalse: [fileStream nextPutAll: 						(cls name, ' category: ''', cls category, '''.!!'); cr; cr].		cls organization			putCommentOnFile: fileStream			numbered: 0			moveSource: false			forClass: cls.	"does nothing if metaclass"		cls organization categories do: 			[:heading |			cls fileOutCategory: heading				on: fileStream				moveSource: false				toFile: 0]].	"no class initialization -- it came in as a real object"	fileStream close.! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'tk 1/28/2000 23:18'!scanFrom: aStream	"Move source code from a fileIn to the changes file for classes in an ImageSegment.  Do not compile the methods.  They already came in via the image segment.  After the ImageSegment in the file, !!ImageSegment new!! captures control, and scanFrom: is called."	| val chunk |	[aStream atEnd] whileFalse: 		[aStream skipSeparators.		val _ (aStream peekFor: $!!)			ifTrue: ["Move (aStream nextChunk), find the method or class 						comment, and install the file location bytes"					(Compiler evaluate: aStream nextChunk logged: false)						scanFromNoCompile: aStream]			ifFalse: [chunk _ aStream nextChunk.					aStream checkForPreamble: chunk.					Compiler evaluate: chunk logged: true].		aStream skipStyleChunk].	"regular fileIn will close the file"	^ val! !!ImageSegment methodsFor: 'compact classes' stamp: 'tk 1/26/2000 20:57'!compactClassesArray	| ccIndexes ind ccArray hdrBits |	"A copy of the real compactClassesArray, but with only the classes actually used in the segment.  Slow, but OK for export."	ccIndexes _ Set new.	ind _ 2. 	"skip version word, first object"	"go past extra header words"	(hdrBits _ (segment atPin: ind) bitAnd: 3) = 1 ifTrue: [ind _ ind+1].	hdrBits = 0 ifTrue: [ind _ ind+3].	[ccIndexes add: (self compactIndexAt: ind).	"0 if has class field"	 ind _ self objectAfter: ind.	 ind > segment size] whileFalse.	ccArray _ Smalltalk compactClassesArray clone.	1 to: ccArray size do: [:ii | "only the ones we use"		(ccIndexes includes: ii) ifFalse: [ccArray at: ii put: nil]].	^ ccArray! !!PasteUpMorph methodsFor: 'initialization' stamp: 'tk 2/3/2000 21:38'!releaseCachedState	super releaseCachedState.	turtleTrailsForm ifNotNil: [turtleTrailsForm hibernate].! !!Project methodsFor: 'file in/out' stamp: 'tk 1/30/2000 20:04'!exportSegment	"Store my project out on the disk as an *exported* ImageSegment.  Put all outPointers in a form that can be resolved in the target image.  Name it <project name>.extSeg.	Player classes are included automatically."	^ self exportSegmentWithCatagories: #() classes: #()! !!Project methodsFor: 'file in/out' stamp: 'tk 2/3/2000 21:41'!exportSegmentWithCatagories: catList classes: classList	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."| is response str ans revertSeg roots |world == World ifTrue: [^ false]. 	"self inform: 'Can''t send the current world out'."world isMorph ifFalse: [	self projectParameters at: #isMVC put: true.	^ false].	"Only Morphic projects for now"world ifNil: [^ false].  world presenter ifNil: [^ false].Utilities emptyScrapsBook.World currentHand objectToPaste ifNotNil: [	response _ (PopUpMenu labels: 'Delete\Keep' withCRs)		startUpWithCaption: 'Hand is holding a Morph in its paste buffer:\' withCRs,			World currentHand objectToPaste printString.	response = 1 ifTrue: [World currentHand clearPasteBuffer]].world fullReleaseCachedState. "Just export me, not my previous version"revertSeg _ self projectParameters at: #revertToMe ifAbsent: [nil].self projectParameters removeKey: #revertToMe ifAbsent: [].roots _ (Array with: self) asOrderedCollection, classList, (classList collect: [:cls | cls class]).catList do: [:sysCat | 	(SystemOrganization listAtCategoryNamed: sysCat asSymbol) do: [:symb |		roots add: (Smalltalk at: symb); add: (Smalltalk at: symb) class]].is _ ImageSegment new copyFromRootsForExport: roots asArray.	"world, and all Players"is state = #tooBig ifTrue: [^ false].str _ ''.is segment size < 3000 ifTrue: [	str _ 'Segment is only ', is segment size printString, ' long.'].(is outPointers detect: [:out | out isMorph] ifNone: [nil]) ifNotNil: [	str _ str, '\Morphs are pointed at from the outside.' withCRs].(is outPointers includes: world) ifTrue: [	str _ str, '\Project''s own world is not in the segment.' withCRs].str isEmpty ifFalse: [	ans _ (PopUpMenu labels: 'Do not write fileWrite file anyway') startUpWithCaption: str.	ans = 1 ifTrue: [		revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].		^ false]].is writeForExportWithSources: self name.revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].^ true! !