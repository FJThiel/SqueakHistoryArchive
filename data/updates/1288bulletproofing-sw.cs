'From Squeak 2.4c of May 10, 1999 on 29 June 1999 at 3:01:51 pm'!"Change Set:		bulletproofing-swDate:			29 June 1999Author:			Scott WallaceProvides a mechanism for masking off all the programmers' facilities from a user who finds himself in morphic project, including:* halos* haloless morphic drag (cmd-drag, cmd-shift drag)* morph meta-menu (ctrl key)* world meta-menu (click on desktop)* cmd-dot* no-sources & no-changes warning* evaluation of expressions from keyboard* command characters in textIntended to provide a one-touch way that an end-user application (e.g. a web experience) can be configured to be bulletproofed against breaking and entering, and against unusual surprises such as the appearance of halos.For complete instructions, refer to the comment in the Preferences class method #disableProgrammerFacilities"!!HandMorph methodsFor: 'special gestures' stamp: 'sw 6/28/1999 16:17'!specialGesture: evt	"Special gestures (cmd-mouse on the Macintosh) allow a mouse-sensitive morph to be moved or bring up a halo for the morph."	"Summary:		Cmd-click			pop up halo		Cmd-drag			reposition morph"	Preferences cmdGesturesEnabled ifFalse: [^ self].	self newMouseFocus: nil.	"if carrying morphs, just drop them"	self hasSubmorphs ifTrue: [^ self dropMorphsEvent: evt].	targetOffset _ menuTargetOffset _ self position.	argument _ self argumentOrNil.	evt shiftPressed		ifTrue: [argument ifNotNil: [self grabMorph]]		ifFalse: [self popUpHaloFromClick: evt].! !!ParagraphEditor methodsFor: 'typing support' stamp: 'sw 6/28/1999 20:37'!dispatchOnCharacter: char with: typeAheadStream	"Carry out the action associated with this character, if any.	Type-ahead is passed so some routines can flush or use it."	| honorCommandKeys |	((honorCommandKeys _ Preferences cmdKeysInText) and: [char = Character enter])		ifTrue: [^ self dispatchOnEnterWith: typeAheadStream].	"backspace, and escape keys (ascii 8 and 27) are command keys"	((honorCommandKeys and: [sensor commandKeyPressed]) or: [self class specialShiftCmdKeys includes: char asciiValue]) ifTrue:		[^ sensor leftShiftDown			ifTrue:				[self perform: (ShiftCmdActions at: char asciiValue + 1) with: typeAheadStream]			ifFalse:				[self perform: (CmdActions at: char asciiValue + 1) with: typeAheadStream]].	"the control key can be used to invoke shift-cmd shortcuts"	(honorCommandKeys and: [sensor controlKeyPressed])		ifTrue:			[^ self perform: (ShiftCmdActions at: char asciiValue + 1) with: typeAheadStream].	^ self perform: #normalCharacter: with: typeAheadStream! !!Preferences class methodsFor: 'personalization' stamp: 'sw 6/29/1999 13:53'!disableProgrammerFacilities	"Warning: do not call this lightly!!  It disables all access to menus, debuggers, halos.  There is no guaranteed return from this, which is to say, you cannot necessarily reenable these things once they are disabled -- you can only use whatever the UI of the current project affords, and you cannot even snapshot -- you can only quit.      You can completely reverse the work of this method by calling the dual Preferences method enableProgrammerFacilities, provided you have left yourself leeway to bring about a call to that method.	To set up a system that will come up in such a state, you have to request the snapshot in the same breath as you disable the programmer facilities.  To do this, put the following line into the 'do' menu and then evaluate it from that 'do' menu:         Preferences disableProgrammerFacilities.You will be prompted for a new image name under which to save the resulting image."	self beep.	(self confirm: 'CAUTION!!!!This is a drastic step!!Do you really want to do this?')		ifFalse:			[self beep.  ^ self inform: 'whew!!'].	self disable: #cmdDotEnabled.       "No user-interrupt-into-debugger"	self compileHardCodedPref: #cmdGesturesEnabled enable: false.  "No halos, etc."	self compileHardCodedPref: #cmdKeysInText enable: false.    "No user commands invokable via cmd-key combos in text editor"	self enable: #noviceMode.           "No control-menu"	self disable: #warnIfNoSourcesFile.	self disable: #warnIfNoChangesFile.	Smalltalk saveAs! !!Preferences class methodsFor: 'personalization' stamp: 'sw 6/29/1999 13:55'!enableProgrammerFacilities	"Meant as a one-touch recovery from a #disableProgrammerFacilities call."	"Preferences enableProgrammerFacilities"	self enable: #cmdDotEnabled.	self compileHardCodedPref: #cmdGesturesEnabled enable: true. 	self compileHardCodedPref: #cmdKeysInText enable: true.	self disable: #noviceMode.	self enable: #warnIfNoSourcesFile.	self enable: #warnIfNoChangesFile.! !"Postscript:"Preferences compileHardCodedPref: #cmdGesturesEnabled enable: true. Preferences compileHardCodedPref: #cmdKeysInText enable: true.!