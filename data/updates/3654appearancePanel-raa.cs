'From Squeak3.1alpha of 5 February 2001 [latest update: #3654] on 19 February 2001 at 3:31:30 pm'!"Change Set:		appearancePanelDate:			19 February 2001Author:			Bob ArningFirst stages of a property sheet to allow changing various visual properties of a morph from one convenient place. There are a number of shortcomings at the moment, but you may have fun playing with it. Available from the red halo menu."!AlignmentMorphBob1 subclass: #ObjectPropertiesMorph	instanceVariableNames: 'targetMorph revertSteps '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!!Morph methodsFor: 'menus' stamp: 'RAA 2/19/2001 15:13'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables aPlayer |	aMenu addLine.	self maybeAddCollapseItemTo: aMenu.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer:.	aMenu addLine.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	(aPlayer _ self topRendererOrSelf player) ifNotNil:		[aMenu addLine.		aMenu add: 'make a sibling instance' target: self action: #makeNewPlayerInstance:.		aMenu balloonTextForLastItem: 'Makes another morph whose player is of the same class as this one.  Both siblings will share the same scripts'.		aMenu add: 'make multiple siblings...' target: self action: #makeMultipleSiblings:.		aMenu balloonTextForLastItem: 'Make any number of sibling instances all at once'.		(aPlayer belongsToUniClass and: [aPlayer class instanceCount > 1]) ifTrue:			[aMenu add: 'make all siblings look like me' target: self action: #makeSiblingsLookLikeMe:.			aMenu balloonTextForLastItem: 'make all my sibling instances look like me.'.			aMenu add: 'bring all siblings to my location' target: self action: #bringAllSiblingsToMe:.			aMenu balloonTextForLastItem: 'find all sibling instances and bring them to me'.			aMenu add: 'apply status to all siblngs' target: self action: #applyStatusToAllSiblings:.			aMenu balloonTextForLastItem: 'apply the current status of all of my scripts to the scripts of all my siblings']].	aMenu addLine.	aMenu add: 'open a property sheet' target: self action: #openAPropertySheet.	aMenu balloonTextForLastItem: 'Open a property sheet for me. Allows changing lots of stuff at once.'.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	self addDropShadowMenuItems: aMenu hand: aHandMorph.	self addLayoutMenuItems: aMenu hand: aHandMorph.	aMenu addUpdating: #hasClipSubmorphsString target: self selector: #changeClipSubmorphs argumentList: #().	aMenu addLine.	self potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' target: self action: #embedInto:].	aMenu defaultTarget: self.	aMenu addUpdating: #lockedString action: #lockUnlockMorph.	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu		defaultTarget: self;		add: 'add mouse up action' action: #addMouseUpAction;		add: 'remove mouse up action' action: #removeMouseUpAction.	aMenu addLine.	(owner notNil and: [owner isStackBackground]) ifTrue:		[self isShared			ifFalse:				[aMenu add: 'put onto Background' target: self action: #putOnBackground]			ifTrue:				[aMenu add: 'remove from Background' target: self action: #putOnForeground.				self couldHoldSeparateDataForEachInstance ifTrue:					[self holdsSeparateDataForEachInstance						ifFalse:							[aMenu add: 'start holding separate data for each instance' target: self action: #makeHoldSeparateDataForEachInstance]						ifTrue:							[aMenu add: 'stop holding separate data for each instance' target: self action: #stopHoldingSeparateDataForEachInstance].							aMenu add: 'be default value on new card' target: self action: #setAsDefaultValueForNewCard.							(self hasProperty: #thumbnailImage)								ifTrue:									[aMenu add: 'stop using for reference thumbnail' target: self action: #stopUsingForReferenceThumbnail]								ifFalse:									[aMenu add: 'start using for reference thumbnail' target: self action: #startUsingForReferenceThumbnail]]].				aMenu addLine].	aMenu defaultTarget: self topRendererOrSelf.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	(owner == nil) ifFalse:		[aMenu add: 'send to back' action: #goBehind.		aMenu add: 'bring to front' action: #comeToFront].	aMenu defaultTarget: aHandMorph.! !!Morph methodsFor: 'meta-actions' stamp: 'RAA 2/19/2001 15:14'!openAPropertySheet	ObjectPropertiesMorph basicNew		targetMorph: self;		initialize;		openInWorld! !!ColorPickerMorph methodsFor: 'initialization' stamp: 'RAA 2/19/2001 13:18'!initializeForPropertiesPanel	"Initialize the receiver.  If beModal is true, it will be a modal color picker, else not"	isModal _ false.	self removeAllMorphs.	self setProperty: #noDraggingThisPicker toValue: true.	self addMorph: ((Morph newBounds: (RevertBox translateBy: self topLeft))			color: Color transparent; setCenteredBalloonText: 'restore original color').	self addMorph: ((Morph newBounds: (FeedbackBox translateBy: self topLeft))			color: Color transparent; setCenteredBalloonText: 'shows selected color').	self addMorph: ((Morph newBounds: (TransparentBox translateBy: self topLeft))			color: Color transparent; setCenteredBalloonText: 'adjust translucency').	self buildChartForm.		selectedColor ifNil: [selectedColor _ Color white].	sourceHand _ nil.	deleteOnMouseUp _ false.	updateContinuously _ true.! !!ColorPickerMorph methodsFor: 'event handling' stamp: 'RAA 2/19/2001 13:16'!inhibitDragging	^self hasProperty: #noDraggingThisPicker! !!ColorPickerMorph methodsFor: 'event handling' stamp: 'RAA 2/19/2001 13:17'!mouseDown: evt	| localPt |	localPt _ evt cursorPoint - self topLeft.	self deleteAllBalloons.	clickedTranslucency _ TransparentBox containsPoint: localPt.	self inhibitDragging ifFalse: [		(DragBox containsPoint: localPt)			ifTrue: [^ evt hand grabMorph: self].	].	(RevertBox containsPoint: localPt)		ifTrue: [^ self updateColor: originalColor feedbackColor: originalColor].	self inhibitDragging ifFalse: [self comeToFront].	sourceHand _ evt hand.	self startStepping.! !!ColorPickerMorph methodsFor: 'menu' stamp: 'RAA 2/19/2001 13:17'!pickUpColorFor: aMorph	"Show the eyedropper cursor, and modally track the mouse through a mouse-down and mouse-up cycle"      | aHand localPt |	aHand _ aMorph ifNil: [self activeHand] ifNotNil: [aMorph activeHand].	aHand ifNil: [aHand _ self currentHand].	self addToWorld: aHand world near: (aMorph ifNil: [aHand world]) fullBounds.	self owner ifNil: [^ self].	aHand showTemporaryCursor: (ScriptingSystem formAtKey: #Eyedropper) 			hotSpotOffset: 6 negated @ 4 negated.    "<<<< the form was changed a bit??"	self updateContinuously: false.	[Sensor anyButtonPressed]		whileFalse: 			 [self trackColorUnderMouse].	self deleteAllBalloons.	self inhibitDragging ifFalse: [		(DragBox containsPoint: (localPt _ Sensor cursorPoint - self topLeft)) ifTrue:			["Click or drag the drag-dot means to anchor as a modeless picker"			^ self anchorAndRunModeless: aHand].	].	(clickedTranslucency _ TransparentBox containsPoint: localPt)		ifTrue: [selectedColor _ originalColor].	self updateContinuously: true.	[Sensor anyButtonPressed]		whileTrue:			 [self updateTargetColorWith: self indicateColorUnderMouse].	aHand newMouseFocus: nil;		showTemporaryCursor: nil;		flushEvents.	self delete.		  ! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 13:20'!buttonNamed: aString action: aSymbol color: aColor help: helpString	| f col |	f _ SimpleButtonMorph new		target: self;		label: aString;		color: aColor;		actionSelector: aSymbol;		setBalloonText: helpString.	col _ (self inAColumn: {f}) hResizing: #shrinkWrap.	^col! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:46'!colorPickerFor: target getter: getterSymbol setter: setterSymbol	^ColorPickerMorph new		initializeForPropertiesPanel;		target: target;		selector: setterSymbol;		originalColor: (target perform: getterSymbol)! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 12:58'!directToggleButtonFor: target getter: getterSymbol setter: setterSymbol help: helpText	^(EtoyUpdatingThreePhaseButtonMorph checkBox)		target: target;		actionSelector: setterSymbol;		arguments: #();		getSelector: getterSymbol;		setBalloonText: helpText;		step! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 13:23'!doAccept	self delete! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 15:21'!doCancel	revertSteps keysAndValuesDo: [ :k :v |		targetMorph perform: k with: v	].	self delete! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:48'!doEnables	| itsName |	self allMorphsDo: [ :each |		itsName _ each knownName.		itsName == #pickerForColor ifTrue: [			self enable: each when: targetMorph fillStyle isSolidFill		].		itsName == #pickerForBorderColor ifTrue: [			self enable: each when: (targetMorph respondsTo: #borderColor:)		].		itsName == #pickerForShadowColor ifTrue: [			self enable: each when: targetMorph hasDropShadow		].		itsName == #pickerFor1stGradientColor ifTrue: [			self enable: each when: targetMorph fillStyle isGradientFill		].		itsName == #pickerFor2ndGradientColor ifTrue: [			self enable: each when: targetMorph fillStyle isGradientFill		].	].! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:05'!enable: aMorph when: aBoolean	aBoolean ifTrue: [		aMorph visible: aBoolean.		^self	].	aMorph visible: aBoolean.! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 13:39'!inAColumn: anArray named: aString	^(self inAColumn: anArray) setNamePropertyTo: aString! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 15:21'!initialize	super initialize.	targetMorph ifNil: [targetMorph _ RectangleMorph new openInWorld].	self borderWidth: 4.	self layoutInset: 4.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self color:  (Color r: 0.548 g: 0.839 b: 0.452).	self borderColor: self color darker.	revertSteps _ Dictionary new.	revertSteps at: #fillStyle: put: targetMorph fillStyle.	revertSteps at: #hasDropShadow: put: targetMorph hasDropShadow.	self rebuild.! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:28'!lockedString: s	^(StringMorph contents: s) lock.! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 15:01'!makeTargetGradientFill	targetMorph useGradientFill! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 15:01'!makeTargetSolidFill	targetMorph useSolidFill! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 15:05'!rebuild	self removeAllMorphs.	self addARow: {		self inAColumn: {			self inARow: {				self					directToggleButtonFor: targetMorph 					getter: #hasDropShadow setter: #toggleDropShadow					help: 'xxxx'.				self lockedString: ' Drop shadow'.			}.			self inARow: {				self					directToggleButtonFor: targetMorph 					getter: #wantsRoundedCorners setter: #toggleCornerRounding					help: 'xxxx'.				self lockedString: ' Rounded corners'.			}.		}.		self 			buttonNamed: 'Solid' action: #makeTargetSolidFill color: color lighter 			help: 'use a solid fill'.		self 			buttonNamed: 'Gradient' action: #makeTargetGradientFill color: color lighter 			help: 'use a gradient fill'.	}.	self addARow: {		self inAColumn: {			self colorPickerFor: targetMorph getter: #color setter: #color:.			self lockedString: 'Color'.		} named: #pickerForColor.		self inAColumn: {			self colorPickerFor: targetMorph getter: #borderColor setter: #borderColor:.			self lockedString: 'Border Color'.		} named: #pickerForBorderColor.	}.	self addARow: {		self inAColumn: {			self colorPickerFor: targetMorph getter: #shadowColor setter: #shadowColor:.			self lockedString: 'Shadow Color'.		} named: #pickerForShadowColor.	}.	self addARow: {		self inAColumn: {			self colorPickerFor: self getter: #tgt1stGradientColor setter: #tgt1stGradientColor:.			self lockedString: '1st gradient color'.		} named: #pickerFor1stGradientColor.		self inAColumn: {			self colorPickerFor: self getter: #tgt2ndGradientColor setter: #tgt2ndGradientColor:.			self lockedString: '2nd gradient color'.		} named: #pickerFor2ndGradientColor.	}.	self addARow: {		self 			buttonNamed: 'Accept' action: #doAccept color: color lighter 			help: 'keep changes made and close panel'.		self 			buttonNamed: 'Cancel' action: #doCancel color: color lighter 			help: 'cancel changes made and close panel'.	}. 	"menu add: 'shadow offset...' target: self selector: #setShadowOffset:."! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 13:35'!step	self doEnables! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:27'!stepTime	^500! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 15:10'!targetMorph: x	targetMorph _ x! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:44'!tgt1stGradientColor	targetMorph fillStyle isGradientFill ifFalse: [^Color black].	^targetMorph fillStyle colorRamp first value! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:40'!tgt1stGradientColor: aColor	targetMorph fillStyle firstColor: aColor forMorph: targetMorph hand: nil! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:44'!tgt2ndGradientColor	targetMorph fillStyle isGradientFill ifFalse: [^Color black].	^targetMorph fillStyle colorRamp last value! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:41'!tgt2ndGradientColor: aColor	targetMorph fillStyle lastColor: aColor forMorph: targetMorph hand: nil! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 14:39'!xxx"firstColor: aColor forMorph: aMorph hand: aHand	colorRamp first value: aColor.	pixelRamp _ nil.	aMorph changed."! !ObjectPropertiesMorph removeSelector: #activeSubmenu:!ObjectPropertiesMorph removeSelector: #addUpdating:target:selector:argumentList:!ObjectPropertiesMorph removeSelector: #selectItem:event:!ObjectPropertiesMorph removeSelector: #stayUp!ObjectPropertiesMorph removeSelector: #toggleDropShadow!