'From Squeak3.6beta of ''4 July 2003'' [latest update: #5331] on 23 July 2003 at 5:06:43 pm'!"Change Set:		networkFixesDate:			23 July 2003Author:			Michael Rueger, Luciano NotarfrancescoFixes some problems in the network rewrite:- SocketStream next: used size instead of position (fixed by Luciano)- FTPClient timed out on waiting for a responseThis is a rather interesting bug which occurs when the ""transfer completed"" is received on the control socket before the data is actually received completely on the data socket.- Socket dataAvailable may be true without actual bytes available. SocketStream now handles this correctly by trying to read possibly available data."!Object subclass: #ProtocolClient	instanceVariableNames: 'stream connectInfo lastResponse progressObservers pendingResponses '	classVariableNames: ''	poolDictionaries: ''	category: 'Network-Protocols'!!ProtocolClient methodsFor: 'private' stamp: 'mir 7/23/2003 16:45'!pendingResponses	pendingResponses ifNil: [pendingResponses := OrderedCollection new].	^pendingResponses! !!ProtocolClient methodsFor: 'private' stamp: 'mir 7/23/2003 16:55'!popResponse	| pendingResponse |	pendingResponse := self pendingResponses removeFirst.	pendingResponses isEmpty		ifTrue: [pendingResponses := nil].	^pendingResponse! !!ProtocolClient methodsFor: 'private' stamp: 'mir 7/23/2003 16:45'!pushResponse: aResponse	self pendingResponses add: aResponse! !!ProtocolClient methodsFor: 'private protocol' stamp: 'mir 7/23/2003 16:52'!checkForPendingError	"If data is waiting, check it to catch any error reports.	In case the response is not an error, push it back."	self stream isDataAvailable		ifFalse: [^self].	self fetchNextResponse.	self		checkResponse: self lastResponse		onError: [:response | (TelnetProtocolError protocolInstance: self) signal]		onWarning: [:response | (TelnetProtocolError protocolInstance: self) signal].	"if we get here, it wasn't an error"	self pushResponse: self lastResponse! !!ProtocolClient methodsFor: 'private protocol' stamp: 'mir 7/23/2003 16:51'!checkResponse: aResponse onError: errorBlock onWarning: warningBlock	"Get the response from the server and check for errors. Invoke one of the blocks if an error or warning is encountered. See class comment for classification of error codes."	self responseIsError		ifTrue: [errorBlock value: aResponse].	self responseIsWarning		ifTrue: [warningBlock value: aResponse].! !!ProtocolClient methodsFor: 'private protocol' stamp: 'mir 7/23/2003 16:54'!checkResponseOnError: errorBlock onWarning: warningBlock	"Get the response from the server and check for errors. Invoke one of the blocks if an error or warning is encountered. See class comment for classification of error codes."	self fetchPendingResponse.	self checkResponse: self lastResponse onError: errorBlock onWarning: warningBlock! !!ProtocolClient methodsFor: 'private protocol' stamp: 'mir 7/23/2003 16:50'!fetchPendingResponse	^pendingResponses		ifNil: [self fetchNextResponse; lastResponse]		ifNotNil: [self popResponse]! !!SocketStream methodsFor: 'stream in' stamp: 'len 7/19/2003 18:19'!next: anInteger	"Answer anInteger bytes of data."	[self inStream size - self inStream position < anInteger]		whileTrue: [self receiveData].	^self inStream next: anInteger! !!SocketStream methodsFor: 'testing' stamp: 'mir 7/23/2003 16:33'!isDataAvailable	self inStream atEnd		ifFalse: [^true].	self socket dataAvailable		ifTrue: [self receiveDataIfAvailable].	^self socket dataAvailable! !!SocketStream methodsFor: 'private' stamp: 'mir 7/23/2003 16:58'!receiveDataIfAvailable	"Only used to check if after dataAvailable on the socket is true that there really are data.	See also isDataAvailable"	| buffer bytesRead |	buffer _ String new: 1.	bytesRead :=self socket receiveSomeDataInto: buffer.	bytesRead > 0		ifTrue: [			inStream := ReadStream on: (self inStream upToEnd , (buffer copyFrom: 1 to: bytesRead))]! !Object subclass: #ProtocolClient	instanceVariableNames: 'stream connectInfo lastResponse pendingResponses progressObservers '	classVariableNames: ''	poolDictionaries: ''	category: 'Network-Protocols'!