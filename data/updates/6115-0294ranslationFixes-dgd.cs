'From Small-Land 3.8-5976-0266 of 1 September 2004 [latest update: #5976] on 2 September 2004 at 7:28:44 pm'!"Change Set:		TranslationFixes-dgdDate:			27 August 2004Author:			Diego Gomez DeckAssorted fixes related to translations: remove of double translations, make more part translatable, etc."!!AbstractString methodsFor: 'translating' stamp: 'dgd 8/27/2004 18:43'!translatedIfCorresponds	"answer the receiver translated to the default language only if 	the receiver begins and ends with an underscore (_)"	^ ('_*_' match: self)		ifTrue: [(self copyFrom: 2 to: self size - 1) translated]		ifFalse: [self]! !!AlignmentMorphBob1 methodsFor: 'as yet unclassified' stamp: 'dgd 8/27/2004 18:26'!fancyText: aString ofSize: pointSize color: aColor	| answer tm |	answer _ self inAColumn: {		tm _ TextMorph new 			beAllFont: ((TextStyle default fontOfSize: pointSize) emphasized: 1);			color: aColor;			contents: aString	}.	tm addDropShadow.	tm shadowPoint: (5@5) + tm bounds center.	tm lock.	^answer! !!FileDirectoryWrapper methodsFor: 'as yet unclassified' stamp: 'dgd 8/27/2004 18:45'!asString	 ^itemName translatedIfCorresponds! !!FileList2 methodsFor: 'user interface' stamp: 'dgd 8/27/2004 18:31'!blueButtonForService: aService textColor: textColor inWindow: window	| block |	block _ [ aService performServiceFor: self ] copy fixTemps.	^(window fancyText: aService buttonLabel capitalized translated ofSize: 15 color: textColor)		setProperty: #buttonText toValue: aService buttonLabel capitalized;		hResizing: #rigid;		extent: 100@20;		layoutInset: 4;		borderWidth: 0;		useRoundedCorners;		setBalloonText: aService label;		on: #mouseUp send: #value to: block ! !!FileList2 class methodsFor: 'blue ui' stamp: 'dgd 8/27/2004 18:32'!blueButtonText: aString textColor: textColor inWindow: window	^(window fancyText: aString translated ofSize: 15 color: textColor)		setProperty: #buttonText toValue: aString;		hResizing: #rigid;		extent: 100@20;		layoutInset: 4;		borderWidth: 0;		useRoundedCorners! !!FileList2 class methodsFor: 'blue ui' stamp: 'dgd 8/27/2004 18:32'!blueButtonText: aString textColor: textColor inWindow: window balloonText: balloonText selector: sel recipient: recip	^(window fancyText: aString translated ofSize: 15 color: textColor)		setProperty: #buttonText toValue: aString;		hResizing: #rigid;		extent: 100@20;		layoutInset: 4;		borderWidth: 0;		useRoundedCorners;		setBalloonText: balloonText;		on: #mouseUp send: sel to: recip! !!FileList2 class methodsFor: 'blue ui' stamp: 'dgd 8/27/2004 18:34'!morphicViewGeneralLoaderInWorld: aWorld"FileList2 morphicViewGeneralLoaderInWorld: self currentWorld"	| window aFileList buttons treePane textColor1 fileListPane pane2a pane2b fileTypeInfo fileTypeButtons fileTypeRow actionRow |	fileTypeInfo _ self endingSpecs.	window _ AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	aFileList _ self new directory: FileDirectory default.	aFileList 		fileSelectionBlock: self projectOnlySelectionBlock;		modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: 4;		borderColor: (Color r: 0.355 g: 0.516 b: 1.0);		useRoundedCorners.	fileTypeButtons _ fileTypeInfo collect: [ :each |		(self blueButtonText: each first textColor: Color gray inWindow: window)			setProperty: #enabled toValue: true;			hResizing: #shrinkWrap	].	buttons _ #('OK' 'Cancel') collect: [ :each |		self blueButtonText: each textColor: textColor1 inWindow: window	].	treePane _ aFileList morphicDirectoryTreePane 		extent: 250@300; 		retractable: false;		borderWidth: 0.	fileListPane _ aFileList morphicFileListPane 		extent: 350@300; 		retractable: false;		borderWidth: 0.	window addARow: {window fancyText: 'Find...' translated ofSize: 21 color: textColor1}.	fileTypeRow _ window addARowCentered: fileTypeButtons.	actionRow _ window addARowCentered: {		buttons first. 		(Morph new extent: 30@5) color: Color transparent. 		buttons second	}.	window		addARow: {			(window inAColumn: {(pane2a _ window inARow: {window inAColumn: {treePane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.			(window inAColumn: {(pane2b _ window inARow: {window inAColumn: {fileListPane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.		}.	window fullBounds.	window fillWithRamp: self blueRamp1 oriented: 0.65.	pane2a fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	pane2b fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	fileTypeButtons do: [ :each | 		each 			on: #mouseUp 			send: #value:value: 			to: [ :evt :morph | 				self update: actionRow in: window fileTypeRow: fileTypeRow morphUp: morph.			] fixTemps	].	buttons first on: #mouseUp send: #okHit to: aFileList.	buttons second on: #mouseUp send: #cancelHit to: aFileList.	aFileList postOpen.	window position: aWorld topLeft + (aWorld extent - window extent // 2).	aFileList directoryChangeBlock: [ :newDir |		self enableTypeButtons: fileTypeButtons info: fileTypeInfo forDir: newDir	] fixTemps.	aFileList directory: aFileList directory.	window adoptPaneColor: (Color r: 0.548 g: 0.677 b: 1.0).	^ window openInWorld: aWorld.! !!FileList2 class methodsFor: 'blue ui' stamp: 'dgd 8/27/2004 18:33'!morphicViewProjectLoader2InWorld: aWorld reallyLoad: aBoolean dirFilterType: aSymbol	| window aFileList buttons treePane textColor1 fileListPane pane2a pane2b treeExtent filesExtent |	window _ AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	aFileList _ self new directory: FileDirectory default.	aFileList 		optionalButtonSpecs: aFileList servicesForProjectLoader;		fileSelectionBlock: (			aSymbol == #limitedSuperSwikiDirectoryList ifTrue: [				MessageSend receiver: self selector: #projectOnlySelectionMethod:			] ifFalse: [				self projectOnlySelectionBlock			]		);		"dirSelectionBlock: self hideSqueakletDirectoryBlock;"		modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: 4;		borderColor: (Color r: 0.355 g: 0.516 b: 1.0);		useRoundedCorners.	buttons _ #('OK' 'Cancel') collect: [ :each |		self blueButtonText: each textColor: textColor1 inWindow: window	].	aWorld width < 800 ifTrue: [		treeExtent _ 150@300.		filesExtent _ 350@300.	] ifFalse: [		treeExtent _ 250@300.		filesExtent _ 350@300.	].	(treePane _ aFileList morphicDirectoryTreePaneFiltered: aSymbol)		extent: treeExtent; 		retractable: false;		borderWidth: 0.	fileListPane _ aFileList morphicFileListPane 		extent: filesExtent; 		retractable: false;		borderWidth: 0.	window		addARow: {			window fancyText: 'Load A Project' translated ofSize: 21 color: textColor1		};		addARowCentered: {			buttons first. 			(Morph new extent: 30@5) color: Color transparent. 			buttons second		};		addARow: {			window fancyText: 'Please select a project' translated ofSize: 21 color: Color blue		};		addARow: {			(window inAColumn: {(pane2a _ window inARow: {window inAColumn: {treePane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.			(window inAColumn: {(pane2b _ window inARow: {window inAColumn: {fileListPane}}) 				useRoundedCorners; layoutInset: 6}) layoutInset: 10.		}.	window fullBounds.	window fillWithRamp: self blueRamp1 oriented: 0.65.	pane2a fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	pane2b fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	buttons first 		on: #mouseUp 		send: (aBoolean ifTrue: [#okHitForProjectLoader] ifFalse: [#okHit])		to: aFileList.	buttons second on: #mouseUp send: #cancelHit to: aFileList.	aFileList postOpen.	window position: aWorld topLeft + (aWorld extent - window extent // 2).	window adoptPaneColor: (Color r: 0.548 g: 0.677 b: 1.0).	^ window openInWorld: aWorld.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'dgd 8/27/2004 18:35'!doFindButtonMenuEvent: evt	| menu selection |	menu _ CustomMenu new.	menu 		add: 'find a project' translated action: [self findAProjectSimple];		add: 'find a project (more places)' translated action: [self findAProject];		add: 'find any file' translated action: [self findAnything];		add: 'search the SuperSwiki' translated action: [self findSomethingOnSuperSwiki].	selection _ menu build startUpCenteredWithCaption: 'Find options' translated.	selection ifNil: [^self].	selection value.! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'dgd 8/27/2004 18:43'!findSomethingOnSuperSwiki	| projectServers server index |	projectServers := ServerDirectory projectServers.	projectServers isEmpty		ifTrue: [^self].	projectServers size = 1		ifTrue: [server := projectServers first]		ifFalse: [index := (PopUpMenu labelArray: (projectServers collect: [:each | (ServerDirectory nameForServer: each) translatedIfCorresponds]) lines: #()) 				startUpWithCaption: 'Choose a super swiki:' translated.			index > 0				ifTrue: [server := projectServers at: index]				ifFalse: [^self]].	EToyProjectQueryMorph onServer: server! !!TheWorldMenu methodsFor: 'construction' stamp: 'dgd 8/27/2004 14:08'!helpMenu        "Build the help menu for the world."        |  menu |  	menu := self menu: 'help...'.        self fillIn: menu from:        {                {'about this system...'. {SmalltalkImage current. #aboutThisSystem}. 'current version information.'}.                {'update code from server'. {Utilities. #updateFromServer}. 'load latest code updates via the internet'}.                {'preferences...'. {Preferences. #openPreferencesInspector}. 'view and change various options.'}.			 {'set language...' . {Project. #chooseNaturalLanguage}. 'choose the language in which tiles should be displayed.'} .                nil.               {'command-key help'. { Utilities . #openCommandKeyHelp}. 'summary of keyboard shortcuts.'}	}.	self addGestureHelpItemsTo: menu.	self fillIn: menu from:	{                {'world menu help'. { self . #worldMenuHelp}. 'helps find menu items buried in submenus.'}.                        "{'info about flaps' . { Utilities . #explainFlaps}. 'describes how to enable and use flaps.'}."                {'font size summary' . { TextStyle . #fontSizeSummary}.  'summary of names and sizes of available fonts.'}.                {'useful expressions' . { Utilities . #openStandardWorkspace}. 'a window full of useful expressions.'}.			 {'annotation setup...' . { Preferences . #editAnnotations}. 'Click here to get a little window that will allow you to specify which types of annotations, in which order, you wish to see in the annotation panes of browsers and other tools'}.			nil.                {'graphical imports' . { Imports default . #viewImages}.  'view the global repository called ImageImports; you can easily import external graphics into ImageImports via the FileList'}.                {'standard graphics library' . { ScriptingSystem . #inspectFormDictionary}.  'lets you view and change the system''s standard library of graphics.'}.                nil.                {'telemorphic...' . {self. #remoteDo}.  'commands for doing multi-machine "telemorphic" experiments'}.                {#soundEnablingString . { Preferences . #toggleSoundEnabling}. 'turning sound off will completely disable Squeak''s use of sound.'}.                {'definition for...' . { Utilities . #lookUpDefinition}.  'if connected to the internet, use this to look up the definition of an English word.'}.                nil.                {'set author initials...' . { Utilities . #setAuthorInitials }. 'supply initials to be used to identify the author of code and other content.'}.                {'vm statistics' . { self . #vmStatistics}.  'obtain some intriguing data about the vm.'}.			  nil.			  {'purge undo records' . { CommandHistory . #resetAllHistory }. 'save space by removing all the undo information remembered in all projects.'}.                {'space left' . { self . #garbageCollect}. 'perform a full garbage-collection and report how many bytes of space remain in the image.'}.        }.	^menu! !