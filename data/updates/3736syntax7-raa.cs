'From Squeak3.1alpha of 5 February 2001 [latest update: #3746] on 27 February 2001 at 3:03:27 pm'!!SyntaxMorph methodsFor: 'menus' stamp: 'RAA 2/27/2001 14:14'!addToken: aString type: aColorOrSymbol on: aNode	| sMorph modifiedString noiseWord col |	self flag: #emphasis:.	"who needs it. who doesn't"	col _ (self addRow: aColorOrSymbol on: aNode) layoutInset: 1.	noiseWord _ [ :w |		w ifNotNil: [			col 				addMorphBack: (self noiseStringMorph: w);				addMorphBack: (self tokenVerticalSeparator)		].	].	sMorph _ self addString: (modifiedString _ aString).	self specialBlockFormatting ifTrue: [		(self shouldBeBrokenIntoWords: aColorOrSymbol) ifTrue: [			modifiedString _ self substituteKeywordFor: aString.			sMorph 				setProperty: #syntacticallyCorrectContents toValue: aString;				contents: modifiedString.		].		(#(keyword2 upArrow) includes: aColorOrSymbol) ifTrue: [			sMorph 				font: (self fontToUseForSpecialWord: modifiedString); 				color: (self colorForKeywords: aString and: modifiedString).		].		(#(keyword2 unary assignmentArrow) includes: aColorOrSymbol) ifTrue: [			sMorph emphasis: 1.		].		aColorOrSymbol == #binary ifTrue: [sMorph color: self colorForBinaries].	].	self alansTest1 ifTrue: [		aColorOrSymbol == #blockarg1 ifTrue: [		].		(aColorOrSymbol == #variable or: [aColorOrSymbol == #tempVariable]) ifTrue: [			aString = 'self' ifTrue: [				sMorph setProperty: #wordyVariantOfSelf toValue: true.			].			noiseWord value: (self noiseWordBeforeVariableNode: aNode string: aString).		].	].	col addMorphBack: sMorph.	^col! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/27/2001 14:22'!addTemporaries: temporaries	| tempMorph outerMorph w2 |	temporaries size > 0 ifFalse: [^self].	self alansTest1 ifFalse: [		tempMorph _ self addRow: #tempVariable on: (MethodTempsNode new).		temporaries 			do: [:temp | temp asMorphicSyntaxIn: tempMorph ]			separatedBy: [tempMorph addMorphBack: (tempMorph transparentSpacerOfSize: 4@4)].		^self	].	outerMorph _ self addRow: #tempVariable on: nil.	outerMorph setSpecialTempDeclarationFormat1.	outerMorph addMorphBack: (w2 _ self noiseStringMorph: ' Use ').	w2 emphasis: 1.	tempMorph _ outerMorph addRow: #tempVariable on: (MethodTempsNode new).	tempMorph setSpecialTempDeclarationFormat2.	temporaries 		do: [:temp | tempMorph addToken: temp name type: #tempVariableDeclaration on: temp]		separatedBy: [tempMorph addMorphBack: self tokenVerticalSeparator].! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/27/2001 14:55'!alanKeywordMessageCollect: aNode isAConditional: template key: key args: args	| nodeWithNilReceiver row kwdHolder |	nodeWithNilReceiver _ aNode copy receiver: nil.	(row _ self addRow: #keyword2 on: nodeWithNilReceiver)		borderWidth: 1;		parseNode: (nodeWithNilReceiver as: MessageNode);		borderColor: row stdBorderColor.	kwdHolder _ row		addToken: key		type: #keyword2		on: (SelectorNode new key: key code: nil "fill this in?").	kwdHolder firstSubmorph 		setProperty: #syntacticallyCorrectContents toValue: key asString;		contents: ''.	args first asMorphicCollectSyntaxIn: row.	"row setSpecialOuterTestFormat."			! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/27/2001 14:32'!alansMessageNode: aNode receiver: receiver selector: selector keywords: key arguments: args	| row receiverMorph testAndReceiver anotherSelf 		wordyMorph template |	template _ self alansTemplateStyleFor: key.	receiver ifNotNil: ["i.e. not a cascade"		anotherSelf _ self constructSelfVariant: receiver and: key.		anotherSelf ifNotNil: [			wordyMorph _ self addString: anotherSelf.			wordyMorph setProperty: #wordyVariantOfSelf toValue: true.			self addMorph: wordyMorph. 			self layoutInset: 1.			^self		].		testAndReceiver _ self.		template = 1 ifTrue: [			testAndReceiver _ self addRow: #keyword1 on: nil.			self setSpecialOuterTestFormat.			testAndReceiver addNoiseString: 'Test'		].		false "template = 2" ifTrue: [			testAndReceiver _ self addRow: #keyword1 on: nil.			"self setSpecialOuterTestFormat."			testAndReceiver addNoiseString: 'Repeat for'		].		receiverMorph _ receiver asMorphicSyntaxIn: testAndReceiver.		template = 1 ifTrue: [receiverMorph setConditionalPartStyle].	].	"unary mssages"	args size = 0 ifTrue: [		((receiverMorph notNil) and: [receiverMorph nodeClassIs: MessageNode]) ifTrue: [			self addMorphBack: self tokenVerticalSeparator		].		row _ (self addUnaryRow: key style: #unary) layoutInset: 1.		^ row parseNode: selector	].	"binary messages"	key last = $: ifFalse: [		^self alanBinaryPostRcvr: aNode key: key args: args	].	"keyword messages"	receiverMorph ifNotNil: [receiverMorph setConditionalPartStyle].	self setSpecialOuterTestFormat.	self		alanKeywordMessage: aNode 		isAConditional: template 		key: key 		args: args! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/27/2001 14:19'!assignmentNode: aNode variable: variable value: value	| row v expMorph |	row _ self addRow: #assignment on: aNode.	v _ variable asMorphicSyntaxIn: row.	self alansTest1 ifTrue: [v setConditionalPartStyle; layoutInset: 2].	row addToken: ' _ ' type: #assignmentArrow on: aNode.	expMorph _ value asMorphicSyntaxIn: row.	self alansTest1 ifTrue: [		row setSpecialOuterTestFormat.		(expMorph hasProperty: #deselectedColor) ifFalse: [expMorph setConditionalPartStyle].	].	^row! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/27/2001 14:23'!returnNode: aNode expression: expr	| row w2 expMorph |	row _ self addRow: #return on: aNode.	self alansTest1 ifTrue: [		row setSpecialOuterTestFormat.		row addMorphBack: (w2 _ self noiseStringMorph: ' Reply ').		w2 emphasis: 1.	] ifFalse: [		row addToken: '^ ' type: #upArrow on: aNode.	].	expMorph _ expr asMorphicSyntaxIn: row.	self alansTest1 ifTrue: [		(expMorph hasProperty: #deselectedColor) ifFalse: [expMorph setConditionalPartStyle].	].	expr addCommentToMorph: row.	^row! !!SyntaxTestMethods methodsFor: 'as yet unclassified' stamp: 'RAA 2/27/2001 14:17'!makeRandomString	| newString foo |	newString _ String new: Goal contents size.	foo _ Goal contents size.	^newString collect: [ :oldLetter | 'abcdefghijklmnopqrstuvwxyz' atRandom]! !