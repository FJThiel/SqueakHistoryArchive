'From Squeak3.6alpha of ''17 March 2003'' [latest update: #5269] on 20 June 2003 at 11:08:55 pm'!"Change Set:		KCP-0090-deprecateObsoleteMethodDate:			20 June 2003Author:			stephane ducasseDeprecate spaceTally method of SystemDictionary and create a cool class with a nice responsibility instead. Now people willing to build better space analysis can do it."!Object subclass: #SpaceTally	instanceVariableNames: 'results '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Debugger'!!SpaceTally commentStamp: 'sd 6/20/2003 22:31' prior: 0!I'm responsible to help getting information about system space usage. The information I compute is represented by a spaceTallyItemtry something like: ((SpaceTally new spaceTally: (Array with: TextMorph with: Point)) 	asSortedCollection: [:a :b | a spaceForInstances > b spaceForInstances]) SpaceTally new systemWideSpaceTallyThis class has been created from a part of SystemDictionary. It still deserves a niceclean, such as using object instead of array having 4 slots.sd-20 June 2003!Object subclass: #SpaceTallyItem	instanceVariableNames: 'analyzedClassName codeSize instanceCount spaceForInstances '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Debugger'!!SpaceTallyItem commentStamp: 'sd 6/20/2003 22:02' prior: 0!I'm represent an entry in the spaceTally.!!SpaceTally methodsFor: 'instance size' stamp: 'sd 6/20/2003 21:47'!spaceForInstancesOf: aClass	"Answer the number of bytes consumed by all instances of the given class, including their object headers."	| instCount isCompact instVarBytes bytesPerElement contentBytes headerBytes total |	instCount _ aClass instanceCount.	instCount = 0 ifTrue: [^ 0].	isCompact _ aClass indexIfCompact > 0.	instVarBytes _ aClass instSize * 4.	aClass isVariable		ifTrue: [			bytesPerElement _ aClass isBytes ifTrue: [1] ifFalse: [4].			total _ 0.			aClass allInstancesDo: [:inst |				contentBytes _ instVarBytes + (inst size * bytesPerElement).				headerBytes _					contentBytes > 255						ifTrue: [12]						ifFalse: [isCompact ifTrue: [4] ifFalse: [8]].				total _ total + headerBytes + contentBytes].			^ total]		ifFalse: [			headerBytes _				instVarBytes > 255					ifTrue: [12]					ifFalse: [isCompact ifTrue: [4] ifFalse: [8]].			^ instCount * (headerBytes + instVarBytes)].! !!SpaceTally methodsFor: 'fileOut' stamp: 'sd 6/20/2003 22:39'!compareTallyIn: beforeFileName to: afterFileName	"SpaceTally new compareTallyIn: 'tally' to: 'tally2'"	| answer s beforeDict a afterDict allKeys before after diff |	beforeDict _ Dictionary new.	s _ FileDirectory default fileNamed: beforeFileName.	[s atEnd] whileFalse: [		a _ Array readFrom: s nextLine.		beforeDict at: a first put: a allButFirst.	].	s close.	afterDict _ Dictionary new.	s _ FileDirectory default fileNamed: afterFileName.	[s atEnd] whileFalse: [		a _ Array readFrom: s nextLine.		afterDict at: a first put: a allButFirst.	].	s close.	answer _ WriteStream on: String new.	allKeys _ (Set new addAll: beforeDict keys; addAll: afterDict keys; yourself) asSortedCollection.	allKeys do: [ :each |		before _ beforeDict at: each ifAbsent: [#(0 0 0)].		after _ afterDict at: each ifAbsent: [#(0 0 0)].		diff _ before with: after collect: [ :vBefore :vAfter | vAfter - vBefore].		diff = #(0 0 0) ifFalse: [			answer nextPutAll: each,'  ',diff printString; cr.		].	].	StringHolder new contents: answer contents; openLabel: 'space diffs'.	! !!SpaceTally methodsFor: 'fileOut' stamp: 'sd 6/20/2003 23:04'!printSpaceAnalysis		"SpaceTally new printSpaceAnalysis"	^ self printSpaceAnalysis: 0 on: 'STspace.text'! !!SpaceTally methodsFor: 'fileOut' stamp: 'sd 6/20/2003 23:03'!printSpaceAnalysis: threshold on: fileName	"SpaceTally new printSpaceAnalysis: 1000 on: 'STspace.text1'"	"sd-This method should be rewrote to be more coherent within the rest of the class 	ie using preAllocate and spaceForInstanceOf:"	"If threshold > 0, then only those classes with more than that number	of instances will be shown, and they will be sorted by total instance space.	If threshold = 0, then all classes will appear, sorted by name."	| f codeSpace instCount instSpace totalCodeSpace totalInstCount totalInstSpace eltSize n totalPercent percent |	Smalltalk garbageCollect.	totalCodeSpace _ totalInstCount _ totalInstSpace _ n _ 0.	results _ OrderedCollection new: Smalltalk classNames size.'Taking statistics...'	displayProgressAt: Sensor cursorPoint	from: 0 to: Smalltalk classNames size	during: [:bar |	Smalltalk allClassesDo:		[:cl | codeSpace _ cl spaceUsed.		bar value: (n _ n+1).		Smalltalk garbageCollectMost.		instCount _ cl instanceCount.		instSpace _ (cl indexIfCompact > 0 ifTrue: [4] ifFalse: [8])*instCount. "Object headers"		cl isVariable			ifTrue: [eltSize _ cl isBytes ifTrue: [1] ifFalse: [4].					cl allInstancesDo: [:x | instSpace _ instSpace + (x basicSize*eltSize)]]			ifFalse: [instSpace _ instSpace + (cl instSize*instCount*4)].		results add: (SpaceTallyItem analyzedClassName: cl name codeSize: codeSpace instanceCount:  instCount spaceForInstances: instSpace).		totalCodeSpace _ totalCodeSpace + codeSpace.		totalInstCount _ totalInstCount + instCount.		totalInstSpace _ totalInstSpace + instSpace]].	totalPercent _ 0.0.	f _ FileStream newFileNamed: fileName.	f timeStamp.	f nextPutAll: ('Class' padded: #right to: 30 with: $ );			nextPutAll: ('code space' padded: #left to: 12 with: $ );			nextPutAll: ('# instances' padded: #left to: 12 with: $ );			nextPutAll: ('inst space' padded: #left to: 12 with: $ );			nextPutAll: ('percent' padded: #left to: 8 with: $ ); cr.	threshold > 0 ifTrue:		["If inst count threshold > 0, then sort by space"		results _ (results select: [:s | s instanceCount >= threshold or: [s spaceForInstances > (totalInstSpace // 500)]])				asSortedCollection: [:s :s2 | s spaceForInstances > s2 spaceForInstances]].	results do:		[:s | f nextPutAll: (s analyzedClassName padded: #right to: 30 with: $ );			nextPutAll: (s codeSize printString padded: #left to: 12 with: $ );			nextPutAll: (s instanceCount printString padded: #left to: 12 with: $ );			nextPutAll: (s spaceForInstances printString padded: #left to: 14 with: $ ).		percent _ s spaceForInstances*100.0/totalInstSpace roundTo: 0.1.		totalPercent _ totalPercent + percent.		percent >= 0.1 ifTrue:			[f nextPutAll: (percent printString padded: #left to: 8 with: $ )].		f cr].	f cr; nextPutAll: ('Total' padded: #right to: 30 with: $ );		nextPutAll: (totalCodeSpace printString padded: #left to: 12 with: $ );		nextPutAll: (totalInstCount printString padded: #left to: 12 with: $ );		nextPutAll: (totalInstSpace printString padded: #left to: 14 with: $ );		nextPutAll: ((totalPercent roundTo: 0.1) printString padded: #left to: 8 with: $ ).	f close! !!SpaceTally methodsFor: 'fileOut' stamp: 'sd 6/20/2003 23:07'!printSpaceDifferenceFrom: fileName1 to: fileName2	"For differential results, run printSpaceAnalysis twice with different fileNames,	then run this method...		SpaceTally new printSpaceAnalysis: 0 on: 'STspace.text1'.			--- do something that uses space here ---		SpaceTally new printSpaceAnalysis: 0 on: 'STspace.text2'.		SpaceTally new printSpaceDifferenceFrom: 'STspace.text1' to: 'STspace.text2'"	| f coll1 coll2 item |	f _ FileStream readOnlyFileNamed: fileName1.	coll1 _ OrderedCollection new.	[f atEnd] whileFalse: [coll1 add: (f upTo: Character cr)].	f close.	f _ FileStream readOnlyFileNamed: fileName2.	coll2 _ OrderedCollection new.	[f atEnd] whileFalse:		[item _ (f upTo: Character cr).		((coll1 includes: item) and: [(item endsWith: 'percent') not])			ifTrue: [coll1 remove: item]			ifFalse: [coll2 add: item]].	f close.	(StringHolder new contents: (String streamContents: 			[:s | 			s nextPutAll: fileName1; cr.			coll1 do: [:x | s nextPutAll: x; cr].			s cr; cr.			s nextPutAll: fileName2; cr.			coll2 do: [:x | s nextPutAll: x; cr]]))		openLabel: 'Differential Space Analysis'.! !!SpaceTally methodsFor: 'fileOut' stamp: 'sd 6/20/2003 22:59'!saveTo: aFileName	"| st |	st := SpaceTally new.	st spaceTally: (Array with: TextMorph with: Point).	st saveTo: 'spaceTally2'"	| s |	(FileDirectory default fileExists: aFileName) ifTrue: [		FileDirectory default deleteFileNamed: aFileName].	s _ FileDirectory default fileNamed: aFileName.	results do: [:each | s nextPutAll: each analyzedClassName asString ; 						nextPutAll: ' '; nextPutAll: each codeSize printString; 						nextPutAll: ' '; nextPutAll: each instanceCount printString; 						nextPutAll: ' '; nextPutAll: each spaceForInstances printString; cr].	s close! !!SpaceTally methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:31'!results	^ results! !!SpaceTally methodsFor: 'class analysis' stamp: 'sd 6/20/2003 22:59'!computeSpaceUsage	| entry c |	1 to: results size do: [:i |		entry := results at: i.		c := self class environment at: entry analyzedClassName.		entry codeSize: c spaceUsed.		entry instanceCount: c instanceCount.		entry spaceForInstances: (self spaceForInstancesOf: c).		Smalltalk garbageCollectMost].	! !!SpaceTally methodsFor: 'class analysis' stamp: 'sd 6/20/2003 22:54'!preAllocateResultsFor: classes	results := OrderedCollection new: classes size.	classes do: [:cl | results add: (SpaceTallyItem analyzedClassName: cl name)].	results _ results asArray.! !!SpaceTally methodsFor: 'class analysis' stamp: 'sd 6/20/2003 22:24'!spaceTally: classes	"Answer a collection of SpaceTallyItems representing the memory space (in bytes) consumed 	by the code and instances of each class in the system. Note that code sizes do not currently 	report memory consumed by class variables. "	"((SpaceTally new spaceTally: (Array with: TextMorph with: Point)) asSortedCollection: [:a :b | a spaceForInstances > b spaceForInstances]) asArray"	self preAllocateResultsFor: classes.	Smalltalk garbageCollect.	self computeSpaceUsage.	^ results! !!SpaceTally methodsFor: 'class analysis' stamp: 'sd 6/20/2003 22:30'!systemWideSpaceTally	"Answer a collection of SpaceTallyItems representing the memory space (in bytes) consumed 	by the code and instances of each class in the system. Note that code sizes do not currently 	report memory consumed by class variables. "	"(SpaceTally new systemWideSpaceTally asSortedCollection: [:a :b | a last > b last]) asArray"	self preAllocateResultsFor: Smalltalk allClasses.	Smalltalk garbageCollect.	self computeSpaceUsage.	^ results! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:59'!analyzedClassName	^ analyzedClassName! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:59'!analyzedClassName: aClassName	analyzedClassName := aClassName! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:08'!codeSize	^ codeSize! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:09'!codeSize: aNumber	codeSize := aNumber! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:09'!instanceCount	^ instanceCount! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:09'!instanceCount: aNumber	instanceCount := aNumber! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:10'!spaceForInstances	^ spaceForInstances! !!SpaceTallyItem methodsFor: 'accessing' stamp: 'sd 6/20/2003 22:10'!spaceForInstances: aNumber	spaceForInstances := aNumber! !!SpaceTallyItem methodsFor: 'printing' stamp: 'sd 6/20/2003 22:52'!printOn: aStream	analyzedClassName isNil		ifFalse: [aStream nextPutAll: analyzedClassName asString]. 	aStream nextPutAll: ' ('.	codeSize isNil		ifFalse: [aStream nextPutAll: 'code size: ' ;  nextPutAll: codeSize asString]. 	instanceCount isNil		ifFalse: [aStream nextPutAll: ' instance count: ' ;  nextPutAll: instanceCount asString]. 	spaceForInstances isNil		ifFalse: [aStream nextPutAll: ' space for instances: ' ;  nextPutAll: spaceForInstances asString]. 	aStream nextPut: $).	! !!SpaceTallyItem class methodsFor: 'instance creation' stamp: 'sd 6/20/2003 22:54'!analyzedClassName: aClassName	^ self new		analyzedClassName: aClassName ; yourself		! !!SpaceTallyItem class methodsFor: 'instance creation' stamp: 'sd 6/20/2003 22:54'!analyzedClassName: aClassName codeSize: codeSize instanceCount: instanceCount spaceForInstances: spaceForInstances	^ self new		analyzedClassName: aClassName ;		codeSize: codeSize ;		instanceCount: instanceCount ;		spaceForInstances: spaceForInstances ; yourself! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 6/20/2003 23:04'!lastRemoval			"Smalltalk lastRemoval"	 | oldDicts newDicts |	"Some explicit removals - add unwanted methods keeping other methods."	#(abandonSources )		do: [:each | self class removeSelector: each].	"Get rid of all unsent methods."	[self removeAllUnSentMessages > 0] whileTrue.	"Shrink method dictionaries."	Smalltalk garbageCollect.	oldDicts _ MethodDictionary allInstances.	newDicts _ Array new: oldDicts size.	oldDicts withIndexDo: [:d :index | 		newDicts at: index put: d rehashWithoutBecome.	].	oldDicts elementsExchangeIdentityWith: newDicts.	oldDicts _ newDicts _ nil.	Smalltalk allClassesDo: [:c | c zapOrganization].	SystemOrganization _ nil.	ChangeSet current initialize! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 6/20/2003 23:04'!presumedSentMessages   | sent |"Smalltalk presumedSentMessages"	"The following should be preserved for doIts, etc"	sent _ IdentitySet new.	#( rehashWithoutBecome compactSymbolTable rebuildAllProjects		browseAllSelect:  lastRemoval		scrollBarValue: scrollBarMenuButtonPressed: 		withSelectionFrom:  to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib		newDepth: restoreAfter: forgetDoIts zapAllMethods obsoleteClasses		removeAllUnSentMessages abandonSources removeUnreferencedKeys		reclaimDependents zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerInterruptWatcher unusedClasses) do:		[:sel | sent add: sel].	"The following may be sent by perform: in dispatchOnChar..."	(ParagraphEditor classPool at: #CmdActions) asSet do:		[:sel | sent add: sel].	(ParagraphEditor classPool at: #ShiftCmdActions) asSet do:		[:sel | sent add: sel].	^ sent! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 6/20/2003 23:04'!removeAllUnSentMessages	"Smalltalk removeAllUnSentMessages"	"[Smalltalk unusedClasses do: [:c | (Smalltalk at: c) removeFromSystem]. 	Smalltalk removeAllUnSentMessages > 0] whileTrue."	"Remove all implementations of unsent messages."	| sels n |	sels _ self systemNavigation allUnSentMessages.	"The following should be preserved for doIts, etc"	"needed even after #majorShrink is pulled"	#(#rehashWithoutBecome #compactSymbolTable #rebuildAllProjects #browseAllSelect:  #lastRemoval #scrollBarValue: #scrollBarMenuButtonPressed: #withSelectionFrom: #to: #removeClassNamed: #dragon: #hilberts: #mandala: #web #test3 #factorial #tinyBenchmarks #benchFib #newDepth: #restoreAfter: #forgetDoIts #zapAllMethods #obsoleteClasses #removeAllUnSentMessages #abandonSources #removeUnreferencedKeys #reclaimDependents #zapOrganization #condenseChanges #browseObsoleteReferences #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: #methodsFor:stamp: #methodsFor:stamp:prior: #instanceVariableNames: #startTimerInterruptWatcher #unusedClasses )		do: [:sel | sels				remove: sel				ifAbsent: []].	"The following may be sent by perform: in dispatchOnChar..."	(ParagraphEditor classPool at: #CmdActions) asSet		do: [:sel | sels				remove: sel				ifAbsent: []].	(ParagraphEditor classPool at: #ShiftCmdActions) asSet		do: [:sel | sels				remove: sel				ifAbsent: []].	sels size = 0		ifTrue: [^ 0].	n _ 0.	self systemNavigation		allBehaviorsDo: [:x | n _ n + 1].	'Removing ' , sels size printString , ' messages . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: n		during: [:bar | 			n _ 0.			self systemNavigation				allBehaviorsDo: [:class | 					bar value: (n _ n + 1).					sels						do: [:sel | class removeSelectorSimply: sel]]].	^ sels size! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 6/20/2003 22:40'!compareTallyIn: beforeFileName to: afterFileName	| answer s beforeDict a afterDict allKeys before after diff |	self deprecatedExplanation: 'Use SpaceTally>>compareTallyIn: beforeFileName to: afterFileName'.	beforeDict _ Dictionary new.	s _ FileDirectory default fileNamed: beforeFileName.	[s atEnd] whileFalse: [		a _ Array readFrom: s nextLine.		beforeDict at: a first put: a allButFirst.	].	s close.	afterDict _ Dictionary new.	s _ FileDirectory default fileNamed: afterFileName.	[s atEnd] whileFalse: [		a _ Array readFrom: s nextLine.		afterDict at: a first put: a allButFirst.	].	s close.	answer _ WriteStream on: String new.	allKeys _ (Set new addAll: beforeDict keys; addAll: afterDict keys; yourself) asSortedCollection.	allKeys do: [ :each |		before _ beforeDict at: each ifAbsent: [#(0 0 0)].		after _ afterDict at: each ifAbsent: [#(0 0 0)].		diff _ before with: after collect: [ :vBefore :vAfter | vAfter - vBefore].		diff = #(0 0 0) ifFalse: [			answer nextPutAll: each,'  ',diff printString; cr.		].	].	StringHolder new contents: answer contents; openLabel: 'space diffs'.	! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 6/20/2003 23:05'!printSpaceAnalysis	"Smalltalk printSpaceAnalysis"	self deprecatedExplanation: 'Use SpaceTally>>printSpaceAnalysis'. 	^ Smalltalk printSpaceAnalysis: 0 on: 'STspace.text'! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 6/20/2003 23:06'!printSpaceAnalysis: threshold on: fileName	"Smalltalk printSpaceAnalysis: 1000 on: 'STspace.text0'"	"If threshold > 0, then only those classes with more than that number	of instances will be shown, and they will be sorted by total instance space.	If threshold = 0, then all classes will appear, sorted by name."	| f codeSpace instCount instSpace totalCodeSpace totalInstCount totalInstSpace eltSize n stats totalPercent percent |	self deprecatedExplanation: 'Use SpaceTally>>printSpaceAnalysis: threshold on: fileName instead'. 	Smalltalk garbageCollect.	totalCodeSpace _ totalInstCount _ totalInstSpace _ n _ 0.	stats _ OrderedCollection new.'Taking statistics...'	displayProgressAt: Sensor cursorPoint	from: 0 to: self classNames size	during: [:bar |	self allClassesDo:		[:cl | codeSpace _ cl spaceUsed.		bar value: (n _ n+1).		Smalltalk garbageCollectMost.		instCount _ cl instanceCount.		instSpace _ (cl indexIfCompact > 0 ifTrue: [4] ifFalse: [8])*instCount. "Object headers"		cl isVariable			ifTrue: [eltSize _ cl isBytes ifTrue: [1] ifFalse: [4].					cl allInstancesDo: [:x | instSpace _ instSpace + (x basicSize*eltSize)]]			ifFalse: [instSpace _ instSpace + (cl instSize*instCount*4)].		stats add: (Array with: cl name with: codeSpace) , (Array with: instCount with: instSpace).		totalCodeSpace _ totalCodeSpace + codeSpace.		totalInstCount _ totalInstCount + instCount.		totalInstSpace _ totalInstSpace + instSpace]].	totalPercent _ 0.0.	f _ FileStream newFileNamed: fileName.	f timeStamp.	f nextPutAll: ('Class' padded: #right to: 30 with: $ );			nextPutAll: ('code space' padded: #left to: 12 with: $ );			nextPutAll: ('# instances' padded: #left to: 12 with: $ );			nextPutAll: ('inst space' padded: #left to: 12 with: $ );			nextPutAll: ('percent' padded: #left to: 8 with: $ ); cr.	threshold > 0 ifTrue:		["If inst count threshold > 0, then sort by space"		stats _ (stats select: [:s | s third >= threshold or: [s fourth > (totalInstSpace // 500)]])				asSortedCollection: [:s :s2 | s fourth > s2 fourth]].	stats do:		[:s | f nextPutAll: (s first padded: #right to: 30 with: $ );			nextPutAll: (s second printString padded: #left to: 12 with: $ );			nextPutAll: (s third printString padded: #left to: 12 with: $ );			nextPutAll: (s fourth printString padded: #left to: 14 with: $ ).		percent _ s fourth*100.0/totalInstSpace roundTo: 0.1.		totalPercent _ totalPercent + percent.		percent >= 0.1 ifTrue:			[f nextPutAll: (percent printString padded: #left to: 8 with: $ )].		f cr].	f cr; nextPutAll: ('Total' padded: #right to: 30 with: $ );		nextPutAll: (totalCodeSpace printString padded: #left to: 12 with: $ );		nextPutAll: (totalInstCount printString padded: #left to: 12 with: $ );		nextPutAll: (totalInstSpace printString padded: #left to: 14 with: $ );		nextPutAll: ((totalPercent roundTo: 0.1) printString padded: #left to: 8 with: $ ).	f close! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 6/20/2003 23:08'!printSpaceDifferenceFrom: fileName1 to: fileName2	"For differential results, run printSpaceAnalysis twice with different fileNames,	then run this method...		Smalltalk printSpaceAnalysis: 0 on: 'STspace.text1'.			--- do something that uses space here ---		Smalltalk printSpaceAnalysis: 0 on: 'STspace.text2'.		Smalltalk printSpaceDifferenceFrom: 'STspace.text1' to: 'STspace.text2'"	| f coll1 coll2 item |	self deprecatedExplanation: 'Use SpaceTally>>printSpaceDifferenceFrom: fileName1 to: fileName2 instead'.	f _ FileStream readOnlyFileNamed: fileName1.	coll1 _ OrderedCollection new.	[f atEnd] whileFalse: [coll1 add: (f upTo: Character cr)].	f close.	f _ FileStream readOnlyFileNamed: fileName2.	coll2 _ OrderedCollection new.	[f atEnd] whileFalse:		[item _ (f upTo: Character cr).		((coll1 includes: item) and: [(item endsWith: 'percent') not])			ifTrue: [coll1 remove: item]			ifFalse: [coll2 add: item]].	f close.	(StringHolder new contents: (String streamContents: 			[:s | 			s nextPutAll: fileName1; cr.			coll1 do: [:x | s nextPutAll: x; cr].			s cr; cr.			s nextPutAll: fileName2; cr.			coll2 do: [:x | s nextPutAll: x; cr]]))		openLabel: 'Differential Space Analysis'.! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 6/20/2003 22:33'!spaceForInstancesOf: aClass	"Answer the number of bytes consumed by all instances of the given class, including thier object headers."	| instCount isCompact instVarBytes bytesPerElement contentBytes headerBytes total |	self deprecatedExplanation: 'Use instead SpaceTally>>spaceForInstancesOf:'.	instCount _ aClass instanceCount.	instCount = 0 ifTrue: [^ 0].	isCompact _ aClass indexIfCompact > 0.	instVarBytes _ aClass instSize * 4.	aClass isVariable		ifTrue: [			bytesPerElement _ aClass isBytes ifTrue: [1] ifFalse: [4].			total _ 0.			aClass allInstancesDo: [:inst |				contentBytes _ instVarBytes + (inst size * bytesPerElement).				headerBytes _					contentBytes > 255						ifTrue: [12]						ifFalse: [isCompact ifTrue: [4] ifFalse: [8]].				total _ total + headerBytes + contentBytes].			^ total]		ifFalse: [			headerBytes _				instVarBytes > 255					ifTrue: [12]					ifFalse: [isCompact ifTrue: [4] ifFalse: [8]].			^ instCount * (headerBytes + instVarBytes)].! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 6/20/2003 22:31'!spaceTally	"Answer a collection of tuples representing the memory space (in bytes) consumed by the code and instances of each class in the system. The tuples have the form:	<class> <code size> <instance count> <space for instances>Code sizes do not currently report memory consumed by class variables. The arrays used to record these results consume a relatively insignificant amount of space."	"(Smalltalk spaceTally asSortedCollection: [:a :b | a last > b last]) asArray"	| results entry c |	self deprecatedExplanation: 'Use SpaceTally>>systemWideSpaceTally'.	"pre-allocate array of entries for results"	results _ OrderedCollection new: self size.	self do: [:cl |		(cl isKindOf: Class) ifTrue: [			entry _ Array new: 4.			entry at: 1 put: cl.			results add: entry]].	results _ results asArray.	Smalltalk garbageCollect.	1 to: results size do: [:i |		entry _ results at: i.		c _ entry at: 1.		entry at: 2 put: c spaceUsed.		entry at: 3 put: c instanceCount.		entry at: 4 put: (self spaceForInstancesOf: c).		Smalltalk garbageCollectMost].	^ results! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 6/20/2003 22:29'!spaceTallyTo: aFileName	| answer s |	self deprecatedExplanation: 'Use SpaceTally>> saveTo: instead'. 	Smalltalk garbageCollect.	answer _ Smalltalk spaceTally.	(FileDirectory default fileExists: aFileName) ifTrue: [		FileDirectory default deleteFileNamed: aFileName	].	s _ FileDirectory default fileNamed: aFileName.	answer do: [ :each | s nextPutAll: each printString; cr].	s close! !SpaceTallyItem class removeSelector: #analyzedClass:!SpaceTallyItem class removeSelector: #analyzedClass:codeSize:instanceCount:spaceForInstances:!SpaceTallyItem removeSelector: #analyzedClass!SpaceTallyItem removeSelector: #analyzedClass:!!SpaceTallyItem reorganize!('accessing' analyzedClassName analyzedClassName: codeSize codeSize: instanceCount instanceCount: spaceForInstances spaceForInstances:)('printing' printOn:)!SpaceTally removeSelector: #preAllocateResults!SpaceTally removeSelector: #spaceTally!SpaceTally removeSelector: #spaceTallyTo:!SpaceTally removeSelector: #systemSpaceTally!!SpaceTally reorganize!('instance size' spaceForInstancesOf:)('fileOut' compareTallyIn:to: printSpaceAnalysis printSpaceAnalysis:on: printSpaceDifferenceFrom:to: saveTo:)('accessing' results)('class analysis' computeSpaceUsage preAllocateResultsFor: spaceTally: systemWideSpaceTally)!