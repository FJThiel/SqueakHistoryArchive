'From Squeak3.6alpha of ''17 March 2003'' [latest update: #5278] on 26 June 2003 at 10:34:15 pm'!"Change Set:		MoreSystemNavigationFixes-nkDate:			26 June 2003Author:			Ned KonzYet more fixes for methods referring to methods from SystemDictionary that have been deprecated and duplicated in SystemNavigation.Applied to a 3.6a-5278 image"!!CodeHolder methodsFor: 'commands' stamp: 'nk 6/26/2003 21:43'!browseSenders	"Create and schedule a message set browser on all senders of the currently selected message selector.  Of there is no message currently selected, offer a type-in"	self sendQuery: #browseAllCallsOn: to: self systemNavigation! !!Browser methodsFor: 'message functions' stamp: 'nk 6/26/2003 21:41'!removeMessage	"If a message is selected, create a Confirmer so the user can verify that  	the currently selected message should be removed from the system. If 	so,  	remove it. If the Preference 'confirmMethodRemoves' is set to false, the 	confirmer is bypassed."	| messageName confirmation |	messageListIndex = 0		ifTrue: [^ self].	self okToChange		ifFalse: [^ self].	messageName _ self selectedMessageName.	confirmation _ self systemNavigation  confirmRemovalOf: messageName on: self selectedClassOrMetaClass.	confirmation == 3		ifTrue: [^ self].	self selectedClassOrMetaClass removeSelector: self selectedMessageName.	self messageListIndex: 0.	self changed: #messageList.	self setClassOrganizer.	"In case organization not cached"	confirmation == 2		ifTrue: [self systemNavigation browseAllCallsOn: messageName]! !!ChangeSorter methodsFor: 'message list' stamp: 'nk 6/26/2003 21:42'!removeMessage	"Remove the selected msg from the system. Real work done by the 	parent, a ChangeSorter"	| confirmation sel |	self okToChange		ifFalse: [^ self].	currentSelector		ifNotNil: [confirmation _ self systemNavigation   confirmRemovalOf: (sel _ self selectedMessageName) on: self selectedClassOrMetaClass.			confirmation == 3				ifTrue: [^ self].			self selectedClassOrMetaClass removeSelector: sel.			self update.			confirmation == 2				ifTrue: [self systemNavigation browseAllCallsOn: sel]]! !!DictionaryInspector methodsFor: 'menu' stamp: 'nk 6/26/2003 21:43'!selectionReferences	"Create a browser on all references to the association of the current selection."	self selectionIndex = 0 ifTrue: [^ self changed: #flash].	object class == MethodDictionary ifTrue: [^ self changed: #flash].	self systemNavigation browseAllCallsOn: (object associationAt: (keyArray at: selectionIndex)).! !!FileContentsBrowser methodsFor: 'other' stamp: 'nk 6/26/2003 21:43'!browseSenders	"Create and schedule a message set browser on all senders of the 	currently selected message selector. Do nothing if no message is selected."	messageListIndex ~= 0 		ifTrue: [self systemNavigation new browseAllCallsOn: self selectedMessageName]! !!MessageSet methodsFor: 'message functions' stamp: 'nk 6/26/2003 21:44'!removeMessage	"Remove the selected message from the system. 1/15/96 sw"	| messageName confirmation |	messageListIndex = 0		ifTrue: [^ self].	self okToChange		ifFalse: [^ self].	messageName _ self selectedMessageName.	confirmation _ self systemNavigation  confirmRemovalOf: messageName on: self selectedClassOrMetaClass.	confirmation == 3		ifTrue: [^ self].	self selectedClassOrMetaClass removeSelector: messageName.	self deleteFromMessageList: self selection.	self reformulateList.	confirmation == 2		ifTrue: [self systemNavigation browseAllCallsOn: messageName]! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'nk 6/26/2003 22:24'!classNamesContainingIt	"Open a browser on classes whose names contain the selected string"	self lineSelectAndEmptyCheck: [^ self].		SystemNavigation new browseClassesWithNamesContaining: self selection string caseSensitive: Sensor leftShiftDown! !!ParagraphEditor methodsFor: 'explain' stamp: 'nk 6/26/2003 22:02'!explainAnySel: symbol 	"Is this any message selector?"	| list reply |	list _ self systemNavigation allClassesImplementing: symbol.	list size = 0 ifTrue: [^nil].	list size < 12		ifTrue: [reply _ ' is a message selector which is defined in these classes ' , list printString]		ifFalse: [reply _ ' is a message selector which is defined in many classes'].	^'"' , symbol , reply , '."' , '\' withCRs, 'SystemNavigation new browseAllImplementorsOf: #' , symbol! !!Preference methodsFor: 'menu' stamp: 'nk 6/26/2003 21:44'!offerPreferenceNameMenu: aPanel with: ignored1 in: ignored2	"the user clicked on a preference name -- put up a menu"	| aMenu |	ActiveHand showTemporaryCursor: nil.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: name.	(Preferences okayToChangeProjectLocalnessOf: name) ifTrue:		[aMenu addUpdating: #isProjectLocalString target: self action: #toggleProjectLocalness.		aMenu balloonTextForLastItem: 'Some preferences are best applied uniformly to all projects, and others are best set by each individual project.  If this item is checked, then this preference will be printed in bold and will have a separate value for each project'].	aMenu add: 'browse senders' target: SystemNavigation new  selector: #browseAllCallsOn: argument: name.	aMenu balloonTextForLastItem: 'This will open a method-list browser on all methods that the send the preference "', name, '".'. 	aMenu add: 'show category...' target: aPanel selector: #findCategoryFromPreference: argument: name.	aMenu balloonTextForLastItem: 'Allows you to find out which category, or categories, this preference belongs to.'.	Smalltalk isMorphic ifTrue:		[aMenu add: 'hand me a button for this preference' target: self selector: #tearOffButton.		aMenu balloonTextForLastItem: 'Will give you a button that governs this preference, which you may deposit wherever you wish'].	aMenu add: 'copy this name to clipboard' target: self selector: #copyName.	aMenu balloonTextForLastItem: 'Copy the name of the preference to the text clipboard, so that you can paste into code somewhere'.	aMenu popUpInWorld! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'nk 6/26/2003 21:44'!senders	| aSelector |	(aSelector _ self selectedMessageName) ifNotNil:		[self systemNavigation browseAllCallsOn: aSelector]! !!SystemNavigation methodsFor: 'browse' stamp: 'nk 6/26/2003 22:32'!browseAllCallsOn: literal1 and: literal2 	"Create and schedule a message browser on each method that calls on the 	two Symbols, literal1 and literal2. For example, SystemNavigation new 	browseAllCallsOn: #at: and: #at:put:."	^self 		browseMessageList: (self allCallsOn: literal1 and: literal2)		name: literal1 printString , ' -and- ' , literal2 printString! !!SystemNavigation methodsFor: 'browse' stamp: 'nk 6/26/2003 22:31'!browseAllImplementorsOf: selector localTo: aClass	"Create and schedule a message browser on each method in or below the given class	that implements the message whose selector is the argument, selector. For example, 	SystemNavigation new browseAllImplementorsOf: #at:put: localTo: Dictionary."	aClass ifNil: [ ^self inform: 'no class selected' ].	^self browseMessageList: (self allImplementorsOf: selector localTo: aClass)		name: 'Implementors of ' , selector, ' local to ', aClass name! !!Viewer methodsFor: 'queries' stamp: 'nk 6/26/2003 21:45'!browseSendersOf: aSelector	"Open a browser on senders of aSelector"	SystemNavigation new browseAllCallsOn: aSelector! !