'From Squeak2.8alpha of 13 January 2000 [latest update: #1934] on 15 March 2000 at 10:39:34 am'!!FileList methodsFor: 'file list menu' stamp: 'tk 3/15/2000 10:32'!compressFile	"Compress the currently selected file"	(directory readOnlyFileNamed: self fullName) compressFile.	self updateFileList! !!ImageSegment methodsFor: 'compact classes' stamp: 'tk 3/15/2000 09:51'!objectAfter: ind	"Return the object or free chunk immediately following the given object or free chunk in the segment.  *** Warning: When class ObjectMemory change, be sure to change it here. ***"	| sz word newInd hdrBits |	sz _ ((word _ segment at: ind "header") bitAnd: 3) = 2   "free block?"		ifTrue: [word bitAnd: 16rFFFFFFFC]		ifFalse: [(word bitAnd: 3) = 0 "HeaderTypeSizeAndClass"			ifTrue: [(segment at: ind-2) bitAnd: 16rFFFFFFFC]			ifFalse: [word bitAnd: "SizeMask" 252]].	newInd _ ind + (sz>>2).	"adjust past extra header words"	(hdrBits _ (segment atPin: newInd) bitAnd: 3) = 3 ifTrue: [^ newInd].		"If at end, header word will be garbage.  This is OK"	hdrBits = 1 ifTrue: [^ newInd+1].	hdrBits = 0 ifTrue: [^ newInd+2].	^ newInd	"free"! !!Project methodsFor: 'file in/out' stamp: 'tk 3/15/2000 09:48'!fromMyServerLoad: otherProjectName	| servers pair thumbnailWindow pvm pr |	"If a newer version of me is on the server, load it."	(pr _ Project named: otherProjectName) ifNotNil: ["it appeared"		^ pr enter].	(servers _ self serverList) isEmpty 		ifTrue: [^ self inform: 			'Current project does not know a server either.'].	pair _ self class mostRecent: otherProjectName onServer: servers first.	pair first ifNil: [^ self inform: 'Can''t find file on server for ', otherProjectName].	"Find parent project, go there, zap old thumbnail"	self world submorphsDo: [:sub | 		(sub isKindOf: SystemWindow) ifTrue: [			(pvm _ sub findA: ProjectViewMorph) ifNotNil: [				(pvm project class == DiskProxy and: 					[pvm project constructorArgs first = otherProjectName])						ifTrue: [thumbnailWindow _ sub]]].		(sub isKindOf: ProjectViewMorph) ifTrue: [				((pvm _ sub project) class == DiskProxy and: 					[pvm constructorArgs first = otherProjectName])						ifTrue: [thumbnailWindow _ sub]].		].	thumbnailWindow 		ifNotNil: [thumbnailWindow delete.			thumbnailWindow owner ifNotNil: [^ self]]	"user refused"		ifNil: [(SelectionMenu confirm: 'no thumbnail. Debug?') ifTrue: [self halt]].	"replace with a new one"	ProjectViewMorph openFromFile: (servers first oldFileNamed: pair first).		"Later check rest of servers if fails.  Still have list here"! !!Project methodsFor: 'file in/out' stamp: 'tk 3/15/2000 09:47'!loadFromServer	| servers pair resp thumbnailWindow pvm |	"If a newer version of me is on the server, load it."	(servers _ self serverList) isEmpty 		ifTrue: [^ self inform: 'This project thinks it has never been on a server'].	pair _ self class mostRecent: self name onServer: servers first.	pair first ifNil: [^ self inform: 'can''t find file on serverfor ', self name].	(Base64MimeConverter decodeInteger: version unescapePercents) > pair second ifTrue: [		^ self inform: 'That server has an older version of the project.'].	version = (pair first findTokens: '|.') second 		ifTrue: [resp _ (PopUpMenu labels: 'Reload anyway\Cancel' withCRs) startUpWithCaption: 					'The only changes are the ones you made here.'.				resp ~= 1 ifTrue: [^ nil]]		ifFalse: [resp _ (PopUpMenu labels: 'Load it\Cancel' withCRs) startUpWithCaption: 					'A newer version exists on the server.'.				resp ~= 1 ifTrue: [^ nil]].	"Find parent project, go there, zap old thumbnail"	parentProject == Project current ifFalse: [parentProject enter].	parentProject world submorphsDo: [:sub | 		(sub isKindOf: SystemWindow) ifTrue: [			(pvm _ sub findA: ProjectViewMorph) ifNotNil: [				pvm project == self ifTrue: [thumbnailWindow _ sub]]].		(sub isKindOf: ProjectViewMorph) ifTrue: [				((pvm _ sub project) class == DiskProxy and: 					[pvm constructorArgs first = self name])						ifTrue: [thumbnailWindow _ sub]].		].	thumbnailWindow 		ifNotNil: [thumbnailWindow delete.			thumbnailWindow owner ifNotNil: [^ self]]	"user refused"		ifNil: [(SelectionMenu confirm: 'no thumbnail. Debug?') ifTrue: [self halt]].	"replace with a new one"	ProjectViewMorph openFromFile: (servers first oldFileNamed: pair first).		"Later check rest of servers if fails.  Still have list here"! !!Project methodsFor: 'file in/out' stamp: 'tk 3/15/2000 10:39'!storeOnServer	| servers pair newVersion resp newName local folder |	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	"write locally"	self exportSegment.	(FileStream oldFileNamed: self name, '.pr') compressFile.	"Find out what version"	(servers _ self serverList) isEmpty 		ifTrue: [folder _ PluggableFileList getFolderDialog openLabel:					 'Select a folder on a server:'.			folder ifNil: [^ self].			servers _ Array with: folder.			urlList _ Array with: folder realUrl.			pair _ Array with: nil with: -1]		ifFalse: [pair _ self class mostRecent: self name onServer: servers first].	(newVersion _ self newVersion: pair) ifNil: [^ self].	newName _ self name, '|', newVersion, '.pr.gz'.	local _ FileStream oldFileNamed: self name, '.pr.gz'.	resp _ servers first putFile: local named: newName retry: false.	resp ifFalse: [self inform: 'the primary server of this project seems to be down'.  ^ self].	version _ newVersion.	"committed"	"Later, store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	"2 to: servers size do: [:aServer | aServer putFile: local named: newName]."	"Rename disk file to be the final name"	local reset.	FileDirectory default rename: local localName toBe: newName.! !!StandardFileStream methodsFor: 'read, write, position' stamp: 'tk 3/15/2000 10:31'!compressFile	"Write a new file that has the data in me compressed in GZip format."	| zipped buffer |	self readOnly; binary.	zipped _ self directory newFileNamed: (self name, FileDirectory dot, 'gz').	zipped binary; setFileTypeToObject.		"Type and Creator not to be text, so can be enclosed in an email"	zipped _ GZipWriteStream on: zipped.	buffer _ ByteArray new: 50000.	'Compressing ', self fullName displayProgressAt: Sensor cursorPoint		from: 0 to: self size		during: [:bar |			[self atEnd] whileFalse: [				bar value: self position.				zipped nextPutAll: (self nextInto: buffer)].			zipped close.			self close].! !