'From Squeak3.7alpha of ''11 September 2003'' [latest update: #5595] on 12 December 2003 at 4:01:56 pm'!"Change Set:		KCP-0113-FixAllSelectorsDate:			12 December 2003Author:			Nathanael SchaerliRemove allSelectorsUnderstood that was a duplication of allSelectors and fix all the senders."!!Behavior methodsFor: 'accessing method dictionary' stamp: 'NS 12/12/2003 15:57'!allSelectors	"Answer all selectors understood by instances of the receiver"	| coll |	coll _ OrderedCollection new.	self withAllSuperclasses do:		[:aClass | coll addAll: aClass selectors].	^ coll asIdentitySet! !!Behavior methodsFor: 'accessing method dictionary' stamp: 'NS 12/12/2003 16:00'!allSelectorsUnderstood	"Answer a list of all selectors understood by instances of the receiver"	| aList |	self deprecated: 'Use allSelectors instead.'.	aList _ OrderedCollection new.	self withAllSuperclasses do:		[:aClass | aList addAll: aClass selectors].	^ aList asSet asArray"SketchMorph allSelectorsUnderstood size"! !!Lexicon methodsFor: 'search' stamp: 'NS 12/12/2003 15:58'!methodListFromSearchString: fragment	"Answer a method list of methods whose selectors match the given fragment"	|  aList searchFor |	currentQueryParameter _ fragment.	currentQuery _ #selectorName.	autoSelectString _ fragment.	searchFor _ fragment asString asLowercase withBlanksTrimmed.	aList _ targetClass allSelectors select:		[:aSelector | currentVocabulary includesSelector: aSelector forInstance: self targetObject ofClass: targetClass limitClass: limitClass].	searchFor size > 0 ifTrue:		[aList _ aList select:			[:aSelector | aSelector includesSubstring: searchFor caseSensitive: false]].	^ aList asSortedArray! !!Lexicon methodsFor: 'search' stamp: 'NS 12/12/2003 15:59'!selectorsMatching	"Anwer a list of selectors in the receiver that match the current search string"	| fragment aList |	fragment _ self lastSearchString asLowercase.	aList _ targetClass allSelectors select:		[:aSelector | (aSelector includesSubstring: fragment caseSensitive: false) and:			[currentVocabulary includesSelector: aSelector forInstance: self targetObject ofClass: targetClass limitClass: limitClass]].	^ aList asSortedArray! !!Lexicon methodsFor: 'search' stamp: 'NS 12/12/2003 15:59'!setMethodListFromSearchString	"Set the method list of the receiver based on matches from the search string"	| fragment aList |	self okToChange ifFalse: [^ self].	fragment _ currentQueryParameter.	fragment _ fragment asString asLowercase withBlanksTrimmed.	aList _ targetClass allSelectors select:		[:aSelector | currentVocabulary includesSelector: aSelector forInstance: self targetObject ofClass: targetClass limitClass: limitClass].	fragment size > 0 ifTrue:		[aList _ aList select:			[:aSelector | aSelector includesSubstring: fragment caseSensitive: false]].	aList size == 0 ifTrue:		[^ Beeper beep].	self initListFrom: aList asSortedArray highlighting: targetClass.	messageListIndex _  messageListIndex min: messageList size.	self changed: #messageList! !!Lexicon methodsFor: 'within-tool queries' stamp: 'NS 12/12/2003 15:58'!methodsWithInitials: initials	"Return a list of selectors representing methods whose timestamps have the given initials and which are in the protocol of this object and within the range dictated by my limitClass."	| classToUse |	classToUse _ self targetObject ifNotNil: [self targetObject class] ifNil: [targetClass].  "In support of lightweight uniclasses"	^ targetClass allSelectors select:		[:aSelector | (currentVocabulary includesSelector: aSelector forInstance: self targetObject ofClass: classToUse limitClass: limitClass) and:			[Utilities doesMethod: aSelector forClass: classToUse bearInitials: initials]].! !!SearchingViewer methodsFor: 'search' stamp: 'NS 12/12/2003 15:59'!doSearchFrom: aSource 	"Perform the search operation"	| searchFor aVocab aList all anInterface useTranslations scriptNames addedMorphs |	searchString := (aSource isKindOf: PluggableTextMorph) 				ifFalse: [aSource]				ifTrue: [aSource text string].	searchFor := searchString asString asLowercase withBlanksTrimmed.	aVocab := self outerViewer currentVocabulary.	(useTranslations := (scriptedPlayer isKindOf: Player) 				and: [aVocab isKindOf: EToyVocabulary]) 			ifTrue: 				[all := scriptedPlayer costume selectorsForViewer.				all addAll: (scriptNames := scriptedPlayer class namedTileScriptSelectors)]			ifFalse: [all := scriptNames := scriptedPlayer class allSelectors].	aList := all select: 					[:aSelector | 					(aVocab 						includesSelector: aSelector						forInstance: scriptedPlayer						ofClass: scriptedPlayer class						limitClass: ProtoObject) and: 								[(useTranslations and: 										[(anInterface := aVocab methodInterfaceAt: aSelector ifAbsent: [nil]) 											notNil and: 													[anInterface elementWording includesSubstring: searchFor														caseSensitive: false]]) 									or: 										[((scriptNames includes: aSelector) or: [useTranslations not]) 											and: [aSelector includesSubstring: searchFor caseSensitive: false]]]].	aList := aList asSortedArray.	self removeAllButFirstSubmorph.	"that being the header"	self addAllMorphs: (addedMorphs := scriptedPlayer 						tilePhrasesForSelectorList: aList						inViewer: self).	self enforceTileColorPolicy.	self secreteCategorySymbol.	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	self adjustColorsAndBordersWithin.	owner ifNotNil: 			[owner isStandardViewer ifTrue: [owner fitFlap].			addedMorphs isEmpty 				ifTrue: [self inform: 'No matches found for "' , searchFor , '"']]! !