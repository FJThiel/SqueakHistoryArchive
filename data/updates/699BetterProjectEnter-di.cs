'From Squeak 2.3 of January 14, 1999 on 2 March 1999 at 3:13:25 pm'!"Change Set:		BetterProjectEnterDate:			2 March 1999Author:			Dan IngallsAvoids a reallocation of the screen bitmap and blt of the whole screen when entering or leaving a project with a different color depth.Also causes the space check in DisplayScreen>>newDepthNoRestore: to use the system value for lowSpaceThreshold.Finally, this fileIn reorders the startUp list to restore graceful recovery when the system source files cannot be found."!!DisplayScreen methodsFor: 'private' stamp: 'di 3/1/1999 21:55'!newDepthNoRestore: pixelSize	"Change depths.  Check if there is enough space!!  , di"	| area need |	pixelSize = depth ifTrue: [^ self  "no change"].	pixelSize < depth ifFalse:		["Make sure there is enough space"		area _ Display boundingBox area. "pixels"		Smalltalk isMorphic ifFalse:			[ScheduledControllers scheduledWindowControllers do:				[:aController | "This should be refined..."				aController view cacheBitsAsTwoTone ifFalse:					[area _ area + aController view windowBox area]]].		need _ (area * (pixelSize-depth) // 8)  "new bytes needed"				+ Smalltalk lowSpaceThreshold.		(Smalltalk garbageCollectMost <= need			and: [Smalltalk garbageCollect <= need])			ifTrue: [self error: 'Insufficient free space']].	self setExtent: self extent depth: pixelSize.	ScheduledControllers updateGray.	DisplayScreen startUp! !!DisplayScreen methodsFor: 'private' stamp: 'di 3/1/1999 17:03'!setExtent: aPoint depth: bitsPerPixel  "DisplayScreen startUp"	"This method is critical.  If the setExtent fails, there will be no	proper display on which to show the error condition."	bits _ nil.  "Free up old bitmap in case space is low"	super setExtent: aPoint depth: bitsPerPixel.	clippingBox _ super boundingBox! !!DisplayScreen class methodsFor: 'snapshots' stamp: 'di 3/1/1999 17:04'!shutDown 	"Minimize Display memory saved in image"	Display setExtent: 240@120 depth: Display depth! !!DisplayScreen class methodsFor: 'snapshots' stamp: 'di 3/1/1999 17:04'!startUp  "DisplayScreen startUp"	Display setExtent: self actualScreenSize depth: Display depth.	Display beDisplay! !!Project methodsFor: 'menu messages' stamp: 'di 3/2/1999 14:59'!enter: returningFlag	"Install my ChangeSet, Transcript, and scheduled views as current globals. If returningFlag is true, we are return to the project from whence the current project was entered; don't change its previousProject link in this case."	| newDisplay entering vanishingPoint showZoom priorProject |	self == CurrentProject ifTrue: [^ self].	Smalltalk at: #ScorePlayer ifPresent: [:playerClass |		playerClass allInstancesDo: [:player | player pause]].	returningFlag		ifTrue:			[nextProject _ CurrentProject]		ifFalse:			["record link to previous project unless we're returning via that link"			previousProject _ CurrentProject].	priorProject _ CurrentProject.	"Same code runs for enter and exit; test which for zoom"	entering _ self ~~ CurrentProject parent.	displayDepth == nil ifTrue: [displayDepth _ Display depth].	CurrentProject makeThumbnail.	CurrentProject saveState.	CurrentProject _ self.	Smalltalk newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Sensor flushKeyboard.	showZoom _ Preferences showProjectZoom		and: ["Only show zoom if there is room for the both displays plus a megabyte"			Smalltalk garbageCollectMost > (Display boundingBox area*displayDepth//8+1000000)].	Display replacedBy:			(showZoom				ifTrue: [newDisplay _ DisplayScreen extent: Display extent													depth: displayDepth]				ifFalse: [Display newDepthNoRestore: displayDepth])		do: [world isMorph				ifTrue: [World _ world.  "Signifies Morphic"						world install]				ifFalse: [World _ nil.  "Signifies MVC"						Smalltalk at: #ScheduledControllers put: world.						ScheduledControllers restore]].	showZoom		ifTrue: ["Show animated zoom to new display"				entering					ifTrue: [vanishingPoint _ Sensor cursorPoint]					ifFalse: [vanishingPoint _ self viewLocFor: priorProject].				Display zoomIn: entering orOutTo: newDisplay at: 0@0							vanishingPoint: vanishingPoint.				(Display  _ newDisplay) beDisplay].	world isMorph		ifTrue: [self spawnNewProcessAndTerminateOld: true]		ifFalse: [world searchForActiveController]! !!SystemDictionary methodsFor: 'memory space' stamp: 'di 3/1/1999 16:50'!lowSpaceThreshold	"Return the low space threshold. When the amount of free memory (after garbage collection) falls below this limit, the system is in serious danger of completely exhausting memory and crashing. This limit should be made high enough to allow the user open a debugger to diagnose a problem or to save the image."	thisContext isPseudoContext		ifTrue: [^ 300000  "Allow for translated methods"]		ifFalse: [^ 100000  "Enough for interpreter"]! !DisplayScreen removeSelector: #setExtent:!"Postscript:Reorder the startUp list so missing sources file gets better diagnosis."Smalltalk addToStartUpList: FileDirectory after: DisplayScreen.Smalltalk addToStartUpList: ProcessorScheduler after: InputSensor.!