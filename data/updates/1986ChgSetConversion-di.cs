'From Squeak2.8alpha of 12 January 2000 [latest update: #1984] on 4 April 2000 at 4:33:39 pm'!"Change Set:		ChgSetConversionDate:			4 April 2000Author:			Dan IngallsSeveral cleanups plus a reasonable conversion for old stored changeSets on file."!!ChangeSet methodsFor: 'testing' stamp: 'di 4/4/2000 16:23'!projectsBelongedTo	"Answer a list of all the projects for which the receiver is the current change set"	^ Project allSubInstances select: [:proj | proj projectChangeSet == self]! !!ChangeSet methodsFor: 'converting' stamp: 'di 4/4/2000 16:20'!convertcmcmnppss0: varDict nppriicss0: smartRefStrm	| cls info selector pair classChanges methodChanges methodRemoves classRemoves |	"These variables are automatically stored into the new instance:		('name' 'preamble' 'postscript' 'structures' 'superclasses' ).	This method is for additional changes.	It initializes the isolation variables, and then duplicates the logic fo		assimilateAllChangesFoundIn:."	revertable _ false.	isolationSet _ nil.	isolatedProject _ nil.	changeRecords _ Dictionary new.	classChanges _ varDict at: 'classChanges'.	classChanges keysDo:		[:className |	  	(cls _ Smalltalk classNamed: className) ifNotNil:			[info _ classChanges at: className ifAbsent: [Set new].			info do: [:each | self atClass: cls add: each]]].	methodChanges _ varDict at: 'methodChanges'.	methodRemoves _ varDict at: 'methodRemoves'.	methodChanges keysDo:		[:className |	  	(cls _ Smalltalk classNamed: className) ifNotNil:			[info _ methodChanges at: className ifAbsent: [Dictionary new].			info associationsDo:				[:assoc | selector _ assoc key.				(assoc value == #remove or: [assoc value == #addedThenRemoved])					ifTrue:						[assoc value == #addedThenRemoved							ifTrue: [self atSelector: selector class: cls put: #add].						pair _ methodRemoves at: {cls name. selector} ifAbsent: [nil] .						self removeSelector: selector class: cls priorMethod: nil lastMethodInfo: pair]					ifFalse: 						[self atSelector: selector class: cls put: assoc value]]]].	classRemoves _ varDict at: 'classRemoves'.	classRemoves do:		[:className | self noteRemovalOf: className].! !ChangeSet class removeSelector: #convertAll!ChangeSet class removeSelector: #test!ChangeSet removeSelector: #contentString!ChangeSet removeSelector: #conversionInit!ChangeSet removeSelector: #forgetChange:forSelector:class:!