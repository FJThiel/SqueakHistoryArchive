'From Squeak3.1alpha of 5 February 2001 [latest update: #3883] on 27 March 2001 at 4:09:57 pm'!"Change Set:		zipPastEndDate:			27 March 2001Author:			Bob ArningWhen reading a damaged gzip file, it is possible to get into an endless recursion #next - #pastEndRead - #next - #pastEndRead - ...This change simply results in a primitive failure in such cases."!!InflateStream methodsFor: 'accessing' stamp: 'RAA 3/27/2001 16:08'!nextCalledByPastEndRead	"Answer the next decompressed object in the Stream represented by the	receiver. However, since we are called by #pastEndRead, fail if no more data (damaged file probably). Otherwise you could get into a nasty endless recursion."	<primitive: 65>	position >= readLimit		ifTrue: [^self primitiveFailed]		ifFalse: [^collection at: (position _ position + 1)]! !!InflateStream methodsFor: 'private' stamp: 'RAA 3/27/2001 16:02'!pastEndRead	"A client has attempted to read beyond the read limit.	Check in what state we currently are and perform	the appropriate action"	| blockType |	state = StateNoMoreData ifTrue:[^nil]. "Get out early if possible"	"Check if we can move decoded data to front"	self moveContentsToFront.	"Check if we can fetch more source data"	self moveSourceToFront.	state = StateNewBlock ifTrue:[state _ self getNextBlock].	blockType _ state bitShift: -1.	self perform: (BlockTypes at: blockType+1).	^self nextCalledByPastEndRead! !