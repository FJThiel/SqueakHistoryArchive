'From Squeak3.7alpha of 11 September 2003 [latest update: #5816] on 15 March 2004 at 7:46:15 pm'!"Change Set:		TextStyleToChangeSet-nkDate:			15 March 2004Author:			Ned KonzLets you write a TextStyle into a ChangeSet.Will also read a family from a directory containing .sf2 files.Could also work for TTCFonts, but requires endianness fixes first.v2 (15 Mar): more complete font replacement."!!AbstractFont methodsFor: 'accessing' stamp: 'nk 3/15/2004 18:57'!derivativeFonts	^#()! !!AbstractFont methodsFor: 'caching' stamp: 'nk 3/15/2004 18:47'!releaseCachedState	! !!PasswordFont methodsFor: 'as yet unclassified' stamp: 'nk 3/15/2004 18:48'!releaseCachedState	baseFont releaseCachedState.! !!StrikeFont methodsFor: 'accessing' stamp: 'nk 3/15/2004 18:57'!derivativeFonts	^derivativeFonts copyWithout: nil! !!StrikeFont methodsFor: 'emphasis' stamp: 'nk 3/15/2004 18:46'!releaseCachedState	self reset.! !!TTCFont methodsFor: 'caching' stamp: 'nk 3/15/2004 18:52'!releaseCachedState	self flushCache.! !!TextStyle methodsFor: 'mime file in/out' stamp: 'nk 3/15/2004 19:09'!compressedMIMEEncodedStream	"Answer a ReadWriteStream with my compressed, stored representation as Base64"	| s ff ffcontents s2 gzs |	self fontArray do: [ :f | f releaseCachedState ].	s _ RWBinaryOrTextStream on: ''.	ff _ SmartRefStream on: s reset.	TextConstants at: #forceFontWriting put: true.	[ ff nextPut: self ] ensure: [ TextConstants at: #forceFontWriting put: false ].	ffcontents _ s contents.	ff close.	s2 _ RWBinaryOrTextStream on: ''.	gzs _ GZipWriteStream on: s2.	gzs nextPutAll: ffcontents.	gzs close.	s2 reset.	s _ RWBinaryOrTextStream on: (ByteArray new: 10000).	Base64MimeConverter mimeEncode: s2 to: s.	^s ascii; reset! !!TextStyle class methodsFor: 'mime file in/out' stamp: 'nk 1/19/2004 20:36'!collectionFromCompressedMIMEString: aString	"aString holds a compressed, Base64 representation of a SmartRefStream storage of a TextStyle.	Install the TextStyle."	| this newName style heights data |	data := (Base64MimeConverter mimeDecode: aString as: String) unzipped.	(RWBinaryOrTextStream with: data) reset; fileIn.	this := SmartRefStream scannedObject.	"now install it"	newName _ this fontArray first familyName.	this fontArray do: [:aFont | aFont familyName = newName ifFalse: [		self error: 'All must be same family']].	style _ TextConstants at: newName asSymbol ifAbsent: [		^ TextConstants at: newName asSymbol put: this].		"new family"	this fontArray do: [:aFont | "add new fonts"		heights _ style fontArray collect: [:bFont | bFont height].		(heights includes: aFont height) ifFalse: [			style fontAt: style fontArray size + 1 put: aFont]].! !!TextStyle class methodsFor: 'mime file in/out' stamp: 'nk 3/15/2004 19:37'!looseFontsFromFamily: familyName	"	TextStyle looseFontsFromFamily: 'Accuny'	TextStyle looseFontsFromFamily: 'Accujen'	TextStyle actualTextStyles keys collect: [ :k | TextStyle looseFontsFromFamily: k ]	"	| looseFonts realStyle classes |	realStyle _ TextStyle named: familyName.	classes _ ((realStyle fontArray copyWithout: nil) collect: [ :f | f class ]) asSet.	classes do: [ :cls | cls allSubInstancesDo: [ :f | f releaseCachedState ]].	Smalltalk garbageCollect.	looseFonts _ IdentitySet new.	classes do: [ :cls |		looseFonts addAll: ((cls allSubInstances select: [ :ea | ea familyName = familyName ])			reject: [ :f | realStyle fontArray anySatisfy: [ :fn | fn == f or: [ fn derivativeFonts includes: f ] ]]) ].	^looseFonts! !!TextStyle class methodsFor: 'mime file in/out' stamp: 'nk 3/15/2004 19:25'!replaceFontsIn: oldFontArray with: newStyle	"	TextStyle replaceFontsIn: (TextStyle looseFontsFromFamily: #Accuny) with: (TextStyle named: #Accuny)	"	"Try to find corresponding fonts in newStyle and substitute them for the fonts in oldFontArray"	newStyle fontArray do: [ :newFont | newFont releaseCachedState ].	oldFontArray do: [ :oldFont | | newFont |		oldFont reset.		newFont _ (newStyle fontOfPointSize: oldFont pointSize) emphasis: oldFont emphasis.		oldFont becomeForward: newFont ].	StringMorph allSubInstancesDo: [ :s | s layoutChanged ].	TextMorph allSubInstancesDo: [ :s | s layoutChanged ].	SystemWindow allInstancesDo: [ :w | [ w update: #relabel ] on: Error do: [ :ex | ] ].	World ifNotNilDo: [ :w | w changed ].! !!TextStyle class methodsFor: 'mime file in/out' stamp: 'nk 3/15/2004 19:05'!replaceStyle: oldStyle with: newStyle	"	TextStyle replaceStyle: (TextStyle named: #AccunyOLD) with: (TextStyle named: #Accuny)	"	"Try to find corresponding fonts in newStyle and substitute the fonts in oldStyle for them."	| oldKeys |	oldKeys _ Set new.	TextConstants keysAndValuesDo: [ :k :v | v = oldStyle ifTrue: [ oldKeys add: k ]].	oldKeys remove: #DefaultTextStyle ifAbsent: [].	oldKeys remove: #DefaultFixedTextStyle ifAbsent: [].	self replaceFontsIn: oldStyle fontArray with: newStyle.	oldStyle becomeForward: newStyle.	oldKeys do: [ :k | TextConstants removeKey: k ].! !!TextStyle class methodsFor: 'mime file in/out' stamp: 'nk 3/15/2004 18:39'!writeSF2FamilyNamed: familyName inDirectory: directoryName toChangeSet: csName	"	TextStyle writeSF2FamilyNamed: 'Accuny' inDirectory: 'AccunyCorrectedFeb252004Beta Folder' toChangeSet: 'AccunyInstall'.	"	| oldDefaultDirectory family |	oldDefaultDirectory _ FileDirectory default.	FileDirectory setDefaultDirectory: (FileDirectory default fullNameFor:  directoryName).	[ family _ StrikeFont readStrikeFont2Family: familyName ]		ensure: [ FileDirectory setDefaultDirectory: oldDefaultDirectory fullName ].		family do: [ :f | f reset ].	self writeStyle: (TextStyle fontArray: family) named: familyName toChangeSet: csName! !!TextStyle class methodsFor: 'mime file in/out' stamp: 'nk 3/15/2004 19:46'!writeStyle: aTextStyle named: familyName toChangeSet: csName	"Write the text style to a change set, with a postscript that will re-load it.	NOTE: to do TTCFonts, you have to have a working ShortPointArray endianness conversion."	"	TTCFont recreateCache.	TextStyle writeStyle: (TextStyle named: #Arial) named: 'Arial' toChangeSet: 'ArialInstall'.		TextStyle writeStyle: (TextStyle named: #Accuny) named: 'Accuny' toChangeSet: 'AccunyInstall2'.	"	| cs mimeStream |	cs _ ChangeSet basicNewNamed: csName.	cs adoptSelector: #collectionFromCompressedMIMEString: forClass: self class.	cs adoptSelector: #replaceStyle:with: forClass: self class.	cs adoptSelector: #replaceFontsIn:with: forClass: self class.	cs adoptSelector: #looseFontsFromFamily: forClass: self class.	((aTextStyle fontArray copyWithout: nil) collect: [ :f | f class ]) asSet do: [ :cls  | 		cs adoptSelector: #derivativeFonts forClass: cls.		cs adoptSelector: #releaseCachedState forClass: cls ].	cs preambleString: (String streamContents: [ :s |		s nextPutAll: '"Change Set:		'; nextPutAll: csName; cr;		nextPutAll: 'Date:		'; print: Date today; cr;		nextPutAll: 'Author:		'; nextPutAll: Utilities authorName; cr; cr;		nextPutAll: 'Installs the text style '''; nextPutAll: familyName; nextPutAll: ''''; cr;		nextPutAll: 'from a compressed MIME encoding in the postscript."'; cr. ]).	mimeStream _ aTextStyle compressedMIMEEncodedStream.	cs postscriptString: (String streamContents: [ :s | s		nextPutAll: '"Postscript:'; cr;		nextPutAll: 'Install the text style from the compressed MIME encoding, and replace the old one.';		nextPut: $"; cr;		nextPutAll: 'TextConstants at: #';		nextPutAll: familyName;		nextPutAll: ' ifPresent: [ :oldStyle | TextConstants at: #';		nextPutAll: familyName;		nextPutAll: 'OLD put: oldStyle. TextConstants removeKey: #';		nextPutAll: familyName;		nextPutAll: ' ].';		cr;		nextPutAll: 'TextStyle collectionFromCompressedMIMEString: ';		cr;		print: mimeStream contents;		nextPut: $.; cr; cr;		nextPutAll: 'TextConstants at: #';		nextPutAll: familyName;		nextPutAll: 'OLD ifPresent: [ :oldStyle | TextStyle replaceStyle: oldStyle with: (TextStyle named: ''';		nextPutAll: familyName;		nextPutAll: ''') ].';		cr;		nextPutAll: 'TextStyle replaceFontsIn: (TextStyle looseFontsFromFamily: ''';		nextPutAll: familyName;		nextPutAll: ''') with: (TextStyle named: ''';		nextPutAll: familyName;		nextPutAll: ''').';				cr ]).	cs fileOut.! !!TTCFont reorganize!('accessing' ascent baseKern descent descentKern emphasis emphasis: emphasized: familyName familySizeFace fontNameWithPointSize height lineGrid maxAscii minAscii name pixelSize pointSize pointSize: textStyle)('public' depth foregroundColor size widthOf:)('friend' cache derivativeFont: derivativeFonts displayString:on:from:to:at:kern: flushCache initialize installOn:foregroundColor:backgroundColor: recreateCache ttcDescription ttcDescription:)('private' at:put: computeForm: formOf: indexOfSubfamilyName:)('copying' copy deepCopy objectForDataStream: veryDeepCopyWith:)('file in/out' encodedForRemoteCanvas)('testing' isRegular isTTCFont)('objects from disk' convertToCurrentVersion:refStream:)('printing' printOn:)('caching' releaseCachedState)!!AbstractFont reorganize!('accessing' characterToGlyphMap derivativeFonts isRegular xTable)('measuring' widthOf: widthOfString: widthOfString:from:to:)('displaying' displayString:on:from:to:at:kern: installOn:foregroundColor:backgroundColor:)('testing' isTTCFont)('caching' releaseCachedState)!