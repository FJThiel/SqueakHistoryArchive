'From Squeak2.9alpha of 5 August 2000 [latest update: #3296] on 24 January 2001 at 10:38:56 pm'!"Change Set:		optionalPanes-swDate:			24 January 2001Author:			Scott WallaceAllows the model of a code-bearing tool first choice over whether the two standard kinds of optional panes, viz. annotation panes and button panes, should be shown.  The protocols by which models indicate their pleasure here are:	wantsAnnotationPane	wantsOptionalButtonsAs an example, sets up Debuggers so they always show the button pane, regardless of the preference.  If this rouses too much ire, we may need to allow even more detailed control, but the current theory is that even traditionalist users who eschew these panes in most cases will appreciate them in the debugger (time will tell.)Note that this makes it easy now for users to override methods in individual CodeHolder subclasses to obtain the panes they want for the tools they want.Makes the default heights of the optional button and annotation panes be parameters held on to by Preferences, so that the knowledgeable user can adjust these by getting a Parameters inspector via the title-bar menu of a Preferences panel"!!StringHolder methodsFor: 'as yet unclassified' stamp: 'sw 1/24/2001 21:25'!wantsAnnotationPane	"Answer whether the receiver, seen in some browser window, would like to have the so-called  annotationpane included.  By default, various browsers defer to the global preference 'optionalButtons' -- but individual subclasses can insist to the contrary."	^ Preferences annotationPanes! !!StringHolder methodsFor: 'as yet unclassified' stamp: 'sw 1/24/2001 18:57'!wantsOptionalButtons	"Answer whether the receiver, seen in some browser window, would like to have the so-called optional button pane included.  By default, various browsers defer to the global preference 'optionalButtons' -- but individual subclasses can insist to the contrary."	^ Preferences optionalButtons! !!CodeHolder methodsFor: 'annotation' stamp: 'sw 1/24/2001 22:30'!defaultAnnotationPaneHeight	"Answer the receiver's preferred default height for new annotation panes."	^ Preferences parameterAt: #defaultAnnotationPaneHeight default: [25]! !!CodeHolder methodsFor: 'annotation' stamp: 'sw 1/24/2001 22:30'!defaultButtonPaneHeight	"Answer the user's preferred default height for new button panes."	^ Preferences parameterAt: #defaultButtonPaneHeight default: [25]! !!CodeHolder methodsFor: 'misc' stamp: 'sw 1/24/2001 22:33'!addOptionalAnnotationsTo: window at: fractions plus: verticalOffset	"Add an annotation pane to the window if preferences indicate a desire for it, and return the incoming verticalOffset plus the height of the added pane, if any"	| aTextMorph delta |	self wantsAnnotationPane ifFalse: [^ verticalOffset].	aTextMorph _ PluggableTextMorph 		on: self		text: #annotation 		accept: nil		readSelection: nil		menu: #annotationPaneMenu:shifted:.	aTextMorph		askBeforeDiscardingEdits: false;		borderWidth: 1;		borderColor: Color lightGray.	delta _ self defaultAnnotationPaneHeight.	window 		addMorph: aTextMorph 		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@verticalOffset corner: 0@(verticalOffset + delta))).	^ verticalOffset + delta! !!CodeHolder methodsFor: 'misc' stamp: 'sw 1/24/2001 22:31'!addOptionalButtonsTo: window at: fractions plus: verticalOffset	"If the receiver wishes it, add a button pane to the window, and answer the verticalOffset plus the height added"	| delta buttons |	self wantsOptionalButtons ifFalse: [^verticalOffset].	delta _ self defaultButtonPaneHeight.	buttons _ self optionalButtonRow 		color: (Display depth <= 8 ifTrue: [Color transparent] ifFalse: [Color gray alpha: 0.2]);		borderWidth: 1;		borderColor: Color lightGray.	window 		addMorph: buttons		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@verticalOffset corner: 0@(verticalOffset + delta))).	^ verticalOffset + delta! !!Browser methodsFor: 'initialize-release' stamp: 'sw 1/24/2001 21:24'!openEditString: aString        "Create a pluggable version of all the views for a Browser, including views and controllers."        | systemCategoryListView classListView         messageCategoryListView messageListView browserCodeView topView switchView underPane y optionalButtonsView annotationPane |        self couldOpenInMorphic ifTrue: [^ self openAsMorphEditing: aString].        "Sensor leftShiftDown ifTrue: [^ self openAsMorphEditing: aString].                uncomment-out for testing morphic browser embedded in mvc project"        topView _ StandardSystemView new model: self.        topView borderWidth: 1. "label and minSize taken care of by caller"        systemCategoryListView _ PluggableListView on: self                list: #systemCategoryList                selected: #systemCategoryListIndex                changeSelected: #systemCategoryListIndex:                menu: #systemCategoryMenu:                keystroke: #systemCatListKey:from:.        systemCategoryListView window: (0 @ 0 extent: 50 @ 70).        topView addSubView: systemCategoryListView.        classListView _ PluggableListView on: self                list: #classList                selected: #classListIndex                changeSelected: #classListIndex:                menu: #classListMenu:shifted:                keystroke: #classListKey:from:.        classListView window: (0 @ 0 extent: 50 @ 62).        topView addSubView: classListView toRightOf: systemCategoryListView.        switchView _ self buildInstanceClassSwitchView.        switchView borderWidth: 1.        topView addSubView: switchView below: classListView.        messageCategoryListView _ PluggableListView on: self                list: #messageCategoryList                selected: #messageCategoryListIndex                changeSelected: #messageCategoryListIndex:                menu: #messageCategoryMenu:.        messageCategoryListView window: (0 @ 0 extent: 50 @ 70).        topView addSubView: messageCategoryListView toRightOf: classListView.        messageListView _ PluggableListView on: self                list: #messageList                selected: #messageListIndex                changeSelected: #messageListIndex:                menu: #messageListMenu:shifted:                keystroke: #messageListKey:from:.        messageListView window: (0 @ 0 extent: 50 @ 70).        messageListView menuTitleSelector: #messageListSelectorTitle.        topView addSubView: messageListView toRightOf: messageCategoryListView.       self wantsAnnotationPane                ifTrue:                        [annotationPane _ PluggableTextView on: self                                text: #annotation accept: nil                                readSelection: nil menu: nil.                        annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).                        topView addSubView: annotationPane below: systemCategoryListView.                        underPane _ annotationPane.                        y _ 110 - self optionalAnnotationHeight]                ifFalse: [                        underPane _ systemCategoryListView.                        y _ 110].        self wantsOptionalButtons ifTrue:                [optionalButtonsView _ self buildOptionalButtonsView.                optionalButtonsView borderWidth: 1.                topView addSubView: optionalButtonsView below: underPane.                underPane _ optionalButtonsView.                y _ y - self optionalButtonHeight].        browserCodeView _ PluggableTextView on: self                         text: #contents accept: #contents:notifying:                        readSelection: #contentsSelection menu: #codePaneMenu:shifted:.        browserCodeView window: (0@0 extent: 200@y).        topView addSubView: browserCodeView below: underPane.        aString ifNotNil: [browserCodeView editString: aString.                        browserCodeView hasUnacceptedEdits: true].        topView setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).        ^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sw 1/24/2001 21:24'!openMessageCatEditString: aString        "Create a pluggable version of the views for a Browser that just shows one message category."        | messageCategoryListView messageListView browserCodeView topView annotationPane underPane y optionalButtonsView |        self couldOpenInMorphic ifTrue: [^ self openAsMorphMsgCatEditing: aString].        topView _ (StandardSystemView new) model: self.        topView borderWidth: 1.                "label and minSize taken care of by caller"        messageCategoryListView _ PluggableListView on: self                list: #messageCatListSingleton                selected: #indexIsOne                 changeSelected: #indexIsOne:                menu: #messageCategoryMenu:.        messageCategoryListView window: (0 @ 0 extent: 200 @ 12).        topView addSubView: messageCategoryListView.        messageListView _ PluggableListView on: self                list: #messageList                selected: #messageListIndex                changeSelected: #messageListIndex:                menu: #messageListMenu:shifted:                keystroke: #messageListKey:from:.        messageListView menuTitleSelector: #messageListSelectorTitle.        messageListView window: (0 @ 0 extent: 200 @ 70).        topView addSubView: messageListView below: messageCategoryListView.        self wantsAnnotationPane                ifTrue:                        [annotationPane _ PluggableTextView on: self                                text: #annotation accept: nil                                readSelection: nil menu: nil.                        annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).                        topView addSubView: annotationPane below: messageListView.                        underPane _ annotationPane.                        y _ (200 - 12 - 70) - self optionalAnnotationHeight]                ifFalse:                        [underPane _ messageListView.                        y _ (200 - 12 - 70)].        self wantsOptionalButtons ifTrue:                [optionalButtonsView _ self buildOptionalButtonsView.                optionalButtonsView borderWidth: 1.                topView addSubView: optionalButtonsView below: underPane.                underPane _ optionalButtonsView.                y _ y - self optionalButtonHeight].        browserCodeView _ PluggableTextView on: self                         text: #contents accept: #contents:notifying:                        readSelection: #contentsSelection menu: #codePaneMenu:shifted:.        browserCodeView window: (0@0 extent: 200@y).        topView addSubView: browserCodeView below: underPane.        aString ifNotNil: [browserCodeView editString: aString.                        browserCodeView hasUnacceptedEdits: true].        topView setUpdatablePanesFrom: #(messageCatListSingleton messageList).        ^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sw 1/24/2001 21:24'!openMessageEditString: aString	"Create a pluggable version of the views for a Browser that just shows one message."	| messageListView browserCodeView topView annotationPane underPane y |	Smalltalk isMorphic ifTrue: [^ self openAsMorphMessageEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	messageListView _ PluggableListView on: self		list: #messageListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #messageListMenu:shifted:.	messageListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: messageListView.	 self wantsAnnotationPane		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageListView.			underPane _ annotationPane.			y _ (200 - 12) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageListView.			y _ 200 - 12].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sw 1/24/2001 21:24'!openOnClassWithEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	| classListView messageCategoryListView messageListView browserCodeView topView switchView annotationPane underPane y optionalButtonsView |	Smalltalk isMorphic ifTrue: [^ self openAsMorphClassEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	classListView _ PluggableListView on: self		list: #classListSingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #classListMenu:shifted:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 100 @ 12).	topView addSubView: classListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 100 @ 70).	topView addSubView: messageCategoryListView below: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 100 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	switchView _ self buildInstanceClassSwitchView.	switchView borderWidth: 1.	switchView 		window: switchView window 		viewport: (classListView viewport topRight 					corner: messageListView viewport topRight).	topView addSubView: switchView toRightOf: classListView.	 self wantsAnnotationPane		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: messageCategoryListView.			underPane _ annotationPane.			y _ (200-12-70) - self optionalAnnotationHeight]		ifFalse:			[underPane _ messageCategoryListView.			y _ (200-12-70)].	self wantsOptionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(messageCategoryList messageList).	^ topView! !!Browser methodsFor: 'initialize-release' stamp: 'sw 1/24/2001 21:24'!openSystemCatEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers.  The top list view is of the currently selected system class category--a single item list."	| systemCategoryListView classListView messageCategoryListView messageListView browserCodeView topView switchView y annotationPane underPane optionalButtonsView |	Smalltalk isMorphic ifTrue: [^ self openAsMorphSysCatEditing: aString].	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	systemCategoryListView _ PluggableListView on: self		list: #systemCategorySingleton		selected: #indexIsOne 		changeSelected: #indexIsOne:		menu: #systemCatSingletonMenu:		keystroke: #systemCatSingletonKey:from:.	systemCategoryListView window: (0 @ 0 extent: 200 @ 12).	topView addSubView: systemCategoryListView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:shifted:		keystroke: #classListKey:from:.	classListView window: (0 @ 0 extent: 67 @ 62).	topView addSubView: classListView below: systemCategoryListView.	messageCategoryListView _ PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 66 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	switchView _ self buildInstanceClassSwitchView.	switchView 		window: switchView window 		viewport: (classListView viewport bottomLeft 					corner: messageCategoryListView viewport bottomLeft).	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView menuTitleSelector: #messageListSelectorTitle.	messageListView window: (0 @ 0 extent: 67 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	 self wantsAnnotationPane		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: switchView.			y _ 110 - 12 - self optionalAnnotationHeight.			underPane _ annotationPane]		ifFalse:			[y _ 110 - 12.			underPane _ switchView].	self wantsOptionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	topView setUpdatablePanesFrom: #(classList messageCategoryList messageList).	^ topView! !!ChangeList class methodsFor: 'instance creation' stamp: 'sw 1/24/2001 21:24'!open: aChangeList name: aString multiSelect: multiSelect	"Create a standard system view for the messageSet, whose label is aString.	The listView may be either single or multiple selection type"	| topView listHeight annoHeight optButtonHeight codeHeight aListView underPane annotationPane buttonsView aBrowserCodeView |	Smalltalk isMorphic		ifTrue: [^ self openAsMorph: aChangeList name: aString multiSelect: multiSelect].	listHeight _ 70.	annoHeight _ 10.	optButtonHeight _ aChangeList optionalButtonHeight.	codeHeight _ 110.	topView _ (StandardSystemView new)		model: aChangeList;		label: aString;		minimumSize: 200 @ 120;		borderWidth: 1.	aListView _ (multiSelect			ifTrue: [PluggableListViewOfMany]			ifFalse: [PluggableListView])		on: aChangeList		list: #list		selected: #listIndex		changeSelected: #toggleListIndex:		menu: (aChangeList showsVersions			ifTrue: [#versionsMenu:]			ifFalse: [#changeListMenu:])		keystroke: #messageListKey:from:.	aListView window: (0 @ 0 extent: 200 @ listHeight).	topView addSubView: aListView.	underPane _ aListView.	aChangeList wantsAnnotationPane		ifTrue:			[annotationPane _ PluggableTextView				on: aChangeList				text: #annotation				accept: nil				readSelection: nil				menu: nil.			annotationPane window: (0 @ 0 extent: 200 @ 10).			topView addSubView: annotationPane below: underPane.			underPane _ annotationPane.			codeHeight _ codeHeight - annoHeight].	aChangeList wantsOptionalButtons		ifTrue:			[buttonsView _ aChangeList optionalButtonsView.			buttonsView borderWidth: 1.			topView addSubView: buttonsView below: underPane.			underPane _ buttonsView.			codeHeight _ codeHeight - optButtonHeight].	aBrowserCodeView _ PluggableTextView			on: aChangeList			text: #contents			accept: #contents:			readSelection: #contentsSelection			menu: #codePaneMenu:shifted:.	aBrowserCodeView			controller: ReadOnlyTextController new;			window: (0 @ 0 extent: 200 @ codeHeight).	topView addSubView: aBrowserCodeView below: underPane.	topView controller open.! !!ChangeSorter methodsFor: 'creation' stamp: 'sw 1/24/2001 21:24'!openAsMorphIn: window rect: rect	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."	| csListHeight msgListHeight baseline csMsgListHeight annoHeight |	contents _ ''.	csListHeight _ 0.25.	msgListHeight _ 0.25.	annoHeight _ 0.05.	csMsgListHeight _ csListHeight + msgListHeight.	self addDependent: window.		"so it will get changed: #relabel"	window addMorph: ((PluggableListMorphByItem on: self				list: #changeSetList				selected: #currentCngSet				changeSelected: #showChangeSetNamed:				menu: #changeSetMenu:shifted:				keystroke: #changeSetListKey:from:)			autoDeselect: false)		frame: (((0@0 extent: 0.5@csListHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: (PluggableListMorphByItem on: self				list: #classList				selected: #currentClassName				changeSelected: #currentClassName:				menu: #classMenu:shifted:				keystroke: #classListKey:from:)		frame: (((0.5@0 extent: 0.5@csListHeight)			scaleBy: rect extent) translateBy: rect origin).	window addMorph: ((PluggableListMorphByItem on: self				list: #messageList				selected: #currentSelector				changeSelected: #currentSelector:				menu: #messageMenu:shifted:				keystroke: #messageListKey:from:)			menuTitleSelector: #messageListSelectorTitle)		frame: (((0@csListHeight extent: 1@msgListHeight)			scaleBy: rect extent) translateBy: rect origin).	 self wantsAnnotationPane		ifFalse:			[baseline _ csMsgListHeight]		ifTrue:			[baseline _ csMsgListHeight + annoHeight.			window addMorph: (	(PluggableTextMorph on: self						text: #annotation accept: nil						readSelection: nil menu: nil)					askBeforeDiscardingEdits: false)				frame: (((0@csMsgListHeight extent: 1@annoHeight)					scaleBy: rect extent) translateBy: rect origin)].	window addMorph: (PluggableTextMorph on: self 				text: #contents accept: #contents:notifying:				readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (((0@baseline extent: 1@(1 - baseline))			scaleBy: rect extent) translateBy: rect origin).! !!ChangeSorter methodsFor: 'creation' stamp: 'sw 1/24/2001 21:24'!openView: topView offsetBy: offset	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 360@0."	| classView messageView codeView cngSetListView basePane annoPane annoHeight |	contents _ ''.	annoHeight _ 20.	self addDependent: topView. "so it will get changed: #relabel"	cngSetListView _ PluggableListViewByItem on: self		list: #changeSetList		selected: #currentCngSet		changeSelected: #showChangeSetNamed:		menu: #changeSetMenu:shifted:		keystroke: #changeSetListKey:from:.	cngSetListView window: ((0@0 extent: 180@100) translateBy: offset).	topView addSubView: cngSetListView.	classView _ PluggableListViewByItem on: self		list: #classList		selected: #currentClassName		changeSelected: #currentClassName:		menu: #classMenu:shifted:		keystroke: #classListKey:from:.	classView window: ((0@0 extent: 180@100) translateBy: offset).	topView addSubView: classView toRightOf: cngSetListView.	messageView _ PluggableListViewByItem on: self		list: #messageList		selected: #currentSelector		changeSelected: #currentSelector:		menu: #messageMenu:shifted:		keystroke: #messageListKey:from:.	messageView menuTitleSelector: #messageListSelectorTitle.	messageView window: ((0@0 extent: 360@100) translateBy: offset).	topView addSubView: messageView below: cngSetListView.	 self wantsAnnotationPane		ifFalse:			[basePane _ messageView]		ifTrue:			[annoPane _ PluggableTextView on: self				text: #annotation				accept: nil				readSelection: nil				menu: nil.			annoPane window: ((0@0 extent: 360@annoHeight) translateBy: offset).			topView addSubView: annoPane below: messageView.			basePane _ annoPane].	codeView _ PluggableTextView on: self 		text: #contents		accept: #contents:notifying:		readSelection: #contentsSelection		menu: #codePaneMenu:shifted:.	codeView window: ((0 @ 0 extent: 360 @ 180) translateBy: offset).	topView addSubView: codeView below: basePane.! !!Debugger methodsFor: 'initialize' stamp: 'sw 1/24/2001 22:34'!buildMVCDebuggerViewLabel: aString minSize: aPoint	"Build an MVC debugger view around the receiver, and return the StandardSystemView thus created."	| topView stackListView stackCodeView rcvrVarView rcvrValView ctxtVarView ctxtValView deltaY underPane annotationPane buttonsView |	self expandStack.	topView _ StandardSystemView new model: self.	topView borderWidth: 1.	stackListView _ PluggableListView on: self			list: #contextStackList			selected: #contextStackIndex			changeSelected: #toggleContextStackIndex:			menu: #contextStackMenu:shifted:			keystroke: #contextStackKey:from:.		stackListView menuTitleSelector: #messageListSelectorTitle.		stackListView window: (0 @ 0 extent: 150 @ 50).		topView addSubView: stackListView.	deltaY _ 0.	 self wantsAnnotationPane		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 150@self optionalAnnotationHeight).			topView addSubView: annotationPane below: stackListView.			deltaY _ deltaY + self optionalAnnotationHeight.			underPane _ annotationPane]		ifFalse:			[underPane _ stackListView].	self wantsOptionalButtons		ifTrue:			[buttonsView _ self buildMVCOptionalButtonsButtonsView.			buttonsView borderWidth: 1.			topView addSubView: buttonsView below: underPane.			underPane _ buttonsView.			deltaY _ deltaY + self optionalButtonHeight].	stackCodeView _ PluggableTextView on: self			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.		stackCodeView window: (0 @ 0 extent: 150 @ (75 - deltaY)).		topView addSubView: stackCodeView below: underPane.	rcvrVarView _ PluggableListView on: self receiverInspector			list: #fieldList			selected: #selectionIndex			changeSelected: #toggleIndex:			menu: #fieldListMenu:			keystroke: #inspectorKey:from:.		rcvrVarView window: (0 @ 0 extent: 25 @ (50 - deltaY)).		topView addSubView: rcvrVarView below: stackCodeView.	rcvrValView _ PluggableTextView on: self receiverInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.		rcvrValView window: (0 @ 0 extent: 50 @ (50 - deltaY)).		topView addSubView: rcvrValView toRightOf: rcvrVarView.	ctxtVarView _ PluggableListView on: self contextVariablesInspector			list: #fieldList			selected: #selectionIndex			changeSelected: #toggleIndex:			menu: #fieldListMenu:			keystroke: #inspectorKey:from:.		ctxtVarView window: (0 @ 0 extent: 25 @ (50 - deltaY)).		topView addSubView: ctxtVarView toRightOf: rcvrValView.	ctxtValView _ PluggableTextView on: self contextVariablesInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.		ctxtValView window: (0 @ 0 extent: 50 @ (50 - deltaY)).		topView addSubView: ctxtValView toRightOf: ctxtVarView.	topView label: aString.	topView minimumSize: aPoint.	^ topView! !!Debugger methodsFor: 'initialize' stamp: 'sw 1/24/2001 21:22'!wantsOptionalButtons	"The debugger benefits so majorly from the optional buttons that we put them up regardless of the global setting.  Some traditionalists will want to change this method manually!!"	^ true! !!FileList class methodsFor: 'instance creation' stamp: 'sw 1/24/2001 21:08'!open	"Open a view of an instance of me on the default directory."	"FileList open"	| dir aFileList topView volListView templateView fileListView fileContentsView underPane pHeight |	Smalltalk isMorphic ifTrue: [^ self openAsMorph].	dir _ FileDirectory default.	aFileList _ self new directory: dir.	topView _ StandardSystemView new.	topView		model: aFileList;		label: dir pathName;		minimumSize: 200@200.	topView borderWidth: 1.	volListView _ PluggableListView on: aFileList		list: #volumeList		selected: #volumeListIndex		changeSelected: #volumeListIndex:		menu: #volumeMenu:.	volListView autoDeselect: false.	volListView window: (0@0 extent: 80@45).	topView addSubView: volListView.	templateView _ PluggableTextView on: aFileList		text: #pattern		accept: #pattern:.	templateView askBeforeDiscardingEdits: false.	templateView window: (0@0 extent: 80@15).	topView addSubView: templateView below: volListView.	self wantsOptionalButtons		ifTrue:			[underPane _ aFileList optionalButtonView.			underPane isNil				ifTrue: [pHeight _ 60]				ifFalse: [					topView addSubView: underPane toRightOf: volListView.					pHeight _ 60 - aFileList optionalButtonHeight]]		ifFalse:			[underPane _ nil.			pHeight _ 60].	fileListView _ PluggableListView on: aFileList		list: #fileList		selected: #fileListIndex		changeSelected: #fileListIndex:		menu: #fileListMenu:.	fileListView window: (0@0 extent: 120@pHeight).	underPane isNil		ifTrue: [topView addSubView: fileListView toRightOf: volListView]		ifFalse: [topView addSubView: fileListView below: underPane].	fileListView controller terminateDuringSelect: true.  "Pane to left may change under scrollbar"	fileContentsView _ PluggableTextView on: aFileList		text: #contents accept: #put:		readSelection: #contentsSelection menu: #fileContentsMenu:shifted:.	fileContentsView window: (0@0 extent: 200@140).	topView addSubView: fileContentsView below: templateView.	topView controller open! !!FileList class methodsFor: 'instance creation' stamp: 'sw 1/24/2001 21:09'!openAsMorph	"Open a morphic view of a FileList on the default directory."	| dir aFileList window fileListTop |	dir _ FileDirectory default.	aFileList _ self new directory: dir.	window _ (SystemWindow labelled: dir pathName) model: aFileList.	window addMorph: ((PluggableListMorph on: aFileList list: #volumeList selected: #volumeListIndex				changeSelected: #volumeListIndex: menu: #volumeMenu:) autoDeselect: false)		frame: (0@0 corner: 0.3@0.2).	window addMorph: (PluggableTextMorph on: aFileList text: #pattern accept: #pattern:)		frame: (0@0.2 corner: 0.3@0.3).	aFileList wantsOptionalButtons		ifTrue:			[window addMorph: aFileList optionalButtonRow frame: (0.3 @ 0 corner: 1 @ 0.08).			fileListTop _ 0.08]		ifFalse:			[fileListTop _ 0].	window addMorph: (PluggableListMorph on: aFileList list: #fileList selected: #fileListIndex				changeSelected: #fileListIndex: menu: #fileListMenu:)		frame: (0.3 @ fileListTop corner: 1@0.3).	window addMorph: (PluggableTextMorph on: aFileList text: #contents accept: #put:			readSelection: #contentsSelection menu: #fileContentsMenu:shifted:)		frame: (0@0.3 corner: 1@1).	^ window! !!MessageSet class methodsFor: 'instance creation' stamp: 'sw 1/24/2001 21:24'!open: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	| topView aListView aBrowserCodeView aTextView underPane y buttonsView winWidth |	Smalltalk isMorphic ifTrue: [^ self openAsMorph: aMessageSet name: aString].	winWidth _ 200.	topView _ (StandardSystemView new) model: aMessageSet.	topView label: aString.	topView minimumSize: winWidth @ 120.	topView borderWidth: 1.	aListView _ PluggableListView on: aMessageSet		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	aListView  menuTitleSelector: #messageListSelectorTitle.	aListView window: (0 @ 0 extent: winWidth @ 100).	topView addSubView: aListView.	aMessageSet  wantsAnnotationPane		ifTrue:			[aTextView _ PluggableTextView on: aMessageSet 			text: #annotation accept: nil			readSelection: nil menu: nil.			aTextView window: (0 @ 0 extent: winWidth @ 24).			topView addSubView: aTextView below: aListView.			underPane _ aTextView.			y _ 300 - 24.			aTextView askBeforeDiscardingEdits: false]		ifFalse:			[underPane _ aListView.			y _ 300].	aMessageSet wantsOptionalButtons ifTrue:		[buttonsView _ aMessageSet buildOptionalButtonsView.		topView addSubView: buttonsView below: underPane.		underPane _ buttonsView.		y _ y - aMessageSet optionalButtonHeight].	aBrowserCodeView _ PluggableTextView on: aMessageSet 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	aBrowserCodeView window: (0 @ 0 extent: winWidth @ y).	topView addSubView: aBrowserCodeView below: underPane.	topView setUpdatablePanesFrom: #(messageList).	topView controller open! !!PackageBrowser methodsFor: 'initialize-release' stamp: 'sw 1/24/2001 21:24'!openAsMorphEditing: editString 	"Create a pluggable version of all the views for a Browser, including views and controllers."	"PackageBrowser openBrowser"	| listHeight buttonHeight window switches codePane dragNDropFlag baseline annoHeight optButtonHeight |	listHeight _ 0.4.	buttonHeight _ 0.09.	annoHeight _ 0.05.	optButtonHeight _ 0.08.	dragNDropFlag _ Preferences browseWithDragNDrop.	(window _ SystemWindow labelled: 'later')		model: self.	window addMorph: (PluggableListMorph				on: self				list: #packageList				selected: #packageListIndex				changeSelected: #packageListIndex:				menu: #packageMenu:				keystroke: #packageListKey:from:)		frame: (0 @ 0 extent: 0.15 @ listHeight).	window addMorph: ((PluggableListMorph				on: self				list: #systemCategoryList				selected: #systemCategoryListIndex				changeSelected: #systemCategoryListIndex:				menu: #systemCategoryMenu:				keystroke: #systemCatListKey:from:)			enableDrag: false;			enableDrop: dragNDropFlag)		frame: (0.15 @ 0 extent: 0.2 @ listHeight).	window addMorph: ((PluggableListMorph				on: self				list: #classList				selected: #classListIndex				changeSelected: #classListIndex:				menu: #classListMenu:shifted:				keystroke: #classListKey:from:)			enableDragNDrop: dragNDropFlag)		frame: (0.35 @ 0 extent: 0.25 @ (listHeight - buttonHeight)).	switches _ self buildMorphicSwitches.	window addMorph: switches		frame: (0.35 @ (listHeight - buttonHeight) extent: 0.25 @ buttonHeight).	switches borderWidth: 0.	window addMorph: ((PluggableListMorph				on: self				list: #messageCategoryList				selected: #messageCategoryListIndex				changeSelected: #messageCategoryListIndex:				menu: #messageCategoryMenu:)			enableDrag: false;			enableDrop: dragNDropFlag)		frame: (0.6 @ 0 extent: 0.15 @ listHeight).	window addMorph: ((PluggableListMorph				on: self				list: #messageList				selected: #messageListIndex				changeSelected: #messageListIndex:				menu: #messageListMenu:shifted:				keystroke: #messageListKey:from:)			enableDragNDrop: dragNDropFlag;			menuTitleSelector: #messageListSelectorTitle)		frame: (0.75 @ 0 extent: 0.25 @ listHeight).	 self wantsAnnotationPane		ifFalse:			[baseline _ listHeight]		ifTrue:			[window addMorph: ((PluggableTextMorph on: self						text: #annotation accept: nil						readSelection: nil menu: nil)					askBeforeDiscardingEdits: false)				frame: (0@listHeight extent: 1@annoHeight).			baseline _ listHeight + annoHeight].	self wantsOptionalButtons		ifTrue:			[window addMorph: self optionalButtonRow				frame: (0@baseline extent: 1@optButtonHeight).			baseline _ baseline + optButtonHeight].	codePane _ PluggableTextMorph				on: self				text: #contents				accept: #contents:notifying:				readSelection: #contentsSelection				menu: #codePaneMenu:shifted:.	editString		ifNotNil:			[codePane editString: editString.			codePane hasUnacceptedEdits: true].	window addMorph: codePane frame: (0 @ baseline extent: 1 @(1 - baseline)).	window setUpdatablePanesFrom:		#(packageList systemCategoryList classList messageCategoryList messageList ).	^ window! !!PackageBrowser methodsFor: 'package list' stamp: 'sw 1/24/2001 21:25'!openEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	"PackageBrowser openBrowser"	| packageListView systemCategoryListView classListView messageCategoryListView	  messageListView browserCodeView topView switchView annotationPane underPane y optionalButtonsView |	self couldOpenInMorphic ifTrue: [^ self openAsMorphEditing: aString].	topView := StandardSystemView new model: self.	topView borderWidth: 1.  "label and minSize taken care of by caller"	packageListView := PluggableListView on: self		list: #packageList		selected: #packageListIndex		changeSelected: #packageListIndex:		menu: #packageMenu:.	packageListView window: (0 @ 0 extent: 20 @ 70).	topView addSubView: packageListView.	systemCategoryListView := PluggableListView on: self		list: #systemCategoryList		selected: #systemCategoryListIndex		changeSelected: #systemCategoryListIndex:		menu: #systemCategoryMenu:.	systemCategoryListView window: (20 @ 0 extent: 30 @ 70).	topView addSubView: systemCategoryListView.	classListView := PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: #classListMenu:shifted:.	classListView window: (0 @ 0 extent: 50 @ 62).	topView addSubView: classListView toRightOf: systemCategoryListView.	switchView := self buildInstanceClassSwitchView.	switchView borderWidth: 1.	topView addSubView: switchView below: classListView.	messageCategoryListView := PluggableListView on: self		list: #messageCategoryList		selected: #messageCategoryListIndex		changeSelected: #messageCategoryListIndex:		menu: #messageCategoryMenu:.	messageCategoryListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageCategoryListView toRightOf: classListView.	messageListView := PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #messageListMenu:shifted:		keystroke: #messageListKey:from:.	messageListView window: (0 @ 0 extent: 50 @ 70).	topView addSubView: messageListView toRightOf: messageCategoryListView.	self wantsAnnotationPane		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil				readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 200@self optionalAnnotationHeight).			topView addSubView: annotationPane below: packageListView.			underPane _ annotationPane.			y _ 110 - self optionalAnnotationHeight]		ifFalse:			[underPane _ packageListView.			y _ 110].	self wantsOptionalButtons ifTrue:		[optionalButtonsView _ self buildOptionalButtonsView.		optionalButtonsView borderWidth: 1.		topView addSubView: optionalButtonsView below: underPane.		underPane _ optionalButtonsView.		y _ y - self optionalButtonHeight].	browserCodeView := PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	browserCodeView window: (0@0 extent: 200@y).	topView addSubView: browserCodeView below: underPane.	aString ifNotNil: [browserCodeView editString: aString.			browserCodeView hasUnacceptedEdits: true].	^ topView! !