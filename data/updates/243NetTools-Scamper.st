Model subclass: #Scamper	instanceVariableNames: 'status currentUrl pageSource document formattedPage downloadingProcess documentQueue recentDocuments '	classVariableNames: 'StartUrl '	poolDictionaries: ''	category: 'NetTools-Scamper'!!Scamper commentStamp: 'ls 9/8/1998 21:41' prior: 0!a basic web browser.It downloads things in a background thread; the background thread puts downloaded objects onto downloadQueue as they arrive.  The queue is checked in the step method.A custom start page is provided for.  It's not as convenient as bookmarks are, but it does have a lot of flexibility--the user can put anything on the start page that is desired.There is a hook for displaying the "lint" of a page; currently it's not a very effective linter.!!Scamper methodsFor: 'not yet categorized' stamp: 'ls 7/29/1998 03:28'!release	self stopEverything.	super release.! !!Scamper methodsFor: 'lint' stamp: 'ls 8/1/1998 03:10'!hasLint	"whether the current page has any questionable HTML in it"	document ifNil: [ ^false ].	^document lint ~= ''! !!Scamper methodsFor: 'lint' stamp: 'ls 8/11/1998 02:30'!lint	"return a string describing any questionable HTML that was noticed in the current page"	document ifNil: [ ^'' ].	^document lint! !!Scamper methodsFor: 'lint' stamp: 'ls 7/29/1998 00:07'!showLint	(StringHolder new contents: self lint) openLabel: 'lint for ', self currentUrl printString.! !!Scamper methodsFor: 'testing' stamp: 'ls 7/14/1998 21:44'!isWebBrowser	^true! !!Scamper methodsFor: 'menus' stamp: 'ls 8/12/1998 01:43'!displayHistory	"let the user selecet a previous page to view"	| menu |	menu _ MenuMorph entitled: 'Recent URLs'.	menu defaultTarget: self.	menu addStayUpItem.	menu addLine.	recentDocuments reverseDo: [ :doc |		menu add: doc url toText selector: #displayDocument: argument: doc ].	menu popUpAt: Sensor mousePoint  forHand: World primaryHand! !!Scamper methodsFor: 'menus' stamp: 'ls 8/8/1998 03:59'!editStartPage	| win textMorph |	World ifNil: [ self error: 'only works for morphic currently' ].	win _ SystemWindow labelled: 'edit Bookmark page'.	textMorph _ PluggableTextMorph on: self text: #startPage  accept: #startPage:.	win addMorph: textMorph frame: (0@0 extent: 1@1).	win openInWorld.	^true! !!Scamper methodsFor: 'menus' stamp: 'ls 7/14/1998 17:54'!inspectParseTree	"inspect a parse tree of the current page's source"	document ifNotNil: [ document inspect ]! !!Scamper methodsFor: 'menus' stamp: 'ls 9/7/1998 07:48'!menu: menu  shifted: shifted	| lines selections linePositions |	lines _ 'new URLhistoryview sourceinspect parse treego to start pageedit start page'.	linePositions _ #(2 4).	selections _ #(jumpToNewUrl displayHistory viewSource inspectParseTree visitStartPage editStartPage ).	downloadingProcess ifNotNil: [ 		lines _ lines, String cr, 'stop downloading'.		linePositions _ linePositions, selections size.		selections _ selections, #(stopEverything) ].	menu labels: lines lines: linePositions selections: selections.	^menu.! !!Scamper methodsFor: 'menus' stamp: 'ls 7/14/1998 02:28'!perform: selector orSendTo: otherTarget	"Selector was just chosen from a menu by a user.  If can respond, thenperform it on myself. If not, send it to otherTarget, presumably theeditPane from which the menu was invoked."	(self respondsTo: selector)		ifTrue: [^ self perform: selector]		ifFalse: [^ otherTarget perform: selector]! !!Scamper methodsFor: 'menus' stamp: 'ls 7/27/1998 23:16'!viewSource	"view the source HTML of this page"	(StringHolder new contents: (pageSource withSqueakLineEndings)) openLabel: 'source for ',currentUrl printString.! !!Scamper methodsFor: 'menus' stamp: 'ls 8/12/1998 02:01'!visitStartPage	self jumpToAbsoluteUrl: 'browser:start'.	^true! !!Scamper methodsFor: 'changing page' stamp: 'ls 9/5/1998 18:13'!displayDocument: mimeDocument	"switch to viewing the given MIMEDocument"	| newUrl  newSource handled  formatter |	newUrl _ mimeDocument url.	newSource _ mimeDocument.	handled _ false.	"add it to the history"	recentDocuments removeAllSuchThat: [ :d | d url = mimeDocument url ].	recentDocuments addLast: mimeDocument.	recentDocuments size > 20 ifTrue: [ recentDocuments removeFirst ].			newSource contentType = 'text/html' ifTrue: [		"HTML page--format it"		currentUrl _ newUrl.		pageSource _ newSource content.		self status: 'parsing...'.		document _ (HtmlParser parse: (ReadStream on: pageSource)).		self status: 'laying out...'.		formatter _ HtmlFormatter new.		formatter browser: self.		formatter baseUrl: currentUrl.		document addToFormatter: formatter.		formattedPage _ formatter text.		self startDownloadingMorphState: (formatter incompleteMorphs).		handled _ true.		self status: 'sittin'.		self changed: #currentUrl.			self changed: #title.		self changed: #hasLint.		self changed: #lint.		self changed: #formattedPage.  ].	(#('audio/midi' 'audio/x-midi') includes: newSource contentType) ifTrue: [		MIDIFileReader playStream: (RWBinaryOrTextStream with: newSource content) reset binary.		self status: 'sittin'.		handled _ true. ].	handled ifFalse: [		"treat as plain text"		pageSource _ newSource content.		document _ nil.		formattedPage _ pageSource withSqueakLineEndings.		currentUrl _ newUrl.				self status: 'sittin'.		self changed: #currentUrl.		self changed: #title.		self changed: #hasLint.		self changed: #lint.		self changed: #formattedPage.  ]! !!Scamper methodsFor: 'changing page' stamp: 'ls 8/20/1998 08:45'!jumpToAbsoluteUrl: urlText	"start downloading a new page.  The page source is downloaded in a background thread"	|  newUrl newSource |	self stopEverything.	"get the new url"	newUrl _ urlText asUrl.	"if it fundamentally doesn't fit the pages-and-contents model used internally, spawn off an external viewer for it"	newUrl hasContents ifFalse: [ newUrl activate.  ^true ].	"fork a Process to do the actual downloading, parsing, and formatting.  It's results will be picked up in #step"	self status: 'downloading ', newUrl toText, '...'.	downloadingProcess _ [ 	  	newSource _ (newUrl retrieveContentsForBrowser: self).		newSource 			ifNil: [ newSource _ MIMEDocument contentType: 'text/plain' content: 'Error retrieving this URL' ].			newSource url ifNil: [				newSource _ MIMEDocument contentType: newSource contentType  content: newSource content  url: newUrl ].			documentQueue nextPut: newSource.			downloadingProcess _ nil.	] newProcess.	downloadingProcess resume.	^true! !!Scamper methodsFor: 'changing page' stamp: 'ls 8/20/1998 08:56'!jumpToNewUrl	"change to a new, user-specified page"	| newUrl |	newUrl _ FillInTheBlank request: 'url to visit' initialAnswer: currentUrl toText.	(newUrl isNil or: [ newUrl isEmpty ]) ifTrue: [ ^self ].	self jumpToAbsoluteUrl: newUrl! !!Scamper methodsFor: 'changing page' stamp: 'ls 8/20/1998 11:22'!jumpToUrl: urlText	"start downloading a new page.  The page source is downloaded in a background thread"	self jumpToAbsoluteUrl: (urlText asUrlRelativeTo: currentUrl)! !!Scamper methodsFor: 'changing page' stamp: 'ls 9/5/1998 18:12'!startDownloadingMorphState: morphs	downloadingProcess _ [		morphs do: [ :m | m downloadState ].	] newProcess.	downloadingProcess resume.! !!Scamper methodsFor: 'changing page' stamp: 'ls 8/12/1998 00:56'!startDownloadingStateIn: aDocument  url: aUrl	"download the state for the given document in a background thread.  signal the foreground when the data has arrived"	downloadingProcess _ [			aDocument allSubentitiesDo: [ :e |			e downloadState: aUrl ].		documentQueue nextPut: #stateDownloaded.		downloadingProcess _ nil. ] newProcess.	downloadingProcess resume.! !!Scamper methodsFor: 'changing page' stamp: 'ls 7/24/1998 01:28'!stopEverything	"stop all background threads and empty queues for communicating with them; bring this Scamper to a sane state before embarking on something new"		downloadingProcess ifNotNil: [		downloadingProcess terminate.		downloadingProcess _ nil. ].	[ documentQueue isEmpty ] whileFalse: [ documentQueue next ].	self status: 'sittin'.! !!Scamper methodsFor: 'changing page' stamp: 'ls 8/12/1998 00:55'!submitFormWithInputs: inputs  url: url  method: method	| newUrl newSource | 	self stopEverything.	(method asLowercase ~= 'get' and: [ method asLowercase ~= 'post' ]) ifTrue: [		self notify: 'unkown FORM method: ', method.		^false ].	newUrl _ url asUrlRelativeTo: currentUrl.		newUrl schemeName ~= 'http' ifTrue: [		self notify: 'I can only submit forms via HTTP'.		^false ].	self status: 'submitting form...'.	downloadingProcess _ [			method asLowercase = 'get' ifTrue: [				newSource _ HTTPSocket httpGetDocument: newUrl toText args: inputs] 			ifFalse: [				newSource _ HTTPSocket httpPostDocument: newUrl toText args: inputs].			documentQueue nextPut:  newSource.			downloadingProcess _ nil.		] newProcess.		downloadingProcess resume.		^true! !!Scamper methodsFor: 'access' stamp: 'ls 7/14/1998 03:18'!currentUrl	^currentUrl! !!Scamper methodsFor: 'access' stamp: 'ls 7/14/1998 02:47'!document	"return the current parsed HTML document, or nil if we aren't viewing a page"	^document! !!Scamper methodsFor: 'access' stamp: 'ls 7/21/1998 01:16'!formattedPage	"format the current page and return it as a Text" 	^formattedPage ifNil: [ ^Text new ].	! !!Scamper methodsFor: 'access' stamp: 'ls 8/1/1998 03:10'!title	"return the title of the current page, or nil if there is none"	document == nil		ifTrue: [ ^nil ]		ifFalse: [ ^self document head title ifNil: ['(untitled)'] ]! !!Scamper methodsFor: 'stepping' stamp: 'ls 8/12/1998 01:39'!step	"check if a new document has arrived"	| results |	[documentQueue isEmpty] whileFalse: [		results _ documentQueue next.		results == #stateDownloaded ifTrue: [ 			"images and such have been downloaded; update the page"			self status: 'reformatting page...'.			formattedPage _ document formattedTextForBrowser: self defaultBaseUrl: currentUrl.			self changed: #formattedPage.			self status: 'sittin'. ]		 ifFalse: [					self displayDocument: results 			] ]! !!Scamper methodsFor: 'initialization' stamp: 'ls 8/12/1998 01:21'!initialize	documentQueue _ SharedQueue new.	recentDocuments _ OrderedCollection new.	currentUrl _ 'http://minnow.cc.gatech.edu/squeak.1' asUrl.	pageSource _ ''.	document _ HtmlParser parse: (ReadStream on: '').	self status: 'sittin'.	self jumpToUrl: currentUrl.! !!Scamper methodsFor: 'browser urls' stamp: 'ls 8/12/1998 01:23'!browserUrlContents: aRequest	aRequest = 'start' ifTrue: [ 		^MIMEDocument contentType: 'text/html' content: self startPage ].	^ nil! !!Scamper methodsFor: 'status' stamp: 'ls 7/16/1998 22:18'!status	^status! !!Scamper methodsFor: 'status' stamp: 'ls 7/16/1998 22:18'!status: aSymbol	status _ aSymbol.	self changed: #status.! !!Scamper methodsFor: 'start page' stamp: 'ls 8/8/1998 04:01'!startPage	"return the contents of the user's personal start page"	| file |	file _ FileStream oldFileOrNoneNamed: 'StartPage.html'.	file 		ifNil: [ ^'<title>Personal Start Page</title>\<h1>Personal Start Page</h1>\This space is empty' withCRs ]		ifNotNil: [ ^file contentsOfEntireFile ]! !!Scamper methodsFor: 'start page' stamp: 'ls 8/8/1998 04:02'!startPage: newPage	"fill in the contents of the user's personal start page"	| file |	FileDirectory default deleteFileNamed: 'StartPage.html'.	file _ FileStream fileNamed: 'StartPage.html'.	file ifNil: [ self error: 'could not save file' ].	file nextPutAll: newPage asString.	file close.		self changed: #startPage.	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Scamper class	instanceVariableNames: ''!!Scamper class methodsFor: 'instance creation' stamp: 'ls 7/17/1998 23:02'!new	^super new initialize! !!Scamper class methodsFor: 'instance creation' stamp: 'ls 8/11/1998 00:06'!openAsMorph	"Scamper openAsMorph openInMVC"	| scamper win button |	"create the browser"	scamper _ Scamper new.	"create a window for it"	win _ SystemWindow labelled: 'Scamper'.	win model: scamper.	win setProperty: #webBrowserView toValue: true.	"create a title view"	win addMorph: (PluggableTextMorph on: scamper text: #title accept: nil) frame: (0.0@0 extent: 0.9@0.1).	"a lint checking button"	button _ (PluggableButtonMorph on: scamper getState: #hasLint  action: #showLint).	button onColor: Color red offColor: Color white.	button label: 'lint'.	win addMorph: button frame: (0.9@0 extent: 0.1@0.1).	"create a view of the current url"	"win addMorph: (RectangleMorph new) frame: (0@0.1 extent: 0.3@0.1)."	win addMorph: (PluggableTextMorph on: scamper text: #currentUrl accept: #jumpToAbsoluteUrl:) frame: (0@0.1 extent: 1@0.1).	"create a status view"	win addMorph: (PluggableTextMorph on: scamper text: #status accept: nil) frame: (0@0.9 extent: 1.0@0.1).	"create the text area"	win addMorph: (PluggableTextMorph on: scamper text: #formattedPage accept: nil readSelection: nil menu: #menu:shifted:)		frame: (0@0.2 extent: 1@0.7).	^win! !!Scamper class methodsFor: 'initialization' stamp: 'ls 8/5/1998 21:42'!StartUrl: aUrl	"specify the URL to start from"	StartUrl _ aUrl asUrl.! !!Scamper class methodsFor: 'initialization' stamp: 'ls 8/5/1998 21:42'!initialize	self StartUrl: 'http://minnow.cc.gatech.edu/squeak'.  "the Squeak home page"! !Scamper initialize!