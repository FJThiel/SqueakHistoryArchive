'From Squeak 2.3 of January 14, 1999 on 8 March 1999 at 11:19:49 pm'!"Change Set:		CursorOffsetsDate:			7 March 1999Author:			Dan IngallsIn implementing the details of the EventRecorder, I discovered that the so-called temporaryCursorOffset in HandMorph was not the offset of the temporary cursor, but had the opposite sense of a hotSpotOffset (a positive number for, eg, a crosshair cursor).This changeSet restores the sense of this offset to be consistent with cursor offsets and form offsets in Squeak generally.In the process a number of cursors in the SketchMorphEditor needed to be similarly retrofitted."!!Cursor methodsFor: 'converting' stamp: 'di 3/7/1999 13:40'!asCursorForm	| form |	form _ Form extent: self extent depth: 8.	form fillShape: self fillColor: Color black at: offset negated.	^ form offset: offset! !!CursorWithMask methodsFor: 'all' stamp: 'di 3/7/1999 13:40'!asCursorForm	| form |	form _ Form extent: self extent depth: 8.	form fillShape: maskForm fillColor: Color white.	form fillShape: self fillColor: Color black at: offset negated.	^ form offset: offset! !!HandMorph methodsFor: 'accessing' stamp: 'di 3/7/1999 13:47'!showTemporaryCursor: cursorOrNil hotSpotOffset: hotSpotOffset	"Set the temporary cursor to the given Form. If the argument is nil, revert to the normal cursor."	self changed.	cursorOrNil == nil		ifTrue: [temporaryCursor _ nil.				bounds _ self position extent: NormalCursor extent.				temporaryCursorOffset _ 0@0]		ifFalse: [temporaryCursor _ cursorOrNil asCursorForm.				temporaryCursorOffset _ temporaryCursor offset - hotSpotOffset.				bounds _ self position + temporaryCursorOffset							extent: temporaryCursor extent].	self userInitials: userInitials.	self layoutChanged.	self changed.! !!HandMorph methodsFor: 'geometry' stamp: 'di 3/7/1999 13:39'!position	temporaryCursorOffset ifNil: [temporaryCursorOffset _ 0@0].	^ bounds topLeft - temporaryCursorOffset! !!HandMorph methodsFor: 'geometry' stamp: 'di 3/7/1999 13:52'!position: aPoint	"Overridden to align submorph origins to the grid if gridding is on."	temporaryCursorOffset ifNil: [temporaryCursorOffset _ 0@0].	gridOn		ifTrue: [^ super position: (aPoint grid: grid) + temporaryCursorOffset]		ifFalse: [^ super position: aPoint + temporaryCursorOffset].! !!PaintBoxMorph methodsFor: 'actions' stamp: 'tk 3/8/1999 22:42'!actionCursor	"Return the cursor to use with this painting action/tool. Offset of the form must be set."	| ff c old map width co larger box |	action == #paint: ifTrue: ["Make a cursor from the brush and the color"		old _ self getNib.		ff _ ColorForm extent: old extent depth: 1.		old displayOn: ff at: old offset negated.		c _ self getColor.		c = Color white ifTrue: [c _ Color black].		c isTransparent ifTrue: [c _ Color black].		map _ ff colors.		map at: (Color white indexInMap: map) put: Color transparent.		map at: (Color black indexInMap: map) put: c.		ff colors: map.		ff offset: (ff extent // 2) negated.		^ ff].	action == #erase: ifTrue: ["Make a cursor from the cursor and the color"		width _ self getNib width.		co _ (currentCursor offset + (width//2@4)) min: (0@0).		larger _ 0@0 extent: currentCursor extent + (width@width).		ff _ currentCursor copy: larger.		ff fill: (box _ co negated extent: (width@width)) 					fillColor: (Color r: 0.5 g: 0.5 b: 1.0).		ff fill: (box insetBy: 1@1) fillColor: Color transparent.		ff offset: co - (width@width //2).		^ ff].	^ currentCursor! !!PaintBoxMorph methodsFor: 'actions' stamp: 'tk 3/8/1999 22:37'!pickup: actionButton action: aSelector cursor: aCursor	"Special version for pickup: and stamp:, because of these tests"	| ss picker old map stamper |	self tool: actionButton action: aSelector cursor: aCursor.	aSelector == #stamp: ifTrue: [		(stampHolder pickupButtons includes: actionButton) ifTrue: [				stamper _ stampHolder otherButtonFor: actionButton.				^ self pickup: stamper action: #stamp: cursor: (stamper arguments at: 3)].		(stampHolder stampFormFor: actionButton) 			ifNil: [				"If not stamp there, go to pickup mode"				picker _ stampHolder otherButtonFor: actionButton.				picker state: #on.				^ self pickup: picker action: #pickup: cursor: (picker arguments at: 3)]			ifNotNil: [				old _ stampHolder stampFormFor: actionButton.				currentCursor _ ColorForm extent: old extent depth: 8.				old displayOn: currentCursor.				map _ Color indexedColors copy.				map at: 1 put: Color transparent.				currentCursor colors: map.				currentCursor offset: currentCursor extent // -2.				"Emphisize the stamp button"				actionButton owner "layoutMorph" "color: (Color r: 1.0 g: 0.645 b: 0.419);"					borderColor: (Color r: 0.65 g: 0.599 b: 0.8).				]].	aSelector == #pickup: ifTrue: [		ss _ self world findA: SketchEditorMorph.		ss ifNotNil: [currentCursor _ aCursor]	 			ifNil: [self notCurrentlyPainting.				self setAction: #paint:]].! !!PaintBoxMorph methodsFor: 'actions' stamp: 'tk 3/8/1999 22:35'!stampCursorBeCursorFor: anAction	"User just chose a stamp.  Take that stamp picture and make it be the cursor for the tool named."	"self stampCursorBeCursorFor: #star:.	currentCursor offset: -9@-3.			Has side effect on the saved cursor."	(self findButton: anAction) arguments at: 3 put: currentCursor.		"Already converted to 8 bits and in the right form"! !!SketchEditorMorph methodsFor: 'morphic' stamp: 'tk 3/8/1999 23:04'!mouseDown: evt	"Start a new stroke.  Check if any palette setting have changed.  6/11/97 20:30 tk"	| cur |	"verify that we are in a good state"	self verifyState.		"includes prepareToPaint and #scalingOrRotate"	undoBuffer _ paintingForm deepCopy.	"know we will draw something"	paintingFormPen place: (evt cursorPoint - bounds origin).	strokeOrigin _ evt cursorPoint.		"origin point for pickup: rect: ellispe: polygon: line: star:.  Always take it."	action == #pickup: ifTrue: [		cur _ Cursor corner clone.		cur offset: 0@0  "cur offset abs".		evt hand showTemporaryCursor: cur].	action == #polygon: ifTrue: [self polyNew: evt].	"a mode lets you drag vertices"! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'tk 3/8/1999 23:01'!pickup: evt	"Grab a part of the picture (or screen) and store it in a known place.  Note where we started.  Use a rubberband rectangle to show what is being selected."	| rect oldRect |	rect _ strokeOrigin rect: evt cursorPoint + (14@14).	lastEvent == nil ifFalse: [			"Last draw will stick out, must erase the area"			oldRect _ strokeOrigin rect: lastEvent cursorPoint + (14@14).			self restoreRect: (oldRect insetBy: -2)].	formCanvas frameAndFillRectangle: (rect insetBy: -2) fillColor: Color transparent		borderWidth: 2 borderColor: Color gray.	self invalidRect: (rect insetBy: -2).! !!SketchEditorMorph methodsFor: 'actions & preps' stamp: 'tk 3/8/1999 23:09'!pickupMouseUp: evt	"Grab a part of the picture (or screen) and store it in a known place. Like Copy on the Mac menu. Then switch to the stamp tool."	| rr pp pForm ii oldRect curs |	lastEvent == nil ifFalse: [			"Last draw will stick out, must erase the area"			oldRect _ strokeOrigin rect: lastEvent cursorPoint + (14@14).			self restoreRect: (oldRect insetBy: -2)].	self primaryHand showTemporaryCursor: nil.	"later get rid of this"		rr _ strokeOrigin rect: evt cursorPoint + (14@14).	pp _ rr translateBy: self world viewBox origin.	ii _ rr translateBy: (0@0) - bounds origin.	(rr intersects: bounds) ifTrue: [		pForm _ paintingForm copy: ii.		pForm primCountBits > 0 			ifTrue: []	"normal case.  Can be transparent in parts"			ifFalse: [pForm _ nil.			"Get an un-dimmed picture of other objects on the playfield"			"don't know how yet"]].	pForm ifNil: [pForm _ Form fromDisplay: pp].		"Anywhere on the screen"	palette pickupForm: pForm.	curs _ palette actionCursor.	evt hand showTemporaryCursor: curs.! !"Postscript:Fix up the offsets in the cursors in all PaintBoxMorph instances"| btn |PaintBoxMorph allInstancesDo: [:box |	#(erase: eyedropper: fill: paint: rect: ellipse: polygon: line: star: ) do: [:sel |	(btn _ box findButton: sel) ifNotNil: [		(btn arguments at: 3) offset: 			(btn arguments at: 3) offset abs negated]].	].!