'From Squeak2.8alpha of 4 February 2000 [latest update: #2310] on 12 June 2000 at 2:35:59 pm'!"Change Set:		150PointerFinder-smaDate:			7 June 2000Author:			Stefan Matthias Aust[This also fixes a >>nil isLiteral --> false<< bug --sma]The PointerFinder can search for reasons why a certain object isn't garbage collected.  It's a quick port of a VisualWorks program written by Hans-Martin Mosner. It will search for a path from a global variable to the given object, presenting it in a small morphic UI.At the moment, it doesn't always find objects - HandMorph allInstancesDo: [:e | PointerFinder on: e] - for example doesn't find the reasons for all 4 objects - perhaps some VM globals are missing?"!Model subclass: #PointerFinder	instanceVariableNames: 'goal parents toDo toDoNext hasGemStone pointerList objectList parentsSize todoSize depth pointerListIndex '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Debugger'!!PointerFinder commentStamp: '<historical>' prior: 0!I can search for reasons why a certain object isn't garbage collected.  I'm a quick port of a VisualWorks program written by Hans-Martin Mosner.  Call me as shown below.  I'll search for a path from a global variable to the given object, presenting it in a small morphic UI.Examples:	PointerFinder on: self currentHand	PointerFinder on: StandardSystemView someInstanceNow, let's see why this image contains more HandMorphs as expected...HandMorph allInstancesDo: [:e | PointerFinder on: e]!!PointerFinder methodsFor: 'application' stamp: 'sma 6/6/2000 18:58'!buildList	| list obj parent object key |	list := OrderedCollection new.	obj := goal.		[list addFirst: obj.	obj := parents at: obj ifAbsent: [].	obj == nil] whileFalse.	list removeFirst.	parent := Smalltalk.	objectList := OrderedCollection new.	pointerList := OrderedCollection new.	[list isEmpty]		whileFalse: 			[object := list removeFirst.			key := nil.			(parent isKindOf: Dictionary)				ifTrue: [list size >= 2						ifTrue: 							[key := parent keyAtValue: list second ifAbsent: [].							key == nil								ifFalse: 									[object := list removeFirst; removeFirst.									pointerList add: key printString , ' -> ' , object class name]]].			key == nil				ifTrue: 					[parent class == object ifTrue: [key := 'CLASS'].					key == nil ifTrue: [1 to: parent class instSize do: [:i | key == nil ifTrue: [(parent instVarAt: i)									== object ifTrue: [key := parent class allInstVarNames at: i]]]].					key == nil ifTrue: [1 to: parent basicSize do: [:i | key == nil ifTrue: [(parent basicAt: i)									== object ifTrue: [key := i printString]]]].					key == nil ifTrue: [(parent isMorph and: [object isKindOf: Array]) ifTrue: [key := 'submorphs?']].					key == nil ifTrue: [key := '???'].					pointerList add: key , ': ' , object class name].			objectList add: object.			parent := object]! !!PointerFinder methodsFor: 'application' stamp: 'sma 6/6/2000 23:08'!follow: anObject from: parentObject	anObject == goal		ifTrue: 			[parents at: anObject put: parentObject.			^ true].	anObject isLiteral ifTrue: [^ false].	anObject class isPointers ifFalse: [^ false].	anObject class isWeak ifTrue: [^ false].	(parents includesKey: anObject)		ifTrue: [^ false].	parents at: anObject put: parentObject.	toDoNext add: anObject.	^ false! !!PointerFinder methodsFor: 'application' stamp: 'sma 6/6/2000 10:01'!followObject: anObject	(self follow: anObject class from: anObject)		ifTrue: [^ true].	1 to: anObject class instSize do:		[:i |		(self follow: (anObject instVarAt: i) from: anObject)			ifTrue: [^ true]].	1 to: anObject basicSize do:		[:i |		(self follow: (anObject basicAt: i) from: anObject)			ifTrue: [^ true]].	^ false! !!PointerFinder methodsFor: 'application' stamp: 'sma 6/6/2000 09:52'!goal: anObject	goal _ anObject! !!PointerFinder methodsFor: 'application' stamp: 'sma 6/7/2000 00:19'!initialize	parents _ IdentityDictionary new: 20000.	parents at: Smalltalk put: nil.	parents at: Processor put: nil.	parents at: self put: nil.	toDo _ OrderedCollection new: 5000.	toDo add: Smalltalk.	toDoNext _ OrderedCollection new: 5000! !!PointerFinder methodsFor: 'application' stamp: 'sma 6/7/2000 00:19'!isLiteral	"Horrible hack to omit other Pointer Finders from scanning."	^ true! !!PointerFinder methodsFor: 'application' stamp: 'sma 6/7/2000 00:17'!search	Smalltalk garbageCollect.	self initialize.		Cursor wait showWhile: [		[[toDo isEmpty or: [self followObject: toDo removeFirst]] whileFalse.		toDo isEmpty and: [toDoNext isEmpty not]]			whileTrue: 				[toDo _ toDoNext.				toDoNext _ OrderedCollection new: 5000]].	self buildList! !!PointerFinder methodsFor: 'application' stamp: 'sma 6/6/2000 19:10'!update	('done: ' , parents size asString , ' todo: ' , toDo size asString , '   ') displayAt: 0@0! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/7/2000 00:23'!arrowKey: key from: aController	key = $i ifTrue: [^ self inspectObject].	^ super arrowKey: key from: aController! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/6/2000 23:48'!initialExtent	^ 300 @ 300! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/6/2000 23:26'!inspectObject	pointerListIndex = 0 ifTrue: [^ self beep].	(objectList at: pointerListIndex) inspect! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/7/2000 00:09'!menu: aMenu shifted: shifted	^ MenuMorph new		defaultTarget: self;		add: 'Inspect (i)' action: #inspectObject;		balloonTextForLastItem: 'Live long and prosper!!';		addLine;		add: 'Search again' action: #searchAgain;		balloonTextForLastItem: 'Search again\for the same object' withCRs;		yourself! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/6/2000 23:52'!open	| window list |	window _ (SystemWindow labelled: 'Pointer Finder')		model: self.	list _ PluggableListMorph			on: self			list: #pointerList			selected: #pointerListIndex			changeSelected: #pointerListIndex:			menu: #menu:shifted:.	list doubleClickSelector: #inspectObject.	window addMorph: list frame: (0@0 extent: 1@1).	list color: Color lightMagenta.	window openInWorld! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/7/2000 00:15'!perform: selector orSendTo: otherTarget	selector == #inspectObject ifTrue: [^ self inspectObject].	selector == #searchAgain ifTrue: [^ self searchAgain].	^ super perform: selector orSendTo: otherTarget! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/6/2000 23:49'!pointerList	^ pointerList asArray! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/6/2000 23:27'!pointerListIndex	^ pointerListIndex ifNil: [0]! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/6/2000 23:51'!pointerListIndex: anInteger	pointerListIndex _ anInteger.	self changed: #pointerListIndex! !!PointerFinder methodsFor: 'morphic ui' stamp: 'sma 6/7/2000 00:16'!searchAgain	self pointerListIndex: 0.	self search.	self changed: #pointerList! !!PointerFinder class methodsFor: 'instance creation' stamp: 'sma 6/6/2000 23:52'!on: anObject	^ self new goal: anObject; search; open! !!UndefinedObject methodsFor: 'testing' stamp: 'sma 6/6/2000 22:53'!isLiteral	^ true! !!PointerFinder class reorganize!('instance creation' on:)!!PointerFinder reorganize!('application' buildList follow:from: followObject: goal: initialize isLiteral search update)('morphic ui' arrowKey:from: initialExtent inspectObject menu:shifted: open perform:orSendTo: pointerList pointerListIndex pointerListIndex: searchAgain)!