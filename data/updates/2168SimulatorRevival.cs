'From Squeak2.8alpha of 16 February 2000 [latest update: #2167] on 17 May 2000 at 11:21:54 pm'!"Change Set:		SimulatorRevivalDate:			17 May 2000Author:			Andreas RaabBring the InterpreterSimulator back to life. A lot has changed with pluginisation so a little effort is required to keep the simulator going. "!!Interpreter methodsFor: 'I/O primitives' stamp: 'ar 5/17/2000 23:08'!displayBitsOf: aForm Left: l Top: t Right: r Bottom: b	"Repaint the portion of the Smalltalk screen bounded by the affected rectangle. Used to synchronize the screen after a Bitblt to the Smalltalk Display object."	| displayObj dispBits w h dispBitsIndex d left right top bottom surfaceHandle |	displayObj _ self splObj: TheDisplay.	aForm = displayObj ifFalse: [^ nil].	self success: ((self isPointers: displayObj) and: [(self lengthOf: displayObj) >= 4]).	successFlag ifTrue: [		dispBits _ self fetchPointer: 0 ofObject: displayObj.		w _ self fetchInteger: 1 ofObject: displayObj.		h _ self fetchInteger: 2 ofObject: displayObj.		d _ self fetchInteger: 3 ofObject: displayObj.	].	l < 0 ifTrue:[left _ 0] ifFalse:[left _ l].	r > w ifTrue:[right _ w] ifFalse:[right _ r].	t < 0 ifTrue:[top _ 0] ifFalse:[top _ t].	b > h ifTrue:[bottom _ h] ifFalse:[bottom _ b].	((left <= right) and: [top <= bottom]) ifFalse:[^nil].	successFlag ifTrue: [		(self isIntegerObject: dispBits) ifTrue:[			surfaceHandle _ self integerValueOf: dispBits.			"For now just fail"			"self cCode:'ioShowSurface(surfaceHandle, left, right, top, bottom)'."			self success: false.		] ifFalse:[			dispBitsIndex _ dispBits + BaseHeaderSize.  "index in memory byte array"			self cCode: 'ioShowDisplay(dispBitsIndex, w, h, d, left, right, top, bottom)'				inSmalltalk:[self showDisplayBits: dispBitsIndex 								w: w h: h d: d								left: left right: right top: top bottom: bottom]		].	].! !!Interpreter methodsFor: 'other primitives' stamp: 'ar 5/17/2000 22:48'!primitiveObsoleteIndexedPrimitive	"Primitive. Invoke an obsolete indexed primitive."	| pluginName functionName functionAddress |	self var: #pluginName declareC:'char *pluginName'.	self var: #functionName declareC:'char *functionName'.	functionAddress _ 		self cCoerce: ((obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 2) to: 'int'.	functionAddress = nil 		ifFalse:[^self cCode: '((int (*) (void))functionAddress)()'					inSmalltalk:[self callExternalPrimitive: functionAddress]].	pluginName _ (obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 0.	functionName _ (obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 1.	(pluginName = nil and:[functionName = nil]) 		ifTrue:[^self primitiveFail].	functionAddress _ self ioLoadFunction: functionName From: pluginName.	functionAddress = nil ifFalse:["Cache for future use"		(obsoleteIndexedPrimitiveTable at: primitiveIndex) at: 2 put: 			(self cCoerce: functionAddress to: 'char*').		^self cCode: '((int (*) (void))functionAddress)()'				inSmalltalk:[self callExternalPrimitive: functionAddress]].	^self primitiveFail! !!InterpreterSimulator methodsFor: 'initialization' stamp: 'ar 5/17/2000 22:49'!initialize	"Initialize the InterpreterSimulator when running the interpreter inside	Smalltalk. The primary responsibility of this method is to allocate	Smalltalk Arrays for variables that will be declared as statically-allocated	global arrays in the translated code."	"initialize class variables"	ObjectMemory initialize.	Interpreter initialize.	methodCache _ Array new: MethodCacheSize.	atCache _ Array new: AtCacheTotalSize.	rootTable _ Array new: RootTableSize.	remapBuffer _ Array new: RemapBufferSize.	semaphoresToSignal _ Array new: SemaphoresToSignalSize.	obsoleteNamedPrimitiveTable _ 		CArrayAccessor on: self class obsoleteNamedPrimitiveTable.	obsoleteIndexedPrimitiveTable _ CArrayAccessor on: 		(self class obsoleteIndexedPrimitiveTable collect:[:spec| 			CArrayAccessor on:				(spec ifNil:[Array new: 3] 					  ifNotNil:[Array with: spec first with: spec second with: nil])]).	pluginList _ #().	mappedPluginEntries _ #().	"initialize InterpreterSimulator variables used for debugging"	byteCount _ 0.	sendCount _ 0.	traceOn _ true.	myBitBlt _ BitBltSimulator new setInterpreter: self.	displayForm _ nil.  "displayForm is created in response to primitiveBeDisplay"	filesOpen _ OrderedCollection new.! !!InterpreterSimulator methodsFor: 'initialization' stamp: 'ar 5/17/2000 23:20'!openOn: fileName	"(InterpreterSimulator new openOn: 'clonex.image') test"	self openOn: fileName extraMemory: 500000.! !!InterpreterSimulator methodsFor: 'debug support' stamp: 'ar 5/17/2000 23:16'!fullGC	Transcript cr; show:'<Running full GC ...'.	super fullGC.	Transcript show: ' done>'.! !!InterpreterSimulator methodsFor: 'I/O primitives' stamp: 'ar 5/17/2000 23:10'!showDisplayBits: destBits w: w h: h d: d left: left right: right top: top bottom: bottom	| raster pixPerWord simDisp realDisp rect |	pixPerWord _ 32 // d.	raster _ displayForm width + (pixPerWord - 1) // pixPerWord.	simDisp _ Form new hackBits: memory.	realDisp _ Form new hackBits: displayForm bits.	realDisp		copy: (0 @ (top * raster) extent: 4 @ (bottom - top * raster))		from: 0 @ (destBits // 4 + (top * raster))		in: simDisp		rule: Form over.	rect _ 0 @ top corner: displayForm width @ bottom.	Display		copy: (rect translateBy: self displayLocation)		from: rect topLeft		in: displayForm		rule: Form over! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/17/2000 22:28'!ioLoadExternalFunction: functionName OfLength: functionLength FromModule: moduleName OfLength: moduleLength	"Load and return the requested function from a module"	| pluginString functionString |	pluginString _ String new: moduleLength.	1 to: moduleLength do:[:i| pluginString byteAt: i put: (self byteAt: moduleName+i-1)].	functionString _ String new: functionLength.	1 to: functionLength do:[:i| pluginString byteAt: i put: (self byteAt: functionName+i-1)].	functionString _ functionString asSymbol.	^self ioLoadFunction: functionString From: pluginString! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/17/2000 22:55'!ioLoadFunction: functionString From: pluginString	"Load and return the requested function from a module"	| plugin fnSymbol |	fnSymbol _ functionString asSymbol.	Transcript cr; show:'Looking for ', functionString, ' in ', pluginString.	plugin _ pluginList 				detect:[:any| any key = pluginString asString]				ifNone:[self loadNewPlugin: pluginString].	plugin ifNil:[		Transcript cr; show:'Failed ... no plugin found'. ^0]. "No plugin found"	plugin _ plugin value.	mappedPluginEntries doWithIndex:[:pluginAndName :index|		((pluginAndName at: 1) == plugin 			and:[(pluginAndName at: 2) == fnSymbol]) ifTrue:[				Transcript show:' ... okay'. ^index]].	(plugin respondsTo: fnSymbol) ifFalse:[		Transcript cr; show:'Failed ... primitive not in plugin'. ^0].	mappedPluginEntries _ mappedPluginEntries copyWith: (Array with: plugin with: fnSymbol).	Transcript show:' ... okay'.	^mappedPluginEntries size! !!InterpreterSimulator methodsFor: 'plugin support' stamp: 'ar 5/17/2000 22:53'!loadNewPlugin: pluginString	| plugin simClass |	Transcript cr; show:'Looking for module ', pluginString.	plugin _ simClass _ nil.	InterpreterPlugin allSubclassesDo:[:plg|		plg moduleName asString = pluginString asString ifTrue:[			simClass _ plg simulatorClass.			plugin ifNil:[plugin _ simClass]				ifNotNil:[plugin == simClass ifFalse:[^self error:'This won''t work...']].		].	].	plugin ifNil:[Transcript show: ' ... not found'. ^nil].	plugin _ plugin new.	plugin setInterpreter: self. "Ignore return value from setInterpreter"	(plugin respondsTo: #initialiseModule) ifTrue:[		plugin initialiseModule ifFalse:[Transcript show: ' ... initialiser failed'.^nil]. "module initialiser failed"	].	pluginList _ pluginList copyWith: (pluginString asString -> plugin).	Transcript show:' ... loaded'.	^pluginList last! !InterpreterSimulator removeSelector: #loadBitBltFrom:!InterpreterSimulator removeSelector: #loadScannerFrom:start:stop:string:rightX:stopArray:displayFlag:!InterpreterSimulator removeSelector: #loadWarpBltFrom:!InterpreterSimulator removeSelector: #scanCharacters!InterpreterSimulator removeSelector: #showDisplayBits!InterpreterSimulator removeSelector: #stopReason!InterpreterSimulator removeSelector: #targetForm!