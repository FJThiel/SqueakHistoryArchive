'From Squeak3.8alpha of ''17 July 2004'' [latest update: #6210] on 19 September 2004 at 11:18:25 am'!"Change Set:		IntegerPrintOnPaddingAllInOne-lazaDate:			19 September 2004Author:			Alexander@Lazarevic.deThis changeset improves and changes (a little) the way integers can be printend in different numeratives.* The meaning of printStringBase has changed. printStringBase: will just printa number in any base and the (new) storeStringBase: will print the number with a leading base.Examples:3994 printStringBase: 16	-->	'F9A'3994 storeStringBase: 16	-->	'16rF9A'* The new method printOn:base:length:padded: (et al) helps formatting output a little.Examples:3735928559 printStringBase: 16 length: 20 padded: false	-->	'            DEADBEEF'3735928559 printStringBase: 16 length: 20 padded: true	-->	'000000000000DEADBEEF'3735928559 storeStringBase: 16 length: 20 padded: true	-->	'16r000000000DEADBEEF'-3735928559 storeStringBase: 16 length: 20 padded: false	-->	'        -16rDEADBEEF'* Some redundant code got removed, some methods got deprecated and some moved.As oneresult Fractions now can also respond to printOn:base: like Integers and Floats (just to be consistent).Examples:(15/11) printStringBase: 16	-->	'(F/B)'(15/11) storeStringBase: 16	-->	'(16rF/16rB)'		The following worked before:(16rF/16rB) printString	-->	'(15/11)'* For more examples see the IntegerPrintOnPaddingTests changeset and the classes IntegerTests andFrationTests* This all in one changeset contains now all contents of the former changesets IntegerPrintOnPadding, IntegerPrintOnPaddingCollateral and IntegerPrintOnPaddingTests* This incorporates now the fix from changeset 6156EmptyLargeIntegerFix-dtl"!!Decompiler methodsFor: 'private' stamp: 'laza 3/29/2004 07:57'!interpretNextInstructionFor: client	| code varNames |"Change false here will trace all state in Transcript."true ifTrue: [^ super interpretNextInstructionFor: client].	varNames _ Decompiler allInstVarNames.	code _ (self method at: pc) radix: 16.	Transcript cr; cr; print: pc; space;		nextPutAll: '<' , code, '>'.	8 to: varNames size do:		[:i | i <= 10 ifTrue: [Transcript cr]				ifFalse: [Transcript space; space].		Transcript nextPutAll: (varNames at: i);				nextPutAll: ': '; print: (self instVarAt: i)].	Transcript endEntry.	^ super interpretNextInstructionFor: client! !!ExternalAddress methodsFor: 'printing' stamp: 'laza 3/29/2004 18:33'!printOn: aStream	"print this as a hex address ('@ 16rFFFFFFFF') to distinguish it from ByteArrays"	aStream nextPutAll: '@ '; nextPutAll: (self asInteger storeStringBase: 16 length: 11 padded: true)! !!Form methodsFor: 'fileIn/Out' stamp: 'laza 3/29/2004 12:21'!storeBitsOn:aStream base:anInteger	bits do: [:word | 		anInteger = 10			ifTrue: [aStream space]			ifFalse: [aStream crtab: 2].		word storeOn: aStream base: anInteger].! !!FractionTest methodsFor: 'testing-printing' stamp: 'laza 3/30/2004 09:28'!testFractionPrinting	self assert: (353/359) printString = '(353/359)'.	self assert: ((2/3) printStringBase: 2) = '(10/11)'.	self assert: ((2/3) storeStringBase: 2) = '(2r10/2r11)'.	self assert: ((5/7) printStringBase: 3) = '(12/21)'.	self assert: ((5/7) storeStringBase: 3) = '(3r12/3r21)'.	self assert: ((11/13) printStringBase: 4) = '(23/31)'.	self assert: ((11/13) storeStringBase: 4) = '(4r23/4r31)'.	self assert: ((17/19) printStringBase: 5) = '(32/34)'.	self assert: ((17/19) storeStringBase: 5) = '(5r32/5r34)'.	self assert: ((23/29) printStringBase: 6) = '(35/45)'.	self assert: ((23/29) storeStringBase: 6) = '(6r35/6r45)'.	self assert: ((31/37) printStringBase: 7) = '(43/52)'.	self assert: ((31/37) storeStringBase: 7) = '(7r43/7r52)'.	self assert: ((41/43) printStringBase: 8) = '(51/53)'.	self assert: ((41/43) storeStringBase: 8) = '(8r51/8r53)'.	self assert: ((47/53) printStringBase: 9) = '(52/58)'.	self assert: ((47/53) storeStringBase: 9) = '(9r52/9r58)'.	self assert: ((59/61) printStringBase: 10) = '(59/61)'.	self assert: ((59/61) storeStringBase: 10) = '(59/61)'.	self assert: ((67/71) printStringBase: 11) = '(61/65)'.	self assert: ((67/71) storeStringBase: 11) = '(11r61/11r65)'.	self assert: ((73/79) printStringBase: 12) = '(61/67)'.	self assert: ((73/79) storeStringBase: 12) = '(12r61/12r67)'.	self assert: ((83/89) printStringBase: 13) = '(65/6B)'.	self assert: ((83/89) storeStringBase: 13) = '(13r65/13r6B)'.	self assert: ((97/101) printStringBase: 14) = '(6D/73)'.	self assert: ((97/101) storeStringBase: 14) = '(14r6D/14r73)'.	self assert: ((103/107) printStringBase: 15) = '(6D/72)'.	self assert: ((103/107) storeStringBase: 15) = '(15r6D/15r72)'.	self assert: ((109/113) printStringBase: 16) = '(6D/71)'.	self assert: ((109/113) storeStringBase: 16) = '(16r6D/16r71)'.	self assert: ((127/131) printStringBase: 17) = '(78/7C)'.	self assert: ((127/131) storeStringBase: 17) = '(17r78/17r7C)'.	self assert: ((137/139) printStringBase: 18) = '(7B/7D)'.	self assert: ((137/139) storeStringBase: 18) = '(18r7B/18r7D)'.	self assert: ((149/151) printStringBase: 19) = '(7G/7I)'.	self assert: ((149/151) storeStringBase: 19) = '(19r7G/19r7I)'.	self assert: ((157/163) printStringBase: 20) = '(7H/83)'.	self assert: ((157/163) storeStringBase: 20) = '(20r7H/20r83)'.	self assert: ((167/173) printStringBase: 21) = '(7K/85)'.	self assert: ((167/173) storeStringBase: 21) = '(21r7K/21r85)'.	self assert: ((179/181) printStringBase: 22) = '(83/85)'.	self assert: ((179/181) storeStringBase: 22) = '(22r83/22r85)'.	self assert: ((191/193) printStringBase: 23) = '(87/89)'.	self assert: ((191/193) storeStringBase: 23) = '(23r87/23r89)'.	self assert: ((197/199) printStringBase: 24) = '(85/87)'.	self assert: ((197/199) storeStringBase: 24) = '(24r85/24r87)'.	self assert: ((211/223) printStringBase: 25) = '(8B/8N)'.	self assert: ((211/223) storeStringBase: 25) = '(25r8B/25r8N)'.	self assert: ((227/229) printStringBase: 26) = '(8J/8L)'.	self assert: ((227/229) storeStringBase: 26) = '(26r8J/26r8L)'.	self assert: ((233/239) printStringBase: 27) = '(8H/8N)'.	self assert: ((233/239) storeStringBase: 27) = '(27r8H/27r8N)'.	self assert: ((241/251) printStringBase: 28) = '(8H/8R)'.	self assert: ((241/251) storeStringBase: 28) = '(28r8H/28r8R)'.	self assert: ((257/263) printStringBase: 29) = '(8P/92)'.	self assert: ((257/263) storeStringBase: 29) = '(29r8P/29r92)'.	self assert: ((269/271) printStringBase: 30) = '(8T/91)'.	self assert: ((269/271) storeStringBase: 30) = '(30r8T/30r91)'.	self assert: ((277/281) printStringBase: 31) = '(8T/92)'.	self assert: ((277/281) storeStringBase: 31) = '(31r8T/31r92)'.	self assert: ((283/293) printStringBase: 32) = '(8R/95)'.	self assert: ((283/293) storeStringBase: 32) = '(32r8R/32r95)'.	self assert: ((307/311) printStringBase: 33) = '(9A/9E)'.	self assert: ((307/311) storeStringBase: 33) = '(33r9A/33r9E)'.	self assert: ((313/317) printStringBase: 34) = '(97/9B)'.	self assert: ((313/317) storeStringBase: 34) = '(34r97/34r9B)'.	self assert: ((331/337) printStringBase: 35) = '(9G/9M)'.	self assert: ((331/337) storeStringBase: 35) = '(35r9G/35r9M)'.	self assert: ((347/349) printStringBase: 36) = '(9N/9P)'.	self assert: ((347/349) storeStringBase: 36) = '(36r9N/36r9P)'.	self assert: ((-2/3) printStringBase: 2) = '(-10/11)'.	self assert: ((-2/3) storeStringBase: 2) = '(-2r10/2r11)'.	self assert: ((5/-7) printStringBase: 3) = '(-12/21)'.	self assert: ((5/-7) storeStringBase: 3) = '(-3r12/3r21)'.! !!InstructionPrinter methodsFor: 'printing' stamp: 'laza 3/29/2004 18:45'!print: instruction 	"Append to the receiver a description of the bytecode, instruction." 	| code |	stream tab: self indent; print: oldPC; space.	stream nextPut: $<.	oldPC to: scanner pc - 1 do: 		[:i | 		code _ (method at: i) radix: 16.		stream nextPut: 			(code size < 2				ifTrue: [$0]				ifFalse: [code at: 1]).		stream nextPut: code last; space].	stream skip: -1.	stream nextPut: $>.	stream space.	stream nextPutAll: instruction.	stream cr.	oldPC _ scanner pc.	"(InstructionPrinter compiledMethodAt: #print:) symbolic."! !!IntegerTest methodsFor: 'testing - instance creation' stamp: 'laza 3/29/2004 11:28'!testDifferentBases	"| value |	2 to: 36 do: [:each|		value _ 0.		1 to: each-1 do: [:n| value _ value + (n * (each raisedToInteger: n))].		value _ value negated.		Transcript tab; show: 'self assert: (', value printString, ' printStringBase: ', each printString, ') = ''', (value printStringBase: each), '''.'; cr.		Transcript tab; show: 'self assert: (', value printString, ' radix: ', each printString, ') = ''', (value radix: each), '''.'; cr.		Transcript tab; show: 'self assert: ', value printString, ' printStringHex = ''', (value printStringBase: 16), '''.'; cr.		Transcript tab; show: 'self assert: (', value printString, ' storeStringBase: ', each printString, ') = ''', (value storeStringBase: each), '''.'; cr.		Transcript tab; show: 'self assert: ', value printString, ' storeStringHex = ''', (value storeStringBase: 16), '''.'; cr.].	"	self assert: 2r10 = 2.	self assert: 3r210 = 21.	self assert: 4r3210 = 228.	self assert: 5r43210 = 2930.	self assert: 6r543210 = 44790.	self assert: 7r6543210 = 800667.	self assert: 8r76543210 = 16434824.	self assert: 9r876543210 = 381367044.	self assert: 10r9876543210 = 9876543210.	self assert: 11rA9876543210 = 282458553905.	self assert: 12rBA9876543210 = 8842413667692.	self assert: 13rCBA9876543210 = 300771807240918.	self assert: 14rDCBA9876543210 = 11046255305880158.	self assert: 15rEDCBA9876543210 = 435659737878916215.	self assert: 16rFEDCBA9876543210 = 18364758544493064720.	self assert: 17rGFEDCBA9876543210 = 824008854613343261192.	self assert: 18rHGFEDCBA9876543210 = 39210261334551566857170.	self assert: 19rIHGFEDCBA9876543210 = 1972313422155189164466189.	self assert: 20rJIHGFEDCBA9876543210 = 104567135734072022160664820.	self assert: 21rKJIHGFEDCBA9876543210 = 5827980550840017565077671610.	self assert: 22rLKJIHGFEDCBA9876543210 = 340653664490377789692799452102.	self assert: 23rMLKJIHGFEDCBA9876543210 = 20837326537038308910317109288851.	self assert: 24rNMLKJIHGFEDCBA9876543210 = 1331214537196502869015340298036888.	self assert: 25rONMLKJIHGFEDCBA9876543210 = 88663644327703473714387251271141900.	self assert: 26rPONMLKJIHGFEDCBA9876543210 = 6146269788878825859099399609538763450.	self assert: 27rQPONMLKJIHGFEDCBA9876543210 = 442770531899482980347734468443677777577.	self assert: 28rRQPONMLKJIHGFEDCBA9876543210 = 33100056003358651440264672384704297711484.	self assert: 29rSRQPONMLKJIHGFEDCBA9876543210 = 2564411043271974895869785066497940850811934.	self assert: 30rTSRQPONMLKJIHGFEDCBA9876543210 = 205646315052919334126040428061831153388822830.	self assert: 31rUTSRQPONMLKJIHGFEDCBA9876543210 = 17050208381689099029767742314582582184093573615.	self assert: 32rVUTSRQPONMLKJIHGFEDCBA9876543210 = 1459980823972598128486511383358617792788444579872.	self assert: 33rWVUTSRQPONMLKJIHGFEDCBA9876543210 = 128983956064237823710866404905431464703849549412368.	self assert: 34rXWVUTSRQPONMLKJIHGFEDCBA9876543210 = 11745843093701610854378775891116314824081102660800418.	self assert: 35rYXWVUTSRQPONMLKJIHGFEDCBA9876543210 = 1101553773143634726491620528194292510495517905608180485.	self assert: 36rZYXWVUTSRQPONMLKJIHGFEDCBA9876543210 = 106300512100105327644605138221229898724869759421181854980.	self assert: -2r10 = -2.	self assert: -3r210 = -21.	self assert: -4r3210 = -228.	self assert: -5r43210 = -2930.	self assert: -6r543210 = -44790.	self assert: -7r6543210 = -800667.	self assert: -8r76543210 = -16434824.	self assert: -9r876543210 = -381367044.	self assert: -10r9876543210 = -9876543210.	self assert: -11rA9876543210 = -282458553905.	self assert: -12rBA9876543210 = -8842413667692.	self assert: -13rCBA9876543210 = -300771807240918.	self assert: -14rDCBA9876543210 = -11046255305880158.	self assert: -15rEDCBA9876543210 = -435659737878916215.	self assert: -16rFEDCBA9876543210 = -18364758544493064720.	self assert: -17rGFEDCBA9876543210 = -824008854613343261192.	self assert: -18rHGFEDCBA9876543210 = -39210261334551566857170.	self assert: -19rIHGFEDCBA9876543210 = -1972313422155189164466189.	self assert: -20rJIHGFEDCBA9876543210 = -104567135734072022160664820.	self assert: -21rKJIHGFEDCBA9876543210 = -5827980550840017565077671610.	self assert: -22rLKJIHGFEDCBA9876543210 = -340653664490377789692799452102.	self assert: -23rMLKJIHGFEDCBA9876543210 = -20837326537038308910317109288851.	self assert: -24rNMLKJIHGFEDCBA9876543210 = -1331214537196502869015340298036888.	self assert: -25rONMLKJIHGFEDCBA9876543210 = -88663644327703473714387251271141900.	self assert: -26rPONMLKJIHGFEDCBA9876543210 = -6146269788878825859099399609538763450.	self assert: -27rQPONMLKJIHGFEDCBA9876543210 = -442770531899482980347734468443677777577.	self assert: -28rRQPONMLKJIHGFEDCBA9876543210 = -33100056003358651440264672384704297711484.	self assert: -29rSRQPONMLKJIHGFEDCBA9876543210 = -2564411043271974895869785066497940850811934.	self assert: -30rTSRQPONMLKJIHGFEDCBA9876543210 = -205646315052919334126040428061831153388822830.	self assert: -31rUTSRQPONMLKJIHGFEDCBA9876543210 = -17050208381689099029767742314582582184093573615.	self assert: -32rVUTSRQPONMLKJIHGFEDCBA9876543210 = -1459980823972598128486511383358617792788444579872.	self assert: -33rWVUTSRQPONMLKJIHGFEDCBA9876543210 = -128983956064237823710866404905431464703849549412368.	self assert: -34rXWVUTSRQPONMLKJIHGFEDCBA9876543210 = -11745843093701610854378775891116314824081102660800418.	self assert: -35rYXWVUTSRQPONMLKJIHGFEDCBA9876543210 = -1101553773143634726491620528194292510495517905608180485.	self assert: -36rZYXWVUTSRQPONMLKJIHGFEDCBA9876543210 = -106300512100105327644605138221229898724869759421181854980.! !!IntegerTest methodsFor: 'testing' stamp: 'laza 3/29/2004 11:20'!testCreationFromBytes1  "self run: #testCreationFromBytes1"  " it is illegal for a LargeInteger to be less than SmallInteger maxVal."   " here we test that Integer>>byte!!byte2:byte3:byte4: resconstructs SmallInteger maxVal as an instance of SmallInteger. "   | maxSmallInt hexString byte1 byte2 byte3 byte4     builtInteger |  maxSmallInt := SmallInteger maxVal.  hexString := maxSmallInt printStringHex.  self assert: hexString size = 8.  byte4 := Number readFrom: (hexString copyFrom: 1 to: 2) base: 16.  byte3 := Number readFrom: (hexString copyFrom: 3 to: 4) base: 16.  byte2 := Number readFrom: (hexString copyFrom: 5 to: 6) base: 16.  byte1 := Number readFrom: (hexString copyFrom: 7 to: 8) base: 16.  builtInteger := Integer byte1: byte1 byte2: byte2 byte3: byte3 byte4: byte4.  self assert: builtInteger = maxSmallInt.  self assert: builtInteger class = SmallInteger! !!IntegerTest methodsFor: 'testing' stamp: 'laza 3/29/2004 11:20'!testCreationFromBytes2  "self run: #testCreationFromBytes2"  " it is illegal for a LargeInteger to be less than SmallInteger maxVal."   " here we test that Integer>>byte!!byte2:byte3:byte4: resconstructs (SmallInteger maxVal + 1) as an instance of LargePositiveInteger. "   | maxSmallInt hexString byte1 byte2 byte3 byte4     builtInteger |  maxSmallInt := SmallInteger maxVal.  hexString := (maxSmallInt + 1) printStringHex.  self assert: hexString size = 8.  byte4 := Number readFrom: (hexString copyFrom: 1 to: 2) base: 16.  byte3 := Number readFrom: (hexString copyFrom: 3 to: 4) base: 16.  byte2 := Number readFrom: (hexString copyFrom: 5 to: 6) base: 16.  byte1 := Number readFrom: (hexString copyFrom: 7 to: 8) base: 16.  builtInteger := Integer byte1: byte1 byte2: byte2 byte3: byte3 byte4: byte4.  self assert: builtInteger = (maxSmallInt + 1).  self deny: builtInteger class = SmallInteger! !!IntegerTest methodsFor: 'testing' stamp: 'laza 3/29/2004 11:21'!testCreationFromBytes3  "self run: #testCreationFromBytes3"  " it is illegal for a LargeInteger to be less than SmallInteger maxVal."   " here we test that Integer>>byte!!byte2:byte3:byte4: resconstructs (SmallInteger maxVal - 1) as an instance of SmallInteger. "   | maxSmallInt hexString byte1 byte2 byte3 byte4     builtInteger |  maxSmallInt := SmallInteger maxVal.  hexString := (maxSmallInt - 1) printStringHex.  self assert: hexString size = 8.  byte4 := Number readFrom: (hexString copyFrom: 1 to: 2) base: 16.  byte3 := Number readFrom: (hexString copyFrom: 3 to: 4) base: 16.  byte2 := Number readFrom: (hexString copyFrom: 5 to: 6) base: 16.  byte1 := Number readFrom: (hexString copyFrom: 7 to: 8) base: 16.  builtInteger := Integer byte1: byte1 byte2: byte2 byte3: byte3 byte4: byte4.  self assert: builtInteger = (maxSmallInt - 1).  self assert: builtInteger class = SmallInteger! !!IntegerTest methodsFor: 'testing - printing' stamp: 'laza 3/29/2004 13:56'!testIntegerByteEncoded	self assert: (String streamContents: [:s|2 byteEncode: s base: 2]) = '$1$0'.	self assert: (String streamContents: [:s|21 byteEncode: s base: 3]) = '$2$1$0'.	self assert: (String streamContents: [:s|228 byteEncode: s base: 4]) = '$3$2$1$0'.	self assert: (String streamContents: [:s|2930 byteEncode: s base: 5]) = '$4$3$2$1$0'.	self assert: (String streamContents: [:s|44790 byteEncode: s base: 6]) = '$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|800667 byteEncode: s base: 7]) = '$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|16434824 byteEncode: s base: 8]) = '$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|381367044 byteEncode: s base: 9]) = '$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|9876543210 byteEncode: s base: 10]) = '$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|282458553905 byteEncode: s base: 11]) = '$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|8842413667692 byteEncode: s base: 12]) = '$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|300771807240918 byteEncode: s base: 13]) = '$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|11046255305880158 byteEncode: s base: 14]) = '$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|435659737878916215 byteEncode: s base: 15]) = '$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|18364758544493064720 byteEncode: s base: 16]) = '$F$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-2 byteEncode: s base: 2]) = '$-$1$0'.	self assert: (String streamContents: [:s|-21 byteEncode: s base: 3]) = '$-$2$1$0'.	self assert: (String streamContents: [:s|-228 byteEncode: s base: 4]) = '$-$3$2$1$0'.	self assert: (String streamContents: [:s|-2930 byteEncode: s base: 5]) = '$-$4$3$2$1$0'.	self assert: (String streamContents: [:s|-44790 byteEncode: s base: 6]) = '$-$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-800667 byteEncode: s base: 7]) = '$-$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-16434824 byteEncode: s base: 8]) = '$-$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-381367044 byteEncode: s base: 9]) = '$-$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-9876543210 byteEncode: s base: 10]) = '$-$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-282458553905 byteEncode: s base: 11]) = '$-$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-8842413667692 byteEncode: s base: 12]) = '$-$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-300771807240918 byteEncode: s base: 13]) = '$-$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-11046255305880158 byteEncode: s base: 14]) = '$-$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-435659737878916215 byteEncode: s base: 15]) = '$-$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s|-18364758544493064720 byteEncode: s base: 16]) = '$-$F$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.! !!IntegerTest methodsFor: 'testing - printing' stamp: 'laza 3/29/2004 18:16'!testIntegerPadding	"self run: #testIntegerPadding"	self assert: (1 printStringBase: 10 length: 0 padded: false) = '1'.	self assert: (1 printStringBase: 10 length: 1 padded: false) = '1'.	self assert: (1 printStringBase: 10 length: 2 padded: false) = ' 1'.	self assert: (1024 printStringBase: 10 length: 19 padded: false) = '               1024'.	self assert: (1024 printStringBase: 10 length: -1 padded: false) = '1024'.	self assert: (1024 printStringBase: 10 length: 5 padded: false) =  ' 1024'.	self assert: (-1024 printStringBase: 10 length: 5 padded: false) =   '-1024'.	self assert: (-1024 printStringBase: 10 length: 19 padded: false) =  '              -1024'.	self assert: (1 printStringBase: 10 length: 0 padded: true) = '1'.	self assert: (1 printStringBase: 10 length: 1 padded: true) = '1'.	self assert: (1 printStringBase: 10 length: 2 padded: true) = '01'.	self assert: (1024 printStringBase: 10 length: 19 padded: true) = '0000000000000001024'.	self assert: (1024 printStringBase: 10 length: -1 padded: true) = '1024'.	self assert: (1024 printStringBase: 10 length: 5 padded: true) =  '01024'.	self assert: (-1024 printStringBase: 10 length: 5 padded: true) =   '-1024'.	self assert: (-1024 printStringBase: 10 length: 19 padded: true) =  '-000000000000001024'.	self assert: (1 printStringBase: 16 length: 0 padded: false) = '1'.	self assert: (1 printStringBase: 16 length: 1 padded: false) = '1'.	self assert: (1 printStringBase: 16 length: 2 padded: false) = ' 1'.	self assert: (2047 printStringBase: 16 length: 19 padded: false) =  '                7FF'.	self assert: (2047 printStringBase: 16 length: -1 padded: false) =  '7FF'.	self assert: (2047 printStringBase: 16 length: 4 padded: false) =  ' 7FF'.	self assert: (-2047 printStringBase: 16 length: 4 padded: false) = '-7FF'.	self assert: (-2047 printStringBase: 16 length: 19 padded: false) =  '               -7FF'.	self assert: (1 printStringBase: 16 length: 0 padded: true) = '1'.	self assert: (1 printStringBase: 16 length: 1 padded: true) = '1'.	self assert: (1 printStringBase: 16 length: 2 padded: true) = '01'.	self assert: (2047 printStringBase: 16 length: 19 padded: true) =  '00000000000000007FF'.	self assert: (2047 printStringBase: 16 length: -1 padded: true) =  '7FF'.	self assert: (2047 printStringBase: 16 length: 4 padded: true) =  '07FF'.	self assert: (-2047 printStringBase: 16 length: 4 padded: true) = '-7FF'.	self assert: (-2047 printStringBase: 16 length: 19 padded: true) =  '-0000000000000007FF'.	self assert: (1 storeStringBase: 10 length: 0 padded: false) = '1'.	self assert: (1 storeStringBase: 10 length: 1 padded: false) = '1'.	self assert: (1 storeStringBase: 10 length: 2 padded: false) = ' 1'.	self assert: (1024 storeStringBase: 10 length: 19 padded: false) = '               1024'.	self assert: (1024 storeStringBase: 10 length: -1 padded: false) = '1024'.	self assert: (1024 storeStringBase: 10 length: 5 padded: false) =  ' 1024'.	self assert: (-1024 storeStringBase: 10 length: 5 padded: false) =   '-1024'.	self assert: (-1024 storeStringBase: 10 length: 19 padded: false) =  '              -1024'.	self assert: (1 storeStringBase: 10 length: 0 padded: true) = '1'.	self assert: (1 storeStringBase: 10 length: 1 padded: true) = '1'.	self assert: (1 storeStringBase: 10 length: 2 padded: true) = '01'.	self assert: (1024 storeStringBase: 10 length: 19 padded: true) = '0000000000000001024'.	self assert: (1024 storeStringBase: 10 length: -1 padded: true) = '1024'.	self assert: (1024 storeStringBase: 10 length: 5 padded: true) =  '01024'.	self assert: (-1024 storeStringBase: 10 length: 5 padded: true) =   '-1024'.	self assert: (-1024 storeStringBase: 10 length: 19 padded: true) =  '-000000000000001024'.	self assert: (1 storeStringBase: 16 length: 0 padded: false) = '16r1'.	self assert: (1 storeStringBase: 16 length: 4 padded: false) = '16r1'.	self assert: (1 storeStringBase: 16 length: 5 padded: false) = ' 16r1'.	self assert: (2047 storeStringBase: 16 length: 19 padded: false) =  '             16r7FF'.	self assert: (2047 storeStringBase: 16 length: -1 padded: false) =  '16r7FF'.	self assert: (2047 storeStringBase: 16 length: 7 padded: false) =  ' 16r7FF'.	self assert: (-2047 storeStringBase: 16 length: 7 padded: false) = '-16r7FF'.	self assert: (-2047 storeStringBase: 16 length: 19 padded: false) =  '            -16r7FF'.	self assert: (1 storeStringBase: 16 length: 0 padded: true) = '16r1'.	self assert: (1 storeStringBase: 16 length: 4 padded: true) = '16r1'.	self assert: (1 storeStringBase: 16 length: 5 padded: true) = '16r01'.	self assert: (2047 storeStringBase: 16 length: 19 padded: true) =  '16r00000000000007FF'.	self assert: (2047 storeStringBase: 16 length: -1 padded: true) =  '16r7FF'.	self assert: (2047 storeStringBase: 16 length: 7 padded: true) =  '16r07FF'.	self assert: (-2047 storeStringBase: 16 length: 7 padded: true) = '-16r7FF'.	self assert: (-2047 storeStringBase: 16 length: 19 padded: true) =  '-16r0000000000007FF'.! !!IntegerTest methodsFor: 'testing - printing' stamp: 'laza 3/30/2004 14:20'!testNegativeIntegerPrinting	"self run: #testnegativeIntegerPrinting"	self assert: (-2 printStringBase: 2) = '-10'.	self assert: (-2 radix: 2) = '-10'.	self assert: -2 printStringHex = '-2'.	self assert: (-2 storeStringBase: 2) = '-2r10'.	self assert: -2 storeStringHex = '-16r2'.	self assert: (-21 printStringBase: 3) = '-210'.	self assert: (-21 radix: 3) = '-210'.	self assert: -21 printStringHex = '-15'.	self assert: (-21 storeStringBase: 3) = '-3r210'.	self assert: -21 storeStringHex = '-16r15'.	self assert: (-228 printStringBase: 4) = '-3210'.	self assert: (-228 radix: 4) = '-3210'.	self assert: -228 printStringHex = '-E4'.	self assert: (-228 storeStringBase: 4) = '-4r3210'.	self assert: -228 storeStringHex = '-16rE4'.	self assert: (-2930 printStringBase: 5) = '-43210'.	self assert: (-2930 radix: 5) = '-43210'.	self assert: -2930 printStringHex = '-B72'.	self assert: (-2930 storeStringBase: 5) = '-5r43210'.	self assert: -2930 storeStringHex = '-16rB72'.	self assert: (-44790 printStringBase: 6) = '-543210'.	self assert: (-44790 radix: 6) = '-543210'.	self assert: -44790 printStringHex = '-AEF6'.	self assert: (-44790 storeStringBase: 6) = '-6r543210'.	self assert: -44790 storeStringHex = '-16rAEF6'.	self assert: (-800667 printStringBase: 7) = '-6543210'.	self assert: (-800667 radix: 7) = '-6543210'.	self assert: -800667 printStringHex = '-C379B'.	self assert: (-800667 storeStringBase: 7) = '-7r6543210'.	self assert: -800667 storeStringHex = '-16rC379B'.	self assert: (-16434824 printStringBase: 8) = '-76543210'.	self assert: (-16434824 radix: 8) = '-76543210'.	self assert: -16434824 printStringHex = '-FAC688'.	self assert: (-16434824 storeStringBase: 8) = '-8r76543210'.	self assert: -16434824 storeStringHex = '-16rFAC688'.	self assert: (-381367044 printStringBase: 9) = '-876543210'.	self assert: (-381367044 radix: 9) = '-876543210'.	self assert: -381367044 printStringHex = '-16BB3304'.	self assert: (-381367044 storeStringBase: 9) = '-9r876543210'.	self assert: -381367044 storeStringHex = '-16r16BB3304'.	self assert: (-9876543210 printStringBase: 10) = '-9876543210'.	self assert: (-9876543210 radix: 10) = '-9876543210'.	self assert: -9876543210 printStringHex = '-24CB016EA'.	self assert: (-9876543210 storeStringBase: 10) = '-9876543210'.	self assert: -9876543210 storeStringHex = '-16r24CB016EA'.	self assert: (-282458553905 printStringBase: 11) = '-A9876543210'.	self assert: (-282458553905 radix: 11) = '-A9876543210'.	self assert: -282458553905 printStringHex = '-41C3D77E31'.	self assert: (-282458553905 storeStringBase: 11) = '-11rA9876543210'.	self assert: -282458553905 storeStringHex = '-16r41C3D77E31'.	self assert: (-8842413667692 printStringBase: 12) = '-BA9876543210'.	self assert: (-8842413667692 radix: 12) = '-BA9876543210'.	self assert: -8842413667692 printStringHex = '-80AC8ECF56C'.	self assert: (-8842413667692 storeStringBase: 12) = '-12rBA9876543210'.	self assert: -8842413667692 storeStringHex = '-16r80AC8ECF56C'.	self assert: (-300771807240918 printStringBase: 13) = '-CBA9876543210'.	self assert: (-300771807240918 radix: 13) = '-CBA9876543210'.	self assert: -300771807240918 printStringHex = '-1118CE4BAA2D6'.	self assert: (-300771807240918 storeStringBase: 13) = '-13rCBA9876543210'.	self assert: -300771807240918 storeStringHex = '-16r1118CE4BAA2D6'.	self assert: (-11046255305880158 printStringBase: 14) = '-DCBA9876543210'.	self assert: (-11046255305880158 radix: 14) = '-DCBA9876543210'.	self assert: -11046255305880158 printStringHex = '-273E82BB9AF25E'.	self assert: (-11046255305880158 storeStringBase: 14) = '-14rDCBA9876543210'.	self assert: -11046255305880158 storeStringHex = '-16r273E82BB9AF25E'.	self assert: (-435659737878916215 printStringBase: 15) = '-EDCBA9876543210'.	self assert: (-435659737878916215 radix: 15) = '-EDCBA9876543210'.	self assert: -435659737878916215 printStringHex = '-60BC6392F366C77'.	self assert: (-435659737878916215 storeStringBase: 15) = '-15rEDCBA9876543210'.	self assert: -435659737878916215 storeStringHex = '-16r60BC6392F366C77'.	self assert: (-18364758544493064720 printStringBase: 16) = '-FEDCBA9876543210'.	self assert: (-18364758544493064720 radix: 16) = '-FEDCBA9876543210'.	self assert: -18364758544493064720 printStringHex = '-FEDCBA9876543210'.	self assert: (-18364758544493064720 storeStringBase: 16) = '-16rFEDCBA9876543210'.	self assert: -18364758544493064720 storeStringHex = '-16rFEDCBA9876543210'.	self assert: (-824008854613343261192 printStringBase: 17) = '-GFEDCBA9876543210'.	self assert: (-824008854613343261192 radix: 17) = '-GFEDCBA9876543210'.	self assert: -824008854613343261192 printStringHex = '-2CAB6B877C1CD2D208'.	self assert: (-824008854613343261192 storeStringBase: 17) = '-17rGFEDCBA9876543210'.	self assert: -824008854613343261192 storeStringHex = '-16r2CAB6B877C1CD2D208'.	self assert: (-39210261334551566857170 printStringBase: 18) = '-HGFEDCBA9876543210'.	self assert: (-39210261334551566857170 radix: 18) = '-HGFEDCBA9876543210'.	self assert: -39210261334551566857170 printStringHex = '-84D97AFCAE81415B3D2'.	self assert: (-39210261334551566857170 storeStringBase: 18) = '-18rHGFEDCBA9876543210'.	self assert: -39210261334551566857170 storeStringHex = '-16r84D97AFCAE81415B3D2'.	self assert: (-1972313422155189164466189 printStringBase: 19) = '-IHGFEDCBA9876543210'.	self assert: (-1972313422155189164466189 radix: 19) = '-IHGFEDCBA9876543210'.	self assert: -1972313422155189164466189 printStringHex = '-1A1A75329C5C6FC00600D'.	self assert: (-1972313422155189164466189 storeStringBase: 19) = '-19rIHGFEDCBA9876543210'.	self assert: -1972313422155189164466189 storeStringHex = '-16r1A1A75329C5C6FC00600D'.	self assert: (-104567135734072022160664820 printStringBase: 20) = '-JIHGFEDCBA9876543210'.	self assert: (-104567135734072022160664820 radix: 20) = '-JIHGFEDCBA9876543210'.	self assert: -104567135734072022160664820 printStringHex = '-567EF3C9636D242A8C68F4'.	self assert: (-104567135734072022160664820 storeStringBase: 20) = '-20rJIHGFEDCBA9876543210'.	self assert: -104567135734072022160664820 storeStringHex = '-16r567EF3C9636D242A8C68F4'.	self assert: (-5827980550840017565077671610 printStringBase: 21) = '-KJIHGFEDCBA9876543210'.	self assert: (-5827980550840017565077671610 radix: 21) = '-KJIHGFEDCBA9876543210'.	self assert: -5827980550840017565077671610 printStringHex = '-12D4CAE2B8A09BCFDBE30EBA'.	self assert: (-5827980550840017565077671610 storeStringBase: 21) = '-21rKJIHGFEDCBA9876543210'.	self assert: -5827980550840017565077671610 storeStringHex = '-16r12D4CAE2B8A09BCFDBE30EBA'.	self assert: (-340653664490377789692799452102 printStringBase: 22) = '-LKJIHGFEDCBA9876543210'.	self assert: (-340653664490377789692799452102 radix: 22) = '-LKJIHGFEDCBA9876543210'.	self assert: -340653664490377789692799452102 printStringHex = '-44CB61B5B47E1A5D8F88583C6'.	self assert: (-340653664490377789692799452102 storeStringBase: 22) = '-22rLKJIHGFEDCBA9876543210'.	self assert: -340653664490377789692799452102 storeStringHex = '-16r44CB61B5B47E1A5D8F88583C6'.	self assert: (-20837326537038308910317109288851 printStringBase: 23) = '-MLKJIHGFEDCBA9876543210'.	self assert: (-20837326537038308910317109288851 radix: 23) = '-MLKJIHGFEDCBA9876543210'.	self assert: -20837326537038308910317109288851 printStringHex = '-1070108876456E0EF115B389F93'.	self assert: (-20837326537038308910317109288851 storeStringBase: 23) = '-23rMLKJIHGFEDCBA9876543210'.	self assert: -20837326537038308910317109288851 storeStringHex = '-16r1070108876456E0EF115B389F93'.	self assert: (-1331214537196502869015340298036888 printStringBase: 24) = '-NMLKJIHGFEDCBA9876543210'.	self assert: (-1331214537196502869015340298036888 radix: 24) = '-NMLKJIHGFEDCBA9876543210'.	self assert: -1331214537196502869015340298036888 printStringHex = '-41A24A285154B026B6ED206C6698'.	self assert: (-1331214537196502869015340298036888 storeStringBase: 24) = '-24rNMLKJIHGFEDCBA9876543210'.	self assert: -1331214537196502869015340298036888 storeStringHex = '-16r41A24A285154B026B6ED206C6698'.	self assert: (-88663644327703473714387251271141900 printStringBase: 25) = '-ONMLKJIHGFEDCBA9876543210'.	self assert: (-88663644327703473714387251271141900 radix: 25) = '-ONMLKJIHGFEDCBA9876543210'.	self assert: -88663644327703473714387251271141900 printStringHex = '-111374860A2C6CEBE5999630398A0C'.	self assert: (-88663644327703473714387251271141900 storeStringBase: 25) = '-25rONMLKJIHGFEDCBA9876543210'.	self assert: -88663644327703473714387251271141900 storeStringHex = '-16r111374860A2C6CEBE5999630398A0C'.	self assert: (-6146269788878825859099399609538763450 printStringBase: 26) = '-PONMLKJIHGFEDCBA9876543210'.	self assert: (-6146269788878825859099399609538763450 radix: 26) = '-PONMLKJIHGFEDCBA9876543210'.	self assert: -6146269788878825859099399609538763450 printStringHex = '-49FBA7F30B0F48BD14E6A99BD8ADABA'.	self assert: (-6146269788878825859099399609538763450 storeStringBase: 26) = '-26rPONMLKJIHGFEDCBA9876543210'.	self assert: -6146269788878825859099399609538763450 storeStringHex = '-16r49FBA7F30B0F48BD14E6A99BD8ADABA'.	self assert: (-442770531899482980347734468443677777577 printStringBase: 27) = '-QPONMLKJIHGFEDCBA9876543210'.	self assert: (-442770531899482980347734468443677777577 radix: 27) = '-QPONMLKJIHGFEDCBA9876543210'.	self assert: -442770531899482980347734468443677777577 printStringHex = '-14D1A80A997343640C1145A073731DEA9'.	self assert: (-442770531899482980347734468443677777577 storeStringBase: 27) = '-27rQPONMLKJIHGFEDCBA9876543210'.	self assert: -442770531899482980347734468443677777577 storeStringHex = '-16r14D1A80A997343640C1145A073731DEA9'.	self assert: (-33100056003358651440264672384704297711484 printStringBase: 28) = '-RQPONMLKJIHGFEDCBA9876543210'.	self assert: (-33100056003358651440264672384704297711484 radix: 28) = '-RQPONMLKJIHGFEDCBA9876543210'.	self assert: -33100056003358651440264672384704297711484 printStringHex = '-6145B6E6DACFA25D0E936F51D25932377C'.	self assert: (-33100056003358651440264672384704297711484 storeStringBase: 28) = '-28rRQPONMLKJIHGFEDCBA9876543210'.	self assert: -33100056003358651440264672384704297711484 storeStringHex = '-16r6145B6E6DACFA25D0E936F51D25932377C'.	self assert: (-2564411043271974895869785066497940850811934 printStringBase: 29) = '-SRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-2564411043271974895869785066497940850811934 radix: 29) = '-SRQPONMLKJIHGFEDCBA9876543210'.	self assert: -2564411043271974895869785066497940850811934 printStringHex = '-1D702071CBA4A1597D4DD37E95EFAC79241E'.	self assert: (-2564411043271974895869785066497940850811934 storeStringBase: 29) = '-29rSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -2564411043271974895869785066497940850811934 storeStringHex = '-16r1D702071CBA4A1597D4DD37E95EFAC79241E'.	self assert: (-205646315052919334126040428061831153388822830 printStringBase: 30) = '-TSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-205646315052919334126040428061831153388822830 radix: 30) = '-TSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -205646315052919334126040428061831153388822830 printStringHex = '-938B4343B54B550989989D02998718FFB212E'.	self assert: (-205646315052919334126040428061831153388822830 storeStringBase: 30) = '-30rTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -205646315052919334126040428061831153388822830 storeStringHex = '-16r938B4343B54B550989989D02998718FFB212E'.	self assert: (-17050208381689099029767742314582582184093573615 printStringBase: 31) = '-UTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-17050208381689099029767742314582582184093573615 radix: 31) = '-UTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -17050208381689099029767742314582582184093573615 printStringHex = '-2FC8ECB1521BA16D24A69E976D53873E2C661EF'.	self assert: (-17050208381689099029767742314582582184093573615 storeStringBase: 31) = '-31rUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -17050208381689099029767742314582582184093573615 storeStringHex = '-16r2FC8ECB1521BA16D24A69E976D53873E2C661EF'.	self assert: (-1459980823972598128486511383358617792788444579872 printStringBase: 32) = '-VUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-1459980823972598128486511383358617792788444579872 radix: 32) = '-VUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -1459980823972598128486511383358617792788444579872 printStringHex = '-FFBBCDEB38BDAB49CA307B9AC5A928398A418820'.	self assert: (-1459980823972598128486511383358617792788444579872 storeStringBase: 32) = '-32rVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -1459980823972598128486511383358617792788444579872 storeStringHex = '-16rFFBBCDEB38BDAB49CA307B9AC5A928398A418820'.	self assert: (-128983956064237823710866404905431464703849549412368 printStringBase: 33) = '-WVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-128983956064237823710866404905431464703849549412368 radix: 33) = '-WVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -128983956064237823710866404905431464703849549412368 printStringHex = '-584120A0328DE272AB055A8AA003CE4A559F223810'.	self assert: (-128983956064237823710866404905431464703849549412368 storeStringBase: 33) = '-33rWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -128983956064237823710866404905431464703849549412368 storeStringHex = '-16r584120A0328DE272AB055A8AA003CE4A559F223810'.	self assert: (-11745843093701610854378775891116314824081102660800418 printStringBase: 34) = '-XWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-11745843093701610854378775891116314824081102660800418 radix: 34) = '-XWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -11745843093701610854378775891116314824081102660800418 printStringHex = '-1F64D4FC76000F7B92CF0CD5D0F350139AB9F25D8FA2'.	self assert: (-11745843093701610854378775891116314824081102660800418 storeStringBase: 34) = '-34rXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -11745843093701610854378775891116314824081102660800418 storeStringHex = '-16r1F64D4FC76000F7B92CF0CD5D0F350139AB9F25D8FA2'.	self assert: (-1101553773143634726491620528194292510495517905608180485 printStringBase: 35) = '-YXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-1101553773143634726491620528194292510495517905608180485 radix: 35) = '-YXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -1101553773143634726491620528194292510495517905608180485 printStringHex = '-B8031AD55AD1FAA89E07A271CA1ED2F420415D1570305'.	self assert: (-1101553773143634726491620528194292510495517905608180485 storeStringBase: 35) = '-35rYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -1101553773143634726491620528194292510495517905608180485 storeStringHex = '-16rB8031AD55AD1FAA89E07A271CA1ED2F420415D1570305'.	self assert: (-106300512100105327644605138221229898724869759421181854980 printStringBase: 36) = '-ZYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (-106300512100105327644605138221229898724869759421181854980 radix: 36) = '-ZYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -106300512100105327644605138221229898724869759421181854980 printStringHex = '-455D441E55A37239AB4C303189576071AF5578FFCA80504'.	self assert: (-106300512100105327644605138221229898724869759421181854980 storeStringBase: 36) = '-36rZYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: -106300512100105327644605138221229898724869759421181854980 storeStringHex = '-16r455D441E55A37239AB4C303189576071AF5578FFCA80504'.! !!IntegerTest methodsFor: 'testing - printing' stamp: 'laza 3/30/2004 11:52'!testPositiveIntegerPrinting	"self run: #testPositiveIntegerPrinting"	self assert: 0 printString = '0'.	self assert: 0 printStringHex = '0'.	self assert: 0 storeStringHex = '16r0'.	self assert: (2 printStringBase: 2) = '10'.	self assert: (2 radix: 2) = '10'.	self assert: 2 printStringHex = '2'.	self assert: (2 storeStringBase: 2) = '2r10'.	self assert: 2 storeStringHex = '16r2'.	self assert: (21 printStringBase: 3) = '210'.	self assert: (21 radix: 3) = '210'.	self assert: 21 printStringHex = '15'.	self assert: (21 storeStringBase: 3) = '3r210'.	self assert: 21 storeStringHex = '16r15'.	self assert: (228 printStringBase: 4) = '3210'.	self assert: (228 radix: 4) = '3210'.	self assert: 228 printStringHex = 'E4'.	self assert: (228 storeStringBase: 4) = '4r3210'.	self assert: 228 storeStringHex = '16rE4'.	self assert: (2930 printStringBase: 5) = '43210'.	self assert: (2930 radix: 5) = '43210'.	self assert: 2930 printStringHex = 'B72'.	self assert: (2930 storeStringBase: 5) = '5r43210'.	self assert: 2930 storeStringHex = '16rB72'.	self assert: (44790 printStringBase: 6) = '543210'.	self assert: (44790 radix: 6) = '543210'.	self assert: 44790 printStringHex = 'AEF6'.	self assert: (44790 storeStringBase: 6) = '6r543210'.	self assert: 44790 storeStringHex = '16rAEF6'.	self assert: (800667 printStringBase: 7) = '6543210'.	self assert: (800667 radix: 7) = '6543210'.	self assert: 800667 printStringHex = 'C379B'.	self assert: (800667 storeStringBase: 7) = '7r6543210'.	self assert: 800667 storeStringHex = '16rC379B'.	self assert: (16434824 printStringBase: 8) = '76543210'.	self assert: (16434824 radix: 8) = '76543210'.	self assert: 16434824 printStringHex = 'FAC688'.	self assert: (16434824 storeStringBase: 8) = '8r76543210'.	self assert: 16434824 storeStringHex = '16rFAC688'.	self assert: (381367044 printStringBase: 9) = '876543210'.	self assert: (381367044 radix: 9) = '876543210'.	self assert: 381367044 printStringHex = '16BB3304'.	self assert: (381367044 storeStringBase: 9) = '9r876543210'.	self assert: 381367044 storeStringHex = '16r16BB3304'.	self assert: (9876543210 printStringBase: 10) = '9876543210'.	self assert: (9876543210 radix: 10) = '9876543210'.	self assert: 9876543210 printStringHex = '24CB016EA'.	self assert: (9876543210 storeStringBase: 10) = '9876543210'.	self assert: 9876543210 storeStringHex = '16r24CB016EA'.	self assert: (282458553905 printStringBase: 11) = 'A9876543210'.	self assert: (282458553905 radix: 11) = 'A9876543210'.	self assert: 282458553905 printStringHex = '41C3D77E31'.	self assert: (282458553905 storeStringBase: 11) = '11rA9876543210'.	self assert: 282458553905 storeStringHex = '16r41C3D77E31'.	self assert: (8842413667692 printStringBase: 12) = 'BA9876543210'.	self assert: (8842413667692 radix: 12) = 'BA9876543210'.	self assert: 8842413667692 printStringHex = '80AC8ECF56C'.	self assert: (8842413667692 storeStringBase: 12) = '12rBA9876543210'.	self assert: 8842413667692 storeStringHex = '16r80AC8ECF56C'.	self assert: (300771807240918 printStringBase: 13) = 'CBA9876543210'.	self assert: (300771807240918 radix: 13) = 'CBA9876543210'.	self assert: 300771807240918 printStringHex = '1118CE4BAA2D6'.	self assert: (300771807240918 storeStringBase: 13) = '13rCBA9876543210'.	self assert: 300771807240918 storeStringHex = '16r1118CE4BAA2D6'.	self assert: (11046255305880158 printStringBase: 14) = 'DCBA9876543210'.	self assert: (11046255305880158 radix: 14) = 'DCBA9876543210'.	self assert: 11046255305880158 printStringHex = '273E82BB9AF25E'.	self assert: (11046255305880158 storeStringBase: 14) = '14rDCBA9876543210'.	self assert: 11046255305880158 storeStringHex = '16r273E82BB9AF25E'.	self assert: (435659737878916215 printStringBase: 15) = 'EDCBA9876543210'.	self assert: (435659737878916215 radix: 15) = 'EDCBA9876543210'.	self assert: 435659737878916215 printStringHex = '60BC6392F366C77'.	self assert: (435659737878916215 storeStringBase: 15) = '15rEDCBA9876543210'.	self assert: 435659737878916215 storeStringHex = '16r60BC6392F366C77'.	self assert: (18364758544493064720 printStringBase: 16) = 'FEDCBA9876543210'.	self assert: (18364758544493064720 radix: 16) = 'FEDCBA9876543210'.	self assert: 18364758544493064720 printStringHex = 'FEDCBA9876543210'.	self assert: (18364758544493064720 storeStringBase: 16) = '16rFEDCBA9876543210'.	self assert: 18364758544493064720 storeStringHex = '16rFEDCBA9876543210'.	self assert: (824008854613343261192 printStringBase: 17) = 'GFEDCBA9876543210'.	self assert: (824008854613343261192 radix: 17) = 'GFEDCBA9876543210'.	self assert: 824008854613343261192 printStringHex = '2CAB6B877C1CD2D208'.	self assert: (824008854613343261192 storeStringBase: 17) = '17rGFEDCBA9876543210'.	self assert: 824008854613343261192 storeStringHex = '16r2CAB6B877C1CD2D208'.	self assert: (39210261334551566857170 printStringBase: 18) = 'HGFEDCBA9876543210'.	self assert: (39210261334551566857170 radix: 18) = 'HGFEDCBA9876543210'.	self assert: 39210261334551566857170 printStringHex = '84D97AFCAE81415B3D2'.	self assert: (39210261334551566857170 storeStringBase: 18) = '18rHGFEDCBA9876543210'.	self assert: 39210261334551566857170 storeStringHex = '16r84D97AFCAE81415B3D2'.	self assert: (1972313422155189164466189 printStringBase: 19) = 'IHGFEDCBA9876543210'.	self assert: (1972313422155189164466189 radix: 19) = 'IHGFEDCBA9876543210'.	self assert: 1972313422155189164466189 printStringHex = '1A1A75329C5C6FC00600D'.	self assert: (1972313422155189164466189 storeStringBase: 19) = '19rIHGFEDCBA9876543210'.	self assert: 1972313422155189164466189 storeStringHex = '16r1A1A75329C5C6FC00600D'.	self assert: (104567135734072022160664820 printStringBase: 20) = 'JIHGFEDCBA9876543210'.	self assert: (104567135734072022160664820 radix: 20) = 'JIHGFEDCBA9876543210'.	self assert: 104567135734072022160664820 printStringHex = '567EF3C9636D242A8C68F4'.	self assert: (104567135734072022160664820 storeStringBase: 20) = '20rJIHGFEDCBA9876543210'.	self assert: 104567135734072022160664820 storeStringHex = '16r567EF3C9636D242A8C68F4'.	self assert: (5827980550840017565077671610 printStringBase: 21) = 'KJIHGFEDCBA9876543210'.	self assert: (5827980550840017565077671610 radix: 21) = 'KJIHGFEDCBA9876543210'.	self assert: 5827980550840017565077671610 printStringHex = '12D4CAE2B8A09BCFDBE30EBA'.	self assert: (5827980550840017565077671610 storeStringBase: 21) = '21rKJIHGFEDCBA9876543210'.	self assert: 5827980550840017565077671610 storeStringHex = '16r12D4CAE2B8A09BCFDBE30EBA'.	self assert: (340653664490377789692799452102 printStringBase: 22) = 'LKJIHGFEDCBA9876543210'.	self assert: (340653664490377789692799452102 radix: 22) = 'LKJIHGFEDCBA9876543210'.	self assert: 340653664490377789692799452102 printStringHex = '44CB61B5B47E1A5D8F88583C6'.	self assert: (340653664490377789692799452102 storeStringBase: 22) = '22rLKJIHGFEDCBA9876543210'.	self assert: 340653664490377789692799452102 storeStringHex = '16r44CB61B5B47E1A5D8F88583C6'.	self assert: (20837326537038308910317109288851 printStringBase: 23) = 'MLKJIHGFEDCBA9876543210'.	self assert: (20837326537038308910317109288851 radix: 23) = 'MLKJIHGFEDCBA9876543210'.	self assert: 20837326537038308910317109288851 printStringHex = '1070108876456E0EF115B389F93'.	self assert: (20837326537038308910317109288851 storeStringBase: 23) = '23rMLKJIHGFEDCBA9876543210'.	self assert: 20837326537038308910317109288851 storeStringHex = '16r1070108876456E0EF115B389F93'.	self assert: (1331214537196502869015340298036888 printStringBase: 24) = 'NMLKJIHGFEDCBA9876543210'.	self assert: (1331214537196502869015340298036888 radix: 24) = 'NMLKJIHGFEDCBA9876543210'.	self assert: 1331214537196502869015340298036888 printStringHex = '41A24A285154B026B6ED206C6698'.	self assert: (1331214537196502869015340298036888 storeStringBase: 24) = '24rNMLKJIHGFEDCBA9876543210'.	self assert: 1331214537196502869015340298036888 storeStringHex = '16r41A24A285154B026B6ED206C6698'.	self assert: (88663644327703473714387251271141900 printStringBase: 25) = 'ONMLKJIHGFEDCBA9876543210'.	self assert: (88663644327703473714387251271141900 radix: 25) = 'ONMLKJIHGFEDCBA9876543210'.	self assert: 88663644327703473714387251271141900 printStringHex = '111374860A2C6CEBE5999630398A0C'.	self assert: (88663644327703473714387251271141900 storeStringBase: 25) = '25rONMLKJIHGFEDCBA9876543210'.	self assert: 88663644327703473714387251271141900 storeStringHex = '16r111374860A2C6CEBE5999630398A0C'.	self assert: (6146269788878825859099399609538763450 printStringBase: 26) = 'PONMLKJIHGFEDCBA9876543210'.	self assert: (6146269788878825859099399609538763450 radix: 26) = 'PONMLKJIHGFEDCBA9876543210'.	self assert: 6146269788878825859099399609538763450 printStringHex = '49FBA7F30B0F48BD14E6A99BD8ADABA'.	self assert: (6146269788878825859099399609538763450 storeStringBase: 26) = '26rPONMLKJIHGFEDCBA9876543210'.	self assert: 6146269788878825859099399609538763450 storeStringHex = '16r49FBA7F30B0F48BD14E6A99BD8ADABA'.	self assert: (442770531899482980347734468443677777577 printStringBase: 27) = 'QPONMLKJIHGFEDCBA9876543210'.	self assert: (442770531899482980347734468443677777577 radix: 27) = 'QPONMLKJIHGFEDCBA9876543210'.	self assert: 442770531899482980347734468443677777577 printStringHex = '14D1A80A997343640C1145A073731DEA9'.	self assert: (442770531899482980347734468443677777577 storeStringBase: 27) = '27rQPONMLKJIHGFEDCBA9876543210'.	self assert: 442770531899482980347734468443677777577 storeStringHex = '16r14D1A80A997343640C1145A073731DEA9'.	self assert: (33100056003358651440264672384704297711484 printStringBase: 28) = 'RQPONMLKJIHGFEDCBA9876543210'.	self assert: (33100056003358651440264672384704297711484 radix: 28) = 'RQPONMLKJIHGFEDCBA9876543210'.	self assert: 33100056003358651440264672384704297711484 printStringHex = '6145B6E6DACFA25D0E936F51D25932377C'.	self assert: (33100056003358651440264672384704297711484 storeStringBase: 28) = '28rRQPONMLKJIHGFEDCBA9876543210'.	self assert: 33100056003358651440264672384704297711484 storeStringHex = '16r6145B6E6DACFA25D0E936F51D25932377C'.	self assert: (2564411043271974895869785066497940850811934 printStringBase: 29) = 'SRQPONMLKJIHGFEDCBA9876543210'.	self assert: (2564411043271974895869785066497940850811934 radix: 29) = 'SRQPONMLKJIHGFEDCBA9876543210'.	self assert: 2564411043271974895869785066497940850811934 printStringHex = '1D702071CBA4A1597D4DD37E95EFAC79241E'.	self assert: (2564411043271974895869785066497940850811934 storeStringBase: 29) = '29rSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 2564411043271974895869785066497940850811934 storeStringHex = '16r1D702071CBA4A1597D4DD37E95EFAC79241E'.	self assert: (205646315052919334126040428061831153388822830 printStringBase: 30) = 'TSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (205646315052919334126040428061831153388822830 radix: 30) = 'TSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 205646315052919334126040428061831153388822830 printStringHex = '938B4343B54B550989989D02998718FFB212E'.	self assert: (205646315052919334126040428061831153388822830 storeStringBase: 30) = '30rTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 205646315052919334126040428061831153388822830 storeStringHex = '16r938B4343B54B550989989D02998718FFB212E'.	self assert: (17050208381689099029767742314582582184093573615 printStringBase: 31) = 'UTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (17050208381689099029767742314582582184093573615 radix: 31) = 'UTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 17050208381689099029767742314582582184093573615 printStringHex = '2FC8ECB1521BA16D24A69E976D53873E2C661EF'.	self assert: (17050208381689099029767742314582582184093573615 storeStringBase: 31) = '31rUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 17050208381689099029767742314582582184093573615 storeStringHex = '16r2FC8ECB1521BA16D24A69E976D53873E2C661EF'.	self assert: (1459980823972598128486511383358617792788444579872 printStringBase: 32) = 'VUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (1459980823972598128486511383358617792788444579872 radix: 32) = 'VUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 1459980823972598128486511383358617792788444579872 printStringHex = 'FFBBCDEB38BDAB49CA307B9AC5A928398A418820'.	self assert: (1459980823972598128486511383358617792788444579872 storeStringBase: 32) = '32rVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 1459980823972598128486511383358617792788444579872 storeStringHex = '16rFFBBCDEB38BDAB49CA307B9AC5A928398A418820'.	self assert: (128983956064237823710866404905431464703849549412368 printStringBase: 33) = 'WVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (128983956064237823710866404905431464703849549412368 radix: 33) = 'WVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 128983956064237823710866404905431464703849549412368 printStringHex = '584120A0328DE272AB055A8AA003CE4A559F223810'.	self assert: (128983956064237823710866404905431464703849549412368 storeStringBase: 33) = '33rWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 128983956064237823710866404905431464703849549412368 storeStringHex = '16r584120A0328DE272AB055A8AA003CE4A559F223810'.	self assert: (11745843093701610854378775891116314824081102660800418 printStringBase: 34) = 'XWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (11745843093701610854378775891116314824081102660800418 radix: 34) = 'XWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 11745843093701610854378775891116314824081102660800418 printStringHex = '1F64D4FC76000F7B92CF0CD5D0F350139AB9F25D8FA2'.	self assert: (11745843093701610854378775891116314824081102660800418 storeStringBase: 34) = '34rXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 11745843093701610854378775891116314824081102660800418 storeStringHex = '16r1F64D4FC76000F7B92CF0CD5D0F350139AB9F25D8FA2'.	self assert: (1101553773143634726491620528194292510495517905608180485 printStringBase: 35) = 'YXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (1101553773143634726491620528194292510495517905608180485 radix: 35) = 'YXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 1101553773143634726491620528194292510495517905608180485 printStringHex = 'B8031AD55AD1FAA89E07A271CA1ED2F420415D1570305'.	self assert: (1101553773143634726491620528194292510495517905608180485 storeStringBase: 35) = '35rYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 1101553773143634726491620528194292510495517905608180485 storeStringHex = '16rB8031AD55AD1FAA89E07A271CA1ED2F420415D1570305'.	self assert: (106300512100105327644605138221229898724869759421181854980 printStringBase: 36) = 'ZYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: (106300512100105327644605138221229898724869759421181854980 radix: 36) = 'ZYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 106300512100105327644605138221229898724869759421181854980 printStringHex = '455D441E55A37239AB4C303189576071AF5578FFCA80504'.	self assert: (106300512100105327644605138221229898724869759421181854980 storeStringBase: 36) = '36rZYXWVUTSRQPONMLKJIHGFEDCBA9876543210'.	self assert: 106300512100105327644605138221229898724869759421181854980 storeStringHex = '16r455D441E55A37239AB4C303189576071AF5578FFCA80504'.! !!IntegerTest methodsFor: 'testing - printing' stamp: 'laza 3/30/2004 09:23'!testRomanPrinting	self assert: 0 printStringRoman = ''. "No symbol for zero"	self assert: 1 printStringRoman = 'I'.	self assert: 2 printStringRoman = 'II'.	self assert: 3 printStringRoman = 'III'.	self assert: 4 printStringRoman = 'IV'.	self assert: 5 printStringRoman = 'V'.	self assert: 6 printStringRoman = 'VI'.	self assert: 7 printStringRoman = 'VII'.	self assert: 8 printStringRoman = 'VIII'.	self assert: 9 printStringRoman = 'IX'.	self assert: 10 printStringRoman = 'X'.	self assert: 23 printStringRoman = 'XXIII'.	self assert: 36 printStringRoman = 'XXXVI'.	self assert: 49 printStringRoman = 'XLIX'.	self assert: 62 printStringRoman = 'LXII'.	self assert: 75 printStringRoman = 'LXXV'.	self assert: 88 printStringRoman = 'LXXXVIII'.	self assert: 99 printStringRoman = 'XCIX'.	self assert: 100 printStringRoman = 'C'.	self assert: 101 printStringRoman = 'CI'.	self assert: 196 printStringRoman = 'CXCVI'.	self assert: 197 printStringRoman = 'CXCVII'.	self assert: 198 printStringRoman = 'CXCVIII'.	self assert: 293 printStringRoman = 'CCXCIII'.	self assert: 294 printStringRoman = 'CCXCIV'.	self assert: 295 printStringRoman = 'CCXCV'.	self assert: 390 printStringRoman = 'CCCXC'.	self assert: 391 printStringRoman = 'CCCXCI'.	self assert: 392 printStringRoman = 'CCCXCII'.	self assert: 487 printStringRoman = 'CDLXXXVII'.	self assert: 488 printStringRoman = 'CDLXXXVIII'.	self assert: 489 printStringRoman = 'CDLXXXIX'.	self assert: 584 printStringRoman = 'DLXXXIV'.	self assert: 585 printStringRoman = 'DLXXXV'.	self assert: 586 printStringRoman = 'DLXXXVI'.	self assert: 681 printStringRoman = 'DCLXXXI'.	self assert: 682 printStringRoman = 'DCLXXXII'.	self assert: 683 printStringRoman = 'DCLXXXIII'.	self assert: 778 printStringRoman = 'DCCLXXVIII'.	self assert: 779 printStringRoman = 'DCCLXXIX'.	self assert: 780 printStringRoman = 'DCCLXXX'.	self assert: 875 printStringRoman = 'DCCCLXXV'.	self assert: 876 printStringRoman = 'DCCCLXXVI'.	self assert: 877 printStringRoman = 'DCCCLXXVII'.	self assert: 972 printStringRoman = 'CMLXXII'.	self assert: 973 printStringRoman = 'CMLXXIII'.	self assert: 974 printStringRoman = 'CMLXXIV'.	self assert: 1069 printStringRoman = 'MLXIX'.	self assert: 1070 printStringRoman = 'MLXX'.	self assert: 1071 printStringRoman = 'MLXXI'.	self assert: 1166 printStringRoman = 'MCLXVI'.	self assert: 1167 printStringRoman = 'MCLXVII'.	self assert: 1168 printStringRoman = 'MCLXVIII'.	self assert: 1263 printStringRoman = 'MCCLXIII'.	self assert: 1264 printStringRoman = 'MCCLXIV'.	self assert: 1265 printStringRoman = 'MCCLXV'.	self assert: 1360 printStringRoman = 'MCCCLX'.	self assert: 1361 printStringRoman = 'MCCCLXI'.	self assert: 1362 printStringRoman = 'MCCCLXII'.	self assert: 1457 printStringRoman = 'MCDLVII'.	self assert: 1458 printStringRoman = 'MCDLVIII'.	self assert: 1459 printStringRoman = 'MCDLIX'.	self assert: 1554 printStringRoman = 'MDLIV'.	self assert: 1555 printStringRoman = 'MDLV'.	self assert: 1556 printStringRoman = 'MDLVI'.	self assert: 1651 printStringRoman = 'MDCLI'.	self assert: 1652 printStringRoman = 'MDCLII'.	self assert: 1653 printStringRoman = 'MDCLIII'.	self assert: 1748 printStringRoman = 'MDCCXLVIII'.	self assert: 1749 printStringRoman = 'MDCCXLIX'.	self assert: 1750 printStringRoman = 'MDCCL'.	self assert: 1845 printStringRoman = 'MDCCCXLV'.	self assert: 1846 printStringRoman = 'MDCCCXLVI'.	self assert: 1847 printStringRoman = 'MDCCCXLVII'.	self assert: 1942 printStringRoman = 'MCMXLII'.	self assert: 1943 printStringRoman = 'MCMXLIII'.	self assert: 1944 printStringRoman = 'MCMXLIV'.	self assert: 2004 printStringRoman = 'MMIV'.	self assert: -1 printStringRoman = '-I'.	self assert: -2 printStringRoman = '-II'.	self assert: -3 printStringRoman = '-III'.	self assert: -4 printStringRoman = '-IV'.	self assert: -5 printStringRoman = '-V'.	self assert: -6 printStringRoman = '-VI'.	self assert: -7 printStringRoman = '-VII'.	self assert: -8 printStringRoman = '-VIII'.	self assert: -9 printStringRoman = '-IX'.	self assert: -10 printStringRoman = '-X'.! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:53'!printOn: aStream	self printOn: aStream base: 10! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:55'!printOn: aStream base: base	^self subclassResponsibility! !!Number methodsFor: 'printing' stamp: 'laza 3/30/2004 10:50'!printString	^self printStringBase: 10! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:50'!storeOn: aStream 	self printOn: aStream! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:59'!storeOn: aStream base: base	self printOn: aStream base: base! !!Fraction methodsFor: 'printing' stamp: 'laza 3/29/2004 12:56'!printOn: aStream base: base	aStream nextPut: $(.	numerator printOn: aStream base: base.	aStream nextPut: $/.	denominator printOn: aStream base: base.	aStream nextPut: $).! !!Fraction methodsFor: 'printing' stamp: 'laza 3/29/2004 13:25'!storeOn: aStream base: base	aStream nextPut: $(.	numerator storeOn: aStream base: base.	aStream nextPut: $/.	denominator storeOn: aStream base: base.	aStream nextPut: $).! !!Integer methodsFor: 'private' stamp: 'laza 3/29/2004 18:16'!print: positiveNumberString on: aStream prefix: prefix length: minimum padded: zeroFlag	| padLength |	padLength _ minimum - positiveNumberString size - prefix size.	padLength > 0		ifTrue: [zeroFlag				ifTrue: [aStream nextPutAll: prefix; nextPutAll: (String new: padLength withAll: $0)]				ifFalse: [aStream nextPutAll: (String new: padLength withAll: Character space); nextPutAll: prefix]]		ifFalse: [aStream nextPutAll: prefix].	aStream nextPutAll: positiveNumberString	! !!Integer methodsFor: 'deprecated' stamp: 'laza 3/29/2004 11:00'!hex	self deprecated: 'Use ', self printString, ' printStringHex or ', self printString, ' storeStringHex instead!!'.	^ self storeStringBase: 16! !!Integer methodsFor: 'deprecated' stamp: 'laza 3/29/2004 18:31'!hex8  "16r3333 hex8"	| hex |	self deprecated: 'Use ', self printString, ' storeStringBase: 16 length: 11 padded: true instead!!'.	hex _ self hex.  "16rNNN"	hex size < 11		ifTrue: [^ hex copyReplaceFrom: 4 to: 3						 with: ('00000000' copyFrom: 1 to: 11-hex size)]		ifFalse: [^ hex]! !!Integer methodsFor: 'deprecated' stamp: 'laza 3/30/2004 14:23'!romanString	"1999 romanString"	self deprecated: 'Use ', self printString, ' printStringRoman instead!!'.	[self > 0] assert.	^ String streamContents:		[:s |		self // 1000 timesRepeat: [s nextPut: $M].		self romanDigits: 'MDC' for: 100 on: s.		self romanDigits: 'CLX' for: 10 on: s.		self romanDigits: 'XVI' for: 1 on: s]! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 14:08'!byteEncode: aStream base: base	(self printStringBase: base) do: [:each| aStream nextPut: $$; nextPut: each]	! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 13:06'!printOn: aStream base: base	aStream nextPutAll: (self printStringBase: base)! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 18:13'!printOn: aStream base: base length: minimum padded: zeroFlag	| prefix |	prefix _ self negative ifTrue: ['-'] ifFalse: [String new].	self print: (self abs printStringBase: base) on: aStream prefix: prefix length: minimum padded: zeroFlag! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 9/19/2004 10:52'!printStringBase: base	| stream integer next |	self = 0 ifTrue: [^'0'].	self negative ifTrue: [^'-', (self negated printStringBase: base)].	stream _ WriteStream on: String new.	integer _ self normalize.	[integer > 0] whileTrue: [		next _ integer quo: base.		stream nextPut: (Character digitValue: integer - (next * base)).		integer _ next].	^stream contents reversed! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 18:14'!printStringBase: base length: minimum padded: zeroFlag	^String streamContents: [:s| self printOn: s base: base length: minimum padded: zeroFlag]! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 10:58'!printStringHex	^self printStringBase: 16! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 18:21'!printStringLength: minimal	^self printStringLength: minimal padded: false! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 18:20'!printStringLength: minimal padded: zeroFlag	^self printStringBase: 10 length: minimal padded: zeroFlag! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 18:20'!printStringPadded: minimal	^self printStringLength: minimal padded: true! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/30/2004 09:40'!printStringRoman	| stream integer |	stream _ WriteStream on: String new.	integer _ self negative ifTrue: [stream nextPut: $-. self negated] ifFalse: [self].	integer // 1000 timesRepeat: [stream nextPut: $M].	integer		romanDigits: 'MDC' for: 100 on: stream;		romanDigits: 'CLX' for: 10 on: stream;		romanDigits: 'XVI' for: 1 on: stream.	^stream contents! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 13:35'!radix: base 	^ self printStringBase: base! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 13:36'!storeOn: aStream base: base	"Print a representation of the receiver on the stream	<aStream> in base <base> where	2 <= <baseInteger> <= 16. If <base> is other than 10	it is written first separated by $r followed by the number	like for example: 16rFCE2"	| integer |	integer _ self negative		ifTrue: [aStream nextPut: $-. self negated]		ifFalse: [self].	base = 10 ifFalse: [aStream nextPutAll: base printString; nextPut: $r].	aStream nextPutAll: (integer printStringBase: base).! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 18:16'!storeOn: aStream base: base length: minimum padded: zeroFlag	| prefix |	prefix _ self negative ifTrue: ['-'] ifFalse: [String new].	base = 10 ifFalse: [prefix _ prefix, base printString, 'r'].	self print: (self abs printStringBase: base) on: aStream prefix: prefix length: minimum padded: zeroFlag! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 18:16'!storeStringBase: base length: minimum padded: zeroFlag	^String streamContents: [:s| self storeOn: s base: base length: minimum padded: zeroFlag]! !!Integer methodsFor: 'printing-numerative' stamp: 'laza 3/29/2004 10:58'!storeStringHex	^self storeStringBase: 16! !!ThirtyTwoBitRegister methodsFor: 'printing' stamp: 'laza 3/29/2004 12:22'!printOn: aStream	"Print my contents in hex with a leading 'R' to show that it is a register object being printed."	aStream nextPutAll: 'R:'.	self asInteger storeOn: aStream base: 16.! !SmallInteger removeSelector: #printOn:base:!