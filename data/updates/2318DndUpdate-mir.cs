'From Squeak2.8alpha of 4 February 2000 [latest update: #2310] on 12 June 2000 at 12:59:52 pm'!"Change Set:		131DndUpdate-mirDate:			29 May 2000Authors:		Michael RuegerThis change set further integrates the new dnd with the browser dnd package."!!Browser methodsFor: 'drag and drop' stamp: 'mir 5/23/2000 17:25'!acceptDroppingMorph: transferMorph event: evt inMorph: dstListMorph 	"Here we are fetching informations from the dropped transferMorph and 	             performing the correct action for this drop."	| srcType success srcBrowser |	success _ false.	srcType _ transferMorph dragTransferType.	srcBrowser _ transferMorph source model.	srcType == #messageList ifTrue: [success _ self					acceptMethod: transferMorph passenger value					messageCategory: srcBrowser selectedMessageCategoryName					class: transferMorph passenger key					atListMorph: dstListMorph					internal: self == srcBrowser					copy: transferMorph shouldCopy].	srcType == #classList		ifTrue: 			[success _ self				changeCategoryForClass: transferMorph passenger				srcSystemCategory: srcBrowser selectedSystemCategoryName				atListMorph: dstListMorph				internal: self == srcBrowser				copy: transferMorph shouldCopy].	^success!]style[(67 620 4 223)f1b,f1,f1cblue;b,f1! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/25/2000 13:08'!acceptMethod: methodSel dstMessageCategory: dstMessageCategorySel srcMessageCategory: srcMessageCategorySel dstClass: dstClass dstClassOrMeta: dstClassOrMeta srcClassOrMeta: srcClassOrMeta internal: internal copySemantic: copyFlag 	| success hierarchyChange higher checkForOverwrite |	(success _ dstClassOrMeta ~~ nil) ifFalse: [^false].	checkForOverwrite _ dstClassOrMeta selectors includes: methodSel.	hierarchyChange _ (higher _ srcClassOrMeta inheritsFrom: dstClassOrMeta) | (dstClassOrMeta inheritsFrom: srcClassOrMeta).	success _ (checkForOverwrite not				or: [self						overwriteDialogHierarchyChange: hierarchyChange						higher: higher						sourceClassName: srcClassOrMeta name						destinationClassName: dstClassOrMeta name						methodSelector: methodSel])				and: [self						message: methodSel						compileInClass: dstClassOrMeta						fromClass: srcClassOrMeta						dstMessageCategory: dstMessageCategorySel						srcMessageCategory: srcMessageCategorySel						internal: internal						copySemantic: copyFlag].	^ success! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/25/2000 13:27'!acceptMethod: methodSel messageCategory: srcMessageCategorySel class: srcClassOrMeta atListMorph: dstListMorph internal: internal copy: copyFlag 	| success dstClassOrMeta dstClass dstMessageCategorySel |	dstClass _ self dstClassDstListMorph: dstListMorph.	dstClassOrMeta _ dstClass				ifNotNil: [self metaClassIndicated						ifTrue: [dstClass class]						ifFalse: [dstClass]].	dstMessageCategorySel _ self dstMessageCategoryDstListMorph: dstListMorph.	success _ (dstClassOrMeta notNil				and: [dstClassOrMeta == srcClassOrMeta])						ifTrue: ["one class"							self								changeMessageCategoryForMethod: methodSel								dstMessageCategory: dstMessageCategorySel								srcMessageCategory: srcMessageCategorySel								insideClassOrMeta: dstClassOrMeta								internal: internal								copySemantic: copyFlag]						ifFalse: ["different classes"							self								acceptMethod: methodSel								dstMessageCategory: dstMessageCategorySel								srcMessageCategory: srcMessageCategorySel								dstClass: dstClass								dstClassOrMeta: dstClassOrMeta								srcClassOrMeta: srcClassOrMeta								internal: internal								copySemantic: copyFlag].	^ success! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/25/2000 13:27'!changeCategoryForClass: class srcSystemCategory: srcSystemCategorySel atListMorph: dstListMorph internal: internal copy: copyFlag 	"only move semantic"	| newClassCategory success |	self flag: #stringSymbolProblem.	success _ copyFlag not ifFalse: [^ false].	newClassCategory _ self dstCategoryDstListMorph: dstListMorph.	(success _ newClassCategory notNil & (newClassCategory ~= class category))		ifTrue: 			[class category: newClassCategory.			self changed: #classList.			internal ifFalse: [self selectClass: class]].	^ success! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/23/2000 17:27'!changeMessageCategoryForMethod: methodSel dstMessageCategory: dstMessageCategorySel srcMessageCategory: srcMessageCategorySel insideClassOrMeta: classOrMeta internal: internal copySemantic: copyFlag 	"only move semantic"	| success messageCategorySel |	(success _ copyFlag not) ifFalse: [^ false].	messageCategorySel _ dstMessageCategorySel ifNil: [srcMessageCategorySel].	(success _ messageCategorySel notNil & (messageCategorySel ~= '-- all --' asSymbol)				and: [messageCategorySel ~= srcMessageCategorySel and: [classOrMeta organization categories includes: messageCategorySel]])		ifTrue: 			[classOrMeta organization				classify: methodSel				under: messageCategorySel				suppressIfDefault: false.			self changed: #messageList].	success & internal not ifTrue: [self setSelector: methodSel].	^ success! !!Browser methodsFor: 'drag and drop' stamp: 'sr 4/25/2000 07:12'!codeTextMorph	^ self dependents		detect: [:dep | (dep isKindOf: PluggableTextMorph)				and: [dep getTextSelector == #contents]]		ifNone: []! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/25/2000 13:26'!dstCategoryDstListMorph: dstListMorph	| dropMorph |	^(dstListMorph getListSelector == #systemCategoryList)		ifTrue: [(dropMorph _ dstListMorph potentialDropMorph) ifNotNil: [dropMorph contents]]		ifFalse: [self selectedSystemCategoryName]! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/25/2000 13:45'!dstClassDstListMorph: dstListMorph	| dropMorph |	^(dstListMorph getListSelector == #classList)		ifTrue: [(dropMorph _ dstListMorph potentialDropMorph) ifNotNil: [Smalltalk at: dropMorph contents withBlanksCondensed asSymbol]]		ifFalse: [dstListMorph model selectedClass]! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/25/2000 13:27'!dstMessageCategoryDstListMorph: dstListMorph	| dropMorph |	^dstListMorph getListSelector == #messageCategoryList		ifTrue: 			[dropMorph _ dstListMorph potentialDropMorph.			dropMorph ifNotNil: [dropMorph contents asSymbol]]		ifFalse: [self selectedMessageCategoryName]! !!Browser methodsFor: 'drag and drop' stamp: 'mir 5/25/2000 13:47'!message: messageSel compileInClass: dstClassOrMeta fromClass: srcClassOrMeta dstMessageCategory: dstMessageCategorySel srcMessageCategory: srcMessageCategorySel internal: internal copySemantic: copyFlag 	| source messageCategorySel tm success oldOrNoMethod newMethod |	source _ srcClassOrMeta sourceCodeAt: messageSel.	messageCategorySel _ dstMessageCategorySel ifNil: [srcMessageCategorySel].	self selectClass: dstClassOrMeta theNonMetaClass.	(self messageCategoryList includes: messageCategorySel)		ifFalse: ["create message category"			self classOrMetaClassOrganizer addCategory: messageCategorySel].	self selectMessageCategoryNamed: messageCategorySel.	tm _ self codeTextMorph.	tm setText: source.	tm setSelection: (0 to: 0).	tm hasUnacceptedEdits: true.	oldOrNoMethod _ srcClassOrMeta compiledMethodAt: messageSel ifAbsent: [].	tm accept.	"compilation successful?"	newMethod _ dstClassOrMeta compiledMethodAt: messageSel ifAbsent: [].	success _ newMethod ~~ nil & (newMethod ~~ oldOrNoMethod).	"	success ifFalse: [TransferMorph allInstances do: [:e | e delete]].            	 "	success		ifTrue: 			[copyFlag not ifTrue: ["remove old method in move semantic if new exists"		srcClassOrMeta removeSelector: messageSel].internal				ifTrue: [self selectClass: srcClassOrMeta]				ifFalse: [self selectClass: dstClassOrMeta].			self setSelector: messageSel].	^ success! !!Browser methodsFor: 'drag and drop'!overwriteDialogHierarchyChange: hierarchyChange higher: higherFlag sourceClassName: srcClassName destinationClassName: dstClassName methodSelector: methodSelector 	| lf success |	lf _ Character cr asString.	success _ SelectionMenu				confirm: 'There is a conflict.' , ' Overwrite' , (hierarchyChange							ifTrue: [higherFlag									ifTrue: [' superclass']									ifFalse: [' subclass']]							ifFalse: ['']) , ' method' , lf , dstClassName , '>>' , methodSelector , lf , 'by ' , (hierarchyChange							ifTrue: ['moving']							ifFalse: ['copying']) , ' method' , lf , srcClassName name , '>>' , methodSelector , ' ?'				trueChoice: 'Yes, don''t care.'				falseChoice: 'No, I have changed my opinion.'.	^ success! !!PackageBrowser methodsFor: 'initialize-release' stamp: 'mir 5/29/2000 11:51'!openAsMorphEditing: editString 	"Create a pluggable version of all the views for a Browser, including    	views and controllers."	"PackageBrowser openBrowser"	| listHeight buttonHeight window switches codePane aListMorph dragNDropFlag |	listHeight _ 0.33.	buttonHeight _ 0.09.	window _ (SystemWindow labelled: 'later')				model: self.	dragNDropFlag _ Preferences browseWithDragNDrop.	window addMorph: (PluggableListMorph			on: self			list: #packageList			selected: #packageListIndex			changeSelected: #packageListIndex:			menu: #packageMenu:			keystroke: #packageListKey:from:)		frame: (0 @ 0 extent: 0.15 @ listHeight).	window addMorph: ((PluggableListMorph			on: self			list: #systemCategoryList			selected: #systemCategoryListIndex			changeSelected: #systemCategoryListIndex:			menu: #systemCategoryMenu:			keystroke: #systemCatListKey:from:)			enableDrag: false;			enableDrop: dragNDropFlag)		frame: (0.15 @ 0 extent: 0.2 @ listHeight).	window addMorph: ((PluggableListMorph			on: self			list: #classList			selected: #classListIndex			changeSelected: #classListIndex:			menu: #classListMenu:			keystroke: #classListKey:from:)			enableDragNDrop: dragNDropFlag)		frame: (0.35 @ 0 extent: 0.25 @ (listHeight - buttonHeight)).	switches _ self buildMorphicSwitches.	window addMorph: switches frame: (0.35 @ (listHeight - buttonHeight) extent: 0.25 @ buttonHeight).	switches borderWidth: 0.	window addMorph: ((PluggableListMorph			on: self			list: #messageCategoryList			selected: #messageCategoryListIndex			changeSelected: #messageCategoryListIndex:			menu: #messageCategoryMenu:)			enableDrag: false;			enableDrop: dragNDropFlag)		frame: (0.6 @ 0 extent: 0.15 @ listHeight).	aListMorph _ PluggableListMorph				on: self				list: #messageList				selected: #messageListIndex				changeSelected: #messageListIndex:				menu: #messageListMenu:shifted:				keystroke: #messageListKey:from: .	aListMorph enableDragNDrop: dragNDropFlag.	aListMorph menuTitleSelector: #messageListSelectorTitle.	window addMorph: aListMorph frame: (0.75 @ 0 extent: 0.25 @ listHeight).	codePane _ PluggableTextMorph				on: self				text: #contents				accept: #contents:notifying:				readSelection: #contentsSelection				menu: #codePaneMenu:shifted:.	editString		ifNotNil: 			[codePane editString: editString.			codePane hasUnacceptedEdits: true].	window addMorph: codePane frame: (0 @ listHeight corner: 1 @ 1).	window setUpdatablePanesFrom: #(packageList systemCategoryList classList messageCategoryList messageList ).	^ window! !!PackageBrowser methodsFor: 'dragNDrop util' stamp: 'sr 5/5/2000 17:52'!dstCategoryDstListMorph: dstListMorph internal: internal 	| dropMorph |	^ internal & (dstListMorph getListSelector == #systemCategoryList)		ifTrue: [(dropMorph _ dstListMorph potentialDropMorph) ifNotNil: [(self package , '-' , dropMorph contents) asSymbol]]		ifFalse: [self selectedSystemCategoryName]! !!PackageBrowser methodsFor: 'dragNDrop' stamp: 'mir 5/29/2000 11:54'!changeCategoryForClass: class srcSystemCategory: srcSystemCategorySel atListMorph: dstListMorph internal: internal copy: copyFlag 	"only move semantic"	| newClassCategory success |	self flag: #stringSymbolProblem.	success _ copyFlag not ifFalse: [^ false].	newClassCategory _ self dstCategoryDstListMorph: dstListMorph internal: internal.	(success _ newClassCategory notNil & (newClassCategory ~= class category))		ifTrue: 			[class category: newClassCategory.			self changed: #classList.			internal ifFalse: [self selectClass: class]].	^ success! !!PluggableListMorph methodsFor: 'drag and drop' stamp: 'mir 6/5/2000 16:24'!acceptDroppingMorph: aMorph event: evt 	"This message is sent when a morph is dropped onto a morph that has     	agreed to accept the dropped morph by responding 'true' to the     	wantsDroppedMorph:Event: message. The default implementation just     	adds the given morph to the receiver."	"Here we let the model do its work."	self model		acceptDroppingMorph: aMorph		event: evt		inMorph: self.	self resetPotentialDropMorph.	Cursor normal show.! !!PluggableTextMorph methodsFor: 'accessing' stamp: 'sr 4/25/2000 07:21'!getTextSelector	^getTextSelector! !Browser removeSelector: #acceptMethod:class:atListMorph:otherModel:internal:!