'From Squeak 2.3 of January 14, 1999 on 10 April 1999 at 11:29:16 pm'!"Change Set:		dirAndTabletPrims-jhmDate:			10 April 1999Author:			John MaloneyThis change set adds primitive support for:  1. directory deletion (thanks to Stephen Pope)  2. pen-based tablets (tested with the Wacom ArtZ 6x8)It includes some changes to the C support code files,and renames 'sqMacJoystick.c' to 'sqMacJoystickAndTablet.c'.It also includes a better testing for the existance offiles and directories, also from Stephen Pope."!!FileDirectory methodsFor: 'testing' stamp: 'jm 4/9/1999 17:41'!directoryExists: filenameOrPath	"Answer true if a directory of the given name exists. The given name may be either a full path name or a local directory within this directory."	"FileDirectory default directoryExists: FileDirectory default pathName"	| fName dir |	FileDirectory splitName: filenameOrPath to:		[:filePath :name |			fName _ name.			filePath isEmpty				ifTrue: [dir _ self]				ifFalse: [dir _ FileDirectory on: filePath]].	^ dir directoryNames includes: fName! !!FileDirectory methodsFor: 'testing' stamp: 'jm 4/9/1999 17:45'!fileExists: filenameOrPath	"Answer true if a file of the given name exists. The given name may be either a full path name or a local file within this directory."	"FileDirectory default fileExists: Smalltalk sourcesName"	| fName dir |	FileDirectory splitName: filenameOrPath to:		[:filePath :name |			fName _ name.			filePath isEmpty				ifTrue: [dir _ self]				ifFalse: [dir _ FileDirectory on: filePath]].	^ dir fileNames includes: fName! !!FileDirectory methodsFor: 'testing' stamp: 'jm 4/9/1999 17:48'!fileOrDirectoryExists: filenameOrPath	"Answer true if either a file or a directory file of the given name exists. The given name may be either a full path name or a local name within this directory."	"FileDirectory default fileOrDirectoryExists: Smalltalk sourcesName"	| fName dir |	FileDirectory splitName: filenameOrPath to:		[:filePath :name |			fName _ name.			filePath isEmpty				ifTrue: [dir _ self]				ifFalse: [dir _ FileDirectory on: filePath]].	^ dir includesKey: fName! !!FileDirectory methodsFor: 'testing' stamp: 'jm 4/9/1999 17:50'!includesKey: localName	"Answer true if this directory includes a file or directory of the given name. Note that the name should be a local file name, in contrast with fileExists:, which takes either local or full-qualified file names."	"(FileDirectory on: Smalltalk vmPath) includesKey: 'SqueakV2.sources'"	^ self fileAndDirectoryNames includes: localName! !!FileDirectory methodsFor: 'file operations' stamp: 'jm 4/9/1999 18:02'!deleteDirectory: localDirName	"Delete the directory with the given name in this directory. Fail if the path is bad or if a directory by that name does not exist." 	self primDeleteDirectory: (self fullNameFor: localDirName).! !!FileDirectory methodsFor: 'private' stamp: 'jm 4/9/1999 17:59'!primDeleteDirectory: fullPath	"Delete the directory named by the given path. Fail if the path is bad or if a directory by that name does not exist." 	<primitive: 163>	self primitiveFailed! !!InputSensor methodsFor: 'tablet' stamp: 'jm 4/10/1999 22:14'!hasTablet	"Answer true if there is a pen tablet available on this computer."	^ (self primTabletGetParameters: 1) notNil! !!InputSensor methodsFor: 'tablet' stamp: 'jm 4/10/1999 23:03'!tabletPoint	"Answer the current position of the first tablet pointing device (pen, puck, or eraser)."	| data |	data _ self primTabletRead: 1.  "state of first/primary pen"	^ (data at: 3) @ (data at: 4)! !!InputSensor methodsFor: 'tablet' stamp: 'jm 4/10/1999 23:03'!tabletPressure	"Answer the current pressure of the first tablet pointing device (pen, puck, or eraser)."	| data |	data _ self primTabletRead: 1.  "state of first/primary pen"	^ (data at: 10)! !!InputSensor methodsFor: 'tablet' stamp: 'jm 4/10/1999 23:03'!tabletTimestamp	"Answer the time (in tablet clock ticks) at which the tablet's primary pen last changed state. This can be used in polling loops; if this timestamp hasn't changed, then the pen state hasn't changed either."	| data |	data _ self primTabletRead: 1.  "state of first/primary pen"	^ data at: 2! !!InputSensor methodsFor: 'private' stamp: 'jm 4/10/1999 23:00'!primTabletGetParameters: cursorIndex	"Answer the pen tablet parameters. For parameters that differ from cursor to cursor, answer those associated with the cursor having the given index. Answer nil if there is no pen tablet. The parameters are:	1. tablet width, in tablet units	2. tablet height, in tablet units	3. number of tablet units per inch	4. number of cursors (pens, pucks, etc; some tablets have more than one)	5. this cursor index	6. and 7. x scale and x offset for scaling tablet coordintes (e.g., to fit the screen)	8. and 9. y scale and y offset for scaling tablet coordintes  (e.g., to fit the screen)	9. number of pressure levels	10. presure threshold needed close pen tip switch 	11. number of pen tilt angles"	<primitive: 548>	^ nil! !!InputSensor methodsFor: 'private' stamp: 'jm 4/10/1999 22:57'!primTabletRead: cursorIndex	"Answer the pen tablet data for the cursor having the given index. Answer nil if there is no pen tablet. The data is:	1. index of the cursor to which this data applies	2. timestamp of the last state chance for this cursor	3., 4., and 5. x, y, and z coordinates of the cursor (z is typically 0)	6. and 7. xTilt and yTilt of the cursor; (signed)	8. type of cursor (0 = unknown, 1 = pen, 2 = puck, 3 = eraser)	9. cursor buttons	10. cursor pressure, downward	11. cursor pressure, tangential	12. flags"	<primitive: 549>	self primitiveFailed! !!Interpreter methodsFor: 'file primitives' stamp: 'jm 4/9/1999 17:57'!primitiveDirectoryDelete	"Delete the directory whose name is on the top of the stack."	| dirName dirNameIndex dirNameSize |	dirName _ self stackTop.	self success: (self isBytes: dirName).	successFlag ifTrue: [		dirNameIndex _ dirName + BaseHeaderSize.		dirNameSize _ self lengthOf: dirName.	].	successFlag ifTrue: [		self success:			(self cCode: 'dir_Delete((char *) dirNameIndex, dirNameSize)').	].	successFlag ifTrue: [		self pop: 1.  "pop dirName; leave rcvr on stack"	].! !!Interpreter methodsFor: 'other primitives' stamp: 'jm 4/10/1999 18:45'!primitiveGetTabletParameters	"Get information on the pen tablet attached to this machine. Fail if there is no tablet. If successful, the result is an array of integers; see the Smalltalk call on this primitive for its interpretation."	| cursorIndex resultSize result |	cursorIndex _ self stackIntegerValue: 0.	successFlag ifTrue: [		resultSize _ self tabletResultSize.		result _ self instantiateClass: (self splObj: ClassBitmap) indexableSize: resultSize.		self success: (self cCode: 'tabletGetParameters(cursorIndex, (int *) (result + 4))')].	successFlag ifTrue: [		self pop: 1.  "cursorIndex"		self push: result].! !!Interpreter methodsFor: 'other primitives' stamp: 'jm 4/10/1999 18:46'!primitiveReadTablet	"Get the current state of the cursor of the pen tablet specified by my argument. Fail if there is no tablet. If successful, the result is an array of integers; see the Smalltalk call on this primitive for its interpretation."	| cursorIndex resultSize result |	cursorIndex _ self stackIntegerValue: 0.	successFlag ifTrue: [		resultSize _ self tabletResultSize.		result _ self instantiateClass: (self splObj: ClassBitmap) indexableSize: resultSize.		self success: (self cCode: 'tabletRead(cursorIndex, (int *) (result + 4))')].	successFlag ifTrue: [		self pop: 1.  "cursorIndex"		self push: result].! !!Interpreter class methodsFor: 'initialization' stamp: 'jm 4/10/1999 12:27'!initializePrimitiveTable 	"This table generates a C switch statement for primitive dispatching."	"NOTE: The real limit here is 2047, but our C compiler currently barfs over 700"	MaxPrimitiveIndex _ 700.	PrimitiveTable _ Array new: MaxPrimitiveIndex + 1.	self table: PrimitiveTable from: 	#(	"Integer Primitives (0-19)"		(0 primitiveFail)		(1 primitiveAdd)		(2 primitiveSubtract)		(3 primitiveLessThan)		(4 primitiveGreaterThan)		(5 primitiveLessOrEqual)		(6 primitiveGreaterOrEqual)		(7 primitiveEqual)		(8 primitiveNotEqual)		(9 primitiveMultiply)		(10 primitiveDivide)		(11 primitiveMod)		(12 primitiveDiv)		(13 primitiveQuo)		(14 primitiveBitAnd)		(15 primitiveBitOr)		(16 primitiveBitXor)		(17 primitiveBitShift)		(18 primitiveMakePoint)		(19 primitiveFail)					"Guard primitive for simulation -- *must* fail"		"LargeInteger Primitives (20-39)"		"32-bit logic is aliased to Integer prims above"		(20 39 primitiveFail)		"Float Primitives (40-59)"		(40 primitiveAsFloat)		(41 primitiveFloatAdd)		(42 primitiveFloatSubtract)		(43 primitiveFloatLessThan)		(44 primitiveFloatGreaterThan)		(45 primitiveFloatLessOrEqual)		(46 primitiveFloatGreaterOrEqual)		(47 primitiveFloatEqual)		(48 primitiveFloatNotEqual)		(49 primitiveFloatMultiply)		(50 primitiveFloatDivide)		(51 primitiveTruncated)		(52 primitiveFractionalPart)		(53 primitiveExponent)		(54 primitiveTimesTwoPower)		(55 primitiveSquareRoot)		(56 primitiveSine)		(57 primitiveArctan)		(58 primitiveLogN)		(59 primitiveExp)		"Subscript and Stream Primitives (60-67)"		(60 primitiveAt)		(61 primitiveAtPut)		(62 primitiveSize)		(63 primitiveStringAt)		(64 primitiveStringAtPut)		(65 primitiveNext)		(66 primitiveNextPut)		(67 primitiveAtEnd)		"StorageManagement Primitives (68-79)"		(68 primitiveObjectAt)		(69 primitiveObjectAtPut)		(70 primitiveNew)		(71 primitiveNewWithArg)		(72 primitiveArrayBecomeOneWay)	"Blue Book: primitiveBecome"		(73 primitiveInstVarAt)		(74 primitiveInstVarAtPut)		(75 primitiveAsOop)		(76 primitiveStoreStackp)					"Blue Book: primitiveAsObject"		(77 primitiveSomeInstance)		(78 primitiveNextInstance)		(79 primitiveNewMethod)		"Control Primitives (80-89)"		(80 primitiveBlockCopy)		(81 primitiveValue)		(82 primitiveValueWithArgs)		(83 primitivePerform)		(84 primitivePerformWithArgs)		(85 primitiveSignal)		(86 primitiveWait)		(87 primitiveResume)		(88 primitiveSuspend)		(89 primitiveFlushCache)		"Input/Output Primitives (90-109)"		(90 primitiveMousePoint)		(91 primitiveFail)					"Blue Book: primitiveCursorLocPut"		(92 primitiveFail)					"Blue Book: primitiveCursorLink"		(93 primitiveInputSemaphore)		(94 primitiveFail)					"Blue Book: primitiveSampleInterval"		(95 primitiveInputWord)		(96 primitiveCopyBits)		(97 primitiveSnapshot)		(98 primitiveStoreImageSegment)		(99 primitiveLoadImageSegment)		(100 primitivePerformInSuperclass)		"Blue Book: primitiveSignalAtTick"		(101 primitiveBeCursor)		(102 primitiveBeDisplay)		(103 primitiveScanCharacters)		(104 primitiveDrawLoop)		(105 primitiveStringReplace)		(106 primitiveScreenSize)		(107 primitiveMouseButtons)		(108 primitiveKbdNext)		(109 primitiveKbdPeek)		"System Primitives (110-119)"		(110 primitiveEquivalent)		(111 primitiveClass)		(112 primitiveBytesLeft)		(113 primitiveQuit)		(114 primitiveExitToDebugger)		(115 primitiveFail)					"Blue Book: primitiveOopsLeft"		(116 primitiveFlushCacheByMethod)		(117 primitiveExternalCall)		(118 primitiveDoPrimitiveWithArgs)		(119 primitiveFlushCacheSelective)			"Squeak 2.2 and earlier use 119.  Squeak 2.3 and later use 116.			Both are supported for backward compatibility."		"Miscellaneous Primitives (120-127)"		(120 primitiveFail)		(121 primitiveImageName)		(122 primitiveNoop)					"Blue Book: primitiveImageVolume"		(123 primitiveFail)		(124 primitiveLowSpaceSemaphore)		(125 primitiveSignalAtBytesLeft)		"Squeak Primitives Start Here"		"Squeak Miscellaneous Primitives (128-149)"		(126 primitiveDeferDisplayUpdates)		(127 primitiveShowDisplayRect)		(128 primitiveArrayBecome)		(129 primitiveSpecialObjectsOop)		(130 primitiveFullGC)		(131 primitiveIncrementalGC)		(132 primitiveObjectPointsTo)		(133 primitiveSetInterruptKey)		(134 primitiveInterruptSemaphore)		(135 primitiveMillisecondClock)		(136 primitiveSignalAtMilliseconds)		(137 primitiveSecondsClock)		(138 primitiveSomeObject)		(139 primitiveNextObject)		(140 primitiveBeep)		(141 primitiveClipboardText)		(142 primitiveVMPath)		(143 primitiveShortAt)		(144 primitiveShortAtPut)		(145 primitiveConstantFill)		(146 primitiveReadJoystick)		(147 primitiveWarpBits)		(148 primitiveClone)		(149 primitiveGetAttribute)		"File Primitives (150-169)"		(150 primitiveFileAtEnd)		(151 primitiveFileClose)		(152 primitiveFileGetPosition)		(153 primitiveFileOpen)		(154 primitiveFileRead)		(155 primitiveFileSetPosition)		(156 primitiveFileDelete)		(157 primitiveFileSize)		(158 primitiveFileWrite)		(159 primitiveFileRename)		(160 primitiveDirectoryCreate)		(161 primitiveDirectoryDelimitor)		(162 primitiveDirectoryLookup)		(163 primitiveDirectoryDelete)		(164 168 primitiveFail)		(169 primitiveDirectorySetMacTypeAndCreator)		"Sound Primitives (170-199)"		(170 primitiveSoundStart)		(171 primitiveSoundStartWithSemaphore)		(172 primitiveSoundStop)		(173 primitiveSoundAvailableSpace)		(174 primitiveSoundPlaySamples)		(175 primitiveSoundPlaySilence)		"obsolete; will be removed in the future"		(176 primWaveTableSoundmixSampleCountintostartingAtpan)		(177 primFMSoundmixSampleCountintostartingAtpan)		(178 primPluckedSoundmixSampleCountintostartingAtpan)		(179 primSampledSoundmixSampleCountintostartingAtpan)		(180 primFMSoundmixSampleCountintostartingAtleftVolrightVol)		(181 primPluckedSoundmixSampleCountintostartingAtleftVolrightVol)		(182 primSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(183 primReverbSoundapplyReverbTostartingAtcount)		(184 primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(185 188 primitiveFail)		(189 primitiveSoundInsertSamples)		(190 primitiveSoundStartRecording)		(191 primitiveSoundStopRecording)		(192 primitiveSoundGetRecordingSampleRate)		(193 primitiveSoundRecordSamples)		(194 primitiveSoundSetRecordLevel)		(195 199 primitiveFail)		"Networking Primitives (200-229)"		(200 primitiveInitializeNetwork)		(201 primitiveResolverStartNameLookup)		(202 primitiveResolverNameLookupResult)		(203 primitiveResolverStartAddressLookup)		(204 primitiveResolverAddressLookupResult)		(205 primitiveResolverAbortLookup)		(206 primitiveResolverLocalAddress)		(207 primitiveResolverStatus)		(208 primitiveResolverError)		(209 primitiveSocketCreate)		(210 primitiveSocketDestroy)		(211 primitiveSocketConnectionStatus)		(212 primitiveSocketError)		(213 primitiveSocketLocalAddress)		(214 primitiveSocketLocalPort)		(215 primitiveSocketRemoteAddress)		(216 primitiveSocketRemotePort)		(217 primitiveSocketConnectToPort)		(218 primitiveSocketListenOnPort)		(219 primitiveSocketCloseConnection)		(220 primitiveSocketAbortConnection)		(221 primitiveSocketReceiveDataBufCount)		(222 primitiveSocketReceiveDataAvailable)		(223 primitiveSocketSendDataBufCount)		(224 primitiveSocketSendDone)		(225 229 primitiveFail)		"Other Primitives (230-249)"		(230 primitiveRelinquishProcessor)		(231 primitiveForceDisplayUpdate)		(232 primitiveFormPrint)		(233 primitiveSetFullScreen)		(234 primBitmapdecompressfromByteArrayat)		(235 primStringcomparewithcollated)		(236 primSampledSoundconvert8bitSignedFromto16Bit)		(237 primBitmapcompresstoByteArray)		(238 primitiveSerialPortOpen)		(239 primitiveSerialPortClose)		(240 primitiveSerialPortWrite)		(241 primitiveSerialPortRead)		(242 primitiveFail)		(243 primStringtranslatefromtotable)		(244 primStringfindFirstInStringinSetstartingAt)		(245 primStringindexOfAsciiinStringstartingAt)		(246 primStringfindSubstringinstartingAtmatchTable)		(247 249 primitiveFail)		"VM Implementor Primitives (250-255)"		(250 clearProfile)		(251 dumpProfile)		(252 startProfiling)		(253 stopProfiling)		(254 primitiveVMParameter)		(255 primitiveInstVarsPutFromStack) "Never used except in Disney tests.  Remove after 2.3 release."		"Quick Push Const Methods"		(256 primitivePushSelf)		(257 primitivePushTrue)		(258 primitivePushFalse)		(259 primitivePushNil)		(260 primitivePushMinusOne)		(261 primitivePushZero)		(262 primitivePushOne)		(263 primitivePushTwo)		"Quick Push Const Methods"		(264 519 primitiveLoadInstVar)		"MIDI Primitives (520-539)"		(520 primitiveFail)		(521 primitiveMIDIClosePort)		(522 primitiveMIDIGetClock)		(523 primitiveMIDIGetPortCount)		(524 primitiveMIDIGetPortDirectionality)		(525 primitiveMIDIGetPortName)		(526 primitiveMIDIOpenPort)		(527 primitiveMIDIParameterGetOrSet)		(528 primitiveMIDIRead)		(529 primitiveMIDIWrite)		(530 539 primitiveFail)  "reserved for extended MIDI primitives"		"Experimental Asynchrous File Primitives"		(540 primitiveAsyncFileClose)		(541 primitiveAsyncFileOpen)		(542 primitiveAsyncFileReadResult)		(543 primitiveAsyncFileReadStart)		(544 primitiveAsyncFileWriteResult)		(545 primitiveAsyncFileWriteStart)		(546 547 primitiveFail)		"Pen Tablet Primitives"		(548 primitiveGetTabletParameters)		(549 primitiveReadTablet)		"Sound Codec Primitives"		(550 primADPCMCodecprivateDecodeMono)			(551 primADPCMCodecprivateDecodeStereo)			(552 primADPCMCodecprivateEncodeMono)			(553 primADPCMCodecprivateEncodeStereo)			(554 569 primitiveFail)  "reserved for additional codec primitives"		"Unassigned Primitives"		(570 700 primitiveFail)).! !!InterpreterSupportCode class methodsFor: 'source file exporting' stamp: 'jm 4/10/1999 23:08'!compareWithFilesInFolder: folderName	"InterpreterSupportCode compareWithFilesInFolder: 'Tosh:Desktop Folder:Squeak VM Project'"	| dir |	dir _ FileDirectory on: folderName.	(dir readOnlyFileNamed: 'projectArchive.sit') binary contentsOfEntireFile =	InterpreterSupportCode archiveBinaryFileBytes		ifFalse: [self inform: 'File projectArchive.sit differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'readme') contentsOfEntireFile =	InterpreterSupportCode readmeFile		ifFalse: [self inform: 'File readme differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sq.h') contentsOfEntireFile =	InterpreterSupportCode squeakHeaderFile		ifFalse: [self inform: 'File sq.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqConfig.h') contentsOfEntireFile =	InterpreterSupportCode squeakConfigFile		ifFalse: [self inform: 'File sqConfig.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMachDep.h') contentsOfEntireFile =	InterpreterSupportCode squeakMachDepFile		ifFalse: [self inform: 'File sqMachDep.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqPlatformSpecific.h') contentsOfEntireFile =	InterpreterSupportCode squeakPlatSpecFile		ifFalse: [self inform: 'File sqPlatformSpecific.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqADPCMPrims.c') contentsOfEntireFile =	InterpreterSupportCode squeakADPCMCodecPrimsFile		ifFalse: [self inform: 'File sqADPCMPrims.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqFilePrims.c') contentsOfEntireFile =	InterpreterSupportCode squeakFilePrimsFile		ifFalse: [self inform: 'File sqFilePrims.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqGSMCodecPlugin.c') contentsOfEntireFile =	InterpreterSupportCode squeakGSMCodecPluginFile		ifFalse: [self inform: 'File sqGSMCodecPlugin.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacAsyncFilePrims.c') contentsOfEntireFile =	InterpreterSupportCode macAsyncFilePrimsFile		ifFalse: [self inform: 'File sqMacAsyncFilePrims.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacDirectory.c') contentsOfEntireFile =	InterpreterSupportCode macDirectoryFile		ifFalse: [self inform: 'File sqMacDirectory.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacExternalPrims.c') contentsOfEntireFile =	InterpreterSupportCode macExternalPrimsFile		ifFalse: [self inform: 'File sqMacExternalPrims.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacJoystickAndTablet.c') contentsOfEntireFile =	InterpreterSupportCode macJoystickAndTabletFile		ifFalse: [self inform: 'File sqMacJoystickAndTablet.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacMinimal.c') contentsOfEntireFile =	InterpreterSupportCode macMinimal		ifFalse: [self inform: 'File sqMacMinimal.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacNetwork.c') contentsOfEntireFile =	InterpreterSupportCode macNetworkFile		ifFalse: [self inform: 'File sqMacNetwork.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacSerialAndMIDIPort.c') contentsOfEntireFile =	InterpreterSupportCode macSerialAndMIDIPortFile		ifFalse: [self inform: 'File sqMacSerialAndMIDIPort.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacSound.c') contentsOfEntireFile =	InterpreterSupportCode macSoundFile		ifFalse: [self inform: 'File sqMacSound.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqMacWindow.c') contentsOfEntireFile =	InterpreterSupportCode macWindowFile		ifFalse: [self inform: 'File sqMacWindow.c differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'sqOldSoundPrims.c') contentsOfEntireFile =	InterpreterSupportCode squeakOldSoundPrimsFile		ifFalse: [self inform: 'File sqOldSoundPrims.c differs from the version stored in this image.'].	dir _ dir directoryNamed: 'MacTCP'.	(dir readOnlyFileNamed: 'MacTCP.h') contentsOfEntireFile =	InterpreterSupportCode macTCPFile		ifFalse: [self inform: 'File MacTCP.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'AddressXlation.h') contentsOfEntireFile =	InterpreterSupportCode macAddressXlationFile		ifFalse: [self inform: 'File AddressXlation.h differs from the version stored in this image.'].	(dir readOnlyFileNamed: 'dnr.c') contentsOfEntireFile =	InterpreterSupportCode macDNRFile		ifFalse: [self inform: 'File dnr.c differs from the version stored in this image.'].! !!InterpreterSupportCode class methodsFor: 'source file exporting' stamp: 'jm 4/10/1999 23:07'!writeMacSourceFiles	"Store into this image's folder the C sources files required to support the interpreter on the Macintosh. It also generates the code for the sound synthesis primitives. However, because generating code for the interpreter itself takes several minutes, that is not done automatically by this method. To generate that code, use the method 'translate:doInlining:' in Interpreter class."	"InterpreterSupportCode writeMacSourceFiles"	self storeString: self readmeFile			onFileNamed: 'readme'.	self storeString: self squeakHeaderFile	onFileNamed: 'sq.h'.	self storeString: self squeakConfigFile	onFileNamed: 'sqConfig.h'.	self storeString: self squeakMachDepFile	onFileNamed: 'sqMachDep.h'.	self storeString: self squeakPlatSpecFile	onFileNamed: 'sqPlatformSpecific.h'.	self storeString: self squeakVirtualMachineHeaderFile	onFileNamed: 'sqVirtualMachine.h'.	self storeString: self squeakVirtualMachineFile	onFileNamed: 'sqVirtualMachine.c'.	self storeString: self squeakADPCMCodecPrimsFile	 onFileNamed: 'sqADPCMPrims.c'.	self storeString: self squeakFilePrimsFile	onFileNamed:  'sqFilePrims.c'.	self storeString: self squeakGSMCodecPluginFile	onFileNamed: 'sqGSMCodecPlugin.c'.	self storeString: self macAsyncFilePrimsFile	onFileNamed: 'sqMacAsyncFilePrims.c'.	self storeString: self macDirectoryFile	onFileNamed: 'sqMacDirectory.c'.	self storeString: self macJoystickAndTabletFile  onFileNamed: 'sqMacJoystickAndTablet.c'.	self storeString: self macMinimal		onFileNamed: 'sqMacMinimal.c'.	self storeString: self macNetworkFile		onFileNamed: 'sqMacNetwork.c'.	self storeString: self macSerialAndMIDIPortFile	onFileNamed: 'sqMacSerialAndMIDIPort.c'.	self storeString: self macSoundFile		onFileNamed: 'sqMacSound.c'.	self storeString: self macWindowFile		onFileNamed: 'sqMacWindow.c'.	self storeString: self macTCPFile			onFileNamed: 'MacTCP.h'.	self storeString: self macAddressXlationFile		onFileNamed: 'AddressXlation.h'.	self storeString: self macDNRFile					onFileNamed: 'dnr.c'.	self storeString: self macExternalPrimsFile		onFileNamed: 'sqMacExternalPrims.c'.	Smalltalk at: #AbstractSound ifPresent: [:abstractSound |		self storeString: abstractSound cCodeForSoundPrimitives													onFileNamed: 'sqSoundPrims.c'].	self storeString: self cCodeForMiscPrimitives													onFileNamed: 'sqMiscPrims.c'.	self storeString: self squeakOldSoundPrimsFile	onFileNamed: 'sqOldSoundPrims.c'.	self storeProjectArchiveOnFileNamed: 'projectArchive.sit'.! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 4/10/1999 23:28'!macArchiveBinaryFile	"To create this method use:	  (FileStream oldFileNamed: 'projectArchive.sit') binary contentsOfEntireFile asArray"	^ #(83 73 84 33 0 3 0 0 52 136 114 76 97 117 2 98 0 0 0 22 7 3 13 13 14 83 113 117 101 97 107 54 56 75 46 112 114 111 106 46 112 114 111 106 0 0 0 0 0 0 0 0 0 0 0 0 186 147 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20 76 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 90 110 179 53 142 45 0 0 41 239 0 0 41 86 0 0 9 121 0 0 10 77 68 237 9 92 0 0 0 0 0 0 75 12 13 192 248 163 215 42 243 90 153 118 109 186 217 73 104 126 248 173 159 183 181 214 45 217 148 19 22 221 148 60 119 237 100 94 118 158 155 173 132 254 166 151 17 238 0 79 13 207 78 153 158 215 198 127 236 228 23 225 132 173 149 229 69 110 27 161 228 55 185 173 231 109 9 235 37 156 176 219 132 147 125 108 31 217 39 97 132 147 77 24 97 79 40 161 132 21 97 132 19 70 88 223 177 253 70 55 229 151 228 182 177 109 71 158 147 237 229 185 159 10 124 117 117 155 121 252 37 91 186 165 69 79 190 182 237 152 71 216 38 199 79 194 35 207 201 237 35 251 25 158 108 96 252 9 4 160 157 7 224 1 112 0 112 109 31 192 98 252 167 229 136 198 14 85 108 149 165 22 93 12 203 146 34 26 173 146 33 234 106 88 86 21 89 148 67 122 86 221 231 162 178 212 182 188 164 218 29 209 212 109 213 60 102 247 249 252 181 222 198 213 21 28 172 89 52 130 190 132 183 95 143 135 55 174 87 0 10 95 68 198 189 178 216 28 146 2 109 162 26 53 66 65 36 72 148 117 147 179 209 26 212 69 252 25 173 178 216 34 111 145 162 33 3 207 122 155 161 70 196 136 22 84 12 89 115 175 174 103 151 135 47 137 1 73 81 84 67 108 70 54 234 118 185 69 84 183 108 177 72 152 121 154 229 128 20 213 101 49 104 16 61 44 8 15 14 60 45 98 141 240 215 112 0 143 137 210 16 233 196 211 165 156 227 193 35 139 76 27 0 22 137 88 67 21 201 246 73 1 113 109 157 184 188 164 77 244 126 210 187 108 153 251 187 35 89 60 116 72 183 14 214 249 179 92 39 151 193 127 126 56 143 27 102 90 200 116 157 157 175 101 114 195 12 14 226 241 4 28 143 115 20 4 21 153 71 138 61 123 0 86 196 233 179 42 152 225 240 169 138 20 80 199 153 166 195 82 200 228 142 243 177 193 243 107 193 232 145 60 1 228 2 199 229 242 95 229 219 211 94 2 23 64 217 81 108 129 217 120 47 159 250 120 39 171 206 133 83 122 30 107 13 30 251 61 19 243 151 66 19 226 27 6 238 131 166 235 158 55 49 0 36 210 228 137 253 100 0 255 191 241 196 60 177 159 158 89 188 1 171 237 130 39 49 243 46 226 218 64 149 168 241 116 124 237 36 52 125 162 10 54 188 188 25 98 125 167 32 118 103 187 39 182 55 147 221 137 237 222 102 50 49 249 137 217 158 14 202 231 233 232 238 131 91 126 116 247 8 23 68 98 119 29 176 74 156 168 121 12 158 179 122 130 248 157 111 244 142 67 69 158 142 111 226 109 139 31 204 217 8 79 226 127 152 207 157 207 65 211 138 126 60 63 194 184 156 96 156 95 132 61 172 210 115 48 43 50 230 20 224 248 210 82 81 232 126 230 139 16 168 57 10 5 27 157 66 225 113 39 226 157 48 239 238 97 214 20 194 47 178 0 92 55 157 4 151 152 11 174 211 175 64 54 31 127 117 51 31 63 55 7 66 197 125 66 183 208 253 199 60 161 251 231 135 193 245 253 114 161 240 91 253 194 131 74 140 238 128 235 137 2 8 254 238 26 238 227 191 197 251 207 156 18 186 159 21 129 119 237 43 238 131 109 224 122 234 136 208 253 203 19 84 59 128 125 78 128 7 54 15 152 29 14 152 199 195 111 205 187 6 207 177 248 99 107 106 80 81 134 21 65 232 62 251 25 161 104 47 211 51 161 80 59 131 127 86 63 134 207 205 155 79 109 74 247 49 255 97 204 85 133 112 39 230 56 129 255 83 248 239 193 255 73 238 89 224 11 75 125 178 161 169 59 100 173 77 23 235 12 73 105 145 180 22 177 38 216 172 73 218 173 165 190 186 26 209 91 138 140 186 14 102 66 151 240 235 159 237 70 94 153 230 121 41 66 75 241 230 129 63 196 123 10 190 109 98 120 165 107 9 101 43 136 247 220 124 219 104 190 131 215 143 228 219 23 195 59 85 241 158 27 13 86 187 174 239 157 16 10 238 88 201 254 15 93 223 9 92 241 169 120 207 188 47 128 43 88 19 127 162 189 147 206 66 225 201 179 152 243 80 188 55 30 167 60 152 181 0 174 109 56 2 243 30 237 140 247 238 218 28 239 221 77 156 142 162 66 52 157 219 135 200 151 137 23 107 155 76 161 16 255 102 182 245 76 85 231 96 55 150 162 193 64 127 81 23 141 68 84 205 40 189 3 132 162 85 247 50 246 148 177 235 224 117 208 97 245 192 222 191 247 192 222 31 222 240 94 15 248 15 93 232 129 157 7 216 127 172 7 142 81 101 172 30 216 137 10 250 175 30 64 67 241 52 56 200 101 49 147 85 141 237 175 180 201 218 27 14 197 202 224 247 123 255 146 1 242 110 22 186 246 159 193 127 246 46 224 43 227 63 120 133 249 167 116 216 127 3 240 191 90 10 249 101 126 63 42 217 127 131 164 185 44 18 9 217 3 240 240 249 106 202 83 121 178 80 12 197 213 97 82 6 42 253 155 57 124 254 154 74 155 0 30 141 94 84 51 59 128 186 214 214 213 142 18 124 159 71 125 197 186 250 52 119 115 107 0 59 154 117 48 83 167 253 121 66 215 131 167 72 105 96 105 126 200 89 46 133 66 170 170 136 85 114 40 98 201 9 230 0 186 47 100 156 101 174 133 120 240 238 192 4 95 167 175 209 116 247 99 221 97 242 72 119 7 150 45 179 5 224 145 230 14 76 20 228 31 60 172 178 219 0 212 53 50 78 228 50 15 185 125 162 32 239 134 217 175 173 255 233 215 236 65 30 201 106 204 70 30 126 73 15 72 161 139 133 53 235 26 145 116 187 0 30 129 241 202 166 234 74 130 70 60 28 196 227 109 37 154 230 193 187 47 248 168 243 145 86 43 223 118 169 95 245 9 157 118 96 25 202 244 48 211 105 43 237 27 58 189 206 187 118 210 199 100 83 146 202 164 147 105 81 3 209 255 73 16 243 31 154 174 37 77 195 20 15 189 53 212 156 202 147 229 175 120 167 170 200 195 136 218 4 240 160 72 119 99 151 252 187 174 126 234 197 148 103 183 65 113 228 88 250 55 115 92 113 228 99 60 108 3 28 249 218 242 53 244 54 159 172 135 207 223 152 170 135 221 135 179 127 171 170 87 156 125 146 199 101 103 63 201 99 202 217 79 214 117 202 217 167 120 216 47 56 251 209 122 252 211 217 143 21 246 125 103 159 226 49 229 236 71 105 124 224 236 147 60 236 3 156 125 186 91 151 183 190 173 211 80 1 62 196 251 77 124 1 206 44 157 215 233 87 217 64 140 253 135 35 127 171 241 175 56 242 139 10 107 27 224 200 27 131 74 241 167 196 246 146 229 31 58 242 204 247 28 21 18 157 80 142 105 71 149 228 113 217 9 77 214 99 202 9 165 120 76 43 253 40 143 15 148 62 201 35 205 157 84 197 153 200 3 133 97 210 186 95 85 160 33 30 161 224 184 44 158 127 249 184 216 105 196 67 109 198 97 174 139 60 214 54 111 75 241 200 240 141 141 139 92 82 196 153 62 159 23 231 151 236 0 226 111 202 58 19 171 197 58 254 29 30 168 100 161 113 207 154 67 60 66 146 174 139 94 53 28 9 134 94 175 126 66 57 176 227 229 45 182 0 117 189 170 28 67 158 62 249 54 48 205 35 165 208 169 62 27 82 86 99 188 205 166 195 129 19 143 12 224 183 191 59 251 57 99 155 218 170 132 165 176 252 33 91 100 200 209 129 199 41 75 155 151 160 70 176 127 233 129 193 152 11 51 112 212 154 233 16 155 25 70 208 154 234 165 121 92 75 53 48 178 64 24 238 32 128 94 188 193 205 54 39 213 197 6 223 196 35 198 88 84 150 213 213 155 175 253 238 254 108 28 159 189 26 43 48 6 193 63 79 91 131 107 223 96 5 25 130 81 2 25 9 253 197 209 133 42 156 203 151 53 125 202 114 56 217 148 250 80 103 252 24 45 226 240 13 147 171 213 39 13 62 191 22 12 235 248 15 26 193 237 178 78 127 219 24 33 74 198 166 77 186 33 105 108 16 213 190 33 104 6 58 151 122 219 146 197 243 65 90 201 108 5 187 216 3 14 59 0 41 91 97 3 81 113 110 46 219 217 96 79 19 143 210 148 127 106 3 4 121 17 211 219 112 248 112 64 127 218 9 177 206 22 192 229 164 26 247 79 46 104 116 227 4 105 25 238 92 152 38 196 59 49 151 159 61 31 152 10 103 243 18 185 75 188 107 87 86 44 17 151 172 44 171 47 195 163 127 181 183 126 137 221 74 11 56 105 227 200 80 140 108 183 17 22 213 62 60 111 23 94 41 224 190 14 124 164 129 189 50 230 71 52 124 82 196 249 254 186 250 218 133 152 145 238 15 134 246 2 123 162 99 110 163 246 49 88 128 71 55 97 171 238 1 122 138 43 33 172 202 15 244 148 123 146 176 200 105 192 121 60 46 159 176 240 78 168 69 140 205 11 222 244 56 224 3 51 119 11 97 174 251 32 136 24 110 24 0 216 56 0 184 13 7 55 75 96 84 15 192 237 136 157 35 76 190 11 238 65 117 203 35 108 199 3 176 23 75 112 35 97 31 217 4 247 3 204 207 37 172 184 20 190 129 88 17 97 11 142 193 97 220 170 115 47 97 245 57 232 243 160 16 247 37 160 34 124 5 158 66 140 41 187 112 28 250 17 59 205 56 117 192 11 184 132 165 155 176 134 135 224 247 136 157 33 76 188 31 183 157 64 209 243 132 229 188 204 229 224 141 94 194 106 30 225 10 17 195 46 2 184 93 230 176 7 68 204 15 224 61 198 125 26 224 99 223 33 236 163 235 185 50 128 107 30 39 172 201 193 249 0 22 126 137 213 64 231 112 111 194 194 35 172 161 78 208 54 152 197 44 199 252 24 97 220 211 172 39 252 184 77 72 14 24 34 246 164 30 84 149 44 246 252 63 248 24 60 139 6 68 188 106 139 188 74 86 50 135 134 69 216 53 43 179 203 26 121 74 164 76 224 141 146 166 4 149 173 186 163 162 37 104 168 90 122 165 170 24 89 9 182 21 237 134 38 233 46 111 84 55 212 176 88 45 223 186 67 213 90 116 103 89 32 32 227 83 180 95 50 90 117 71 189 164 109 149 13 103 121 52 24 106 177 18 102 52 120 113 253 133 108 68 35 179 104 150 212 42 76 54 97 43 131 58 190 98 203 225 102 44 65 230 208 160 41 203 99 177 206 50 71 36 18 133 178 224 193 58 121 43 125 152 108 22 173 141 72 16 35 108 152 216 208 78 9 129 32 28 216 97 249 44 130 78 115 116 25 235 167 200 33 39 78 77 13 114 253 63 13 0 107 153 150 249 153 215 192 114 182 165 220 104 189 118 157 118 81 254 25 83 182 94 50 45 173 149 233 177 73 148 251 27 79 245 232 227 55 91 223 194 127 125 251 200 62 102 228 182 100 176 89 71 142 19 222 145 209 38 163 45 217 146 77 246 83 217 181 50 242 220 77 54 153 240 200 38 147 77 110 31 217 39 217 103 35 194 201 38 155 48 114 252 220 103 70 110 31 185 205 54 153 108 6 220 219 202 189 196 31 243 58 157 48 47 252 102 145 77 216 37 153 48 50 218 100 200 41 217 120 130 7 62 60 80 14 58 124 84 211 98 132 16 23 188 87 17 210 252 103 66 54 86 64 47 4 239 114 120 15 145 50 178 5 222 205 238 176 150 210 163 138 65 92 111 255 146 124 137 116 12 93 186 216 78 220 128 64 159 74 172 233 131 120 53 65 41 186 174 91 237 215 37 93 5 212 93 12 143 78 70 31 129 203 241 232 187 185 214 211 19 14 124 8 120 194 193 35 164 245 12 169 58 82 71 92 191 255 6 33 39 46 185 250 22 191 71 182 145 16 212 223 185 140 70 202 232 12 12 15 31 202 31 171 55 159 42 171 37 229 174 232 146 131 87 240 24 230 179 101 59 78 92 34 127 33 243 8 169 255 57 89 70 222 131 143 150 50 141 48 100 74 1 144 174 38 76 69 79 182 68 109 120 251 249 60 214 190 244 133 137 175 194 20 11 211 175 158 242 64 221 137 253 114 172 23 167 255 96 150 65 93 13 181 27 106 63 126 215 1 245 11 80 207 199 186 2 107 55 214 149 88 87 165 191 240 187 55 161 222 133 253 0 214 243 206 182 190 75 231 121 58 211 53 239 16 212 253 175 143 246 149 67 253 76 102 124 245 32 212 93 153 147 167 63 128 250 29 242 71 96 105 137 205 115 173 49 236 241 133 188 193 144 174 198 141 155 108 203 115 78 240 236 240 203 172 132 144 26 99 216 175 198 148 255 208 75 214 207 121 193 239 191 25 177 141 54 191 75 141 97 240 98 143 113 60 17 157 229 217 123 139 223 134 137 181 127 167 253 250 239 175 31 167 252 56 124 215 33 143 14 239 219 112 158 79 249 255 39 249 23 176 183 220 230 191 142 241 239 83 117 37 106 106 250 241 162 196 57 92 145 255 185 43 120 183 117 143 190 189 132 241 222 49 6 33 37 33 197 74 246 182 199 226 189 7 121 153 51 131 127 87 194 149 4 246 54 216 252 55 50 254 187 180 227 134 169 70 143 121 18 114 68 234 143 41 230 164 6 164 91 252 111 158 200 116 210 126 20 191 123 8 125 240 113 252 206 246 199 154 137 51 23 175 248 228 110 252 174 59 167 159 45 56 135 208 81 16 241 108 61 213 34 206 34 156 195 209 215 19 150 190 182 98 63 175 179 22 156 207 209 91 133 139 230 253 21 83 57 17 244 214 163 152 163 154 126 236 102 144 106 178 244 38 244 36 116 36 244 179 96 226 213 211 23 161 222 155 126 255 212 170 41 221 8 125 108 184 163 7 161 131 70 196 179 249 95 246 189 31 254 109 11 212 75 78 191 243 221 212 199 58 120 219 245 27 96 113 171 157 55 184 239 132 21 93 149 98 224 58 193 128 47 16 210 244 41 223 249 28 214 207 35 31 66 15 75 177 47 124 168 29 235 230 137 95 188 127 221 151 60 255 243 165 131 232 3 247 253 169 15 113 243 62 117 8 231 176 253 234 0 126 127 4 235 29 233 11 63 250 218 101 221 62 140 252 62 135 120 78 110 176 253 205 246 181 195 200 207 125 127 251 138 107 28 84 217 108 235 186 154 235 90 75 37 228 217 157 207 103 44 127 123 4 121 18 186 206 235 216 214 237 163 168 215 188 126 29 157 110 66 28 91 159 143 225 119 194 55 243 185 66 232 113 35 214 119 115 198 167 249 226 136 139 110 204 154 236 124 1 123 26 208 223 1 53 33 107 163 51 2 124 48 167 191 188 63 10 61 109 199 122 197 196 233 111 211 122 39 226 56 57 68 232 206 214 217 147 56 111 107 250 79 15 126 235 178 206 218 238 228 21 59 31 139 252 182 50 151 95 238 232 171 180 7 11 170 70 244 246 30 236 179 115 117 236 249 22 27 195 123 98 50 243 239 89 142 159 154 171 131 95 200 223 31 147 11 207 179 115 94 240 251 26 161 27 252 26 219 255 235 141 225 253 170 110 166 164 24 196 128 33 53 161 228 57 166 183 11 87 248 181 121 189 207 163 205 223 173 125 235 124 57 161 223 62 10 160 188 98 45 114 161 208 97 62 239 173 197 250 1 43 167 172 195 254 26 172 109 221 230 247 71 203 177 94 141 245 42 43 95 136 61 137 208 177 189 31 241 147 206 121 239 66 45 246 166 168 211 234 0 189 139 24 144 162 10 92 115 220 228 127 31 214 185 57 86 4 37 115 8 70 240 250 131 219 219 118 175 107 110 85 55 183 201 27 91 38 135 234 157 157 99 101 48 220 189 206 219 130 99 248 37 61 63 201 254 217 57 26 130 7 248 12 189 169 132 169 198 149 41 38 248 19 158 157 163 62 164 107 3 176 136 215 183 183 29 131 129 10 99 144 200 236 28 213 123 83 176 215 140 0 19 183 116 118 244 35 207 1 240 197 77 142 71 157 249 114 217 143 93 227 145 142 131 17 218 1 76 64 109 175 113 54 233 103 183 254 227 45 142 74 59 112 61 195 80 203 141 225 150 161 18 61 52 13 32 42 205 5 229 237 128 218 181 189 34 14 234 47 225 50 15 103 168 172 51 159 163 186 13 83 86 181 34 44 115 112 129 250 2 169 224 168 149 128 26 83 251 11 176 22 170 59 139 170 171 137 193 187 168 149 200 43 179 142 25 94 175 160 46 104 135 27 164 206 134 106 208 93 167 34 201 138 110 220 192 102 27 10 134 202 58 85 20 117 87 155 59 114 60 169 76 3 242 89 169 175 243 89 105 103 33 71 109 240 106 9 89 53 85 13 174 6 96 108 93 179 38 96 41 133 163 210 78 53 71 93 24 84 199 20 57 168 201 57 114 89 22 225 168 180 83 195 81 43 59 70 148 132 89 164 136 37 32 206 43 237 212 226 172 204 249 100 93 26 157 6 102 57 135 163 210 206 34 142 186 40 139 26 81 198 204 73 100 150 118 24 42 235 212 113 212 5 123 194 251 76 53 86 160 200 210 208 98 228 53 168 196 169 67 22 188 129 38 52 161 134 50 82 143 122 165 247 57 37 189 90 12 53 8 13 233 186 150 243 5 166 6 154 38 185 26 104 103 9 79 0 149 32 237 136 55 84 64 165 25 143 187 50 75 123 75 81 121 158 100 50 166 68 164 216 177 105 96 139 161 101 124 214 58 143 44 235 138 97 28 236 150 168 173 92 131 166 185 146 207 202 18 230 114 156 181 87 49 248 205 225 127 103 109 20 158 167 75 201 123 26 90 129 42 223 165 24 166 20 155 114 5 212 16 77 218 92 67 180 243 0 162 250 181 88 193 146 39 103 93 137 188 70 224 228 178 228 41 22 234 42 129 10 166 117 15 117 53 122 67 56 170 171 201 2 173 54 234 26 116 74 72 240 177 146 250 44 212 181 66 13 234 24 141 236 119 212 176 14 245 26 136 106 137 123 122 93 207 51 165 115 179 119 198 125 168 27 243 43 116 96 35 207 80 157 13 126 102 211 215 119 112 84 218 129 61 178 152 117 102 239 156 57 31 254 41 162 66 7 246 214 12 213 185 134 201 188 233 59 137 168 208 33 15 161 134 124 202 136 90 112 188 107 94 190 1 189 1 54 10 0 106 220 113 202 135 81 121 92 8 5 229 177 173 63 159 149 118 154 57 106 181 87 139 39 181 68 33 181 89 168 27 17 149 205 26 72 36 83 211 94 100 161 62 194 81 107 88 218 40 70 68 139 215 71 57 106 69 71 40 228 45 37 108 43 83 62 134 12 1 40 53 230 126 109 236 6 182 53 235 38 142 90 219 163 153 234 128 26 157 206 53 215 80 91 80 229 220 76 138 42 191 154 95 55 115 212 42 200 229 166 174 21 162 168 133 186 5 85 30 84 18 169 146 191 90 168 143 11 31 130 227 37 109 240 46 67 79 32 67 52 163 116 192 238 32 7 107 169 97 171 72 108 176 17 209 63 73 0 173 20 213 255 147 170 36 110 209 114 192 236 230 130 39 108 218 217 134 188 134 217 206 230 110 98 219 46 114 57 40 239 94 70 121 18 81 67 218 232 77 94 45 47 111 19 174 28 133 0 251 201 172 79 241 180 225 220 54 156 249 245 249 215 48 15 65 135 60 205 81 171 140 97 240 148 1 53 191 195 162 251 121 204 40 208 33 207 112 84 184 43 13 197 36 115 64 211 227 225 164 18 165 246 247 17 62 221 230 35 42 116 224 90 36 155 162 110 94 151 100 70 246 101 16 21 58 112 163 32 82 212 204 77 67 102 211 139 47 137 196 246 226 75 112 81 199 80 157 11 188 204 249 195 125 34 177 29 238 35 59 68 86 102 128 165 125 30 92 171 225 102 14 58 237 152 149 33 15 197 239 101 101 15 71 173 247 246 6 249 184 211 129 207 66 221 137 12 117 107 163 176 88 42 110 122 174 186 178 151 171 193 185 255 206 108 122 197 47 52 244 138 159 248 248 158 178 90 74 24 234 209 164 164 3 216 245 121 173 253 107 135 216 137 170 95 84 142 22 247 13 214 118 211 207 81 43 18 169 88 81 119 215 102 221 197 81 23 140 72 71 99 170 81 24 214 154 181 147 163 186 101 117 164 68 144 61 107 0 103 29 141 14 73 122 17 215 154 181 139 43 111 242 98 229 42 60 189 35 65 229 65 135 236 70 149 239 134 131 109 165 168 7 43 55 116 115 212 6 28 177 99 44 170 36 105 26 181 100 107 57 74 80 228 87 41 174 244 42 131 32 163 27 219 74 107 214 158 172 231 201 138 95 151 6 227 211 201 220 154 117 79 54 55 204 220 163 103 78 158 123 89 168 225 220 203 112 197 147 211 208 213 20 96 105 104 47 223 151 215 125 184 47 231 55 27 182 94 233 37 223 120 48 232 237 100 157 94 138 234 253 149 115 113 146 190 240 6 220 55 4 67 221 112 65 244 198 91 36 76 81 125 237 206 93 72 250 194 57 69 160 158 83 72 132 205 186 194 185 2 129 212 250 58 162 66 135 236 99 168 13 206 109 77 122 239 207 218 93 227 134 153 234 167 29 178 159 186 151 119 179 115 1 147 254 235 55 127 128 179 66 135 28 224 42 95 154 189 47 153 94 249 88 155 239 131 152 108 2 113 105 144 33 210 141 239 228 86 196 66 61 196 81 107 246 250 246 12 12 24 81 93 81 174 175 81 108 71 121 14 221 43 108 74 9 89 210 101 154 107 110 111 95 250 196 110 94 27 129 63 204 20 51 202 85 134 158 231 168 11 60 49 85 42 108 216 174 205 122 24 211 252 126 85 86 74 247 40 150 191 30 225 168 117 89 229 5 83 134 149 174 167 24 58 138 219 205 91 247 64 175 7 90 208 27 104 7 254 74 195 80 157 191 216 156 221 214 3 168 116 86 218 129 127 37 92 78 216 197 127 43 0 150 154 69 85 73 63 189 117 107 175 89 200 80 135 124 74 110 191 65 255 75 195 81 105 135 68 179 59 81 227 216 206 226 14 203 82 158 156 221 28 204 252 181 230 108 211 111 91 145 33 232 240 111 92 240 7 36 82 22 10 43 131 151 46 101 129 224 27 23 161 223 80 14 221 77 189 112 93 232 90 67 255 11 20 234 54 76 10 224 110 234 105 132 235 176 15 224 144 175 49 228 143 25 244 155 255 3 0 13 13 14 83 113 117 101 97 107 80 80 67 46 112 114 111 106 103 99 116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 22 0 0 41 42 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 103 33 179 53 142 43 0 0 42 205 0 0 41 86 0 0 10 81 0 0 10 29 238 11 157 135 0 0 0 0 0 0 251 176 13 192 248 163 239 49 175 149 233 177 219 148 123 110 118 246 120 54 136 94 151 242 149 29 225 110 194 79 66 9 79 215 206 158 211 228 212 78 78 63 47 249 249 81 60 53 60 167 231 177 53 159 175 86 209 26 228 90 132 149 103 228 185 18 78 24 225 105 132 242 167 251 217 62 178 89 177 125 186 143 236 129 49 242 156 80 178 143 18 74 40 191 24 217 82 178 217 109 182 217 182 163 109 86 39 217 118 154 183 95 194 182 231 102 132 159 120 224 171 43 57 205 242 58 221 210 162 153 71 216 38 204 35 108 147 219 186 217 38 191 201 111 178 159 225 201 6 198 123 64 0 122 25 30 248 0 56 0 72 91 14 144 138 103 204 29 62 229 208 167 239 225 64 121 51 0 87 219 148 195 120 190 93 177 97 190 85 121 93 189 21 38 150 220 81 47 137 171 156 78 187 53 16 244 123 128 199 236 14 135 179 216 94 190 36 135 131 252 132 94 244 80 35 62 63 30 91 87 214 204 0 163 251 37 128 171 234 102 45 182 42 191 217 242 120 126 206 237 134 165 27 182 60 147 49 29 145 201 121 62 165 101 190 21 44 120 154 240 28 83 184 253 29 67 209 239 193 82 105 90 186 129 222 6 12 79 23 151 22 45 136 43 56 152 114 88 9 20 174 44 172 95 0 16 199 184 197 177 47 54 74 150 196 237 141 216 56 12 40 44 3 200 123 149 75 78 197 23 60 24 232 29 147 146 238 49 73 223 197 187 42 45 5 111 12 136 174 85 98 141 116 82 75 53 198 106 239 173 242 154 186 15 222 143 43 89 35 135 164 58 187 87 148 101 73 62 69 97 246 251 74 125 16 6 224 49 81 12 34 77 120 59 159 115 32 120 100 129 53 171 27 16 249 164 136 197 33 186 132 162 18 1 45 66 176 207 183 207 155 103 253 118 111 22 155 90 102 234 69 187 47 229 154 184 120 254 238 99 121 176 244 251 171 184 47 76 199 51 89 33 14 173 76 137 192 138 194 81 16 52 77 189 82 108 218 4 176 88 161 79 83 48 222 224 240 251 68 151 127 128 105 44 204 129 4 238 251 124 184 251 126 60 24 61 213 65 146 128 227 190 202 215 243 127 138 121 10 204 0 153 173 88 2 227 240 221 100 170 227 251 152 58 39 111 177 201 172 52 120 172 247 4 204 159 1 21 136 175 56 250 36 84 92 245 91 21 3 64 34 21 182 240 207 143 226 121 208 22 182 133 187 246 92 185 2 213 54 195 46 204 188 150 184 162 203 1 87 96 107 124 98 7 84 92 157 7 43 222 172 132 240 222 78 8 223 223 96 11 63 158 192 222 132 215 121 84 38 42 63 193 98 107 164 124 182 198 230 189 176 252 103 15 246 114 65 36 252 192 87 52 137 35 154 135 225 21 173 38 136 95 79 161 55 110 155 102 107 124 6 95 107 252 96 194 74 216 133 231 49 62 247 191 2 21 139 247 225 253 59 140 75 7 227 252 6 108 98 74 79 192 172 200 152 243 1 199 103 100 8 198 230 151 215 131 171 160 21 82 86 154 140 211 226 246 33 222 4 147 30 60 198 154 194 248 106 34 128 249 186 29 96 22 146 192 252 227 195 96 225 149 63 87 242 202 145 9 224 93 184 215 216 108 108 126 39 217 216 252 235 103 193 252 66 150 113 234 55 246 25 191 232 11 211 27 48 239 76 1 247 91 51 185 185 135 240 253 203 157 198 230 95 9 192 155 91 22 238 197 126 192 252 147 231 140 205 191 235 32 237 0 90 76 0 95 168 60 170 245 8 152 199 198 215 36 207 196 123 88 121 62 191 0 29 229 152 35 24 155 95 43 52 78 123 202 194 176 169 193 61 120 50 253 24 62 49 121 10 149 41 189 199 252 207 98 174 60 132 155 48 71 7 158 157 120 182 225 185 3 29 133 55 103 160 185 162 183 150 212 7 2 254 96 40 131 188 205 6 156 231 245 78 72 74 236 128 241 155 231 68 13 40 93 173 74 204 202 121 14 44 128 164 165 251 240 220 85 171 188 101 67 124 46 217 33 36 93 145 142 216 97 60 45 48 161 177 20 243 183 206 134 216 88 196 133 119 243 35 191 3 78 21 79 15 113 243 126 216 34 187 130 110 152 148 141 206 118 69 58 115 85 207 65 84 27 245 97 249 199 96 126 210 35 57 90 1 179 222 88 107 219 248 173 16 34 104 4 196 231 224 215 33 105 250 86 46 219 228 68 108 55 242 107 98 150 57 126 243 61 106 126 212 131 242 39 205 8 104 12 146 97 6 185 37 87 12 252 212 12 135 20 10 250 239 148 130 171 100 161 36 36 250 170 197 96 181 80 224 174 10 138 193 53 25 142 146 2 193 158 129 153 94 220 147 0 15 25 15 252 114 29 102 79 80 239 84 28 115 240 229 79 223 86 218 82 190 169 98 248 228 33 79 0 179 165 40 109 55 220 213 151 111 79 122 111 62 131 5 223 228 41 109 159 34 69 241 205 254 14 206 121 164 149 78 99 139 171 18 184 133 157 74 219 164 207 130 217 93 160 236 108 104 162 59 119 115 178 7 115 110 83 218 177 90 48 15 102 117 66 106 217 115 48 105 123 147 210 190 182 82 105 95 23 198 247 173 232 146 21 71 90 16 121 152 120 49 229 19 48 19 157 148 237 22 181 24 146 126 1 6 234 178 180 38 171 192 237 91 37 5 79 116 40 195 25 96 98 59 247 226 206 61 120 90 214 2 159 171 236 62 204 250 167 216 29 59 23 0 191 127 14 76 206 116 58 209 201 254 27 100 205 153 129 128 87 31 128 135 195 81 144 53 148 39 17 141 64 88 82 71 238 72 210 159 202 225 112 22 228 234 4 240 40 183 163 9 234 1 232 90 92 82 220 71 240 99 30 165 57 203 74 99 172 85 181 174 174 174 46 224 218 55 178 135 251 31 97 46 101 123 192 131 254 29 147 109 202 18 189 94 191 223 39 228 73 94 102 174 159 88 196 195 254 13 219 160 37 109 17 108 201 232 164 39 196 131 183 186 206 240 53 57 202 213 238 190 191 58 84 30 177 86 215 188 121 186 0 60 98 172 174 51 130 252 141 71 164 167 184 172 107 96 128 200 5 30 82 195 25 65 206 133 90 175 181 255 169 87 106 77 85 30 131 106 140 67 30 78 81 118 137 222 211 194 170 186 6 196 190 95 93 255 224 225 26 80 118 72 87 106 66 137 135 129 120 124 228 68 163 60 120 235 201 62 170 39 98 138 165 187 206 215 171 124 198 167 13 40 67 166 92 199 124 154 189 127 223 167 151 217 139 134 251 24 11 37 201 29 236 100 170 253 174 250 255 89 16 235 63 130 114 112 176 105 24 225 33 215 122 171 134 242 36 58 115 206 170 138 60 66 245 58 1 60 40 98 173 88 37 255 214 213 73 181 168 118 228 215 46 186 73 191 165 35 71 233 79 229 184 216 145 247 243 208 13 232 200 139 178 242 133 97 61 28 206 242 33 61 244 62 58 251 15 85 189 216 217 15 242 184 208 217 15 243 24 233 236 135 117 29 233 236 135 120 232 47 116 246 125 122 252 179 179 239 23 246 227 206 126 136 199 72 103 223 71 227 82 103 63 200 67 63 160 179 143 181 202 82 205 71 62 141 179 3 115 105 110 96 14 100 205 70 127 110 237 245 233 92 230 211 250 31 29 249 135 133 127 177 35 63 237 176 186 1 29 121 185 219 183 240 26 161 97 209 181 255 234 200 19 254 222 81 33 209 51 206 49 218 81 13 242 184 208 9 13 235 49 210 9 13 241 24 117 250 62 30 151 156 126 144 71 140 117 208 21 199 32 15 52 134 225 214 253 178 3 69 121 120 221 3 182 216 243 231 227 116 165 17 15 127 21 14 115 157 230 81 84 229 25 226 17 239 232 31 23 57 239 136 99 28 14 59 206 47 233 1 196 95 157 117 12 170 197 42 254 44 15 116 50 239 64 207 58 158 120 208 120 166 96 247 215 5 220 222 247 212 143 56 7 86 188 116 187 46 128 174 151 157 35 218 211 15 254 27 24 229 49 228 208 67 117 22 117 214 208 64 153 141 134 1 39 30 25 192 175 62 55 251 25 231 241 215 250 234 196 186 254 249 220 179 129 12 57 186 240 56 101 169 243 18 84 8 250 47 53 208 29 19 105 118 184 187 46 122 16 154 199 165 74 81 209 68 48 34 194 14 237 125 59 24 207 77 65 159 141 197 24 234 223 126 46 188 236 196 116 241 165 32 62 221 224 7 211 214 200 243 68 210 69 16 31 17 31 229 204 147 196 106 41 40 143 180 28 38 136 97 195 214 204 93 241 124 169 103 44 255 189 186 210 243 137 219 110 147 67 98 144 253 96 212 111 8 42 227 36 136 225 53 91 228 34 123 19 40 200 43 187 141 17 218 192 192 134 255 117 63 20 231 38 98 135 74 59 24 142 199 56 117 55 70 153 195 25 116 215 201 110 159 64 119 119 200 189 250 47 75 31 116 73 98 59 185 188 86 7 66 153 131 218 31 218 21 66 155 66 162 145 155 89 82 170 246 54 25 143 225 152 126 11 62 193 211 194 102 195 245 14 10 247 221 46 168 111 227 4 121 23 238 92 24 37 196 155 48 23 206 198 107 159 238 75 36 165 217 139 178 115 210 132 180 236 204 210 76 188 58 151 216 75 211 244 86 74 192 164 45 162 209 162 119 183 142 113 246 231 10 38 173 197 39 41 220 143 128 15 148 177 191 140 147 3 65 252 165 56 29 82 75 74 139 103 97 198 47 247 228 143 207 100 191 232 104 63 13 220 242 3 160 173 13 184 216 2 224 230 187 129 254 211 76 36 44 127 61 208 76 32 237 45 128 250 79 194 173 120 221 74 216 184 82 168 193 43 109 213 128 25 87 2 114 229 242 9 51 254 1 62 131 24 58 47 192 189 93 64 155 6 94 32 76 252 35 60 201 250 116 12 207 106 248 18 115 55 140 251 30 134 167 17 99 59 54 220 50 124 15 177 6 198 251 86 120 30 177 71 9 155 194 193 110 148 9 119 36 0 76 93 12 93 248 226 17 194 86 124 30 94 67 172 153 176 202 141 112 8 23 175 48 205 214 60 74 149 49 13 247 246 0 220 120 61 55 30 177 27 8 171 125 130 75 65 140 70 51 192 35 115 184 128 97 250 100 194 150 167 115 215 33 198 86 134 20 122 56 156 21 156 206 126 195 230 124 141 115 160 186 108 230 207 254 24 87 129 24 86 26 234 26 224 176 225 152 193 154 14 215 102 14 103 105 102 94 67 88 42 199 221 139 235 40 216 12 229 2 31 183 30 23 239 176 237 55 21 197 28 234 56 251 122 86 116 29 180 85 35 149 229 152 18 38 140 103 123 23 204 78 236 98 36 87 72 192 186 149 221 126 95 178 67 172 113 187 4 187 24 56 254 235 24 127 253 68 30 170 127 210 199 71 31 104 28 18 217 120 65 119 198 177 52 128 98 247 87 75 55 74 190 132 232 48 10 123 166 101 52 107 35 85 145 148 17 188 92 12 250 220 190 26 217 144 83 237 14 249 131 177 185 126 95 40 49 162 84 78 67 40 40 202 102 123 189 28 242 215 9 55 73 107 238 244 7 171 101 83 166 203 37 161 94 78 49 84 43 27 74 197 96 141 20 50 101 213 187 189 213 90 194 248 50 59 174 24 145 66 245 129 177 52 171 170 9 99 33 44 219 45 163 212 82 93 21 74 144 16 29 100 101 121 34 218 170 35 24 17 161 52 184 91 39 123 174 3 147 141 101 255 197 52 98 132 29 35 22 221 89 97 36 8 7 130 88 62 141 160 73 29 141 70 253 124 146 215 132 83 89 221 92 255 15 0 0 0 13 0 107 201 169 101 94 3 47 59 203 95 216 167 220 179 158 94 151 147 205 182 239 102 30 95 47 153 215 41 187 181 243 216 64 78 185 231 198 83 79 250 248 205 214 180 240 95 223 38 183 159 70 246 73 6 91 35 199 9 219 100 182 201 104 75 182 100 15 164 86 43 219 228 25 185 125 228 183 145 77 126 147 77 182 17 222 145 223 19 178 9 39 155 108 194 200 118 97 155 149 145 219 71 110 123 228 54 185 205 128 123 91 55 187 40 64 52 59 207 65 3 252 102 145 167 109 182 201 128 145 209 38 67 78 201 94 59 224 11 104 144 29 62 172 235 81 66 136 11 254 175 35 164 230 143 132 108 43 130 94 0 254 23 194 255 94 82 64 118 192 255 117 196 60 179 145 97 140 174 253 29 212 132 36 63 56 206 106 251 199 241 106 254 131 71 255 215 144 63 184 59 106 119 126 225 58 41 184 86 67 136 187 3 94 173 130 63 242 253 215 72 27 89 61 142 9 24 162 119 173 230 161 68 251 247 238 112 187 201 111 85 225 143 88 223 245 247 80 250 237 105 242 197 130 83 91 122 63 196 115 3 220 254 130 3 160 196 53 178 136 144 242 183 64 133 255 135 119 149 204 35 140 1 165 68 72 177 22 179 84 35 94 23 206 82 199 159 130 181 47 121 117 228 75 192 194 157 124 229 197 6 168 15 97 127 35 214 101 201 223 90 5 80 23 67 237 134 186 9 223 29 132 250 5 168 55 97 253 8 214 155 177 174 198 186 40 249 153 223 188 1 117 51 246 15 99 189 225 210 238 119 40 159 189 169 67 139 218 161 238 122 125 176 163 16 234 125 169 225 245 61 80 123 82 231 70 223 131 250 109 66 157 186 210 214 121 169 217 223 224 13 120 252 1 67 235 51 167 213 254 244 130 19 58 207 235 91 102 246 251 180 168 250 47 121 201 254 5 47 244 253 7 19 182 202 214 183 210 236 247 43 225 6 243 108 44 60 171 243 167 230 244 93 54 178 225 47 180 191 244 181 77 195 84 31 71 239 82 212 209 209 125 15 242 249 88 255 191 145 15 64 189 213 182 254 203 153 254 94 205 80 195 150 110 156 205 89 124 253 156 254 11 87 232 62 229 251 149 76 247 198 33 8 41 49 37 154 31 111 207 74 221 189 168 203 130 25 250 187 98 174 56 168 183 197 214 191 138 233 127 72 63 107 90 90 248 76 67 44 18 82 186 162 170 117 203 3 226 65 70 255 39 71 82 77 180 31 193 119 91 113 14 238 194 119 246 124 92 60 114 241 253 155 115 178 5 223 249 167 252 179 19 121 8 31 29 65 60 219 79 37 136 179 4 121 56 254 218 45 253 117 12 251 25 159 237 64 126 142 223 138 92 197 224 150 53 19 57 17 252 118 68 181 6 117 227 204 116 144 106 148 126 19 126 18 62 18 254 121 116 228 149 209 247 161 222 146 124 247 197 173 19 190 17 254 168 153 247 131 240 193 74 196 179 245 47 255 246 119 255 188 3 234 229 163 111 127 43 241 145 15 126 225 250 21 168 184 107 114 238 4 85 67 83 162 48 117 252 205 222 230 128 110 76 204 157 79 98 253 60 234 33 252 176 2 251 98 14 61 141 245 99 35 63 123 247 246 92 122 230 191 115 233 36 206 129 7 243 169 3 113 51 115 170 29 121 216 243 234 4 190 63 141 245 83 201 171 63 248 242 13 223 110 67 125 159 67 60 39 55 216 243 205 158 107 167 80 159 7 243 237 243 174 97 112 101 141 237 235 82 238 107 61 17 139 204 238 124 254 79 206 183 39 80 39 225 235 140 143 109 223 214 162 95 51 254 117 124 186 29 113 108 127 214 225 59 49 55 51 185 66 248 241 113 172 239 229 140 143 243 197 105 23 221 36 85 79 236 105 192 127 39 180 88 68 31 156 49 32 221 93 222 246 95 102 62 10 63 181 98 93 57 50 250 117 90 183 33 142 147 67 132 239 108 159 5 145 239 241 228 239 55 127 237 134 207 66 243 121 197 206 199 34 191 173 158 202 47 243 254 202 239 193 252 154 25 190 187 7 59 176 80 199 158 111 133 217 127 52 26 97 243 123 86 227 79 44 212 161 47 228 239 143 196 133 95 253 130 23 250 190 74 190 65 199 145 173 111 185 217 127 92 51 172 132 18 133 24 208 171 197 212 140 198 13 82 95 91 215 7 58 218 250 205 237 221 30 138 196 140 187 71 1 20 8 107 145 11 133 15 51 121 111 45 214 171 100 78 89 135 253 135 177 182 125 155 217 31 85 96 189 6 235 42 153 47 196 158 68 248 216 222 143 248 72 211 162 119 160 230 178 195 175 128 57 161 180 153 222 69 116 43 97 181 69 235 154 214 95 248 102 138 135 219 175 88 189 115 20 56 220 20 15 23 231 81 230 15 182 108 244 212 5 2 158 186 89 54 71 103 245 88 234 63 225 105 75 196 44 173 79 157 37 2 87 35 211 60 150 197 13 189 27 22 241 6 85 36 154 39 66 239 111 242 186 150 182 38 96 175 25 2 57 230 76 210 121 211 115 245 192 194 83 225 120 52 217 250 211 122 215 176 105 37 186 104 135 20 112 84 199 145 18 117 17 69 245 158 119 124 147 188 122 249 130 107 216 31 104 129 121 125 249 2 41 100 92 215 56 46 129 76 253 29 68 133 14 204 82 64 93 81 237 204 222 139 159 43 248 161 107 56 212 120 50 68 59 164 136 114 61 184 207 29 58 27 87 205 186 177 59 160 155 92 233 252 99 168 172 227 230 168 21 30 61 22 209 44 77 135 237 58 36 18 67 151 12 216 52 231 168 180 83 204 81 151 248 181 33 53 226 215 35 234 36 95 54 179 57 42 237 44 230 168 197 141 3 106 204 202 73 196 146 2 67 101 157 18 228 202 38 68 196 80 6 39 129 89 30 224 168 180 179 132 163 46 75 163 134 212 33 235 22 50 75 5 12 149 117 74 57 234 226 163 193 99 150 22 205 74 36 61 84 134 186 250 213 62 122 147 145 209 149 37 25 225 134 2 178 20 253 74 239 88 242 126 149 10 45 19 30 50 12 221 200 123 136 166 46 238 6 218 89 206 39 74 49 88 59 228 9 100 81 105 22 226 19 133 165 162 21 232 188 134 120 60 170 134 148 232 153 73 96 169 80 57 231 186 188 33 18 49 84 211 60 217 162 208 177 50 14 77 243 23 231 202 146 88 5 114 109 83 77 61 97 132 51 142 144 92 87 138 153 103 40 241 251 30 170 68 151 31 84 77 75 137 78 76 5 244 16 77 164 220 67 180 179 10 81 125 122 52 162 230 172 39 185 174 70 93 67 112 154 152 159 41 18 181 74 160 194 208 186 143 186 6 103 67 48 108 104 241 172 172 54 234 195 56 41 33 69 69 243 238 147 168 107 133 27 180 33 26 164 230 221 176 14 253 218 28 214 99 247 253 186 158 78 148 250 50 231 246 233 210 174 191 254 156 79 20 218 129 205 53 67 117 54 221 169 218 175 28 224 168 180 67 54 112 212 66 179 63 39 15 229 10 91 31 228 10 29 178 177 30 114 242 161 189 69 125 121 43 208 4 64 119 53 60 1 208 206 38 142 234 54 173 136 166 231 19 27 221 212 8 212 23 200 35 28 181 24 80 33 74 230 210 198 24 234 230 52 170 161 197 122 238 161 86 163 174 44 239 206 232 122 19 245 81 234 242 166 138 82 240 93 147 170 100 135 37 219 68 243 249 74 59 91 56 106 217 63 81 33 45 79 112 165 123 235 97 191 223 211 196 58 91 113 14 121 213 1 45 155 26 198 243 80 13 206 215 128 161 3 168 57 159 54 182 225 244 226 195 36 107 7 118 97 192 185 210 206 99 28 181 212 163 247 197 245 88 54 249 74 212 199 17 149 113 109 142 197 19 147 243 92 162 62 193 81 203 88 98 203 197 108 169 107 45 71 45 106 164 235 137 156 203 101 46 175 67 133 0 148 134 155 46 125 232 14 182 228 186 157 163 46 61 162 91 90 183 22 158 204 134 227 168 59 208 229 252 96 34 231 242 177 29 192 147 28 181 4 118 27 150 161 103 227 188 68 221 137 46 247 171 177 68 62 163 72 212 93 98 14 193 161 148 222 115 79 161 221 168 16 205 121 141 176 127 153 130 149 110 216 131 92 131 108 150 223 75 162 123 121 178 41 49 251 193 15 221 90 38 3 208 61 54 230 33 232 192 253 0 67 117 238 13 46 254 242 202 171 28 149 118 200 62 142 10 87 155 129 168 98 117 235 70 95 48 174 134 169 225 63 100 77 119 229 200 21 58 112 67 198 80 157 155 179 212 149 83 29 136 10 29 242 148 72 189 12 48 159 108 224 62 11 51 10 116 158 198 212 11 83 185 239 126 234 125 134 163 150 123 218 252 156 238 100 236 144 168 251 185 174 206 109 246 69 119 123 11 122 8 58 112 193 204 80 157 139 231 84 237 5 159 200 175 23 124 112 207 34 184 206 220 191 164 6 142 165 16 21 58 112 69 193 80 157 171 139 84 237 249 151 4 215 243 47 193 109 2 67 117 110 25 232 133 1 162 66 7 46 116 197 108 152 185 232 77 157 187 252 178 64 189 252 50 241 100 184 142 57 79 114 245 166 93 30 81 125 134 210 211 55 153 136 164 95 27 211 110 152 185 1 77 189 225 61 135 92 161 67 124 60 43 151 42 49 83 235 140 43 6 232 121 123 22 201 29 192 65 145 203 181 207 170 157 185 157 141 76 216 77 152 203 99 137 104 110 226 141 115 109 230 168 139 7 148 206 168 102 102 201 74 174 135 56 170 59 162 13 228 5 178 185 30 70 174 131 225 94 197 200 225 74 174 45 56 203 15 195 80 80 115 202 202 52 239 231 168 21 56 18 26 135 194 106 156 230 74 105 64 233 242 35 34 137 42 125 106 155 218 3 134 184 179 187 149 92 143 82 93 61 219 157 59 140 228 159 190 26 194 141 62 116 224 138 47 61 149 167 175 254 82 87 130 111 138 100 19 124 147 180 138 13 49 228 215 251 219 178 54 244 80 139 62 8 11 233 156 135 198 146 104 16 185 6 244 65 213 200 167 222 49 55 132 16 21 54 142 74 252 223 10 29 67 84 122 238 145 231 42 81 143 83 84 223 143 75 196 45 197 20 48 187 79 228 19 133 118 78 112 174 149 233 251 146 201 53 140 220 232 159 196 156 215 220 167 244 48 68 186 201 190 181 169 144 168 237 28 181 172 213 123 180 187 219 12 27 170 122 123 181 97 235 250 28 206 161 160 165 196 34 138 17 161 41 239 238 70 164 67 220 28 232 3 90 254 124 64 42 244 60 71 93 220 16 213 148 236 214 107 156 235 41 244 235 113 45 162 230 247 148 114 54 156 230 168 203 211 206 243 39 76 153 255 39 20 234 196 173 237 220 61 208 235 205 117 120 157 67 59 240 181 22 145 216 102 190 238 114 169 250 215 187 113 107 11 29 248 150 13 67 117 190 125 115 105 207 17 224 202 80 161 67 186 232 173 87 125 217 18 54 203 123 189 234 212 220 163 223 165 225 168 180 3 223 101 184 177 219 200 125 199 1 24 106 105 174 26 137 164 183 155 230 153 103 115 219 40 233 87 246 115 193 23 144 72 65 32 168 246 92 191 158 6 130 55 46 66 223 80 13 221 213 223 252 9 244 225 194 187 252 173 64 139 105 81 0 119 117 155 151 144 138 247 224 75 43 85 1 95 212 164 111 254 7 0 0 13 13 19 83 113 117 101 97 107 80 114 105 109 115 80 80 67 46 112 114 111 106 0 0 0 0 0 0 0 0 0 0 0 0 75 202 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20 76 0 0 0 0 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 103 33 179 53 141 198 0 0 41 201 0 0 3 236 0 0 9 121 0 0 1 117 156 177 210 150 0 0 0 0 0 0 145 165 13 192 85 103 131 86 230 160 101 101 131 140 246 120 182 153 189 252 188 86 118 132 95 132 47 148 80 114 251 216 218 217 111 154 105 39 167 131 76 222 177 75 60 53 60 167 231 177 117 194 240 87 69 175 172 91 139 176 50 37 191 153 251 8 39 251 89 100 159 81 242 188 35 155 69 24 225 39 217 100 63 35 155 145 223 132 17 126 148 80 194 182 73 182 146 99 71 216 102 219 142 242 36 207 201 126 178 89 222 126 9 219 198 8 39 60 134 7 190 186 146 211 188 62 207 45 45 154 121 132 237 99 30 97 155 220 214 205 54 249 77 126 147 77 54 195 147 13 140 63 129 0 244 178 60 0 6 0 139 214 0 44 196 191 101 99 72 59 249 177 45 12 180 183 34 112 151 83 59 133 255 119 26 118 44 115 104 111 232 167 202 140 154 141 173 178 180 193 227 113 57 34 74 216 15 2 102 119 187 61 213 174 250 149 37 12 202 211 7 208 147 29 120 125 48 118 175 107 158 15 41 190 87 0 238 12 46 88 225 208 126 185 235 201 242 146 7 173 117 59 118 61 87 48 15 145 217 101 33 173 107 153 3 178 240 111 195 127 106 229 190 63 89 171 126 11 89 235 109 117 59 232 110 196 250 76 117 109 213 242 228 138 19 57 167 180 72 229 186 202 214 229 0 201 156 91 50 255 146 18 100 73 220 129 72 74 198 128 202 213 0 101 191 98 179 22 225 13 1 172 116 143 75 73 103 139 125 47 158 117 105 41 132 148 136 228 221 32 53 203 231 181 212 99 138 113 223 161 182 7 47 220 159 90 211 174 70 229 160 43 32 169 170 172 94 164 144 251 158 82 23 194 10 2 38 178 32 210 137 167 107 57 71 66 64 22 88 179 166 1 81 78 138 100 185 37 175 88 85 35 162 69 136 174 101 174 37 75 28 223 29 200 226 212 203 76 63 24 231 58 214 201 210 132 135 207 228 193 210 31 174 226 161 176 13 102 114 64 50 90 153 22 135 53 141 81 16 52 87 63 82 236 220 9 176 66 163 207 80 48 205 234 14 135 36 111 120 132 105 18 228 65 58 123 94 136 245 157 7 131 211 211 29 196 14 76 144 132 237 194 31 44 95 134 76 128 194 253 88 2 83 241 222 108 170 227 207 112 117 206 159 44 118 94 26 12 235 61 29 24 43 128 6 196 215 158 126 10 26 238 252 181 142 1 32 145 6 103 236 103 167 241 127 194 25 115 198 122 143 46 92 139 106 103 194 97 204 188 149 184 162 203 1 171 112 118 124 237 37 104 184 171 12 214 190 181 30 98 175 30 132 216 163 109 206 216 147 233 252 78 108 155 95 103 162 243 19 179 156 29 148 207 217 241 213 87 225 83 63 253 220 0 23 68 98 143 125 203 144 56 174 121 12 94 55 106 130 248 245 23 122 199 158 185 206 142 231 240 182 193 15 166 173 131 195 248 63 195 231 209 215 161 97 197 107 120 254 30 231 114 128 115 126 19 118 114 165 167 97 86 100 140 213 36 100 22 160 177 160 175 212 180 70 34 97 37 90 64 117 237 4 230 127 227 32 216 51 14 64 246 211 121 137 226 91 170 43 130 89 153 255 248 114 176 215 189 134 255 195 45 218 31 157 136 223 65 86 0 246 233 75 17 59 133 255 44 152 214 81 139 249 247 231 66 82 18 226 226 187 249 145 223 113 143 142 47 141 178 37 63 234 82 189 138 15 102 22 99 85 79 95 202 29 197 127 2 235 0 245 225 249 83 49 63 233 49 43 225 7 11 222 220 234 124 226 59 81 68 176 8 136 207 137 103 193 62 111 55 43 182 121 16 59 130 252 58 121 157 103 63 189 69 207 143 122 80 126 251 252 136 193 96 22 204 39 167 96 213 32 204 41 112 203 81 37 252 144 172 108 80 197 154 168 20 106 146 148 38 177 194 215 168 72 74 123 129 187 166 66 116 21 96 166 151 143 166 195 246 148 227 191 216 134 217 211 245 51 21 71 30 222 252 201 59 90 119 206 183 117 12 175 108 247 71 48 91 142 214 253 241 205 67 249 142 46 29 200 103 205 194 59 101 90 247 71 73 81 188 115 236 0 243 188 189 159 254 41 93 222 245 192 238 57 168 117 207 252 44 100 250 42 180 67 109 157 116 102 247 205 242 99 206 61 90 15 86 11 230 193 172 30 88 180 250 7 48 115 95 167 214 179 117 189 214 179 45 134 247 247 163 67 52 188 221 133 200 231 137 23 87 62 29 51 209 159 178 221 175 23 131 253 231 96 165 14 195 104 48 42 124 161 13 178 114 206 157 199 51 192 140 30 246 242 161 163 248 207 218 10 66 169 118 228 20 239 29 146 94 58 180 28 132 99 121 48 187 208 227 169 184 213 14 145 25 22 70 34 1 115 0 30 110 119 69 209 88 158 12 52 2 113 101 144 220 145 164 191 152 195 237 169 40 53 9 224 81 239 66 19 52 3 208 181 186 166 122 136 224 135 60 106 75 214 212 90 28 141 45 222 222 222 94 96 61 79 240 139 199 190 200 93 202 249 152 31 253 219 82 108 43 146 2 129 112 56 36 150 201 1 110 174 255 151 47 192 177 29 123 160 107 113 62 236 42 56 72 87 136 135 224 240 94 230 107 115 215 235 157 237 112 117 232 60 146 28 222 37 75 76 1 120 88 28 222 203 130 252 141 71 188 167 184 165 107 100 132 200 117 30 114 219 101 65 174 134 94 175 45 255 169 215 172 62 30 163 106 76 69 30 30 73 245 74 129 75 194 234 186 70 164 161 103 158 127 240 240 142 40 59 166 43 53 161 196 195 74 60 62 112 162 73 30 130 227 124 31 213 31 150 106 121 243 181 122 85 47 251 180 21 101 40 84 131 220 167 249 253 247 124 122 141 171 106 188 143 201 162 36 165 163 157 76 83 216 219 250 95 11 226 253 135 162 42 163 77 195 4 15 181 37 208 56 150 39 195 83 114 69 85 228 17 109 53 9 224 65 145 228 192 42 249 183 174 30 170 69 189 35 191 55 127 149 121 75 71 142 210 95 204 113 163 35 31 230 97 26 208 145 87 21 149 139 227 122 184 61 245 99 122 152 125 116 246 239 171 122 163 179 31 229 113 189 179 31 231 49 209 217 143 235 58 209 217 143 241 48 95 232 236 135 244 248 103 103 63 44 236 135 157 253 24 143 137 206 126 136 198 205 206 126 148 135 121 64 103 159 228 80 229 230 15 124 26 160 235 142 211 56 21 145 7 69 185 232 207 251 7 124 186 148 251 180 249 71 71 254 126 225 223 232 200 47 57 172 105 64 71 94 239 11 221 115 183 216 150 127 239 191 58 242 244 191 119 84 72 244 178 115 76 118 84 163 60 174 119 66 227 122 76 116 66 99 60 38 157 126 136 199 77 167 31 229 97 113 140 186 98 42 242 64 99 24 111 221 111 57 80 130 71 192 55 98 139 253 47 31 151 42 141 120 132 27 113 144 233 18 143 170 70 255 24 143 52 247 240 184 200 53 71 76 117 187 93 101 166 0 69 241 215 183 138 84 84 139 87 252 21 30 232 100 129 145 158 53 155 120 208 104 162 232 10 7 35 190 192 89 245 227 206 129 21 47 63 104 10 160 235 45 231 72 244 244 163 111 3 147 60 198 28 122 172 206 18 206 26 29 41 179 201 176 226 180 31 7 132 77 87 231 30 147 253 225 150 80 80 10 14 207 166 94 9 100 200 232 32 224 132 161 201 75 80 33 152 191 212 64 95 204 160 185 217 190 186 232 71 104 22 149 42 69 71 51 32 5 17 254 51 238 247 64 202 213 9 224 43 177 2 67 127 237 103 177 53 231 38 107 111 6 241 233 3 47 76 26 35 207 115 73 243 33 45 46 62 202 89 38 75 77 178 162 78 180 28 54 176 240 65 99 35 63 123 165 127 36 253 108 93 153 249 196 3 15 168 81 73 225 15 140 230 13 65 101 108 7 139 96 216 34 139 239 12 160 32 175 76 152 101 55 223 50 96 2 32 185 249 131 226 108 6 234 72 251 7 6 35 179 38 220 26 106 114 133 155 100 175 71 241 5 85 145 78 190 168 111 211 159 23 30 152 146 196 62 116 121 118 182 14 206 38 41 45 172 169 253 203 139 178 25 65 225 190 219 5 13 109 91 32 239 18 250 182 94 140 135 96 195 92 56 27 111 124 166 47 97 95 236 170 42 46 89 44 46 46 46 172 45 196 163 103 165 171 118 177 217 74 9 216 140 37 44 70 12 236 149 73 201 173 218 61 115 43 94 201 97 63 6 33 178 154 191 50 206 142 40 248 164 56 15 22 213 212 86 47 192 140 223 236 207 159 86 200 159 232 120 215 116 255 11 64 91 27 50 8 187 239 97 160 119 154 25 132 149 63 14 52 19 72 123 11 160 245 54 248 36 30 119 19 54 181 22 154 241 72 27 37 96 254 66 64 174 172 156 176 148 223 193 167 17 251 10 97 143 244 2 109 26 120 145 48 233 247 240 20 239 211 49 252 155 224 27 220 221 48 86 125 29 158 65 140 111 181 8 164 194 247 17 107 35 172 253 121 248 33 98 95 34 108 75 6 28 193 135 184 103 9 155 190 25 122 81 86 228 5 176 113 45 252 6 49 206 181 254 110 56 9 48 103 26 97 13 121 84 25 115 112 123 4 128 156 203 178 17 227 239 78 222 122 150 131 24 159 113 44 218 203 112 1 195 92 174 241 237 61 236 255 17 171 38 172 57 159 225 172 224 92 222 61 20 239 101 110 0 145 111 83 169 191 141 53 32 134 149 134 230 254 34 195 135 112 145 63 213 202 95 96 56 75 51 223 65 88 229 11 236 17 128 143 240 247 233 252 125 236 113 92 77 193 107 203 93 199 80 199 5 249 188 232 14 208 86 141 133 60 199 237 49 194 4 190 119 33 211 131 187 126 100 111 84 196 186 85 125 225 208 44 183 212 236 243 138 46 41 50 248 116 140 79 63 241 139 250 75 122 118 226 130 193 33 131 143 23 244 101 156 66 3 40 212 47 125 66 14 165 39 134 81 248 53 35 99 166 49 82 21 79 25 199 235 37 37 228 11 53 171 214 146 38 95 52 172 36 149 134 67 209 140 184 82 37 109 81 69 82 51 93 173 106 52 28 20 87 201 237 15 133 149 38 213 86 232 245 202 168 151 71 138 182 168 214 90 73 105 150 163 182 162 86 95 160 201 72 152 182 218 133 43 70 228 104 107 100 10 205 170 26 194 100 17 86 236 83 81 106 57 216 136 18 164 39 6 89 121 158 184 182 250 8 70 92 40 3 238 211 201 85 234 198 100 83 248 187 152 65 140 176 51 196 18 59 43 82 8 194 129 32 158 207 32 104 211 71 163 81 191 144 28 176 225 84 86 31 215 255 1 0 65 109 177 88 4 208 212 91 0 174 148 122 119 43 86 175 94 69 189 85 202 89 129 206 76 18 155 13 39 227 253 135 63 174 102 224 166 3 45 206 156 146 228 188 37 220 174 127 244 27 51 45 11 253 119 51 245 143 222 209 101 91 239 88 252 31 243 254 179 223 254 236 237 179 238 142 125 8 253 217 153 144 189 93 185 114 213 7 149 94 142 101 252 193 188 177 153 188 92 247 189 14 39 111 52 15 121 207 231 52 253 131 211 157 221 36 228 85 113 103 235 43 118 90 60 139 75 197 117 144 69 192 185 16 122 35 172 1 93 1 48 118 249 246 88 111 220 232 137 135 187 195 201 240 22 51 113 76 113 219 95 55 166 102 230 185 4 92 79 255 109 143 140 186 166 90 163 178 184 161 161 178 184 54 188 233 175 13 156 205 255 180 71 182 221 163 161 55 154 12 119 155 255 185 12 110 245 103 61 244 154 104 210 140 119 132 218 204 255 178 142 68 238 63 245 240 214 133 146 93 255 92 129 137 254 103 18 157 34 42 124 246 216 255 186 131 91 143 251 129 79 75 37 146 189 155 108 2 186 79 237 116 118 201 127 189 164 91 127 255 153 102 45 85 215 80 187 210 38 224 178 187 214 158 243 95 239 230 214 223 95 121 211 96 234 59 111 194 157 222 208 47 182 123 98 67 170 125 189 145 145 255 242 207 32 169 230 234 117 195 255 40 208 212 127 25 244 134 38 179 83 253 77 109 161 135 96 123 232 213 121 167 53 254 90 241 66 251 111 85 95 155 72 58 215 87 124 157 250 219 74 159 80 158 204 134 149 145 132 237 17 0 0)! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 4/9/1999 18:17'!macDirectoryFile	^ '#include <Files.h>#include <Strings.h>#include "sq.h"/***	The interface to the directory primitive is path based.	That is, the client supplies a Squeak string describing	the path to the directory on every call. To avoid traversing	this path on every call, a cache is maintained of the last	path seen, along with the Mac volume and folder reference	numbers corresponding to that path.***//*** Constants ***/#define ENTRY_FOUND     0#define NO_MORE_ENTRIES 1#define BAD_PATH        2#define DELIMITOR '':''#define MAX_PATH 2000/*** Variables ***/char lastPath[MAX_PATH + 1];int  lastPathValid = false;int  lastRefNum = 0;int  lastVolNum = 0;/*** Functions ***/int convertToSqueakTime(int macTime);int equalsLastPath(char *pathString, int pathStringLength);int lookupDirectory(int volRefNum, int folderRefNum, char *name, int *refNumPtr);int lookupPath(char *pathString, int pathStringLength, int *refNumPtr, int *volNumPtr);int lookupVolume(char *volName, int *refNumPtr);int prefixPathWith(char *pathName, int pathNameSize, int pathNameMax, char *prefix);int recordPath(char *pathString, int pathStringLength, int refNum, int volNum);int convertToSqueakTime(int macTime) {	/* Squeak epoch is Jan 1, 1901, 3 non-leap years earlier than Mac one */	return macTime + (3 * 365 * 24 * 60 * 60);}int dir_Create(char *pathString, int pathStringLength) {	/* Create a new directory with the given path. By default, this	   directory is created in the current directory. Use	   a full path name such as "MyDisk:Working:New Folder" to	   create folders elsewhere. */	Str255 name;	HParamBlockRec pb;	int i;	for (i = 0; i < pathStringLength; i++) {		name[i] = pathString[i];	}	name[i] = 0; /* string terminator */	c2pstr((char *) name);	pb.fileParam.ioNamePtr = name;	pb.fileParam.ioVRefNum = 0;	pb.fileParam.ioDirID = 0;	return PBDirCreateSync(&pb) == noErr;}int dir_Delete(char *pathString, int pathStringLength) {	/* Delete the existing directory with the given path. */	int okay, refNum, volNum, i;	HParamBlockRec pb;	Str255 name;	for (i = 0; i < pathStringLength; i++) {		name[i] = pathString[i];	}	name[i] = 0; /* string terminator */	okay = lookupPath(pathString, pathStringLength, &refNum, &volNum);	if (!!okay) {		return false;	}	c2pstr((char *) name);	pb.fileParam.ioNamePtr = name;	pb.fileParam.ioVRefNum = volNum;	pb.fileParam.ioDirID = refNum;	return PBHDeleteSync(&pb) == noErr;}int dir_Delimitor(void) {	return DELIMITOR;}int dir_Lookup(char *pathString, int pathStringLength, int index,  /* outputs: */  char *name, int *nameLength, int *creationDate, int *modificationDate,  int *isDirectory, int *sizeIfFile) {	/* Lookup the index-th entry of the directory with the given path, starting	   at the root of the file system. Set the name, name length, creation date,	   creation time, directory flag, and file size (if the entry is a file).	   Return:	0 	if a entry is found at the given index	   			1	if the directory has fewer than index entries	   			2	if the given path has bad syntax or does not reach a directory	*/	int okay, newRefNum, newVolNum;	HVolumeParam volumeParams;	CInfoPBRec dirParams;	/* default return values */	*name             = 0;	*nameLength       = 0;	*creationDate     = 0;	*modificationDate = 0;	*isDirectory      = false;	*sizeIfFile       = 0;	if ((pathStringLength == 0)) {		/* get volume info */		volumeParams.ioNamePtr = (unsigned char *) name;		volumeParams.ioVRefNum = 0;		volumeParams.ioVolIndex = index;		okay = PBHGetVInfoSync((HParmBlkPtr) &volumeParams) == noErr;		if (okay) {			p2cstr((unsigned char *) name);			*nameLength       = strlen(name);			*creationDate     = convertToSqueakTime(volumeParams.ioVCrDate);			*modificationDate = convertToSqueakTime(volumeParams.ioVLsMod);			*isDirectory      = true;			*sizeIfFile       = 0;			return ENTRY_FOUND;		} else {			return NO_MORE_ENTRIES;		}	} else {		/* get file or directory info */		if (!!equalsLastPath(pathString, pathStringLength)) {			/* lookup and cache the refNum for this path */			okay = lookupPath(pathString, pathStringLength, &newRefNum, &newVolNum);			if (okay) {				recordPath(pathString, pathStringLength, newRefNum, newVolNum);			} else {				return BAD_PATH;			}		}		dirParams.hFileInfo.ioNamePtr = (unsigned char *) name;		dirParams.hFileInfo.ioFVersNum = 0;		dirParams.hFileInfo.ioFDirIndex = index;		if (lastRefNum < 0) {			dirParams.hFileInfo.ioVRefNum = lastRefNum;			dirParams.hFileInfo.ioDirID = 0;		} else {			dirParams.hFileInfo.ioVRefNum = lastVolNum;			dirParams.hFileInfo.ioDirID = lastRefNum;		}		okay = PBGetCatInfoSync(&dirParams) == noErr;		if (okay) {			p2cstr((unsigned char *) name);			*nameLength       = strlen(name);			*creationDate     = convertToSqueakTime(dirParams.hFileInfo.ioFlCrDat);			*modificationDate = convertToSqueakTime(dirParams.hFileInfo.ioFlMdDat);			if ((dirParams.hFileInfo.ioFlAttrib & 16) !!= 0) {				*isDirectory  = true;				*sizeIfFile   = 0;			} else {				*isDirectory  = false;				*sizeIfFile   = dirParams.hFileInfo.ioFlLgLen;			}			return ENTRY_FOUND;		} else {			return NO_MORE_ENTRIES;		}	}}int dir_PathToWorkingDir(char *pathName, int pathNameMax) {	/* Fill in the given string with the full path from a root volume to	   to current working directory. (At startup time, the working directory	   is set to the application''s directory. Fails if the given string is not	   long enough to hold the entire path. (Use at least 1000 characters to	   be safe.)	*/	char thisName[256];	CInfoPBRec pb;	int nextDirRefNum, pathLen;	/* initialize string copying state */	pathName[0] = 0;	pathLen = 0;	/* get refNum of working directory */	strcpy(thisName, ":");	pb.hFileInfo.ioNamePtr = c2pstr(thisName);	pb.hFileInfo.ioVRefNum = 0;	pb.hFileInfo.ioFDirIndex = 0;	pb.hFileInfo.ioDirID = 0;	if (PBGetCatInfoSync(&pb) !!= noErr) {		nextDirRefNum = 0;	}	nextDirRefNum = pb.hFileInfo.ioDirID;	while (true) {		thisName[0] = 0;		pb.hFileInfo.ioFDirIndex = -1; /* map ioDirID -> name */		pb.hFileInfo.ioVRefNum = 0;		pb.hFileInfo.ioDirID = nextDirRefNum;		if (PBGetCatInfoSync(&pb) !!= noErr) {			break;  /* we''ve reached the root */		}		p2cstr((unsigned char *) thisName);		pathLen = prefixPathWith(pathName, pathLen, pathNameMax, thisName);		nextDirRefNum = pb.dirInfo.ioDrParID;	}	return pathLen;}dir_SetMacFileTypeAndCreator(char *filename, int filenameSize, char *fType, char *fCreator) {	/* Set the Macintosh type and creator of the given file. */	/* Note: On other platforms, this is just a noop. */	Str255 name;	FInfo finderInfo;	int i;	/* copy file name into a Pascal string */	if (filenameSize > 255) return false;	name[0] = filenameSize;	for (i = 1; i <= filenameSize; i++) {		name[i] = filename[i - 1];	}	if (GetFInfo(name, 0, &finderInfo) !!= noErr) return false;	finderInfo.fdType = *((int *) fType);	finderInfo.fdCreator = *((int *) fCreator);	if (SetFInfo(name, 0, &finderInfo) !!= noErr) return false;	return true;}int equalsLastPath(char *pathString, int pathStringLength) {	/* Return true if the lastPath cache is valid and the	   given Squeak string equals it. */	int i, ch;	if (!!lastPathValid ||		(pathStringLength > MAX_PATH)) {			return false;	}	for (i = 0; i < pathStringLength; i++) {		ch = lastPath[i];		if ((ch == 0) || (ch !!= pathString[i])) return false;	}	return lastPath[i] == 0;}int lookupDirectory(int volRefNum, int folderRefNum, char *name, int *refNumPtr) {	/* Look up the next directory in a path starting from the folder and volume	   with the given reference numbers and setting *refNumPtr to the reference	   number of the resulting folder. Return true if this succeeds. */	CInfoPBRec pb;	c2pstr((char *) name);	pb.hFileInfo.ioNamePtr = (unsigned char *) name;	pb.hFileInfo.ioFVersNum = 0;	pb.hFileInfo.ioFDirIndex = 0;	pb.hFileInfo.ioVRefNum = volRefNum;	pb.hFileInfo.ioDirID = folderRefNum;	if (PBGetCatInfoSync(&pb) == noErr) {		p2cstr((unsigned char *) name);		*refNumPtr = pb.hFileInfo.ioDirID;		return true;	}	p2cstr((unsigned char *) name);	return false;}int lookupPath(char *pathString, int pathStringLength, int *refNumPtr, int *volNumPtr) {	/* Resolve the given path and return the resulting folder or volume	   reference number in *refNumPtr. Return false if the path is bad. */	char chunk[100];	int stIndex, chunkIndex, ch;	int okay, thisVolNum = 0, thisRefNum = 0;	int firstChunk = true, hasLeadingDelimitors = false;	stIndex = 0;	while (stIndex < pathStringLength) {		chunkIndex = 0;		while ((stIndex < pathStringLength) && (pathString[stIndex] == DELIMITOR)) {			/* copy any leading delimitors */			chunk[chunkIndex++] = pathString[stIndex++];			hasLeadingDelimitors = true;		}		while ((stIndex < pathStringLength) && (pathString[stIndex] !!= DELIMITOR)) {			/* copy up to the next delimitor */			ch = chunk[chunkIndex++] = pathString[stIndex++];		}		if (firstChunk && (chunk[chunkIndex] !!= DELIMITOR)) {			/* Add a trailing delimiter to the first chunk of the			   path to indicate that it is a volume name. If the			   path starts with an initial delimitor, it will be			   interpreted as a path relative to the current working			   directory even with a trailing delimitor, which is			   exactly the behavior we want. */			chunk[chunkIndex++] = DELIMITOR;			if ((stIndex < pathStringLength) && (pathString[stIndex] == DELIMITOR)) {				stIndex++;			}			firstChunk = false;		}		chunk[chunkIndex] = 0;  /* terminate this chunk */		if ((thisVolNum == 0) && !!hasLeadingDelimitors) {			okay = lookupVolume(chunk, &thisVolNum);			thisRefNum = 0;		} else {			okay = lookupDirectory(thisVolNum, thisRefNum, chunk, &thisRefNum);		}		if (!!okay) {			*refNumPtr = 0;			*volNumPtr = 0;			return false;		}	}	*refNumPtr = thisRefNum;	*volNumPtr = thisVolNum;	return true;}int lookupVolume(char *volName, int *refNumPtr) {	/* Look up the volume with the given name and set *refNumPtr	   to the reference number of the resulting volume.	   Return true if this succeeds. */	int okay;	HVolumeParam volumeParams;	volumeParams.ioNamePtr = c2pstr(volName);	volumeParams.ioVRefNum = 0;	volumeParams.ioVolIndex = -1;	okay = PBHGetVInfoSync((HParmBlkPtr) &volumeParams) == noErr;	p2cstr((unsigned char *) volName);	if (okay) {		*refNumPtr = volumeParams.ioVRefNum;		return true;	}	return false;}int prefixPathWith(char *pathName, int pathNameSize, int pathNameMax, char *prefix) {	/* Insert the given prefix C string plus a delimitor character at the	   beginning of the given C string. Return the new pathName size. Fails	   if pathName is does not have sufficient space for the result.	   Assume: pathName is null terminated.	*/	int offset, i;	offset = strlen(prefix) + 1;	if ((pathNameSize + offset) > pathNameMax) {		error("path name to working directory is too long for available space");	}	for (i = pathNameSize; i >= 0; i--) {		/* make room in pathName for prefix (moving string terminator, too) */		pathName[i + offset] = pathName[i];	}	for (i = 0; i < offset; i++) {		/* make room in pathName for prefix */		pathName[i] = prefix[i];	}	pathName[offset - 1] = DELIMITOR;  /* insert delimitor */	return pathNameSize + offset;}int recordPath(char *pathString, int pathStringLength, int refNum, int volNum) {	/* Copy the given Squeak string into the lastPath cache. */	int i;	if (pathStringLength > MAX_PATH) {		lastPath[0] = 0; /* set to empty string */		lastPathValid = false;		lastRefNum = 0;		lastVolNum = 0;		return;	}	for (i = 0; i < pathStringLength; i++) {		lastPath[i] = pathString[i];	}	lastPath[i] = 0; /* string terminator */	lastPathValid = true;	lastRefNum = refNum;	lastVolNum = volNum;}'.! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 4/10/1999 23:11'!macJoystickAndTabletFile	^ '#include <DeskBus.h>#include <Devices.h>#include <Timer.h>#include "sq.h"/* Joystick Record */#define MOUSESTICK_SIGNATURE 0x4A656666#define MAX_STICKS 4typedef struct {	short			rawX;				/* absolute stick position */	short			rawY;	unsigned char	buttons;	char			private1;	short			cursorX;			/* cursor position */	short			cursorY;	char			oldStickType;	char			private2;	char			stickOn;			/* true if stick is connected */	char			private3;	char			stickControlsCursor;	char			applicationAware;	/* settings change with application changes */	char			private4[152];} MouseStickRec;typedef struct {	long			signature;	char			private1[18];	short			stickCount;	char			private2[22];	MouseStickRec	stick[MAX_STICKS];} MouseStickSetRec, *MouseStickSetPtr;/* Tablet Record (see  Apple Tech. Note 266, version 2) */#define MAX_TRANSDUCERS 4typedef struct {    char	DOFTrans;			/* degrees of freedom and transducer type */    char	orientFlag;			/* type of orientation information */    short	pressLevels;		/* pressure support and number of levels */    unsigned short xScale;		/* x scale factor for screen mapping */    short	xTrans;				/* x translation factor for screen */    unsigned short yScale;		/* y scale factor for screen mapping */    short	yTrans;				/* y translation factor for screen */    unsigned char flags;		/* proximity, update flag, and # buttons */    unsigned char pressThresh;	/* pressure threshold - normally unused */    short	buttonMask;			/* button mask of driver-reserved buttons */    short	errorFlag;			/* error code generated */    short	buttons;			/* buttons pressed */    short	tangPress;			/* tangential pressure level */    short	pressure;			/* normal pressure level */    long	timeStamp;			/* ticks at latest update */    long	xCoord;				/* x coordinate in resolution units */    long	yCoord;				/* y coordinate in resolution units */    long	zCoord;				/* z coordinate in resolution units */    short	xTilt;				/* x tilt */    short	yTilt;				/* y tilt */    short	unused[8];			/* remainder of unused attitude matrix */} TransducerRec, *TransducerRecPtr;typedef struct {    char	version;			/* version of this data format */    char	semaphore;			/* for future use -- tells if drvr is enabled */    char	cursors;			/* number of cursors with tablet */    char	updateFlags;		/* flags used when updating structure */    short	angleRes;			/* metric bit & angular resolution */    short	spaceRes;			/* spatial resolution of the tablet */    long	xDimension;			/* x dimension in resolution units */    long	yDimension;			/* y dimension in resolution units */    long	zDimension;			/* z dimension in resolution units */    long	xDisplace;			/* x displacement - minimum x value */    long	yDisplace;			/* y displacement - minimum y value */    long	zDisplace;			/* z displacement - minimum z value */    long	reserved;			/* reserved */    long	tabletID;			/* contains ''TBLT'' identifying the device */	TransducerRec transducer[MAX_TRANSDUCERS];} TabletRec, *TabletRecPtr;/*** Variables ***/MouseStickSetPtr joySticks = nil;	/* pointer to a joystick set or nil */TabletRecPtr tablet = nil;  		/* pointer to a tablet record or nil */int joystickInit(void) {	/* If a joystick is plugged in and its control panel is installed,	   initialize the global pointer ''joySticks'' to the joystick set	   data structure. Otherwise, set it to nil.	*/	ADBDataBlock adbGetInfo;	MouseStickSetPtr sticks;	int count, i;	joySticks = nil;  /* set to nil in case we don''t find any joysticks */	count = CountADBs();	for (i = 1; i <= count; i++) {		GetADBInfo(&adbGetInfo, GetIndADB(&adbGetInfo, i));		sticks = (MouseStickSetPtr) adbGetInfo.dbDataAreaAddr;		if ((sticks !!= nil) && (sticks->signature == MOUSESTICK_SIGNATURE)) {			joySticks = sticks;			return;		}	}}int joystickRead(int stickIndex) {	/* Return input word for the joystick with the given index (in range [1..2]	   on the Macintosh; other platforms may vary). This word is encoded as follows:		<onFlag (1 bit)><buttonFlags (5 bits)><x-value (11 bits)><y-value (11 bits)>	   The highest four bits of the input word are zero. If the onFlag bit is zero,	   there is no joystick at the given index. This may be because no joystick	   is connected or the joystick control panel is not installed. In such,	   cases, the entire word will be zero. A maximum of two joysticks are supported	   by Gravis''s current version of the control panel. The x and y values are	   11-bit signed values in the range [-1024..1023] representing the raw (unencoded)	   joystick position. The MouseStick II only uses the approximate range [-650..650].	   The range and center values of poorly adjusted joysticks may vary; the client	   software should provide a way to adjust the center and scaling to correct.	*/	MouseStickRec stickData;	int buttons, xBits, yBits;	if ((joySticks == nil) || (stickIndex < 1) || (stickIndex > 2) ||		(stickIndex > joySticks->stickCount)) {			return 0;  /* no joystick at the given index */	}	stickData = joySticks->stick[stickIndex - 1];  /* 1-based index */	buttons = ~stickData.buttons & 0x1F;	xBits = (0x400 + stickData.rawX) & 0x7FF;	yBits = (0x400 + stickData.rawY) & 0x7FF;	return (1 << 27) | (buttons << 22) | (yBits << 11) | xBits;}int tabletInit(void);int tabletInit(void) {	/* Open the tablet driver and initialize the global pointer to its status	   record. Return true if a tablet exists, false otherwise. */	CntrlParam	pb;	short		driverRefNum;	if (OpenDriver("\p.Wacom", &driverRefNum) !!= noErr) {		return false;	}	pb.ioCRefNum = driverRefNum;	pb.csCode = 20;  /* requests the address of the current tablet record */	if (PBStatusSync((ParmBlkPtr) (&pb)) !!= noErr) {		return false;	}	tablet = *((TabletRecPtr *) &pb.csParam);	return tablet->tabletID == 0x54424c54;  /* verify that id is ''TBLT'' */}int tabletGetParameters(int cursorIndex, int result[]) {	/* Fill in the integer array ''result'' with tablet parameter information.	   For cursor-specific parameters, such as the number of pressure levels,	   return the information for the cursor with the given index, an integer	   between 1 and tablet->cursors. */	TransducerRecPtr cursorPtr;	int cursor;	/* open tablet if necessary; return false if no tablet */	if (tablet == nil) {		if (!!tabletInit()) return false;	}	cursor = cursorIndex - 1;	if ((cursor < 0)  || (cursor >= tablet->cursors)) {		return false;	}	cursorPtr = &tablet->transducer[cursor];	result[0] = tablet->xDimension;	result[1] = tablet->yDimension;	result[2] = tablet->spaceRes;	result[3] = tablet->cursors;  /* number of cursors */	result[4] = cursor + 1;	result[5] = cursorPtr->xScale;	result[6] = cursorPtr->xTrans;	result[7] = cursorPtr->yScale;	result[8] = cursorPtr->yTrans;	result[9] = cursorPtr->pressLevels;	result[10] = cursorPtr->pressThresh;	if (tablet->angleRes == 0) {		result[11] = 0;  /* no pen tilt support */	} else {		result[11] = tablet->angleRes >> 1;  /* number of pen tilt levels */	}	return true;}int tabletRead(int cursorIndex, int result[]) {	/* Fill in the integer array ''result'' with the current data	   the cursor with the given index, an integer between 1 and	   tablet->cursors. Note that the timestamp changes only	   when some new data has arrived from the tablet. */	TransducerRecPtr cursorPtr;	int cursor;	/* open tablet if necessary; return false if no tablet */	if (tablet == nil) {		if (!!tabletInit()) return false;	}	cursor = cursorIndex - 1;	if ((cursor < 0)  || (cursor >= tablet->cursors)) {		return false;	}	cursorPtr = &tablet->transducer[cursor];	result[0] = cursor + 1;	result[1] = cursorPtr->timeStamp;	result[2] = cursorPtr->xCoord;	result[3] = cursorPtr->yCoord;	result[4] = cursorPtr->zCoord;	result[5] = cursorPtr->xTilt;	result[6] = cursorPtr->yTilt;	result[7] = (cursorPtr->DOFTrans & 0x30) >> 4;  /* cursor type; 1-pen, 2-puck, 3-eraser */	result[8] = cursorPtr->buttons;	result[9] = cursorPtr->pressure;	result[10] = cursorPtr->tangPress;	result[11] = cursorPtr->flags;	return true;}int tabletResultSize(void) {	/* Return the size of the integer array required to hold the results of	   either a tabletGetParameters() or tabletRead() call. The VM allocates	   an array of this length and passes it as a parameter to be filled in. */	return 12;}'! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 4/10/1999 23:10'!squeakHeaderFile	^ '#include <math.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <time.h>#include "sqConfig.h"#include "sqVirtualMachine.h"#define true 1#define false 0#define null 0  /* using ''null'' because nil is predefined in Think C *//* pluggable primitives macros *//* Note: All pluggable primitives are defined as	EXPORT(int) somePrimitive(void)   If the platform requires special declaration modifiers   the EXPORT macro can be redefined*/#define EXPORT(returnType) returnType/* image save/restore macros *//* Note: The image file save and restore code uses these macros; they   can be redefined in sqPlatformSpecific.h if desired. These default   versions are defined in terms of the ANSI Standard C libraries.*/#define sqImageFile FILE *#define sqImageFileClose(f)                  fclose(f)#define sqImageFileOpen(fileName, mode)      fopen(fileName, mode)#define sqImageFilePosition(f)               ftell(f)#define sqImageFileRead(ptr, sz, count, f)   fread(ptr, sz, count, f)#define sqImageFileSeek(f, pos)              fseek(f, pos, SEEK_SET)#define sqImageFileWrite(ptr, sz, count, f)  fwrite(ptr, sz, count, f)#define sqAllocateMemory(minHeapSize, desiredHeapSize)   malloc(desiredHeapSize)/* platform-dependent float conversion macros *//* Note: Second argument must be a variable name, not an expression!! *//* Note: Floats in image are always in PowerPC word order; change   these macros to swap words if necessary. This costs no extra and   obviates sometimes having to word-swap floats when reading an image.*/#if defined(DOUBLE_WORD_ALIGNMENT) || defined(DOUBLE_WORD_ORDER)# ifdef DOUBLE_WORD_ORDER/* word-based copy with swapping for non-PowerPC order */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 1); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 0);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 1); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 0);# else /*!!DOUBLE_WORD_ORDER*//* word-based copy for machines with alignment restrictions */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 0); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 1);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 0); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 1);# endif /*!!DOUBLE_WORD_ORDER*/#else /*!!(DOUBLE_WORD_ORDER||DOUBLE_WORD_ALIGNMENT)*//* for machines that allow doubles to be on any word boundary */# define storeFloatAtfrom(i, floatVarName) \	*((double *) (i)) = (floatVarName);# define fetchFloatAtinto(i, floatVarName) \	(floatVarName) = *((double *) (i));#endif/* this include file may redefine earlier definitions and macros: */#include "sqPlatformSpecific.h"/* squeak file record; see sqFilePrims.c for details */typedef struct {	FILE	*file;	int		sessionID;	int		writable;	int		fileSize;	int		lastOp;  /* 0 = uncommitted, 1 = read, 2 = write */} SQFile;/* file i/o */int sqFileAtEnd(SQFile *f);int sqFileClose(SQFile *f);int sqFileDeleteNameSize(int sqFileNameIndex, int sqFileNameSize);int sqFileGetPosition(SQFile *f);int sqFileInit(void);int sqFileOpen(SQFile *f, int sqFileNameIndex, int sqFileNameSize, int writeFlag);int sqFileReadIntoAt(SQFile *f, int count, int byteArrayIndex, int startIndex);int sqFileRenameOldSizeNewSize(int oldNameIndex, int oldNameSize, int newNameIndex, int newNameSize);int sqFileSetPosition(SQFile *f, int position);int sqFileSize(SQFile *f);int sqFileValid(SQFile *f);int sqFileWriteFromAt(SQFile *f, int count, int byteArrayIndex, int startIndex);/* directories */int dir_Create(char *pathString, int pathStringLength);int dir_Delete(char *pathString, int pathStringLength);int dir_Delimitor(void);int dir_Lookup(char *pathString, int pathStringLength, int index,	/* outputs: */	char *name, int *nameLength, int *creationDate, int *modificationDate,	int *isDirectory, int *sizeIfFile);int dir_PathToWorkingDir(char *pathName, int pathNameMax);int dir_SetMacFileTypeAndCreator(char *filename, int filenameSize, char *fType, char *fCreator);/* interpreter entry points */void error(char *s);int checkedByteAt(int byteAddress);int checkedByteAtput(int byteAddress, int byte);int checkedLongAt(int byteAddress);int checkedLongAtput(int byteAddress, int a32BitInteger);int fullDisplayUpdate(void);int initializeInterpreter(int bytesToShift);int interpret(void);int primitiveFail(void);int signalSemaphoreWithIndex(int index);int success(int);/* display, mouse, keyboard, time i/o */int ioBeep(void);int ioExit(void);int ioForceDisplayUpdate(void);int ioFormPrint(	int bitsAddr, int width, int height, int depth,	double hScale, double vScale, int landscapeFlag);int ioSetFullScreen(int fullScreen);int ioGetButtonState(void);int ioGetKeystroke(void);int ioMicroMSecs(void);int ioMSecs(void);int ioMousePoint(void);int ioPeekKeystroke(void);int ioProcessEvents(void);int ioRelinquishProcessorForMicroseconds(int microSeconds);int ioScreenSize(void);int ioSeconds(void);int ioSetCursor(int cursorBitsIndex, int offsetX, int offsetY);int ioSetCursorWithMask(int cursorBitsIndex, int cursorMaskIndex, int offsetX, int offsetY);int ioShowDisplay(	int dispBitsIndex, int width, int height, int depth,	int affectedL, int affectedR, int affectedT, int affectedB);/* cheap clock with coarse resolution (about 17 msecs on Mac) */# define ioLowResMSecs() ((1000 * clock()) / CLOCKS_PER_SEC)/* optional millisecond clock macro */#ifdef USE_CLOCK_MSECS# define ioMSecs() ((1000 * clock()) / CLOCKS_PER_SEC)#endif/* image file and VM path names */extern char imageName[];int imageNameGetLength(int sqImageNameIndex, int length);int imageNamePutLength(int sqImageNameIndex, int length);int imageNameSize(void);int vmPathSize(void);int vmPathGetLength(int sqVMPathIndex, int length);/* save/restore */int readImageFromFileHeapSize(sqImageFile f, int desiredHeapSize);/* clipboard (cut/copy/paste) */int clipboardSize(void);int clipboardReadIntoAt(int count, int byteArrayIndex, int startIndex);int clipboardWriteFromAt(int count, int byteArrayIndex, int startIndex);/* sound output */int snd_AvailableSpace(void);int snd_InsertSamplesFromLeadTime(int frameCount, int srcBufPtr, int samplesOfLeadTime);int snd_PlaySamplesFromAtLength(int frameCount, int arrayIndex, int startIndex);int snd_PlaySilence(void);int snd_Start(int frameCount, int samplesPerSec, int stereo, int semaIndex);int snd_Stop(void);/* sound input */int snd_SetRecordLevel(int level);int snd_StartRecording(int desiredSamplesPerSec, int stereo, int semaIndex);int snd_StopRecording(void);double snd_GetRecordingSampleRate(void);int snd_RecordSamplesIntoAtLength(int buf, int startSliceIndex, int bufferSizeInBytes);/* joystick support */int joystickInit(void);int joystickRead(int stickIndex);/* netscape plug-in support */int plugInInit(char *imageName);int plugInShutdown(void);int plugInInterpretCycles(int cycleCount);/* interpreter entry points needed by compiled primitives */void * arrayValueOf(int arrayOop);int checkedIntegerValueOf(int intOop);void * fetchArrayofObject(int fieldIndex, int objectPointer);double fetchFloatofObject(int fieldIndex, int objectPointer);int fetchIntegerofObject(int fieldIndex, int objectPointer);double floatValueOf(int floatOop);int pop(int nItems);int pushInteger(int integerValue);int sizeOfSTArrayFromCPrimitive(void *cPtr);int storeIntegerofObjectwithValue(int fieldIndex, int objectPointer, int integerValue);/* sound generation primitives (old, for backward compatibility) */int primWaveTableSoundmixSampleCountintostartingAtpan(void);int primFMSoundmixSampleCountintostartingAtpan(void);int primPluckedSoundmixSampleCountintostartingAtpan(void);int primSampledSoundmixSampleCountintostartingAtpan(void);/* sound generation primitives */int primFMSoundmixSampleCountintostartingAtleftVolrightVol(void);int primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);int primPluckedSoundmixSampleCountintostartingAtleftVolrightVol(void);int primReverbSoundapplyReverbTostartingAtcount(void);int primSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);/* squeak socket record; see sqMacNetwork.c for details */typedef struct {	int		sessionID;	int		socketType;  /* 0 = TCP, 1 = UDP */	void	*privateSocketPtr;}  SQSocket, *SocketPtr;/* networking primitives */int		sqNetworkInit(int resolverSemaIndex);void	sqNetworkShutdown(void);void	sqResolverAbort(void);void	sqResolverAddrLookupResult(char *nameForAddress, int nameSize);int		sqResolverAddrLookupResultSize(void);int		sqResolverError(void);int		sqResolverLocalAddress(void);int		sqResolverNameLookupResult(void);void	sqResolverStartAddrLookup(int address);void	sqResolverStartNameLookup(char *hostName, int nameSize);int		sqResolverStatus(void);void	sqSocketAbortConnection(SocketPtr s);void	sqSocketCloseConnection(SocketPtr s);int		sqSocketConnectionStatus(SocketPtr s);void	sqSocketConnectToPort(SocketPtr s, int addr, int port);void	sqSocketCreateNetTypeSocketTypeRecvBytesSendBytesSemaID(			SocketPtr s, int netType, int socketType,			int recvBufSize, int sendBufSize, int semaIndex);void	sqSocketDestroy(SocketPtr s);int		sqSocketError(SocketPtr s);void	sqSocketListenOnPort(SocketPtr s, int port);int		sqSocketLocalAddress(SocketPtr s);int		sqSocketLocalPort(SocketPtr s);int		sqSocketReceiveDataAvailable(SocketPtr s);int		sqSocketReceiveDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketRemoteAddress(SocketPtr s);int		sqSocketRemotePort(SocketPtr s);int		sqSocketSendDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketSendDone(SocketPtr s);/* profiling */int clearProfile(void);int dumpProfile(void);int startProfiling(void);int stopProfiling(void);/* system attributes */int attributeSize(int id);int getAttributeIntoLength(int id, int byteArrayIndex, int length);/* miscellaneous primitives */int primBitmapcompresstoByteArray(void);int primBitmapdecompressfromByteArrayat(void);int primSampledSoundconvert8bitSignedFromto16Bit(void);int primStringcomparewithcollated(void);int primStringfindFirstInStringinSetstartingAt(void);int primStringfindSubstringinstartingAtmatchTable(void);int primStringindexOfAsciiinStringstartingAt(void);int primStringtranslatefromtotable(void);/* serial port primitives */int serialPortClose(int portNum);int serialPortOpen(  int portNum, int baudRate, int stopBitsType, int parityType, int dataBits,  int inFlowCtrl, int outFlowCtrl, int xOnChar, int xOffChar);int serialPortReadInto(int portNum, int count, int bufferPtr);int serialPortWriteFrom(int portNum, int count, int bufferPtr);/* MIDI primitives */int sqMIDIGetClock(void);int sqMIDIGetPortCount(void);int sqMIDIGetPortDirectionality(int portNum);int sqMIDIGetPortName(int portNum, int namePtr, int length);int sqMIDIClosePort(int portNum);int sqMIDIOpenPort(int portNum, int readSemaIndex, int interfaceClockRate);int sqMIDIParameter(int whichParameter, int modify, int newValue);int sqMIDIPortReadInto(int portNum, int count, int bufferPtr);int sqMIDIPortWriteFromAt(int portNum, int count, int bufferPtr, int time);/*** Experimental Asynchronous File I/O ***/typedef struct {	int			sessionID;	void		*state;} AsyncFile;int asyncFileClose(AsyncFile *f);int asyncFileOpen(AsyncFile *f, int fileNamePtr, int fileNameSize, int writeFlag, int semaIndex);int asyncFileRecordSize();int asyncFileReadResult(AsyncFile *f, int bufferPtr, int bufferSize);int asyncFileReadStart(AsyncFile *f, int fPosition, int count);int asyncFileWriteResult(AsyncFile *f);int asyncFileWriteStart(AsyncFile *f, int fPosition, int bufferPtr, int bufferSize);/*** pluggable primitive support ***/int ioLoadExternalFunctionOfLengthFromModuleOfLength(  int functionNameIndex, int functionNameLength,  int moduleNameIndex, int moduleNameLength);/*** sound compression primitives ***/int primADPCMCodecprivateDecodeMono(void);int primADPCMCodecprivateDecodeStereo(void);int primADPCMCodecprivateEncodeMono(void);int primADPCMCodecprivateEncodeStereo(void);/*** tablet support ***/int tabletGetParameters(int cursorIndex, int result[]);int tabletRead(int cursorIndex, int result[]);int tabletResultSize(void);'.! !InterpreterSupportCode class removeSelector: #macJoystickFile!