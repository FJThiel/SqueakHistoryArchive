'From Squeak 2.0 BETA of May 8, 1998 on 17 May 1998 at 3:20:36 pm'!!FileList methodsFor: 'initialization' stamp: 'di 5/17/1998 13:30'!directory: dir	"Set the path of the volume to be displayed."	sortMode == nil ifTrue: [sortMode _ #date].	self okToChange ifFalse: [^ self].	directory _ dir.	volList _ ((Array with: '[]'), directory pathParts)  "Nesting suggestion from RvL"			withIndexCollect: [:each :i | ( String new: i-1 withAll: $ ), each].	self changed: #relabel.	self changed: #volumeList.	self pattern: pattern.! !!FileList methodsFor: 'pattern and list panes' stamp: 'di 5/17/1998 14:01'!fileListIndex: anInteger	"Select the file name having the given index, and display its contents."	| item name |	self okToChange ifFalse: [^ self].	listIndex _ anInteger.	listIndex = 0 		ifTrue: [fileName _ nil]		ifFalse:			[item _ self fileNameFromFormattedItem: (list at: anInteger).			(item endsWith: self folderString)				ifTrue:					["remove [...] folder string and open the folder"					name _ item copyFrom: 1 to: item size - self folderString size.					listIndex _ 0.					self changed: #closeScrollBar.  "will write in pane to left (MVC)"					self directory: (FileDirectory on: (directory fullNameFor: name)).					brevityState _ #FileList.					^ self changed: #contents]				ifFalse: [fileName _ item]].  "open the file selected"	brevityState _ #needToGetBrief.	self changed: #fileListIndex.	self changed: #contents.! !!FileList methodsFor: 'pattern and list panes' stamp: 'di 5/17/1998 13:01'!volumeListIndex: index	"Select the volume name having the given index."	| delim path |	volListIndex _ index.	delim _ directory pathNameDelimiter.	path _ String streamContents: [:strm |		2 to: index do: [:i |			strm nextPutAll: (volList at: i) withBlanksTrimmed.			i < index ifTrue: [strm nextPut: delim]]].	self directory: (FileDirectory on: path).	brevityState _ #FileList.	self changed: #fileList.	self changed: #contents.! !!PluggableListView methodsFor: 'updating' stamp: 'di 5/17/1998 13:58'!update: aSymbol 	"Refer to the comment in View|update:."	aSymbol == getListSelector ifTrue:		[self list: self getList.		self displayView.		self displaySelectionBox.		^self].	aSymbol == getSelectionSelector ifTrue:		[^ self moveSelectionBox: self getCurrentSelectionIndex].	aSymbol == #closeScrollBar ifTrue:		[^ controller controlTerminate].! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'di 5/17/1998 13:34'!withIndexCollect: elementAndIndexBlock 	"Just like with:collect: except that the iteration index supplies the second argument to the block."	| result |	result _ self species new: self size.	1 to: self size do:		[:index | result at: index put:		(elementAndIndexBlock			value: (self at: index)			value: index)].	^ result! !!SystemWindow methodsFor: 'label' stamp: 'di 5/17/1998 14:05'!update: aSymbol	aSymbol = #relabel		ifTrue: [^ self setLabel: model labelString].! !!SystemWindow methodsFor: 'geometry' stamp: 'di 5/17/1998 15:15'!extent: newExtent	| inner panelRect labelRect paneColor |	isCollapsed		ifTrue: [super extent: newExtent x @ (self labelHeight + 2)]		ifFalse: [super extent: newExtent].	inner _ self innerBounds.	labelRect _ inner withHeight: self labelHeight.	panelRect _ self panelRect.	paneColor _ Color perform: model defaultBackgroundColor.	stripes first bounds: (labelRect insetBy: 1).	stripes second bounds: (labelRect insetBy: 3).	stripes second color: paneColor;			borderColor: stripes second color darker.	stripes first color: stripes second borderColor darker;			borderColor: stripes first color darker.	closeBox align: closeBox topLeft with: inner topLeft + (4@0).	collapseBox align: collapseBox topRight with: inner topRight - (4@0).	label fitContents; setWidth: (label width min: bounds width - 50).	label align: label bounds topCenter with: inner topCenter.	paneMorphs with: paneRects do:		[:m :frame |  m color: paneColor.		m bounds: (((frame scaleBy: panelRect extent) translateBy: panelRect topLeft)) truncated].	isCollapsed		ifTrue: [collapsedFrame _ self bounds]		ifFalse: [fullFrame _ self bounds].! !