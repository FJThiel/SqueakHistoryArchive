'From Squeak3.2alpha of 3 October 2001 [latest update: #4530] on 21 November 2001 at 4:25:23 pm'!"Change Set:		divers-swDate:			21 November 2001Author:			Scott WallaceMakes the optional buttons in a debugger be shown in abbreviated form if the preference governing that is set.Consolidates the #getterSelectorFor: and #setterSelectorFor: functionality into a single class, namely Utilities.Protects agains errors in a situation where there are no categories with methods to contribute to a viewerAdd to the master parts bin an EventRecorder."!!AssignmentTileMorph methodsFor: 'code generation' stamp: 'sw 11/16/2001 14:39'!storeCodeOn: aStream indent: tabCount	"Generate code for an assignment statement.  The code generated looks presentable in the case of simple assignment, though the code generated for the increment/decrement/multiply cases is still the same old assignGetter... sort for now"	assignmentSuffix = ':'		ifTrue:   "Simple assignment, don't need existing value"			[aStream nextPutAll: (Utilities setterSelectorFor: assignmentRoot).			aStream space]		ifFalse:  "Assignments that require that old values be retrieved"			[aStream nextPutAll: ' assign', (assignmentSuffix copyWithout: $:), 'Getter: #'.			aStream nextPutAll: (Utilities getterSelectorFor: assignmentRoot).			aStream nextPutAll: ' setter: #'.			aStream nextPutAll: (Utilities setterSelectorFor: assignmentRoot).			aStream nextPutAll: ' amt: ']! !!CategoryViewer methodsFor: 'categories' stamp: 'sw 11/16/2001 14:15'!chooseCategory	"The mouse went down on my category-list control; pop up a list of category choices"	| aList aMenu reply aLinePosition lineList |	aList _ scriptedPlayer categoriesForViewer: self.	aLinePosition _ aList indexOf: #miscellaneous ifAbsent: [nil].	aList _ aList collect:			[:aCatSymbol | self currentVocabulary categoryWordingAt: aCatSymbol].	lineList _ aLinePosition ifNil: [#()] ifNotNil: [Array with: aLinePosition].	aList size == 0 ifTrue: [aList add: #'instance variables'].	aMenu _ CustomMenu labels: aList lines: lineList selections: aList.	reply _ aMenu startUpWithCaption: 'category'.	reply ifNil: [^ self].	self chooseCategoryWhoseTranslatedWordingIs: reply asSymbol! !!CategoryViewer methodsFor: 'get/set slots' stamp: 'sw 11/16/2001 14:44'!newTilesFor: aPlayer setter: aSpec	| ms  argValue |	"Return universal tiles for a getter on this property.  Record who self is."	argValue _ aPlayer perform: (Utilities getterSelectorFor: aSpec second asSymbol).	ms _ MessageSend receiver: aPlayer selector: aSpec ninth arguments: (Array with: argValue).	^ ms asTilesIn: aPlayer class globalNames: (aPlayer class officialClass ~~ CardPlayer)			"For CardPlayers, use 'self'.  For others, name it, and use its name."! !!Debugger methodsFor: 'initialize' stamp: 'sw 11/19/2001 11:54'!optionalButtonRow	"Answer a button pane affording the user one-touch access to certain functions; the pane is given the formal name 'buttonPane' by which it can be retrieved by code wishing to send messages to widgets residing on the pane"	| aRow aButton aLabel |	aRow _ AlignmentMorph newRow beSticky.	aRow setNameTo: 'buttonPane'.	aRow clipSubmorphs: true.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightRed; borderWidth: 1; borderColor: Color red darker.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs do:		[:tuple |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: tuple second.				aButton					hResizing: #spaceFill;					vResizing: #spaceFill;					useRoundedCorners;					askBeforeChanging: true;					onColor: Color transparent offColor: Color transparent.				aLabel _ Preferences abbreviatedBrowserButtons 					ifTrue: [self abbreviatedWordingFor: tuple second]					ifFalse: [nil].				aButton label: (aLabel ifNil: [tuple first asString]).				tuple size > 2 ifTrue: [aButton setBalloonText: tuple third].				Preferences alternativeWindowLook 					ifTrue:[aButton borderWidth: 2; borderColor: #raised].				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!EventRecorderMorph class methodsFor: 'instance creation' stamp: 'sw 11/21/2001 16:06'!descriptionForPartsBin	"Answer  a description for use in a parts bin"	^ self partName: 'Event Recorder'		categories: #(Presentation Tools)		documentation: 'Lets you record and play back interactions'! !!Player methodsFor: 'slots-user' stamp: 'sw 11/16/2001 14:44'!offerGetterTiles: slotName	"For a player-type slot, offer to build convenient compound tiles that otherwise would be hard to get"	| typeChoices typeChosen thePlayerThereNow slotChoices slotChosen getterTiles aCategoryViewer playerGetter fromPhrase |	typeChoices _ Vocabulary typeChoices.	fromPhrase _ ' from', self externalName, '''s ', slotName.	typeChosen _ (SelectionMenu selections: typeChoices lines: #()) startUpWithCaption: 'Choose the TYPEof data to get', fromPhrase.	typeChosen isEmptyOrNil ifTrue: [^ self].	thePlayerThereNow _ self perform: (Utilities getterSelectorFor: slotName).	thePlayerThereNow ifNil: [thePlayerThereNow _ self presenter standardPlayer].	slotChoices _ thePlayerThereNow slotNamesOfType: typeChosen.	slotChoices size == 0		ifTrue: [^ self inform: 'sorry -- no slots of that type'].	slotChosen _ (SelectionMenu selections: slotChoices asSortedArray) startUpWithCaption: 'Choose the datumyou want to extract from', fromPhrase.	slotChosen isEmptyOrNil ifTrue: [^ self].	"Now we want to tear off tiles of the form		holder's valueAtCursor's foo"		getterTiles _ nil.	aCategoryViewer _ CategoryViewer new initializeFor: thePlayerThereNow categoryChoice: 'basic'.	getterTiles _ aCategoryViewer getterTilesFor: (Utilities getterSelectorFor: slotChosen) type: typeChosen.	aCategoryViewer _ CategoryViewer new initializeFor:  self categoryChoice: 'basic'.	playerGetter _ aCategoryViewer getterTilesFor: (Utilities getterSelectorFor: slotName) type: #Player.	getterTiles submorphs first "the pad"		acceptDroppingMorph: playerGetter event: nil. "simulate a drop"	getterTiles makeAllTilesGreen.	getterTiles justGrabbedFromViewer: false.	getterTiles firstSubmorph changeTableLayout;		hResizing: #shrinkWrap;		vResizing: #spaceFill.	ActiveHand attachMorph: getterTiles! !!Utilities class methodsFor: 'miscellaneous' stamp: 'sw 11/16/2001 14:43'!getterSelectorFor: identifier	"Answer the corresponding getter.  Two idiosyncratic vectorings herein... " 	"Utilities getterSelectorFor: #elvis"	| aSymbol |	(aSymbol _ identifier asSymbol) == #isOverColor: ifTrue: [^ #seesColor:].	aSymbol == #copy ifTrue: [^ #getNewClone].	^ ('get', (identifier asString capitalized)) asSymbol! !StandardScriptingSystem removeSelector: #getterSelectorFor:!StandardScriptingSystem removeSelector: #setterSelectorFor:!Player removeSelector: #setterSelectorFor:!Player removeSelector: #tileScriptCommands!