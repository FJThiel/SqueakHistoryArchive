'From Squeak3.1alpha of 28 February 2001 [latest update: #4316] on 4 September 2001 at 6:12:52 pm'!"Change Set:		StkFldName-tkDate:			4 September 2001Author:			Ted KaehlerWhen a background field was added to a stack, it usually has the same name as an existing field, 'text'.  Previously, the new field kept its name, and all existing fields were renamed.  This caused trouble!!  This fix sorts the fields by whether they have a cardPlayer and processes the new one last.  The new one is renamed.  [This is probably the stack bug we have been seeking for a year.  Dan found the symptoms.]"!!PasteUpMorph methodsFor: 'stack/card' stamp: 'tk 8/29/2001 15:07'!reassessBackgroundShape	"A change has been made which may affect the instance structure of the Card uniclass that holds the instance state, which can also be thought of as the 'card data'."	| takenNames uniqueName requestedName  variableDocks docks sepDataMorphs sorted |	"Caution: still to be done: the mechanism so that when a new instance variable is added, it gets initialized in all subinstances of the receiver's player, which are the cards of this shape.  One needs to take into account here the instance variable names coming in; those that are unchanged should keep their values, but those that have newly arrived should obtain their default values from the morphs on whose behalf they are being maintained in the model"Cursor wait showWhile:	[variableDocks _ OrderedCollection new.  "This will be stored in the uniclass's 			class-side inst var #variableDocks"	takenNames _ OrderedCollection new.	sepDataMorphs _ self submorphs select: [:aMorph | aMorph holdsSeparateDataForEachInstance].	sorted _ (SortedCollection new) sortBlock: 				[:a :b | (a valueOfProperty: #cardInstance) ~~ nil].	"puts existing ones first"	sorted addAll: sepDataMorphs.	sorted do: 		[:aMorph |			docks _ aMorph variableDocks.  	"Each morph can request multiple variables.  	This complicates matters somewhat but creates a generality for Fabrk-like uses.	Each spec is an instance of VariableDock, and it provides a point of departure	for the negotiation between the PasteUp and its constitutent morphs"			docks do:				[:aVariableDock |					uniqueName _ self player uniqueInstanceVariableNameLike: 						(requestedName _ aVariableDock variableName) excluding: takenNames.					uniqueName ~= requestedName ifTrue:						[aVariableDock variableName: uniqueName.						aMorph noteNegotiatedName: uniqueName for: requestedName].					takenNames add: uniqueName].			variableDocks addAll: docks].		self player class setNewInstVarNames: 		(variableDocks collect: [:info | info variableName asString]).  "NB: sets up accessors, and removes obsolete ones"	self player class newVariableDocks: variableDocks]! !