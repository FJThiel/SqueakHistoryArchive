'From Squeak2.8alpha of 19 January 2000 [latest update: #2299] on 7 June 2000 at 7:45:08 pm'!!SocketPlugin methodsFor: 'primitives' stamp: 'JMM 5/30/2000 17:05'!primitiveSocket: socket getOptions: optionName	| s optionNameStart optionNameSize returnedValue errorCode results |	self var: #s declareC: 'SocketPtr s'.	self primitive: 'primitiveSocketGetOptions'		parameters: #(Oop Oop).	s _ self socketValueOf: socket.	interpreterProxy success: (interpreterProxy isBytes: optionName).	optionNameStart _ self cCoerce: (interpreterProxy firstIndexableField: optionName) to: 'int'.	optionNameSize _ interpreterProxy slotSizeOf: optionName.	interpreterProxy failed ifTrue: [^nil].	returnedValue _ 0.	errorCode _ self sqSocketGetOptions: s 			optionNameStart: optionNameStart 			optionNameSize: optionNameSize			returnedValue: (self cCode: '&returnedValue').	interpreterProxy pushRemappableOop: returnedValue asSmallIntegerObj.	interpreterProxy pushRemappableOop: errorCode asSmallIntegerObj.	interpreterProxy pushRemappableOop: (interpreterProxy instantiateClass: (interpreterProxy classArray) indexableSize: 2).	results _ interpreterProxy popRemappableOop.	interpreterProxy storePointer: 0 ofObject: results withValue: interpreterProxy popRemappableOop.	interpreterProxy storePointer: 1 ofObject: results withValue: interpreterProxy popRemappableOop.	^ results! !!SocketPlugin methodsFor: 'primitives' stamp: 'JMM 5/25/2000 00:57'!primitiveSocket: socket receiveUDPDataBuf: array start: startIndex count: count 	| s byteSize arrayBase bufStart bytesReceived results address port moreFlag |	self var: #s declareC: 'SocketPtr s'.	self primitive: 'primitiveSocketReceiveUDPDataBufCount'		parameters: #(Oop Oop SmallInteger SmallInteger ).	s _ self socketValueOf: socket.	"buffer can be any indexable words or bytes object"	interpreterProxy success: (interpreterProxy isWordsOrBytes: array).	(interpreterProxy isWords: array)		ifTrue: [byteSize _ 4]		ifFalse: [byteSize _ 1].	interpreterProxy success: (startIndex >= 1			and: [count >= 0 and: [startIndex + count - 1 <= (interpreterProxy slotSizeOf: array)]]).	interpreterProxy failed		ifFalse: ["Note: adjust bufStart for zero-origin indexing"			arrayBase _ self cCoerce: (interpreterProxy firstIndexableField: array)						to: 'int'.			bufStart _ arrayBase + (startIndex - 1 * byteSize).			"allocate storage for results, remapping newly allocated			 oops in case GC happens during allocation"			address		  _ 0.			port			  _ 0.			moreFlag	  _ 0.			bytesReceived _ self						sqSocket: s						ReceiveUDPDataBuf: bufStart						Count: count * byteSize						address: (self cCode: '&address')						port: (self cCode: '&port')						moreFlag: (self cCode: '&moreFlag').							interpreterProxy pushRemappableOop: port asSmallIntegerObj.			interpreterProxy pushRemappableOop: (self intToNetAddress: address).			interpreterProxy pushRemappableOop: (bytesReceived // byteSize) asSmallIntegerObj.			interpreterProxy pushRemappableOop:				(interpreterProxy instantiateClass: (interpreterProxy classArray) indexableSize: 4).			results         _ interpreterProxy popRemappableOop.			interpreterProxy storePointer: 0 ofObject: results withValue: interpreterProxy popRemappableOop.			interpreterProxy storePointer: 1 ofObject: results withValue: interpreterProxy popRemappableOop.			interpreterProxy storePointer: 2 ofObject: results withValue: interpreterProxy popRemappableOop.			moreFlag				ifTrue: [ interpreterProxy storePointer: 3 ofObject: results withValue: interpreterProxy trueObject ]				ifFalse: [ interpreterProxy storePointer: 3 ofObject: results withValue: interpreterProxy falseObject ].			].	^ results! !!SocketPlugin methodsFor: 'primitives' stamp: 'JMM 5/25/2000 00:22'!primitiveSocket: socket sendUDPData: array toHost: hostAddress  port: portNumber start: startIndex count: count 	| s byteSize arrayBase bufStart bytesSent address |	self var: #s declareC: 'SocketPtr s'.	self primitive: 'primitiveSocketSendUDPDataBufCount'		parameters: #(Oop Oop ByteArray SmallInteger SmallInteger SmallInteger ).	s _ self socketValueOf: socket.	"buffer can be any indexable words or bytes object except CompiledMethod "	interpreterProxy success: (interpreterProxy isWordsOrBytes: array).	(interpreterProxy isWords: array)		ifTrue: [byteSize _ 4]		ifFalse: [byteSize _ 1].	interpreterProxy success: (startIndex >= 1			and: [count >= 0 and: [startIndex + count - 1 <= (interpreterProxy slotSizeOf: array)]]).	interpreterProxy failed		ifFalse: ["Note: adjust bufStart for zero-origin indexing"			arrayBase _ self cCoerce: (interpreterProxy firstIndexableField: array)						to: 'int'.			bufStart _ arrayBase + (startIndex - 1 * byteSize).			address _ self netAddressToInt: (self cCoerce: hostAddress to: 'unsigned char *').			bytesSent _ self						sqSocket: s						toHost: address						port: portNumber						SendDataBuf: bufStart						Count: count * byteSize].	^ (bytesSent // byteSize) asSmallIntegerObj! !!SocketPlugin methodsFor: 'primitives' stamp: 'JMM 5/30/2000 17:05'!primitiveSocket: socket setOptions: optionName value: optionValue	| s optionNameStart optionNameSize optionValueStart optionValueSize returnedValue errorCode results |	self var: #s declareC: 'SocketPtr s'.	self primitive: 'primitiveSocketSetOptions'		parameters: #(Oop Oop Oop).	s _ self socketValueOf: socket.	interpreterProxy success: (interpreterProxy isBytes: optionName).	optionNameStart _ self cCoerce: (interpreterProxy firstIndexableField: optionName) to: 'int'.	optionNameSize _ interpreterProxy slotSizeOf: optionName.	interpreterProxy success: (interpreterProxy isBytes: optionValue).	optionValueStart_ self cCoerce: (interpreterProxy firstIndexableField: optionValue) to: 'int'.	optionValueSize _ interpreterProxy slotSizeOf: optionValue.	interpreterProxy failed ifTrue: [^nil].	returnedValue _ 0.	errorCode _ self sqSocketSetOptions: s 			optionNameStart: optionNameStart 			optionNameSize: optionNameSize			optionValueStart: optionValueStart			optionValueSize: optionValueSize			returnedValue: (self cCode: '&returnedValue').	interpreterProxy pushRemappableOop: returnedValue asSmallIntegerObj.	interpreterProxy pushRemappableOop: errorCode asSmallIntegerObj.	interpreterProxy pushRemappableOop: (interpreterProxy instantiateClass: (interpreterProxy classArray) indexableSize: 2).	results _ interpreterProxy popRemappableOop.	interpreterProxy storePointer: 0 ofObject: results withValue: interpreterProxy popRemappableOop.	interpreterProxy storePointer: 1 ofObject: results withValue: interpreterProxy popRemappableOop.	^ results! !!SocketPlugin methodsFor: 'primitives' stamp: 'JMM 5/23/2000 22:46'!primitiveSocketAcceptFrom: sockHandle rcvBufferSize: recvBufSize sndBufSize: sendBufSize semaIndex: semaIndex readSemaIndex: aReadSema writeSemaIndex: aWriteSema	| socketOop s serverSocket |	self var: #s declareC: 'SocketPtr s'.	self var: #serverSocket declareC: 'SocketPtr serverSocket'.	self primitive: 'primitiveSocketAccept3Semaphores'		parameters: #(Oop SmallInteger SmallInteger SmallInteger SmallInteger SmallInteger).	serverSocket _ self socketValueOf: sockHandle.	interpreterProxy failed		ifFalse: [socketOop _ interpreterProxy instantiateClass: interpreterProxy classByteArray indexableSize: self socketRecordSize.			s _ self socketValueOf: socketOop.			self				sqSocket: s				AcceptFrom: serverSocket				RecvBytes: recvBufSize				SendBytes: sendBufSize				SemaID: semaIndex				ReadSemaID: aReadSema				WriteSemaID: aWriteSema].	^ socketOop! !!SocketPlugin methodsFor: 'primitives' stamp: 'JMM 5/23/2000 22:54'!primitiveSocketCreateNetwork: netType type: socketType receiveBufferSize: recvBufSize sendBufSize: sendBufSize semaIndex: semaIndex readSemaIndex: aReadSema writeSemaIndex: aWriteSema	| socketOop s |	self var: #s declareC: 'SocketPtr s'.	self primitive: 'primitiveSocketCreate3Semaphores'		parameters: #(SmallInteger SmallInteger SmallInteger SmallInteger SmallInteger SmallInteger SmallInteger).	socketOop _ interpreterProxy instantiateClass: interpreterProxy classByteArray					indexableSize: self socketRecordSize.	s _ self socketValueOf: socketOop.	self sqSocket: s CreateNetType: netType SocketType: socketType		RecvBytes: recvBufSize SendBytes: sendBufSize SemaID: semaIndex ReadSemaID: aReadSema WriteSemaID: aWriteSema.	^socketOop! !!SocketPlugin class methodsFor: 'translation' stamp: 'JMM 5/30/2000 17:12'!headerFile^'/* squeak socket record; see sqMacNetwork.c for details *//* module initialization/shutdown */int socketInit(void);int socketShutdown(void);typedef struct {	int		sessionID;	int		socketType;  /* 0 = TCP, 1 = UDP */	void	*privateSocketPtr;}  SQSocket, *SocketPtr;/* networking primitives */int		sqNetworkInit(int resolverSemaIndex);void	sqNetworkShutdown(void);void	sqResolverAbort(void);void	sqResolverAddrLookupResult(char *nameForAddress, int nameSize);int		sqResolverAddrLookupResultSize(void);int		sqResolverError(void);int		sqResolverLocalAddress(void);int		sqResolverNameLookupResult(void);void	sqResolverStartAddrLookup(int address);void	sqResolverStartNameLookup(char *hostName, int nameSize);int		sqResolverStatus(void);void	sqSocketAbortConnection(SocketPtr s);void	sqSocketCloseConnection(SocketPtr s);int		sqSocketConnectionStatus(SocketPtr s);void	sqSocketConnectToPort(SocketPtr s, int addr, int port);void	sqSocketCreateNetTypeSocketTypeRecvBytesSendBytesSemaID(			SocketPtr s, int netType, int socketType,			int recvBufSize, int sendBufSize, int semaIndex);void	sqSocketCreateNetTypeSocketTypeRecvBytesSendBytesSemaIDReadSemaIDWriteSemaID(			SocketPtr s, int netType, int socketType,			int recvBufSize, int sendBufSize, int semaIndex, int readSemaIndex, int writeSemaIndex);void	sqSocketDestroy(SocketPtr s);int		sqSocketError(SocketPtr s);void	sqSocketListenOnPort(SocketPtr s, int port);int		sqSocketLocalAddress(SocketPtr s);int		sqSocketLocalPort(SocketPtr s);int		sqSocketReceiveDataAvailable(SocketPtr s);int		sqSocketReceiveDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketRemoteAddress(SocketPtr s);int		sqSocketRemotePort(SocketPtr s);int		sqSocketSendDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketSendDone(SocketPtr s);/* 	ar 7/16/1999: New primitives for accept().	Note: If accept() calls are not supported simply make the calls fail	and the old connection style will be used */void	sqSocketListenOnPortBacklogSize(SocketPtr s, int port, int backlogSize);void	sqSocketAcceptFromRecvBytesSendBytesSemaID(			SocketPtr s, SocketPtr serverSocket,			int recvBufSize, int sendBufSize, int semaIndex);void	sqSocketAcceptFromRecvBytesSendBytesSemaIDReadSemaIDWriteSemaID(			SocketPtr s, SocketPtr serverSocket,			int recvBufSize, int sendBufSize, int semaIndex, int readSemaIndex, int writeSemaIndex);int 		sqSocketReceiveUDPDataBufCountaddressportmoreFlag(SocketPtr s, int buf, int bufSize,  int *address,  int *port, int *moreFlag);int		sqSockettoHostportSendDataBufCount(SocketPtr s, int address, int port, int buf, int bufSize);int     	sqSocketSetOptionsoptionNameStartoptionNameSizeoptionValueStartoptionValueSizereturnedValue(			SocketPtr s,int optionName, int optionNameSize, int optionValue, int optionValueSize, int *result);int     	sqSocketGetOptionsoptionNameStartoptionNameSizereturnedValue(			SocketPtr s,int optionName, int optionNameSize, int *result);'! !