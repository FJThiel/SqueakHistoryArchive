'From Squeak 2.1 of June 30, 1998 on 13 August 1998 at 7:54:45 am'!"Change Set:		selectiveSourceLogging-swDate:			13 August 1998Author:			Scott WallaceLog the source-code for Player scripts selectively: if they are textually coded, do log; if they are tile coded, do not log.Note: In an earlier pass at this, I explored the (probably cleaner) approach of adding boolean flags governing Recording-in-ChangeSet and Writing-to-System-Log to the protocol of the relevant system methods, which are:   ClassDescription removeSelector:   ClassDescription compile:classified:notifying   Class removeFromSystem:   SystemDictionary removeClassFromSystem: and then rechanneling the flow from the above four to call the new methods, with appropriate values for the booleans (and in tricky cases like Player where you sometimes want to log source and sometimes don't, depending on whether the method in question is currently textually scripted or not, directly call the new methods with appropriate boolean values), but the overall perturbation to perfectly good code got to be wearying, so I backed out of that and instead adopted the current approach -- at the expense of a small amount of redundancy -- of implementing a parallel set of unlogged counterparts to the above four methods." !!ClassDescription methodsFor: 'method dictionary' stamp: 'sw 8/11/1998 12:52'!removeSelectorUnlogged: aSymbol 	"Remove the message whose selector is aSymbol from the method dictionary of the receiver, if it is there. Answer nil otherwise.  Do not log the action either to the current change set or to the changes log"	(methodDict includesKey: aSymbol) ifFalse: [^ nil].	super removeSelector: aSymbol.	self organization removeElement: aSymbol! !!ClassDescription methodsFor: 'compiling' stamp: 'sw 8/11/1998 14:40'!compileUnlogged: text classified: category notifying: requestor 	| selector  |	self compile: text asString		notifying: requestor		trailer: #(0 0 0 0)		ifFail: [^ nil]		elseSetSelectorAndNode: 			[:sel :node | selector _ sel].	self organization classify: selector under: category.	^ selector! !!Class methodsFor: 'initialize-release' stamp: 'sw 8/11/1998 13:23'!removeFromSystemUnlogged	"Forget the receiver from the Smalltalk global dictionary. Any existing instances will refer to an obsolete version of the receiver.  Do not log the removal either to the current change set nor to the system changes log"	Smalltalk removeClassFromSystemUnlogged: self.	self obsolete! !!Player methodsFor: 'slots-user' stamp: 'sw 8/11/1998 12:47'!compileInstVarAccessorsFor: varName	| nameString |	nameString _ varName asString capitalized.	self class compileUnlogged: ('get', nameString, '	^ ', varName)		classified: 'access' notifying: nil.	self class compileUnlogged: ('set', nameString, ': val	', varName, ' _ val')		classified: 'access' notifying: nil.! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 8/11/1998 12:45'!acceptScript: aScriptEditorMorph for: aSelector	| classif |	classif _ aScriptEditorMorph isAnonymous ifTrue: ['anonymous scripts'] ifFalse: ['named scripts'].	self class		compileUnlogged: aScriptEditorMorph methodString		classified: classif		notifying: nil.	self class atSelector: aSelector putScriptEditor: aScriptEditorMorph! !!Player class methodsFor: 'other' stamp: 'sw 8/11/1998 13:23'!removeUninstantiatedSubclassesSilently	"Remove the classes of any subclasses that have neither instances nor subclasses.  Answer the number of bytes reclaimed"	"Player removeUninstantiatedSubclassesSilently"	| candidatesForRemoval  oldFree |	oldFree _ Smalltalk garbageCollect.	candidatesForRemoval _		self subclasses select: [:c |			(c instanceCount = 0) and: [c subclasses size = 0]].	candidatesForRemoval _ candidatesForRemoval select:		[:aClass | aClass isSystemDefined not].	candidatesForRemoval do: [:c | c removeFromSystemUnlogged].	^ Smalltalk garbageCollect - oldFree! !!Player class methodsFor: 'scripts' stamp: 'sw 8/11/1998 12:52'!removeScriptNamed: aScriptName	aScriptName ifNotNil:		[scripts removeKey: aScriptName.		self removeSelectorUnlogged: aScriptName]! !!Player class methodsFor: 'namespace' stamp: 'sw 8/11/1998 12:46'!compileReferenceAccessorFor: varName	self class compileUnlogged: ((self referenceAccessorSelectorFor: varName), '	^ ', varName)		classified: 'reference' notifying: nil! !!SystemDictionary methodsFor: 'class names' stamp: 'sw 8/11/1998 13:23'!removeClassFromSystemUnlogged: aClass	"Delete the class, aClass, from the system, but log the removal neither to the current change set nor to the changes log"	SystemOrganization removeElement: aClass name.	self removeKey: aClass name.	self flushClassNameCache! !Player class removeSelector: #acceptsLoggingOfCompilation!