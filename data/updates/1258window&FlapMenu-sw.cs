'From Squeak 2.4c of May 10, 1999 on 21 June 1999 at 4:55:36 pm'!"Change Set:		window&FlapMenu-swDate:			21 June 1999Author:			Scott WallaceCombines the world's flap menu with the window menu.Adds a new control allowing immediate show/hide of flaps.  This is independent of the Preference regarding global flaps.Supplies balloon help for all items in the combined menu.Relevant items in the window/flap menu made self-updating.The standard menu flap is updated to conform to other menu changes."!!HandMorph methodsFor: 'world menu' stamp: 'sw 6/21/1999 12:42'!windowsMenu	"Build the windows menu for the world."	| menu firstFlapIndex |	menu _ (MenuMorph entitled: 'windows & flaps...') defaultTarget: self.	menu addStayUpItem.	menu add: 'find window' action: #findWindow.	menu balloonTextForLastItem: 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'.	menu add: 'find changed browsers...' action: #findDirtyBrowsers.	menu balloonTextForLastItem: 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'.	menu add: 'find changed windows...' action: #findDirtyWindows.	menu balloonTextForLastItem: 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'.	menu addLine.	menu add: 'collapse all windows' action: #collapseAll.	menu balloonTextForLastItem: 'Reduce all open windows to collapsed forms that only show titles.'.	menu add: 'expand all windows' action: #expandAll.	menu balloonTextForLastItem: 'Expand all collapsed windows back to their expanded forms.'.	menu addLine.	menu add: 'delete unchanged windows' action: #closeUnchangedWindows.	menu balloonTextForLastItem: 'Deletes all windows that do not have unsaved text edits.'.	menu add: 'delete non-windows' action: #deleteNonWindows.	menu balloonTextForLastItem: 'Deletes all non-window morphs lying on the world.'.	menu add: 'delete both of the above' action: #cleanUpWorld.	menu balloonTextForLastItem: 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'.	menu addLine.	menu addUpdating: #staggerPolicyString target: Preferences action: #toggleWindowPolicy.	menu balloonTextForLastItem: 'stagger: new windows positioned so you can see a portion of each one.tile: new windows positioned so that they do not overlap others, if possible.'.	menu addLine; defaultTarget: Utilities.	firstFlapIndex _ menu submorphs size.		menu addUpdating: #suppressFlapsString action: #toggleFlapSuppressionInProject.	menu balloonTextForLastItem: 'Governs whether flaps should be shown in this project'.	menu addLine.	menu add: 'new global flap...'  action: #addGlobalFlap.	menu balloonTextForLastItem: 'Create a new flap that will be shared by all morphic projects'.	menu add: 'new project flap...'  action: #addLocalFlap.	menu balloonTextForLastItem: 'Create a new flap to be used only in this project.'.	menu addLine.	menu add: 'about flaps...' target: Utilities action: #explainFlaps.	menu balloonTextForLastItem: 'Gives a window full of details about how to use flaps.'.	menu addUpdating: #useGlobalFlapsString action: #toggleWhetherToUseGlobalFlaps.	menu balloonTextForLastItem: 'Governs whether a universal set of "global" flaps should be used in all morphic projects that currently are showing flaps.'."	firstFlapIndex to: menu submorphs size do:		[:i | (menu submorphs at: i) color: Color blue darker darker].	The above was an experiment in making the flap-related menu items a different color.  In the ended decided it was too daring."	^ menu! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 6/21/1999 15:17'!addGlobalFlaps	| flapList |	(Preferences valueOfFlag: #useGlobalFlaps) ifFalse: [^ self].	Project current flapsSuppressed ifTrue: [^ self].	Smalltalk isMorphic ifFalse: [^ self].		flapList _ Utilities globalFlapTabs.	flapList do:		[:aFlapTab |			(aFlapTab world == self) ifFalse:				[self addMorphFront: aFlapTab.				aFlapTab adaptToWorld: self].			aFlapTab spanWorld.			aFlapTab adjustPositionAfterHidingFlap.			aFlapTab flapShowing ifTrue: [aFlapTab showFlap]]"	Utilities clobberFlapTabList.	Utilities initializeStandardFlaps.	self currentWorld deleteAllFlapArtifacts.	self currentWorld addGlobalFlaps."! !!PasteUpMorph methodsFor: 'project' stamp: 'sw 6/14/1999 10:21'!restoreFlapsDisplay	(Preferences useGlobalFlaps and: [Project current flapsSuppressed not]) ifTrue:		[Utilities globalFlapTabs do:			[:aFlapTab | aFlapTab adaptToWorld]].	self localFlapTabs do:			[:aFlapTab | aFlapTab adaptToWorld].	self assureFlapTabsFitOnScreen.	self bringFlapTabsToFront! !!Project methodsFor: 'project parameters' stamp: 'sw 6/14/1999 10:15'!flapsSuppressed	^ (self projectParameters at: #globalFlapsEnabledInProject) not! !!Project methodsFor: 'project parameters' stamp: 'sw 6/14/1999 10:17'!flapsSuppressed: aBoolean	self projectParameters at: #globalFlapsEnabledInProject put: aBoolean not.	aBoolean		ifTrue:					[Utilities globalFlapTabsIfAny do:				[:aFlapTab | Utilities removeFlapTab: aFlapTab keepInList: true]]		ifFalse:			[Smalltalk isMorphic  ifTrue:				[self currentWorld addGlobalFlaps]]! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/21/1999 15:18'!addGlobalFlap	| aMenu reply aFlapTab |	aMenu _ MVCMenuMorph entitled: 'which edge should it stick to? '.	#(left right top bottom) do:		[:sym | aMenu add: sym action: sym].	reply _ aMenu invokeAt: self currentHand position in: self currentWorld.	reply ifNotNil:		[aFlapTab _ self newFlapTitled: 'Untitled Flap' onEdge: reply.		self addGlobalFlap: aFlapTab.	self currentWorld addGlobalFlaps]	! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/14/1999 15:58'!addGlobalFlap: aFlapTab	FlapTabs ifNil: [FlapTabs _ OrderedCollection new].	FlapTabs add: aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/21/1999 16:51'!menuFlap	| aFlap aFlapTab aHolder verticalHolder aMenu |	aFlap _ PasteUpMorph newSticky color: Color transparent; extent: self currentWorld width @ 264; borderWidth: 0; padding: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab color: Color brown lighter.	aFlapTab assumeString: 'Menus' font: ScriptingSystem fontForScriptorButtons orientation: #horizontal color: Color blue muchLighter.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab edgeToAdhereTo: #top; inboard: false.	aFlapTab position: ((Display width - aFlapTab width) // 2) @ 0.	aFlap setProperty: #flap toValue: true.	aFlap color: (Color blue muchLighter alpha: 0.6).	aFlap extent: self currentWorld width @ 267.	aHolder _ AlignmentMorph newRow beSticky beTransparent.	#(openMenu helpMenu windowsMenu (changesMenu scriptingMenu) (playfieldMenu debugMenu)) do:		[:elem |			(elem isKindOf: Array)				ifTrue:					[verticalHolder _ AlignmentMorph newColumn beSticky beTransparent.					verticalHolder hResizing: #shrinkWrap; inset: 0.					elem do:						[:aMenuSymbol |							verticalHolder addMorphBack: ((aMenu _ self currentHand perform: aMenuSymbol) beSticky; stayUp: true).							aMenu beSticky.							aMenu borderWidth: 1.							aMenu submorphs second delete].					aHolder addMorphBack: verticalHolder]				ifFalse:					[aHolder addMorphBack: ((aMenu _ self currentHand perform: elem) beSticky; stayUp: true).					aMenu submorphs second delete.					aMenu beSticky.					aMenu borderWidth: 1]].	aFlap addMorphBack: aHolder.	^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/14/1999 16:02'!replaceMenuFlap	"if there is a global menu flap, replace it with an updated one."	| aFlapTab |	aFlapTab _ self globalFlapTabsIfAny detect:		[:aTab | (aTab submorphs size > 0) and:  [(aTab submorphs first isKindOf: TextMorph) and: [(aTab submorphs first contents string copyWithout: $ ) = 'Menus']]] ifNone: [^ self].	self removeFlapTab: aFlapTab keepInList: false.	self addGlobalFlap: self menuFlap.	self currentWorld ifNotNil: [self currentWorld addGlobalFlaps]"Utilities replaceMenuFlap"! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/14/1999 09:56'!showingGlobalFlapsString	^ Preferences valueOfFlag: #useGlobalFlaps.! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/14/1999 10:23'!suppressFlapsString	^ (Project current flapsSuppressed)		ifFalse: ['hide flaps']		ifTrue: ['show flaps']! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/17/1999 14:37'!toggleFlapSuppressionInProject	Preferences useGlobalFlaps ifFalse:		[^ self inform: 'CAUTION!!  Global flaps are currently disabled, and must be reenabled for this option to be meaningful.'].	Project current flapsSuppressed: Project current flapsSuppressed not.	self currentWorld restoreDisplay! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/14/1999 09:56'!toggleWhetherToUseGlobalFlaps	Preferences setPreference: #useGlobalFlaps toValue: Preferences useGlobalFlaps not! !!Utilities class methodsFor: 'flaps' stamp: 'sw 6/14/1999 10:12'!useGlobalFlapsString	^ (Preferences valueOfFlag: #useGlobalFlaps)			ifTrue: ['stop using global flaps']			ifFalse: ['start using global flaps']! !HandMorph removeSelector: #offerFlapsMenu!Project removeSelector: #globalFlapsEnabledInProject:!Project removeSelector: #globalFlapsEnabledInProject!Utilities class removeSelector: #toggleSuppressionOfGlobalFlapsInProject!