'From Squeak 2.1 of June 30, 1998 on 3 September 1998 at 10:44:59 am'!"Change Set:		HappyTrails-diDate:			4 September 1998Author:			Dan IngallsReworks Player>>forward: and setHeading: to track fractional coordinates better.  In particular, the removal of flexShell that can happen at 0 heading must be preceded by the rotation message in order to cause the proper adjustment of position.Rips out the old updateTurtleTrails logic in PasteUpMorph and replaces it by a simple call to draw a trail if the pen is down in Morph>>provateMoveBy:.  The logic is designed to be very fast when this is not the case.Removes the old variable lastTurtlePositions from pasteUpMorph, and from several conversion methods.Also includes a fix to HandMorph selectSubmorphToOperateOn:... which had been performing a two-argument selector with only one argument."!!Morph methodsFor: 'pen' stamp: 'di 9/3/1998 10:38'!penUpWhile: changeBlock 	"Suppress any possible pen trail during the execution of changeBlock"	self getPenDown		ifTrue: ["If this is a costume for a player with its pen down, suppress any line."				self liftPen.				changeBlock value.				self lowerPen]		ifFalse: ["But usually, just do it."				changeBlock value]! !!Morph methodsFor: 'private' stamp: 'di 9/3/1998 10:29'!privateMoveBy: delta	"Private!! Use 'position:' instead."	| pasteUp start |	(extension == nil or: [extension player == nil]) ifFalse:		["Most cases eliminated fast by above test"		self getPenDown ifTrue:			["If this is a costume for a player with its pen down, draw a line."			(pasteUp _ self pasteUpMorph) ifNotNil:				[start _ self referencePosition.				pasteUp drawPenTrailFor: self from: start to: start + delta]]].	fullBounds == bounds		ifTrue: ["optimization: avoids recomputing fullBounds"				fullBounds _ bounds _ bounds translateBy: delta]		ifFalse: [bounds _ bounds translateBy: delta.				fullBounds _ nil]! !!HandMorph methodsFor: 'meta menu' stamp: 'di 9/3/1998 08:40'!selectSubmorphToOperateOn: rootMorph sending: aSymbol event: evt	"Let the user select a submorph of the given root morph. When selected, the given selector is sent with the selected submorph as an argument."	| possibleTargets menu |	possibleTargets _ rootMorph morphsAt: targetOffset.	possibleTargets size = 1 ifTrue: [^ self perform: aSymbol with: possibleTargets first with: evt].	menu _ MenuMorph new.	possibleTargets do: [:m |		menu add: (self submorphNameFor: m)			target: self			selector: aSymbol			argumentList: (Array with: m with: evt)].	menu popUpAt: self position event: evt.! !!PasteUpMorph methodsFor: 'initialization' stamp: 'di 9/3/1998 09:19'!initialize	owner _ nil.	submorphs _ EmptyArray.	borderWidth _ 1.	borderColor _ Color r: 0.861 g: 1.0 b: 0.722.	gradientDirection _ #vertical.	color _ Color r: 0.8 g: 1.0 b: 0.6.	fillColor2 _ color.	bounds _ 0@0 corner: 50@40.	cursor _ 1.	padding _ 3.	autoLineLayout _ false.	openToDragNDrop _ true.	self isWorldMorph ifTrue: [self setProperty: #automaticPhraseExpansion toValue: true]! !!PasteUpMorph methodsFor: 'display' stamp: 'di 9/3/1998 09:16'!drawOn: aCanvas	"Update and draw the turtleTrails form. See the comment in updateTrailsForm."	super drawOn: aCanvas.	turtleTrailsForm ifNotNil: [aCanvas image: turtleTrailsForm at: self position].	(submorphs size > 0 and: [self indicateCursor]) ifTrue:		[aCanvas			frameRectangle: self selectedRect			width: 2			color: Color black].! !!PasteUpMorph methodsFor: 'pen' stamp: 'di 9/3/1998 09:27'!createOrResizeTrailsForm	"If necessary, create a new turtleTrailsForm or resize the existing one to fill my bounds. On return, turtleTrailsForm exists and is the correct size."	| newForm |	turtleTrailsForm ifNil: [		"create new turtleTrailsForm if needed"		turtleTrailsForm _ Form extent: self extent depth: 8.		turtlePen _ Pen newOnForm: turtleTrailsForm.		^ self].	turtleTrailsForm extent = self extent ifFalse: [		"resize turtleTrailsForm if my size has changed"		newForm _ Form extent: self extent depth: 8.		newForm copy: self bounds from: turtleTrailsForm					to: 0@0 rule: Form paint.		turtleTrailsForm _ newForm.		turtlePen _ Pen newOnForm: turtleTrailsForm].! !!PasteUpMorph methodsFor: 'pen' stamp: 'di 9/3/1998 10:44'!drawPenTrailFor: aMorph from: oldPoint to: newPoint	"Draw a pen trail for aMorph, using its pen state (the pen is assumed to be down)."	"The turtleTrailsForm is created on demand when the first pen is put down and removed (to save space) when turtle trails are cleared."	| origin mPenSize offset |	self createOrResizeTrailsForm.	origin _ self topLeft.	mPenSize _ aMorph getPenSize.	turtlePen sourceForm width ~= mPenSize		ifTrue: [turtlePen squareNib: mPenSize].	offset _ (mPenSize // 2)@(mPenSize // 2).	turtlePen color: aMorph getPenColor.	turtlePen drawFrom: (oldPoint - origin - offset) asIntegerPoint				to: (newPoint - origin - offset) asIntegerPoint.	self invalidRect: ((oldPoint rect: newPoint) expandBy: mPenSize)! !!PasteUpMorph methodsFor: 'misc' stamp: 'di 9/3/1998 09:19'!prepareToBeSaved	super prepareToBeSaved.	turtlePen _ nil! !!PasteUpMorph methodsFor: 'object fileIn' stamp: 'di 9/3/1998 09:19'!convertbosfcep0: varDict bosfcepcbbfgccpmcpbttloiairfidcu0: smartRefStrm	"Conversion from ClippingMorph, used to read in old BookMorphs."	borderWidth _ 1.	borderColor _ Color black.	gradientDirection _ #vertical.	fillColor2 _ color.	presenter _ nil.	model _ nil.	cursor _ 1.	padding _ 3.	backgroundMorph _ nil.	turtleTrailsForm _ nil.	turtlePen _ nil.	openToDragNDrop _ true.	isPartsBin _ nil.	autoLineLayout _ false.	indicateCursor _ nil.	resizeToFit _ false.	fileName _ nil.	isStackLike _ nil.	dataInstances _ nil.	currentDataInstance _ nil.	userFrameRectangle _ nil.! !!PasteUpMorph methodsFor: 'object fileIn' stamp: 'di 9/3/1998 09:19'!convertbosfcepc0: varDict bosfcepcbbfgccpmcpbttloiairfidcu0: smartRefStrm	"Conversion from ClippingMorph, used to read in old BookMorphs."	borderWidth _ 1.	borderColor _ Color black.	gradientDirection _ #vertical.	fillColor2 _ color.	presenter _ nil.	model _ nil.	cursor _ 1.	padding _ 3.	backgroundMorph _ nil.	turtleTrailsForm _ nil.	turtlePen _ nil.	openToDragNDrop _ true.	isPartsBin _ nil.	autoLineLayout _ false.	indicateCursor _ nil.	resizeToFit _ false.	fileName _ nil.	isStackLike _ nil.	dataInstances _ nil.	currentDataInstance _ nil.	userFrameRectangle _ nil.! !!PasteUpMorph methodsFor: 'object fileIn' stamp: 'di 9/3/1998 09:19'!convertbosfcepcbbfgcc0: varDict bosfcepcbbfgccpmcpbttloiairfidcu0: smartRefStrm	"Conversion from BookPageMorph, used to read in old BookMorphs."	borderWidth _ 1.	borderColor _ Color black.	gradientDirection _ #vertical.	fillColor2 _ color.	presenter _ nil.	model _ nil.	cursor _ 1.	padding _ 3.	backgroundMorph _ nil.	turtleTrailsForm _ nil.	turtlePen _ nil.	openToDragNDrop _ true.	isPartsBin _ nil.	autoLineLayout _ false.	indicateCursor _ nil.	resizeToFit _ false.	fileName _ nil.	isStackLike _ nil.	dataInstances _ nil.	currentDataInstance _ nil.	userFrameRectangle _ nil.! !!Player methodsFor: 'slots-standard-get/set' stamp: 'di 9/3/1998 00:42'!setHeading: aNumber	| aCostume |	aCostume _ self costume.	0.0 = aNumber		ifTrue: 			[1.0 = self getScaleFactor ifTrue:				[aCostume isFlexMorph ifTrue:					[aCostume rotationDegrees: aNumber.					aCostume removeFlexShell].				^ self]]		ifFalse:			[aCostume isFlexMorph ifFalse: [aCostume addFlexShell]].	self costume rotationDegrees: aNumber.! !!Player methodsFor: 'scripts-standard' stamp: 'di 9/3/1998 00:43'!forward: dist 	| rho radians delta didStray p fractionalP newP aCostume |	(aCostume _ self costume) isInWorld ifFalse: [^ self].	aCostume isWorldOrHandMorph ifTrue: [^ self].	rho _ (aCostume asNumber: dist) asFloat.	radians _ (self getHeadingUnrounded asFloat - 90.0) degreesToRadians.	delta _ (radians cos @ radians sin) * rho.	((aCostume owner isHandMorph not) and:	 [aCostume presenter fenceEnabled]) ifTrue:		[(aCostume owner bounds containsRect: aCostume bounds) ifFalse:			["If I stray out of the bounds of my owner, pull me back, but			 without changing my heading as bounce would. Do nothing if			 bounce has already corrected the direction."			didStray _ false.			((aCostume left < aCostume owner left and: [delta x < 0]) or:			 [aCostume right > aCostume owner right and: [delta x > 0]]) ifTrue: [				delta _ delta x negated @ delta y.				didStray _ true].			((aCostume top < aCostume owner top and: [delta y < 0]) or:			 [aCostume bottom > aCostume owner bottom and: [delta y > 0]]) ifTrue: [				delta _ delta x @ delta y negated.				didStray _ true].			didStray ifTrue: [aCostume makeFenceSound]]].	"use and record the fractional position"	p _ aCostume referencePosition.	fractionalP _ aCostume actorState fractionalPosition.	(fractionalP == nil or: [fractionalP asIntegerPoint ~= p])		ifTrue: [newP _ p asFloatPoint + delta]		ifFalse: [newP _ fractionalP + delta]."Transcript cr; print: p; space; print: fractionalP;cr; cr; print: newP asIntegerPoint; space; print: newP; show: ''."	aCostume actorState fractionalPosition: newP.	aCostume referencePosition: newP asIntegerPoint.! !!TransformationMorph methodsFor: 'accessing' stamp: 'di 9/3/1998 00:19'!referencePosition	^ transform invert: self renderedMorph referencePosition! !!TransformationMorph methodsFor: 'accessing' stamp: 'di 9/3/1998 00:18'!referencePosition: aPoint	self position: self position + (aPoint - self referencePosition)! !!TransformationMorph methodsFor: 'menu' stamp: 'di 9/3/1998 10:39'!removeFlexShell	"Remove the shell used to make a morph rotatable and scalable."	| oldHalo unflexed anActorState aName |	oldHalo _ self halo.	submorphs isEmpty ifTrue: [^ self delete].	unflexed _ self firstSubmorph.	(anActorState _ self actorStateOrNil) ifNotNil:		[unflexed actorState: anActorState].	(aName _ self knownName) ifNotNil:		[unflexed setNameTo: aName].	unflexed player: self player.	self player ifNotNil:		[self player rawCostume: unflexed.		self player: nil].	self submorphs copy do: [:m |		m penUpWhile: [m position: self center - (m extent // 2)].		owner addMorph: m].	oldHalo ifNotNil: [oldHalo setTarget: unflexed].	self delete.! !!TransformationMorph methodsFor: 'private' stamp: 'di 9/3/1998 10:02'!adjustAfter: changeBlock 	"Cause this morph to remain cetered where it was before, and	choose appropriate smoothing, after a change of scale or rotation."	| oldRefPos |	oldRefPos _ self referencePosition.	changeBlock value.	(self scale < 1.0 or: [self angle ~= (self angle roundTo: Float pi / 2.0)])		ifTrue: [smoothing _ 2]		ifFalse: [smoothing _ 1].	self penUpWhile: [self position: self position + (oldRefPos - self referencePosition)].	self layoutChanged.! !PasteUpMorph removeSelector: #recordTurtlePositions!PasteUpMorph removeSelector: #updateTrailsForm!