'From Squeak2.9alpha of 12 June 2000 [latest update: #2659] on 21 September 2000 at 8:38:36 am'!"Change Set:		SelectionTweaksMinusDate:			21 September 2000Author:			Dan IngallsChanges the convention for area selection once again, owing to conflicts with other uses of mouseDown in PasteUpMorph.  Now shift-drag does selection both in the world and in playfields, and there is no preference for disabling this."!!Morph methodsFor: 'menus' stamp: 'di 9/21/2000 08:18'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	self maybeAddCollapseItemTo: aMenu.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	aMenu addLine.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	self player ifNotNil:		[aMenu addLine.		aMenu add: 'make a sibling instance' action: #makeNewPlayerInstance.		aMenu balloonTextForLastItem: 'Makes another morph whose player is of the same class as this one.  Both siblings will share the same scripts'].	aMenu addLine.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	self isLocked		ifFalse:			[aMenu add: 'lock' action: #lockMorph]		ifTrue:			[aMenu add: 'unlock' action: #unlockMorph].  "probably not possible -- wouldn't get halo"	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu		defaultTarget: self;		add: 'add mouse up action' action: #addMouseUpAction;		add: 'remove mouse up action' action: #removeMouseUpAction.	aMenu addLine.	aMenu defaultTarget: self topRendererOrSelf.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	(owner == nil) ifFalse:		[aMenu add: 'send to back' action: #goBehind.		aMenu add: 'bring to front' action: #comeToFront].	aMenu defaultTarget: aHandMorph.! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 9/21/2000 08:17'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	argMorph maybeAddCollapseItemTo: menu.	menu add: 'delete' action: #dismissMorph.	menu addLine.	menu add: 'copy Postscript' target: argMorph action: #clipPostscript.	menu add: 'print PS to file...' target: argMorph action: #printPSToFile.	menu addLine.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	"Give the argument control over what should be done about fill styles"	argMorph addFillStyleMenuItems: menu hand: self.	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	Smalltalk isMorphic		ifTrue: [menu add: 'inspect' action: #inspectMorph]		ifFalse: [menu add: 'inspect (in MVC)' action: #inspectMorph.				menu add: 'inspect' action: #inspectMorphInMorphic].	menu add: 'explore' target: argument action: #explore.	menu add: 'browse hierarchy' target: argument action: #browseHierarchy.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	(argMorph hasProperty: #resourceFilePath)		ifTrue: [((argMorph valueOfProperty: #resourceFilePath) endsWith: '.morph')				ifTrue: [menu add: 'save as resource' target: argMorph action: #saveAsResource].				menu add: 'update from resource' target: argMorph action: #updateFromResource]		ifFalse: [menu add: 'attach to resource' target: argMorph action: #attachToResource].	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'di 9/21/2000 08:19'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo.  Copied down from morph and hand-edited for the world"	self isWorldMorph ifFalse: [^ super addAddHandMenuItemsForHalo: aMenu hand: aHandMorph].	aMenu addLine.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	aMenu addLine.	self addFillStyleMenuItems: aMenu hand: aHandMorph.	aMenu		defaultTarget: self;		add: 'add mouse up action' action: #addMouseUpAction;		add: 'remove mouse up action' action: #removeMouseUpAction;		defaultTarget: aHandMorph.! !!PasteUpMorph methodsFor: 'world state' stamp: 'di 9/21/2000 08:14'!handlesMouseDown: evt	self isWorldMorph		ifTrue: [^ true]		ifFalse: [^ evt shiftPressed or: [super handlesMouseDown: evt]]! !!PasteUpMorph methodsFor: 'world state' stamp: 'di 9/21/2000 08:13'!mouseDown: evt	"Handle a mouse down event."	self isWorldMorph		ifTrue:			[evt hand newKeyboardFocus: self.			evt hand testEvent: evt				ifQuickClick: [^ self quickClickOnDesktop: evt]				ifMoved: [evt shiftPressed							ifTrue: [^ self dragThroughOnDesktop: evt]							ifFalse: [^ super mouseDown: evt]].			evt hand invokeMetaMenu: evt]		ifFalse:			[evt hand testEvent: evt				ifQuickClick: [^ super mouseDown: evt]				ifMoved: [evt shiftPressed							ifTrue: [^ self dragThroughOnDesktop: evt]							ifFalse: [^ super mouseDown: evt]].			^ super mouseDown: evt]! !!TextPlusPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'di 9/21/2000 08:20'!mouseDown: evt	"Handle a mouse down event."	evt hand 		testEvent: evt		ifQuickClick: ["^ self" "quickClickOnDesktop: evt"]		ifMoved: [evt shiftPressed ifTrue: [^ self dragThroughOnDesktop: evt]].! !!TheWorldMenu methodsFor: 'construction' stamp: 'di 9/21/2000 08:17'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu _ MenuMorph new defaultTarget: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu from: {		{'previous project' . { #myWorld . #goBack } }.		{'jump to project...' . { #myWorld . #jumpToProject } }.		{'save project on file...' . { #myWorld  . #saveOnFile } }.		{'load project from file...' . { self  . #loadProject } }.		nil}.	myHand addUndoItemsTo: menu.		self fillIn: menu from: {		{'restore display' . { Display . #restoreMorphicDisplay } }.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'open...' . { self  . #openWindow } }.			{'windows & flaps...' . { self  . #windowsDo } }.			{'changes...' . { self  . #changesDo } }}].	self fillIn: menu from: { 		{'help...' . { self  . #helpDo } }.		{'appearance...' . { self  . #appearanceDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: {			{'do...' . { Utilities . #offerCommonRequests} } }].	self fillIn: menu from: { 		nil.		{'new morph...' . { self  . #newMorph } }.		{'authoring tools...' . { self  . #scriptingDo } }.		{'playfield options...' . { self  . #playfieldDo } }.		{'projects...' . { self  . #projectDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'print PS to file...' . { self  . #printWorldOnFile } }.			{'debug...' . { self  . #debugDo } }}].	self fillIn: menu from: { 		nil.		{'save' . { self  . #saveSession } }.		{'save as...' . { Smalltalk . #saveAs } }.		{'save and quit' . { self  . #saveAndQuit } }.		{'quit' . { self  . #quitSession } }}.	^ menu! !Preferences class removeSelector: #emptyDragStartsASelection!Preferences class removeSelector: #helpMsgsAdditionmorphicemptyDragStartsASelection!Preferences class removeSelector: #initialValuesAdditionmorphicemptyDragStartsASelection!