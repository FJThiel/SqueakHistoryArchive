'From Squeak2.6 of 11 October 1999 [latest update: #1736] on 28 December 1999 at 3:22:15 pm'!"Change Set:		miscDecFixes-swDate:			28 December 1999Author:			Scott Wallace(1)  Honor the stickiness property in system windows (there were two cases that had slipped through the cracks)(2)  Fix two cases where #shrinkToFit rather than #shrinkWrap was issued.(3)  Add an item to the morphic window menu to let the user mark a window as undraggable.(4)  Includes Stefan Matthias Aust's enhancement that offers #center as an an alternative 'edge' in the adhere to edge... dialog.(5)  The 'diff' button in the various morphic tools is now more satisfyingly positioned."!!CodeHolder methodsFor: 'as yet unclassified' stamp: 'sw 12/28/1999 15:18'!diffButton	|  outerButton aButton |	"Return a checkbox that lets the user decide whether diffs should be shown or not"	outerButton _ AlignmentMorph newRow.	outerButton centering: #center.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #spaceFill.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleDiff;		getSelector: #showDiffs.	outerButton addMorphBack: (StringMorph contents: 'diffs') lock.	outerButton setBalloonText: 'If checked, then code differences from the previous version, if any, will be shown.'.	^ outerButton! !!Morph methodsFor: 'menus' stamp: 'sma 12/19/1999 17:49'!adhereToEdge	| menu |	menu _ MenuMorph new defaultTarget: self.	#(top right bottom left - center - topLeft topRight bottomRight bottomLeft - none)		do: [:each |			each == #-				ifTrue: [menu addLine]				ifFalse: [menu add: each asString selector: #setToAdhereToEdge: argument: each]].	menu popUpAt: self position forHand: self primaryHand! !!Preferences class methodsFor: 'pref buttons' stamp: 'sw 12/14/1999 17:58'!buttonRepresenting: prefSymbol wording: aString color: aColor	"self currentHand attachMorph: (Preferences buttonRepresenting: #balloonHelpEnabled wording: 'Balloon Help' color: nil)"	"Return a button that controls the setting of prefSymbol.  It will keep up to date even if the preference value is changed in a different place"	| outerButton aButton aForm |	(FlagDictionary includesKey: prefSymbol) ifFalse: [self error: 'Unknown preference: ', prefSymbol printString].	outerButton _ AlignmentMorph newRow height: 24.	outerButton color:  (aColor ifNil: [Color r: 0.645 g: 1.0 b: 1.0]).	outerButton hResizing: #spaceFill; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph new).	aButton onImage: (aForm _ ScriptingSystem formAtKey: #ButtonOn);		pressedImage:	aForm;		offImage: (ScriptingSystem formAtKey: #ButtonOff);		actionSelector: #togglePreference:;		extent: 20 @ 20;		arguments: (Array with: prefSymbol);		target: Preferences;		getSelector: prefSymbol.	outerButton addTransparentSpacerOfSize: (2 @ 0).	outerButton addMorphBack: (StringMorph contents: aString font: Preferences standardButtonFont) lock.	outerButton setBalloonText: (Preferences helpMessageForPreference: prefSymbol).	^ outerButton! !!SystemWindow methodsFor: 'events' stamp: 'sw 12/22/1999 11:58'!mouseDown: evt	| cp |	TopWindow == self ifFalse: [self activate].	(Sensor redButtonPressed "If mouse is really still down after activate"			and: [self labelRect containsPoint: evt cursorPoint]) ifTrue:		[^ self isSticky ifFalse:			[self fastFramingOn 				ifTrue: [self doFastFrameDrag]				ifFalse: [evt hand grabMorph: self topRendererOrSelf]]].	model windowActiveOnFirstClick ifTrue:		["Normally window keeps control of first click.		Need explicit transmission for first-click activity."		cp _ evt cursorPoint.		submorphs do: [:m | (m containsPoint: cp) ifTrue: [m mouseDown: evt]]]! !!SystemWindow methodsFor: 'menu' stamp: 'sw 12/22/1999 13:09'!buildWindowMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu add: 'change title...' action: #relabel.	aMenu addLine.	aMenu add: 'send to back' action: #sendToBack.	aMenu add: 'make next-to-topmost' action: #makeSecondTopmost.	aMenu addLine.	self mustNotClose		ifFalse:			[aMenu add: 'make unclosable' action: #makeUnclosable]		ifTrue:			[aMenu add: 'make closable' action: #makeClosable].	aMenu add: (self isSticky ifTrue: ['make draggable'] ifFalse: ['make undraggable']) 		action: #toggleStickiness.	aMenu addLine.	aMenu add: 'full screen' action: #fullScreen.	self isCollapsed ifFalse: [aMenu add: 'window color...' action: #setWindowColor].	^aMenu! !