'From Squeak2.6 of 11 October 1999 [latest update: #1735] on 28 December 1999 at 1:20:52 pm'!"Change Set:		mvcDebugButtons-sbwDate:			28 December 1999Author:			Stephan B. WesselsAdds buttons to the mvc pre-debug notifier and debugger, and makes annotation panes available in the mvc debugger.(mildly tweaked by Scott Wallace)"!!Debugger methodsFor: 'initialize' stamp: 'sbw 12/23/1999 10:00'!buildMVCDebuggerViewLabel: aString minSize: aPoint	| topView stackListView stackCodeView rcvrVarView rcvrValView ctxtVarView ctxtValView deltaY underPane annotationPane buttonsView |	self expandStack.	topView _ StandardSystemView new model: self.	topView borderWidth: 1.	stackListView _ PluggableListView on: self			list: #contextStackList			selected: #contextStackIndex			changeSelected: #toggleContextStackIndex:			menu: #contextStackMenu:shifted:			keystroke: #contextStackKey:from:.		stackListView menuTitleSelector: #messageListSelectorTitle.		stackListView window: (0 @ 0 extent: 150 @ 50).		topView addSubView: stackListView.	deltaY _ 0.	Preferences useAnnotationPanes		ifTrue:			[annotationPane _ PluggableTextView on: self				text: #annotation accept: nil readSelection: nil menu: nil.			annotationPane window: (0@0 extent: 150@self optionalAnnotationHeight).			topView addSubView: annotationPane below: stackListView.			deltaY _ deltaY + self optionalAnnotationHeight.			underPane _ annotationPane]		ifFalse:			[underPane _ stackListView].	Preferences optionalButtons ifTrue:			[buttonsView _ self buildMVCOptionalButtonsButtonsView.			buttonsView borderWidth: 1.			topView addSubView: buttonsView below: underPane.			underPane _ buttonsView.			deltaY _ deltaY + self optionalButtonHeight].	stackCodeView _ PluggableTextView on: self			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.		stackCodeView window: (0 @ 0 extent: 150 @ (75 - deltaY)).		topView addSubView: stackCodeView below: underPane.	rcvrVarView _ PluggableListView on: self receiverInspector			list: #fieldList			selected: #selectionIndex			changeSelected: #toggleIndex:			menu: #fieldListMenu:			keystroke: #inspectorKey:from:.		rcvrVarView window: (0 @ 0 extent: 25 @ (50 - deltaY)).		topView addSubView: rcvrVarView below: stackCodeView.	rcvrValView _ PluggableTextView on: self receiverInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.		rcvrValView window: (0 @ 0 extent: 50 @ (50 - deltaY)).		topView addSubView: rcvrValView toRightOf: rcvrVarView.	ctxtVarView _ PluggableListView on: self contextVariablesInspector			list: #fieldList			selected: #selectionIndex			changeSelected: #toggleIndex:			menu: #fieldListMenu:			keystroke: #inspectorKey:from:.		ctxtVarView window: (0 @ 0 extent: 25 @ (50 - deltaY)).		topView addSubView: ctxtVarView toRightOf: rcvrValView.	ctxtValView _ PluggableTextView on: self contextVariablesInspector			text: #contents accept: #accept:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.		ctxtValView window: (0 @ 0 extent: 50 @ (50 - deltaY)).		topView addSubView: ctxtValView toRightOf: ctxtVarView.	topView label: aString.	topView minimumSize: aPoint.	^ topView! !!Debugger methodsFor: 'initialize' stamp: 'sw 12/28/1999 13:12'!buildMVCNotifierButtonView	| aView bHeight priorButton buttonView |	aView _ View new model: self.	bHeight _ self notifierButtonHeight.	aView window: (0@0 extent: 350@bHeight).	priorButton _ nil.	self preDebugButtonQuads do:		[:aSpec |			buttonView _ PluggableButtonView				on: self				getState: nil				action: aSpec second..			buttonView				label: aSpec first;				insideColor: (Color perform: aSpec third) muchLighter lighter;				borderWidthLeft: 1 right: 1 top: 0 bottom: 0;				window: (0@0 extent: 117@bHeight).			priorButton				ifNil:					[aView addSubView: buttonView]				ifNotNil:					[aView addSubView: buttonView toRightOf: priorButton].			priorButton _ buttonView].	^ aView! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/23/1999 08:36'!buildMVCNotifierViewLabel: aString message: messageString minSize: aPoint	| topView aStringHolderView buttonView x y bHeight |	topView _ StandardSystemView new model: self.	topView borderWidth: 1.	buttonView _ self buildMVCNotifierButtonView.	topView addSubView: buttonView.	aStringHolderView _ PluggableTextView on: self		text: #contents		accept: #doNothing:		readSelection: #contentsSelection		menu: #debugProceedMenu:.	aStringHolderView		editString: messageString;		askBeforeDiscardingEdits: false.	x _ 350 max: (aPoint x).	y _ ((4 * 15) + 16) max: (aPoint y - 16 - self optionalButtonHeight).	bHeight _ self optionalButtonHeight.	y _ y - bHeight.	aStringHolderView window: (0@0 extent: x@y).	topView		addSubView: aStringHolderView below: buttonView;		label: aString;		minimumSize: aPoint.	^ topView! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/28/1999 11:38'!buildMVCOptionalButtonsButtonsView	| aView bHeight offset aButtonView wid pairs windowWidth previousView |	aView _ View new model: self.	bHeight _ self optionalButtonHeight.	windowWidth _ 150.	aView window: (0@0 extent: windowWidth@bHeight).	offset _ 0.	pairs _ self optionalButtonPairs.	previousView _ nil.	pairs do: [:pair |		aButtonView _ PluggableButtonView on: self getState: nil action: pair last.		pair last = pairs last last			ifTrue:				[wid _ windowWidth - offset]			ifFalse:				[aButtonView borderWidthLeft: 0 right: 1 top: 0 bottom: 0.				wid _ windowWidth // (pairs size)].		aButtonView			label: pair first asParagraph;			insideColor: Color red muchLighter lighter;			window: (offset@0 extent: wid@bHeight).		offset _ offset + wid.		pair last = pairs first last			ifTrue: [aView addSubView: aButtonView]			ifFalse: [aView addSubView: aButtonView toRightOf: previousView].		previousView _ aButtonView].	^ aView! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/22/1999 16:21'!buttonRowForPreDebugWindow: aDebugWindow	| aRow aButton |	aRow _ AlignmentMorph newRow hResizing: #spaceFill.	aRow beSticky.	aButton _ SimpleButtonMorph new target: aDebugWindow.	aButton color: Color transparent; borderWidth: 1.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	self preDebugButtonQuads do:			[:quad |				aButton _ aButton fullCopy.				aButton actionSelector: quad second.				aButton label: quad first.				aButton submorphs first color: (Color colorFrom: quad third).				aButton setBalloonText: quad fourth.				aRow addMorphBack: aButton.				aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer].	^ aRow! !!Debugger methodsFor: 'initialize' stamp: 'sw 12/28/1999 13:07'!notifierButtonHeight	^ 18! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/23/1999 08:31'!openNotifierContents: msgString label: label	"Create and schedule a notifier view with the given label and message. A notifier view shows just the message or the first several lines of the stack, with a menu that allows the user to open a full debugger if so desired."	"NOTE: When this method returns, a new process has been scheduled to run the windows, and thus this notifier, but the previous active porcess has not been suspended.  The sender will do this."	| msg topView p |	Sensor flushKeyboard.	(label beginsWith: 'Space is low')		ifTrue: [msg _ self lowSpaceChoices, msgString]		ifFalse: [msg _ msgString].	World ifNotNil:		[self buildMorphicNotifierLabelled: label message: msg.		^ Project current spawnNewProcessIfNeeded].	Display fullScreen.	Cursor normal show.	topView _ self buildMVCNotifierViewLabel: label message: msg minSize: 350@((14 * 5) + 16 + self optionalButtonHeight).	ScheduledControllers activeController		ifNil: [p _ Display boundingBox center]		ifNotNil: [p _ ScheduledControllers activeController view displayBox center].	topView controller openNoTerminateDisplayAt: (p max: (200@60)).	^ topView! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/23/1999 09:50'!optionalAnnotationHeight	^ 10! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/23/1999 08:31'!optionalButtonHeight	^ 10! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/23/1999 09:28'!optionalButtonPairs	^ #(('Proceed'		proceed)		('Restart'		restart)		('Send'			send)		('Step'			doStep)		('Full Stack'		fullStack)		('Where'		where)		('Browse'		browseMethodFull))! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/22/1999 16:18'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightRed; borderWidth: 1; borderColor: Color red darker.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs do:		[:pair |				aButton _ aButton fullCopy.				aButton actionSelector: pair second.				aButton label: pair first.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!Debugger methodsFor: 'initialize' stamp: 'sbw 12/22/1999 16:20'!preDebugButtonQuads	^ #(('Proceed'		proceed 	blue 	'continue execution' )		('Abandon'		abandon 	black 	'close this window')		('Debug'		debug 		red 		'bring up a debugger'))! !!Debugger methodsFor: 'context stack menu' stamp: 'sw 12/28/1999 13:04'!abandon	"abandon the debugger from its pre-debug notifier"	self abandon: self topView! !!Debugger methodsFor: 'context stack menu' stamp: 'sw 12/28/1999 13:05'!abandon: aTopView 	"abandon the notifier represented by aTopView"	aTopView controller close! !