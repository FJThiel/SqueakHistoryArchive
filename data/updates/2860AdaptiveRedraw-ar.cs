'From Squeak2.9alpha of 13 June 2000 [latest update: #2907] on 26 October 2000 at 11:59:02 pm'!"Change Set:		AdaptiveRedraw-arDate:			26 October 2000Author:			Andreas RaabA small tweak with large implications in the etoy system. Makes Thumbnails redrawing themselves based on the time it took to create the thumbnail. For complex objects being viewed most time was spent in computing those thumbnails (for no good reason). The new policy updates the thumbnail after 20 * redraw time attempting to give maximum responsibility."!RectangleMorph subclass: #ThumbnailMorph	instanceVariableNames: 'objectToView viewSelector lastSketchForm lastFormShown drawTime '	classVariableNames: 'RecursionDepth RecursionMax '	poolDictionaries: ''	category: 'Morphic-Widgets'!!ThumbnailMorph methodsFor: 'copying' stamp: 'ar 10/26/2000 23:55'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."objectToView _ objectToView.		Weakly copied"viewSelector _ viewSelector veryDeepCopyWith: deepCopier.lastSketchForm _ lastSketchForm veryDeepCopyWith: deepCopier.lastFormShown _ lastFormShown veryDeepCopyWith: deepCopier.drawTime _ drawTime veryDeepCopyWith: deepCopier.! !!ThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'ar 10/26/2000 23:44'!drawMeOn: aCanvas	"Draw a small view of a morph in another place. Guard against infinite recursion if that morph has a thumbnail of itself inside."	| actualViewee viewedMorphBox myBox scale c shrunkForm aWorld |	super drawOn: aCanvas.	((((actualViewee _ self actualViewee) ~~ nil and: [(aWorld _ actualViewee world) ~~ nil])			and: [aWorld ~~ actualViewee or: [lastFormShown == nil]]) and: [RecursionDepth + 1 < RecursionMax])		ifTrue:			[RecursionDepth _ RecursionDepth + 1.			viewedMorphBox _ actualViewee fullBounds.			myBox _ self innerBounds.			scale _ myBox width / (viewedMorphBox width max: viewedMorphBox		height).			c _ Display defaultCanvasClass extent: viewedMorphBox extent depth: aCanvas depth.			c translateBy: viewedMorphBox topLeft negated 				"recursion happens here"				during:[:tempCanvas| tempCanvas fullDrawMorph: actualViewee].			shrunkForm _ c form magnify: c form boundingBox by: scale smoothing: 1.			lastFormShown _ shrunkForm.			RecursionDepth _ RecursionDepth - 1]		ifFalse:  "This branch used if we've recurred, or if the thumbnail views a World that's already been rendered once, or if the referent is not in a world at the moment"			[lastFormShown ifNotNil: [shrunkForm _ lastFormShown]].	shrunkForm ifNotNil:		[aCanvas paintImage: shrunkForm at: self center - shrunkForm boundingBoxcenter]	"sw 12/20/1999 13:35 special-case code for SketchMorph commented out, since it seems to have done more harm than good: 			((actualViewee isKindOf: SketchMorph) and: [false])				ifTrue:					[diag _ actualViewee form extent  asInteger.					viewedMorphBox _						(actualViewee bounds center - (diag // 2)) extent: diag@diag]				ifFalse:					[viewedMorphBox _ actualViewee fullBounds]."! !!ThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'ar 10/26/2000 23:45'!drawOn: aCanvas	"Draw a small view of a morph in another place. Guard against infinite recursion if that morph has a thumbnail of itself inside."	| time |	time _ Time millisecondClockValue.	self drawMeOn: aCanvas.	drawTime _ Time millisecondClockValue - time.	drawTime < 0 ifTrue:[drawTime _ nil].! !!ThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'ar 10/26/2000 23:53'!stepTime 	"Adjust my step time to the time it takes drawing my referent"	drawTime ifNil:[^ 250].	^(20*drawTime) max: 250.! !!ThumbnailMorph methodsFor: 'object fileIn' stamp: 'ar 10/26/2000 23:58'!convertbosfcebbovll0: varDict bosfcebbovlld0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor' 'objectToView' 'viewSelector' 'lastSketchForm' 'lastFormShown').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('drawTime')  If a non-nil value is needed, please assign it."! !