'From Squeak3.7-m17n of 30 June 2004 [latest update: #6] on 2 July 2004 at 9:59:34 pm'!!AlignmentMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 17:19'!defaultNameStemForInstances	^ 'Alignment' translated.! !!AlignmentMorphBob1 methodsFor: 'as yet unclassified' stamp: 'yo 7/2/2004 17:20'!fancyText: aString ofSize: pointSize color: aColor	| answer tm |	answer _ self inAColumn: {		tm _ TextMorph new 			beAllFont: ((TextStyle default fontOfSize: pointSize) emphasized: 1);			color: aColor;			contents: aString translated	}.	tm addDropShadow.	tm shadowPoint: (5@5) + tm bounds center.	tm lock.	^answer! !!BorderStyle class methodsFor: 'instance creation' stamp: 'yo 7/2/2004 17:21'!borderStyleForSymbol: sym	"Answer a border style corresponding to the given symbol"	| aSymbol |	aSymbol _ sym == #none ifTrue: [#simple] ifFalse: [sym].	^ self perform: aSymbol"	| aSymbol selector |	aSymbol _ sym == #none ifTrue: [#simple] ifFalse: [sym].	selector _ Vocabulary eToyVocabulary translationKeyFor: aSymbol.	selector isNil ifTrue: [selector _ aSymbol].	^ self perform: selector"! !!ComplexProgressIndicator methodsFor: 'as yet unclassified' stamp: 'yo 7/2/2004 17:35'!addProgressDecoration: extraParam 	| f m |	targetMorph ifNil: [^self].	(extraParam isForm) 		ifTrue: 			[targetMorph 				submorphsDo: [:mm | (mm isKindOf: SketchMorph) ifTrue: [mm delete]].			f := Form extent: extraParam extent depth: extraParam depth.			extraParam displayOn: f.			m := SketchMorph withForm: f.			m align: m fullBounds leftCenter				with: targetMorph fullBounds leftCenter + (2 @ 0).			targetMorph addMorph: m.			^self].	(extraParam isString) 		ifTrue: 			[targetMorph 				submorphsDo: [:mm | (mm isKindOf: StringMorph) ifTrue: [mm delete]].			m := StringMorph contents: extraParam translated.			m align: m fullBounds bottomCenter + (0 @ 8)				with: targetMorph bounds bottomCenter.			targetMorph addMorph: m.			^self]! !!CompoundTileMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 17:41'!initialize	"initialize the state of the receiver"	| r stringMorph |	super initialize.	""	self layoutInset: 2.	self listDirection: #topToBottom.	self hResizing: #spaceFill;		 vResizing: #shrinkWrap;		 cellInset: 0 @ 1;		 minCellSize: 200 @ 14.	r _ AlignmentMorph newRow color: color;				 layoutInset: 0.	r setProperty: #demandsBoolean toValue: true.	r addMorphBack: (Morph new color: color;			 extent: 2 @ 5).	"spacer"	stringMorph _ StringMorph new contents: 'Test' translated.	stringMorph name: 'Test'.	r addMorphBack: stringMorph.	r addMorphBack: (Morph new color: color;			 extent: 5 @ 5).	"spacer"	r addMorphBack: (testPart _ BooleanScriptEditor new borderWidth: 0;					 layoutInset: 1).	testPart color: Color transparent.	testPart hResizing: #spaceFill.	self addMorphBack: r.	r _ AlignmentMorph newRow color: color;				 layoutInset: 0.	r addMorphBack: (Morph new color: color;			 extent: 30 @ 5).	"spacer"	stringMorph _ StringMorph new contents: 'Yes' translated.	stringMorph name: 'Yes'.	r addMorphBack: stringMorph.	r addMorphBack: (Morph new color: color;			 extent: 5 @ 5).	"spacer"	r addMorphBack: (yesPart _ ScriptEditorMorph new borderWidth: 0;					 layoutInset: 2).	yesPart hResizing: #spaceFill.	yesPart color: Color transparent.	self addMorphBack: r.	r _ AlignmentMorph newRow color: color;				 layoutInset: 0.	r addMorphBack: (Morph new color: color;			 extent: 35 @ 5).	"spacer"	stringMorph _ StringMorph new contents: 'No' translated.	stringMorph name: 'No'.	r addMorphBack: stringMorph.	r addMorphBack: (Morph new color: color;			 extent: 5 @ 5).	"spacer"	r addMorphBack: (noPart _ ScriptEditorMorph new borderWidth: 0;					 layoutInset: 2).	noPart hResizing: #spaceFill.	noPart color: Color transparent.	self addMorphBack: r.	self bounds: self fullBounds.	self updateWordingToMatchVocabulary.! !!CompoundTileMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 17:35'!updateWordingToMatchVocabulary	| labels |	labels _ OrderedCollection new.	self submorphs do: [:submorph |		submorph submorphs do: [:subsubmorph |			subsubmorph class == StringMorph ifTrue: [labels add: subsubmorph]]].	labels do: [:label | label acceptValue: label knownName translated]! !!Debugger methodsFor: 'initialize' stamp: 'yo 7/2/2004 17:42'!preDebugNotifierContentsFrom: messageString	^ Preferences eToyFriendly		ifFalse:			[messageString]		ifTrue:			['An error has occurred; you should probably just hit ''abandon''.  Sorry!!' translated] ! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 17:52'!createQueryTextMorph: queryString 	"create the queryTextMorph"	| result frame |	result := TextMorph new contents: queryString.	result setNameTo: 'query' translated.	result lock.	frame := LayoutFrame new.	frame topFraction: 0.0;		 topOffset: 2.	frame leftFraction: 0.5;		 leftOffset: (result width // 2) negated.	result layoutFrame: frame.	self addMorph: result.	^ result! !!FlapTab methodsFor: 'edge' stamp: 'yo 11/4/2002 20:50'!setEdge: anEdge	"Set the edge as indicated, if possible"	| newOrientation |	self edgeToAdhereTo = anEdge ifTrue: [^ self].	newOrientation _ nil.	self orientation == #vertical		ifTrue: [(#(top bottom) includes: anEdge) ifTrue:					[newOrientation _ #horizontal]]		ifFalse: [(#(top bottom) includes: anEdge) ifFalse:					[newOrientation _ #vertical]].	self edgeToAdhereTo: anEdge.	newOrientation ifNotNil: [self transposeParts].	referent isInWorld ifTrue: [self positionReferent].	self changeTabText: self existingWording.	self adjustPositionVisAVisFlap! !!FlapTab methodsFor: 'menu' stamp: 'yo 7/2/2004 17:58'!changeTabText	"Allow the user to change the text on the tab"	| reply |	reply _ FillInTheBlank		request: 'new wording for this tab:' translated		initialAnswer: self existingWording.	reply isEmptyOrNil ifTrue: [^ self].	self changeTabText: reply.! !!FlapTab methodsFor: 'textual tabs' stamp: 'yo 8/11/2003 21:27'!changeTabText: aString 	| label |	aString isEmptyOrNil ifTrue: [^ self].	label _ Smalltalk primaryLanguage flapTabTextFor: aString in: self.	label isEmptyOrNil ifTrue: [^ self].	self useStringTab: label.	submorphs first delete.	self assumeString: label		font: Preferences standardFlapFont		orientation: (Flaps orientationForEdge: self edgeToAdhereTo)		color: nil.! !!FreeTranslation class methodsFor: 'translation' stamp: 'yo 8/11/2003 21:12'!extract: aMimeDoc	| pageSource str |	"Extract the translated text from the web page"	(aMimeDoc content beginsWith: 'error') ifTrue: [^ aMimeDoc content].	pageSource _ aMimeDoc content.	"brute force way to pull out the result"	str _ ReadStream on: pageSource.	str match: 'Translation Results by Transparent Language'.	str match: '<p>'.	^ str upToAll: '</p>'! !!LanguageEnvironment class methodsFor: 'rendering support' stamp: 'yo 7/2/2004 17:57'!flapTabTextFor: aString	"self subclassResponsibility."	^ aString.! !!LanguageEnvironment class methodsFor: 'rendering support' stamp: 'yo 7/2/2004 17:57'!flapTabTextFor: aString in: aFlapTab	"self subclassResponsibility."	^ aString.! !!JapaneseEnvironment class methodsFor: 'language methods' stamp: 'yo 7/2/2004 18:00'!flapTabTextFor: aString in: aFlapTab	^ aString translated.! !!MethodMorph class methodsFor: 'as yet unclassified' stamp: 'yo 7/2/2004 18:03'!defaultNameStemForInstances	^ 'Method' translated.! !!NebraskaServerMorph methodsFor: 'drawing' stamp: 'yo 7/2/2004 18:39'!updateCurrentStatusString	self server ifNil:[		currentStatusString _ '<Nebraska not active>' translated.		currentBacklogString _ ''.	] ifNotNil:[		currentStatusString _ 			' Nebraska: ' translated, 			self server numClients printString, 			' clients' translated.		currentBacklogString _ 'backlog: ' translated,				((previousBacklog _ self server backlog) // 1024) printString,'k'	].! !!NebraskaServerMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 18:38'!rebuild	| myServer toggle closeBox font |	font _ StrikeFont familyName: #Palatino size: 14.	self removeAllMorphs.	self setColorsAndBorder.	self updateCurrentStatusString.	toggle _ SimpleHierarchicalListMorph new perform: (		fullDisplay ifTrue: [#expandedForm] ifFalse: [#notExpandedForm]	).	closeBox _ SimpleButtonMorph new borderWidth: 0;			label: 'X' font: Preferences standardButtonFont; color: Color transparent;			actionSelector: #delete; target: self; extent: 14@14;			setBalloonText: 'End Nebrasks session'.	self addARow: {		self inAColumn: {closeBox}.		self inAColumn: {			UpdatingStringMorph new				useStringFormat;				target:  self;				font: font;				getSelector: #currentStatusString;				contents: self currentStatusString;				stepTime: 2000;				lock.		}.		self inAColumn: {			toggle asMorph				on: #mouseUp send: #toggleFull to: self;				setBalloonText: 'Show more or less of Nebraska Status'		}.	}.	myServer _ self server.	(myServer isNil or: [fullDisplay not]) ifTrue: [		^World startSteppingSubmorphsOf: self	].	"--- the expanded display ---"	self addARow: {		self inAColumn: {			UpdatingStringMorph new				useStringFormat;				target:  self;				font: font;				getSelector: #currentBacklogString;				contents: self currentBacklogString;				stepTime: 2000;				lock.		}.	}.	self addARow: {		self inAColumn: {			(StringMorph contents: '--clients--' translated) lock; font: font.		}.	}.	myServer clients do: [ :each |		self addARow: {			UpdatingStringMorph new				useStringFormat;				target: each;				font: font;				getSelector: #currentStatusString;				contents: each currentStatusString;				stepTime: 2000;				lock.		}	].	World startSteppingSubmorphsOf: self.! !!PaintBoxMorph methodsFor: 'initialization' stamp: 'yo 11/4/2002 21:20'!loadOffForm: pic16Bit 	"Prototype loadOffForm: (Smalltalk imageImports at: #offPaletteJapanese)"	| blt |	OriginalBounds _ pic16Bit boundingBox.	AllOffImage _ Form extent: OriginalBounds extent depth: 16.	blt _ BitBlt current toForm: AllOffImage.	blt sourceForm: pic16Bit;		 combinationRule: Form over;		 sourceRect: OriginalBounds;		 destOrigin: 0 @ 0;		 copyBits.	AllOffImage mapColor: Color blue to: Color transparent.	self image: AllOffImage.	AllOffImage _ nil.	self invalidRect: bounds! !!PaintBoxMorph methodsFor: 'initialization' stamp: 'yo 11/4/2002 21:20'!loadPressedForm: pic16Bit 	"Prototype loadPressedForm: (Smalltalk imageImports at: #pressedPaletteJapanese)"	| blt on |	AllPressedImage _ AllPressedImage _ Form extent: OriginalBounds extent depth: 16.	blt _ BitBlt current toForm: AllPressedImage.	blt sourceForm: pic16Bit;		 combinationRule: Form over;		 sourceRect: OriginalBounds;		 destOrigin: 0 @ 0;		 copyBits.	AllPressedImage mapColor: Color black to: Color transparent.	self		allMorphsDo: [:button | (button isKindOf: ThreePhaseButtonMorph)				ifTrue: [on _ Form extent: button extent depth: 16.					on						copy: (0 @ 0 extent: button extent)						from: button topLeft - self topLeft						in: AllPressedImage						rule: Form over.					button pressedImage: on]].	AllPressedImage _ nil.	self invalidRect: bounds! !!PartsBin class methodsFor: 'instance creation' stamp: 'yo 7/2/2004 18:50'!newPartsBinWithOrientation: aListDirection from: quadList	"Answer a new PartBin object, to run horizontally or vertically, obtaining its elements from the list of tuples of the form:		(<receiver> <selector> <label> <balloonHelp>)"	| array |	array _ quadList collect: [:each |		| element |		element _ each copy. 		element at: 3 put: (each at: 3) translated.		element.	].	^ self new listDirection: aListDirection quadList: array.! !!PhraseTileMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 18:50'!defaultNameStemForInstances	^ 'PhraseTile' translated.! !!Player methodsFor: 'slots-user' stamp: 'yo 7/2/2004 19:02'!addInstanceVariable	"Offer the user the opportunity to add an instance variable, and if he goes through with it, actually add it."	| itsName initialValue typeChosen usedNames initialAnswer setterSelector originalString |	usedNames _ self class instVarNames.	initialAnswer _ Utilities keyLike: ('var' translated, (usedNames size + 1) asString)  satisfying: [:aKey | (usedNames includes: aKey) not].	originalString _ FillInTheBlank request: 'name for new variable: ' translated initialAnswer: initialAnswer.	originalString isEmptyOrNil ifTrue: [^ self].	itsName _ ScriptingSystem acceptableSlotNameFrom: originalString forSlotCurrentlyNamed: nil asSlotNameIn: self world: self costume world. 	itsName size == 0 ifTrue: [^ self].		self assureUniClass.	typeChosen _ self initialTypeForSlotNamed: itsName.	self slotInfo at: itsName put: (SlotInformation new initialize type: typeChosen).	initialValue _ self initialValueForSlotOfType: typeChosen.	self addInstanceVarNamed: itsName withValue: initialValue.	self class compileAccessorsFor: itsName.	setterSelector _ Utilities setterSelectorFor: itsName.	(self class allSubInstances copyWithout: self) do:		[:anInstance | anInstance perform: setterSelector with: initialValue].	self updateAllViewersAndForceToShow: ScriptingSystem nameForInstanceVariablesCategory! !!Player methodsFor: 'slots-user' stamp: 'yo 7/2/2004 19:03'!chooseSlotTypeFor: aGetter	"Let the user designate a type for the slot associated with the given getter"	| typeChoices typeChosen slotName |	slotName _ Utilities inherentSelectorForGetter: aGetter.	typeChoices _ Vocabulary typeChoices.	typeChosen _ (SelectionMenu selections: typeChoices lines: #()) startUpWithCaption: 		('Choose the TYPEfor ' translated, slotName, '(currently ' translated, (self slotInfoAt: slotName) type translated, ')').	typeChosen isEmptyOrNil ifTrue: [^ self].	(self typeForSlot: slotName) capitalized = typeChosen ifTrue: [^ self].	(self slotInfoAt: slotName) type: typeChosen.	self class allInstancesDo:   "allSubInstancesDo:"		[:anInst | anInst instVarNamed: slotName asString put: 			(anInst valueOfType: typeChosen from: (anInst instVarNamed: slotName))].	self updateAllViewers.	"does siblings too"! !!Player methodsFor: 'slots-user' stamp: 'yo 7/2/2004 19:36'!renameSlot: oldSlotName 	| reply newSlotName |	reply := FillInTheBlank request: 'New name for "' translated , oldSlotName , '":'				initialAnswer: oldSlotName.	reply isEmpty ifTrue: [^self].	newSlotName := ScriptingSystem 				acceptableSlotNameFrom: reply				forSlotCurrentlyNamed: oldSlotName				asSlotNameIn: self				world: self costume currentWorld.	self renameSlot: oldSlotName newSlotName: newSlotName! !!Player methodsFor: 'slots-user' stamp: 'yo 7/2/2004 19:36'!setPrecisionFor: slotName 	"Set the precision for the given slot name"	| aList aMenu reply val aGetter places |	aGetter := Utilities getterSelectorFor: slotName.	places := Utilities 				decimalPlacesForFloatPrecision: (self defaultFloatPrecisionFor: aGetter).	aList := #('0' '1' '2' '3' '4' '5' '6').	aMenu := SelectionMenu labels: aList				selections: (aList collect: [:m | m asNumber]).	reply := aMenu 				startUpWithCaption: 'How many decimal places? (currently ' translated						, places asString , ')'.	reply ifNotNil: 			[(self slotInfo includesKey: slotName) 				ifTrue: 					["it's a user slot"					(self slotInfoAt: slotName) 						floatPrecision: (Utilities floatPrecisionForDecimalPlaces: reply).					self class allInstancesDo: 							[:anInst | 							reply == 0 								ifFalse: 									[((val := anInst instVarNamed: slotName asString) isInteger) 										ifTrue: [anInst instVarNamed: slotName asString put: val asFloat]].							anInst updateAllViewers]]				ifFalse: 					["it's specifying a preference for precision on a system-defined numeric slot"					self noteDecimalPlaces: reply forGetter: aGetter.					self updateAllViewers]]! !!Player methodsFor: 'viewer' stamp: 'yo 7/2/2004 19:35'!infoFor: anElement inViewer: aViewer 	"The user made a gesture asking for info/menu relating"	| aMenu elementType aSelector |	elementType := self elementTypeFor: anElement				vocabulary: aViewer currentVocabulary.	elementType = #systemSlot | (elementType == #userSlot) 		ifTrue: [^self slotInfoButtonHitFor: anElement inViewer: aViewer].	aMenu := MenuMorph new defaultTarget: self.	aMenu defaultTarget: self.	aSelector := anElement asSymbol.	elementType == #userScript 		ifTrue: 			[aMenu 				add: 'destroy "' translated , anElement , '"'				selector: #removeScriptWithSelector:				argument: aSelector.			aMenu 				add: 'rename  "' translated, anElement , '"'				selector: #renameScript:				argument: aSelector.			aMenu 				add: 'textual scripting pane' translated				selector: #makeIsolatedCodePaneForSelector:				argument: aSelector.			aSelector numArgs > 0 				ifTrue: 					[aMenu 						add: 'remove parameter' translated						selector: #ceaseHavingAParameterFor:						argument: aSelector]				ifFalse: 					[aMenu 						add: 'add parameter' translated						selector: #startHavingParameterFor:						argument: aSelector.					aMenu 						add: 'button to fire this script' translated						selector: #tearOffButtonToFireScriptForSelector:						argument: aSelector].			aMenu 				add: 'edit balloon help' translated				selector: #editDescriptionForSelector:				argument: aSelector].	aMenu 		add: 'show categories....' translated		target: aViewer		selector: #showCategoriesFor:		argument: aSelector.	aMenu items isEmpty 		ifTrue: 			["Never 0 at the moment because of show categories addition"			aMenu add: 'ok' translated action: nil].	aMenu addTitle: anElement asString , ' (' , elementType , ')'.	aMenu popUpInWorld: aViewer world! !!Preferences class methodsFor: 'misc' stamp: 'yo 7/2/2004 19:44'!installTheme: aSymbol	"Install the theme represented by aSymbol.  The code that makes the theme-specific changes is lodged in a method of the same name as aSymbol, which must reside in category #themes in Preferences class"	self perform: aSymbol.	self inform: ('Theme {1} is now installed.Many of the changes will only benoticeable in new windows that youcreate from now on.' translated format: {aSymbol translated}).! !!Preferences class methodsFor: 'themes' stamp: 'ka 6/30/2002 13:53'!keihanna	"Settings more similar to those found in a standard browser-plug-in-based Squeak image than westwood"	self setPreferencesFrom: #(		(alternativeScrollbarLook true)		(alternativeWindowLook true)		(classicNavigatorEnabled true)		(eToyFriendly true)		(haloTransitions true)		(honorDesktopCmdKeys false)		(includeSoundControlInNavigator true)		(magicHalos true)		(menuKeyboardControl false)		(mouseOverHalos true)		(preserveTrash true)		(projectViewsInWindows false)		(propertySheetFromHalo true)		(showDirectionHandles true)		(soundStopWhenDone true)		(unlimitedPaintArea true)		(uniqueNamesInHalos true)		(uniTilesClassic false))! !!Presenter methodsFor: 'playerList' stamp: 'yo 7/2/2004 19:45'!allKnownScriptSelectors	"Answer a list of all the selectors implemented by any user-scripted objected within the scope of the receiver"	| aSet allUniclasses |	aSet _ Set with: ('script' translated , '1') asSymbol.	allUniclasses _ (self presenter allPlayersWithUniclasses collect:		[:aPlayer | aPlayer class]) asSet.	allUniclasses do:		[:aUniclass | aSet addAll: aUniclass namedTileScriptSelectors].	^ aSet asSortedArray"ActiveWorld presenter allKnownScriptSelectors"! !!Project methodsFor: 'menu messages' stamp: 'yo 7/2/2004 19:46'!exit	"Leave the current project and return to the project in which this one was created."	self isTopProject ifTrue: [^ self inform: 'Can''t exit the top project' translated].	parentProject enter: false revert: false saveForRevert: false.! !!Project methodsFor: 'file in/out' stamp: 'yo 7/2/2004 19:49'!loadFromServer: newerAutomatically	"If a newer version of me is on the server, load it."	| pair resp server |	self assureIntegerVersion.	self isCurrentProject ifTrue: ["exit, then do the command"		^ self armsLengthCommand: #loadFromServer withDescription: 'Loading' translated	].	server _ self tryToFindAServerWithMe ifNil: [^ nil].	pair _ self class mostRecent: self name onServer: server.	pair first ifNil: [^ self inform: ('can''t find file on server for {1}' translated format: {self name})].	self currentVersionNumber > pair second ifTrue: [		^ self inform: ('That server has an older version of the project.' translated)].	version = (Project parseProjectFileName: pair first) second ifTrue: [		resp _ (PopUpMenu labels: 'Reload anyway\Cancel' translated withCRs) startUpWithCaption: 					'The only changes are the ones you made here.' translated.		resp ~= 1 ifTrue: [^ nil]	] ifFalse: [		newerAutomatically ifFalse: [			resp _ (PopUpMenu labels: 'Load it\Cancel' withCRs) startUpWithCaption: 						'A newer version exists on the server.'.			resp ~= 1 ifTrue: [^ nil]		].	].	"let's avoid renaming the loaded change set since it will be replacing ours"	self projectParameters at: #loadingNewerVersion put: true.	ComplexProgressIndicator new 		targetMorph: nil;		historyCategory: 'project loading';		withProgressDo: [			ProjectLoading				installRemoteNamed: pair first				from: server				named: self name				in: parentProject		]! !!Project methodsFor: 'file in/out' stamp: 'yo 7/2/2004 19:50'!saveForRevert	"Exit to the parent project.  Do a GC.  Save the project in a segment.  Record the ImageSegment object as the revertToMe in Project parameters"	self isTopProject ifTrue: [^ self inform: 'Can''t exit the top project' translated].	parentProject enter: false revert: false saveForRevert: true.	"does not return!!"! !!Project methodsFor: 'file in/out' stamp: 'yo 7/2/2004 17:45'!storeOnServer	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	world setProperty: #optimumExtentFromAuthor toValue: world extent.	self validateProjectNameIfOK: [		self isCurrentProject ifTrue: ["exit, then do the command"			^ self 				armsLengthCommand: #storeOnServerAssumingNameValid				withDescription: 'Publishing' translated		].		self storeOnServerWithProgressInfo.	].! !!Project methodsFor: 'file in/out' stamp: 'yo 7/2/2004 17:45'!storeOnServerAssumingNameValid	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	world setProperty: #optimumExtentFromAuthor toValue: world extent.	self isCurrentProject ifTrue: ["exit, then do the command"		^ self 			armsLengthCommand: #storeOnServerAssumingNameValid			withDescription: 'Publishing' translated	].	self storeOnServerWithProgressInfo.! !!Project methodsFor: 'file in/out' stamp: 'yo 7/2/2004 19:59'!storeOnServerInnards	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	| resp newName primaryServerDirectory serverVersionPair localDirectory localVersionPair myVersionNumber warning maxNumber suppliedPassword oldResourceUrl |	self assureIntegerVersion.	"Find out what version"	primaryServerDirectory _ self primaryServerIfNil: [		(primaryServerDirectory _ self findAFolderToStoreProjectIn) ifNil: [^self].		oldResourceUrl _ self resourceUrl.		primaryServerDirectory == #localOnly ifTrue: [			self storeNewPrimaryURL: FileDirectory default url.			nil		] ifFalse: [			self storeNewPrimaryURL: primaryServerDirectory downloadUrl.			primaryServerDirectory		].	].	localDirectory _ self squeakletDirectory.	serverVersionPair _ self class mostRecent: self name onServer: primaryServerDirectory.	localVersionPair _ self class mostRecent: self name onServer: localDirectory.	maxNumber _ myVersionNumber _ self currentVersionNumber.	ProgressNotification signal: '2:versionsDetected'.	warning _ ''.	myVersionNumber < serverVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) on the server' translated.		maxNumber _ maxNumber max: serverVersionPair second.	].	myVersionNumber < localVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) in the local directory' translated.		maxNumber _ maxNumber max: localVersionPair second.	].	"8 Nov 2000 - only check on the first attempt to publish"	myVersionNumber = 0 ifTrue: [		warning isEmpty ifFalse: [			myVersionNumber = 0 ifTrue: [				warning _ warning,'\THIS PROJECT HAS NEVER BEEN SAVED' translated.			].			warning _ 'WARNING' translated, '\Project: ' translated, self name,warning.			resp _ (PopUpMenu labels: 'Store anyway\Cancel' translated withCRs) startUpWithCaption: 				(warning, '\Please cancel, rename this project, and see what is there.' translated) withCRs.				resp ~= 1 ifTrue: [^ nil]		].	].	version _ self bumpVersion: maxNumber.	oldResourceUrl		ifNotNil: [self resourceManager adjustToNewServer: self resourceUrl from: oldResourceUrl].	"write locally - now zipped automatically"	newName _ self versionedFileName.	lastSavedAtSeconds _ Time totalSeconds.	self exportSegmentFileName: newName directory: localDirectory.	(localDirectory readOnlyFileNamed: newName) setFileTypeToObject; close.	ProgressNotification signal: '4:localSaveComplete'.	"3 is deep in export logic"	primaryServerDirectory ifNotNil: [		suppliedPassword _ ''.		Preferences passwordsOnPublish ifTrue: [			suppliedPassword _ FillInTheBlank requestPassword: 'Project password' translated		].		[		primaryServerDirectory			writeProject: self			inFileNamed: newName asFileName			fromDirectory: localDirectory.		] on: ProjectPasswordNotification do: [ :ex |			ex resume: (suppliedPassword ifNil: [''])		].	].	ProgressNotification signal: '9999 save complete'.	"Later, store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	"2 to: servers size do: [:aServer | aServer putFile: local named: newName]."! !!Project methodsFor: 'file in/out' stamp: 'yo 7/2/2004 17:45'!storeOnServerShowProgressOn: aMorphOrNil forgetURL: forget	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	world setProperty: #optimumExtentFromAuthor toValue: world extent.	self validateProjectNameIfOK: [		self isCurrentProject ifTrue: ["exit, then do the command"			forget				ifTrue: [self forgetExistingURL]				ifFalse: [urlList isEmptyOrNil ifTrue: [urlList _ parentProject urlList copy]].			^self				armsLengthCommand: #storeOnServerAssumingNameValid				withDescription: 'Publishing' translated		].		self storeOnServerWithProgressInfoOn: aMorphOrNil.	] fixTemps.! !!Project methodsFor: 'language' stamp: 'yo 7/2/2004 19:50'!setFlaps	| flapTabs flapIDs sharedFlapTabs navigationMorph |	flapTabs _ ActiveWorld flapTabs.	flapIDs _ flapTabs collect: [:tab | tab knownName].	flapTabs		do: [:tab | (tab isMemberOf: ViewerFlapTab)				ifFalse: [tab isGlobalFlap						ifTrue: [Flaps removeFlapTab: tab keepInList: false.							tab currentWorld reformulateUpdatingMenus]						ifFalse: [| referent | 							referent _ tab referent.							referent isInWorld								ifTrue: [referent delete].							tab delete]]].	sharedFlapTabs _ Flaps classPool at: #SharedFlapTabs.	flapIDs		do: [:id | 			id = 'Navigator'				ifTrue: [sharedFlapTabs add: Flaps newNavigatorFlap].			id = 'Widgets'				ifTrue: [sharedFlapTabs add: Flaps newWidgetsFlap].			id = 'Tools'				ifTrue: [sharedFlapTabs add: Flaps newToolsFlap].			id = 'Squeak'				ifTrue: [sharedFlapTabs add: Flaps newSqueakFlap].			id = 'Supplies'				ifTrue: [sharedFlapTabs add: Flaps newSuppliesFlap].			id = 'Stack Tools'				ifTrue: [sharedFlapTabs add: Flaps newStackToolsFlap].			id = 'Painting'				ifTrue: [sharedFlapTabs add: Flaps newPaintingFlap]].	2 timesRepeat: [flapIDs do: [:id | Flaps enableDisableGlobalFlapWithID: id]].	ActiveWorld flapTabs		do: [:flapTab | flapTab isCurrentlyTextual				ifTrue: [flapTab changeTabText: flapTab knownName]].	Flaps positionNavigatorAndOtherFlapsAccordingToPreference.	navigationMorph _ World findDeeplyA: ProjectNavigationMorph preferredNavigator.	navigationMorph isNil		ifTrue: [^ self].	navigationMorph allMorphs		do: [:morph | morph class == SimpleButtonDelayedMenuMorph				ifTrue: [(morph findA: ImageMorph) isNil						ifTrue: [| label | 							label _ morph label.							label isNil								ifFalse: [| name | 									name _ morph knownName.									name isNil										ifTrue: [morph name: label.											name _ label].									morph label: name translated]]]]! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'yo 7/2/2004 20:01'!makeButton: aString balloonText: anotherString for: aSymbol	self flag: #yo.	"In principle, this method shouldn't call #translated."	^ SimpleButtonDelayedMenuMorph new target: self;		 borderColor: #raised;		 color: self colorForButtons;		 label: aString translated font: self fontForButtons;		 setBalloonText: anotherString translated;		 actionSelector: aSymbol! !!ProjectViewMorph methodsFor: 'events' stamp: 'yo 7/2/2004 20:04'!showMenuForProjectView	| menu selection |	(menu _ CustomMenu new)		add: 'enter this project' translated		action: [^ self enter];				add: 'ENTER ACTIVE' translated		action: [self setProperty: #wasOpenedAsSubproject toValue: true.			^ self enterAsActiveSubproject];				add: 'PUBLISH (also saves a local copy)' translated		action: [^ project storeOnServerShowProgressOn: self forgetURL: false];				add: 'PUBLISH to a different server' translated		action: [project forgetExistingURL.			^ project storeOnServerShowProgressOn: self forgetURL: true];				add: 'see if server version is more recent' translated		action: [^ self checkForNewerVersionAndLoad];		addLine;		add: 'expunge this project' translated		action: [^ self expungeProject].	selection _ menu build startUpCenteredWithCaption: 'Project Named "\{1}"' translated withCRs.	selection		ifNil: [^ self].	selection value! !!ProjectViewMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 20:04'!defaultNameStemForInstances	^ 'ProjectView' translated.! !!SelectionMorph methodsFor: 'halo commands' stamp: 'yo 7/2/2004 21:05'!organizeIntoColumn	"Place my objects in a column-enforcing container"	((AlignmentMorph inAColumn: selectedItems) setNameTo: 'Column' translated; color: Color orange muchLighter; enableDragNDrop: true; yourself) openInHand! !!SelectionMorph methodsFor: 'halo commands' stamp: 'yo 7/2/2004 21:05'!organizeIntoRow	"Place my objects in a row-enforcing container"	((AlignmentMorph inARow: selectedItems) setNameTo: 'Row' translated; color: Color orange muchLighter; enableDragNDrop: true; yourself) openInHand! !!SelectionMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 21:05'!defaultNameStemForInstances	^ 'Selection' translated.! !!ServerDirectory methodsFor: 'squeaklets' stamp: 'yo 7/2/2004 21:18'!upLoadProject: projectName members: archiveMembers retry: aBool	| dir okay m dirName idx |	m _ archiveMembers detect:[:any| any fileName includes: $/] ifNone:[nil].	m == nil ifFalse:[		dirName _ m fileName copyUpTo: $/.		self createDirectory: dirName.		dir _ self directoryNamed: dirName].	archiveMembers do:[:entry|		ProgressNotification signal: '4:uploadingFile'			extra: ('(uploading {1}...)' translated format: {entry fileName}).		idx _ entry fileName indexOf: $/.		okay _ (idx > 0			ifTrue:[				dir putFile: entry contentStream 					named: (entry fileName copyFrom: idx+1 to: entry fileName size) 					retry: aBool]			ifFalse:[				self putFile: entry contentStream					named: entry fileName					retry: aBool]).		(okay == false			or: [okay isString])			ifTrue: [				self inform: ('Upload for {1} did not succeed ({2}).' translated format: {entry fileName printString. okay}).				^false].	].	ProgressNotification signal: '4:uploadingFile' extra:''.	^true! !!SimpleButtonMorph class methodsFor: 'printing' stamp: 'yo 7/2/2004 21:19'!defaultNameStemForInstances	^ 'button' translated.! !!SketchMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 21:19'!defaultNameStemForInstances	^ 'Sketch' translated.! !!StandardScriptingSystem methodsFor: 'help dictionary' stamp: 'yo 7/2/2004 21:19'!statusHelpString	^	'normal -- run when calledpaused -- ready to run all the timeticking -- run all the timemouseDown -- run when mouse goes down on memouseStillDown -- while mouse still downmouseUp -- when mouse comes back upmouseEnter -- when mouse enters my bounds, button upmouseLeave -- when mouse exits my bounds, button upmouseEnterDragging -- when mouse enters my bounds, button downmouseLeaveDragging -- when mouse exits my bounds, button downopening -- when I am being openedclosing -- when I am being closed' translated"'keyStroke -- run when user hits a key' "! !!SuperSwikiServer methodsFor: 'for real' stamp: 'yo 7/2/2004 21:25'!updateProjectInfoFor: aProject	| data details projectLinks linkString uploader |	data _ OrderedCollection new.	data add: 'action: updatepage'.	data add: 'password: ',ProjectPasswordNotification signal.	data add: 'projectimage: ',aProject name,'.gif'.	uploader _ Utilities authorNamePerSe.	uploader isEmptyOrNil ifTrue: [uploader _ Utilities authorInitialsPerSe].	uploader isEmptyOrNil ifFalse: [		data add: 'submittedBy: ',uploader.	].	projectLinks _ Set new.	aProject world allMorphsDo: [ :each |		(each isKindOf: ProjectViewMorph) ifTrue: [			projectLinks add: each safeProjectName.		].	].	details _ aProject world valueOfProperty: #ProjectDetails ifAbsent: [Dictionary new].	details at: 'projectname' ifAbsentPut: [aProject name].	projectLinks isEmpty ifTrue: [		details removeKey: 'projectlinks' ifAbsent: []	] ifFalse: [		linkString _ String streamContents: [ :strm |			projectLinks asSortedCollection do: [ :each |				strm nextPutAll: each			] separatedBy: [				strm nextPut: $.			].		].		details at: 'projectlinks' put: linkString	].	details keysAndValuesDo: [ :k :v |		data add: k , ': ' , (v convertToWithConverter: UTF8TextConverter new). self flag: #yo.	].	^self sendToSwikiProjectServer: data.! !!SuperSwikiServer methodsFor: 'squeaklets' stamp: 'yo 7/2/2004 21:23'!upLoadProject: projectName members: archiveMembers retry: aBool	| answer |	archiveMembers do:[:entry|		ProgressNotification signal: '4:uploadingFile' extra: ('(uploading {1}...)' translated format: {entry fileName}).				answer _ self sendToSwikiProjectServer: {			'uploadproject2: ', entry fileName.			'password: ',ProjectPasswordNotification signal.			entry contents.		}.		answer = 'OK' ifFalse:[			self inform: ('Server responded {1}' translated format: {answer}).			^false].	].	ProgressNotification signal: '4:uploadingFile' extra:''.	^true! !!TextMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 21:27'!authoringPrototype	| t |	t _ super authoringPrototype.	t contents: 'abc' translated asText.	t wrapFlag: true. "Strangeness here in order to avoid two offset copies of the default contents when operating in an mvc project before cursor enters the morphic window"	t paragraph.	^ t! !!TextMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 21:27'!defaultNameStemForInstances	^ 'Text' translated.! !!TileMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 21:29'!setToReferTo: anObject	"Set the receiver to bear an object reference to the given object."	self flag: #yo.	type _ #objRef.	actualObject _ anObject.	self line1: anObject nameForViewer translated.	self typeColor: (ScriptingSystem colorForType: #Player).	self enforceTileColorPolicy! !!TileMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 21:44'!updateWordingToMatchVocabulary	"The current vocabulary has changed; change the wording on my face, if appropriate"	| aMethodInterface |	type == #operator ifTrue:		[self line1: (self currentVocabulary tileWordingForSelector: operatorOrExpression).		(ScriptingSystem doesOperatorWantArrows: operatorOrExpression)			ifTrue: [self addArrows].		self updateLiteralLabel.		aMethodInterface _ self currentVocabulary methodInterfaceAt: operatorOrExpression			ifAbsent: [				Vocabulary eToyVocabulary					methodInterfaceAt: operatorOrExpression ifAbsent: [^ self]].		self setBalloonText: aMethodInterface documentation.	].	type == #objRef ifTrue: [		self isPossessive			ifTrue: [self bePossessive]			ifFalse: [self labelMorph contents: self actualObject nameForViewer asSymbol translated]].		"submorphs last setBalloonText: aMethodInterface documentation"! !!ColorTileMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 17:33'!updateWordingToMatchVocabulary	| stringMorph |	stringMorph _ submorphs detect: [:morph | morph class == StringMorph] ifNone: [^ self].	stringMorph contents: 'color' translated.! !!ColorTileMorph methodsFor: 'other' stamp: 'yo 7/2/2004 17:33'!addColorSwatch	| m1 m2 desiredW |	m1 _ StringMorph contents: 'color' translated font: ScriptingSystem fontForTiles.	m2 _ Morph new extent: 12@8; color: (Color r: 0.8 g: 0 b: 0).	desiredW _ m1 width + 6.	self extent: (desiredW max: self basicWidth) @ self class defaultH.	m1 position: (bounds center x - (m1 width // 2)) @ (bounds top + 1).	m2 position: (bounds center x - (m2 width // 2)) @ (m1 bottom - 1).	self addMorph: m1; addMorph: m2.	colorSwatch _ m2! !!RandomNumberTile methodsFor: 'initialization' stamp: 'yo 7/2/2004 20:59'!updateWordingToMatchVocabulary	| stringMorph |	stringMorph _ submorphs				detect: [:morph | morph class == StringMorph]				ifNone: [^ self].	stringMorph contents: 'random' translated.! !!SymbolListTile methodsFor: 'accessing' stamp: 'yo 7/2/2004 21:27'!literal: anObject	"Set the receiver's literal as indicated"	self flag: #yo.	literal _ anObject asSymbol.	self updateLiteralLabel."	key _ Vocabulary eToyVocabulary translationKeyFor: literal.	key isNil ifFalse: [literal _ key]."	self flag: #deferred.  "The below formerly was necessary but now is problematical, leading to low-space condition etc.  May need to revisit, since as I comment this out now I am uncertain what if anything this may break"	"self labelMorph informTarget"! !!SymbolListTile methodsFor: 'user interface' stamp: 'yo 7/2/2004 21:26'!arrowAction: delta	"Do what is appropriate when an arrow on the tile is pressed; delta will be +1 or -1"	| index |	owner ifNil: [^ self].	self flag: #yo."	key _ Vocabulary eToyVocabulary translationKeyFor: literal.	key isNil ifTrue: [key _ literal]."	literal ifNotNil:		[(index _ (choices _ self choices) indexOf: literal) > 0			ifTrue:				[self literal: (choices atWrap: index + delta).				self adjustHelpMessage.				self acceptNewLiteral.				self labelMorph informTarget]]! !!TileMorph class methodsFor: 'scripting' stamp: 'yo 7/2/2004 21:44'!defaultNameStemForInstances	^ 'Tile' translated.! !!UpdatingStringMorph methodsFor: 'accessing' stamp: 'yo 7/2/2004 21:47'!valueFromContents	"Return a new value from the current contents string.""	| expression tilePadMorphOrNil asNumberBlock |	asNumberBlock _ [:string | [string asNumber]				on: Error				do: []].	format = #string		ifTrue: [^ contents].	(format = #default			and: [self owner isKindOf: NumericReadoutTile])		ifTrue: [^ asNumberBlock value: contents].	tilePadMorphOrNil _ self ownerThatIsA: TilePadMorph.	(tilePadMorphOrNil notNil			and: [tilePadMorphOrNil type = #Number])		ifTrue: [^ asNumberBlock value: contents].	expression _ Vocabulary eToyVocabulary translationKeyFor: contents.	expression isNil		ifTrue: [expression _ contents].	^ Compiler evaluate: expression"	format = #string ifTrue: [^ contents].	^ Compiler evaluate: contents! !!UpdatingStringMorph methodsFor: 'target access' stamp: 'yo 7/2/2004 21:45'!acceptValueFromTarget: v	"Accept a value from the target"	self flag: #yo.  "we may want to translate the v asString result."	lastValue _ v.	self format == #string ifTrue: [^ v asString].	(format == #default and: [v isNumber]) ifTrue:		[^ v printShowingDecimalPlaces: self decimalPlaces].	^ v printString! !!Utilities class methodsFor: 'identification' stamp: 'yo 7/2/2004 21:49'!setAuthorName	AuthorName _ FillInTheBlank 			request: 'Please type your name:' translated			initialAnswer: 'Your Name'! !!Utilities class methodsFor: 'scraps' stamp: 'yo 7/2/2004 21:49'!scrapsBook	| header aButton label |	ScrapsBook ifNil:		[ScrapsBook _ BookMorph new pageSize: 200@300; setNameTo: 'scraps' translated.		ScrapsBook color: Color yellow muchLighter.		ScrapsBook borderColor: Color darkGray; borderWidth: 2.		ScrapsBook removeEverything; showPageControls; insertPage.		header _ AlignmentMorph newRow wrapCentering: #center; cellPositioning: #leftCenter.		header setProperty: #header toValue: true.		header addMorph: (aButton _ SimpleButtonMorph new label: 'O' font: Preferences standardButtonFont).		aButton target: ScrapsBook; color:  Color tan; actionSelector: #delete;				setBalloonText: 'Close the trashcan.(to view again later, click on any trashcan).' translated.		header addMorphBack: AlignmentMorph newVariableTransparentSpacer beSticky.		header addMorphBack: 	(label _ UpdatingStringMorph new target: self) beSticky.		label getSelector: #trashTitle; useStringFormat; step.		header addMorphBack: AlignmentMorph newVariableTransparentSpacer beSticky.		header addMorphBack: (aButton _ SimpleButtonMorph new label: 'E' translated font: Preferences standardButtonFont).		aButton target: Utilities; color:  Color veryLightGray; actionSelector: #maybeEmptyTrash;				setBalloonText: 'Click here to empty the trash.' translated.		ScrapsBook currentPage addMorph: (TextMorph new contents: 'Objects you drag into the trash will automatically be saved here, one object per page, in case you need them later.  To disable this feature set the "preserveTrash" Preference to false.You can individually expunge objects by hitting the - control, and you can empty out all the objects in the trash can by hitting the "E" button at top right.' translated			wrappedTo: 190).		ScrapsBook addMorphFront: header.		ScrapsBook setProperty: #scraps toValue: true].	^ ScrapsBook	"Utilities emptyScrapsBook"! !!Vocabulary methodsFor: 'translation' stamp: 'yo 7/2/2004 21:51'!translationKeyFor: translatedWording	self flag: #yo.	^ translatedWording.! !