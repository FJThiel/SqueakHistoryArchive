'From Squeak 2.3 of January 14, 1999 on 3 February 1999 at 10:12:22 am'!"Change Set:		SndQuickStartFix-jhmDate:			3 February 1999Author:			John MaloneyAdds a preference (false by default) to enable the use of the 'quickstart'sound playing primitive, which is not implemented on many platforms.Also fixes a problem with repeating sounds, fixes the CarMotorSound,adds a utility to extract filename extensions, and adds a method to Colorto aid in visualing different potential color palettes."!!Color class methodsFor: 'color from user' stamp: 'jm 1/19/1999 11:33'!colorTest: depth extent: chartExtent colorMapper: colorMapper	"Create a palette of colors sorted horizontally by hue and vertically by lightness. Useful for eyeballing the color gamut of the display, or for choosing a color interactively."	"Note: It is slow to build this palette, so it should be cached for quick access."	"(Color colorTest: 32 extent: 570@180 colorMapper: [:c | c]) display"	"(Color colorTest: 32 extent: 570@180 colorMapper:		[:c | Color			r: (c red * 7) asInteger / 7			g: (c green * 7) asInteger / 7			b: (c blue * 3) asInteger / 3]) display"	"(Color colorTest: 32 extent: 570@180 colorMapper:		[:c | Color			r: (c red * 5) asInteger / 5			g: (c green * 5) asInteger / 5			b: (c blue * 5) asInteger / 5]) display"	"(Color colorTest: 32 extent: 570@180 colorMapper:		[:c | Color			r: (c red * 15) asInteger / 15			g: (c green * 15) asInteger / 15			b: (c blue * 15) asInteger / 15]) display"	"(Color colorTest: 32 extent: 570@180 colorMapper:		[:c | Color			r: (c red * 31) asInteger / 31			g: (c green * 31) asInteger / 31			b: (c blue * 31) asInteger / 31]) display"	| basicHue x y c startHue palette transHt vSteps transCaption grayWidth hSteps |	palette _ Form extent: chartExtent depth: depth.	transCaption _ "(DisplayText text: 'no color' asText textStyle: (TextConstants at: #ComicPlain)) form storeString"		(Form extent: 34@9 depth: 1			fromArray: #(0 0 256 0 256 0 3808663859 2147483648 2491688266 2147483648 2491688266 0 2491688266 0 2466486578 0 0 0)			offset: 0@0).	transHt _ transCaption height.	palette fillWhite: (0@0 extent: palette width@transHt).	palette fillBlack: (0@transHt extent: palette width@1).	transCaption displayOn: palette at: palette boundingBox topCenter - ((transCaption width // 2)@0).	grayWidth _ 10.	startHue _ 338.0.	vSteps _ palette height - transHt // 2.	hSteps _ palette width - grayWidth.	x _ 0.	startHue to: startHue + 360.0 by: 360.0/hSteps do: [:h |		basicHue _ Color h: h asFloat s: 1.0 v: 1.0.		y _ transHt+1.		0 to: vSteps do: [:n | 			c _ basicHue mixed: (n asFloat / vSteps asFloat) with: Color white.			c _ colorMapper value: c.			palette fill: (x@y extent: 1@1) fillColor: c.			y _ y + 1].		1 to: vSteps do: [:n | 			c _ Color black mixed: (n asFloat / vSteps asFloat) with: basicHue.			c _ colorMapper value: c.			palette fill: (x@y extent: 1@1) fillColor: c.			y _ y + 1].		x _ x + 1].	y _ transHt + 1.	1 to: vSteps * 2 do: [:n | 		c _ Color black mixed: (n asFloat / (vSteps*2) asFloat) with: Color white.		c _ colorMapper value: c.		palette fill: (x@y extent: 10@1) fillColor: c.		y _ y + 1].	^ palette! !!FileDirectory class methodsFor: 'name utilities'!extensionFor: fileName	"Return the extension of given file name, if any."	| delim i |	delim _ DirectoryClass extensionDelimiter.	i _ fileName findLast: [:c | c = delim].	i = 0		ifTrue: [^ '']		ifFalse: [^ fileName copyFrom: i + 1 to: fileName size].! !!Preferences class methodsFor: 'initialization' stamp: 'jm 2/3/1999 10:02'!chooseInitialSettings	"Restore the default choices for Preferences."	"Preferences chooseInitialSettings"	#(	(allowSoundQuickStart				false)		(allowSysWindowEmbedding			false)		(automaticViewerPlacement			true)		(browseWithPrettyPrint				false)		(cmdDotEnabled						true)		(confirmFirstUseOfStyle				true)		(disableSounds						false)		(fastDragWindowForMorphic			false)		(ignoreStyleIfOnlyBold				true)		(inboardScrollbars					false)		(logDebuggerStackToFile				true)		(noviceMode							false)		(printAlternateSyntax				false)		(reverseWindowStagger				true)		(showDebugHaloHandle				true)		(showDiffsInChangeList				true)		(showTimeStampsInMenuTitles		false)		(showProjectZoom					false)		(suppressCheckForSlips				false)		(suppressUpdateServerPrompt		false)		(thoroughSenders					true)		(unlimitedPaintArea					false)		(updateSavesFile						false)		(useAnnotationPanes				false)		(warnIfNoChangesFile				true)		(warnIfNoSourcesFile				true))	do:		[:aPair |			aPair last == #true				ifTrue:					[self enable: aPair first]				ifFalse:					[self disable: aPair first]]! !!Preferences class methodsFor: 'initialization' stamp: 'jm 2/3/1999 10:00'!initializeHelpMessages	"Preferences initializeHelpMessages"  	HelpDictionary _ Dictionary new.	#((allowSoundQuickStart'If true, attempt to start playing sounds using optional "quick start"')(allowSysWindowEmbedding'Determines whether, in Morphic, SystemWindows should automatically be droppable into willing receptors')(automaticViewerPlacement'If true, new viewers are automatically positioned near the objects they view; if false, new viewers are attached to the hand, from whence you much choose a destination for them')(browseWithPrettyPrint'If true, browsers will automatically format their contents')(cautionBeforeClosing 'If true, Morphic windows seen in an mvc project will put up a warning before allowing themselves to be dismissed')(cmdDotEnabled'If true, cmd-dot brings up a debugger;if false, the cmd-dot interrupt is disabled')(confirmFirstUseOfStyle'If true, the first attempt to submit a method with non-standard style will bring up a confirmation dialog')(disableSounds'If true, all sound playing is disabled')	(editPlayerScriptsInPlace 'If true, textual player scripts are edited in place in Scriptors (still imperfectly implemented)')(eToyScheme'If true, new scripting spaces place the Playfield to the left and the the palette to the right of the window; if false, the opposite is true.')(fastDragWindowForMorphic'If true, morphic window drag will be done by dragging an outline of the window.')(ignoreStyleIfOnlyBold'If true, then any method submission in which the only style change is for bolding will be treated as a method with no style specifications')(inboardScrollbars'If true, then ScrollPane will place scrollbars inside on the right and will not hide them on exit')(logDebuggerStackToFile'If true, whenever you fall into a debugger a summary of its stack will be written to a file named''SqueakDebug.log''')(noviceMode 'If true, certain novice-mode accommodations are made.')(printAlternateSyntax'If true, thenprettyPrint using experimental syntax.Otherwise use normal ST-80 syntax.')(reverseWindowStagger'If true, a reverse-stagger strategy  is used for determining where newly launched windows will be placed; if false, a direct- stagger strategy is used.')(showDebugHaloHandle 'If true, a special debugging halo handle is displayed at the right of the halo; if false, no such handle is shown.')(showDiffsInChangeList'If true, changeList browsers and Versions browsers reveal the differences between successive versions or between the in-memory code and the code on disk')(showPlayerSource'If true, then all Player methods with fewer than 2 arguments are included in Viewers, whether or not they are intended for end-user use.  This can be dangerous')(showProjectZoom'If true, then show a zoom effect when entering or leaving projects.  This can be costly of memory (at least an extra screen buffer) so dont use it in low space situations.  But it is cool.')(showScriptSource'If true, then the actual Smalltalk source code for methods is shown in the detail panes for scripts in a viewer; if false, then a help message for scripts is shown instead.')(showTimeStampsInMenuTitles'If true, then the author''s timestamp is displayed as the menu title of any message list; if false, no author''s timestamps are shown')(suppressCheckForSlips 'If false, then whenever you file out a change set, it is checked for ''slips'' and if any are found, you are so informed and given a chance to open a browser on them')(suppressUpdateServerPrompt'If true, the prompt for server choice when updating code from the server is suppressed.  Set this to true to leave the server choice unchanged from update to update.')(thoroughSenders'If true, then ''senders'' browsers will dive inside structured literals in their search')(uniformWindowColors'If true, then all standard windows are given the same color rather than their customized window-type-specific colors')(unlimitedPaintArea'If true, the painting area for a new drawing will not be limited in size; if false, a reasonablelimit will be applied, in an attempt to hold down memory and time price.')(updateRemoveSequenceNum'If true, then remove the leading sequence number from the filename before automatically saving a local copy of any update loaded.')(updateSavesFile'If true, then when an update is loaded from the server, a copy of it will automatically be saved on a local file as well.')(useAnnotationPanes'If true, a thin horizontal annotation pane is used in message-list browsers.')(useDetailPanesInViewers'If true, then Viewers will have an extra "¦" control at the left of each row, the hitting of which toggles the appearance of a textual detail pane.')(useNewViewers'If true, then the new kinds of viewers introduced in Squeak 2.3 are used; if false, then the old style, from earlier releases, are still used.  Old viewers will hopefully soon be removed from the system.')(warnIfNoChangesFile'If true, then you will be warned, whenever you start up, if no changes filecan be found')(warnIfNoSourcesFile 'If true, then you will be warned, whenever you start up, if no sources file can be found')) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!RepeatingSound methodsFor: 'sound generation' stamp: 'jm 1/18/1999 10:31'!samplesRemaining	iterationCount == #forever ifTrue: [^ 1000000].	iteration > 0		ifTrue: [^ sound samplesRemaining + ((iteration - 1) * samplesPerIteration)]		ifFalse: [^ 0].! !!RepeatingSound class methodsFor: 'car motor example' stamp: 'jm 1/29/1999 10:01'!carMotorSound	"Return a repeating sound for the sound of a car engine."	"RepeatingSound carMotorSound play"	^ self carMotorSound: 10.0! !!RepeatingSound class methodsFor: 'car motor example' stamp: 'jm 1/29/1999 09:32'!carMotorSound: speed	"Return a repeating sound for the sound of a car engine running at the given speed."	"(RepeatingSound carMotorSound: 2.0) play"	CarMotorSamples ifNil: [self initializeCarMotor].	^ RepeatingSound repeatForever:		((LoopedSampledSound			unloopedSamples: CarMotorSamples			pitch: 20.0			samplingRate: 22050)				setPitch: speed dur: 100.0 loudness: 1.0)! !!SampledSound methodsFor: 'initialization' stamp: 'jm 1/18/1999 06:42'!pitch: pitchNameOrNumber	| p |	p _ self nameOrNumberToPitch: pitchNameOrNumber.	originalSamplingRate _		((self samplingRate asFloat * p asFloat) / NominalSamplePitch asFloat) asInteger.	self reset.! !!SoundPlayer class methodsFor: 'playing' stamp: 'jm 1/29/1999 20:03'!resumePlaying: aSound quickStart: quickStart	"Start playing the given sound without resetting it; it will resume playing from where it last stopped. If quickStart is true, then try to start playing the given sound immediately."	| doQuickStart |	Preferences disableSounds ifTrue: [^ self].	doQuickStart _ quickStart.	Preferences allowSoundQuickStart ifFalse: [doQuickStart _ false].	PlayerProcess == nil ifTrue: [		self canStartPlayer ifFalse: [^ self].		self startUp.		"Check if startup was successful"		SoundSupported ifFalse:[^self].		doQuickStart _ false].	PlayerSemaphore critical: [		(ActiveSounds includes: aSound)			ifTrue: [doQuickStart _ false]			ifFalse: [				doQuickStart ifFalse: [ActiveSounds add: aSound]]].	"quick-start the given sound, unless the sound player has just started"	doQuickStart ifTrue: [self startPlayingImmediately: aSound].! !