'From Squeak2.8alpha of 4 February 2000 [latest update: #2158] on 20 May 2000 at 12:26:28 pm'!"Change Set:		065BetterFindDup-dvfDate:			14 May 2000Author:			Daniel VainsencherClean up, speed, and probably fix the findDuplicates. You can definitely delete what this puts in the duplicates category. Emptying the trash before and after is reccomended - it's contents still count."!!IndexFileEntry methodsFor: 'access' stamp: 'dvf 5/13/2000 00:51'!likelyEqual: otherIndexFileEntry	"return true if the two toc entries seem to represent the same message"	^(self textLength = otherIndexFileEntry textLength and: [self subject = otherIndexFileEntry subject]) and: [self from = otherIndexFileEntry from]! !!IndexFileEntry methodsFor: 'filtering support' stamp: 'dvf 5/13/2000 02:25'!getMessage	"Answer the MailMessage for this index file entry."	^ MailMessage from: (self rawText)! !!IndexFileEntry methodsFor: 'filtering support' stamp: 'dvf 5/13/2000 02:25'!rawText	"Answer the unparsed text for this entry."	^ messageFile			getMessage: msgID			at: location			textLength: textLength! !!IndexFileEntry methodsFor: 'filtering support' stamp: 'dvf 5/13/2000 02:11'!text	^self getMessage text! !!IndexFileEntry methodsFor: 'filtering support' stamp: 'dvf 5/13/2000 02:11'!textHas: stringOrList 	^ self field: self text has: stringOrList! !!MailDB methodsFor: 'housekeeping' stamp: 'dvf 5/13/2000 03:13'!findDuplicates	"MailDB someInstance findDuplicates"	| msgsAtTime duplicates msgsBySize similarMessages textCache first second text1 text2 |	duplicates _ IntegerSet new.	msgsAtTime _ ((self messagesIn: '.all.')				collect: [:e | indexFile at: e])				groupBy: [:e | e time]				having: [:arr | arr size > 1].	msgsAtTime		associationsDo: 			[:assoc | 			msgsBySize _ assoc value groupBy: [:e | e textLength]						having: [:arr | arr size > 1].			msgsBySize				associationsDo: 					[:assoc2 | 					similarMessages _ assoc2 value.					textCache _ IntegerKeyDictionary new.					similarMessages combinations: 2						atATimeDo: 							[:each | 							first _ each first.							second _ each second.							((first likelyEqual: second)								and: 									[text1 _ textCache at: first msgID ifAbsentPut: [(self getMessage: first msgID) bodyText].									text2 _ textCache at: second msgID ifAbsentPut: [(self getMessage: second msgID) bodyText].									text1 = text2])								ifTrue: [duplicates add: second msgID]]]].	^ duplicates asArray! !