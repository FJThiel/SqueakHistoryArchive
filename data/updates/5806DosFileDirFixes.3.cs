'From Squeak3.7alpha of 11 September 2003 [latest update: #5707] on 6 March 2004 at 4:19:24 am'!"Change Set:		DosFileDirFixesDate:			6 March 2004Author:			Andreas RaabSome recent changes exposed a significant bug in DosFileDirectory's splitName:to: handling. Since conceptually, all of the 'drives' (e.g., the roots of the Win32 file system) are seen as hanging off the empty path (FileDirectory root) even a 'drive' must be split accordingly to a (non-empty) local name and the (empty) root path. Please note that the comment from update 5179sendersOfSplitName-asm claiming:	On Windows this must be true	FileDirectory basicNew fileOrDirectoryExists: 'C:'is wrong. 'FileDirectory basicNew' creates an *uninitialized* directory rather than the virtual root of the file system, so the above query must raise an error. What must be true on Windows is:	FileDirectory root fileOrDirectoryExists: 'C:'.The change set fixes the issue, adds a comment explaining why this relation is important and provides some tests which should make the currently broken behavior abundantly clear (the tests need to be run on Windows to see the effect)."!TestCase subclass: #DosFileDirectoryTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Files-Tests'!!DosFileDirectory class methodsFor: 'platform specific' stamp: 'ar 3/6/2004 03:46'!isDrive: fullName	"Answer whether the given full name describes a 'drive', e.g., one of the root directories of a Win32 file system. We allow two forms here - the classic one where a drive is specified by a letter followed by a colon, e.g., 'C:', 'D:' etc. and the network share form starting with double-backslashes e.g., '\\server'."	^ (fullName size = 2 and: [fullName first isLetter and: [fullName last = $:]])		or: [(fullName beginsWith: '\\') and: [(fullName occurrencesOf: $\) = 2]]! !!DosFileDirectory class methodsFor: 'platform specific' stamp: 'ar 3/6/2004 04:14'!splitName: fullName to: pathAndNameBlock	"Take the file name and convert it to the path name of a directory and a local file name within that directory. 	IMPORTANT NOTE: For 'drives', e.g., roots of the file system on Windows we treat the full name of that 'drive' as the local name rather than the path. This is because conceptually, all of these 'drives' hang off the virtual root of the entire Squeak file system, specified by FileDirectory root. In order to be consistent with, e.g., 		DosFileDirectory localNameFor: 'C:\Windows' -> 'Windows'		DosFileDirectory dirPathFor: 'C:\Windows' -> 'C:'	we expect the following to be true:		DosFileDirectory localNameFor: 'C:' -> 'C:'		DosFileDirectory dirPathFor: 'C:'. -> ''		DosFileDirectory localNameFor: '\\server' -> '\\server'.		DosFileDirectory dirPathFor: '\\server' -> ''.	so that in turn the following relations hold:		| fd |		fd := DosFileDirectory on: 'C:\Windows'.		fd containingDirectory includes: fd localName.		fd := DosFileDirectory on: 'C:'.		fd containingDirectory includes: fd localName.		fd := DosFileDirectory on: '\\server'.		fd containingDirectory includes: fd localName.	"	(self isDrive: fullName)		ifTrue: [^ pathAndNameBlock value:''  value: fullName].	^ super splitName: fullName to: pathAndNameBlock! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:03'!testFileDirectoryContainingDirectory	"Hoping that you have 'C:' of course..."	| fd |	FileDirectory activeDirectoryClass == DosFileDirectory ifFalse:[^self].	fd := FileDirectory on: 'C:'.	self assert: fd containingDirectory pathName = ''.! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:05'!testFileDirectoryContainingDirectoryExistence	"Hoping that you have 'C:' of course..."	| fd |	FileDirectory activeDirectoryClass == DosFileDirectory ifFalse:[^self].	fd := FileDirectory on: 'C:'.	self assert: (fd containingDirectory fileOrDirectoryExists: 'C:').! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:04'!testFileDirectoryContainingEntry	"Hoping that you have 'C:' of course..."	| fd |	FileDirectory activeDirectoryClass == DosFileDirectory ifFalse:[^self].	fd := FileDirectory on: 'C:'.	self assert: (fd containingDirectory entryAt: fd localName) notNil.! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:04'!testFileDirectoryDirectoryEntry	"Hoping that you have 'C:' of course..."	| fd |	FileDirectory activeDirectoryClass == DosFileDirectory ifFalse:[^self].	fd := FileDirectory on: 'C:'.	self assert: fd directoryEntry notNil.! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:04'!testFileDirectoryLocalName	"Hoping that you have 'C:' of course..."	| fd |	FileDirectory activeDirectoryClass == DosFileDirectory ifFalse:[^self].	fd := FileDirectory on: 'C:'.	self assert: fd localName = 'C:'.! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:14'!testFileDirectoryNonExistence	"Hoping that you have 'C:' of course..."	FileDirectory activeDirectoryClass == DosFileDirectory ifFalse:[^self].	self should: [(FileDirectory basicNew fileOrDirectoryExists: 'C:')] raise: InvalidDirectoryError.! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:13'!testFileDirectoryRootExistence	"Hoping that you have 'C:' of course..."	FileDirectory activeDirectoryClass == DosFileDirectory ifFalse:[^self].	self assert: (FileDirectory root fileOrDirectoryExists: 'C:').! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:17'!testIsDriveForDrive	self assert: (DosFileDirectory isDrive: 'C:').	self deny: (DosFileDirectory isDrive: 'C:\').	self deny: (DosFileDirectory isDrive: 'C:\foo').	self deny: (DosFileDirectory isDrive: 'C:foo').! !!DosFileDirectoryTests methodsFor: 'as yet unclassified' stamp: 'ar 3/6/2004 04:17'!testIsDriveForShare	self assert: (DosFileDirectory isDrive: '\\server').	self deny: (DosFileDirectory isDrive: '\\server\').	self deny: (DosFileDirectory isDrive: '\\server\foo').! !DosFileDirectoryTests removeSelector: #testFileDirectoryBasic!DosFileDirectoryTests removeSelector: #testFileDirectoryInC!DosFileDirectoryTests removeSelector: #testFileDirectoryOnC!