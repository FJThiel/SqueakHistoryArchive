'From Squeak3.6 of ''6 October 2003'' [latest update: #5424] on 16 October 2003 at 11:29:32 am'!"Change Set:		FileListCleanup-nkDate:			15 October 2003Author:			Ned Konz15 October:Fixed bug that prevented some stream services from working.15 August:Fixed bug with service items that require arguments.16 July:Removal of hard-coded menus from file list related classes.Made all the registered file readers support a suffix of '*' for the 'all services' menu.Removed a number of obsolete methods in FileList and FileList2Also use the service registry for media.Made XBMReadWriter skip C comments."!!CRRecognizer class methodsFor: 'class initialization' stamp: 'nk 7/16/2003 15:44'!fileReaderServicesForFile: fullName suffix: suffix	| services |	services _ OrderedCollection new.	(suffix = 'ggd') | (suffix = '*') ifTrue: [		services add: (SimpleServiceEntry 						provider: self 						label: 'load Genie Gesture Dictionary'						selector: #loadCRDictionary:						description: 'load Genie Gesture Dictionary') ].	(suffix = 'gdp') | (suffix = '*') ifTrue: [		services add: (SimpleServiceEntry 				provider: self 				label: 'load Genie Display Properties'					selector: #loadCRDisplayProperties: description: 'load Genie Display Properties')].	^services! !!ChangeList class methodsFor: 'fileIn/Out' stamp: 'nk 7/16/2003 15:48'!fileReaderServicesForFile: fullName suffix: suffix	| services |	services _ OrderedCollection new.	(FileStream isSourceFileSuffix: suffix) | (suffix = '*')		ifTrue: [ services add: self serviceBrowseChangeFile ].	(suffix = 'changes') | (suffix = '*')		ifTrue: [ services add: self serviceBrowseDotChangesFile ].	(fullName asLowercase endsWith: '.cs.gz') | (suffix = '*')		ifTrue: [ services add: self serviceBrowseCompressedChangeFile ].	^services! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'nk 7/16/2003 15:49'!fileReaderServicesForFile: fullName suffix: suffix	^((FileStream isSourceFileSuffix: suffix) or: [ suffix = '*' ])		ifTrue: [ Array with: self serviceBrowseCode]		ifFalse: [#()]! !!FileList methodsFor: 'file list menu' stamp: 'nk 10/14/2003 10:02'!fullFileListMenu: aMenu shifted: aBoolean	"Fill the menu with all possible items for the file list pane, regardless of selection."	| lastProvider |	aMenu title: 'all possible file operations'.	Smalltalk isMorphic ifTrue: [aMenu addStayUpItemSpecial].	lastProvider _ nil.	(self itemsForFile: 'a.*') do: [ :svc |		(lastProvider notNil and: [svc provider ~~ lastProvider])			ifTrue: [ aMenu addLine ].		aMenu add: svc label target: svc selector: svc requestSelector argument: (svc getArgumentsFrom: self).		aMenu submorphs last setBalloonText: svc description.		lastProvider _ svc provider.		svc addDependent: self.	].	^aMenu! !!FileList2 methodsFor: 'user interface' stamp: 'nk 7/16/2003 17:36'!blueButtonForService: aService textColor: textColor inWindow: window	| block |	block _ [ aService performServiceFor: (aService getArgumentsFrom: self) ] copy fixTemps.	^(window fancyText: aService buttonLabel capitalized ofSize: 15 color: textColor)		setProperty: #buttonText toValue: aService buttonLabel capitalized;		hResizing: #rigid;		extent: 100@20;		layoutInset: 4;		borderWidth: 0;		useRoundedCorners;		setBalloonText: aService label;		on: #mouseUp send: #value to: block ! !!FileList2 class methodsFor: 'blue ui' stamp: 'nk 7/16/2003 17:33'!blueButtonText: aString textColor: textColor inWindow: window balloonText: balloonText selector: sel recipient: recip	^(window fancyText: aString ofSize: 15 color: textColor)		setProperty: #buttonText toValue: aString;		hResizing: #rigid;		extent: 100@20;		layoutInset: 4;		borderWidth: 0;		useRoundedCorners;		setBalloonText: balloonText;		on: #mouseUp send: sel to: recip! !!FileList2 class methodsFor: 'blue ui' stamp: 'nk 7/16/2003 17:13'!enableTypeButtons: typeButtons info: fileTypeInfo forDir: aDirectory	| foundSuffixes fileSuffixes firstEnabled enableIt |	firstEnabled _ nil.	foundSuffixes _ (aDirectory ifNil: [ #()] ifNotNil: [ aDirectory fileNames]) collect: [ :each | (each findTokens: '.') last asLowercase].	foundSuffixes _ foundSuffixes asSet.	fileTypeInfo with: typeButtons do: [ :info :button |		fileSuffixes _ info second.		enableIt _ fileSuffixes anySatisfy: [ :patt | foundSuffixes includes: patt].		button 			setProperty: #enabled 			toValue: enableIt.		enableIt ifTrue: [firstEnabled ifNil: [firstEnabled _ button]].	].	firstEnabled ifNotNil: [^firstEnabled mouseUp: nil].	typeButtons do: [ :each | each color: Color gray].! !!FileList2 class methodsFor: 'blue ui' stamp: 'nk 7/16/2003 18:02'!endingSpecs	"Answer a collection of specs to build the selective 'find anything' tool called by the Navigator. This version uses the services registry to do so."	"FileList2 morphicViewGeneralLoaderInWorld: World"	| categories services specs rejects |	rejects _ #(addFileToNewZip: compressFile: openInZipViewer: extractAllFrom: openOn:).	categories _ #(		('Art' ('bmp' 'gif' 'jpg' 'jpeg' 'form' 'png' 'pcx' 'xbm' 'xpm' 'ppm' 'pbm'))		('Morphs' ('morph' 'morphs' 'sp'))		('Projects' ('extseg' 'project' 'pr'))		('Books' ('bo'))		('Music' ('mid'))		('Movies' ('movie' 'mpg' 'mpeg' 'qt' 'mov'))		"('Code' ('st' 'cs'))"		('Flash' ('swf'))		('TrueType' ('ttf'))		('3ds' ('3ds'))		('Tape' ('tape'))		('Wonderland' ('wrl'))		('HTML' ('htm' 'html'))	).	categories first at: 2 put: ImageReadWriter allTypicalFileExtensions.	specs _ OrderedCollection new.	categories do: [ :cat | | catSpecs catServices okExtensions |		services _ Dictionary new.		catSpecs _ Array new: 3.		catServices _ OrderedCollection new.		okExtensions _ Set new.		cat second do: [ :ext | (FileList itemsForFile: 'fred.',ext) do: [ :i |			(rejects includes: i selector) ifFalse: [				okExtensions add: ext.				services at: i label put: i ]]].		services do: [ :svc | catServices add: svc ].		services isEmpty ifFalse: [ 			catSpecs at: 1 put: cat first;				at: 2 put: okExtensions;				at: 3 put: catServices.			specs add: catSpecs ]	].	^specs! !!FileList2 class methodsFor: 'morphic ui' stamp: 'nk 10/14/2003 12:41'!update: actionRow in: window fileTypeRow: fileTypeRow morphUp: morph	| fileTypeInfo info2 buttons textColor1 fileSuffixes fileActions aFileList fileTypeString |	(morph valueOfProperty: #enabled) ifFalse: [^self].	fileTypeRow submorphsDo: [ :sub |		sub color: (			sub == morph 				ifTrue: [Color white] 				ifFalse: [(sub valueOfProperty: #enabled) 							ifTrue: [Color transparent] ifFalse: [Color gray]]		).	].	fileTypeString _ morph valueOfProperty: #buttonText.	aFileList _ window valueOfProperty: #FileList.	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	actionRow removeAllMorphs.	fileTypeInfo _ self endingSpecs.	info2 _ fileTypeInfo detect: [ :each | each first = fileTypeString] ifNone: [self error: 'bad fileTypeString' ].	fileSuffixes _ info2 second.	fileActions _ info2 third.	buttons _ fileActions collect: [ :each | aFileList blueButtonForService: each textColor: textColor1 inWindow: window ].	buttons addLast: (self blueButtonText: 'Cancel' textColor: textColor1 inWindow: window balloonText: 'Cancel this search' selector: #cancelHit recipient: aFileList).	buttons do: [ :each | actionRow addMorphBack: each].	window fullBounds.	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	aFileList fileSelectionBlock: (		self selectionBlockForSuffixes: (fileSuffixes collect: [ :each | '*.',each])	).	aFileList updateFileList.! !!FileStream class methodsFor: 'file reader services' stamp: 'nk 7/16/2003 15:49'!fileReaderServicesForFile: fullName suffix: suffix	"Answer services for the given file"	^ ((self isSourceFileSuffix: suffix) or: [ suffix = '*' ])		ifTrue:			[{self serviceRemoveLineFeeds.			self serviceFileIn}]		ifFalse:			[#()]! !!Form class methodsFor: 'fileIn/Out' stamp: 'nk 7/16/2003 18:01'!fileReaderServicesForFile: fullName suffix: suffix	^((ImageReadWriter allTypicalFileExtensions add: '*'; add: 'form'; yourself)		includes: suffix)		ifTrue: [ self services ]		ifFalse: [#()]! !!GZipReadStream class methodsFor: 'fileIn/Out' stamp: 'nk 7/16/2003 15:51'!fileReaderServicesForFile: fullName suffix: suffix 	| services |	(suffix = 'gz') | (suffix = '*')		ifFalse: [^ #()].	services _ OrderedCollection new.	(suffix = '*') | (fullName asLowercase endsWith: '.cs.gz')		ifTrue: [services add: self serviceFileIn.			(Smalltalk includesKey: #ChangeSorter)				ifTrue: [services add: self serviceFileIntoNewChangeSet]].	services addAll: self services.	^ services! !!GZipWriteStream class methodsFor: 'file list services' stamp: 'nk 7/16/2003 15:52'!fileReaderServicesForFile: fullName suffix: suffix	"Don't offer to compress already-compressed files	sjc 3-May 2003-added jpeg extension"	^({ 'gz' . 'sar' . 'zip' . 'gif' . 'jpg' . 'jpeg'. 'pr'. 'png' } includes: suffix)		ifTrue: [ #() ]		ifFalse: [ self services ]! !!ImageReadWriter class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:59'!allTypicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that my subclasses can read might commonly have"	"ImageReadWriter allTypicalFileExtensions"	| extensions |	extensions _ Set new.	self allSubclassesDo: [ :cls | extensions addAll: cls typicalFileExtensions ].	^extensions! !!ImageReadWriter class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:55'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#()! !!BMPReadWriter class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:56'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#('bmp')! !!GIFReadWriter class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:56'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#('gif')! !!JPEGReadWriter class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:56'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#('jpg' 'jpeg')! !!JPEGReadWriter2 class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:56'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#('jpg' 'jpeg')! !!Morph class methodsFor: 'fileIn/Out' stamp: 'nk 7/16/2003 15:54'!fileReaderServicesForFile: fullName suffix: suffix	^({ 'morph'. 'morphs'. 'sp'. '*' } includes: suffix)		ifTrue: [			{SimpleServiceEntry 				provider: self 				label: 'load as morph'				selector: #fromFileName:				description: 'load as morph'}]		ifFalse: [#()]! !!ArchiveViewer class methodsFor: 'fileIn/Out' stamp: 'nk 7/16/2003 15:42'!fileReaderServicesForFile: fullName suffix: suffix 	|  services |	services _ OrderedCollection new.	services add: self serviceAddToNewZip.	({'zip'.'sar'.'pr'.'*'} includes: suffix)		ifTrue: [services add: self serviceOpenInZipViewer.				services add: self serviceExtractAll].	^ services! !!MPEGMoviePlayerMorph class methodsFor: 'fileIn/Out' stamp: 'nk 7/16/2003 15:54'!fileReaderServicesForFile: fullName suffix: suffix 	^((MPEGPlayer registeredVideoFileSuffixes includes: suffix )		or: [ (MPEGPlayer registeredAudioFileSuffixes includes: suffix)			or: [ suffix = '*' ]] )		ifTrue: [ self services ]		ifFalse: [ #() ]! !!PCXReadWriter class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:57'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#('pcx')! !!PNGReadWriter class methodsFor: 'image reading/writing' stamp: 'nk 7/16/2003 17:57'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#('png')! !!ProjectViewMorph class methodsFor: 'fileIn/Out' stamp: 'nk 7/16/2003 15:55'!fileReaderServicesForFile: fullName suffix: suffix	^({ 'extseg'. 'project'. 'pr'. 'morph'. 'morphs'. 'sp'. '*' } includes: suffix)		ifTrue: [ self services]		ifFalse: [#()]! !!SimpleServiceEntry methodsFor: 'printing' stamp: 'nk 10/14/2003 10:04'!printOn: aStream	aStream nextPutAll: self class name; nextPutAll: ': ('.	self provider notNil		ifTrue: [aStream nextPutAll: provider printString].	aStream nextPutAll: ' --- '. 	self selector notNil		ifTrue: [aStream nextPutAll: selector asString].	aStream nextPut: $)! !!TTCFont class methodsFor: 'file list services' stamp: 'nk 7/16/2003 15:40'!fileReaderServicesForFile: fullName suffix: suffix 	^(suffix = 'ttf')  | (suffix = '*') 		ifTrue: [ self services ]		ifFalse: [ #() ]! !!TTFontReader class methodsFor: 'class initialization' stamp: 'nk 7/16/2003 15:56'!fileReaderServicesForFile: fullName suffix: suffix	^(suffix = 'fnt')  | (suffix = '*') 		ifTrue: [ self services]		ifFalse: [#()]! !!XBMReadWriter methodsFor: 'private' stamp: 'nk 7/16/2003 18:17'!readHeader	"Set width and height, and position stream at start of bytes"	| number setwidth setheight fieldName |	setwidth _ setheight _ false.		[((stream atEnd) or: [setwidth and: [setheight]])]		whileFalse: [	  	self skipCComments.		(stream nextMatchAll: '#define ') ifFalse: [^ false].		(stream skipTo: $_) ifFalse: [^ false].		fieldName _ String streamContents:			[:source |			[(stream atEnd) or: [ stream peek isSeparator ]]				whileFalse: [ source nextPut: stream next]].	  	(fieldName = 'width') ifTrue: [			stream skipSeparators.			number _ Integer readFrom: stream.			(number > 0) ifTrue: [setwidth _true].	  		width _ number.].		(fieldName = 'height') ifTrue: [			stream skipSeparators.			number _ Integer readFrom: stream.			(number > 0) ifTrue: [setheight _ true].			height _ number.			].		].	(setwidth & setheight) ifFalse: [^ false].	^ stream skipTo: ${! !!XBMReadWriter methodsFor: 'private' stamp: 'nk 7/16/2003 18:15'!skipCComments	[ stream skipSeparators.	stream peekFor: $/ ] whileTrue: [		stream next.		"skip next *"		[ (stream skipTo: $*) ifFalse: [ ^false ].			stream peekFor: $/ ] whileFalse ]! !!XBMReadWriter methodsFor: 'accessing' stamp: 'nk 7/16/2003 18:18'!understandsImageFormat	"Test to see if the image stream format is understood by this decoder.	This should be implemented in each subclass of ImageReadWriter so that	a proper decoder can be selected without ImageReadWriter having to know about all possible image file types."	| first |	stream ascii.	self skipCComments.	first _ (stream next: 7) asString.	stream binary.	^ (first = '#define')! !!XBMReadWriter class methodsFor: 'class initialization' stamp: 'nk 7/16/2003 17:57'!typicalFileExtensions	"Answer a collection of file extensions (lowercase) which files that I can read might commonly have"	^#('xbm')! !PluggableFileList removeSelector: #itemsForFileEnding:!FileList2 class removeSelector: #addPanesTo:from:!FileList2 class removeSelector: #specsForImageViewer!FileList2 removeSelector: #openAsBackground!FileList removeSelector: #addFileToZip!FileList removeSelector: #browseChanges!FileList removeSelector: #browseFiles!FileList removeSelector: #browseRecentChanges!FileList removeSelector: #editFile!FileList removeSelector: #fullNameArguments!FileList removeSelector: #itemsForFileEnding:!FileList removeSelector: #loadCRDictionary!FileList removeSelector: #loadCRDisplayProperties!FileList removeSelector: #optionalButtonServices!FileList removeSelector: #selectorsWithArgsSelector!FileList removeSelector: #serviceAddFileToZip!FileList removeSelector: #serviceSelectorsForButtonPane!FileList removeSelector: #templateFile!