'From Squeak2.8alpha of 13 January 2000 [latest update: #2066] on 6 May 2000 at 12:07:29 am'!"Change Set:		morphicTrimmings-swDate:			6 May 2000Author:			Scott WallaceA small amount of trimming of gratuitous bloat"!!Morph methodsFor: 'structure' stamp: 'sw 3/22/2000 14:16'!ownerThatIsA: firstClass orA: secondClass	"Return the first enclosing morph that is a kind of one of the two classes given, or nil if none"	| current |	current _ owner.	[current == nil] whileFalse:			[((current isKindOf: firstClass) or: [current isKindOf: secondClass]) ifTrue: [^ current].			current _ current owner].	^ current! !!Morph methodsFor: 'stepping and presenter' stamp: 'sw 3/22/2000 14:27'!arrangeToStartStepping	"Arrange to start getting sent the 'step' message, but don't do that initial #step call that startStepping does"	self arrangeToStartSteppingIn: self world! !!Morph methodsFor: 'stepping and presenter' stamp: 'sw 3/22/2000 14:26'!arrangeToStartSteppingIn: aWorld	"Start getting sent the 'step' message in aWorld.  Like startSteppingIn:, but without the initial one to get started'"	aWorld ifNotNil:		[aWorld startStepping: self.		self changed]! !!Morph methodsFor: 'stepping and presenter' stamp: 'sw 3/22/2000 14:28'!isStepping	"Return true if the receiver is currently stepping in its world"	| aWorld |	^ (aWorld _ self world)		ifNil:		[false]		ifNotNil:	[aWorld isStepping: self]! !!CategoryViewer methodsFor: 'entries' stamp: 'sw 3/22/2000 23:12'!infoButtonFor: aScriptOrSlotSymbol	| aButton balloonTextSelector |	balloonTextSelector _ nil.	(scriptedPlayer slotInfo includesKey: aScriptOrSlotSymbol asSymbol)		ifTrue: [balloonTextSelector _ #userSlot].	(scriptedPlayer belongsToUniClass and:			[scriptedPlayer class includesSelector: aScriptOrSlotSymbol])		ifTrue: [balloonTextSelector _ #userScript].	aButton _ SimpleButtonMorph new.	aButton target: scriptedPlayer;		actionSelector: #infoFor:inViewer:;		arguments: (Array with: aScriptOrSlotSymbol with: self);		label: '¥' font: (StrikeFont familyName: #ComicBold size: 12);		color: Color transparent;		borderWidth: 0;		actWhen: #buttonDown.	aButton balloonTextSelector: (balloonTextSelector ifNil: [aScriptOrSlotSymbol]).	^ aButton! !!CategoryViewer methodsFor: 'entries' stamp: 'sw 3/23/2000 01:01'!phraseForSlot: slotName type: partType readOnly: readOnly getSelector: getSelector putSelector: putSelector	"Return a PhraseTileMorph representing the slot in the viewer"	| r anArrow |	r _ ViewerRow newRow		color: self color;		beSticky;		elementSymbol: slotName asSymbol;		centering: #center.	r addMorphBack: (self slotHeaderFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: (self infoButtonFor: slotName).	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: self tileForSelf bePossessive.	r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"	r addMorphBack: (self getterButtonFor: slotName type: partType).	(slotName == #isOverColor)		ifTrue:			[self addIsOverColorDetailTo: r]		ifFalse:			[readOnly ifFalse:				[r addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"				r addMorphBack: (anArrow _ self arrowSetterButtonFor: slotName type: partType)].			r addMorphBack: (AlignmentMorph new beTransparent).  "flexible spacer"			(#(colorSees) includes: slotName) ifFalse:		 		[r addMorphBack: (self readoutFor: slotName type: partType readOnly: readOnly getSelector: getSelector putSelector: putSelector)]].	anArrow ifNotNil: [anArrow step].	^ r! !!Player methodsFor: 'costume' stamp: 'sw 3/22/2000 14:17'!costume: aMorph	"Make aMorph be the receiver's current costume"	| itsBounds |	costume == aMorph ifTrue: [^ self].	costume ifNotNil:		[self rememberCostume: costume renderedMorph.		itsBounds _ costume bounds.		(costume ownerThatIsA: HandMorph orA: PasteUpMorph) replaceSubmorph: costume topRendererOrSelf by: aMorph.		aMorph position: itsBounds origin.		aMorph actorState: costume actorState.		aMorph setNameTo: costume externalName].	aMorph player: self.	costume _ aMorph.	aMorph arrangeToStartStepping! !!Player methodsFor: 'slots-kernel' stamp: 'sw 3/22/2000 23:13'!categoriesForWorld	"Answer the list of categories given that the receiver is the Player representing a World"	| aList |	aList _ #('basic' 'color & border' 'pen trails' 'playfield') asOrderedCollection.	self slotNames size > 0 ifTrue:		[aList add: 'instance variables'].	self class scripts size > 0 ifTrue:		[aList add: 'scripts'].	aList removeAllFoundIn: #('card/stack commands' 'object fileIn').	^ aList! !!Player methodsFor: 'slots-kernel' stamp: 'sw 3/23/2000 01:01'!commandPhraseFor: commandSpec inViewer: aViewer	| entry aRow resultType cmd names argType argTile selfTile aPhrase |	entry _ (commandSpec copy asOrderedCollection removeFirst; yourself) asArray.	names _ self class namedTileScriptSelectors.	resultType _ (entry at: 1).	cmd _ (entry at: 2).	entry size = 2		ifTrue:			[aPhrase _ PhraseTileMorph new setOperator: cmd				type: resultType				rcvrType: #player]		ifFalse: 			[argType _ entry at: 3.			aPhrase _ PhraseTileMorph new setOperator: cmd				type: resultType				rcvrType: #player				argType: argType.			argTile _ self tileForArgType: argType inViewer: aViewer.			argTile position: aPhrase lastSubmorph position.			aPhrase lastSubmorph addMorph: argTile].	(names includes: cmd) ifTrue: [aPhrase userScriptSelector: cmd].	aPhrase markAsPartsDonor.	selfTile _ aViewer tileForSelf.	selfTile position: aPhrase firstSubmorph position.	aPhrase firstSubmorph addMorph: selfTile.	aRow _ ViewerRow newRow borderWidth: 0; color: aViewer color.	aRow elementSymbol: cmd asSymbol.	aRow addMorphBack: (ScriptingSystem tryButtonFor: aPhrase).	aRow addMorphBack: (Morph new extent: 4@2; beTransparent).	aRow addMorphBack: (aViewer infoButtonFor: cmd).	aRow addMorphBack: aPhrase.	aRow beSticky; openToDragNDrop: false.	^ aRow! !!Preferences class methodsFor: 'help' stamp: 'sw 3/23/2000 01:00'!helpMsgsQThroughZ	^ #(	(reverseWindowStagger	'If true, a reverse-stagger strategy  is used for determining where newly launched windows will be placed; if false, a direct- stagger strategy is used.')(roundedMenuCorners	'Whether morphic menus should have rounded corners')(roundedWindowCorners	'Governs whether morphic system windows should have rounded corners')(scrollBarsNarrow		'If true, morphic scrollbars will be narrow.')(scrollBarsOnRight		'If true, morphic scrollbars in subsequently opened windows will appear on the right side of their pane.')(scrollBarsWithoutMenuButton		'If true, morphic scrollbars in subsequently opened windows will not include a menu button.')(smartUpdating	'If true, then morphic tools such as browsers and inspectors will keep their contents up to date automatically, so that if something changes anywhere, the change will be reflected everywhere.')(soundQuickStart	'If true, attempt to start playing sounds using optional "quick start"')(soundsEnabled	'If false, all sound playing is disabled')(systemWindowEmbedOK	'Determines whether, in Morphic, when a SystemWindow is dropped onto a willing receptor it should be deposited into that receptor.')(timeStampsInMenuTitles	'If true, then the author''s timestamp is displayed as the menu title of any message list; if false, no author''s timestamps are shown')(thoroughSenders	'If true, then ''senders'' browsers will dive inside structured literals in their search')(twentyFourHourFileStamps	'If #changeSetVersionNumbers is false, this preference determines whether the date/time suffix used with changeset fileouts is based on a 24-hr clock or a 12-hr clock.')(uniformWindowColors	'If true, then all standard windows are given the same color rather than their customized window-type-specific colors')(unlimitedPaintArea	'If true, the painting area for a new drawing will not be limited in size; if false, a reasonablelimit will be applied, in an attempt to hold down memory and time price.')(updateRemoveSequenceNum	'If true, then remove the leading sequence number from the filename before automatically saving a local copy of any update loaded.')(updateSavesFile	'If true, then when an update is loaded from the server, a copy of it will automatically be saved on a local file as well.')(useGlobalFlaps	'If true, then flaps are shown along the edges of Morphic projects.')(viewersInFlaps	'If true, viewers are projected into flaps along the right edge of the screen')(warnIfNoChangesFile	'If true, then you will be warned, whenever you start up, if no changes filecan be found')(warnIfNoSourcesFile 	'If true, then you will be warned, whenever you start up, if no sources file can be found')			) ! !ViewerRow removeSelector: #addDetailButton!ViewerEntry removeSelector: #addHelpPane!ViewerEntry removeSelector: #contents!Preferences class removeSelector: #showPlayerSource!Preferences class removeSelector: #showScriptSource!Preferences class removeSelector: #useDetailPanesInViewers!Player removeSelector: #setCostume:!OrderedCollectionInspector removeSelector: #selectedSlotName!BorderedMorph removeSelector: #wearCostume:!Morph removeSelector: #ownerThatIsAHandOrA:!Morph removeSelector: #owningHandOrPasteUpMorph!Morph removeSelector: #wearCostume:!ContextVariablesInspector removeSelector: #selectedSlotName!Inspector removeSelector: #selectedSlotName!