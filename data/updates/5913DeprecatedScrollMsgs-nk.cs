'From Squeak3.7beta of ''1 April 2004'' [latest update: #5905] on 28 April 2004 at 4:31:15 pm'!"Change Set:		DeprecatedScrollMsgsFix-nkDate:			28 April 2004Author:			Ned KonzA number of scrollbar-related messages were deprecated recently, but their senders weren't edited.This change set changes most of the senders of these messages to call the appropriate new methods.Perhaps it should be required that when you deprecate a method you should run with showDeprecationWarnings turned on for a while before releasing..."!!CodeHolder methodsFor: 'annotation' stamp: 'nk 4/28/2004 10:16'!addOptionalAnnotationsTo: window at: fractions plus: verticalOffset	"Add an annotation pane to the window if preferences indicate a desire for it, and return the incoming verticalOffset plus the height of the added pane, if any"	| aTextMorph divider delta |	self wantsAnnotationPane ifFalse: [^ verticalOffset].	aTextMorph _ PluggableTextMorph 		on: self		text: #annotation 		accept: nil		readSelection: nil		menu: #annotationPaneMenu:shifted:.	aTextMorph		askBeforeDiscardingEdits: false;		borderWidth: 0;		hideScrollBarsIndefinitely.	divider _ BorderedSubpaneDividerMorph forBottomEdge.	Preferences alternativeWindowLook ifTrue:[		divider extent: 4@4; color: Color transparent; borderColor: #raised; borderWidth: 2.	].	delta _ self defaultAnnotationPaneHeight.	window 		addMorph: aTextMorph 		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@verticalOffset corner: 0@(verticalOffset + delta - 1))).	window 		addMorph: divider		fullFrame: (LayoutFrame 				fractions: fractions 				offsets: (0@(verticalOffset + delta - 1) corner: 0@(verticalOffset + delta))).	^ verticalOffset + delta! !!CodeHolder methodsFor: 'tiles' stamp: 'nk 4/28/2004 10:14'!installTilesForSelection	"Install universal tiles into the code pane."	| source aSelector aClass tree syn tileScriptor aWindow codePane |	(aWindow _ self containingWindow)		ifNil: [self error: 'hamna dirisha'].	tileScriptor _ ((aSelector _ self selectedMessageName) isNil					or: [(aClass _ self selectedClassOrMetaClass whichClassIncludesSelector: aSelector) isNil])				ifTrue: [PluggableTileScriptorMorph new]				ifFalse: [source _ aClass sourceCodeAt: aSelector.					tree _ Compiler new								parse: source								in: aClass								notifying: nil.					(syn _ tree asMorphicSyntaxUsing: SyntaxMorph) parsedInClass: aClass.					syn inAPluggableScrollPane].	codePane _ aWindow				findDeepSubmorphThat: [:m | (m isKindOf: PluggableTextMorph)						and: [m getTextSelector == #contents]]				ifAbsent: [].	codePane		ifNotNil: [codePane hideScrollBars].	codePane		ifNil: [codePane _ aWindow						findDeepSubmorphThat: [:m | m isKindOf: PluggableTileScriptorMorph]						ifAbsent: [self error: 'no code pane']].	tileScriptor color: aWindow paneColorToUse;		 setProperty: #hideUnneededScrollbars toValue: true.	aWindow replacePane: codePane with: tileScriptor.	currentCompiledMethod _ aClass				ifNotNil: [aClass compiledMethodAt: aSelector].	tileScriptor owner clipSubmorphs: true.	tileScriptor extent: codePane extent! !!Browser methodsFor: 'initialize-release' stamp: 'nk 4/28/2004 10:17'!openAsMorphSysCatEditing: editString	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window hSepFrac switchHeight mySingletonList nextOffsets |	window _ (SystemWindow labelled: 'later') model: self.	hSepFrac _ 0.30.	switchHeight _ 25.	mySingletonList _ PluggableListMorph on: self list: #systemCategorySingleton			selected: #indexIsOne changeSelected: #indexIsOne:			menu: #systemCatSingletonMenu: keystroke: #systemCatSingletonKey:from:. 	mySingletonList enableDragNDrop: Preferences browseWithDragNDrop.	mySingletonList hideScrollBarsIndefinitely.	window 		addMorph: mySingletonList		fullFrame: (			LayoutFrame 				fractions: (0@0 corner: 1@0) 				offsets: (0@0  corner: 0@switchHeight)		).		self 		addClassAndSwitchesTo: window 		at: (0@0 corner: 0.3333@hSepFrac)		plus: switchHeight.	nextOffsets _ 0@switchHeight corner: 0@0.	window 		addMorph: self buildMorphicMessageCatList		fullFrame: (			LayoutFrame 				fractions: (0.3333@0 corner: 0.6666@hSepFrac) 				offsets: nextOffsets		).		window 		addMorph: self buildMorphicMessageList		fullFrame: (			LayoutFrame 				fractions: (0.6666@0 corner: 1@hSepFrac) 				offsets: nextOffsets		).		self 		addLowerPanesTo: window 		at: (0@hSepFrac corner: 1@1) 		with: editString.	window setUpdatablePanesFrom: #( classList messageCategoryList messageList).	^ window! !!FileContentsBrowser methodsFor: 'creation' stamp: 'nk 4/28/2004 10:18'!addLowerPanesTo: window at: nominalFractions with: editString	| verticalOffset row codePane infoPane infoHeight divider |	row _ AlignmentMorph newColumn		hResizing: #spaceFill;		vResizing: #spaceFill;		layoutInset: 0;		borderWidth: 1;		borderColor: Color black;		layoutPolicy: ProportionalLayout new.	codePane _ PluggableTextMorph on: self text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	infoPane _ PluggableTextMorph on: self text: #infoViewContents accept: nil			readSelection: nil menu: nil.	infoPane askBeforeDiscardingEdits: false.	verticalOffset _ 0.">>not with this browser--- at least not yet ---	innerFractions _ 0@0 corner: 1@0.	verticalOffset _ self addOptionalAnnotationsTo: row at: innerFractions plus: verticalOffset.	verticalOffset _ self addOptionalButtonsTo: row  at: innerFractions plus: verticalOffset.<<<<"	infoHeight _ 20.	row 		addMorph: (codePane borderWidth: 0)		fullFrame: (			LayoutFrame 				fractions: (0@0 corner: 1@1) 				offsets: (0@verticalOffset corner: 0@infoHeight negated)		).	divider _ BorderedSubpaneDividerMorph forTopEdge.	Preferences alternativeWindowLook ifTrue:[		divider extent: 4@4; color: Color transparent; borderColor: #raised; borderWidth: 2.	].	row 		addMorph: divider		fullFrame: (			LayoutFrame 				fractions: (0@1 corner: 1@1) 				offsets: (0@infoHeight negated corner: 0@(1-infoHeight))		).	row 		addMorph: (infoPane borderWidth: 0; hideScrollBarsIndefinitely)		fullFrame: (			LayoutFrame 				fractions: (0@1 corner: 1@1) 				offsets: (0@(1-infoHeight) corner: 0@0)		).	window 		addMorph: row		frame: nominalFractions.	row on: #mouseEnter send: #paneTransition: to: window.	row on: #mouseLeave send: #paneTransition: to: window.! !!FileContentsBrowser methodsFor: 'creation' stamp: 'nk 4/28/2004 10:18'!openAsMorph	"Create a pluggable version of all the views for a Browser, including views and controllers."	| window aListExtent next mySingletonList |	window _ (SystemWindow labelled: 'later') model: self.	self packages size = 1		ifTrue: [			aListExtent _ 0.333333 @ 0.34.			self systemCategoryListIndex: 1.			mySingletonList _ PluggableListMorph on: self list: #systemCategorySingleton					selected: #indexIsOne changeSelected: #indexIsOne:					menu: #packageListMenu:					keystroke: #packageListKey:from:.			mySingletonList hideScrollBarsIndefinitely.			window addMorph: mySingletonList frame: (0@0 extent: 1.0@0.06).			next := 0@0.06]		ifFalse: [			aListExtent _ 0.25 @ 0.4.			window addMorph: (PluggableListMorph on: self list: #systemCategoryList					selected: #systemCategoryListIndex changeSelected: #systemCategoryListIndex:					menu: #packageListMenu:					keystroke: #packageListKey:from:)				frame: (0@0 extent: aListExtent).			next := aListExtent x @ 0].	self addClassAndSwitchesTo: window at: (next extent: aListExtent) plus: 0.	next := next + (aListExtent x @ 0).	window addMorph: (PluggableListMorph on: self list: #messageCategoryList			selected: #messageCategoryListIndex changeSelected: #messageCategoryListIndex:			menu: #messageCategoryMenu:)		frame: (next extent: aListExtent).	next := next + (aListExtent x @ 0).	window addMorph: (PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:			keystroke: #messageListKey:from:)		frame: (next extent: aListExtent).	self addLowerPanesTo: window at: (0@0.4 corner: 1@1) with: nil.	^ window! !!FileList class methodsFor: 'instance creation' stamp: 'nk 4/28/2004 10:18'!addVolumesAndPatternPanesTo: window at: upperFraction plus: offset forFileList: aFileList 	| row patternHeight volumeListMorph patternMorph divider dividerDelta |	row _ AlignmentMorph newColumn hResizing: #spaceFill;				 vResizing: #spaceFill;				 layoutInset: 0;				 borderWidth: 0;				 layoutPolicy: ProportionalLayout new.	patternHeight _ 25.	volumeListMorph _ (PluggableListMorph				on: aFileList				list: #volumeList				selected: #volumeListIndex				changeSelected: #volumeListIndex:				menu: #volumeMenu:)				autoDeselect: false.	volumeListMorph enableDrag: false; enableDrop: true.	patternMorph _ PluggableTextMorph				on: aFileList				text: #pattern				accept: #pattern:.	patternMorph acceptOnCR: true.	patternMorph hideScrollBarsIndefinitely.	divider _ BorderedSubpaneDividerMorph horizontal.	dividerDelta _ 0.	Preferences alternativeWindowLook		ifTrue: [divider extent: 4 @ 4;				 color: Color transparent;				 borderColor: #raised;				 borderWidth: 2.			volumeListMorph borderColor: Color transparent.			patternMorph borderColor: Color transparent.			dividerDelta _ 3].	row		addMorph: (volumeListMorph autoDeselect: false)		fullFrame: (LayoutFrame				fractions: (0 @ 0 corner: 1 @ 1)				offsets: (0 @ 0 corner: 0 @ patternHeight negated - dividerDelta)).	row		addMorph: divider		fullFrame: (LayoutFrame				fractions: (0 @ 1 corner: 1 @ 1)				offsets: (0 @ patternHeight negated - dividerDelta corner: 0 @ patternHeight negated)).	row		addMorph: patternMorph		fullFrame: (LayoutFrame				fractions: (0 @ 1 corner: 1 @ 1)				offsets: (0 @ patternHeight negated corner: 0 @ 0)).	window		addMorph: row		fullFrame: (LayoutFrame				fractions: upperFraction				offsets: (0 @ offset corner: 0 @ 0)).	Preferences alternativeWindowLook		ifTrue: [row borderWidth: 2] ifFalse: [row borderWidth: 0]! !!Lexicon methodsFor: 'tiles' stamp: 'nk 4/28/2004 10:15'!installTilesForSelection	"Install universal tiles into the code pane."	| source aSelector aClass tree syn tileScriptor aWindow codePane |	(aWindow _ self containingWindow)		ifNil: [self error: 'hamna dirisha'].	aSelector _ self selectedMessageName.	aClass _ self selectedClassOrMetaClass				ifNil: [targetClass].	aClass		ifNotNil: [aSelector				ifNil: [source _ SyntaxMorph sourceCodeTemplate]				ifNotNil: [aClass _ self selectedClassOrMetaClass whichClassIncludesSelector: aSelector.					source _ aClass sourceCodeAt: aSelector].			tree _ Compiler new						parse: source						in: aClass						notifying: nil.			(syn _ tree asMorphicSyntaxUsing: SyntaxMorph) parsedInClass: aClass.			tileScriptor _ syn inAPluggableScrollPane].	codePane _ aWindow				findDeepSubmorphThat: [:m | (m isKindOf: PluggableTextMorph)						and: [m getTextSelector == #contents]]				ifAbsent: [].	codePane		ifNotNil: [codePane hideScrollBars].	codePane		ifNil: [codePane _ aWindow						findDeepSubmorphThat: [:m | m isKindOf: PluggableTileScriptorMorph]						ifAbsent: [self error: 'no code pane']].	tileScriptor color: aWindow paneColorToUse;		 setProperty: #hideUnneededScrollbars toValue: true.	aWindow replacePane: codePane with: tileScriptor.	currentCompiledMethod _ aClass				ifNotNil: [aClass						compiledMethodAt: aSelector						ifAbsent: []].	tileScriptor owner clipSubmorphs: true.	tileScriptor extent: codePane extent! !!MessageNames methodsFor: 'initialization' stamp: 'nk 4/28/2004 10:18'!inMorphicWindowWithInitialSearchString: initialString	"Answer a morphic window with the given initial search string, nil if none""MessageNames openMessageNames"	| window selectorListView firstDivider secondDivider horizDivider typeInPane searchButton plugTextMor |	window _ (SystemWindow labelled: 'Message Names') model: self.	firstDivider _ 0.07.	secondDivider _ 0.5.	horizDivider _ 0.5.	typeInPane _ AlignmentMorph newRow vResizing: #spaceFill; height: 14.	typeInPane hResizing: #spaceFill.	typeInPane listDirection: #leftToRight.	plugTextMor _ PluggableTextMorph on: self					text: #searchString accept: #searchString:notifying:					readSelection: nil menu: nil.	plugTextMor setProperty: #alwaysAccept toValue: true.	plugTextMor askBeforeDiscardingEdits: false.	plugTextMor acceptOnCR: true.	plugTextMor setTextColor: Color brown.	plugTextMor setNameTo: 'Search'.	plugTextMor vResizing: #spaceFill; hResizing: #spaceFill.	plugTextMor hideScrollBarsIndefinitely.	plugTextMor setTextMorphToSelectAllOnMouseEnter.	searchButton _ SimpleButtonMorph new 		target: self;		beTransparent;		label: 'Search';		actionSelector: #doSearchFrom:;		arguments: {plugTextMor}.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list pane below.  Click on any one of them, and all the implementors of that selector will be shown in the right-hand pane, and you can view and edit their code without leaving this tool.'.	typeInPane addMorphFront: searchButton.	typeInPane addTransparentSpacerOfSize: 6@0.	typeInPane addMorphBack: plugTextMor.	initialString isEmptyOrNil ifFalse:		[plugTextMor setText: initialString].	window addMorph: typeInPane frame: (0@0 corner: horizDivider @ firstDivider).	selectorListView _ PluggableListMorph on: self		list: #selectorList		selected: #selectorListIndex		changeSelected: #selectorListIndex:		menu: #selectorListMenu:		keystroke: #selectorListKey:from:.	selectorListView menuTitleSelector: #selectorListMenuTitle.	window addMorph: selectorListView frame: (0 @ firstDivider corner: horizDivider @ secondDivider).	window addMorph: self buildMorphicMessageList frame: (horizDivider @ 0 corner: 1@ secondDivider).	self 		addLowerPanesTo: window 		at: (0 @ secondDivider corner: 1@1) 		with: nil.	initialString isEmptyOrNil ifFalse:		[self searchString: initialString notifying: nil].	^ window! !!PreferencesPanel methodsFor: 'find' stamp: 'nk 4/28/2004 10:18'!addHelpItemsTo: panelPage	"Add the items appropriate the the ? page of the receiver"	| aButton aTextMorph aMorph firstTextMorph |	panelPage hResizing: #shrinkWrap; vResizing: #shrinkWrap.	firstTextMorph _  TextMorph new contents: 'Search Preferences for:'.	firstTextMorph beAllFont: ((TextStyle default fontOfSize: 13) emphasized: 1).	panelPage addMorphBack: firstTextMorph lock.	panelPage addTransparentSpacerOfSize: 0@10.	aMorph _ RectangleMorph new clipSubmorphs: true; beTransparent; borderWidth: 2; borderColor: Color black; extent: 250 @ 36.	aMorph vResizing: #rigid; hResizing: #rigid.	aTextMorph _  PluggableTextMorph new				on: self				text: #searchString				accept: #setSearchStringTo:				readSelection: nil				menu: nil."	aTextMorph hResizing: #rigid."	aTextMorph borderWidth: 0.	aTextMorph font: ((TextStyle default fontOfSize: 21) emphasized: 1); setTextColor: Color red.	aMorph addMorphBack: aTextMorph.	aTextMorph acceptOnCR: true.	aTextMorph position: (aTextMorph position + (6@5)).	aMorph clipLayoutCells: true.	aTextMorph extent: 240 @ 25.	panelPage addMorphBack: aMorph.	aTextMorph setBalloonText: 'Type what you want to search for here, then hit the "Search" button, or else hit RETURN or ENTER'.	aTextMorph setTextMorphToSelectAllOnMouseEnter.	aTextMorph hideScrollBarsIndefinitely.	panelPage addTransparentSpacerOfSize: 0@10.	aButton _ SimpleButtonMorph new target: self; color: Color transparent; actionSelector: #initiateSearch:; arguments: {aTextMorph}; label: 'Search'.	panelPage addMorphBack: aButton.	aButton setBalloonText: 'Type what you want to search for in the box above, then click here (or hit RETURN or ENTER) to start the search; results will appear in the "search results" category.'.	panelPage addTransparentSpacerOfSize: 0@30.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Restore all Default Preference Settings'; target: Preferences; actionSelector: #chooseInitialSettings; setBalloonText: 'Click here to reset all the preferences to their standard default values.'; yourself).	panelPage addTransparentSpacerOfSize: 0@14.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Save Current Settings as my Personal Preferences'; 		target: Preferences; actionSelector: #savePersonalPreferences; setBalloonText: 'Click here to save the current constellation of Preferences settings as your personal defaults; you can get them all reinstalled with a single gesture by clicking the "Restore my Personal Preferences".'; yourself).	panelPage addTransparentSpacerOfSize: 0@14.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Restore my Personal Preferences'; target: Preferences; actionSelector: #restorePersonalPreferences; setBalloonText: 'Click here to reset all the preferences to their values in your Personal Preferences.'; yourself).	panelPage addTransparentSpacerOfSize: 0@30.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Save Current Settings to Disk'; 		target: Preferences; actionSelector: #storePreferencesToDisk; setBalloonText: 'Click here to save the current constellation of Preferences settings to a file; you can get them all reinstalled with a single gesture by clicking "Restore Settings From Disk".'; yourself).	panelPage addTransparentSpacerOfSize: 0@14.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Restore Settings from Disk'; target: Preferences; actionSelector: #restorePreferencesFromDisk; setBalloonText: 'Click here to load all the preferences from their saved values on disk.'; yourself).	panelPage addTransparentSpacerOfSize: 0@30.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Inspect Parameters'; target: Preferences; actionSelector: #inspectParameters; setBalloonText: 'Click here to view all the values stored in the system Parameters dictionary'; yourself).	panelPage addTransparentSpacerOfSize: 0@10.	panelPage addMorphBack: (Preferences themeChoiceButtonOfColor: Color transparent font: TextStyle defaultFont).	panelPage addTransparentSpacerOfSize: 0@10.	panelPage addMorphBack: (SimpleButtonMorph new color: Color transparent; label: 'Help!!'; target: Preferences; actionSelector: #giveHelpWithPreferences; setBalloonText: 'Click here to get some hints on use of this Preferences Panel'; yourself).	panelPage wrapCentering: #center.! !!ScrollPane methodsFor: 'OBSOLETE' stamp: 'nk 4/28/2004 10:16'!hideScrollBarIndefinitely	^self		deprecated: 'Use "hideScrollBarsIndefinitely", "hideHScrollBarIndefinitely: true" or "hideVScrollBarIndefinitely: true" instead.'		block: [ self hideScrollBarsIndefinitely  ]! !!ScrollPane methodsFor: 'access options' stamp: 'nk 4/28/2004 10:08'!hideScrollBarsIndefinitely	self hideScrollBarsIndefinitely: true! !!ScrollPane methodsFor: 'scrolling' stamp: 'nk 4/28/2004 10:15'!hideOrShowScrollBar	"Hide or show the scrollbar depending on if the pane is scrolled/scrollable."	"Don't do anything with the retractable scrollbar unless we have focus"	retractableScrollBar & self hasFocus not ifTrue: [^self].	"Don't show it if we were told not to."	(self valueOfProperty: #noScrollBarPlease ifAbsent: [false]) ifTrue: [^self].	self isScrollable not & self isScrolledFromTop not ifTrue: [self hideScrollBars].	self isScrollable | self isScrolledFromTop ifTrue: [self showScrollBars].! !!ScrollPane methodsFor: 'scrolling' stamp: 'nk 4/28/2004 10:22'!scrollToShow: aRectangle	"scroll to include as much of aRectangle as possible, where aRectangle is in the scroller's local space"	| range |	((aRectangle top - scroller offset y) >= 0 and: [		(aRectangle bottom - scroller offset y) <= bounds height ])		ifTrue:[ "already visible"^self ].	range _ self vLeftoverScrollRange.	scrollBar value: (range > 0		ifTrue: [((aRectangle top) / self vLeftoverScrollRange)							truncateTo: scrollBar scrollDelta]		ifFalse: [0]).	scroller offset: -3 @ (range * scrollBar value).! !!AlansTextPlusMorph methodsFor: 'scroll bar events' stamp: 'nk 4/28/2004 10:22'!scrollBarValue: scrollValue	| newPt pageBreaks topOfPage |	scroller hasSubmorphs ifFalse: [^ self].	newPt _ -3 @ (self vLeftoverScrollRange * scrollValue).	pageBreaks _ self valueOfProperty: #pageBreakRectangles ifAbsent: [#()].	pageBreaks isEmpty ifTrue: [		^scroller offset: newPt.	].	topOfPage _ pageBreaks inject: (0@0 corner: 0@0) into: [ :closest :each |		(each bottom - newPt y) abs < (closest bottom - newPt y) abs ifTrue: [			each 		] ifFalse: [			closest 		].	].	topOfPage ifNotNil: [		newPt _ newPt x @ topOfPage bottom.		scrollBar value: newPt y / self vLeftoverScrollRange.	].	scroller offset: newPt.! !!AlansTextPlusMorph methodsFor: 'scrolling' stamp: 'nk 4/28/2004 10:14'!vHideScrollBar	self keepScrollBarAlways ifTrue: [^self].	^super vHideScrollBar! !!MethodMorph methodsFor: 'scrolling' stamp: 'nk 4/28/2004 10:23'!showScrollBar	"Copied down and modified to get rid of the ruinous comeToFront of the inherited version."	| scriptor |	(submorphs includes: scrollBar)		ifTrue: [^ self].	self vResizeScrollBar.	self privateAddMorph: scrollBar atIndex: 1.	retractableScrollBar		ifTrue:			["Bring the pane to the front so that it is fully visible"			"self comeToFront. -- thanks but no thanks"			(scriptor _ self ownerThatIsA: ScriptEditorMorph)				ifNotNil:					[scriptor comeToFront]]		ifFalse: [self resetExtent]! !!SearchingViewer methodsFor: 'initialization' stamp: 'nk 4/28/2004 10:18'!addNamePaneTo: header	"Add the namePane, which may be a popup or a type-in depending on the type of CategoryViewer"	| plugTextMor searchButton |	namePane _ AlignmentMorph newRow vResizing: #spaceFill; height: 14.	namePane hResizing: #spaceFill.	namePane listDirection: #leftToRight.	plugTextMor _ PluggableTextMorph on: self					text: #searchString accept: #searchString:notifying:					readSelection: nil menu: nil.	plugTextMor setProperty: #alwaysAccept toValue: true.	plugTextMor askBeforeDiscardingEdits: false.	plugTextMor acceptOnCR: true.	plugTextMor setTextColor: Color brown.	plugTextMor setNameTo: 'Search' translated.	plugTextMor vResizing: #spaceFill; hResizing: #spaceFill.	plugTextMor hideScrollBarsIndefinitely.	plugTextMor setTextMorphToSelectAllOnMouseEnter.	searchButton _ SimpleButtonMorph new 		target: self;		beTransparent;		label: 'Search' translated;		actionSelector: #doSearchFrom:;		arguments: {plugTextMor}.	searchButton setBalloonText: 'Type some letters into the pane at right, and then press this Search button (or hit RETURN) and all method selectors that match what you typed will appear in the list below.' translated.	namePane addMorphFront: searchButton.	namePane addTransparentSpacerOfSize: 6@0.	namePane addMorphBack: plugTextMor.	header addMorphBack: namePane! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'nk 4/28/2004 10:18'!morphicWindow	"Create a Browser that lets you type part of a selector, shows a list of selectors, shows the classes of the one you chose, and spawns a full browser on it.  Answer the window	SelectorBrowser new open "	| window typeInView selectorListView classListView |	window _ (SystemWindow labelled: 'later') model: self.	window setStripeColorsFrom: self defaultBackgroundColor.	selectorIndex _ classListIndex _ 0.	typeInView _ PluggableTextMorph on: self 		text: #contents accept: #contents:notifying:		readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	typeInView acceptOnCR: true.	typeInView hideScrollBarsIndefinitely.	window addMorph: typeInView frame: (0@0 corner: 0.5@0.14).	selectorListView _ PluggableListMorph on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #selectorMenu:		keystroke: #messageListKey:from:.	selectorListView menuTitleSelector: #selectorMenuTitle.	window addMorph: selectorListView frame: (0@0.14 corner: 0.5@0.6).	classListView _ PluggableListMorph on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: nil		keystroke: #arrowKey:from:.	classListView menuTitleSelector: #classListSelectorTitle.	window addMorph: classListView frame: (0.5@0 corner: 1@0.6).	window addMorph: ((PluggableTextMorph on: self text: #byExample 				accept: #byExample:				readSelection: #contentsSelection menu: #codePaneMenu:shifted:)					askBeforeDiscardingEdits: false)		frame: (0@0.6 corner: 1@1).	window setLabel: 'Method Finder'.	^ window! !!SimpleHierarchicalListMorph methodsFor: 'selection' stamp: 'nk 4/28/2004 10:26'!selectionIndex: idx	"Called internally to select the index-th item."	| theMorph range index |	idx ifNil: [^ self].	index := idx min: scroller submorphs size max: 0.	(theMorph _ index = 0 ifTrue: [nil] ifFalse: [scroller submorphs at: index])		ifNotNil:		[((theMorph bounds top - scroller offset y) >= 0			and: [(theMorph bounds bottom - scroller offset y) <= bounds height]) ifFalse:			["Scroll into view -- should be elsewhere"			range _ self vTotalScrollRange.			scrollBar value: (range > 0				ifTrue: [((index-1 * theMorph height) / self vTotalScrollRange)									truncateTo: scrollBar scrollDelta]				ifFalse: [0]).			scroller offset: -3 @ (range * scrollBar value)]].	self selectedMorph: theMorph! !!SystemDictionary methodsFor: 'shrinking' stamp: 'nk 4/28/2004 10:24'!presumedSentMessages   | sent |"Smalltalk presumedSentMessages"	"The following should be preserved for doIts, etc"	sent _ IdentitySet new.	#( rehashWithoutBecome compactSymbolTable rebuildAllProjects		browseAllSelect:  lastRemoval		scrollBarValue: vScrollBarValue: scrollBarMenuButtonPressed: 		withSelectionFrom:  to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib		newDepth: restoreAfter: forgetDoIts zapAllMethods obsoleteClasses		removeAllUnSentMessages abandonSources removeUnreferencedKeys		reclaimDependents zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerInterruptWatcher unusedClasses) do:		[:sel | sent add: sel].	"The following may be sent by perform: in dispatchOnChar..."	(ParagraphEditor classPool at: #CmdActions) asSet do:		[:sel | sent add: sel].	(ParagraphEditor classPool at: #ShiftCmdActions) asSet do:		[:sel | sent add: sel].	^ sent! !!SystemDictionary methodsFor: 'shrinking' stamp: 'nk 4/28/2004 10:24'!removeAllUnSentMessages	"Smalltalk removeAllUnSentMessages"	"[Smalltalk unusedClasses do: [:c | (Smalltalk at: c) removeFromSystem]. 	Smalltalk removeAllUnSentMessages > 0] whileTrue."	"Remove all implementations of unsent messages."	| sels n |	sels _ self systemNavigation allUnSentMessages.	"The following should be preserved for doIts, etc"	"needed even after #majorShrink is pulled"	#(#rehashWithoutBecome #compactSymbolTable #rebuildAllProjects #browseAllSelect:  #lastRemoval #scrollBarValue: vScrollBarValue: #scrollBarMenuButtonPressed: #withSelectionFrom: #to: #removeClassNamed: #dragon: #hilberts: #mandala: #web #test3 #factorial #tinyBenchmarks #benchFib #newDepth: #restoreAfter: #forgetDoIts #zapAllMethods #obsoleteClasses #removeAllUnSentMessages #abandonSources #removeUnreferencedKeys #reclaimDependents #zapOrganization #condenseChanges #browseObsoleteReferences #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: #methodsFor:stamp: #methodsFor:stamp:prior: #instanceVariableNames: #startTimerInterruptWatcher #unusedClasses )		do: [:sel | sels				remove: sel				ifAbsent: []].	"The following may be sent by perform: in dispatchOnChar..."	(ParagraphEditor classPool at: #CmdActions) asSet		do: [:sel | sels				remove: sel				ifAbsent: []].	(ParagraphEditor classPool at: #ShiftCmdActions) asSet		do: [:sel | sels				remove: sel				ifAbsent: []].	sels size = 0		ifTrue: [^ 0].	n _ 0.	self systemNavigation		allBehaviorsDo: [:x | n _ n + 1].	'Removing ' , sels size printString , ' messages . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: n		during: [:bar | 			n _ 0.			self systemNavigation				allBehaviorsDo: [:class | 					bar value: (n _ n + 1).					sels						do: [:sel | class basicRemoveSelector: sel]]].	^ sels size! !!SystemWindow methodsFor: 'menu' stamp: 'nk 4/28/2004 10:25'!fullScreen	"Zoom Window to Full World size with possible DeskMargins"		"SystemWindow fullScreen"		| left right possibleBounds |	left _ right _ 0.	self paneMorphs		do: [:pane | ((pane isKindOf: ScrollPane)					and: [pane retractableScrollBar])				ifTrue: [pane scrollBarOnLeft						ifTrue: [left _ left max: pane scrollBarThickness]						ifFalse: [right _ right max: pane scrollBarThickness]]].	possibleBounds _ (RealEstateAgent maximumUsableAreaInWorld: self world)				insetBy: (left @ 0 corner: right @ 0).	((Flaps sharedFlapsAllowed				and: [CurrentProjectRefactoring currentFlapsSuppressed not])			or: [Preferences fullScreenLeavesDeskMargins])		ifTrue: [possibleBounds _ possibleBounds insetBy: 22].	self bounds: possibleBounds! !!SystemWindow methodsFor: 'menu' stamp: 'nk 4/28/2004 10:25'!fullScreenMaximumExtent	"Zoom Window to Full World size with possible DeskMargins	obey the maximum extent rules"		| left right possibleBounds |	left _ right _ 0.	self paneMorphs		do: [:pane | ((pane isKindOf: ScrollPane)					and: [pane retractableScrollBar])				ifTrue: [pane scrollBarOnLeft						ifTrue: [left _ left max: pane scrollBarThickness]						ifFalse: [right _ right max: pane scrollBarThickness]]].	possibleBounds _ self worldBounds				insetBy: (left @ 0 corner: right @ 0).	self maximumExtent ifNotNil:		[possibleBounds _ possibleBounds origin extent: ( self maximumExtent min: ( possibleBounds extent ))].	((Flaps sharedFlapsAllowed				and: [CurrentProjectRefactoring currentFlapsSuppressed not])			or: [Preferences fullScreenLeavesDeskMargins])		ifTrue: [possibleBounds _ possibleBounds insetBy: 22].	self bounds: possibleBounds! !!SMLoader methodsFor: 'gui building' stamp: 'nk 4/28/2004 10:18'!buildSearchPane	| typeInView |	typeInView _ PluggableTextMorph on: self 		text: nil accept: #findPackage:notifying:		readSelection: nil menu: nil.	typeInView setBalloonText:'To find a package type in a fragment of its name and hit return'.	typeInView acceptOnCR: true.	typeInView hideScrollBarsIndefinitely.	^typeInView! !!TestRunner methodsFor: 'interface opening' stamp: 'nk 4/28/2004 10:18'!buildDetailsText	detailsText _ PluggableTextMorph				on: self				text: #details				accept: nil.	detailsText hideScrollBarsIndefinitely.	^detailsText! !!TestRunner methodsFor: 'interface opening' stamp: 'nk 4/28/2004 10:19'!buildPassFailText	passFailText _ PluggableTextMorph				on: self				text: #passFail				accept: nil.	passFailText hideScrollBarsIndefinitely.	^ passFailText! !AlansTextPlusMorph removeSelector: #hideScrollBar!!ScrollPane reorganize!('OBSOLETE' hideScrollBar hideScrollBarIndefinitely leftoverScrollRange resizeScrollBar scrollBarValue: scrollbarWidth totalScrollRange unadjustedScrollRange)('access' adoptPaneColor: flatColoredScrollBarLook hMargin hasFocus retractableScrollBar scrollBarOnLeft scroller scroller: wantsSlot)('access options' alwaysShowHScrollBar: alwaysShowScrollBars: alwaysShowVScrollBar: hideHScrollBarIndefinitely: hideScrollBarsIndefinitely hideScrollBarsIndefinitely: hideVScrollBarIndefinitely: showHScrollBarOnlyWhenNeeded: showScrollBarsOnlyWhenNeeded: showVScrollBarOnlyWhenNeeded:)('event handling' handlesMouseDown: handlesMouseOver: keyStroke: mouseDown: mouseEnter: mouseLeave: mouseMove: mouseUp: scrollByKeyboard:)('geometry' extent: extraScrollRange hExtraScrollRange hLeftoverScrollRange hResizeScrollBar hScrollBarWidth hSetScrollDelta hTotalScrollRange hUnadjustedScrollRange innerBounds resetExtent resizeScrollBars resizeScroller scrollBarThickness scrollDeltaHeight scrollDeltaWidth setScrollDeltas vExtraScrollRange vLeftoverScrollRange vResizeScrollBar vScrollBarHeight vSetScrollDelta vTotalScrollRange vUnadjustedScrollRange)('geometry testing' containsPoint: hIsScrollable hIsScrollbarShowing hIsScrolled isAScrollbarShowing isScrolledFromTop scrollBarFills: vIsScrollable vIsScrollbarShowing vIsScrolled)('initialization' defaultBorderColor hInitScrollBarTEMPORARY initialize initializePreferences initializeScrollBars)('menu' addCustomMenuItems:hand: getMenu: leftOrRight menuTitleSelector: retractable: retractableOrNot scrollBarOnLeft:)('scroll bar events' hScrollBarMenuButtonPressed: scrollBarMenuButtonPressed: shiftedTextPaneMenuRequest shiftedYellowButtonActivity unshiftedYellowButtonActivity vScrollBarMenuButtonPressed: yellowButtonActivity:)('scrolling' hHideOrShowScrollBar hHideScrollBar hIsScrollbarNeeded hScrollBarValue: hShowScrollBar hideOrShowScrollBar hideOrShowScrollBars hideScrollBars scrollBy: scrollToShow: showScrollBars vHideOrShowScrollBar vHideScrollBar vIsScrollbarNeeded vScrollBarValue: vShowScrollBar)!