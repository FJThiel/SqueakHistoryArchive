'From Squeak2.6 of 11 October 1999 [latest update: #1671] on 29 November 1999 at 10:34:01 pm'!"Change Set:		roundedCorners-swDate:			30 November 1999Author:			Scott WallaceAllows any BorderedMorph to have rounded corners.  The underlying mechanism used to round the corners is by Dan Ingalls -- the present update only serves to make the feature more generally available.A separate preference is split off to govern whether menus should have rounded corners.Bordered morphs (except a few for which it makes no sense, such as PolygonMorph) now sport a new item in their halo menus, allowing the user to flip-flop between rounded and non-rounded corners.SimpleButtonMorphs and BasicButtons by default now have rounded corners"!!Morph methodsFor: 'drawing' stamp: 'sw 11/29/1999 18:01'!basicFullDrawOn: aCanvas	"Draw the full Morphic structure on the given Canvas.  This duplicates the implementation of fullDrawOn: (which could invoke this if it cared) but this method is never overridden, so that it can be invoked by subclass implementations of #fullDrawOn: without getting snagged by the complexities of intervening implementations of #fullDrawOn:"	self visible ifFalse: [^ self].	(self hasProperty: #errorOnDraw) ifTrue: [^ self drawErrorOn: aCanvas].	aCanvas drawMorph: self.	self drawSubmorphsOn: aCanvas! !!BorderedMorph methodsFor: 'initialization' stamp: 'sw 11/29/1999 17:35'!initialize	super initialize.	borderColor _ Color black.	borderWidth _ 2! !!BorderedMorph methodsFor: 'accessing' stamp: 'sw 11/29/1999 17:52'!cornerStyle	^ self valueOfProperty: #cornerStyle ifAbsent: [#square]! !!BorderedMorph methodsFor: 'accessing' stamp: 'sw 11/29/1999 17:32'!cornerStyle: aSymbol	aSymbol == #square		ifTrue:			[self removeProperty: #cornerStyle]		ifFalse:			[self setProperty: #cornerStyle toValue: aSymbol].	self changed! !!BorderedMorph methodsFor: 'accessing' stamp: 'sw 11/24/1999 14:56'!couldHaveRoundedCorners	"subclases unhappy with rounded corners reimplement"	^ true! !!BorderedMorph methodsFor: 'accessing' stamp: 'sw 11/29/1999 17:36'!toggleCornerRounding	self cornerStyle == #rounded		ifTrue: [self useSquareCorners]		ifFalse: [self useRoundedCorners].	self changed! !!BorderedMorph methodsFor: 'accessing' stamp: 'sw 11/29/1999 17:36'!useRoundedCorners	self cornerStyle: #rounded! !!BorderedMorph methodsFor: 'accessing' stamp: 'sw 11/29/1999 17:37'!useSquareCorners	self cornerStyle: #square! !!BorderedMorph methodsFor: 'drawing' stamp: 'sw 11/29/1999 17:54'!areasRemainingToFill: aRectangle	(color isColor and: [color isTranslucent]) ifTrue: [^ Array with: aRectangle].	self wantsRoundedCorners ifTrue: [^ Array with: aRectangle].	(borderWidth > 0 and: [borderColor isColor and: [borderColor isTranslucent]])		ifTrue: [^ aRectangle areasOutside: self innerBounds]		ifFalse: [^ aRectangle areasOutside: self bounds]! !!BorderedMorph methodsFor: 'drawing' stamp: 'sw 11/29/1999 08:12'!fullDrawOn: aCanvas	self wantsRoundedCorners		ifTrue:			[self fullDrawWithRoundedCornersOn: aCanvas]		ifFalse:			[super fullDrawOn: aCanvas]! !!BorderedMorph methodsFor: 'drawing' stamp: 'sw 11/6/1999 11:04'!fullDrawWithRoundedCornersOn: aCanvas	CornerRounder roundCornersOf: self on: aCanvas		displayBlock: [super fullDrawOn: aCanvas]		borderWidth: borderWidth! !!BorderedMorph methodsFor: 'drawing' stamp: 'sw 11/29/1999 17:34'!wantsRoundedCorners	^ self cornerStyle == #rounded! !!BorderedMorph methodsFor: 'menu' stamp: 'sw 11/29/1999 18:27'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu addList: 		#(('border color...' changeBorderColor:)		('border width...' changeBorderWidth:)).	self couldHaveRoundedCorners ifTrue:		[aCustomMenu addUpdating: #roundedCornersString target: self action: #toggleCornerRounding].	self doesBevels ifTrue:		[borderColor == #raised ifFalse: [aCustomMenu add: 'raised bevel' action: #borderRaised].		borderColor == #inset ifFalse: [aCustomMenu add: 'inset bevel' action: #borderInset]]! !!BorderedMorph methodsFor: 'menu' stamp: 'sw 11/29/1999 17:34'!roundedCornersString	"Answer the string to put in a menu that will invite the user to switch to the opposite  corner-rounding mode"	^ self cornerStyle  == #rounded		ifTrue:			['stop rounding corners']		ifFalse:			['start rounding corners']			! !!BasicButton methodsFor: 'as yet unclassified' stamp: 'sw 11/29/1999 17:36'!initialize	super initialize.	self borderWidth: 1.	self borderColor: Color yellow darker.	self useRoundedCorners.	self color: Color yellow.	self label: 'Button'! !!EllipseMorph methodsFor: 'visual properties' stamp: 'sw 11/24/1999 14:59'!couldHaveRoundedCorners	^ false! !!FlapTab methodsFor: 'textual tabs' stamp: 'sw 11/29/1999 18:01'!fullDrawOn: aCanvas	| aList |	self isCurrentlyTextual ifFalse:		[^ super fullDrawOn: aCanvas].	aList _ self orientation == #vertical		ifTrue:			[edgeToAdhereTo == #right				ifTrue:					[#(1 2)]				ifFalse:					[#(3 4)]]		ifFalse:			[edgeToAdhereTo == #top				ifTrue:					[#(2 3)]				ifFalse:					[#(1 4)]].	CornerRounder roundCornersOf: self on: aCanvas					displayBlock: [self basicFullDrawOn: aCanvas]					borderWidth: borderWidth					corners: aList! !!FlapTab methodsFor: 'textual tabs' stamp: 'sw 11/28/1999 18:40'!wantsRoundedCorners	^ self isCurrentlyTextual! !!MenuMorph methodsFor: 'initialization' stamp: 'sw 11/29/1999 17:38'!initialize	super initialize.	self setDefaultParameters.	orientation _ #vertical.	hResizing _ #shrinkWrap.	vResizing _ #shrinkWrap.	defaultTarget _ nil.	lastSelection _ nil.	stayUp _ false.	originalEvent _ nil.	popUpOwner _ nil.	Preferences roundedMenuCorners ifTrue: [self useRoundedCorners]! !!MethodMorph methodsFor: 'as yet unclassified' stamp: 'sw 11/29/1999 17:38'!initialize	super initialize.	self useRoundedCorners! !!PolygonMorph methodsFor: 'geometry' stamp: 'sw 11/24/1999 14:57'!couldHaveRoundedCorners	^ false! !!Preferences class methodsFor: 'help' stamp: 'sw 11/26/1999 18:20'!initHelpMsgsC	"Automatically called whenever you call   	Preferences initializeHelpMessages		or	Preferences callHelpMessageInitializersby virtue of its being in the 'help' category of Preferences class"	#(	(allowMVCprojects			'If true, the open... menu will offer you the chance to open an mvc project.')		(autoAccessors			'If true, an attempt to call a message which is not understood by an object but whose selector is the same as an inst var of the object will result in automatic compilation of an accessor method for that object''s class')		(caseSensitiveFinds			'If true, then the "find" command in text will always make its searches in a case-sensitive fashion')		(changeSetVersionNumbers			'If true, version-number extensions will be used when constructing names for change-set fileouts.  If false, timestamp extensions are used.')		(colorWhenPrettyPrinting			'If true, then when browseWithPrettyPrint is in effect, the pretty-printing will be presented in color')		(compressFlashImages			'If true, flash images will automatically be reduced to 8-bit color depth upon being read')		(conversionMethodsAtFileOut			'Governs whether at fileout time you should be prompted to define conversion methods where deemed appropriate.')		(extractFlashInHighQuality			'Whether flash graphics should be extracted in high quality.')		(extractFlashInHighestQuality			'Whether flash graphics should be extracted in highest possible quality.')		(iconicHalos			'Whether, when simpleHalos is not in effect, the circular morphic halo handles should show icons within them as keys to their functions.')		(preserveTrash			'Whether morphs dismissed via halo or dragged into the Trash should be preserved in the TrashCan for possible future retrieval.  If false, they are not preserved.')		(roundedMenuCorners			'Whether morphic menus should have rounded corners')		(simpleHalos			'Whether extremely simple halos should be offered in Morphic (intended primarily for young children only')		(smartUpdating			'If true, then morphic tools such as browsers and inspectors will keep their contents up to date automatically, so that if something changes anywhere, the change will be reflected everywhere.')		(twentyFourHourFileStamps			'If #changeSetVersionNumbers is false, this preference determines whether the date/time suffix used with changeset fileouts is based on a 24-hr clock or a 12-hr clock.')			) do:		[:pair | HelpDictionary at: pair first put: 			(pair first, ':', pair last)]! !!Preferences class methodsFor: 'standard preferences' stamp: 'programmatic 11/26/1999 11:42'!roundedMenuCorners	^ self valueOfFlag: #roundedMenuCorners! !!Preferences class methodsFor: 'initial values' stamp: 'sw 11/26/1999 18:17'!initialValuesA	"Another lot of initial values for prefs.  Simply placing methods of this sort here will assure that the initial values provided are ascribed to the preference when prefs are initialized"	^#(			(caseSensitiveFinds					false)		(changeSetVersionNumbers			true)		(colorWhenPrettyPrinting			false)		(conversionMethodsAtFileOut			false)		(iconicHalos							true)		(menuColorFromWorld				false)		(oneViewerFlapAtATime				true)		(optionalMorphicButtons				false)		(preserveTrash						true)		(smartUpdating						true)		(roundedMenuCorners				true)		(simpleHalos							false)		(twentyFourHourFileStamps			true) 		(viewersInFlaps						true))! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 11/29/1999 22:05'!newStandardPartsBinTitled: aTitle includeControls: includeControls	| aBook aPage aSize |	aSize _ 360 @ 190.	aBook _ BookMorph new color: Color blue veryMuchLighter.	aBook borderWidth: 0.	aBook removeEverything.	aBook openToDragNDrop: false.	includeControls ifTrue:		[aBook addMorphBack: (aBook makeMinimalControlsWithColor: Color transparent title: aTitle)].	self classNamesForStandardPartsBin do:		[:aList |			aPage _ self newPageForStandardPartsBin.			aList do:				[:sym | aPage addMorphBack: (Smalltalk at: sym) authoringPrototype].			aPage replaceTallSubmorphsByThumbnails.			aPage fixLayout.			aBook insertPage: aPage pageSize: aSize].	self customPagesForPartsBin do:		[:pg | aBook insertPage: pg pageSize: aSize].	self tilesPagesForPartsBin do:		[:pg | aBook insertPage: pg pageSize: aSize].	aBook goToPage: 1.	aBook currentPage addMorphBack: RectangleMorph roundRectPrototype.	^ aBook! !!RectangleMorph class methodsFor: 'as yet unclassified' stamp: 'sw 11/29/1999 22:03'!roundRectPrototype	^ self authoringPrototype useRoundedCorners color: Color green; setNameTo: 'RoundRect'! !!SimpleButtonMorph methodsFor: 'initialization' stamp: 'sw 11/18/1999 15:45'!initialize	super initialize.	self borderWidth: 1.	self cornerStyle: #rounded.	self color: (Color r: 0.4 g: 0.8 b: 0.6).	self borderColor: self color darker.	target _ nil.	actionSelector _ #flash.	arguments _ EmptyArray.	actWhen _ #buttonUp.	self setDefaultLabel! !!IconicButton methodsFor: 'as yet unclassified' stamp: 'sw 11/29/1999 20:52'!initialize	super initialize.	self useSquareCorners! !!IconicButton methodsFor: 'as yet unclassified' stamp: 'sw 11/29/1999 20:56'!shedSelvedge	self extent: (self extent - (6@6))! !!SystemWindow methodsFor: 'drawing' stamp: 'sw 11/29/1999 18:01'!fullDrawOn: aCanvas	Preferences roundedWindowCorners		ifTrue: [CornerRounder roundCornersOf: self on: aCanvas					displayBlock:						[aCanvas drawMorph: self.						self basicFullDrawOn: aCanvas]					borderWidth: 2]		ifFalse: [super fullDrawOn: aCanvas]! !!Utilities class methodsFor: 'flaps' stamp: 'sw 11/29/1999 22:05'!standardBottomFlap	|  aFlapTab aPage |	aPage _ self newPartsFlapPage.	aPage setProperty: #maximumThumbnailWidth toValue: 80.	aFlapTab _ FlapTab new referent: aPage beSticky.	aFlapTab color: Color red lighter.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab assumeString: 'Supplies' font: ScriptingSystem fontForScriptorButtons orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aPage extent: self currentWorld width @ 100.	#(PaintInvokingMorph RectangleMorph EllipseMorph StarMorph  CurveMorph PolygonMorph TextMorph ImageMorph BasicButton		PasteUpMorph    BookMorph TabbedPalette 		JoystickMorph  ) do:		[:sym | aPage addMorphBack: (Smalltalk at: sym) authoringPrototype].	aPage addMorphBack: RectangleMorph roundRectPrototype.	aPage addMorphBack: TrashCanMorph new markAsPartsDonor.	aPage addMorphBack: ScriptingSystem scriptControlButtons markAsPartsDonor.	aPage addMorphBack: Morph new previousPageButton markAsPartsDonor.	aPage addMorphBack: Morph new nextPageButton markAsPartsDonor.	aPage addMorphBack: (ClockMorph authoringPrototype showSeconds: false) step.	aPage replaceTallSubmorphsByThumbnails.	aPage fixLayout.	aFlapTab position: ((Display width - aFlapTab width) // 2 @ (self currentWorld height - aFlapTab height)).	aPage setProperty: #flap toValue: true.	aPage color: (Color red muchLighter "alpha: 0.2").	aPage extent: self currentWorld width @ 100.		^ aFlapTab! !!SameGameTile methodsFor: 'initialization' stamp: 'sw 11/30/1999 08:21'!initialize	super initialize.	self label: ''.	self borderWidth: 2.	bounds _ 0@0 corner: 16@16.	offColor _ Color gray.	onColor _ Color gray.	switchState _ false.	oldSwitchState _ false.	disabled _ false.	self useSquareCorners	! !BorderedMorph removeSelector: #squareCorners!MenuMorph removeSelector: #fullDrawOn:!MethodMorph removeSelector: #fullDrawOn:!"Postscript:"	| aTab | 	(aTab _ Utilities globalFlapTabsIfAny detect: 		[:aFlapTab | aFlapTab referent isPartsBin and: [aFlapTab edgeToAdhereTo == #bottom]] ifNone: [nil]) ifNotNil:		[aTab referent addAllMorphs: (Array with: RectangleMorph roundRectPrototype) after: aTab referent submorphs third].Preferences initializeAddedPreferences.Preferences initializeHelpMessages.MethodMorph allInstancesDo: [:m | m cornerStyle ifNil: [m cornerStyle: #rounded]].ScriptingSystem resetStandardPartsBin.!