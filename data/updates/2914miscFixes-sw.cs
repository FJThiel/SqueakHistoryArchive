'From Squeak2.9alpha of 5 August 2000 [latest update: #2960] on 6 November 2000 at 3:59:39 pm'!"Change Set:		miscFixes-swDate:			6 November 2000Author:			Scott Wallace¥ Fixes bugs that showed up when hitting the next-category & previous-category buttons of a viewer open on a non-morph/player.¥ Temporarily remove the showing of the wait cursor during a background-shape reassessment, pending fix of a bug that resulted in loss of the cursor after dropping an object originating in a parts bin onto a stack page.¥ Temporarily makes the stack-tools flap unavailable to external users (pending the providing of a suitable graphic for the sharable-picture item in it.)¥ Makes the showing of the choose-new-graphic halo handle be dependent on a new hard-coded global preference, which by default returns false."!!CategoryViewer methodsFor: 'categories' stamp: 'sw 11/6/2000 15:57'!nextCategory	"Change the receiver to point at the category following the one currently seen"	| aList anIndex newIndex already aChoice |	aList _ scriptedPlayer categoriesForViewer: self.	already _ self outerViewer ifNil: [#()] ifNotNil: [self outerViewer categoriesCurrentlyShowing].	anIndex _ aList indexOf: self currentCategory ifAbsent: [0].	newIndex _ anIndex = aList size		ifTrue:		[1]		ifFalse:		[anIndex + 1].	[already includes: (aChoice _ aList at: newIndex)] whileTrue:		[newIndex _ (newIndex \\ aList size) + 1].	self categoryChoice: aChoice! !!CategoryViewer methodsFor: 'categories' stamp: 'sw 11/6/2000 15:57'!previousCategory	"Change the receiver to point at the category preceding the one currently seen"	| aList anIndex newIndex already aChoice |	aList _ scriptedPlayer categoriesForViewer: self.	already _ self outerViewer ifNil: [#()] ifNotNil: [self outerViewer categoriesCurrentlyShowing].	anIndex _ aList indexOf: self currentCategory ifAbsent: [aList size + 1].	newIndex _ anIndex = 1		ifTrue:		[aList size]		ifFalse:		[anIndex - 1].	[already includes: (aChoice _ aList at: newIndex)] whileTrue:		[newIndex _ newIndex = 1 ifTrue: [aList size] ifFalse: [newIndex - 1]].	self categoryChoice: aChoice! !!HaloMorph methodsFor: 'handles' stamp: 'sw 11/6/2000 09:59'!addChooseGraphicHandle: haloSpec	"If the target is a sketch morph, and if the governing preference is set, add a halo handle allowing the user to select a new graphic"	(Preferences showChooseGraphicHaloHandle and: [innerTarget isKindOf: SketchMorph]) ifTrue:		[self addHandle: haloSpec				on: #mouseDown send: #chooseNewGraphicFromHalo to: innerTarget]! !!PasteUpMorph methodsFor: 'stack/card' stamp: 'sw 11/3/2000 17:06'!reassessBackgroundShape	"A change has been made which may affect the instance structure of the Card uniclass that holds the instance state, which can also be thought of as the 'card data'."	| takenNames uniqueName requestedName  variableDocks docks |	"Caution: still to be done: the mechanism so that when a new instance variable is added, it gets initialized in all subinstances of the receiver's player, which are the cards of this shape.  One needs to take into account here the instance variable names coming in; those that are unchanged should keep their values, but those that have newly arrived should obtain their default values from the morphs on whose behalf they are being maintained in the model"	true ifTrue: "Cursor wait showWhile:"		[variableDocks _ OrderedCollection new.  "This will be stored in the uniclass's class-side inst var #variableDocks"		takenNames _ OrderedCollection new.		(self submorphs select: [:aMorph | aMorph holdsSeparateDataForEachInstance]) do: 			[:aMorph |				docks _ aMorph variableDocks.  		"Each morph can request multiple variables.  		This complicates matters somewhat but creates a generality for Fabrk-like uses.		Each spec is an instance of VariableDock, and it provides a point of departure		for the negotiation between the PasteUp and its constitutent morphs"				docks do:					[:aVariableDock |						uniqueName _ self player uniqueInstanceVariableNameLike: (requestedName _ aVariableDock variableName) excluding: takenNames.						uniqueName ~= requestedName ifTrue:							[aVariableDock variableName: uniqueName.							aMorph noteNegotiatedName: uniqueName for: requestedName].						takenNames add: uniqueName].				variableDocks addAll: docks].				self player class setNewInstVarNames: 			(variableDocks collect: [:info | info variableName asString]).  "NB: sets up accessors, and removes obsolete ones"		self player class newVariableDocks: variableDocks]! !!Preferences class methodsFor: 'halos' stamp: 'sw 11/6/2000 10:02'!showChooseGraphicHaloHandle	"Hard-coded; reimplement to change behavior.  If this preference is set to true, then a choose-graphic halo handle may appear on the halo of SketchMorphs"	^ false! !!Utilities class methodsFor: 'flaps' stamp: 'sw 11/6/2000 10:10'!addStackToolsFlap	"Add a flap with stack tools in it"	| aFlap aFlapTab aTextMorph aSketch  aMorph |	"Utilities reinstateDefaultFlaps. Utilities addStackToolsFlap"	(ScriptingSystem formAtKey: #CedarPic) ifNil:		[^ self notYetImplemented].	aFlap _ self newPartsFlapPage beSticky.	aFlap setProperty: #maximumThumbnailWidth toValue: 80.	aFlap setProperty: #flap toValue: true.	aFlap color: (Color green muchLighter lighter alpha: 0.3).	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab assumeString: 'Stack Tools' font: Preferences standardFlapFont orientation: #horizontal color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: false.	aFlapTab setToPopOutOnMouseOver: false.	aFlap addMorphBack: StackMorph authoringPrototype.	aTextMorph _ TextMorph authoringPrototype.	aTextMorph contents: 'backgroundlabel' asText.  	aTextMorph beAllFont: (StrikeFont familyName: #NewYork size: 18).	aTextMorph color: Color brown.	aTextMorph setProperty: #shared toValue: true.	aFlap addMorphBack: aTextMorph.	"Ted's fields, maybe good point of departure...	aTextMorph _ TextFieldMorph authoringPrototype.	aTextMorph setProperty: #shared toValue: true.	aFlap addMorphBack: aTextMorph."	aFlap addMorphBack: ScriptableButton authoringPrototype markAsPartsDonor beSticky.	"NB: Here is where we will put the prototype(s) for background/foreground fields; for the moment, vanilla TextMorphs are used, with the scrolling PTMWM temporarily commented out pending some more work.  A successor to Ted's TextFieldMorph, or some new kind of carefully-thought-through morph that will generally serve the community as the archetypal 'Field', is ultimately needed"	#(TextMorph "PluggableTextMorphWithModel") do:		[:sym |			aMorph _ (Smalltalk at: sym) authoringPrototype.			aMorph contents: 'background field' asText allBold.			aMorph setProperty: #shared toValue: true.			aMorph setNameTo: (sym == #TextMorph ifTrue: ['field1'] ifFalse: ['scrollingField1']).			aMorph setProperty: #holdsSeparateDataForEachInstance toValue: true.			aFlap addMorphBack: aMorph].	"aFlap addMorphBack: ScriptableListMorph authoringPrototype beSticky -- SOON!!"		#(CedarPic) do:		[:sym | 			aSketch _ SketchMorph newSticky form: ((ScriptingSystem formAtKey: sym) ifNil: [ScriptingSystem formAtKey: #squeakyMouse]).			aSketch setProperty: #shared toValue: true.			aSketch setProperty: #holdsSeparateDataForEachInstance toValue: true.			aFlap addMorphBack: aSketch].	"aCardReference _ CardReference authoringProtoype beSticky.	aCardReference card: Card new.  "	aFlap addMorphBack: StackMorph previousCardButton markAsPartsDonor.	aFlap addMorphBack: StackMorph nextCardButton markAsPartsDonor.	#( PaintInvokingMorph "ImageMorph  RectangleMorph EllipseMorph StarMorph  CurveMorph PolygonMorph SimpleSliderMorph") do:		[:sym | aFlap addMorphBack: (Smalltalk at: sym) authoringPrototype].	aFlap addMorphBack: TrashCanMorph new markAsPartsDonor.	aFlap addMorphBack: ScriptingSystem scriptControlButtons markAsPartsDonor.	aFlap replaceTallSubmorphsByThumbnails.	aFlap fixLayout.	aFlapTab position: ((2 * (self currentWorld width // 3)) @ (self currentWorld height - aFlapTab height)).	aFlap setProperty: #flap toValue: true.	aFlap color: (Color red muchLighter "alpha: 0.2").	aFlap extent: self currentWorld width @ 100.		self currentWorld addMorphFront: aFlapTab.  	"a local flap, but we could as easily make it global by:		self addGlobalFlap: aFlapTab.  self currentWorld addGlobalFlaps"! !