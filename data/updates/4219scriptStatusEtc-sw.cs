'From Squeak3.1alpha of 28 February 2001 [latest update: #4218] on 28 July 2001 at 1:37:30 am'!"Change Set:		scriptStatusEtc-swDate:			28 July 2001Author:			Scott WallaceSome changes motivated by recently needing to bring saved projects forward from the open-school fork which split off from mainstream Squeak more than ten months ago, in September 2000.  This update add new features to the All-Scripts tool, including revealing an object, and destroying any script.The 'reveal' feature -- also accessible from the Viewer menu -- makes an earnest effort to show you an object that is reachable but hidden (such as having bounds outside its container, or residing in a closed flap, or on an unseen book page); it is much less drastic than 'grab' because 'grab' rips the object out of whatever container it had been in.This update also contains code that allows one completely to back out of the old reference scheme in a project.  This can be called manually as in 'ActiveWorld abandonOldReferenceScheme'."!!FlapTab methodsFor: 'show & hide' stamp: 'sw 7/28/2001 01:31'!succeededInRevealing: aPlayer	"Try to reveal aPlayer, and answer whether we succeeded"	(super succeededInRevealing: aPlayer) ifTrue: [^ true].	self flapShowing ifTrue: [^ false].	(referent succeededInRevealing: aPlayer)		ifTrue:			[self showFlap.			aPlayer costume goHome; addHalo.			^ true].	^ false! !!Flaps class methodsFor: 'shared flaps' stamp: 'sw 7/24/2001 22:01'!enableOnlyGlobalFlapsWithIDs: survivorList	"In the current project, suppress all global flaps other than those with ids in the survivorList"	self globalFlapTabsIfAny do: [:aFlapTab |		(survivorList includes: aFlapTab flapID)			ifTrue:				[self enableGlobalFlapWithID: aFlapTab flapID]			ifFalse:				[self disableGlobalFlapWithID: aFlapTab flapID]].	ActiveWorld addGlobalFlaps 	"Flaps enableOnlyGlobalFlapsWithIDs: #('Supplies')"! !!MethodWithInterface methodsFor: 'script editor' stamp: 'sw 7/28/2001 01:00'!recompileScriptFromTilesUnlessTextuallyCoded	"Recompile Script From Tiles Unless Textually Coded.  For the universal-tiles MethodWithInterface case, this is moot.  Used only in support of a reintegration of Open-school forked projects from Sept 2000 in 7/01"! !!PasteUpMorph methodsFor: 'scripting' stamp: 'sw 7/22/2001 00:55'!abandonOldReferenceScheme	"Perform a one-time changeover"	"ActiveWorld abandonOldReferenceScheme"	Preferences setPreference: #capitalizedReferences toValue: true.	(self presenter allExtantPlayers collect: [:aPlayer | aPlayer class]) asSet do:			[:aPlayerClass |				aPlayerClass isUniClass ifTrue:					[aPlayerClass abandonOldReferenceScheme]]! !!PasteUpMorph methodsFor: 'scripting' stamp: 'sw 7/28/2001 00:27'!modernizeBJProject	"Prepare a kids' project from the BJ fork of September 2000 -- a once-off thing for converting such projects forward to a modern 3.1a image, in July 2001.  Except for the #enableOnlyGlobalFlapsWithIDs: call, this could conceivably be called upon reloading *any* project, just for safety."	"ActiveWorld modernizeBJProject"	ScriptEditorMorph allInstancesDo:		[:m | m userScriptObject].	Flaps enableOnlyGlobalFlapsWithIDs: #('Supplies').	ActiveWorld abandonOldReferenceScheme.	ActiveWorld relaunchAllViewers.! !!PasteUpMorph methodsFor: 'scripting' stamp: 'sw 7/24/2001 21:26'!relaunchAllViewers	"Relaunch all the viewers in the project"	| aViewer |	(self submorphs select: [:m | m isKindOf: ViewerFlapTab]) do:		[:aTab | aViewer _ aTab referent submorphs detect: [:sm | sm isKindOf: StandardViewer] ifNone: [nil].		aViewer ifNotNil:			[aViewer relaunchViewer]]"ActiveWorld relaunchAllViewers"! !!Player methodsFor: 'misc' stamp: 'sw 7/28/2001 01:03'!indicateLocationOnScreen	"Give momentary feedback on screen until mouse button is clicked"	| bds |	bds _ self costume boundsInWorld.	5 timesRepeat:		[Display reverse: bds.		(Delay forMilliseconds: 80) wait.		Display reverse: bds.		(Delay forMilliseconds: 200) wait.].	costume changed! !!Player methodsFor: 'misc' stamp: 'sw 7/28/2001 01:05'!revealPlayerIn: aWorld	"Reveal the receiver if at all possible in the world; once it's visible, flash its image for a bit, and leave it with its halo showing"	| aMorph |	(aMorph _ self costume) isInWorld ifTrue:		[aMorph goHome.		self indicateLocationOnScreen.		aMorph addHalo.		^ self].	"It's hidden somewhere; search for it"	aWorld submorphs do:		[:m | (m succeededInRevealing: self) ifTrue:  "will have obtained halo already"			[aWorld doOneCycle.			self indicateLocationOnScreen.			^ self]].	"The morph is truly unreachable in this world at present.  So extract it from hyperspace, and place it at center of screen, wearing a halo."	aMorph isWorldMorph ifFalse:		[aWorld addMorphFront: aMorph.		aMorph position: aWorld bounds center.		aMorph addHalo]		! !!Player class methodsFor: 'other' stamp: 'sw 7/27/2001 13:45'!abandonOldReferenceScheme	"Abandon the old reference scheme"	"(ActiveWorld presenter allExtantPlayers collect:		[:aPlayer | aPlayer class]) asSet do:			[:aPlayerClass | aPlayerClass abandonOldReferenceScheme]"	self isUniClass ifTrue:		[self userScriptsDo:			[:aScript | aScript recompileScriptFromTilesUnlessTextuallyCoded].		self class selectors do:			[:sel | self class removeSelector: sel].		self class instVarNames do:			[:aName | self class removeInstVarName: aName].		self organization removeEmptyCategories.		self class organization removeEmptyCategories]! !!ScriptInstantiation methodsFor: 'misc' stamp: 'sw 7/28/2001 01:08'!offerMenuIn: aStatusViewer	"Put up a menu."	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: player knownName, ' ', selector.	(player class instanceCount > 1) ifTrue:		[aMenu add: 'propagate status to siblings' selector: #assignStatusToAllSiblingsIn: argument: aStatusViewer.		aMenu balloonTextForLastItem: 'Make the status of this script in all of my sibling instances be the same as the status you see here'].	aMenu add: 'reveal this object' target: player selector: #revealPlayerIn: argument: ActiveWorld.	aMenu balloonTextForLastItem: 'Make certain this object is visible on the screen; flash its image for a little while, and give it the halo.'.	aMenu add: 'open this script''s scriptor' target: player selector: #grabScriptorForSelector:in: argumentList: {selector. aStatusViewer world}.	aMenu balloonTextForLastItem: 'Open up the Scriptor for this script'.	aMenu add: 'open this object;''s Viewer' target: player selector: #beViewed.	aMenu balloonTextForLastItem: 'Open up a Viewer for this object'.	aMenu addLine.	aMenu add: 'more...' target: self selector: #offerShiftedMenuIn: argument: aStatusViewer.	aMenu balloonTextForLastItem: 'The "more..." branch offers you menu items that are less frequently used.'.	aMenu popUpInWorld: ActiveWorld! !!ScriptInstantiation methodsFor: 'misc' stamp: 'sw 7/28/2001 01:13'!offerShiftedMenuIn: aStatusViewer	"Put up the shifted menu"	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: player knownName, ' ', selector.	aMenu add: 'grab this object' target: player selector: #grabPlayerIn: argument: self currentWorld.	aMenu balloonTextForLastItem: 'Wherever this object currently is, the "grab" command will rip it out, and place it in your "hand".  This is a very drastic step, that can disassemble things that may be very hard to put back together!!'.	aMenu add: 'destroy this script' target: player selector: #removeScriptWithSelector: argument: selector.	aMenu balloonTextForLastItem: 'Caution!!  This is irreversibly destructive -- it removes the script from the system.'.	aMenu addLine.	aMenu add: 'inspect morph' target: player costume selector: #inspect.	aMenu add: 'inspect player' target: player selector: #inspect.	aMenu popUpInWorld: ActiveWorld! !!ScriptInstantiation methodsFor: 'misc' stamp: 'sw 7/23/2001 16:00'!statusControlRowIn: aStatusViewer	"Answer a row morph that reports my status and lets the user change it"	| aRow aMorph buttonWithPlayerName |	aRow _ AlignmentMorph newRow beTransparent.	buttonWithPlayerName _ UpdatingSimpleButtonMorph new.	buttonWithPlayerName target: self; wordingSelector: #playersExternalName; actionSelector: #offerMenuIn:; arguments: {aStatusViewer}; beTransparent; actWhen: #buttonDown.	buttonWithPlayerName setBalloonText: 'This is the name of the player to which this script belongs; if you click here, you will get a menu of interesting options pertaining to this player and script'.	buttonWithPlayerName borderWidth: 4; borderRaised.	aRow addMorphBack: buttonWithPlayerName.	aRow addTransparentSpacerOfSize: 10@0.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	aMorph _ UpdatingStringMorph on: self selector: #selector.	aMorph color: Color brown lighter; useStringFormat.	aMorph setBalloonText: 'This is the name of a script'.	aRow addMorphBack: aMorph.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	aRow addTransparentSpacerOfSize: 10@0.	aRow addMorphBack: self statusControlMorph.	aRow submorphsDo: [:m | m wantsSteps ifTrue: [m step]].	^ aRow! !!UniclassScript methodsFor: 'script editor' stamp: 'sw 7/28/2001 01:11'!recompileScriptFromTilesUnlessTextuallyCoded	"recompile Script From Tiles Unless Textually Coded"	self isTextuallyCoded ifFalse:		[currentScriptEditor ifNotNil: [currentScriptEditor recompileScript]]! !