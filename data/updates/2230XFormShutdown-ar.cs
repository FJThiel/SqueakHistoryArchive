'From Squeak2.8alpha of 16 February 2000 [latest update: #2227] on 28 May 2000 at 11:36:18 pm'!"Change Set:		XFormShutdownDate:			28 May 2000Author:			Andreas RaabDefines an appropriate shutdown model for external forms."!!ExternalForm commentStamp: '<historical>' prior: 0!An ExternalForm is just like any other form. It's only difference is that it is allocated on a specific display and can be used for accelerated blts on the particular display.Upon shutdown of the system ExternalForms will be deallocated from the display and be kept in their internalized form.!!ExternalTexture commentStamp: '<historical>' prior: 0!An ExternalTexture is a B3DTexture which is allocated on a specific (hopefully hardware accelerated) display. External textures are resources that are exclusively managed on the Display - no external textures should be manually allocated. This is because the texture format provided by the display may severely differ from our internal format. Therefore we always keep an 'original' B3DTexture and the external textures are allocated on demand.Because of the above, external textures will never be kept inbetween sessions.!!Form methodsFor: 'initialize-release' stamp: 'ar 5/28/2000 18:45'!shutDown	"The system is going down. Try to preserve some space"	self hibernate! !!ExternalForm methodsFor: 'initialize-release' stamp: 'ar 5/28/2000 17:39'!destroy	"Destroy the receiver"	display ifNotNil:[display destroyForm: self]! !!ExternalForm methodsFor: 'initialize-release' stamp: 'ar 5/28/2000 17:48'!shutDown	"System is going down. Internalize my bits and be finished."	| copy |	copy _ Form extent: self extent depth: self depth.	self displayOn: copy.	copy hibernate. "compact bits of copy"	self destroy. "Release my external handle"	bits _ copy bits. "Now compressed"	display _ nil. "No longer allocated"	argbMap _ nil. "No longer external"! !!ExternalForm methodsFor: 'accessing' stamp: 'ar 5/28/2000 17:42'!rgbaBitMasks	"Return the masks for specifying the R,G,B, and A components in the receiver"	display 		ifNil:[^super rgbaBitMasks]		ifNotNil:[^display rgbaBitMasksOfForm: self]! !!ExternalForm methodsFor: 'testing' stamp: 'ar 5/28/2000 17:48'!isExternalForm	"I am an external form but only as long as I'm allocated on a display"	^display notNil! !!ExternalScreen methodsFor: 'initialize-release' stamp: 'ar 5/28/2000 18:44'!destroy	"Destroy the receiver"	allocatedForms ifNotNil:[		allocatedForms lock. "Make sure we don't get interrupted"		allocatedForms forceFinalization. "Clean up all lost references"		allocatedForms keys do:[:stillValid| stillValid shutDown].		"All remaining references are simply destroyed"		allocatedForms associationsDo:[:assoc| assoc key: nil].		allocatedForms forceFinalization. "destroy all others"		allocatedForms _ nil.	].	bits ifNotNil:[self primDestroyDisplaySurface: bits].	bits _ nil.! !!ExternalScreen methodsFor: 'initialize-release' stamp: 'ar 5/28/2000 19:00'!shutDown 	"Minimize Display memory saved in image"	self destroy.	width _ 240.	height _ 120.	bits _ Bitmap new: self bitsSize.! !!ExternalScreen methodsFor: 'private' stamp: 'ar 5/28/2000 19:00'!setExtent: aPoint depth: bitsPerPixel	"Create a 3D accelerated display screen"	| screen |	(bits isInteger and:[depth == bitsPerPixel and: [aPoint = self extent and: 					[self supportsDisplayDepth: bitsPerPixel]]]) ifFalse: [		bits ifNotNil:[self primDestroyDisplaySurface: bits].		bits _ nil.  "Free up old bitmap in case space is low"		DisplayChangeSignature _ (DisplayChangeSignature ifNil: [0]) + 1.		(self supportsDisplayDepth: bitsPerPixel)			ifTrue:[depth _ bitsPerPixel]			ifFalse:["Search for a suitable depth"					depth _ self findAnyDisplayDepthIfNone:[nil]].		depth == nil ifFalse:[			bits _ self primCreateDisplaySurface: depth 					width: aPoint x height: aPoint y].		"Bail out if surface could not be created"		(bits == nil) ifTrue:[			screen _ DisplayScreen extent: aPoint depth: bitsPerPixel.			self == Display ifTrue:[				Display _ screen.				Display beDisplay].			^screen].		width _ aPoint x.		height _ aPoint y.	].	clippingBox _ super boundingBox.	allocatedForms ifNil:[		allocatedForms _ ExternalFormRegistry new.		WeakArray addWeakDependent: allocatedForms].! !!Form class methodsFor: 'shut down' stamp: 'ar 5/28/2000 23:35'!shutDown  "Form shutDown"	"Compress all instances in the system.  Will decompress on demand..."	Form allInstancesDo: [:f | f hibernate].	ColorForm allInstancesDo: [:f | f hibernate].! !!Project methodsFor: 'initialization' stamp: 'ar 5/28/2000 19:50'!installNewDisplay: extent depth: depth	"When entering a new project, install a new Display if necessary."	| params newDisplay oldDisplay |	params _ self rawParameters.	(params notNil and:[(self parameterAt: #enable3DAcceleration) == true]) ifTrue:[		Display isB3DDisplayScreen 			ifTrue:[^Display setExtent: extent depth: depth].		"Install a B3DDisplayScreen for future hardware acceleration"		newDisplay _ (Smalltalk at: #B3DDisplayScreen ifAbsent:[^self])					extent: extent depth: depth.	] ifFalse:[		"Otherwise check if the current Display is a DisplayScreen"		Display isB3DDisplayScreen			ifFalse:[^Display setExtent: extent depth: depth].				"Install a DisplayScreen for future hardware acceleration"		newDisplay _ (Smalltalk at: #DisplayScreen ifAbsent:[^self])					extent: extent depth: depth.	].	"Copy old contents of display to the (yet to be installed) newDisplay"	newDisplay class == Display class ifTrue:[		"A workaround for DisplayScreen <-> DisplayScreen"		Display displayOn: newDisplay.	] ifFalse:["*MUST* use FXBlt when switching between Displays"		(FXBlt toForm: newDisplay) 			sourceForm: Display; 			combinationRule: 3; copyBits.	].	"And make it Display"	oldDisplay _ Display.	Display _ newDisplay.	Display beDisplay.	oldDisplay release.! !!Project methodsFor: 'displaying' stamp: 'ar 5/28/2000 19:43'!displayZoom: entering	"Show the project transition when entering a new project"	| newDisplay vanishingPoint |	"Play the flash transition if any."	self projectParameters at: #flashTransition ifPresent:[:dict|		dict at: CurrentProject ifPresent:[:player| ^player playProjectTransitionFrom: CurrentProject to: self entering: entering]].	"Show animated zoom to new display"	newDisplay _ self imageForm.	entering		ifTrue: [vanishingPoint _ Sensor cursorPoint]		ifFalse: [vanishingPoint _ self viewLocFor: CurrentProject].	Display zoomIn: entering orOutTo: newDisplay at: 0@0			vanishingPoint: vanishingPoint.! !ExternalForm class removeSelector: #initializeFrom:!ExternalForm removeSelector: #initializeFrom:!