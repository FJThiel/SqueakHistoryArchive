'From Squeak2.8alpha of 12 January 2000 [latest update: #2240] on 5 June 2000 at 2:40:16 pm'!"Change Set:		TurtleTrailModsDate:			23 May 2000Author:			Dan IngallsMakes batched pen trails work depending on the setting of a preference.Also pen trails work in the world as well as in any other PasteUp.Most important, pen trails now work for embedded objects with arbitrary flexing."!!Morph methodsFor: 'private' stamp: 'di 6/5/2000 14:39'!moveWithPenDownBy: delta	| trailMorph tfm start tfmEnd |	"If this is a costume for a player with its pen down, draw a line."	(trailMorph _ self trailMorph) ifNotNil:		[tfm _ self owner transformFrom: trailMorph.		start _  self referencePosition.		Preferences batchPenTrails			ifTrue: [trailMorph notePenDown: true								forPlayer: self player								at: (tfm localPointToGlobal: start)]			ifFalse: [trailMorph drawPenTrailFor: self								from: (tfm localPointToGlobal: start)								to: (tfmEnd _ tfm localPointToGlobal: start + delta).					trailMorph noteNewLocation: tfmEnd forPlayer: self player]]! !!Morph methodsFor: 'private' stamp: 'di 6/5/2000 14:39'!privateMoveBy: delta	"Private!! Use 'position:' instead."	| fill |	(extension == nil or: [extension player == nil]) ifFalse:		["Most cases eliminated fast by above test"		self getPenDown ifTrue:			["If this is a costume for a player with its pen down, draw a line."			self moveWithPenDownBy: delta]].	fullBounds == bounds		ifTrue: ["optimization: avoids recomputing fullBounds"				fullBounds _ bounds _ bounds translateBy: delta]		ifFalse: [bounds _ bounds translateBy: delta.				fullBounds _ nil].	fill _ self fillStyle.	fill isOrientedFill ifTrue:[fill origin: fill origin + delta].! !!PasteUpMorph methodsFor: 'display' stamp: 'di 5/24/2000 09:25'!drawOn: aCanvas	"Update and draw the turtleTrails form. See the comment in updateTrailsForm."	super drawOn: aCanvas.	self updateTrailsForm.	turtleTrailsForm ifNotNil: [aCanvas paintImage: turtleTrailsForm at: self position].	(submorphs size > 0 and: [self indicateCursor]) ifTrue:		[aCanvas			frameRectangle: self selectedRect			width: 2			color: Color black].! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'di 5/24/2000 15:19'!acceptDroppingMorph: aMorph event: evt	| slotSpecs aValue incomingName nameObtained mm tfm |	self isWorldMorph		ifTrue:			["Add the given morph to this world and start stepping it if it wants to be."			self addMorphFront: aMorph.			(aMorph fullBounds intersects: ("0@0 extent:" self viewBox "extent")) ifFalse:				[self beep.  aMorph position: self bounds center]]		ifFalse:			[self privateAddMorph: aMorph atIndex: (self insertionIndexFor: aMorph).			self changed.			self layoutChanged].	incomingName _ aMorph knownName.	aMorph submorphsDo: [:m | (m isKindOf: HaloMorph) ifTrue: [m delete]].	self autoLineLayout ifTrue: [self fixLayout].	aMorph allMorphsDo:  "Establish any penDown morphs in new world"		[:m | m player ifNotNil:			[m player getPenDown ifTrue:				[((mm _ m player costume) notNil and: [(tfm _ mm owner transformFrom: self) notNil])					ifTrue: [self noteNewLocation: (tfm localPointToGlobal: mm referencePosition)									forPlayer: m player]]]].	self isPartsBin		ifTrue:			[aMorph isPartsDonor: true.			aMorph stopSteppingSelfAndSubmorphs.			aMorph suspendEventHandler]		ifFalse:			[self world startSteppingSubmorphsOf: aMorph].	self presenter morph: aMorph droppedIntoPasteUpMorph: self.	slotSpecs _ aMorph slotSpecifications.  "A Fabrik component, for example.  Just a hook at this time"	slotSpecs size > 0 ifTrue:		[self assuredPlayer.		slotSpecs do:			[:tuple |				aValue _ aMorph initialValueFor: tuple first.				nameObtained _ self player addSlotNamedLike: tuple first withValue: aValue.				nameObtained ~= incomingName ifTrue:					[aMorph setNameTo: nameObtained]].		self player updateAllViewers]! !!PasteUpMorph methodsFor: 'pen' stamp: 'di 5/23/2000 16:54'!createOrResizeTrailsForm	"If necessary, create a new turtleTrailsForm or resize the existing one to fill my bounds. On return, turtleTrailsForm exists and is the correct size."	| newForm |	turtleTrailsForm ifNil:		["create new TrailsForm if needed"		turtleTrailsForm _ Form extent: self extent depth: 8.		turtlePen _ nil].	turtleTrailsForm extent = self extent ifFalse:		["resize TrailsForm if my size has changed"		newForm _ Form extent: self extent depth: 8.		newForm copy: self bounds from: turtleTrailsForm					to: 0@0 rule: Form paint.		turtleTrailsForm _ newForm.		turtlePen _ nil].	"Recreate Pen for this form"	turtlePen ifNil: [turtlePen _ Pen newOnForm: turtleTrailsForm].! !!PasteUpMorph methodsFor: 'pen' stamp: 'di 5/24/2000 15:13'!noteNewLocation: location forPlayer: player	"Note that a morph has just moved with its pen down, begining at startPoint.	Only used in conjunction with Preferences batchPenTrails."	lastTurtlePositions ifNil: [lastTurtlePositions _ IdentityDictionary new].	lastTurtlePositions at: player put: location! !!PasteUpMorph methodsFor: 'pen' stamp: 'di 5/24/2000 15:10'!notePenDown: penDown forPlayer: player at: location	"Note that a morph has just moved with its pen down, begining at startPoint.	Only used in conjunction with Preferences batchPenTrails."	| startLoc |	lastTurtlePositions ifNil: [lastTurtlePositions _ IdentityDictionary new].	penDown		ifTrue: ["Putting the Pen down -- record current location"				(lastTurtlePositions includesKey: player) ifFalse:					[lastTurtlePositions at: player put: location]]		ifFalse: ["Picking the Pen up -- draw to current location and remove"				(startLoc _ lastTurtlePositions at: player ifAbsent: [nil]) ifNotNil:					[self drawPenTrailFor: player costume							from: startLoc to: location].				lastTurtlePositions removeKey: player ifAbsent: []]! !!PasteUpMorph methodsFor: 'pen' stamp: 'di 5/25/2000 18:58'!updateTrailsForm 	"Update the turtle-trails form using the current positions of all pens.	Only used in conjunction with Preferences batchPenTrails."	"Details: The positions of all morphs with their pens down are recorded each time the draw method is called. If the list from the previous display cycle isn't empty, then trails are drawn from the old to the new positions of those morphs on the turtle-trails form. The turtle-trails form is created on demand when the first pen is put down and removed (to save space) when turtle trails are cleared."	| morph oldPoint newPoint removals player tfm |	(lastTurtlePositions == nil or: [lastTurtlePositions size = 0]) ifTrue: [^ self].	removals _ OrderedCollection new.	lastTurtlePositions associationsDo: [:assoc |		player _ assoc key.		morph _ player costume.		(player getPenDown and: [morph trailMorph == self])			 ifTrue:				[oldPoint _ assoc value.				tfm _ morph owner transformFrom: self.				newPoint _ tfm localPointToGlobal: morph referencePosition.				newPoint = oldPoint ifFalse:					[assoc value: newPoint.					self drawPenTrailFor: morph from: oldPoint to: newPoint]]			ifFalse: [removals add: player]].	removals do: [:key | lastTurtlePositions removeKey: key ifAbsent: []]! !!PasteUpMorph methodsFor: 'misc' stamp: 'di 5/26/2000 12:05'!drawInvalidAreasOn: aCanvas 	"Redraw the damaged areas of the given canvas and clear the damage list.	Return a collection of the areas that were redrawn."	| rectList c i n mm morphs rects rectToFill remnants rect |	rectList _ self damageRecorder invalidRectsFullBounds: self viewBox.	self damageRecorder reset.	self updateTrailsForm.	n _ self submorphs size.	morphs _ OrderedCollection new: n*2.	rects _ OrderedCollection new: n*2.	rectList do: [:r |		true		ifTrue:			["Experimental top-down drawing --			Traverses top to bottom, stopping if the entire area is filled.			If only a single rectangle remains, then continue with the reduced rectangle."			rectToFill _ r.			i _ 1.			[rectToFill == nil or: [i > n]] whileFalse:				[mm _ submorphs at: i.				((mm fullBounds intersects: r) and: [mm visible]) ifTrue:					[morphs addLast: mm.  rects addLast: rectToFill.					remnants _ mm areasRemainingToFill: rectToFill.					remnants size = 1 ifTrue: [rectToFill _ remnants first].					remnants size = 0 ifTrue: [rectToFill _ nil]].				i _ i+1].			"Now paint from bottom to top, but using the reduced rectangles."			rectToFill ifNotNil:				[c _ self pseudoDraw: rectToFill on: aCanvas].			[morphs isEmpty] whileFalse:				[(rect _ rects removeLast) == rectToFill ifFalse:					[c _ aCanvas copyClipRect: (rectToFill _ rect)].				morphs removeLast fullDrawOn: c].			morphs reset.  rects reset]		ifFalse: [c _ self pseudoDraw: r on: aCanvas.				submorphs reverseDo: [:m | m fullDrawOn: c]]		].	^ rectList! !!Player methodsFor: 'scripts-standard' stamp: 'di 5/24/2000 12:44'!setPenDown: penDown	| morph trailMorph tfm |	self actorState setPenDown: penDown.	((morph _ self costume) notNil and: [(trailMorph _ morph trailMorph) notNil])		ifTrue:		[tfm _ morph owner transformFrom: trailMorph.		trailMorph notePenDown: penDown forPlayer: self					at: (tfm localPointToGlobal: morph referencePosition)]! !!TransformationMorph methodsFor: 'menu' stamp: 'sw 5/26/2000 13:42'!removeFlexShell	"Remove the shell used to make a morph rotatable and scalable."	| oldHalo unflexed pensDown player |	oldHalo _ self halo.	submorphs isEmpty ifTrue: [^ self delete].	unflexed _ self firstSubmorph.	pensDown _ OrderedCollection new.	self allMorphsDo:  "Note any pens down -- must not be down during the move"		[:m | ((player _ m player) notNil and: [player getPenDown]) ifTrue:			[m == player costume ifTrue:				[pensDown add: player.				player setPenDown: false]]].	self submorphs do: [:m |		m position: self center - (m extent // 2).		owner addMorph: m].	unflexed absorbStateFromRenderer: self.	pensDown do: [:p | p setPenDown: true].	oldHalo ifNotNil: [oldHalo setTarget: unflexed].	self currentWorld startSteppingSubmorphsOf: unflexed.	self delete.	^ unflexed! !PasteUpMorph removeSelector: #notePenDownFor:at:!PasteUpMorph removeSelector: #recordTurtlePositions!"Postscript:Install a preference."Preferences addPreference: #batchPenTrails		category: #scripting		default: false		balloonHelp: 'Ignores the detailed movement of pens between display updates.  Thus multiple line segments drawn within a script may not be seen individually.'!