'From Squeak 2.3 of January 14, 1999 on 28 January 1999 at 6:18:09 pm'!"Change Set:		current-swDate:			28 January 1999Author:			Scott WallaceProvides three universal interface methods that will always give you a world, a hand, an event when you need them in your scripts.  The intent is to avoid mindless nil-checking when you write code that needs to get at one of these three objects.  In the usual morphic-project case, what you get is what you'd expect.  In the case of an mvc-project with an active morphic window in it, you get the relevant objects from that window's world, etc.  All three *always* return non-nil values, unless Morphic itself is absent from the system, in which case how in the world could you find yourself calling them???The three methods are	currentWorld	currentEvent	currentHand.At any juncture requiring that a specific world, event, or hand be used rather than the one obtained by these calls, you will of course continue to need to pass the objects in as part of method protocol."!!Object methodsFor: 'macpal' stamp: 'sw 1/28/1999 12:02'!currentEvent	"Answer the current Morphic event.  This method never returns nil."	^ self currentHand lastEvent! !!Object methodsFor: 'macpal' stamp: 'sw 1/28/1999 11:56'!currentHand	"Return a usable HandMorph -- the one associated with the object's environment.  This method will always return a hand, even if it has to conjure one up as a last resort"	^ self currentWorld hands first! !!Object methodsFor: 'macpal' stamp: 'sw 1/28/1999 18:15'!currentWorld	"Answer a morphic world that is the current UI focus.		If in a morphic project, it's that project's world.  		If in an mvc project, it is the topmost morphic-mvc-window's worldMorph. 		If in an mvc project that has no morphic-mvc-windows, then it's just some existing worldmorph instance.		If in an mvc project in a Squeak that has NO WorldMorph instances, one is created.	This method will never return nil, it will always return its best effort at returning a relevant world morph, but if need be -- if there are no worlds anywhere, it will create a new one."	| aView aSubview |	World ifNotNil: [^ World].	aView _ ScheduledControllers controllerSatisfying:		[:ctrl | (aSubview _ ctrl view firstSubView) notNil and:			[aSubview model isKindOf: WorldMorph]].	^ aView		ifNotNil:			[aSubview model]		ifNil:			[WorldMorph someInstance ifNil: [WorldMorph new]]! !!Morph methodsFor: 'halos and balloon help' stamp: 'sw 1/28/1999 12:06'!halo	self currentWorld haloMorphs do:		[:h | h target == self ifTrue: [^ h]].	^ nil! !!Player methodsFor: 'slots-user' stamp: 'sw 1/28/1999 12:04'!tearOffFancyWatcherFor: aSlotName	| aWatcher aTile getSel aLine aColor aTower |	aColor _ Color r: 0.903 g: 0.903 b: 1.0.	aLine _ AlignmentMorph newRow vResizing: #shrinkWrap; color: aColor.	aLine borderWidth: 1; borderColor: aColor darker.	aLine addMorphBack: (self tileReferringToSelf borderWidth: 0; typeColor: aColor; color: aColor; bePossessive).	aLine addTransparentSpacerOfSize: (4@0).	aTower _ AlignmentMorph newColumn color: aColor.	aTower addTransparentSpacerOfSize: (0 @ 1).	aTower addMorphBack: (StringMorph contents: aSlotName, ' = ' font: ScriptingSystem fontForTiles).	aLine addMorphBack: aTower.	aTile _ NumericReadoutTile new typeColor: aColor.	aWatcher _ UpdatingStringMorph new target: self.	aWatcher growable: true.	aWatcher growable: true;		getSelector: (getSel _ ScriptingSystem getterSelectorFor: aSlotName);		putSelector: (ScriptingSystem setterSelectorFor: aSlotName).	aTile addMorphBack: aWatcher.	aTile addArrows.	aTile setLiteralTo: (self perform: getSel) width: 30.	aLine addMorphBack: aTile.	aWatcher step; fitContents.	self currentHand attachMorph: aLine! !!Player methodsFor: 'slots-user' stamp: 'sw 1/28/1999 12:04'!tearOffWatcherFor: aSlotName	| aWatcher |	aWatcher _ UpdatingStringMorph new target: self.	((self typeForSlot: aSlotName) = #number) ifFalse: [aWatcher useStringFormat].	aWatcher growable: true;		getSelector: (ScriptingSystem getterSelectorFor: aSlotName);		putSelector: (ScriptingSystem setterSelectorFor: aSlotName);		setNameTo: aSlotName.	aWatcher step.	self currentHand attachMorph: aWatcher! !!Player methodsFor: 'misc' stamp: 'sw 1/28/1999 12:04'!tearOffTileForSelf	self currentHand attachMorph: self tileReferringToSelf! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'sw 1/28/1999 12:13'!yellowButtonActivity	"Called when the shifted-menu's 'more' item is chosen"	| menu event |	(menu _ self getMenu: false) ifNotNil:		["Set up to use perform:orSendTo: for model/view dispatch"		menu setInvokingView: self.		menu popUpAt: (event _ self currentEvent) cursorPoint event: event]! !Player removeSelector: #lastEvent!