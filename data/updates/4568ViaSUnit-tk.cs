'From Squeak3.2alpha of 4 October 2001 [latest update: #4567] on 30 November 2001 at 1:28:55 pm'!"Change Set:		ViaSUnit-tkDate:			30 November 2001Author:			Ted Kaehler	SUnits are a style of testing that verify the operation of a list of specific methods.  The structure for SUnits has been in Squeak for a while, but only forty (40) out of 44,000 methods actually have a validating test.    I have embarked on a radical program to improve that.  Here is how I have changed things:[ ] To test a method, you needs to make up a receiver, arguments, and a known answer.  Scott Wallace is introducing an 'Instance Browser' to Squeak that shows you an example receiver and arguments for each method.  It lets you run the example.  But, where are we going to get the example receivers and arguments for a method shown in an Instance Browser?  They can be the same as for a test of the method.  I have written code that generates objects that can be used for *either* an SUnit test, or an example method call.[ ] Another thing that should be associated with each method is some 'type information'.  This is the protocol that each argument object needs to respond to.  The same mechanism that produces a test case can store this info also.[ ] In classic SUnits, there is a separate 'testing class' for each class in Squeak.  This would double the number of classes, and is too much overhead.  I have created a new subclass of TestCase that owns a Verifier.  Verifier is a subclass MessageSend that holds the answer that the method is supposed to produce.Object #()    MessageSend #('receiver' 'selector' 'arguments')        MethodCall #('lastValue' 'methodInterface' 'timeStamp')            Verifier #('desiredAnswer' 'passed')                 VerifierOfProperty #('theTest')I have made a subclass of TestCase that holds a Verifier.  A TestSuite of these behaves like a normal test suite, and does not do too much violence to the careful design of SUnits.[ ] A Verifier can only test (a) whether a method returns the correct value and (b) whether it gets an error while running.  A VerifierOfProperty tests for a specific state change after a method has run.  Classic SUnits allow other kinds of assertions and tests.  Except for verifying that a method produces a certain kind of error in a certain case, a series of VerifierOfProperty can test everything that a classic TestCase can.[ ] To collect the test cases, I simply enumerate the implementors of #exampleFor:, and call each one with 'all'.  That returns a list of Verifiers, which are run as test cases.[ ] The SUnit code comes with a TestRunner user interface.  Say     TestRunner openand click on Run All.  After you have my update, the TestCase  called TestViaMethodCall collects and runs all tests that are created with #exampleFor:.  (One drawback is that when a method has more than one test, the individual subtests are not named.  We could give them names in the future.)"!TestCase subclass: #TestViaMethodCall	instanceVariableNames: 'verifier '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Core'!!TestViaMethodCall commentStamp: 'tk 11/29/2001 11:57' prior: 0!Instead of one new class per class being tested, many classes may use TestViaMethodCall.  Hold a Verifier (a MethodCall with an expected answer).  Run that method and compare the actual answer with the expected answer.All class that implements #exampleFor: will be asked for all of their test cases.  For now, they appear in one big list, not separated by class.!MethodCall subclass: #Verifier	instanceVariableNames: 'desiredAnswer passed '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Core'!!Verifier commentStamp: '<historical>' prior: 0!A subclass of MethodCall that knows what the answer is supposed to be.  Knows how to run its method and test the answer.  The MethodCall is believed to work if the answer it produces is equal to desiredAnswer.	(Array exampleFor: 'all') first quickTestThis will return true if the test succeeded.Works with SUnit tests.  TestViaMethodCall, a kind of TestCase, accepts a Verifier and runs it.  It throws an exception if anything goes wrong, including simply getting the wrong anwser.Run all tests that are made with Verifiers in any class:	TestViaMethodCall buildSuite runWhen a method being tested returns self, and the real test is a state change, use a VerifierOfProperty, and set its desiredResult to be #none.  Subclasses will handle:	Answers that must be a particular object (using == to verify)	Methods that effect the receiver.  It tests the receiver to know if it passed.	Method that effect an argument (storeOn:).  Test the arg.!Smalltalk renameClassNamed: #VerifierProperty as: #VerifierOfProperty!Verifier subclass: #VerifierOfProperty	instanceVariableNames: 'theTest '	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Core'!!VerifierOfProperty commentStamp: 'tk 11/29/2001 13:05' prior: 0!A Verifier that must test some property to see if it worked.  Usually it is a property of the receiver, but any test is allowed.  theTest is a simple Verifier that is loaded with the right objects to perform the test.  If it succeeds, then my original method must have worked.  theTest must have no side effects, and be able to be reset to run again.	The object produced as a result of evaluating me normally is also tested.	(Array exampleFor: 'all') third quickTestWhen I am theTest of a Verifier, and I am testing the answer of the Verifier, set my receiver to #answer.!!Array class methodsFor: 'examples' stamp: 'tk 11/30/2001 12:33'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind joe mc jj kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	joe _ Array with: 5 with: 'five' with: nil with: #fourth.	(sel _ #size) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: joe copy selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 4]].	(sel _ #at:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: joe copy selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 'five']].	(sel _ #at:put:) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: (jj _ joe copy) 					selector: sel arguments: {3. 100}).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 100.			mc theTest: ((Verifier receiver: jj selector: #at: argument: 3) desiredAnswer: 100)]].	(sel _ #atWrap:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: joe copy selector: sel argument: 6).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 'five']].	(sel _ #atWrap:put:) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: (jj _ joe copy) 					selector: sel arguments: {-1. 100}).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 100.			mc theTest: ((Verifier receiver: jj selector: #at: argument: 3) desiredAnswer: 100)]].	(sel _ #atPin:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: joe copy selector: sel argument: 6).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #fourth]].	^ list! !!Base64MimeConverter class methodsFor: 'as yet unclassified' stamp: 'tk 11/30/2001 12:34'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	"(Base64MimeConverter exampleFor: #mimeEncode:) first inspect"	| doAll list kind mc ss kindIfTestingState ss1 sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].  kind.	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	ss _ ReadWriteStream on: (String new: 40).	ss nextPutAll: 'test 123 !!@#$%^&*()_+-=:;< >,.?/|\'.	aSelector == (sel _ #mimeEncode:) | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: self selector: sel argument: ss copy).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #none.	"a ReadWriteStream.  Now test its contents"			mc theTest: ((Verifier receiver: #answer selector: #contents ) desiredAnswer: 				'dGVzdCAxMjMgIUAjJCVeJiooKV8rLT06OzwgPiwuPy98XA==')]].	aSelector == (sel _ #mimeEncode:) | doAll ifTrue: [		"Try one with no padding"		ss1 _ ReadWriteStream on: (String new: 40).		ss1 nextPutAll: 'test 23 !!@#$%^&*()_+-=:;< >,.?/|\'.		list add: (mc _ kindIfTestingState receiver: self selector: sel 						argument: ss1 copy).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #none.	"a ReadWriteStream.  Now test its contents"			mc theTest: ((Verifier receiver: #answer selector: #contents ) desiredAnswer: 				'dGVzdCAyMyAhQCMkJV4mKigpXystPTo7PCA+LC4/L3xc')]].	aSelector == (sel _ #mimeDecodeToChars:) | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: self selector: sel						argument: (ReadStream on: 							'dGVzdCAxMjMgIUAjJCVeJiooKV8rLT06OzwgPiwuPy98XA==')).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #none.	"a ReadWriteStream.  Now test its contents"			mc theTest: ((Verifier receiver: #answer selector: #contents ) desiredAnswer: 				ss copy contents)]].	aSelector == (sel _ #mimeDecodeToBytes:) | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: self selector: sel 						argument: (ReadStream on: 							'dGVzdCAxMjMgIUAjJCVeJiooKV8rLT06OzwgPiwuPy98XA==')).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #none.	"a ReadWriteStream.  Now test its contents"			mc theTest: ((Verifier receiver: #answer selector: #contents ) desiredAnswer: 				ss copy contents asByteArray)]].	aSelector == (sel _ #encodeInteger:) | doAll ifTrue: [		list add: (mc _ kind receiver: self selector: sel 						argument: 34987201509360394890328034809).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: '+U1ScRA1JkgavAxx']].	aSelector == (sel _ #decodeInteger:) | doAll ifTrue: [		list add: (mc _ kind receiver: self selector: sel 						argument: '+U1ScRA1JkgavAxx').		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 34987201509360394890328034809]].	^ list! !!DisplayText class methodsFor: 'examples' stamp: 'tk 11/28/2001 16:03'!example	"Continually prints two lines of text wherever you point with the cursor.  Terminate by pressing any button on the	mouse."	| tx |	tx _ 'this is a line of characters andthis is the second line.' asDisplayText.	tx foregroundColor: Color black backgroundColor: Color transparent.	tx _ tx alignedTo: #center.	[Sensor anyButtonPressed]		whileFalse:			[tx displayOn: Display at: Sensor cursorPoint]	"DisplayText example."! !!Number class methodsFor: 'examples' stamp: 'tk 11/30/2001 12:34'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind mc kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	(sel _ #//) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 7.8765 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 3]].	(sel _ #abs) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: -7 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 7]].	(sel _ #negated) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 7 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: -7]].	(sel _ #reciprocal) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 3 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 1/3]].	(sel _ #rem:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: -9 selector: sel argument: 4).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: -1]].	(sel _ #printStringBase:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 6 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: '2r110']].	^ list! !!Integer class methodsFor: 'examples' stamp: 'tk 11/30/2001 13:13'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind mc kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	(sel _ #factorial) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 5 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 120]].	(sel _ #factorial) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 100 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer:  93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000]].	(sel _ #asWords) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 9381 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 'nine thousand, three hundred eighty-one']].	(sel _ #atRandom) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: 10 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #none.			mc theTest: ((Verifier receiver: #answer selector: #<= argument: 10) 							desiredAnswer: true)]].	(sel _ #atRandom) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: 10 selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #none.			mc theTest: ((Verifier receiver: #answer selector: #> argument: 0) 							desiredAnswer: true)]].	^ list! !!ReadWriteStream methodsFor: 'testing' stamp: 'tk 11/29/2001 12:47'!= other	(self class == ReadWriteStream and: [other class == ReadWriteStream]) ifFalse: [		^ super = other].	"does an identity test.  Don't read contents of FileStream"	^ self position = other position and: [self contents = other contents]! !!SmallInteger methodsFor: 'arithmetic' stamp: 'tk 11/30/2001 11:55'!// aNumber 	"Primitive. Divide the receiver by the argument and answer with the	result. Round the result down towards negative infinity to make it a	whole integer. Fail if the argument is 0 or is not a SmallInteger.	Essential. No Lookup. See Object documentation whatIsAPrimitive. "	<primitive: 12>	^ super // aNumber 	"Do with quo: if primitive fails"! !!SmallInteger methodsFor: 'arithmetic' stamp: 'tk 11/30/2001 11:53'!\\ aNumber 	"Primitive. Take the receiver modulo the argument. The result is the	remainder rounded towards negative infinity, of the receiver divided by	the argument Fail if the argument is 0 or is not a SmallInteger. Optional.	No Lookup. See Object documentation whatIsAPrimitive."	<primitive: 11>	^ super \\ aNumber 	"will use // to compute it if primitive fails"! !!SmallInteger class methodsFor: 'examples' stamp: 'tk 11/30/2001 12:34'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind mc kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	(sel _ #\\) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 13 selector: sel argument: 10).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 3]].	(sel _ #//) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 7 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 3]].	(sel _ #//) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: -7 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: -4]].	(sel _ #gcd:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 15 					selector: sel argument: 21).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 3]].	(sel _ #quo:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: -7 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: -3]].	(sel _ #bitAnd:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 6 selector: sel argument: 5).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 4]].	(sel _ #bitOr:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 6 selector: sel argument: 5).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 7]].	(sel _ #bitXor:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 6 selector: sel argument: 5).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 3]].	(sel _ #bitShift:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 3 selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 12]].	^ list! !!String class methodsFor: 'examples' stamp: 'tk 11/30/2001 13:11'!exampleFor: aSelector	"Provide a MethodCall with a valid example of aSelector, ready to run.  If 'all', provide all tests we know about for SUnit tests.  When 'all', each will be a Verifier, with an expected answer.  Returns a list of MethodCalls, Verifiers, or VerifierOfPropertys."	| doAll list kind mc jj kindIfTestingState sel |	doAll _ (aSelector class == String) and: [aSelector = 'all'].	list _ OrderedCollection new.	kind _ doAll ifFalse: [MethodCall] ifTrue: [Verifier].	kindIfTestingState _ doAll ifFalse: [MethodCall] ifTrue: [VerifierOfProperty].	(sel _ #size) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'length?' selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 7]].	(sel _ #at:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'abc' selector: sel argument: 2).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: $b]].	(sel _ #at:put:) == aSelector | doAll ifTrue: [		list add: (mc _ kindIfTestingState receiver: (jj _ 'abc' copy) 					selector: sel arguments: {2. $k}).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: $k.			mc theTest: ((Verifier receiver: jj selector: #at: argument: 2) desiredAnswer: $k)]].	(sel _ #findString:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'searching is very important' selector: sel argument: 'ing').		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 7]].	(sel _ #findTokens:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'break this up, into words.' selector: sel argument: '. ,').		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: #('break' 'this' 'up' 'into' 'words') asOrderedCollection]].	(sel _ #indexOf:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'find the first T in this' selector: sel argument: $T).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 16]].	(sel _ #lineCount) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'how manylinesin this?' selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 3]].	(sel _ #beginsWith:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'what now?' selector: sel argument: 'what ').		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: true]].	(sel _ #endsWith:) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: 'what now?' selector: sel argument: 'ow?').		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: true]].	(sel _ #asDate) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: '11/30/01' selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: (Date fromJulianDayNumber: 2452244)]].	(sel _ #asDate) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: '30 Nov 2001' selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: (Date fromJulianDayNumber: 2452244)]].	(sel _ #asTime) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: '7:23 pm' selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: (Time fromSeconds: 69780)]].	(sel _ #asNumber) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: '43.2' selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 43.2]].	(sel _ #asNumber) == aSelector | doAll ifTrue: [		list add: (mc _ kind receiver: '16rA4.F3e2' selector: sel).		"mc get methodInterface"		doAll ifTrue: [mc desiredAnswer: 42227.0]].	^ list! !!TestViaMethodCall methodsFor: 'Running' stamp: 'tk 11/27/2001 21:18'!setUp	"A Verifier already comes with its receiver and args.  If you want to run it again, get a new one from the class."	verifier passed ifNotNil: [		"replace verifier with a new one just like it"		"verifier _ (verifier receiver class exampleFor: 'all') 				detect: [:vv | vv = verifier] ifNone: [					self signalFailure: 'Can't find fresh copy of me']		"		self signalFailure: 'May not be in initial state.  Was run already'].! !!TestViaMethodCall methodsFor: 'Printing' stamp: 'tk 11/29/2001 13:28'!printOn: aStream	aStream		nextPutAll: verifier receiver class printString;		nextPutAll: '>>';		nextPutAll: verifier selector! !!TestViaMethodCall methodsFor: 'Private' stamp: 'tk 11/29/2001 12:00'!performTest	"Run the method, and see if the answer matches.  	Some method change state, and don't return a significant answer.  If so, the verifier is a VerifierOfProperty, and the state change is tested in checkState.  If the desiredAnswer is #none, answer does not matter, so ignore it.  (verifier checkState) determines if the method did the right thing."	verifier checkBefore ifFalse: [self signalFailure: 'Not fresh.  Has been run'].			"Check that the state change has not already occurred"	verifier evaluate.	verifier desiredAnswer == #none ifFalse: [ 		verifier lastValue = verifier desiredAnswer ifFalse: [				self signalFailure: 'Answer is incorrect']].	verifier checkState ifFalse: [self signalFailure: 'Test for state change failed'].! !!TestViaMethodCall methodsFor: 'Private' stamp: 'tk 11/27/2001 20:46'!verifier: av	verifier _ av! !!TestViaMethodCall class methodsFor: 'as yet unclassified' stamp: 'tk 11/27/2001 21:02'!buildSuiteFromLocalSelectors	"Return a list of tests to perform"	| ts |	ts _ (TestSuite new) name: 'From Many Classes'.	(Smalltalk allImplementorsOf: #exampleFor:) do: [:mr |		mr classIsMeta ifTrue: [			((Smalltalk at: mr classSymbol) perform: mr methodSymbol with: 'all') 				do: [:aVerifier | ts addTest: (self new verifier: aVerifier)]]].	^ ts! !!TestViaMethodCall class methodsFor: 'as yet unclassified' stamp: 'tk 11/27/2001 21:01'!shouldInheritSelectors	"answer true to inherit selectors from superclasses"	^ false! !!Verifier methodsFor: 'accessing' stamp: 'tk 11/27/2001 20:49'!desiredAnswer	^ desiredAnswer! !!Verifier methodsFor: 'accessing' stamp: 'tk 11/20/2001 22:17'!desiredAnswer: aValue	desiredAnswer _ aValue! !!Verifier methodsFor: 'accessing' stamp: 'tk 11/27/2001 21:41'!passed	^ passed! !!Verifier methodsFor: 'evaluation' stamp: 'tk 11/27/2001 21:45'!checkBefore	"If there is another final test to check any state change, override this method"	^ true! !!Verifier methodsFor: 'evaluation' stamp: 'tk 11/27/2001 21:46'!checkState	"If there is another final test to check any state change, override this method"	^ true! !!Verifier methodsFor: 'evaluation' stamp: 'tk 11/29/2001 12:03'!quickTest	"Run the method, and see if the answer matches."	passed ifNotNil: [^ false].	"must have never been run"	"There is no property to test before doing the evaluate."	[self evaluate.	 passed _ desiredAnswer == #none or: [lastValue = desiredAnswer]	 ] ifError: [:msg :rcvr | 			passed _ desiredAnswer = (lastValue _ 'Error: ', msg)].	^ passed! !!Verifier methodsFor: 'Running' stamp: 'tk 11/21/2001 10:34'!rawReset	"Because of side effects, you are never supposed to run a Verifier twice.  However, if you are sure that there are no side effects, this will allow the Verifier to run again."	passed _ nil.! !!VerifierOfProperty methodsFor: 'accessing' stamp: 'tk 11/21/2001 11:12'!theTest: aVerifier	theTest _ aVerifier! !!VerifierOfProperty methodsFor: 'evaluation' stamp: 'tk 11/27/2001 21:37'!checkBefore	"Before the state change, my test should NOT be true"	| pp |	pp _ theTest quickTest.	theTest rawReset.	^ pp not! !!VerifierOfProperty methodsFor: 'evaluation' stamp: 'tk 11/29/2001 12:59'!checkState	"Do the final test to check a state change."	| originalReceiver |	originalReceiver _ theTest receiver.	"Sometimes we want to test the state of the answer.  Substitute it in here"	(theTest receiver == #answer) ifTrue: [theTest receiver: lastValue].	"MY recent answer"	[theTest evaluate] ensure: [theTest receiver: originalReceiver].	^ passed _ theTest lastValue = theTest desiredAnswer		"We depend on this test, so #none is not acceptable here!!"! !!VerifierOfProperty methodsFor: 'evaluation' stamp: 'tk 11/27/2001 22:01'!quickTest	"Run the method, and see if the answer matches."	| ok |	ok _ theTest checkBefore.			"Check that the state change has not already occurred"	ok _ ok and: [super quickTest].	^ ok and: [theTest checkState]! !VerifierOfProperty removeSelector: #performTest!!VerifierOfProperty reorganize!('accessing' theTest:)('Running')('evaluation' checkBefore checkState quickTest)!Verifier class removeSelector: #buildSuite!Verifier class removeSelector: #buildSuiteFromLocalSelectors!Verifier class removeSelector: #shouldInheritSelectors!Verifier removeSelector: #performTest!Verifier removeSelector: #resources!Verifier removeSelector: #run!Verifier removeSelector: #run:!Verifier removeSelector: #runCase!Verifier removeSelector: #setUp!Verifier removeSelector: #signalFailure:!Verifier removeSelector: #tearDown!!Verifier reorganize!('accessing' desiredAnswer desiredAnswer: passed)('evaluation' checkBefore checkState quickTest)('Running' rawReset)!!TestViaMethodCall reorganize!('Running' setUp)('Printing' printOn:)('Private' performTest verifier:)!