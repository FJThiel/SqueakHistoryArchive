'From Squeak 2.2beta of Sept 11, 1998 on 22 September 1998 at 9:48:39 am'!"Change Set:		jhmCelesteTweaksDate:			22 September 1998Author:			John MaloneySeveral important bug fixes:  1. Celeste can now re-open the mail database after an image is saved     with Celeste open.  2. Celeste now flushes changes out to the disk when saving the image.     This helps ensure that mail categorization changes are properly recorded.  3. Celeste uses a fixed-pitch version of Courier when it is available to make     the formatting of the message headers align nicely (at Alan's request).Removes the 'close' menu item, since it is no longer needed."!!Celeste methodsFor: 'open-close' stamp: 'jm 9/21/1998 17:18'!close	"Close the mail database."	mailDB ifNotNil: [		mailDB close; release.		mailDB _ nil].! !!Celeste methodsFor: 'categories pane' stamp: 'jm 9/21/1998 17:28'!categoryMenu: aMenu	"Answer the menu for the categories pane."	| labels lineSeparations selectors lines |	labels _ 'save\fetch mail\send queued mail\add category' withCRs.	lineSeparations _ #(1 2).	selectors _ #(save fetchMail sendQueuedMail addCategory).	"add extra commands if a normal category is selected"	((currentCategory notNil) and:	 [(currentCategory ~= '.all.') &	  (currentCategory ~= '.unclassified.')])		ifTrue: [			labels _ labels, '\rename category\remove category\export category' withCRs.			lineSeparations _ lineSeparations, #(4).			selectors _ selectors, #(renameCategory removeCategory exportCategory ). ]		ifFalse: [			lineSeparations _ lineSeparations, #(1) ].	labels _ labels, '\empty trash\compact\toggle headers\set user name\set cc: list\set POP server\set POP username\set SMTP server' withCRs.	lineSeparations _ lineSeparations, #(2 1 5).	selectors _ selectors, #(emptyTrash compact toggleSuppressHeaders setUserName setCCList setPopServer setPopUSername setSmtpServer).	"add toggle for whether to delete messages on download"	DeleteInboxAfterFetching		ifTrue: [ labels _ labels, '\leave messages on server' withCRs.			selectors _ selectors, #(keepMessagesOnServer) ]		ifFalse: [ labels _ labels, '\don''t leave messages on server' withCRs.			selectors _ selectors, #(deleteMessagesAfterFetching) ].	lineSeparations _ lineSeparations, #(1).	"convert lineSeperations into absolute line positions"	lines _ lineSeparations copyFrom: 1 to: (lineSeparations size - 1).	(2 to: lines size) do: [ :i |		lines at: i put: ((lines at: i) + (lines at: i-1)) ].	^aMenu labels: labels lines: lines  selections: selectors! !!Celeste methodsFor: 'categories pane' stamp: 'jm 9/21/1998 11:03'!setCategory: newCategory	"Change the currently selected category. We must also compute the table of contents and message list for the new category."	| s |	currentCategory _ newCategory.	(newCategory isNil)		ifTrue: [			currentMessages _ currentTOC _ currentMsgID _ nil]		ifFalse: [			currentMessages _ self filteredMessagesIn: newCategory.			currentTOC _ OrderedCollection new: currentMessages size.			1 to: currentMessages size do: [:i |				s _ WriteStream on: (String new: 200).				s nextPutAll: i printString; space.				[s position < 4] whileTrue: [s space].				s nextPutAll: (mailDB getTOCstring: (currentMessages at: i)).				currentTOC add: s contents].			currentTOC _ currentTOC asArray.			(currentMessages includes: currentMsgID) ifFalse: [currentMsgID _ nil]].	self changed: #category.	self changed: #tocEntryList.	self changed: #messageText.! !!Celeste class methodsFor: 'instance creation' stamp: 'jm 9/21/1998 11:06'!buildViewsFor: model	"Answer a collection of window panes for the Celeste user interface."	| listViewClass textViewClass listFont views v |	Smalltalk isMorphic		ifTrue: [			listViewClass _ PluggableListMorphByItem.			textViewClass _ PluggableTextMorph]		ifFalse: [			listViewClass _ PluggableListViewByItem.			textViewClass _ PluggableTextView].	listFont _ StrikeFont allInstances		detect: [:f | (f name beginsWith: 'CourierFixed') and: [f height = 11]]		ifNone: [TextStyle default fontAt: 1].	views _ OrderedCollection new.	v _ listViewClass		on: model		list: #categoryList		selected: #category		changeSelected: #setCategory:		menu: #categoryMenu:		keystroke: #categoriesKeystroke:.	views add: v.	v _ listViewClass		on: model		list: #tocEntryList		selected: #tocEntry		changeSelected: #setTOCEntry:		menu: #tocMenu:		keystroke: #tocKeystroke:.	v font: listFont.	views add: v.	v _ textViewClass new		on: model		text: #messageText		accept: #messageText:		readSelection: nil		menu: #messageMenu:shifted:.	v borderWidth: 1.	model messageTextView: v.	views add: v.	^ views! !!Celeste class methodsFor: 'instance creation' stamp: 'jm 9/21/1998 10:46'!openOnDatabase: aMailDB	"Open a MailReader on the given mail database."	| model views buttons topWindow |	model _ self new openOnDatabase: aMailDB.	views _ self buildViewsFor: model.	buttons _ self buildButtonsFor: model.	Smalltalk isMorphic		ifTrue: [			topWindow _ (SystemWindow labelled: 'Celeste') model: model.			topWindow addMorph: (buttons at: 1) frame: (0.0@0.0 extent: 0.16@0.05).			topWindow addMorph: (buttons at: 2) frame: (0.16@0.0 extent: 0.17@0.05).			topWindow addMorph: (buttons at: 3) frame: (0.33@0.0 extent: 0.17@0.05).			topWindow addMorph: (buttons at: 4) frame: (0.50@0.0 extent: 0.16@0.05).			topWindow addMorph: (buttons at: 5) frame: (0.66@0.0 extent: 0.17@0.05).			topWindow addMorph: (buttons at: 6) frame: (0.83@0.0 extent: 0.17@0.05).			topWindow addMorph: (views at: 1) frame: (0.0@0.05 extent: 0.2@0.25).			topWindow addMorph: (views at: 2) frame: (0.2@0.05 extent: 0.8@0.25).			topWindow addMorph: (views at: 3) frame: (0.0@0.30 extent: 1.0@0.70).			buttons do: [:b | b onColor: Color lightGray offColor: Color white].			topWindow openInWorld]		ifFalse: [			topWindow _ StandardSystemView new				model: model;				label: 'Celeste';				minimumSize: 400@250.			(views at: 1) window: (0@0 extent: 20@25).			(views at: 2) window: (0@0 extent: 80@25).			(views at: 3) window: (0@0 extent: 100@70).			(buttons at: 1) window: (0@0 extent: 17@5).			(buttons at: 2) window: (0@0 extent: 17@5).			(buttons at: 3) window: (0@0 extent: 16@5).			(buttons at: 4) window: (0@0 extent: 17@5).			(buttons at: 5) window: (0@0 extent: 17@5).			(buttons at: 6) window: (0@0 extent: 16@5).			topWindow				addSubView: (buttons at: 1);				addSubView: (buttons at: 2) toRightOf: (buttons at: 1);				addSubView: (buttons at: 3) toRightOf: (buttons at: 2);				addSubView: (buttons at: 4) toRightOf: (buttons at: 3);				addSubView: (buttons at: 5) toRightOf: (buttons at: 4);				addSubView: (buttons at: 6) toRightOf: (buttons at: 5);				addSubView: (views at: 1) below: (buttons at: 1);				addSubView: (views at: 2) toRightOf: (views at: 1);				addSubView: (views at: 3) below: (views at: 1).			topWindow controller open].! !!IndexFileEntry methodsFor: 'printing' stamp: 'jm 9/21/1998 10:55'!computeTOCString	"Answer a string for the table of contents."	"IndexFileEntry allInstancesDo: [: e | e flushTOCCache]"	| fromFieldSize s |	fromFieldSize _ 18.	s _ WriteStream on: (String new: 200).	s nextPutAll: self dateString.	[s position < 9] whileTrue: [s space].	s nextPutAll: (self fromStringLimit: fromFieldSize).	[s position <= (9 + fromFieldSize + 2)] whileTrue: [s space].	s nextPutAll: subject.	^ s contents! !!MailDB reorganize!('initialize-release' close openOn: release)('open-create-save' createDB dbStatus openDB recoverDB rootFilename saveDB)('fetch-merge-compact' POPMailFrom:userName:password:doFormatting:deleteInbox:informingUser: appendMessages:messageFile:indexFile: cleanUpCategories compact copyUndeletedTo:indexFile: fetchMailFrom:doFormatting:deleteInbox: fetchNewsFrom:doFormatting:deleteInbox: fileDuplicatesIn: findDuplicates mergeMessages:from: nextUnusedID)('categories' addCategory: addNewMessage:inCategory: allCategories categoriesThatInclude: file:inCategory: fileAll:inCategory: messagesIn: remove:fromCategory: removeAll:fromCategory: removeCategory: removeFromAllCategories: renameCategory:to:)('messages' delete: deleteAll: getMessage: getTOCentry: getTOCstring: getText: newText:for:)('printing' printOn:)('private' do:andInform: showProgress:from:to:message:during:)!!MessageFile methodsFor: 'file operations' stamp: 'jm 9/21/1998 16:26'!close	"Close the file."	file ifNil: [^ self].	file		ensureOpen;		setToEnd;		close.	file _ nil.! !!MessageFile methodsFor: 'file operations' stamp: 'jm 9/21/1998 16:30'!ensureFileIsOpen	"Make sure that my file is open. The file is automatically closed on snapshots."	file		ifNil: [file _ FileStream fileNamed: filename]		ifNotNil: [file ensureOpen].! !!MessageFile methodsFor: 'file operations' stamp: 'jm 9/21/1998 16:27'!save	"Make sure the message file is flushed to disk. This is NOT atomic because MessageFiles can get large and there might not be enough disk space to save them atomically. Besides, it would be very slow."	file ifNil: [^ self].	file		ensureOpen;		setToEnd;		close;		reopen.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jm 9/21/1998 16:39'!processShutDownList	"Call the shutDown method on each object that needs to gracefully shut itself down before a snapshot."	Smalltalk at: #MailDB ifPresent: [:mailDB |		mailDB allInstancesDo: [:db | db saveDB]].  "snapshot all mail databases to disk"	Smalltalk at: #PWS ifPresent: [:pws | pws stopServer].	Smalltalk at: #Password ifPresent: [:password | password shutDown].	self shutDownSound.	Delay shutDown.	Smalltalk shutDown.	Color shutDown.	StrikeFont shutDown.	Smalltalk isMorphic ifFalse: [ControlManager shutDown].	Form shutDown.	DisplayScreen shutDown.! !Celeste removeSelector: #saveAndClose!