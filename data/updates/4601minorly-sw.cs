'From Squeak3.2alpha of 3 October 2001 [latest update: #4599] on 11 December 2001 at 11:08:06 am'!"Change Set:		minorly-swDate:			11 December 2001Author:			Scott Wallace¥ Titles for slot-info menus in viewers now (again) show the slot-name rather than the getter.¥ÊMakes it possible for any of the anticipated individual-category-defining methods to be missing when Morph class #additionsToViewerCategories is run.  This circumvents a recurring and annoying method-ordering problem."!!Morph methodsFor: 'scripting' stamp: 'sw 12/11/2001 10:53'!categoriesForViewer	"Answer a list of symbols representing the categories to offer in the viewer, in order"	| aClass aList predetermined genericItems genericAdditions |	aClass _ self renderedMorph class.	aList _ OrderedCollection new.	[aClass == Morph] whileFalse:		[(aClass class includesSelector: #additionsToViewerCategories) ifTrue:			[aList addAllFirstUnlessAlreadyPresent: (aClass additionsToViewerCategories collect:				[:categorySpec | categorySpec first])].		aClass _ aClass superclass]. 	genericAdditions _ Morph additionsToViewerCategories.	genericItems _ genericAdditions collect:			[:categorySpec | categorySpec first].	aList removeAllFoundIn: genericItems.	aList addAllFirstUnlessAlreadyPresent: (genericAdditions collect:			[:categorySpec | categorySpec first]) asSet asOrderedCollection.	predetermined _ #(basic #'color & border' geometry motion #'pen use' tests layout #'drag & drop' scripting observation button search miscellaneous) select:		[:sym | aList includes: sym].  "bulletproof agains change in those names elsewhere"	aList removeAllFoundIn: predetermined.	^ predetermined, aList! !!Morph class methodsFor: 'scripting' stamp: 'sw 12/11/2001 10:16'!additionsToViewerCategories	"Answer a list of (<categoryName> <list of category specs>) pairs that characterize the phrases this kind of morph wishes to add to various Viewer categories.  The special generic Morph version factors each category definition into a separate method; to solve recurrent fileout-ordering problems, this method can still function even if some of those separate methods are absent."		^ #(additionsToViewerCategoryBasic additionsToViewerCategoryScripts additionsToViewerCategoryColorAndBorder additionsToViewerCategoryGeometry additionsToViewerCategoryMiscellaneous additionsToViewerCategoryButton additionsToViewerCategoryMotion additionsToViewerCategoryObservation additionsToViewerCategoryPenUse additionsToViewerCategoryLayout additionsToViewerCategoryDragAndDrop additionsToViewerCategoryScripting additionsToViewerCategoryTests)		select:			[:aSelector | self respondsTo: aSelector]		thenCollect:			[:aSelector | self perform: aSelector]"Morph additionsToViewerCategories size"! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 12/11/2001 10:38'!addIdiosyncraticMenuItemsTo: aMenu forSlotSymol: slotSym	"The menu provided has the receiver as its argument, and is used as the menu for the given slot-symbol in a line of a Viewer.  Add special-case items"	(#(copy getNewClone newClone) includes: slotSym) ifTrue:		[aMenu add: 'give me a copy now' action: #handTheUserACopy]."	(slotSym == #dropShadow) ifTrue:		[aMenu add: 'set shadow offset' action: #setShadowOffset].	(slotSym == #useGradientFill) ifTrue:		[aMenu add: 'set gradient origin...' action: #setGradientOffset.		aMenu add: 'set gradient direction...' action: #setGradientDirection]."! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 12/11/2001 10:30'!slotInfoButtonHitFor: aGetterSymbol inViewer: aViewer	"The user made a gesture asking for slot menu for the given getter symbol in a viewer; put up the menu."	| aMenu slotSym aType typeVocab |	slotSym _ Utilities inherentSelectorForGetter: aGetterSymbol.	aType _ self typeForSlotWithGetter: aGetterSymbol asSymbol.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: (slotSym asString, ' (', aType, ')').	(typeVocab _ Vocabulary vocabularyForType: aType) addWatcherItemsToMenu: aMenu forGetter: aGetterSymbol.	(self slotInfo includesKey: slotSym)		ifTrue:			[aMenu add: 'change data type' selector: #chooseSlotTypeFor: argument: aGetterSymbol.			typeVocab addUserSlotItemsTo: aMenu slotSymbol: slotSym.  "e.g. decimal places"			aMenu add: 'remove "', slotSym, '"' selector: #removeSlotNamed: argument: slotSym.			aMenu add: 'rename  "', slotSym, '"' selector: #renameSlot: argument: slotSym].	typeVocab addExtraItemsToMenu: aMenu forSlotSymbol: slotSym.  "e.g. Player type adds hand-me-tiles"	self addIdiosyncraticMenuItemsTo: aMenu forSlotSymol: slotSym.	aMenu items size == 0 ifTrue:		[aMenu add: 'ok' action: #yourself].	aMenu popUpForHand: aViewer primaryHand in: aViewer world! !