'From Squeak2.9alpha of 13 June 2000 [latest update: #2912] on 29 October 2000 at 9:29:03 am'!!MovieFrameSyncMorph methodsFor: 'initialization' stamp: 'di 10/29/2000 09:22'!justDroppedInto: newOwner event: evt 	| pianoRoll |	"When dropping this morph into a pianoRoll, add a corresponding	event to the score so that it will always appear when played,	in addition to possibly triggering other actions"	(self isMemberOf: MovieFrameSyncMorph) ifFalse:		[^ super justDroppedInto: newOwner event: evt].	(newOwner isKindOf: PianoRollScoreMorph)	ifTrue:		["Legacy code for existing sync morphs"		pianoRoll _ newOwner.		pianoRoll score			removeAmbientEventWithMorph: self;			addAmbientEvent: (AmbientEvent new						morph: self;						time: (pianoRoll timeForX: self left))].	super justDroppedInto: newOwner event: evt! !!MovieClipStartMorph methodsFor: 'initialization' stamp: 'di 10/29/2000 09:23'!justDroppedInto: newOwner event: evt	| pianoRoll syncMorph |	"When dropping this morph into a pianoRoll, add a corresponding	event to the score so that it will always appear when played,	in addition to possibly triggering other actions"	(newOwner isKindOf: PianoRollScoreMorph)	ifTrue:		[pianoRoll _ newOwner.		pianoRoll movieClipPlayer ifNil:			["This PianoRoll is not a clip player -- replace me by a SyncMorph"			syncMorph _ MovieFrameSyncMorph new						image: image						player: moviePlayerMorph						frameNumber: frameNumber.			pianoRoll replaceSubmorph: self by: syncMorph.			"rewrite to use justDroppedInto:..."			pianoRoll score removeAmbientEventWithMorph: self;					addAmbientEvent: (scoreEvent						morph: syncMorph;						time: (pianoRoll timeForX: self left)).			^ self].		self movieClipPlayer: pianoRoll movieClipPlayer.		self setTimeInScore: pianoRoll score					near: (pianoRoll timeForX: self left).		self endTime > newOwner scorePlayer durationInTicks ifTrue:			[newOwner scorePlayer updateDuration]]	ifFalse:		["Dropped it somewhere else -- delete related morphs"		endMorph ifNotNil: [endMorph delete].		soundTrackMorph ifNotNil: [soundTrackMorph delete]].	super justDroppedInto: newOwner event: evt! !!MovieClipStartMorph methodsFor: 'private' stamp: 'di 10/29/2000 08:02'!setEndFrameNumber: frame	self setEndFrameNumber: frame tickTime: nil! !!MovieClipStartMorph methodsFor: 'private' stamp: 'di 10/29/2000 09:17'!setEndFrameNumber: frameOrNil tickTime: timeOrNil	"May be called with either time or frame being nil,	in which case the other will br computed."	| pianoRoll frame time |	pianoRoll _ movieClipPlayer pianoRoll.	frame _ frameOrNil ifNil:		[frameNumber + 			((timeOrNil - self startTime)			* (pianoRoll scorePlayer secsPerTick*1000.0)			/ moviePlayerMorph msPerFrame) asInteger - 1].	time _ timeOrNil ifNil:		[self startTime +   "in ticks"			(pianoRoll scorePlayer ticksForMSecs:			(frameOrNil - frameNumber) * moviePlayerMorph msPerFrame)].	endMorph ifNil:		[endMorph _ MovieClipEndMorph new			movieFileName: movieClipFileName			image: (moviePlayerMorph pageFormForFrame: frame)			player: movieClipPlayer			frameNumber: frame]		ifNotNil:		[endMorph image: (moviePlayerMorph pageFormForFrame: frame)			frameNumber: frame].	endMorph scoreEvent time: time.	pianoRoll score removeAmbientEventWithMorph: endMorph;		addAmbientEvent: endMorph scoreEvent.	soundTrackMorph _ nil.  "Force it to be recomputed."	pianoRoll rebuildFromScore! !!MovieClipStartMorph methodsFor: 'private' stamp: 'di 10/29/2000 09:14'!setTimeInScore: score near: dropTime	"Find a time to place this clip that does not overlap other clips.	So, if I start in the middle of another clip, move me to the end of it,	and if I start very soon after another clip, put me right at the end.	Then, if my end goes beyond the start of another clip, shorten me	so I end right before that clip."	| startTime endTime delta endFrame |	startTime _ dropTime.	endMorph ifNil: [endFrame _ moviePlayerMorph frameCount min: frameNumber + 200]			ifNotNil: [endFrame _ endMorph frameNumber].	endTime _ startTime   "in ticks"		+ (movieClipPlayer pianoRoll scorePlayer ticksForMSecs:			(endFrame - frameNumber)			* moviePlayerMorph msPerFrame).	score eventMorphsDo:		[:m | (m ~~ self and: [m isMemberOf: self class]) ifTrue:				[((startTime between: m startTime and: m endTime)					or: [startTime between: m endTime and: m endTime+50])					ifTrue: ["If I start in the middle of another clip, or a little							past its end, move me exactly to the end of it"							delta _ (m endTime + 1) - startTime.							startTime _ startTime + delta.							endTime _ endTime + delta].				(endTime between: m startTime and: m endTime)					ifTrue: ["If my end goes overlaps another clip, shorten me so I fit."							endTime _ m startTime - 1].				]].	scoreEvent time: startTime.	score removeAmbientEventWithMorph: self;			addAmbientEvent: scoreEvent.	self setEndFrameNumber: endFrame tickTime: endTime.! !!MoviePlayerMorph methodsFor: 'initialization' stamp: 'di 10/28/2000 17:04'!stopSoundTrackIfAny	scorePlayer == nil ifTrue:[^ self].	(scorePlayer isKindOf: SampledSound)		ifTrue: [scorePlayer endGracefully]		ifFalse: [scorePlayer _ nil]! !!MoviePlayerMorph methodsFor: 'stepping' stamp: 'di 10/28/2000 21:36'!startRunning	| ms |	(frameBufferIfScaled ifNil: [currentPage image]) unhibernate.	movieFile _ AsyncFile new open: movieFileName forWrite: false.	movieFile primReadStart: movieFile fileHandle			fPosition: (self filePosForFrameNo: frameNumber)			count: self fileByteCountPerFrame.	scorePlayer == nil		ifTrue: [ms _ Time millisecondClockValue.				msAtStart _ ms - ((frameNumber-1) * msPerFrame).				msAtLastSync _ ms - msAtStart.				frameAtLastSync _ frameNumber]		ifFalse: [(playDirection > 0 and: [scorePlayer isKindOf: SampledSound]) ifTrue:					[scorePlayer reset;							playSilentlyUntil: (frameNumber - 1 * msPerFrame / 1000.0);						initialVolume: 1.0.					[scorePlayer resumePlaying.					msAtLastSync _ scorePlayer millisecondsSinceStart]						forkAt: Processor userInterruptPriority].				msAtLastSync _ scorePlayer millisecondsSinceStart.				frameAtLastSync _ frameNumber]! !!SampledSound methodsFor: 'playing' stamp: 'di 10/28/2000 17:08'!endGracefully	"See stopGracefully, which affects initialCOunt, and I don't think it should (di)."	| decayInMs env |	envelopes isEmpty		ifTrue: [			self adjustVolumeTo: 0 overMSecs: 10.			decayInMs _ 10]		ifFalse: [			env _ envelopes first.			decayInMs _ env attackTime + env decayTime].	count _ decayInMs * self samplingRate // 1000.! !!SampledSound methodsFor: 'playing' stamp: 'di 10/28/2000 22:31'!playSilentlyUntil: startTime	"Used to fast foward to a particular starting time.	Overridden to be instant for sampled sounds.""true ifTrue: [^ super playSilentlyUntil: startTime]."	indexHighBits _ (startTime * originalSamplingRate) asInteger.	scaledIndex _ IncrementScaleFactor.	count _ initialCount - (startTime * self samplingRate).	mSecsSinceStart _ (startTime * 1000) asInteger.! !MovieClipStartMorph removeSelector: #repositionEndMorph!