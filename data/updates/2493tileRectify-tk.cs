'From Squeak2.9alpha of 16 June 2000 [latest update: #2489] on 16 August 2000 at 10:38:18 am'!!PhraseTileMorph methodsFor: 'miscellaneous' stamp: 'tk 8/16/2000 10:01'!lastTile	"The tile that might get an extension arrow"	^ self lastSubmorph lastTile! !!TileMorph methodsFor: 'accessing' stamp: 'tk 8/16/2000 10:01'!lastTile	"The tile that might get an extension arrow"	^ self! !!TileMorph methodsFor: 'arrows' stamp: 'tk 8/16/2000 09:48'!addRetractArrow	"Must be situated in a script"	self couldRetract ifNil: [^ self].	retractArrow _ ImageMorph new image: RetractPicture.	suffixArrow ifNotNil: [		self addMorph: retractArrow inFrontOf: suffixArrow].	fullBounds _ nil.	self extent: self fullBounds extent! !!TileMorph methodsFor: 'arrows' stamp: 'tk 8/16/2000 09:50'!addSuffixArrow	suffixArrow _ ImageMorph new image: SuffixPicture.	self addMorphBack: suffixArrow.	fullBounds _ nil.	self extent: self fullBounds extent! !!TileMorph methodsFor: 'arrows' stamp: 'tk 8/16/2000 08:59'!couldRetract	"See if it makes sense to retract this tile and the op before it.  Return the phrase that gets retracted, or nil if not allowed."	| phrase pad |	(phrase _ self ownerThatIsA: PhraseTileMorph) ifNil: [^ nil].	(pad _ phrase ownerThatIsA: TilePadMorph) ifNil: [^ nil].	(phrase firstSubmorph "goodPad") type == pad type ifFalse: [		phrase submorphs size < 3 ifFalse: [^ nil].	"types should have matched"		"Go up a level"		(phrase _ pad ownerThatIsA: PhraseTileMorph) ifNil: [^ nil].		(pad _ phrase ownerThatIsA: TilePadMorph) ifNil: [^ nil].		(phrase firstSubmorph "goodPad") type == pad type ifFalse: [^ nil].		].	^ phrase! !!TileMorph methodsFor: 'arrows' stamp: 'tk 8/16/2000 10:37'!deleteLastTwoTiles	"Remove the current suffix (last two tiles) in this line of tiles"	| phrase pad goodPad |	(phrase _ self couldRetract) ifNil: [^ self].	pad _ phrase ownerThatIsA: TilePadMorph.	goodPad _ phrase firstSubmorph.	pad owner addMorphBack: goodPad.	pad delete.	(goodPad lastSubmorph respondsTo: #addSuffixArrow) 		ifTrue: [goodPad lastSubmorph addSuffixArrow; addRetractArrow]		ifFalse: [goodPad lastSubmorph lastSubmorph addSuffixArrow; addRetractArrow].! !!TileMorph methodsFor: 'private' stamp: 'tk 8/16/2000 10:09'!fullBounds	| pos hh |	"Set the position of all my submorphs.  Compute my bounds.  Caller must call layoutChanged or set fullBounds to nil."	fullBounds ifNil: [		pos _ self topLeft copy + (2@0).		self submorphsDo: [:sub | 			hh _ nil.			sub == upArrow ifTrue: [				hh _ 2.				sub privateBounds: (pos + (0@hh) extent: sub extent).				pos _ sub right + 2 @ pos y.		"2 pixels spacing on right"				].			sub == downArrow ifTrue: [				hh _ -10.	"flag"				sub align: sub topLeft					with: pos + (0 @ (upArrow height+3)).				"do not change pos, so align vertically"				].			hh ifNil: ["normal case"				hh _ (self class defaultH - sub height) // 2.	"center in Y"				sub privateBounds: (pos + (0@hh) extent: sub extent).				pos _ sub right + 2 @ pos y.		"2 pixels spacing on right"				]].		bounds _ bounds topLeft corner: pos + (0 @ self class defaultH).		fullBounds _ bounds.		].	"super fullBounds."	owner class == TilePadMorph ifTrue: [		"owner privateFullBounds: bounds."		owner bounds: bounds].	^ fullBounds! !!TilePadMorph methodsFor: 'miscellaneous' stamp: 'tk 8/16/2000 10:01'!lastTile	"The tile that might get an extension arrow"	^ self lastSubmorph lastTile! !!TilePadMorph methodsFor: 'mouse' stamp: 'tk 8/16/2000 10:02'!acceptDroppingMorph: aMorph event: evt	| editor wasPossessive |	wasPossessive _ submorphs size > 0 and: [submorphs first isPossessive].	self prepareToUndoDropOf: aMorph.	self removeAllMorphs.	aMorph position: self position.	self addMorph: aMorph.	wasPossessive ifTrue: [aMorph bePossessive].	aMorph lastTile addRetractArrow.	"if can"	(editor _ self topEditor) ifNotNil: [editor install]! !"Postscript:Force all EToy tiles to re-lay themselves out.  Tiles do not have to be lifted manually to get their new layout properties."TileMorph allSubInstancesDo: [:tm | tm layoutChanged].!