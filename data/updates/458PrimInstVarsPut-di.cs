'From Squeak 2.3 beta of Nov 25, 1998 on 5 December 1998 at 12:59:33 pm'!"Change Set:		PrimInstVarsPutDate:			1 December 1998Author:			Dan IngallsThis changeSet defines a new primitive (#255) that will primitively store any number of arguments directly into instVars without activating or running bytecodes.It also includes appropriate protocol in Compiled method and other classes to support printing of bytecodes and decompilation.The generation of quick methods by the compiler is disabled until the corresponding VM is in use.NOTE: These changes were developed together with several others and so may not work in isolation."!!CompiledMethod methodsFor: 'testing' stamp: 'di 12/4/1998 13:00'!isQuick	"Answer whether the receiver is a quick return (of self or of an instance 	variable)."	^ self primitive between: 255 and: 519! !!CompiledMethod methodsFor: 'testing' stamp: 'di 12/4/1998 13:01'!isQuickStore	"Answer whether the receiver is a quick of args into instance variables."	^ self primitive = 255! !!CompiledMethod methodsFor: 'printing' stamp: 'di 12/4/1998 13:25'!symbolic	"Answer a String that contains a list of all the byte codes in a method 	with a short description of each." 	| aStream |	self isQuick ifTrue: 		[self isReturnSpecial ifTrue:			[^ 'Quick return ' , (#('self' 'true' 'false' 'nil' '-1' '0' '1' '2')									at: self primitive - 255)].		self isQuickStore ifTrue:			[^ 'Quick store into fields ' , self storeOffsets reversed printString , ' (0-based)'].		^ 'Quick return field ' , self returnField printString , ' (0-based)'].	aStream _ WriteStream on: (String new: 1000).	self printPrimitiveOn: aStream.	(InstructionPrinter on: self) printInstructionsOn: aStream.	^aStream contents! !!CompiledMethod methodsFor: 'scanning' stamp: 'di 12/4/1998 14:41'!storeOffsets	"This method returns an array of offsets for storing args into instVars.	If the method does anything else, then an empty array is returned."	| scanner storeOffsets i loadOffsets k orderedOffsets seekLoad type offset byte2 type2 offset2 |	self isQuick ifTrue:		[self isQuickStore			ifTrue: [^ (0 to: self numArgs-1) collect:						[:j | ((self literalAt: j//4+1) bitShift: j\\4*-8) bitAnd: 16rFF]]			ifFalse: [^ Array new]].	(self numLiterals > 0 or: [self numArgs = 0]) ifTrue: [^ Array new].	"We are looking for the pattern {loadArg , storeInst} * , returnSelf"	"seekLoad is true when we want a load (or return),			and false when we want a store"	"The offsets will be accumulated in loadOffsets and storeOffsets"	loadOffsets _ OrderedCollection new.	storeOffsets _ OrderedCollection new.	scanner _ InstructionStream on: self.	seekLoad _ true.	scanner scanFor:		[:instr | 		type _ instr // 16.  		offset _ instr \\ 16.  		seekLoad		ifTrue: ["Match a loadArg"				type = 1 "short load temp"				ifTrue: [loadOffsets addLast: offset.						seekLoad _ false]				ifFalse: [instr = 120 ifTrue: ["returnSelf"]									ifFalse: [^ Array new "no match"]]]		ifFalse: ["Match a storeInst"				(type = 6 and: [offset < 8]) "short store ivar"				ifTrue: [storeOffsets addLast: offset.  seekLoad _ true]				ifFalse: [(type = 8 and: [offset between: 1 and: 2]) "extended stores"						ifTrue: [byte2 _ scanner followingByte.								type2 _ byte2 // 64.								offset2 _ byte2 \\ 64.								type2 = 0								ifTrue: [storeOffsets addLast: offset2.										seekLoad _ true]								ifFalse: [^ Array new "no match"]]						ifFalse: [^ Array new "no match"]]].		false "means keep scanning"].	storeOffsets isEmpty ifTrue: [^ Array new].  "Duh"	"If any args are not stored, they must be assigned a store offset	that will be overwritten by the last arg to be stored (which is the leftmost)."	i _ loadOffsets indexOf: 0.	i = 0 ifTrue:[^ Array new].	k _ storeOffsets at: i.  "this will be assigned below if necessary"	"Now we have to order the store offsets in the (reverse) order of the args"	orderedOffsets _ OrderedCollection new.	self numArgs to: 1 by: -1 do:		[:j | i _ loadOffsets indexOf: j-1.		orderedOffsets addLast: (i = 0 ifTrue: [k]									ifFalse: [storeOffsets at: i])].	^ orderedOffsets! !!CompiledMethod methodsFor: 'scanning' stamp: 'di 12/4/1998 13:30'!writesField: field 	"Answer whether the receiver stores into the instance variable indexed 	by the argument."	self isQuick ifTrue:		[self isQuickStore ifTrue: [^ self storeOffsets includes: field-1].		^ false].	field <= 8 ifTrue:		[^ (self scanFor: 96 + field - 1) or: [self scanLongStore: field - 1]].	field <= 64 ifTrue:		[^ self scanLongStore: field - 1].	^ self scanVeryLongStore: 160 offset: field - 1! !!CompiledMethod class methodsFor: 'class initialization' stamp: 'di 12/4/1998 14:41'!installQuickStores  "CompiledMethod installQuickStores"	"This method will blithely overwrite initialization methods with the	corresponding new quickStoreInstVars methods.  For testing only"	| m offsets quickMethod |	Smalltalk allBehaviorsDo:	[:c | c selectors do:		[:s | m _ c compiledMethodAt: s.		(offsets _ m storeOffsets) size > 0 ifTrue:			[quickMethod _ CompiledMethod toStoreInstVars: offsets.			quickMethod setSourcePointer: m sourcePointer.			c addSelector: s withMethod: quickMethod]]]"  Smalltalk browseAllSelect:		[:m | (m numLiterals = 0) & (m isQuick not) & (m numArgs > 0)]  Point compile: 'a: xPoint b: yPoint x _ xPoint. y _ yPoint' classified: 'test'  Point new a: 0 b: 1	| m offsets quickMethod c s |	c _ Point. s _ #a:b:.	m _ c compiledMethodAt: s.	(offsets _ m storeOffsets) size = 0 ifTrue: [self halt].	quickMethod _ CompiledMethod toStoreInstVars: offsets.	c addSelector: s withMethod: quickMethod."" | p | p _ 1@1. Time millisecondsToRun: [1 to: 100000 do: [:i | p setX: 0 setY: 1]] 213 | p | p _ 1@1. Time millisecondsToRun: [1 to: 100000 do: [:i | p a: 0 b: 1]] 135"! !!CompiledMethod class methodsFor: 'instance creation' stamp: 'di 12/4/1998 14:19'!toStoreInstVars: offsets	"Answer an instance of me that is a quick store of instvars."	| nLits method base lit |	nLits _ offsets size+3//4.	method _ self newBytes: 0 nArgs: offsets size nTemps: offsets size nStack: 0 nLits: nLits primitive: 255.	1 to: nLits do:		[:j | base _ j-1*4.		lit _ 0.		1 to: (4 min: offsets size - base) do:			[:i | lit _ lit bitOr: ((offsets at: base+i) bitShift: i-1*8)].		method literalAt: j put: lit].	^ method! !!Decompiler methodsFor: 'private' stamp: 'di 12/4/1998 14:28'!quickMethod	| offsets |	method isReturnSpecial		ifTrue: [^ constructor codeBlock:				(Array with: (constTable at: method primitive - 255)) returns: true].	method isReturnField		ifTrue: [^ constructor codeBlock:				(Array with: (constructor codeInst: method returnField)) returns: true].	method isQuickStore		ifTrue: [offsets _ method storeOffsets reversed.				^ constructor codeBlock:					((1 to: method numArgs) collect:						[:i | constructor							codeAssignTo: (constructor codeInst: (offsets at: i))							value: (tempVars at: i)])					", (constTable first)"				returns: false].	self error: 'improper short method'! !!Interpreter methodsFor: 'quick primitives' stamp: 'di 12/1/1998 15:10'!primitiveInstVarsPutFromStack	| rcvr offsetBits |	rcvr _ self stackValue: argumentCount.	"Mark dirty so stores below can be unchecked"	(rcvr < youngStart) ifTrue: [ self beRootIfOld: rcvr ].	0 to: argumentCount-1 do:		[:i | (i bitAnd: 3) = 0 ifTrue:			[offsetBits _ self positive32BitValueOf: (self literal: i//4 ofMethod: newMethod)].		self storePointerUnchecked: (offsetBits bitAnd: 16rFF) ofObject: rcvr						withValue: (self stackValue: i).		offsetBits _ offsetBits >> 8].	self pop: argumentCount! !!Interpreter class methodsFor: 'initialization' stamp: 'di 11/27/1998 12:39'!initializePrimitiveTable	"This table generates a C switch statement for primitive dispatching."	"NOTE: The real limit here is 2047, but our C compiler currently barfs over 700"	MaxPrimitiveIndex _ 700.	PrimitiveTable _ Array new: MaxPrimitiveIndex + 1.	self table: PrimitiveTable from: 	#(	"Integer Primitives (0-19)"		(0 primitiveFail)		(1 primitiveAdd)		(2 primitiveSubtract)		(3 primitiveLessThan)		(4 primitiveGreaterThan)		(5 primitiveLessOrEqual)		(6 primitiveGreaterOrEqual)		(7 primitiveEqual)		(8 primitiveNotEqual)		(9 primitiveMultiply)		(10 primitiveDivide)		(11 primitiveMod)		(12 primitiveDiv)		(13 primitiveQuo)		(14 primitiveBitAnd)		(15 primitiveBitOr)		(16 primitiveBitXor)		(17 primitiveBitShift)		(18 primitiveMakePoint)		(19 primitiveFail)					"Guard primitive for simulation -- *must* fail"		"LargeInteger Primitives (20-39)"		"32-bit logic is aliased to Integer prims above"		(20 39 primitiveFail)		"Float Primitives (40-59)"		(40 primitiveAsFloat)		(41 primitiveFloatAdd)		(42 primitiveFloatSubtract)		(43 primitiveFloatLessThan)		(44 primitiveFloatGreaterThan)		(45 primitiveFloatLessOrEqual)		(46 primitiveFloatGreaterOrEqual)		(47 primitiveFloatEqual)		(48 primitiveFloatNotEqual)		(49 primitiveFloatMultiply)		(50 primitiveFloatDivide)		(51 primitiveTruncated)		(52 primitiveFractionalPart)		(53 primitiveExponent)		(54 primitiveTimesTwoPower)		(55 primitiveSquareRoot)		(56 primitiveSine)		(57 primitiveArctan)		(58 primitiveLogN)		(59 primitiveExp)		"Subscript and Stream Primitives (60-67)"		(60 primitiveAt)		(61 primitiveAtPut)		(62 primitiveSize)		(63 primitiveStringAt)		(64 primitiveStringAtPut)		(65 primitiveNext)		(66 primitiveNextPut)		(67 primitiveAtEnd)		"StorageManagement Primitives (68-79)"		(68 primitiveObjectAt)		(69 primitiveObjectAtPut)		(70 primitiveNew)		(71 primitiveNewWithArg)		(72 primitiveFail)					"Blue Book: primitiveBecome"		(73 primitiveInstVarAt)		(74 primitiveInstVarAtPut)		(75 primitiveAsOop)		(76 primitiveFail)					"Blue Book: primitiveAsObject"		(77 primitiveSomeInstance)		(78 primitiveNextInstance)		(79 primitiveNewMethod)		"Control Primitives (80-89)"		(80 primitiveFail)   					"Blue Book:  primitiveBlockCopy"		(81 primitiveValue)		(82 primitiveValueWithArgs)		(83 primitivePerform)		(84 primitivePerformWithArgs)		(85 primitiveSignal)		(86 primitiveWait)		(87 primitiveResume)		(88 primitiveSuspend)		(89 primitiveFlushCache)		"Input/Output Primitives (90-109)"		(90 primitiveMousePoint)		(91 primitiveFail)					"Blue Book: primitiveCursorLocPut"		(92 primitiveFail)					"Blue Book: primitiveCursorLink"		(93 primitiveInputSemaphore)		(94 primitiveFail)					"Blue Book: primitiveSampleInterval"		(95 primitiveInputWord)		(96 primitiveCopyBits)		(97 primitiveSnapshot)		(98 primitiveFail)					"Blue Book: primitiveTimeWordsInto"		(99 primitiveFail)					"Blue Book: primitiveTickWordsInto"		(100 primitiveFail)					"Blue Book: primitiveSignalAtTick"		(101 primitiveBeCursor)		(102 primitiveBeDisplay)		(103 primitiveScanCharacters)		(104 primitiveDrawLoop)		(105 primitiveStringReplace)		(106 primitiveScreenSize)		(107 primitiveMouseButtons)		(108 primitiveKbdNext)		(109 primitiveKbdPeek)		"System Primitives (110-119)"		(110 primitiveEquivalent)		(111 primitiveClass)		(112 primitiveBytesLeft)		(113 primitiveQuit)		(114 primitiveExitToDebugger)		(115 primitiveFail)					"Blue Book: primitiveOopsLeft"		(116 primitiveFail)		(117 primitiveExternalCall)		(118 primitiveDoPrimitiveWithArgs)		(119 primitiveFlushCacheSelective)		"Miscellaneous Primitives (120-127)"		(120 primitiveFail)		(121 primitiveImageName)		(122 primitiveNoop)					"Blue Book: primitiveImageVolume"		(123 primitiveFail)		(124 primitiveLowSpaceSemaphore)		(125 primitiveSignalAtBytesLeft)		"Squeak Primitives Start Here"		"Squeak Miscellaneous Primitives (128-149)"		(126 primitiveDeferDisplayUpdates)		(127 primitiveShowDisplayRect)		(128 primitiveArrayBecome)		(129 primitiveSpecialObjectsOop)		(130 primitiveFullGC)		(131 primitiveIncrementalGC)		(132 primitiveObjectPointsTo)		(133 primitiveSetInterruptKey)		(134 primitiveInterruptSemaphore)		(135 primitiveMillisecondClock)		(136 primitiveSignalAtMilliseconds)		(137 primitiveSecondsClock)		(138 primitiveSomeObject)		(139 primitiveNextObject)		(140 primitiveBeep)		(141 primitiveClipboardText)		(142 primitiveVMPath)		(143 primitiveShortAt)		(144 primitiveShortAtPut)		(145 primitiveConstantFill)		(146 primitiveReadJoystick)		(147 primitiveWarpBits)		(148 primitiveClone)		(149 primitiveGetAttribute)		"File Primitives (150-169)"		(150 primitiveFileAtEnd)		(151 primitiveFileClose)		(152 primitiveFileGetPosition)		(153 primitiveFileOpen)		(154 primitiveFileRead)		(155 primitiveFileSetPosition)		(156 primitiveFileDelete)		(157 primitiveFileSize)		(158 primitiveFileWrite)		(159 primitiveFileRename)		(160 primitiveDirectoryCreate)		(161 primitiveDirectoryDelimitor)		(162 primitiveDirectoryLookup)		(163 168 primitiveFail)		(169 primitiveDirectorySetMacTypeAndCreator)		"Sound Primitives (170-199)"		(170 primitiveSoundStart)		(171 primitiveSoundStartWithSemaphore)		(172 primitiveSoundStop)		(173 primitiveSoundAvailableSpace)		(174 primitiveSoundPlaySamples)		(175 primitiveSoundPlaySilence)		"obsolete; will be removed in the future"		(176 primWaveTableSoundmixSampleCountintostartingAtpan)		(177 primFMSoundmixSampleCountintostartingAtpan)		(178 primPluckedSoundmixSampleCountintostartingAtpan)		(179 primSampledSoundmixSampleCountintostartingAtpan)		(180 primFMSoundmixSampleCountintostartingAtleftVolrightVol)		(181 primPluckedSoundmixSampleCountintostartingAtleftVolrightVol)		(182 primSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(183 primReverbSoundapplyReverbTostartingAtcount)		(184 primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol)		(185 188 primitiveFail)		(189 primitiveSoundInsertSamples)		(190 primitiveSoundStartRecording)		(191 primitiveSoundStopRecording)		(192 primitiveSoundGetRecordingSampleRate)		(193 primitiveSoundRecordSamples)		(194 primitiveSoundSetRecordLevel)		(195 199 primitiveFail)		"Networking Primitives (200-229)"		(200 primitiveInitializeNetwork)		(201 primitiveResolverStartNameLookup)		(202 primitiveResolverNameLookupResult)		(203 primitiveResolverStartAddressLookup)		(204 primitiveResolverAddressLookupResult)		(205 primitiveResolverAbortLookup)		(206 primitiveResolverLocalAddress)		(207 primitiveResolverStatus)		(208 primitiveResolverError)		(209 primitiveSocketCreate)		(210 primitiveSocketDestroy)		(211 primitiveSocketConnectionStatus)		(212 primitiveSocketError)		(213 primitiveSocketLocalAddress)		(214 primitiveSocketLocalPort)		(215 primitiveSocketRemoteAddress)		(216 primitiveSocketRemotePort)		(217 primitiveSocketConnectToPort)		(218 primitiveSocketListenOnPort)		(219 primitiveSocketCloseConnection)		(220 primitiveSocketAbortConnection)		(221 primitiveSocketReceiveDataBufCount)		(222 primitiveSocketReceiveDataAvailable)		(223 primitiveSocketSendDataBufCount)		(224 primitiveSocketSendDone)		(225 229 primitiveFail)		"Other Primitives (230-249)"		(230 primitiveRelinquishProcessor)		(231 primitiveForceDisplayUpdate)		(232 primitiveFormPrint)		(233 primitiveSetFullScreen)		(234 primBitmapdecompressfromByteArrayat)		(235 primStringcomparewithcollated)		(236 primSampledSoundconvert8bitSignedFromto16Bit)		(237 primBitmapcompresstoByteArray)		(238 primitiveSerialPortOpen)		(239 primitiveSerialPortClose)		(240 primitiveSerialPortWrite)		(241 primitiveSerialPortRead)		(242 primitiveFail)		(243 primStringtranslatefromtotable)		(244 primStringfindFirstInStringinSetstartingAt)		(245 primStringindexOfAsciiinStringstartingAt)		(246 primStringfindSubstringinstartingAtmatchTable)		(247 249 primitiveFail)		"VM Implementor Primitives (250-255)"		(250 clearProfile)		(251 dumpProfile)		(252 startProfiling)		(253 stopProfiling)		(254 primitiveVMParameter)		(255 primitiveInstVarsPutFromStack)		"Quick Push Const Methods"		(256 primitivePushSelf)		(257 primitivePushTrue)		(258 primitivePushFalse)		(259 primitivePushNil)		(260 primitivePushMinusOne)		(261 primitivePushZero)		(262 primitivePushOne)		(263 primitivePushTwo)		"Quick Push Const Methods"		(264 519 primitiveLoadInstVar)		"MIDI Primitives (520-539)"		(520 primitiveFail)		(521 primitiveMIDIClosePort)		(522 primitiveMIDIGetClock)		(523 primitiveMIDIGetPortCount)		(524 primitiveMIDIGetPortDirectionality)		(525 primitiveMIDIGetPortName)		(526 primitiveMIDIOpenPort)		(527 primitiveMIDIParameterGetOrSet)		(528 primitiveMIDIRead)		(529 primitiveMIDIWrite)		(530 539 primitiveFail)  "reserved for extended MIDI primitives"		"Experimental Asynchrous File Primitives"		(540 primitiveAsyncFileClose)		(541 primitiveAsyncFileOpen)		(542 primitiveAsyncFileReadResult)		(543 primitiveAsyncFileReadStart)		(544 primitiveAsyncFileWriteResult)		(545 primitiveAsyncFileWriteStart)		"Unassigned Primitives"		(546 700 primitiveFail)).! !!MethodNode methodsFor: 'code generation' stamp: 'di 12/5/1998 12:58'!generate: trailer	"The receiver is the root of a parse tree. Answer a CompiledMethod. The 	argument, trailer, is the references to the source code that is stored with 	every CompiledMethod."	| blkSize nLits stack strm nArgs offsets quickMethod |	self generateIfQuick: 		[:method | 		1 to: trailer size do: [:i | method at: method size - trailer size + i put: (trailer at: i)].		method cacheTempNames: self tempNames.		^method].	nArgs _ arguments size.	blkSize _ block sizeForEvaluatedValue: encoder.	encoder maxTemp > 31		ifTrue: [^self error: 'Too many temporary variables'].		literals _ encoder allLiterals.	(nLits _ literals size) > 255		ifTrue: [^self error: 'Too many literals referenced'].	method _ CompiledMethod	"Dummy to allocate right size"				newBytes: blkSize				nArgs: nArgs				nTemps: encoder maxTemp				nStack: 0				nLits: nLits				primitive: primitive.	strm _ ReadWriteStream with: method.	strm position: method initialPC - 1.	stack _ ParseStack new init.	block emitForEvaluatedValue: stack on: strm.	stack position ~= 1 ifTrue: [^self error: 'Compiler stack discrepancy'].	strm position ~= (method size - trailer size) 		ifTrue: [^self error: 'Compiler code size discrepancy'].	method needsFrameSize: stack size.	1 to: nLits do: [:lit | method literalAt: lit put: (literals at: lit)].	1 to: trailer size do: [:i | method at: method size - trailer size + i put: (trailer at: i)].	nLits = 0 &false "**disabled until new VM**" ifTrue:		["Check for quick store instfields case"		(offsets _ method storeOffsets) size > 0 ifTrue:			[quickMethod _ CompiledMethod toStoreInstVars: offsets.			quickMethod setSourcePointer: method sourcePointer.			method _ quickMethod]].	method cacheTempNames: self tempNames.	^ method! !!MethodNode methodsFor: 'printing' stamp: 'di 12/4/1998 14:29'!printOn: aStream 	| args |	precedence = 1		ifTrue: 			[aStream nextPutAll: self selector]		ifFalse: 			[args _ ReadStream on: arguments.			self selector keywords do: 				[:s | 				aStream nextPutAll: s; space.				aStream withAttribute: (TextColor color: Color green)					do: [aStream nextPutAll: args next key].				aStream space]].	comment == nil ifFalse: 			[aStream crtab: 1.			self printCommentOn: aStream indent: 1].	temporaries size > 0 ifTrue: 			[aStream crtab: 1.			aStream nextPutAll: '| '.			aStream withAttribute: (TextColor color: Color green)				do: [temporaries do: 					[:temp | 					aStream nextPutAll: temp key.					aStream space]].			aStream nextPut: $|].	primitive > 0 ifTrue:			[(primitive between: 255 and: 519) ifFalse:  " Dont decompile <prim> for, eg, ^ self "				[aStream crtab: 1.				self printPrimitiveOn: aStream]].	aStream crtab: 1.	^block printStatementsOn: aStream indent: 0! !