'From Squeak 2.3 beta of Nov 25, 1998 on 1 December 1998 at 10:56:57 am'!"Change Set:		tinyTweaks-swDate:			1 December 1998Author:			Scott Wallace1.  When you cancel out of a SystemWindow relabel, the window's label is no longer replaced with an empty string.2.  Resist the temptation to put up vacuous reframe handles for collapsed SystemWindows.3.  Integer asStringWithCommas now works correctly with negative integers."!!Integer methodsFor: 'printing' stamp: 'sw 11/24/1998 14:53'!asStringWithCommas	"123456789 asStringWithCommas"	"-123456789 asStringWithCommas"	| digits |	digits _ self abs printString.	^ String streamContents:		[:strm | 		self sign = -1 ifTrue: [strm nextPut: $-].		1 to: digits size do: 			[:i | strm nextPut: (digits at: i).			(i < digits size and: [(i - digits size) \\ 3 = 0])				ifTrue: [strm nextPut: $,]]]! !!SystemWindow methodsFor: 'label' stamp: 'sw 11/30/1998 15:19'!relabel	| newLabel |	newLabel _ FillInTheBlank request: 'New label for this window'						initialAnswer: labelString.	newLabel size > 0 ifTrue:		[(model windowReqNewLabel: newLabel)			ifTrue: [self setLabel: newLabel]]! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'sw 11/30/1998 15:49'!spawnReframeHandle: event	"The mouse has crossed a pane border.  Spawn a reframe handle."	| resizer localPt pt ptName newBounds |	owner ifNil: [^ self  "Spurious mouseLeave due to delete"].	(self isActive not or: [self isCollapsed]) 		ifTrue:  [^ self].	paneMorphs do: [:p | ((p fullBounds insetBy: 1) containsPoint: event cursorPoint)			ifTrue: [^ self  "Don't activate resizer if in a scrollbar"]].	pt _ event cursorPoint.	self bounds forPoint: pt closestSideDistLen:		[:side :dist :len |  "Check for window side adjust"		dist <= 2  ifTrue: [ptName _ side]].	ptName ifNil:		["Check for pane border adjust"		^ self spawnPaneFrameHandle: event].	#(topLeft bottomRight bottomLeft topRight) do:		[:corner |  "Check for window corner adjust"		(pt dist: (self bounds perform: corner)) < 20 ifTrue: [ptName _ corner]].	resizer _ NewHandleMorph new followHand: event hand		forEachPointDo:			[:p | localPt _ self pointFromWorld: p.			ptName = #top ifTrue: [newBounds _ self bounds withTop: localPt y].			ptName = #bottom ifTrue: [newBounds _ self bounds withBottom: localPt y].			ptName = #left ifTrue: [newBounds _ self bounds withLeft: localPt x].			ptName = #right ifTrue: [newBounds _ self bounds withRight: localPt x].			ptName = #topLeft ifTrue: [newBounds _ localPt corner: bounds bottomRight].			ptName = #bottomRight ifTrue: [newBounds _ bounds topLeft corner: localPt].			ptName = #bottomLeft ifTrue: [newBounds _ (bounds withBottom: localPt y) withLeft: localPt x].			ptName = #topRight ifTrue: [newBounds _ (bounds withTop: localPt y) withRight: localPt x].			newBounds extent > (60@40) ifTrue: [self bounds: newBounds]]		lastPointDo: [:lastPoint | ].	event hand world addMorph: resizer.	resizer startStepping! !