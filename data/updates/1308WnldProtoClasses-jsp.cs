'From Squeak 2.4b of April 23, 1999 on 8 July 1999 at 11:55:29 pm'!"Change Set:		WnldProtoClassesDate:			8 July 1999Author:			Jeff PierceChange the creation process for both lights and cameras so that both are created using prototype classes.  Among other things, this means that becomeChild: works correctly when a camera or light is involved.  Name changes also occur for these objects when reparenting just like other Actors now.  This change set also modifies change logging for lights so that protoclasses aren't logged."!!Wonderland methodsFor: 'initialize-reset-release' stamp: 'jsp 7/8/1999 23:33'!initialize	"This method initializes the Wonderland."	| ground |	"Initialize the list of actor UniClasses"	actorClassList _ OrderedCollection new.	"Initialize the shared mesh and texture directories"	sharedMeshDict _ Dictionary new.	sharedTextureDict _ Dictionary new.	"Initialize this Wonderland's shared namespace"	myNamespace _ WonderlandConstants copy.	"Create the Wonderland's scheduler"	myScheduler _ Scheduler new.	myNamespace at: 'scheduler' put: myScheduler.	"Create the undo stack for this Wonderland."	myUndoStack _ WonderlandUndoStack new.	"The scene object is the root of the object tree - all objects in the Wonderland are children (directly or indirectly) of the scene. "	sceneObject _ WonderlandScene newFor: self.	myNamespace at: 'scene' put: sceneObject.	"Create a script editor for this Wonderland"	self makeScriptEditor.	"Create some default objects"	ground _ self makeActor.	ground setMesh: (WonderlandConstants at: 'groundMesh').	ground setTexturePointer: (WonderlandConstants at: 'groundTexture').	ground becomePart.	ground setColor: {0.2902. 0.8000. 0.0000} duration: rightNow.	ground setName: 'ground'.	myNamespace at: 'ground' put: ground.	"Initialize the light list and create a default light"	lightList _ OrderedCollection new.	self makeLight.	lightList last moveTo: {0. 2. 0} duration: rightNow.		"Create the default camera"	cameraList _ OrderedCollection new.	defaultCamera _ self makeCamera.	"Clean out the Undo stack - we don't want people undoing the init stuff"	myUndoStack reset.	"Throw this Wonderland into the shared namespace"	myNamespace at: 'w' put: self.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 7/8/1999 23:26'!makeActor	"Creates a new actor without any geometry"	^ self makeActorNamed: 'unnamed'.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 7/8/1999 23:31'!makeCamera	"Add a new camera to the Wonderland"	| newClass newCamera name windowName |	newClass _ WonderlandCamera newUniqueClassInstVars: '' classInstVars: ''.	newCamera _ newClass createFor: self.	actorClassList addLast: newClass.	name _ self uniqueNameFrom: 'camera'.	newCamera setName: name.	myNamespace at: name put: newCamera.	windowName _ self uniqueNameFrom: 'cameraWindow'.	myNamespace at: windowName put: (newCamera getMorph).	cameraList addLast: newCamera.	scriptEditor updateActorBrowser.	"Add an undo action to remove this camera"	myUndoStack push: (UndoAction new: [  cameraList remove: newCamera.											newCamera removeFromScene.											myNamespace removeKey: name ifAbsent: [].											myNamespace removeKey: windowName.											newCamera release.											scriptEditor updateActorBrowser ]).	^ newCamera.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 7/8/1999 23:50'!makeLight: lightType	"Create a light of the specified type and add it to the Wonderland"	| newClass theLight name |	"Make sure the user gave us a type of light"	[ WonderlandVerifier VerifyLight: lightType ]		ifError: [ :msg :rcvr |			self reportErrorToUser:				'Squeak could not determine the type of light to create because ', msg.			^ nil ].	"The user gave us a valid type type, so proceed"	(lightType = ambient)		ifTrue: [ newClass _ WonderlandAmbientLight newUniqueClassInstVars: ''									classInstVars: ''.					theLight _ newClass createFor: self. ]		ifFalse: [ (lightType = positional)			ifTrue: [ newClass _ WonderlandPositionalLight newUniqueClassInstVars: ''										classInstVars: ''.					theLight _ newClass createFor: self. ]			ifFalse: [ (lightType = directional)				ifTrue: [ newClass _ WonderlandDirectionalLight newUniqueClassInstVars: ''										classInstVars: ''.						theLight _ newClass createFor: self. ]				ifFalse: [ newClass _ WonderlandSpotLight newUniqueClassInstVars: ''										classInstVars: ''.						theLight _ newClass createFor: self. ]					]				].	actorClassList addLast: newClass.	name _ self uniqueNameFrom: 'light'.	theLight setName: name.	myNamespace at: name put: theLight.	scriptEditor updateActorBrowser.	lightList addLast: theLight.	^ theLight.! !!WonderlandAmbientLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:44'!acceptsLoggingOfCompilation	^ self == WonderlandAmbientLight.! !!WonderlandAmbientLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:45'!wantsChangeSetLogging	^ self == WonderlandAmbientLight.! !!WonderlandDirectionalLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:45'!acceptsLoggingOfCompilation	^ self == WonderlandDirectionalLight.! !!WonderlandDirectionalLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:45'!wantsChangeSetLogging	^ self == WonderlandDirectionalLight.! !!WonderlandPositionalLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:45'!acceptsLoggingOfCompilation	^ self == WonderlandPositionalLight.! !!WonderlandPositionalLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:45'!wantsChangeSetLogging	^ self == WonderlandPositionalLight.! !!WonderlandSpotLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:46'!acceptsLoggingOfCompilation	^ self == WonderlandSpotLight.! !!WonderlandSpotLight class methodsFor: 'change logging' stamp: 'jsp 7/8/1999 23:46'!wantsChangeSetLogging	^ self == WonderlandSpotLight.! !