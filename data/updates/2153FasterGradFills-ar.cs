'From Squeak2.8alpha of 16 February 2000 [latest update: #2151] on 16 May 2000 at 8:52:00 pm'!"Change Set:		FasterGradFills-arDate:			16 May 2000Author:			Andreas RaabAlthough basically obsolete GradientFillMorph is still used in a variety of places. So let's be kind an speed up the (hopefully few) users of it."!!GradientFillMorph commentStamp: 'ar 5/16/2000 20:46' prior: 0!Class GradientFillMorph is obsolete. For getting gradient fills use a BorderedMorph with an appropriate fill style, e.g.,	| morph fs |	morph _ BorderedMorph new.	fs _ GradientFillStyle ramp: {0.0 -> Color red. 1.0 -> Color green}.	fs origin: morph bounds center.	fs direction: (morph bounds width // 2) @ 0.	fs radial: true.	morph fillStyle: fs.	World primaryHand attachMorph: morph.Here's the old (obsolete) comment:GradientFills cache an array of bitpatterns for the colors across their rectangle.  It costs a bit of space, but makes display fast enough to eschew the use of a bitmap.  The array must be recomputed whenever the colors, dimensions or display depth change.!!GradientFillMorph methodsFor: 'drawing' stamp: 'ar 5/16/2000 20:49'!drawOn: aCanvas	"Note that this could run about 4 times faster if we got hold of	the canvas's port and just sent it copyBits with new coords and color" 	| style |	super drawOn: aCanvas.	(color isKindOf: Color) ifFalse: [^ self].  "An InfiniteForm, for example"	(color = Color transparent) ifTrue: [^ self].  "Skip the gradient attempts, which will drop into debugger"	color = fillColor2 ifTrue: [^ self].  "same color; no gradient"	"Check if we can use the cached gradient fill"	((self valueOfProperty: #cachedGradientColor1) = color 		and:[(self valueOfProperty: #cachedGradientColor2) = fillColor2])			ifTrue:[style _ self valueOfProperty: #cachedGradientFill].	style ifNil:[		style _ GradientFillStyle ramp: {0.0 -> color. 1.0 -> fillColor2}.		self setProperty: #cachedGradientColor1 toValue: color.		self setProperty: #cachedGradientColor2 toValue: fillColor2.		self setProperty: #cachedGradientFill toValue: style.	].	style origin: self position.	style direction: (gradientDirection == #vertical 		ifTrue:[0@self height] 		ifFalse:[self width@0]).	aCanvas fillRectangle: self innerBounds fillStyle: style.! !