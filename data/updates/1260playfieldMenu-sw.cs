'From Squeak 2.4c of May 10, 1999 on 21 June 1999 at 4:55:46 pm'!"Change Set:		playfieldMenu-swDate:			21 June 1999Author:			Scott WallaceConsiderable reworking of the playfield menu.*  Many items now use self-updating 'smart menu items' so that their wording always accurately reflects the current state.*  The playfield menu can now be persistent.*  Balloon help is provided for most items in the menu.*  Appropriate reactions are made when items are requested where they don't make sense in the current context, and where words of warning are needed.*  Some of the the items that are quite inappropriate for a World are filtered out when the menu is put up on behalf of a world.*  One disused option is removed, and several bugs are fixed.*  Application of the option for a playfield to show thumbnails now excludes the thumbnailing of inappropriate morph types."!!Morph methodsFor: 'thumbnail' stamp: 'sw 6/16/1999 11:29'!permitsThumbnailing	^ true! !!Morph methodsFor: 'thumbnail' stamp: 'sw 6/16/1999 11:34'!representativeNoTallerThan: maxHeight norWiderThan: maxWidth thumbnailHeight: thumbnailHeight	"Return a morph representing the receiver but which is no taller than aHeight.  If the receiver is already small enough, just return it, else return a MorphThumbnail companioned to the receiver, enforcing the maxWidth"	self permitsThumbnailing ifFalse: [^ self].	(self height <= maxHeight and: [self width <= maxWidth]) ifTrue: [^ self].	^ MorphThumbnail new extent: maxWidth @ (thumbnailHeight min: self height); morphRepresented: self! !!FlapTab methodsFor: 'access' stamp: 'sw 6/16/1999 11:29'!permitsThumbnailing	^ false! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/14/1999 15:30'!playfieldDo	"Build the playfield menu for the world."	self world playfieldOptionsMenu popUpAt: self position forHand: self! !!HandMorph methodsFor: 'world menu' stamp: 'sw 6/14/1999 16:05'!playfieldMenu	^ self world playfieldOptionsMenu! !!PasteUpMorph methodsFor: 'layout' stamp: 'sw 6/16/1999 08:50'!fixLayout	"Pack my submorphs into rows that fit within my width, if autoLineLayout is true."	| nextY i morphsForThisRow |	self autoLineLayout ifTrue:		[nextY _ bounds top + borderWidth.		i _ 1.		[i <= submorphs size] whileTrue:			[morphsForThisRow _ self rowMorphsStartingAt: i.			nextY _ self layoutRow: morphsForThisRow lastRowBase: nextY.			i _ i + morphsForThisRow size]]! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/16/1999 09:04'!addPlayfieldMenuItems: menu hand: aHandMorph	menu add: 'playfield options...' target: self action: #presentPlayfieldMenu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/21/1999 16:45'!autoExpansionString	^ (self hasProperty: #automaticPhraseExpansion)		ifTrue:			['stop auto-phrase-expansion']		ifFalse:			['start auto-phrase-expansion']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/21/1999 16:44'!playfieldOptionsMenu	| aMenu hasPalette isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'save on file...' action: #saveOnFile.	aMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	(self valueOfProperty: #classAndMethod) ifNotNil:		[aMenu add: 'broadcast as documentation' action: #saveDocPane].	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'].	(hasPalette _ self standardPalette ~~ nil) ifTrue:		[aMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing.		aMenu balloonTextForLastItem:  'governs whether, when an object is touched inside me, a viewer should automatically be launched for it in my associated palette.'].	aMenu addLine.	hasPalette ifTrue:		[aMenu add: 'clear palette area' action: #clearPaletteArea.		aMenu balloonTextForLastItem: 'Clear the contents of my associated standard palette'].	isWorld ifFalse:		[aMenu add: 'behave like a Holder' action: #becomeLikeAHolder.		aMenu balloonTextForLastItem: 'Set properties to make this object nicely set up to hold frames of a scripted animation.'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	presenter ifNil:		[aMenu add: 'make detachable' action: #makeDetachable.		aMenu balloonTextForLastItem: 'Allow this area to be separately governed by its own controls.'].	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'playfield options...'.	^ aMenu! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/16/1999 09:04'!presentPlayfieldMenu	self playfieldOptionsMenu popUpAt: self position forHand: self activeHand! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/16/1999 14:06'!becomeLikeAHolder	(self autoLineLayout and: [self indicateCursor])		ifTrue:			[^ self inform: 'This view is ALREADYbehaving like a holder, whichis to say, it is set to indicate thecursor and to have auto-line-layout.']. 	self behaveLikeHolder	! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/16/1999 14:06'!behaveLikeHolder 	self resizeToFit: true; autoLineLayout: true; indicateCursor: true;		fixLayout; layoutChanged	! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/16/1999 11:05'!setThumbnailHeight	|  reply |	(self hasProperty: #alwaysShowThumbnail) ifFalse:		[^ self inform: 'setting the thumbnail height is onlyapplicable when you are currentlyshowing thumbnails.'].	reply _ FillInTheBlank		request: 'New height for thumbnails? '		initialAnswer: self heightForThumbnails printString.	reply isEmpty ifTrue: [^ self].	reply _ reply asNumber.	(reply > 0 and: [reply <= 150]) ifFalse:		[^ self inform: 'Please be reasonable!!'].	self setProperty: #heightForThumbnails toValue: reply.	self updateSubmorphThumbnails! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/16/1999 09:06'!toggleIndicateCursor	indicateCursor _ self indicateCursor not.	self fixLayout.	self layoutChanged.	self changed.! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/16/1999 13:43'!toggleMouseOverHalos	(self wantsMouseOverHalos not and: [Preferences mouseOverHalosEnabled not])		ifTrue:			[^ self inform: 'Set the "mouseOverHalosEnabled" preferenceto true first -- as long as that preference isfalse, no mouseOver-halos will be shown,whatever the setting may be here.'].	wantsMouseOverHalos _ self wantsMouseOverHalos not! !!PasteUpMorph methodsFor: 'painting' stamp: 'sw 6/16/1999 11:16'!deleteBackgroundPainting	backgroundMorph		ifNotNil:			[backgroundMorph delete.			backgroundMorph _ nil]		ifNil:			[self inform: 'There is presently nobackground paintingto delete.']! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 6/16/1999 11:09'!makeDetachable	presenter		ifNil:			[self impartPrivatePresenter.			self borderWidth: 1;  borderColor: Color green darker]		ifNotNil:			[self inform: 'This view is ALREADY detachable']! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 6/21/1999 12:34'!roundUpStrays	self submorphsDo:		[:m |			((m hasProperty: #flap) or: [m isKindOf: FlapTab])				ifFalse:					[m goHome.					m isPlayfieldLike ifTrue: [m roundUpStrays]]]! !!StickySketchMorph methodsFor: 'as yet unclassified' stamp: 'sw 6/16/1999 11:32'!permitsThumbnailing	^ false! !PasteUpMorph removeSelector: #toggleResizeToFit!PasteUpMorph removeSelector: #resizeToFitString!"Postscript:"Utilities replaceMenuFlap.!