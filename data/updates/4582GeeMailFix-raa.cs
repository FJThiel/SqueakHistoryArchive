'From Squeak3.2alpha of 25 October 2001 [latest update: #4580] on 5 December 2001 at 11:21:40 am'!"Change Set:		GeeMailFixDate:			5 December 2001Author:			Bob ArningSome fixes for GeeMail to cooperate better with the revamped TextMorph. Especially important when using columns."!!AlansTextPlusMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/5/2001 11:15'!makeBookStyle: nColumns	| all totalWidth second columnWidth currY prev columnHeight currX currColumn pageBreakRectangles r rm columnGap pageGap starter |	pageBreakRectangles _ OrderedCollection new.	all _ thePasteUp allTextPlusMorphs.	all size = 1 ifFalse: [^self].	Cursor wait show.	starter _ prev _ all first.	totalWidth _ self width - 16.	columnGap _ 32.	pageGap _ 16.	columnWidth _ totalWidth - (columnGap * (nColumns - 1)) // nColumns.	columnHeight _ self height - 12.	currY _ 4.	currX _ 4.	currColumn _ 1.	prev		position: currX@currY;		width: columnWidth.	[		second _ prev makeSuccessorMorph.		thePasteUp addMorphBack: second.		prev 			setProperty: #autoFitContents toValue: false;			height: columnHeight.		(currColumn _ currColumn + 1) <= nColumns ifTrue: [			currX _ currX + columnWidth + columnGap.		] ifFalse: [			r _ 4@(prev bottom + 4) corner: (self right - 4 @ (prev bottom + pageGap - 4)).			rm _ RectangleMorph new bounds: r; color: (Color gray alpha: 0.3); borderWidth: 0.			pageBreakRectangles add: rm beSticky.			thePasteUp addMorphBack: rm.			currColumn _ 1.			currX _ 4.			currY _ prev bottom + pageGap.		].		second 			autoFit: true;			position: currX@currY;			width: columnWidth.		prev recomposeChain.		"was commented"		prev _ second.		prev height > columnHeight	] whileTrue.	prev autoFit: true.	thePasteUp height: (prev bottom + 20 - self top).	self layoutChanged.	self setProperty: #pageBreakRectangles toValue: pageBreakRectangles.	thePasteUp allTextPlusMorphs do: [ :each |		each repositionAnchoredMorphs	].	Cursor normal show.! !!AlansTextPlusMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/30/2001 12:12'!makeGalleyStyle	| all first theRest |	(self valueOfProperty: #pageBreakRectangles ifAbsent: [#()]) do: [ :each |		each delete	].	self removeProperty: #pageBreakRectangles.	all _ thePasteUp allTextPlusMorphs.	first _ all select: [ :x | x predecessor isNil].	first size = 1 ifFalse: [^self].	Cursor wait show.	first _ first first.	theRest _ all reject: [ :x | x predecessor isNil].	theRest do: [ :each | each delete].	first autoFit: true.	first width: self width - 8.	first recomposeChain.	first repositionAnchoredMorphs.	Cursor normal show.! !!TextMorph methodsFor: 'geometry' stamp: 'RAA 12/5/2001 10:48'!extent: aPoint 	| newExtent priorEditor |	priorEditor _ editor.	self isAutoFit		ifTrue: [wrapFlag ifFalse: [^ self].  "full autofit can't change"				newExtent _ aPoint truncated max: self minimumExtent.				newExtent x = self extent x ifTrue: [^ self].  "No change of wrap width"				self releaseParagraphReally.  "invalidate the paragraph cache"				super extent: newExtent.				priorEditor					ifNil: [self fit]  "since the width has changed..."					ifNotNil: [self installEditorToReplace: priorEditor]]		ifFalse: [super extent: (aPoint truncated max: self minimumExtent).				wrapFlag ifFalse: [^ self].  "no effect on composition"				self composeToBounds]! !!TextMorph methodsFor: 'private' stamp: 'RAA 12/5/2001 11:20'!releaseParagraph	"a slight kludge so subclasses can have a bit more control over whether the paragraph really 	gets released. important for GeeMail since the selection needs to be accessible even if the 	hand is outside me"	self releaseParagraphReally.! !!TextMorph methodsFor: 'private' stamp: 'RAA 12/5/2001 11:20'!releaseParagraphReally	"a slight kludge so subclasses can have a bit more control over whether the paragraph really 	gets released. important for GeeMail since the selection needs to be accessible even if the 	hand is outside me"	"Paragraph instantiation is lazy -- it will be created only when needed"	self releaseEditor.	paragraph ifNotNil:		[paragraph _ nil].	container ifNotNil:		[container releaseCachedState]! !!TextPlusMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/5/2001 11:18'!extent: aPoint 	"was formerly overridden, but that wasn't working too well, so I hacked the superclass method a bit"	^super extent: aPoint! !!TextPlusMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/30/2001 11:13'!recomposeChain	"Recompose this textMorph and all that follow it."	self withSuccessorsDo:		[:m |  m text: text textStyle: textStyle;  "Propagate new style if any"				releaseParagraphReally;  "Force recomposition"				fit  "and propagate the change"]! !!TextPlusMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/30/2001 11:13'!repositionAnchoredMorphs	| am cBlock leftShift firstCharacterIndex lastCharacterIndex |	firstCharacterIndex _ self paragraph firstCharacterIndex.	lastCharacterIndex _ paragraph lastCharacterIndex.	text runs withStartStopAndValueDo: [:start :stop :attributes |		attributes do: [:att |			(att isMemberOf: TextAnchorPlus) ifTrue: [				am _ att anchoredMorph.				(am isNil or: [am world isNil]) ifFalse: [					(stop between: firstCharacterIndex and: lastCharacterIndex) ifTrue: [						cBlock _ self paragraph characterBlockForIndex: stop.						leftShift _ am valueOfProperty: #geeMailLeftOffset ifAbsent: [0].						am position: (self left + leftShift) @ cBlock origin y.					].				]			]		]	].! !