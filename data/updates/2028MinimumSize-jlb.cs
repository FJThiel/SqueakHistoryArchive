'From Squeak2.8alpha of 4 February 2000 [latest update: #2005] on 22 April 2000 at 8:00:18 pm'!"Change Set:		1046MinimumSize-jlbDate:			27 March 2000Author:			Jim BensonThis changeset allows you to modify the minimum extent to which a window may be resized. To set this extent, send the message #minimumExtent: to the window"!!SystemWindow methodsFor: 'geometry' stamp: 'jlb 3/27/2000 09:12'!minimumExtent	| ext |	"This returns the minimum extent that the window may be resized to"	(ext _ self valueOfProperty: #minimumExtent)		ifNotNil:			[^ ext].	^ 100 @ 80! !!SystemWindow methodsFor: 'geometry' stamp: 'jlb 3/27/2000 09:13'!minimumExtent: aPoint	"This sets the minimum extent to which the window may be resized to"	self setProperty: #minimumExtent toValue: aPoint.! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jlb 3/27/2000 09:05'!doFastWindowReframe: ptName	| newBounds |	"For fast display, only higlight the rectangle during loop"	newBounds _ self bounds newRectFrom: [:f | 		f 			withSideOrCorner: ptName			setToPoint: (self pointFromWorld: Sensor cursorPoint)			minExtent: self minimumExtent].	self bounds: newBounds! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'jlb 3/27/2000 09:05'!spawnReframeHandle: event	"The mouse has crossed a pane border.  Spawn a reframe handle."	| resizer localPt pt ptName newBounds |	allowReframeHandles ifFalse: [^ self].	owner ifNil: [^ self  "Spurious mouseLeave due to delete"].	(self isActive not or: [self isCollapsed]) ifTrue:  [^ self].	((self world ifNil: [^ self]) firstSubmorph isKindOf: NewHandleMorph) ifTrue:		[^ self  "Prevent multiple handles"].	paneMorphs do: [:p | ((p fullBounds insetBy: 1) containsPoint: event cursorPoint)			ifTrue: [^ self  "Don't activate resizer if in a scrollbar"]].	pt _ event cursorPoint.	self bounds forPoint: pt closestSideDistLen:		[:side :dist :len |  "Check for window side adjust"		dist <= 2  ifTrue: [ptName _ side]].	ptName ifNil:		["Check for pane border adjust"		^ self spawnPaneFrameHandle: event].	#(topLeft bottomRight bottomLeft topRight) do:		[:corner |  "Check for window corner adjust"		(pt dist: (self bounds perform: corner)) < 20 ifTrue: [ptName _ corner]].	resizer _ NewHandleMorph new		followHand: event hand		forEachPointDo:			[:p | localPt _ self pointFromWorld: p.			newBounds _ self bounds				withSideOrCorner: ptName				setToPoint: localPt				minExtent: self minimumExtent.			self fastFramingOn 			ifTrue:				[self doFastWindowReframe: ptName]			ifFalse:				[self bounds: newBounds.				(Preferences roundedWindowCorners					and: [#(bottom right bottomRight) includes: ptName])					ifTrue:					["Complete kluge: causes rounded corners to get painted correctly,					in spite of not working with top-down displayWorld."					ptName = #bottom ifFalse:						[self invalidRect: (self bounds topRight - (6@0) extent: 7@7)].					ptName = #right ifFalse:						[self invalidRect: (self bounds bottomLeft - (0@6) extent: 7@7)].					self invalidRect: (self bounds bottomRight - (6@6) extent: 7@7)]]]		lastPointDo:			[:p | ].	event hand world addMorph: resizer.	resizer startStepping! !