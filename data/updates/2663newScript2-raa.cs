'From Squeak2.9alpha of 17 July 2000 [latest update: #2660] on 20 September 2000 at 7:00:38 pm'!"Change Set:		newScript2Date:			19 September 2000Author:			Bob Arning- EXPERIMENTAL scripting area for Alanauthorng tools/new scripting area is modified as follows:-- not in a system window-- no tabbed palette-- playfield on rightand the IMPORTANT partthe viewer for a painting done in the scripting area will be in a flap in the scripting area"!!FlapTab methodsFor: 'positioning' stamp: 'RAA 9/19/2000 23:00'!fitOnScreen	| constrainer |	"19 sept 2000 - allow flaps in any paste up"	constrainer _ owner ifNil: [self].	self spanWorld.	self orientation == #vertical ifTrue: [		self top: ((self top min: (constrainer bottom- self height)) max: constrainer top).	] ifFalse: [		self left: ((self left min: (constrainer right - self width)) max: constrainer left).	].	self flapShowing ifFalse: [self positionObject: self atEdgeOf: constrainer].! !!FlapTab methodsFor: 'positioning' stamp: 'RAA 9/19/2000 12:16'!positionObject: anObject        "anObject could be myself or my referent""Could consider container _ referent pasteUpMorph, to allow flaps on things other than the world, but for the moment, let's skip it!!"	"19 sept 2000 - going for all paste ups"	^self 		positionObject: anObject 		atEdgeOf: (self pasteUpMorph ifNil: [^ self])! !!FlapTab methodsFor: 'positioning' stamp: 'RAA 9/19/2000 23:00'!spanWorld	| container |	container _ self pasteUpMorph ifNil: [self currentWorld].	(self orientation == #vertical) ifTrue: [		referent height: container height.		referent top: container top.	] ifFalse: [		referent width: container width.		referent left: container left.	] ! !!FlapTab methodsFor: 'show & hide' stamp: 'RAA 9/19/2000 12:17'!showFlap	| thicknessToUse flapOwner |	"19 sept 2000 - going for all paste ups"	flapOwner _ self pasteUpMorph.	self referentThickness <= 0		ifTrue:			[thicknessToUse _ lastReferentThickness ifNil: [100].			self orientation == #horizontal				ifTrue:					[referent height: thicknessToUse]				ifFalse:					[referent width: thicknessToUse]].	inboard ifTrue:		[self stickOntoReferent].  "makes referent my owner, and positions me accordingly"	referent pasteUpMorph == flapOwner		ifFalse:			[flapOwner accommodateFlap: self.  "Make room if needed"			flapOwner addMorphFront: referent.			flapOwner startSteppingSubmorphsOf: referent.			self positionReferent.			referent adaptToWorld: flapOwner].	inboard  ifFalse:		[self adjustPositionVisAVisFlap].	flapShowing _ true.		flapOwner bringFlapTabsToFront! !!HandMorph methodsFor: 'from EToyHand' stamp: 'RAA 9/19/2000 11:52'!makeNewDrawingInBounds: rect pasteUpMorph: aPasteUpMorph	| w newSketch newPlayer sketchEditor aPaintBox aPalette tfx whereToPresent |	self world assureNotPaintingElse: [^ self].	aPalette _ aPasteUpMorph standardPalette.	aPalette ifNotNil: [aPalette showNoPalette; layoutChanged].	w _ aPasteUpMorph world.	w stopRunningAll; abandonAllHalos.	newSketch _ self drawingClass new player: (newPlayer _ UnscriptedPlayer newUserInstance).	newPlayer costume: newSketch.	newSketch form: (Form extent: rect extent depth: w assuredCanvas depth).	newSketch bounds: rect.	sketchEditor _ SketchEditorMorph new.	w addMorphFront: sketchEditor.	sketchEditor initializeFor: newSketch inBounds: rect pasteUpMorph: aPasteUpMorph.	sketchEditor		afterNewPicDo: [:aForm :aRect |			whereToPresent _ aPasteUpMorph presenter.			newSketch form: aForm.			tfx _ aPasteUpMorph transformFrom: aPasteUpMorph world.			newSketch position: (tfx globalPointToLocal: aRect origin).			newSketch rotationStyle: sketchEditor rotationStyle.			newSketch setupAngle: sketchEditor forwardDirection.			newSketch privateOwner: aPasteUpMorph.  "temp for halo access"			newPlayer setHeading: sketchEditor forwardDirection.			"Includes  newSketch rotationDegrees: sketchEditor forwardDirection."			aPasteUpMorph addMorphFront: newPlayer costume.			w startSteppingSubmorphsOf: newSketch.			whereToPresent drawingJustCompleted: newSketch]		 ifNoBits:			[(aPaintBox _ self world paintBox) ifNotNil:				[aPaintBox delete].			aPalette ifNotNil: [aPalette showNoPalette].]! !!Presenter methodsFor: 'viewer' stamp: 'RAA 9/19/2000 12:19'!viewMorph: aMorph	| aPlayer aViewer aPalette aRect aPoint nominalHeight aFlapTab topItem flapLoc |	Sensor leftShiftDown ifFalse:		[((aPalette _ aMorph standardPalette) ~~ nil and: [aPalette isInWorld])			ifTrue:	[^ aPalette viewMorph: aMorph]].	aPlayer _ (topItem _ aMorph topRendererOrSelf) assuredPlayer.	associatedMorph addMorph: (aViewer _ self nascentPartsViewer).	"19 sept 2000 - allow flaps in any paste up"	flapLoc _ associatedMorph "world".	Preferences viewersInFlaps ifTrue:		[aViewer setProperty: #noInteriorThumbnail toValue: true.		aViewer initializeFor: aPlayer barHeight: 0.		aViewer enforceTileColorPolicy.		flapLoc hideViewerFlapsOtherThanFor: aPlayer.		aFlapTab _ flapLoc viewerFlapTabFor: topItem.		aFlapTab referent submorphs do: 			[:m | (m isKindOf: Viewer) ifTrue: [m delete]].		aFlapTab referent addMorph: aViewer beSticky.		aViewer visible: true.		aFlapTab applyThickness: aViewer width + 25.		aFlapTab showFlap. 		aViewer position: aFlapTab referent position.		flapLoc startSteppingSubmorphsOf: aFlapTab.		^ flapLoc startSteppingSubmorphsOf: aViewer].			aViewer initializeFor: aPlayer barHeight: 6.	aViewer enforceTileColorPolicy.	Preferences automaticViewerPlacement ifTrue:		[aPoint _ aMorph bounds right @ 			(aMorph center y - ((nominalHeight _ aViewer initialHeightToAllow) // 2)).		aRect _ (aPoint extent: (aViewer width @ nominalHeight)) translatedToBeWithin: flapLoc bounds.		aViewer position: aRect topLeft.		aViewer visible: true.		flapLoc startSteppingSubmorphsOf: aViewer.		"it's already in the world, somewhat coincidentally"		^ self].	aMorph primaryHand attachMorph: (aViewer visible: true)! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'RAA 9/19/2000 12:20'!newScriptingSpace	"Answer a complete scripting space"	| aTemplate  palette aPlayfield aWindow itsModel |	"19 sept 2000 - experiment for Alan"	1 = 1 ifTrue: [^self newScriptingSpace2].	aWindow _ (SystemWindow labelled: 'scripting area') model: (itsModel _ ScriptingDomain new).	aWindow setStripeColorsFrom: itsModel defaultBackgroundColor.	aWindow extent: 640 @ 480.	aTemplate _ PasteUpMorph new setNameTo: 'etoy'.	aTemplate extent: 638 @ 470.	aWindow addMorph: aTemplate frame: (0@0 corner: 1@1).	aTemplate setStandardTexture.	aTemplate impartPrivatePresenter; setProperty: #automaticPhraseExpansion toValue: true; beSticky.	aTemplate presenter addStopStepGoButtons; addTrashCan.	palette _ TabbedPalette new pageSize: 200@320.	palette beSticky; useRoundedCorners.	aTemplate addMorph: palette.	palette addMenuTab.	palette addPartsTab.	palette addControlsTab.	palette addTilesTab.	palette selectTabNamed: 'supplies'.	palette becomeStandardPalette.	aPlayfield _ PasteUpMorph new setNameTo: 'playfield'.	aPlayfield useRoundedCorners.	(Preferences valueOfFlag: #eToyScheme)  "Not widely advertised"		ifFalse:				[aPlayfield setToAdhereToEdge: #topRight.			palette setToAdhereToEdge: #topLeft]		ifTrue:			[aPlayfield setToAdhereToEdge: #topLeft.			palette setToAdhereToEdge: #topRight].	aTemplate addMorph: aPlayfield.	aPlayfield extent: 340@300; position: aTemplate topRight - (400@0).	aPlayfield beSticky.	aPlayfield automaticViewing: true.	aPlayfield wantsMouseOverHalos: true.	aTemplate presenter standardPlayfield: aPlayfield.		^ aWindow! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'RAA 9/20/2000 19:00'!newScriptingSpace2	"Answer a complete scripting space"	| aTemplate  aPlayfield |		(aTemplate _ PasteUpMorph new)		setNameTo: 'etoy';		extent: 638 @ 470;		color: Color white;		impartPrivatePresenter;		setProperty: #automaticPhraseExpansion toValue: true;		beSticky.	aTemplate presenter addStopStepGoButtons; addTrashCan.	aTemplate addMorph: (aPlayfield _ PasteUpMorph new).	aPlayfield		setNameTo: 'playfield';		useRoundedCorners;		setToAdhereToEdge: #topLeft;		extent: 340@300;		position: aTemplate topRight - (400@0);		beSticky;		automaticViewing: true;		wantsMouseOverHalos: true.	aTemplate presenter standardPlayfield: aPlayfield.		^ aTemplate! !