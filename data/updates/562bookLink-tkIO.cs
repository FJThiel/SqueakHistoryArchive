'From Squeak 2.3 beta of Nov 25, 1998 on 13 January 1999 at 9:26:00 am'!"Change Set:		bookLink-tkIODate:			13 January 1999Author:			Ted KaehlerLinks to pages in BookMorphs.Like a Swiki, you may now add a new page and create a link to it all at once.  Type the name of the new page in a TextMorph on a page. The book must already have a url by having been stored on a server.  Select the name and type Cmd-6.  Choose 'link to'.  A new page is added to the end of the book and written on the server.  (Don't forget to save the page from which you made the link.)  Clicking on the blue text will turn to the new page.	To link an existing page, turn to the target page and name it (Cmd-click on the page.  Click in the name below the page.  Backspace a lot.  Type the new name).  Turn back to the original page.  Type the name of the target page, select, Cmd-6, choose 'link to'.	Morphic text in system windows now has all of the active text commands available with Cmd-6.  (link to class comment, link to method, etc.)	Morphic text in end-user windows has active 'do it text'.  Type a Smalltalk expression.  Select, Cmd-6, choose 'acitve'.  Clicking the blue text will cause the action to happen.	Class TextMorphHotLink is removed.	The first time you write a bookMorph to a server, a thumbnail of it sticks to the cursor.  Shift-clicking the thumbnail brings the book back into your image.  (Original book must be deleted for this to work.  It warns you.)"!TextURL subclass: #TextSqkPageLink	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Text'!!BookMorph class methodsFor: 'all' stamp: 'tk 1/13/1999 09:07'!alreadyInFromUrl: aUrl	"Does a bookMorph living in some world in this image represent the same set of server pages? If so, don't create another one.  It will steal pages from the existing one.  Go delete the first one."		self withAllSubclassesDo: [:cls |		cls allInstancesDo: [:aBook | 			 (aBook valueOfProperty: #url) = aUrl ifTrue: [				aBook world ifNotNil: [					self inform: 'This book is already open in some project'.					^ true]]]].	^ false! !!Morph methodsFor: 'naming' stamp: 'tk 1/12/1999 19:25'!setNameTo: aName	self setNamePropertyTo: aName asString	"no Texts here!!"! !!BookMorph commentStamp: 'tk 1/13/1999 08:51' prior: 0!Allows one or another "page" to show; orchestrates the page transitions; offers control panel for navigating among pages and for adding and deleting pages.To write a book out to the disk or to a file server, decide what folder it goes in.  Construct a url to a typical page:	file://myDisk/folder/myBook1.sp	ftp://aServer/folder/myBook1.spChoose "send all pages to server" from the book's menu (press the <> part of the controls).  Choose "use page numbers".  Paste in the url.To load an existing book, find its ".bo" file in the file list browser.  Choose "load as book".Multiple people may modify a book.  If other people may have changed a book you have on your screen, choose "reload all from server".Add or modify a page, and choose "send this page to server".The polite thing to do is to reload before changing a book.  Then write one or all pages soon after making your changes.  If you store a stale book, it will wipe out changes that other people made in the mean time.Pages may be linked to each other.  To create a named link to a new page, type the name of the page in a text area in a page.  Select it and do Cmd-6.  Choose 'link to'.  A new page of that name will be added at the back of the book.  Clicking on the blue text flips to that page.  	To create a link to an existing page, first name the page.  Go to that page and Cmd-click on it.  The name of the page is below the page.  Click in it and backspace and type.  Return to the page you are linking from.  Type the name. Cmd-6, 'link to'.  Text search:  Search for a set of fragments.  allStrings collects text of fields.  Turn to page with all fragments on it and highlight the first one.  Save the container and offset in properties: #searchContainer, #searchOffset, #searchKey.  Search again from there.  Clear those at each page turn, or change of search key.  !!BookMorph methodsFor: 'insert and delete' stamp: 'tk 1/12/1999 13:23'!insertPageSilentlyAtEnd	"Create a new page at the end of the book.  Do not turn to it."	| sz newPage bw bc cc |	currentPage == nil		ifTrue: [sz _ pageSize.			bw _ 0.			bc _ Color blue muchLighter.			cc _ color]		ifFalse: [sz _ currentPage extent.			bw _ currentPage borderWidth.			bc _ currentPage borderColor.			cc _ currentPage color].	newPagePrototype		ifNil: [newPage _ PasteUpMorph new extent: sz; color: cc.			newPage borderWidth: bw; borderColor: bc]		ifNotNil: [Cursor wait showWhile: 				[newPage _ newPagePrototype veryDeepCopy]].	newPage setNameTo: 'page'.	newPage resizeToFit: false.	pages isEmpty		ifTrue: [pages add: (currentPage _ newPage)]	"was none"		ifFalse: [pages add: newPage after: pages last].	^ newPage! !!BookMorph methodsFor: 'menu' stamp: 'tk 1/13/1999 08:38'!getStemUrl	"Try to find the old place where this book was stored.  Confirm with the user.  Else ask for new place."| initial pg url ll knownURL |initial _ ''.(pg _ currentPage valueOfProperty: #SqueakPage) ifNotNil: [	pg contentsMorph == currentPage ifTrue: [		initial _ pg url.		knownURL _ true]].	"If this page has a url"pages doWithIndex: [:aPage :ind |	initial size = 0 ifTrue: [		aPage isInMemory ifTrue: [			(pg _ aPage valueOfProperty: #SqueakPage) ifNotNil: [				initial _ pg url]]]].	"any page with a url"initial size = 0 ifTrue: [initial _ ServerDirectory defaultStemUrl, '1.sp'].	"A new legal place"knownURL ifNil: [	url _ FillInTheBlank 			request: 'url of the place to store a typical page in this book.	Must begin with file:// or ftp://' 			initialAnswer: initial].knownURL ifNotNil: [url _ initial].ll _ url findLast: [:char | char == $.].ll = 0 ifFalse: [url _ url copyFrom: 1 to: ll-1].	"remove .sp"url _ (url stemAndNumericSuffix) at: 1.		"remove trailing number"url size = 0 ifTrue: [^ url].	"empty"[url last == $x] whileTrue: [url _ url allButLast].^ url! !!BookMorph methodsFor: 'menu' stamp: 'tk 1/13/1999 08:57'!saveAsNumberedURLs	"Write out all pages in this book that are not showing, onto a server.  The local disk could be the server.  For any page that does not have a SqueakPage and a url already, name that page file by its page number.  Any pages that are already totally out will stay that way."	| stem list firstTime |stem _ self getStemUrl.	"user must approve"stem size = 0 ifTrue: [^ self].pages doWithIndex: [:aPage :ind | 	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		aPage saveOnURL: stem,(ind printString),'.sp'.		self presenter ifNotNil: [self presenter flushPlayerListCache].		]].list _ pages collect: [:aPage |	 aPage sqkPage prePurge].	"knows not to purge the current page"list _ (list select: [:each | each notNil]) asArray."do bulk become:"(list collect: [:each | each contentsMorph])	elementsExchangeIdentityWith:		(list collect: [:spg | MorphObjectOut new xxxSetUrl: spg url page: spg]).firstTime _ (self valueOfProperty: #url) == nil.self saveIndexOnURL.self presenter ifNotNil: [self presenter flushPlayerListCache].firstTime ifTrue: ["Put a thumbnail into the hand"	(URLMorph grabURL: (self valueOfProperty: #url)) book: true].! !!BookMorph methodsFor: 'menu' stamp: 'tk 1/12/1999 19:09'!saveIndexOfOnly: aPage	"Modify the index of this book on a server.  Read the index, modify the entry for just this page, and write back.  See saveIndexOnURL."	| holder mine sf remoteFile strm remote pageURL num pre index after sp dict allText allTextUrls |	mine _ self valueOfProperty: #url.	mine ifNil: [^ self saveIndexOnURL].	Cursor wait showWhile: [strm _ (ServerFile new fullPath: mine) asStream].	strm class == String ifTrue: [self inform: 'Sorry, ',strm. ^ nil].	remote _ strm fileInObjectAndCode.	dict _ remote at: 1.	allText _ dict at: #allText ifAbsent: [nil].	"remote, not local"	allTextUrls _ dict at: #allTextUrls ifAbsent: [nil].	(pageURL _ aPage url) ifNil: [self error: 'just had one!!'].	2 to: remote size do: [:ii | 		((remote at: ii) url findString: pageURL startingAt: 1 						caseSensitive: false) > 0 ifTrue: [index _ ii].	"fast"		(remote at: ii) xxxReset].	index ifNil: ["new page, what existing page does it follow?"		num _ self pageNumberOf: aPage.		1 to: num-1 do: [:ii | (pages at: ii) url ifNotNil: [pre _ (pages at: ii) url]].		pre ifNil: [after _ remote size+1]			ifNotNil: ["look for it on disk, put me after"				2 to: remote size do: [:ii | 					((remote at: ii) url findString: pre startingAt: 1 								caseSensitive: false) > 0 ifTrue: [after _ ii+1]]].		remote _ remote copyReplaceFrom: after to: after-1 with: #(1).		allText ifNotNil: [			dict at: #allText put: (allText copyReplaceFrom: after-1 to: after-2 with: #(())).			dict at: #allTextUrls put: (allTextUrls copyReplaceFrom: after-1 to: after-2 with: #(()))].		index _ after].	sp _ aPage sqkPage copy.	"is there"	holder _ MorphObjectOut new xxxSetUrl: sp url page: sp.	sp contentsMorph: holder.	remote at: index put: holder.	(dict at: #modTime ifAbsent: [0]) < Time totalSeconds ifTrue:		[dict at: #modTime put: Time totalSeconds].	allText ifNotNil: [		(dict at: #allText) at: index-1 put: aPage allStrings.		(dict at: #allTextUrls) at: index-1 put: pageURL].	sf _ ServerDirectory new fullPath: mine.	Cursor wait showWhile: [		remoteFile _ sf fileNamed: mine.		remoteFile fileOutClass: nil andObject: remote.		remoteFile close].! !!BookMorph methodsFor: 'menu' stamp: 'tk 1/12/1999 18:57'!saveOnUrlPage: pageMorph	"Write out this single page in this book onto a server.  See savePagesOnURL.  (Don't compute the texts, only this page's is written.)"	| stem ind |	(self valueOfProperty: #keepTogether) ifNotNil: [		self inform: 'This book is marked ''keep in one file''. Several pages use a common Player.Save the owner of the book instead.'.		^ self].	"Don't give the chance to put in a different place.  Assume named by number"	stem _ self getStemUrl.	"user must approve"	stem size = 0 ifTrue: [^ self].	ind _ pages identityIndexOf: pageMorph ifAbsent: [self error: 'where is the page?'].	pageMorph isInMemory ifTrue: ["not out now"			pageMorph saveOnURL: stem,(ind printString),'.sp'].	self saveIndexOfOnly: pageMorph.! !!BookMorph methodsFor: 'menu' stamp: 'tk 1/12/1999 18:58'!saveOneOnURL	"Write out this single page onto a server.  See savePagesOnURL.  (Don't compute the texts, only this page's is written.)"	^ self saveOnUrlPage: currentPage! !!BookMorph methodsFor: 'menu' stamp: 'tk 1/13/1999 08:56'!savePagesOnURL	"Write out all pages in this book onto a server.  For any page that does not have a SqueakPage and a url already, ask the user for one.  Give the option of naming all page files by page number.  Any pages that are not in memory will stay that way.  The local disk could be the server."	| response list firstTime |	(self valueOfProperty: #keepTogether) ifNotNil: [		self inform: 'This book is marked ''keep in one file''. Several pages use a common Player.Save the owner of the book instead.'.		^ self].	self getAllText.	"stored with index later"	response _ (PopUpMenu labels: 'Use page numbers\Type in file names\Save in a new place (using page numbers)\Save in a new place (typing names)' withCRs)			startUpWithCaption: 'Each page will be a file on the server.  \Do you want to page numbers be the names of the files? \or name each one yourself?' withCRs.	response = 1 ifTrue: [self saveAsNumberedURLs. ^ self].	response = 3 ifTrue: [self forgetURLs; saveAsNumberedURLs. ^ self].	response = 4 ifTrue: [self forgetURLs].	response = 0 ifTrue: [^ self].pages do: [:aPage |	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		aPage saveOnURLbasic.		self presenter ifNotNil: [self presenter flushPlayerListCache].		]].	"ask user if no url"list _ pages collect: [:aPage |	 aPage sqkPage prePurge].	"knows not to purge the current page"list _ (list select: [:each | each notNil]) asArray."do bulk become:"(list collect: [:each | each contentsMorph])	elementsExchangeIdentityWith:		(list collect: [:spg | MorphObjectOut new xxxSetUrl: spg url page: spg]).firstTime _ (self valueOfProperty: #url) == nil.self saveIndexOnURL.self presenter ifNotNil: [self presenter flushPlayerListCache].firstTime ifTrue: ["Put a thumbnail into the hand"	(URLMorph grabURL: (self valueOfProperty: #url)) book: true].! !!NewParagraph methodsFor: 'editing' stamp: 'tk 1/13/1999 07:55'!clickAt: clickPoint for: model controller: editor	"Give sensitive text a chance to fire.  Display flash: (100@100 extent: 100@100)."| startBlock action target |action _ false.startBlock _ self characterBlockAtPoint: clickPoint.(text attributesAt: startBlock stringIndex) 	do: [:att | att mayActOnClick ifTrue:			["			range _ text rangeOf: att startingAt: startBlock stringIndex.			boxes _ self selectionRectsFrom: (self characterBlockForIndex: range first) 						to: (self characterBlockForIndex: range last).			box _ boxes detect: [:each | each containsPoint: clickPoint].				*This doesn't work in morphic*			Need to replace by a highlighting morph that waits for moueUp.			Utilities awaitMouseUpIn: (editor transform invertRect: box)					repeating: []					ifSucceed: [(att actOnClickFor: model) ifTrue: [action _ true]]."			(target _ model) ifNil: [target _ editor morph].			(att actOnClickFor: target)				ifTrue: [Sensor waitNoButton.  "FIX THIS"						action _ true]			].		].^ action! !!RunArray class methodsFor: 'instance creation' stamp: 'tk 1/13/1999 08:28'!scanFrom: strm	"Read the style section of a fileOut or sources file.  nextChunk has already been done.  We need to return a RunArray of TextAttributes of various kinds."	| rr vv aa this |	(strm peekFor: $( ) ifFalse: [^ nil].	rr _ OrderedCollection new.	[strm skipSeparators.	 strm peekFor: $)] whileFalse: 		[rr add: (Number readFrom: strm)].	vv _ OrderedCollection new.	"Value array"	aa _ OrderedCollection new.	"Attributes list"	[(this _ strm next) == nil] whileFalse: [		this == $, ifTrue: [vv add: aa asArray.  aa _ OrderedCollection new].		this == $f ifTrue: [aa add: 			(TextFontChange new fontNumber: (Number readFrom: strm))].		this == $b ifTrue: [aa add: (TextEmphasis bold)].		this == $i ifTrue: [aa add: (TextEmphasis italic)].		this == $u ifTrue: [aa add: (TextEmphasis underlined)].		this == $= ifTrue: [aa add: (TextEmphasis struckOut)].		this == $n ifTrue: [aa add: (TextEmphasis normal)].		this == $- ifTrue: [aa add: (TextKern kern: -1)].		this == $+ ifTrue: [aa add: (TextKern kern: 1)].		this == $c ifTrue: [aa add: (TextColor scanFrom: strm)]. "color"		this == $L ifTrue: [aa add: (TextLink scanFrom: strm)].	"L not look like 1"		this == $R ifTrue: [aa add: (TextURL scanFrom: strm)].				"R capitalized so it can follow a number"		this == $q ifTrue: [aa add: (TextSqkPageLink scanFrom: strm)].		this == $d ifTrue: [aa add: (TextDoIt scanFrom: strm)].		"space, cr do nothing"		].	aa size > 0 ifTrue: [vv add: aa asArray].	^ self runs: rr asArray values: vv asArray"RunArray scanFrom: (ReadStream on: '(14 50 312)f1,f1b,f1LInteger +;i')"! !!TextAttribute commentStamp: 'tk 1/12/1999 08:46' prior: 0!Tells a piece of text to be a certain way.Select text, press Command-6, choose a attribute.  If selected text is of the form 	Hi There<Smalltalk beep>the part in angle brackets is saved for action, and the Hi There appears in the paragraph.  If selection has no angle brackets, use the whole thing as both the text and the action.TextDoIt  --  eval as a Smalltalk expression (the part in angle brackets)TextLink -- Show a method, class comment, class hierarchy, or class defintion.	<Point extent:>, <Point Comment>, <Point Hierarchy>, or <Point Defintion> are what you type.TextURL -- Show the web page. <www.disney.com>These attributes of text need to be stored on the disk in a regular file-out.  It is done in this form: 	(ascii 2)<!!do Smalltalk beep(ascii 3)>Hi There(ascii 3)<!!>	(ascii 2)<!!li Point extent:(ascii 3)>Click here to see the extent: method(ascii 3)<!!>The brackets are for people to see in fileOuts.  The wierd ascii are for the scanner to pick up easily.  See RunArray class scanFrom: where decoding is done.!]style[(993 24 25)f1,f1LRunArray class scanFrom:;,f1!!TextMorphEditor reorganize!('accessing' morph morph:)('events' mouseDown: mouseMove: mouseUp: readKeyboard recognizeCharacters recognizeCharactersWhileMouseIn:)('menu commands' accept cancel changeEmphasis: find tempCommand:)('mvc compatibility' againOrSame: align controlInitialize controlTerminate flash mvcRedisplay scrollBy: select selectAndScroll selectFrom:to: storeSelectionInParagraph updateMarker userHasEdited userHasNotEdited zapSelectionWith:)('command keys' inspectIt:)('binding' bindingOf:)!!TextMorphEditor methodsFor: 'accessing' stamp: 'tk 1/13/1999 07:53'!morph	^ morph! !!TextMorphEditor methodsFor: 'accessing' stamp: 'tk 1/13/1999 07:53'!morph: aMorph	"Install a link back to the morph being edited (esp for text links)"	morph _ aMorph ! !!TextMorphEditor methodsFor: 'events' stamp: 'tk 1/12/1999 11:17'!mouseDown: evt 	"An attempt to break up the old processRedButton code into threee phases"	| clickPoint |	oldInterval _ startBlock stringIndex to: stopBlock stringIndex - 1.	clickPoint _ evt cursorPoint.	(paragraph clickAt: clickPoint for: model controller: self) ifTrue: [		evt hand newKeyboardFocus: nil.		^ self].	self closeTypeIn.  "probably not necess"	sensor leftShiftDown		ifFalse:			[stopBlock _ startBlock _ pivotBlock _				paragraph characterBlockAtPoint: clickPoint]		ifTrue:			[(paragraph characterBlockAtPoint: clickPoint) <= startBlock			ifTrue: [stopBlock _ startBlock.					pivotBlock _ stopBlock]			ifFalse: [startBlock _  stopBlock.					pivotBlock _ startBlock]].	self storeSelectionInParagraph! !!TextMorphEditor methodsFor: 'menu commands' stamp: 'tk 1/13/1999 08:40'!changeEmphasis: characterStream 	"Intercept requests to create a link (Cmd-6).  Make them simpler for end-user editing.  SystemWidows use ParagraphEditor's complex commands."	| keyCode attribute index colors aPageName target book theSelection url newPage labels |	"Test if it's really the droids we're looking for..."	keyCode _ ('0123456789-=' indexOf: sensor keyboardPeek ifAbsent: [1]) - 1.	keyCode ~= 6 ifTrue: [^ super changeEmphasis: characterStream].		"underline, bold, etc."	(morph isKindOf: TextMorphForEditView) ifTrue: [		^ super changeEmphasis: characterStream].	"if in a browser, show all choices"	sensor keyboard.  "Yes, it is Cmd-6;  consume the command character"	theSelection _ self selection.	colors _ #(black magenta red yellow green blue cyan white).	labels _ colors, #(active).	(book _ morph ownerThatIsA: BookMorph) ifNotNil: [		labels _ labels, #('link to')].	index _ (PopUpMenu labelArray: labels							lines: (Array with: colors size)) startUp.	index = 0 ifTrue: [^ true].	index <= colors size ifTrue:		[attribute _ TextColor color: (Color perform: (colors at: index))].	index = (colors size + 1) ifTrue:		[attribute _ TextDoIt new.		theSelection _ attribute analyze: self selection asString].	index = (colors size + 2) ifTrue:	"Link to a new page, possibly create it"		["target page must be in memory"		aPageName _ self selection asString.		target _ book pageNamed: aPageName.	"later don't bring in all pages!!"		"later offer correction"		target ifNotNil: [url _ target url.			url ifNil: [self inform: 'You must send the target page to a server.'.  ^ true].			attribute _ TextSqkPageLink new. 			theSelection _ attribute analyze: self selection asString,'<',url,'>'].		target ifNil: ["add page at end"			(book valueOfProperty: #keepTogether) 				ifNotNil: [self inform: 'For now, can''t link in book whose pages must be kept together'.  ^ true].			newPage _ book insertPageSilentlyAtEnd.			newPage setNameTo: theSelection asString.			book saveOnUrlPage: newPage.	"write it on the server"			attribute _ TextSqkPageLink new. 			theSelection _ attribute analyze: 				self selection asString,'<', newPage url,'>'].		].	self replaceSelectionWith: (theSelection asText addAttribute: attribute).	^ true! !!TextSqkPageLink commentStamp: 'tk 1/13/1999 08:47' prior: 0!I represent a link to either a SqueakPage in a BookMorph, or a regular url.  See TextMorphEditor changeEmphasis:.  !]style[(81 31 4)f1,f1LTextMorphEditor changeEmphasis:;,f1!!TextSqkPageLink methodsFor: 'as yet unclassified' stamp: 'tk 1/12/1999 12:56'!actOnClickFor: textMorph	"I represent a link to either a SqueakPage in a BookMorph, or a regular url"	| book |	((url endsWith: '.bo') or: [url endsWith: '.sp']) ifFalse: [		^ super actOnClickFor: textMorph].	book _ textMorph ownerThatIsA: BookMorph.	book ifNotNil: [book goToPageUrl: url].	"later handle case of page being in another book, not this one"	^ true! !!TextSqkPageLink methodsFor: 'as yet unclassified' stamp: 'tk 1/13/1999 08:14'!writeScanOn: strm	strm nextPut: $q; nextPutAll: url; nextPut: $;! !!URLMorph methodsFor: 'event handling' stamp: 'tk 1/13/1999 08:04'!handlesMouseDown: event	^ isBookmark & event shiftPressed! !!URLMorph methodsFor: 'event handling' stamp: 'tk 1/13/1999 09:09'!mouseUp: evt	| pg ow newPage mm ll bookUrl bk |	"If url of a book, bring in book with first page and grab it."	book==true ifTrue: [		ll _ url findLast: [:char | char == $.].		ll = 0 ifTrue: [^ self].		bookUrl _ url copyFrom: 1 to: ll-1.	"remove .sp"		bookUrl _ (bookUrl stemAndNumericSuffix) at: 1.		"remove trailing number"		[bookUrl last == $x] whileTrue: [bookUrl _ bookUrl allButLast].		bookUrl _ bookUrl, '.bo'.		(BookMorph alreadyInFromUrl: bookUrl) ifTrue: [^ self].			"If this book is already in, we would steal the pages out of it!!"		bk _ BookMorph new fromURL: bookUrl.		bk goToPageUrl: url.	"turn to the page"		^ World primaryHand attachMorph: bk].	"If inside a SqueakPage, replace it!!"	pg _ self enclosingPage.	pg ifNotNil: [		(ow _ pg contentsMorph owner) ifNotNil: [			pg contentsMorph delete.	"from its owner"			newPage _ SqueakPageCache atURL: url.			mm _ newPage fetchContents.			mm ifNotNil: [ow addMorph: mm.				page _ newPage].			^ self]].	"If I am a project, jump  -- not done yet"	"For now, just put new page on the hand"	newPage _ SqueakPageCache atURL: url.	mm _ newPage fetchInformIfError.	mm ifNotNil: [self primaryHand attachMorph: mm.		page _ newPage].! !Smalltalk removeClassNamed: #TextMorphHotLink!