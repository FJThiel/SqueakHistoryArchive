'From Squeak2.9alpha of 5 August 2000 [latest update: #3229] on 5 January 2001 at 7:33:47 am'!"Change Set:		decorateBrowserButtons-swDate:			5 January 2001Author:			Scott WallaceAdds a preference, #decorateBrowserButtons, governing whether the recently introduced color decorations for inheritance buttons should be used or not, and provides support for other such button decorations to be incorporated in the future."Preferences addPreference: #decorateBrowserButtons category: #browsing default: true balloonHelp: 'Governs whether certain buttons, such as the Inheritance button, should bear colors that provide user feedback on their applicability'!!CodeHolder methodsFor: 'misc' stamp: 'sw 1/5/2001 07:19'!decorateButtons	"Change screen feedback for any buttons in the UI of the receiver that may wish it.  Initially, it is only the Inheritance button that is decorated, but one can imagine others."	self decorateForInheritance ! !!CodeHolder methodsFor: 'misc' stamp: 'sw 1/5/2001 07:15'!decorateForInheritance	"Check to see if the currently-viewed method has a super send or an override, and if so, change screen feedback, unless the #decorateBrowserButtons says not to."	| aColor aButton |	(aButton _ self inheritanceButton) ifNil: [^ self].	aColor _ (currentCompiledMethod == nil or: [Preferences decorateBrowserButtons not])		ifTrue:			[Color transparent]		ifFalse:			[currentCompiledMethod sendsToSuper				ifTrue:					[self isThereAnOverride						ifTrue:							[Color blue muchLighter]						ifFalse:							[Color green muchLighter ]]				ifFalse:					[self isThereAnOverride						ifTrue:							[Color tan lighter]						ifFalse:							[Color transparent]]].	aButton offColor: aColor! !!CodeHolder methodsFor: 'misc' stamp: 'sw 1/5/2001 07:13'!inheritanceButton	"If receiver has an Inheritance button, answer it, else answer nil.  morphic only at this point"	| aWindow aPane |	((aWindow _ self containingWindow) isKindOf: SystemWindow) ifFalse: [^ nil].	(aPane _ aWindow submorphNamed: 'buttonPane') ifNil: [^ nil].	^  aPane submorphThat: [:m | (m isKindOf: PluggableButtonMorph) and:		[m actionSelector == #methodHierarchy]] ifNone: [^ nil]! !!CodeHolder methodsFor: 'misc' stamp: 'sw 1/5/2001 07:31'!modelWakeUpIn: aWindow	"The window has been activated.  Respond to possible changes that may have taken place while it was inactive"	self updateListsAndCodeIn: aWindow.	self decorateButtons.	super modelWakeUpIn: aWindow! !!Browser methodsFor: 'class functions' stamp: 'sw 1/5/2001 07:20'!plusButtonHit	"Cycle among definition, comment, and hierachy"	editSelection == #editComment		ifTrue: [self hierarchy. ^ self].	editSelection == #hierarchy		ifTrue: [editSelection := #editClass.			classListIndex = 0 ifTrue: [^ self].			self okToChange ifFalse: [^ self].			self changed: #editComment.			self contentsChanged.			^self].	classListIndex = 0 ifTrue: [^ self].	self okToChange ifFalse: [^ self].	self messageCategoryListIndex: 0.	editSelection := #editComment.	self changed: #classSelectionChanged.	self decorateButtons.	self contentsChanged.! !!Browser methodsFor: 'message list' stamp: 'sw 1/5/2001 07:20'!messageListIndex: anInteger 	"Set the selected message selector to be the one indexed by anInteger."	messageListIndex _ anInteger.	editSelection _ 		anInteger = 0			ifTrue: [#newMessage]			ifFalse: [#editMessage].	contents _ nil.	self changed: #messageListIndex.	"update my selection"	self contentsChanged.	self decorateButtons! !!Browser methodsFor: 'metaclass' stamp: 'sw 1/5/2001 07:20'!metaClassIndicated: trueOrFalse 	"Indicate whether browsing instance or class messages."	metaClassIndicated _ trueOrFalse.	self setClassOrganizer.	systemCategoryListIndex > 0 ifTrue:		[editSelection _ classListIndex = 0			ifTrue: [metaClassIndicated				ifTrue: [#none]				ifFalse: [#newClass]]			ifFalse: [#editClass]].	messageCategoryListIndex _ 1.	messageListIndex _ 0.	contents _ nil.	self changed: #classSelectionChanged.	self changed: #messageCategoryList.	self changed: #messageList.	self changed: #contents.	self decorateButtons! !!MessageSet methodsFor: 'message list' stamp: 'sw 1/5/2001 07:20'!messageListIndex: anInteger 	"Set the index of the selected item to be anInteger."	messageListIndex _ anInteger.	contents _ 		messageListIndex ~= 0			ifTrue: [self selectedMessage]			ifFalse: [''].	self changed: #messageListIndex.	 "update my selection"	editSelection _ #editMessage.	self contentsChanged.	(messageListIndex ~= 0 and: [autoSelectString notNil])		ifTrue: [self changed: #autoSelect].	self decorateButtons! !