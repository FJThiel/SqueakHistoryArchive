'From Squeak3.8alpha of ''17 July 2004'' [latest update: #6259] on 25 September 2004 at 12:40:21 pm'!"Change Set:		NewUIBingBang-dgdDate:			25 September 2004Author:			Diego Gomez DeckBackport of several UI changes/improvement coming from Small-Land image.Note to change avoiders: Four new preferences  dictates the new features, feel free to switch them off.	Preferences disable: #easySelection.	Preferences disable: #maintainHalos.	Preferences disable: #tabAmongFields.	Preferences disable: #generalizedYellowButtonMenu.	Preferences disable: #showWorldMainDockingBar.Senders of these preferences are good entry points to the new code.All conflicts up to changeset 6259 was resolved."| stream form |Project allInstances	do: [:each | each displayDepth: 32].Display newDepth: 32.stream _ HTTPSocket httpGet: 'http://swiki.agro.uba.ar/small_land/uploads/234/bigPaint.png'.stream binary; reset.form := ImageReadWriter formFromStream: stream.ScriptingSystem saveForm: form atKey: 'Painting'.Preferences	addPreference: #easySelection	category: #morphic	default: false	balloonHelp: 'Use click and drag on world to select objects.'.Preferences	addPreference: #maintainHalos	category: #halos	default: true	balloonHelp: 'Try to maintain halos alive as long as possible.'.Preferences	addPreference: #tabAmongFields	category: #morphic	default: true	balloonHelp: 'If true, the tab key can be used to switch the focus between text morphs.'.Preferences	addPreference: #generalizedYellowButtonMenu	category: #morphic	default: true	balloonHelp: 'Use yellow button menu in all morphs.'.!AlignmentMorph subclass: #DockingBarMorph	instanceVariableNames: 'originalColor fillsOwner avoidVisibleBordersAtEdge autoGradient selectedItem activeSubMenu'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!AlignmentMorph subclass: #MenuMorph	instanceVariableNames: 'defaultTarget selectedItem stayUp popUpOwner activeSubMenu activatorDockingBar '	classVariableNames: 'CloseBoxImage PushPinImage '	poolDictionaries: ''	category: 'Morphic-Menus'!ImageMorph subclass: #SelectedObjectThumbnail	instanceVariableNames: 'noSelectedThumbnail noSelectedBalloonText'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!Object subclass: #TheWorldMainDockingBar	instanceVariableNames: 'icons'	classVariableNames: 'Instance TS'	poolDictionaries: ''	category: 'Morphic-Kernel'!!Object methodsFor: 'graph model' stamp: 'dgd 9/18/2004 15:07'!addModelYellowButtonMenuItemsTo: aCustomMenu forMorph: aMorph hand: aHandMorph 	"The receiver serves as the model for aMorph; a menu is being constructed for the morph, and here the receiver is able to add its own items"	Preferences cmdGesturesEnabled ifTrue: [ "build mode"		aCustomMenu add: 'inspect model' translated target: self action: #inspect.	].	^aCustomMenu! !!Object methodsFor: 'graph model' stamp: 'nk 1/23/2004 14:35'!hasModelYellowButtonMenuItems	^Preferences cmdGesturesEnabled! !!FileList2 class methodsFor: 'blue ui' stamp: 'dgd 9/7/2004 11:58'!morphicViewProjectSaverFor: aProject"(FileList2 morphicViewProjectSaverFor: Project current) openInWorld"	| window aFileList buttons treePane pane2 textColor1 option treeExtent buttonData buttonRow |	textColor1 _ Color r: 0.742 g: 0.839 b: 1.0.	aFileList _ self new directory: ServerDirectory projectDefaultDirectory.	aFileList dirSelectionBlock: self hideSqueakletDirectoryBlock.	window _ AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	aFileList modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: 4;		borderColor: (Color r: 0.355 g: 0.516 b: 1.0);		useRoundedCorners.	buttonData _ Preferences enableLocalSave		ifTrue: [#( 			('Save' okHit 'Save in the place specified below, and in the 	Squeaklets folder on your local disk') 			('Save on local disk only' saveLocalOnlyHit 'saves in the Squeaklets folder')			('Cancel' cancelHit 'return without saving') 			)]		ifFalse: [#( 			('Save' okHit 'Save in the place specified below, and in the 	Squeaklets folder on your local disk') 			('Cancel' cancelHit 'return without saving') 			)].	buttons _ buttonData collect: [ :each |		(self blueButtonText: each first textColor: textColor1 inWindow: window)			setBalloonText: each third translated;			hResizing: #shrinkWrap;			on: #mouseUp send: each second to: aFileList	].	option _ aProject world 		valueOfProperty: #SuperSwikiPublishOptions 		ifAbsent: [#initialDirectoryList].	aProject world removeProperty: #SuperSwikiPublishOptions.	World height < 500 ifTrue: [		treeExtent _ 350@150.	] ifFalse: [		treeExtent _ 350@300.	].	(treePane _ aFileList morphicDirectoryTreePaneFiltered: option) 		extent: treeExtent; 		retractable: false;		borderWidth: 0.	window		addARowCentered: {			window fancyText: 'Publish This Project' translated ofSize: 21 color: textColor1		}.	buttonRow _ OrderedCollection new.	buttons do: [:button | buttonRow add: button] separatedBy: [buttonRow add: ((Morph new extent: 30@5) color: Color transparent)]."	addARowCentered: {			buttons first. 			(Morph new extent: 30@5) color: Color transparent. 			buttons second.			(Morph new extent: 30@5) color: Color transparent. 			buttons third		};"	window		addARowCentered: buttonRow;		addARowCentered: { (window inAColumn: {(ProjectViewMorph on: aProject) lock}) layoutInset: 4};		addARowCentered: {			window fancyText: 'Please select a folder' translated ofSize: 21 color: Color blue		};		addARow: {			(				window inAColumn: {					(pane2 _ window inARow: {window inAColumn: {treePane}}) 						useRoundedCorners; layoutInset: 6				}			) layoutInset: 10		}.	window fullBounds.	window fillWithRamp: self blueRamp1 oriented: 0.65.	pane2 fillWithRamp: self blueRamp3 oriented: (0.7 @ 0.35).	buttons do: [ :each |		each fillWithRamp: self blueRamp2 oriented: (0.75 @ 0).	].	window setProperty: #morphicLayerNumber toValue: 11.	aFileList postOpen.	window adoptPaneColor: (Color r: 0.548 g: 0.677 b: 1.0).	^ window ! !!Flaps class methodsFor: 'predefined flaps' stamp: 'dgd 9/9/2004 22:04'!addAndEnableEToyFlaps	"Initialize the standard default out-of-box set of global flaps.  This method creates them and places them in my class variable #SharedFlapTabs, but does not itself get them displayed."	| aSuppliesFlap |	SharedFlapTabs		ifNotNil: [^ self].	SharedFlapTabs _ OrderedCollection new.	aSuppliesFlap _ self newSuppliesFlapFromQuads: self quadsDefiningPlugInSuppliesFlap positioning: #right.	aSuppliesFlap referent setNameTo: 'Supplies Flap' translated.  "Per request from Kim Rose, 7/19/02"	SharedFlapTabs add: aSuppliesFlap.  "The #center designation doesn't quite work at the moment"	Preferences showProjectNavigator		ifTrue:[ SharedFlapTabs add: self newNavigatorFlap ].	self enableGlobalFlapWithID: 'Supplies' translated.	Preferences showProjectNavigator		ifTrue:[ self enableGlobalFlapWithID: 'Navigator' translated ].	SharedFlapsAllowed _ true.	Project current flapsSuppressed: false.	^ SharedFlapTabs"Flaps addAndEnableEToyFlaps"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'dgd 9/25/2004 12:04'!addStandardFlaps	"Initialize the standard default out-of-box set of global flaps. 	This method creates them and places them in my class 	variable #SharedFlapTabs, but does not itself get them 	displayed. "	SharedFlapTabs		ifNil: [SharedFlapTabs := OrderedCollection new].	SharedFlapTabs add: self newSqueakFlap.	SharedFlapTabs add: self newSuppliesFlap.	SharedFlapTabs add: self newToolsFlap.	SharedFlapTabs add: self newWidgetsFlap.	SharedFlapTabs add: self newStackToolsFlap.	Preferences showProjectNavigator		ifTrue:[SharedFlapTabs add: self newNavigatorFlap].	SharedFlapTabs add: self newPaintingFlap.	SharedFlapTabs add: self newObjectsFlap.	self disableGlobalFlapWithID: 'Stack Tools' translated.	self disableGlobalFlapWithID: 'Painting' translated.	Preferences showProjectNavigator		ifTrue:[self disableGlobalFlapWithID: 'Navigator' translated].	self disableGlobalFlapWithID: 'Objects' translated.	^ SharedFlapTabs! !!Form methodsFor: 'scaling, rotation' stamp: 'dgd 9/13/2004 13:08'!scaledIntoFormOfSize: aNumberOrPoint 	"Scale and center the receiver into a form of a given size"	| extent scale scaledForm result |	extent := aNumberOrPoint asPoint.	extent = self extent ifTrue: [^ self].	(self height isZero or: [self width isZero])		ifTrue: [^ Form extent: extent depth: self depth].	scale := extent y / self height min: extent x / self width.	scaledForm := self				magnify: self boundingBox				by: scale				smoothing: 8.	result := Form extent: extent depth: 32.	result getCanvas		translucentImage: scaledForm		at: extent - scaledForm extent // 2.	^ result! !!MenuIcons class methodsFor: 'class initialization' stamp: 'dgd 9/22/2004 18:27'!initialize	"self initialize"self initializeIcons.	Smalltalk addToStartUpList: self! !!MenuIcons class methodsFor: 'class initialization' stamp: 'dgd 9/22/2004 18:27'!initializeIcons	"self initialize"	| methods |	Icons := IdentityDictionary new.	methods := self class selectors				select: [:each | '*Icon' match: each asString].	methods		do: [:each | Icons				at: each				put: (MenuIcons perform: each)].	self initializeTranslations.! !!MenuIcons class methodsFor: 'class initialization' stamp: 'dgd 9/22/2004 18:32'!startUp: resuming 	resuming		ifFalse: [^ self].	self initializeTranslations! !!MenuIcons class methodsFor: 'icons creation' stamp: 'dgd 9/22/2004 18:28'!base64ContentsOfFileNamed: aString 	"Private - convenient method"		| file base64Contents |	file := FileStream readOnlyFileNamed: aString.	base64Contents := (Base64MimeConverter mimeEncode: file binary) contents.	file close.	^ base64Contents! !!MenuIcons class methodsFor: 'icons creation' stamp: 'dgd 9/22/2004 19:51'!createIconMethodsFromDirectory: directory 	" 	Preferences disable: #showWorldMainDockingBar.  	MenuIcons createIconMethodsFromDirectory: '/home/dgd/'. 	Preferences enable: #showWorldMainDockingBar.  	"	| iconContentsSourceTemplate iconSourceTemplate normalSize smallSize |	iconContentsSourceTemplate := '{1}IconContents	"Private - Method generated with the content of the file {2}"	^ ''{3}'''.	iconSourceTemplate := '{1}Icon	"Private - Generated method"	^ Icons			at: #''{1}''			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self {1}IconContents readStream) ].'.	""	normalSize := #('back' 'configuration' 'forward' 'fullScreen' 'help' 'home' 'jump' 'objectCatalog' 'objects' 'paint' 'publish' 'squeak' 'volume' 'window' 'project' ).	smallSize := #('smallBack' 'smallCancel' 'smallConfiguration' 'smallCopy' 'smallCut' 'smallDelete' 'smallDoIt' 'smallExpert' 'smallFind' 'smallForward' 'smallFullScreen' 'smallHelp' 'smallImportFile' 'smallInspectIt' 'smallJump' 'smallLanguage' 'smallNew' 'smallObjectCatalog' 'smallObjects' 'smallOk' 'smallOpen' 'smallPaint' 'smallPaste' 'smallPrint' 'smallPublish' 'smallQuit' 'smallRedo' 'smallSave' 'smallSaveAs' 'smallUndo' 'smallUpdate' 'smallVolume' 'smallWindow' 'smallProject' 'smallSelect').	normalSize , smallSize		do: [:each | 			| png base64 contentsSource source | 			png := directory , each , '.png'.			base64 := self base64ContentsOfFileNamed: png.			""			contentsSource := iconContentsSourceTemplate format: {each. png. base64}.			source := iconSourceTemplate format: {each}.			""			self class compile: contentsSource classified: 'private - icons'.			self class compile: source classified: 'private - icons'].	""	self initializeIcons! !!MenuIcons class methodsFor: 'menu decoration' stamp: 'dgd 9/13/2004 19:52'!decorateMenu: aMenu 	"decorate aMenu with icons"	| maxWidth |	Preferences menuWithIcons		ifFalse: [^ self].	maxWidth := 0.	aMenu items		do: [:item |			item icon isNil				ifTrue: [| icon | 					icon := self iconForMenuItem: item.					icon isNil						ifFalse: [							item icon: icon.							maxWidth := maxWidth max: item icon width]				]				ifFalse: [maxWidth := maxWidth max: item icon width].			item hasSubMenu ifTrue:[self decorateMenu: item subMenu].		].	maxWidth isZero		ifFalse: [aMenu addBlankIconsIfNecessary: (self blankIconOfWidth:maxWidth)]! !!MenuIcons class methodsFor: 'menu decoration' stamp: 'dgd 9/22/2004 19:53'!itemsIcons	"answer a collection of associations wordings -> icon to  	decorate  	the menus all over the image"	| icons |	icons := OrderedCollection new.	" 	world menu"	icons add: #('previous project' ) -> self smallBackIcon.	icons add: #('select' ) -> self smallSelectIcon.	icons add: #('jump to project...' ) -> self smallForwardIcon.	icons add: #('open...' ) -> self smallOpenIcon.	icons add: #('appearance...' ) -> self smallConfigurationIcon.	icons add: #('help...' ) -> self smallHelpIcon.	icons add: #('windows...' ) -> self smallWindowIcon.	icons add: #('print PS to file...' ) -> self smallPrintIcon.	icons add: #('save' ) -> self smallSaveIcon.	icons add: #('save project on file...' ) -> self smallPublishIcon.	icons add: #('save as...' 'save as new version' ) -> self smallSaveAsIcon.	icons add: #('quit' 'save and quit' ) -> self smallQuitIcon.	icons add: #('load project from file...' ) -> self smallLoadProjectIcon.	""	icons add: #('do it (d)' ) -> self smallDoItIcon.	icons add: #('inspect it (i)' 'explore it (I)' 'inspect world' 'explore world' 'inspect model' 'inspect morph' 'explore morph' 'inspect owner chain' 'explore' 'inspect' 'explore (I)' 'inspect (i)' 'basic inspect' ) -> self smallInspectItIcon.	icons add: #('print it (p)' ) -> self smallPrintIcon.	""	icons add: #('copy (c)' 'copy to paste buffer' 'copy text' ) -> self smallCopyIcon.	icons add: #('paste (v)' 'paste...' ) -> self smallPasteIcon.	icons add: #('cut (x)' ) -> self smallCutIcon.	""	icons add: #('accept (s)' ) -> self smallOkIcon.	icons add: #('cancel (l)' ) -> self smallCancelIcon.	""	icons add: #('do again (j)' ) -> self smallRedoIcon.	icons add: #('undo (z)' ) -> self smallUndoIcon.	""	icons add: #('find...(f)' 'find again (g)' 'find class... (f)' 'find method...' ) -> self smallFindIcon.	""	icons add: #('remove' 'remove class (x)' 'delete method from changeset (d)' 'remove method from system (x)' 'delete class from change set (d)' 'remove class from system (x)' 'destroy change set (X)' ) -> self smallDeleteIcon.	icons add: #('add item...' 'new category...' 'new change set... (n)' ) -> self smallNewIcon.	""	icons add: #('new morph...' 'objects (o)' ) -> self smallObjectCatalogIcon.	""	^ icons! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!backIcon	"Private - Generated method"	^ Icons			at: #'back'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self backIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!backIconContents	"Private - Method generated with the content of the file /home/dgd/back.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAD30lEQVR4nO2WXWgcVRTHf/fOzM5uNpu4/TBNSzUGWx+KUqwfxSRqbf2oYB+lQkVBFC2CUPHRR0GoUIv4IFYt5EGw9LWittKmaaFa2oC0FCIhJGpsm9jsbrI7szP3Hh8mH5smaTbqk/QPw8y995z7P1/3noHbqEG2K/VAc4f30L/ZQ9cj1Px4+p6mzvTXWlSfVfrnxi7/wD8lVEsJNHX4b4tiP5CumRZEPVE6E5z+zwizj2ZbtBd/Beycnsvc6xFdM8RFC9Afa7290lMZnlHaid9coqFqMg0pp1Iu9HKjLsJcp/8C8AWwGsDJafI7Gsi0exR6KxTPBbXiJSA19dy8XwUYAfm81FrdzxGMswDZu8CXQBYFjZt9dr3xPFs2PEx/8Qp2Uqj0R7UqPuAuYrwH5EHt8Ce8VHUoPlErpHKd/kfAPgCnUbN6V453tr3HW/ft41D/Jxy8/CFSFYrnA+Ixi1iZVXYV2lfo9NTbVyhPMX6qgpm0AEastzYh3ESqMZ8+rJCXALwVDm2713DwqUMIwpHBbk7+eRwjMQDrs23cn9/MSn/1jFsCVG1IYAICUyEwASPl37nQc5EbJ8qJUSJ7XICmfLpbkBcBUq0u7bvX8dqmvRy4/AFXCpfmxakYjbPCX0V7bgN3ZdtozazDiiWwAaGpMBpc55fxPi6MncPJzZ480TytmrrSe0SkG5LiWPNyE3fmWxgNri2QkuUjGIy4fnRiOvA/uYhsnV5s2JhCZ1R9ZAJiBTGAEcQmYyyIJOvKARvW5BkpuUrsYVH6TcCJRmOiMYO3wln0hJoJS/V6hNj6PBQzx8aiEw7bP1J3u3kFW+OCJbXWwYYWJ6NRznzWcCSas8mShKEQDMTTwx4NkHHC94EBgPEfythQqAxXicbiOZ7EJYPEsyFCg3KS8leuSr6VSsJahWjUUjg9e0ko5NSMC82d6XaL9ADrdIMm/2x6Kg8KN6dBK6IbcZK7KhTPhJhJO9eAW8PiplpmarbQGwwgbAeu2rKl8GOAUiBGiMYN0V8JGcDE+ZC4YJZDFin4rHSyNDovSY0dqU1KqZPAKp1W5J/JzGliylGMHp2sCZN6RWEuicIR4zpoHNGitVFVo03ZiVW5eEc4zLeEifwCyD7mbdZaHwNalQPN2zI4jYlodM1SPJvkReC7id7wuXrdhEUa8OTZqM+67oPAGTEwfrxC6VxIMBDPkE15981yyBKdW2ELXlPG/1hg781LAkMTuXDjdKjqxbz2NAcj2HDIHPPXe4MonmS26/+GVq9WT8S/LocM6vjFmEbukdxKUuHrKGxDpvrp1e+ZXFrrNv6P+Bvls6OLnK0LaQAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/13/2004 20:01'!blankIconOfWidth: aNumber 	^ Icons		at: ('blankIcon-' , aNumber asString) asSymbol		ifAbsentPut: [Form extent: aNumber @ 1 depth:8]! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!configurationIcon	"Private - Generated method"	^ Icons			at: #'configuration'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self configurationIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!configurationIconContents	"Private - Method generated with the content of the file /home/dgd/configuration.png"	^ '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FLRfkJjZC/8BvUBdOSBHQOgAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!forwardIcon	"Private - Generated method"	^ Icons			at: #'forward'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self forwardIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!forwardIconContents	"Private - Method generated with the content of the file /home/dgd/forward.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAD5klEQVR4nO2WT2xURRzHPzNv3p/tbrsLtKSIFqpNMBJClDQKbNsDsQdRYyQhHCCG9Gb06MELJt6MiSdOxgM3RI+a1FQDGJCiaEIU/FdEbU0ptLrd7m73vbdvZjzsbqVNhaXeiL9kMnm/me985/udfw/u93D+Czibd3epLaqrNqlvtoqRayXrGAjeNMivpRWXO/LByexg0NsKTqyJbI/bb6UcZ7lDobC8tvBFdPzeCLfj5bLBpsQxaZ04xYxfLc6epQJYgOxg0GuMHQW2ORlJ0KOofB/fPsKoqamjlS8rq9q8RJjJ+y8LOAZsXHUiqyl9KiC7N0U4mVAYq5AUTbNpFhgpnY8+WolxADr2+q8gOA5kWiUDyOz0cTsdnt9+gMf2bON6YYJ4RgOkgUN+jyrHk3p8OeEuXM9VnwKe9AXrhtOkHvHwe1z8zQqvW+F1ObgbGmV9vU71uWR2+AhHMPzAs7zx+Ft09q3n2/RXLP4WYWMrgGH/IZWNp/TYkqWZgWBIWHsWoOPJgP5nnqCvYxuucHGlhytdlHSXyS7G83w3f5nrpYmlXH/nHg5uPUxX0M2rZ44ycXKK2qyukyDeXyiEL3GVWEnL07YBUjmH6+VrbM/tZPfGAbpTm3GEgytdAG5Up5ks/0o5KTNTnV5m76W5C1yau0BPupfDO0Y46Z3g51O/E00lWOyh9pyXlIiPiI58cMpiDwJs2J+m7VGv1SW8Y2S9HIVSgZkTC+hyYzMJ+4Ky2FKzk4ksSVFjk4bmho9CClACIUE4AuHU6zttr2I8j/QFwVZF5Urj2BgxpIBis5O1lnguaU2CAG+DQmX/5XY0EM8mxLd0MxNi7LsSYZcOqA3t6uDVwkKtoBvXwQquqqH6R0w0nVBrEgqOlcbjH6U09nSzY3E8JJpMMBWLjeuDCikQanlpWmm1JVlYUoDVlvhWQjhdw4aW+dPVZtPnpe7onYYxyPa8fxPobFWccCE3lEJm6swq54ABXdZYUx/2z48rkACIb1QQ7it8Vl86B7DBFhUC/UBbS4wGarOG4GFV/wwtJrJ1R4Sg8Mli3SG4SuztK56LC0uTvX2cbJ51SS3tmZRxgwQZKozQQksttUiElm7Ya4Q8D/gAnS+mseafRbQR/DW2CBoQXNM4g4vnFm8sc6dVG5vRnvffA0YA0jt9gl4HBNRmNAsXo+YmuqKQ+wvnq5Mr8ff84qceVKEVHAGo3dSYsmXxh5jwl6ShQHzQ1hY9N3cmmVsNv6YHuH3Au4AVu1ekNYLXS+eit++EXdsvhhFHwV68LfOTlWL4bmSwRoVNbGbAOyCsCEubolE+RN8d8n/cD/E3+N6Gyb/E5QUAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!fullScreenIcon	"Private - Generated method"	^ Icons			at: #'fullScreen'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self fullScreenIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!fullScreenIconContents	"Private - Method generated with the content of the file /home/dgd/fullScreen.png"	^ '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0N9PB+exCuDf3d6HA+fU4WgAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!helpIcon	"Private - Generated method"	^ Icons			at: #'help'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self helpIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!helpIconContents	"Private - Method generated with the content of the file /home/dgd/help.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADOklEQVR4nL3WS2hcVRzH8c9k2sZJmhqTojVaLTHWRSZqS9FuKkKsSqCrLkR3bt2IiBtRRBCKuFWUbqy4EBR8ga21IFJRqRGbKvaZl02TNDHtTJ6dPGaui3OjQ5zOTDT4g8O9538P53sev/M/l/9ZiUrfO+jE3gJ70YL1WMjTjWNJ3v2Nmf8M7ODpAi8maLsTO9GGrTiFLzGMAkMZnh3lc+SrBf+lNLek+SpN1En0MVGeKCpRDhLtJEozv5WXsWnVwO3sSRO9TpS7Dqi4fEL0IFE7kymeQF25/pMrA1cYauapzTTvK4oXhI2qXdH+LpzHJWpv4MarnA7VKoHQwPww+3YjgyPCBn0Tl4dQU9TBWcyHwbYWOD3HCCarBmbpaaLrMC3HMYsx9AiGeRxNRe2PC9btDSYczvIH+kr1XVMqiPwIT2Y5OMLYd+jm5yyzDwhuXdZUGKAkUgG8BetQvxqgKXoHef4Cj43yzBL9jdS/tqLdifi5iByWmIhDqVUBY80scmoLiTr2H8CtRR8z+CF+HxeMlQsegmv/BljTzqtJ3jpAYk/Rhzw+CgALOBOAo6P8giVh6/+hdeVoaY7exCMv4dGieA4fYDCun4ynM8khRPg9fq4OiF2H0FoUyOI9wbUFwbXjmOeLYb4Pr6UdWhFYIHuZxmXgGXyKaczhpzAr1/iwj/fjWZ0UVrmkyu5hxERvUX0ghk3iW2SZneTNGJbHj/52aUlVWtKLfewiLN9SPPTlMsILGYbiardg3LIqC4zo7xGGf1GwXVLIpzXYRDoTJntOOIoVVTK1LauBySkePkFzDhtxWXDEHPlFzmVDqq04s6qAWcYn6N/A6DR3D1A3Rn6W3AKX5hiaCTfDwJoAha0bn2IiRWo7O56jpov1CZomuK+Btqt8Hca3RrqXmzvJTRVdvEtEb8Q3fguvoLGaviqlNrBAVye1DUWxJHZjG+rYgdvWDIjNuRLBxQCTCDdD2V+LVQELHDtKNFIUmxFOeZzWzrpOsl6pSqYBVxir557DdCSEM/mZ8AfQy/lB3on4NbDXTqlW3m4ncz9RB7NtHNnAftxebSeV/rxLtb9jI9tmQv6eFlJbVcsJfwJYKDRpDcPnEgAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!homeIcon	"Private - Generated method"	^ Icons			at: #'home'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self homeIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!homeIconContents	"Private - Method generated with the content of the file /home/dgd/home.png"	^ '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AGTL/Zw5bH01AAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!jumpIcon	"Private - Generated method"	^ Icons			at: #'jump'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self jumpIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!jumpIconContents	"Private - Method generated with the content of the file /home/dgd/jump.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADMklEQVR4nO3WX2hWdRzH8dc5e3JYBKYDcw/b1FAEaeKETUmxqLwWLIjCP13VVTdFF6N5I3hTREgRSBd2Ew4iQ29CbZkudRlTVg6lUsbcs3Sbf6bWedazc7p4Hvfv+eOKugj8wo9zOHx/n/f5fL/f84cH8X+PYLaJbaxES8i6hLUJYcyZkOPo2sX5fwXYysIUH2HLxKYwvy2Jk4m8W3zXx/Yv+fUfA9vYFgTBB5LksZrlDRpffk5dyzLpNQ3EWQM/9Orvuqhn/ynDP1+TC0SZxO597PrbwJ1sx76gKrT+ra2efmer1Jxxkog4yh8L57nojmO7v9K5p1MSJ86y9xBvIDtTt6oUrJWFYRAcCqrCua8e/VjT9k3Cqj9LwiSRMByzdGOtJU8tcq69Vw0rL3NllLOzAj7Dp2ja8PY2TTs2TQFkSQprKriw5qXnyEVZV7quphayopsjGKkIbGNlwIc1yxu8+NlOYVjOWXb69cKxvmWe3oN9qm6MLcgQX+db5O7phyUMtkDjK89LPRRPCs8oY5HjQl4qNaZxSy2oZzmenCpeBAxZB3XNy2YIl+7fdJf5vLqmh0GaWvlVHpiwNggD6TWLS4iV6F9RL7PSq6oFIQtKAFMlSlogZ4mDosEo2b8SvSzc/DgWVXQYcDqJEwNnesuLFTmefgMDZ29KYoYZRFQRGHMK+rsuTBcrOziTpbx3rb97FAzyGwYqAtEFPftPyv1xZ1Isvk//CqXORZGeA7fBZTIzgUXP4XGG1rM6un53RZIbs3RjesZgVJ7YjveGXDgSucpPR+nBYdys5FDCa3HgdueeE/o6fykz/tmikvedvqVz723jgbuf5z9b3+eNVnAIJ7i7gUyQ2Hyu/bxclFXfPE8YjpV0lstGOt695mBrflhO8nUvP2Kf/KRORMXP05u8Xh14P5WYW/PEoxpfqFW3+hHpVdWFabyhv3tUz4FRw5dyxgO/n0wc+4Zz+GSmu/sC4SUW19A+n+aJTYVGJPFk3iAXvqBjhF60Y7iU3qx/MZ5lcxU7HmdJ4Q1ihMwAmcsMXso/c4fle5eU05k1cEr+fJOvrJT86GcwhLj81gfxH8VfzYgq0uLDBKMAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:35'!loadProjectIcon	"Private - Generated method"	^ Icons			at: #'loadProject'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self loadProjectIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:35'!loadProjectIconContents	"Private - Method generated with the content of the file /home/dgd/loadProject.png"	^ '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3vVJoA/1b3wkQYtnD0gLAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!objectCatalogIcon	"Private - Generated method"	^ Icons			at: #'objectCatalog'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self objectCatalogIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!objectCatalogIconContents	"Private - Method generated with the content of the file /home/dgd/objectCatalog.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAD5klEQVR4nN2VW2wUVRjH/+ecmdmd7c7e2qVbuu1ulrZWoNUURYILSiKoBcRIN+gLUUKMifLiAzHEhHcVtInaxJQYY0g0Jo1CEBXaKBA3RhMp0Ai10NpUbO32uu3u7GXO8QF6o7NLL5FE/8nJZL75n+/3zZn5zgH+S6r0s+cAVN4z4NqQfLE6KLcDkBY6hy6D56oOSIVHDjjvC/hYI4BCACW3rznFlgh7oNTL3n5jr7ZuZ1i1MEYq/F62v6pcfnV4nNfHE6J5iXnnyVnooH++/oI22P5psRBR/5yxdb21D0BFvgSLXdIxVSGHO25k9LLiuYtz/NtEouN6+n0AXfkSzHzsNRE75ExRTienWVxq6euLGc19MeP8roND35xr8ganHrsd1AKA363iGSDVG2pDgffKfN6kmTF68aoxDPhv317jQowCwMnzyURPvyEatqgFTo3tuTnE37ob9JZqdr7Y9PkpMT4RNx2hp1/unm3fsFZpPxCxDwRLpEbNxp6tKpdaHQUkBsC6sDdcpG7GjJ4vziYP9Y8YpwAg3osvARAA4l8B9vYbu0zCeWHA8hp/SbrnwDlLeibanh4ajRtmxoSeUhaa1PMIHGlJeYJJdLshcHzinN42H8jR1tIa3dPSGjXPIpDIB7FvUlYTTupLKtyRVXUrHpKLJUrdDD80XrEDmAaShVadT1rYuu+x5+8/pvgtSExQ9FwbQurvNIrXSPijc0D/6/q4C6eRmvuGJrIBz/goi1AC5yBwcswwPgaQvdPHCf/F7rEi2taD0Stjv/E0PyEovqMZ7ROtzuqfaNefiiP9VT6WJUDY94cs2shlrVh0OXziQ9WdCFGpA8BKEz999HBVMniwUGhh676poD2svFnzUalw7bC1TMVMj6dyyj44qrq2v2a121dQBg+heFhS5K2Sxfu1kdo4KvixO6aIuKJvKQ97QrFL8f50yDirlVqaJI1FhMxdkkZCcZo6gj5kTdvCAbptt6LO26JWMxkPMjmAmT31ln+TpYnIvC4ukiAE6zVDXaf4pP361UzAVqtArVIsdkmpB8z7ULESknM/rCFygQRUT8M2WyrBySt6Z9YtNAHZy2pJlg/wDM+4nrRh4tcURs4kkhDEB5j/NOlRYeQ8Zi6LzGQW6Jyuzkj1Z51qrGhzQVHyRgaGLiih3GWM8HBiiG8EEQOqLX1i+AImgRxtUUZZ87tW597dik2eHe/iWWybHPyp2zA2zI67HrcGeUbsAEU3Eakfxy5gJFfBuaSWE/bzO6pzvNdRImLOleIzmye1irLfAQQXm2y28jU+8TD2khukQQDapOCnBzg/CkBfDvD/r38A0MR5I7Mls/AAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!objectsIcon	"Private - Generated method"	^ Icons			at: #'objects'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self objectsIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!objectsIconContents	"Private - Method generated with the content of the file /home/dgd/objects.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADhElEQVR4nMWWW0wcVRzGv3POXHZhZdldoAudRkzRQFsaxBpTNcUtIMZaTdoQBa+tsYRYS2mjD/riiyY2pkL6JulTaUgkaayJ8aUoohgfWlOlGiNqTY1chr1Bmc7uzuX40E4i7A7Nsqt+yTzM+X///++cyXeSAf5n1Ycp+2gDoVcrCVUVwr4sBXvxXyEFKO0NE5o8UxK05/zVXPdv5JO+Kr5bkBcrCZkAIBUNJgHbFcKSCX8N5+VK1nNYLtVCoIPFYBEAqCbsq6GSwMN7RE9Ok845apdmr6vc3gxgoRAgBYA0+NZ2UXY1eQlBq+CxBKC5EJgDFEWASjcP66o6yrwcUIoBNGxAi3J7TePXVlqjwFQxgCAE50+klnQ30xXLwPec2xsU5bZAr4SuynJ62Zm9WgwANM4//9k2D4Qo8TUzaYXxJ8vAXi26aFZv6tnSsr/zrsad2tWpb/9yA4Yr2ECkWW5Sk7ag6Xx8rc2Fqwgbq6dC8nXZd+N9r998XPDEA4SqAtDumNq6+59q7e5/s6OzP5jrALU1bMacVPj2OnEBwJbVhqykSMBWC2iWgJABfGcCFwHc+Kdn76FDJfpyaQ/n9sLYyOBZAPxWaf/BJ0o/PP1WIPjLNRN7jkdVRolOCBBdtMr0NHl17WjeRq1PH7snOj99LDE9ETRSyzt3NEieD476KzZvFFb4/pg18eAr6rXZmL2tICAAhMrZ5P310gMfnwgyWcweZ1rAfS/Nx3741egAcClnkvJRLGlFLk+nhx49Ek2qieyrNXR+2fhz3joN4BLgEt08lZmL2b0/zvgOtPUltNXFhlpR9HrJJue9GEB0dr4tNbU935hOm1Fn7crvBgyTY1eTDNjY7bAE1yl5KC4lj1siTlGCl1MZjoPvJBa/uJieppTXtNzrkcMV9I6ZqLULwHjBsNauvp727iN3A4BSxeYb7hRioTJ6+FaZAHiopoINl/uEiLOwQuGWF0ZlWWxyA+ipzG/qxJnHACDyXN+TDGTpwvDAOABUBdk5NW69i5t3N6eyPiljdNvUuYE6t4bGfUcBAO3P9O+wLbvswsjAJ05NjVv73PocrSs0jzz7msKJHRkbGRzOtzd/IAdlnPYGzJmTefeuB0gAJhH7vdHRUes/AXIC47Ozp5bWA1sXsFBlpTRjWJmuN07OuTVoeqq4wIV4rOPTb67n/l8EAN3OFAL8G3xJPtRdAsoRAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:35'!openIcon	"Private - Generated method"	^ Icons			at: #'open'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self openIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:35'!openIconContents	"Private - Method generated with the content of the file /home/dgd/open.png"	^ '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AAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!paintIcon	"Private - Generated method"	^ Icons			at: #'paint'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self paintIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!paintIconContents	"Private - Method generated with the content of the file /home/dgd/paint.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAEK0lEQVR4nLXWW2xUdRoA8N85M53O2Av0RgustJZCKASvUO+E3aBFN7IbWGNMdqMmPGlMdC/ZGB/U+GI0IfqiPigvGLImXtaYdReMAomu2TXBFYGFRSUVSgstCKWdGTpzztmHKaQhiEaHLzk5+V++/M53/l9yTsqlibCHNS3kTjB8iYxKLKS1my39c7JJX0Mm6eHFS+mF3ezYsLY7GXru2uTdh/qSK3PppJtl5zZUU5vPH3ovz65Yv34Nde2SoMb1S2fBLVUHu+jC0w+t7aT9GtGZgiihrSUnYEnVwRRPLOnM1d7y81uJI6WxEyKhQqEMcVXBLhbhdw+u6WB2H2PfiGLKAvliCSarCqb4/fzZtambbr2e2kbGBsRxIBIaz5fgZNXAn5HDPf3LZjL3hsrkVIURJvJlAfurBmZYi8Zf9V9FXQeTp5k4WqkwCAwcGRezr2pgwAOLO3Nm9VxZmRjZDaKEdFA2li9FuWqB3czDL1Yvm0HTwilwVwWMA/l8Hv69h/GqgAH3Ibhz5aJKs0wMkx8Bcczg0VMCtk7P+amv9N7u2bVauhZXRsd2nVuIksCufcclvF8V8Ao60XtTbz2N84hKjHxxbr1Yju3+6tuxy/lXVcCQ1XDj4gZSGY7upFw4t35gaFyS2Lad8vS89I8FcUcQkCSJ/25/22XRqHmtKUFAHLFt1yi8d4EH/dHRPP/qa3zWer+O324ycPUz/rS9x9YvSg6PTvpk38lCwuvnJ12wwn76WlmXITvI5q3nncNUDDe3t+vu7dXU3KwUxxb03ezz44u8smmjhDe/5tT3gneycCn/XEUqwB4eDvnNP3jrvK3RgZ07fdLRJB1N+vqbQUE6LYoiA0fGinjhQsUEsJ7NXdz2Hx45zYcd/HUWc7NkM9Tt5tPXWXE2qYdHc3W1G5bd2CXbkBEFjAyfduxI4tihwxNxFN31FdsuBKYRNLJ0Di37WXiKkSFeHa6c7ztbGOrnqrMJK0kf4vFV110hW5NRnqQcJrJtDUYPHRZH0RvfhZ0Fkw0sXUl9LS+sYktW5QO2k+dv574t0w7/NEEYBE1zk6xykVKqApbDREdTncFD39Z9F8a0Lt3OeEDbBzz5N/5yBvdS28Lm1dwNS6g/yfI4STaOHJ/QnE9pyodmFkKNxVAuDqH4g8DbWTHCuq08FfPnUVyGXxPW8NrN/LHIwTDwcYqP3th7YHjGRKgtn9IydR05Oibg04uB07s03cqX/eyYw7XLpyZbsIbMOzy7sr3bL8MOj536/OVEkJ03lnGmJlFIx947M+TgyMn/Zdl4MTCYPuhndT0vddLVgAbUIYMU/p6qiR+ZsTxcUMgp1sSOZUt2ZE54+8SAwfzEjjQP7OfgDwbhScKPmR/SENIQVe71CTPRdpzriql0thCVUzgcVH7lN33J3otBZ+P/SNx4XWnWkNMAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!projectIcon	"Private - Generated method"	^ Icons			at: #'project'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self projectIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!projectIconContents	"Private - Method generated with the content of the file /home/dgd/project.png"	^ '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'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!publishIcon	"Private - Generated method"	^ Icons			at: #'publish'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self publishIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!publishIconContents	"Private - Method generated with the content of the file /home/dgd/publish.png"	^ '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psB/A9WZpv0u3eE+AAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallBackIcon	"Private - Generated method"	^ Icons			at: #'smallBack'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallBackIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallBackIconContents	"Private - Method generated with the content of the file /home/dgd/smallBack.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAB9UlEQVR4nL2SwUtUYRTFf/d7M2/ezDiNEwgyFbmMIopEF5aDEOKuTdsIat1S2tdCiKRVG/sDWkS0KagBM7AgWkhQUBAFJZo6CjrjzPjem/d9t0UYlShR0NndeznncjgH/hHebofi6cxous8L4nm7upeA/L7Ij+R7TSe5jXBeoW0sJxovo49/JFA4E1wGJlNFKRUrWdan27gtXVHlHoIz4Cv4KA0xVBvPo+p3gRFShcS/A3Kp+1SeiSs3mHx/ndWZOs3XEXiCpMD4gmQEHHTWbKzImJT7yTWymQfGMHb4XJkLYxdZaH3h6dIT0ibNyf0DHO0+TtbLoTgacZ3q4kPe3vqEjbgrheHMTZTx0miOvsFDrIW1HT67/RK92TIAC615mskmX6fq2Kb7kFKVsqD4ZW8HOalbXKSs2BrLrgaqiBEwoB0FsMaJGQc2mnMRcS1BrQLgQke8lpBsWmzb4UKHixQbOmxLcbECLAtAVyWo4PRxcTjI+T0GL+9hQwcKrTcxrqnYlsO2dfvzdoZXf8SYHw7OGtVHhcFM4B/wQKGzZGm8ihDkmgqLqpo2kFIkNE4/1/1o5pcedFWCiji97x9M9eSPpNl4toVa3m2+iI7tViTz89CcDWcTY/rjBTu3Pr2FWlRUJ3Yj7wUpVLJD+4bSA39D/r/4Bkux5LIwlMbWAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallCancelIcon	"Private - Generated method"	^ Icons			at: #'smallCancel'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallCancelIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallCancelIconContents	"Private - Method generated with the content of the file /home/dgd/smallCancel.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACC0lEQVR4nK2RX0hTYRjGf+d85882bWZMESICCSHOaYu6TIksRwRCXhgUOLqWsn9IlFAQ3YRSoFTQWEFGeFUXBd4FQVC3zrrJIOgiglzTOd12tp23myY6XBfRe/XxPt/zvs/3++B/Vgx27oXdjfQ9EI5C+8aeXjs4kDhu8zVu8dmFvi2Gdx01WThh892F85vELohctPHKvTFZfvVUxrYHSg4cqekuREe3mdnl6UnxBnrkWgDfgRiAAaCBlfOp+Ok5U31ZYHTmiVUaTMzqK+W4D8X+sPnm6nSySfM89A/v+eWDArUpxT44fM6i6LUhK8k7svTysYwEVeFmi1VYev1McjMPpdyhZMTGdyBR82kbhzjQe8xmdqJFswr3pvA1DVpb0TMZAlcucDnr+289hubhecOfcKHvko1X7VCSn7olq+PXpdSuy7BFxYVT9feN+oYG5i6FplerlMduoGmgTKhAWYdvDTf/eUL//RAVaUN+NCPzBpJWSCaMFCLIWZN8FA40ij7wqIlqzZw2kCGDwoRNNa2QbBjJR5CEyVIU3PrNh1IbzPMGcsZgzYFuB05PBvDTClluQXIRZNBg8SCE1hlo0OoY6ItF+FmE21D4WCH+Cd4BJIsErCAp8midYehU7JirEALW1lOcVKReNCODilUHurfgMzweQB4EkRjc3ZJDFHpciP4F8v6GEP+1fgOfrL0AYYB91QAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallConfigurationIcon	"Private - Generated method"	^ Icons			at: #'smallConfiguration'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallConfigurationIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallConfigurationIconContents	"Private - Method generated with the content of the file /home/dgd/smallConfiguration.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACmElEQVR4nHWTXUiTcRTGf++7XrepW7VpogNtSU0oVNLoJisJkvVhTcMEiREiBN2IBWVZXkSIZPQhRiJFEDLzwpEFRVniXURQWSCjFU0ZSPZasYZB7j1d6NAsn5tz8Zz/c87/POfAAlYCrYCD5ZEPpP6PsFut1jcdHR3i8Xi+AUeW8GtTUlJue73eWVVVewBlMakB9/r7+8UwDAmHw9LQ0CBAF4CmaV0+n282EAhIMBgUp9OpA+uSj9X5OBwMBkXXdeLxOLW1tWia5gEoKiry19XVmex2O21tbbqu66eBnUB2UuA38Kivr+/x82fPmJ6eRtM0bDabG7AAislkIpFIEAqFvhcWFl5obGy8BVwElORfFGC/y+UKFBQUpLrdbmpqaqiurv5aX1+fUV5ejtlsZmZmBkVRMAwDv98fjcVim1fMCwgwEo1Gt0ejUQdwTlGUsoGBgYyWlhaysrJwOBzk5OQwMTFBc3NzJBaLXVg0ggU31jjTewfvNEmtd5M0NTXJ055u6dpSLPlWi5GXl2cAQ4CXOdv/wq7jR3ZM//rYI/LwoIydL5HczHS573JKyF8gnx4clWKPPQbsA5KdowJaVobt5tuh9qHOk9tWm0fukpj8weVXM/HxqZ+RKQtsKM3ErUYZ7j+Vvj437RaQu7jywdHBBukL9Mpk92EJ36iQzFWpT4ADgA8Yfd9WItJZJvLIK19eXxJXpmUccCUFDl09u1v0QJW0+kvjwBlgI2CaX7IKVWUs3LFlTuRJpUReXJRVthUhICNpYQtwB9jDv7eQAuw1a+qHiStbRTrLZPzaVmn3uQW4sjjRzJIdX8JVplnUyLv2EklcL5Nj27IFOLFM/n9hAaqAsN1iMoCXQNpyFZeDlYXhfQZm/wDvmfZYAyOuUwAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallCopyIcon	"Private - Generated method"	^ Icons			at: #'smallCopy'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallCopyIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallCopyIconContents	"Private - Method generated with the content of the file /home/dgd/smallCopy.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACp0lEQVR4nHXRz29UVRjG8e977pk7HTpzOwPtTFqbWGscWOiGuCCAhI1oMNYfCzcNCQuSmpCQ6ELiwsjCBX8BJl0YV6xYKQsSQgIETNCMxhJDm7SRqdg6pUwLzHRm7r3nvC4KiLW+2/M8n/ckr/A/c+TIsf52tm8sMOZFDxXV5MLN7755vDVnATk0MfWBwoHKUGn30M7S+I7+3AuFfD6KogJRIU+jscKlKz+MAV9uBeSNiamPD+/f+/WxyY9wkmWj52l1Hb1EcU5JvVIdSjlx6ouLcRJOhpl0TPDF63uHb3DmjLdA6eD+fXRdiPMer0pjaZF6fZFmc41Op811El7dM350IMo/LEZ5lhoP8D/PTd2AaavQiwo5dmQNXuHylWs0lhf58N23KO4cwqnQiZVO7EySKqlTImnyy+mz+4Bpa0R7Lk3IhZvAo0frvHf0TQqlMrED7xUj0JcxZAJwXqkUB0GoAlhVE8e9Ln1PgNAGFAfym6AHr4r34HQTcwr9uQwDUX73E0BbrfYGWSt4hWwYoC4lmzGo/gN4VQJjKOQCcqFhpDI4ePj940Ur+KXG/SbWCoKQzQTESfwMVBUA+kJDaOXZ+UZHytxZqFetC+Teyuoa1gjGCGGYod1qY62AboZDaxD59/1HR8rgtWrC9fjPldUmgREEKO8q8tf9JtYINhCymf+WAUaHy6C8Yq5e/ba72lxfe/pQKe9iubGKESEw2zSf/4Fo1QIsNx7cvvnjzCHvPbWZWR63Nrbd+vyUB0uAvGQBfNed/Pyrc59iZFnQmdf2vHweMFtLSZKycPces/N1btV+A5Xb2+55Z/KThXNnPxvv9GLm5uvMzdeZna/73/9YupOm7idUasZr7drrw7e2BQ5OTL0tymkMd5+GW6K/1r6f3tia/RuMlS09PH8/SwAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallCutIcon	"Private - Generated method"	^ Icons			at: #'smallCut'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallCutIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallCutIconContents	"Private - Method generated with the content of the file /home/dgd/smallCut.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAABp0lEQVR4nI2RwWuScRjHP77vmq9TWzqb0+iwdAahluhhQV42MDwogyBo/8JgEEF/QhA7BF3WZYe26tDJLjtIG4w13A4lMbaFF8UyTGKa5pyN17fLa2w2X/2cfvye5/vheXhAm2fA0x49/xCBKKBrf8S81lzEO9ZUa+cinHpHH8T8q067OQFIAIZB4ZLLIgwC1/sRbKV3s4eJF7Nxp928CYwaLggmz2UJwN+PoPwlV3u09Po9a0uxkG/CknbZDOL4iARws5ugc7fPH/fLoamg2fNkPmC2isDRCS93SlXgTTdJJ5YhScxur0wrrfR9pbA8rQCFfsNtAqNWfSO/MKlkHvoU9xWjAoT7WaFNsd6Qj6N+W8R928GtiWHebhQCcot76jTZXgKAin1oYC6ZKv5O7pZ/lSrNk8af1nNgEagBn7RWMAE7oqCTr9mkH+EblkUdvFNrd4CvnL3gf8wA24BRBwd6UYwDVeCuGqwDHoCBLoIwkALqCqSasuxTpa+AQ+A7kNES7KkBADeQANaBIHAVyGuND+AAfgIfgG/AcK/AeYwBj4GLWk1/AX4ycm0mm5UYAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallDeleteIcon	"Private - Generated method"	^ Icons			at: #'smallDelete'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallDeleteIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallDeleteIconContents	"Private - Method generated with the content of the file /home/dgd/smallDelete.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACrElEQVR4nG2TW0hTcRzHv+ecqdt0l1YT2pq3NFyaLCK8RNiDdqMiBJFeDIogIujBtzB6ypcu0FsFgQ/ZBSEpUSu6EUo9RGltiCXihk7ntnbOzjyX7Zz/v4fyMufv7f//ffj84ff7/hlsXkxpqasRhGsCsIXT9fsz4XBoU3D9wePx1LKgFytKHe3HWrzFh5urEIlLeDni1999mn4mqVpPKBQK5AhcLpc5j2Me1nq3d1w+f4DxmCQkZqYxNrGIpmorEgYH6g414unAT/qo/9srUZZvhELhsbWX3e6rT2630fjUTTrx4gK93rmbFhZwFAC1mAy063QZ7b9WT6P+HhqZvEUvnWulHo+rAwA4ACg0m492nXIdDPv94HUjjrS3otq7E2yeAz5fJc50tqCmwQdFA6yWAmQ0gpG3gVgqtTzEAIDNZmtx2GwD+/Y3FXWfVEBlEdaKXSjfuwdqhiApKrBajPg6HsbQFxnDzwdTwblIlyCIDwwAIAjCqLWoaPH773Rl+918lLnc6D4RhdO9hNcTKt6M5yFJTLC7mqGaNURjfYOCIA4DgOH/GBRQwnt99YCuQ0zyuNIXg/2jBmd5HfK3FoMzGCFQFvzCD2hEnwUwt14AAiRWtmqx2mGx2gFHMdhtZdDWrU3hF0E1spoJdq1FEwQkKyQGY2FOcBRhAWldD+YIKEGcEC0LZhkWG0sVY1RRlNlcAaVxoqezYF1dzhFkZDGVTqeFHIGayYz+mQ8QcNwarErZwowCKT4XASCv3K3SsiwH5cT8lMwHG+w7aqwsGGRYApOzBHpaRjTwATPv7+n8UuixJMmDwL+BZX0mADCZTCV2m+1OVUNHG5NvZKTkAuK/xkRpOTWSFMVeSZI+A+BX+BzB/zI4nY6zBi7/ONH1ST6Z7FVVdRaAthH8C1vLN+tQdL6MAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallDoItIcon	"Private - Generated method"	^ Icons			at: #'smallDoIt'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallDoItIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallDoItIconContents	"Private - Method generated with the content of the file /home/dgd/smallDoIt.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAB70lEQVR4nMWSQUiTcRjGf/v8f/smihrOslFUZGYddokVtMtICkIQDGrGgjrGILpVhzQQOkRdqhV5iRCLwCJGIOom5Bzs0HdxBElKW21jUyrCbYHbvu/fJUptwujSc3x5f+/zvC8v/AfZgOP/RDbWc+rZ4KF88Hq7BG4AKDWyDfsc6tTbxz0vzx4pNG5tKkugAdBqgVvPndix8D10RspX2+SLwa7VtmbrTWB3TdaXvfs/fJ3yyuzTLnnVuycD+ICmmmAhxJWHgbvy+Z3TZvsWLQi4gbp1PdVAVVXv2e12txBCJD6lpf/2mA8IAV/+MtlYsFqtA6NPRi917u1kMbnI/MK8BNqqwWyMA/QNPxh+5Ha5MUwDW72NluYWi8fjOZnOpH25XO4dkNxsgHNoYGi6v69fqRgVypUypUoJiUTTNFyHXa1Op/O8rusHS6XSOFCGP3+g9fb0Tvgv+OsUpfprWCwWOjo6EEIcAHatu4HD4bgfuBXYbtNsFFeLABimQfFHkZXCCnPxOWYiMwVd1/V8Pj8GfP49GDgWfh2e7j7azfK3ZZLZJKlsikg0wmx0dikej8cMwwgBb4AUkF+bTKiqelERCiPBESbDk2YsFvuYSCSiwDigAxmgVHWvXwl2KopyzTTNIjABvAeWAHMzaK1+Aq3csxjBiXwaAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallExpertIcon	"Private - Generated method"	^ Icons			at: #'smallExpert'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallExpertIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallExpertIconContents	"Private - Method generated with the content of the file /home/dgd/smallExpert.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACS0lEQVR4nJWRu09TcRTHP+1tL33QVkjB0lqNQABRiiE6SDCEElJcYWbV4GRSw9zBP8BFSRwk6mCiI4Mp0dCQaHwwgQllACqlPEIfVOhte3vbn4M0ImICZzq/c36f73lJnMHehJDfRiiLGW44nGRGfMj6swjU1qObfoSHNWJ2lcZ7z1B0p4W/PsEraTR61yg7BWHFwsRKM3On5X0+Jx/uXiM3NYRYGuPTx4c0AvyvAxm4CnQDWeAxsNpgZrLXw/eZH9ieB1GlFRZOgseQSNY214pWf6twd7oFIID3wOXDP9dDIfQCdMc7eMo5xj13PPR099DubiefyBOdjyLbZcIvw0qlXLkFfyobjsCjyIxzG1wXXTTVNdFyvoWOng7Mo2ZiuzEKhYJl9vXsK+AmoAIcPeMEV8BoNVJjrMEsm7Fb7HjqPbS526iz1jEwMoCl3uIDAlWoKmAAfDRAqVyiWCqSV/NklSzxVJxoIkrqIIWiKji8DoDe4yNYARPy70fyZ5LN9CY2k428mscoGUntp4in4miSBuA8LpAFVsjQghXWU+uYZBOlcomtvS0kvcR+fp+N9AaZRAbg80lLnGaVB1wAIQTLm8vs5fZwWBzo9XqUosJ2bBttV8sB4Sp09IxmYJ4uOungXysAc0CW+8BkNSxVnVAopDcYDEs7iztdpa1SE4bD7AEQB90XnXrJeWkqGAy+6+/vVyORSO4vgUAgYHe5XA19fX0LxXRxmzjFynJFsiVtCa/R+214aPjF4ODgohBC1jRN8fv96UgkIn4BMVjYCuwVUJAAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallFindIcon	"Private - Generated method"	^ Icons			at: #'smallFind'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallFindIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallFindIconContents	"Private - Method generated with the content of the file /home/dgd/smallFind.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADIUlEQVR4nHWTXUybZRTHf8/zvOVted+2g20dHyV0H7iNKoMQYjKH06BeYMZ0yW6MMUanWZZl3hgJ6hKN8cZ4R8zUeMPVxqZibJaiDk3N4iKR6RrF+MGoVoLCaKFQSj/e9/GCQWLUk/wvzzn/nP/vCP67RE/fiVBJy0YhVFjjNCJkWGgdRlPjot+4Gnv3KoAB0H3kmcNCyMcQIlpftzWyvWbLjkDANoJ+P/5gEL9l4fdb2LZFavomQ8OXLaAHwDh05NlD1T7v5/1nnpLhyG7KWrFadMivuRSKLhVXr8vRLLjQ+0A9Qxcut29YlUjRsjPSKJt27yVfEhRKLlqDaQjsakXAt66gZRCoVgSDQXw+s/a+3lN1AFKiq0PbavAogeVV2KbE8iosn2IlM0NidJjxRAynsIjfpyg70Byuw5FOFEC6iGU0WKbCVyXxmZJyfonXB55mfPQMHdEUzduucenccUaG3sRraJqb6tBKRzeOmF1ZLeCtEiAk2tU81/8kL776MMuhEzj4MIHHD6aZ+Pg1Xn5pgAN39yC1WHeAq7OrqwU8SmIagtjIRY4dC5MLncTBt5lrtrydrwuPkk59QqmwhIbbAww9t5DNYSjwGILkjevcdfAhXDz/AKNUqpDJFWnr7mF+Ng3QCiD9a97f5m5lXdd1MaSgUl5Debz/IiuzuLJOmBnAUAKPYdTc03e6Qcbjg0XXdWf+mltASUHbgXZ+n/wK0JvNi0t5Pk18h1KS6esJOjs7CTeEEKLYKm+Te3Pmz3mEgEeOHuWdt8aoL8eYncsQuzLBe+fHWM6vcXZlhCcyaWzbJtwQQmoZVQDNd3Tee+e+XR37WyJYlsWelg7OPv8CkR23kB6TptoCkeIox5Vm1+EtDH14nsk5m+VC5QsJoKWYmpmd37Tc1dXF8KUECykv375/kYkPPuLHSQ/3f5bm59A++nsjTI1fyJTKnrcNAIX48to339O6dyeZbI5fp//gl+k0qfSsUy7X/gQ6mc2SrNq650Z737n9r5xqG3B0YWwiPpgTG1u7+06eBvdBNFMgk+Am7Yr5Qzw+WPyflwfgb70YMA7AGG7WAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallForwardIcon	"Private - Generated method"	^ Icons			at: #'smallForward'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallForwardIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallForwardIconContents	"Private - Method generated with the content of the file /home/dgd/smallForward.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAB+0lEQVR4nL2Sy0uUYRSHn/POd5lRZxTLLhoJJUGBUC2SZBQX5SaCKKN/wUW0yYVQ9BcELSOI9iGBG3fdwJI0SKIgWgiZ3fAy0/iNOt/tPS00W0hGi/qtzuF9n2dxzoF/nXzRP1RfzJ763btsB+dO5tqcjH0LNKE8sK5zeeXpyrctgoZits+gAyC7FFtVZBnFiHDB5KS1+XQd38fXSMpaBoaCZ7V7m4J8b64bax+5zZksDmio2EjBruvrO31a+goMHbnB9TvDlCarYLkbtIaDjJBKoce/rcLg4avtnG0/z+7cXhzjUo0D3pSnebk4QWQjulqKHGjoYOTJfT6MfkFTRoNyeEnyxeykuJzYd6UJz3jsybXhGY9StEgpXNoyl2Z/Jx+nPlN+uArCTQexqcZC+DWmZmOW9T2IIAYkI4gnuE2ZTUEpXMTdsdEreUfUfFKUpGIxPiiA6kaxHuMJmTqDxkq0kFCZqAHME3nXHFXGEC6WxlZ/rcZdB0xeKHT5RPMJxhfSNUs4mxLOJRWj9kxlKlgSgMYe93hqpcOIyaI2tUJkVNpUuNVwzMNvdxADtZmE6usoEDX9y8/XXvzxkApFf1qFo409WVbfxSQL6ZyIPVcZj1/9/JPZTuDvd2aBgXA2ceyKPlbj9gfjtZntmC1p7PYP1vd6nX8F/df8APkKy9tNEDE0AAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallFullScreenIcon	"Private - Generated method"	^ Icons			at: #'smallFullScreen'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallFullScreenIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallFullScreenIconContents	"Private - Method generated with the content of the file /home/dgd/smallFullScreen.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADIklEQVR4nH2TTWhcVRzFz//e++7Me+1MxkxS0jR0nJZSbI0am07c2OomI7HrilB0GVy5kJDtZJNVEHQTcONKF2otlGmUEhoQSUtClTAWalJpPmtik/l47828efM+/m6yiFA8cDaHw1n84BAAMDNNTU2ZWutjWmsrCALDNE3HNM3q+Ph4gP8RTU9P90oprwHIARBHHBJRi5nrQog9rfVap9N5OjEx0fzPwMzMTG6nuvVp+dmPH/fnTiad9ebOBxc++uVIJwbgMbMNYJ+INpj5t8nJyS0iYjk6OnpybXf12vbQ6mU+7xvVf+rd/UFuP22mIyICAAagiShFRD1E1EtEpxcXF7PFYrEq4ji2rIRFkR3B3nBx7t08/dS4ddULvB4AJwD0AegCoABIZu6N4/jNOI4vM/NZRURGvuesnX80uOqppvXEezLgd1hpqWMAICIJ4DgzHwNgA3CJKH2YaUVEYcJIBO+9+v5TIQQeri+5sd9OLMz9MAgiYZkWeW2/menudc9deH03ne5yD9n4YRiGKgzDkIg6RGQws3Xp5YKz8uDeqTvz91PKMAAAraaLysoy5m5/f/Hu7Tsbr7w2sjmQO+MqpTxFRB0hhB/HsRRCSAAwrWRi6VkVXzeycCKB00kTQ6cK+OSzM+LDG5v57779Jr8wd9MYLFwtKwCNKIr2AdSZuYuIglS6S246LsJAISUktpvAhkO4K9O4nu7D8PAw7IbTr5RqKc/zqpZl7QA4OKSuojDg4ypEMRWhS0vUgwjL+y10AFTaBoa0xt+7e3YGmQNRKpXazLzGzAfM/JiZ9xzb9nuojazyICMbL8kWBlM+BgwbGdmElBLr61vPZ2dn6woAMpnMSq1WSwohiswc1WqNR1lCIYyqiEmCmZBLCJyQIZIcod1qot5w/wDAEgDK5XI8Pz+/OTY29lgI4Wid6Cz9eq9QvPK2UtyAZBeafJjko08aqCwt88KDSqlet/+iFz2sVCqpPysPz9vV7a9G3iqMvDF8SXZnMxBSI/Da+PLzL36/+fP9dwDYLxw4qouAdrK4EofIsYBBgPLauHXgYQcA/gWOnHIlydMKjQAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallHelpIcon	"Private - Generated method"	^ Icons			at: #'smallHelp'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallHelpIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallHelpIconContents	"Private - Method generated with the content of the file /home/dgd/smallHelp.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAABi0lEQVR4nI3SzUuUURgF8N87zmQmQh+mFW2kgpmMiGoRLVpGi4hAQoioXe1atQj6AyLIv6RN0kYoCoKCskxsyoZMB2IKEyccpenD6bZ4X2nSd6QDD9x7Oefc5zn3RlLQz47AiQadeFliIo0H2eZNgYs5rp7m8AGiNowgYnSBS5+ZbGVkL8fOEsqE0FQNwm1Cgfcb6Vuta1tZVKl0ce4C20t4gBx6knrB1iVyCzzC8hoD2EDlLidf0fGYHwWyecxhCtPUqoziy4om02xQZvgth4rcypM5k5w/w6+/tI6WIUIf3Ue5MkQuwlO8wwzqjGGxRYwxzlP7ngQ4QrhBGCTkKeJUPOk6HWT41k7XQ3FaRXxgbJqb4v/wc12DEh/n6J1BDVOMl7ieiGdTLvwX89wbZPm5OP2I33iTJmbVM8JXJqq8Dhw5SOc8uQb1RZ6kGaRiHwPjSZCThON8wp407poREuzfnCzasYVtWXr/u4Nudg6wdIdwjdDPMHancaNWJpvY1cPlOpVZ7qOcxvsDkT16QO3FioMAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallImportFileIcon	"Private - Generated method"	^ Icons			at: #'smallImportFile'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallImportFileIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallImportFileIconContents	"Private - Method generated with the content of the file /home/dgd/smallImportFile.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAC3ElEQVR4nKXT3W9TdQDG8e/v5ZzT0nZ9oV07trJWoXRbtzFf0A0JzCWLUW+4MyZeSOKdN0b+Bi9MvFZvMAY1cRgTIUjcYoyBMDSIAbpp5hTWbo4Xu5W6du1ZzzleOBMjiZj4/QM+V88D/zPxwmj/CMoNt20v4eFt7Yj4Zk5OX6v/V0AL4ZzozYb3ayV5dCzJwvya/VJr4AvHdj9B6TMfXbi+/m+AGs50jr/5Rqaw/2AvP87dQyuhXn61sK8rHTjaqLeO9+wIPjWwe2egL5Vanv/17sZ9QCEd3zvxhJzY6ZbIDSWo2xYLlxZ59mmTsSNd8smJzMOhDt/zv9ear2cj4cnBdDzal4kszpfWGttAIlwYjL2YigpUq0ZnX5azp1c5OKww7RodboV9D2mOPNMjhkfTacPSkys/118ZSMXOFVcqt1Uhm2rG4v7XBnIBkAZoE7MjxPsnb9FoKrq7A5jSQTdrxHSVQr+fZC7tu3zpVlexXPlYFZfu1HJd8WOHDyXDSAPZtkmlgxwY381GS3N+tsaVa02kYZJMBpDOFok9u/h06ob3w0prSgOUbmxMVTeN45GgCZ6LbjYxvAaP5RUjQxnahp+Zz26y5To8MhRCuC5aKRPaeQngIk9/f30DT/vwtB9P+3G1H4FGt2x89SqTR7PMXqnj6gAg0AYGYEgAZ9f8xbNnyuvNtsJTBp4y8ZSFp60/UWmhbJv+kQS/lLcAiZLCABwJcOoUTuVu460PP1hksy22EQNXmtuYiXQFB8aSXC3eAyHRhtIgWuqvQRTLlfMhx6p8NV0+tGm7ViTuJxi2AAlSgpAoKahUW/T0hvjyXMn+7qf1E+rvq5pb/u3b/u7UO8Xi7cXpz0vtby6uRitrrSCGJBj1oQ1JOGbhSfh6etm5vFB9VzzoLKO5TD5oiuf8Pj2e74s+nstHOrvTQd57e255avbm+AOBfxTYk0wOxkPm2GqtvrR0Z23mD9YOClDTtmV4AAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallInspectItIcon	"Private - Generated method"	^ Icons			at: #'smallInspectIt'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallInspectItIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallInspectItIconContents	"Private - Method generated with the content of the file /home/dgd/smallInspectIt.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACX0lEQVR4nKWST08TURTFT2f6nyntlJbWAq2hBYxUSAoblBg0rsTECiEkfgANSgyuXejaj2CMicaFhhhdINGYKAYQYjUYTG1EBIZph1JaSodOW9uZqSvISAYT41299847v3fuzQP+szQHD3wNtf2+o9Yhu03frNUSBp6vrJZF6cnUNPtCDaBVrG2dQef9sZFQX9/p5oLB6lmRqwa+xDMdk5OxS5IoR1bZ7eF4vJhQS0C1+unx188H+yr0ufdr5LBBeYkqzZXq+YehkbFX62+mmB4A4p5GAgBNG++8fBo+L3kGp1lywHww5qZA10wu6G03wnnvx4VkY3JTmNjTCADobHd2N3rdCY64YFHrsyLJBJu1GCVrx/LxFnuvUiMAWNpa6LqCxsuqmQFAKPzSAcDiRqPJ5TI7AeiUAKfnCAVJY5IOA2R3BCMAVGQ9HLRZC8CqBKzMRzi+prrmUDOn0rwp9oN1AUDAniww8VwKQPqPGURjmSW5lAlZq9Hd/b5FiYgtJ+xvZ7/6RVEm9ZDELvMXOs7ll5QPkACQ48vR+chGz/WBYluy4E7PLPJNc5+WfCyXpiVJJkx6qXzv2ShVM/7ZzpxsIKKxbEQoivF9AICdrUwpOheJnxnqSXV1eLitOqpYDjhyhXDw2+5F7yxtybnNuHqC6KV4K6MznF1niu+EUjl18CvbAs22260BOuRxU26djtRv7xQTCS4fJQnNsYkHV05RmTRZZRYrg4/XuZ+s0H7Y4PfSEYq9sdVPP/o+c3NXmr8s3r3VnQoG611/A6iW02kaDff7P/iaaq/9s1mtfgOeOPMUwSrvxgAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallJumpIcon	"Private - Generated method"	^ Icons			at: #'smallJump'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallJumpIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallJumpIconContents	"Private - Method generated with the content of the file /home/dgd/smallJump.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAABxElEQVR4nMWSP0xTURSHv/amPFoH+3CywHsm/puMYmqT4i6ri5sMDjI5O5hoSERnDQ7EzTi44aARNakhYgwVl4YoRojyoOIfiNFXS9vX3ncc4LWUPDVM/pKT3Jzc77s39x7434mENS/BXgUDyoidrAlx7dWfJ+DhMKz8U3AFBpXRMdadPaKszCEDv8bSqzlvOT/Ph1rj6l0Y+eN1LsPZ63t2Vxcnb4t4OZHKfZHyHRF3VBYnzss1s9M7DaNbGRUshiGljI6ngw9uxu3+A6BL4LvNSnZHsdKm+jw+f2xNy+tVWACIBgINp3qyR6N2/37QAVhqibSLndmFnTYbKRgKuKYgZsSyvZmDnfilDXATaoo2y+pLxHtikX1Ask0gEEG8FqRDRNpFfA+QCtDVJmjU6i+X8m+9JuRvF230PxV+lp0634Ev29/gSTH/XpwXhRakt4pcnOlvODNVNQezwHrbL0zBr+PaX1149GbAOmGqZEpaJ+sSzvRX7g2tVJ6VZWIWbgBroYN0Di72GmrETndpqy9h4HsUCz/WnZmqmvLkcQ5uAblgf+gon4HDGi6YsUhGg1Gsy8d3MFmEcWA5jPlb4jsFdpTfSTvti4zhegUAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallLanguageIcon	"Private - Generated method"	^ Icons			at: #'smallLanguage'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallLanguageIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallLanguageIconContents	"Private - Method generated with the content of the file /home/dgd/smallLanguage.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAABlElEQVR4nMWRv0sbARTHP+bulOCQwaQnauoFrYGiDpa2Wtupg7q5Fsng/+CmODqUigouDuLg4L/goCBxiFkEtRXj0CVNuWhE6cn9MOZeB1NIS07qlC+84T34fHnf96DRaqozawE+Aa8ikchLTdOaS6XSN+AY2ASsxwxTuq7/XFz8LPn8d/F9V0Q8Mc28rK+vSSJh3AAzgXBvb49/eVkQEa9u2faNDA+/FWCu3tr24WE2EP5TppkXTdMEeA6gVg3eGUZ3uF9R+PVlCTXehZowqBQvENtG6ezAy2RRYlHaPrxndHSEvb30R2AjVDVwXNflLneO1vcCpV2n+c1rymc5lK5OvEwWymWaWlupFAo4jgvg1EZQAHN3Z1tEPPHvbh9Wrjh/974r52cnEgqFHKDt3zsM6fqz61zua2D+YvGHJJN9LjAe9AkjHA5nVleXxbKuxPddsawrOTjYl/n52ftoNLoF9AfBAKiqmj09PZJ0elcGBwcqwA4wCUQeBauKT0yM+anUlAesAPH/gWo1DSwAsaeCjdNvpz0BrfQjq7kAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:35'!smallLoadProjectIcon	"Private - Generated method"	^ Icons			at: #'smallLoadProject'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallLoadProjectIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:35'!smallLoadProjectIconContents	"Private - Method generated with the content of the file /home/dgd/smallLoadProject.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADDUlEQVR4nI2SS2wTZxSFzz//P37hONiOJ2PHJBFQkwBBAgQIKgosQALxCmoQQu2GQlUJpLaLVuXVRcVjQWDVCrqI0kUVIECJgC4ipRJvUoICoYkiUSutAzjGsT3xY2zPjOefLtiwIFHv9uo7V+eeQ/A/pnld60bO6RYCzLXAhzixLv599/ooANAZybY2ulha2LWw0XvcvWlPqLR6byPxyWGMv9jnD0es9PjonzMKNPmavt+1tubg+UOyPbRgvu+T2X9VPQxsk42VrR5zsDfiD88bFmbgicdt+/r43gBJORpgZrJocY1hjT0GiHYq7jniJlz4ik17ff3OhmCNkyRUCdqsKlxMLwU1OGLci9XVcSRdkjxMSMu0AhRiKprQlceFBs/HviHYvWtxrLATD5p/BHJpKKqFTQ5Bn9bCyO0rBVPXYydG6yZ+TyzB07yEkslQ1ghuJJbhcLeVyZeM7pl+AAK+X7vabh4Zqo9rnOKAfwB2nkf7H9nYnf7oS9NdOkk+3HZgc1iWzsqy3xuSA8zutBEiWIQyCgEgilJAb18/JlU1V+t12oyi6nmdjz7OVQ9H8veKW5md2jZ3XDjaXCJlVHgFyYkokgPnoVE/6jfsh6qpGPn3kfXsyW/3EgpzKIOsTdqq3/d95KorPNe+YXV1gfp4No3CVAkWODRBhF7MwuZ1w6IWDp7eh0xogtR+6tqujuqm0pdZQFxVQdHOAA4XkwJeWcnn4DIdACiyloU5rafAYSKVT0FwEHg+mIUKNyAGTBo+Vt0v+qkQNOcgaiTHWEEtFeWgB1OZFF51XIZz1SJU5Bb80PktBE4RcEoo6gzBQAjPgoOQZktCTTmIR50DijHFe1gymYnDsjDW1YMdZ35F34oI9GunkJh4g4i8CN5GioGbkzzZ9Fx4eSWd+qeQugN9RNEmzZ9RxhOWUrLxctbA/M9243qtH/LyxXAJbvz0XSdMqwKH4MCl8ftT53758lYlZnRVNPS+GzUzBd71xeftczlAucWB7pG3C4ESUWSCTWQkp5Z7yi+Mjvd15T8jK01ORFuSEAAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallNewIcon	"Private - Generated method"	^ Icons			at: #'smallNew'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallNewIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallNewIconContents	"Private - Method generated with the content of the file /home/dgd/smallNew.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACb0lEQVR4nI2RzWsUaRCHn3r7ne6e7p5MPjTumMRE8bIOe9iFsKwiePAgQcGFBW+aYy7e/APyXwQPe9uL5CJIbnszgrCw7IQISr7Nl05kY9RmZpJ53/LQKIgfWJeqQz1Vv1+V8I24dH2y98iVhowJhsXrsBcdBjmuav569GDmMYAtGqfGvNM/EH6Kk2j05OCxU0kS1yppEvdkKZVKRpYlVLKUl81X3Lv/98/ABQD57erUkBVduHljov/X8XHSai/tQ8g7nrztyDuOI6c4p3Q9XK5H/H7rTuvhL7WM6WlvrLizfb2V/omJK7hSD/u5J+84nPNYK1TigJ5yQDW1VJOAUlSmr1opn/9v53RhQSQ7MTiAKqRxgPeKU3Be8b7IH+quV7pOGRup8XoxrwMrRpUDAZLQUA4N5ciQhIY0MiRRkbM4II0NQ/0hWRwwOlJD8fVCgdVm3moTlQxOQb3iFbwWW70qcWioJpbQCgBjIzWAc8WAQ7uX5y1KgRBZQVUKWAVrhCQy2EA+ee/o8A8AdQAzPzfz+s3bvCOilKxQskJoTXG8JPgMBhg7VQP4kelpYwA96naf/79/gDWCDYQ4NJTs5+CHGOirkibl+NK/zTMGQGF9e7dJYArZ5uvsJyqcuroBEJWN7Rd7iIB8BwwwUhsEtBighvXt3VffR1J85uBtjogJLYBR1nde7H2xud3usLKxw/LaJkurmyyvbbG6sU27c9gQCf60AD5w/yw+W+0uPl2x7/IWK+tbLK1usby2ydZOs6WqT0AXvNAQrw31dmF+7u4+wEfHF69NTSJ6G9hFpCHogvHaOB7vL83Ozrqv2XkPgdkFGpcRD6AAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallObjectCatalogIcon	"Private - Generated method"	^ Icons			at: #'smallObjectCatalog'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallObjectCatalogIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallObjectCatalogIconContents	"Private - Method generated with the content of the file /home/dgd/smallObjectCatalog.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAB9UlEQVR4nGNgIAxYGBgYuIlQhx2YqrNFR7hxbcAlz4xHL6OiDKuZkQZbUUMynyM/N6MTEyNj0IMXf1cQZbOICINkuAvXpR+HpP//Py7z/9Q8sY9OJuye6OpYGBgYGMzDC90EBHidYIJ//zIw7Tl7unvlnu1mJhqs5xJ9uDXff/7HdPvx/8dYDZCWFvVZ0JSbCxO8dOshw57YS8sYGBgu7D714+/eUz/KmJmZ5MSF/hs+fslwBcMAfGDXqZ82DAwMH3HJMxEyAJ9muAvevvt0o3ry0o0wwU9ffrAzMP9F1RjKwMz7gtPCwFk2+8e/X/qnDz3QZzjA8IcRh8EcDAwMP5AFzBtVXnOKcIs8f/jxJ6vQX+an+94Gvt/1bQuKF5zZ2ELS2LhOVLDzXvZg5VjAwMAAt+A/4//Hl3bf2nfz1AOeL/e+bWNXZS5kYEBNSMzBrFwLJ3EKmrqwcgipM7Nonfj748ar//+vCbow8P/48t+XRZxRk+kDM9M/1n9ZXCpssh/Yvnchu0BGg4lZHsbRY2ZlE2FgcWRgYGD4+4PN6zfLHxdGDiZJxn9/bzFzMj3+cu7nKr4PaHkkio1r2zt+qf9/BWT+t3HyvRVnYFBiYGBgYDBmYOWz5YjhteO0YgjFm/wZ+GxZ2Ds9WdhXq7CyWuBTSDUAANeVnXOvNaMbAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallObjectsIcon	"Private - Generated method"	^ Icons			at: #'smallObjects'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallObjectsIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallObjectsIconContents	"Private - Method generated with the content of the file /home/dgd/smallObjects.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAB/0lEQVR4nJWQXUgUURTH/zN3ZnMGbXcM+9ANspaelETtQyLbsiWofAjspYwegggfpJ6KoqjH6KEEeyjDoBfFCvbBqChZiGJD7EMa66koQzPXzf1o292ZuXN6aWSM2KYDl8s55///nXsuw+/wAfW1jO3LEsEGZvA/sVGSe64qgXm9YgXdVLTMdubr92xeDmnrdTWQokCQnBNVl+VCjLV78YvVIsJ7JMXvLu6Uy1RNEHd5AiQEGn/LDcNdfG+bdpZs/S96bUOtvGkRYIrz4cvFH09GedEiADo37bP5THzVga7pyMETDW5xS53v+Pq18i0AFU5NcO56Ue5SBWzOEY3rttUDwAp3ngxJHI0kGyMjt69Rxw5lqO+M1tZ5YX6MCZT8PGu/8bImGuuqhi8e0+bmHlYTxYNE8SDdOK1NhWqkFk8AAFq4SYl9uLfScgC7tyy5CwDMI6CwdF2EKoVPrYwJwkzSpi/frMLoO7NPWpA0tavgzLfIZso/MXHHiBzqbnv5YGhsIJc3++/nz3/PcL3KLx4GUOZ8Iho6uqN7tzU3O3kqm2OPnr++tKay/IXAjcnHg70Jvx+r02l8dM9YeIHmL8epo/trnHzyawLPXulBblM2Ntg7DQB/mgFALLW4ZSMfG7gyUUpTEkBE6VJ9wLXCbDIVbT1yLuVuZgrFp/8C/AKqoMu3BdqijAAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallOkIcon	"Private - Generated method"	^ Icons			at: #'smallOk'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallOkIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallOkIconContents	"Private - Method generated with the content of the file /home/dgd/smallOk.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACF0lEQVR4nKWSz0sUYRjHP+/7jvuOuzMbq7uZlkJESlSHLoExkAmF0K+DLBV0S5I6SKf6EzpVHrpU0LFLaZeiLh6KOXjIS5FREpUIi9oiOuOuM9vMdHANEYWy5/rw+T5fvt8H/nPEdiDb0XuAPuCJsQ24E3BlWhSiStwl/xHOAS8a9xmFQr8N0PTXArajDeCZblP7m89YeBMrCMQjo748DlwGXntuMLKFxn1lyd7mcxbhfMTyZDDuu+G4tB1dlFqMNXY2DMhG8dh2dGGT60MoBpvPZ5CmZGGsgkDcA5DA1ZaLWZU/a5E9ZmaB4ga4D7ibO5lG7zJYdCvUZqNvwMiqgKRruO8hQwduYR02MfLqeh0UtqNvAM+tIyllHdRUp0K8d0ECXPHcIAJQut3omcl/7ZpTJeaCEjLFzjhMssBN4FrmUMrI9Wb4tRQxP+pDxLDnBg/WHCrdYewu++VTXkcZgIYmg+VPYXcSJHuz3Sa5E2mIE+afekRe8gG4EE5H0ZqAsB3djmSqbXCHVunVVmvliCSGVEFBDD9f+lS/1H4AjucGM+szUuF0tKTbjRZpyqOpVoWQApWWSFMghKD8yqf6uTYL9Hhu8H1jQ6IeWKtI8TFfzOSIBYgEoQT+REhlMlyow+83ew4J4LlBKQm5tPh2JZGmQCSSxTcrVCbDEnB6K/iPg3Wd96uMuB1V4yqxGAXueG7gbwUD/AavXL0SoSTm+AAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallOpenIcon	"Private - Generated method"	^ Icons			at: #'smallOpen'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallOpenIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallOpenIconContents	"Private - Method generated with the content of the file /home/dgd/smallOpen.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAC3ElEQVR4nKXT3W9TdQDG8e/v5ZzT0nZ9oV07trJWoXRbtzFf0A0JzCWLUW+4MyZeSOKdN0b+Bi9MvFZvMAY1cRgTIUjcYoyBMDSIAbpp5hTWbo4Xu5W6du1ZzzleOBMjiZj4/QM+V88D/zPxwmj/CMoNt20v4eFt7Yj4Zk5OX6v/V0AL4ZzozYb3ayV5dCzJwvya/VJr4AvHdj9B6TMfXbi+/m+AGs50jr/5Rqaw/2AvP87dQyuhXn61sK8rHTjaqLeO9+wIPjWwe2egL5Vanv/17sZ9QCEd3zvxhJzY6ZbIDSWo2xYLlxZ59mmTsSNd8smJzMOhDt/zv9ear2cj4cnBdDzal4kszpfWGttAIlwYjL2YigpUq0ZnX5azp1c5OKww7RodboV9D2mOPNMjhkfTacPSkys/118ZSMXOFVcqt1Uhm2rG4v7XBnIBkAZoE7MjxPsnb9FoKrq7A5jSQTdrxHSVQr+fZC7tu3zpVlexXPlYFZfu1HJd8WOHDyXDSAPZtkmlgxwY381GS3N+tsaVa02kYZJMBpDOFok9u/h06ob3w0prSgOUbmxMVTeN45GgCZ6LbjYxvAaP5RUjQxnahp+Zz26y5To8MhRCuC5aKRPaeQngIk9/f30DT/vwtB9P+3G1H4FGt2x89SqTR7PMXqnj6gAg0AYGYEgAZ9f8xbNnyuvNtsJTBp4y8ZSFp60/UWmhbJv+kQS/lLcAiZLCABwJcOoUTuVu460PP1hksy22EQNXmtuYiXQFB8aSXC3eAyHRhtIgWuqvQRTLlfMhx6p8NV0+tGm7ViTuJxi2AAlSgpAoKahUW/T0hvjyXMn+7qf1E+rvq5pb/u3b/u7UO8Xi7cXpz0vtby6uRitrrSCGJBj1oQ1JOGbhSfh6etm5vFB9VzzoLKO5TD5oiuf8Pj2e74s+nstHOrvTQd57e255avbm+AOBfxTYk0wOxkPm2GqtvrR0Z23mD9YOClDTtmV4AAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPaintIcon	"Private - Generated method"	^ Icons			at: #'smallPaint'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallPaintIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPaintIconContents	"Private - Method generated with the content of the file /home/dgd/smallPaint.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAB60lEQVR4nJXQT0iTcRzH8ffze/5srT0zNvqrKM42JTskoRJISVARCf0RCTp4KCMhELpJx4gQomNBl+jgtX8QnQorqIyg/5atpZmOlk62PXPP9uCz5+kQ7bAObd/rh8+LD1+o8cJwIgzDgKi1S0Qw/Gi0wx0f3O62wAi1KG0Q6tu1/nLnnr3ouh8JumoCXFmMjZze56eYxgYcyFQNNENTT7v/VKi1B4w5Vl0AFqoGBAwdP9IlIWuQX8SyS4hqgV5QhMTJju6dsPwJcFk2TFyYrAr4AQd2tKzd4tkQhdQUpVVIpsylbxCvCpBgf19vM5hLkEtQtFzeTqfu/M2V/wKStNsQIV6+eMNWbN7FinxdyI3/AwyAvAbOBED9CFcfgw2gB4NqtP88iqZx/d5dpiZuGrPwvAwcgnA9DM7Bg04YC4DPgM3AaBgiqrAablw6h+INkU1bzvRs9ixQKgNe8Ot/kGPfYTIGFySYAVCFGDrYHq4reSQsJcur1x+exaE8H0Dcgvef4WIaMl7YdhSeKnA4At224yS0lE1jRqHekPFpmlT5IwXAgTYVGppgXStIebjWHNy0uNGr1+krwowWPL77TpKcaV2pBGSAOHxphPwvMGMQL8D8z8KKFdACqt+W1du5+YmHyUT/DDypBH4Dwguh75kYJgEAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPasteIcon	"Private - Generated method"	^ Icons			at: #'smallPaste'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallPasteIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPasteIconContents	"Private - Method generated with the content of the file /home/dgd/smallPaste.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACpklEQVR4nHWTPWxTVxTHf/f6vuv3np/TJPazHTuJgdBEoqGoWyQEA4KBDRgYmECRYIxgR2Jh6sjEUlWt1KlrhRgqJlpEJQZEA0kAJxFfMSTgb7883/c6OJiv8h+P7u937jnSEXyW+fn5g5lM5pxt29MbGxs/jl6/fkfBLgGTBu5checfv1cAV8CO4BgwW33y5MzY7Oys7/u4CXGIE4fZu72GEHD7j7V7wClg7RMBgr/mznz7Q3uqyKI6guu6NOrvKO8ZpyZyzEy0GC/nWfr71TRbweQXgnTePTBzssDLapu4dpNcGDJkG+IARFEQGkGjY9BTJW+/nzk2vmfu7o0b14IPgpwTtbtGuo5kyulR2fS4VRmig490Clgpn1SQYXRhiLPN5uWffv5lBLgEhApACiKtLXoGmoHi1uZxLl46jxGa7TAiNAAxQghy6Yhff/t9GhgGXiuAsBsZbWuCMCYOFZMTExihAdCWRFsgdmZ2nSQ53y8DqY8EPaO1ImH1sIwkDgyulgPqPZyQAkdLypOlsR1Bfwett0EjmVSeshRJkyAyBlvLASwEOFoOamPFQtr2hjPd5jskQKe+XYnDGK0Ved/GmB62JbAtgZOUDKfUAAYo5bMiW9w1A/QFAtZb1Q6ea1HMahr1GpaSaCVxtEQIPkmp4JNKj04BQvb3y1rrdZeRb5IAxNtvUAmBpT4jd1IsZEkm3TLgvhesNzY6JGQfsKIt5P+zAAylPZR2soCrABKwWn1c63ePwY3qNJpt0p4LQLPV5uHyKv8uV1hcqnD/waPq1qvVP4GugP4xxVKsFPeNjG+uNsLl4d1vChcWxjzPYfHhSnP58dOVTqu+FLRr/1RfrN+ubz57BrwF2oNvXQH3NBxNwfdA6bu54wfzpb1zQAnwvjbOfw2z5rrakfVdAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPrintIcon	"Private - Generated method"	^ Icons			at: #'smallPrint'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallPrintIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPrintIconContents	"Private - Method generated with the content of the file /home/dgd/smallPrint.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACSklEQVR4nK2SS0iUURiGn19/RWcaL/xjVgs1GoqZEhuHoSItFDFcVaDBhCGtrIUiWlEobrqtJMXLRIISgQUt0o0geNk52iKELMRAUsrFEOoo+IvjnK+NTjoZtejZfJvzvuc5F9iLFfABz1NSUmZ0XX/DP3IM6HI6nWv19fUyPDwspmlKYWHhJpAJJPwpGLc9z7a0tNweHBw8YBgGzc3NVFZW4na7E+x2+6LX610DavcriN+eZk5OTq2madTU1ODxeDAMO4FAgNTUVG1iYlLf2NgoCwTG44Gx/YqOu1yuiN/vl4KCAgHEarVKY2OjhEIhUUpEKZGioqIt4Ohv6bS0tO8NDXdEKZH5+QUZGRmVYDAoSimJRFS0oLW1TYCm2Hymz+eT2dkv0tXljy6ORJSEQqtyt6pKFuYXRCmR9vYOAV7GXmJufr4Hh8NBdnY2pmkCoGkaaysrWG02DLsdgHA4DPAj1qBudHRMlBLZ3AxLf/9A1GK3TU9Pr5zKzRXgLZCx2+BIYmIiALqus76+vqd9aGiIB4+eojvc3Ot8Rd3jZ+Un8vIXgdfAuTigraKifGlubi6qaZomL7q7uf/wCcGkDPJKLmNkHgbg9PkLeC+W6PG67gSSdza6brFYvlZXV0tpaalkZWVtJSVbVq/evCV949MyMP1N+sY/SVNHrxgHD5lAJ1AMpGu7jnISKAMswEcgBFzRNO3ameJLGavLS3z+8H4KaAcmgRkgslOwQwKQDiwDYcAGuIAbgADvgClgKfYl/oYNcPDr6/8/fgJnMgqt6rM6ggAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallProjectIcon	"Private - Generated method"	^ Icons			at: #'smallProject'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallProjectIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallProjectIconContents	"Private - Method generated with the content of the file /home/dgd/smallProject.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACtElEQVR4nKWTzWvcZRDHP/M8z2523eymJiawSe0KLdsXEfRifSsVoafA2ksbbEErUigFQYT2UEHwIoIXPRS0IKJCc+mtoDb4EiWKQokgIpLEpDTbpG3S/rpZdjfZ/c1vPGwa/4AODMNcPvPynYEHNAF4sXJ6Vyz6nCTWbyLOYWLgwImZiQgOMxERZ5ggIpawGjL+y3Cgcur5VI+ffGpvOTw6PESh0Es+nyWVDrjgcEHwzuGcI3iHmCO6W+fyt1PMX19+OCA8PXb4UHjl2CHWbQM13fIEZeKrD8kW+hl+4iCDI0OIF4rWy2MjR3j73Y8fcZjt2LOnRMvWiS3+H4DyxQdneDIzwWjfp0yPn6PdaaNJTNs6WE8MQBAh3ZvPUr21yuzMMiE4zIxUzvHy6XP8e/E4q2vb6C2W8WlPjJKYYj50AWaknBdu3anxTHk3ffmHALjyx1XSuR5WBo+yf7QCi4uoxaglKAredQEYQRwoylqjuSVPR7vjPFs5jJoyuGMYNSWqReQKOYJLbwLEGo1mi1JpgLmFJWgqsSrbd/ZtVby2OM/F386zfPM2bVq8/8YnDPhtQFfrqFZrkEo7yuUhVsYvsfbaW/zz+lmqf8+gpmQyGWZnZnmz8g6uleW7qW/I+J5NgBDV7jW67UUR/eNf8+r1O5y8OsfMhUuoxZz//COiUOf7n65QXbnBtZvzOL2/g4SoVmugFpPry7Gw/3GmfpymOlBgcPQF1JTjR0+wuPQS+/bu48jYMRKUjdu6CcCie3frZCXLWlLn4GfvsbRQZWdxiFQmTcc6lLaXKI4UiS3GzMj7PH/+NQdIPTiSpYnJ32m21tlod2g0W5tnu0AInuD9VvT3o3dM/jqNOX4QQA5UTo0JtsuQNIIXzBt4DAc4Q1RI1MwljkS7uf3y8+ULEw/6zfwHQM5Dmbx39hcAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPublishIcon	"Private - Generated method"	^ Icons			at: #'smallPublish'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallPublishIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallPublishIconContents	"Private - Method generated with the content of the file /home/dgd/smallPublish.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADMklEQVR4nI2SW2yTZRjH/+/7Hfqt7XrYbNcDG2HKcBsQ2XADhwIXGKZithsTAlGIzgtDvHUa442nbHKh6OSKZIkiuIFDE2JIZlTEMbPgwiHB6qYdYtt1PaztvkO/w/t6YbjQpInP7f/5//Ikz4/gf0z77sF9jAlPEKCVg11nhJ/57fLUbQAg/9rshOwPu34SfULESDpH1Lanpzev8E8fXO9/Sn14IJOq7/A4yRtZ+7tJH7eq7yeunD8h3Ot6HpO3KIrwlmer0v/cy89673qSh6TZ4vZDezoHTx6LuGKbHmg4HLhZPxM6ELF6Bn3Oz5faGtfdf0tAN6TY9vsu7zjY9a60m20TYhyLegINsQAxArm2l9rWk0DrQ0jnCHZ6b2Ox2owEi1LS0mGy+W+bRa9LfmXv0V19s8s/oDpvc84AX5dCcqt5mHkb55MptD5SjzP5bRAshiUWxE5/Cll3OHKLkC0iYej9g/4KI2nz9FjlDU+33Cf66X7tpmlYsw2sd/SIe6OdgCv4KF5fG8CP7R8B5TyKKsfjCjUpq+JKLp8DdRNCZTqHZePwXyOl4ZXT6q6maM+1DzOd6YuZrZivhKE7IowqwVeZLrw6wQsV3Zqgbr85VprRNKZzELD2yi/I20U2AuAapXi+eu6489r1llSVCRhqnIOLVXD8m9LS97MLfzpe/W3Sd2Cov04xx7KZRNOT+54xmtZFOSiIQAVQCrJ0J4Ovp68SmwqlpmCdbGmqr6SaU5pIjv0+PVkSXYLcf+HsBxs06LC45c6mFrAydxKG0Ij4nqPYIW5EPBzi7536ImZpa7GFuJTExXPOvfeL8XioJV0uoFLUwOHAoDJMvQzZ7wVEDotZgAx+9+qkDmDxv5aK4VAwslopQ3FcAASsMo7mwXdgcwuFch5UFkAkwmppLq6puhaNBrFayOLOqbOo6+mAE9mMN8eHQRhFINiIXmmA1wLQbLaQAudYOD2F/aOfwBodh8lMZNLL8JIGAATEEWtfkCuWUnrJxKYXDuLLSAjh7k54BC8+Hh6HzS0oVMHEiRm1JsCh7LMXh0ZaGSAwzoDPb/wTUIFIkkhlSSRl1bhQC/A3cdNl1Xs1VC4AAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallQuitIcon	"Private - Generated method"	^ Icons			at: #'smallQuit'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallQuitIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallQuitIconContents	"Private - Method generated with the content of the file /home/dgd/smallQuit.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACkElEQVR4nIWSS0iUURTHf/fxfTNOPsZpzCxCGWuqMSOn1yKIIIiIahPZoqiIilpFtAkiKIQ24aIWLTIICulBkG1s0SIsyB5aIkn0fmii1ZTmaM5833y3jX4qBv1X9557zo9zz/8IxrR9eazIhOSVilgo6bqO1MJILQ2WzAklkFpBX8pTrR3DvQgoyLNbShLdR/Q4IKOorz+7auuciCI3OsLAjzS/UmlSqWGG0g4AA20jtH/sjwAU5wcXL/HmvfcBlYvCydmzQuBmsLSiNBqgLAyy3MLJuKQGHV6+dsbT+ZUeVVnXqZXjAW1JxRQJ/2RbgrKozexIYEqG8dATACn5nzxjpsX8KimFmPaKmNLJP+onAEJNAhhwM55/zXmGxvtprFBkGsAfYmHBDAFgPMPto4/oef6dDccWUb0+gpKCitICPn/xSCQSfvEMlUGchBoBl1RxaEl+vrLdPw7m5ygH55dwb8Ahu0Cx7XScYL6m8a5L08s5PuBP75s2DZzZGLGTKzesw43OQvT3EmhrBWGoPbCHJzdvcflQJ3svLMW2A1RVVfmAV4M9aAGlxdksv5ubMYAWYBQE1RBcPMdqren64dJ+p49AbCGJyokv9HQ8Qgt4/TVDzagHxgNvbNILwxBU8GbAZSQaJLmllIdv84hNmsHDUB5awI0HDnND82auDEdVMN0/TOzbMGIQtIRWW1GxfzUt3dWE42soKiqacMCy0KegCWi6eXz7s42bciv6nvbQuOMuEQteWDblJ46xbPdhbDuAlBKlFHJs6dxsJuvb+OlDqqHlfigpdY2M7yumb8hhV10dM+Pxad4bz+NGw/mhZx1dV6ds377Na3cWFoYPmEn78S+5bs48ft55rf1d9/W/IR3hO/1r6QwAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallRedoIcon	"Private - Generated method"	^ Icons			at: #'smallRedo'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallRedoIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallRedoIconContents	"Private - Method generated with the content of the file /home/dgd/smallRedo.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACWElEQVR4nI2ST0hUURTGf/e+O/OqmXHEhLJsFiItgoykEHGIiFoZtJCIoFYhhLSJCFoIrVtF5KooIoqCIqKkjUSboaTE/kApZYgzkjk4pr4cfe/dd28LFYYi9Vtd7rnf73DO/RzWUCrrtroZddLNqOkgH039XRdrmNuB3vh2RVjU1oZcAbq9nB+tvHFWA7gZdU/Vyu11p9Ik97rC+DYbTkZtbkY9D/LR4n8Bqazb6GZUF3B6Y0OMC0cvcaS+nS/pAUStbSiPBIfdHephkI98UWESQAfQHa9Xe9wtDsm6BNRpYlWKvTX7aappprfwhMLwOFPPyv1oe0gsm2uAPlUtm493dpDYupFPv97zY76ACS0yJhFyqVFMxglNgDe4yMyrhcvO8qzP3HS8redqD31zvQyOv2VqokRQ1Oi5COkKZHyJYGyEtRYRE/z+6DepVNZtAQ6fu9jF/dHb5Atj6LkIXbIsDIeoWgeVdlDJpXXp+YhgSrP4VSMQAwpolUmJqpYMvf6MKRtmXvrWePYJcFPPmBebdsWkThrCaY3xLfODPv5YNAycVQA7dzfyzRvGakswaTCeveXl/M7l/byz2rb4EwG6aJjtX0BE8gZw3sv5ZQVMCCH4UBpAugKwAIWKX33kvfFb9Kz5aX3uCuQdL+cPrRQV0Pd9dMRsaa2STsJBVRuAfRWA62HRDAC5ygSuSAAks/HctjPpNpkQLOQDSk/LnkBs9nJ+uFpSAeQSRVyb7isTlPTKvcMaMf9Hqaz7OHEgZlMH4zaVdR+s16cqziekkccwbAAerhfwB4uIABacJugRAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallSaveAsIcon	"Private - Generated method"	^ Icons			at: #'smallSaveAs'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallSaveAsIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallSaveAsIconContents	"Private - Method generated with the content of the file /home/dgd/smallSaveAs.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAADIklEQVR4nIWTXWibBRSGny9fm37pSFqTNOlP6qJrsv5gpRR1izqmjG2oqxeWug2ZDiqKG4oMBS8mgqhMREFBdyOo4EAnliIrrpYWVjfT0NLQtU1nN7vVNj9t07RJ87O0X443Y8458b193/ecc/Eclf+RZ7OtwWoqU5bX1jK3WQqA4b+K9TVmm7e24utGr22y2KRfcLvd2g3L9nhLS99bhw4lAZ96x60u+0Fv8wM/H3n3020vPpPEoCjW0ZE5Z6mWN391Yv9gq0fzNOvVxh+DwdV/FJudzk3eWvv375z4SPojBekNi3zz3Unp626XA7srC7HBV0WGn5Wp03tll8MRAfb9fbK70t16n2e8yz8hvWGR/ojIyOV5eelwuwS6jokEO0X66qT3451SV1nSDewGHABsrbE/1vbUnkT/nznpDYsElkQG/QHpfL5duk52igxul/Fvt8vx/dViNhUPAT5AAzB4XPaD9U3WX44dcZQruRR1Zrh09hSvvHac4hILwYsx3vxylc8HsmzZ0YzbdVeLzWxyAjkAtaK89L03Xm+td9+9icWpM5iNXhobm9hcaSGbvMDDOzSslWX8frmU5zpqqHVZ1KFArCmRyvYAq6pBUUpyGf3pKodFefSRCkYCA0xMJri3+hxtT1SRSOj8Mf8QpWYnPT2jHH15K/6hqCMSSYeur29Mq5ncejS5sr5lz053Qzyexuez47knjtOh0TcQ4Up4G/HlBH6/n9jidYLBGQLD4auLycwZXRdNBdYyeX16MhRv69hbZTaaTWhaEd0/zTIwuIKqpBgdmyGRWGF5KUooFL04G1t9O5/XM8CSClAoFKIFnXRBlydd5TnFUevApBk49cM1Xjhg49yvM8zPhsmmU+dnY8n3Nzb0HHAJCN0kMZ3Lj0dj+cZ9PmPDxNQyTfe7sNtUPvxkjIVIXFJr2dPXoitfiEgOGAbmAG5FeSOvK+eDk/mOw7vWLPnYFQLTJn7zzyUXljIfhOOps8AyEABuIqzc/gdGI/X2MstRrajoQUXFEF1KfZbOrS8AU8BVQG7N/2vADZmBWsAK6MAYkL5T8C8m0GUZPNX0AAAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallSaveIcon	"Private - Generated method"	^ Icons			at: #'smallSave'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallSaveIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallSaveIconContents	"Private - Method generated with the content of the file /home/dgd/smallSave.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAC40lEQVR4nIWSXWxTdRjGf+ecWlqWdlvPoWXZJiWyTwQEP7JMTCQhKJkChgSVhCgXJhAW0XDBHYGQ4EdMTORCE6/0QkVnDGkIDAlLUKQUljX7KmaQsVr7tbXrej7WdT39ewOGwNDn9n1+7/u8yaPwP2pZpXb43LVS3jCspeby48D2Ro/a2rzim85WdfwJt/1HMBh0LeVTlrzapO1tXf/8hUMnv+h6b3cRWZJ8Q4OJQMGYD/1n3PWBQE1rs/bj8U8+E5dTVXExKcS3Z74S2dsHxZauYGWl5u15LNweXBl8dl3L6C/hMXExKcTllBAJU4jpbEac79snLvTtFmsa1dseUB95oa1R29K2YePAse+vPOmob6DOCZtU8C2D5TU19PffoGebk0TC8E0lrfo5c+E8UAWQW5q0ve1rfb8eOeSvk0o6azzwnApuBQxD5+vTR9m1PQfAh4c34ldr3lE9y1+7n0CWZd7av69TCWgO5qMfsBAfRQLGRqKEfujlzTcsdL3CiY9TOBSZ93ufcdZ5XSeBVQCKLEnLSpa9s8HvlV7avILByADXI3/hcfzMi121jIwVuDb0NLKznlBokN4DbYSvp/2plBlbWKxMKFZpMV0sLD71ysvBjlzOpLtbo2V1joDfxaWBFHeSXeTys4TDYTLTC0Sjk0RuJu9OF61zti1cCmBYZXtiPJbbsefVBo/T48blcnA2FGfgtwKKpDM0PMnsbIH8TJpYLD0Sz8wdK5dtC5hRAKrVarpqY1Zt0dNUV5L8zX7cLpnv+qZ4922VK79P8nc8ybypX41niqcqFbsE/AnE/m2iWSqPpjPlzte7nR1jt/Ks3dCEpip8+vkw2VRO6Mb8T1PpwpdCiBJwE0g8XOVK2ZauRsfLe/ZvNbzlzB0iE26uhRPF7Iz1UTKn9wN5IALM3YekhxvpdNKu1Xp7XQ7HC5KCnJ7RT5ulxSxwC7gLiAf9jyy4Jw/QDPgAGxgGzKWM/wCIojxGWb3q0gAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallSelectIcon	"Private - Generated method"	^ Icons			at: #'smallSelect'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallSelectIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallSelectIconContents	"Private - Method generated with the content of the file /home/dgd/smallSelect.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAABK0lEQVR4nKXOO0oEQRAG4L+6q2cfjojgBmJiYmroEQwNBBPxFF7AzBt4DMHcyFwUE2MRPIDruuxMd9VvsKCbrOJOQVNNPT5KcHK7gTjdA2UHMQzgnoCQIJ6AEAE3QFqQBSFk0DMcBaot1uxOobPjm/ODy/WhxrqvWvei1r35v1+FUIzM5mwzPZt7a2Qx98eX9/Hp1cOFJpV0uD8aYUmkKJJixLBCXKxv1qmCSz/0VKtly79FEJlnjdBVgG+oCljpgoVLJP499guQVFInIDtKJ6DJ3nQCPps86wTkgoYAVwYAycXYARAW8/8DKQZBgCgczdPrx3h3azBwEtmc5qQZWZx0gsXJUpzFOe85+fw2mQCIgrPrbVg6AtFAQgHpAOznyTzTHRCDLNRtev8FfDedurn+q90AAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallUndoIcon	"Private - Generated method"	^ Icons			at: #'smallUndo'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallUndoIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallUndoIconContents	"Private - Method generated with the content of the file /home/dgd/smallUndo.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACOklEQVR4nI3RT4iUdRzH8dfzPDOzOynJ7tZusJBCQaBJQUXkSiZeIumghy4FHpJOnez/QXfwECHBHjrpKS+CmEEbUst62A6CSMialmsabZjr5Li27rizMz3PPL8OjYttSn5uv9/v83l/f9/vN3IXfURfke2Bm1McPUL7bj6Il19UeKWLi6uLDpQih9fyyb3C/9EeKgcK8uu9QuiPwrdlYQ/ND+n53x8MM/J82fCbvVHUt2MnXxw3UABdJfbv5rm3KC4HRJ3Kn75Q9s7Lfd28sZPZGuPHtG7d8msoqmZcbaYutcxmjMR8VmEeot1seqxkYscqdHXTai7RFzOKMYW+Xp561sLAoNGDh0zVW3Mx2ypMJJvZN1SybqBAnGdL4Xbg7A3+WGTu5qIw/Yue6Snr331fc2am+3LtxrYhDiabePjP3NYH/iIPrCgQRdRTrqScuN1oynwjs/LMSY+/94Hvx8a7s2Au2czpRvDEdPBkf6DWII5YyPgp5/fc21eDHy8G6x9NdM3W2wbb89Keh0xfqTaSCcJ3HN1A9UJuS54oljMaKaeCdIHXP+bYS1ya47XBwCP1qnjoRZOT535bWuNe9sesuZDZ9WXmzKmYZjC2j3rHci0ESglJnln4YVJErXDnTitcwwhGKm1PJ1Rvv+U8sybhwU6ien5KYPRfgGWwyTvPgY39KHcS51vSmG/uCViuiGIh4nqTnwO1ts/3Mn/fgMDo16lXY2SZyxnDHfD9q8KGnHUxX1X+mZe/ASGg28UCHOe+AAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallUpdateIcon	"Private - Generated method"	^ Icons			at: #'smallUpdate'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallUpdateIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallUpdateIconContents	"Private - Method generated with the content of the file /home/dgd/smallUpdate.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAACz0lEQVR4nI3SW2hTBwDG8f85iSdpEnIxR+010TlmbawOWy8PdXZYFRXLVHwYLt5ARMUXH0Rh0DxIq1jQl3irw6KCSMecKDiYVZEZ6+jEFsrsapektsY2tWnNSU/S0+T45IMgxO/5+35Pn8CXRyqysRmROoOIVReJSDl+MeZbOcx85XaYL2/ZtnV1bd16saKyGovVgZJ8z/ZNNQvzAYt27tja/dOe3UJfLEXwfhjloQqiAX+1i5JS75J8gDh//jzhbqifJxNejHIFVWUzmcxo9IR7sNrs5nzAlDqp6mFVEYQCAZ9nJovnyuR0nbe9r3n+OvomHzCazkzp5aUOwW1zM8tupvvvByhDL1lTs5Shwcg1sbzUsq92xcK++rqVI99VL+gvdnLLbWHZR6C9/VFkTbWXRF+IcPtF0rF/WVtTyc0r5yfC72gRdmypGzjbcrPsRU8vnuLZSKLGrbartN248bb/VeRoMsd/P9av+8vhchlNZhMDkQGms9ncLM/immAw+FS0O53uI40XOPnnMAdau/Cf/oNhoZizF84VHjy0r1VVGej8p6szq88gqYgsqKhiND7aVVRUdALAKCLqU7qRVb5isjmdjl4DnUkd57OX2O02Ach0vxpe2xe97isw4RlTuAcotRtzjwHEWGww7il0kZvWMBkNfF3oACClTDIxkcwCaUBRNZ6NKbQBSiAQcEqSpAIYX3SGWv0HjwXu3G7BOnseGYsXr7uQ5XPLaAn+PgJMAjQ1NS0TBEFOp9OqLMtHotHoJQABkDasXvLcv3evr6M7yrSWwfNNJb45Art37W86fDTwsyzLv42Pj49ompaSJMmUSCTuNTc33/kIUAUW/6njqY5QCKvNSmwwRkpNx1d+X7+npKTkQCKRaG9oaDjzuaMYAGKgxYf+r9hU/0O5JBWIY2PvctGheOjbquWueDz+a2NjY2uew30SJ2D70vIHGPAd/9jj14AAAAAASUVORK5CYII='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallVolumeIcon	"Private - Generated method"	^ Icons			at: #'smallVolume'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallVolumeIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallVolumeIconContents	"Private - Method generated with the content of the file /home/dgd/smallVolume.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAQAAAC1+jfqAAAAAmJLR0QA/4ePzL8AAAE3SURBVHjajdE/SJRxHMfxF/f8Hp/n7vLhlAKhyKRCOpccA6EbFEW0BsciyKWphiBoCRuiQXEJnIyGampyEppydy8wBOFEyPzHA0X1wNGggV0Ivbbv8h3eH44rKWkT/XUNqdhxgrjz5kBTA90SiVlDh0+PdI6PvZhKwDmPVL13G4KaOqcuTL+6k3z8iis+Sd0175pxy0H91ss066g+SKo+Q68uq4Zd9M5DyyUdE6dHzg7XIrmdM7XHPriq8NoNaxJdgRypA7/Ezo8e9NjDpgzfhMC+kp92FXZb++u+KKPbd5S1Ak2xVJ+WH3nzqQE5Jq3IpPJgY2GOrDe+NxhCYUvZkkGXvHHfkuJPhkr/4pNiZlsDdbPq+ryVHS9Zqc1c39JAJhF5Zqw9dsXzw7yIXBb/u0fUNt7/+A0ZzEdfNHX2/wAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallWindowIcon	"Private - Generated method"	^ Icons			at: #'smallWindow'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self smallWindowIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!smallWindowIconContents	"Private - Method generated with the content of the file /home/dgd/smallWindow.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAA80lEQVR4nO2PMUvDUBhFz5c+IjFp0YJD0SWLi6OL0FIQQUQo/gk3wcXN0X8hOvgHXFRo54qWLoogKC2Eoh26iOBQadP3XpeOBpJBXLzj5TuH+8FfR6q1/XC3XL7TYRgIjhWbfKyVFbEwiHofT7f3282b065yPW9zY/RVikpFbGGRfM5LFAzGn1hg2XXzzavLQ+BYjb5j019bpbKyAFhgmDzBnwOg/vCGnsQ+UFQAeztVAn8+/eNbcHZ+AYCTnvo5/wJwxDHj59coE/TS6WGMjgFU7OrGwdHJteQkSCuwEzN87z62AGTWrQNLmWaABtoZmV/IFJjvR0sUmC0hAAAAAElFTkSuQmCC'! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!squeakIcon	"Private - Generated method"	^ Icons			at: #'squeak'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self squeakIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!squeakIconContents	"Private - Method generated with the content of the file /home/dgd/squeak.png"	^ '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o//N4T873cb/8/3/WQAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!volumeIcon	"Private - Generated method"	^ Icons			at: #'volume'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self volumeIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!volumeIconContents	"Private - Method generated with the content of the file /home/dgd/volume.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAAAmJLR0QA/4ePzL8AAAAJcEhZcwAACxMAAAsTAQCanBgAAAHrSURBVDjLldTLahRBFMbx/xu02hEvm1mZIC4qovaALhoE142+QIMvILoRgjASdKEilSBxO5CFIhKbmUAQNWmD6KCQxCAMEi+JGGKISuETfC665uIMDqRqd6hfn9Nd5zRidxsBV/jOH5rc5QhjJBDwnyUQ43xmix9ssMo8GRiygaBBg0dMM887FsCEjvyfUwEZaRdY5CrDnOUyt8GE7pbaIKEEgEGYNnjpowmYIXdfeQfErJMAUCliArFMAJwEM+Sm9V5r6iopIC+eXdDiK1lycux+90Qb2tavAlQxFxgBwwoAl8haIH+sTKN6oZ/6rW1ttjJYzEMOQZUEKPnTgnxHmzqjHW3pm77ooxApEFC9QwoxVV+U8eCTmirrq9bU1KqWVNZBEewDe55JwGfMiT1Y0hud0gct661ea1HndEzEQOUiUxzoBwt6quNq6JVyPdOcTuuwCE6AtUywpx/Mqq5RPdecZlVTTTjSBxBgp7gGCRYA136HG7qpYU2qrppqqou8VtxAcI8RyDBACddzD6GzbTAOFYIxjkLsC6pQbYHWMqGbUF11kcNeH2OdEhDgiHsBmNBZzXRaI2XFN4YtWr4LREREYEJ3vQNKfpRSXNGhPaBMBIb+ebA+Tz/wZPDE0ZMjgiAaBHb919jd/gvLk2YJrn7DBgAAAABJRU5ErkJggg=='! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!windowIcon	"Private - Generated method"	^ Icons			at: #'window'			ifAbsentPut:[ Form fromBinaryStream: (Base64MimeConverter mimeDecodeToBytes: self windowIconContents readStream) ].! !!MenuIcons class methodsFor: 'private - icons' stamp: 'dgd 9/22/2004 19:53'!windowIconContents	"Private - Method generated with the content of the file /home/dgd/window.png"	^ 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAABHNCSVQICAgIfAhkiAAAABF0RVh0U29mdHdhcmUAU29kaXBvZGmU4xfQAAAB5UlEQVR4nO2WP2gTURzHP/fuEqMpZ1vUKBqqFHFTB/+0XVSKRSxCBUVHQXHoUHeh4thFVwcnFwWdNFBErWgVVBIXBRGs1pZEjamtucvl7nKXO4fkoPXPkHqCw32m977vz4f3ePB7EBEyUtDoGzrbLRDpMDeX63XjceZqDvCDTAHoP3HuwsHduy5uVNukuXQXruSR8ORlSaqyS6IuYwqX79MFfKG8mLx9pWeJcNv2HSOnx69Lq18+Z+zRJHmjxNEt+5Al0ZJs3tZ4kM/SrW7ivZant7+Xzx9n9n79NHDkbfbeXcBRAN69eq3cHzzJ+sPHWGsnSMopSvlCy6fz8NmqpOiwYgglxdybaWanpjArCzuBBeCpAmCZVZ4Uiwzs30NXpdRcXm5ZCLAOAJ2U6/Iwl8N1nGCoA5pXGospjI0Oo7YllyX5E4cO9HD8zHlmF2UCYE1nuwhbBhCPx9ic3rAka+1VhEAkjISR8D8RGlXT9zzvnwjKuvGrsKxXStdujmPZtdBEtZrDrTsTfJgpUDMqepBLAH2Dp4aFiF+WJGlFaMYGvmVoz7ITNy4BDpAJvhirVibVoaTaqYZps23L1ue/BHXOATJKs2OahvbNNDQrTOFPFGHRJwqQaRRJ6bfT/w6XRsWPCJ8feQeiSATBXJcAAAAASUVORK5CYII='! !!Morph methodsFor: 'accessing' stamp: 'dgd 9/1/2004 16:10'!clearArea	"Answer the clear area of the receiver. It means the area free  	of docking bars."	| visTop visBottom visLeft visRight |	visTop := self top.	visBottom := self bottom.	visLeft := self left.	visRight := self right.	self dockingBars		do: [:each | 			(each isAdheringToTop and: [each bottom > visTop])				ifTrue: [visTop := each bottom].			(each isAdheringToBottom and: [each top < visBottom])				ifTrue: [visBottom := each top].			(each isAdheringToLeft and: [each right > visLeft])				ifTrue: [visLeft := each right].			(each isAdheringToRight and: [each left < visRight])				ifTrue: [visRight := each left]		].	^ Rectangle		left: visLeft		right: visRight		top: visTop		bottom: visBottom! !!Morph methodsFor: 'accessing' stamp: 'dgd 9/1/2004 16:14'!visibleClearArea	"Answer the receiver visible clear area. The intersection 	between the clear area and the viewbox."	^ self viewBox intersect: self clearArea! !!Morph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 16:21'!wantsToBeTopmost	"Answer if the receiver want to be one of the topmost objects in its owner"	^ self isFlapOrTab! !!Morph methodsFor: 'card in a stack' stamp: 'dgd 8/28/2004 19:15'!tabHitWithEvent: anEvent	"The tab key was hit.  The keyboard focus has referred this event to me, though this perhaps seems rather backwards.  Anyway, the assumption is that I have the property #tabAmongFields, so now the task is to tab to the next field."	| currentFocus fieldList anIndex itemToHighlight variableBearingMorphs otherAmenableMorphs |	currentFocus _ anEvent hand keyboardFocus.	fieldList _ self allMorphs select:		[:aMorph | (aMorph wouldAcceptKeyboardFocusUponTab) and: [aMorph isLocked not]].	fieldList isEmpty ifTrue:[^ self].	variableBearingMorphs _ self player isNil										ifTrue:[#()]										ifFalse:[self player class variableDocks collect: [:vd | vd definingMorph] thenSelect: [:m | m isInWorld]].	otherAmenableMorphs _ (self allMorphs select:		[:aMorph | (aMorph wouldAcceptKeyboardFocusUponTab) and: [aMorph isLocked not]])			copyWithoutAll: variableBearingMorphs.	fieldList _ variableBearingMorphs, otherAmenableMorphs.	anIndex _ fieldList indexOf: currentFocus ifAbsent: [nil].	itemToHighlight _ fieldList atWrap: 		(anIndex ifNotNil: [anEvent shiftPressed ifTrue: [anIndex - 1] ifFalse: [anIndex + 1]]				ifNil: [1]).	anEvent hand newKeyboardFocus: itemToHighlight. self flag: #arNote. "really???"	itemToHighlight editor selectAll.	itemToHighlight invalidRect: itemToHighlight bounds ! !!Morph methodsFor: 'dropping/grabbing' stamp: 'dgd 9/10/2004 13:42'!justDroppedInto: aMorph event: anEvent	"This message is sent to a dropped morph after it has been dropped on -- and been accepted by -- a drop-sensitive morph"	| aWindow partsBinCase cmd aStack |	(self formerOwner notNil and: [self formerOwner ~~ aMorph])		ifTrue: [self removeHalo].	self formerOwner: nil.	self formerPosition: nil.	cmd _ self valueOfProperty: #undoGrabCommand.	cmd ifNotNil:[aMorph rememberCommand: cmd.				self removeProperty: #undoGrabCommand].	(partsBinCase _ aMorph isPartsBin) ifFalse:		[self isPartsDonor: false].	(aWindow _ aMorph ownerThatIsA: SystemWindow) ifNotNil:		[aWindow isActive ifFalse:			[aWindow activate]].	(self isInWorld and: [partsBinCase not]) ifTrue:		[self world startSteppingSubmorphsOf: self].	"Note an unhappy inefficiency here:  the startStepping... call will often have already been called in the sequence leading up to entry to this method, but unfortunately the isPartsDonor: call often will not have already happened, with the result that the startStepping... call will not have resulted in the startage of the steppage."	"An object launched by certain parts-launcher mechanisms should end up fully visible..."	(self hasProperty: #beFullyVisibleAfterDrop) ifTrue:		[aMorph == ActiveWorld ifTrue:			[self goHome].		self removeProperty: #beFullyVisibleAfterDrop].	(self holdsSeparateDataForEachInstance and: [(aStack _ self stack) notNil])		ifTrue:			[aStack reassessBackgroundShape]! !!Morph methodsFor: 'event handling' stamp: 'nk 3/10/2004 19:48'!handlerForYellowButtonDown: anEvent 	"Return the (prospective) handler for a mouse down event with the yellow button pressed.	The 	handler is temporarily installed and can be used for morphs further 	down the hierarchy to negotiate whether the inner or the outer 	morph should finally handle the event."	(self hasYellowButtonMenu or: [ self handlesMouseDown: anEvent ])		ifFalse: [ ^ nil].	"Not interested."	anEvent handler		ifNil: [^ self].	"Nobody else was interested"	"Same priority but I am innermost."	^ self mouseDownPriority >= anEvent handler mouseDownPriority		ifFalse: [nil ]		ifTrue: [self]! !!Morph methodsFor: 'event handling' stamp: 'dgd 9/19/2004 13:14'!mouseDown: evt 	"Handle a mouse down event. The default response is to let my 	eventHandler, if any, handle it."	evt yellowButtonPressed		ifTrue: ["First check for option (menu) click"			^ self yellowButtonActivity: evt shiftPressed].	self eventHandler		ifNotNil: [self eventHandler mouseDown: evt fromMorph: self]! !!Morph methodsFor: 'event handling' stamp: 'dgd 8/28/2004 18:20'!moveOrResizeFromKeystroke: anEvent 	"move or resize the receiver based on a keystroke"	| dir | 	anEvent keyValue = 28 ifTrue: [dir := -1 @ 0].	anEvent keyValue = 29 ifTrue: [dir := 1 @ 0].	anEvent keyValue = 30 ifTrue: [dir := 0 @ -1].	anEvent keyValue = 31 ifTrue: [dir := 0 @ 1].	dir notNil		ifTrue:[			anEvent controlKeyPressed ifTrue: [dir := dir * 10].			anEvent shiftPressed				ifTrue: [self extent: self extent + dir]				ifFalse: [self position: self position + dir].			"anEvent wasHandled: true."	]! !!Morph methodsFor: 'event handling' stamp: 'dgd 8/28/2004 18:42'!tabAmongFields	^ Preferences tabAmongFields		or: [self hasProperty: #tabAmongFields] ! !!Morph methodsFor: 'event handling' stamp: 'dgd 9/18/2004 17:23'!yellowButtonActivity: shiftState 	"Find me or my outermost owner that has items to add to a 	yellow button menu. 	shiftState is true if the shift was pressed. 	Otherwise, build a menu that contains the contributions from 	myself and my interested submorphs, 	and present it to the user."	| menu |	self isWorldMorph		ifFalse: [| outerOwner | 			outerOwner := self outermostOwnerWithYellowButtonMenu.			outerOwner				ifNil: [^ self].			outerOwner == self				ifFalse: [^ outerOwner yellowButtonActivity: shiftState]		].	menu := self buildYellowButtonMenu: ActiveHand.	menu		addTitle: self externalName		icon: (self iconOrThumbnailOfSize: 28).	menu popUpInWorld: self currentWorld.! !!Morph methodsFor: 'event handling-override' stamp: 'nk 3/10/2004 19:47'!handlerForMouseDown: anEvent 	"Return the (prospective) handler for a mouse down event. The handler is temporarily 	installed and can be used for morphs further down the hierarchy to negotiate whether 	the inner or the outer morph should finally handle the event."	anEvent blueButtonPressed		ifTrue: [^ self handlerForBlueButtonDown: anEvent].	anEvent yellowButtonPressed		ifTrue: [^ self handlerForYellowButtonDown: anEvent].	anEvent controlKeyPressed		ifTrue: [^ self handlerForMetaMenu: anEvent].	(self handlesMouseDown: anEvent)		ifFalse: [^ nil].	"not interested"	anEvent handler		ifNil: [^ self ].	"Same priority but I am innermost"	"Nobody else was interested"	^self mouseDownPriority >= anEvent handler mouseDownPriority		ifTrue: [ self]		ifFalse: [ nil]! !!Morph methodsFor: 'events-processing' stamp: 'dgd 9/10/2004 13:36'!handleMouseDown: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self]. "not interested"	anEvent hand removePendingBalloonFor: self.	anEvent hand removePendingHaloFor: self.	anEvent wasHandled: true.	(anEvent controlKeyPressed			and: [Preferences cmdGesturesEnabled])		ifTrue: [^ self invokeMetaMenu: anEvent].	"Make me modal during mouse transitions"	anEvent hand newMouseFocus: self event: anEvent.	anEvent blueButtonChanged ifTrue:[^self blueButtonDown: anEvent].		"this mouse down could be the start of a gesture, or the end of a gesture focus"	(self isGestureStart: anEvent)		ifTrue: [^ self gestureStart: anEvent].	self mouseDown: anEvent.	Preferences maintainHalos		ifFalse:[ anEvent hand removeHaloFromClick: anEvent on: self ].	(self handlesMouseStillDown: anEvent) ifTrue:[		self startStepping: #handleMouseStillDown: 			at: Time millisecondClockValue + self mouseStillDownThreshold			arguments: {anEvent copy resetHandlerFields}			stepTime: self mouseStillDownStepRate ].! !!Morph methodsFor: 'geometry' stamp: 'dgd 8/31/2004 16:22'!shiftSubmorphsBy: delta	self shiftSubmorphsOtherThan: (submorphs select: [:m | m wantsToBeTopmost]) by: delta! !!Morph methodsFor: 'geometry' stamp: 'dgd 9/10/2004 12:37'!worldBoundsForHalo	"Answer the rectangle to be used as the inner dimension of my halos.	Allow for showing either bounds or fullBounds, and compensate for the optional bounds rectangle."	| r |	r _ (Preferences haloEnclosesFullBounds)		ifFalse: [ self boundsIn: nil ]		ifTrue: [ self fullBoundsInWorld ].	Preferences showBoundsInHalo ifTrue: [ ^r outsetBy: 2 ].	^r! !!Morph methodsFor: 'geometry eToy' stamp: 'dgd 9/20/2004 14:15'!goHome	| box fb |	owner isInMemory ifFalse: [^ self].	owner isNil ifTrue: [^ self].	self visible ifFalse: [^ self].	box := owner visibleClearArea.	fb := self fullBounds.	fb left < box left		ifTrue: [self left: box left - fb left + self left].	fb right > box right		ifTrue: [self right: box right - fb right + self right].	fb top < box top		ifTrue: [self top: box top - fb top + self top].	fb bottom > box bottom		ifTrue: [self bottom: box bottom - fb bottom + self bottom].! !!Morph methodsFor: 'halos and balloon help' stamp: 'dgd 9/7/2004 18:35'!balloonHelpDelayTime	"Return the number of milliseconds before a balloon help should be put up on the receiver. The balloon help will only be put up if the receiver responds to #wantsBalloon by returning true."	^ Preferences balloonHelpDelayTime! !!Morph methodsFor: 'halos and balloon help' stamp: 'dgd 9/18/2004 20:34'!balloonHelpTextForHandle: aHandle	"Answer a string providing balloon help for the given halo handle"	|  itsSelector |	itsSelector _ aHandle eventHandler firstMouseSelector.	(itsSelector == #doRecolor:with:) ifTrue:		[^ Preferences propertySheetFromHalo			ifTrue: ['Open a property sheet.']			ifFalse: ['Change color']].	(itsSelector == #mouseDownInDimissHandle:with:) ifTrue:		[^ Preferences preserveTrash			ifTrue: ['Move to trash']			ifFalse: ['Remove from screen']].	#(	(addFullHandles							'More halo handles')		(addSimpleHandles						'Fewer halo handles')		(chooseEmphasisOrAlignment				'Emphasis & alignment')		(chooseFont								'Change font')		(chooseNewGraphicFromHalo				'Choose a new graphic')		(chooseStyle								'Change style')		(dismiss									'Remove')		(doDebug:with:							'Debug')		(doDirection:with:						'Choose forward direction')		(doDup:with:							'Duplicate')		(doMakeSibling:with: 					'Make a sibling')		(doMenu:with:							'Menu')		(doGrab:with:							'Pick up')		(editButtonsScript						'See the script for this button')		(editDrawing							'Repaint')		(maybeDoDup:with:						'Duplicate')		(makeNascentScript						'Make a scratch script')		(makeNewDrawingWithin				'Paint new object')		(mouseDownInCollapseHandle:with:		'Collapse')		(mouseDownOnHelpHandle:				'Help')		(openViewerForArgument				'Open a Viewer for me')		(openViewerForTarget:with:				'Open a Viewer for me')		(paintBackground						'Paint background')		(prepareToTrackCenterOfRotation:with:	'Move object or set center of rotation')		(presentViewMenu						'Present the Viewing menu')		(startDrag:with:							'Move')		(startGrow:with:							'Change size') 		(startRot:with:							'Rotate')		(startScale:with:							'Change scale') 		(tearOffTile								'Make a tile representing this object')		(tearOffTileForTarget:with:				'Make a tile representing this object')		(trackCenterOfRotation:with:				'Set center of rotation')	) 	do:		[:pair | itsSelector == pair first ifTrue: [^ pair last]].	^ 'unknown halo handle'! !!Morph methodsFor: 'halos and balloon help' stamp: 'dgd 9/9/2004 22:43'!removeHalo	"remove the surrounding halo (if any)"	self halo isNil		ifFalse: [self primaryHand removeHalo]! !!Morph methodsFor: 'halos and balloon help' stamp: 'dgd 9/10/2004 13:59'!transferHalo: event from: formerHaloOwner	"Progressively transfer the halo to the next likely recipient"	| localEvt w target |	self flag: #workAround. "For halo's distinction between 'target' and 'innerTarget' we need to bypass any renderers."	(formerHaloOwner == self and:[self isRenderer and:[self wantsHaloFromClick not]]) ifTrue:[		event shiftPressed ifTrue:[			target _ owner.			localEvt _ event transformedBy: (self transformedFrom: owner).		] ifFalse:[			target _ self renderedMorph.			localEvt _ event transformedBy: (target transformedFrom: self).		].		^target transferHalo: localEvt from: target]."	formerHaloOwner == self ifTrue:[^ self removeHalo]."	"Never transfer halo to top-most world"	(self isWorldMorph and:[owner isNil]) ifFalse:[		(self wantsHaloFromClick and:[formerHaloOwner ~~ self]) 			ifTrue:[^self addHalo: event from: formerHaloOwner]].	event shiftPressed ifTrue:[		"Pass it outwards"		owner ifNotNil:[^owner transferHalo: event from: formerHaloOwner].		"We're at the top level; throw the event back in to find recipient"		formerHaloOwner removeHalo.		^self processEvent: event copy resetHandlerFields.	].	self submorphsDo:[:m|		localEvt _ event transformedBy: (m transformedFrom: self).		(m fullContainsPoint: localEvt position) 			ifTrue:[^m transferHalo: event from: formerHaloOwner].	].	"We're at the bottom most level; throw the event back up to the root to find recipient"	formerHaloOwner removeHalo.	Preferences maintainHalos ifFalse:[		(w _ self world) ifNil: [ ^self ].		localEvt _ event transformedBy: (self transformedFrom: w) inverseTransformation.		^w processEvent: localEvt resetHandlerFields.	].! !!Morph methodsFor: 'initialization' stamp: 'dgd 9/1/2004 16:12'!openInWorld: aWorld	"Add this morph to the requested World."	(aWorld visibleClearArea origin ~= (0@0) and: [self position = (0@0)]) ifTrue:		[self position: aWorld visibleClearArea origin].	aWorld addMorph: self.	aWorld startSteppingSubmorphsOf: self! !!Morph methodsFor: 'menu' stamp: 'nk 6/15/2004 07:11'!addGraphModelYellowButtonItemsTo: aCustomMenu event: evt	^aCustomMenu! !!Morph methodsFor: 'menu' stamp: 'dgd 9/18/2004 17:47'!addModelYellowButtonItemsTo: aCustomMenu event: evt 	"Give my models a chance to add their context-menu items to  	aCustomMenu."	self model		ifNotNilDo: [:mod |			mod				addModelYellowButtonMenuItemsTo: aCustomMenu				forMorph: self				hand: evt hand]! !!Morph methodsFor: 'menu' stamp: 'nk 3/10/2004 19:49'!addMyYellowButtonMenuItemsToSubmorphMenus	"Answer true if I have items to add to the context menus of my submorphs"	^true! !!Morph methodsFor: 'menu' stamp: 'dgd 9/13/2004 19:23'!addNestedYellowButtonItemsTo: aMenu event: evt 	"Add items to aMenu starting with me and proceeding down 	through my submorph chain, 	letting any submorphs that include the event position 	contribute their items to the bottom of the menu, separated by 	a line."	| underMouse |	self addYellowButtonMenuItemsTo: aMenu event: evt.	underMouse := self				submorphThat: [:each | each containsPoint: evt position]				ifNone: [^ self].	(underMouse addMyYellowButtonMenuItemsToSubmorphMenus			and: [underMouse hasYellowButtonMenu])		ifTrue: [| submenu |			aMenu addLine.			submenu := MenuMorph new defaultTarget: underMouse.			underMouse addNestedYellowButtonItemsTo: submenu event: evt.			aMenu				add: underMouse externalName				icon: (underMouse iconOrThumbnailOfSize: 16)				subMenu: submenu		]! !!Morph methodsFor: 'menu' stamp: 'dgd 9/18/2004 16:30'!addTitleForHaloMenu: aMenu 	aMenu		addTitle: self externalName		icon: (self iconOrThumbnailOfSize: 28) ! !!Morph methodsFor: 'menu' stamp: 'dgd 9/20/2004 14:34'!addYellowButtonMenuItemsTo: aMenu event: evt 	"Populate aMenu with appropriate menu items for a  	yellow-button (context menu) click."	aMenu defaultTarget: self.	""	Preferences noviceMode		ifFalse: [aMenu addStayUpItem].	""	self addModelYellowButtonItemsTo: aMenu event: evt.	""	Preferences generalizedYellowButtonMenu		ifFalse: [^ self].	""	Preferences cmdGesturesEnabled		ifTrue: [""			aMenu addLine.			aMenu add: 'inspect' translated action: #inspect].	""	aMenu addLine.	self world selectedObject == self		ifTrue: [aMenu add: 'deselect' translated action: #removeHalo]		ifFalse: [aMenu add: 'select' translated action: #addHalo].	""	(self isWorldMorph			or: [self mustBeBackmost]			or: [self wantsToBeTopmost])		ifFalse: [""			aMenu addLine.			aMenu add: 'send to back' translated action: #goBehind.			aMenu add: 'bring to front' translated action: #comeToFront.			self addEmbeddingMenuItemsTo: aMenu hand: evt hand].	self isWorldMorph		ifFalse: [""			self isFullOnScreen				ifFalse: [aMenu add: 'move onscreen' translated action: #goHome]].	""	Preferences noviceMode		ifFalse: [""			self addLayoutMenuItems: aMenu hand: evt hand.			(owner notNil					and: [owner isTextMorph])				ifTrue: [self addTextAnchorMenuItems: aMenu hand: evt hand]].	""	self isWorldMorph		ifFalse: [""			aMenu addLine.			self addToggleItemsToHaloMenu: aMenu].	""	aMenu addLine.	self isWorldMorph		ifFalse: [aMenu add: 'copy to paste buffer' translated action: #copyToPasteBuffer:].	(self allStringsAfter: nil) isEmpty		ifFalse: [aMenu add: 'copy text' translated action: #clipText].	""	self addExportMenuItems: aMenu hand: evt hand.	""	(Preferences noviceMode not			and: [self isWorldMorph not])		ifTrue: [""			aMenu addLine.			aMenu add: 'adhere to edge...' translated action: #adhereToEdge].	""	self addCustomMenuItems: aMenu hand: evt hand! !!Morph methodsFor: 'menu' stamp: 'dgd 9/18/2004 17:23'!buildYellowButtonMenu: aHand 	"build the morph menu for the yellow button"	| menu |	menu := MenuMorph new defaultTarget: self.	self addNestedYellowButtonItemsTo: menu event: ActiveEvent.	MenuIcons decorateMenu: menu.	^ menu! !!Morph methodsFor: 'menu' stamp: 'dgd 9/18/2004 18:19'!hasYellowButtonMenu	"Answer true if I have any items at all for a context (yellow  	button) menu."	^ self wantsYellowButtonMenu			or: [self models anySatisfy: [:each | each hasModelYellowButtonMenuItems]]! !!Morph methodsFor: 'menu' stamp: 'nk 3/10/2004 19:51'!outermostOwnerWithYellowButtonMenu	"Answer me or my outermost owner that is willing to contribute menu items to a context menu.	Don't include the world."	| outermost |	outermost _ self outermostMorphThat: [ :ea |		ea isWorldMorph not and: [ ea hasYellowButtonMenu ]].	^outermost ifNil: [ self hasYellowButtonMenu ifTrue: [ self ] ifFalse: []] ! !!Morph methodsFor: 'menu' stamp: 'dgd 9/18/2004 18:20'!wantsYellowButtonMenu	"Answer true if the receiver wants a yellow button menu"	self		valueOfProperty: #wantsYellowButtonMenu		ifPresentDo: [:value | ^ value].	""	self isInSystemWindow		ifTrue: [^ false].""	(Preferences noviceMode			and: [self isInDockingBar])		ifTrue: [^ false].""	^ Preferences generalizedYellowButtonMenu! !!Morph methodsFor: 'menu' stamp: 'dgd 9/18/2004 18:35'!wantsYellowButtonMenu: aBoolean 	"Change the receiver to wants or not a yellow button menu"	self setProperty: #wantsYellowButtonMenu toValue: aBoolean! !!Morph methodsFor: 'menus' stamp: 'dgd 9/18/2004 19:14'!addToggleItemsToHaloMenu: aMenu	"Add standard true/false-checkbox items to the memu"	#(		(resistsRemovalString toggleResistsRemoval 'whether I should be reistant to easy deletion via the pink X handle' true)		(stickinessString toggleStickiness 'whether I should be resistant to a drag done by mousing down on me' true)		(lockedString lockUnlockMorph 'when "locked", I am inert to all user interactions' true)		(hasClipSubmorphsString changeClipSubmorphs 'whether the parts of objects within me that are outside my bounds should be masked.' false)		(hasDirectionHandlesString changeDirectionHandles 'whether direction handles are shown with the halo' false)		(hasDragAndDropEnabledString changeDragAndDrop 'whether I am open to having objects dropped into me' false)	)		select:[:each | Preferences noviceMode not or:[each fourth]]		thenDo:		[:each |			aMenu addUpdating: each first action: each second.			aMenu balloonTextForLastItem: each third translated].	self couldHaveRoundedCorners ifTrue:		[aMenu addUpdating: #roundedCornersString action: #toggleCornerRounding.		aMenu balloonTextForLastItem: 'whether my corners should be rounded']! !!Morph methodsFor: 'menus' stamp: 'dgd 9/22/2004 20:30'!model	^ nil ! !!Morph methodsFor: 'meta-actions' stamp: 'dgd 9/18/2004 16:24'!addEmbeddingMenuItemsTo: aMenu hand: aHandMorph	"Construct a menu offerring embed targets for the receiver.  If the incoming menu is is not degenerate, add the constructed menu as a submenu; in any case, answer the embed-target menu"	| menu potentialEmbeddingTargets |	potentialEmbeddingTargets := self potentialEmbeddingTargets.	potentialEmbeddingTargets size > 1 ifFalse:[^ self].	menu := MenuMorph new defaultTarget: self.	potentialEmbeddingTargets reverseDo: [:m | 			menu				add: (m knownName ifNil:[m class name asString])				target: m				selector: #addMorphFrontFromWorldPosition:				argument: self topRendererOrSelf.			menu lastItem icon: (m iconOrThumbnailOfSize: 16).			self owner == m ifTrue:[menu lastItem emphasis: 1].		].	aMenu add:'embed into' translated subMenu: menu.	^ menu! !!Morph methodsFor: 'meta-actions' stamp: 'dgd 9/18/2004 17:23'!buildHandleMenu: aHand	"Build the morph menu for the given morph's halo's menu handle. This menu has two sections. The first section contains commands that are interpreted by the hand; the second contains commands provided by the target morph. This method allows the morph to decide which items should be included in the hand's section of the menu."	| menu |	(Preferences generalizedYellowButtonMenu			and: [Preferences noviceMode])		ifTrue: [^ self buildYellowButtonMenu: aHand].	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu addLine.	self addStandardHaloMenuItemsTo: menu hand: aHand.	menu defaultTarget: aHand.	self addAddHandMenuItemsForHalo: menu  hand: aHand.	menu defaultTarget: self.	self addCustomHaloMenuItems: menu hand: aHand.	menu defaultTarget: aHand.	^ menu! !!Morph methodsFor: 'model access' stamp: 'nk 3/10/2004 19:51'!models	"Answer a collection of whatever models I may have."	self modelOrNil ifNil: [ ^EmptyArray ].	^Array with: self modelOrNil! !!Morph methodsFor: 'selected object' stamp: 'dgd 8/28/2004 16:30'!selectedObject	"answer the selected object for the hand or nil is none"	^ self primaryHand selectedObject! !!Morph methodsFor: 'structure' stamp: 'dgd 9/1/2004 17:17'!isInDockingBar	"answer if the receiver is in a menu bar"	^ (owner notNil) and: [owner isDockingBar]! !!Morph methodsFor: 'structure' stamp: 'dgd 9/18/2004 15:56'!isInSystemWindow	"answer if the receiver is in a system window"	^ owner isMorph and:[owner isSystemWindow or:[owner isInSystemWindow]]! !!Morph methodsFor: 'structure' stamp: 'dgd 8/28/2004 18:43'!pasteUpMorphHandlingTabAmongFields	"Answer the nearest PasteUpMorph in my owner chain that has the tabAmongFields property, or nil if none"	| aPasteUp |	aPasteUp _ self owner.	[aPasteUp notNil] whileTrue:		[aPasteUp tabAmongFields ifTrue:			[^ aPasteUp].		aPasteUp _ aPasteUp owner].	^ nil! !!Morph methodsFor: 'submorphs-accessing' stamp: 'dgd 8/31/2004 16:53'!dockingBars	"Answer the receiver's dockingBars"	^ self submorphs		select: [:each | each isDockingBar]! !!Morph methodsFor: 'submorphs-accessing' stamp: 'dgd 9/6/2004 14:17'!mainDockingBars	"Answer the receiver's main dockingBars"	^ self dockingBars		select: [:each | each hasProperty: #mainDockingBarTimeStamp]! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'dgd 9/10/2004 19:02'!delete	"Remove the receiver as a submorph of its owner and make its 	new owner be nil."	| aWorld |	self removeHalo.	aWorld := self world ifNil: [World].	"Terminate genie recognition focus"	"I encountered a case where the hand was nil, so I put in a little 	protection - raa "	" This happens when we are in an MVC project and open	  a morphic window. - BG "	aWorld ifNotNil:	  [self disableSubmorphFocusForHand: self activeHand.	  self activeHand releaseKeyboardFocus: self;		  releaseMouseFocus: self.].	owner ifNotNil:[ self privateDelete.		self player ifNotNilDo: [ :player |			"Player must be notified"			player noteDeletionOf: self fromWorld: aWorld]].! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'dgd 9/1/2004 16:26'!deleteDockingBars	"Delete the receiver's docking bars"	self dockingBars		do: [:each | each delete]! !!Morph methodsFor: 'testing' stamp: 'dgd 8/31/2004 15:00'!isDockingBar	"Return true if the receiver is a docking bar"	^ false! !!Morph methodsFor: 'testing' stamp: 'dgd 9/20/2004 14:31'!isFullOnScreen	"Answer if the receiver is full contained in the owner visible  	area."	owner isInMemory		ifFalse: [^ true].	owner isNil		ifTrue: [^ true].	self visible		ifFalse: [^ true].	^ owner clearArea containsRect: self fullBounds! !!Morph methodsFor: 'thumbnail' stamp: 'dgd 9/12/2004 21:12'!icon	"Answer a form with an icon to represent the receiver"	^ self valueOfProperty: #icon! !!Morph methodsFor: 'thumbnail' stamp: 'dgd 9/12/2004 20:33'!iconOrThumbnail	"Answer an appropiate form to represent the receiver"	^ self icon		ifNil: [ | maxExtent fb |maxExtent := 320 @ 240.			fb := self fullBounds.			fb area <= (maxExtent x * maxExtent y)				ifTrue: [self imageForm]				ifFalse: [self imageFormForRectangle: (fb topLeft extent: maxExtent)]		]! !!Morph methodsFor: 'thumbnail' stamp: 'dgd 9/13/2004 12:43'!iconOrThumbnailOfSize: aNumberOrPoint 	"Answer an appropiate form to represent the receiver"	^ self iconOrThumbnail scaledIntoFormOfSize: aNumberOrPoint! !!BorderedMorph methodsFor: 'menu' stamp: 'dgd 9/18/2004 19:16'!addBorderStyleMenuItems: aMenu hand: aHandMorph	"Add border-style menu items"	| subMenu |	subMenu _ MenuMorph new defaultTarget: self.	"subMenu addTitle: 'border' translated."	subMenu addStayUpItemSpecial.	subMenu addList: 		{{'border color...' translated. #changeBorderColor:}.		{'border width...' translated. #changeBorderWidth:}}.	subMenu addLine.	BorderStyle borderStyleChoices do:		[:sym | (self borderStyleForSymbol: sym)			ifNotNil:				[subMenu add: sym translated target: self selector: #setBorderStyle: argument: sym]].	aMenu add: 'border style' translated subMenu: subMenu! !!DockingBarMorph methodsFor: 'WiW support' stamp: 'dgd 9/7/2004 19:25'!morphicLayerNumber	"helpful for insuring some morphs always appear in front of or 	behind others. smaller numbers are in front"	^ 11! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 9/13/2004 19:59'!addBlankIconsIfNecessary: anIcon 	"If any of my items have an icon, ensure that all do by using 	anIcon for those that don't"	self items		reject: [:each | each hasIconOrMarker]		thenDo: [:each | each icon: anIcon]! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 12:01'!adhereToBottom	"Instract the receiver to adhere to bottom"	 self adhereTo:#bottom! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 12:01'!adhereToLeft	"Instract the receiver to adhere to left"	self adhereTo: #left! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 12:01'!adhereToRight	"Instract the receiver to adhere to right"	self adhereTo: #right! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 12:01'!adhereToTop	"Instract the receiver to adhere to top"	self adhereTo: #top! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 14:28'!autoGradient	"Answer if the receiver is in autoGradient mode"	^ autoGradient! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 14:28'!autoGradient: aBoolean 	"Instruct the receiver to fill the owner or not"	autoGradient := aBoolean.	self updateColor! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 13:38'!avoidVisibleBordersAtEdge"Answer if the receiver is in avoidVisibleBordersAtEdge mode"	^ avoidVisibleBordersAtEdge! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 13:57'!avoidVisibleBordersAtEdge: aBoolean 	"Instruct the receiver to avoid showing the borders at edge"	avoidVisibleBordersAtEdge := aBoolean.self updateLayoutProperties.! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 12:02'!beFloating	"Instract the receiver to be floating"	self adhereTo: #none! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 9/1/2004 12:10'!color: aColor 	"Set the receiver's color."	super color: aColor.	originalColor := aColor asColor! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 13:35'!fillsOwner	"Answer if the receiver is in fillOwner mode"	^ fillsOwner! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 13:57'!fillsOwner: aBoolean 	"Instruct the receiver to fill the owner or not"	fillsOwner := aBoolean.self updateLayoutProperties! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 11:57'!isAdheringToBottom	"Answer true if the receiver is adhering to bottom"	^ self edgeToAdhereTo == #bottom! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 11:57'!isAdheringToLeft	"Answer true if the receiver is adhering to left"	^ self edgeToAdhereTo == #left! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 11:57'!isAdheringToRight	"Answer true if the receiver is adhering to right"	^ self edgeToAdhereTo == #right! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 11:57'!isAdheringToTop	"Answer true if the receiver is adhering to top"	^ self edgeToAdhereTo == #top! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/30/2004 23:13'!isFloating	"Answer true if the receiver has a float layout"	^ self isHorizontal not		and: [self isVertical not]! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 11:58'!isHorizontal	"Answer true if the receiver has a horizontal layout"	^ self isAdheringToTop		or: [self isAdheringToBottom]! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 9/1/2004 21:23'!isSticky	"answer whether the receiver is Sticky"	^ Preferences noviceMode		or: [super isSticky] ! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 11:58'!isVertical	"Answer true if the receiver has a vertical layout"	^ self isAdheringToLeft		or: [self isAdheringToRight]! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 9/2/2004 11:01'!resistsRemoval"Answer whether the receiver is marked as resisting removal"	^ Preferences noviceMode		or: [super resistsRemoval]! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 9/9/2004 19:45'!rootMenu	^ self! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 9/1/2004 16:39'!stayUp	^ false! !!DockingBarMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2004 16:33'!wantsToBeTopmost	"Answer if the receiver want to be one of the topmost objects in 	its owner"	^ true! !!DockingBarMorph methodsFor: 'change reporting' stamp: 'dgd 9/1/2004 15:29'!ownerChanged"The receiver's owner has changed its layout. "	self updateBounds.	^ super ownerChanged! !!DockingBarMorph methodsFor: 'construction' stamp: 'dgd 9/10/2004 16:48'!add: wordingString icon: aForm help: helpString subMenu: aMenuMorph 	"Append the given submenu with the given label."	| item |	item := MenuItemMorph new.	item contents: wordingString.	item subMenu: aMenuMorph.	item icon: aForm.	helpString isNil		ifFalse: [item setBalloonText: helpString].	self addMorphBack: item! !!DockingBarMorph methodsFor: 'construction' stamp: 'dgd 9/10/2004 16:48'!add: wordingString icon: aForm subMenu: aMenuMorph 	"Append the given submenu with the given label."^ self add: wordingString icon: aForm help: nil subMenu: aMenuMorph ! !!DockingBarMorph methodsFor: 'construction' stamp: 'dgd 9/1/2004 19:08'!add: aString subMenu: aMenuMorph 	"Append the given submenu with the given label."	self add: aString icon: nil subMenu: aMenuMorph ! !!DockingBarMorph methodsFor: 'construction' stamp: 'dgd 9/1/2004 19:10'!addLine	"Append a divider line to this menu. Suppress duplicate lines."	submorphs isEmpty ifTrue: [^ self].	(self lastSubmorph isKindOf: MenuLineMorph)		ifFalse: [self addMorphBack: MenuLineMorph new].! !!DockingBarMorph methodsFor: 'construction' stamp: 'dgd 8/31/2004 11:34'!addSpace: sizePointOrNumber 	"Add a new space of the given size to the receiver."	| space |	space := RectangleMorph new.	space extent: sizePointOrNumber asPoint.	space color: Color transparent.	space borderWidth: 0.	self addMorphBack: space! !!DockingBarMorph methodsFor: 'construction' stamp: 'dgd 8/31/2004 11:34'!addSpacer	"Add a new spacer to the receiver. 	 	Spacer are objects that try to use as much space as they can"	self		addMorphBack: (AlignmentMorph newSpacer: Color transparent)! !!DockingBarMorph methodsFor: 'control' stamp: 'dgd 9/9/2004 21:48'!activeSubmenu: aSubmenu 	activeSubMenu isNil		ifFalse: [activeSubMenu delete].	activeSubMenu := aSubmenu.	aSubmenu isNil		ifTrue: [^ self].	""	activeSubMenu selectItem: nil event: nil.	MenuIcons decorateMenu: activeSubMenu.	activeSubMenu activatedFromDockingBar: self.	activeSubMenu borderColor: self borderColor.	activeSubMenu beSticky.	activeSubMenu resistsRemoval: true.activeSubMenu removeMatchString.! !!DockingBarMorph methodsFor: 'control' stamp: 'dgd 9/1/2004 16:48'!deleteIfPopUp: evt 	evt		ifNotNil: [evt hand releaseMouseFocus: self]! !!DockingBarMorph methodsFor: 'control' stamp: 'dgd 9/1/2004 16:40'!selectItem: aMenuItem event: anEvent 	selectedItem		ifNotNil: [selectedItem deselect: anEvent].	selectedItem := aMenuItem.	selectedItem		ifNotNil: [selectedItem select: anEvent]! !!DockingBarMorph methodsFor: 'dropping/grabbing' stamp: 'dgd 9/7/2004 14:47'!aboutToBeGrabbedBy: aHand 	"The morph is about to be grabbed, make it float"	self beFloating.	self updateBounds.	self updateColor.	(self bounds containsPoint: aHand position)		ifFalse: [self center: aHand position].self owner restoreFlapsDisplay! !!DockingBarMorph methodsFor: 'dropping/grabbing' stamp: 'dgd 8/31/2004 14:37'!justDroppedInto: aMorph event: anEvent 	| ownerBounds leftRegion droppedPosition rightRegion topRegion bottomRegion |	super justDroppedInto: aMorph event: anEvent.	""	self owner isNil		ifTrue: [^ self].	""	ownerBounds := aMorph bounds.	topRegion := ownerBounds bottom: ownerBounds top + (ownerBounds height // 5).	bottomRegion := ownerBounds top: ownerBounds bottom - (ownerBounds height // 5).	""	leftRegion := ownerBounds right: ownerBounds left + (ownerBounds width // 5).	leftRegion := leftRegion top: topRegion bottom.	leftRegion := leftRegion bottom: bottomRegion top.	""	rightRegion := ownerBounds left: ownerBounds right - (ownerBounds width // 5).	rightRegion := rightRegion top: topRegion bottom.	rightRegion := rightRegion bottom: bottomRegion top.	""	droppedPosition := anEvent position.	(topRegion containsPoint: droppedPosition)		ifTrue: [			^ self adhereToTop].	(bottomRegion containsPoint: droppedPosition)		ifTrue: [			^ self adhereToBottom].	(leftRegion containsPoint: droppedPosition)		ifTrue: [			^ self adhereToLeft].	(rightRegion containsPoint: droppedPosition)		ifTrue: [			^ self adhereToRight].	""	self beFloating! !!DockingBarMorph methodsFor: 'events' stamp: 'dgd 9/1/2004 19:29'!activate: evt 	"Receiver should be activated; e.g., so that control passes  	correctly."	evt hand newMouseFocus: self! !!DockingBarMorph methodsFor: 'events-processing' stamp: 'dgd 9/9/2004 21:43'!handleFocusEvent: evt	"Handle focus events. Valid menu transitions are determined based on the menu currently holding the focus after the mouse went down on one of its children."	(evt isMouse and:[ evt isMouseUp ]) ifTrue:[^ self].	self processEvent: evt.	"Need to handle keyboard input if we have the focus."	evt isKeyboard ifTrue: [^ self handleEvent: evt].	"We need to handle button clicks outside and transitions to local popUps so throw away everything else"	(evt isMouseOver or:[evt isMouse not]) ifTrue:[^self].	"What remains are mouse buttons and moves"	evt isMove ifFalse:[^self handleEvent: evt]. "handle clicks outside by regular means"	"Now it's getting tricky. On #mouseMove we might transfer control to *either* the currently active submenu or the pop up owner, if any. Since the active sub menu is always displayed upfront check it first."	selectedItem ifNotNil:[(selectedItem activateSubmenu: evt) ifTrue:[^self]].! !!DockingBarMorph methodsFor: 'geometry' stamp: 'dgd 8/31/2004 14:29'!extent: aPoint 	"change the receiver's extent"	super extent: aPoint.	self updateColor! !!DockingBarMorph methodsFor: 'initialization' stamp: 'dgd 9/2/2004 11:03'!initialize	"initialize the receiver"	super initialize.	""	selectedItem := nil.	activeSubMenu := nil.	fillsOwner := true.	avoidVisibleBordersAtEdge := true.	autoGradient := Preferences gradientMenu.	""	self setDefaultParameters.	""	self beFloating.	""	self layoutInset: 0.	! !!DockingBarMorph methodsFor: 'initialization' stamp: 'dgd 8/30/2004 22:17'!setDefaultParameters	"private - set the default parameter using Preferences as the inspiration source"	| colorFromMenu worldColor menuColor menuBorderColor |	colorFromMenu := Preferences menuColorFromWorld				and: [Display depth > 4]				and: [(worldColor := self currentWorld color) isColor].	""	menuColor := colorFromMenu				ifTrue: [worldColor luminance > 0.7						ifTrue: [worldColor mixed: 0.85 with: Color black]						ifFalse: [worldColor mixed: 0.4 with: Color white]]				ifFalse: [Preferences menuColor].	""	menuBorderColor := Preferences menuAppearance3d				ifTrue: [#raised]				ifFalse: [colorFromMenu						ifTrue: [worldColor muchDarker]						ifFalse: [Preferences menuBorderColor]].	""	self		setColor: menuColor		borderWidth: Preferences menuBorderWidth		borderColor: menuBorderColor! !!DockingBarMorph methodsFor: 'menus' stamp: 'dgd 9/1/2004 15:29'!snapToEdgeIfAppropriate	(self owner isNil			or: [self owner isHandMorph])		ifTrue: [^ self].	""	self updateBounds! !!DockingBarMorph methodsFor: 'meta-actions' stamp: 'dgd 9/1/2004 22:11'!blueButtonDown: anEvent 	"Special gestures (cmd-mouse on the Macintosh; Alt-mouse on  	Windows and Unix) allow a mouse-sensitive morph to be  	moved or bring up a halo for the morph."	"In NoviceMode we don't want halos"		Preferences noviceMode 	ifFalse: [super blueButtonDown: anEvent]	! !!DockingBarMorph methodsFor: 'rounding' stamp: 'dgd 8/31/2004 14:16'!roundedCorners	"Return a list of those corners to round"	self isAdheringToTop		ifTrue: [^ #(2 3 )].	self isAdheringToBottom		ifTrue: [^ #(1 4 )].	self isAdheringToLeft 		ifTrue: [^ #(3 4 )].	self isAdheringToRight		ifTrue: [^ #(1 2 )].	^ #(1 2 3 4 )! !!DockingBarMorph methodsFor: 'submorphs-accessing' stamp: 'dgd 9/1/2004 18:41'!noteNewOwner: aMorph 	"I have just been added as a submorph of aMorph"	super noteNewOwner: aMorph.	self submorphs		do: [:each | each adjustLayoutBounds].! !!DockingBarMorph methodsFor: 'submorphs-add/remove' stamp: 'dgd 9/1/2004 19:26'!delete	activeSubMenu		ifNotNil: [activeSubMenu delete].	^ super delete! !!DockingBarMorph methodsFor: 'testing' stamp: 'dgd 8/31/2004 15:00'!isDockingBar	"Return true if the receiver is a docking bar"	^ true! !!DockingBarMorph methodsFor: 'private' stamp: 'dgd 9/9/2004 21:24'!selectedItem	selectedItem isNil		ifTrue: [^ nil].	^ selectedItem isSelected		ifTrue: [ selectedItem]		ifFalse: [ nil]! !!DockingBarMorph methodsFor: 'private - accessing' stamp: 'dgd 8/31/2004 14:35'!adhereTo: edgeSymbol 	"Private - Instruct the receiver to adhere to the given edge.  	 	Options: #left #top #right #bottom or #none"	""	(#(#left #top #right #bottom #none ) includes: edgeSymbol)		ifFalse: [^ self error: 'invalid option'].	""	self setToAdhereToEdge: edgeSymbol.	self updateLayoutProperties.	self updateColor! !!DockingBarMorph methodsFor: 'private - accessing' stamp: 'dgd 8/31/2004 13:56'!edgeToAdhereTo	"private - answer the edge where the receiver is adhering to"	^ self		valueOfProperty: #edgeToAdhereTo		ifAbsent: [#none]! !!DockingBarMorph methodsFor: 'private - accessing' stamp: 'dgd 9/1/2004 15:19'!predominantDockingBarsOfChastes: predominantChastes 	"Private - Answer a collection of the docking bar of my owner  	that are predominant to the receiver.  	 	By 'predominant' we mean docking bar that have the right to  	get a position before the receiver.  	 	The predominance of individual living in the same chaste is  	determinated by the arrival order.  	"	| allDockingBars byChaste byArrival |	(self owner isNil			or: [self owner isHandMorph])		ifTrue: [^ #()].	""	allDockingBars := self owner dockingBars.	""	byChaste := allDockingBars				select: [:each | predominantChastes includes: each edgeToAdhereTo].	""	(predominantChastes includes: self edgeToAdhereTo)		ifFalse: [^ byChaste].	""	byChaste := byChaste				reject: [:each | each edgeToAdhereTo = self edgeToAdhereTo].	""	byArrival := allDockingBars				select: [:each | each edgeToAdhereTo = self edgeToAdhereTo].	byArrival := byArrival copyAfter: self.	""	^ byChaste , byArrival! !!DockingBarMorph methodsFor: 'private - accessing' stamp: 'dgd 9/1/2004 19:39'!usedHeightByPredominantDockingBarsOfChastes: predominantChastes 	"Private - convenience"	| predominants |	predominants := self predominantDockingBarsOfChastes: predominantChastes.	^ predominants isEmpty		ifTrue: [0]		ifFalse: [(predominants				collect: [:each | each height]) sum]! !!DockingBarMorph methodsFor: 'private - accessing' stamp: 'dgd 9/1/2004 19:38'!usedWidthByPredominantDockingBarsOfChastes: predominantChastes 	"Private - convenience"	| predominants |	predominants := self predominantDockingBarsOfChastes: predominantChastes.	^ predominants isEmpty		ifTrue: [0]		ifFalse: [(predominants				collect: [:each | each width]) sum]! !!DockingBarMorph methodsFor: 'private - layout' stamp: 'dgd 9/1/2004 15:29'!updateBounds	"private - update the receiver's bounds"	self updateExtent.	self isFloating		ifFalse: [self updatePosition]! !!DockingBarMorph methodsFor: 'private - layout' stamp: 'dgd 9/1/2004 12:11'!updateColor	"private - update the receiver's color"	| fill |	self autoGradient		ifFalse: [^ self].	""	fill := GradientFillStyle ramp: {0.0 -> originalColor twiceLighter. 1.0 -> originalColor twiceDarker}.	""	fill origin: self topLeft.	self isVertical		ifTrue: [fill direction: self width @ 0]		ifFalse: [fill direction: 0 @ self height].	""	self fillStyle: fill! !!DockingBarMorph methodsFor: 'private - layout' stamp: 'dgd 9/1/2004 15:20'!updateExtent	"private - update the receiver's extent"	| margin |	self fullBounds.	self fillsOwner		ifFalse: [^ self].	""	margin := self avoidVisibleBordersAtEdge				ifTrue: [self borderWidth * 2]				ifFalse: [0].""	self isHorizontal		ifTrue: [self width: self owner width + margin].""	self isVertical		ifTrue: [| usedHeight | 			usedHeight := self usedHeightByPredominantDockingBarsOfChastes: #(#top #bottom ).			self height: self owner height + margin - usedHeight]! !!DockingBarMorph methodsFor: 'private - layout' stamp: 'dgd 8/31/2004 14:03'!updateLayoutProperties	"private - update the layout properties based on adhering,  	fillsOwner and avoidVisibleBordersAtEdge preferencs"	""	(self isHorizontal			or: [self isFloating])		ifTrue: [self listDirection: #leftToRight]		ifFalse: [self listDirection: #topToBottom].	""	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self fillsOwner		ifTrue: [""			self isHorizontal				ifTrue: [self hResizing: #spaceFill].			self isVertical				ifTrue: [self vResizing: #spaceFill]].	! !!DockingBarMorph methodsFor: 'private - layout' stamp: 'dgd 9/1/2004 13:06'!updatePosition	"private - update the receiver's position"	| edgeSymbol margin |	edgeSymbol := self edgeToAdhereTo.	self		perform: (edgeSymbol , ':') asSymbol		with: (self owner perform: edgeSymbol).	""	margin := self avoidVisibleBordersAtEdge				ifTrue: [self borderWidth asPoint]				ifFalse: [0 asPoint].	""	self isAdheringToTop		ifTrue: [| usedHeight | 			usedHeight := self usedHeightByPredominantDockingBarsOfChastes: #(#top ).			self topLeft: self owner topLeft - margin + (0 @ usedHeight)].	self isAdheringToBottom		ifTrue: [| usedHeight | 			usedHeight := self usedHeightByPredominantDockingBarsOfChastes: #(#bottom ).			self bottomLeft: self owner bottomLeft + (-1 @ 1 * margin) - (0 @ usedHeight)].	""	self isAdheringToLeft		ifTrue: [| usedHeight usedWidth | 			usedHeight := self usedHeightByPredominantDockingBarsOfChastes: #(#top ).			usedWidth := self usedWidthByPredominantDockingBarsOfChastes: #(#left ).			self topLeft: self owner topLeft - margin + (usedWidth @ usedHeight)].	self isAdheringToRight		ifTrue: [| usedHeight usedWidth | 			usedHeight := self usedHeightByPredominantDockingBarsOfChastes: #(#top ).			usedWidth := self usedWidthByPredominantDockingBarsOfChastes: #(#right ).			self topRight: self owner topRight + (1 @ -1 * margin) + (usedWidth negated @ usedHeight)]! !!DockingBarMorph methodsFor: 'menu' stamp: 'dgd 9/18/2004 18:28'!wantsYellowButtonMenu	"Answer true if the receiver wants a yellow button menu"	^ Preferences noviceMode not! !!DockingBarMorph class methodsFor: 'samples' stamp: 'dgd 9/1/2004 19:52'!example1	" 	DockingBarMorph example1.  	 	(Color lightBlue wheel: 4) do:[:c | DockingBarMorph example1 	color: c; borderColor: c twiceDarker]. 	 	World deleteDockingBars.	"	| instance |	instance := DockingBarMorph new.	""	instance addSpace: 10.	instance		addMorphBack: (ClockMorph new show24hr: true).	instance addSpacer.	instance		addMorphBack: (ClockMorph new show24hr: true).	instance addSpace: 10.	""	instance adhereToTop.	""	instance autoGradient: true.	instance layoutInset: 10.	""	^ instance openInWorld! !!DockingBarMorph class methodsFor: 'samples' stamp: 'dgd 9/22/2004 18:53'!example2	" 	DockingBarMorph example2.  	World deleteDockingBars.  	"	| menu |	menu := DockingBarMorph new.	""	menu addSpace: 10.	menu		add: 'Squeak'		icon: MenuIcons smallConfigurationIcon		subMenu: self squeakMenu.	menu		add: 'Configuration'		icon: MenuIcons smallWindowIcon		subMenu: self squeakMenu.	menu addSpace: 10.	menu addLine.	menu addSpace: 10.	menu		addMorphBack: (ImageMorph new image: MenuIcons smallBackIcon).	menu addSpace: 10.	menu		addMorphBack: (ImageMorph new image: MenuIcons smallForwardIcon).	menu addSpace: 10.	menu addLine.	menu addSpacer.	""	menu addMorphBack: ProjectNavigationMorph new speakerIcon.	""	menu addSpace: 10.	menu		addMorphBack: (ClockMorph new show24hr: true).	menu addSpace: 10.	""	menu adhereToTop.	""	menu autoGradient: true.	""	^ menu openInWorld! !!DockingBarMorph class methodsFor: 'samples' stamp: 'dgd 9/1/2004 19:55'!example3	" 	DockingBarMorph example3. 	World deleteDockingBars.	"	(Color lightBlue wheel: 4)		with: #(#top #bottom #left #right )		do: [:col :edge | 			| instance | 			instance := DockingBarMorph example1.			instance adhereTo: edge.			instance color: col.			instance borderColor: col twiceDarker]! !!DockingBarMorph class methodsFor: 'samples' stamp: 'dgd 9/1/2004 20:12'!squeakMenu	| menu |	menu := MenuMorph new defaultTarget: self.	menu		add: 'Hello'		target: self		selector: #inform:		argument: 'Hello World!!'.	menu		add: 'Long Hello'		target: self		selector: #inform:		argument: 'Helloooo World!!'.	menu		add: 'A very long Hello'		target: self		selector: #inform:		argument: 'Hellooooooooooooooo World!!'.	menu		add: 'An incredible long Hello'		target: self		selector: #inform:		argument: 'Hellooooooooooooooooooooooo World!!'.	^ menu! !!DockingBarMorph class methodsFor: 'scripting' stamp: 'dgd 8/31/2004 14:26'!defaultNameStemForInstances	^ 'DockingBar'! !!FlapTab methodsFor: 'positioning' stamp: 'dgd 9/7/2004 14:24'!fitOnScreen	"19 sept 2000 - allow flaps in any paste up"	| constrainer |	constrainer _ (owner ifNil: [self]) clearArea.	self flapShowing "otherwise no point in doing this"		ifTrue:[self spanWorld].	self orientation == #vertical ifTrue: [		self top: ((self top min: (constrainer bottom- self height)) max: constrainer top).	] ifFalse: [		self left: ((self left min: (constrainer right - self width)) max: constrainer left).	].	self flapShowing ifFalse: [self positionObject: self atEdgeOf: constrainer].! !!FlapTab methodsFor: 'positioning' stamp: 'dgd 9/7/2004 14:37'!positionObject: anObject        "anObject could be myself or my referent""Could consider container _ referent pasteUpMorph, to allow flaps on things other than the world, but for the moment, let's skip it!!"	"19 sept 2000 - going for all paste ups"	| pum |	pum _ self pasteUpMorph ifNil: [^ self].	^self 		positionObject: anObject 		atEdgeOf: pum clearArea! !!FlapTab methodsFor: 'positioning' stamp: 'dgd 9/7/2004 16:36'!spanWorld	| container area |	container _ self pasteUpMorph ifNil: [self currentWorld].	area _ container clearArea.	(self orientation == #vertical) ifTrue: [		referent vResizing == #rigid 			ifTrue:[referent height: area height].		referent hResizing == #rigid 			ifTrue:[referent width: (referent width min: area width - self width)].		referent top: area top.		referent bottom: (area bottom min: referent bottom).	] ifFalse: [		referent hResizing == #rigid			ifTrue:[referent width: area width].		referent vResizing == #rigid			ifTrue:[referent height: (referent height min: area height - self height)].		referent left: area left.		referent right: (area right min: referent right).	] ! !!FlapTab methodsFor: 'show & hide' stamp: 'dgd 8/31/2004 16:25'!showFlap	"Open the flap up"	| thicknessToUse flapOwner |	"19 sept 2000 - going for all paste ups <- raa note"	flapOwner _ self pasteUpMorph.	self referentThickness <= 0		ifTrue:			[thicknessToUse _ lastReferentThickness ifNil: [100].			self orientation == #horizontal				ifTrue:					[referent height: thicknessToUse]				ifFalse:					[referent width: thicknessToUse]].	inboard ifTrue:		[self stickOntoReferent].  "makes referent my owner, and positions me accordingly"	referent pasteUpMorph == flapOwner		ifFalse:			[flapOwner accommodateFlap: self.  "Make room if needed"			flapOwner addMorphFront: referent.			flapOwner startSteppingSubmorphsOf: referent.			self positionReferent.			referent adaptToWorld: flapOwner].	inboard  ifFalse:		[self adjustPositionVisAVisFlap].	flapShowing _ true.		self pasteUpMorph hideFlapsOtherThan: self ifClingingTo: edgeToAdhereTo.	flapOwner bringTopmostsToFront! !!HaloMorph methodsFor: 'accessing' stamp: 'dgd 9/9/2004 22:55'!wantsToBeTopmost	"Answer if the receiver want to be one of the topmost objects in 	its owner"	^ true! !!HaloMorph methodsFor: 'drawing' stamp: 'dgd 9/12/2004 22:00'!drawOn: aCanvas 	"Draw this morph only if it has no target."	target isNil		ifTrue: [^ super drawOn: aCanvas].	(Preferences showBoundsInHalo			and: [target isWorldMorph not])		ifTrue: [| boundsColor | 			boundsColor := Preferences menuSelectionColor						ifNil: [Color blue].			aCanvas				frameAndFillRectangle: self bounds				fillColor: Color transparent				borderWidth: 2				borderColor: boundsColor]! !!HaloMorph methodsFor: 'handles' stamp: 'dgd 8/28/2004 18:13'!addGrowHandle: haloSpec	target isFlexMorph ifFalse: 		[(self addHandle: haloSpec				on: #mouseDown send: #startGrow:with: to: self)				on: #mouseMove send: #doGrow:with: to: self]	"This or addScaleHandle:, but not both, will prevail at any one time"! !!HaloMorph methodsFor: 'handles' stamp: 'sw 10/2/2001 22:18'!openViewerForTarget: evt with: aHandle	"Open  a viewer for my inner target"	self obtainHaloForEvent: evt andRemoveAllHandlesBut: nil.	innerTarget openViewerForArgument! !!HaloMorph methodsFor: 'private' stamp: 'dgd 9/19/2004 19:15'!addDirectionHandles	| centerHandle d w directionShaft patch patchColor crossHairColor |	self showingDirectionHandles ifFalse: [^ self].	directionArrowAnchor _ (target point: target referencePosition in: self world) rounded.	patch _ target imageFormForRectangle: (Rectangle center: directionArrowAnchor extent: 3@3).	patchColor _ patch colorAt: 1@1.	(directionShaft _ LineMorph newSticky makeForwardArrow)		borderWidth: 2; borderColor: (Color green orColorUnlike: patchColor).	self positionDirectionShaft: directionShaft.	self addMorphFront: directionShaft.	directionShaft setCenteredBalloonText: 'Set forward direction' translated;		on: #mouseDown send: #doDirection:with: to: self;		on: #mouseMove send: #trackDirectionArrow:with: to: self;		on: #mouseUp send: #setDirection:with: to: self.	d _ 15.  "diameter"  w _ 3.  "borderWidth"	crossHairColor _ Color red orColorUnlike: patchColor.	(centerHandle _ EllipseMorph newBounds: (0@0 extent: d@d) color: Color transparent)			borderWidth: w; borderColor: (Color blue orColorUnlike: patchColor);			addMorph: (LineMorph from: (d//2)@w to: (d//2)@(d-w-1) color: crossHairColor width: 1) lock;			addMorph: (LineMorph from: w@(d//2) to: (d-w-1)@(d//2) color: crossHairColor width: 1) lock;			align: centerHandle bounds center with: directionArrowAnchor.	centerHandle wantsYellowButtonMenu: false.	self addMorph: centerHandle.	centerHandle setCenteredBalloonText: 'Set rotation center' translated;			on: #mouseDown send: #prepareToTrackCenterOfRotation:with: to: self;			on: #mouseMove send: #trackCenterOfRotation:with: to: self;			on: #mouseUp send: #setCenterOfRotation:with: to: self! !!HaloMorph methodsFor: 'private' stamp: 'dgd 9/18/2004 18:23'!addGraphicalHandleFrom: formKey at: aPoint	"Add the supplied form as a graphical handle centered at the given point.  Return the handle."	| handle aForm |	aForm _ (ScriptingSystem formAtKey: formKey) ifNil: [ScriptingSystem formAtKey: #SolidMenu].	handle _ ImageMorph new image: aForm; bounds: (Rectangle center: aPoint extent: aForm extent).	handle wantsYellowButtonMenu: false.	self addMorph: handle.	handle on: #mouseUp send: #endInteraction to: self.	^ handle! !!HaloMorph methodsFor: 'private' stamp: 'dgd 9/18/2004 18:24'!addHandle: handleSpec on: eventName send: selector to: recipient	"Add a handle within the halo box as per the haloSpec, and set it up to respond to the given event by sending the given selector to the given recipient.  Return the handle."	| handle aPoint iconName colorToUse |	aPoint _ self positionIn: haloBox horizontalPlacement: handleSpec horizontalPlacement verticalPlacement: handleSpec verticalPlacement.	handle _ EllipseMorph		newBounds: (Rectangle center: aPoint extent: self handleSize asPoint)		color: (colorToUse _ Color colorFrom: handleSpec color).	handle wantsYellowButtonMenu: false.	handle borderColor: colorToUse muchDarker.	self addMorph: handle.	(iconName _ handleSpec iconSymbol) ifNotNil:		[ | form |		form _ ScriptingSystem formAtKey: iconName.		form ifNotNil:			[handle addMorphCentered: (ImageMorph new				image: form; 				color: colorToUse makeForegroundColor;				lock)]].	handle on: #mouseUp send: #endInteraction to: self.	handle on: eventName send: selector to: recipient.	self isMagicHalo ifTrue:[		handle on: #mouseEnter send: #handleEntered to: self.		handle on: #mouseLeave send: #handleLeft to: self].	handle setBalloonText: (target balloonHelpTextForHandle: handle) translated.	^ handle! !!HaloMorph methodsFor: 'private' stamp: 'dgd 9/18/2004 18:23'!addHandleAt: aPoint color: aColor icon: iconName on: eventName send: selector to: recipient	"Add a handle centered at the given point with the given color, and set it up to respond to the given event by sending the given selector to the given recipient.  Return the handle."	| handle |	handle _ EllipseMorph		newBounds: (Rectangle center: aPoint extent: self handleSize asPoint)		color: aColor.	handle wantsYellowButtonMenu: false.	handle borderColor: aColor muchDarker.	self addMorph: handle.	iconName ifNotNil:		[ | form |		form _ ScriptingSystem formAtKey: iconName.		form ifNotNil:			[handle addMorphCentered: (ImageMorph new				image: form; 				color: aColor makeForegroundColor;				lock)]].	handle on: #mouseUp send: #endInteraction to: self.	handle on: eventName send: selector to: recipient.	handle setBalloonText: (target balloonHelpTextForHandle: handle) translated.	^ handle! !!HaloMorph methodsFor: 'private' stamp: 'dgd 9/18/2004 18:24'!addNameBeneath: outerRectangle string: aString	"Add a name display centered beneath the bottom of the outer rectangle. Return the handle."	| nameMorph namePosition w |	w _ self world ifNil:[target world].	nameMorph _ NameStringInHalo contents: aString font: Preferences standardHaloLabelFont.	nameMorph wantsYellowButtonMenu: false.	nameMorph color: Color magenta.	nameMorph useStringFormat; target: innerTarget; putSelector: #tryToRenameTo:.	namePosition _ outerRectangle bottomCenter -		((nameMorph width // 2) @ (self handleSize negated // 2 - 1)).	nameMorph position: (namePosition min: w viewBox bottomRight - nameMorph extent y + 2).	nameMorph balloonTextSelector: #objectNameInHalo.	self addMorph: nameMorph.	^ nameMorph! !!HaloMorph methodsFor: 'private' stamp: 'dgd 9/9/2004 22:45'!maybeDismiss: evt with: dismissHandle 	"Ask hand to dismiss my target if mouse comes up in it."	evt hand obtainHalo: self.	(dismissHandle containsPoint: evt cursorPoint)		ifTrue: [target resistsRemoval				ifTrue: [(PopUpMenu							confirm: 'Really throw this away' translated							trueChoice: 'Yes' translated							falseChoice: 'Um, no, let me reconsider' translated)						ifFalse: [^ self]].			evt hand removeHalo.			Preferences preserveTrash				ifTrue: [Preferences soundsEnabled						ifTrue: [TrashCanMorph playDeleteSound].					self stopStepping.					target slideToTrash: evt]				ifFalse: [target dismissViaHalo]]		ifFalse: [self delete.			target addHalo: evt]! !!HaloMorph methodsFor: 'private' stamp: 'dgd 9/10/2004 13:38'!removeAllHandlesBut: h	"Remove all handles except h."	(Preferences maintainHalos and:[h isNil])		ifTrue:[self removeHalo]		ifFalse:[			submorphs copy do:				[:m | m == h ifFalse: [m delete]]		].! !!HaloMorph methodsFor: 'menu' stamp: 'dgd 9/20/2004 19:35'!wantsYellowButtonMenu	"Answer true if the receiver wants a yellow button menu"	^ false! !!HandMorph methodsFor: 'halo handling' stamp: 'dgd 9/9/2004 22:44'!removeHalo	"remove the receiver's halo (if any)"	| halo |	halo := self halo.	halo		ifNil: [^ self].	halo delete.	self removeProperty: #halo! !!HandMorph methodsFor: 'halo handling' stamp: 'dgd 9/9/2004 22:44'!removeHaloFromClick: anEvent on: aMorph 	| halo |	halo := self halo				ifNil: [^ self].	(halo target hasOwner: self)		ifTrue: [^ self].	(halo staysUpWhenMouseIsDownIn: aMorph)		ifFalse: [self removeHalo]! !!HandMorph methodsFor: 'paste buffer' stamp: 'dgd 9/19/2004 13:49'!pasteMorph	| aPastee |	PasteBuffer ifNil: [^ self inform: 'Nothing to paste.' translated].	self attachMorph: (aPastee _ self objectToPaste).	aPastee align: aPastee center with: self position.	aPastee player ifNotNil: [aPastee player startRunning]! !!HandMorph methodsFor: 'selected object' stamp: 'dgd 8/28/2004 16:30'!selectedObject	"answer the selected object for the hand or nil is none"	| halo |	halo := self halo.	halo isNil		ifTrue: [^ nil].	^ halo target renderedMorph! !!HandleMorph methodsFor: 'dropping/grabbing' stamp: 'dgd 9/10/2004 13:40'!justDroppedInto: aMorph event: anEvent	"So that when the hand drops me (into the world) I go away"	self removeHalo.	lastPointBlock ifNotNil: [lastPointBlock value: self center].	self flag: #arNote. "Probably unnecessary"	anEvent hand releaseKeyboardFocus: self.	self changed.	self delete.! !!ImageMorph methodsFor: 'drawing' stamp: 'dgd 9/7/2004 17:24'!drawOn: aCanvas	| style |	(style _ self borderStyle) ifNotNil:[		style frameRectangle: bounds on: aCanvas.	].	self isOpaque		ifTrue:[aCanvas drawImage: image at: self innerBounds origin]		ifFalse:[aCanvas translucentImage: image at: self innerBounds origin]! !!MenuItemMorph methodsFor: 'accessing' stamp: 'dgd 9/13/2004 19:00'!icon: aForm 	"change the the receiver's icon"	icon := aForm.	self height: self minHeight.self width: self minWidth! !!MenuItemMorph methodsFor: 'change reporting' stamp: 'dgd 9/1/2004 18:29'!ownerChanged	"The receiver's owner, some kind of a pasteup, has changed its 	layout."	super ownerChanged.	self updateLayoutInDockingBar! !!MenuItemMorph methodsFor: 'drawing' stamp: 'dgd 9/4/2004 15:50'!drawOn: aCanvas 	| stringColor stringBounds |	isSelected & isEnabled		ifTrue: [			aCanvas fillRectangle: self bounds fillStyle: self selectionFillStyle.			stringColor := color negated		]		ifFalse: [stringColor := color].	stringBounds := bounds.	self isInDockingBar		ifTrue: [stringBounds := stringBounds left: stringBounds left + 4].	self hasIcon		ifTrue: [| iconForm | 			iconForm := self iconForm.			aCanvas				translucentImage: iconForm				at: stringBounds left @ (self top + (self height - iconForm height // 2)).			stringBounds := stringBounds left: stringBounds left + iconForm width + 2.		].	self hasMarker		ifTrue: [ stringBounds := stringBounds left: stringBounds left + self submorphBounds width + 8 ].	stringBounds := stringBounds top: stringBounds top + stringBounds bottom - self fontToUse height // 2.	aCanvas		drawString: contents		in: stringBounds		font: self fontToUse		color: stringColor.	self hasSubMenu		ifTrue: [| subMenuMarker subMenuMarkerPosition | 			subMenuMarker := self subMenuMarker.			subMenuMarkerPosition := (self right - subMenuMarker width) @ (self top + self bottom - subMenuMarker height // 2).			self isInDockingBar				ifTrue: [subMenuMarkerPosition := subMenuMarkerPosition - (4 @ -1)].			aCanvas paintImage: subMenuMarker at: subMenuMarkerPosition.		]! !!MenuItemMorph methodsFor: 'events' stamp: 'dgd 9/9/2004 21:09'!deselectTimeOut: evt	"Deselect timout. Now really deselect"	owner selectedItem == self		ifTrue:[			evt hand newMouseFocus: nil.			owner selectItem: nil event: evt].! !!MenuItemMorph methodsFor: 'events' stamp: 'dgd 9/9/2004 20:31'!mouseDown: evt	"Handle a mouse down event. Menu items get activated when the mouse is over them."	evt shiftPressed ifTrue: [^ super mouseDown: evt].  "enable label editing" 	(self isInDockingBar			and:[isSelected]			"and:[owner selectedItem == self]")		ifTrue:[			evt hand newMouseFocus: nil.			owner selectItem: nil event: evt. ]		ifFalse:[			evt hand newMouseFocus: owner. "Redirect to menu for valid transitions"			owner selectItem: self event: evt. ]! !!MenuItemMorph methodsFor: 'events' stamp: 'dgd 9/9/2004 20:37'!mouseEnter: evt	"The mouse entered the receiver"	owner ifNotNil: [owner stayUp ifFalse: [self mouseEnterDragging: evt]].	self isInDockingBar ifTrue:[		(owner selectedItem notNil				and:[owner selectedItem ~~ self])			ifTrue:[owner selectItem: self event: evt.].	].! !!MenuItemMorph methodsFor: 'events' stamp: 'dgd 9/9/2004 21:20'!mouseUp: evt	"Handle a mouse up event. Menu items get activated when the mouse is over them. Do nothing if we're not in a 'valid menu transition', meaning that the current hand focus must be aimed at the owning menu."	evt hand mouseFocus == owner ifFalse:[^self].	self contentString ifNotNil:[		self contents: self contentString withMarkers: true inverse: true.		self refreshWorld.		(Delay forMilliseconds: 200) wait].	self isInDockingBar		ifTrue:[ owner rootMenu selectItem: nil event: evt ]		ifFalse:[ self deselect: evt ].	self invokeWithEvent: evt.		! !!MenuItemMorph methodsFor: 'layout' stamp: 'dgd 9/4/2004 15:49'!minHeight	| iconHeight |	iconHeight := self hasIcon				ifTrue: [self icon height + 2]				ifFalse: [0].	^ self fontToUse height max: iconHeight ! !!MenuItemMorph methodsFor: 'layout' stamp: 'dgd 9/4/2004 15:49'!minWidth	| subMenuWidth iconWidth markerWidth margin |	subMenuWidth := self hasSubMenu				ifTrue: [10]				ifFalse: [0].	iconWidth := self hasIcon				ifTrue: [self icon width + 2]				ifFalse: [0].	markerWidth := self hasMarker				ifTrue: [self submorphBounds width + 8]				ifFalse: [0].	margin := self isInDockingBar				ifTrue: [10]				ifFalse: [0].	^ (self fontToUse widthOfString: contents)		+ subMenuWidth + iconWidth + markerWidth + margin! !!MenuItemMorph methodsFor: 'rounding' stamp: 'dgd 9/1/2004 18:11'!roundedCorners	"Return a list of those corners to round"	self isInDockingBar		ifFalse: [^ super roundedCorners].	""	owner isFloating		ifTrue: [^ #(1 4 )].	owner isAdheringToTop		ifTrue: [^ #(1 4 )].	owner isAdheringToBottom		ifTrue: [^ #(2 3 )].	owner isAdheringToLeft		ifTrue: [^ #(1 2 )].	owner isAdheringToRight		ifTrue: [^ #(3 4 )].	""	^ #(1 2 3 4 )! !!MenuItemMorph methodsFor: 'rounding' stamp: 'dgd 9/1/2004 18:11'!wantsRoundedCorners	^ self isInDockingBar		ifTrue: [true]		ifFalse: [super wantsRoundedCorners]! !!MenuItemMorph methodsFor: 'selecting' stamp: 'dgd 9/13/2004 20:29'!adjacentTo	self isInDockingBar		ifFalse: [^ {self bounds topRight + (10 @ 0). self bounds topLeft}].	""	owner isFloating		ifTrue: [^ {self bounds bottomLeft + (5 @ 5)}].	owner isAdheringToTop		ifTrue: [^ {self bounds bottomLeft + (5 @ 5)}].	owner isAdheringToLeft		ifTrue: [^ {self bounds topRight + (5 @ 5)}].	""	owner isAdheringToBottom		ifTrue: [^ {self bounds topLeft + (5 @ 5)}].	owner isAdheringToRight		ifTrue: [^ {self bounds topLeft + (5 @ -5)}].	""	^ {self bounds bottomLeft + (3 @ 5)}! !!MenuItemMorph methodsFor: 'selecting' stamp: 'dgd 9/9/2004 21:26'!isSelected	^ isSelected ! !!MenuItemMorph methodsFor: 'selecting' stamp: 'dgd 9/1/2004 18:52'!select: evt	self isSelected: true.	owner activeSubmenu: subMenu.	subMenu ifNotNil: [		subMenu delete.		subMenu			popUpAdjacentTo: self adjacentTo			forHand: evt hand			from: self.		subMenu selectItem: nil event: evt].! !!MenuItemMorph methodsFor: 'submorphs-accessing' stamp: 'dgd 9/9/2004 20:25'!noteNewOwner: aMorph 	"I have just been added as a submorph of aMorph"	super noteNewOwner: aMorph.	self updateLayoutInDockingBar! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 18:07'!bottomArrow^ ColorForm				mappingWhiteToTransparentFrom: (SubMenuMarker rotateBy: 90)! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 17:10'!iconForm	"private - answer the form to be used as the icon"	^ isEnabled		ifTrue: [self icon]		ifFalse: [self icon asGrayScale]! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 18:09'!leftArrow	^ ColorForm		mappingWhiteToTransparentFrom: (SubMenuMarker rotateBy: 180)! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 18:07'!rightArrow	^ SubMenuMarker! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 17:51'!selectionFillStyle	"answer the fill style to use with the receiver is the selected  	element"	| fill baseColor preferenced |	Display depth <= 2		ifTrue: [^ Color gray].	preferenced := Preferences menuSelectionColor.	preferenced notNil ifTrue:[^ preferenced].	baseColor := owner color negated.	Preferences gradientMenu		ifFalse: [^ baseColor].	fill := GradientFillStyle ramp: {0.0 -> baseColor twiceLighter . 1 -> baseColor twiceDarker}.	fill origin: self topLeft.	(self isInDockingBar			and: [self owner isVertical not])		ifTrue: [fill direction: 0 @ self height]		ifFalse: [fill direction: self width @ 0].	^ fill! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 18:09'!subMenuMarker	"private - answer the form to be used as submenu marker"	self isInDockingBar		ifFalse: [^ self rightArrow].	""	owner isFloating		ifTrue: [^ self bottomArrow].	owner isAdheringToTop		ifTrue: [^ self bottomArrow].	owner isAdheringToBottom		ifTrue: [^ self upArrow].owner isAdheringToLeft ifTrue:[^ self rightArrow].owner isAdheringToRight ifTrue:[^ self leftArrow].	""	^ self rightArrow! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 18:09'!upArrow	^ ColorForm		mappingWhiteToTransparentFrom: (SubMenuMarker rotateBy: 270)! !!MenuItemMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 19:24'!updateLayoutInDockingBar	self isInDockingBar		ifFalse: [^ self].	""	owner isVertical		ifTrue: [""			self hResizing: #spaceFill.			self vResizing: #shrinkWrap]		ifFalse: [""			self hResizing: #shrinkWrap.			self vResizing: #spaceFill].	self extent: self minWidth @ self minHeight! !!MenuItemMorph class methodsFor: 'class initialization' stamp: 'jm 11/16/97 09:17'!initialize	"MenuItemMorph initialize"	| f |	f _ Form		extent: 5@9		fromArray: #(2147483648 3221225472 3758096384 4026531840 4160749568 4026531840 3758096384 3221225472 2147483648)		offset: 0@0.	SubMenuMarker _ ColorForm mappingWhiteToTransparentFrom: f.! !!MenuLineMorph methodsFor: 'change reporting' stamp: 'dgd 9/1/2004 19:12'!ownerChanged	"The receiver's owner, some kind of a pasteup, has changed its 	layout."	super ownerChanged.	self updateLayoutInDockingBar! !!MenuLineMorph methodsFor: 'layout' stamp: 'dgd 9/1/2004 19:20'!minHeight	"answer the receiver's minHeight"	^ self isInDockingBar		ifTrue: [owner isVertical				ifTrue: [2]				ifFalse: [10]]		ifFalse: [2]! !!MenuLineMorph methodsFor: 'layout' stamp: 'dgd 9/1/2004 19:21'!minWidth	"answer the receiver's minWidth"	^ self isInDockingBar		ifTrue: [owner isVertical				ifTrue: [10]				ifFalse: [2]]		ifFalse: [10]! !!MenuLineMorph methodsFor: 'submorphs-accessing' stamp: 'dgd 9/1/2004 19:12'!noteNewOwner: aMorph 	"I have just been added as a submorph of aMorph"	super noteNewOwner: aMorph.	self updateLayoutInDockingBar! !!MenuLineMorph methodsFor: 'private' stamp: 'dgd 9/1/2004 19:20'!updateLayoutInDockingBar	self isInDockingBar		ifFalse: [^ self].	""	owner isVertical		ifFalse: [""			self hResizing: #shrinkWrap.			self vResizing: #spaceFill]		ifTrue: [""			self hResizing: #spaceFill.			self vResizing: #shrinkWrap].	self extent: self minWidth @ self minHeight! !!MenuMorph methodsFor: 'accessing' stamp: 'dgd 9/1/2004 17:56'!activatedFromDockingBar: aDockingBar 	activatorDockingBar := aDockingBar! !!MenuMorph methodsFor: 'accessing' stamp: 'dgd 9/13/2004 19:59'!addBlankIconsIfNecessary: anIcon 	"If any of my items have an icon, ensure that all do by using  	anIcon for those that don't"	self items		reject: [:each | each hasIconOrMarker]		thenDo: [:each | each icon: anIcon]! !!MenuMorph methodsFor: 'accessing' stamp: 'dgd 9/13/2004 13:36'!hasItems	"Answer if the receiver has menu items"	^ submorphs		anySatisfy: [:each | each isKindOf: MenuItemMorph] ! !!MenuMorph methodsFor: 'accessing' stamp: 'dgd 9/1/2004 17:57'!wasActivatedFromDockingBar	"answer true if the receiver was activated from a docking bar"	^ activatorDockingBar notNil! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/20/2004 14:25'!add: wordingString help: helpString action: aSymbol 	"Append a menu item with the given label. If the item is  	selected, it will send the given selector to the default target  	object."	"Details: Note that the menu item added captures the default  	target object at the time the item is added; the default target  	can later be changed before added additional items without  	affecting the targets of previously added entries. The model is 	that each entry is like a button that knows everything it needs 	to perform its action."	self		add: wordingString		target: defaultTarget		selector: aSymbol		argumentList: EmptyArray.self balloonTextForLastItem:helpString! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/13/2004 18:58'!add: wordingString icon: aForm help: helpString subMenu: aMenuMorph 	"Append the given submenu with the given label."	| item |	item := MenuItemMorph new.	item contents: wordingString.	item subMenu: aMenuMorph.	item icon: aForm.	helpString isNil		ifFalse: [item setBalloonText: helpString].	self addMorphBack: item! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/13/2004 14:01'!add: wordingString icon: aForm subMenu: aMenuMorph 	"Append the given submenu with the given label."	^ self		add: wordingString		icon: aForm		help: nil		subMenu: aMenuMorph! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/13/2004 14:01'!add: aString subMenu: aMenuMorph 	"Append the given submenu with the given label."	self		add: aString		icon: nil		subMenu: aMenuMorph! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/13/2004 13:35'!addLine	"Append a divider line to this menu. Suppress duplicate lines."	self hasItems		ifFalse: [^ self].	(self lastSubmorph isKindOf: MenuLineMorph)		ifFalse: [self addMorphBack: MenuLineMorph new] ! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/13/2004 13:35'!addTitle: aString icon: aForm 	"Add a title line at the top of this menu."	self		addTitle: aString		icon: aForm		updatingSelector: nil		updateTarget: nil ! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/13/2004 19:37'!addTitle: aString icon: aForm updatingSelector: aSelector updateTarget: aTarget 	"Add a title line at the top of this menu Make aString its initial  	contents.  	If aSelector is not nil, then periodically obtain fresh values for  	its  	contents by sending aSelector to aTarget.."	| title titleContainer |	title := AlignmentMorph newColumn.	self setTitleParametersFor: title.	""	aForm isNil		ifTrue: [titleContainer := title]		ifFalse: [| pair | 			pair := AlignmentMorph newRow.			pair color: Color transparent.			pair hResizing: #shrinkWrap.			pair layoutInset: 0.			""			pair addMorphBack: aForm asMorph.			""			titleContainer := AlignmentMorph newColumn.			titleContainer color: Color transparent.			titleContainer vResizing: #shrinkWrap.			titleContainer wrapCentering: #center.			titleContainer cellPositioning: #topCenter.			titleContainer layoutInset: 0.			pair addMorphBack: titleContainer.			""			title addMorphBack: pair].	""	aSelector		ifNil: [""			aString asString				linesDo: [:line | titleContainer						addMorphBack: (StringMorph contents: line font: Preferences standardMenuFont)]]		ifNotNil: [| usm | 			usm := UpdatingStringMorph on: aTarget selector: aSelector.			usm font: Preferences standardMenuFont.			usm useStringFormat.			usm lock.			titleContainer addMorphBack: usm].	""	title setProperty: #titleString toValue: aString.	self addMorphFront: title.	""	(self hasProperty: #needsTitlebarWidgets)		ifTrue: [self addStayUpIcons]! !!MenuMorph methodsFor: 'construction' stamp: 'dgd 9/13/2004 13:36'!addTitle: aString updatingSelector: aSelector updateTarget: aTarget 	"Add a title line at the top of this menu Make aString its initial  	contents.  	If aSelector is not nil, then periodically obtain fresh values for  	its contents by sending aSelector to aTarget.."	^ self		addTitle: aString		icon: nil		updatingSelector: aSelector		updateTarget: aTarget ! !!MenuMorph methodsFor: 'control' stamp: 'dgd 9/1/2004 17:57'!activeSubmenu: aSubmenu 	activeSubMenu		ifNotNil: [activeSubMenu delete].	activeSubMenu := aSubmenu.	aSubmenu		ifNotNil: [			activeSubMenu activatedFromDockingBar: nil.]! !!MenuMorph methodsFor: 'copying' stamp: 'dgd 9/1/2004 17:54'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."super veryDeepInner: deepCopier."defaultTarget _ defaultTarget.		Weakly copied"selectedItem _ selectedItem veryDeepCopyWith: deepCopier.stayUp _ stayUp veryDeepCopyWith: deepCopier.popUpOwner _ popUpOwner.		"Weakly copied"activeSubMenu _ activeSubMenu. "Weakly copied"activatorDockingBar _ activatorDockingBar.  "Weakly copied"! !!MenuMorph methodsFor: 'initialization' stamp: 'dgd 9/13/2004 19:33'!setTitleParametersFor: aMenuTitle 	| menuTitleColor menuTitleBorderColor |	Preferences roundedMenuCorners		ifTrue: [aMenuTitle useRoundedCorners].	menuTitleColor := Preferences menuColorFromWorld				ifTrue: [self color darker]				ifFalse: [Preferences menuTitleColor].	menuTitleBorderColor := Preferences menuAppearance3d				ifTrue: [#inset]				ifFalse: [Preferences menuColorFromWorld						ifTrue: [self color darker muchDarker]						ifFalse: [Preferences menuTitleBorderColor]].	aMenuTitle		setColor: menuTitleColor		borderWidth: Preferences menuTitleBorderWidth		borderColor: menuTitleBorderColor.	aMenuTitle vResizing: #shrinkWrap.	aMenuTitle wrapCentering: #center.	aMenuTitle cellPositioning: #topCenter.	aMenuTitle layoutInset: 0.! !!MenuMorph methodsFor: 'keyboard control' stamp: 'dgd 9/9/2004 21:48'!removeMatchString	"Remove the matchString, if any."	self setProperty: #matchString toValue: String new.	self displayFiltered: nil! !!MenuMorph methodsFor: 'rounding' stamp: 'dgd 9/1/2004 18:12'!roundedCorners	"Return a list of those corners to round"	self wasActivatedFromDockingBar		ifTrue: [""			activatorDockingBar isFloating				ifTrue: [^ #(2 3 )].			activatorDockingBar isAdheringToTop				ifTrue: [^ #(2 3 )].			activatorDockingBar isAdheringToBottom				ifTrue: [^ #(1 4 )].			activatorDockingBar isAdheringToLeft				ifTrue: [^ #(3 4 )].			activatorDockingBar isAdheringToRight				ifTrue: [^ #(1 2 )]].	^ super roundedCorners! !!ObjectsTool methodsFor: 'thumbnail' stamp: 'dgd 9/22/2004 19:28'!icon	"Answer a form with an icon to represent the receiver"	^ MenuIcons objectCatalogIcon! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 9/7/2004 12:13'!getPostArgsFromProject: aProject fileNamed: fileNameString fromDirectory: localDirectory 	| args thumbnail uploader |	args := Dictionary new.	""	args at: 'contents' put: {(localDirectory oldFileNamed: fileNameString) contentsOfEntireFile}.	""	args at: 'name' put: {aProject name isoToSqueak}.	args at: 'version' put: {(Project parseProjectFileName: fileNameString) second asString}.	args at: 'language' put: {aProject naturalLanguage asString translated}.	""	uploader := Utilities authorNamePerSe.	uploader isEmptyOrNil		ifTrue: [uploader := Utilities authorInitialsPerSe].	uploader isEmptyOrNil		ifFalse: [args at: 'uploader' put: {uploader}].	""	self putSmalltalkInfoInto: args.	""	thumbnail := self getProjectThumbnail: aProject.	thumbnail isNil		ifFalse: [args at: 'thumbnailcontents' put: {thumbnail}].	""	self putProjectDetailsFrom: aProject to: args.	""	^ args! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 9/7/2004 12:16'!putProjectDetailsFrom: aProject to: args 	| projectDetails |	projectDetails := aProject world				valueOfProperty: #ProjectDetails				ifAbsent: [^ self].	""	self flag: #todo.	"projectname ?"	projectDetails		at: 'projectdescription'		ifPresent: [:value | args at: 'description' put: {value isoToSqueak}].	projectDetails		at: 'projectauthor'		ifPresent: [:value | args at: 'author' put: {value isoToSqueak}].	projectDetails		at: 'projectcategory'		ifPresent: [:value | args at: 'category' put: {value isoToSqueak}].	projectDetails		at: 'projectsubcategory'		ifPresent: [:value | args at: 'subcategory' put: {value isoToSqueak}].	projectDetails		at: 'projectkeywords'		ifPresent: [:value | args at: 'keywords' put: {value isoToSqueak}]! !!PRServerDirectory methodsFor: 'private' stamp: 'dgd 9/7/2004 12:13'!putSmalltalkInfoInto: args 	"private - fills args with information from Smalltalk"	self flag: #todo.	" 	lastest small-land changeset / small-land version  	"	#(#datedVersion #osVersion #platformName #platformSubtype #vmPath #vmVersion #imageName #changesName #sourcesName #listBuiltinModules #listLoadedModules #getVMParameters )		do: [:each | 			| value | 			value := SmalltalkImage current perform: each.			args at: 'extra-' , each asString put: {value asString isoToSqueak}]! !!PaintInvokingMorph methodsFor: 'dropping/grabbing' stamp: 'dgd 9/10/2004 13:44'!justDroppedInto: aPasteUpMorph event: anEvent	"This message is sent to a dropped morph after it has been dropped on--and been accepted by--a drop-sensitive morph"	aPasteUpMorph isPartsBin ifFalse:[		self removeHalo.		self delete.		^aPasteUpMorph makeNewDrawing: anEvent].	^super justDroppedInto: aPasteUpMorph event: anEvent! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'dgd 8/28/2004 13:59'!spawn	"Create and schedule a message browser for the code of the model's 	selected message. Retain any edits that have not yet been accepted."	| code |	code _ paragraph text string.	self cancel.	model notNil ifTrue:[model spawn: code].! !!PasteUpMorph methodsFor: 'WiW support' stamp: 'dgd 8/31/2004 16:25'!addMorphInLayer: aMorph	super addMorphInLayer: aMorph.	aMorph wantsToBeTopmost ifFalse:[self bringTopmostsToFront].! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'dgd 9/10/2004 13:45'!acceptDroppingMorph: dropped event: evt	"The supplied morph, known to be acceptable to the receiver, is now to be assimilated; the precipitating event is supplied"	| mm tfm aMorph |	aMorph _ self morphToDropFrom: dropped.	self isWorldMorph		ifTrue:["Add the given morph to this world and start stepping it if it wants to be."				self addMorphFront: aMorph.				(aMorph fullBounds intersects: self viewBox) ifFalse:					[Beeper beep.  aMorph position: self bounds center]]		ifFalse:[super acceptDroppingMorph: aMorph event: evt].	aMorph submorphsDo: [:m | (m isKindOf: HaloMorph) ifTrue: [m delete]].	aMorph allMorphsDo:  "Establish any penDown morphs in new world"		[:m | m player ifNotNil:			[m player getPenDown ifTrue:				[((mm _ m player costume) notNil and: [(tfm _ mm owner transformFrom: self) notNil])					ifTrue: [self noteNewLocation: (tfm localPointToGlobal: mm referencePosition)									forPlayer: m player]]]].	self isPartsBin		ifTrue:			[aMorph isPartsDonor: true.			aMorph stopSteppingSelfAndSubmorphs.			aMorph suspendEventHandler]		ifFalse:			[self world startSteppingSubmorphsOf: aMorph].	self presenter morph: aMorph droppedIntoPasteUpMorph: self.	self showingListView ifTrue:		[self sortSubmorphsBy: (self valueOfProperty: #sortOrder).		self currentWorld abandonAllHalos].	self bringTopmostsToFront.! !!PasteUpMorph methodsFor: 'event handling' stamp: 'dgd 8/28/2004 18:44'!handlesKeyboard: evt	^self isWorldMorph or:[evt keyCharacter == Character tab and:[self tabAmongFields]]! !!PasteUpMorph methodsFor: 'event handling' stamp: 'dgd 8/28/2004 18:44'!keyStroke: anEvent	"A keystroke has been made.  Service event handlers and, if it's a keystroke presented to the world, dispatch it to #unfocusedKeystroke:"	| selected |	super keyStroke: anEvent.  "Give event handlers a chance"	selected := self selectedObject.	selected isNil		ifFalse:[ selected moveOrResizeFromKeystroke: anEvent ].	(anEvent keyCharacter == Character tab) ifTrue:		[self tabAmongFields			ifTrue:[^ self tabHitWithEvent: anEvent]].	self isWorldMorph ifTrue:		[self keystrokeInWorld: anEvent]! !!PasteUpMorph methodsFor: 'event handling' stamp: 'dgd 9/18/2004 16:59'!mouseDown: evt	"Handle a mouse down event."	| grabbedMorph handHadHalos |	(Preferences generalizedYellowButtonMenu			and: [evt yellowButtonPressed])		ifTrue: [^ self yellowButtonActivity: evt shiftPressed].	grabbedMorph _ self morphToGrab: evt.	grabbedMorph ifNotNil:[		grabbedMorph isSticky ifTrue:[^self].		self isPartsBin ifFalse:[^evt hand grabMorph: grabbedMorph].		grabbedMorph _ grabbedMorph partRepresented duplicate.		grabbedMorph restoreSuspendedEventHandler.		(grabbedMorph fullBounds containsPoint: evt position) 			ifFalse:[grabbedMorph position: evt position].		"Note: grabbedMorph is ownerless after duplicate so use #grabMorph:from: instead"		^ evt hand grabMorph: grabbedMorph from: self].	(super handlesMouseDown: evt)		ifTrue:[^super mouseDown: evt].	handHadHalos _ evt hand halo notNil.	evt hand removeHalo. "shake off halos"	evt hand releaseKeyboardFocus. "shake of keyboard foci"	Preferences noviceMode		ifTrue:[			self submorphs				select:[:each | (each isKindOf: MenuMorph) and:[each stayUp not]]				thenDo:[:each | each delete].		].	(evt shiftPressed not			and:[ self isWorldMorph not ]			and:[ Preferences easySelection not ])	ifTrue:[		"explicitly ignore the event if we're not the world and we'll not select,		so that we could be picked up if need be"		evt wasHandled: false.		^ self.	].	( evt shiftPressed or: [ Preferences easySelection ] ) ifTrue:[		"We'll select on drag, let's decide what to do on click"		| clickSelector |		clickSelector := nil.		evt shiftPressed ifTrue:[			clickSelector := #findWindow:.		]		ifFalse:[			self isWorldMorph ifTrue:[				clickSelector := handHadHalos										ifTrue: [ #delayedInvokeWorldMenu: ]										ifFalse: [ #invokeWorldMenu: ]			]		].		evt hand 				waitForClicksOrDrag: self 				event: evt 				selectors: { clickSelector. nil. nil. #dragThroughOnDesktop: }				threshold: 5.	]	ifFalse:[		"We wont select, just bring world menu if I'm the world"		self isWorldMorph ifTrue:[			handHadHalos				ifTrue: [ self delayedInvokeWorldMenu: evt ]				ifFalse: [ self invokeWorldMenu: evt ]		]	].! !!PasteUpMorph methodsFor: 'flaps' stamp: 'dgd 8/31/2004 16:27'!bringFlapTabsToFront	self deprecated: 'Replaced by #bringTopmostsToFront'.	(submorphs select:[:m| m wantsToBeTopmost]) do:[:m| self addMorphInLayer: m].! !!PasteUpMorph methodsFor: 'flaps' stamp: 'dgd 8/31/2004 16:25'!bringTopmostsToFront	(submorphs select:[:m| m wantsToBeTopmost]) do:[:m| self addMorphInLayer: m].! !!PasteUpMorph methodsFor: 'flaps' stamp: 'dgd 8/31/2004 16:23'!deleteAllFlapArtifacts	"self currentWorld deleteAllFlapArtifacts"	self submorphs do:[:m | m wantsToBeTopmost ifTrue:[m delete]]! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'dgd 9/20/2004 20:14'!addCustomMenuItems: menu hand: aHandMorph 	"Add morph-specific menu itemns to the menu for the hand"	super addCustomMenuItems: menu hand: aHandMorph.	menu addLine.	Preferences noviceMode		ifFalse: [self addStackMenuItems: menu hand: aHandMorph.			self addPenMenuItems: menu hand: aHandMorph.			self addPlayfieldMenuItems: menu hand: aHandMorph].	self isWorldMorph		ifTrue: [menu addLine.			Preferences noviceMode				ifFalse: [(owner isKindOf: BOBTransformationMorph)						ifTrue: [self addScalingMenuItems: menu hand: aHandMorph]].			menu addUpdating: #showWorldMainDockingBarString action: #toggleShowWorldMainDockingBar.			Flaps sharedFlapsAllowed				ifTrue: [menu						addUpdating: #suppressFlapsString						target: CurrentProjectRefactoring						action: #currentToggleFlapsSuppressed].			Preferences noviceMode				ifFalse: [menu addLine.					menu add: 'old desktop menu... (W)' translated action: #putUpDesktopMenu:]]! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'dgd 9/20/2004 19:27'!showWorldMainDockingBarString	^ self project showWorldMainDockingBarString! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'dgd 9/20/2004 19:27'!toggleShowWorldMainDockingBar	self project toggleShowWorldMainDockingBar! !!PasteUpMorph methodsFor: 'misc' stamp: 'nk 1/23/2004 16:25'!addMyYellowButtonMenuItemsToSubmorphMenus	^self isPartsBin! !!PasteUpMorph methodsFor: 'misc' stamp: 'dgd 8/31/2004 16:23'!roundUpStrays	self submorphsDo:		[:m |			(m wantsToBeTopmost)				ifFalse:					[m goHome.					m isPlayfieldLike ifTrue: [m roundUpStrays]]]! !!PasteUpMorph methodsFor: 'thumbnail' stamp: 'dgd 9/22/2004 19:37'!icon	"Answer a form with an icon to represent the receiver"	^ self isWorldMorph		ifTrue: [MenuIcons homeIcon]		ifFalse: [MenuIcons projectIcon]! !!PasteUpMorph methodsFor: 'world menu' stamp: 'dgd 9/25/2004 12:02'!defaultDesktopCommandKeyTriplets
	"Answer a list of triplets of the form
		<key> <receiver> <selector>   [+ optional fourth element, a <description> for use in desktop-command-key-help]
that will provide the default desktop command key handlers.  If the selector takes an argument, that argument will be the command-key event"
	| noviceKeys expertKeys |	noviceKeys := {
		{ $o.	ActiveWorld.						#activateObjectsTool.						'Activate the "Objects Tool"'}.
		{ $r.	ActiveWorld.						#restoreMorphicDisplay.					'Redraw the screen'}.		
		{ $z.	self.								#undoOrRedoCommand.					'Undo or redo the last undoable command'}.
		{ $F.	CurrentProjectRefactoring.	#currentToggleFlapsSuppressed.			'Toggle the display of flaps'}.
		{ $N.	self.								#toggleClassicNavigatorIfAppropriate.	'Show/Hide the classic Navigator, if appropriate'}.
		{ $M.	self.								#toggleShowWorldMainDockingBar.		'Show/Hide the Main Docking Bar'}.	}.	Preferences noviceMode			ifTrue:[^ noviceKeys].	expertKeys := {		{ $b.	SystemBrowser.					#defaultOpenBrowser.					'Open a new System Browser'}.
		{ $k.	Workspace.						#open.										'Open a new, blank Workspace'}.
		{ $m.	self.								#putUpNewMorphMenu.					'Put up the "New Morph" menu'}.
		{ $t.	self.	 							#findATranscript:.							'Make a System Transcript visible'}.
		{ $w.	SystemWindow.					#closeTopWindow.							'Close the topmost window'}.

		{ $C.	self.								#findAChangeSorter:.						'Make a Change Sorter visible'}.

		{ $L.	self.								#findAFileList:.								'Make a File List visible'}.
		{ $P.	self.								#findAPreferencesPanel:.					'Activate the Preferences tool'}.
		{ $R.	self. 								#openRecentSubmissionsBrowser:.		'Make a Recent Submissions browser visible'}.

		{ $W.	self. 								#findAMessageNamesWindow:.			'Make a MessageNames tool visible'}.
		{ $Z.	ChangeList. 						#browseRecentLog.							'Browse recently-logged changes'}.

		{ $\.	SystemWindow. 					#sendTopWindowToBack.					'Send the top window to the back'}.	}.	^ noviceKeys, expertKeys! !!PasteUpMorph methodsFor: 'world menu' stamp: 'dgd 9/11/2004 20:45'!delayedInvokeWorldMenu: evt 	self		addAlarm: #invokeWorldMenu:		with: evt		after: 200! !!PasteUpMorph methodsFor: 'world menu' stamp: 'dgd 8/31/2004 16:25'!putUpWorldMenu: evt	"Put up a menu in response to a click on the desktop, triggered by evt."	| menu |	self bringTopmostsToFront.	evt isMouse ifTrue:		[evt yellowButtonPressed			ifTrue: [^ self yellowButtonClickOnDesktopWithEvent: evt].		evt shiftPressed ifTrue:[^ self findWindow: evt]].	"put up screen menu"	menu _ self buildWorldMenu: evt.	menu addTitle: Preferences desktopMenuTitle translated.	menu popUpEvent: evt in: self.	^ menu! !!PasteUpMorph methodsFor: 'world menu' stamp: 'dgd 9/20/2004 20:17'!putUpWorldMenuFromEscapeKey	Preferences noviceMode		ifFalse: [self putUpWorldMenu: ActiveEvent]! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 8/31/2004 16:23'!allNonFlapRelatedSubmorphs	"Answer all non-window submorphs that are not flap-related"	^submorphs 		select: [:m | (m isSystemWindow) not and: [m wantsToBeTopmost not]]! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 9/7/2004 19:02'!assureNotPaintingElse: aBlock	"If painting is already underway in the receiver, put up an informer to that effect and evalute aBlock"	self sketchEditorOrNil ifNotNil:		[self inform: 'Sorry, you can only paintone object at a time' translated.		Cursor normal show.		^ aBlock value]! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 9/9/2004 22:47'!deleteAllHalos	self haloMorphs		do: [:each | (each target isKindOf: SelectionMorph)				ifTrue: [each target delete]].	self hands		do: [:each | each removeHalo]! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 9/5/2004 16:19'!initForProject: aWorldState	worldState _ aWorldState.	bounds _ Display boundingBox.	self color: Preferences defaultWorldColor.	self addHand: HandMorph new.	self setProperty: #automaticPhraseExpansion toValue: true.	self setProperty: #optimumExtentFromAuthor toValue: Display extent.	self wantsMouseOverHalos: Preferences mouseOverHalos.	self borderWidth: 0.	model _ nil.! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 8/31/2004 16:25'!installFlaps	"Get flaps installed within the bounds of the receiver"	Project current assureFlapIntegrity.	self addGlobalFlaps.	self localFlapTabs do:			[:aFlapTab | aFlapTab adaptToWorld].	self assureFlapTabsFitOnScreen.	self bringTopmostsToFront! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 8/31/2004 16:25'!restoreFlapsDisplay	"Restore the display of flaps"	(Flaps sharedFlapsAllowed and: [CurrentProjectRefactoring currentFlapsSuppressed not]) ifTrue:		[Flaps globalFlapTabs do:			[:aFlapTab | aFlapTab adaptToWorld]].	self localFlapTabs do:			[:aFlapTab | aFlapTab adaptToWorld].	self assureFlapTabsFitOnScreen.	self bringTopmostsToFront! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 9/5/2004 19:46'!restoreMainDockingBarDisplay	"Restore the display of docking bars"	self dockingBars		do: [:each | each updateBounds]! !!PasteUpMorph methodsFor: 'world state' stamp: 'dgd 9/5/2004 19:45'!restoreMorphicDisplay	DisplayScreen startUp.	self		extent: Display extent;		viewBox: Display boundingBox;		handsDo: [:h | h visible: true; showTemporaryCursor: nil];		restoreFlapsDisplay;		restoreMainDockingBarDisplay;		fullRepaintNeeded.	WorldState addDeferredUIMessage: [		Cursor normal show.	].! !!Preferences class methodsFor: 'menu parameters' stamp: 'dgd 9/5/2004 16:17'!defaultWorldColor	^ Parameters		at: #defaultWorldColor		ifAbsent: [ Color r: 0.937 g: 0.937 b: 0.937 ].! !!Preferences class methodsFor: 'menu parameters' stamp: 'dgd 8/30/2004 20:59'!menuSelectionColor	^ Parameters		at: #menuSelectionColor		ifAbsent: [nil]! !!Preferences class methodsFor: 'misc' stamp: 'dgd 9/7/2004 18:35'!balloonHelpDelayTime	"Answer the number of milliseconds before a balloon help 	should be put up on morphs."	^ Parameters		at: #balloonHelpDelayTime		ifAbsent: [800]! !!Preferences class methodsFor: 'reacting to change' stamp: 'dgd 9/25/2004 12:27'!noviceModeSettingChanged	"The current value of the noviceMode flag has changed; 	now react"	TheWorldMainDockingBar updateInstances.	PasteUpMorph allSubInstances		select: [:each | each isWorldMorph]		thenDo: [:each | each initializeDesktopCommandKeySelectors]! !!Preferences class methodsFor: 'reacting to change' stamp: 'dgd 9/20/2004 19:50'!setNotificationParametersForStandardPreferences	"Set up the notification parameters for the standard preferences that require need them.  When adding new Preferences that require use of the notification mechanism, users declare the notifcation info as part of the call that adds the preference, or afterwards -- the two relevant methods for doing that are: 	Preferences.addPreference:categories:default:balloonHelp:projectLocal:changeInformee:changeSelector:   and	Preference changeInformee:changeSelector:"		"Preferences setNotificationParametersForStandardPreferences"	| aPreference |	#(			(annotationPanes		annotationPanesChanged)		(eToyFriendly			eToyFriendlyChanged)		(infiniteUndo			infiniteUndoChanged)		(uniTilesClassic			classicTilesSettingToggled)		(optionalButtons			optionalButtonsChanged)		(roundedWindowCorners	roundedWindowCornersChanged)		(showProjectNavigator	showProjectNavigatorChanged)		(smartUpdating			smartUpdatingChanged)		(universalTiles			universalTilesSettingToggled)		(showSharedFlaps		sharedFlapsSettingChanged)		(noviceMode		noviceModeSettingChanged)	)  do:			[:pair |				aPreference _ self preferenceAt: pair first.				aPreference changeInformee: self changeSelector: pair second]! !!Preferences class methodsFor: 'themes' stamp: 'dgd 9/22/2004 20:26'!smallLand	"Small-Land theme.  It install the complete Small-Land theme (Preferences, Fonts, Colors, etc)"	"	Preferences smallLand.	"	self setPreferencesFrom: #(		(haloEnclosesFullBounds true)		(showBoundsInHalo       true)		(cmdGesturesEnabled	false)		(easySelection			true)		(abbreviatedBrowserButtons       true)		(alternativeBrowseIt             true)		(alwaysShowVScrollbar            false)		(annotationPanes                 true)		(balloonHelpInMessageLists       true)		(browseWithDragNDrop             true)		(browseWithPrettyPrint           true)		(classicNewMorphMenu             true)		(collapseWindowsInPlace          true)		(colorWhenPrettyPrinting         true)		(diffsWithPrettyPrint            true)		(dragNDropWithAnimation          true)		(duplicateControlAndAltKeys      true)		(eToyFriendly                    true)		(extraDebuggerButtons            true)		(extractFlashInHighestQuality    true)		(fastDragWindowForMorphic        false)		(includeSoundControlInNavigator  true)		(menuColorFromWorld              false)		(menuColorFromWorld              true)		(menuKeyboardControl             true)		(menuAppearance3d			false)		(gradientMenu					false)		(mouseOverForKeyboardFocus       true)		(optionalButtons                 true)		(preserveTrash                   true)		(projectViewsInWindows           true)		(propertySheetFromHalo           true)		(scrollBarsNarrow                true)		(scrollBarsOnRight               true)		(selectiveHalos                  true)		(showDirectionForSketches        true)		(showDirectionHandles            true)		(slideDismissalsToTrash          true)		(translationWithBabel            true)		(unlimitedPaintArea              true)		(unlimitedPaintArea              true)		(menuColorFromWorld false)		(noviceMode true)		(uniqueNamesInHalos true)	).	#(		#(#setButtonFontTo: #BitstreamVeraSansMono 16)		#(#setListFontTo: #BitstreamVeraSans 16)		#(#setMenuFontTo: #BitstreamVeraSans 16)		#(#setWindowTitleFontTo: #BitstreamVeraSans 21)		#(#setSystemFontTo: #BitstreamVeraSans 16)		#(#setFlapsFontTo: #KomikaText 24)		#(#setCodeFontTo: #BitstreamVeraSerif 16)		#(#setEToysFontTo: #KomikaText 24)		#(#setHaloLabelFontTo: #KomikaText 24) 	)		do: [:triplet | Preferences				perform: triplet first				with: (StrikeFont familyName: triplet second size: triplet third)].	Smalltalk		at: #BalloonMorph		ifPresent: [:thatClass |			thatClass setBalloonFontTo: (StrikeFont familyName: #BitstreamVeraSans size: 16).			thatClass  setBalloonColorTo:  (Color yellow muchLighter alpha:0.96).		].	self installBrightWindowColors.	BalloonMorph setBalloonColorTo:  (Color yellow muchLighter alpha:0.96).	self insertionPointColor: Color blue twiceDarker.	self keyboardFocusColor: Color cyan twiceDarker.	self textHighlightColor: Color cyan muchLighter darker.	self setParameter: #menuTitleColor to: (Color r: 1.0 g: 0.7 b: 1.0 ).	self setParameter: #menuTitleBorderColor to: self menuTitleColor.	self setParameter: #menuTitleBorderWidth to: 3.	self setParameter: #menuColor to: (Color r: 1.0 g: 0.96 b: 1.0).	self setParameter: #menuBorderColor to: self menuColor muchDarker muchDarker.	self setParameter: #menuLineColor to: self menuColor twiceDarker twiceDarker.	self setParameter: #menuBorderWidth to: 2.	self setParameter: #menuSelectionColor to: (Color r: 0.0 g: 0.35 b: 0.7).	self setParameter: #defaultWorldColor to: (Color r: 0.9 g: 1.0 b: 0.9).	self setParameter: #balloonHelpDelayTime to: 100.	Project current == Project topProject		ifTrue:[			| c1 c2 c3 margin fill |			World color: Preferences defaultWorldColor.			c1 := World color slightlyDarker.			c2 := c1 twiceLighter .			c3 := c1.			margin := 0.35.			fill := GradientFillStyle ramp: {						0.0 -> c1.						margin -> c2.						1.0 - margin -> c2.						1.0 -> c3.					}.			fill origin: 0 @ 0.			fill radial: false.			fill direction: 0 @ 768.			World fillStyle: fill.	].! !!Project methodsFor: 'initialization' stamp: 'dgd 9/5/2004 16:27'!backgroundColorForMorphicProject	^ Preferences defaultWorldColor! !!Project methodsFor: 'menu messages' stamp: 'dgd 9/5/2004 19:34'!finalEnterActions
	"Perform the final actions necessary as the receiver project is entered"

	| navigator armsLengthCmd navType thingsToUnhibernate |

	self projectParameters 
		at: #projectsToBeDeleted 
		ifPresent: [ :projectsToBeDeleted |
			self removeParameter: #projectsToBeDeleted.
			projectsToBeDeleted do: [ :each | 
				Project deletingProject: each.
				each removeChangeSetIfPossible]].

	thingsToUnhibernate _ world valueOfProperty: #thingsToUnhibernate ifAbsent: [#()].
	thingsToUnhibernate do: [:each | each unhibernate].
	world removeProperty: #thingsToUnhibernate.

	navType _ ProjectNavigationMorph preferredNavigator.
	armsLengthCmd _ self parameterAt: #armsLengthCmd ifAbsent: [nil].
	navigator _ world findA: navType.
	(Preferences classicNavigatorEnabled and: [Preferences showProjectNavigator and: [navigator isNil]]) ifTrue:
		[(navigator _ navType new)
			bottomLeft: world bottomLeft;
			openInWorld: world].
	navigator notNil & armsLengthCmd notNil ifTrue:
		[navigator color: Color lightBlue].
	armsLengthCmd notNil ifTrue:
		[Preferences showFlapsWhenPublishing
			ifFalse:
				[self flapsSuppressed: true.
				navigator ifNotNil:	[navigator visible: false]].
		armsLengthCmd openInWorld: world].
	Smalltalk isMorphic ifTrue:
		[world reformulateUpdatingMenus.
		world presenter positionStandardPlayer.		self assureMainDockingBarPresenceMatchesPreference].

	WorldState addDeferredUIMessage: [self startResourceLoading].! !!Project methodsFor: 'docking bars support' stamp: 'dgd 9/20/2004 16:29'!assureMainDockingBarPresenceMatchesPreference	"Syncronize the state of the receiver's dockings with the  	preference"	(self showWorldMainDockingBar)		ifTrue: [self createOrUpdateMainDockingBar]		ifFalse: [self removeMainDockingBar]! !!Project methodsFor: 'docking bars support' stamp: 'dgd 9/6/2004 18:47'!createOrUpdateMainDockingBar	"Private - create a new main docking bar or update the current one"	| w mainDockingBars |	w := self world.	mainDockingBars := w mainDockingBars.	mainDockingBars isEmpty		ifTrue: ["no docking bar, just create a new one"			TheWorldMainDockingBar instance createDockingBar openInWorld: w.			^ self].	""	"update if nedeed"	mainDockingBars		do: [:each | TheWorldMainDockingBar instance updateIfNeeded: each]! !!Project methodsFor: 'docking bars support' stamp: 'dgd 9/6/2004 18:46'!removeMainDockingBar	"Remove the receiver's main docking bars"	self world mainDockingBars		do: [:each | each delete]! !!Project methodsFor: 'docking bars support' stamp: 'dgd 9/20/2004 16:30'!showWorldMainDockingBar	^ self projectPreferenceFlagDictionary		at: #showWorldMainDockingBar		ifAbsent: [Preferences showWorldMainDockingBar]! !!Project methodsFor: 'docking bars support' stamp: 'dgd 9/6/2004 18:47'!showWorldMainDockingBar: aBoolean 	"Change ther receiver to show the main docking bar"	self projectPreferenceFlagDictionary at: #showWorldMainDockingBar put: aBoolean.	""	self == Project current		ifTrue: [""			aBoolean == Preferences showWorldMainDockingBar				ifFalse: [Preferences setPreference: #showWorldMainDockingBar toValue: aBoolean]].	""	self assureMainDockingBarPresenceMatchesPreference! !!Project methodsFor: 'docking bars support' stamp: 'dgd 9/20/2004 19:28'!showWorldMainDockingBarString	^ (self showWorldMainDockingBar		ifTrue: ['<yes>']		ifFalse: ['<no>'])		, 'show main docking bar (M)' translated! !!Project methodsFor: 'docking bars support' stamp: 'dgd 9/20/2004 16:31'!toggleShowWorldMainDockingBar	self showWorldMainDockingBar: self showWorldMainDockingBar not! !!Project methodsFor: 'language' stamp: 'dgd 9/19/2004 13:27'!updateLocaleDependents	"Set the project's natural language as indicated"	ActiveWorld allTileScriptingElements do: [:viewerOrScriptor |			viewerOrScriptor localeChanged].	Flaps disableGlobalFlaps: false.	Preferences eToyFriendly		ifTrue: [			Flaps addAndEnableEToyFlaps.			ActiveWorld addGlobalFlaps]		ifFalse: [Flaps enableGlobalFlaps].	(Project current isFlapIDEnabled: 'Navigator' translated)		ifFalse: [Flaps enableDisableGlobalFlapWithID: 'Navigator' translated].	ParagraphEditor initializeTextEditorMenus.	Utilities emptyScrapsBook.	MenuIcons initializeTranslations.	LanguageEnvironment localeChanged.	Locale localeChanged.	"self setFlaps.	self setPaletteFor: aLanguageSymbol."! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'dgd 9/1/2004 16:12'!maximumUsableArea	| allowedArea |	allowedArea _ Display usableArea.	Smalltalk isMorphic ifTrue: [		allowedArea := allowedArea intersect: ActiveWorld visibleClearArea.	].	^allowedArea! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'dgd 9/1/2004 16:12'!maximumUsableAreaInWorld: aWorldOrNil	| allowedArea |	allowedArea _ Display usableArea.	aWorldOrNil ifNotNil: [		allowedArea := allowedArea intersect: aWorldOrNil visibleClearArea.	].	^allowedArea! !!ScrollPane methodsFor: 'menu' stamp: 'dgd 9/18/2004 18:29'!wantsYellowButtonMenu	"Answer true if the receiver wants a yellow button menu"	^ getMenuSelector notNil! !!SelectedObjectThumbnail methodsFor: 'accessing' stamp: 'dgd 9/10/2004 19:28'!noSelectedBalloonText: aString 	"Set the balloon text to be used when no object is selected"	noSelectedBalloonText := aString! !!SelectedObjectThumbnail methodsFor: 'accessing' stamp: 'dgd 9/10/2004 19:27'!noSelectedThumbnail: aForm 	"Set the form to be used when no object is selected"	noSelectedThumbnail := aForm! !!SelectedObjectThumbnail methodsFor: 'initialization' stamp: 'dgd 9/10/2004 19:00'!initialize	"Initialize the receiver"	super initialize.	""	self		image: (Form extent:32@32).	self color: Color transparent! !!SelectedObjectThumbnail methodsFor: 'initialization' stamp: 'dgd 9/10/2004 19:29'!initializeExtent: aPoint noSelectedThumbnail: aForm noSelectedBalloonText: aString 	self		image: (Form extent: aPoint).""	noSelectedThumbnail := aForm.	noSelectedBalloonText := aString! !!SelectedObjectThumbnail methodsFor: 'stepping and presenter' stamp: 'dgd 9/10/2004 19:29'!step	| current |	current := self selectedObject.	self setBalloonText: (current isNil				ifTrue: [noSelectedBalloonText]				ifFalse: [current externalName]).	""	self makeThumbnailFrom: current! !!SelectedObjectThumbnail methodsFor: 'stepping and presenter' stamp: 'dgd 9/10/2004 18:36'!stepTime	^ 125! !!SelectedObjectThumbnail methodsFor: 'private' stamp: 'dgd 9/10/2004 18:43'!makeEmptyThumbnail^ self makeThumbnailOfColor: Color veryLightGray.! !!SelectedObjectThumbnail methodsFor: 'private' stamp: 'dgd 9/10/2004 18:43'!makeErrorThumbnail	^ self makeThumbnailOfColor: Color red! !!SelectedObjectThumbnail methodsFor: 'private' stamp: 'dgd 9/13/2004 12:57'!makeThumbnailFrom: aMorphOrNil 	| thumbnail |	thumbnail := aMorphOrNil isNil				ifTrue: [noSelectedThumbnail						ifNil: [self makeEmptyThumbnail]]				ifFalse: [aMorphOrNil iconOrThumbnail]. 	""	self		image: (thumbnail scaledIntoFormOfSize: self extent)! !!SelectedObjectThumbnail methodsFor: 'private' stamp: 'dgd 9/10/2004 18:43'!makeThumbnailOfColor: aColor 	| form |	form := Form extent: self extent depth: 32.	form getCanvas fillColor: aColor.	self image: form! !!SelectedObjectThumbnail class methodsFor: 'instance creation' stamp: 'dgd 9/10/2004 19:31'!extent: aPoint noSelectedThumbnail: aForm noSelectedBalloonText: aString 	^ self new		initializeExtent: aPoint		noSelectedThumbnail: aForm		noSelectedBalloonText: aString ! !!SelectionMorph methodsFor: 'accessing' stamp: 'dgd 9/11/2004 21:57'!wantsToBeTopmost	"Answer if the receiver want to be one of the topmost objects in 	its owner"	^ true! !!SelectionMorph methodsFor: 'dropping/grabbing' stamp: 'dgd 9/11/2004 22:00'!justDroppedInto: newOwner event: evt	selectedItems isEmpty ifTrue:		["Hand just clicked down to draw out a new selection"		^ self extendByHand: evt hand].	dupLoc ifNotNil: [dupDelta _ self position - dupLoc].	selectedItems reverseDo: [:m | 		WorldState addDeferredUIMessage:			[m referencePosition: (newOwner localPointToGlobal: m referencePosition).			newOwner handleDropMorph:				(DropEvent new setPosition: evt cursorPoint contents: m hand: evt hand)] fixTemps].	evt wasHandled: true! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/20/2004 13:53'!addCustomMenuItems: aMenu hand: aHandMorph	"Add custom menu items to the menu"	super addCustomMenuItems: aMenu hand: aHandMorph.	aMenu addLine.	aMenu add: 'add or remove items' translated target: self selector: #addOrRemoveItems: argument: aHandMorph.	aMenu addList: {		#-.		{'place into a row' translated. #organizeIntoRow}.		{'place into a column' translated. #organizeIntoColumn}.		#-.		{'align left edges' translated. #alignLeftEdges}.		{'align top edges' translated. #alignTopEdges}.		{'align right edges' translated. #alignRightEdges}.		{'align bottom edges' translated. #alignBottomEdges}.		#-.		{'align centers vertically' translated. #alignCentersVertically}.		{'align centers horizontally' translated. #alignCentersHorizontally}.		}.	self selectedItems size > 2		ifTrue:[			aMenu addList: {				#-.				{'distribute vertically' translated. #distributeVertically}.				{'distribute horizontally' translated. #distributeHorizontally}.				}.		].! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/25/2004 12:08'!alignBottomEdges	"Make the bottom coordinate of all my elements be the same"	| maxBottom |	selectedItems		ifEmpty: [^ self].	maxBottom := (selectedItems				collect: [:itm | itm bottom]) max.	selectedItems		do: [:itm | itm bottom: maxBottom].	self changed! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/20/2004 13:41'!alignCentersHorizontally	"Make every morph in the selection have the same vertical center as the topmost item."	| minLeft leftMost |	selectedItems size > 1 ifFalse: [^ self].	minLeft _ (selectedItems collect: [:itm | itm left]) min.	leftMost _ selectedItems detect: [:m | m left = minLeft].	selectedItems do:		[:itm | itm center: (itm center x @ leftMost center y)].	self changed! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/20/2004 13:41'!alignCentersVertically	"Make every morph in the selection have the same horizontal center as the topmost item."	| minTop topMost |	selectedItems size > 1 ifFalse: [^ self].	minTop _ (selectedItems collect: [:itm | itm top]) min.	topMost _ selectedItems detect: [:m | m top = minTop].	selectedItems do:		[:itm | itm center: (topMost center x @ itm center y)].	self changed! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/25/2004 12:07'!alignLeftEdges	"Make the left coordinate of all my elements be the same"	| minLeft |	selectedItems		ifEmpty: [^ self].	minLeft := (selectedItems				collect: [:itm | itm left]) min.	selectedItems		do: [:itm | itm left: minLeft].	self changed! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/25/2004 12:08'!alignRightEdges	"Make the right coordinate of all my elements be the same"	| maxRight |	selectedItems		ifEmpty: [^ self].	maxRight := (selectedItems				collect: [:itm | itm right]) max.	selectedItems		do: [:itm | itm right: maxRight].	self changed! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/25/2004 12:09'!alignTopEdges	"Make the top coordinate of all my elements be the same"	| minTop |	selectedItems		ifEmpty: [^ self].	minTop := (selectedItems				collect: [:itm | itm top]) min.	selectedItems		do: [:itm | itm top: minTop].	self changed! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/20/2004 13:50'!distributeHorizontally	"Distribute the empty vertical space in a democratic way."	| minLeft maxRight totalWidth currentLeft space |	self selectedItems size > 2		ifFalse: [^ self].	minLeft := self selectedItems anyOne left.	maxRight := self selectedItems anyOne right.	totalWidth := 0.	self selectedItems		do: [:each | 			minLeft := minLeft min: each left.			maxRight := maxRight max: each right.			totalWidth := totalWidth + each width].	currentLeft := minLeft.	space := (maxRight - minLeft - totalWidth / (self selectedItems size - 1)) rounded.	(self selectedItems		asSortedCollection: [:x :y | x left <= y left])		do: [:each | 			each left: currentLeft.			currentLeft := currentLeft + each width + space].	self changed! !!SelectionMorph methodsFor: 'halo commands' stamp: 'dgd 9/20/2004 13:51'!distributeVertically	"Distribute the empty vertical space in a democratic way."	| minTop maxBottom totalHeight currentTop space |	self selectedItems size > 2		ifFalse: [^ self].	minTop := self selectedItems anyOne top.	maxBottom := self selectedItems anyOne bottom.	totalHeight := 0.	self selectedItems		do: [:each | 			minTop := minTop min: each top.			maxBottom := maxBottom max: each bottom.			totalHeight := totalHeight + each height].	currentTop := minTop.	space := (maxBottom - minTop - totalHeight / (self selectedItems size - 1)) rounded.	(self selectedItems asSortedCollection:[:x :y | x top <= y top])		do: [:each | 			each top: currentTop.			currentTop := currentTop + each height + space].	self changed! !!SelectionMorph methodsFor: 'halos and balloon help' stamp: 'dgd 9/11/2004 18:29'!hasHalo: aBool 	super hasHalo: aBool.	aBool		ifFalse: [ (self hasProperty: #deleting) ifFalse: [self delete] ]! !!SelectionMorph methodsFor: 'initialization' stamp: 'dgd 9/20/2004 13:57'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ (Preferences menuSelectionColor ifNil: [Color blue]) twiceDarker alpha: 0.75! !!SelectionMorph methodsFor: 'initialization' stamp: 'dgd 8/28/2004 19:00'!defaultBorderWidth	"answer the default border width for the receiver"	^ 2! !!SelectionMorph methodsFor: 'initialization' stamp: 'dgd 9/20/2004 14:00'!defaultColor	"answer the default color/fill style for the receiver"	^ (Preferences menuSelectionColor ifNil: [Color blue]) alpha: 0.08! !!SelectionMorph methodsFor: 'initialization' stamp: 'dgd 9/11/2004 21:07'!extendByHand: aHand	"Assumes selection has just been created and added to some pasteUp or world"	| startPoint handle |	startPoint := self position.	handle := NewHandleMorph new followHand: aHand		forEachPointDo: [:newPoint |					| localPt |					localPt := (self transformFrom: self world) globalPointToLocal: newPoint.					self bounds: (startPoint rect: localPt)				]		lastPointDo: [:newPoint |					selectedItems isEmpty						ifTrue: [self delete]						ifFalse: [							selectedItems size = 1								ifTrue:[self delete.  selectedItems anyOne addHalo]								ifFalse:[self doneExtending]						]				].	aHand attachMorph: handle.	handle startStepping.! !!SelectionMorph methodsFor: 'submorphs-add/remove' stamp: 'dgd 9/11/2004 18:27'!delete	self setProperty: #deleting toValue: true.	super delete.	! !!SelectionMorph methodsFor: 'private' stamp: 'dgd 9/20/2004 14:01'!doneExtending	otherSelection ifNotNil:		[selectedItems _ otherSelection selectedItems , selectedItems.		otherSelection delete.		self setOtherSelection: nil].	self changed.	self layoutChanged.	super privateBounds:		((Rectangle merging: (selectedItems collect: [:m | m fullBounds]))			expandBy: 8).	self changed.	self addHalo.! !!SelectionMorph methodsFor: 'viewer' stamp: 'dgd 8/29/2004 12:34'!externalName	^ 'Selected {1} objects' translated format:{self selectedItems size}! !!SelectionMorph methodsFor: 'WiW support' stamp: 'dgd 9/11/2004 21:58'!morphicLayerNumber	"helpful for insuring some morphs always appear in front of or  	behind others. smaller numbers are in front"	^ 8! !!SketchMorph methodsFor: 'menus' stamp: 'dgd 9/18/2004 19:56'!addToggleItemsToHaloMenu: aCustomMenu 	"Add toggle-items to the halo menu"	super addToggleItemsToHaloMenu: aCustomMenu.	Preferences noviceMode		ifFalse: [""aCustomMenu				addUpdating: #useInterpolationString				target: self				action: #toggleInterpolation]! !!StickyPadMorph methodsFor: 'visual properties' stamp: 'dgd 9/18/2004 18:52'!canHaveFillStyles	"Return true if the receiver can have general fill styles; not just 	colors. This method is for gradually converting old morphs."	^ true! !!SystemWindow methodsFor: 'menu' stamp: 'dgd 9/18/2004 18:27'!wantsYellowButtonMenu	"Answer true if the receiver wants a yellow button menu"	^ false! !!SystemWindow methodsFor: 'thumbnail' stamp: 'dgd 9/22/2004 19:29'!icon	"Answer a form with an icon to represent the receiver"	^ MenuIcons windowIcon! !!TextMorph methodsFor: 'event handling' stamp: 'dgd 9/18/2004 20:06'!mouseDown: evt 	"Make this TextMorph be the keyboard input focus, if it isn't  	already, and repond to the text selection gesture."	evt yellowButtonPressed		ifTrue: ["First check for option (menu) click"			^ self yellowButtonActivity: evt shiftPressed].	evt hand newKeyboardFocus: self.	self		handleInteraction: [editor mouseDown: evt]		fromEvent: evt.! !!TextMorph methodsFor: 'event handling' stamp: 'dgd 8/28/2004 13:54'!wouldAcceptKeyboardFocusUponTab	"Answer whether the receiver might accept keyboard focus if 	tab were hit in some container playfield"	^ self inPartsBin not! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'dgd 9/6/2004 18:44'!createDockingBar	"Create a docking bar from the receiver's representation"	| dockingBar |	dockingBar := DockingBarMorph new.	dockingBar adhereToTop.	dockingBar autoGradient: true.	""	self fillDockingBar: dockingBar.	""	^ dockingBar! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'dgd 9/22/2004 19:05'!fillDockingBar: aDockingBar 	"Private - fill the given docking bar"	aDockingBar		add: 'Squeak' translated		icon: MenuIcons squeakIcon		help: 'Options related to Squeak as a whole' translated		subMenu: self squeakMenu.	aDockingBar		add: 'Project' translated		icon: MenuIcons homeIcon		help: 'Options to open things in the current project or to navigate between projects' translated		subMenu: self projectMenu.	aDockingBar		add: 'Configuration' translated		icon: MenuIcons configurationIcon		help: 'Options to configure Squeak' translated		subMenu: self configurationMenu.	aDockingBar		add: 'Help' translated		icon: MenuIcons helpIcon		help: 'Helpful options or options to get help' translated		subMenu: self helpMenu.	""	aDockingBar addSpacer.	self fillNavigatorOn: aDockingBar.	aDockingBar addSpacer.	aDockingBar addMorphBack: (ClockMorph new show24hr: true;			 showSeconds: false).	aDockingBar addSpace: 5.	""	aDockingBar		addMorphBack: (self				createButtonIcon: MenuIcons volumeIcon				help: 'Change sound volume' translated				selector: #changeSoundVolume).	aDockingBar		addMorphBack: (self				createButtonIcon: MenuIcons fullScreenIcon				help: (ScreenController lastScreenModeSelected						ifTrue: ['Exit from full screen' translated]						ifFalse: ['Switch to full screen' translated])				selector: #toggleFullScreen).	aDockingBar		addMorphBack: (self				createButtonIcon: (SelectedObjectThumbnail						extent: 37 @ 28						noSelectedThumbnail: MenuIcons objectsIcon						noSelectedBalloonText: 'View objects hierarchy' translated)				selector: #viewSelectedObject).	""	aDockingBar setProperty: #mainDockingBarTimeStamp toValue: self class timeStamp! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'dgd 9/22/2004 19:38'!fillNavigatorOn: main 	"main addLine."	main addSpace: 10.	""	main		addMorphBack: (self				createButtonIcon: MenuIcons backIcon				help: 'Previous project'				selector: #previousProject).	main		addMorphBack: (self				createButtonIcon: MenuIcons jumpIcon				help: 'Put up a list of all projects, letting me choose one to go to'				selector: #jumpToProject).	main		addMorphBack: (self				createButtonIcon: MenuIcons forwardIcon				help: 'Next project'				selector: #nextProject).	main		addMorphBack: (self				createButtonIcon: MenuIcons openIcon				help: 'Find any file'				selector: #findAnyFile).	main		addMorphBack: (self				createButtonIcon: MenuIcons loadProjectIcon				help: 'Find a project'				selector: #findAProject).	"main addSpace: 20."	main addSpace: 10.	main addSpacer.	main		addMorphBack: (self				createButtonIcon: MenuIcons projectIcon				help: 'Start a new project'				selector: #newProject).	main		addMorphBack: (self				createButtonIcon: MenuIcons paintIcon				help: 'Make a painting'				selector: #doNewPainting).	main		addMorphBack: (self				createButtonIcon: MenuIcons objectCatalogIcon				help: 'Open the objects catalog'				selector: #activateObjectsTool).	main		addMorphBack: (self				createButtonIcon: MenuIcons publishIcon				help: 'Publish the current project'				selector: #publishProject).	""	main addSpace: 10! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'dgd 9/6/2004 14:05'!openDockingBar	^ self createDockingBar openInWorld ! !!TheWorldMainDockingBar methodsFor: 'construction - submenus' stamp: 'dgd 9/22/2004 20:59'!configurationMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	self createMenuItem: {'set language...'. 'Choose the language in which Squeak should be displayed'. MenuIcons smallLanguageIcon} on: menu.	menu addLine.	self createMenuItem: {'update from server'. 'Update from server (Internet access is required)'. MenuIcons smallUpdateIcon} on: menu.	""	menu addLine.	menu addUpdating: #showWorldMainDockingBarString action: #toggleShowWorldMainDockingBar.	Flaps sharedFlapsAllowed		ifTrue: [menu				addUpdating: #suppressFlapsString				target: CurrentProjectRefactoring				action: #currentToggleFlapsSuppressed].	menu addLine.	ScreenController lastScreenModeSelected		ifTrue: [self createMenuItem: {'exit from full screen'. 'Exit from full screen and enclose Squeak in a window'. MenuIcons smallFullScreenIcon} on: menu]		ifFalse: [self createMenuItem: {'switch to full screen'. 'Switch to full screen giving the maximun display space to Squeak'. MenuIcons smallFullScreenIcon} on: menu].	""	self createMenuItem: {'change sound volume'. 'Change sound volume'. MenuIcons smallVolumeIcon} on: menu.	Preferences noviceMode		ifFalse: [menu addLine.			self createMenuItem: {'preferences..'. 'Opens a "Preferences Panel" which allows you to alter many settings'. MenuIcons smallConfigurationIcon} on: menu].	menu addLine.	Preferences noviceMode		ifTrue: [self createMenuItem: {'switch to expert mode'. 'Switch to expoer mode. CAUTION: The expert mode is powerful as well as dangerous'. MenuIcons smallExpertIcon} on: menu]		ifFalse: [self createMenuItem: {'switch to novice mode'. 'Come back to novice mode'. MenuIcons smallExpertIcon} on: menu].	""	^ menu! !!TheWorldMainDockingBar methodsFor: 'construction - submenus' stamp: 'dgd 9/10/2004 17:17'!helpMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	self createMenuItem: {'move objects onscreen'. 'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen'} on: menu.	self createMenuItem: {'unhide hidden objects'. 'If any items on the world are currently hidden, make them visible'} on: menu.	menu addLine.	self createMenuItem: {'show all viewers'. 'Make visible the viewers for all objects which have user-written scripts in this playfield'} on: menu.	self createMenuItem: {'hide all viewers'. 'Make invisible the viewers for all objects in the world'} on: menu.	menu addLine.	self createMenuItem: {'clear turtle trails'. 'Remove any pigment laid down on the desktop by objects moving with their pens down'} on: menu.	menu addLine.	self createMenuItem: {'eToy vocabulary summary'. 'Displays a summary of all the pre-defined commands and properties in the pre-defined eToy vocabulary'} on: menu.	""	^ menu! !!TheWorldMainDockingBar methodsFor: 'construction - submenus' stamp: 'dgd 9/22/2004 19:38'!projectMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	self createMenuItem: {'previous project'. 'Return to the most recently visited project'. MenuIcons smallBackIcon} on: menu.	self createMenuItem: {'jump to project...'. 'Put up a list of all projects, letting me choose one to go to'. MenuIcons smallJumpIcon} on: menu.	self createMenuItem: {'next project'. 'Go to next project'. MenuIcons smallForwardIcon} on: menu.	menu addLine.	self createMenuItem: {'find any file'. 'Import a file into Squeak'. MenuIcons smallImportFileIcon} on: menu.	self createMenuItem: {'find a project'. 'Open a project into Squeak'. MenuIcons smallLoadProjectIcon} on: menu.	menu addLine.	self createMenuItem: {'new project'. 'Start a new project'. MenuIcons smallProjectIcon} on: menu.	self createMenuItem: {'make new drawing'. 'Make a painting'. MenuIcons smallPaintIcon} on: menu.	self createMenuItem: {'object catalog (o)'. 'A tool for finding and obtaining many kinds of objects'. MenuIcons smallObjectCatalogIcon} on: menu.	self createMenuItem: {'object from paste buffer'. 'Create a new object from paste buffer'. MenuIcons smallPasteIcon} on: menu.	menu addLine.	self createMenuItem: {'view objects hierarchy'. 'A tool for discovering the objects and the relations between them'. MenuIcons smallObjectsIcon} on: menu.	menu addLine.	self createMenuItem: {'publish project'. 'Publish the current project'. MenuIcons smallPublishIcon} on: menu.	""	^ menu! !!TheWorldMainDockingBar methodsFor: 'construction - submenus' stamp: 'dgd 9/22/2004 19:07'!squeakMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	" 	menu add: 'configuration...' translated subMenu: self  	configurationMenu. menu lastItem icon: MenuIcons  	smallConfigurationIcon. menu addLine.  	"	self createMenuItem: {'save'. 'Save the current state of Squeak on disk'. MenuIcons smallSaveIcon} on: menu.	self createMenuItem: {'save as...'. 'Save the current state of Squeak on disk under a new name'. MenuIcons smallSaveAsIcon} on: menu.	Preferences noviceMode		ifFalse: [""			self createMenuItem: {'save as new version'. 'Save the current state of Squeak on disk under a version-stamped name'. MenuIcons smallSaveAsIcon} on: menu].	menu addLine.	self createMenuItem: {'save and quit'. 'Save the current state of Squeak on disk, and quit out of Squeak'. MenuIcons smallQuitIcon} on: menu.	self createMenuItem: {'quit'. 'Quit out of Squeak'. MenuIcons smallQuitIcon} on: menu.	""	^ menu! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:12'!activateObjectsTool	self world activateObjectsTool! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/4/2004 19:37'!changeSoundVolume	self notYetImplemented! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:12'!clearTurtleTrails	self world clearTurtleTrails! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:12'!doNewPainting	| w |	w := self world.	w		assureNotPaintingElse: [^ self].	w		makeNewDrawing: (World primaryHand lastEvent copy setPosition: w center)! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:12'!eToyVocabularySummary	Cursor wait		showWhile: [self world printVocabularySummary]! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:35'!exitFromFullScreen	self toggleFullScreen! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:13'!findAProject	FileList2		morphicViewProjectLoader2InWorld: self world		reallyLoad: true		dirFilterType: #limitedSuperSwikiDirectoryList! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:13'!findAnyFile	FileList2 morphicViewGeneralLoaderInWorld: self world! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:13'!hideAllViewers	self hideAllViewersIn: self world! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 17:46'!hideAllViewersIn: aMorph 	aMorph isFlapTab		ifTrue: [self hideAllViewersIn: aMorph referent].	aMorph		submorphsDo: [:each | ""			({ScriptEditorMorph. StandardViewer} includes: each class)				ifTrue: [each dismiss]				ifFalse: [self hideAllViewersIn: each]]! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 20:52'!importFile	self findAnyFile! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/4/2004 18:43'!jumpToProject	Project jumpToProject! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 20:30'!makeNewDrawing	self doNewPainting! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:13'!moveObjectsOnscreen	self world roundUpStrays! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/4/2004 18:41'!newProject	Project newMorphicOn: nil! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/4/2004 18:56'!nextProject	Project advanceToNextProject.	Beeper beep! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 20:30'!objectCatalog	self activateObjectsTool! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/19/2004 13:48'!objectFromPasteBuffer	ActiveHand 	pasteMorph! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 21:50'!preferences	Preferences openFactoredPanel! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/4/2004 18:42'!previousProject	Project returnToPreviousProject.	CurrentProjectRefactoring exitCurrentProject.	"go to parent if no previous"	Beeper beep.! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:16'!publishProject	self		publishStyle: #limitedSuperSwikiPublishDirectoryList		forgetURL: false		withRename: false! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:15'!publishStyle: aSymbol forgetURL: aBoolean withRename: renameBoolean	| w primaryServer rename |	w _ self world ifNil: [^Beeper beep].	w setProperty: #SuperSwikiPublishOptions toValue: aSymbol.	primaryServer _ w project primaryServerIfNil: [nil].	rename _ ((primaryServer notNil		and: [primaryServer acceptsUploads]) not)		or: [renameBoolean].	w setProperty: #SuperSwikiRename toValue: rename.	w project 		storeOnServerShowProgressOn: self 		forgetURL: aBoolean | rename.! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 11:23'!quit	| saveBeforeQuitting |	saveBeforeQuitting := self				confirm: 'Save changes before quitting?' translated				orCancel: [^ self].	""	SmalltalkImage current snapshot: saveBeforeQuitting andQuit: true! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 11:20'!save	SmalltalkImage current snapshot: true andQuit: false! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 11:25'!saveAndQuit	SmalltalkImage current snapshot: true andQuit: true! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/7/2004 11:21'!saveAs	SmalltalkImage current saveAs! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/22/2004 17:48'!saveAsNewVersion	SmalltalkImage current saveAsNewVersion! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 16:23'!setLanguage	Project current chooseNaturalLanguage ! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:13'!showAllViewers	self world showAllPlayers! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/20/2004 20:03'!showWorldMainDockingBarString	^ self world showWorldMainDockingBarString! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/20/2004 20:04'!suppressFlapsString	"Answer the wording of the suppress-flaps item"	^ CurrentProjectRefactoring suppressFlapsString! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/24/2004 18:39'!switchToExpertMode	| ok |	ok := self confirm: 'CAUTION!!The expert mode is powerful as well as dangerous and you can break your Squeak in several ways.Are you sure to switch to expert mode?' translated.	ok		ifFalse: [^ self].	""	Preferences enable: #cmdGesturesEnabled.	Preferences enable: #debugHaloHandle.	Preferences disable: #noviceMode! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:36'!switchToFullScreen	self toggleFullScreen! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/20/2004 19:52'!switchToNoviceMode	Preferences disable: #cmdGesturesEnabled.	Preferences disable: #debugHaloHandle.	Preferences enable: #noviceMode.! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:28'!toggleFullScreen	ScreenController lastScreenModeSelected		ifTrue: [ScreenController new fullScreenOff]		ifFalse: [ScreenController new fullScreenOn].	self world positionSubmorphs.self class updateInstances! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/20/2004 20:05'!toggleShowWorldMainDockingBar	self world toggleShowWorldMainDockingBar! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/9/2004 18:13'!unhideHiddenObjects	self world showHiders! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/25/2004 12:07'!updateFromServer	"Tools instance updateFromSmallLandSwikiPage: #quick"! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/10/2004 18:55'!viewObjectsHierarchy		self world findWindow: nil! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'dgd 9/18/2004 20:47'!viewSelectedObject	| selected menu |	selected := self world selectedObject.	selected isNil		ifTrue: [^ self viewObjectsHierarchy].	""	menu := selected buildYellowButtonMenu: ActiveHand.	 	menu  	addTitle: selected externalName  	icon: (selected iconOrThumbnailOfSize: 28).  		menu popUpInWorld: selected currentWorld! !!TheWorldMainDockingBar methodsFor: 'private' stamp: 'dgd 9/6/2004 23:59'!createMenuItem: tripplet on: menu 	| wording help icon |	wording := tripplet first.	help := tripplet second.icon := tripplet size > 2 ifTrue:[tripplet third].	menu		add: wording translated		target: self		selector: (self selectorForWording: wording).	menu lastItem setBalloonText: help translated;		 icon: icon! !!TheWorldMainDockingBar methodsFor: 'private' stamp: 'dgd 9/6/2004 23:49'!selectorForWording: aString 	"Private - Create a valid smalltalk selector from an english  	wording.  	 	'foo' -> #foo  	'foo....' -> #foo  	'foo bar' -> #fooBar  	"	| words selector temp |	temp := aString				collect: [:each | each isLetter						ifTrue: [each]						ifFalse: [Character space]].	words := temp subStrings: Character separators.	selector := String				streamContents: [:stream | ""					words						do: [:word | stream nextPutAll: word capitalized]].	selector at: 1 put: selector first asLowercase.	""	^ selector asSymbol! !!TheWorldMainDockingBar methodsFor: 'private' stamp: 'dgd 9/6/2004 18:48'!updateIfNeeded: aDockingBar "Update the given docking bar if needed"	| timeStamp |	timeStamp := aDockingBar				valueOfProperty: #mainDockingBarTimeStamp				ifAbsent: [^ self].	timeStamp = self class timeStamp		ifTrue: [^ self].	""	aDockingBar removeAllMorphs.	self fillDockingBar: aDockingBar! !!TheWorldMainDockingBar methodsFor: 'private' stamp: 'dgd 9/9/2004 18:12'!world^ World! !!TheWorldMainDockingBar methodsFor: 'private - buttons' stamp: 'dgd 9/6/2004 18:37'!colorOffEvent: anEvent for: aMorph 	"Private - gives an off-color to the given morph"	aMorph color: self offColor! !!TheWorldMainDockingBar methodsFor: 'private - buttons' stamp: 'dgd 9/6/2004 18:38'!colorOnEvent: anEvent for: aMorph 	"Private - gives an on-color to the given morph"	aMorph color: self onColor! !!TheWorldMainDockingBar methodsFor: 'private - buttons' stamp: 'dgd 9/10/2004 19:24'!createButtonIcon: aFormOrMorph help: helpStringOrNil selector: selector 	"Private - Creates a button to fire an action from a docking bar"	| button icon |	button := RectangleMorph new.	button extent: aFormOrMorph extent + 2.	button borderWidth: 0.	button color: self offColor.	helpStringOrNil isNil		ifFalse: [button setBalloonText: helpStringOrNil translated].	""	icon := aFormOrMorph isMorph				ifTrue: [aFormOrMorph]				ifFalse: [SketchMorph withForm: aFormOrMorph].	button addMorphCentered: icon.	""	button		on: #mouseDown		send: #perform:event:for:		to: self		withValue: selector.	button		on: #mouseEnter		send: #colorOnEvent:for:		to: self.	button		on: #mouseLeave		send: #colorOffEvent:for:		to: self.	""	^ button! !!TheWorldMainDockingBar methodsFor: 'private - buttons' stamp: 'dgd 9/10/2004 19:33'!createButtonIcon: aFormOrMorph selector: selector 	"Private - Creates a button to fire an action from a docking bar"	^ self		createButtonIcon: aFormOrMorph		help: nil		selector: selector! !!TheWorldMainDockingBar methodsFor: 'private - buttons' stamp: 'dgd 9/6/2004 18:38'!offColor	"Private - answer the off color"	^ Color black alpha: 0.01! !!TheWorldMainDockingBar methodsFor: 'private - buttons' stamp: 'dgd 9/6/2004 18:38'!onColor"Private - answer the on color"	^ (Preferences menuSelectionColor		ifNil: [Color blue])		alpha: 0.4! !!TheWorldMainDockingBar methodsFor: 'private - buttons' stamp: 'dgd 9/6/2004 18:39'!perform: selectorSymbol event: anEvent for: aMorph 	"Private - perform the given selector"	aMorph color: self offColor.	self perform: selectorSymbol! !!TheWorldMainDockingBar class methodsFor: 'class initialization' stamp: 'dgd 9/22/2004 20:42'!initialize	"Initialize the receiver"	Preferences		addPreference: #showWorldMainDockingBar		categories: #(#'docking bars' )		default: true		balloonHelp: 'Whether world''s main docking bar should be shown or not.'		projectLocal: true		changeInformee: TheWorldMainDockingBar		changeSelector: #showWorldMainDockingBarPreferenceChanged.	""	SystemChangeNotifier uniqueInstance noMoreNotificationsFor: self.	SystemChangeNotifier uniqueInstance		notify: self		ofSystemChangesOfItem: #method		using: #updateInstances:.	""	Locale addLocalChangedListener: self.	self setTimeStamp! !!TheWorldMainDockingBar class methodsFor: 'events' stamp: 'dgd 9/7/2004 21:33'!updateInstances	"The class has changed, time to update the instances"	self setTimeStamp.	Project current assureMainDockingBarPresenceMatchesPreference! !!TheWorldMainDockingBar class methodsFor: 'events' stamp: 'dgd 9/7/2004 21:33'!updateInstances: anEvent 	"The class has changed, time to update the instances"	(anEvent itemClass == self			or: [anEvent itemClass == self class])		ifFalse: [^ self].	""	self updateInstances! !!TheWorldMainDockingBar class methodsFor: 'instance creation' stamp: 'dgd 9/6/2004 14:35'!instance	"Answer the receiver's instance"	^ Instance		ifNil: [Instance := super new]! !!TheWorldMainDockingBar class methodsFor: 'instance creation' stamp: 'dgd 9/6/2004 14:35'!new	"Singleton, use #instance"	^ self error: 'Use #instance'! !!TheWorldMainDockingBar class methodsFor: 'preferences' stamp: 'dgd 9/6/2004 18:48'!showWorldMainDockingBarPreferenceChanged	"The preference #showWorldMainDockingBar has just  	changed"	Project current showWorldMainDockingBar:  Preferences showWorldMainDockingBar! !!TheWorldMainDockingBar class methodsFor: 'timestamping' stamp: 'dgd 9/6/2004 14:21'!setTimeStamp	"Change the receiver's timeStamp"	TS := UUID new! !!TheWorldMainDockingBar class methodsFor: 'timestamping' stamp: 'dgd 9/6/2004 14:19'!timeStamp	"Answer the receiver's timeStamp"	^ TS! !!TheWorldMainDockingBar class methodsFor: 'as yet unclassified' stamp: 'dgd 9/9/2004 16:27'!localeChanged	self updateInstances! !!TheWorldMenu methodsFor: 'construction' stamp: 'dgd 9/25/2004 12:22'!helpMenu        "Build the help menu for the world."        |  menu |  	menu := self menu: 'help...' translated.        self fillIn: menu from:        {                {'about this system...'. {SmalltalkImage current. #aboutThisSystem}. 'current version information.'}.                {'update code from server'. {Utilities. #updateFromServer}. 'load latest code updates via the internet'}.                {'preferences...'. {Preferences. #openPreferencesInspector}. 'view and change various options.'}.			 {'set language...' . {Project. #chooseNaturalLanguage}. 'choose the language in which tiles should be displayed.'} .                nil.               {'command-key help'. { Utilities . #openCommandKeyHelp}. 'summary of keyboard shortcuts.'}	}.	self addGestureHelpItemsTo: menu.	self fillIn: menu from:	{                {'world menu help'. { self . #worldMenuHelp}. 'helps find menu items buried in submenus.'}.                        "{'info about flaps' . { Utilities . #explainFlaps}. 'describes how to enable and use flaps.'}."                {'font size summary' . { TextStyle . #fontSizeSummary}.  'summary of names and sizes of available fonts.'}.                {'useful expressions' . { Utilities . #openStandardWorkspace}. 'a window full of useful expressions.'}.			 {'annotation setup...' . { Preferences . #editAnnotations}. 'Click here to get a little window that will allow you to specify which types of annotations, in which order, you wish to see in the annotation panes of browsers and other tools'}.			nil.                {'graphical imports' . { Imports default . #viewImages}.  'view the global repository called ImageImports; you can easily import external graphics into ImageImports via the FileList'}.                {'standard graphics library' . { ScriptingSystem . #inspectFormDictionary}.  'lets you view and change the system''s standard library of graphics.'}.                nil.                {'telemorphic...' . {self. #remoteDo}.  'commands for doing multi-machine "telemorphic" experiments'}.                {#soundEnablingString . { Preferences . #toggleSoundEnabling}. 'turning sound off will completely disable Squeak''s use of sound.'}.                {'definition for...' . { Utilities . #lookUpDefinition}.  'if connected to the internet, use this to look up the definition of an English word.'}.                nil.                {'set author initials...' . { Utilities . #setAuthorInitials }. 'supply initials to be used to identify the author of code and other content.'}.                {'vm statistics' . { self . #vmStatistics}.  'obtain some intriguing data about the vm.'}.			  nil.			  {'purge undo records' . { CommandHistory . #resetAllHistory }. 'save space by removing all the undo information remembered in all projects.'}.                {'space left' . { self . #garbageCollect}. 'perform a full garbage-collection and report how many bytes of space remain in the image.'}.        }.	^menu! !!TrashCanMorph class methodsFor: 'class initialization' stamp: 'dgd 9/2/2004 12:58'!initialize	"initialize the receiver"	self registerInFlapsRegistry.	""	self initializePictures! !!TrashCanMorph class methodsFor: 'class initialization' stamp: 'dgd 9/2/2004 13:25'!initializePictures	" 	TrashCanMorph initializePictures. 	"	TrashPicOn := self initializeTrashPicOn.	TrashPic := self initializeTrashPic! !!TrashCanMorph class methodsFor: 'class initialization' stamp: 'dgd 9/2/2004 13:13'!initializeTrashPic	^(Form	extent: 72@72	depth: 32	fromArray	offset: 0@0)! !!TrashCanMorph class methodsFor: 'class initialization' stamp: 'dgd 9/2/2004 13:15'!initializeTrashPicOn	^ Form		extent: 72 @ 72		depth: 32		fromArray: #(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 35593500 438246684 773791004 1109335324 706682140 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52370716 857677084 1914641692 2971606300 3995016476 4280229148 4280229148 4280229148 4280229148 3089046812 1159666972 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 35593500 1059003676 2535398684 3944684828 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 3508477212 1595874588 102702364 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 924785948 2401180956 3844021532 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4282136620 4281149988 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 3844021532 2015304988 287251740 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 790568220 2266963228 3726581020 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4282333741 4287266903 4292200065 4294962328 4294699158 4291279224 4286937941 4282597168 4280229148 4280229148 4280229148 4280229148 4280229148 4095679772 2451512604 572464412 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 673127708 2132745500 3609140508 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4282333741 4287266903 4292200065 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4292331393 4286346064 4281084195 4280229148 4280229148 4280229148 4280229148 4229897500 2870943004 941563164 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52370716 1495211292 3424591132 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4282333741 4287266903 4292200065 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294370451 4289240168 4283320374 4280229148 4280229148 4280229148 4280229148 4280229148 3307150620 1226775836 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 169811228 1813978396 3726581020 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4281544487 4287069525 4292134272 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962071 4294103679 4290947944 4288252760 4293316998 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4292068480 4286148685 4280952610 4280229148 4280229148 4280229148 4280229148 3407813916 1310661916 18816284 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 320806172 2115968284 3944684828 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4283912250 4289897581 4294633365 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294895763 4293379184 4291467593 4292713278 4293501761 4281935888 4282330129 4292581949 4289495097 4291473254 4294962327 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294238866 4288648034 4282005034 4280229148 4280229148 4280229148 4280229148 3491699996 1394547996 18816284 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 438246684 2434735388 4095679772 4280229148 4280229148 4280229148 4280229148 4280229148 4281149988 4286609233 4292594564 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294961814 4293774199 4291796299 4293041983 4293501761 4293501761 4293501761 4293501761 4279898631 4284104473 4293370432 4293370432 4293370432 4291596347 4291207769 4294830228 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294699158 4289503082 4282597168 4280229148 4280229148 4280229148 4280229148 3558808860 1478434076 35593500 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1646206236 4028570908 4280229148 4280229148 4280229148 4280229148 4280229148 4283189045 4289305960 4294436243 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294564997 4292191827 4292779071 4293501761 4293501761 4293501761 4293501761 4293501761 4293501761 4293173055 4278321409 4285813024 4293370432 4293370432 4293370432 4293370432 4293370432 4292319293 4290943568 4294500750 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294896535 4290358129 4283451958 4280229148 4280229148 4280229148 4280229148 3625917724 1562320156 52370716 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203365660 3089046812 4280229148 4280229148 4280229148 4280229148 4280229148 4283189045 4290621556 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294896278 4293378926 4292123203 4293501761 4293501761 4293501761 4293501761 4293501761 4293501761 4293501761 4293501761 4290281523 4284498715 4278190080 4287521831 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4292910142 4290942281 4294105222 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4291213433 4284307006 4280229148 4280229148 4280229148 4280229148 3676249372 1646206236 69147932 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2803834140 4280229148 4280229148 4280229148 4280229148 4282333741 4290423922 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294829713 4292456284 4292647743 4293501761 4293501761 4293501761 4293501761 4293501761 4293501761 4293501761 4290741813 4285484319 4280161544 4278190080 4278190080 4278190080 4281081612 4288376107 4293239103 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293107519 4290678852 4293579136 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4292002431 4283715129 4280229148 4280229148 4280229148 4280229148 3743358236 1713315100 18816284 0 0 0 0 0 0 0 0 0 0 0 0 0 1243553052 4280229148 4280229148 4280229148 4280294940 4286871892 4294436243 4294962328 4294962328 4294962328 4294962328 4294962328 4294962327 4292785762 4293107520 4293501761 4293501761 4293501761 4293501761 4293501761 4293501761 4292516157 4286667300 4280621578 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4280358665 4287193126 4292910398 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293173311 4290481215 4292986745 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4289766508 4281741865 4280229148 4280229148 4280229148 4280229148 2199854364 0 0 0 0 0 0 0 0 0 0 0 0 0 1310661916 4280229148 4280229148 4280360476 4288776274 4293515148 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4293248629 4290414395 4293304640 4293501761 4293501761 4293501761 4290873142 4284367386 4278781443 4278321666 4278716424 4279111182 4279242768 4279242768 4279242768 4279242768 4279242768 4279242768 4279308561 4278979596 4278584838 4279438597 4285944609 4292319035 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293304640 4290942021 4294895507 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294304658 4287266903 4280623647 4280229148 4280229148 4280229148 1511988508 0 0 0 0 0 0 0 0 0 0 0 0 1025449244 4280229148 4280229148 4281740320 4293370432 4286735669 4285686849 4292594564 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4290619751 4287720239 4288376107 4282067473 4278190080 4278453252 4279505940 4280295456 4280361249 4280361249 4280427042 4280427042 4280427042 4280427042 4280427042 4280427042 4280427042 4280427042 4280427042 4280229663 4279242768 4278913028 4284761628 4291530296 4293370432 4293370432 4292779069 4289427761 4288904509 4291736169 4294962070 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294830742 4290687091 4282333742 4280229148 4280229148 4129234204 455023900 0 0 0 0 0 0 0 0 0 0 0 773725211 4280229148 4280229148 4281871648 4293370432 4293370432 4288442418 4281280544 4284568890 4291410554 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4291147381 4283978293 4280163612 4281479730 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281545523 4281348144 4279966491 4278518786 4286213469 4284702037 4288253794 4294304402 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4291805053 4288516449 4290160751 4294370195 4290161008 4280229148 4280229148 4280229148 2082413852 0 0 0 0 0 0 0 0 0 0 0 1074596876 4280229148 4280229148 4281477407 4293370432 4293370432 4293370432 4292253244 4284960041 4280229148 4283254065 4290423922 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4292923271 4285228105 4281940279 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4282664004 4283585107 4288256927 4293454315 4294967295 4291612632 4284442748 4292924050 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4292857478 4287266647 4285556808 4290029422 4294764950 4294962328 4294962328 4291805309 4280229148 4280229148 4280229148 1847335449 0 0 0 0 0 0 0 0 0 0 0 1040581893 4280229148 4280229148 4280294684 4293305153 4293370432 4293370432 4293370432 4293370432 4291004729 4284631336 4280294940 4283122480 4290752628 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294764950 4289042791 4283715910 4283453520 4283782485 4283782485 4283782485 4283782485 4283782485 4283782485 4283782485 4283782485 4283782485 4286217343 4290888647 4294638331 4294967295 4294967295 4294967295 4294967295 4290692045 4284508540 4293384340 4294962328 4294962328 4294633365 4289963629 4284438591 4285622345 4291936639 4294962328 4294962328 4294962328 4294962328 4294962328 4290687092 4280229148 4280229148 4280229148 1896877839 167772160 0 0 0 0 0 0 0 0 0 0 788529152 4229831707 4280229148 4280229148 4292977735 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4291333434 4285091113 4280426269 4283385907 4291016054 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4293318026 4286610012 4284308569 4284900966 4284900966 4284900966 4284900966 4284835430 4287533462 4293059558 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4288126895 4288650374 4292857478 4287069525 4282794033 4287464024 4293580940 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4289174118 4280229148 4280229148 4280229148 1527186950 1056964608 16777216 0 0 0 0 0 0 0 0 0 687865856 4045282331 4280229148 4280229148 4290219337 4293370689 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4291662139 4285485354 4280492061 4283648821 4291410298 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4290490234 4285821028 4285098086 4285755229 4285625721 4286548124 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292336352 4283587440 4283122996 4289437289 4294567572 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4285162309 4280229148 4280229148 4062059547 1275068416 1275068416 419430400 0 0 0 0 0 0 0 0 0 587202560 3843889946 4280229148 4280229148 4280229148 4282990123 4290943054 4293371203 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4291924796 4285945387 4280886559 4284043321 4291739260 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4293384340 4284179578 4291218131 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294901502 4284771975 4292792722 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4292528515 4280558111 4280229148 4280229148 3592165913 1275068416 1275068416 352321536 0 0 0 0 0 0 0 0 0 503316480 3659274777 4280229148 4280229148 4280229148 4280229148 4280229148 4281543715 4289628488 4293240390 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4292713021 4287850801 4282463782 4286016071 4294238353 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4290491531 4285166988 4294835709 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4287863724 4290097034 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4291476090 4281347365 4280229148 4280229148 4280229148 3105495063 1275068416 1275068416 150994944 0 0 0 0 0 0 0 0 0 402653184 2014318350 3676051994 4280229148 4280229148 4280229148 4280229148 4280627012 4280099376 4280426270 4288050752 4293043528 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4289953846 4286276665 4291080047 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294830743 4285297533 4291283667 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290165703 4288058757 4294962328 4294962328 4294962328 4294962328 4294962328 4293909902 4289963374 4285885515 4281741865 4280229148 4280229148 4280229148 4280229148 4280229148 2249396497 1275068416 1207959552 0 0 0 0 0 0 0 0 0 0 301989888 1275068416 1291845632 3155826711 4280229148 4280229148 4280229148 4281352290 4280166989 4280167246 4280561742 4280098343 4286407480 4292649802 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4291924796 4292586841 4294565770 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4291805053 4285163869 4285890453 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292402145 4286020735 4294962328 4294764950 4291607675 4287464281 4283386166 4280294940 4280558630 4281679176 4281151542 4280229148 4280229148 4280229148 4280229148 3877444378 1375928834 1275068416 1006632960 0 0 0 0 0 0 0 0 0 0 218103808 1275068416 1275068416 2685867284 4280229148 4280229148 4280229148 4281286239 4280166989 4280166989 4280166989 4280167246 4280364881 4280297276 4284567602 4292190283 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4292844863 4291666774 4293579395 4294962328 4294962328 4294962328 4292923271 4288845156 4289765996 4293778320 4283916922 4292336352 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294507002 4283851128 4284899138 4281149988 4281152831 4282472305 4283658645 4284647089 4285109445 4285109703 4281482312 4280229148 4280229148 3424327961 2920814358 1661602057 1275068416 1275068416 788529152 0 0 0 0 0 0 0 0 0 0 117440512 1275068416 1275068416 2434077459 4280229148 4280229148 4280229148 4281220444 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166990 4280363589 4282661678 4291467850 4293304897 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293370432 4293504076 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4287006849 4290363081 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4285495440 4283394699 4284713140 4285240001 4285174722 4285174980 4285175238 4285109703 4284978631 4280427301 4280229148 3860667162 1275068416 1275068416 1275068416 1275068416 1275068416 570425344 0 0 0 0 0 0 0 0 0 0 0 285212672 922746880 2198999312 4280229148 4280229148 4280229148 4281088342 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280232521 4281675823 4290547784 4293370947 4293370432 4293370432 4293370432 4293370432 4293370432 4293502790 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4294962328 4290228362 4289179067 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4287468711 4284579752 4285174464 4285240002 4285174979 4285175237 4285175238 4285044167 4284319411 4280229148 4280229148 3172603927 1275068416 1275068416 1275068416 1275068416 1275068416 167772160 0 0 0 0 0 0 0 0 0 0 0 0 0 1745948687 4280229148 4280229148 4280229148 4280890702 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280232779 4281018928 4289496903 4293305926 4293370432 4293370432 4293370432 4293370432 4294962327 4294962328 4294962328 4294962328 4294962328 4294962328 4292923270 4286807910 4287995053 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4289244860 4284381599 4285174465 4285240259 4285175237 4285175238 4285109703 4285109704 4283330711 4280229148 4280229148 2685867284 1275068416 1275068416 1275068416 1275068416 738197504 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1393429773 4280229148 4280229148 4280229148 4280758084 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280232779 4280427050 4288576322 4293174856 4293370432 4293370432 4294829969 4294962328 4294962328 4293975439 4288976998 4283518008 4280229148 4280887856 4286811295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4290955216 4284183189 4285240258 4285240516 4285174981 4285109702 4285109704 4285044168 4282341750 4280229148 4280229148 2333348370 1275068416 1090519040 452984832 318767104 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1024002056 4280229148 4280229148 4280229148 4280625722 4281285730 4281746538 4282272628 4282601850 4282535800 4282404471 4282272885 4281746282 4280758871 4280166989 4280166989 4280166989 4280166989 4280166989 4280166989 4280495950 4280295203 4287393598 4292912715 4294434184 4290358129 4284964931 4280623647 4280229148 4280756268 4282207587 4283459723 4285627282 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4292730853 4283853451 4284846533 4284715461 4284584390 4284518599 4284387271 4284256199 4281418325 4280229148 4280229148 2014318350 1275068416 654311424 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 687865856 4246608923 4280229148 4280229148 4280624683 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4282667644 4281614697 4280627541 4280166989 4280166989 4280232525 4280627283 4281022041 4281285462 4280229406 4280820768 4280229148 4280558374 4281482059 4282669173 4283592342 4283921822 4283987101 4284508804 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294441209 4283523713 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4280823351 4280229148 4280229148 1678379273 1275068416 335544320 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 553648128 4028505115 4280229148 4280229148 4280360736 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4282272628 4280693078 4280495441 4280824662 4281219163 4281548384 4281943399 4281747555 4282076265 4282802308 4283329428 4283527065 4283790237 4283987874 4284052894 4283522425 4294638587 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4284772232 4283861443 4283927751 4283927751 4283927751 4283927751 4283795650 4280229406 4280229148 4263386139 1359086082 1275068416 134217728 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 452984832 3793558298 4280229148 4280229148 4280229148 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283128452 4282206834 4281285214 4281416798 4281745763 4282009191 4282538367 4282934412 4283197841 4283526806 4283789723 4283922080 4284119975 4283988904 4283522425 4293454573 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4294967295 4291678681 4284574853 4283859895 4283927751 4283927751 4283927751 4283927751 4283201446 4280229148 4280229148 4028505115 1275068416 1241513984 16777216 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 335544320 3541834265 4280229148 4280229148 4280229148 4283194760 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283062660 4282404212 4282008679 4282206570 4282669438 4283132048 4283394965 4283658908 4283923885 4283991741 4283861958 4283794360 4283522425 4292138974 4294967295 4294967295 4294967295 4294967295 4294704124 4290757582 4285495696 4283522425 4283591569 4283860670 4283927751 4283927751 4283927751 4283927751 4282540935 4280229148 4280229148 3692829466 1275068416 1107296256 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 234881024 3306887448 4280229148 4280229148 4280229148 4283129481 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283062659 4282732919 4282404716 4283463075 4283794104 4283861957 4283927751 4283927751 4283927751 4283794360 4283522425 4289442238 4294967295 4294967295 4292665060 4288521395 4284574853 4283522682 4283658134 4283860154 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281946477 4280229148 4280229148 3357219096 1275068416 956301312 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117440512 3071875095 4280229148 4280229148 4280229148 4283063688 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4281153350 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283861184 4283522425 4284640646 4289310653 4285232525 4283522425 4283523198 4283658908 4283860926 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281550170 4280229148 4280229148 3021543191 1275068416 788529152 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16777216 2836928021 4280229148 4280229148 4280229148 4282932357 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4280624684 4283597496 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283589764 4283522425 4283522940 4283592084 4283793071 4283927493 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281153864 4280229148 4280229148 2685867284 1275068416 637534208 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2551649556 4280229148 4280229148 4280229148 4282800512 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4280756528 4283465394 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283861443 4283860412 4283861956 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4280757557 4280229148 4280229148 2350125586 1275068416 486539264 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2232751123 4280229148 4280229148 4280229148 4282603130 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4280888373 4283465394 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4280361251 4280229148 4280229148 2014318350 1275068416 335544320 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1913852433 4280229148 4280229148 4280229148 4282405233 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4281350216 4283861958 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283663804 4280229148 4280229148 4280229148 1695156745 1275068416 167772160 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1561399311 4280229148 4280229148 4280229148 4282141543 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4282536308 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283267498 4280229148 4280229148 4280229148 1359086082 1275068416 33554432 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1175325964 4280229148 4280229148 4280229148 4281812060 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194761 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4282871191 4280229148 4280229148 4028505115 1275068416 1157627904 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 788989446 4280229148 4280229148 4280229148 4281416526 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194504 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4282474885 4280229148 4280229148 3709606682 1275068416 989855744 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912 4179500059 4280229148 4280229148 4281086270 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194503 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4282078579 4280229148 4280229148 3357219096 1275068416 838860800 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 419430400 3944553243 4280229148 4280229148 4280624941 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281748580 4280229148 4280229148 3038320407 1275068416 687865856 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 301989888 3709606682 4280229148 4280229148 4280360994 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281483862 4280229148 4280229148 2702644501 1275068416 536870912 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 201326592 3474659865 4280229148 4280229148 4280229148 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283861958 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281153864 4280229148 4280229148 2366903058 1275068416 369098752 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100663296 3239713048 4280229148 4280229148 4280229148 4283194760 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283795906 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4280823866 4280229148 4280229148 2031095566 1275068416 218103808 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2987988758 4280229148 4280229148 4280229148 4283129224 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283333548 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4280559404 4280229148 4280229148 1695222281 1275068416 67108864 0 0 0 0 72441209 3075562873 2790350201 1330732409 72441209 0 0 0 0 0 0 0 0 0 0 0 0 2702710293 4280229148 4280229148 4280229148 4283063687 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283128453 4282870677 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283861958 4280229406 4280229148 4280229148 1375928834 1191182336 0 0 0 0 0 1716608377 4283522425 4283522425 4286811296 3949622412 2287033721 558980473 0 0 0 0 0 0 0 0 0 0 2400654612 4280229148 4280229148 4280229148 4282866049 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4282930813 4282606987 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283663547 4280229148 4280229148 4045282331 1275068416 1040187392 0 0 0 0 72441209 3729874297 4283522425 4287534760 4294901502 4294704123 4289902532 4250362750 3008454009 1230069113 22109561 0 0 0 0 0 0 0 2048201747 4280229148 4280229148 4280229148 4282536565 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4282667124 4282409091 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283333549 4280229148 4280229148 3709606682 1275068416 889192448 0 0 0 0 1666276729 4283522425 4284772232 4294177781 4294901502 4294901502 4294901502 4292796645 4284903561 4283522425 3696319865 424762745 0 0 0 0 0 0 1712525841 4280229148 4280229148 4280229148 4282140774 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4282403434 4282276732 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283069087 4280229148 4280229148 3390773528 1275068416 738197504 0 0 0 189881721 3864092025 4283522425 4291875803 4294901502 4294901502 4294901502 4294901502 4294901502 4293914867 4286153368 4283522425 960119383 0 0 0 0 0 0 1292898062 4280229148 4280229148 4280229148 4281679187 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4282140258 4282276731 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4282607244 4280229148 4280229148 3038320407 1275068416 570425344 0 0 0 2169593209 4283522425 4288455602 4294901502 4294901502 4294901502 4294901502 4294901502 4294901502 4294901502 4290823631 3998112117 1359020289 922746880 0 0 0 0 0 688063235 4095613979 4280229148 4280229148 4280756528 4282800511 4283194247 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4281876825 4282276731 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281550427 4280229148 4280229148 2719421717 1275068416 419430400 0 0 475094393 4115750265 4284903561 4294506745 4294901502 4294901502 4294901502 4294901502 4294901502 4294901502 4294901502 4287666346 2721793113 1342177280 889192448 0 0 0 0 0 503316480 2736199189 4280229148 4280229148 4280229148 4280229148 4280822579 4282799998 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4281613392 4282276731 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283795907 4280427560 4280229148 4280229148 2383680274 1275068416 268435456 0 0 2706464121 4283522425 4290165701 4294572537 4294769916 4294901502 4294901502 4294901502 4294901502 4294901502 4293914866 4116013178 1510739474 1342177280 436207616 0 0 0 0 0 318767104 1291845632 2987988758 4280229148 4280229148 4280229148 4280229148 4280229148 4281547599 4283128710 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4281349959 4282276731 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4281946476 4280229148 4280229148 4280229148 1997475342 1275068416 117440512 0 860970361 4266679416 4284969353 4293585642 4293914607 4294111986 4294309365 4294440951 4294638330 4294835709 4294901502 4288915896 2889828446 1342177280 1124073472 16777216 0 0 0 0 0 16777216 1040187392 1275068416 2232553745 4062059547 4280229148 4280229148 4280229148 4280229148 4280756271 4282865276 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4281086270 4282276731 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283795648 4281880425 4280229148 4280229148 4280229148 4162722843 1359086082 1241513984 0 0 3193003385 4283522425 4289573563 4293059298 4293256677 4293454056 4293585642 4293783021 4293980400 4294177779 4293717486 4200228222 1595020571 1342177280 452984832 0 0 0 0 0 0 0 150994944 1073741824 1275068416 1594361863 3491502617 4280229148 4280229148 4280229148 4280229148 4280295200 4282206309 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4280822580 4282276732 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283201446 4281946733 4280625712 4280229148 4280229148 4280229148 4280229148 3390773528 1275068416 1073741824 0 1246846329 4283522425 4284969352 4292138196 4292401368 4292532954 4292730333 4292927712 4293125091 4293322470 4293519849 4288784308 3057798242 1342177280 1107296256 0 0 0 0 0 0 0 0 0 50331648 704643072 1258291200 1291845632 2635470100 4213054491 4280229148 4280229148 4280229148 4280229148 4281283909 4283128709 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4280558889 4282408833 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283267755 4281946733 4280757556 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4229831707 1846348812 1275068416 890048276 34080776 2907724920 4283522425 4285824144 4290756802 4291677645 4291875024 4292072403 4292269782 4292467161 4292664540 4292006870 4233651070 1729764646 1342177280 436207616 0 0 0 0 0 0 0 0 0 0 0 285212672 1073741824 1275068416 1846348812 3810335514 4280229148 4280229148 4280229148 4280229148 4280624683 4282931071 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4283194246 4280295199 4282540935 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283795649 4282540937 4281087812 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4213054491 2400457490 1275068416 2167354950 3914292086 1982871110 1242698777 2620998230 4115618678 4283719803 4286810521 4290756801 4291414473 4291611852 4291809231 4291940817 4287073951 3040955234 1342177280 1090519040 0 0 0 0 0 0 0 0 0 0 0 0 0 33554432 687865856 1258291200 1392706307 3055097879 4280229148 4280229148 4280229148 4280229148 4280295200 4282404205 4283194246 4283194246 4283194246 4283194246 4283194246 4282996607 4280229148 4282673038 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283927751 4283267498 4281814375 4280427560 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4246608923 3273267480 1812728843 1426853394 3158921833 4289113274 4290428874 3880605811 2030569739 1526726656 1611863581 3192147558 4266679416 4284377473 4289112495 4290953922 4291085508 4290033338 4065418103 1544491286 1342177280 419430400 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 268435456 1056964608 1275068416 2198999312 4045282331 4280229148 4280229148 4280229148 4280229148 4281745238 4283194247 4283194246 4283194246 4283194246 4282732917 4280229148 4282804884 4283927751 4283927751 4283927751 4283927751 4283861957 4282739090 4281153606 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4028505115 2836928021 1627981832 1275068416 2049651008 3982781829 4292796645 4294835709 4289968581 3914489207 1797005353 1023739141 1023410176 1342177280 2015833403 3796653937 4283588217 4287796896 4290427578 4285626765 2553757779 1342177280 989855744 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33554432 654311424 1258291200 1560807175 3407550744 4280229148 4280229148 4280229148 4280229148 4281020475 4283129225 4283194246 4283194246 4282469228 4280229148 4282937242 4283927751 4283927751 4283663805 4282276475 4280691506 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 3575388697 2316505617 1342308866 1275068416 1544820510 3024178018 4268915858 4293783537 4293388781 4286022038 3410449002 1612126495 1244937036 1582390649 458317177 503382273 1090519040 1544491543 3712702064 4283588217 4286613141 3746256497 1375863556 1308622848 201326592 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 251658240 1040187392 1275068416 2484409363 4145945627 4280229148 4280229148 4280229148 4280427303 4282998664 4283194246 4282205794 4280229148 4283069344 4283399342 4281748581 4280361508 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4145945627 3038320407 1812728843 1275068416 1275068416 2083008060 3982650755 4283916925 4286087575 4294375416 4291415253 4284180353 4166015863 3695924848 4183779971 4286613917 4285693074 2318744653 1376258056 17303560 452984832 1460671257 3729479280 4283522425 2083074110 1342177280 704643072 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16777216 603979776 1241513984 1695222281 3608943129 4280229148 4280229148 4280229148 4280229148 4282538365 4281942619 4280559146 4281154120 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 3776781082 2517963795 1426326532 1275068416 1275068416 1275068416 973078528 2285717084 4292467938 4287600553 4291810266 4292270559 4285955989 4288586932 4291218131 4293783281 4294967295 4294967295 4290954960 2789033562 1426589704 185075720 0 234881024 1494488862 2688172887 1342177280 1174405120 50331648 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 184549376 956301312 1308688641 2719421717 4213054491 4280229148 4280229148 4280229148 4280691506 4280426788 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4213054491 3256490264 2014318350 1275068416 1275068416 1275068416 1140850688 671088640 184549376 0 2118405733 4252598936 4284443268 4292533474 4294967295 4294967295 4294967295 4293322988 4290823374 4288455346 4286087575 4283917182 3192147557 1426589704 403179528 0 0 218103808 1191182336 1308622848 285212672 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 503316480 1191182336 1846348812 3793558298 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 4280229148 3944553242 2736199189 1560807175 1275068416 1275068416 1241513984 855638016 369098752 16777216 0 0 0 336070664 974263063 3511441264 4294441209 4291415253 4286942625 4284443268 4233124984 3729479280 3124972900 2536980306 1948592436 1376389900 1057490952 336070664 0 0 0 117440512 369098752 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117440512 855638016 1375928834 2954434326 4263386139 4280229148 4280229148 4280229148 4280229148 4263386139 3457882649 2215776528 1308688641 1275068416 1275068416 1040187392 553648128 100663296 0 0 0 0 0 0 0 0 3882513291 4292138974 4283719803 2906605662 2049519163 1410207762 1040713736 755501064 470288392 201852936 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 385875968 1140850688 1863126284 2685867284 3306887448 3038320407 2316505617 1577584647 1275068416 1275068416 1191182336 738197504 251658240 0 0 0 0 0 0 0 0 0 0 38886777 3192476781 3930937715 2990623328 1158154248 168298504 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 67108864 738197504 1258291200 1275068416 1275068416 1275068416 1224736768 905969664 436207616 33554432 0 0 0 0 0 0 0 0 0 0 0 0 0 621283336 1023936520 1158154248 151521288 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )		offset: 0 @ 0! !!TwoWayScrollPane methodsFor: 'menu' stamp: 'dgd 9/18/2004 18:30'!wantsYellowButtonMenu	"Answer true if the receiver wants a yellow button menu"	^ getMenuSelector notNil! !TrashCanMorph initialize!TheWorldMainDockingBar initialize!!SystemWindow reorganize!('drawing' areasRemainingToFill: colorForInsets makeMeVisible raisedColor scrollBarColor wantsRoundedCorners)('events' doFastFrameDrag: handleListenEvent: handlesMouseDown: handlesMouseOverDragging: isCandidateForAutomaticViewing mouseDown: mouseEnterDragging: mouseLeaveDragging: mouseMove: mouseUp: paneTransition: secondaryPaneTransition:divider: wantsHalo wantsToBeDroppedInto:)('geometry' borderWidthForRounding extent: justDroppedInto:event: labelRect paneMorphs panelRect position: removeMenuBox setPaneRectsFromBounds)('initialization' addCloseBox addExpandBox addLabelArea addMenuControl applyModelExtent boxExtent createBox createCloseBox createCollapseBox createExpandBox createMenuBox defaultBorderColor defaultBorderWidth defaultColor initialize initializeLabelArea maximumExtent maximumExtent: model: replaceBoxes setFramesForLabelArea)('label' externalName getRawLabel label labelHeight labelWidgetAllowance relabel relabelEvent: setLabel: setLabelFont: setLabelWidgetAllowance setStripeColorsFrom: tryToRenameTo: update: wantsLabel widthOfFullLabelText)('layout' convertAlignment layoutBounds putLabelItemsInLabelArea)('menu' addCustomMenuItems:hand: buildWindowMenu changeColor deleteCloseBox fullScreen fullScreenMaximumExtent makeClosable makeSecondTopmost makeUnclosable offerWindowMenu sendToBack setWindowColor setWindowColor: takeOutOfWindow wantsYellowButtonMenu)('menus')('object fileIn' convertToCurrentVersion:refStream:)('open/close' closeBoxHit delete initialExtent mustNotClose openAsIs openAsIsIn: openInMVC openInMVCExtent: openInWorld: openInWorld:extent: openInWorldExtent: positionSubmorphs)('panes' addMorph:frame: addMorph:fullFrame: existingPaneColor holdsTranscript paneColor paneColor: paneColorToUse paneMorphSatisfying: replacePane:with: restoreDefaultPaneColor setUpdatablePanesFrom: titleAndPaneText updatablePanes updateBox:color: updateBoxesColor: updatePaneColors)('resize/collapse' allowReframeHandles allowReframeHandles: collapse collapseOrExpand collapsedFrame doFastWindowReframe: expand expandBoxHit fastFramingOn fullFrame getBoundsWithFlex getCollapsedFrame isCollapsed mouseLeaveEvent:fromPane: paneWithLongestSide:near: reframePanesAdjoining:along:to: setBoundsWithFlex: spawnOffsetReframeHandle:divider: spawnPaneFrameHandle: spawnReframeHandle: unexpandedFrame unexpandedFrame: wantsExpandBox)('stepping' amendSteppingStatus stepAt: stepTime wantsSteps wantsStepsWhenCollapsed)('testing' isSystemWindow shouldDropOnMouseUp wantsToBeCachedByHand)('thumbnail' icon)('top window' activate activateAndForceLabelToShow activeOnlyOnTop activeOnlyOnTop: adjustBorderUponActivationWhenLabeless adjustBorderUponDeactivationWhenLabeless extantSketchEditor isActive lockInactivePortions passivate updatePanesFromSubmorphs)!!StickyPadMorph reorganize!('visual properties' canHaveFillStyles)('parts bin' initializeToStandAlone)!!SelectionMorph reorganize!('accessing' borderColor: borderWidth: wantsToBeTopmost)('drawing' drawOn:)('dropping/grabbing' aboutToBeGrabbedBy: justDroppedInto:event: slideToTrash:)('geometry' bounds: extent:)('halo commands' addCustomMenuItems:hand: alignBottomEdges alignCentersHorizontally alignCentersVertically alignLeftEdges alignRightEdges alignTopEdges distributeHorizontally distributeVertically doDup:fromHalo:handle: organizeIntoColumn organizeIntoRow)('halos and balloon help' addHandlesTo:box: addOptionalHandlesTo:box: balloonHelpTextForHandle: hasHalo:)('initialization' defaultBorderColor defaultBorderWidth defaultColor extendByHand: initialize)('menus' maybeAddCollapseItemTo:)('submorphs-add/remove' delete dismissViaHalo)('undo' borderColorForItems: borderWidthForItems: fillStyleForItems: refineUndoTarget:selector:arguments:in: undoMove:redo:owner:bounds:predecessor:)('visual properties' fillStyle:)('private' doneExtending privateFullMoveBy: selectSubmorphsOf: selectedItems setOtherSelection: setSelectedItems:)('viewer' externalName)('WiW support' morphicLayerNumber)('menu')('*connectors-halo commands' addOrRemoveItems:)!!ScrollPane reorganize!('OBSOLETE' hideScrollBar hideScrollBarIndefinitely leftoverScrollRange resizeScrollBar scrollBarValue: scrollbarWidth totalScrollRange unadjustedScrollRange)('access' adoptPaneColor: flatColoredScrollBarLook hMargin hasFocus retractableScrollBar scrollBarOnLeft scroller scroller: wantsSlot)('access options' alwaysShowHScrollBar: alwaysShowScrollBars: alwaysShowVScrollBar: hideHScrollBarIndefinitely: hideScrollBarsIndefinitely hideScrollBarsIndefinitely: hideVScrollBarIndefinitely: showHScrollBarOnlyWhenNeeded: showScrollBarsOnlyWhenNeeded: showVScrollBarOnlyWhenNeeded:)('event handling' handlesMouseDown: handlesMouseOver: keyStroke: mouseDown: mouseEnter: mouseLeave: mouseMove: mouseUp: scrollByKeyboard:)('geometry' extent: extraScrollRange hExtraScrollRange hLeftoverScrollRange hResizeScrollBar hScrollBarWidth hSetScrollDelta hTotalScrollRange hUnadjustedScrollRange innerBounds resetExtent resizeScrollBars resizeScroller scrollBarThickness scrollDeltaHeight scrollDeltaWidth setScrollDeltas vExtraScrollRange vLeftoverScrollRange vResizeScrollBar vScrollBarHeight vSetScrollDelta vTotalScrollRange vUnadjustedScrollRange)('geometry testing' containsPoint: hIsScrollable hIsScrollbarShowing hIsScrolled isAScrollbarShowing isScrolledFromTop scrollBarFills: vIsScrollable vIsScrollbarShowing vIsScrolled)('initialization' defaultBorderColor hInitScrollBarTEMPORARY initialize initializePreferences initializeScrollBars)('menu' addCustomMenuItems:hand: getMenu: leftOrRight menuTitleSelector: retractable: retractableOrNot scrollBarOnLeft: wantsYellowButtonMenu)('menus')('scroll bar events' hScrollBarMenuButtonPressed: scrollBarMenuButtonPressed: shiftedTextPaneMenuRequest shiftedYellowButtonActivity unshiftedYellowButtonActivity vScrollBarMenuButtonPressed: yellowButtonActivity:)('scrolling' hHideOrShowScrollBar hHideScrollBar hIsScrollbarNeeded hScrollBarValue: hShowScrollBar hideOrShowScrollBar hideOrShowScrollBars hideScrollBars scrollBy: scrollToShow: showScrollBars vHideOrShowScrollBar vHideScrollBar vIsScrollbarNeeded vScrollBarValue: vShowScrollBar)!!Project reorganize!('initialization' backgroundColorForMorphicProject backgroundColorForMvcProject defaultBackgroundColor initMorphic initialExtent initialProject initialize installNewDisplay:depth: installPasteUpAsWorld: setChangeSet: setProjectHolder: setServer windowActiveOnFirstClick windowReqNewLabel:)('accessing' addGuard: addSubProjectNamesTo:indentation: changeSet children currentStack: displayDepth: environment findProjectView: forgetExistingURL isCurrentProject isMorphic isTopProject labelString lastDirectory: lastSavedAtSeconds name nameAdjustedForDepth nextProject parent previousProject projectChangeSet renameTo: setParent: setThumbnail: setViewSize: storeNewPrimaryURL: thumbnail urlList viewSize withChildrenDo: world)('menu messages' assureNavigatorPresenceMatchesPreference doWeWantToRename enter enter: enter:revert:saveForRevert: enterAsActiveSubprojectWithin: enterForEmergencyRecovery exit fileOut finalEnterActions finalExitActions installProjectPreferences makeThumbnail navigatorFlapVisible saveProjectPreferences saveState validateProjectNameIfOK: viewLocFor:)('release' addDependent: canDiscardEdits deletingProject: okToChange release removeChangeSetIfPossible subProjects)('printing' printOn:)('file in/out' armsLengthCommand:withDescription: assureIntegerVersion bumpVersion: compressFilesIn:to:in:resources: couldBeSwappedOut currentVersionNumber decideAboutCreatingBlank: doArmsLengthCommand: downloadUrl ensureChangeSetNameUnique exportSegmentFileName:directory: exportSegmentWithCatagories:classes:fileName:directory: exportSegmentWithChangeSet:fileName:directory: findAFolderToLoadProjectFrom findAFolderToStoreProjectIn fromMyServerLoad: hasBadNameForStoring htmlPagePrototype loadFromServer loadFromServer: objectForDataStream: primaryServer primaryServerIfNil: projectExtension restoreReferences revert saveAs saveForRevert serverList squeakletDirectory storeDataOn: storeHtmlPageIn: storeOnServer storeOnServerAssumingNameValid storeOnServerInnards storeOnServerShowProgressOn:forgetURL: storeOnServerWithProgressInfo storeOnServerWithProgressInfoOn: storeSegment storeSegmentNoFile storeSomeSegment storeToMakeRoom tryToFindAServerWithMe url urlForLoading versionForFileName versionFrom: versionedFileName writeFileNamed:fromDirectory:toServer: writeStackText:in:registerIn:)('object fileIn' convertToCurrentVersion:refStream:)('project parameters' currentStack initializeProjectParameters initializeProjectPreferences noteThatParameter:justChangedTo: parameterAt: parameterAt:ifAbsent: projectParameterAt: projectParameterAt:ifAbsent: projectParameterAt:ifAbsentPut: projectParameterAt:put: projectParameters projectPreferenceAt: projectPreferenceAt:ifAbsent: projectPreferenceFlagDictionary rawParameters removeParameter:)('docking bars support' assureMainDockingBarPresenceMatchesPreference createOrUpdateMainDockingBar removeMainDockingBar showWorldMainDockingBar showWorldMainDockingBar: showWorldMainDockingBarString toggleShowWorldMainDockingBar)('flaps support' assureFlapIntegrity cleanseDisabledGlobalFlapIDsList enableDisableGlobalFlap: flapsSuppressed flapsSuppressed: globalFlapEnabledString: globalFlapWithIDEnabledString: isFlapEnabled: isFlapIDEnabled: showSharedFlaps)('language' chooseNaturalLanguage localeChanged localeID naturalLanguage setFlaps setPaletteFor: updateLocaleDependents)('displaying' createViewIfAppropriate displayZoom: imageForm imageFormOfSize:depth: showZoom)('isolation layers' beIsolated compileAll:from: compileAllIsolated:from: invoke invokeFrom: isIsolated isolationHead isolationSet layersToTop propagateChanges revoke)('OBSOLETE' obsolete)('SuperSwiki' tellAFriend tellAFriend:)('resources' abortResourceLoading resourceDirectoryName resourceManager resourceManager: resourceUrl startResourceLoading storeResourceList:in:)('active process' depth)('*sound' beep)!!PasteUpMorph reorganize!('Nebraska' addRemoteClient: convertRemoteClientToBuffered: hasRemoteServer releaseRemoteServer remoteServer remoteServer: removeRemoteClient: transferRemoteServerFrom:)('WiW support' addMorphInLayer: morphicLayerNumber restartWorldCycleWithEvent: shouldGetStepsFrom: validateMouseEvent:)('accessing' assureFlapWidth: flapTab modelOrNil presenter useRoundedCorners)('alarms-scheduler' addAlarm:withArguments:for:at: removeAlarm:for:)('caching' releaseCachedState)('change reporting' invalidRect:from:)('classification' isPlayfieldLike isWorldMorph)('copying' veryDeepCopyWith:)('cursor' cursorWrapped: numberAtCursor rectifyCursor selectedRect valueAtCursor valueAtCursor:)('debug and other' addViewingItemsTo:)('display' gradientFillColor: setGradientColor:)('drawing' drawOn:)('dropping/grabbing' acceptDroppingMorph:event: automaticPhraseExpansion dropEnabled justDroppedInto:event: morphToDropFrom: originAtCenter positionNear:forExtent:adjustmentSuggestion: repelsMorph:event: wantsDroppedMorph:event:)('e-toy support' automaticViewing cursor cursor: fenceEnabled isCandidateForAutomaticViewing referencePlayfield)('event handling' dropFiles: handlesKeyboard: handlesMouseDown: keyStroke: morphToGrab: mouseDown: mouseUp: wantsDropFiles: wantsKeyboardFocusFor:)('events-processing' processEvent:using:)('flaps' accommodateFlap: addGlobalFlaps assureFlapTabsFitOnScreen bringFlapTabsToFront bringTopmostsToFront correspondingFlapTab deleteAllFlapArtifacts deleteGlobalFlapArtifacts enableGlobalFlaps flapTabs localFlapTabs offsetForAccommodating:onEdge: paintingFlapTab releaseViewers removeAccommodationForFlap:)('geometry' extent: gridPoint: position:)('geometry testing' fullContainsPoint:)('gridding' gridModulus gridModulus: gridOrigin gridOrigin: gridSpec gridSpecPut: gridVisible gridVisibleOnOff gridVisibleString griddingOn griddingOnOff griddingString setGridSpec)('halos and balloon help' defersHaloOnClickTo: wantsDirectionHandles wantsHaloFor: wantsHaloFromClick)('initialization' becomeActiveDuring: defaultBorderColor defaultBorderWidth defaultColor initialize newResourceLoaded)('interaction loop' doOneCycleNow)('layout' addCenteredAtBottom:offset: convertAlignment laySubpartsOutInOneRow layoutChanged)('macpal' currentVocabulary)('menu & halo' addCustomMenuItems:hand: addPenMenuItems:hand: addPenTrailsMenuItemsTo: addPlayfieldMenuItems:hand: addScalingMenuItems:hand: addStackMenuItems:hand: addWorldHaloMenuItemsTo:hand: addWorldToggleItemsToHaloMenu: autoExpansionString autoLineLayoutString autoViewingString batchPenTrailsString buildDebugMenu: defineApplicationView defineFactoryView deleteBalloonTarget: fenceEnabledString indicateCursorString isOpenForDragNDropString isPartsBinString mouseOverHalosString originAtCenterString playfieldOptionsMenu presentCardAndStackMenu presentPlayfieldMenu presentViewMenu putUpPenTrailsSubmenu reformulateUpdatingMenus sendTextContentsBackToDonor showApplicationView showExpandedView showFactoryView showFullView showReducedView showThumbnailString showWorldMainDockingBarString toggleShowWorldMainDockingBar transformToShow:)('misc' abandonCostumeHistory addMyYellowButtonMenuItemsToSubmorphMenus allScriptEditors allScriptors alwaysShowThumbnail cachedOrNewThumbnailFrom: cartesianOrigin closedViewerFlapTabs heightForThumbnails hideFlapsOtherThan:ifClingingTo: hideViewerFlaps hideViewerFlapsOtherThanFor: impartPrivatePresenter innocuousName makeDetachable maxHeightToAvoidThumbnailing maximumThumbnailWidth mouseX mouseY nameForCopyIfAlreadyNamed: padding: prepareToBeSaved roundUpStrays smallThumbnailForPageSorter startRunningAll stepAll stopRunningAll thumbnailForPageSorter unhideHiddenObjects updateStatusForAllScriptEditors viewerFlapTabFor:)('model' createCustomModel model setModel:)('name' unusedMorphNameLike:)('objects from disk' convertToCurrentVersion:refStream: saveOnFile)('options' autoLineLayout autoLineLayout: automaticViewing: batchPenTrails batchPenTrails: becomeLikeAHolder behaveLikeAHolderString behaveLikeHolder behaveLikeHolder: behavingLikeAHolder fenceEnabled: indicateCursor indicateCursor: isPartsBin: replaceTallSubmorphsByThumbnails resizeToFit resizeToFitString setPartsBinStatusTo: setThumbnailHeight toggleAlwaysShowThumbnail toggleAutoLineLayout toggleAutomaticPhraseExpansion toggleAutomaticViewing toggleBatchPenTrails toggleBehaveLikeAHolder toggleFenceEnabled toggleIndicateCursor toggleIsPartsBin toggleMouseOverHalos toggleOriginAtCenter toggleResizeToFit updateSubmorphThumbnails wantsMouseOverHalos wantsMouseOverHalos:)('painting' backgroundForm backgroundForm: backgroundSketch backgroundSketch: deleteBackgroundPainting drawSubmorphsOn: makeNewDrawingWithin paintBackground paintingBoundsAround: prepareToPaint prepareToPaint: reasonablePaintingExtent)('parts bin' initializeToStandAlone isPartsBin residesInPartsBin)('pen' addImageToPenTrailsFor: arrowheadsOnAllPens arrowsForAllPens clearTurtleTrails createOrResizeTrailsForm dotsForAllPens drawPenTrailFor:from:to: liftAllPens linesAndArrowsForAllPens linesForAllPens lowerAllPens noArrowheadsOnAllPens noteNewLocation:forPlayer: notePenDown:forPlayer:at: trailMorph trailStyleForAllPens: updateTrailsForm)('printing' printOn:)('project' project releaseSqueakPages storeProjectsAsSegments)('project state' canvas firstHand hands handsDo: handsReverseDo: isStepping: isStepping:selector: listOfSteppingMorphs stepListSize stepListSummary steppingMorphsNotInWorld viewBox viewBox:)('scripting' abandonOldReferenceScheme adaptedToWorld: allTileScriptingElements currentVocabularyFor: elementCount getCharacters hideAllPlayers modernizeBJProject recreateScripts relaunchAllViewers scriptorForTextualScript:ofPlayer: showAllPlayers tellAllContents:)('stepping' cleanseStepList runLocalStepMethods runStepMethods startStepping: startStepping:at:selector:arguments:stepTime: stopStepping: stopStepping:selector:)('stepping and presenter' step)('structure' activeHand world)('submorphs-accessing' allMorphsDo: morphsInFrontOf:overlapping:do:)('submorphs-add/remove' addAllMorphs: addMorphFront:)('testing' stepTime)('thumbnail' icon)('undo' clearCommandHistory commandHistory)('update cycle' startBackgroundProcess)('user interface' modelWakeUp)('viewer' defaultNameStemForInstances)('viewing' imposeListViewSortingBy:retrieving: restoreBoundsOfSubmorphs saveBoundsOfSubmorphs scriptSelectorToTriggerFor: showingListView sortSubmorphsBy: viewByIcon viewByName viewBySize viewNonOverlapping viewingByIconString viewingByNameString viewingBySizeString viewingNonOverlappingString viewingNormally)('visual properties' canHaveFillStyles)('world menu' activateObjectsTool addUndoItemsTo: attemptCleanup attemptCleanupReporting: bringWindowsFullOnscreen browseAllScriptsTextually buildWorldMenu: closeUnchangedWindows collapseAll collapseNonWindows commandKeySelectors connectRemoteUser connectRemoteUserWithName:picture:andIPAddress: defaultDesktopCommandKeyTriplets delayedInvokeWorldMenu: deleteNonWindows detachableScriptingSpace disconnectAllRemoteUsers disconnectRemoteUser dispatchCommandKeyInWorld:event: drawingClass expandAll extractScreenRegion:andPutSketchInHand: findAChangeSorter: findAFileList: findAMessageNamesWindow: findAPreferencesPanel: findATranscript: findAWindowSatisfying:orMakeOneUsing: findDirtyBrowsers: findDirtyWindows: findWindow: galleryOfPlayers getWorldMenu: grabDrawingFromScreen: grabFloodFromScreen: grabLassoFromScreen: grabRubberBandFromScreen: initializeDesktopCommandKeySelectors invokeWorldMenu: keyboardNavigationHandler keyboardNavigationHandler: keystrokeInWorld: makeNewDrawing: makeNewDrawing:at: newDrawingFromMenu: openRecentSubmissionsBrowser: openScrapsBook: printScriptSummary putUpDesktopMenu: putUpNewMorphMenu putUpWorldMenu: putUpWorldMenuFromEscapeKey removeAllViewers reportLocalAddress respondToCommand:bySending:to: showStatusOfAllScripts toggleClassicNavigatorIfAppropriate undoOrRedoCommand yellowButtonClickOnDesktopWithEvent:)('world state' abandonAllHalos abandonVocabularyPreference activeHand: addHand: addMorph:centeredNear: addMorphsAndModel: allNonFlapRelatedSubmorphs assureNotPaintingElse: assureNotPaintingEvent: assuredCanvas beWorldForProject: checkCurrentHandForObjectToPaste checkCurrentHandForObjectToPaste2 chooseClickTarget colorAt:belowMorph: deEmphasizeViewMVC: deleteAllHalos displayWorld displayWorldAsTwoTone displayWorldNonIncrementally displayWorldSafely doOneCycle doOneCycleInBackground doOneSubCycle dragThroughOnDesktop: embeddedProjectDisplayMode endDrawing: exit flashRects:color: fullRepaintNeeded goBack haloMorphOrNil haloMorphs handleFatalDrawingError: initForProject: install installAsActiveSubprojectIn:at:titled: installAsActiveSubprojectIn:titled: installFlaps installVectorVocabulary jumpToProject nextPage open openWithTitle:cautionOnClose: optimumExtentFromAuthor paintArea paintAreaFor: paintBox paintBoxOrNil patchAt:without:andNothingAbove: pauseEventRecorder previousPage privateOuterDisplayWorld removeHand: repairEmbeddedWorlds repositionFlapsAfterScreenSizeChange restoreDisplay restoreFlapsDisplay restoreMainDockingBarDisplay restoreMorphicDisplay saveAsWorld sketchEditorOrNil sleep someHalo specialNameInModelFor: standardPlayerHit standardSystemController startSteppingSubmorphsOf: triggerClosingScripts triggerOpeningScripts)('private' privateFullMoveBy: privateMoveBy: privateRemoveMorph:)!AlignmentMorph subclass: #MenuMorph	instanceVariableNames: 'defaultTarget selectedItem stayUp popUpOwner activeSubMenu activatorDockingBar'	classVariableNames: 'CloseBoxImage PushPinImage'	poolDictionaries: ''	category: 'Morphic-Menus'!!MenuLineMorph reorganize!('change reporting' ownerChanged)('drawing' drawOn:)('initialization' initialize)('layout' minHeight minWidth)('submorphs-accessing' noteNewOwner:)('private' updateLayoutInDockingBar)!MenuItemMorph initialize!!MenuItemMorph reorganize!('accessing' adaptToWorld: allWordingsNotInSubMenus: arguments arguments: contentString contentString: contents: contents:withMarkers: contents:withMarkers:inverse: hasIcon hasIconOrMarker hasMarker hasSubMenu hasSubMenu: icon icon: isEnabled isEnabled: isStayUpItem itemWithWording: selector selector: subMenu subMenu: target target:)('change reporting' ownerChanged)('copying' veryDeepFixupWith: veryDeepInner:)('drawing' drawOn:)('events' activateOwnerMenu: activateSubmenu: deselectTimeOut: doButtonAction handleMouseUp: handlesMouseDown: handlesMouseOver: handlesMouseOverDragging: invokeWithEvent: mouseDown: mouseEnter: mouseEnterDragging: mouseLeave: mouseLeaveDragging: mouseUp:)('grabbing' aboutToBeGrabbedBy: duplicateMorph:)('initialization' defaultBounds deleteIfPopUp: initialize)('layout' minHeight minWidth)('layout-properties' hResizing vResizing)('meta actions' wantsHaloFromClick)('rounding' roundedCorners wantsRoundedCorners)('selecting' adjacentTo deselect: isSelected isSelected: select:)('submorphs-accessing' noteNewOwner:)('private' bottomArrow deselectItem iconForm leftArrow notObsolete offImage onImage rightArrow selectionFillStyle subMenuMarker upArrow updateLayoutInDockingBar)!HaloMorph removeSelector: #strokeGrow:with:!!Morph reorganize!('WiW support' addMorphInFrontOfLayer: addMorphInLayer: eToyRejectDropMorph:event: morphicLayerNumber morphicLayerNumberWithin: randomBoundsFor: shouldGetStepsFrom:)('accessing' actorState actorState: actorStateOrNil adoptPaneColor: balloonText balloonTextSelector balloonTextSelector: beFlap: beSticky beUnsticky borderColor borderColor: borderStyle borderStyle: borderStyleForSymbol: borderWidth borderWidth: borderWidthForRounding clearArea color color: colorForInsets couldHaveRoundedCorners doesBevels eventHandler eventHandler: forwardDirection hasTranslucentColor highlight highlightColor highlightColor: highlightOnlySubmorph: insetColor isFlap isLocked isShared isSticky lock lock: methodCommentAsBalloonHelp modelOrNil player player: presenter raisedColor regularColor regularColor: rememberedColor rememberedColor: resistsRemoval resistsRemoval: scaleFactor setBorderStyle: sqkPage sticky: toggleLocked toggleResistsRemoval toggleStickiness unHighlight unlock unlockContents url userString visibleClearArea wantsToBeCachedByHand wantsToBeTopmost)('accessing - extension' assureExtension extension hasExtension initializeExtension privateExtension: resetExtension)('accessing - properties' hasProperty: otherProperties removeProperty: setProperties: setProperty:toValue: valueOfProperty: valueOfProperty:ifAbsent: valueOfProperty:ifAbsentPut: valueOfProperty:ifPresentDo:)('button' doButtonAction fire firedMouseUpCode)('button properties' buttonProperties buttonProperties: ensuredButtonProperties hasButtonProperties)('caching' fullLoadCachedState fullReleaseCachedState loadCachedState releaseCachedState)('card in a stack' abstractAModel beAStackBackground becomeSharedBackgroundField containsCard: couldHoldSeparateDataForEachInstance currentDataInstance explainDesignations goToNextCardInStack goToPreviousCardInStack holdsSeparateDataForEachInstance insertAsStackBackground insertCard installAsCurrent: isStackBackground makeHoldSeparateDataForEachInstance newCard reassessBackgroundShape relaxGripOnVariableNames reshapeBackground setAsDefaultValueForNewCard showBackgroundObjects showDesignationsOfObjects showForegroundObjects stack stackDo: stopHoldingSeparateDataForEachInstance tabHitWithEvent: wrapWithAStack)('change reporting' addedMorph: addedOrRemovedSubmorph: colorChangedForSubmorph: invalidRect: invalidRect:from: ownerChanged privateInvalidateMorph: userSelectedColor:)('classification' demandsBoolean isAlignmentMorph isBalloonHelp isFlapOrTab isFlapTab isFlashMorph isFlexMorph isHandMorph isModalShell isPlayfieldLike isRenderer isStandardViewer isSyntaxMorph isTextMorph isWorldMorph isWorldOrHandMorph)('converting' asDraggableMorph)('copying' copy deepCopy duplicate duplicateMorphCollection: fullCopy updateReferencesUsing: usableSiblingInstance veryDeepCopyWith: veryDeepFixupWith: veryDeepInner:)('creation' asMorph)('debug and other' addDebuggingItemsTo:hand: addMouseActionIndicatorsWidth:color: addMouseUpAction addMouseUpActionWith: addViewingItemsTo: allStringsAfter: altSpecialCursor0 altSpecialCursor1 altSpecialCursor2 altSpecialCursor3 altSpecialCursor3: buildDebugMenu: defineTempCommand deleteAnyMouseActionIndicators handMeTilesToFire inspectArgumentsPlayerInMorphic: inspectOwnerChain installModelIn: mouseUpCodeOrNil ownerChain programmedMouseDown:for: programmedMouseEnter:for: programmedMouseLeave:for: programmedMouseUp:for: programmedMouseUp:for:with: removeMouseUpAction resumeAfterDrawError resumeAfterStepError tempCommand viewMorphDirectly)('dispatching' disableSubmorphFocusForHand:)('drawing' areasRemainingToFill: boundingBoxOfSubmorphs boundsWithinCorners changeClipSubmorphs clipLayoutCells clipLayoutCells: clipSubmorphs clipSubmorphs: clippingBounds doesOwnRotation drawDropHighlightOn: drawDropShadowOn: drawErrorOn: drawMouseDownHighlightOn: drawOn: drawRolloverBorderOn: drawSubmorphsOn: expandFullBoundsForDropShadow: expandFullBoundsForRolloverBorder: flashBounds fullDrawOn: hasClipSubmorphsString hide highlightForMouseDown highlightForMouseDown: highlightedForMouseDown imageForm imageForm:backgroundColor:forRectangle: imageForm:forRectangle: imageFormDepth: imageFormForRectangle: imageFormWithout:andStopThere: refreshWorld shadowForm show visible visible:)('drop shadows' addDropShadow addDropShadowMenuItems:hand: changeShadowColor hasDropShadow hasDropShadow: hasDropShadowString hasRolloverBorder hasRolloverBorder: removeDropShadow setShadowOffset: shadowColor shadowColor: shadowOffset shadowOffset: shadowPoint: toggleDropShadow)('dropping/grabbing' aboutToBeGrabbedBy: disableDragNDrop dragEnabled dragEnabled: dragNDropEnabled dragSelectionColor dropEnabled dropEnabled: dropHighlightColor dropSuccessColor enableDrag: enableDragNDrop enableDragNDrop: enableDrop: formerOwner formerOwner: formerPosition formerPosition: grabTransform highlightForDrop highlightForDrop: highlightedForDrop justDroppedInto:event: justGrabbedFrom: nameForUndoWording rejectDropMorphEvent: repelsMorph:event: resetHighlightForDrop separateDragAndDrop slideBackToFormerSituation: slideToTrash: startDrag:with: toggleDragNDrop transportedMorph undoGrabCommand vanishAfterSlidingTo:event: wantsDroppedMorph:event: wantsToBeDroppedInto: wantsToBeOpenedInWorld willingToBeDiscarded)('e-toy support' adaptToWorld: adoptVocabulary: allMorphsAndBookPagesInto: appearsToBeSameCostumeAs: asNumber: asWearableCostume asWearableCostumeOfExtent: automaticViewing changeAllBorderColorsFrom:to: configureForKids containingWindow copyCostumeStateFrom: currentPlayerDo: cursor cursor: decimalPlacesForGetter: defaultValueOrNil defaultVariableName definePath deletePath embedInWindow embeddedInMorphicWindowLabeled: enclosingEditor enforceTileColorPolicy fenceEnabled followPath getCharacters getNumericValue gridFormOrigin:grid:background:line: handUserASibling isAViewer isCandidateForAutomaticViewing isTileEditor listViewLineForFieldList: makeGraphPaper makeGraphPaperGrid:background:line: mustBeBackmost noteDecimalPlaces:forGetter: noteNegotiatedName:for: objectViewed pinkXButton referencePlayfield rotationStyle rotationStyle: setAsActionInButtonProperties: setNumericValue: setStandardTexture slotSpecifications succeededInRevealing: tanOButton textureParameters topEditor unlockOneSubpart updateCachedThumbnail wantsRecolorHandle wrappedInWindow: wrappedInWindowWithTitle:)('event handling' click click: cursorPoint doubleClick: doubleClickTimeout: dropFiles: firstClickTimedOut: handlerForYellowButtonDown: handlesKeyboard: handlesMouseDown: handlesMouseOver: handlesMouseOverDragging: handlesMouseStillDown: hasFocus keyDown: keyStroke: keyUp: keyboardFocusChange: mouseDown: mouseEnter: mouseEnterDragging: mouseLeave: mouseLeaveDragging: mouseMove: mouseStillDown: mouseStillDownThreshold mouseUp: moveOrResizeFromKeystroke: on:send:to: on:send:to:withValue: prefereredKeyboardBounds prefereredKeyboardPosition removeLink: restoreSuspendedEventHandler startDrag: suspendEventHandler tabAmongFields transformFrom: transformFromOutermostWorld transformFromWorld wantsDropFiles: wantsEveryMouseMove wantsKeyboardFocusFor: wouldAcceptKeyboardFocus wouldAcceptKeyboardFocusUponTab yellowButtonActivity:)('event handling-override' handlerForMouseDown:)('events-accessing' actionMap updateableActionMap)('events-alarms' addAlarm:after: addAlarm:at: addAlarm:with:after: addAlarm:with:at: addAlarm:with:with:after: addAlarm:with:with:at: addAlarm:withArguments:after: addAlarm:withArguments:at: alarmScheduler removeAlarm: removeAlarm:at:)('events-processing' containsPoint:event: defaultEventDispatcher handleDropFiles: handleDropMorph: handleEvent: handleFocusEvent: handleKeyDown: handleKeyUp: handleKeystroke: handleListenEvent: handleMouseDown: handleMouseEnter: handleMouseLeave: handleMouseMove: handleMouseOver: handleMouseStillDown: handleMouseUp: handleUnknownEvent: mouseDownPriority processEvent: processEvent:using: rejectDropEvent: rejectsEvent: transformedFrom:)('events-removing' releaseActionMap)('fileIn/out' attachToResource prepareToBeSaved reserveUrl: saveAsResource saveDocPane saveOnFile saveOnURL saveOnURL: saveOnURLbasic updateAllFromResources updateFromResource)('filter streaming' drawOnCanvas:)('geometry' align:with: bottom bottom: bottomCenter bottomLeft bottomLeft: bottomRight bottomRight: bounds bounds: bounds:from: bounds:in: boundsIn: boundsInWorld center center: extent extent: fullBoundsInWorld globalPointToLocal: gridPoint: griddedPoint: height height: innerBounds left left: leftCenter localPointToGlobal: minimumExtent minimumExtent: nextOwnerPage outerBounds point:from: point:in: pointFromWorld: pointInWorld: position position: positionInWorld positionSubmorphs previousOwnerPage right right: rightCenter screenLocation screenRectangle setConstrainedPosition:hangOut: shiftSubmorphsBy: shiftSubmorphsOtherThan:by: top top: topCenter topLeft topLeft: topRight topRight: transformedBy: width width: worldBounds worldBoundsForHalo)('geometry eToy' addTransparentSpacerOfSize: beTransparent cartesianBoundsTopLeft cartesianXY: color:sees: colorUnder degreesOfFlex forwardDirection: getIndexInOwner goHome heading heading: move:toPosition: referencePosition referencePosition: referencePositionInWorld referencePositionInWorld: rotationCenter rotationCenter: scale: scaleFactor: setDirectionFrom: setIndexInOwner: touchesColor: transparentSpacerOfSize: wrap x x: x:y: y y:)('geometry testing' containsPoint: fullContainsPoint: obtrudesBeyondContainer)('halos and balloon help' addHalo addHalo: addHalo:from: addHandlesTo:box: addMagicHaloFor: addOptionalHandlesTo:box: addSimpleHandlesTo:box: addWorldHandlesTo:box: balloonColor balloonColor: balloonFont balloonFont: balloonHelpAligner balloonHelpDelayTime balloonHelpTextForHandle: boundsForBalloon comeToFrontAndAddHalo defaultBalloonColor defaultBalloonFont defersHaloOnClickTo: deleteBalloon editBalloonHelpContent: editBalloonHelpText halo haloClass haloDelayTime hasHalo hasHalo: isLikelyRecipientForMouseOverHalos mouseDownOnHelpHandle: noHelpString okayToAddDismissHandle okayToAddGrabHandle okayToBrownDragEasily okayToExtractEasily okayToResizeEasily okayToRotateEasily removeHalo setBalloonText: setBalloonText:maxLineLength: setCenteredBalloonText: showBalloon: showBalloon:hand: transferHalo:from: wantsBalloon wantsDirectionHandles wantsDirectionHandles: wantsHalo wantsHaloFor: wantsHaloFromClick wantsHaloHandleWithSelector:inHalo: wantsScriptorHaloHandle)('initialization' basicInitialize defaultBounds defaultColor inATwoWayScrollPane initialize intoWorld: openCenteredInWorld openInHand openInMVC openInWindow openInWindowLabeled: openInWindowLabeled:inWorld: openInWorld openInWorld: outOfWorld: resourceJustLoaded standardPalette)('layout' acceptDroppingMorph:event: adjustLayoutBounds doLayoutIn: fullBounds layoutBounds layoutBounds: layoutChanged layoutInBounds: layoutProportionallyIn: minExtent minHeight minHeight: minWidth minWidth: privateFullBounds submorphBounds)('layout-menu' addCellLayoutMenuItems:hand: addLayoutMenuItems:hand: addTableLayoutMenuItems:hand: changeCellInset: changeClipLayoutCells changeDisableTableLayout changeLayoutInset: changeListDirection: changeMaxCellSize: changeMinCellSize: changeNoLayout changeProportionalLayout changeReverseCells changeRubberBandCells changeTableLayout hasClipLayoutCellsString hasDisableTableLayoutString hasNoLayoutString hasProportionalLayoutString hasReverseCellsString hasRubberBandCellsString hasTableLayoutString layoutMenuPropertyString:from:)('layout-properties' assureLayoutProperties assureTableProperties cellInset cellInset: cellPositioning cellPositioning: cellPositioningString: cellSpacing cellSpacing: cellSpacingString: disableTableLayout disableTableLayout: hResizing hResizing: hResizingString: layoutFrame layoutFrame: layoutInset layoutInset: layoutPolicy layoutPolicy: layoutProperties layoutProperties: listCentering listCentering: listCenteringString: listDirection listDirection: listDirectionString: listSpacing listSpacing: listSpacingString: maxCellSize maxCellSize: minCellSize minCellSize: reverseTableCells reverseTableCells: rubberBandCells rubberBandCells: spaceFillWeight spaceFillWeight: vResizeToFit: vResizing vResizing: vResizingString: wrapCentering wrapCentering: wrapCenteringString: wrapDirection wrapDirection: wrapDirectionString:)('macpal' currentVocabulary flash scriptPerformer)('menu' addBorderStyleMenuItems:hand: addGestureMenuItems:hand: addGraphModelYellowButtonItemsTo:event: addModelYellowButtonItemsTo:event: addMyYellowButtonMenuItemsToSubmorphMenus addNestedYellowButtonItemsTo:event: addTitleForHaloMenu: addYellowButtonMenuItemsTo:event: buildYellowButtonMenu: hasYellowButtonMenu outermostOwnerWithYellowButtonMenu wantsYellowButtonMenu wantsYellowButtonMenu:)('menus' absorbStateFromRenderer: addAddHandMenuItemsForHalo:hand: addCopyItemsTo: addCustomHaloMenuItems:hand: addCustomMenuItems:hand: addExportMenuItems:hand: addFillStyleMenuItems:hand: addHaloActionsTo: addMiscExtrasTo: addPaintingItemsTo:hand: addPlayerItemsTo: addStackItemsTo: addStandardHaloMenuItemsTo:hand: addToggleItemsToHaloMenu: adhereToEdge adhereToEdge: adjustedCenter adjustedCenter: allMenuWordings changeColor changeDirectionHandles changeDragAndDrop chooseNewGraphic chooseNewGraphicCoexisting: chooseNewGraphicFromHalo collapse defaultArrowheadSize dismissButton doMenuItem: exportAsBMP exportAsGIF exportAsJPEG exportAsPNG hasDirectionHandlesString hasDragAndDropEnabledString helpButton inspectInMorphic inspectInMorphic: lockUnlockMorph lockedString makeNascentScript maybeAddCollapseItemTo: menuItemAfter: menuItemBefore: model presentHelp printPSToFileNamed: putOnBackground putOnForeground resetForwardDirection resistsRemovalString setArrowheads setRotationCenter setRotationCenterFrom: setToAdhereToEdge: snapToEdgeIfAppropriate stickinessString transferStateToRenderer: uncollapseSketch)('messenger' affiliatedSelector)('meta-actions' addEmbeddingMenuItemsTo:hand: applyStatusToAllSiblings: beThisWorldsModel blueButtonDown: blueButtonUp: bringAllSiblingsToMe: buildHandleMenu: buildMetaMenu: changeColorTarget:selector:originalColor:hand: copyToPasteBuffer: dismissMorph: duplicateMorph: embedInto: grabMorph: handlerForBlueButtonDown: handlerForMetaMenu: inspectAt:event: invokeMetaMenu: invokeMetaMenuAt:event: makeMultipleSiblings: makeNewPlayerInstance: makeSiblings: makeSiblingsLookLikeMe: maybeDuplicateMorph maybeDuplicateMorph: openAButtonPropertySheet openAPropertySheet openATextPropertySheet potentialEmbeddingTargets resizeFromMenu resizeMorph: saveAsPrototype showActions showHiders subclassMorph)('miscellaneous' setExtentFromHalo:)('model access' models)('naming' choosePartName downshiftedNameOfObjectRepresented innocuousName name: nameForFindWindowFeature nameInModel nameOfObjectRepresented setNamePropertyTo: setNameTo: specialNameInModel tryToRenameTo: updateAllScriptingElements)('object fileIn' convertAugust1998:using: convertNovember2000DropShadow:using:)('objects from disk' convertToCurrentVersion:refStream: objectForDataStream: storeDataOn:)('other' removeAllButFirstSubmorph)('other events' menuButtonMouseEnter: menuButtonMouseLeave:)('parts bin' inPartsBin initializeToStandAlone isPartsBin isPartsDonor isPartsDonor: markAsPartsDonor partRepresented residesInPartsBin)('pen' choosePenColor: choosePenSize getPenColor getPenDown getPenSize liftPen lowerPen penColor: penUpWhile: trailMorph)('player' assureExternalName assuredCardPlayer assuredPlayer currentDataValue newPlayerInstance okayToDuplicate shouldRememberCostumes showPlayerMenu variableDocks)('player commands' beep: jumpTo: makeFenceSound playSoundNamed: set:)('player viewer' openViewerForArgument updateLiteralLabel)('printing' clipText colorString: constructorString fullPrintOn: initString morphReport morphReportFor: morphReportFor:on:indent: pagesHandledAutomatically printConstructorOn:indent: printConstructorOn:indent:nodeDict: printOn: printSpecs printSpecs: printStructureOn:indent: reportableSize structureString textToPaste)('rotate scale and flex' addFlexShell addFlexShellIfNecessary keepsTransform newTransformationMorph removeFlexShell rotationDegrees)('rounding' cornerStyle: roundedCorners roundedCornersString toggleCornerRounding wantsRoundedCorners)('scripting' arrowDeltaFor: asEmptyPermanentScriptor bringTileScriptingElementsUpToDate bringUpToDate defaultFloatPrecisionFor: instantiatedUserScriptsDo: isTileLike isTileScriptingElement jettisonScripts makeAllTilesColored makeAllTilesGreen restoreTypeColor scriptEditorFor: tearOffTile triggerScript: useUniformTileColor viewAfreshIn:showingScript:at:)('selected object' selectedObject)('stepping and presenter' arrangeToStartStepping arrangeToStartSteppingIn: isStepping isSteppingSelector: start startStepping startStepping:at:arguments:stepTime: startSteppingIn: startSteppingSelector: step stepAt: stop stopStepping stopSteppingSelector: stopSteppingSelfAndSubmorphs)('structure' activeHand allOwners allOwnersDo: firstOwnerSuchThat: hasOwner: isInDockingBar isInSystemWindow isInWorld morphPreceding: nearestOwnerThat: orOwnerSuchThat: outermostMorphThat: outermostWorldMorph owner ownerThatIsA: ownerThatIsA:orA: pasteUpMorph pasteUpMorphHandlingTabAmongFields primaryHand renderedMorph root rootAt: topPasteUp topRendererOrSelf withAllOwners withAllOwnersDo: world)('submorphs-accessing' allKnownNames allMorphs allMorphsDo: allNonSubmorphMorphs allSubmorphNamesDo: dockingBars findA: findDeepSubmorphThat:ifAbsent: findDeeplyA: findSubmorphBinary: firstSubmorph hasSubmorphWithProperty: hasSubmorphs indexOfMorphAbove: lastSubmorph mainDockingBars morphsAt: morphsAt:behind:unlocked: morphsAt:unlocked: morphsAt:unlocked:do: morphsInFrontOf:overlapping:do: morphsInFrontOverlapping: morphsInFrontOverlapping:do: noteNewOwner: rootMorphsAt: rootMorphsAtGlobal: shuffleSubmorphs submorphAfter submorphBefore submorphCount submorphNamed: submorphNamed:ifNone: submorphOfClass: submorphThat:ifNone: submorphWithProperty: submorphs submorphsBehind:do: submorphsDo: submorphsInFrontOf:do: submorphsReverseDo: submorphsSatisfying:)('submorphs-add/remove' abandon actWhen actWhen: addAllMorphs: addAllMorphs:after: addMorph: addMorph:after: addMorph:asElementNumber: addMorph:behind: addMorph:fullFrame: addMorph:inFrontOf: addMorphBack: addMorphCentered: addMorphFront: addMorphFront:fromWorldPosition: addMorphFrontFromWorldPosition: addMorphNearBack: comeToFront copyWithoutSubmorph: delete deleteDockingBars deleteSubmorphsWithProperty: dismissViaHalo goBehind privateDelete removeAllMorphs removeAllMorphsIn: removeMorph: removedMorph: replaceSubmorph:by: submorphIndexOf:)('system primitives' creationStamp)('testing' canDrawAtHigherResolution canDrawBorder: completeModificationHash isDockingBar isFlexed isFullOnScreen isMorph knownName modificationHash renameTo: shouldDropOnMouseUp stepTime wantsSteps)('text-anchor' addTextAnchorMenuItems:hand: changeDocumentAnchor changeInlineAnchor changeParagraphAnchor hasDocumentAnchorString hasInlineAnchorString hasParagraphAnchorString relativeTextAnchorPosition relativeTextAnchorPosition: textAnchorType textAnchorType:)('texture support' isValidWonderlandTexture isValidWonderlandTexture: wonderlandTexture wonderlandTexture:)('thumbnail' demandsThumbnailing icon iconOrThumbnail iconOrThumbnailOfSize: morphRepresented permitsThumbnailing readoutForField: representativeNoTallerThan:norWiderThan:thumbnailHeight: updateThumbnailUrl updateThumbnailUrlInBook:)('translation' isPlayer:ofReferencingTile: traverseRowTranslateSlotOld:of:to: traverseRowTranslateSlotOld:to:)('undo' commandHistory undoMove:redo:owner:bounds:predecessor:)('updating' changed)('user interface' defaultLabelForInspector initialExtent)('viewer' externalName)('visual properties' canHaveFillStyles cornerStyle defaultBitmapFillForm fillStyle fillStyle: fillWithRamp:oriented: useBitmapFill useDefaultFill useGradientFill useSolidFill)('private' moveWithPenDownBy: moveWithPenDownByRAA: privateAddAllMorphs:atIndex: privateAddMorph:atIndex: privateBounds: privateColor: privateDeleteWithAbsolutelyNoSideEffects privateFullBounds: privateFullMoveBy: privateMoveBy: privateOwner: privateRemove: privateRemoveMorph: privateRemoveMorphWithAbsolutelyNoSideEffects: privateSubmorphs privateSubmorphs:)('*sound-piano rolls' addMorphsTo:pianoRoll:eventTime:betweenTime:and: encounteredAtTime:inScorePlayer:atIndex:inEventTrack:secsPerTick: justDroppedIntoPianoRoll:event: pauseFrom: resetFrom: resumeFrom: triggerActionFromPianoRoll)('*morphic-Postscript Canvases' asEPS asPostscript asPostscriptPrintJob clipPostscript drawPostscriptOn: fullDrawPostscriptOn: printPSToFile)('*geniestubs-stubs' allowsGestureStart: isGestureStart: mouseStillDownStepRate redButtonGestureDictionaryOrName: yellowButtonGestureDictionaryOrName:)('*flexiblevocabularies-scripting' categoriesForViewer selectorsForViewer selectorsForViewerIn: understandsBorderVocabulary)!MenuIcons class removeSelector: #appearanceIcon!MenuIcons class removeSelector: #backAndForthIcon!MenuIcons class removeSelector: #blankIcon!MenuIcons class removeSelector: #cancelIcon!MenuIcons class removeSelector: #copyIcon!MenuIcons class removeSelector: #cutIcon!MenuIcons class removeSelector: #deleteIcon!MenuIcons class removeSelector: #doItIcon!MenuIcons class removeSelector: #findIcon!MenuIcons initialize!MenuIcons class removeSelector: #inspectIcon!MenuIcons class removeSelector: #morphsIcon!MenuIcons class removeSelector: #newIcon!MenuIcons class removeSelector: #okIcon!MenuIcons class removeSelector: #pasteIcon!MenuIcons class removeSelector: #printIcon!MenuIcons class removeSelector: #quitIcon!MenuIcons class removeSelector: #redoIcon!MenuIcons class removeSelector: #saveAsIcon!MenuIcons class removeSelector: #saveIcon!MenuIcons class removeSelector: #startUp!MenuIcons class removeSelector: #undoIcon!!MenuIcons class reorganize!('class initialization' initialize initializeIcons initializeTranslations startUp:)('icons creation' base64ContentsOfFileNamed: createIconMethodsFromDirectory:)('import/export' exportAllIconsAsGif exportAllIconsAsPNG exportIcon:asGifNamed: exportIcon:asPNGNamed: importAllIconNamed: importAllIcons importIconNamed: methodEnd methodStart:)('menu decoration' decorateMenu: iconForMenuItem: itemsIcons)('private - icons' backIcon backIconContents blankIconOfWidth: configurationIcon configurationIconContents forwardIcon forwardIconContents fullScreenIcon fullScreenIconContents helpIcon helpIconContents homeIcon homeIconContents jumpIcon jumpIconContents loadProjectIcon loadProjectIconContents objectCatalogIcon objectCatalogIconContents objectsIcon objectsIconContents openIcon openIconContents paintIcon paintIconContents projectIcon projectIconContents publishIcon publishIconContents smallBackIcon smallBackIconContents smallCancelIcon smallCancelIconContents smallConfigurationIcon smallConfigurationIconContents smallCopyIcon smallCopyIconContents smallCutIcon smallCutIconContents smallDeleteIcon smallDeleteIconContents smallDoItIcon smallDoItIconContents smallExpertIcon smallExpertIconContents smallFindIcon smallFindIconContents smallForwardIcon smallForwardIconContents smallFullScreenIcon smallFullScreenIconContents smallHelpIcon smallHelpIconContents smallImportFileIcon smallImportFileIconContents smallInspectItIcon smallInspectItIconContents smallJumpIcon smallJumpIconContents smallLanguageIcon smallLanguageIconContents smallLoadProjectIcon smallLoadProjectIconContents smallNewIcon smallNewIconContents smallObjectCatalogIcon smallObjectCatalogIconContents smallObjectsIcon smallObjectsIconContents smallOkIcon smallOkIconContents smallOpenIcon smallOpenIconContents smallPaintIcon smallPaintIconContents smallPasteIcon smallPasteIconContents smallPrintIcon smallPrintIconContents smallProjectIcon smallProjectIconContents smallPublishIcon smallPublishIconContents smallQuitIcon smallQuitIconContents smallRedoIcon smallRedoIconContents smallSaveAsIcon smallSaveAsIconContents smallSaveIcon smallSaveIconContents smallSelectIcon smallSelectIconContents smallUndoIcon smallUndoIconContents smallUpdateIcon smallUpdateIconContents smallVolumeIcon smallVolumeIconContents smallWindowIcon smallWindowIconContents squeakIcon squeakIconContents volumeIcon volumeIconContents windowIcon windowIconContents)!!Object reorganize!('Breakpoint' break)('accessing' addInstanceVarNamed:withValue: at: at:modify: at:put: basicAt: basicAt:put: basicSize bindWithTemp: doIfNotNil: ifNotNilDo: in: presenter readFromString: size yourself)('associating' ->)('binding' bindingOf:)('casing' caseOf: caseOf:otherwise:)('class membership' class inheritsFromAnyIn: isKindOf: isKindOf:orOf: isMemberOf: respondsTo: xxxClass)('comparing' = closeTo: hash hashMappedBy: identityHashMappedBy: identityHashPrintString literalEqual: ~=)('converting' adaptToFloat:andSend: adaptToFraction:andSend: adaptToInteger:andSend: as: asActionSequence asActionSequenceTrappingErrors asDraggableMorph asOrderedCollection asString asStringOrText complexContents mustBeBoolean mustBeBooleanIn: printDirectlyToDisplay withoutListWrapper)('copying' clone copy copyAddedStateFrom: copyFrom: copySameFrom: copyTwoLevel deepCopy initialDeepCopierSize postCopy shallowCopy veryDeepCopy veryDeepCopySibling veryDeepCopyUsing: veryDeepCopyWith: veryDeepFixupWith: veryDeepInner:)('creation' asMorph asStringMorph asTextMorph openAsMorph)('dependents access' addDependent: breakDependents canDiscardEdits dependents evaluate:wheneverChangeIn: hasUnacceptedEdits myDependents myDependents: release removeDependent:)('deprecated' beep: beepPrimitive)('drag and drop' acceptDroppingMorph:event:inMorph: dragAnimationFor:transferMorph: dragPassengerFor:inMorph: dragTransferType dragTransferTypeForMorph: wantsDroppedMorph:event:inMorph:)('error handling' assert: caseError confirm: confirm:orCancel: deprecated: deprecated:block: deprecated:explanation: deprecatedExplanation: doesNotUnderstand: dpsTrace: dpsTrace:levels: dpsTrace:levels:withContext: error: externalCallFailed halt halt: handles: notify: notify:at: notifyWithLabel: primitiveFailed shouldBeImplemented shouldNotImplement subclassResponsibility tryToDefineVariableAccess:)('evaluating' value valueWithArguments:)('events-accessing' actionForEvent: actionForEvent:ifAbsent: actionMap actionSequenceForEvent: actionsDo: createActionMap hasActionForEvent: setActionSequence:forEvent: updateableActionMap)('events-registering' when:evaluate: when:send:to: when:send:to:with: when:send:to:withArguments:)('events-removing' releaseActionMap removeAction:forEvent: removeActionsForEvent: removeActionsSatisfying: removeActionsSatisfying:forEvent: removeActionsWithReceiver: removeActionsWithReceiver:forEvent:)('events-triggering' triggerEvent: triggerEvent:ifNotHandled: triggerEvent:with: triggerEvent:with:ifNotHandled: triggerEvent:withArguments: triggerEvent:withArguments:ifNotHandled:)('filter streaming' byteEncode: drawOnCanvas: elementSeparator encodePostscriptOn: flattenOnStream: fullDrawPostscriptOn: printOnStream: putOn: storeOnStream: writeOnFilterStream:)('finalization' actAsExecutor executor finalizationRegistry finalize retryWithGC:until: toFinalizeSend:to:with:)('flagging' isThisEverCalled isThisEverCalled: logEntry logExecution logExit)('graph model' addModelYellowButtonMenuItemsTo:forMorph:hand: hasModelYellowButtonMenuItems)('inspecting' basicInspect inspect inspectorClass)('locales' localeChanged)('macpal' codeStrippedOut: contentsChanged currentEvent currentHand currentVocabulary currentWorld flash ifKindOf:thenDo: instanceVariableValues isUniversalTiles objectRepresented playSoundNamed: refusesToAcceptCode scriptPerformer slotInfo)('message handling' perform: perform:orSendTo: perform:with: perform:with:with: perform:with:with:with: perform:withArguments: perform:withArguments:inSuperclass: withArgs:executeMethod:)('objects from disk' comeFullyUpOnReload: convertToCurrentVersion:refStream: indexIfCompact objectForDataStream: readDataFrom:size: saveOnFile storeDataOn:)('parts bin' descriptionForPartsBin)('printing' fullPrintString isLiteral longPrintOn: longPrintOn:limitedTo:indent: longPrintString nominallyUnsent: printOn: printString printStringLimitedTo: propertyList reportableSize storeOn: storeString stringForReadout stringRepresentation)('scripting' adaptedToWorld: contentsGetz: defaultFloatPrecisionFor: evaluateUnloggedForSelf: methodInterfacesForCategory:inVocabulary:limitClass: methodInterfacesForInstanceVariablesCategoryIn: methodInterfacesForScriptsCategoryIn: selfWrittenAsIll selfWrittenAsIm selfWrittenAsMe selfWrittenAsMy selfWrittenAsThis)('scripts-kernel' universalTilesForGetterOf: universalTilesForInterface:)('system primitives' asOop becomeForward: becomeForward:copyHash: className creationStamp instVarAt: instVarAt:put: instVarNamed: instVarNamed:put: oopString primitiveChangeClassTo: rootStubInImageSegment: someObject)('testing' basicType beViewed costumes haltIfNil haveFullProtocolBrowsed haveFullProtocolBrowsedShowingSelector: isBehavior isBlock isBlockClosure isCharacter isCollection isColor isColorForm isCompiledMethod isComplex isFloat isForm isFraction isHeap isInteger isInterval isMessageSend isMorph isMorphicEvent isMorphicModel isNumber isPoint isPseudoContext isStream isString isSymbol isSystemWindow isText isTransparent isVariableBinding isWebBrowser knownName name nameForViewer notNil openInstanceBrowserWithTiles renameTo: showDiffs stepAt:in: stepIn: stepTime stepTimeIn: vocabularyDemanded wantsDiffFeedback wantsSteps wantsStepsIn:)('translation support' inline: var:declareC:)('undo' capturedState commandHistory purgeAllCommands redoFromCapturedState: refineRedoTarget:selector:arguments:in: refineUndoTarget:selector:arguments:in: rememberCommand: rememberUndoableAction:named: undoFromCapturedState:)('updating' changed changed: changed:with: handledListVerification noteSelectionIndex:for: okToChange update: update:with: updateListsAndCodeIn: windowIsClosing)('user interface' addModelItemsToWindowMenu: addModelMenuItemsTo:forMorph:hand: asExplorerString beep defaultBackgroundColor defaultLabelForInspector eToyStreamedRepresentationNotifying: explore fullScreenSize hasContentsInExplorer inform: initialExtent inspectWithLabel: launchPartVia: launchPartVia:label: launchTileToRefer modelSleep modelWakeUp modelWakeUpIn: mouseUpBalk: newTileMorphRepresentative notYetImplemented windowActiveOnFirstClick windowReqNewLabel:)('viewer' assureUniClass belongsToUniClass browseOwnClassSubProtocol categoriesForViewer: categoriesForVocabulary:limitClass: chooseNewNameForReference defaultLimitClassForVocabulary: defaultNameStemForInstances elementTypeFor:vocabulary: externalName graphicForViewerTab hasUserDefinedSlots infoFor:inViewer: initialTypeForSlotNamed: isPlayerLike methodInterfacesInPresentationOrderFrom:forCategory: newScriptorAround: offerViewerMenuFor:event: offerViewerMenuForEvt:morph: renameScript: tilePhrasesForCategory:inViewer: tilePhrasesForMethodInterfaces:inViewer: tilePhrasesForSelectorList:inViewer: tileToRefer uniqueInstanceVariableNameLike:excluding: uniqueNameForReference uniqueNameForReferenceFrom: uniqueNameForReferenceOrNil updateThresholdForGraphicInViewerTab usableMethodInterfacesIn:)('world hacking' couldOpenInMorphic)('private' errorImproperStore errorNonIntegerIndex errorNotIndexable errorSubscriptBounds: primitiveError: species storeAt:inTempFrame:)('*sunit-preload' sunitAddDependent: sunitChanged: sunitRemoveDependent:)('*tools-browser' browse browseHierarchy)('*system-support' systemNavigation)!"Postscript:"| trash |(World submorphs	select:[:each | each isKindOf: TrashCanMorph])	do:[:each | each delete].trash := TrashCanMorph new.trash position: ActiveWorld bottomLeft - (0 @ (trash extent y + 26)).trash openInWorld.MenuIcons initializeTranslations.Preferences smallLand.Preferences enable: #cmdGesturesEnabled.Preferences enable: #debugHaloHandle.Preferences disable: #noviceMode.Preferences enable: #showWorldMainDockingBar.Project current assureMainDockingBarPresenceMatchesPreference.Preferences setNotificationParametersForStandardPreferences.!