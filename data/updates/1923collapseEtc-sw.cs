'From Squeak2.8alpha of 13 January 2000 [latest update: #1919] on 8 March 2000 at 3:41:09 pm'!"Change Set:		collapseEtc-swDate:			8 March 2000Author:			Scott WallaceAllows any morph residing on the world to be 'collapsed', just like a window.  A collapsed morph is (for the moment) represented by a collapsed system window.  When you click on the expand control, the morph returns to its usual view.Allows morphs living directly on the 'world' to participate in the find-window logic -- this works whether or not the morph is collapsed.  The list of 'naked morphs' (i.e. morphs on the desktop that are not Windows) is shown beneath the lists of windows.When a naked morph is selected from the find-window menu, it will put up a halo -- an aid in finding morphs in a cluttered world."!SystemWindow subclass: #CollapsedMorph	instanceVariableNames: 'uncollapsedMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!Morph methodsFor: 'menus' stamp: 'sw 2/21/2000 15:16'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	self maybeAddCollapseItemTo: aMenu.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	self player ifNotNil:		[aMenu add: 'make another instance of me' action: #makeNewPlayerInstance].	aMenu addLine.	aMenu add: 'change costume...' action: #chooseNewCostumeForArgument.	"Add the fill style items"	self addFillStyleMenuItems: aMenu hand: aHandMorph.	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	self isLocked		ifFalse:			[aMenu add: 'lock' action: #lockMorph]		ifTrue:			[aMenu add: 'unlock' action: #unlockMorph].  "probably not possible -- wouldn't get halo"	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu addLine.	aMenu defaultTarget: self topRendererOrSelf.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	(owner == nil) ifFalse:		[aMenu add: 'send to back' action: #goBehind.		aMenu add: 'bring to front' action: #comeToFront].	aMenu defaultTarget: aHandMorph.! !!Morph methodsFor: 'menus' stamp: 'sw 2/21/2000 15:21'!collapse	CollapsedMorph new beReplacementFor: self! !!Morph methodsFor: 'menus' stamp: 'sw 2/21/2000 15:16'!maybeAddCollapseItemTo: aMenu	owner isWorldMorph ifTrue:		[aMenu add: #collapse target: self action: #collapse]! !!Morph methodsFor: 'halos and balloon help' stamp: 'sw 3/1/2000 11:39'!comeToFrontAndAddHalo	self comeToFront.	self addHalo! !!CollapsedMorph methodsFor: 'as yet unclassified' stamp: 'sw 2/21/2000 15:47'!beReplacementFor: aMorph	| itsWorld |	uncollapsedMorph _ aMorph.	self setLabel: aMorph externalName.	itsWorld _ aMorph world.	aMorph delete.	itsWorld addMorphFront: self.	self collapseOrExpand! !!CollapsedMorph methodsFor: 'as yet unclassified' stamp: 'sw 2/21/2000 15:48'!collapseOrExpand	isCollapsed		ifTrue: 			[self delete.			self currentWorld addMorphFront: uncollapsedMorph]		ifFalse:			[super collapseOrExpand]! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 2/21/2000 16:01'!collapseAll	"Collapse all windows"	(SystemWindow windowsIn: self world satisfying: [:w | w isCollapsed not])		reverseDo: [:w | w collapseOrExpand.  self world displayWorld].	self collapseNonWindows! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 2/21/2000 16:00'!collapseNonWindows	self world allNonFlapRelatedSubmorphs do:		[:m | m collapse]! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 3/1/2000 12:35'!findWindow	"Present a menu of window titles, and activate the one that gets chosen.	Collapsed windows appear below line, expand if chosen."	| menu expanded collapsed nakedMorphs |	menu _ MenuMorph new.	expanded _ SystemWindow windowsIn: self world satisfying: [:w | w isCollapsed not].	collapsed _ SystemWindow windowsIn: self world satisfying: [:w | w isCollapsed].	nakedMorphs _ self world submorphsSatisfying:		[:m | ((m isKindOf: SystemWindow) not and: [(m isKindOf: StickySketchMorph) not]) and:			[(m isKindOf: FlapTab) not]].	(expanded isEmpty & (collapsed isEmpty & nakedMorphs isEmpty)) ifTrue: [^ self beep].	(expanded asSortedCollection: [:w1 :w2 | w1 label caseInsensitiveLessOrEqual: w2 label]) do:		[:w | menu add: w label target: w action: #activateAndForceLabelToShow.			w model canDiscardEdits ifFalse: [menu lastItem color: Color red]].	(expanded isEmpty | (collapsed isEmpty & nakedMorphs isEmpty)) ifFalse: [menu addLine].	(collapsed asSortedCollection: [:w1 :w2 | w1 label caseInsensitiveLessOrEqual: w2 label]) do: 		[:w | menu add: w label target: w action: #collapseOrExpand.		w model canDiscardEdits ifFalse: [menu lastItem color: Color red]].	nakedMorphs isEmpty ifFalse: [menu addLine].	(nakedMorphs asSortedCollection: [:w1 :w2 | w1 externalName caseInsensitiveLessOrEqual: w2 externalName]) do:		[:w | menu add: w externalName target: w action: #comeToFrontAndAddHalo].	menu addTitle: 'find window'.		self invokeMenu: menu event: lastEvent! !