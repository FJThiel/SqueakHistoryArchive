'From Squeak2.8alpha of 4 February 2000 [latest update: #2052] on 30 April 2000 at 3:20:21 pm'!"Change Set:		017OpenInScamper-smaDate:			30 April 2000Author:			Stefan Matthias AustAdd html browsing support to the file list - plus some refactorings on my way to the solution."!!Collection methodsFor: 'enumerating' stamp: 'sma 4/30/2000 11:17'!allSatisfy: aBlock	"Evaluate aBlock with the elements of the receiver.	If aBlock returns false for any element return false.	Otherwise return true."	self do: [:each | (aBlock value: each) ifFalse: [^ false]].	^ true! !!Collection methodsFor: 'enumerating' stamp: 'sma 4/30/2000 11:17'!anySatisfy: aBlock	"Evaluate aBlock with the elements of the receiver.	If aBlock returns true for any element return true.	Otherwise return false."	self do: [:each | (aBlock value: each) ifTrue: [^ true]].	^ false! !!FileList methodsFor: 'file list menu' stamp: 'sma 4/30/2000 11:29'!itemsForFileEnding: suffix	| labels lines selectors |	labels _ OrderedCollection new.	lines _ OrderedCollection new.	selectors _ OrderedCollection new.	(suffix = 'bmp') | (suffix = 'gif') | (suffix = 'jpg') | (suffix ='form') | (suffix = '*') | (suffix = 'png') ifTrue:		[labels addAll: #('open image in a window' 'read image into ImageImports' 'open image as background').		selectors addAll: #(openImageInWindow importImage openAsBackground)].	(suffix = 'morph') | (suffix = 'morphs') | (suffix = 'sp') |(suffix = '*') ifTrue:		[labels add: 'load as morph'.		selectors add: #openMorphFromFile.		labels add: 'load as project'.		selectors add: #openProjectFromFile].	(suffix = 'extseg') ifTrue:		[labels add: 'load as project'.		selectors add: #openProjectFromFile].	(suffix = 'bo') | (suffix = '*') ifTrue:[		labels add: 'load as book'.		selectors add: #openBookFromFile].	(suffix = 'mid') | (suffix = '*') ifTrue:		[labels add: 'play midi file'.		selectors add: #playMidiFile].	(suffix = 'movie') | (suffix = '*') ifTrue:		[labels add: 'open as movie'.		selectors add: #openAsMovie].	(suffix = 'st') | (suffix = 'cs') | (suffix = '*') ifTrue:		[suffix = '*' ifTrue: [lines add: labels size].		labels addAll: #('fileIn' 'file into new change set''browse changes' 'browse code' 'remove line feeds' 'broadcast as update').		lines add: labels size - 1.		selectors addAll: #(fileInSelection fileIntoNewChangeSetbrowseChanges browseFile removeLinefeeds putUpdate)].	(suffix = 'swf') | (suffix = '*') ifTrue:[		labels add:'open as Flash'.		selectors add: #openAsFlash].	(suffix = 'ttf') | (suffix = '*') ifTrue:[		labels add: 'open true type font'.		selectors add: #openAsTTF].	(suffix = 'gz') | (suffix = '*') ifTrue:[		labels addAll: #('view decompressed' 'decompress to file').		selectors addAll: #(viewGZipContents saveGZipContents)].	(suffix = '3ds') | (suffix = '*') ifTrue:[		labels add: 'Open 3DS file'.		selectors add: #open3DSFile].	(suffix = 'tape') | (suffix = '*') ifTrue:		[labels add: 'open for playback'.		selectors add: #openTapeFromFile].	(suffix = 'wrl') | (suffix = '*') ifTrue:		[labels add: 'open in Wonderland'.		selectors add: #openVRMLFile].	(suffix = 'htm') | (suffix = 'html') ifTrue:		[labels add: 'open in browser'.		selectors add: #openInBrowser].	(suffix = '*') ifTrue:		[labels addAll: #('generate HTML').		lines add: labels size - 1.		selectors addAll: #(renderFile)].	^ Array with: labels with: lines with: selectors! !!FileList methodsFor: 'file list menu' stamp: 'sma 4/30/2000 11:32'!openInBrowser	Scamper openOnUrl: (directory url , fileName encodeForHTTP)! !!Scamper methodsFor: 'initialization' stamp: 'sma 4/30/2000 11:45'!initialize	documentQueue _ SharedQueue new.	recentDocuments _ OrderedCollection new.	currentUrlIndex _ 0.	currentUrl _ ''.	pageSource _ ''.	document _ HtmlParser parse: (ReadStream on: '').	self status: 'sittin'.	"self jumpToUrl: currentUrl"! !!Scamper class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 11:33'!new	^ super new initialize! !!Scamper class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 11:48'!open	"Scamper open"	^ self openOnUrl: StartUrl! !!Scamper class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 11:48'!openAsMorph	"Deprecated. Use open instead."	^ self open! !!Scamper class methodsFor: 'instance creation' stamp: 'sma 4/30/2000 11:49'!openOnUrl: aStringOrUrl	"Open Scamper browser on specified url.		Scamper openOnUrl: 'www.squeak.org'		Scamper openOnUrl: 'file://C%3A/test.htm'	"	^ self new		jumpToUrl: aStringOrUrl asUrl;		openAsMorph! !!Scamper class methodsFor: 'initialization' stamp: 'sma 4/30/2000 11:39'!StartUrl: aStringOrUrl	"Specify the default URL to start from."	StartUrl _ aStringOrUrl asUrl! !!Scamper class methodsFor: 'initialization' stamp: 'sma 4/30/2000 11:39'!initialize	self StartUrl: 'http://minnow.cc.gatech.edu/squeak.1'! !!TextURL methodsFor: 'as yet unclassified' stamp: 'sma 4/30/2000 11:50'!actOnClickFor: anObject	"Do what you can with this URL.  Later a web browser."	| response m |	"if it's a web browser, tell it to jump"	anObject isWebBrowser		ifTrue: [anObject jumpToUrl: url. ^ true]		ifFalse: [((anObject respondsTo: #model) and: [anObject model isWebBrowser])				ifTrue: [anObject model jumpToUrl: url. ^ true]].		"if it's a morph, see if it is contained in a web browser"		(anObject isKindOf: Morph) ifTrue: [			m _ anObject.			[ m ~= nil ] whileTrue: [				(m isWebBrowser) ifTrue: [					m  jumpToUrl: url.					^true ].				(m hasProperty: #webBrowserView) ifTrue: [					m model jumpToUrl: url.					^true ].				m _ m owner. ]		].	"no browser in sight.  ask if we should start a new browser"	(self confirm: 'open a browser to view this URL?') ifTrue: [		Scamper openOnUrl: url.		^ true ].	"couldn't display in a browser.  Offer to put up just the source"	response _ (PopUpMenu labels: 'View web page as source\Cancel' withCRs)		startUpWithCaption: 'Couldn''t find a web browser.  Viewpage as source?'.	response = 1 ifTrue: [HTTPSocket httpShowPage: url].	^ true! !!Url class methodsFor: 'parsing' stamp: 'sma 4/30/2000 11:18'!schemeNameForString: aString	"get the scheme name from a string, or return nil if it's not specified.  used in internal parsing routines--an outsider may as well use asUrl.  lowercases the return value."	"Url schemeNameForString: 'http://www.yahoo.com'"	"Url schemeNameForString: '/etc/passwed'"	"Url schemeNameForString: '/etc/testing:1.2.3'"	| idx schemeName |	idx _ aString indexOf: $: ifAbsent: [^ nil].	schemeName _ aString copyFrom: 1 to: idx - 1.	(schemeName allSatisfy: [:each | each isLetter]) ifFalse: [^ nil].	^ schemeName asLowercase! !!FileUrl class methodsFor: 'parsing' stamp: 'sma 4/30/2000 11:28'!absoluteFromText: text	"(how does this method fit with FileUrl|privateInitializeFromText:?)"	| schemeName pathString bare thePath |	bare _ text withBlanksTrimmed.	schemeName _ Url schemeNameForString: bare.	pathString _ schemeName		ifNil: [bare]		ifNotNil: [bare copyFrom: (schemeName size + 2) to: bare size].	thePath _ (pathString findTokens: '/') collect: [:token | token unescapePercents].	(pathString endsWith: '/') ifTrue: [thePath add: ''].	"Hey, this only works on Unix!!"	^ self new path: thePath isAbsolute: (pathString beginsWith: '/')! !Scamper initialize!