'From Squeak2.9alpha of 17 July 2000 [latest update: #2889] on 25 October 2000 at 2:48:52 pm'!"Change Set:		superSwikiOctDate:			6 October 2000Author:			Bob Arning- Preference added to make system windows around project views optional- ability provided to publish a project from the project view even if it has never been entered- started experiment at swikification of projects--- publishing a project now offers a dialog for setting various pieces of information about a project--- projects can be stored on a swiki-style server which will retain this additional information and allow searching for projects on same--- added ctrl-p to ParagraphEditor to create a text link to another project--- publishing a project which does not know its server will use the parent server--- new option added to the menu that pops up on the Find button on the ProjectNavigatorMorph 'search the SuperSwiki' which allows searching the swiki for projects matching certain criteria--- changed project details to show name at first with button to show all fields--- show project details only if name is bad--- remove question about whether to create a new project when the url fails - just do it--- enabled direct editing of project name in ProjectViewMorph (new ones only)"!AlignmentMorphBob1 subclass: #EToyGenericDialogMorph	instanceVariableNames: 'namedFields '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!EToyGenericDialogMorph subclass: #EToyProjectRenamerMorph	instanceVariableNames: 'theName theNameMorph actionBlock theProject '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!EToyProjectRenamerMorph subclass: #EToyProjectDetailsMorph	instanceVariableNames: 'projectDetails '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!EToyProjectDetailsMorph subclass: #EToyProjectQueryMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!Object subclass: #ProjectLoading	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support'!ServerDirectory subclass: #SuperSwikiServer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Network-Kernel'!RWBinaryOrTextStream subclass: #SwikiPseudoFileStream	instanceVariableNames: 'directoryUrl localName directory '	classVariableNames: ''	poolDictionaries: ''	category: 'Network-Kernel'!TextURL subclass: #TextSqkProjectLink	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Text'!!ChangeSet methodsFor: 'testing' stamp: 'RAA 10/19/2000 13:17'!isEmpty	"Answer whether the receiver contains any elements."		changeRecords ifNil: [^true].	^ changeRecords isEmpty ! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'RAA 10/19/2000 13:17'!objectForDataStream: refStrm	"I am about to be written on an object file.  Write a path to me in the other system instead."	refStrm projectChangeSet == self ifTrue: [^ self].	"try to write reference for me".	^ DiskProxy 		global: #ChangeSorter		selector: #existingOrNewChangeSetNamed: 		args: (Array with: self name)"===	refStrm replace: self with: nil.	^ nil==="! !!ChangeSorter class methodsFor: 'as yet unclassified' stamp: 'RAA 10/19/2000 13:17'!existingOrNewChangeSetNamed: aName	| newSet |	^(self changeSetNamed: aName) ifNil: [		newSet _ ChangeSet new initialize name: aName.		AllChangeSets add: newSet.		newSet	]! !!FileDirectory methodsFor: 'squeaklets' stamp: 'RAA 10/17/2000 14:57'!directoryObject	^self! !!FileDirectory methodsFor: 'squeaklets' stamp: 'RAA 10/12/2000 17:18'!updateProjectInfoFor: aProject	"only swiki servers for now"! !!FileList methodsFor: 'file list menu' stamp: 'RAA 10/15/2000 18:02'!openProjectFromFile	"Reconstitute a Morph from the selected file, presumed to be represent	a Morph saved via the SmartRefStream mechanism, and open it in an	appropriate Morphic world."	fileName ifNil: [^self].	Project canWeLoadAProjectNow ifFalse: [^ self].	ProjectLoading 		openFromDirectory: directory 		andFileName: fileName! !!HTTPSocket class methodsFor: 'get the page' stamp: 'RAA 10/16/2000 09:59'!httpPostMultipartBOB: url args: argsDict accept: mimeType request: requestString	| serverName serverAddr s header length bare page list firstData aStream port specifiedServer type mimeBorder contentsData |	Socket initializeNetwork.	"parse url"	bare _ (url asLowercase beginsWith: 'http://') 		ifTrue: [url copyFrom: 8 to: url size]		ifFalse: [url].	serverName _ bare copyUpTo: $/.	specifiedServer _ serverName.	(serverName includes: $:) ifFalse: [ port _ self defaultPort ] ifTrue: [		port _ (serverName copyFrom: (serverName indexOf: $:) + 1 to: serverName size) asNumber.		serverName _ serverName copyUpTo: $:.	].	page _ bare copyFrom: (bare indexOf: $/) to: bare size.	page size = 0 ifTrue: [page _ '/'].	HTTPProxyServer ifNotNil: [ 		page _ 'http://', serverName, ':', port printString, page.		"put back together"		serverName _ HTTPProxyServer.		port _ HTTPProxyPort].	mimeBorder _ '---------SuperSwiki',Time millisecondClockValue printString,'-----'.	contentsData _ String streamContents: [ :strm |		strm nextPutAll: mimeBorder, CrLf.		argsDict associationsDo: [:assoc |			assoc value do: [ :value |				strm					nextPutAll: 'Content-disposition: form-data; name="', assoc key, '"';					nextPutAll: CrLf;					nextPutAll: CrLf;					nextPutAll: value;					nextPutAll: CrLf;					nextPutAll: CrLf;					nextPutAll: mimeBorder;					nextPutAll: CrLf.			]		].	].  	"make the request"		self retry: [serverAddr _ NetNameResolver addressForName: serverName timeout: 20.				serverAddr ~~ nil] 		asking: 'Trouble resolving server name.  Keep trying?'		ifGiveUp: [^ 'Could not resolve the server named: ', serverName].	s _ HTTPSocket new.	s connectTo: serverAddr port: port.	s waitForConnectionUntil: self standardDeadline.	s sendCommand: 'POST ', page, ' HTTP/1.1', CrLf, 		(mimeType ifNotNil: ['ACCEPT: ', mimeType, CrLf] ifNil: ['']),		'ACCEPT: text/html', CrLf,	"Always accept plain text"		HTTPBlabEmail,	"may be empty"		requestString,	"extra user request. Authorization"		'User-Agent: Squeak 2.9', CrLf,		'Content-type: multipart/form-data; boundary=', mimeBorder, CrLf,		'Content-length: ', contentsData size printString, CrLf,		'Host: ', specifiedServer, CrLf.  "blank line automatically added"	s sendCommand: contentsData.	list _ s getResponseUpTo: CrLf, CrLf.	"list = header, CrLf, CrLf, beginningOfData"	header _ list at: 1.	firstData _ list at: 3.	s header: header.	length _ s getHeader: 'content-length'.	length ifNotNil: [ length _ length asNumber ].	type _ s getHeader: 'content-type'.	aStream _ s getRestOfBuffer: firstData totalLength: length.	s responseCode = '401' ifTrue: [^ header, aStream contents].	s destroy.	"Always OK to destroy!!"	^ MIMEDocument contentType: type  content: aStream contents url: url! !!Morph methodsFor: 'initialization' stamp: 'RAA 10/18/2000 12:33'!openCenteredInWorld	self 		fullBounds;		position: Display extent - self extent // 2;		openInWorld.! !!Morph methodsFor: 'testing' stamp: 'RAA 10/20/2000 14:47'!completeModificationHash"World completeModificationHash"	| resultSize result here i |	resultSize _ 10.	result _ ByteArray new: resultSize.	self allMorphsDo: [ :each | 		here _ each modificationHash.		here withIndexDo: [ :ch :index |			i _ index \\ resultSize + 1.			result at: i put: ((result at: i) bitXor: ch asciiValue)		].	].	^result! !!Morph methodsFor: 'testing' stamp: 'RAA 10/20/2000 14:47'!modificationHash	^String 		streamContents: [ :strm |			self longPrintOn: strm		]		limitedTo: 25! !!EToyGenericDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 10:17'!genericTextFieldNamed: aString	| newField |	newField _ TextMorph new		beAllFont: self myFont;		extent: 300@20;		contentsWrapped: ''.	namedFields at: aString put: newField.	^newField! !!EToyGenericDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 10:20'!inAColumnForText: someMorphs	^(self inAColumn: someMorphs)		hResizing: #shrinkWrap; 		color: Color white; 		borderColor: Color black; 		borderWidth: 1! !!EToyGenericDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 10:15'!initialize	namedFields _ Dictionary new.	super initialize.	self rebuild.! !!EToyGenericDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 10:20'!lockedString: aString	^self inAColumn: {(StringMorph contents: aString font: self myFont) lock}.! !!EToyGenericDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 10:16'!myFont	^TextStyle default fontOfSize: 12! !!EToyProjectHistoryMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 18:04'!mouseUp: evt in: aMorph	| tuple project url |	(aMorph boundsInWorld containsPoint: evt cursorPoint) ifFalse: [^self].	tuple _ aMorph valueOfProperty: #projectParametersTuple ifAbsent: [^1 beep].	project _ tuple fourth first.	(project notNil and: [project world notNil]) ifTrue: [self closeMyFlapIfAny. ^project enter].	url _ tuple third.	url isEmptyOrNil ifTrue: [^1 beep].	self closeMyFlapIfAny.	ProjectLoading thumbnailFromUrl: url."---	newTuple _ {		aProject name.		aProject thumbnail.		aProject url.		WeakArray with: aProject.	}.---"! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 13:55'!doOK	self validateTheProjectName ifFalse: [^self].	self delete.	actionBlock value: (namedFields at: 'projectname') contents string.! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 12:02'!fieldForProjectName	| tm |	tm _ self genericTextFieldNamed: 'projectname'.	tm setBalloonText: 'Pick a name 24 characters or less and avoid the following characters: : < > | / \ ? * " .'.	^tm	! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:14'!initialize	super initialize.	vResizing _ hResizing _ #shrinkWrap.	self setColorsAndBorder.	self rebuild.! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 13:55'!project: aProject actionBlock: aBlock	theProject _ aProject.	actionBlock _ aBlock.	(namedFields at: 'projectname') contentsWrapped: theProject name.! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 12:36'!rebuild	self removeAllMorphs.	self addARow: {		self lockedString: 'Please name this project'.	}.	self addARow: {		self inAColumnForText: {self fieldForProjectName}	}.	self addARow: {		self okButton.		self cancelButton.	}.! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:14'!setColorsAndBorder	color _ Color paleYellow.	borderWidth _ 8.	borderColor _ color darker.	inset _ 4.	self useRoundedCorners.! !!EToyProjectRenamerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 13:55'!validateTheProjectName	| proposed |	proposed _ (namedFields at: 'projectname') contents string.	proposed size = 0 ifTrue: [		self inform: 'I do need a name for the project'.		^false	].	proposed size > 24 ifTrue: [		self inform: 'Please make the name 24 characters or less'.		^false	].	(Project isBadNameForStoring: proposed) ifTrue: [		self inform: 'Please remove any funny characters from the name'.		^false	].	proposed = theProject name ifTrue: [^true].	(ChangeSorter changeSetNamed: proposed) ifNotNil: [		Utilities inform: 'Sorry that name is already used'.		^false	].	^true! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 13:55'!copyOutDetails	| newDetails |	newDetails _ Dictionary new.	self fieldToDetailsMappings do: [ :each |		namedFields at: each first ifPresent: [ :field |			newDetails at: each second put: field contents string		].	].	namedFields at: 'projectname' ifPresent: [ :field |		newDetails at: 'projectname' put: field contents string	].	^newDetails! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/20/2000 09:45'!doExpand	self expandedFormat: true.	self copyOutDetails.	self rebuild.! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 12:43'!doOK	self validateTheProjectName ifFalse: [^false].	actionBlock value: self copyOutDetails.	self delete.! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/20/2000 09:43'!expandButton	^self		buttonNamed: 'More' 		action: #doExpand 		color: self buttonColor 		help: 'Show more info on this project.'! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/20/2000 09:40'!expandedFormat	^self valueOfProperty: #expandedFormat ifAbsent: [false]! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/20/2000 09:40'!expandedFormat: aBoolean	self setProperty: #expandedFormat toValue: aBoolean! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 13:33'!fieldToDetailsMappings	^#(		(#description 'projectdescription' 'Description:' 100) 		(#author 'projectauthor' 'Author:' 20) 		(#category 'projectcategory' 'Category:' 20)		(#subCategory 'projectsubcategory' 'Sub-category:' 20)		(#keywords 'projectkeywords' 'Key words:' 20)	)! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 13:55'!fillInDetails	theProject ifNotNil: [		namedFields at: 'projectname' ifPresent: [ :field |			field contentsWrapped: theProject name		].	].	projectDetails ifNotNil: [		self fieldToDetailsMappings do: [ :each |			namedFields at: each first ifPresent: [ :field |				projectDetails at: each second ifPresent: [ :data |					field contentsWrapped: data				].			].		].	].! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 12:45'!project: aProject actionBlock: aBlock	theProject _ aProject.	actionBlock _ aBlock.	projectDetails _ theProject world valueOfProperty: #ProjectDetails ifAbsent: [Dictionary new]! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/12/2000 11:08'!projectDetails: aDictionary	projectDetails _ aDictionary.! !!EToyProjectDetailsMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/20/2000 09:42'!rebuild	| bottomButtons |	self removeAllMorphs.	self addARow: {		self lockedString: 'Please describe this project'.	}.	self addARow: {		self lockedString: 'Name:'.		self inAColumnForText: {self fieldForProjectName}	}.	self expandedFormat ifTrue: [		self fieldToDetailsMappings do: [ :each |			self addARow: {				self lockedString: each third.				self inAColumnForText: {(self genericTextFieldNamed: each first) height: each fourth}			}.		].	].	bottomButtons _ self expandedFormat ifTrue: [		{			self okButton.			self cancelButton.		}	] ifFalse: [		{			self okButton.			self expandButton.			self cancelButton.		}	].	self addARow: bottomButtons.	self fillInDetails.! !!EToyProjectQueryMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:16'!doOK	actionBlock value: self copyOutDetails.	self delete.! !!EToyProjectQueryMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:17'!fillInDetails	"leave them blank for now"! !!EToyProjectQueryMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:18'!project: ignored actionBlock: aBlock	actionBlock _ aBlock.	projectDetails _ Dictionary new.! !!EToyProjectQueryMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:19'!rebuild	self removeAllMorphs.	self addARow: {		self lockedString: 'Enter things to search for'.	}.	self addARow: {		self lockedString: 'Name:'.		self inAColumnForText: {self fieldForProjectName}	}.	self fieldToDetailsMappings do: [ :each |		self addARow: {			self lockedString: each third.			self inAColumnForText: {(self genericTextFieldNamed: each first) height: each fourth}		}.	].	self addARow: {		self okButton.		self cancelButton.	}.	self fillInDetails.! !!EToyProjectQueryMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:15'!setColorsAndBorder	color _ Color r: 0.545 g: 0.47 b: 0.621.	borderWidth _ 8.	borderColor _ color darker.	inset _ 4.	self useRoundedCorners. ! !!EToyProjectRenamerMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:35'!validate: aProject andDo: aBlock	(self new)		project: aProject actionBlock: aBlock;		openCenteredInWorld! !!EToyProjectDetailsMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:34'!getFullInfoFor: aProject ifValid: aBlock	| me |	(me _ self basicNew)		project: aProject		actionBlock: [ :x | 			aProject world setProperty: #ProjectDetails toValue: x.			x at: 'projectname' ifPresent: [ :newName | 				newName = aProject name ifFalse: [aProject changeSet name: newName].			].			me delete.			aBlock value.		];		initialize;		openCenteredInWorld! !!EToyProjectDetailsMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:34'!test1: aProject"EToyProjectDetailsMorph test1: Project current"	(self basicNew)		project: aProject		actionBlock: [ :x | 			aProject world setProperty: #ProjectDetails toValue: x.			x at: 'projectname' ifPresent: [ :newName | 				newName = aProject name ifFalse: [aProject changeSet name: newName].			]		];		initialize;		openCenteredInWorld! !!EToyProjectQueryMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 10/18/2000 12:34'!test1: aProject"EToyProjectQueryMorph test1: nil"	| criteria clean |	(self basicNew)		project: aProject		actionBlock: [ :x | 			criteria _ OrderedCollection new.			x keysAndValuesDo: [ :k :v |				(clean _ v withBlanksTrimmed) isEmpty ifFalse: [					criteria add: k,': *',clean,'*'				].			].			SuperSwikiServer testOnlySuperSwiki queryProjectsAndShow: criteria		];		initialize;		openCenteredInWorld! !!HandMorph methodsFor: 'object fileIn' stamp: 'RAA 10/12/2000 13:25'!convertbosfceekmmmdccffuleatdccttggrtllmhssffacw0: varDict bosfcemkemkmmlltdccttrthsul0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'keyboardFocus' 'lastEvent' 'targetOffset' 'damageRecorder' 'cacheCanvas' 'cachedCanvasHasHoles' 'temporaryCursor' 'temporaryCursorOffset' 'remoteConnections' 'transmitBuffer' 'hasChanged' 'savedPatch' 'userInitials').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('mouseFocus' 'eventListeners' 'mouseListeners' 'keyboardListeners' 'mouseClickState' 'mouseOverHandler' 'lastMouseEvent' 'lastEventBuffer')  If a non-nil value is needed, please assign it."	"These are going away #('eventSubscribers' 'mouseDownMorph' 'mouseOverMorphs' 'mouseOverTimes' 'dragOverMorphs' 'clickClient' 'clickState' 'firstClickEvent' 'firstClickTime' 'eventTransform' 'argument' 'grid' 'gridOn' 'lastEventTransmitted' 'lastWorldExtent' 'menuTargetOffset' 'suppressDrawing' 'formerOwner' 'formerPosition' 'addedFlexAtGrab' 'currentCommand' 'worldUnderCursor').  Possibly store their info in another variable?"! !!HandMorph methodsFor: 'object fileIn' stamp: 'RAA 10/16/2000 09:01'!convertbosfcemkemkmmlltdccttrthsu0: varDict bosfcemkemkmmlltdccttrthsul0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'mouseFocus' 'keyboardFocus' 'eventListeners' 'mouseListeners' 'keyboardListeners' 'mouseClickState' 'mouseOverHandler' 'lastMouseEvent' 'lastEvent' 'targetOffset' 'damageRecorder' 'cacheCanvas' 'cachedCanvasHasHoles' 'temporaryCursor' 'temporaryCursorOffset' 'remoteConnections' 'transmitBuffer' 'hasChanged' 'savedPatch' 'userInitials').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('lastEventBuffer')  If a non-nil value is needed, please assign it."! !!MouseOverHandler methodsFor: 'object fileIn' stamp: 'RAA 10/16/2000 09:01'!convertmeoli0: varDict meol0: smartRefStrm	"These variables are automatically stored into the new instance #('mouseOverMorphs' 'enteredMorphs' 'overMorphs' 'leftMorphs').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."		"These are going away #('isDrag').  Possibly store their info in another variable?"! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'RAA 10/19/2000 16:23'!makeProjectLink: characterStream 	""	| attribute oldAttributes thisSel |		sensor keyboard.	oldAttributes _ paragraph text attributesAt: startBlock stringIndex forStyle: paragraph textStyle.	thisSel _ self selection.	attribute _ TextSqkProjectLink new. 	thisSel _ attribute analyze: self selection asString.	thisSel ifNil: [^ true].	beginTypeInBlock ~~ nil		ifTrue:  "only change emphasisHere while typing"			[self insertTypeAhead: characterStream.			emphasisHere _ Text addAttribute: attribute toArray: oldAttributes.			^ true].	self replaceSelectionWith: (thisSel asText addAttribute: attribute).	^ true! !!ParagraphEditor class methodsFor: 'keyboard shortcut tables' stamp: 'RAA 10/19/2000 16:10'!initializeShiftCmdKeyShortcuts	"Initialize the shift-command-key (or control-key) shortcut table."	"NOTE: if you don't know what your keyboard generates, use Sensor kbdTest"	"wod 11/3/1998: Fix setting of cmdMap for shifted keys to actually use the 	capitalized versions of the letters.	TPR 2/18/99: add the plain ascii values back in for those VMs that don't return the shifted values."	| cmdMap cmds |	"shift-command and control shortcuts"	cmdMap _ Array new: 256 withAll: #noop:.  "use temp in case of a crash"	cmdMap at: ( 1 + 1) put: #cursorHome:.			"home key"	cmdMap at: ( 4 + 1) put: #cursorEnd:.			"end key"	cmdMap at: ( 8 + 1) put: #forwardDelete:.		"ctrl-H or delete key"	cmdMap at: (11 + 1) put: #cursorPageUp:.			"page up key"	cmdMap at: (12 + 1) put: #cursorPageDown:.		"page down key"	cmdMap at: (13 + 1) put: #crWithIndent:.			"ctrl-Return"	cmdMap at: (27 + 1) put: #selectCurrentTypeIn:.	"escape key"	cmdMap at: (28 + 1) put: #cursorLeft:.			"left arrow key"	cmdMap at: (29 + 1) put: #cursorRight:.			"right arrow key"	cmdMap at: (30 + 1) put: #cursorUp:.				"up arrow key"	cmdMap at: (31 + 1) put: #cursorDown:.			"down arrow key"	cmdMap at: (32 + 1) put: #selectWord:.			"space bar key"	cmdMap at: (45 + 1) put: #changeEmphasis:.		"cmd-sh-minus"	cmdMap at: (61 + 1) put: #changeEmphasis:.		"cmd-sh-plus"	cmdMap at: (127 + 1) put: #forwardDelete:.		"del key"	"Note: Command key overrides shift key, so, for example, cmd-shift-9 produces $9 not $("	'9[,''' do: [ :char | cmdMap at: (char asciiValue + 1) put: #shiftEnclose: ].	"({< and double-quote"	"Note: Must use cmd-9 or ctrl-9 to get '()' since cmd-shift-9 is a Mac FKey command."	cmdMap at: (27 + 1) put: #shiftEnclose:.	"ctrl-["	"'""''(' do: [ :char | cmdMap at: (char asciiValue + 1) put: #enclose:]."	cmds _ #(		$a	argAdvance:		$b	browseItHere:		$c	compareToClipboard:		$d	duplicate:		$e	methodStringsContainingIt:		$f	displayIfFalse:		$i	exploreIt:		$j	doAgainMany:		$k	changeStyle:		$l	outdent:		$n	referencesToIt:		$p	makeProjectLink:		$r	indent:		$s	search:		$t	displayIfTrue:		$u	changeLfToCr:		$v	pasteInitials:		$w	methodNamesContainingIt:		$x	makeLowercase:		$y	makeUppercase:		$z	makeCapitalized:	).	1 to: cmds size by: 2 do: [ :i |		cmdMap at: ((cmds at: i) asciiValue + 1) put: (cmds at: i + 1).		"plain keys"		cmdMap at: ((cmds at: i) asciiValue - 32 + 1) put: (cmds at: i + 1).		"shifted keys"		cmdMap at: ((cmds at: i) asciiValue - 96 + 1) put: (cmds at: i + 1).		"ctrl keys"	].	ShiftCmdActions _ cmdMap! !!Project methodsFor: 'initialization' stamp: 'RAA 10/13/2000 18:21'!setServer	"Mark me as a new project.  See if a server is known, remember it."	self projectParameters at: #exportState put: #nacent.	urlList isEmptyOrNil ifTrue: [urlList _ parentProject urlList].! !!Project methodsFor: 'accessing' stamp: 'RAA 10/13/2000 18:02'!forgetExistingURL	urlList _ nil! !!Project methodsFor: 'accessing' stamp: 'RAA 10/13/2000 18:12'!storeNewPrimaryURL: aURLString	urlList isEmptyOrNil ifTrue: [urlList _ Array new: 1].	urlList at: 1 put: aURLString! !!Project methodsFor: 'menu messages' stamp: 'RAA 10/20/2000 09:48'!validateProjectNameIfOK: aBlock	self hasBadNameForStoring ifFalse: [^aBlock value].	EToyProjectDetailsMorph		getFullInfoFor: self 		ifValid: [			World displayWorldSafely.			aBlock value.		] fixTemps.! !!Project methodsFor: 'release' stamp: 'RAA 10/19/2000 13:18'!removeChangeSetIfPossible	| itsName |	changeSet ifNil: [^self].	changeSet isEmpty ifFalse: [^self].	(changeSet projectsBelongedTo copyWithout: self) isEmpty ifFalse: [^self].	itsName _ changeSet name.	ChangeSorter removeChangeSet: changeSet.	Transcript cr; show: 'project change set ', itsName, ' deleted.'! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/20/2000 09:52'!decideAboutCreatingBlank: otherProjectName	| resp |	"20 Oct - just do it"	true "version isNil" ifFalse: [	"if saved, then maybe don't create"		resp _ (PopUpMenu labels: 'Yes, make it up\No, skip it' withCRs) 			startUpWithCaption: (				'I cannot locate the project\',				otherProjectName,				'\Would you like me to create a new project\with that name?'			) withCRs.		resp = 1 ifFalse: [^ nil]	].	^Project openBlankProjectNamed: otherProjectName! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/19/2000 13:51'!ensureChangeSetNameUnique	| myName |	myName _ self name.	Project allProjects do: [:pp | 		pp == self ifFalse: [			(pp name = myName and: [pp projectChangeSet ~~ changeSet]) ifTrue: [				changeSet ifNil: [^ changeSet _ ChangeSet new].				^changeSet name: (ChangeSet uniqueNameLike: myName)			]		]	]! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/6/2000 16:28'!exportSegmentWithCatagories: catList classes: classList fileName: aFileName directory: aDirectory	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."| is str ans revertSeg roots holder |"world == World ifTrue: [^ false]."	"self inform: 'Can''t send the current world out'."world isMorph ifFalse: [	self projectParameters at: #isMVC put: true.	^ false].	"Only Morphic projects for now"world ifNil: [^ false].  world presenter ifNil: [^ false].Utilities emptyScrapsBook.World currentHand pasteBuffer: nil.	"don't ask"	"Display checkCurrentHandForObjectToPaste."Command initialize.world clearCommandHistory.world fullReleaseCachedState. world cleanseStepList.world localFlapTabs size = world flapTabs size ifFalse: [	self error: 'Still holding onto Global flaps'].world releaseSqueakPages.holder _ Project allProjects.	"force them in to outPointers, where DiskProxys are made""Just export me, not my previous version"revertSeg _ self projectParameters at: #revertToMe ifAbsent: [nil].self projectParameters removeKey: #revertToMe ifAbsent: [].roots _ OrderedCollection new.roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.roots add: world activeHand; addAll: classList; addAll: (classList collect: [:cls | cls class]).roots _ roots reject: [ :x | x isNil].	"early saves may not have active hand or thumbnail"catList do: [:sysCat | 	(SystemOrganization listAtCategoryNamed: sysCat asSymbol) do: [:symb |		roots add: (Smalltalk at: symb); add: (Smalltalk at: symb) class]].false ifTrue: [		is _ ImageSegment new copyFromRootsForExport: roots asArray]	"world, and all Players"	ifFalse: [is _ ImageSegment new copySmartRootsExport: roots asArray].is state = #tooBig ifTrue: [^ false].str _ ''."considered legal if we save a project that has never been entered""is segment size < 3000 ifTrue: [	str _ 'Segment is only ', is segment size printString, ' long.'].""(is outPointers detect: [:out | out isMorph] ifNone: [nil]) ifNotNil: [	str _ str, '\Morphs are pointed at from the outside.' withCRs]."(is outPointers includes: world) ifTrue: [	str _ str, '\Project''s own world is not in the segment.' withCRs].str isEmpty ifFalse: [	ans _ (PopUpMenu labels: 'Do not write fileWrite file anywayDebug') startUpWithCaption: str.	ans = 1 ifTrue: [		revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].		^ false].	ans = 3 ifTrue: [self halt: 'Segment not written']].is writeForExportWithSources: aFileName inDirectory: aDirectory.revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].holder.^ true! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/15/2000 18:07'!fromMyServerLoad: otherProjectName	| servers pair pr dirToUse |	"If a newer version of me is on the server, load it."	(pr _ Project named: otherProjectName) ifNotNil: ["it appeared"		^ pr enter	].	(servers _ self serverList) ifNil: [		lastDirectory ifNil: [			self inform: 'Current project does not know a server either.'.			^nil		].		dirToUse _ lastDirectory.	] ifNotNil: [		dirToUse _ servers first.	].	pair _ self class mostRecent: otherProjectName onServer: dirToUse.	pair first ifNil: [^self decideAboutCreatingBlank: otherProjectName].	"nothing to load"	^ProjectLoading		installRemoteNamed: pair first		from: dirToUse		named: otherProjectName		in: self! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/15/2000 18:07'!loadFromServer: newerAutomatically	"If a newer version of me is on the server, load it."	| servers pair resp |	self assureIntegerVersion.	self isCurrentProject ifTrue: ["exit, then do the command"		^ self armsLengthCommand: #loadFromServer withDescription: 'Loading'	].	servers _ self tryToFindAServerWithMe ifNil: [^ nil].	pair _ self class mostRecent: self name onServer: servers first.	pair first ifNil: [^ self inform: 'can''t find file on server for ', self name].	self currentVersionNumber > pair second ifTrue: [		^ self inform: 'That server has an older version of the project.'].	version = (Project parseProjectFileName: pair first) second ifTrue: [		resp _ (PopUpMenu labels: 'Reload anyway\Cancel' withCRs) startUpWithCaption: 					'The only changes are the ones you made here.'.		resp ~= 1 ifTrue: [^ nil]	] ifFalse: [		newerAutomatically ifFalse: [			resp _ (PopUpMenu labels: 'Load it\Cancel' withCRs) startUpWithCaption: 						'A newer version exists on the server.'.			resp ~= 1 ifTrue: [^ nil]		].	].	"Find parent project, go there, zap old thumbnail"	ProjectLoading		installRemoteNamed: pair first		from: servers first		named: self name		in: parentProject! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/13/2000 18:03'!saveAs	"Forget where stored before, and store.  Will ask user where."	self forgetExistingURL.	self storeOnServer.! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/17/2000 19:14'!serverList	| swiki bigHACK |	"Take my list of server URLs and return a list of ServerDirectories to write on.  Each starts with ftp://"	self flag: #bob.		"BIG hack to try projects on a swiki"	bigHACK _ false.	bigHACK ifTrue: [		(swiki _ SuperSwikiServer currentSuperSwiki) ifNotNil: [			^{swiki}		].	].	urlList isEmptyOrNil ifTrue: [^ nil].	^ urlList collect: [:url | Project serverDirectoryFromURL: url]! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/12/2000 17:30'!storeOnServer	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	world setProperty: #optimumExtentFromAuthor toValue: world extent.	self validateProjectNameIfOK: [		self isCurrentProject ifTrue: ["exit, then do the command"			^ self 				armsLengthCommand: #storeOnServerAssumingNameValid				withDescription: 'Publishing'		].		self storeOnServerWithProgressInfo.	].! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/12/2000 17:30'!storeOnServerAssumingNameValid	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	world setProperty: #optimumExtentFromAuthor toValue: world extent.	self isCurrentProject ifTrue: ["exit, then do the command"		^ self 			armsLengthCommand: #storeOnServerAssumingNameValid			withDescription: 'Publishing'	].	self storeOnServerWithProgressInfo.! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/15/2000 12:35'!storeOnServerInnards	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	| servers resp newName primaryServerDirectory serverVersionPair localDirectory localVersionPair myVersionNumber warning maxNumber |	self assureIntegerVersion.	"Find out what version"	(servers _ self serverList) ifNil: [		(primaryServerDirectory _ self findAFolderToStoreProjectIn) ifNotNil: [			servers _ Array with: primaryServerDirectory.			self storeNewPrimaryURL: primaryServerDirectory realUrl, '/'.		].	] ifNotNil: [		primaryServerDirectory _ servers first.	].	localDirectory _ self squeakletDirectory.	serverVersionPair _ self class mostRecent: self name onServer: primaryServerDirectory.	localVersionPair _ self class mostRecent: self name onServer: localDirectory.	maxNumber _ myVersionNumber _ self currentVersionNumber.	ProgressNotification signal: '2:versionsDetected'.	warning _ ''.	myVersionNumber < serverVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) on the server'.		maxNumber _ maxNumber max: serverVersionPair second.	].	myVersionNumber < localVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) in the local directory'.		maxNumber _ maxNumber max: localVersionPair second.	].	warning isEmpty ifFalse: [		myVersionNumber = 0 ifTrue: [			warning _ warning,'\THIS PROJECT HAS NEVER BEEN SAVED'		].		warning _ 'WARNING', '\Project: ',self name,warning.		resp _ (PopUpMenu labels: 'Store anyway\Cancel' withCRs) startUpWithCaption: 			(warning, '\Please cancel, rename this project, and see what is there.') withCRs.			resp ~= 1 ifTrue: [^ nil]	].	version _ self bumpVersion: maxNumber.	"write locally - now zipped automatically"	newName _ self versionedFileName.	lastSavedAtSeconds _ Time totalSeconds.	self exportSegmentFileName: newName directory: localDirectory.			ProgressNotification signal: '4:localSaveComplete'.	"3 is deep in export logic"	primaryServerDirectory ifNotNil: [		self			writeFileNamed: newName 			fromDirectory: localDirectory 			toServer: primaryServerDirectory.	].	ProgressNotification signal: '9999 save complete'.	"Later, store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	"2 to: servers size do: [:aServer | aServer putFile: local named: newName]."! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/19/2000 14:10'!storeOnServerShowProgressOn: aMorphOrNil forgetURL: forget	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	forget ifTrue: [		self forgetExistingURL.	] ifFalse: [		urlList isEmptyOrNil ifTrue: [urlList _ parentProject urlList copy].	].	world setProperty: #optimumExtentFromAuthor toValue: world extent.	self validateProjectNameIfOK: [		self isCurrentProject ifTrue: ["exit, then do the command"			^self				armsLengthCommand: #storeOnServerAssumingNameValid				withDescription: 'Publishing'		].		self storeOnServerWithProgressInfoOn: aMorphOrNil.	] fixTemps.! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/15/2000 12:34'!tryToFindAServerWithMe	| servers resp primaryServerDirectory |	[(servers _ self serverList) isNil] whileTrue: [		resp _ (PopUpMenu labels: 'Try to find a server\Cancel' withCRs) startUpWithCaption: 					'This project thinks it has never been on a server'.		resp ~= 1 ifTrue: [^ nil].		(primaryServerDirectory _ self findAFolderToLoadProjectFrom) ifNil: [^nil].		self storeNewPrimaryURL: primaryServerDirectory realUrl, '/'.	].	^servers! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/15/2000 12:38'!url	| firstURL |	"compose my url on the server"	urlList isEmptyOrNil ifTrue: [^''].	firstURL _ urlList first.	firstURL last == $/ ifFalse: [firstURL _ firstURL, '/'].	^ firstURL, self versionedFileName! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/15/2000 12:36'!urlForLoading	| aDir |	"compose a url that will load me in someone's browser"	aDir _ (self serverList ifNil: [^nil]) first.	aDir loaderUrl isEmptyOrNil ifTrue: [^nil].	^		aDir loaderUrl,		'?',		self versionedFileName encodeForHTTP! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/15/2000 19:10'!versionFrom: aServerFile	"Store the version of the file I actually came from.  My stored version was recorded before I knew the latest version number on the server!!"	| theName serverUrl |	self flag: #bob.		"this may become unnecessary once we get the version before writing"	self flag: #bob.		"need to recognize swiki servers"	serverUrl _ aServerFile directoryUrl.	theName _ aServerFile localName.	version _ (Project parseProjectFileName: theName) second.	(serverUrl beginsWith: 'ftp:') ifTrue: ["update our server location"		self storeNewPrimaryURL: serverUrl	].! !!Project methodsFor: 'file in/out' stamp: 'RAA 10/19/2000 14:14'!writeFileNamed: localFileName fromDirectory: localDirectory toServer: primaryServerDirectory	| local resp gifFileName f |	local _ localDirectory oldFileNamed: localFileName.	resp _ primaryServerDirectory putFile: local named: localFileName retry: false.	local close.	resp == true ifFalse: [		self inform: 'the primary server of this project seems to be down (',							resp printString,')'. 		^ self	].	gifFileName _ self name,'.gif'.	localDirectory deleteFileNamed: gifFileName ifAbsent: [].	local _ localDirectory fileNamed: gifFileName.	thumbnail ifNil: [		(thumbnail _ Form extent: 100@80) fillColor: Color orange	] ifNotNil: [		thumbnail unhibernate.	].	f _ thumbnail colorReduced.  "minimize depth"	f depth > 8 ifTrue: [		f _ thumbnail asFormOfDepth: 8	].	GIFReadWriter putForm: f onStream: local.	local close.	local _ localDirectory oldFileNamed: gifFileName.	resp _ primaryServerDirectory putFile: local named: gifFileName retry: false.	local close.	primaryServerDirectory updateProjectInfoFor: self.	primaryServerDirectory sleep.	"if ftp, close the connection"! !!Project methodsFor: 'object fileIn' stamp: 'RAA 10/12/2000 17:19'!convertdwctppdaevtngpiivuel0: varDict dwctppdvtngpiivuell0: smartRefStrm	"These variables are automatically stored into the new instance #('dependents' 'world' 'changeSet' 'transcript' 'parentProject' 'previousProject' 'displayDepth' 'viewSize' 'thumbnail' 'nextProject' 'guards' 'projectParameters' 'isolatedHead' 'inForce' 'version' 'urlList' 'environment' 'lastDirectory').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('lastSavedAtSeconds')  If a non-nil value is needed, please assign it."	"These are going away #('activeProcess' 'exitFlag').  Possibly store their info in another variable?"! !!Project methodsFor: 'displaying' stamp: 'RAA 10/6/2000 15:57'!createViewIfAppropriate	ProjectViewOpenNotification signal ifTrue: [		Preferences projectViewsInWindows ifTrue: [			(ProjectViewMorph newProjectViewInAWindowFor: self) openInWorld		] ifFalse: [			(ProjectViewMorph on: self) openInWorld		"but where??"		].	].! !!Project class methodsFor: 'instance creation' stamp: 'RAA 10/6/2000 15:56'!newMorphicOn: aPasteUpOrNil	| newProject |	newProject _ self basicNew initMorphic.	aPasteUpOrNil ifNotNil: [newProject installPasteUpAsWorld: aPasteUpOrNil].	newProject createViewIfAppropriate.	^newProject! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 10/17/2000 14:57'!fromUrl: urlString	| serverFile pair projName proj num triple serverDir |	"Load the project, and make a thumbnail to it in the current project.  Replace the old one if necessary.Project fromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/Squeak_Easy.pr.gz'."	Project canWeLoadAProjectNow ifFalse: [^ self].	serverFile _ Project serverFileFromURL: urlString.	serverDir _ serverFile directoryObject.	triple _ Project parseProjectFileName: serverFile fileName unescapePercents.	projName _ triple first.	(proj _ Project named: projName) ifNotNil: ["it appeared" ^ ProjectEntryNotification signal: proj].	serverDir isTypeHTTP		ifTrue: [num _ triple second.			pair _ Array with: serverFile fileName with: num]		ifFalse: [pair _ self mostRecent: serverFile localName onServer: serverDir].	"Pair first is name exactly as it is on the server"	pair first ifNil: [^self openBlankProjectNamed: projName].	ProjectLoading		installRemoteNamed: pair first		from: serverDir		named: projName		in: CurrentProject.! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 10/6/2000 13:55'!openBlankProjectNamed: projName	| proj projViewer |	proj _ Project newMorphicOn: nil.	proj changeSet name: projName.	proj world addMorph: (		TextMorph new 			beAllFont: ((TextStyle default fontOfSize: 26) emphasized: 1);			color: Color red;			contents: 'Welcome to a new project - ',projName	).	CurrentProjectRefactoring currentBeParentTo: proj.	projViewer _ (CurrentProject findProjectView: projName) ifNil: [^proj].	(projViewer owner isKindOf: SystemWindow) ifTrue: [			projViewer owner model: proj].	^ projViewer project: proj! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 10/17/2000 19:11'!serverDirectoryFromURL: aURLString	| dir |	self flag: #bob.		"need to include swikis in this - hacked for now"	(aURLString findString: '/SuperSwikiProj/') > 0 ifTrue: [		dir _ SuperSwikiServer new fullPath: (aURLString copyUpToLast: $/).		^dir	].	^ServerDirectory new fullPath: aURLString! !!Project class methodsFor: 'squeaklet on server' stamp: 'RAA 10/17/2000 19:11'!serverFileFromURL: aURLString	| dir |	self flag: #bob.		"need to include swikis in this - hacked for now"	(aURLString findString: '/SuperSwikiProj/') > 0 ifTrue: [		dir _ SuperSwikiServer new fullPath: (aURLString copyUpToLast: $/).		^dir readOnlyFileNamed: (aURLString findTokens: '/') last	].	^ServerFile new fullPath: aURLString! !!ProjectLoading class methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 18:39'!installRemoteNamed: remoteFileName from: aServer named: otherProjectName in: currentProject	"Find the current ProjectViewMorph, fetch the project, install in ProjectViewMorph without changing size, and jump into new project."	ProgressNotification signal: '1:foundMostRecent'.	^self 		openFromFile: (aServer oldFileNamed: remoteFileName) 		fromDirectory: aServer 		withProjectView: (currentProject findProjectView: otherProjectName).! !!ProjectLoading class methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 18:56'!openFromDirectory: aDirectory andFileName: aFileName	ComplexProgressIndicator new 		targetMorph: nil;		historyCategory: 'project loading';		withProgressDo: [			ProjectLoading 				openFromFile: (aDirectory oldFileNamed: aFileName) 				fromDirectory: aDirectory				withProjectView: nil.		]! !!ProjectLoading class methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 19:06'!openFromFile: preStream fromDirectory: aDirectoryOrNil withProjectView: existingView	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world." 	| morphOrList proj |	ProgressNotification signal: '2:fileSizeDetermined ',preStream size printString.	morphOrList _ preStream asUnZippedStream.	preStream sleep.		"if ftp, let the connection close"	ProgressNotification  signal: '3:unzipped'.	morphOrList _ morphOrList fileInObjectAndCode.	ProgressNotification  signal: '4:filedIn'.	ProgressNotification  signal: '9999 about to enter project'.		"the hard part is over"	(morphOrList isKindOf: ImageSegment) ifTrue: [		proj _ morphOrList arrayOfRoots 			detect: [:mm | mm class == Project] 			ifNone: [^self inform: 'No project found in this file'].		proj versionFrom: preStream.		proj lastDirectory: aDirectoryOrNil.		CurrentProjectRefactoring currentBeParentTo: proj.		existingView ifNil: [			Smalltalk isMorphic ifTrue: [				proj createViewIfAppropriate.			] ifFalse: [				ProjectView openAndEnter: proj.				"Note: in MVC we get no further than the above"			].		] ifNotNil: [			(existingView project isKindOf: DiskProxy) ifFalse: [				existingView project changeSet name: ChangeSet defaultName			].			"proj changeSet name: otherProjectName."	"<<< why would we need this?"			(existingView owner isKindOf: SystemWindow) ifTrue: [				existingView owner model: proj			].			existingView project: proj.		].		^ ProjectEntryNotification signal: proj	].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList _ morphOrList contentsMorph	].	(morphOrList isKindOf: PasteUpMorph) ifFalse: [		^ self inform: 'This is not a PasteUpMorph or exported Project.'	].	(ProjectViewMorph newMorphicOn: morphOrList) enter! !!ProjectLoading class methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 18:56'!thumbnailFromUrl: urlString	| fileStream |	"Load the project, and make a thumbnail to it in the current project.Project thumbnailFromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/SqueakEasy.extSeg'."	Project canWeLoadAProjectNow ifFalse: [^ self].	ComplexProgressIndicator new 		targetMorph: nil;		historyCategory: 'project loading';		withProgressDo: [			fileStream _ (Project serverFileFromURL: urlString) asStream.			ProjectLoading				openFromFile: fileStream				fromDirectory: nil				withProjectView: nil.		]! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 10/18/2000 12:30'!doFindButtonMenuEvent: evt	| menu selection |	menu _ CustomMenu new.	menu 		add: 'find a project' action: [self findAProject];		add: 'find any file' action: [self findAnything];		add: 'search the SuperSwiki' action: [self findSomethingOnSuperSwiki].	selection _ menu build startUpCenteredWithCaption: 'Find options'.	selection ifNil: [^self].	selection value.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 10/18/2000 12:29'!findSomethingOnSuperSwiki	EToyProjectQueryMorph test1: nil! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 10/6/2000 13:55'!newProject	Project newMorphicOn: nil! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 10/19/2000 14:00'!publishDifferent	(self world ifNil: [^1 beep]) project storeOnServerShowProgressOn: self forgetURL: true.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 10/19/2000 14:00'!publishProject	(self world ifNil: [^1 beep]) project storeOnServerShowProgressOn: self forgetURL: false.! !!ProjectViewMorph methodsFor: 'drawing' stamp: 'RAA 10/20/2000 10:15'!drawOn: aCanvas	submorphs isEmpty ifTrue: [^self drawOnWithNameHack: aCanvas].	self ensureImageReady.	super drawOn: aCanvas.	! !!ProjectViewMorph methodsFor: 'drawing' stamp: 'RAA 10/20/2000 09:54'!drawOnWithNameHack: aCanvas	| projectName nameForm rectForName font |	self ensureImageReady.	super drawOn: aCanvas.	font _ self fontForName.	projectName _ self safeProjectName.	nameForm _ (StringMorph contents: projectName font: font) imageForm.	nameForm _ nameForm scaledToSize: (self extent - (4@2) min: nameForm extent).	rectForName _ self bottomLeft + 			(self width - nameForm width // 2 @ (nameForm height + 2) negated)				extent: nameForm extent.	rectForName topLeft eightNeighbors do: [ :pt |		aCanvas			stencil: nameForm 			at: pt			color: self colorAroundName.	].	aCanvas		stencil: nameForm 		at: rectForName topLeft 		color: Color black.	! !!ProjectViewMorph methodsFor: 'drawing' stamp: 'RAA 10/20/2000 14:23'!safeProjectName	| projectName |	projectName _ self valueOfProperty: #SafeProjectName ifAbsent: ['???'].	project ifNil: [^ projectName].	project isInMemory ifFalse: [^ projectName].	project class == DiskProxy ifTrue: [^ projectName].	self setProperty: #SafeProjectName toValue: project name.	^project name! !!ProjectViewMorph methodsFor: 'drawing' stamp: 'RAA 10/20/2000 10:33'!safeProjectName: aString	project ifNil: [^ self].	project isInMemory ifFalse: [^ self].	project class == DiskProxy ifTrue: [^ self].	aString = project name ifFalse: [project changeSet name: aString].	self setProperty: #SafeProjectName toValue: project name.	self updateNamePosition.	(owner isKindOf: SystemWindow) ifTrue: [owner setLabel: aString].! !!ProjectViewMorph methodsFor: 'drawing' stamp: 'RAA 10/20/2000 14:23'!updateNamePosition	| nameMorph shadowMorph nameForm rectForName newForm |	nameMorph _ self findA: UpdatingStringMorph.	nameMorph ifNil: [^self].	nameMorph position:		(self left + (self width - nameMorph width // 2)) @		(self bottom - nameMorph height - 2).	shadowMorph _ self findA: ImageMorph.	shadowMorph ifNil: [^self].	nameForm _ (StringMorph contents: nameMorph contents font: self fontForName) imageForm.	"nameForm _ nameForm scaledToSize: (self extent - (4@2) min: nameForm extent)."	rectForName _ nameMorph bounds expandBy: 1.	newForm _ Form extent: rectForName extent depth: Display depth.	newForm fillColor: Color transparent.	(1@1) eightNeighbors do: [ :pt |		newForm getCanvas			stencil: nameForm 			at: pt			color: self colorAroundName.	].	shadowMorph image: newForm; position: rectForName origin.! !!ProjectViewMorph methodsFor: 'events' stamp: 'RAA 10/20/2000 10:37'!extent: aPoint	"Set my image form to the given extent."	| newExtent scaleP scale |	((bounds extent = aPoint) and:	 [image depth = Display depth]) ifFalse: [		lastProjectThumbnail			ifNil: [newExtent _ aPoint]			ifNotNil: [				scaleP _ aPoint / lastProjectThumbnail extent.				scale _ scaleP "scaleP x asFloat max: scaleP y asFloat".				newExtent _ (lastProjectThumbnail extent * scale) rounded].		self image: (Form extent: newExtent depth: Display depth).		lastProjectThumbnail _ nil].	self updateNamePosition.! !!ProjectViewMorph methodsFor: 'events' stamp: 'RAA 10/20/2000 10:10'!initialize	super initialize.	currentBorderColor _ Color gray.	self addProjectNameMorph.! !!ProjectViewMorph methodsFor: 'events' stamp: 'RAA 10/24/2000 10:31'!mouseStillDown: evt	(self containsPoint: evt cursorPoint) ifFalse: [		self showBorderAs: Color blue.		mouseDownTime _ nil.		^self	].	self showBorderAs: Color red.	mouseDownTime ifNil: [		mouseDownTime _ Time millisecondClockValue.		^self	].	((Time millisecondClockValue - mouseDownTime) > 1100) ifFalse: [^self].					self showMenuForProjectView.					! !!ProjectViewMorph methodsFor: 'events' stamp: 'RAA 10/20/2000 14:22'!on: aProject	project _ aProject.	self addProjectNameMorph.	lastProjectThumbnail _ nil.	project thumbnail		ifNil: [self extent: 100@80]		"more like screen dimensions?"		ifNotNil: [self extent: project thumbnail extent].! !!ProjectViewMorph methodsFor: 'events' stamp: 'RAA 10/20/2000 14:21'!project: aProject	project _ aProject.	self addProjectNameMorph.! !!ProjectViewMorph methodsFor: 'events' stamp: 'RAA 10/19/2000 14:00'!showMenuForProjectView	| menu selection |	(menu _ CustomMenu new)		add: 'enter this project'		action: [^ self enter];				add: 'ENTER ACTIVE'		action: [self setProperty: #wasOpenedAsSubproject toValue: true.			^ self enterAsActiveSubproject];				add: 'PUBLISH (also saves a local copy)'		action: [^ project storeOnServerShowProgressOn: self forgetURL: false];				add: 'PUBLISH to a different server'		action: [project forgetExistingURL.			^ project storeOnServerShowProgressOn: self forgetURL: true];				add: 'see if server version is more recent'		action: [^ self checkForNewerVersionAndLoad].	selection _ menu build startUpCenteredWithCaption: 'Project Named' , '"' , project name , '"'.	selection		ifNil: [^ self].	selection value! !!ProjectViewMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/20/2000 14:21'!addProjectNameMorph	| m |	self removeAllMorphs.	m _ UpdatingStringMorph contents: self safeProjectName font: self fontForName.	m target: self; getSelector: #safeProjectName; putSelector: #safeProjectName:.	m useStringFormat; fitContents.	self addMorphBack: m.	self addMorphBack: ImageMorph new.	self updateNamePosition.! !!ProjectViewMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/20/2000 10:12'!wantsKeyboardFocusFor: aSubmorph	^true! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'RAA 10/6/2000 15:46'!newMorphicProject	"Return an instance of me on a new Morphic project (in a SystemWindow)."	self flag: #bob.		"No senders???"	self halt.	"^self newMorphicProjectOn: nil"! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'RAA 10/6/2000 15:45'!newMorphicProjectOn: aPasteUpOrNil	"Return an instance of me on a new Morphic project (in a SystemWindow)."	self flag: #bob.		"No senders???"	self halt.	"^self newProjectViewInAWindowFor: (Project newMorphicOn: aPasteUpOrNil)"! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'RAA 10/6/2000 14:02'!newProjectViewInAWindowFor: aProject	"Return an instance of me on a new Morphic project (in a SystemWindow)."	| window |	window _ (SystemWindow labelled: aProject name) model: aProject.	window		addMorph: (self on: aProject)		frame: (0@0 corner: 1.0@1.0).	^ window! !!RunArray class methodsFor: 'instance creation' stamp: 'RAA 10/19/2000 16:28'!scanFrom: strm	"Read the style section of a fileOut or sources file.  nextChunk has already been done.  We need to return a RunArray of TextAttributes of various kinds."	| rr vv aa this |	(strm peekFor: $( ) ifFalse: [^ nil].	rr _ OrderedCollection new.	[strm skipSeparators.	 strm peekFor: $)] whileFalse: 		[rr add: (Number readFrom: strm)].	vv _ OrderedCollection new.	"Value array"	aa _ OrderedCollection new.	"Attributes list"	[(this _ strm next) == nil] whileFalse: [		this == $, ifTrue: [vv add: aa asArray.  aa _ OrderedCollection new].		this == $f ifTrue: [aa add: 			(TextFontChange new fontNumber: (Number readFrom: strm))].		this == $b ifTrue: [aa add: (TextEmphasis bold)].		this == $i ifTrue: [aa add: (TextEmphasis italic)].		this == $u ifTrue: [aa add: (TextEmphasis underlined)].		this == $= ifTrue: [aa add: (TextEmphasis struckOut)].		this == $n ifTrue: [aa add: (TextEmphasis normal)].		this == $- ifTrue: [aa add: (TextKern kern: -1)].		this == $+ ifTrue: [aa add: (TextKern kern: 1)].		this == $c ifTrue: [aa add: (TextColor scanFrom: strm)]. "color"		this == $L ifTrue: [aa add: (TextLink scanFrom: strm)].	"L not look like 1"		this == $R ifTrue: [aa add: (TextURL scanFrom: strm)].				"R capitalized so it can follow a number"		this == $q ifTrue: [aa add: (TextSqkPageLink scanFrom: strm)].		this == $p ifTrue: [aa add: (TextSqkProjectLink scanFrom: strm)].		this == $d ifTrue: [aa add: (TextDoIt scanFrom: strm)].		"space, cr do nothing"		].	aa size > 0 ifTrue: [vv add: aa asArray].	^ self runs: rr asArray values: vv asArray"RunArray scanFrom: (ReadStream on: '(14 50 312)f1,f1b,f1LInteger +;i')"! !!ServerDirectory methodsFor: 'accessing' stamp: 'RAA 10/17/2000 14:57'!directoryObject	^self! !!ServerDirectory methodsFor: 'squeaklets' stamp: 'RAA 10/12/2000 17:17'!updateProjectInfoFor: aProject	"only swiki servers for now"! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/17/2000 16:10'!queryAllProjects"answer a collection of DirectoryEntry objects for each file on server""SuperSwikiServer testOnlySuperSwiki queryAllProjects"	^self sendToSwikiProjectServer: {		'action: listallprojects'.	}! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/17/2000 19:23'!queryProjectsAndShow	| result |"SuperSwikiServer testOnlySuperSwiki queryProjectsAndShow"	result _ self sendToSwikiProjectServer: {		'action: findproject'.		"'projectname: *proj*'."	}.	(result beginsWith: 'OK') ifFalse: [^self inform: result printString].	self showQueryAsPVM: (ReadStream on: result).! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/18/2000 12:23'!queryProjectsAndShow: thingsToSearchFor	| result |"SuperSwikiServer testOnlySuperSwiki queryProjectsAndShow"	result _ self sendToSwikiProjectServer: {		'action: findproject'.	}, thingsToSearchFor.	(result beginsWith: 'OK') ifFalse: [^self inform: result printString].	self showQueryAsPVM: (ReadStream on: result).! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/12/2000 17:01'!queryPythagoras"SuperSwikiServer testOnlySuperSwiki queryPythagoras"	^self sendToSwikiProjectServer: {		'action: findproject'.		'projectsubcategory: *geometry*'.		"'projectname: *pythagoras*'."	}! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/25/2000 12:14'!speedTest1"SuperSwikiServer testOnlySuperSwiki speedTest1"	| answer t totalTime |	totalTime _ [		answer _ (1 to: 10) collect: [ :x |			t _ [answer _ self sendToSwikiProjectServer: {				'action: readnamedfile'.				'projectname: xyz.002.pr'.			}] timeToRun.			{t. answer size}		].	] timeToRun.	^{totalTime. answer}! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/25/2000 12:38'!speedTest2"SuperSwikiServer testOnlySuperSwiki speedTest2""==observed results10 forks of 10 reads of 88K in 12.7 seconds100 * 88110 / 12.7 ===> 693779 bytes per second---10 forks of 10 reads of 88K in 10.7 seconds100 * 88110 / 10.7 ===> 823457 bytes per second---at priority 510 forks of 10 reads of 88K in 9.8 seconds100 * 88110 / 9.8 ===> 899081 bytes per second==="	| answer bigAnswer tRealBegin tRealEnd |	bigAnswer _ SharedQueue new.	tRealBegin _ tRealEnd _ Time millisecondClockValue.	10 timesRepeat: [		[			answer _ SuperSwikiServer testOnlySuperSwiki speedTest1.			tRealEnd _ Time millisecondClockValue.			bigAnswer nextPut: {				{tRealBegin. tRealEnd. tRealEnd - tRealBegin}.				answer			}.		] forkAt: 5	].	bigAnswer inspect.! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/7/2000 16:12'!test1	| localDirectory localFileName local resp |	localDirectory _ FileDirectory default.	localFileName _ 'superTest1.07Oct1611.cs'.	local _ localDirectory oldFileNamed: localFileName.	resp _ self putFile: local named: localFileName retry: false.	local close.	^resp! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/12/2000 17:02'!testPost3"SuperSwikiServer testOnlySuperSwiki testPost3"	self updateProject3.	self updateBioPythagoras.	self updateSunday1.! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/12/2000 16:59'!updateBioPythagoras	self sendToSwikiProjectServer: {		'action: updatepage'.		'projectname: Bio of Pythagoras'.		'projectdescription: The life and times of Pythagoras are explored'.		'projectcategory: Educational.'.		'projectsubcategory: Geometry.'.		'projectages: 10 and up.'.		'projectkeywords: triangles Pythagoras moon.'.		'projectlinks: More Triangles.Geometry Index'.		'projectimage: sunday1.gif'.	}! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/12/2000 17:00'!updateProject3	self sendToSwikiProjectServer: {		'action: updatepage'.		'projectname: My Project3'.		'projectdescription: This project explores uses of triangles. Calculating the distance to the moon is one of the exercises.'.		'projectcategory: Educational.'.		'projectsubcategory: Geometry.'.		'projectages: 10 and up.'.		'projectkeywords: triangles Pythagoras moon.'.		'projectlinks: More Triangles.Bio of Pythagoras.Geometry Index'.	}! !!SuperSwikiServer methodsFor: 'testing' stamp: 'RAA 10/12/2000 17:00'!updateSunday1	self sendToSwikiProjectServer: {		'action: updatepage'.		'projectname: sunday1'.		'projectdescription: blah blah blah.'.		'projectcategory: Educational.'.		'projectsubcategory: Geometry.'.		'projectages: 10 and up.'.		'projectkeywords: triangles Pythagoras moon.'.		'projectlinks: More Triangles.Bio of Pythagoras.Geometry Index'.	}! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/17/2000 12:54'!entries	| answer c first |	answer _ self sendToSwikiProjectServer: {		'action: listallprojects'.	}.	(answer beginsWith: 'OK') ifFalse: [^#()].	c _ OrderedCollection new.	first _ true.	answer linesDo: [ :x |		first ifFalse: [c add: (Compiler evaluate: x)].		first _ false.	].	^c! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/19/2000 16:35'!fileNames	^self entries collect: [ :each | each name]! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/17/2000 12:49'!getOnly: numberOfBytes from: aName	| answer |	answer _ self sendToSwikiProjectServer: {		'action: readnamedfile'.		'projectname: ',aName.		'bytestoread: ',numberOfBytes printString.	}.	(answer beginsWith: 'OK') ifFalse: [ ^nil].	^answer allButFirst: 3! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/17/2000 14:54'!oldFileNamed: aName	| answer |	answer _ self sendToSwikiProjectServer: {		'action: readnamedfile'.		'projectname: ',aName.	}.	(answer beginsWith: 'OK') ifFalse: [ ^nil].	^(SwikiPseudoFileStream with: (answer allButFirst: 3))		reset;		directory: self;		localName: aName;		yourself! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/17/2000 14:54'!oldFileOrNoneNamed: fullName	| answer aName |	self flag: #bob.		"fix this up for full names"	aName _ fullName.	answer _ self sendToSwikiProjectServer: {		'action: readnamedfile'.		'projectname: ',(self localNameFor: aName).	}.	(answer beginsWith: 'OK') ifFalse: [^nil].	^(SwikiPseudoFileStream with: (answer allButFirst: 3))		reset;		directory: self;		localName: aName;		yourself! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/17/2000 12:50'!putFile: fileStream named: fileNameOnServer	^(		self sendToSwikiProjectServer: {			'uploadproject: ',fileNameOnServer.			fileStream contentsOfEntireFile.		}	) beginsWith: 'OK'! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/13/2000 16:53'!readOnlyFileNamed: aName	^self oldFileNamed: aName! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/17/2000 12:46'!sendToSwikiProjectServer: anArray	| argsDict answer buildStream |	buildStream _ WriteStream on: String new.	anArray do: [ :each | 		buildStream 			nextPutAll: each size printString;			space;			nextPutAll: each	].	(argsDict _ Dictionary new)		at: 'swikicommands'		put: {buildStream contents}.	answer _ HTTPSocket 		httpPostMultipartBOB: self url		args: argsDict		accept: 'application/octet-stream' 		request: ''.	^(answer isKindOf: MIMEDocument) ifTrue: [answer content] ifFalse: [answer]! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/18/2000 12:38'!showQueryAsPVM: resultStream	| answer gif currentRow whatToShow projectName fileName firstURL |"SuperSwikiServer testOnlySuperSwiki queryProjectsAndShow"	resultStream reset; nextLine.	answer _ AlignmentMorphBob1 newColumn		useRoundedCorners;		borderWidth: 8;		borderColor: Color blue;		color: Color paleBlue.	currentRow _ nil.	[resultStream atEnd] whileFalse: [		projectName _ resultStream nextLine.		fileName _ resultStream nextLine.		gif _ self oldFileOrNoneNamed: projectName,'.gif'.		gif ifNotNil: [gif _ GIFReadWriter formFromStream: gif].		(currentRow isNil or: [currentRow fullBounds width > 600]) ifTrue: [			currentRow _ answer addARow: {}		].		gif ifNil: [			gif _ (StringMorph contents: 'No GIF for ',projectName) imageForm		].		firstURL _ self url.		firstURL last == $/ ifFalse: [firstURL _ firstURL, '/'].		whatToShow _ ProjectViewMorph new			image: (gif asFormOfDepth: Display depth);			lastProjectThumbnail: gif;			setProperty: #SafeProjectName toValue: projectName;			project: (DiskProxy 				global: #Project 				selector: #namedUrl: 				args: {firstURL,fileName}			).		currentRow addMorphBack: (			answer inAColumn: {(answer inARow: {whatToShow})					borderWidth: 2; borderColor: Color gray; hResizing: #shrinkWrap}		).	].	currentRow ifNil: [		answer addARow: {			(StringMorph contents: 'No projects found for your criteria') color: Color red		}	].	answer openCenteredInWorld.! !!SuperSwikiServer methodsFor: 'for real' stamp: 'RAA 10/13/2000 08:38'!updateProjectInfoFor: aProject	| data details projectLinks linkString |	data _ OrderedCollection new.	data add: 'action: updatepage'.	data add: 'projectimage: ',aProject name,'.gif'.	projectLinks _ Set new.	aProject world allMorphsDo: [ :each |		(each isKindOf: ProjectViewMorph) ifTrue: [			projectLinks add: each safeProjectName.		].	].	details _ aProject world valueOfProperty: #ProjectDetails ifAbsent: [Dictionary new].	projectLinks isEmpty ifTrue: [		details removeKey: 'projectlinks' ifAbsent: []	] ifFalse: [		linkString _ String streamContents: [ :strm |			projectLinks asSortedCollection do: [ :each |				strm nextPutAll: each			] separatedBy: [				strm nextPut: $.			].		].		details at: 'projectlinks' put: linkString	].	details keysAndValuesDo: [ :k :v |		data add: k , ': ' , v	].	^self sendToSwikiProjectServer: data.! !!SuperSwikiServer methodsFor: 'not implemented' stamp: 'RAA 10/13/2000 11:54'!asServerFileNamed: x	self halt.! !!SuperSwikiServer methodsFor: 'not implemented' stamp: 'RAA 10/13/2000 11:53'!fileNamed: fullName	self flag: #bob.		"finish this"	self halt.! !!SuperSwikiServer methodsFor: 'not implemented' stamp: 'RAA 10/13/2000 11:53'!wakeUp	"no action required here"! !!SuperSwikiServer class methodsFor: 'as yet unclassified' stamp: 'RAA 10/7/2000 17:47'!currentSuperSwiki	"make this return nil to disable SuperSwiki hack"	^self defaultSuperSwiki! !!SuperSwikiServer class methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 19:11'!defaultSuperSwiki	^SuperSwikiServer new 		type: #http;		server: self defaultSuperSwikiIPAddress;		directory: '/super/SuperSwikiProj'	! !!SuperSwikiServer class methodsFor: 'as yet unclassified' stamp: 'RAA 10/19/2000 11:05'!defaultSuperSwikiIPAddress	^'209.143.91.36'! !!SuperSwikiServer class methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 19:11'!testOnlySuperSwiki	^SuperSwikiServer new 		type: #http;		server: self defaultSuperSwikiIPAddress;		directory: '/super/SuperSwikiProj'	! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 14:53'!directory	^directory url! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 14:53'!directory: x	directory _ x! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 15:00'!directoryObject	^directory! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 15:00'!directoryUrl	^directory url! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/13/2000 11:50'!directoryUrl: x	directoryUrl _ x! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 13:59'!fileName	^localName! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/17/2000 14:01'!isTypeHTTP	^true! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/13/2000 11:50'!localName	^localName! !!SwikiPseudoFileStream methodsFor: 'as yet unclassified' stamp: 'RAA 10/13/2000 11:50'!localName: x	localName _ x! !!TextURL methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 18:04'!actOnClickFor: anObject	"Do what you can with this URL.  Later a web browser."	| response m |	(url beginsWith: 'sqPr://') ifTrue: [		ProjectLoading thumbnailFromUrl: (url copyFrom: 8 to: url size).		^self		"should not get here, but what the heck"	].	"if it's a web browser, tell it to jump"	anObject isWebBrowser		ifTrue: [anObject jumpToUrl: url. ^ true]		ifFalse: [((anObject respondsTo: #model) and: [anObject model isWebBrowser])				ifTrue: [anObject model jumpToUrl: url. ^ true]].		"if it's a morph, see if it is contained in a web browser"		(anObject isKindOf: Morph) ifTrue: [			m _ anObject.			[ m ~= nil ] whileTrue: [				(m isWebBrowser) ifTrue: [					m  jumpToUrl: url.					^true ].				(m hasProperty: #webBrowserView) ifTrue: [					m model jumpToUrl: url.					^true ].				m _ m owner. ]		].	"no browser in sight.  ask if we should start a new browser"	(self confirm: 'open a browser to view this URL?') ifTrue: [		Scamper openOnUrl: url.		^ true ].	"couldn't display in a browser.  Offer to put up just the source"	response _ (PopUpMenu labels: 'View web page as source\Cancel' withCRs)		startUpWithCaption: 'Couldn''t find a web browser.  Viewpage as source?'.	response = 1 ifTrue: [HTTPSocket httpShowPage: url].	^ true! !!TextSqkProjectLink methodsFor: 'as yet unclassified' stamp: 'RAA 10/19/2000 16:27'!actOnClickFor: textMorph	Project enterIfThereOrFind: url.	^ true! !!TextSqkProjectLink methodsFor: 'as yet unclassified' stamp: 'RAA 10/19/2000 16:24'!analyze: aString	^url _ aString! !!TextSqkProjectLink methodsFor: 'as yet unclassified' stamp: 'RAA 10/19/2000 16:29'!writeScanOn: strm	strm nextPut: $p; nextPutAll: url; nextPut: $;! !!TheWorldMenu methodsFor: 'as yet unclassified' stamp: 'RAA 10/15/2000 18:02'!loadProject	| stdFileMenuResult |	"Put up a Menu and let the user choose a '.project' file to load.  Create a thumbnail and jump into the project."	Project canWeLoadAProjectNow ifFalse: [^ self].	stdFileMenuResult _ ((StandardFileMenu new) pattern: '*.pr'; 		oldFileFrom: FileDirectory default ) 			startUpWithCaption: 'Select a File:'.	stdFileMenuResult ifNil: [^ nil].	ProjectLoading 		openFromDirectory: stdFileMenuResult directory 		andFileName: stdFileMenuResult name! !!TheWorldMenu methodsFor: 'as yet unclassified' stamp: 'RAA 10/6/2000 13:54'!openMorphicProject	Project newMorphicOn: nil! !!SuperSwikiServer reorganize!('testing' queryAllProjects queryProjectsAndShow queryProjectsAndShow: queryPythagoras speedTest1 speedTest2 test1 testPost3 updateBioPythagoras updateProject3 updateSunday1)('for real' entries fileNames getOnly:from: oldFileNamed: oldFileOrNoneNamed: putFile:named: readOnlyFileNamed: sendToSwikiProjectServer: showQueryAsPVM: updateProjectInfoFor:)('not implemented' asServerFileNamed: fileNamed: wakeUp)!ProjectViewMorph class removeSelector: #openFromDirectory:andFileName:!ProjectViewMorph class removeSelector: #openFromFile:!ProjectViewMorph class removeSelector: #openFromFile:fromDirectory:!ProjectViewMorph class removeSelector: #openFromStreamBlock:!Project class removeSelector: #thumbnailFromUrl:!Project removeSelector: #installRemoteFrom:named:!Project removeSelector: #installRemoteNamed:from:named:!Project removeSelector: #storeOnServerShowProgressOn:!Project removeSelector: #urlList:!EToyProjectRenamerMorph class removeSelector: #test!EToyProjectRenamerMorph removeSelector: #name:actionBlock:!EToyGenericDialogMorph subclass: #EToyProjectRenamerMorph	instanceVariableNames: 'actionBlock theProject '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Experimental'!"Postscript:"Preferences addPreference: #projectViewsInWindows category: #general default: trueballoonHelp: 'New Project view are created in a system window.'.ServerDirectory	addServer: SuperSwikiServer testOnlySuperSwiki	named: 'Bobs SuperSwiki'.ParagraphEditor initialize.		"added ctrl-p for project link"!