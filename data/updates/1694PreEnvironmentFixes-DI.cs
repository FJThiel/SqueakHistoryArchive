'From Squeak2.6 of 11 October 1999 [latest update: #1693] on 6 December 1999 at 1:49:27 pm'!"Change Set:		PreEnvironmentFixes-DIDate:			6 December 1999Author:			Dan IngallsTwo fixes and one default implementation needed for SqueakEnvironments1."!!ClassBuilder methodsFor: 'private' stamp: 'di 12/6/1999 12:31'!fixGlobalReferences	"Fix all the references to globals which are now outdated.	Care must be taken that we do not accidentally 'fix' dangerous stuff."	| oldClasses newClasses condition |	classMap == nil ifTrue:[^self].	(self retryWithGC: [condition _ classMap anySatisfy: [:any| any notNil and:[anyisObsolete]]. any_nil. condition]		until:[:obsRef| obsRef = false])		ifFalse:[^self]. "GC cleaned up the remaining refs"	"Collect the old and the new refs"	oldClasses _ OrderedCollection new.	newClasses _ OrderedCollection new.	classMap keysAndValuesDo:[:new :old|		old == nil ifFalse:[			newClasses add: new.			oldClasses add: old]].	oldClasses isEmpty ifTrue:[^self]. "GC cleaned up the rest"	"Now fix all the known dangerous pointers to old classes by creating	copies of those still needed. Dangerous pointers should come only	from obsolete subclasses (where the superclass must be preserved)."	self fixObsoleteReferencesTo: oldClasses.	"After this has been done fix the remaining references"	progress == nil ifFalse:[progress value: 'Fixing references toglobals'].	"Forward all old refs to the new ones"	(oldClasses asArray) elementsForwardIdentityTo: (newClasses asArray).	"Done"! !!InterpreterProxy class methodsFor: 'private' stamp: 'di 12/6/1999 12:40'!validateProxyImplementation: anInterpreter 	"InterpreterProxy validateProxyImplementation: Interpreter"	"InterpreterProxy validateProxyImplementation: DynamicInterpreter"	| proxyClass catList |	proxyClass _ InterpreterProxy.	catList _ proxyClass organization categories copy asOrderedCollection.	catList remove: 'initialize' ifAbsent:[].	catList remove: 'private' ifAbsent:[].	catList do:[:categ|		(proxyClass organization listAtCategoryNamed: categ) do:[:selector|			(anInterpreter canUnderstand: selector) 				ifFalse:[self notify: selector, ' is not implemented in ', anInterpreter name]]].! !!SystemDictionary methodsFor: 'dictionary access' stamp: 'di 12/6/1999 12:42'!associationAtOrAbove: varName ifAbsent: absentBlock 	"Compatibility with environment protocol."	^ self associationAt: varName ifAbsent: absentBlock! !!SystemDictionary methodsFor: 'dictionary access' stamp: 'di 12/6/1999 13:43'!atOrBelow: key ifAbsent: absentBlock	"Compatibility with environment protocol."	^ self at: key ifAbsent: absentBlock! !