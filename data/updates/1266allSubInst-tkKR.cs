'From Squeak 2.4c of May 10, 1999 on 24 June 1999 at 2:13:28 pm'!!AbstractSound class methodsFor: 'sound library' stamp: 'tk 6/24/1999 11:31'!soundNamed: soundName put: aSound	Sounds at: soundName put: aSound.	Smalltalk at: #ScorePlayerMorph ifPresent: [:playerClass |		playerClass allSubInstancesDo:			[:player | player updateInstrumentsFromLibrary]].! !!AbstractSound class methodsFor: 'sound library-file in/out' stamp: 'tk 6/24/1999 07:20'!fileInSoundLibraryNamed: fileName	"File in the sound library with the given file name, and add its contents to the current sound library."	| s newSounds |	s _ FileStream oldFileNamed: fileName.	newSounds _ s fileInObjectAndCode.	s close.	newSounds associationsDo:		[:assoc | self storeFiledInSound: assoc value named: assoc key].	ScorePlayerMorph allSubInstances do: [:p | p updateInstrumentsFromLibrary].	Smalltalk garbageCollect.! !!AbstractSound class methodsFor: 'sound library-file in/out' stamp: 'tk 6/24/1999 07:20'!updateScorePlayers	"Force all ScorePlayers to update their instrument list from the sound library. This may done after loading, unloading, or replacing a sound to make all ScorePlayers feel the change."	ScorePlayer allSubInstances do: [:p | p pause].	SoundPlayer shutDown.	ScorePlayerMorph allInstances do: [:p | p updateInstrumentsFromLibrary].! !!Celeste class methodsFor: 'instance creation' stamp: 'tk 6/24/1999 07:21'!buildViewsFor: model	"Answer a collection of window panes for the Celeste user interface."	| listViewClass textViewClass listFont views v |	Smalltalk isMorphic		ifTrue: [			listViewClass _ PluggableListMorphByItem.			textViewClass _ PluggableTextMorph]		ifFalse: [			listViewClass _ PluggableListViewByItem.			textViewClass _ PluggableTextView].	listFont _ StrikeFont allSubInstances		detect: [:f | (f name beginsWith: 'CourierFixed') and: [f height = 11]]		ifNone: [TextStyle default fontAt: 1].	views _ OrderedCollection new.	v _ listViewClass		on: model		list: #categoryList		selected: #category		changeSelected: #setCategory:		menu: #categoryMenu:		keystroke: #categoriesKeystroke:.	views add: v.	v _ listViewClass		on: model		list: #tocEntryList		selected: #tocEntry		changeSelected: #setTOCEntry:		menu: #tocMenu:		keystroke: #tocKeystroke:.	v font: listFont.	views add: v.	v _ textViewClass new		on: model		text: #messageText		accept: #messageText:		readSelection: nil		menu: #messageMenu:shifted:.	v borderWidth: 1.	model messageTextView: v.	views add: v.	^ views! !!ChangeList methodsFor: 'menu actions' stamp: 'tk 6/24/1999 07:22'!selectConflictsWith	"Selects all method definitions for which there is ALSO an entry in the specified changeSet or changList chosen by the user. 4/11/96 tk"	| aStream all index |	aStream _ WriteStream on: (String new: 200).	all _ ChangeSet allSubInstances asOrderedCollection.	all do:		[:sel | aStream nextPutAll: (sel name contractTo: 40); cr].	ChangeList allSubInstancesDo:		[:sel | aStream nextPutAll: (sel file name); cr.			all addLast: sel].	aStream skip: -1.	index _ (PopUpMenu labels: aStream contents) startUp.	index > 0 ifTrue: [		self selectConflicts: (all at: index)].! !!ChangeSorter class methodsFor: 'as yet unclassified' stamp: 'tk 6/24/1999 11:32'!gatherChangeSets	"Collect any change sets created in other projects"	ChangeSet allSubInstancesDo: [:each |		(AllChangeSets includes: each) ifFalse:			[AllChangeSets add: each]].	^ AllChangeSets _ AllChangeSets select:		[:each | each isMoribund not]	"ChangeSorter gatherChangeSets"! !!ChangeSorter class methodsFor: 'as yet unclassified' stamp: 'tk 6/24/1999 11:32'!removeChangeSetsBefore: stopName	"Remove all change sets before the one with the given name."	"ChangeSorter removeChangeSetsBefore: 'Beyond'" 	| stop |	(self confirm:'Really remove all change sets before"', stopName, '"?')		ifFalse: [^ self].	self gatherChangeSets.	stop _ false.	ChangeSet allSubInstancesDo: [:changeSet |		changeSet name = stopName ifTrue: [stop _ true].		stop ifFalse: [			changeSet okayToRemove ifTrue: [				AllChangeSets remove: changeSet ifAbsent: [].				changeSet wither]]].	Smalltalk garbageCollect.	AllChangeSets _ OrderedCollection new.	self gatherChangeSets.! !!ImageSegment class methodsFor: 'testing' stamp: 'tk 6/23/1999 07:17'!swapOutProjects  "ImageSegment swapOutProjects"  	"Swap out segments for all projects other than the current one."	| spaceLeft newSpaceLeft |	spaceLeft _ Smalltalk garbageCollect.	Project allSubInstances doWithIndex:		[:p :i | p == Project current ifFalse:			[Transcript cr; cr; nextPutAll: p name.			(ImageSegment new copyFromRoots: (Array with: p))				extract; writeToFile: 'project' , i printString.			newSpaceLeft _ Smalltalk garbageCollect.			Transcript cr; print: newSpaceLeft - spaceLeft; endEntry.			spaceLeft _ newSpaceLeft]].! !!MailDB class methodsFor: 'instance creation' stamp: 'tk 6/24/1999 07:22'!openOn: rootFilename	"Open or create a mail database with the given root filename. If an instance of me exists with the given root filename, return a reference to that instance rather than creating a new one. This allows multiple MailReaders to be open on the same database without synchronization problems."	| alreadyOpenDB |	alreadyOpenDB _ self allSubInstances		detect:			[: db |			 (db rootFilename notNil) and:			 [db rootFilename = rootFilename]]		ifNone: [nil].	(alreadyOpenDB notNil)		ifTrue: [^alreadyOpenDB]		ifFalse: [^(self new) openOn: rootFilename].! !!MailDB class methodsFor: 'shut down' stamp: 'tk 6/24/1999 11:35'!shutDown	"snapshot all mail databases to disk"	self allSubInstancesDo: [:db | db saveDB]! !!Morph methodsFor: 'menus' stamp: 'tk 6/24/1999 07:22'!chooseNewGraphicCoexisting: aBoolean	"Used by any morph that can be represented by a graphic"	| reasonableForms replacee aGraphicalMenu myGraphic |	reasonableForms _ (SketchMorph allSubInstances collect: [:m | m form]) asOrderedCollection.	reasonableForms addAll: (Smalltalk imageImports collect: [:f | f]).	reasonableForms _ reasonableForms asSet asOrderedCollection.	(reasonableForms includes: (myGraphic _ self form))		ifTrue:			[reasonableForms remove: myGraphic].	reasonableForms addFirst: myGraphic.	aGraphicalMenu _ GraphicalMenu new initializeFor: self withForms: reasonableForms coexist: aBoolean.	aBoolean		ifFalse:			[replacee _ self topRendererOrSelf.			replacee owner replaceSubmorph: replacee by: aGraphicalMenu]		ifTrue:			[self primaryHand attachMorph: aGraphicalMenu]! !!Password class methodsFor: 'as yet unclassified' stamp: 'tk 6/24/1999 11:36'!shutDown	"Forget all cached passwords, so they won't stay in the image"	self allSubInstancesDo: [:each | each cache: nil].! !!Player methodsFor: 'slots-user' stamp: 'tk 6/24/1999 11:22'!addInstanceVariable	| itsName initialValue typeChosen suggestedNames usedNames initialAnswer setterSelector |	suggestedNames _ #('cargo' 'speed' 'weight' 'mzee' 'friml' 'verp' 'znak').	usedNames _ self class instVarNames.	initialAnswer _ suggestedNames detect: [:aName |  (usedNames includes: aName) not] ifNone:		[Utilities keyLike: 'var1'  satisfying: [:aKey | (usedNames includes: aKey) not]].	itsName _ FillInTheBlank request: 'name for new inst var: ' initialAnswer: initialAnswer. 	itsName size == 0 ifTrue: [^ self].	(Utilities isLegalInstVarName: itsName) ifFalse: [^ self inform: 'sorry, illegal name, try again.'].	itsName _ itsName asSymbol.	(self class allInstVarNames includes: itsName) ifTrue: [^ self inform: 'that name is already used.'].		self assureUniClass.	typeChosen _ self initialTypeForSlotNamed: itsName.	self slotInfo at: itsName put: (SlotInformation new type: typeChosen).	initialValue _ self initialValueForSlotOfType: typeChosen.	self addInstanceVarNamed: itsName withValue: initialValue.	self class compileAccessorsFor: itsName.	setterSelector _ Utilities setterSelectorFor: itsName.	(self class allSubInstances copyWithout: self) do:		[:anInstance | anInstance perform: setterSelector with: initialValue].	self updateAllViewersAndForceToShow: 'instance variables'! !!Player methodsFor: 'slots-user' stamp: 'tk 6/24/1999 11:38'!chooseSlotTypeFor: slotName	| typeChoices typeChosen |	self flag: #deferred.  "sound should be reinstated but too much difficulty at present"	typeChoices _ #(number player boolean color string "sound point costume").	typeChosen _ (SelectionMenu selections: typeChoices lines: #()) startUpWithCaption: 'Choose the TYPEfor ', slotName.	typeChosen isEmptyOrNil ifTrue: [^ self].	(self typeForSlot: slotName) = typeChosen ifTrue: [^ self].	(self slotInfoAt: slotName) type: typeChosen.	self class allInstancesDo:   "allSubInstancesDo:"		[:anInst | anInst instVarNamed: slotName asString put: 			(anInst valueOfType: typeChosen from: (anInst instVarNamed: slotName)).		anInst updateAllViewers]! !!Player class methodsFor: 'housekeeping' stamp: 'tk 6/24/1999 11:23'!freeUnreferencedSubclasses	"Player classes may hold in their class instance variables references to instances of themselves that are housekeepingwise unreachable. This method allows such loops to be garbage collected. This is done in three steps:	1. Remove user-created subclasses from the 'subclasses' set and from Smalltalk. Only remove classes whose name begins with 'Player' and which have no references.	2. Do a full garbage collection.	3. Enumerate all Metaclasses and find those whose soleInstance's superclass is this class. Reset the subclasses set to this set of classes, and add back to Smalltalk."	"Player freeUnreferencedSubclasses"	| oldFree candidatesForRemoval |	oldFree _ Smalltalk garbageCollect.	candidatesForRemoval _ self subclasses asOrderedCollection select:		[:aClass | (aClass name beginsWith: 'Player') and: [aClass name endsWithDigit]].	"Break all system links and then perform garbage collection."	candidatesForRemoval do:		[:c | self removeSubclass: c.  "Break downward subclass pointers."		Smalltalk removeKey: c name ifAbsent: [].  "Break binding of global name"].	candidatesForRemoval _ nil.	Smalltalk garbageCollect.  "Now this should reclaim all unused subclasses"	"Now reconstruct system links to subclasses with valid references."	"First restore any global references via associations"	(Association allSubInstances select:			[:assn | (assn key isMemberOf: Symbol)					and: [(assn key beginsWith: 'Player')					and: [assn key endsWithDigit]]])		do: [:assn | c _ assn value.			(c isKindOf: self class) ifTrue:				[self addSubclass: c.				Smalltalk add: assn]].	"Then restore any further direct references, creating new associations."	(Metaclass allInstances select:			[:m | (m soleInstance name beginsWith: 'Player')					and: [m soleInstance name endsWithDigit]])		do: [:m | c _ m soleInstance.			((c isKindOf: self class) and: [(Smalltalk includesKey: c name) not]) ifTrue:				[self addSubclass: c.				Smalltalk at: c name put: c]].	SystemOrganization removeMissingClasses.	^ Smalltalk garbageCollect - oldFree! !!PopUpMenu class methodsFor: 'class initialization' stamp: 'tk 6/24/1999 11:39'!initialize  "PopUpMenu initialize"	"Change CacheMenuForms to true to get faster popup menus on slower systems."	"CacheMenuForms _ true"	CacheMenuForms _ true.	(MenuStyle _ TextStyle default copy)		gridForFont: 1 withLead: 0;		centered.	PopUpMenu allSubInstancesDo: [:m | m rescan]! !!Process commentStamp: 'tk 6/24/1999 11:25' prior: 0!I represent an independent path of control in the system. This path of control may be stopped (by sending the message suspend) in such a way that it can later be restarted (by sending the message resume). When any one of several paths of control can be advanced, the single instance of ProcessorScheduler named Processor determines which one will actually be advanced partly using the value of priority.(If anyone ever makes a subclass of Process, be sure to use allSubInstances in anyProcessesAbove:.)!!ProcessorScheduler methodsFor: 'private' stamp: 'tk 6/24/1999 11:27'!anyProcessesAbove: highestPriority 	"Do any instances of Process exist with higher priorities?"	^(Process allInstances "allSubInstances" select: [:aProcess | 		aProcess priority > highestPriority]) isEmpty		"If anyone ever makes a subclass of Process, be sure to use allSubInstances."! !!Project methodsFor: 'release' stamp: 'tk 6/24/1999 11:41'!okToChange	| ok hasSubProjects |	hasSubProjects _ world isMorph		ifTrue: [(world submorphs select:						[:m | (m isKindOf: SystemWindow)								and: [m model isKindOf: Project]]) size > 0]		ifFalse: [(world controllerWhoseModelSatisfies:						[:m | m isKindOf: Project]) notNil].	hasSubProjects ifTrue:		[PopUpMenu notify: 'The project ', self name printString, 'contains sub-projects.  You must remove theseexplicitly before removing their parent.'.		^ false].	ok _ (world isMorph not and: [world scheduledControllers size <= 1]) or:			[self confirm:'Really delete the project', self name printString, 'and all its windows?'].	ok ifFalse: [^ false].	"about to delete this project; clear previous links to it from other Projects:"	Project allProjects do: [:p | p deletingProject: self].	ProjectViewMorph allSubInstancesDo: [:p | p deletingProject: self].	world isMorph  "special release for wonderlands"		ifTrue: [world submorphs do:						[:m | (m isKindOf: WonderlandCameraMorph)								and: [m getWonderland release]]].	^ true! !!RecordingControlsMorph methodsFor: 'stepping' stamp: 'tk 6/24/1999 11:41'!startStepping	"Make the level meter active when dropped into the world. Do nothing if already recording. Note that this will cause other recorders to stop recording..."	super startStepping.	recorder isPaused ifTrue: [		SoundRecorder allSubInstancesDo: [:r | r stopRecording].  "stop all other sound recorders"		recorder pause].  "meter is updated while paused"! !!SimpleMIDIPort class methodsFor: 'instance creation' stamp: 'tk 6/24/1999 11:42'!openOnPortNumber: portNum	"Answer a new instance of me for the given MIDI port number."	"Details: All clients of a particular MIDI port should share the same instance of me. This allows accesses to the port to be serialized and shared port-related state state to be maintained."	SimpleMIDIPort allSubInstancesDo: [:p |		p portNumber = portNum ifTrue: [			"share the existing port object for this port number"			^ p]].	^ super new openOnPortNumber: portNum! !!SoundPlayer class methodsFor: 'playing' stamp: 'tk 6/24/1999 11:42'!canStartPlayer	"Some platforms do no support simultaneous record and play. If this is one of those platforms, return false if there is a running SoundRecorder."	SoundRecorder canRecordWhilePlaying ifTrue: [^ true].	SoundRecorder allSubInstancesDo: [:rec | rec isActive ifTrue: [^ false]].	^ true! !!SqueakPage methodsFor: 'private' stamp: 'tk 6/24/1999 11:42'!postChangeNotification	"Inform all thumbnails and books that this page has been updated."	URLMorph allSubInstancesDo: [:m | m pageHasChanged: self].! !!SqueakPageCache class methodsFor: 'housekeeping' stamp: 'tk 6/24/1999 11:42'!deleteUnreferencedPages	"Remove any pages that are not current referred to by any book or URL morph."	"Details: Since unreferenced pages could refer to other pages, this process is iterated until no unreferenced pages can be found. It currently does not collect cycles."	"SqueakPageCache deleteUnreferencedPages"	| unreferenced |	[true] whileTrue: [		Smalltalk garbageCollect.		unreferenced _ PageCache keys.		URLMorph allSubInstancesDo: [:m | unreferenced remove: m url ifAbsent: []].		MorphObjectOut allInstancesDo: [:ticklish |			unreferenced remove: ticklish url ifAbsent: []].		unreferenced size = 0 ifTrue: [^ self].		unreferenced do: [:url | PageCache removeKey: url ifAbsent: []]].! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'tk 6/24/1999 11:28'!makeAnonymousScriptsPermanent	"ScriptingSystem makeAnonymousScriptsPermanent"	ScriptEditorMorph allSubInstances do: [:m | 		m playerScripted ifNotNil: [m isAnonymous ifTrue: [m modernizeScript]]]! !!StrikeFont class methodsFor: 'derivative font caching' stamp: 'tk 6/24/1999 11:45'!shutDown  "StrikeFont shutDown"	"Deallocate synthetically derived copies of base fonts to save space"	self allSubInstancesDo: [:sf | sf reset]! !!SystemDictionary methodsFor: 'browsing' stamp: 'tk 6/24/1999 11:28'!browseObsoleteReferences   "Smalltalk browseObsoleteReferences"	| references |	references _ OrderedCollection new.	(Association allSubInstances select:		[:x | ((x value isKindOf: Behavior) and: ['AnOb*' match: x value name]) or:		['AnOb*' match: x value class name]]) 		do: [:x | references addAll: (Smalltalk allCallsOn: x)].	Smalltalk browseMessageList: references name: 'References to Obsolete Classes'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'tk 6/24/1999 11:45'!majorShrink    "Smalltalk majorShrink; abandonSources; lastRemoval"	"This method throws out lots of the system that is not needed for, eg, operation in a hand-held PC.  Currently, since it discards Morphic, majorShrink must be run in an MVC project.  Moreover, since it throws out projects, it shouod be run in the top (and only) project.  majorShrink altogether saves about 5,620k in Squeak 2.4"	Smalltalk discardVMConstruction.  "666k"	Smalltalk discardSoundSynthesis.  "358k"	Smalltalk discardOddsAndEnds.  "158k"	Smalltalk discardNetworking.  "243k"	Smalltalk discardMorphic.  "2,494k"	Symbol rehash.  "40k"	"Above by itself saves about 3,960k""	| a | a _ Smalltalk garbageCollect.	Smalltalk majorShrink.	Smalltalk garbageCollect - a"	"Remove references to a few classes to be deleted, so that they won't leave obsolete versions around."	FileList removeSelector: #fileIntoNewChangeSet.	ChangeSet class compile: 'defaultName		^ ''Changes'' ' classified: 'initialization'.	ScreenController removeSelector: #openChangeManager.	ScreenController removeSelector: #exitProject.	ScreenController removeSelector: #openProject.	ScreenController removeSelector: #viewImageImports.	"Now delete lots of classes.."	SystemOrganization removeSystemCategory: 'Graphics-Symbols'.	SystemOrganization removeSystemCategory: 'Graphics-Files'.	SystemOrganization removeSystemCategory: 'Interface-Projects'.	SystemOrganization removeSystemCategory: 'System-Object Storage'.	Smalltalk removeClassNamed: #FormSetFont.	Smalltalk removeClassNamed: #FontSet.	Smalltalk removeClassNamed: #InstructionPrinter.	Smalltalk removeClassNamed: #ChangeSorter.	Smalltalk removeClassNamed: #DualChangeSorter.	Smalltalk removeClassNamed: #EmphasizedMenu.	Smalltalk removeClassNamed: #MessageTally.	StringHolder class removeSelector: #originalWorkspaceContents.	CompiledMethod removeSelector: #symbolic.	RemoteString removeSelector: #makeNewTextAttVersion.	Utilities class removeSelector: #absorbUpdatesFromServer.	Smalltalk removeClassNamed: #PenPointRecorder.	Smalltalk removeClassNamed: #Path.	Smalltalk removeClassNamed: #Base64MimeConverter.	Smalltalk removeClassNamed: #EToySystem.	Smalltalk removeClassNamed: #RWBinaryOrTextStream.	Smalltalk removeClassNamed: #AttributedTextStream.	TextStyle allSubInstancesDo:		[:ts | ts newFontArray: (ts fontArray copyFrom: 1 to: (2 min: ts fontArray size))].	ListParagraph initialize.	PopUpMenu initialize.	StandardSystemView initialize.	Smalltalk noChanges.	ChangeSorter classPool at: #AllChangeSets 		put: (OrderedCollection with: Smalltalk changes).	[Smalltalk removeAllUnSentMessages > 0]		whileTrue:		[Smalltalk unusedClasses do: [:c | (Smalltalk at: c) removeFromSystem]].	Smalltalk allClassesDo: [:c | c zapOrganization].	Symbol rehash.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'tk 6/24/1999 11:48'!removeAllUnSentMessages   "Smalltalk removeAllUnSentMessages"	"[Smalltalk unusedClasses do: [:c | (Smalltalk at: c) removeFromSystem].		Smalltalk removeAllUnSentMessages > 0] whileTrue." 	"Remove all implementations of unsent messages."	| sels n |	sels _ self allUnSentMessages.	"The following should be preserved for doIts, etc"	#(browseAllSelect: printSpaceAnalysis lastRemoval		scrollBarValue: scrollBarMenuButtonPressed: 		withSelectionFrom:  to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial benchmark benchFib		newDepth: restoreAfter: forgetDoIts		removeAllUnSentMessages abandonSources removeUnreferencedKeys		reclaimDependents zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerInterruptWatcher unusedClasses) do:		[:sel | sels remove: sel ifAbsent: []].	"The following may be sent by perform: in dispatchOnChar..."	(ParagraphEditor classPool at: #CmdActions) asSet do:		[:sel | sels remove: sel ifAbsent: []].	(ParagraphEditor classPool at: #ShiftCmdActions) asSet do:		[:sel | sels remove: sel ifAbsent: []].	sels size = 0 ifTrue: [^ 0].	n _ 0. Smalltalk allBehaviorsDo: [:x | n _ n+1].	'Removing ', sels size printString , ' messages . . .'		displayProgressAt: Sensor cursorPoint		from: 0 to: n		during:		[:bar |		n _ 0.		self allBehaviorsDo:			[:class | bar value: (n _ n+1).			sels do:				[:sel | class removeSelectorSimply: sel]]].	MethodDictionary allInstancesDo: "allSubInstancesDo:" [:d | d rehash].	^ sels size! !!SystemDictionary methodsFor: 'shrinking' stamp: 'tk 6/24/1999 11:49'!zapMVCprojects   "Smalltalk zapMVCprojects"	| window |	Smalltalk garbageCollect.  "So allInstances is precise"	Project allSubInstancesDo:		[:proj |		proj isTopProject		ifTrue: [proj isMorphic ifFalse:					["Root project is MVC -- we must become the root"					Project current removeViewFromParent.					Project current setParent: Project current]]		ifFalse: [proj parent isMorphic				ifFalse: [proj isMorphic ifTrue:							["Remove Morphic projects from MVC views"							proj removeViewFromParent.							"... and add them back here."							window _ (SystemWindow labelled: proj name) model: proj.							window addMorph: (ProjectViewMorph on: proj)									frame: (0@0 corner: 1.0@1.0).							window openInWorld.							proj setParent: Project current]].				proj isMorphic					ifFalse: ["Remove MVC projects from Morphic views"							proj removeViewFromParent.							Project allInstancesDo: [:p | p deletingProject: proj].							ProjectViewMorph allInstancesDo: [:p | p deletingProject: proj]]]		]! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'tk 6/24/1999 11:47'!reclaimDependents		"Smalltalk reclaimDependents"	"Reclaim unused entries in DependentsFields (DF)..."	"NOTE:  if <object>addDependent: is ever used to add something		other than a view, this process will fail to reinstate that		thing after clearing out DependentsFields.  DF was only		intended to be used as part of the MVC architecture."	Object classPool at: #DependentsFields  "Remove all entries from DF"				put: IdentityDictionary new.	Smalltalk garbageCollect.  "If that was the only reference, they will go away"	"Now if any views of non-models remain,		they should be reinstated as dependent views..."	View allSubInstancesDo:		[:v | (v model==nil or: [v model isKindOf: Model])				ifFalse: [v model addDependent: v]].	SystemWindow allSubInstancesDo:		[:v | (v model==nil or: [v model isKindOf: Model])				ifFalse: [v model addDependent: v]].! !!TabbedPalette class methodsFor: 'as yet unclassified' stamp: 'tk 6/24/1999 11:49'!march99Conversion	"TabbedPalette march99Conversion"	| palettes grandCount itsCount |	palettes _ 0.	grandCount _ 0.	self allSubInstancesDo:		[:m |			itsCount _ m undergoMarch99Conversion.			itsCount > 0 ifTrue:				[palettes _ palettes + 1.				grandCount _ grandCount + itsCount]].	Transcript cr; show: (palettes printString, ' palettes amended, with a total of', grandCount printString, ' tabs converted to ReferenceMorphs.')! !!ToggleButtonMorph class methodsFor: 'as yet unclassified' stamp: 'tk 6/24/1999 11:50'!fixTargetPresenters	"ToggleButtonMorph fixTargetPresenters"	"Repair faulty instances from the first 'etoy-template' experiment, such that the instances refer to the local presenter rather than to a phantom and irrelevant world"	self allSubInstancesDo:		[:m | (m target isKindOf: Presenter) ifTrue:			[m target: m presenter]]! !!Utilities class methodsFor: 'vm statistics' stamp: 'tk 6/24/1999 11:30'!vmStatisticsReportString	"StringHolderView open: (StringHolder new contents:		Utilities vmStatisticsReportString) label: 'VM Statistics'"	| params oldSpaceEnd youngSpaceEnd memoryEnd fullGCs fullGCTime incrGCs incrGCTime tenureCount mcMisses mcHits icHits upTime sendCount tms tmSize |	params _ Smalltalk getVMParameters.	oldSpaceEnd			_ params at: 1.	youngSpaceEnd		_ params at: 2.	memoryEnd			_ params at: 3.	fullGCs				_ params at: 7.	fullGCTime			_ params at: 8.	incrGCs				_ params at: 9.	incrGCTime			_ params at: 10.	tenureCount			_ params at: 11.	mcMisses			_ params at: 15.	mcHits				_ params at: 16.	icHits				_ params at: 17.	upTime _ Time millisecondClockValue.	sendCount _ mcMisses + mcHits + icHits.	tms _ TranslatedMethod allSubInstances.	tmSize _ tms inject: 0 into: [:sum :tm | sum + (tm size * 4)].	^String streamContents: [:str |		str	nextPutAll: 'uptime			';			print: (upTime / 1000 / 60 // 60); nextPut: $h;			print: (upTime / 1000 / 60 \\ 60) asInteger; nextPut: $m;			print: (upTime / 1000 \\ 60) asInteger; nextPut: $s; cr.		str	nextPutAll: 'memory			';			nextPutAll: memoryEnd asStringWithCommas; nextPutAll: ' bytes'; cr.		str	nextPutAll:	'	old			';			nextPutAll: oldSpaceEnd asStringWithCommas; nextPutAll: ' bytes (';			print: ((oldSpaceEnd / memoryEnd * 100) roundTo: 0.1); nextPutAll: '%)'; cr.		str	nextPutAll: '	young		';			nextPutAll: (youngSpaceEnd - oldSpaceEnd) asStringWithCommas; nextPutAll: ' bytes (';			print: ((youngSpaceEnd - oldSpaceEnd / memoryEnd * 100) roundTo: 0.1); nextPutAll: '%)'; cr.		str	nextPutAll: '	used		';			nextPutAll: youngSpaceEnd asStringWithCommas; nextPutAll: ' bytes (';			print: ((youngSpaceEnd / memoryEnd * 100) roundTo: 0.1); nextPutAll: '%)'; cr.		str	nextPutAll: '	free		';			nextPutAll: (memoryEnd - youngSpaceEnd) asStringWithCommas; nextPutAll: ' bytes (';			print: ((memoryEnd - youngSpaceEnd / memoryEnd * 100) roundTo: 0.1); nextPutAll: '%)'; cr.		str	nextPutAll: 'GCs				';			nextPutAll: (fullGCs + incrGCs) asStringWithCommas;			nextPutAll: ' ('; print: ((upTime / (fullGCs + incrGCs)) roundTo: 1); nextPutAll: 'ms between GCs)'; cr.		str	nextPutAll: '	full			';			print: fullGCs; nextPutAll: ' in '; nextPutAll: fullGCTime asStringWithCommas; nextPutAll: 'ms (';			print: ((fullGCTime / upTime * 100) roundTo: 1.0);			nextPutAll: '% uptime)'.		fullGCs = 0 ifFalse:			[str	nextPutAll: ', avg '; print: ((fullGCTime / fullGCs) roundTo: 1.0); nextPutAll: 'ms'].		str	cr.		str	nextPutAll: '	incr		';			print: incrGCs; nextPutAll: ' in '; nextPutAll: incrGCTime asStringWithCommas; nextPutAll: 'ms (';			print: ((incrGCTime / upTime * 100) roundTo: 1.0);			nextPutAll: '% uptime), avg '; print: ((incrGCTime / incrGCs) roundTo: 1.0); nextPutAll: 'ms'; cr.		str	nextPutAll: '	tenures		';			nextPutAll: tenureCount asStringWithCommas.		tenureCount = 0 ifFalse:			[str nextPutAll: ' (avg '; print: (incrGCs / tenureCount) asInteger; nextPutAll: ' GCs/tenure)'].		str	cr.		sendCount > 0 ifTrue: [			str	nextPutAll: 'sends			';				nextPutAll: sendCount asStringWithCommas; cr.			str	nextPutAll: '	full			';				nextPutAll: mcMisses asStringWithCommas;				nextPutAll: ' ('; print: ((mcMisses / sendCount * 100) roundTo: 0.1); nextPutAll: '%)'; cr.			str	nextPutAll: '	m-cache	';				nextPutAll: mcHits asStringWithCommas;				nextPutAll: ' ('; print: ((mcHits / sendCount * 100) roundTo: 0.1); nextPutAll: '%)'; cr.			str	nextPutAll: '	i-cache		';				nextPutAll: icHits asStringWithCommas;				nextPutAll: ' ('; print: ((icHits / sendCount * 100) roundTo: 0.1); nextPutAll: '%)'; cr].		icHits > 0 ifTrue: [			str	nextPutAll: 'methods			';				nextPutAll: tms size asStringWithCommas; nextPutAll: ' translated'; cr.			str	nextPutAll: '	size			';				nextPutAll: tmSize asStringWithCommas; nextPutAll: ' bytes, avg ';				print: ((tmSize / tms size) roundTo: 0.1); nextPutAll: ' bytes/method'; cr.			str	nextPutAll: '	memory		';				print: ((tmSize / youngSpaceEnd * 100) roundTo: 0.1); nextPutAll: '% of used, ';				print: ((tmSize / memoryEnd * 100) roundTo: 0.1); nextPutAll: '% of available'; cr]].! !PopUpMenu initialize!