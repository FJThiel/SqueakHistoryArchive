'From Squeak 2.5 of August 6, 1999 on 20 August 1999 at 11:27:38 am'!"Change Set:		ExternObjects-arDate:			20 August 1999Author:			Andreas RaabTo fixes related to the external objects array:1) Check for index out of range when signaling an external semaphore in the VM2) Clean up the external objects array before running the system startup list."!!Interpreter methodsFor: 'processes' stamp: 'ar 8/19/1999 23:22'!checkForInterrupts	"Check for possible interrupts and handle one if necessary."	| sema now |	self inline: false.	interruptCheckCounter _ 1000.  "reset the interrupt check counter"	"Mask so same wrap as primitiveMillisecondClock"	now _ self ioMSecs bitAnd: 16r1FFFFFFF. 	now < lastTick ifTrue: [		"millisecond clock wrapped"		nextPollTick _ now + (nextPollTick - lastTick).		nextWakeupTick ~= 0			ifTrue: [nextWakeupTick _ now + (nextWakeupTick - lastTick)]].	lastTick _ now.  "used to detect millisecond clock wrapping"	signalLowSpace ifTrue: [		signalLowSpace _ false.  "reset flag"		sema _ (self splObj: TheLowSpaceSemaphore).		sema = nilObj ifFalse: [self synchronousSignal: sema]].	now >= nextPollTick ifTrue: [		self ioProcessEvents.  "sets interruptPending if interrupt key pressed"		nextPollTick _ now + 500].  "msecs to wait before next call to ioProcessEvents"	interruptPending ifTrue: [		interruptPending _ false.  "reset interrupt flag"		sema _ (self splObj: TheInterruptSemaphore).		sema = nilObj ifFalse: [self synchronousSignal: sema]].	((nextWakeupTick ~= 0) and: [now >= nextWakeupTick]) ifTrue: [		nextWakeupTick _ 0.  "reset timer interrupt"		sema _ (self splObj: TheTimerSemaphore).		sema = nilObj ifFalse: [self synchronousSignal: sema]].	"signal any pending finalizations"	pendingFinalizationSignals > 0 ifTrue:[		sema _ self splObj: TheFinalizationSemaphore.		(self fetchClassOf: sema) = (self splObj: ClassSemaphore) 			ifTrue:[self synchronousSignal: sema].		pendingFinalizationSignals _ 0.	].	"signal all semaphores in semaphoresToSignal" 	semaphoresToSignalCount > 0 		ifTrue: [self signalExternalSemaphores].! !!Interpreter methodsFor: 'processes' stamp: 'ar 8/19/1999 23:21'!signalExternalSemaphores	"Signal all requested semaphores"	| xArray xSize index sema |	xArray _ self splObj: ExternalObjectsArray.	xSize _ self stSizeOf: xArray.	1 to: semaphoresToSignalCount do: [:i |		index _ semaphoresToSignal at: i.		(index > 0 and:[index <= xSize]) ifTrue:[			sema _ self fetchPointer: index - 1 ofObject: xArray.				"Note: semaphore indices are 1-based"			(self fetchClassOf: sema) = (self splObj: ClassSemaphore)				ifTrue: [self synchronousSignal: sema]]].	semaphoresToSignalCount _ 0.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'ar 8/19/1999 23:23'!snapshot: save andQuit: quit	"Mark the changes file and close all files. If save is true, save the current state of this Smalltalk in the image file. If quit is true, then exit to the outer shell. The latter part of this method runs when resuming a previously saved image. The resume logic checks for a document file to process when starting up."	| resuming msg sourceLink |	save & (SourceFiles at: 2) notNil ifTrue:		[msg _  (quit			ifTrue: ['----QUIT----']			ifFalse: ['----SNAPSHOT----'])			, Date dateAndTimeNow printString.		sourceLink _ ' priorSource: ' , LastQuitLogPosition printString.		self assureStartupStampLogged.		LastQuitLogPosition _ (SourceFiles at: 2) setToEnd; position.		self logChange: msg , sourceLink.		Transcript cr; show: msg].	self processShutDownList.	Cursor write show.	save		ifTrue: [resuming _ self snapshotPrimitive]  "<-- PC frozen here on image file"		ifFalse: [resuming _ false].	quit & resuming not ifTrue: [self quitPrimitive].	Cursor normal show.	self setGCParameters.	resuming ifTrue: [self clearExternalObjects].	self processStartUpList.	resuming ifTrue: [self readDocumentFile].	^resuming! !