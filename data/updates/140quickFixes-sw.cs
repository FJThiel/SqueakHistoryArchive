'From Squeak 2.1 of June 30, 1998 on 1 July 1998 at 12:35:48 pm'!"Change Set:		quickFixesDate:			1 July 1998Author:			Scott WallaceMoves the detent feature of rotation to the Halo, so that scripted rotations don't show the detent behavior.Performance improvement in Morph>>world.Fix to a bug in the copy-to-paste-buffer that showed up when the morph to be copied was flexed.Moved #stringForReadout from Integer to Number, as per Georg Gollman bug report.Warning issued upon attempt to duplicate an object bearing any anonymous scripts."!!Morph methodsFor: 'accessing' stamp: 'sw 7/1/1998 12:28'!balloonHelpTextForHandle: aHandle	|  itsSelector |	itsSelector _ aHandle eventHandler firstMouseSelector.	#(	(startRot:with:				'Rotate')		(startGrow:with:				'Change size') 		(doDup:with:				'Duplicate')		(maybeDoDup:with:			'Duplicate')		(doGrab:with:				'Pick up')		(doMenu:with:				'Menu')		(mouseDownOnHelpHandle:	'Help')		(tearOffTile					'Make a Tile')		(paintBackground			'Paint background')		(openViewerForArgument	'View me')		(dismiss						'Remove')		(editDrawing				'Repaint')		(startScale:with:				'Change scale') 		(chooseFont					'Change font')		(chooseStyle					'Change style')		(chooseEmphasis				'Change emphasis')		(makeNewDrawingWithin	'Paint new object'))  "This last one not currently in use"	do:		[:pair | itsSelector == pair first ifTrue: [^ pair last]].	^ 'unknown halo handle'! !!Morph methodsFor: 'structure' stamp: 'sw 7/1/1998 12:15'!world	^ owner ifNil: [nil] ifNotNil: [owner world]! !!Morph methodsFor: 'apr98 additions' stamp: 'sw 7/1/1998 12:25'!okayToDuplicate	costumee ifNil: [^ true].	self instantiatedUserScriptsDo:		[:aScript | aScript isAnonymous ifTrue:			[self inform: 'This object has one or moreunnamed, unsaved scripts,which would not be partof a duplicate.  So, for now,we just won''t let you dothis.  Sorry!!'.			^ false]].	^ true! !!HaloMorph methodsFor: 'private' stamp: 'sw 7/1/1998 12:28'!addHandles	| box |	target isWorldMorph ifTrue: [^ self addHandlesForWorldHalos].	self removeAllMorphs.  "remove old handles, if any"	self bounds: target fullBoundsInWorld.  "update my size"	box _ (self fullBounds expandBy: 17)			intersect: (self world bounds insetBy: 5@5).	self addHandleAt: box topLeft color: Color red on: #mouseDown send: #doMenu:with: to: self.	self addHandleAt: (box topLeft + (0 @ (9 + ((box height - 36) // 4)))) color: Color lightBrown on: #mouseDown send: #tearOffTile to: innerTarget.	self addHandleAt: (box topLeft + (18@0)) color: Color transparent on: #mouseDown send: #dismiss to: self.	self addHandleAt: (box leftCenter) color: Color cyan on: #mouseDown send: #openViewerForArgument to: innerTarget.	self addHandleAt: box topCenter color: Color black on: #mouseDown send: #doGrab:with: to: self.	self addHandleAt: box topRight color: Color green on: #mouseDown send: #maybeDoDup:with: to: self.	target balloonText ifNotNil:		[(self addHandleAt: box bottomCenter color: Color lightBlue on: #mouseDown send: #mouseDownOnHelpHandle: to: innerTarget)			on: #mouseUp send: #deleteBalloon to: innerTarget].	(self addHandleAt: box bottomLeft color: Color blue on: #mouseDown send: #startRot:with: to: self)		on: #mouseStillDown send: #doRot:with: to: self.	target isFlexMorph		ifTrue:			[(self addHandleAt: box bottomRight color: Color lightOrange on: #mouseDown send: #startScale:with: to: self)				on: #mouseStillDown send: #doScale:with: to: self]		ifFalse:			[(self addHandleAt: box bottomRight color: Color yellow on: #mouseDown send: #startGrow:with: to: self)				on: #mouseStillDown send: #doGrow:with: to: self].	innerTarget addOptionalHandlesTo: self box: box.	self addNameBeneath: box string: target "innerTarget" externalName.	growingOrRotating _ false.	self layoutChanged.	self changed.! !!HaloMorph methodsFor: 'private' stamp: 'sw 7/1/1998 11:35'!doRot: evt with: rotHandle	"Update the rotation of my target if it is rotatable."	| degrees |	degrees _ (evt cursorPoint - target referencePosition) degrees.	degrees _ degrees - angleOffset degrees.	(degrees abs < 1.0) ifTrue: [degrees _ 0.0].	degrees = 0.0		ifTrue: [rotHandle color: Color lightBlue]		ifFalse: [rotHandle color: Color blue].	target rotationDegrees: (degrees						detentBy: 10.0						atMultiplesOf: 90.0 snap: false).	rotHandle position: evt cursorPoint - (rotHandle extent // 2).	self layoutChanged.! !!HaloMorph methodsFor: 'private' stamp: 'sw 7/1/1998 12:30'!maybeDoDup: evt with: dupHandle	^ target okayToDuplicate ifTrue:		[self doDup: evt with: dupHandle]! !!HandMorph methodsFor: 'meta menu' stamp: 'sw 7/1/1998 12:30'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	menu add: 'delete' action: #dismissMorph.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	(argument pasteUpMorph morphsAt: targetOffset) size > 2 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	(argMorph isKindOf: SketchMorph)  ifFalse: [		menu add: 'fill color' action: #changeColor].	(argMorph morphsAt: targetOffset) size > 1 ifTrue: [		menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	menu add: 'inspect' action: #inspectMorph.	menu add: 'inspect in Morphic' action: #inspectMorphInMorphic.	menu add: 'browse' action: #browseMorphClass.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'name me' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue: [		menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue: [			 menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!HandMorph methodsFor: 'meta menu' stamp: 'sw 7/1/1998 11:52'!copyToPasteBuffer	"Save this morph in the paste buffer. This is mostly useful for copying morphs between projects."	argument isMorph		ifTrue: [Cursor wait showWhile: 					[argument okayToDuplicate ifTrue:						[PasteBuffer _ argument topRendererOrSelf veryDeepCopy]]]		ifFalse: [PasteBuffer _ nil].! !!HandMorph methodsFor: 'meta menu' stamp: 'sw 7/1/1998 12:30'!maybeDuplicateMorph	argument okayToDuplicate ifTrue:		[self duplicateMorph]! !!Number methodsFor: 'printing' stamp: 'sw 7/1/1998 12:33'!stringForReadout	^ self rounded printString! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 7/1/1998 12:03'!rootForGrabOf: aMorph	"If open to drag-n-drop, allow submorph to be extracted. If parts bin, copy the submorph."	| root |	root _ aMorph.	[root = self] whileFalse:		[root owner == self ifTrue:			[self isPartsBin				ifTrue:					[^ root topRendererOrSelf veryDeepCopy].			self openToDragNDrop					ifTrue: [^ root]].		root _ root owner].	^ super rootForGrabOf: aMorph! !!TransformationMorph methodsFor: 'accessing' stamp: 'sw 7/1/1998 11:33'!rotationDegrees: degrees	self adjustAfter:		[self angle: degrees degreesToRadians negated]! !Integer removeSelector: #stringForReadout!