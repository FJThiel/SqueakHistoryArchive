ExternalStructure subclass: #Win32Handle	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-Win32'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Win32Handle class	instanceVariableNames: ''!!Win32Handle class methodsFor: 'accessing' stamp: 'ar 1/27/2000 01:07'!fields	"Win32Handle defineFields"	"The following really means		typedef void* Win32Handle;	"	^#(nil	'void*') "an opaque 32bit handle"! !Win32Handle subclass: #Win32HDC	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-Win32'!!Win32HDC methodsFor: 'initialize-release' stamp: 'ar 12/2/1999 18:31'!delete	handle == nil		ifFalse:[self apiDeleteDC: self].	handle _ nil.! !!Win32HDC methodsFor: 'drawing' stamp: 'ar 12/2/1999 18:18'!ellipse: aRect	^self apiEllipse: self with: aRect left with: aRect top with: aRect right with: aRect bottom! !!Win32HDC methodsFor: 'drawing' stamp: 'ar 12/2/1999 18:18'!lineTo: aPoint	^self apiLineTo: self with: aPoint x with: aPoint y! !!Win32HDC methodsFor: 'drawing' stamp: 'ar 12/2/1999 18:19'!moveTo: aPoint	^self apiMoveToEx: self with: aPoint x with: aPoint y with: nil! !!Win32HDC methodsFor: 'drawing' stamp: 'ar 12/2/1999 18:19'!rectangle: aRect	^self apiRectangle: self with: aRect left with: aRect top with: aRect right with: aRect bottom! !!Win32HDC methodsFor: 'drawing' stamp: 'ar 12/2/1999 18:19'!selectObject: aHGDIOBJ	^self apiSelectObject: self with: aHGDIOBJ! !!Win32HDC methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:03'!apiDeleteDC: aHDC	<apicall: bool 'DeleteDC' (Win32HDC) module:'gdi32.dll'>	^self externalCallFailed! !!Win32HDC methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:03'!apiEllipse: aHDC with: left with: top with: right with: bottom	<apicall: bool 'Ellipse' (Win32HDC long long long long) module: 'gdi32.dll'>	^self externalCallFailed! !!Win32HDC methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:03'!apiLineTo: aHDC with: x with: y	<apicall: bool 'LineTo' (Win32HDC long long) module:'gdi32.dll'>	^self externalCallFailed! !!Win32HDC methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:03'!apiMoveToEx: aHDC with: x with: y with: pt	<apicall: bool 'MoveToEx' (Win32HDC long long Win32Point*) module: 'gdi32.dll'>	^self externalCallFailed! !!Win32HDC methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:04'!apiRectangle: aHDC with: left with: top with: right with: bottom	<apicall: bool 'Rectangle' (Win32HDC long long long long) module: 'gdi32.dll'>	^self externalCallFailed! !!Win32HDC methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:04'!apiSelectObject: aHDC with: aHGDIOBJ	<apicall: Win32HGDIObj 'SelectObject' (Win32HDC Win32HGDIObj) module: 'gdi32.dll'>	^self externalCallFailed! !Win32Handle subclass: #Win32HGDIObj	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-Win32'!!Win32HGDIObj methodsFor: 'initialize-release' stamp: 'ar 12/2/1999 18:20'!delete	self apiDeleteObject: self! !!Win32HGDIObj methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:07'!apiDeleteObject: aHGDIOBJ	<apicall: bool 'DeleteObject' (Win32HGDIObj) module: 'gdi32.dll'>	^self externalCallFailed! !Win32HGDIObj subclass: #Win32HBrush	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-Win32'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Win32HBrush class	instanceVariableNames: ''!!Win32HBrush class methodsFor: 'instance creation' stamp: 'ar 1/25/2000 17:03'!createSolidBrush: aCOLORREF	<apicall: Win32HBrush 'CreateSolidBrush' (ulong) module: 'gdi32.dll'>	^self externalCallFailed! !ExternalStructure subclass: #Win32Point	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-Win32'!!Win32Point methodsFor: 'accessing' stamp: 'ar 12/2/1999 23:14'!x	"This method was automatically generated"	^handle signedLongAt: 1! !!Win32Point methodsFor: 'accessing' stamp: 'ar 12/2/1999 23:14'!x: anObject	"This method was automatically generated"	handle signedLongAt: 1 put: anObject! !!Win32Point methodsFor: 'accessing' stamp: 'ar 12/2/1999 23:14'!y	"This method was automatically generated"	^handle signedLongAt: 5! !!Win32Point methodsFor: 'accessing' stamp: 'ar 12/2/1999 23:14'!y: anObject	"This method was automatically generated"	handle signedLongAt: 5 put: anObject! !!Win32Point methodsFor: 'converting' stamp: 'ar 11/21/1999 18:48'!asPoint	^self x @ self y! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Win32Point class	instanceVariableNames: ''!!Win32Point class methodsFor: 'accessing' stamp: 'ar 12/2/1999 23:14'!fields	"POINT defineFields"	^#(		(x 'long')		(y 'long')	)! !!Win32Point class methodsFor: 'instance creation' stamp: 'ar 12/2/1999 18:23'!getCursorPos	| pt |	pt _ self new.	self apiGetCursorPos: pt.	^pt! !!Win32Point class methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:08'!apiGetCursorPos: pt	<apicall: bool 'GetCursorPos' (Win32Point*) module: 'user32.dll'>	^self externalCallFailed! !Win32Handle subclass: #Win32Window	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Examples-Win32'!!Win32Window commentStamp: 'ar 1/28/2000 19:43' prior: 0!Here's a simple Win32 example:	| hwnd dc dst |	hwnd _ Win32Window getFocus. "fetch the window currently having the focus"	dc _ hwnd getDC. "grab the dc or the window"	dst _ 100.	dc moveTo: 0@0.	"draw a rect"	dc lineTo: dst@0. dc lineTo: dst@dst. dc lineTo: 0@dst. dc lineTo: 0@0.	"and a cross"	dc lineTo: dst@dst. dc moveTo: dst@0. dc lineTo: 0@dst.	hwnd releaseDC: dc.!!Win32Window methodsFor: 'accessing' stamp: 'ar 12/2/1999 18:21'!getDC	"Return the DC associated with the window"	^self apiGetDC: self! !!Win32Window methodsFor: 'accessing' stamp: 'ar 1/28/2000 19:40'!getHDCDuring: aBlock	"Provide a Win32 HDC during the execution of aBlock"	| hDC |	hDC _ self getDC.	[aBlock value: hDC] ensure:[self releaseDC: hDC].! !!Win32Window methodsFor: 'accessing' stamp: 'ar 1/27/2000 01:12'!messageBox: aString	"Win32Window getFocus messageBox:'Hello World'"	^self messageBox: aString title:'Squeak'! !!Win32Window methodsFor: 'accessing' stamp: 'ar 1/27/2000 01:13'!messageBox: aString title: aTitle	"Win32Window getFocus messageBox:'Hello World' title:'News from Squeak:'"	^self messageBox: aString title: aTitle flags: 0! !!Win32Window methodsFor: 'accessing' stamp: 'ar 1/27/2000 01:13'!messageBox: aString title: aTitle flags: flags	"Win32Window getFocus messageBox:'Are you ready???' title:'News from Squeak:' flags: 3"	^self apiMessageBox: self text: aString title: aTitle flags: flags! !!Win32Window methodsFor: 'accessing' stamp: 'ar 12/2/1999 18:21'!releaseDC: aHDC	"Release the given DC"	self apiReleaseDC: self with: aHDC! !!Win32Window methodsFor: 'accessing' stamp: 'ar 12/2/1999 18:21'!screenToClient: aPoint	self apiScreenToClient: self with: aPoint.	^aPoint! !!Win32Window methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:09'!apiGetDC: aHWND	<apicall: Win32HDC 'GetDC' (Win32Window) module: 'user32.dll'>	^self externalCallFailed! !!Win32Window methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:09'!apiMessageBox: aHWND text: aString title: aTitle flags: flags	<apicall: long 'MessageBoxA' (Win32Window char* char* ulong) module:'user32.dll'>	^self externalCallFailed! !!Win32Window methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:09'!apiReleaseDC: aHWND with: aHDC	<apicall: long 'ReleaseDC' (Win32Window Win32HDC) module:'user32.dll'>	^self externalCallFailed! !!Win32Window methodsFor: 'api calls' stamp: 'ar 1/25/2000 17:10'!apiScreenToClient: aHWND with: aPOINT	<apicall: bool 'ScreenToClient' (Win32Window Win32Point*) module: 'user32.dll'>	^self externalCallFailed! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Win32Window class	instanceVariableNames: ''!!Win32Window class methodsFor: 'accessing' stamp: 'ar 1/25/2000 17:10'!getDesktopWindow	"Return the HWND describing the desktop"	<apicall: Win32Window 'GetDesktopWindow' (void) module: 'user32.dll'>	^self externalCallFailed! !!Win32Window class methodsFor: 'accessing' stamp: 'ar 1/25/2000 17:10'!getFocus	"Return the HWND currently having the input focus"	<apicall: Win32Window 'GetFocus' (void) module: 'user32.dll'>	^self externalCallFailed! !!Win32Window class methodsFor: 'examples' stamp: 'ar 1/28/2000 19:41'!coloredEllipses "Win32Window coloredEllipses"	"Draw a bunch of ellipses"	| rnd pt1 pt2 w h colors newBrush oldBrush |	colors _ Color colorNames collect:[:cName| (Color perform: cName)].	"convert to COLORREF"	colors _ colors collect:[:c| 		(c red * 255) asInteger + 			((c green * 255) asInteger << 8) + 				((c blue * 255) asInteger << 16)].	rnd _ Random new.	w _ Display width.	h _ Display height.	self getFocus getHDCDuring:[:hDC|		[Sensor anyButtonPressed] whileFalse:[			newBrush _ Win32HBrush createSolidBrush: colors atRandom.			oldBrush _ hDC selectObject: newBrush.			pt1 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.			pt2 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.			hDC ellipse: (Rectangle encompassing: (Array with: pt1 with: pt2)).			hDC selectObject: oldBrush.			newBrush delete.		].	].	Display forceToScreen.! !!Win32Window class methodsFor: 'examples' stamp: 'ar 1/28/2000 19:41'!coloredRectangles "Win32Window coloredRectangles"	"Draw a bunch of ellipses"	| rnd pt1 pt2 w h colors newBrush oldBrush n nPixels time r |	colors _ Color colorNames collect:[:cName| (Color perform: cName)].	"convert to COLORREF"	colors _ colors collect:[:c| 		(c red * 255) asInteger + 			((c green * 255) asInteger << 8) + 				((c blue * 255) asInteger << 16)].	rnd _ Random new.	w _ Display width.	h _ Display height.	self getFocus getHDCDuring:[:hDC|		n _ 0.		nPixels _ 0.		time _ Time millisecondClockValue.		[Sensor anyButtonPressed] whileFalse:[			newBrush _ Win32HBrush createSolidBrush: colors atRandom.			oldBrush _ hDC selectObject: newBrush.			pt1 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.			pt2 _ (rnd next * w) asInteger @ (rnd next * h) asInteger.			hDC rectangle: (r _ Rectangle encompassing: (Array with: pt1 with: pt2)).			hDC selectObject: oldBrush.			newBrush delete.			n _ n + 1.			nPixels _ nPixels + ((r right - r left) * (r bottom - r top)).			(n \\ 100) = 0 ifTrue:[				'Pixel fillRate: ', (nPixels * 1000 // (Time millisecondClockValue - time))					asStringWithCommas displayAt: 0@0].		].	].	Display forceToScreen.! !!Win32Window class methodsFor: 'examples' stamp: 'ar 1/28/2000 17:49'!win32Draw "Win32Window win32Draw"	"Draw a bunch of lines using the Windows API"	| hWnd hDC pt |	hWnd _ Win32Window getFocus.	hDC _ hWnd getDC.	hDC moveTo: (hWnd screenToClient: Win32Point getCursorPos).	[Sensor anyButtonPressed] whileFalse:[		pt _ Win32Point getCursorPos.		hWnd screenToClient: pt.		hDC lineTo: pt.	].	hWnd releaseDC: hDC.	Display forceToScreen.! !Win32Handle compileFields!Win32HDC compileFields!Win32HGDIObj compileFields!Win32HBrush compileFields!Win32Point compileFields!Win32Window compileFields!