'From Squeak3.8beta of ''22 October 2004'' [latest update: #6351] on 27 October 2004 at 2:31:43 pm'!"Change Set:		Syntaxfixes2Date:			27 October 2004Author:			Marcus DenkerFixes some more sytnax problem for the new compiler (to:do: without Arg,dots in first line..."!!IntegerTest methodsFor: 'testing - printing' stamp: 'md 10/20/2004 15:20'!testIntegerByteEncoded	self assert: (String streamContents: [:s| 2 byteEncode: s base: 2]) = '$1$0'.	self assert: (String streamContents: [:s| 21 byteEncode: s base: 3]) = '$2$1$0'.	self assert: (String streamContents: [:s| 228 byteEncode: s base: 4]) = '$3$2$1$0'.	self assert: (String streamContents: [:s| 2930 byteEncode: s base: 5]) = '$4$3$2$1$0'.	self assert: (String streamContents: [:s| 44790 byteEncode: s base: 6]) = '$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 800667 byteEncode: s base: 7]) = '$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 16434824 byteEncode: s base: 8]) = '$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 381367044 byteEncode: s base: 9]) = '$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 9876543210 byteEncode: s base: 10]) = '$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 282458553905 byteEncode: s base: 11]) = '$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 8842413667692 byteEncode: s base: 12]) = '$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 300771807240918 byteEncode: s base: 13]) = '$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 11046255305880158 byteEncode: s base: 14]) = '$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 435659737878916215 byteEncode: s base: 15]) = '$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| 18364758544493064720 byteEncode: s base: 16]) = '$F$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -2 byteEncode: s base: 2]) = '$-$1$0'.	self assert: (String streamContents: [:s| -21 byteEncode: s base: 3]) = '$-$2$1$0'.	self assert: (String streamContents: [:s| -228 byteEncode: s base: 4]) = '$-$3$2$1$0'.	self assert: (String streamContents: [:s| -2930 byteEncode: s base: 5]) = '$-$4$3$2$1$0'.	self assert: (String streamContents: [:s| -44790 byteEncode: s base: 6]) = '$-$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -800667 byteEncode: s base: 7]) = '$-$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -16434824 byteEncode: s base: 8]) = '$-$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -381367044 byteEncode: s base: 9]) = '$-$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -9876543210 byteEncode: s base: 10]) = '$-$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -282458553905 byteEncode: s base: 11]) = '$-$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -8842413667692 byteEncode: s base: 12]) = '$-$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -300771807240918 byteEncode: s base: 13]) = '$-$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -11046255305880158 byteEncode: s base: 14]) = '$-$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -435659737878916215 byteEncode: s base: 15]) = '$-$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.	self assert: (String streamContents: [:s| -18364758544493064720 byteEncode: s base: 16]) = '$-$F$E$D$C$B$A$9$8$7$6$5$4$3$2$1$0'.! !!MessageNode methodsFor: 'initialize-release' stamp: 'md 10/20/2004 15:32'!receiver: rcvr selector: aSelector arguments: args precedence: p from: encoder 	"Compile."	| theSelector |	self receiver: rcvr		arguments: args		precedence: p.	aSelector = #':Repeat:do:'		ifTrue: [theSelector _ #do:]		ifFalse: [theSelector _ aSelector].	self noteSpecialSelector: theSelector.	(self transform: encoder)		ifTrue: 			[selector isNil				ifTrue: [selector _ SelectorNode new 							key: (MacroSelectors at: special)							code: #macro]]		ifFalse: 			[selector _ encoder encodeSelector: theSelector.			rcvr == NodeSuper ifTrue: [encoder noteSuper]].	self pvtCheckForPvtSelector: encoder! !!MultiByteBinaryOrTextStream methodsFor: 'as yet unclassified' stamp: 'md 10/20/2004 15:32'!basicNext: anInteger	^ super next: anInteger.! !!PNMReadWriter methodsFor: 'reading' stamp: 'md 10/20/2004 15:45'!readData	"generic data"	| data nBits nBytes val sample |	stream binary.	data _ OrderedCollection new.	nBits _ maxValue floorLog:2.	nBytes _ (nBits+1) >> 3.	(nBits+1 rem: 8) > 0 ifTrue:[nBytes _ nBytes+1].	0 to: rows-1 do: [:y |		0 to: cols-1 do: [:x |			val _ 0.			1 to: nBytes do: [:n |				sample _ stream next.				val _ val << 8 + sample.			].			data add: val.		]	].	^data! !!PluggableMessageCategoryListMorph methodsFor: 'as yet unclassified' stamp: 'md 10/20/2004 15:32'!on: anObject list: getListSel selected: getSelectionSel changeSelected: setSelectionSel menu: getMenuSel keystroke: keyActionSel getRawListSelector: getRawSel	self model: anObject.	getListSelector _ getListSel.	getIndexSelector _ getSelectionSel.	setIndexSelector _ setSelectionSel.	getMenuSelector _ getMenuSel.	keystrokeActionSelector _ keyActionSel.	autoDeselect _ true.	self borderWidth: 1.	getRawListSelector _ getRawSel.	self updateList.	self selectionIndex: self getCurrentSelectionIndex.	self initForKeystrokes! !!SMLoader methodsFor: 'menus' stamp: 'md 10/20/2004 15:33'!categorySpecificOptions	| choices |	choices := OrderedCollection new.	(categoriesToFilterIds includes: self selectedCategory id)		ifTrue: [			choices add: #('remove filter' #removeSelectedCategoryAsFilter 'Remove the filter for the selected category.')]		ifFalse: [			choices add: #('add as filter' #addSelectedCategoryAsFilter 'Add the selected category as a filter so that only packages in that category are shown.')].	categoriesToFilterIds isEmpty ifFalse: [		choices add: #('remove all category filters' #removeCategoryFilters 'Remove all category filters.')].	^ choices! !