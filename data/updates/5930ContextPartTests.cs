'From Squeak3.7beta of ''1 April 2004'' [latest update: #5923] on 31 May 2004 at 5:27 pm'!TestCase subclass: #BlockContextTest	instanceVariableNames: 'aBlockContext contextOfaBlockContext'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Methods-Tests'!!BlockContextTest commentStamp: 'tlk 5/31/2004 12:15' prior: 0!I am an SUnit Test of BlockContext and its supertype ContextPart.  See also MethodContextTest.My fixtures are:aBlockContext     - just some trivial block, i.e., [100@100 corner: 200@200] !Smalltalk renameClassNamed: #ContextPartTest as: #MethodContextTest!TestCase subclass: #MethodContextTest	instanceVariableNames: 'aCompiledMethod aReceiver aMethodContext aSender'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Methods-Tests'!!MethodContextTest commentStamp: 'tlk 5/31/2004 16:07' prior: 0!I am an SUnit Test of MethodContext and its super type, ContextPart. See also BlockContextTest.See pages 430-437 of A. Goldberg and D. Robson's  Smalltalk-80 The Language (aka the purple book), which deal with Contexts. My fixtures are from their example. (The Squeak byte codes are not quite the same as Smalltalk-80.)My fixtures are:aReceiver         - just some arbitrary object, "Rectangle origin: 100@100 corner: 200@200"aSender           - just some arbitrary object, thisContextaCompiledMethod - just some arbitrary method, "Rectangle rightCenter".aMethodContext   - just some arbitray context ...  !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 14:00'!testBlockIsBottomContext	self	should: [aBlockContext client ] raise: Error. "block's sender is nil, a block has no client"	self assert: aBlockContext bottomContext = aBlockContext.	self assert: aBlockContext secondFromBottom isNil.! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 13:49'!testCopyStack	self assert: aBlockContext copyStack printString = aBlockContext printString.! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 13:55'!testFindContextSuchThat	self assert: (aBlockContext findContextSuchThat: [:each| true]) printString = aBlockContext printString.	self assert: (aBlockContext hasContext: aBlockContext).  ! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 13:13'!testNew	self	should: [ContextPart new: 5] raise: Error.	[ContextPart new: 5]		ifError: [:error :receiver | error = 'Error: Contexts must only be created with newForMethod:'].	[ContextPart new]		ifError: [:error :receiver | error = 'Error: Contexts must only be created with newForMethod:'].		[ContextPart basicNew]		ifError: [:error :receiver | error = 'Error: Contexts must only be created with newForMethod:'].				! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 12:50'!testRunSimulated	self assert: (ContextPart runSimulated: aBlockContext) class = Rectangle.! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 13:59'!testSetUp	"Note: In addition to verifying that the setUp worked the way it was expected to, testSetUp is used to illustrate the meaning of the simple access methods, methods that are not normally otherwise 'tested'"	self deny: aBlockContext isBlockClosure.	self deny: aBlockContext isMethodContext.	self deny: aBlockContext isPseudoContext.	self deny: aBlockContext isDead.	self assert: aBlockContext home = contextOfaBlockContext.	self assert: aBlockContext blockHome = contextOfaBlockContext.	self assert: aBlockContext receiver = self.	self assert: (aBlockContext method isKindOf: CompiledMethod).	self assert: aBlockContext methodNode selector = 'setUp'.	self assert: (aBlockContext methodNodeFormattedAndDecorated: true) selector = 'setUp'.! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 12:32'!testTallyInstructions	self assert: (ContextPart tallyInstructions: aBlockContext) size = 17.! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 12:30'!testTallyMethods	self assert: (ContextPart tallyMethods: aBlockContext) size = 4.! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 12:48'!testTrace	self assert: (ContextPart trace: aBlockContext) class = Rectangle.! !!BlockContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 17:14'!testValueWithArguments	self		should: [aBlockContext				valueWithArguments: #(1 )]		raise: Error.	self		shouldnt: [aBlockContext				valueWithArguments: #()]		raise: Error.	[aBlockContext		valueWithArguments: #(1 )]		ifError: [:err :rcvr | self assert: err = 'Error: This block accepts 0 arguments, but was called with 1.'].	[[:i | 3 + 4]		valueWithArguments: #(1 2)]		ifError: [:err :rcvr | self assert: err = 'Error: This block accepts 1 argument, but was called with 2.']! !!BlockContextTest methodsFor: 'Running' stamp: 'tlk 5/31/2004 12:36'!setUp	super setUp.	aBlockContext _ [100@100 corner: 200@200].	contextOfaBlockContext _ thisContext.! !!MethodContextTest methodsFor: 'testing' stamp: 'tlk 5/30/2004 13:35'!testActivateReturnValue	self assert:  ((aSender activateReturn: aMethodContext value: #()) isKindOf: MethodContext).	self assert:  ((aSender activateReturn: aMethodContext value: #()) receiver = aMethodContext).! !!MethodContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 17:09'!testCopyStack	self assert: aMethodContext copyStack printString = aMethodContext printString.! !!MethodContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 17:10'!testFindContextSuchThat	self assert: (aMethodContext findContextSuchThat: [:each| true]) printString = aMethodContext printString.	self assert: (aMethodContext hasContext: aMethodContext). ! !!MethodContextTest methodsFor: 'testing' stamp: 'tlk 5/30/2004 10:57'!testMethodContext	self deny: aMethodContext isPseudoContext.	self assert: aMethodContext home notNil.	self assert: aMethodContext receiver notNil.	self assert: (aMethodContext method isKindOf: CompiledMethod).! !!MethodContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 17:08'!testMethodIsBottomContext	self assert: aMethodContext bottomContext = aSender.	self assert: aMethodContext secondFromBottom = aMethodContext.! !!MethodContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 16:55'!testReturn	"Why am I overriding setUp? Because sender must be thisContext, i.e, testReturn, not setUp."	aMethodContext _ MethodContext sender: thisContext receiver: aReceiver method: aCompiledMethod arguments: #(). 	self assert: (aMethodContext return: 5) = 5.! !!MethodContextTest methodsFor: 'testing' stamp: 'tlk 5/31/2004 16:52'!testSetUp	"Note: In addition to verifying that the setUp worked the way it was expected to, testSetUp is used to illustrate the meaning of the simple access methods, methods that are not normally otherwise 'tested'"	self assert: aMethodContext isMethodContext.	self deny: aMethodContext isBlockClosure.	self deny: aMethodContext isPseudoContext.	self deny: aMethodContext isDead.	"self assert: aMethodContext home = aReceiver."	"self assert: aMethodContext blockHome = aReceiver."	self assert: aMethodContext receiver = aReceiver.	self assert: (aMethodContext method isKindOf: CompiledMethod).	self assert: aMethodContext method = aCompiledMethod.	self assert: aMethodContext methodNode selector = #rightCenter.	self assert: (aMethodContext methodNodeFormattedAndDecorated: true) selector = #rightCenter.	self assert: aMethodContext client printString = 'MethodContextTest>>#testSetUp'.! !!MethodContextTest methodsFor: 'Running' stamp: 'tlk 5/31/2004 16:18'!setUp	super setUp.	aCompiledMethod _ Rectangle methodDict at: #rightCenter.	aReceiver _ 100@100 corner: 200@200.	aSender _ thisContext.	aMethodContext _ MethodContext sender: aSender receiver: aReceiver method: aCompiledMethod arguments: #(). ! !MethodContextTest removeSelector: #testBlockContext!MethodContextTest removeSelector: #testBlockIsBottomContext!MethodContextTest removeSelector: #testJump!MethodContextTest removeSelector: #testNew!MethodContextTest removeSelector: #testRestart!MethodContextTest removeSelector: #testResume!MethodContextTest removeSelector: #testRunUntilErrorOrReturnFrom!MethodContextTest removeSelector: #testX!MethodContextTest removeSelector: #testX2!!MethodContextTest reorganize!('testing' testActivateReturnValue testCopyStack testFindContextSuchThat testMethodContext testMethodIsBottomContext testReturn testSetUp)('Running' setUp)!BlockContextTest removeSelector: #testPushAndPopb!BlockContextTest removeSelector: #testStepping!!BlockContextTest reorganize!('testing' testBlockIsBottomContext testCopyStack testFindContextSuchThat testNew testNoArguments testOneArgument testRunSimulated testSetUp testTallyInstructions testTallyMethods testTrace testValueWithArguments)('Running' setUp)!