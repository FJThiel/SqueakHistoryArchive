'From Squeak2.8alpha of 13 January 2000 [latest update: #1870] on 23 February 2000 at 7:17:39 pm'!Model subclass: #Project	instanceVariableNames: 'world changeSet transcript parentProject previousProject displayDepth activeProcess exitFlag viewSize thumbnail nextProject guards projectParameters isolatedHead inForce classArray methodDictArray orgArray version urlList '	classVariableNames: 'CurrentProject UsingIsolation '	poolDictionaries: ''	category: 'System-Support'!!Base64MimeConverter class methodsFor: 'as yet unclassified' stamp: 'tk 2/19/2000 15:53'!decodeInteger: mimeString	| bytes sum |	"Decode the MIME string into an integer of any length"	bytes _ (Base64MimeConverter mimeDecodeToBytes: 				(ReadStream on: mimeString)) contents.	sum _ 0.	bytes reverseDo: [:by | sum _ sum * 256 + by].	^ sum! !!Base64MimeConverter class methodsFor: 'as yet unclassified' stamp: 'tk 2/21/2000 17:22'!encodeInteger: int	| strm |	"Encode an integer of any length and return the MIME string"	strm _ ReadWriteStream on: (ByteArray new: int digitLength).	1 to: int digitLength do: [:ii | strm nextPut: (int digitAt: ii)].	strm reset.	^ ((self mimeEncode: strm) contents) copyUpTo: $=	"remove padding"! !!FileList methodsFor: 'file list menu' stamp: 'tk 2/23/2000 19:06'!itemsForFileEnding: suffix	| labels lines selectors |	labels _ OrderedCollection new.	lines _ OrderedCollection new.	selectors _ OrderedCollection new.	(suffix = 'bmp') | (suffix = 'gif') | (suffix = 'jpg') | (suffix = 'form') | (suffix = '*') ifTrue:		[labels addAll: #('open image in a window' 'read image into ImageImports'						 'open image as background').		selectors addAll: #(openImageInWindow importImage openAsBackground)].	(suffix = 'morph') | (suffix = 'morphs') | (suffix = 'sp') | (suffix = '*') ifTrue:		[labels add: 'load as morph'.		selectors add: #openMorphFromFile.		labels add: 'load as project'.		selectors add: #openProjectFromFile].	(suffix = 'extseg') | (suffix = 'project') | (suffix = 'pr') ifTrue:		[labels add: 'load as project'.		selectors add: #openProjectFromFile].	(suffix = 'bo') | (suffix = '*') ifTrue:[		labels add: 'load as book'.		selectors add: #openBookFromFile].	(suffix = 'mid') | (suffix = '*') ifTrue:		[labels add: 'play midi file'.		selectors add: #playMidiFile].	(suffix = 'movie') | (suffix = '*') ifTrue:		[labels add: 'open as movie'.		selectors add: #openAsMovie].	(suffix = 'st') | (suffix = 'cs') | (suffix = '*') ifTrue:		[suffix = '*' ifTrue: [lines add: labels size].		labels addAll: #('fileIn' 'file into new change set' 'browse changes' 'browse code' 'remove line feeds' 'broadcast as update').		lines add: labels size - 1.		selectors addAll: #(fileInSelection fileIntoNewChangeSet browseChanges browseFile removeLinefeeds putUpdate)].	(suffix = 'swf') | (suffix = '*') ifTrue:[		labels add:'open as Flash'.		selectors add: #openAsFlash].	(suffix = 'ttf') | (suffix = '*') ifTrue:[		labels add: 'open true type font'.		selectors add: #openAsTTF].	(suffix = 'gz') | (suffix = '*') ifTrue:[		labels addAll: #('view decompressed' 'decompress to file').		selectors addAll: #(viewGZipContents saveGZipContents)].	(suffix = '3ds') | (suffix = '*') ifTrue:[		labels add: 'Open 3DS file'.		selectors add: #open3DSFile].	(suffix = 'tape') | (suffix = '*') ifTrue:		[labels add: 'open for playback'.		selectors add: #openTapeFromFile].	(suffix = 'wrl') | (suffix = '*') ifTrue:		[labels add: 'open in Wonderland'.		selectors add: #openVRMLFile].	(suffix = '*') ifTrue:		[labels addAll: #('generate HTML').		lines add: labels size - 1.		selectors addAll: #(renderFile)].	^ Array with: labels with: lines with: selectors! !!ImageSegment methodsFor: 'read/write segment' stamp: 'tk 2/21/2000 14:32'!writeForExportWithSources: fName	"Write the segment on the disk with all info needed to reconstruct it in a new image.  For export.  Out pointers are encoded as normal objects on the disk.  Append the source code of any classes in roots.  Target system will quickly transfer the sources to its changes file."	| fileStream temp classes |	state = #activeCopy ifFalse: [self error: 'wrong state'].	(fName includes: $.) ifFalse: [		^ self inform: 'Please use ''.pr'' or ''.extSeg'' at the end of the file name'.].	temp _ endMarker.	endMarker _ nil.	fileStream _ FileStream newFileNamed: fName.	fileStream fileOutClass: nil andObject: self.		"remember extra structures.  Note class names."	endMarker _ temp.	"append sources"	classes _ arrayOfRoots select: [:cls | 		(cls isKindOf: Behavior) and: [cls theNonMetaClass isSystemDefined]].	classes size = 0 ifTrue: [^ self].	fileStream reopen; setToEnd.	fileStream nextPutAll: '\\!!ImageSegment new!!\\' withCRs.	classes do: [:cls | 		cls isMeta ifFalse: [fileStream nextPutAll: 						(cls name, ' category: ''', cls category, '''.!!'); cr; cr].		cls organization			putCommentOnFile: fileStream			numbered: 0			moveSource: false			forClass: cls.	"does nothing if metaclass"		cls organization categories do: 			[:heading |			cls fileOutCategory: heading				on: fileStream				moveSource: false				toFile: 0]].	"no class initialization -- it came in as a real object"	fileStream close.! !!Password commentStamp: 'tk 2/19/2000 10:53' prior: 0!"Hold a password.  There are three ways to get the password.If there is no password (sequence == nil), ask the user for it.If the use supplied one during this session, return that.  It is cleared at shutDown.If sequence is a number, get the server passwords off the disk.  File 'sqk.info' must be in the same folder 'Squeak.sources' file.  Decode the file.  Return the password indexed by sequence."!!Password methodsFor: 'as yet unclassified' stamp: 'tk 2/19/2000 10:50'!serverPasswords	"Get the server passwords off the disk.  Decode them.  File 'sqk.info' must be in the same folder 'Squeak.sources' file."	| raw dir |	dir _ (SourceFiles at: 1) directory.	(dir fileExists: 'sqk.info') ifFalse: [^ nil].	"Caller will ask user for password"	raw _ (dir oldFileNamed: 'sqk.info') contentsOfEntireFile.		"If you don't have this file, and you really do want to release 		an update, contact Ted Kaehler."	^ (self decode: raw) findTokens: String cr.! !!Project methodsFor: 'file in/out' stamp: 'tk 2/21/2000 14:30'!exportSegmentWithCatagories: catList classes: classList	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."| is response str ans revertSeg roots |world == World ifTrue: [^ false]. 	"self inform: 'Can''t send the current world out'."world isMorph ifFalse: [	self projectParameters at: #isMVC put: true.	^ false].	"Only Morphic projects for now"world ifNil: [^ false].  world presenter ifNil: [^ false].Utilities emptyScrapsBook.World currentHand objectToPaste ifNotNil: [	response _ (PopUpMenu labels: 'Delete\Keep' withCRs)		startUpWithCaption: 'Hand is holding a Morph in its paste buffer:\' withCRs,			World currentHand objectToPaste printString.	response = 1 ifTrue: [World currentHand clearPasteBuffer]].world fullReleaseCachedState. "Just export me, not my previous version"revertSeg _ self projectParameters at: #revertToMe ifAbsent: [nil].self projectParameters removeKey: #revertToMe ifAbsent: [].roots _ (Array with: self) asOrderedCollection, classList, (classList collect: [:cls | cls class]).catList do: [:sysCat | 	(SystemOrganization listAtCategoryNamed: sysCat asSymbol) do: [:symb |		roots add: (Smalltalk at: symb); add: (Smalltalk at: symb) class]].is _ ImageSegment new copyFromRootsForExport: roots asArray.	"world, and all Players"is state = #tooBig ifTrue: [^ false].str _ ''.is segment size < 3000 ifTrue: [	str _ 'Segment is only ', is segment size printString, ' long.'].(is outPointers detect: [:out | out isMorph] ifNone: [nil]) ifNotNil: [	str _ str, '\Morphs are pointed at from the outside.' withCRs].(is outPointers includes: world) ifTrue: [	str _ str, '\Project''s own world is not in the segment.' withCRs].str isEmpty ifFalse: [	ans _ (PopUpMenu labels: 'Do not write fileWrite file anywayDebug') startUpWithCaption: str.	ans = 1 ifTrue: [		revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].		^ false].	ans = 3 ifTrue: [self halt: 'Segment not written']].is writeForExportWithSources: self name, '.pr'.revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].^ true! !!Project methodsFor: 'file in/out' stamp: 'tk 2/23/2000 19:09'!loadFromServer	| servers pair resp thumbnailWindow |	"If a newer version of me is on the server, load it."	(servers _ self serverList) isEmpty 		ifTrue: [^ self inform: 'This project thinks it has never been on a server'].	pair _ self class mostRecent: self name onServer: servers first.	pair first ifNil: [^ self inform: 'can''t find file on server'].	version = (pair first findTokens: '_.') second ifTrue: [				resp _ (PopUpMenu labels: 'Reload anyway\Cancel' withCRs) startUpWithCaption: 					'The only changes are the ones you made here.'.				resp ~= 1 ifTrue: [^ nil]].	"Find parent project, go there, zap old thumbnail"	parentProject == Project current ifFalse: [parentProject enter].	parentProject world submorphsDo: [:sub | 		(sub isKindOf: SystemWindow) ifTrue: [			(sub findA: ProjectViewMorph) ifNotNil: [				thumbnailWindow _ sub]]].	thumbnailWindow delete.	thumbnailWindow owner ifNotNil: [^ self].	"user refused"	"replace with a new one"	ProjectViewMorph openFromFile: (servers first oldFileNamed: pair first).		"Later check rest of servers if fails.  Still have list here"! !!Project methodsFor: 'file in/out' stamp: 'tk 2/22/2000 14:35'!newVersion: fileNameAndNumberPair	| resp versHere |	"Figure out what the next version should be and return as a Mime Encoded base 64 number, HTTP encoded (for the slash)"	fileNameAndNumberPair first		ifNil: [version 			ifNil: ["not on server and ours is new"  ^ 'AA']			ifNotNil: ["not on server and we have stored before" 					^ Project bumpVersion: version]]		ifNotNil: [version 			ifNil: ["on server already, and ours has never been stored"				resp _ (PopUpMenu labels: 'Store\Cancel' withCRs) startUpWithCaption: 				'Replace project ', self name, ' on the server',				'\with this completely new and unrelated version?' withCRs.				resp ~= 1 ifTrue: [^ nil].				^ Project bumpVersion: fileNameAndNumberPair second]			ifNotNil: ["present on server, and we expect that.  Compare numbers"				versHere _ Base64MimeConverter decodeInteger: version unescapePercents.				versHere < fileNameAndNumberPair second ifTrue: ["Warn of intervening versions"					resp _ (PopUpMenu labels: 'Store anyway\Cancel' withCRs) startUpWithCaption: 						'There is a newer version of project ', self name, ' on the server.',						'\Please cancel, rename this project, and see what is there.' withCRs.						resp ~= 1 ifTrue: [^ nil]].				^ Project bumpVersion: (versHere max: fileNameAndNumberPair second)]].! !!Project methodsFor: 'file in/out' stamp: 'tk 2/22/2000 14:07'!serverList	"Take my list of server URLs and return a list of ServerDirectories to write on.  Each starts with ftp://"	urlList ifNil: [^ urlList _ Array new: 0].	^ urlList collect: [:url | 		ServerDirectory new fullPath: url]! !!Project methodsFor: 'file in/out' stamp: 'tk 2/22/2000 19:53'!storeOnServer	| servers pair newVersion resp newName local folder |	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	"write locally"	self exportSegment.	"Find out what version"	(servers _ self serverList) isEmpty 		ifTrue: [folder _ PluggableFileList getFolderDialog openLabel:					 'Select a folder on a server:'.			folder ifNil: [^ self].			servers _ Array with: folder.			urlList _ Array with: folder realUrl.			pair _ Array with: nil with: -1]		ifFalse: [pair _ self class mostRecent: self name onServer: servers first].	(newVersion _ self newVersion: pair) ifNil: [^ self].	newName _ self name, '_', newVersion, '.pr'.	local _ FileStream oldFileNamed: self name, '.pr'.	resp _ servers first putFile: local named: newName.	resp ifFalse: [self inform: 'the primary server of this project seems to be down'.  ^ self].	version _ newVersion.	"committed"	"Store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	2 to: servers size do: [:aServer | aServer putFile: local named: newName].	"Rename disk file to be the final name"	local reset.	FileDirectory default rename: local localName toBe: newName.! !!Project methodsFor: 'file in/out' stamp: 'tk 2/23/2000 00:28'!versionFrom: aServerFile	| theName |	"Store the version of the file I actually came from.  My stored version was recorded before I knew the latest version number on the server!!"	theName _ (aServerFile class == String) 			ifTrue: [aServerFile] 			ifFalse: [aServerFile localName].	version _ (theName findTokens: '_.') second! !!Project methodsFor: 'object fileIn' stamp: 'tk 2/21/2000 15:31'!convertdwctppdaevtngpiicmo0: varDict dwctppdaevtngpiicmovu0: smartRefStrm	"These variables are automatically stored into the new instance ('world' 'changeSet' 'transcript' 'parentProject' 'previousProject' 'displayDepth' 'activeProcess' 'exitFlag' 'viewSize' 'thumbnail' 'nextProject' 'guards' 'projectParameters' 'isolatedHead' 'inForce' 'classArray' 'methodDictArray' 'orgArray' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: ('version' 'urlList' )  If a non-nil value is needed, please assign it."! !!Project class methodsFor: 'utilities' stamp: 'tk 2/23/2000 00:22'!thumbnailFromUrl: urlString	| preStream |	"Load the project, and make a thumbnail to it in the current project.Project thumbnailFromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/SqueakEasy.extSeg'."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	World ifNil: [^ self inform: 			'Later, allow jumping from MVC to Morphic Projects.'].	preStream _ (ServerFile new fullPath: urlString) asStream.	ProjectViewMorph openFromFile: preStream.! !!Project class methodsFor: 'squeaklet on server' stamp: 'tk 2/21/2000 17:38'!bumpVersion: versString	"Version is literal piece of file name.  Mime encoded and http encoded.  Decode and add one."	versString isInteger ifTrue: [		^ (Base64MimeConverter encodeInteger: versString + 1) 					encodeForHTTP].	^ (Base64MimeConverter encodeInteger: 		((Base64MimeConverter decodeInteger: 				versString unescapePercents) + 1)) 					encodeForHTTP! !!Project class methodsFor: 'squeaklet on server' stamp: 'tk 2/21/2000 17:01'!mostRecent: projName onServer: aServerDirectory	| stem list max goodName triple num |	"Find the exact fileName of the most recent version of project with the stem name of projName.  Names are of the form 'projName_mm.pr' where mm is a mime-encoded integer version number."	stem _ projName, '_'.	list _ aServerDirectory fileNames.	list class == String ifTrue: [^ self inform: 'server is unavailable'].	max _ -1.  goodName _ nil.	list do: [:aName | 		(aName beginsWith: stem) ifTrue: [			(triple _ aName findTokens: '_.') size = 3 ifTrue: [				num _ Base64MimeConverter decodeInteger: triple second unescapePercents.				num > max ifTrue: [max _ num.  goodName _ aName]]]].	^ Array with: goodName with: max! !!Project class methodsFor: 'squeaklet on server' stamp: 'tk 2/19/2000 15:14'!sweep: aServerDirectory	| repository list parts ind entry projectName versions |	"On the server, move all but the three most recent versions of each Squeaklet to a folder called 'older'"	"Project sweep: ((ServerDirectory serverNamed: 'DaniOnJumbo') clone 				directory: '/vol0/people/dani/Squeaklets/2.7')"	"Ensure the 'older' directory"	(aServerDirectory includesKey: 'older') 		ifFalse: [aServerDirectory createDirectory: 'older'].	repository _ aServerDirectory clone directory: aServerDirectory directory, '/older'.	"Collect each name, and decide on versions"	list _ aServerDirectory fileNames.	list class == String ifTrue: [^ self inform: 'server is unavailable'].	list _ list asSortedCollection asOrderedCollection.	parts _ list collect: [:en | en findTokens: '_.'].	parts _ parts select: [:en | en size = 3 and: [en third = 'pr']].	ind _ 1.	[entry _ list at: ind.		projectName _ entry first asLowercase.		versions _ OrderedCollection new.  versions add: entry.		[(ind _ ind + 1) > list size 			ifFalse: [(parts at: ind) first asLowercase = projectName 				ifTrue: [versions add: (parts at: ind).  true]				ifFalse: [false]]			ifTrue: [false]] whileTrue.		aServerDirectory moveYoungest: 3 in: versions to: repository.		ind > list size] whileFalse.! !!ProjectViewMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/22/2000 13:55'!mouseMove: evt	| menu selection |	(self containsPoint: evt cursorPoint)		ifTrue:			[self showBorderAs: Color red.			mouseDownTime				ifNil:					[mouseDownTime _ Time millisecondClockValue]				ifNotNil:					[((Time millisecondClockValue - mouseDownTime) > 1100)						ifTrue:							[menu _ CustomMenu new.							menu add: 'enter this project' action: #enter.							menu add: 'save on server and locally' action: #storeOnServer.							menu add: 'load latest version from server' action: #loadFromServer.							selection _ (menu build preSelect: #enter) startUpCenteredWithCaption: ('Project Named', 								'"', project name, '"').							selection = #enter ifTrue: [^ self enter].							selection = #storeOnServer ifTrue: [^ project storeOnServer].							selection = #loadFromServer ifTrue: [^ project loadFromServer].							]]]		ifFalse:			[self showBorderAs: Color blue.			mouseDownTime _ nil]! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'tk 2/23/2000 00:29'!openFromFile: preStream	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world." 	| aFileStream morphOrList window proj |	(preStream localName asLowercase endsWith: '.gz')		ifTrue: [aFileStream _ (RWBinaryOrTextStream with:					(GZipReadStream on: preStream) upToEnd) reset.				preStream close.]		ifFalse: [aFileStream _ preStream].	morphOrList _ aFileStream fileInObjectAndCode.	(morphOrList isKindOf: ImageSegment) ifTrue: [		proj _ morphOrList arrayOfRoots detect: [:mm | mm class == Project] 					ifNone: [nil].		"rename the project if it conflicts?"		proj ifNotNil: [proj versionFrom: preStream localName.			window _ (SystemWindow labelled: proj name) model: proj.			window				addMorph: (self on: proj)				frame: (0@0 corner: 1.0@1.0).			window openInWorld.			proj enter]].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList _ morphOrList contentsMorph].	(morphOrList isKindOf: PasteUpMorph) ifFalse: [		^ self inform: 'This is not a PasteUpMorph or exported Project.'].	(window _ self newMorphicProjectOn: morphOrList) openInWorld.	window model enter! !!ServerDirectory methodsFor: 'file directory' stamp: 'tk 2/22/2000 19:51'!directoryNames	"Return a collection of names for the subdirectories of this directory."	"(ServerDirectory serverNamed: 'UIUCArchive') directoryNames"	^ (self entries select: [:entry | entry at: 4])		collect: [:entry | entry first]! !!ServerDirectory methodsFor: 'file directory' stamp: 'tk 2/22/2000 19:47'!fileNames	"Return a collection of names for the files (but not directories) in this directory."	"(ServerDirectory serverNamed: 'UIUCArchive') fileNames"	^ (self entries select: [:entry | (entry at: 4) not])		collect: [:entry | entry first]! !!ServerDirectory methodsFor: 'squeaklets' stamp: 'tk 2/20/2000 18:34'!moveAllButYoungest: young in: versions to: repository	| all fName aVers bVers |	"Specialized to files with names of the form 'aName_vvv.ext'.  Where vvv is a mime-encoded base 64 version number.  Versions is an array of file names tokenized into three parts (aName vvv ext).  Move the files by renaming them on the server."	versions size <= young ifTrue: [^ self].	all _ SortedCollection sortBlock: [:aa :bb | 		aVers _ Base64MimeConverter decodeInteger: aa second unescapePercents.		bVers _ Base64MimeConverter decodeInteger: bb second unescapePercents.		aVers < bVers].	all addAll: versions.	young timesRepeat: [all removeLast].	"ones we keep"	all do: [:vv |		fName _ vv first, '_', vv second, '.', vv third.		repository rename: self fullName,fName toBe: fName].! !!ServerFile commentStamp: 'tk 2/23/2000 19:17' prior: 0!Represents the non-data part of a file on a server on the internet.  I am owned by a RemoteFileStream, who has the data.Since FileStream is a Stream and I am not, use this to always get a stream:	xxx isStream ifFalse: [^ xxx asStream].!!ServerFile methodsFor: 'as yet unclassified' stamp: 'tk 2/23/2000 19:16'!asStream	"Return a RemoteFileStream (subclass of RWBinaryOrTextStream) on the contents of the remote file I represent.  For reading only.  This method is probably misnamed.  Maybe call it makeStream"	^ self readOnlyFileNamed: self fileName! !"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."(ServerDirectory serverNames includes: 'DaniOnJumbo') ifTrue: [	(ServerDirectory serverNamed: 'DaniOnJumbo') password: 6;			type: #ftp;			directory: '/vol0/people/dani/Squeaklets/2.7'].!