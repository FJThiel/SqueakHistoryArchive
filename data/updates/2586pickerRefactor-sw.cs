'From Squeak2.9alpha of 26 July 2000 [latest update: #2574] on 8 September 2000 at 8:54:07 pm'!"Change Set:		pickerRefactor-swDate:			8 September 2000Author:			Scott WallaceRefactors ColorPickerMorph so that the modality/nonmodality can be specified as a parameter in an initialization call, rather than being predetermined as soon as the supermost initialize is run.  This allows us to have occasional non-modal pickers even though the modalColorPickers preference is set to true, for the benefit of, e.g., specifying both colors of a gradien fill."!SketchMorph subclass: #ColorPickerMorph	instanceVariableNames: 'selectedColor sourceHand deleteOnMouseUp updateContinuously target selector argument originalColor theSelectorDisplayMorph command includesTransparency isModal '	classVariableNames: 'ColorChart DragBox FeedbackBox RevertBox TransparentBox '	poolDictionaries: ''	category: 'Morphic-Widgets'!!GradientFillStyle methodsFor: 'Morphic menu' stamp: 'sw 9/8/2000 18:13'!changeColorSelector: aSymbol hand: aHand morph: aMorph originalColor: originalColor	"Change either the firstColor or the lastColor (depending on aSymbol).  Put up a color picker to hande it.  We always use a modal picker so that the user can adjust both colors concurrently."	ColorPickerMorph new		initializeModal: false;		sourceHand: aHand;		target: self;		selector: aSymbol;		argument: aMorph;		originalColor: originalColor;		putUpFor: aMorph near: aMorph fullBoundsInWorld! !!Morph methodsFor: 'menus' stamp: 'sw 9/6/2000 18:45'!changeColor	"Change the color of the receiver -- triggered, e.g. from a menu"	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self activeHand;		target: self;		selector: #fillStyle:;		originalColor: self color;		putUpFor: self near: self fullBoundsInWorld! !!BookMorph methodsFor: 'menu' stamp: 'sw 9/6/2000 18:43'!setPageColor	"Get a color from the user, then set all the pages to that color"	self currentPage ifNil: [^ self].	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self activeHand;		target: self;		selector: #setAllPagesColor:;		originalColor: self currentPage color;		putUpFor: self near: self fullBoundsInWorld! !!ColorPickerMorph methodsFor: 'initialization' stamp: 'sw 9/8/2000 18:14'!choseModalityFromPreference	"Decide whether to be modal or not by consulting the prevailing preference"	self initializeModal: Preferences modalColorPickers! !!ColorPickerMorph methodsFor: 'initialization' stamp: 'sw 9/6/2000 18:40'!initialize	"Initialize the receiver.  Obey the modalColorPickers preference when deciding how to configure myself.  This is not quite satisfactory -- we'd like to have explicit calls tell us things like whether whether to be modal, whether to allow transparency, but for the moment, in grand Morphic fashion, this is rather inflexibly all housed right here"	super initialize.	self buildChartForm.		selectedColor _ Color white.	sourceHand _ nil.	deleteOnMouseUp _ false.	updateContinuously _ true.	selector _ nil.	target _ nil! !!ColorPickerMorph methodsFor: 'initialization' stamp: 'sw 9/8/2000 18:14'!initializeModal: beModal	"Initialize the receiver.  If beModal is true, it will be a modal color picker, else not"	isModal _ beModal.	isModal ifFalse:		[theSelectorDisplayMorph _ AlignmentMorph newRow			color: Color white;			borderWidth: 1;			borderColor: Color red;			hResizing: #shrinkWrap;			vResizing: #shrinkWrap;			addMorph: (StringMorph contents: 'theSelector').		self addMorph: theSelectorDisplayMorph.		self addMorph: (SimpleButtonMorph new borderWidth: 0;			label: 'x' font: nil; color: Color transparent;			actionSelector: #delete; target: self;			position: 1@0; extent: 10@9)].	self buildChartForm.		selectedColor _ Color white.	sourceHand _ nil.	deleteOnMouseUp _ false.	updateContinuously _ true.	selector _ nil.	target _ nil! !!ColorPickerMorph methodsFor: 'other' stamp: 'sw 9/6/2000 18:41'!putUpFor: aMorph near: aRectangle	"Put the receiver up on the screen.   Note highly variant behavior depending on the setting of the #modalColorPickers preference"	isModal == true "backward compatibility"		ifTrue:			[self pickUpColorFor: aMorph]		ifFalse:			[self addToWorld:				((aMorph notNil and: [aMorph world notNil])					ifTrue:						[aMorph world]					ifFalse:						[self currentWorld])		  		near:					(aRectangle ifNil:						[aMorph ifNil: [100@100 extent: 1@1] ifNotNil: [aMorph fullBoundsInWorld]])]! !!ColorPickerMorph methodsFor: 'object fileIn' stamp: 'sw 9/7/2000 07:22'!convertbosfceorrrsfrossdutsaotc0: varDict bosfceorrrsfrossdutsaotcii0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'originalForm' 'rotationCenter' 'rotationDegrees' 'rotationStyle' 'scalePoint' 'framesToDwell' 'rotatedForm' 'offsetWhenRotated' 'selectedColor' 'sourceHand' 'deleteOnMouseUp' 'updateContinuously' 'target' 'selector' 'argument' 'originalColor' 'theSelectorDisplayMorph' 'command').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('isModal' 'includesTransparency')  If a non-nil value is needed, please assign it."! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 9/6/2000 18:45'!changeColorTarget: anObject selector: aSymbol originalColor: aColor	"Put up a color picker for changing some kind of color.  May be modal or modeless, depending on #modalColorPickers setting"	^ ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self;		target: anObject;		selector: aSymbol;		originalColor: aColor;		putUpFor: anObject near: (anObject isMorph					ifTrue:	 [Rectangle center: self position extent: 20]					ifFalse: [anObject == self world								ifTrue: [anObject viewBox bottomLeft + (20@-20) extent: 200]								ifFalse: [anObject fullBoundsInWorld]]);		yourself! !!Preferences class methodsFor: 'text highlighting' stamp: 'sw 9/6/2000 18:45'!chooseInsertionPointColor	"Let the user indicate what color he wishes to have used for insertion points in text"	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self currentHand;		target: self;		selector: #insertionPointColor:;		originalColor: self insertionPointColor;		putUpFor: self currentHand near: self currentHand cursorBounds! !!Preferences class methodsFor: 'text highlighting' stamp: 'sw 9/6/2000 18:45'!chooseTextHighlightColor	"Let the user choose the text-highlight color"	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self currentHand;		target: self;		selector: #textHighlightColor:;		originalColor: self textHighlightColor;		putUpFor: self currentHand near: self currentHand cursorBounds! !!SystemWindow methodsFor: 'menu' stamp: 'sw 9/6/2000 18:46'!setWindowColor	"Allow the user to select a new basic color for the window"	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self activeHand;		target: self;		selector: #setWindowColor:;		originalColor: self paneColorToUse;		putUpFor: self			near: self fullBounds! !!WatchMorph methodsFor: 'menus' stamp: 'sw 9/6/2000 18:46'!changeCenterColor	"Let the user change the color of the center of the watch"	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self activeHand;		target: self;		selector: #centerColor:;		originalColor: self color;		putUpFor: self near: self fullBounds! !!WatchMorph methodsFor: 'menus' stamp: 'sw 9/6/2000 18:46'!changeHandsColor	"Let the user change the color of the hands of the watch."	ColorPickerMorph new		choseModalityFromPreference;		sourceHand: self activeHand;		target: self;		selector: #handsColor:;		originalColor: self color;		putUpFor: self near: self fullBounds! !SketchMorph subclass: #ColorPickerMorph	instanceVariableNames: 'selectedColor sourceHand deleteOnMouseUp updateContinuously target selector argument originalColor theSelectorDisplayMorph command isModal includesTransparency '	classVariableNames: 'ColorChart DragBox FeedbackBox RevertBox TransparentBox '	poolDictionaries: ''	category: 'Morphic-Widgets'!