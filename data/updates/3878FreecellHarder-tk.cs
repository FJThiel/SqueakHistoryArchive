'From Squeak3.1alpha of 28 February 2001 [latest update: #3888] on 30 March 2001 at 1:26:44 pm'!AlignmentMorph subclass: #FreeCellBoard	instanceVariableNames: 'cardDeck lastCardDeck freeCells homeCells stacks target actionSelector hardness '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Games'!!FreeCellBoard commentStamp: 'tk 3/30/2001 11:42' prior: 0!The model of a freecell game.  Holds the stacks of cards.cardDeck		lastCardDeck		freeCells		homeCells		stacks		array of CardDecks of the columns of cards.----Hardness: a number from 1 to 10000.  	After dealing, count down the number.  For each count, go to next column, pick a ramdom card (with same generator as deck) and move it one place in its stack.  This is a kind of bubble sort.  Interesting that the slowness of bubble sort is a plus -- gives fine gradation in the hardness.	Moving a card:  Move red cards to deep half, black to shallow (or vice versa).  Within a color, put low cards deep and high cards shallow.  	If speed is an issue, move several steps at once, decrementing counter. 		(May make it easier?  If running columns, need a way to make harder in other ways.)!!FreeCell methodsFor: 'actions' stamp: 'tk 3/30/2001 13:25'!promptForSeed	| ss ii hh |		[hh _ board hardness ifNil: [0].	ss _ FillInTheBlank request: 'Pick a game number between 1 and 32000.orset the hardness of the next game by typing ''H 30''.Above 100 is very hard.  Zero is standard game.Current hardness is: ', hh printString.		"Let the user cancel."		ss isEmpty ifTrue: [^ nil].		ss _ ss withoutQuoting.		ss first asLowercase == $h ifTrue: ["Set the hardness"			[ii _ ss numericSuffix] on: Error do: [ii _ 0].			board hardness: ii.			^ nil].		[ii _ ss asNumber asInteger] on: Error do: [ii _ 0].		ii between: 1 and: 32000] whileFalse.	^ ii! !!FreeCellBoard methodsFor: 'initialization' stamp: 'tk 3/30/2001 12:20'!resetBoard	self purgeAllCommands.	self resetFreeCells;		resetHomeCells;		resetStacks;		addHardness;		changed.! !!FreeCellBoard methodsFor: 'accessing' stamp: 'tk 3/30/2001 13:08'!hardness	^ hardness! !!FreeCellBoard methodsFor: 'accessing' stamp: 'tk 3/30/2001 13:08'!hardness: integer	hardness _ integer	"or nil"! !!FreeCellBoard methodsFor: 'hardness' stamp: 'tk 3/30/2001 11:53'!addHardness	| cnt rand pileInd pile |	"post process the layout of cards to make it harder.  See class comment."	hardness ifNil: [^ self].	cnt _ hardness.	rand _ Random new seed: cardDeck seed.  "Same numbers but different purpose"	pileInd _ 1. 	[(cnt _ cnt - 1) > 0] whileTrue: [		pile _ stacks atWrap: (pileInd _ pileInd + 1).		cnt _ cnt - (self makeHarder: pile rand: rand toDo: cnt)].  "mostly 0, but moves cards"! !!FreeCellBoard methodsFor: 'hardness' stamp: 'tk 3/30/2001 12:22'!makeHarder: pile rand: rand toDo: cnt	| deepColor ind thisPile thisCard otherCard |	"Move cards in a stack to make it harder.  Pick a card from the pile.  Only consider moving it deeper (toward last of pile)."	deepColor _ stacks first cards last suitColor.	ind _ ((pile cards size - 1) atRandom: rand).	"front card"	thisPile _ pile cards.  "submorphs array. We will stomp it."	thisCard _ thisPile at: ind.	otherCard _ thisPile at: ind+1.	"Move deepColor cards deeper, past cards of the other color"	(thisCard suitColor == deepColor) & (otherCard suitColor ~~ deepColor) ifTrue: [		thisPile at: ind put: otherCard.		thisPile at: ind+1 put: thisCard.		^ 0].	"single moves for now.  Make multiple when it's too slow this way"	"When colors the same, move low numbered cards deeper, past high cards"	(thisCard suitColor == otherCard suitColor) ifTrue: [		(thisCard cardNumber < otherCard cardNumber) ifTrue: [			thisPile at: ind put: otherCard.			thisPile at: ind+1 put: thisCard.			^ 0]].	"single moves for now.  Make multiple when it's too slow this way"	^ 0! !FreeCellBoard removeSelector: #aComment!FreeCellBoard removeSelector: #measureLowBuried!