'From Squeak2.9alpha of 13 June 2000 [latest update: #2901] on 26 October 2000 at 2:30:13 pm'!"Change Set:		MoreNebraska-arDate:			26 October 2000Author:			Andreas RaabRemoves NebraskaPasteUpMorph and NebraskaWorldState and makes the remote server be associated with the current world."!Object subclass: #WorldState	instanceVariableNames: 'hands activeHand viewBox canvas damageRecorder stepList lastStepTime lastStepMessage lastCycleTime commandHistory alarms lastAlarmTime remoteServer multiCanvas '	classVariableNames: 'CanSurrenderToOS DeferredUIMessages DisableDeferredUpdates LastCycleTime MinCycleLapse '	poolDictionaries: ''	category: 'Morphic-Worlds'!!NebraskaClient methodsFor: 'initialization' stamp: 'ar 10/26/2000 14:28'!destroy	hand ifNotNil:[hand world ifNotNil:[hand world removeHand: hand]].	connection ifNotNil:[connection destroy].	encoder _ canvas _ hand _ connection _ nil.! !!NebraskaServer methodsFor: 'initialization' stamp: 'ar 10/26/2000 14:02'!destroy	self stopListening.	clients do:[:each| each destroy].	self breakDependents.! !!NebraskaServer methodsFor: 'initialization' stamp: 'ar 10/26/2000 14:20'!initialize	clients := IdentitySet new.	self extent: 800@600 depth: 16.! !!NebraskaServer methodsFor: 'initialization' stamp: 'ar 10/26/2000 13:49'!initializeForWorld: aWorld	world _ aWorld.	clients _ IdentitySet new.	self extent: world extent depth: Display depth.	aWorld remoteServer: self.! !!NebraskaServer methodsFor: 'accessing' stamp: 'ar 10/26/2000 14:23'!clients	^clients ifNil:[#()].! !!NebraskaServer methodsFor: 'networking' stamp: 'ar 10/26/2000 14:20'!pruneDeadConnections	| deadConnections |	deadConnections := clients select: [ :client | client isConnected not ].	deadConnections do: [ :client |		world removeRemoteClient: client].	deadConnections isEmpty ifTrue:[ ^self ].	clients removeAll: deadConnections.	self changed: #numClients.! !!NebraskaServer class methodsFor: 'instance creation' stamp: 'ar 10/26/2000 14:00'!serveWorld: aWorld	^self serveWorld: aWorld onPort: self defaultPort! !!NebraskaServer class methodsFor: 'instance creation' stamp: 'ar 10/26/2000 14:00'!serveWorld: aWorld onPort: aPortNumber	| server |	server _ self newForWorld: aWorld.	server startListeningOnPort: aPortNumber.	^server	"server acceptNullConnection"		"server acceptPhonyConnection."! !!NebraskaServerMorph methodsFor: 'structure' stamp: 'ar 10/26/2000 14:07'!delete	self server ifNotNil:[		(self confirm:'Shutdown the server?') 			ifTrue:[self world remoteServer: nil]].	super delete.! !!NebraskaServerMorph methodsFor: 'structure' stamp: 'ar 10/26/2000 14:07'!step	self server ifNil: [ ^self ].	self server step.	(slowCounter _ (slowCounter ifNil: [0]) + 1 \\ 20) = 0 ifTrue: [		previousBacklog = self server backlog ifFalse: [self changed]	].! !!NebraskaServerMorph methodsFor: 'drawing' stamp: 'ar 10/26/2000 14:06'!drawOn: aCanvas	| str |	self server ifNil:[str _ '<server not active>']		ifNotNil:[str _ 'server with ', self server numClients printString, ' clients  ',					(previousBacklog _ self server backlog) printString,' ',					BufferedCanvas enabledString,CanvasEncoder cachingString].	aCanvas clipBy: self bounds during: [ :c |		c fillColor: self color.		c			text: str			at: self position + (5@5)			font: nil			color: Color black.		c frameRectangle: self bounds color: Color black.	].! !!NebraskaServerMorph methodsFor: 'accessing' stamp: 'ar 10/26/2000 14:05'!server	^self world remoteServer! !!NebraskaServerMorph class methodsFor: 'as yet unclassified' stamp: 'ar 10/26/2000 14:05'!serveWorld: aWorld onPort: aPortNumber	| server |	server := NebraskaServer serveWorld: aWorld onPort: aPortNumber.	(self new) openInWorld: aWorld.	"server acceptNullConnection"		"server acceptPhonyConnection."! !!PasteUpMorph methodsFor: 'Nebraska' stamp: 'ar 10/26/2000 14:19'!addRemoteClient: aClient	self addHand: aClient hand.	worldState addRemoteCanvas: aClient canvas.	aClient canvas fullDrawMorph: self.	self changed.  "force a redraw"! !!PasteUpMorph methodsFor: 'Nebraska' stamp: 'ar 10/26/2000 14:08'!remoteServer	^worldState remoteServer.! !!PasteUpMorph methodsFor: 'Nebraska' stamp: 'ar 10/26/2000 13:50'!remoteServer: aNebraskaServer	worldState remoteServer: aNebraskaServer.! !!PasteUpMorph methodsFor: 'Nebraska' stamp: 'ar 10/26/2000 14:19'!removeRemoteClient: aClient	self removeHand: aClient hand.	worldState removeRemoteCanvas: aClient canvas.	self changed.  "force a redraw"! !!WorldState methodsFor: 'update cycle' stamp: 'ar 10/26/2000 14:12'!doDeferredUpdatingFor: aWorld        "If this platform supports deferred updates, then make my canvas be the Display (or a rectangular portion of it), set the Display to deferred update mode, and answer true. Otherwise, do nothing and answer false. One can set the class variable DisableDeferredUpdates to true to completely disable the deferred updating feature."	| properDisplay |	PasteUpMorph disableDeferredUpdates ifTrue: [^ false].	(Display deferUpdates: true) ifNil: [^ false].  "deferred updates not supported"	remoteServer ifNotNil:[		self assuredCanvas.		^true].	properDisplay _ canvas notNil and: [canvas form == Display].	aWorld == World ifTrue: [  "this world fills the entire Display"		properDisplay ifFalse: [			aWorld viewBox: Display boundingBox.    "do first since it may clear canvas"			self canvas: (Display getCanvas copyClipRect: Display boundingBox).		]	] ifFalse: [  "this world is inside an MVC window"		(properDisplay and: [canvas clipRect = aWorld viewBox]) ifFalse: [			self canvas:				(Display getCanvas copyOffset: 0@0 clipRect: aWorld viewBox)		]	].	^ true! !!WorldState methodsFor: 'update cycle' stamp: 'ar 10/26/2000 14:16'!forceDamageToScreen: allDamage	"here for the convenience of NebraskaWorldState"	allDamage do: [:r | Display forceToScreen: r].	self remoteCanvasesDo: [ :each | allDamage do: [:r | each forceToScreen: r]].! !!WorldState methodsFor: 'canvas' stamp: 'ar 10/26/2000 14:10'!assuredCanvas	remoteServer ifNotNil:[^self assuredRemoteCanvas].	(canvas isNil or: [(canvas extent ~= viewBox extent) or: [canvas form depth ~= Display depth]])		ifTrue:			["allocate a new offscreen canvas the size of the window"			self canvas: (Display defaultCanvasClass extent: viewBox extent)].	^ self canvas! !!WorldState methodsFor: 'object fileIn' stamp: 'ar 10/26/2000 14:21'!converthavcdslllcal0: varDict havcdslllcalrm0: smartRefStrm	"These variables are automatically stored into the new instance #('hands' 'activeHand' 'viewBox' 'canvas' 'damageRecorder' 'stepList' 'lastStepTime' 'lastStepMessage' 'lastCycleTime' 'commandHistory' 'alarms' 'lastAlarmTime').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('remoteServer' 'multiCanvas')  If a non-nil value is needed, please assign it."! !!WorldState methodsFor: 'Nebraska support' stamp: 'ar 10/26/2000 14:11'!addRemoteCanvas: c	self canvas: nil. "force recomputation"! !!WorldState methodsFor: 'Nebraska support' stamp: 'ar 10/26/2000 14:17'!assuredRemoteCanvas	| newCanvas |	(self canvas notNil) ifTrue: [ ^self canvas ].	newCanvas := MultiCanvas new.	newCanvas depth: 32.	newCanvas extent: viewBox extent.	self remoteCanvasesDo: [ :c | newCanvas addCanvas: c ].	newCanvas addCanvas: Display getCanvas.	"newCanvas := CachingCanvas on: newCanvas."	self canvas: newCanvas.	^newCanvas! !!WorldState methodsFor: 'Nebraska support' stamp: 'ar 10/26/2000 14:15'!remoteCanvasesDo: aBlock	remoteServer ifNil:[^self].	^remoteServer clients do:[:client| aBlock value: client canvas]! !!WorldState methodsFor: 'Nebraska support' stamp: 'ar 10/26/2000 14:08'!remoteServer	^remoteServer! !!WorldState methodsFor: 'Nebraska support' stamp: 'ar 10/26/2000 14:29'!remoteServer: aNebraskaServer	remoteServer ifNotNil:[remoteServer destroy].	remoteServer _ aNebraskaServer.	self canvas: nil.! !!WorldState methodsFor: 'Nebraska support' stamp: 'ar 10/26/2000 14:17'!removeRemoteCanvas: c	self canvas: nil.	"force withdrawal of remote from MultiCanvas"! !PasteUpMorph removeSelector: #removeRemoteCanvas:!NebraskaServerMorph removeSelector: #server:!Smalltalk removeClassNamed: #NebraskaPasteUpMorph!Smalltalk removeClassNamed: #NebraskaWorldState!