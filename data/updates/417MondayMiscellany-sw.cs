'From Squeak 2.2 of Sept 23, 1998 on 16 November 1998 at 8:57:32 am'!"Change Set:		MondayMiscellany-swDate:			16 November 1998Author:			Scott Wallace*  Morph methods suspendEventHandler and restoreEventHandler now pass their messages on to their submorphs; this fixes the problem of piano keyboards in a parts bin being reactive to drag-over, and precludes similiar arcane problems arising in future.  These methods are specific to the creation of parts bins.*  If you save a custom parts bin whose window title is still Standard Parts, it's transformed to be Custom Parts.*  If you've never defined a custom parts bin, then the attempt to launch one results in an informative message.*  The bug wherein an extra parts bin is launched the first time you request a custom parts bin is fixed.*  Restore lightOrange as the characteristic color of Morphic Projects.*  The thumbnailing algorithm in MorphThumbnail now enforces a maximum thumbnail width, so that, for example, the piano keyboard's thumbnail won't be unconscionably wide.  Refer to the comment in MorphThumbnail.computeThumbnail, and look at Morph method #representativeNoTallerThan:norWiderThan:thumbnailHeight: and its senders to learn how to set this up -- you can twiddle the parameters relating to thumbnail computation with a bit of effort.*  Removes (for the moment) make-alias from the red-dot halo menu.*  Also removes the open-viewer item from that menu; use the cyan halo for this function.*  Changes the wording of the name-me item in the morph meta-menu to read 'set variable name...', to reduce confusion with the formal-object-naming feature that relates to the name visible and editible in an object's halo which is central to the scripting regime, and which is quite different from the set-variable-name thing used by Components and which results in addition of instance variables to a MorphicModel, etc."!!Morph methodsFor: 'thumbnail' stamp: 'sw 11/13/1998 09:45'!representativeNoTallerThan: maxHeight norWiderThan: maxWidth thumbnailHeight: thumbnailHeight	"Return a morph representing the receiver but which is no taller than aHeight.  If the receiver is already small enough, just return it, else return a MorphThumbnail companioned to the receiver, enforcing the maxWidth"	(self height <= maxHeight and: [self width <= maxWidth]) ifTrue: [^ self].	^ MorphThumbnail new extent: maxWidth @ thumbnailHeight; morphRepresented: self! !!Morph methodsFor: 'event handling' stamp: 'sw 11/16/1998 08:06'!restoreSuspendedEventHandler	| savedHandler |	(savedHandler _ self valueOfProperty: #suspendedEventHandler) ifNotNil:		[self eventHandler: savedHandler].	submorphs do: [:m | m restoreSuspendedEventHandler]! !!Morph methodsFor: 'event handling' stamp: 'sw 11/16/1998 08:07'!suspendEventHandler	self eventHandler ifNotNil:		[self setProperty: #suspendedEventHandler toValue: self eventHandler.		self eventHandler: nil].	submorphs do: [:m | m suspendEventHandler].  "All those rectangles"! !!Morph methodsFor: 'menus' stamp: 'sw 11/16/1998 08:13'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	self player ifNotNil:		[aMenu add: 'make another instance of me' action: #makeNewPlayerInstance].	aMenu addLine.	"aMenu add: 'open viewer' action: #openViewerForArgument.	(self isKindOf: MorphThumbnail) ifFalse:		[aMenu add: 'make alias' action: #makeAliasForArgument]."	aMenu add: 'change costume...' action: #chooseNewCostumeForArgument.	((self isKindOf: SketchMorph) and: [Smalltalk imageImports size > 0]) ifTrue:		[aMenu add: 'use imported graphic...' action: #chooseNewFormForSketchMorph].	self colorSettable ifTrue:		[aMenu add: 'change color...' action: #changeColor].	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	self isLocked		ifFalse:			[aMenu add: 'lock' action: #lockMorph]		ifTrue:			[aMenu add: 'unlock' action: #unlockMorph].  "probably not possible -- wouldn't get halo"	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	"aMenu add: 'make mouse-sensitive' action: #makeMouseSensitive."	(owner == nil or: [self == owner submorphs last]) ifFalse:		[aMenu add: 'send to back' action: #goBehind]! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 11/16/1998 08:22'!buildMorphMenuFor: argMorph	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	argument _ argMorph.	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph.	menu add: 'delete' action: #dismissMorph.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo.	menu add: 'duplicate' action: #maybeDuplicateMorph.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #placeArgumentIn].	menu add: 'resize' action: #resizeMorph.	(argMorph isKindOf: SketchMorph)  ifFalse:		[menu add: 'fill color' action: #changeColor].	(argMorph morphsAt: targetOffset) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #selectSubmorphToOperateOn:sending:event:			argumentList: (Array with: argMorph with: #operateOnSubmorph:event:)].	menu addLine.	World ifNil:		[menu add: 'inspect (in MVC)' action: #inspectMorph.		menu add: 'inspect' action: #inspectMorphInMorphic]		ifNotNil:		[menu add: 'inspect' action: #inspectMorph].	menu add: 'browse' action: #browseMorphClass.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #nameMorph.	(argMorph isKindOf: MorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(argMorph ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	menu add: 'show actions' action: #showActions.	menu addLine.	menu defaultTarget: argMorph.	argMorph addCustomMenuItems: menu hand: self.	^ menu! !!MorphThumbnail methodsFor: 'all' stamp: 'sw 11/13/1998 09:53'!computeThumbnail	"Assumption on entry:       The receiver's width represents the maximum width allowable.       The receiver's height represents the exact height desired."	| f scaleX scaleY |	f _ morphRepresented imageForm.	morphRepresented fullReleaseCachedState.	scaleY _ self height / f height.  "keep height invariant"	scaleX _ ((morphRepresented width * scaleY) <= self width)		ifTrue:			[scaleY]  "the usual case; same scale factor, to preserve aspect ratio"		ifFalse:			[self width / f width].	self form: (f magnify: f boundingBox by: (scaleX @ scaleY) smoothing: 2).	self extent: originalForm extent! !!MouseDownMorph methodsFor: 'menu' stamp: 'sw 11/16/1998 08:22'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph."template..."	aCustomMenu addLine.	aCustomMenu add: 'set variable name...' action: #renameMe.	aCustomMenu addLine.	aCustomMenu add: 'plug mouseDown to model slot' action: #plugMouseDownToSlot.	aCustomMenu add: 'plug mouseMove to model slot' action: #plugMouseMoveToSlot.	aCustomMenu add: 'plug all to model slots' action: #plugAllToSlots.	aCustomMenu addLine.	aCustomMenu add: 'plug mouseDown to model' action: #plugMouseDownToModel.	aCustomMenu add: 'plug mouseMove to model' action: #plugMouseMoveToModel.	aCustomMenu add: 'plug all to model' action: #plugAllToModel.	aCustomMenu addLine.	aCustomMenu add: 'set target...' action: #setTarget.	aCustomMenu add: 'set mouseDown selector...' action: #setMouseDownSelector.	aCustomMenu add: 'set mouseMove selector...' action: #setMouseMoveSelector.	aCustomMenu add: 'set mouseUp selector...' action: #setMouseUpSelector.! !!PartsWindow methodsFor: 'all' stamp: 'sw 11/12/1998 17:46'!saveAsCustomPartsBin	| aBin |	self closeEditing.	labelString = 'Standard Parts' ifTrue: [self setLabel: 'Custom Parts'].	aBin _ self veryDeepCopy.	ScriptingSystem setCustomPartsBinFrom: aBin.	self inform: 'Okay; from now on, when you request''custom parts bin'' from the ''authoring tools...''menu, you will obtain a copy of this parts bin'! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 11/13/1998 09:54'!morphToDropFrom: aMorph	| itsSelector aScriptor adjustment anEditor actualObject aUserScript ownersChoice aNail representee |	owner ifNotNil:		[(ownersChoice _ owner substituteForMorph: aMorph beingDroppedOn: self)			ifNotNil:	[^ ownersChoice]].	self alwaysShowThumbnail ifTrue:		[aNail _ aMorph representativeNoTallerThan: self maxHeightToAvoidThumbnailing norWiderThan: self maximumThumbnailWidth thumbnailHeight: self heightForThumbnails.		aNail == aMorph ifFalse:			[aNail position: (self primaryHand position - ((self primaryHand targetOffset - self primaryHand formerPosition) * (aNail extent / aMorph extent)) rounded)].		^ aNail].	((aMorph isKindOf: MorphThumbnail) and: [(representee _ aMorph morphRepresented) owner == nil])		ifTrue:			[representee position: (self primaryHand position - ((self primaryHand targetOffset - self primaryHand formerPosition) * (representee extent / aMorph extent)) rounded).			^ representee].	self expandPhrasesToScripts ifFalse: [^ aMorph].	(aMorph hasProperty: #newAnonymousScript) ifTrue: [^ self emptyAnonymousScriptorFrom: aMorph].	(aMorph isKindOf: PhraseTileMorph) ifFalse: [^ aMorph].	aMorph isCommand ifFalse: [^ aMorph].	(actualObject _ aMorph actualObject) ifNil: [^ aMorph].	actualObject assureUniClass.	aScriptor _ (itsSelector _ aMorph userScriptSelector) size > 0		ifTrue:			[actualObject isFlagshipForClass				ifFalse:					["We can set the status for our instantiation of this script, but cannot allow script editing"					anEditor _ actualObject scriptEvaluatorFor: itsSelector phrase: aMorph.					adjustment _ 50 @ 40.					anEditor]				ifTrue:					["old note: ambiguous case: if there's a script editor on the world, drop down a button, else drop down the script editor"					aUserScript _ actualObject class userScriptForPlayer: actualObject selector: itsSelector.					aUserScript isTextuallyCoded						ifTrue: [^ self scriptorForTextualScript: itsSelector ofPlayer: actualObject].					((anEditor _ actualObject scriptEditorFor: itsSelector) isInWorld and:							[anEditor owner == self])						ifFalse:							[adjustment _ 50 @ 30.							anEditor]						ifTrue:							[adjustment _ 60 @ 20.							actualObject anonymousScriptEditorFor: aMorph]]]		ifFalse:   "It's a system-defined selector; construct an anonymous scriptor around it"			[adjustment _ 60 @ 20.			actualObject anonymousScriptEditorFor: aMorph].	aScriptor position: (self primaryHand position - adjustment).	^ aScriptor! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 11/12/1998 18:01'!rootForGrabOf: aMorph	"If open to drag-n-drop, allow submorph to be extracted. If parts bin, copy the submorph."	| root |	root _ aMorph.	[root = self] whileFalse:		[root owner == self ifTrue:			[self isPartsBin				ifTrue:					[(root renderedMorph isKindOf: MorphThumbnail)						ifTrue:							[^ root renderedMorph morphRepresented veryDeepCopy position: root renderedMorph position]						ifFalse:							[^ root topRendererOrSelf veryDeepCopy restoreSuspendedEventHandler ]].			self openToDragNDrop					ifTrue: [^ root]].		root _ root owner].	^ super rootForGrabOf: aMorph! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 11/13/1998 09:55'!replaceTallSubmorphsByThumbnails	|  itsThumbnail heightForThumbnails maxHeightToAvoidThumbnailing maxWidthForThumbnails |	heightForThumbnails _ self heightForThumbnails.	maxHeightToAvoidThumbnailing _ self maxHeightToAvoidThumbnailing.	maxWidthForThumbnails _ self maximumThumbnailWidth.	self submorphs do:		[:aMorph |			itsThumbnail _ aMorph representativeNoTallerThan: maxHeightToAvoidThumbnailing norWiderThan: maxWidthForThumbnails thumbnailHeight: heightForThumbnails.			(aMorph == itsThumbnail)				ifFalse:					[self replaceSubmorph: aMorph by: itsThumbnail]]! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 11/13/1998 09:56'!updateSubmorphThumbnails	| thumbsUp itsThumbnail heightForThumbnails maxHeightToAvoidThumbnailing maxWidthForThumbnails |	thumbsUp _ self alwaysShowThumbnail.	heightForThumbnails _ self heightForThumbnails.	maxHeightToAvoidThumbnailing _ self maxHeightToAvoidThumbnailing.	maxWidthForThumbnails _ self maximumThumbnailWidth.	self submorphs do:		[:aMorph | thumbsUp			ifTrue:				[itsThumbnail _ aMorph representativeNoTallerThan: maxHeightToAvoidThumbnailing norWiderThan: maxWidthForThumbnails thumbnailHeight: heightForThumbnails.				(aMorph == itsThumbnail)					ifFalse:						[self replaceSubmorph: aMorph by: itsThumbnail]]			ifFalse:				[(aMorph isKindOf: MorphThumbnail)					ifTrue:						[self replaceSubmorph: aMorph by: aMorph morphRepresented]]]! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 11/13/1998 10:06'!maximumThumbnailWidth	^ self valueOfProperty: #maximumThumbnailWidth ifAbsent: [200 min: (self width - 10)]! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 11/16/1998 08:49'!launchCustomPartsBin	| aBin |	(aBin _ ScriptingSystem customPartsBin) ifNotNil:		[associatedMorph primaryHand attachMorph: aBin]! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 11/13/1998 10:03'!newPageForStandardPartsBin	| aPage |	aPage _ PasteUpMorph new extent:  361@175.	aPage color: Color white; padding: 6.	aPage autoLineLayout: true.	aPage isPartsBin: true; openToDragNDrop: false.	aPage setProperty: #alwaysShowThumbnail toValue: true.	^ aPage! !!Project methodsFor: 'initialization' stamp: 'sw 11/12/1998 14:29'!backgroundColorForMorphicProject	^ Color lightOrange! !!StandardScriptingSystem methodsFor: 'parts bin' stamp: 'sw 11/16/1998 08:50'!customPartsBin	CustomPartsBin ifNil:		[self inform: 'There is no custom parts bin yet.To create one, start with a Standard Parts Bin, and modify it as you wish, and then choose''Save as Custom Parts Bin'' from theparts-window-controls menu, whichwill be found in the halo menu ofany parts-bin window'.	^ nil].	^ CustomPartsBin veryDeepCopy! !!StandardScriptingSystem methodsFor: 'parts bin' stamp: 'sw 11/16/1998 08:47'!setCustomPartsBinFrom: aMorph	"Establish aMorph as the custom parts bin.  Normally triggered by use menu action, but can also be used to reset the custom parts bin to undefined"	CustomPartsBin _ aMorph	"ScriptingSystem setCustomPartsBinFrom: nil"! !Morph removeSelector: #representativeNoTallerThan:thumbnailHeight:!MorphThumbnail removeSelector: #thumbnailOfHeight:!StandardScriptingSystem removeSelector: #initializeCustomPartsBin!"Postscript:"ScriptingSystem resetStandardPartsBin.ScriptingSystem newStandardPartsBin.!