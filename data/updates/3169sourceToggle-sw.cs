'From Squeak2.9alpha of 5 August 2000 [latest update: #3226] on 4 January 2001 at 5:39:31 pm'!"Change Set:		sourceToggle-swDate:			4 January 2001Author:			Scott WallaceAllows a code-bearing pane to be set up to show either source code or documentation.  The documentation choice is fed, by default, from the first comment in the method that precedes code.  If a method has no such comment, then an attempt is made to retrieve such a comment from a superclass's implementation.  A source/documentation toggle button is made available in optional button panes, provided that a preference is set appropriately."!StringHolder subclass: #CodeHolder	instanceVariableNames: 'showDiffs currentCompiledMethod contentsSymbol '	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-ST80 Remnants'!!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 12/1/2000 20:12'!firstCommentAt:  selector	"Answer a string representing the first comment in the method associated with selector.  Return an empty string if the relevant source file is not available, or if the method's source code does not contain a comment.  Not smart enough to bypass quotes in string constants, but does map doubled quote into a single quote."	| sourceString commentStart  pos nextQuotePos |	sourceString _ (self sourceCodeAt: selector) asString.	sourceString size == 0 ifTrue: [^ ''].	commentStart _ sourceString findString: '"' startingAt: 1.	commentStart == 0 ifTrue: [^ ''].	pos _ commentStart + 1.	[(nextQuotePos _ sourceString findString: '"' startingAt: pos) == (sourceString findString: '""' startingAt: pos)]		whileTrue:			[pos _ nextQuotePos + 2].		commentStart == nextQuotePos ifTrue: [^ ''].  "Must have been a quote in string literal"	^ (sourceString copyFrom: commentStart + 1 to: nextQuotePos - 1) copyReplaceAll: '""' with: '"'"Behavior firstCommentAt: #firstCommentAt:"! !!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 12/5/2000 08:53'!firstPrecodeCommentFor:  selector	"If there is a comment in the source code at the given selector that preceeds the body of the method, return it here, else return nil"	| parser lastHeaderChar firstCommentPosition |	"Behavior firstPrecodeCommentFor: #firstPrecodeCommentFor:"	(parser _ self parserClass new) parseSelector: (self sourceCodeAt: selector).	lastHeaderChar _ parser endOfLastToken.	firstCommentPosition _ self positionOfFirstCommentAt: selector.	^ (firstCommentPosition == nil or: [firstCommentPosition <= (lastHeaderChar + 4)])		ifFalse:			[nil]		ifTrue:			[self firstCommentAt: selector]! !!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 12/1/2000 20:25'!methodHeaderFor: selector 	"Answer the string corresponding to the method header for the given selector"	| sourceString parser |	sourceString _ self ultimateSourceCodeAt: selector ifAbsent: [self error: 'not found'].	(parser _ self parserClass new) parseSelector: sourceString.	^ sourceString asString copyFrom: 1 to: (parser endOfLastToken min: sourceString size)"Behavior methodHeaderFor: #methodHeaderFor: "! !!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 11/30/2000 10:29'!positionOfFirstCommentAt:  aSelector	"Answer the position in the source string associated with aSelector of the first comment therein, or an empty string if none"	| sourceString commentStart  |	sourceString _ (self sourceCodeAt: aSelector) asString.	sourceString size == 0 ifTrue: [^ 0].	commentStart _ sourceString findString: '"' startingAt: 1.	^ commentStart! !!Behavior methodsFor: 'accessing method dictionary' stamp: 'sw 12/5/2000 11:06'!precodeCommentOrInheritedCommentFor:  selector	"Answer a string representing the first comment in the method associated with selector, considering however only comments that occur before the beginning of the actual code.  If the version recorded in the receiver is uncommented, look up the inheritance chain.  Return an empty string if none found.  Not smart enough to bypass quotes in string constants, but does map doubled quote into a single quote."	| aSuper aComment |	^ (aComment _ self firstPrecodeCommentFor: selector) isEmptyOrNil		ifFalse:			[aComment]		ifTrue:			[(self == Behavior or: [superclass == nil or:							[(aSuper _ superclass classThatUnderstands: selector) == nil]])				ifTrue:					['']				ifFalse:					[aSuper precodeCommentOrInheritedCommentFor: selector]]"Utilities class precodeCommentOrInheritedCommentFor: #testingComment"! !!ClassDescription methodsFor: 'method dictionary' stamp: 'sw 5/18/1999 10:11'!ultimateSourceCodeAt: selector ifAbsent: aBlock	"Return the source code at selector, deferring to superclass if necessary"	^ self sourceCodeAt: selector ifAbsent:		[superclass			ifNil:				[aBlock value]			 ifNotNil:				[superclass ultimateSourceCodeAt: selector ifAbsent: aBlock]]! !!CodeHolder methodsFor: 'categories' stamp: 'sw 12/11/2000 10:42'!commentContents	"documentation for the selected method"	| poss aClass aSelector |	^ (poss _ (aClass _ self selectedClassOrMetaClass)						ifNil:							['----']						ifNotNil:							[(aSelector _ self selectedMessageName)								ifNil:									['---']								ifNotNil:									[(aClass precodeCommentOrInheritedCommentFor: aSelector)", String cr, String cr, self timeStamp""which however misses comments that are between the temps  declaration and the body of the method; those are picked up by ¥aClass commentOrInheritedCommentFor: aSelector¥ but that method will get false positives from comments *anywhere* in the method source"]])		isEmptyOrNil			ifTrue:				[aSelector					ifNotNil:						[((aClass methodHeaderFor: aSelector), 'Has no comment') asText makeSelectorBoldIn: aClass]					ifNil:						['Hamna']]			ifFalse:	[aSelector				ifNotNil: [((aClass methodHeaderFor: aSelector), '', poss) asText makeSelectorBoldIn: aClass]				ifNil: [poss]]! !!CodeHolder methodsFor: 'contents' stamp: 'sw 12/5/2000 12:16'!contents	"Answer the source code or documentation for the selected method"	^ self showingDocumentation		ifFalse:			[super contents]		ifTrue:			[self commentContents]! !!CodeHolder methodsFor: 'contents' stamp: 'sw 11/29/2000 09:50'!contentsSymbol	"Answer a symbol indicating what kind of content should be shown for the method; for normal showing of source code, this symbol is #source.  A nil value in the contentsSymbol slot will be set to #source by this method"	^ contentsSymbol ifNil: [contentsSymbol _ #source]! !!CodeHolder methodsFor: 'contents' stamp: 'sw 11/29/2000 09:51'!contentsSymbol: aSymbol	"Set the contentsSymbol as indicated.  #source means to show source code, #comment means to show the first comment found in the source code"	contentsSymbol _ aSymbol! !!CodeHolder methodsFor: 'source vs documentation' stamp: 'sw 12/5/2000 11:32'!showComment	"Answer whether the receiver should show documentation rather than, say, source code"	^ self contentsSymbol == #documentation! !!CodeHolder methodsFor: 'source vs documentation' stamp: 'sw 12/5/2000 12:25'!showDocumentation: aBoolean	"Set the showDocumentation toggle as indicated"	self contentsSymbol: (aBoolean ifFalse: [#source] ifTrue: [#documentation])! !!CodeHolder methodsFor: 'source vs documentation' stamp: 'sw 12/5/2000 12:12'!showingDocumentation	"Answer whether the receiver should show documentation rather than, say, source code"	^ self contentsSymbol == #documentation! !!CodeHolder methodsFor: 'source vs documentation' stamp: 'sw 12/5/2000 11:48'!showingSource	"Answer whether the receiver is currently showing source code"	^ self contentsSymbol == #source! !!CodeHolder methodsFor: 'source vs documentation' stamp: 'sw 12/5/2000 11:51'!sourceOrInfoButton	"Return a checkbox that lets the user decide whether the full source or just documentation should show in the code pane"	|  outerButton aButton |	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleShowDocumentation;		getSelector: #showingSource.	outerButton addMorphBack: (StringMorph contents: 'source') lock.	outerButton setBalloonText: 'If checked, then source code is shown in the text pane, if not, then documentation is shown'.	^ outerButton! !!CodeHolder methodsFor: 'source vs documentation' stamp: 'sw 12/5/2000 12:17'!toggleShowDocumentation	"Toggle the setting of the showingDocumentation flag, unless there are unsubmitted edits that the user declines to discard"	self okToChange ifTrue:		[self showDocumentation: self showingDocumentation not.		contents _ nil.		self changed: #contents]! !!CodeHolder methodsFor: 'misc' stamp: 'sw 12/5/2000 11:33'!okayToAccept	"Answer whether it is okay to accept the receiver's input"	self showComment ifTrue:		[self inform: 'Sorry, for the moment you canonly submit changes here whenyou are showing source.  Later, youwill be able to edit the isolated commenthere and save it back, but only if YOUimplement it!!.'.		^ false].	self showDiffs ifFalse:		[^ true]. 	^ SelectionMenu confirm: 'Caution!!  You are "showing diffs" here, so there is a danger that some of the text in thecode pane is contaminated by the "diff" display'	trueChoice: 'accept anyway -- I''ll take my chances' falseChoice: 'um, let me reconsider'! !!Browser methodsFor: 'initialize-release' stamp: 'sw 12/28/2000 16:51'!optionalButtonRow	"Answer a row of control buttons"	| aRow aButton |	aRow _ AlignmentMorph newRow.	aRow setNameTo: 'buttonPane'.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow wrapCentering: #center; cellPositioning: #leftCenter.	aRow clipSubmorphs: true.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs  do:			[:tuple |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: tuple second.				aButton useRoundedCorners;					label: tuple first asString;					onColor: Color transparent offColor: Color transparent.				tuple size > 2 ifTrue: [aButton setBalloonText: tuple third].				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.	Preferences sourceCommentToggleInBrowsers ifTrue: [aRow addMorphBack: self sourceOrInfoButton].	^ aRow! !!Browser methodsFor: 'message list' stamp: 'sw 12/5/2000 11:32'!selectedMessage	"Answer a copy of the source code for the selected message."	| class selector method tempNames |	contents == nil ifFalse: [^ contents copy].	class _ self selectedClassOrMetaClass.	selector _ self selectedMessageName.	method _ class compiledMethodAt: selector ifAbsent: [		^ ''].	"method deleted while in another project"	currentCompiledMethod _ method.	(Sensor controlKeyPressed		or: [method fileIndex > 0 and: [(SourceFiles at: method fileIndex) == nil]])		ifTrue:		["Emergency or no source file -- decompile without temp names"		contents _ (class decompilerClass new decompile: selector in: class method: method)			decompileString.		contents _ contents asText makeSelectorBoldIn: class.		^ contents copy].	Sensor leftShiftDown ifTrue:		["Special request to decompile -- get temps from source file"		tempNames _ (class compilerClass new						parse: method getSourceFromFile asString in: class notifying: nil)						tempNames.		contents _ ((class decompilerClass new withTempNames: tempNames)				decompile: selector in: class method: method) decompileString.		contents _ contents asText makeSelectorBoldIn: class.		^ contents copy].	self showComment		ifFalse:			[contents _ class sourceCodeAt: selector.			self validateMessageSource: selector.			Preferences browseWithPrettyPrint ifTrue:				[contents _ class compilerClass new					format: contents in: class notifying: nil decorated: Preferences colorWhenPrettyPrinting].			self showDiffs ifTrue:				[contents _ self diffFromPriorSourceFor: contents].			contents _ contents asText makeSelectorBoldIn: class]		ifTrue:			[contents _ self commentContents].	^ contents copy! !"Postscript:"Preferences addPreference: #sourceCommentToggleInBrowsers category: #browsing  default: false balloonHelp: 'If true, then optional button panes in code browsers in morphic will exhibit a checkbox labeled "source" which allows the user to toggle between viewing source code and just viewing method comments'.!