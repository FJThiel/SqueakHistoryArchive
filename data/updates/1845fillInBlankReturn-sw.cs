'From Squeak2.8alpha of 13 January 2000 [latest update: #1844] on 7 February 2000 at 9:53:38 am'!"Change Set:		fillInBlankReturn-swDate:			9 February 2000Author:			Scott WallaceAllows users of FillInTheBlank to distinguish between whether the user hit CANCEL or the user hit ENTER with an empty string (formerly both these cases returned an empty string).  You can now ask a FillInTheBlank[Morph] to return any value you wish to signal 'CANCEL'.The multiLineRequest... interface to FillInTheBlank now will return nil (instead of an empty string) when the user cancels.Also, the multiline request will no longer 'accept on CR' -- you must either hit the ENTER key or hit the ACCEPT button.  This makes it easier to enter those famous multiple lines."!StringHolder subclass: #FillInTheBlank	instanceVariableNames: 'acceptOnCR done responseUponCancel '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Menus'!RectangleMorph subclass: #FillInTheBlankMorph	instanceVariableNames: 'response done textPane responseUponCancel '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!FillInTheBlank methodsFor: 'initialize-release' stamp: 'sw 1/31/2000 14:42'!initialize	super initialize.	acceptOnCR _ false.	done _ false.	responseUponCancel _ ''! !!FillInTheBlank methodsFor: 'accessing' stamp: 'sw 1/31/2000 14:45'!responseUponCancel: resp	responseUponCancel _ resp! !!FillInTheBlank methodsFor: 'accessing' stamp: 'sw 1/31/2000 14:47'!setResponseForCancel	self contents: responseUponCancel! !!FillInTheBlank methodsFor: 'object fileIn' stamp: 'sw 1/31/2000 15:17'!convertdcad0: varDict dcadr0: smartRefStrm	"These variables are automatically stored into the new instance ('acceptOnCR' 'done' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: ('responseUponCancel' )  If a non-nil value is needed, please assign it."	responseUponCancel _ ''! !!FillInTheBlank class methodsFor: 'instance creation' stamp: 'sw 2/2/2000 22:38'!multiLineRequest: queryString centerAt: aPoint initialAnswer: defaultAnswer answerHeight: answerHeight	"Create a multi-line instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts.  Answer nil if the user cancels.  An empty string returned means that the ussr cleared the editing area and then hit 'accept'.  Because multiple lines are invited, we ask that the user use the ENTER key, or (in morphic anyway) hit the 'accept' button, to submit; that way, the return key can be typed to move to the next line."	"FillInTheBlank		multiLineRequest:'Enter several lines; end input by acceptingor canceling or typing the enter key'		centerAt: Display boundingBox center		initialAnswer: 'bozo!!'		answerHeight: 100"	| model fillInView savedArea |	World ifNotNil:		[^ FillInTheBlankMorph			request: queryString			initialAnswer: defaultAnswer			centerAt: aPoint			inWorld: World			onCancelReturn: nil			acceptOnCR: false].	model _ self new initialize.	model contents: defaultAnswer.	model responseUponCancel: nil.	model acceptOnCR: false.	fillInView _		(Smalltalk at: #FillInTheBlankView)			multiLineOn: model			message: queryString			centerAt: aPoint			answerHeight: answerHeight.	savedArea _ Form fromDisplay: fillInView displayBox.	fillInView display.	defaultAnswer isEmpty		ifFalse: [fillInView lastSubView controller selectFrom: 1 to: defaultAnswer size].	(fillInView lastSubView containsPoint: Sensor cursorPoint)		ifFalse: [fillInView lastSubView controller centerCursorInView].	fillInView controller startUp.	fillInView release.	savedArea displayOn: Display at: fillInView viewport topLeft.	^ model contents! !!FillInTheBlankController methodsFor: 'other' stamp: 'sw 1/31/2000 14:47'!cancel	model setResponseForCancel.	super cancel.	model done: true.! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'sw 1/31/2000 10:55'!initialize	super initialize.	color _ Color white.	borderWidth _ 2.	self extent: 200@70.	responseUponCancel _ ''.  "Caller can reset this to return something else, e.g. nil, upon cancel"! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'sw 1/31/2000 11:01'!responseUponCancel: anObject	responseUponCancel _ anObject! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'sw 2/2/2000 22:41'!setQuery: queryString initialAnswer: initialAnswer answerHeight: answerHeight	self setQuery: queryString initialAnswer: initialAnswer answerHeight: answerHeight acceptOnCR: true! !!FillInTheBlankMorph methodsFor: 'initialization' stamp: 'sw 2/2/2000 22:33'!setQuery: queryString initialAnswer: initialAnswer answerHeight: answerHeight acceptOnCR: acceptBoolean	response _ initialAnswer.	done _ false.	self removeAllMorphs.	self extent: 200@70.	self addQuery: queryString.	self width: (self width max: self firstSubmorph width + (2 * borderWidth)).	self addLine.	textPane _ PluggableTextMorph on: self		text: #response		accept: #response:		readSelection: #selectionInterval		menu: #codePaneMenu:shifted:.	textPane hasUnacceptedEdits: true.	textPane retractableOrNot.	textPane acceptOnCR: acceptBoolean.	textPane extent: self innerBounds width@answerHeight.	textPane position: self innerBounds left@self lastSubmorph bottom.	self addMorphBack: textPane.	self addLine.	self addButtonRow.	self height: (self height max: (self lastSubmorph bottom - self top) + borderWidth).! !!FillInTheBlankMorph methodsFor: 'menu' stamp: 'sw 1/31/2000 11:11'!cancel	"Sent by the cancel button."	response _ responseUponCancel.	done _ true.! !!FillInTheBlankMorph methodsFor: 'object fileIn' stamp: 'sw 1/31/2000 15:05'!convertbosfcebbrdt0: varDict bosfcebbrdtr0: smartRefStrm	"These variables are automatically stored into the new instance ('response' 'done' 'textPane' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: ('responseUponCancel' )  If a non-nil value is needed, please assign it."	responseUponCancel _ ''! !!FillInTheBlankMorph class methodsFor: 'instance creation' stamp: 'sw 1/31/2000 11:03'!request: queryString initialAnswer: defaultAnswer centerAt: aPoint inWorld: aWorld	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts.  Answer the empty string if the user cancels."	"FillInTheBlankMorph		request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: Display center"	^ self request: queryString initialAnswer: defaultAnswer centerAt: aPoint inWorld: aWorld onCancelReturn: ''! !!FillInTheBlankMorph class methodsFor: 'instance creation' stamp: 'sw 2/2/2000 22:43'!request: queryString initialAnswer: defaultAnswer centerAt: aPoint inWorld: aWorld onCancelReturn: returnOnCancel	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts.   If the user cancels, answer returnOnCancel.  If user hits cr, treat it as a normal accept."	"FillInTheBlankMorph		request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: Display center"	^ self request: queryString initialAnswer: defaultAnswer centerAt: aPoint inWorld: aWorld onCancelReturn: returnOnCancel acceptOnCR: true! !!FillInTheBlankMorph class methodsFor: 'instance creation' stamp: 'sw 2/2/2000 22:34'!request: queryString initialAnswer: defaultAnswer centerAt: aPoint inWorld: aWorld onCancelReturn: returnOnCancel acceptOnCR: acceptBoolean	"Create an instance of me whose question is queryString with the given initial answer. Invoke it centered at the given point, and answer the string the user accepts.   If the user cancels, answer returnOnCancel."	"FillInTheBlankMorph		request: 'Type something, then type CR.'		initialAnswer: 'yo ho ho!!'		centerAt: Display center"	| aFillInTheBlankMorph |	aFillInTheBlankMorph _ self new		setQuery: queryString		initialAnswer: defaultAnswer		answerHeight: 50		acceptOnCR: acceptBoolean.	aFillInTheBlankMorph responseUponCancel: returnOnCancel.	aWorld addMorph: aFillInTheBlankMorph centeredNear: aPoint.	^ aFillInTheBlankMorph getUserResponse! !!ReferenceMorph methodsFor: 'menu' stamp: 'sw 1/31/2000 10:59'!changeTabText	| reply |	reply _ FillInTheBlankMorph request: 'new wording for this tab:' initialAnswer: submorphs first contents centerAt: Sensor cursorPoint inWorld: self world.	reply isEmptyOrNil ifFalse:		[submorphs first contents: reply]! !!FlapTab methodsFor: 'textual tabs' stamp: 'sw 1/31/2000 10:58'!changeTabText	| reply |	reply _ FillInTheBlankMorph request: 'new wording for this tab:' initialAnswer: self existingWording centerAt: self cursorPoint inWorld: self world.	reply isEmptyOrNil ifTrue: [^ self].	self useStringTab: reply.	submorphs first delete.	self assumeString: reply font: Preferences standardFlapFont orientation: (Utilities orientationForEdge: edgeToAdhereTo) color: nil! !