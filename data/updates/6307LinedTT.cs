'From SqueakNihongo6.1 of 17 April 2004 [latest update: #0] on 7 May 2004 at 12:51:17 pm'!"Change Set:		LinedTTDate:			7 May 2004Author:			Yoshiki OhshimaAdds a variant of TTCFont so that it can handle the 'underline' and 'struck out' attributes."!TTCFont subclass: #LinedTTCFont	instanceVariableNames: 'emphasis lineGlyph contourWidth '	classVariableNames: ''	poolDictionaries: ''	category: 'Multilingual-Display'!!TTCFont methodsFor: 'accessing' stamp: 'yo 5/6/2004 19:25'!emphasis	"Answer the emphasis code (0 to 3) corresponding to my subfamily name"	^self indexOfSubfamilyName: self subfamilyName! !!TTCFont methodsFor: 'accessing' stamp: 'yo 5/7/2004 07:19'!emphasized: code	code = 0 ifTrue: [^ self].	derivatives isNil ifTrue: [^ self].	^ (derivatives at: code) ifNil: [self].! !!TTCFont methodsFor: 'friend' stamp: 'yo 5/7/2004 12:20'!derivativeFont: aTTCFont	| index |	index _ self indexOfSubfamilyName: (aTTCFont subfamilyName).	index < 1 ifTrue: [		^ self inform: 'unknown sub family name.  This font will be skipped'.	].	self derivativeFont: aTTCFont at: index.	self addLined: aTTCFont.! !!TTCFont methodsFor: 'friend' stamp: 'yo 5/7/2004 12:40'!derivativeFont: aTTCFont at: index	| newDeriv |	aTTCFont ifNil: [derivatives _ nil. ^ self].	derivatives ifNil: [derivatives _ Array new: 32].	derivatives size < 32 ifTrue: [		newDeriv _ Array new: 32.		newDeriv replaceFrom: 1 to: derivatives size with: derivatives.		derivatives _ newDeriv.	].	derivatives at: index put: aTTCFont.! !!TTCFont methodsFor: 'friend' stamp: 'yo 5/6/2004 19:54'!derivativeFontArray	^ derivatives.! !!TTCFont methodsFor: 'private' stamp: 'yo 5/7/2004 12:30'!addLined	self addLined: self.	self derivativeFonts do: [:e |		e ifNotNil: [self addLined: e].	].! !!TTCFont methodsFor: 'private' stamp: 'yo 5/7/2004 12:23'!addLined: aTTCFont	| l |	l _ LinedTTCFont fromTTCFont: aTTCFont emphasis: 4.	self derivativeFont: l at: l emphasis.	l _ LinedTTCFont fromTTCFont: aTTCFont emphasis: 16.	self derivativeFont: l at: l emphasis.	l _ LinedTTCFont fromTTCFont: aTTCFont emphasis: 20.	self derivativeFont: l at: l emphasis.! !!TTCFont methodsFor: 'private' stamp: 'yo 5/6/2004 19:23'!subfamilyName	^ ttcDescription subfamilyName.! !!TTCFont methodsFor: 'testing' stamp: 'yo 5/6/2004 19:25'!isRegular	"Answer true if I am a Regular/Roman font (i.e. not bold, etc.)"	^ (self indexOfSubfamilyName: (self subfamilyName)) = 0.! !!TTCFont methodsFor: 'as yet unclassified' stamp: 'yo 5/6/2004 19:25'!printOn: aStream	aStream nextPutAll: 'TTCFont(';		nextPutAll: self familyName; space;		print: self pointSize; space;		nextPutAll: self subfamilyName;		nextPut: $)! !!LinedTTCFont methodsFor: 'as yet unclassified' stamp: 'yo 5/7/2004 12:49'!computeForm: char	| ttGlyph scale |	char = Character tab ifTrue: [^ super computeForm: char].	"char = $U ifTrue: [self doOnlyOnce: [self halt]]."	scale _ self pixelSize asFloat / (ttcDescription ascender - ttcDescription descender).	ttGlyph _ ttcDescription at: char.	^ ttGlyph asFormWithScale: scale ascender: ttcDescription ascender descender: ttcDescription descender fgColor: foregroundColor bgColor: Color transparent depth: self depth replaceColor: false lineGlyph: lineGlyph lingGlyphWidth: contourWidth emphasis: emphasis! !!LinedTTCFont methodsFor: 'as yet unclassified' stamp: 'yo 5/6/2004 19:56'!emphasis	^ emphasis.! !!LinedTTCFont methodsFor: 'as yet unclassified' stamp: 'yo 5/6/2004 19:18'!emphasis: code	emphasis _ code.! !!LinedTTCFont methodsFor: 'as yet unclassified' stamp: 'yo 5/7/2004 11:26'!lineGlyph: aGlyph	lineGlyph _ aGlyph.	contourWidth _ aGlyph calculateWidth.! !!TTCFont class methodsFor: 'instance creation' stamp: 'yo 5/7/2004 12:24'!reorganizeForNewFontArray: array name: styleName	| style existings regular altName |	(TextConstants includesKey: styleName) ifFalse: [		TextConstants at: styleName put: (TextStyle fontArray: array).		^ TextConstants at: styleName.	]. 	"There is a text style with the name I want to use.  See if it is a TTC font..."	style _ TextConstants at: styleName.	style isTTCStyle ifFalse: [		altName _ ((array at: 1) name, 'TT') asSymbol.		^ self reorganizeForNewFontArray: array name: altName.	].	existings _ (self getExistings: style fontArray), (Array with: array).	regular _ existings detect: [:e | (e at: 1) isRegular] ifNone: [existings at: 1].	regular do: [:r |		r addLined: r.	].	"The existing array may be different in size than the new one."	existings do: [:e |		(e at: 1) isRegular ifFalse: [			regular do: [ :r | | f |				f _ e detect: [ :ea | ea pointSize = r pointSize ] ifNone: [ ].				f ifNotNil: [ r derivativeFont: f ].			].		].	].	style newFontArray: regular.	self recreateCache.		^ style.! !!TTCFont class methodsFor: 'other' stamp: 'yo 5/7/2004 08:25'!recreateCache"	self recreateCache."	self allSubInstances do: [:inst | inst recreateCache].	Smalltalk garbageCollect.! !!TTCFont class methodsFor: 'other' stamp: 'yo 5/7/2004 08:09'!removeAllDerivatives"	self removeAllDerivatives"	self allInstances do: [:s |		s textStyle ifNotNil: [			s textStyle fontArray do: [:f |				f derivativeFont: nil at: 0.			].		].	].! !!LinedTTCFont class methodsFor: 'as yet unclassified' stamp: 'yo 5/7/2004 07:32'!fromTTCFont: aTTCFont emphasis: code	| inst |	inst _ self new.	inst ttcDescription: aTTCFont ttcDescription.	inst pointSize: aTTCFont pointSize.	inst recreateCache.	inst emphasis: (aTTCFont emphasis bitOr: code).	inst lineGlyph: (aTTCFont ttcDescription at: $_).	^ inst.! !!TTGlyph methodsFor: 'private' stamp: 'yo 5/7/2004 10:38'!calculateWidth	| min max |	min _ SmallInteger maxVal.	max _ SmallInteger minVal.	self contours do: [:a | a do: [:p |		p x > max ifTrue: [max _ p x].		p x < min ifTrue: [min _ p x].	]].	^ max - min.! !!TTGlyph methodsFor: 'converting' stamp: 'yo 5/7/2004 10:37'!asFormWithScale: scale ascender: ascender descender: descender fgColor: fgColor bgColor: bgColor depth: depth replaceColor: replaceColorFlag	^ self		asFormWithScale: scale		ascender: ascender		descender: descender		fgColor: fgColor		bgColor: bgColor		depth: depth		replaceColor: replaceColorFlag		lineGlyph: nil		lingGlyphWidth: 0		emphasis: 0.! !!TTGlyph methodsFor: 'converting' stamp: 'yo 5/7/2004 11:22'!asFormWithScale: scale ascender: ascender descender: descender fgColor: fgColor bgColor: bgColor depth: depth replaceColor: replaceColorFlag lineGlyph: lineGlyph lingGlyphWidth: lWidth emphasis: code	| form canvas newScale |	form _ Form extent: (advanceWidth @ (ascender - descender) * scale) rounded depth: depth.	form fillColor: bgColor.	canvas _ BalloonCanvas on: form.	canvas aaLevel: 4.	canvas transformBy: (MatrixTransform2x3 withScale: scale asPoint * (1 @ -1)).	canvas transformBy: (MatrixTransform2x3 withOffset: 0 @ ascender negated).	canvas		drawGeneralBezierShape: self contours		color: fgColor 		borderWidth: 0 		borderColor: fgColor.	((code bitAnd: 4) ~= 0 or: [(code bitAnd: 16) ~= 0]) ifTrue: [		newScale _ (form width + 1) asFloat / lineGlyph calculateWidth asFloat.		canvas transformBy: (MatrixTransform2x3 withScale: (newScale / scale)@1.0).		(code bitAnd: 4) ~= 0 ifTrue: [			canvas				drawGeneralBezierShape: lineGlyph contours				color: fgColor 				borderWidth: 0 				borderColor: fgColor.		].		(code bitAnd: 16) ~= 0 ifTrue: [			canvas transformBy: (MatrixTransform2x3 withOffset: 0@(ascender // 2)).			canvas				drawGeneralBezierShape: lineGlyph contours				color: fgColor 				borderWidth: 0 				borderColor: fgColor.		].	].	replaceColorFlag ifTrue: [		form replaceColor: bgColor withColor: Color transparent.	].	^ form! !!TextStyle methodsFor: 'fonts and font indexes' stamp: 'yo 5/7/2004 11:18'!addLinedIfTT	(fontArray first isKindOf: TTCFont) ifFalse: [^ self].	fontArray do: [:f |		f addLined.	].! !TextStyle removeSelector: #addUnderlinedIfTT!TTGlyph removeSelector: #asFormWithScale:ascender:descender:fgColor:bgColor:depth:replaceColor:lineGlyph:emphasis:!TTGlyph removeSelector: #calculateRatio!LinedTTCFont removeSelector: #calculateRatio:!LinedTTCFont removeSelector: #calculateWidth:!LinedTTCFont removeSelector: #formOf:!TTCFont removeSelector: #derivativeFont!"Postscript:"(TextConstants select: [:e | (e isKindOf: TextStyle) and: [e isTTCStyle]]) do: [:f | f addLinedIfTT]!