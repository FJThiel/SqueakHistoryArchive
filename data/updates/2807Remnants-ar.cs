'From Squeak2.9alpha of 13 June 2000 [latest update: #2851] on 10 October 2000 at 6:50 pm'!"Change Set:		Remnants-arDate:			10 October 2000Author:			Andreas RaabSome more stuff related to ctrl menu, parts donors and parts bins etc."!!Morph methodsFor: 'events-processing' stamp: 'ar 10/10/2000 14:40'!mouseDownPriority	"Return the default mouse down priority for the receiver"	(self isPartsDonor or:[self isPartsBin])		ifTrue:[^50]		ifFalse:[^0].	self flag: #workAround.	self flag: #arNote. "The above is a workaround for the complete confusion between parts donors and parts bins. Morphs residing in a parts bin may or may not have the parts donor property set; if they have they may or may not actually handle events. To work around this, parts bins get an equal priority to parts donors so that when a morph in the parts bin does have the property set but does not handle the event we still get a copy from picking it up through the parts bin. Argh. This just *cries* for a cleanup."! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/10/2000 14:28'!buildMetaMenu: evt	"Build the morph menu. This menu has two sections. The first section contains commands that are handled by the hand; the second contains commands handled by the argument morph."	| menu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'grab' action: #grabMorph:.	menu add: 'copy to paste buffer' action: #copyToPasteBuffer:.	self maybeAddCollapseItemTo: menu.	menu add: 'delete' action: #dismissMorph:.	menu addLine.	menu add: 'copy Postscript' action: #clipPostscript.	menu add: 'print PS to file...' action: #printPSToFile.	menu addLine.	menu add: 'go behind' action: #goBehind.	menu add: 'add halo' action: #addHalo:.	menu add: 'duplicate' action: #maybeDuplicateMorph:.	self potentialEmbeddingTargets size > 1 ifTrue:		[menu add: 'embed...' action: #embedInto:].	menu add: 'resize' action: #resizeMorph:.	"Give the argument control over what should be done about fill styles"	self addFillStyleMenuItems: menu hand: evt hand.	(self morphsAt: evt position) size > 1 ifTrue:		[menu add: 'submorphs...'			target: self			selector: #invokeMetaMenuAt:event:			argument: evt position].	menu addLine.	menu add: 'inspect' selector: #inspectAt:event: argument: evt position.	menu add: 'explore' action: #explore.	menu add: 'browse hierarchy' action: #browseHierarchy.	menu add: 'make own subclass' action: #subclassMorph.	menu addLine.	menu add: 'set variable name...' action: #choosePartName.	(self isMorphicModel) ifTrue:		[menu add: 'save morph as prototype' action: #saveAsPrototype.		(self ~~ self world modelOrNil) ifTrue:			 [menu add: 'become this world''s model' action: #beThisWorldsModel]].	menu add: 'save morph in file' action: #saveOnFile.	(self hasProperty: #resourceFilePath)		ifTrue: [((self valueOfProperty: #resourceFilePath) endsWith: '.morph')				ifTrue: [menu add: 'save as resource' action: #saveAsResource].				menu add: 'update from resource' action: #updateFromResource]		ifFalse: [menu add: 'attach to resource' action: #attachToResource].	menu add: 'show actions' action: #showActions.	menu addLine.	self addCustomMenuItems: menu hand: evt hand.	^ menu! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/10/2000 14:43'!duplicateMorph: evt	"Make and return a duplicate of the receiver's argument"	| dup |	dup _ self duplicate.	evt hand grabMorph: dup.	^dup! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/10/2000 14:09'!inspectAt: aPoint event: evt	| menu morphs target |	menu _ CustomMenu new.	morphs _ self morphsAt: aPoint.	(morphs includes: self) ifFalse:[morphs _ morphs copyWith: self].	morphs do: [:m | 		menu add: (m knownName ifNil:[m class name asString]) action: m].	target _ menu startUpWithCaption: ('inspect whom?(deepest at top)').	target ifNil:[^self].	target inspectInMorphic: evt! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/10/2000 14:26'!invokeMetaMenuAt: aPoint event: evt	| menu morphs target |	menu _ CustomMenu new.	morphs _ self morphsAt: aPoint.	(morphs includes: self) ifFalse:[morphs _ morphs copyWith: self].	morphs size = 1 ifTrue:[morphs first invokeMetaMenu: evt].	morphs do: [:m | 		menu add: (m knownName ifNil:[m class name asString]) action: m].	target _ menu startUp.	target ifNil:[^self].	target invokeMetaMenu: evt! !!PasteUpMorph methodsFor: 'interaction loop' stamp: 'ar 10/10/2000 14:12'!keyStroke: anEvent	"A keystroke has been made.  Service event handlers and, if it's a keystroke presented to the world, dispatch it to #unfocusedKeystroke:"	super keyStroke: anEvent.  "Give event handlers a chance"	(anEvent keyCharacter == Character tab) ifTrue:		[(self hasProperty: #tabAmongFields)			ifTrue:[^ self tabHitWithEvent: anEvent]].	self isWorldMorph ifTrue:		[self keystrokeInWorld: anEvent]! !!PasteUpMorph methodsFor: 'event handling' stamp: 'ar 10/10/2000 14:43'!mouseDown: evt	"Handle a mouse down event."	| grabbedMorph |	grabbedMorph _ self morphToGrab: evt.	grabbedMorph ifNotNil:[		grabbedMorph isSticky ifTrue:[^self].		self isPartsBin ifTrue:[			grabbedMorph _ grabbedMorph partRepresented duplicate.			(grabbedMorph fullBounds containsPoint: evt position) 				ifFalse:[grabbedMorph position: evt position]].		^evt hand grabMorph: grabbedMorph].	(super handlesMouseDown: evt)		ifTrue:[^super mouseDown: evt].	evt hand halo: nil. "shake off halos"	evt hand releaseKeyboardFocus. "shake of keyboard foci"	evt shiftPressed ifTrue:[		^evt hand 			waitForClicksOrDrag: self 			event: evt 			selectors: { #findWindow:. nil. #dragThroughOnDesktop:}			threshold: 5].	self isWorldMorph ifTrue:[self addAlarm: #invokeWorldMenu: with: evt after: 200].! !!PasteUpMorph methodsFor: 'world menu' stamp: 'ar 10/10/2000 18:49'!invokeWorldMenu: evt	| menu |	Utilities bringFlapsToFront.	evt isMouse ifTrue:[		evt yellowButtonPressed			ifTrue: [^ self yellowButtonClickOnDesktopWithEvent: evt].		evt shiftPressed ifTrue:[^self findWindow: evt]].	"put put screen menu"	menu _ self buildWorldMenu: evt.	menu addTitle: Preferences desktopMenuTitle.	menu popUpEvent: evt in: self! !!PasteUpMorph methodsFor: 'world menu' stamp: 'ar 10/10/2000 14:11'!keystrokeInWorld: evt	|  aChar isCmd aMenu |	aChar _ evt keyCharacter.	isCmd _ evt commandKeyPressed and: [Preferences cmdKeysInText].	isCmd ifTrue:[		(aChar == $W) ifTrue:[^self invokeWorldMenu: evt].		(aChar == $b) ifTrue: [^ Browser openBrowser].          "for example"		(aChar == $z) ifTrue: [^ self commandHistory undoOrRedoCommand]]! !TextMorphForEditView removeSelector: #dispatchKeystroke:!TextMorph removeSelector: #dispatchKeystroke:!Morph removeSelector: #dispatchKeystroke:!