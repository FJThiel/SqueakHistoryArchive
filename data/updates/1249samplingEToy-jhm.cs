'From Squeak 2.4c of May 10, 1999 on 15 June 1999 at 11:42:58 pm'!"Change Set:		samplingEToy-jhmDate:			22 April 1999Author:			John MaloneyAdds facilities for sampled sound generation tothe EToy scripting system.  (a few further changes by sw 6/15/99)"!Morph subclass: #SpeakerMorph	instanceVariableNames: 'bufferSize buffer lastConePosition sound '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!GraphMorph methodsFor: 'accessing' stamp: 'jm 4/22/1999 23:09'!cursorWrapped: aNumber	| truncP |	cursor ~= aNumber ifTrue:  [		cursor _ aNumber.		[cursor > data size] whileTrue: [cursor _ cursor - data size].		[cursor < 1] whileTrue: [cursor _ cursor + data size].		truncP _ aNumber truncated.		truncP < 0 ifTrue: [cursor _ 1]].! !!GraphMorph methodsFor: 'accessing' stamp: 'jm 4/21/1999 10:34'!interpolatedValueAtCursor	| sz prev frac |	data isEmpty ifTrue: [^ 0].	sz _ data size.	cursor <= 1 ifTrue: [^ data at: 1].	cursor >= sz ifTrue: [^ data at: sz].	prev _ cursor truncated.	frac _ cursor - prev.	frac = 0 ifTrue: [^ data at: prev].  "no interpolation needed"	"interpolate"	^ ((1.0 - frac) * (data at: prev)) + (frac * (data at: prev + 1))! !!GraphMorph methodsFor: 'accessing' stamp: 'jm 4/21/1999 11:24'!lastValue	data size = 0 ifTrue: [^ 0].	^ data last! !!GraphMorph methodsFor: 'accessing' stamp: 'jm 4/21/1999 11:25'!lastValue: aNumber	self appendValue: aNumber.! !!GraphMorph methodsFor: 'commands' stamp: 'jm 4/22/1999 14:49'!loadSineWave	self loadSoundData: FMSound sineTable.! !!GraphMorph methodsFor: 'commands' stamp: 'jm 4/22/1999 14:17'!loadSound: aSound	self loadSoundData: aSound samples.! !!GraphMorph methodsFor: 'commands' stamp: 'jm 4/22/1999 14:23'!loadSoundData: aCollection	| scale absV newData |	scale _ 0.	aCollection do: [:v | (absV _ v abs) > scale ifTrue: [scale _ absV]].	scale _ 100.0 / scale.	newData _ OrderedCollection new: aCollection size.	1 to: aCollection size do: [:i | newData addLast: (scale * (aCollection at: i))].	self data: newData.	self startIndex: 1.	self cursor: 1.! !!GraphMorph methodsFor: 'commands' stamp: 'jm 4/22/1999 17:02'!playOnce	| scale absV scaledData |	data isEmpty ifTrue: [^ self].  "nothing to play"	scale _ 0.	data do: [:v | (absV _ v abs) > scale ifTrue: [scale _ absV]].	scale _ 32767.0 / scale.	scaledData _ OrderedCollection new: data size.	1 to: data size do: [:i | scaledData addLast: ((data at: i) * scale)].	(SampledSound samples: scaledData samplingRate: 11025) play.! !!GraphMorph methodsFor: 'script support' stamp: 'sw 6/15/1999 09:39'!addCostumeSpecificCategoriesTo: aCategoryList	aCategoryList addIfNotPresent: 'sampling'! !!GraphMorph methodsFor: 'private' stamp: 'jm 4/21/1999 11:30'!keepIndexInView: index	| w newStart |	w _ bounds width - (2 * borderWidth).	index < startIndex ifTrue: [		newStart _ index - w + 1.		^ self startIndex: (newStart max: 1)].	index > (startIndex + w) ifTrue: [		^ self startIndex: (index min: data size)].! !!GraphMorph class methodsFor: 'as yet unclassified' stamp: 'sw 6/15/1999 14:35'!categoryContributions	^ #(('sampling' ((slot cursorWrapped) (slot sampleAtCursor) (slot lastValue) (script clear) (script loadSineWave) (script loadSound:) (script reverse) (script play))))! !!GraphMorph class methodsFor: 'as yet unclassified' stamp: 'sw 6/15/1999 23:41'!helpContributions	^ #((clear			'Clear the graph of current contents')		(loadSineWave			'Load a sine wave as the current graph')		(loadSound: 			'Load the specified sound into the current graph')		(command			'Reverse the graph')		(play			'Play the current graph as a sound')		(cursorWrapped			'The current cursor location, wrapped back to the beginning if appropriate')		(sampleAtCursor			'The sample value at the current cursor location')		(lastValue			'The last value obtained')		(reverse			'Reverse the graph'))! !!GraphMorph class methodsFor: 'as yet unclassified' stamp: 'sw 6/15/1999 12:34'!scriptInfo	"Answer a list of arrays which characterize new etoy script commands understood by this kind of morph -- in addition to those already defined by superclasses.  This is used only for initializing an effectively global structure."	^ #	((command clear)		(command loadSineWave)		(command loadSound: sound)		(command reverse)		(command play))! !!GraphMorph class methodsFor: 'as yet unclassified' stamp: 'sw 6/15/1999 13:01'!standardSlotInfo	"Answer a list of arrays which characterize etoy slots borne by this kind of morph -- in addition to those already defined by superclasses.  Implementors of this method are statically polled to contribute this information when the scripting system reinitializes its scripting info, which typically only happens after a structural change."	^ #((cursorWrapped	number		readWrite	getCursorWrapped	setCursorWrapped:)		(sampleAtCursor	number		readWrite	getSampleAtCursor	setSampleAtCursor:)		(lastValue	 	number		readWrite	getLastValue		setLastValue:))! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/22/1999 15:46'!getConePosition	"Note: Performance hacked to allow real-time sound. Assumes costume is a SpeakerMorph."	^ costume renderedMorph conePosition! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/22/1999 15:45'!getCursorWrapped	"Note: Performance hacked to allow real-time sound. Assumes costume is a GraphMorph."	^ costume renderedMorph cursor! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/21/1999 11:46'!getLastValue	^ self getValueFromCostume: #lastValue! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/22/1999 15:45'!getSampleAtCursor	"Note: Performance hacked to allow real-time sound. Assumes costume is a GraphMorph."	^ costume renderedMorph interpolatedValueAtCursor! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/22/1999 15:46'!setConePosition: aNumber	"Note: Performance hacked to allow real-time sound. Assumes costume is a SpeakerMorph."	costume renderedMorph conePosition: aNumber.! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/22/1999 15:45'!setCursorWrapped: aNumber	"Note: Performance hacked to allow real-time sound. Assumes costume is a GraphMorph."	costume renderedMorph cursorWrapped: aNumber.! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/21/1999 11:46'!setLastValue: aNumber	self setCostumeSlot: #lastValue: toValue: aNumber.! !!Player methodsFor: 'slots-standard-get/set' stamp: 'jm 4/22/1999 15:46'!setSampleAtCursor: aNumber	"Note: Performance hacked to allow real-time sound. Assumes costume is a GraphMorph."	self setCostumeSlot: #valueAtCursor: toValue: aNumber.! !!Player methodsFor: 'scripts-standard' stamp: 'jm 4/22/1999 15:52'!clear	self sendMessageToCostume: #clear.! !!Player methodsFor: 'scripts-standard' stamp: 'jm 4/22/1999 15:53'!loadSineWave	self sendMessageToCostume: #loadSineWave.! !!Player methodsFor: 'scripts-standard' stamp: 'jm 4/22/1999 15:53'!loadSound: soundName	| snd |	snd _ SampledSound soundNamed: soundName.	snd ifNotNil: [self sendMessageToCostume: #loadSound: with: snd].! !!Player methodsFor: 'scripts-standard' stamp: 'jm 4/22/1999 15:52'!play	self sendMessageToCostume: #playOnce.! !!Player methodsFor: 'scripts-standard' stamp: 'jm 4/22/1999 15:52'!reverse	self sendMessageToCostume: #reverse.! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'jm 4/22/1999 08:37'!chooseTrigger	"NB; the keyStroke branch commented out temporarily until keystrokes can actually be passed along to the user's scripting code"	| aMenu reply standardStati aScriptInstantiation m |	standardStati _ #(normal paused ticking mouseDown mouseStillDown mouseUp mouseEnter mouseLeave mouseEnterDragging mouseLeaveDragging opening closing "keyStroke").	aScriptInstantiation _ self scriptInstantiation.	aMenu _ SelectionMenu labelList:  #(		'normal'		" -- run when called"				'paused' 		"ready to run all the time"		'ticking'		"run all the time"		'mouseDown'	"run when mouse goes down on me"		'mouseStillDown'	"while mouse still down"		'mouseUp'		"when mouse comes back up"		'mouseEnter'	"when mouse enters my bounds, button up"		'mouseLeave'	"when mouse exits my bounds, button up"		'mouseEnterDragging'	"when mouse enters my bounds, button down"		'mouseLeaveDragging'	"when mouse exits my bounds, button down"		'opening'	"when I am being opened"		'closing'	"when I am being closed"	"	'keyStroke'	run when user hits a key"		)		lines: #(1 3 6 10 "12")		selections: standardStati.	reply _ aMenu startUpWithCaption: 'When should this script run?'.	(reply == #keyStroke) ifTrue: [^ self inform: 'user-scripted fieldingof keystrokes is notyet available.'].	reply ifNotNil: 		[aScriptInstantiation status: reply.  "Gets event handlers fixed up"		reply == #ticking ifTrue: [playerScripted costume arrangeToStartStepping].		reply == #paused ifTrue: [			m _ playerScripted costume.			(m isKindOf: SpeakerMorph) ifTrue: [m stopSound]].		self updateStatus]! !!SequentialSound methodsFor: 'composition' stamp: 'jm 4/14/1999 10:05'!pruneFinishedSounds	"Remove any sounds that have been completely played."	| newSnds |	(currentIndex > 1 and: [currentIndex < sounds size]) ifFalse: [^ self].	newSnds _ sounds copyFrom: currentIndex to: sounds size.	currentIndex _ 1.	sounds _ newSnds.! !!SoundRecorder methodsFor: 'initialization' stamp: 'jm 4/22/1999 14:30'!initialize	"SoundRecorder new"	stereo _ false.	samplingRate _ 11025.	recordLevel _ 0.5.	self initializeRecordingState.! !!SpeakerMorph methodsFor: 'initialization' stamp: 'jm 4/22/1999 22:58'!addGraphic	| graphic |	graphic _ SketchMorph new form: self speakerGraphic.	graphic position: bounds center - (graphic extent // 2).	self addMorph: graphic.! !!SpeakerMorph methodsFor: 'initialization' stamp: 'jm 4/22/1999 23:00'!initialize	super initialize.	self addGraphic.	self color: (Color r: 1.0 g: 0.484 b: 0.258).	bufferSize _ 5000.	buffer _ WriteStream on: (SoundBuffer newMonoSampleCount: bufferSize).	lastConePosition _ 0.	sound _ SequentialSound new.! !!SpeakerMorph methodsFor: 'initialization' stamp: 'jm 4/22/1999 22:58'!speakerGraphic	^ Form		extent: 19@18		depth: 8		fromArray: #(0 0 1493172224 2816 0 0 0 1493172224 11 0 0 138 1493172224 184549376 184549376 0 35509 2315255808 720896 720896 0 9090522 2315255808 2816 720896 0 2327173887 2315255819 2816 720896 138 3051028442 2315255819 2816 2816 1505080590 4294957786 2315255808 184549387 2816 3053453311 4292532917 1493172224 184549387 2816 1505080714 3048584629 1493172224 184549387 2816 9079434 3048584629 1493172224 184549387 2816 138 2327164341 1493172235 2816 2816 0 2324346293 1493172235 2816 720896 0 9079477 1493172224 2816 720896 0 35466 1493172224 720896 720896 0 138 0 184549376 184549376 0 0 0 11 0 0 0 0 2816 0)		offset: 0@0! !!SpeakerMorph methodsFor: 'scripting' stamp: 'sw 6/15/1999 09:38'!addCostumeSpecificCategoriesTo: aCategoryList	aCategoryList addIfNotPresent: 'speaker'! !!SpeakerMorph methodsFor: 'speaker' stamp: 'jm 4/22/1999 16:45'!appendSample: aFloat	"Append the given sample, a number between -100.0 and 100.0, to my buffer. Flush the buffer if it is full."	lastConePosition _ aFloat.	lastConePosition > 100.0 ifTrue: [lastConePosition _ 100.0].	lastConePosition < -100.0 ifTrue: [lastConePosition _ -100.0].	buffer nextPut: (327.67 * lastConePosition) truncated.	buffer position >= bufferSize ifTrue: [self flushBuffer].! !!SpeakerMorph methodsFor: 'speaker' stamp: 'jm 4/21/1999 10:18'!conePosition	^ lastConePosition! !!SpeakerMorph methodsFor: 'speaker' stamp: 'jm 4/22/1999 16:46'!conePosition: aNumber	self appendSample: aNumber asFloat.  "sets lastConePosition"! !!SpeakerMorph methodsFor: 'speaker' stamp: 'jm 4/22/1999 13:29'!flushBuffer	| buf |	buf _ buffer contents.	buffer resetContents.	sound isPlaying ifFalse: [sound _ SequentialSound new].	sound add: (SampledSound samples: buf samplingRate: 11025).	sound isPlaying		ifTrue: [sound pruneFinishedSounds]		ifFalse: [sound play].! !!SpeakerMorph methodsFor: 'speaker' stamp: 'jm 4/22/1999 15:33'!stopSound	sound pause.	buffer resetContents.! !!SpeakerMorph class methodsFor: 'as yet unclassified' stamp: 'sw 6/15/1999 14:41'!categoryContributions	^ #(('speaker' ((slot conePosition))))! !!SpeakerMorph class methodsFor: 'as yet unclassified' stamp: 'sw 6/15/1999 17:09'!helpContributions	^ #((conePosition			'The position of the speaker cone'))! !!SpeakerMorph class methodsFor: 'as yet unclassified' stamp: 'sw 6/15/1999 13:00'!standardSlotInfo	"Answer a list of arrays which characterize etoy slots borne by this kind of morph -- in addition to those already defined by superclasses.  Implementors of this method are statically polled to contribute this information when the scripting system reinitializes its scripting info, which typically only happens after a structural change."	^ #((conePosition 	number		readWrite	getConePosition		setConePosition:))! !"Postscript:"StandardScriptingSystem initialize.!