'From Squeak 2.1 of June 30, 1998 on 5 August 1998 at 6:23:57 pm'!"Change Set:		presenterFixes-swDate:			5 August 1998Author:			Scott WallaceVarious fixes relating to presenters, primarily centered around moving the balloonHelpEnabled flag from the Presenter to the World, calling the local Presenter to get the current setting of the soundsEnabled flag, and making sure the right presenter is involved in transactions."!Object subclass: #Presenter	instanceVariableNames: 'associatedMorph stopButton stepButton goButton mouseOverHalosEnabled soundsEnabled fenceEnabled coloredTilesEnabled viewerCache standardPlayer standardPlayfield standardPalette standardHolder playerList borderColorWhenRunning borderColorWhenStopped '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!!Morph methodsFor: 'initialization' stamp: 'sw 8/4/1998 18:20'!openInWorld: aWorld	"Add this morph to the requested World."	aWorld addMorph: self! !!Morph methodsFor: 'e-toy commands' stamp: 'sw 8/4/1998 18:41'!makeFenceSound	self presenter soundsEnabled ifTrue:		[self playSoundNamed: 'scratch'].! !!Morph methodsFor: 'aug97 additions' stamp: 'sw 8/4/1998 18:41'!vanishAfterSlidingTo: aPosition event: evt	| aForm aWorld origin startPoint endPoint aPresenter |	aForm _ self imageForm offset: 0@0.	aPresenter _ self presenter.	aWorld _ self world.	origin _ aWorld viewBox origin.	startPoint _ evt hand fullBounds origin + origin.	self delete.	aWorld displayWorld.	endPoint _ aPosition + origin.	aForm slideFrom: startPoint  to: endPoint nSteps: 12 delay: 15.	aPresenter soundsEnabled ifTrue: [TrashCanMorph playDeleteSound].! !!Player methodsFor: 'scripts-standard' stamp: 'sw 8/4/1998 18:41'!beep: soundName	costume presenter soundsEnabled		ifTrue: [self playSoundNamed: soundName]! !!Player methodsFor: 'misc' stamp: 'sw 8/4/1998 18:42'!makeBounceSound: soundName	costume presenter soundsEnabled		ifTrue: [self playSoundNamed: soundName].! !!Presenter commentStamp: 'sw 8/5/1998 18:23' prior: 0!Optionally associated with a PasteUpMorph, provides presentation services.Holds control buttons:	stopButton stepButton goButton.Holds state flags:	mouseOverHalosEnabled soundsEnabled fenceEnabled coloredTilesEnabledHolds a viewerCache Holds, optionally three 'standard items' originally providing idiomatic support of ongoing squeak-team internal work, but now extended to more general applicability:   standardPlayer standardPlayfield standardPalette !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 8/3/1998 14:17'!controlPanel	|  aPanel |	(aPanel _ associatedMorph world allMorphs detect:		[:aMorph | ((aMorph isKindOf: PasteUpMorph) and: [aMorph hasProperty: #controlPanel])]				ifNone: [nil]) notNil			ifTrue:				[^ aPanel].	aPanel _ PasteUpMorph new extent:  128 @ 48.	aPanel color: Color white; padding: 9; borderWidth: 1; borderColor: Color blue.	aPanel addAllMorphs: self toggleButtons. 	aPanel laySubpartsOutInOneRow.	aPanel setProperty: #controlPanel toValue: true; setNameTo: 'Control Panel'.	^ aPanel ! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 8/5/1998 00:16'!customPagesForPartsBin	| aPage |	^ #(BookMorph WebBookMorph) collect:		[:sym |			aPage _ self newPageForStandardPartsBin.			aPage addMorphBack: (Smalltalk at: sym) authoringPrototype.			aPage addMorphBack: Morph new previousPageButton markAsPartsDonor.			aPage addMorphBack: Morph new nextPageButton markAsPartsDonor.			aPage fixLayout.			aPage]! !!Presenter methodsFor: 'toggle-state flags' stamp: 'sw 8/5/1998 07:37'!balloonHelpEnabled	"Because the Hand logic wants to get the balloon-help state from the World rather than from any more local morph, this option always gets referred directly to the world -- perforce non-uniform with the other toggles"	^ associatedMorph world balloonHelpEnabled! !!Presenter methodsFor: 'toggles-actions' stamp: 'sw 8/5/1998 07:37'!toggleShowBalloons	"Because the Hand logic wants to get the balloon-help state from the World rather than from any more local morph, this option always gets referred directly to the world -- perforce non-uniform with the other toggles"	self world toggleShowBalloons! !!Presenter methodsFor: 'misc' stamp: 'sw 8/5/1998 07:38'!initializeToggles	mouseOverHalosEnabled _ true.	soundsEnabled _ true.	fenceEnabled _ true.	coloredTilesEnabled _ false! !!Presenter methodsFor: 'misc' stamp: 'sw 8/5/1998 07:35'!toggleButtons	| aButton aDict aList |	aDict _ ScriptingSystem formDictionary.	aList _ #(	('Balloons'	'BalloonsOn'		'BalloonsOff' 	toggleShowBalloons	balloonHelpEnabled)	('Sounds'	'SoundOn'		'SoundOff'  		toggleSoundsEnabled	soundsEnabled)	('Fence'		'FenceOn'		'FenceOff'  		toggleFence			fenceEnabled)) with:	#('Balloon Help:If green, then when thecursor pauses over an objectthat has balloon help,that help balloon is shown''Sounds:If green, sounds will be heard when appropriate; ifred, sounds are suppressed.''Fence:If green, an invisible "fence"keeps your objects from strayingoutside their containers whentheir scripts move them.')	collect:			[:q :helpString |			aButton _ ToggleButtonMorph new setNameTo: q first.			aButton onImage: (aDict at: q second);				offImage: (aDict at: q third);				pressedImage: nil;				actionSelector: q fourth;				stateSelector: q last;				actWhen: #buttonDown;				target: self;				setInitialState;  "Obtains it from target"				setBalloonText: helpString;				extent: (aDict at: q second) extent.			aButton].	^ aList! !!TrashCanMorph methodsFor: 'event handling' stamp: 'sw 8/4/1998 18:42'!mouseEnter: event	"Present feedback for potential deletion."	| hand |	hand _ event hand.	((hand submorphCount > 0) and:	 [hand submorphs first ~~ self])		ifTrue: [			self presenter soundsEnabled ifTrue: [self class playMouseEnterSound].			hand startDisplaySuppression.			self world abandonAllHalos.			self state: #pressed]		ifFalse: [			self showStampIn: hand].! !!TrashCanMorph methodsFor: 'event handling' stamp: 'sw 8/4/1998 18:42'!mouseLeave: event	"Present feedback for aborted deletion."	| hand |	hand _ event hand.	((hand submorphCount > 0) and:	 [hand submorphs first ~~ self])		ifTrue:			[self presenter soundsEnabled ifTrue: [self class playMouseLeaveSound].			hand endDisplaySuppression.			self state: #off]		ifFalse:			[self stopShowingStampIn: hand].! !!TrashCanMorph methodsFor: 'dropping' stamp: 'sw 8/4/1998 18:42'!acceptDroppingMorph: aMorph event: evt	| palette |	self presenter soundsEnabled ifTrue: [self class playDeleteSound].	evt hand endDisplaySuppression.	self state: #off.	aMorph delete.	palette _ self standardPalette.	palette ifNotNil: [palette addToTrash: aMorph].! !!WorldMorph methodsFor: 'initialization' stamp: 'sw 8/5/1998 07:29'!initialize	super initialize.	color _ (Color r:0.937 g: 0.937 b: 0.937).	fillColor2 _ color.	hands _ Array new.	self addHand: HandMorph new.	viewBox _ canvas _ nil.	damageRecorder _ DamageRecorder new.	stepList _ OrderedCollection new.	lastStepTime _ 0.	balloonHelpEnabled _ true.	self setProperty: #automaticPhraseExpansion toValue: true.	model _ nil.! !!WorldMorph methodsFor: 'balloon help' stamp: 'sw 8/5/1998 07:31'!balloonHelpEnabled	^ balloonHelpEnabled ~~ false! !!WorldMorph methodsFor: 'balloon help' stamp: 'sw 8/5/1998 07:31'!toggleShowBalloons	balloonHelpEnabled _ self balloonHelpEnabled not! !Presenter removeSelector: #createTilePartsBin!Presenter removeSelector: #newTilePartsBin!Presenter removeSelector: #positionControlPanel:!