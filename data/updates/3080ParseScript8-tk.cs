'From Squeak2.9alpha of 16 June 2000 [latest update: #3106] on 1 December 2000 at 3:43:29 pm'!!Morph methodsFor: 'scripting' stamp: 'tk 12/1/2000 15:22'!updatingTileForArgType: typeSymbol partName: partName getSelector: getSelector putSelector: putSelector	"Answer a readout tile representing the given part's value, given the putter, getter, and type information"	| aColor aTile displayer |	aColor _ Color lightGray lighter.	aTile _ typeSymbol == #number		ifTrue:			[NumericReadoutTile new typeColor: aColor]		ifFalse:				[typeSymbol == #sound				ifTrue:					[SoundReadoutTile new typeColor: aColor]				ifFalse:					[typeSymbol == #buttonPhase						ifTrue:							[SymbolListTile new choices: #(buttonDown whilePressed buttonUp) dataType:  typeSymbol]						ifFalse:							[StringReadoutTile new typeColor: aColor]]]. 	displayer _ UpdatingStringMorph new		getSelector: getSelector;		target: self player;		growable: true;		minimumWidth: 24;		putSelector: ((putSelector == #unused) ifTrue: [nil] ifFalse: [putSelector]).	(typeSymbol == #number)		ifTrue:			 [((#(cursor  "etc...") includes: partName) and: [self isKindOf: GraphMorph])				ifTrue:					[displayer floatPrecision: 0.1]				ifFalse:					[(self player slotInfo includesKey: partName)  "i.e., a user-defined numeric slot"						ifTrue:							[displayer floatPrecision: (self player slotInfoAt: partName) floatPrecision]]].	typeSymbol == #string		ifTrue:			[displayer useStringFormat.			displayer growable: true]		ifFalse:			[(typeSymbol == #sound)				ifTrue: 	[displayer useStringFormat]				ifFalse:	[displayer useDefaultFormat]].	aTile addMorphBack: displayer.	((putSelector ~~ #unused) and: [#(number sound boolean buttonPhase) includes: typeSymbol])  ifTrue: [aTile addArrows].	aTile setLiteralInitially: (self scriptPerformer perform: getSelector).	^ aTile! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'tk 11/30/2000 16:19'!useNewTiles	| ww |	"At the next request for textual script, use new tiles instead.  Make that request."	ww _ Display bestGuessOfCurrentWorld.	(ww valueOfProperty: #universalTiles ifAbsent: [false]) ifFalse: [		ww setProperty: #universalTiles toValue: true.	 		"for all scriptors and viewers in this world"		"force viewers to be recreated"		ww flapTabs do: [:ff | (ff isMemberOf: ViewerFlapTab) ifTrue: [							ff referent delete.  ff delete]].		Utilities clobberFlapTabList].	Preferences enable: #capitalizedReferences.	self showSourceInScriptor. ! !!SyntaxMorph methodsFor: 'selection' stamp: 'tk 12/1/2000 15:42'!wantsKeyboardFocusFor: aSubmorph	| doEdit |	"only let strings edit on shift-click.  Editing on ordinary click defeats the brown selection and tile dragging."	doEdit _ self world primaryHand lastEvent shiftPressed.	doEdit ifTrue: ["remove the arrows during editing"		self valueOfProperty: #myPopup ifPresentDo: [:panel |			panel delete. self removeProperty: #myPopup]].	^ doEdit! !!UpdatingStringMorph methodsFor: 'accessing' stamp: 'tk 12/1/2000 15:08'!minimumWidth: aWidth	"Set the minimum width that the receiver can have.  A nonzero value here keeps the receiver from degenerating into something that cannot ever be seen or touched again!!  Obeyed by fitContents."	minimumWidth _ aWidth! !!UpdatingStringMorph methodsFor: 'editing' stamp: 'tk 12/1/2000 15:37'!doneWithEdits	"If in a SyntaxMorph, shrink min width after editing"	super doneWithEdits.	(owner respondsTo: #parseNode) ifTrue: [minimumWidth _ 8].! !!UpdatingStringMorph methodsFor: 'editing' stamp: 'tk 12/1/2000 15:36'!mouseDown: evt	(owner wantsKeyboardFocusFor: self) ifTrue:		[putSelector ifNotNil: [			minimumWidth _ (49 max: minimumWidth).	"leave space for editing"			self launchMiniEditor: evt]]! !!UserScript methodsFor: 'script editor' stamp: 'tk 11/30/2000 16:32'!releaseCachedState	"release all non-showing scriptors.  What do we do about versions????"	self isTextuallyCoded ifTrue: [formerScriptEditors _ OrderedCollection new].		"to test new tiles.  We 'commit' to current script."	currentScriptEditor ifNil: [^ self].	true ifTrue: [^ self].	"<<< to test the reconstruction of scripts, change to false"	currentScriptEditor world ifNil: ["not showing"		currentScriptEditor _ nil].! !