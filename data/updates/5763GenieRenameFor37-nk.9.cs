'From Squeak3.7alpha of 11 September 2003 [latest update: #5707] on 15 February 2004 at 10:41:22 am'!"Change Set:		GenieRenameFor37-nkDate:			20 February 2004Author:			Ned KonzThis CS adds all the genie- method categories to the Genie package so we can apply Monticello changes.This preamble does the basic category renaming needed.The rest of the CS changes a few other methods, primarily ones that shouldn't be in Genie.20 Feb: removed inspector."| pi bad |SystemOrganization renameCategory: 'Tests-Genie-Engine' toBe: 'Genie-Tests'.pi _ PackageInfo named: 'Genie'.bad _ OrderedCollection new.(ClassDescription allSubInstances reject: [ :ea | ea isObsolete ]) do: [ :cls | | org |	org _ cls organization.	org categories do: [ :cat |	(pi includesClass: cls) ifFalse: [	 ( cat asLowercase beginsWith: 'genie') ifTrue: [		(org listAtCategoryNamed: cat) do: [ :sel |			org classify: sel under: ('*', cat).			ChangeSet current adoptSelector: sel forClass: cls.			bad add: (cls -> sel) ].		org removeEmptyCategories ]]	ifTrue: [	 ( cat asLowercase beginsWith: '*genie-') ifTrue: [ | newName |		newName _ cat copyFrom: 8 to: cat size.		newName isEmpty ifTrue: [ newName _ cat copyFrom: 2 to: cat size ].		(org listAtCategoryNamed: cat) do: [ :sel |			org classify: sel under: newName.			ChangeSet current adoptSelector: sel forClass: cls.			bad add: (cls -> sel) ].		org removeEmptyCategories  ].	].]]."(bad explore) dependents first setLabel: 'moved methods'"!!CRGestureProcessor methodsFor: 'private' stamp: 'nk 2/15/2004 08:38'!giveChanceToEscape: anEventOrNil	"Answer true if I should escape from recognizing"	^ target allowsGestureEscape and: [recognizer shouldEscape and:		[self escapeFromRecognizer: anEventOrNil. true]].! !!CRGestureProcessor methodsFor: 'accessing' stamp: 'nk 2/15/2004 08:38'!giveChanceToEscape	"Answer true if I should escape from recognizing"	^ self giveChanceToEscape: nil! !!EventHandler methodsFor: '*genie-initialization-override' stamp: 'nk 2/15/2004 08:16'!onGestureSend: selector to: recipient	gestureRecipient _ recipient.	gestureSelector _ selector.! !!EventHandler methodsFor: '*genie-testing-override' stamp: 'nk 2/15/2004 08:29'!handlesGestureStart: evt	"Might the associated morph want to handle gestures?"	^ gestureRecipient notNil and: [gestureRecipient gestureDictionary notNil]! !!EventHandler methodsFor: 'initialization' stamp: 'nk 2/15/2004 08:16'!on: eventName send: selector to: recipient	eventName == #mouseDown ifTrue:		[mouseDownRecipient _ recipient.  mouseDownSelector _ selector. ^ self].	eventName == #mouseMove ifTrue:		[mouseMoveRecipient _ recipient.  mouseMoveSelector _ selector. ^ self].	eventName == #mouseStillDown ifTrue:		[mouseStillDownRecipient _ recipient.  mouseStillDownSelector _ selector. ^ self].	eventName == #mouseUp ifTrue:		[mouseUpRecipient _ recipient.  mouseUpSelector _ selector. ^ self].	eventName == #mouseEnter ifTrue:		[mouseEnterRecipient _ recipient.  mouseEnterSelector _ selector. ^ self].	eventName == #mouseLeave ifTrue:		[mouseLeaveRecipient _ recipient.  mouseLeaveSelector _ selector. ^ self].	eventName == #mouseEnterDragging ifTrue:		[mouseEnterDraggingRecipient _ recipient.  mouseEnterDraggingSelector _ selector. ^ self].	eventName == #mouseLeaveDragging ifTrue:		[mouseLeaveDraggingRecipient _ recipient.  mouseLeaveDraggingSelector _ selector. ^ self].	eventName == #click ifTrue:		[clickRecipient _ recipient. clickSelector _ selector. ^ self].	eventName == #doubleClick ifTrue:		[doubleClickRecipient _ recipient. doubleClickSelector _ selector. ^ self].	eventName == #doubleClickTimeout ifTrue:		[doubleClickTimeoutRecipient _ recipient. doubleClickTimeoutSelector _ selector. ^ self].	eventName == #startDrag ifTrue:		[startDragRecipient _ recipient. startDragSelector _ selector. ^ self].	eventName == #keyStroke ifTrue:		[keyStrokeRecipient _ recipient.  keyStrokeSelector _ selector. ^ self].	eventName == #gesture ifTrue:		[ ^self onGestureSend: selector to: recipient ].	self error: 'Event name, ' , eventName , ' is not recognizable.'! !!EventHandler methodsFor: 'testing' stamp: 'nk 2/15/2004 08:13'!handlesMouseDown: evt	mouseDownRecipient ifNotNil: [^ true].	mouseStillDownRecipient ifNotNil: [^ true].	mouseUpRecipient ifNotNil: [^ true].	(self handlesClickOrDrag: evt) ifTrue:[^true].	^self handlesGestureStart: evt! !!Morph methodsFor: '*genie-menu-override' stamp: 'nk 2/15/2004 08:22'!addGestureMenuItems: aMenu hand: aHandMorph	"If the receiver wishes the Genie menu items, add a line to the menu and then those Genie items, else do nothing"	aMenu addLine.	aMenu add: 'change gesture dictionary' translated action: #changeGestureDictionary.	self gestureDictionary ifNotNil:		[aMenu add: 'inspect gesture dictionary' translated action: #inspectGestureDictionary.		self hasNotExportedGestureDictionary ifFalse: 			[aMenu add: 'make own copy of gesture dictionary' translated 				action: #makeOwnCopyOfGestureDictionary.			aMenu add: 'make own sub-gesture dictionary' translated 				action: #makeOwnSubGestureDictionary]].! !!Morph methodsFor: '*genie-processing' stamp: 'nk 2/15/2004 08:13'!gestureDictionaryOrName: aSymbolOrCRDictionary	"Assign the gesture dictionary or name to the object by using an EventHandler"	(self gestureHandler ~~ self)		ifTrue: [^ self gestureHandler gestureDictionaryOrName: aSymbolOrCRDictionary].	self setProperty: #gestureDictionaryOrName toValue: aSymbolOrCRDictionary.	(self eventHandler notNil and:[aSymbolOrCRDictionary isNil])		ifTrue:[^self on: #gesture send: nil to: nil].	(self eventHandler isNil or: [(self eventHandler hasGestureRecipient) not]) 		ifTrue:[self on: #gesture send: #handleGesture: to: self].! !!Morph methodsFor: '*genie-processing' stamp: 'nk 2/15/2004 08:26'!onGestureSend: selector to: recipient	"Tell a certain instance to use a particular gesture dictionary to lookup gestures.	Also the selector and the recipient can be specified"	(self gestureHandler ~~ self)		ifTrue: [^ self gestureHandler onGestureSend: selector to: recipient].	self eventHandler ifNil: [self eventHandler: EventHandler new].	self eventHandler onGestureSend: selector to: recipient! !!Morph methodsFor: 'menus' stamp: 'nk 2/15/2004 10:04'!addMiscExtrasTo: aMenu	"Add a submenu of miscellaneous extra items to the menu."	| realOwner realMorph subMenu |	subMenu _ MenuMorph new defaultTarget: self.	(self isWorldMorph not and: [self renderedMorph isSystemWindow not])		ifTrue: [subMenu add: 'put in a window' translated action: #embedInWindow].	self isWorldMorph ifFalse:		[subMenu add: 'adhere to edge...' translated action: #adhereToEdge.		subMenu addLine].	realOwner _ (realMorph _ self topRendererOrSelf) owner.	(realOwner isKindOf: TextPlusPasteUpMorph) ifTrue:		[subMenu add: 'GeeMail stuff...' translated subMenu: (realOwner textPlusMenuFor: realMorph)].	self affiliatedSelector ifNotNil:		[subMenu add: 'open a messenger' translated action: #openMessenger.		subMenu balloonTextForLastItem: 'Open a Messenger on the actual method call used when the button action of this object is triggered.' translated.		subMenu addLine].	subMenu		add: 'add mouse up action' translated action: #addMouseUpAction;		add: 'remove mouse up action' translated action: #removeMouseUpAction;		add: 'hand me tiles to fire this button' translated action: #handMeTilesToFire.	subMenu addLine.	subMenu add: 'arrowheads on pen trails...' translated action: #setArrowheads.	subMenu addLine.	subMenu defaultTarget: self topRendererOrSelf.	subMenu add: 'draw new path' translated action: #definePath.	subMenu add: 'follow existing path' translated action: #followPath.	subMenu add: 'delete existing path' translated action: #deletePath.	self addGestureMenuItems: subMenu hand: ActiveHand.	aMenu add: 'extras...' translated subMenu: subMenu! !!Morph methodsFor: 'menus' stamp: 'nk 2/15/2004 08:19'!addStandardHaloMenuItemsTo: aMenu hand: aHandMorph	"Add standard halo items to the menu"	| unlockables |	self isWorldMorph ifTrue:		[^ self addWorldHaloMenuItemsTo: aMenu hand: aHandMorph].	self mustBeBackmost ifFalse:		[aMenu add: 'send to back' translated action: #goBehind.		aMenu add: 'bring to front' translated action: #comeToFront.		self addEmbeddingMenuItemsTo: aMenu hand: aHandMorph.		aMenu addLine].	self addFillStyleMenuItems: aMenu hand: aHandMorph.	self addBorderStyleMenuItems: aMenu hand: aHandMorph.	self addDropShadowMenuItems: aMenu hand: aHandMorph.	self addLayoutMenuItems: aMenu hand: aHandMorph.	self addHaloActionsTo: aMenu.	owner isTextMorph ifTrue:[self addTextAnchorMenuItems: aMenu hand: aHandMorph].	aMenu addLine.	self addToggleItemsToHaloMenu: aMenu.	aMenu addLine.	self addCopyItemsTo: aMenu.	self addPlayerItemsTo: aMenu.	self addExportMenuItems: aMenu hand: aHandMorph.	self addStackItemsTo: aMenu.	self addMiscExtrasTo: aMenu.	Preferences noviceMode ifFalse:		[self addDebuggingItemsTo: aMenu hand: aHandMorph].	aMenu addLine.	aMenu defaultTarget: self.	aMenu addLine.	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu			add: ('unlock "{1}"' translated format: unlockables first externalName)			action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' translated action: #unlockContents.		aMenu add: 'unlock...' translated action: #unlockOneSubpart].	aMenu defaultTarget: aHandMorph.! !!FlapTab methodsFor: 'menus' stamp: 'nk 2/15/2004 08:19'!addGestureMenuItems: aMenu hand: aHandMorph	"If the receiver wishes the Genie menu items, add a line to the menu and then those Genie items, else do nothing"! !!HandMorph methodsFor: 'cursor' stamp: 'NS 2/17/2001 11:01'!temporaryCursor	^ temporaryCursor! !!HandMorph methodsFor: '*genie-events-processing-override' stamp: 'ar 3/18/2001 01:25'!interrupted	"Something went wrong - we're about to bring up a debugger. 	Release some stuff that could be problematic."	self releaseAllFoci. "or else debugger might not handle clicks"	self resetGenie. "the same here"! !!HandMorph methodsFor: '*genie-events-processing-override' stamp: 'nk 2/15/2004 08:45'!isCapturingGesturePoints	^self isGenieRecognizing and: [ self giveGenieChanceToEscape not ]! !!HandMorph methodsFor: '*genie-focus handling-override' stamp: 'NS 2/17/2001 18:02'!mouseFocus: aMorphOrNil	(self prepareMouseFocusChangeFrom: mouseFocus to: aMorphOrNil)		ifTrue: [mouseFocus _ aMorphOrNil].! !!MouseEvent methodsFor: 'button state' stamp: 'NS 5/19/2003 15:17'!anyButtonPressed	"Answer true if any mouse button is being pressed."	^ buttons anyMask: self class anyButton! !!MouseEvent methodsFor: 'button state' stamp: 'NS 5/19/2003 15:17'!blueButtonPressed	"Answer true if the blue mouse button is being pressed. This is the third mouse button or cmd+click on the Mac."	^ buttons anyMask: self class blueButton! !!MouseEvent methodsFor: 'button state' stamp: 'NS 5/19/2003 15:17'!redButtonPressed	"Answer true if the red mouse button is being pressed. This is the first mouse button."	^ buttons anyMask: self class redButton! !!MouseEvent methodsFor: 'button state' stamp: 'NS 5/19/2003 15:17'!yellowButtonPressed	"Answer true if the yellow mouse button is being pressed. This is the second mouse button or option+click on the Mac."	^ buttons anyMask: self class yellowButton! !!MouseEvent class methodsFor: 'constants' stamp: 'NS 5/19/2003 15:16'!anyButton	^ 7! !!MouseEvent class methodsFor: 'constants' stamp: 'NS 5/19/2003 15:16'!blueButton	^ 1! !!MouseEvent class methodsFor: 'constants' stamp: 'NS 5/19/2003 15:16'!redButton	^ 4! !!MouseEvent class methodsFor: 'constants' stamp: 'NS 5/19/2003 15:16'!yellowButton	^ 2! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'nk 2/15/2004 08:19'!addWorldHaloMenuItemsTo: aMenu hand: aHandMorph	"Add standard halo items to the menu, given that the receiver is a World"	| unlockables |	self addFillStyleMenuItems: aMenu hand: aHandMorph.	self addLayoutMenuItems: aMenu hand: aHandMorph.	aMenu addLine.	self addWorldToggleItemsToHaloMenu: aMenu.	aMenu addLine.	self addCopyItemsTo: aMenu.	self addPlayerItemsTo: aMenu.	self addExportMenuItems: aMenu hand: aHandMorph.	self addStackItemsTo: aMenu.	self addMiscExtrasTo: aMenu.	Preferences noviceMode ifFalse:		[self addDebuggingItemsTo: aMenu hand: aHandMorph].	aMenu addLine.	aMenu defaultTarget: self.	aMenu addLine.	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: ('unlock "{1}"' translated format:{unlockables first externalName})action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' translated action: #unlockContents.		aMenu add: 'unlock...' translated action: #unlockOneSubpart].	aMenu defaultTarget: aHandMorph.! !!Project class methodsFor: 'class initialization' stamp: 'RAA 12/17/2000 12:37'!rebuildAllProjects	"Project rebuildAllProjects"	AllProjects _ nil.	self allProjects.! !!ScreenController methodsFor: 'menu messages' stamp: 'nk 2/15/2004 09:37'!garbageCollect	"Do a garbage collection, and report results to the user."	Utilities garbageCollectAndReport! !!TextMorph methodsFor: '*genie-copying-override' stamp: 'di 7/28/2001 10:24'!veryDeepInner: deepCopier 	"Copy all of my instance variables. Some need to be not copied at all, but shared.	Warning!!!! Every instance variable defined in this class must be handled.	We must also implement veryDeepFixupWith:.  See DeepCopier class comment."	super veryDeepInner: deepCopier.	textStyle _ textStyle veryDeepCopyWith: deepCopier.	text _ text veryDeepCopyWith: deepCopier.	wrapFlag _ wrapFlag veryDeepCopyWith: deepCopier.	paragraph _ paragraph veryDeepCopyWith: deepCopier.	editor _ editor veryDeepCopyWith: deepCopier.	container _ container veryDeepCopyWith: deepCopier.	predecessor _ predecessor.	successor _ successor.	lastGesture _ lastGesture veryDeepCopyWith: deepCopier.	backgroundColor _ backgroundColor veryDeepCopyWith: deepCopier.	margins _ margins veryDeepCopyWith: deepCopier.! !!TheWorldMenu methodsFor: 'commands' stamp: 'nk 2/15/2004 09:37'!garbageCollect	"Do a garbage collection, and report results to the user."	Utilities garbageCollectAndReport! !!TheWorldMenu methodsFor: 'commands' stamp: 'nk 2/15/2004 09:31'!vmStatistics	"Open a string view on a report of vm statistics"	(StringHolder new contents: SmalltalkImage current  vmStatisticsReportString)		openLabel: 'VM Statistics'! !!TheWorldMenu methodsFor: 'construction' stamp: 'nk 2/15/2004 09:31'!helpMenu        "Build the help menu for the world."        |  menu |  	menu := self menu: 'help...' translated.        self fillIn: menu from:        {                {'about this system...'. {Smalltalk. #aboutThisSystem}. 'current version information.'}.                {'update code from server'. {Utilities. #updateFromServer}. 'load latest code updates via the internet'}.                {'preferences...'. {Preferences. #openPreferencesInspector}. 'view and change various options.'}.			 {'set language...' . {Project. #chooseNaturalLanguage}. 'choose the language in which tiles should be displayed.'} .                nil.               {'command-key help'. { Utilities . #openCommandKeyHelp}. 'summary of keyboard shortcuts.'}	}.	self addGestureHelpItemsTo: menu.	self fillIn: menu from:	{                {'world menu help'. { self . #worldMenuHelp}. 'helps find menu items buried in submenus.'}.                        "{'info about flaps' . { Utilities . #explainFlaps}. 'describes how to enable and use flaps.'}."                {'font size summary' . { TextStyle . #fontSizeSummary}.  'summary of names and sizes of available fonts.'}.                {'useful expressions' . { Utilities . #openStandardWorkspace}. 'a window full of useful expressions.'}.			 {'annotation setup...' . { Preferences . #editAnnotations}. 'Click here to get a little window that will allow you to specify which types of annotations, in which order, you wish to see in the annotation panes of browsers and other tools'}.			nil.                {'graphical imports' . { Imports default . #viewImages}.  'view the global repository called ImageImports; you can easily import external graphics into ImageImports via the FileList'}.                {'standard graphics library' . { ScriptingSystem . #inspectFormDictionary}.  'lets you view and change the system''s standard library of graphics.'}.                nil.                {'telemorphic...' . {self. #remoteDo}.  'commands for doing multi-machine "telemorphic" experiments'}.                {#soundEnablingString . { Preferences . #toggleSoundEnabling}. 'turning sound off will completely disable Squeak''s use of sound.'}.                {'definition for...' . { Utilities . #lookUpDefinition}.  'if connected to the internet, use this to look up the definition of an English word.'}.                nil.                {'set author initials...' . { Utilities . #setAuthorInitials }. 'supply initials to be used to identify the author of code and other content.'}.                {'vm statistics' . { self . #vmStatistics}.  'obtain some intriguing data about the vm.'}.			  nil.			  {'purge undo records' . { CommandHistory . #resetAllHistory }. 'save space by removing all the undo information remembered in all projects.'}.                {'space left' . { self . #garbageCollect}. 'perform a full garbage-collection and report how many bytes of space remain in the image.'}.        }.	^menu! !!TheWorldMenu methodsFor: '*genie-construction-override' stamp: 'nk 2/15/2004 10:10'!addGestureHelpItemsTo: aMenu	| genieEnabledString |	genieEnabledString _ myHand isGenieEnabled ifTrue: ['disable'] ifFalse: ['enable'].	self fillIn: aMenu from: 	{		nil.                {genieEnabledString , ' genie'. { myHand. #switchGenieEnabled}. genieEnabledString , ' gesture recognizer for the world''s current hand'}.                {'genie gesture dictionaries'. {CRDictionary. #openInstanceBrowserMorph}. 'edit or inspect gesture dictionaries'.}.                {'choose genie text dictionary'. {CRDictionary. #chooseTextDictionary}. 'select the dictionary used for text input'.}.                {'genie display properties'. {CRDisplayProperties. #openInstanceBrowserMorph}. 'edit or inspect display properies'.}.		nil.	}.	^aMenu! !!Utilities class methodsFor: 'miscellaneous' stamp: 'nk 2/15/2004 09:36'!garbageCollectAndReport	"Do a garbage collection, and report results to the user."	| cc reportString |	reportString _ String streamContents:		[:aStream | 			aStream nextPutAll: Smalltalk bytesLeftString.			Smalltalk at: #Command ifPresent:				[:cmdClass |				(cc _ cmdClass instanceCount) > 0 ifTrue:					[aStream cr; nextPutAll:		('(note: there are ', cc printString,		                         ' undo record(s) present in yoursystem; purging them may free up more space.)')]]].				self inform: reportString! !!Utilities class methodsFor: 'vm statistics' stamp: 'nk 2/15/2004 09:35'!vmStatisticsReportString	"StringHolderView open: (StringHolder new contents:		Utilities vmStatisticsReportString) label: 'VM Statistics'"	self deprecated: 'Use SmalltalkImage current  vmStatisticsReportString'.	^SmalltalkImage current vmStatisticsReportString! !!WorldState methodsFor: 'update cycle' stamp: 'nk 2/15/2004 08:46'!doOneCycleNowFor: aWorld	"Immediately do one cycle of the interaction loop.	This should not be called directly, but only via doOneCycleFor:"	| capturingGesture |	DisplayScreen checkForNewScreenSize.	capturingGesture _ false.	self flag: #bob.		"need to consider remote hands in lower worlds"	"process user input events"	LastCycleTime _ Time millisecondClockValue.	self handsDo: [:h |		ActiveHand _ h.		h processEvents.		capturingGesture _ capturingGesture or: [ h isCapturingGesturePoints ].		ActiveHand _ nil	].	"the default is the primary hand"	ActiveHand _ self hands first.	"The gesture recognizer needs enough points to be accurate.	Therefore morph stepping is disabled while capturing points for the recognizer"	capturingGesture ifFalse: 		[aWorld runStepMethods.		"there are currently some variations here"		self displayWorldSafely: aWorld].! !!WorldState reorganize!('Nebraska support' addRemoteCanvas: assuredRemoteCanvas releaseRemoteServer remoteCanvasesDo: remoteServer remoteServer: removeRemoteCanvas:)('alarms' addAlarm:withArguments:for:at: adjustAlarmTimes: alarmSortBlock alarms removeAlarm:for: triggerAlarmsBefore:)('canvas' assuredCanvas canvas canvas: doFullRepaint recordDamagedRect: resetDamageRecorder viewBox viewBox:)('hands' activeHand activeHand: addHand: hands handsDo: handsReverseDo: removeHand: selectHandsToDrawForDamage:)('initialization' initialize stepListSize stepListSortBlock stepListSummary)('object fileIn' convertAlarms convertStepList)('objects from disk' convertToCurrentVersion:refStream:)('stepping' adjustWakeupTimes: adjustWakeupTimesIfNecessary cleanseStepListForWorld: isStepping: isStepping:selector: listOfSteppingMorphs runLocalStepMethodsIn: runStepMethodsIn: startStepping:at:selector:arguments:stepTime: stopStepping: stopStepping:selector:)('undo' commandHistory)('undo support' clearCommandHistory)('update cycle' checkIfUpdateNeeded displayWorld:submorphs: displayWorldAsTwoTone:submorphs:color: displayWorldSafely: doDeferredUpdatingFor: doOneCycleFor: doOneCycleInBackground doOneCycleNowFor: doOneSubCycleFor: drawWorld:submorphs:invalidAreasOn: forceDamageToScreen: handleFatalDrawingError: interCyclePause: startBackgroundProcess)!!TheWorldMenu reorganize!('action' commandKeyTypedIntoMenu: createStandardPartsBin doMenuItem:with: launchCustomPartsBin menuColorString openMessageNames projectThumbnail roundedCornersString setGradientColor soundEnablingString staggerPolicyString toggleFlapSuppressionInProject toggleWindowPolicy uniTilesClassicString)('commands' beIsolated changeBackgroundColor cleanUpWorld garbageCollect inspectWorldModel loadProject lookForSlips mvcProjectsAllowed newMorphOfClass:event: openBrowser openChangeSorter1 openChangeSorter2 openFileList openMVCProject openMorphicProject openSelectorBrowser openTranscript openWorkspace projectForMyWorld propagateChanges quitSession readMorphFromAFile saveAndQuit saveWorldInFile setDisplayDepth splitNewMorphList:depth: startMessageTally startThenBrowseMessageTally vmStatistics worldMenuHelp)('construction' alphabeticalMorphMenu appearanceMenu buildWorldMenu changesMenu colorForDebugging: debugMenu fillIn:from: helpMenu myMenuColor newMorph openMenu playfieldMenu projectMenu remoteMenu scriptingMenu)('mechanics' adaptToWorld: menu: world:project:hand:)('popups' appearanceDo changesDo debugDo doPopUp: helpDo openWindow playfieldDo projectDo remoteDo scriptingDo standardFontDo)('scripting' adaptedToWorld:)('windows & flaps menu' flapsDo flapsMenu formulateFlapsMenu: globalFlapsEnabled newGlobalFlapString suppressFlapsString windowsDo windowsMenu)('*morphic-Postscript Canvases' printWorldOnFile)('*genie-construction-override' addGestureHelpItemsTo:)!!PluggableTextMorph reorganize!('*genie-dispatching' handleGesture:)('*genie-initialization-override' initialize)('accessing' getTextSelector)('debug and other' installModelIn:)('dependents access' canDiscardEdits hasUnacceptedEdits)('drawing' drawOn: wantsFrameAdornments)('dropping/grabbing' wantsDroppedMorph:event:)('editor access' handleEdit: scrollSelectionIntoView scrollSelectionIntoView: selectAll setTextMorphToSelectAllOnMouseEnter)('event handling' handlesKeyboard: keyStroke: mouseEnter: mouseLeave:)('geometry' extent: extraScrollRange resetExtent scrollDeltaHeight)('initialization' acceptOnCR: editString: font: on:text:accept:readSelection:menu:)('interactive error protocol' correctFrom:to:with: correctSelectionWithString: deselect nextTokenFrom:direction: notify:at:in: select selectFrom:to: selectInvisiblyFrom:to: selectionInterval)('layout' acceptDroppingMorph:event:)('menu commands' accept again browseChangeSetsWithSelector browseIt cancel changeStyle chooseAlignment classCommentsContainingIt classNamesContainingIt copySelection cut debugIt doIt explain exploreIt fileItIn find findAgain implementorsOfIt inspectIt languagePrefs methodNamesContainingIt methodSourceContainingIt methodStringsContainingit offerFontMenu paste pasteRecent presentSpecialMenu prettyPrint prettyPrintWithColor printIt printerSetup recognizeCharacters referencesToIt saveContentsInFile selectionAsTiles sendContentsToPrinter sendersOfIt setSearchString spawn tileForIt toggleAnnotationPaneSize translateIt undo verifyWordSpelling wordDefinition yellowButtonActivity)('model access' eToyGetMainFont getSelection getText selectionInterval: setSelection: setText: setTextColor: text)('scroll bar events' scrollBarMenuButtonPressed: yellowButtonActivity:)('transcript' appendEntry appendTextEtoy: bsText changeText: replaceSelectionWith:)('unaccepted edits' askBeforeDiscardingEdits: hasEditingConflicts hasEditingConflicts: hasUnacceptedEdits: promptForCancel)('updating' update:)!!MouseEvent class reorganize!('constants' anyButton blueButton redButton yellowButton)!!MouseEvent reorganize!('*genie' addMouseButtons: toggleBlueButton toggleMouseButtons: toggleRedButton toggleYellowButton)('accessing' cursorPoint noticeMouseOver:)('button state' anyButtonPressed blueButtonPressed redButtonPressed targetPoint yellowButtonPressed)('comparing' = hash)('converting' asMouseEnter asMouseLeave asMouseMove asMouseOver)('dispatching' sentTo:)('initialize' type:readFrom:)('printing' printOn: storeOn:)('testing' isDraggingEvent isMouse isMouseDown isMouseEnter isMouseLeave isMouseMove isMouseUp isMove)('private' setType: setType:position:buttons:hand:)!FlapTab removeSelector: #addGenieMenuItems:hand:!!FlapTab reorganize!('WiW support' morphicLayerNumber)('access' acquirePlausibleFlapID flapID flapID: flapIDOrNil flapShowing orientation referentThickness tabThickness)('accessing' labelString)('change reporting' ownerChanged)('classification' isFlapTab)('disused options' inboard inboard: slidesOtherObjects)('e-toy support' isCandidateForAutomaticViewing succeededInRevealing:)('edge' applyEdgeFractionWithin: computeEdgeFraction edgeFraction edgeFraction: edgeString edgeToAdhereTo edgeToAdhereTo: ifVertical:ifHorizontal: setEdge: setEdgeToAdhereTo)('event handling' mouseMove: mouseUp:)('events' tabSelected)('globalness' isGlobalFlap isGlobalFlapString toggleIsGlobalFlap)('graphical tabs' graphicalTab graphicalTabString)('initialization' adaptToWorld initialize provideDefaultFlapIDBasedOn: setName:edge:color:)('layout' layoutChanged)('menu' addCustomMenuItems:hand: applyThickness: changeColor changeFlapColor changeTabText destroyFlap existingWording flapMenuTitle isCurrentlyTextual preserveDetails sharedFlapsAllowed thicknessString wording)('menus' addGestureMenuItems:hand: addTitleForHaloMenu:)('misc' fitContents)('miscellaneous' balloonTextForFlapsMenu)('mouseover & dragover' arrangeToPopOutOnDragOver: arrangeToPopOutOnMouseOver: dragoverString makeNewDrawing: mouseoverString setToPopOutOnDragOver: setToPopOutOnMouseOver: startOrFinishDrawing: toggleDragOverBehavior toggleMouseOverBehavior)('objects from disk' objectForDataStream:)('parts bin' partsBinString togglePartsBinMode)('positioning' adjustPositionVisAVisFlap fitOnScreen positionObject: positionObject:atEdgeOf: positionReferent spanWorld stickOntoReferent transposeParts)('printing' printOn:)('rounding' roundedCorners wantsRoundedCorners)('show & hide' adjustPositionAfterHidingFlap hideFlap hideFlapUnlessBearingHalo hideFlapUnlessOverReferent lastReferentThickness: maybeHideFlapOnMouseLeave maybeHideFlapOnMouseLeaveDragging openFully showFlap showFlapIfHandLaden:)('solid tabs' applyTabThickness: changeTabSolidity changeTabThickness isCurrentlySolid notSolid solidTab solidTabString useSolidTab)('submorphs-add/remove' dismissViaHalo)('textual tabs' assumeString:font:orientation:color: reformatTextualTab textualTab textualTabString useStringTab: useTextualTab)('thumbnail' permitsThumbnailing)!Morph removeSelector: #adMiscExtrasTo:!Morph removeSelector: #addGenieMenuItems:hand:!!Morph reorganize!('*genie-dispatching' blueButtonClickHand:shift: gesture: gestureCode: gestureCommand: gestureKeystrokes: gestureMouseEvent: gestureStrokes: handleGesture: isGestureUndoable: isSpecialCharacterUndoable: modifyGesture:by: undoGesture:)('*genie-dispatching-override' disableSubmorphFocusForHand:)('*genie-menu' changeGestureDictionary hasNotExportedGestureDictionary hasReferencedGestureDictionary inspectGestureDictionary makeOwnCopyOfGestureDictionary makeOwnSubGestureDictionary)('*genie-menu-override' addGestureMenuItems:hand:)('*genie-processing' allowsGestureEscape allowsGesturePreprocessing defaultGestureDictionaryOrName disableGestures gestureDictionary gestureDictionaryOrName gestureDictionaryOrName: gestureHandler handlesGestureStart: onGestureSend:to:)('*genie-processing-override' allowsGestureStart: gestureStart:)('*morphic-Postscript Canvases' asEPS asPostscript asPostscriptPrintJob clipPostscript drawPostscriptOn: fullDrawPostscriptOn: printPSToFile)('*sound-piano rolls' addMorphsTo:pianoRoll:eventTime:betweenTime:and: encounteredAtTime:inScorePlayer:atIndex:inEventTrack:secsPerTick: justDroppedIntoPianoRoll:event: pauseFrom: resetFrom: resumeFrom: triggerActionFromPianoRoll)('WiW support' addMorphInFrontOfLayer: addMorphInLayer: eToyRejectDropMorph:event: morphicLayerNumber morphicLayerNumberWithin: randomBoundsFor: shouldGetStepsFrom:)('accessing' actorState actorState: actorStateOrNil adoptPaneColor: balloonText balloonTextSelector balloonTextSelector: beFlap: beSticky beUnsticky borderColor borderColor: borderStyle borderStyle: borderStyleForSymbol: borderWidth borderWidth: borderWidthForRounding color color: colorForInsets couldHaveRoundedCorners eventHandler eventHandler: forwardDirection hasTranslucentColor highlight highlightColor highlightColor: highlightOnlySubmorph: insetColor isFlap isLocked isShared isSticky lock lock: methodCommentAsBalloonHelp modelOrNil player player: presenter raisedColor regularColor regularColor: rememberedColor rememberedColor: resistsRemoval resistsRemoval: scaleFactor setBorderStyle: sqkPage sticky: toggleLocked toggleResistsRemoval toggleStickiness unHighlight unlock unlockContents url userString wantsToBeCachedByHand)('accessing - extension' assureExtension extension hasExtension initializeExtension privateExtension: resetExtension)('accessing - properties' hasProperty: otherProperties removeProperty: setProperties: setProperty:toValue: valueOfProperty: valueOfProperty:ifAbsent: valueOfProperty:ifAbsentPut: valueOfProperty:ifPresentDo:)('button' doButtonAction fire firedMouseUpCode)('button properties' buttonProperties buttonProperties: ensuredButtonProperties hasButtonProperties)('caching' fullLoadCachedState fullReleaseCachedState loadCachedState releaseCachedState)('card in a stack' abstractAModel beAStackBackground becomeSharedBackgroundField containsCard: couldHoldSeparateDataForEachInstance currentDataInstance explainDesignations goToNextCardInStack goToPreviousCardInStack holdsSeparateDataForEachInstance insertAsStackBackground insertCard installAsCurrent: isStackBackground makeHoldSeparateDataForEachInstance newCard reassessBackgroundShape relaxGripOnVariableNames reshapeBackground setAsDefaultValueForNewCard showBackgroundObjects showDesignationsOfObjects showForegroundObjects stack stackDo: stopHoldingSeparateDataForEachInstance tabHitWithEvent: wrapWithAStack)('change reporting' addedMorph: addedOrRemovedSubmorph: colorChangedForSubmorph: invalidRect: invalidRect:from: ownerChanged privateInvalidateMorph: userSelectedColor:)('classification' demandsBoolean isAlignmentMorph isBalloonHelp isFlapOrTab isFlapTab isFlashMorph isFlexMorph isHandMorph isModalShell isPlayfieldLike isRenderer isStandardViewer isSyntaxMorph isTextMorph isWorldMorph isWorldOrHandMorph)('converting' asDraggableMorph)('copying' copy deepCopy duplicate duplicateMorphCollection: fullCopy updateReferencesUsing: usableSiblingInstance veryDeepCopyWith: veryDeepFixupWith: veryDeepInner:)('creation' asMorph)('debug and other' addDebuggingItemsTo:hand: addMouseActionIndicatorsWidth:color: addMouseUpAction addMouseUpActionWith: addViewingItemsTo: allStringsAfter: altSpecialCursor0 altSpecialCursor1 altSpecialCursor2 altSpecialCursor3 altSpecialCursor3: buildDebugMenu: defineTempCommand deleteAnyMouseActionIndicators handMeTilesToFire inspectArgumentsPlayerInMorphic: inspectOwnerChain installModelIn: mouseUpCodeOrNil ownerChain programmedMouseDown:for: programmedMouseEnter:for: programmedMouseLeave:for: programmedMouseUp:for: programmedMouseUp:for:with: removeMouseUpAction resumeAfterDrawError resumeAfterStepError tempCommand viewMorphDirectly)('drawing' areasRemainingToFill: boundingBoxOfSubmorphs boundsWithinCorners changeClipSubmorphs clipLayoutCells clipLayoutCells: clipSubmorphs clipSubmorphs: clippingBounds doesOwnRotation drawDropHighlightOn: drawDropShadowOn: drawErrorOn: drawMouseDownHighlightOn: drawOn: drawRolloverBorderOn: drawSubmorphsOn: expandFullBoundsForDropShadow: expandFullBoundsForRolloverBorder: fullDrawOn: hasClipSubmorphsString hide highlightForMouseDown highlightForMouseDown: highlightedForMouseDown imageForm imageForm:forRectangle: imageFormDepth: imageFormForRectangle: imageFormWithout:andStopThere: refreshWorld shadowForm show visible visible:)('drop shadows' addDropShadow addDropShadowMenuItems:hand: changeShadowColor hasDropShadow hasDropShadow: hasDropShadowString hasRolloverBorder hasRolloverBorder: removeDropShadow setShadowOffset: shadowColor shadowColor: shadowOffset shadowOffset: shadowPoint: toggleDropShadow)('dropping/grabbing' aboutToBeGrabbedBy: disableDragNDrop dragEnabled dragEnabled: dragNDropEnabled dragSelectionColor dropEnabled dropEnabled: dropHighlightColor dropSuccessColor enableDrag: enableDragNDrop enableDragNDrop: enableDrop: formerOwner formerOwner: formerPosition formerPosition: grabTransform highlightForDrop highlightForDrop: highlightedForDrop justDroppedInto:event: justGrabbedFrom: nameForUndoWording rejectDropMorphEvent: repelsMorph:event: resetHighlightForDrop separateDragAndDrop slideBackToFormerSituation: slideToTrash: startDrag:with: toggleDragNDrop transportedMorph undoGrabCommand vanishAfterSlidingTo:event: wantsDroppedMorph:event: wantsToBeDroppedInto: wantsToBeOpenedInWorld willingToBeDiscarded)('e-toy support' adaptToWorld: adoptVocabulary: allMorphsAndBookPagesInto: appearsToBeSameCostumeAs: asNumber: asWearableCostume asWearableCostumeOfExtent: automaticViewing changeAllBorderColorsFrom:to: configureForKids containingWindow copyCostumeStateFrom: currentPlayerDo: cursor cursor: decimalPlacesForGetter: defaultValueOrNil defaultVariableName definePath deletePath embedInWindow embeddedInMorphicWindowLabeled: enclosingEditor enforceTileColorPolicy fenceEnabled followPath getNumericValue gridFormOrigin:grid:background:line: isAViewer isCandidateForAutomaticViewing isTileEditor listViewLineForFieldList: makeGraphPaper makeGraphPaperGrid:background:line: mustBeBackmost noteDecimalPlaces:forGetter: noteNegotiatedName:for: objectViewed referencePlayfield rotationStyle rotationStyle: setAsActionInButtonProperties: setNaturalLanguageTo: setNumericValue: setStandardTexture slotSpecifications succeededInRevealing: textureParameters topEditor unlockOneSubpart updateCachedThumbnail wantsRecolorHandle wrappedInWindow: wrappedInWindowWithTitle:)('event handling' click click: cursorPoint doubleClick: doubleClickTimeout: dropFiles: firstClickTimedOut: handlesKeyboard: handlesMouseDown: handlesMouseOver: handlesMouseOverDragging: handlesMouseStillDown: hasFocus keyDown: keyStroke: keyUp: keyboardFocusChange: mouseDown: mouseEnter: mouseEnterDragging: mouseLeave: mouseLeaveDragging: mouseMove: mouseStillDown: mouseStillDownThreshold mouseUp: on:send:to: on:send:to:withValue: removeLink: restoreSuspendedEventHandler startDrag: suspendEventHandler transformFrom: transformFromOutermostWorld transformFromWorld wantsDropFiles: wantsEveryMouseMove wantsKeyboardFocusFor: wouldAcceptKeyboardFocus wouldAcceptKeyboardFocusUponTab)('events-accessing' actionMap updateableActionMap)('events-alarms' addAlarm:after: addAlarm:at: addAlarm:with:after: addAlarm:with:at: addAlarm:with:with:after: addAlarm:with:with:at: addAlarm:withArguments:after: addAlarm:withArguments:at: alarmScheduler removeAlarm: removeAlarm:at:)('events-processing' containsPoint:event: defaultEventDispatcher handleDropFiles: handleDropMorph: handleEvent: handleFocusEvent: handleKeyDown: handleKeyUp: handleKeystroke: handleListenEvent: handleMouseDown: handleMouseEnter: handleMouseLeave: handleMouseMove: handleMouseOver: handleMouseStillDown: handleMouseUp: handleUnknownEvent: handlerForMouseDown: mouseDownPriority processEvent: processEvent:using: rejectDropEvent: rejectsEvent: transformedFrom:)('events-removing' releaseActionMap)('fileIn/out' attachToResource prepareToBeSaved reserveUrl: saveAsResource saveDocPane saveOnFile saveOnURL saveOnURL: saveOnURLbasic updateAllFromResources updateFromResource)('filter streaming' drawOnCanvas:)('geometry' align:with: bottom bottom: bottomCenter bottomLeft bottomLeft: bottomRight bottomRight: bounds bounds: bounds:from: bounds:in: boundsIn: boundsInWorld center center: extent extent: fullBoundsInWorld globalPointToLocal: gridPoint: griddedPoint: height height: innerBounds left left: leftCenter localPointToGlobal: minimumExtent minimumExtent: nextOwnerPage outerBounds point:from: point:in: pointFromWorld: pointInWorld: position position: positionInWorld positionSubmorphs previousOwnerPage right right: rightCenter screenLocation screenRectangle setConstrainedPosition:hangOut: shiftSubmorphsBy: shiftSubmorphsOtherThan:by: top top: topCenter topLeft topLeft: topRight topRight: transformedBy: width width: worldBounds worldBoundsForHalo)('geometry eToy' addTransparentSpacerOfSize: beTransparent cartesianBoundsTopLeft cartesianXY: color:sees: colorUnder degreesOfFlex forwardDirection: getIndexInOwner goHome heading heading: move:toPosition: referencePosition referencePosition: referencePositionInWorld referencePositionInWorld: rotationCenter rotationCenter: setDirectionFrom: setIndexInOwner: touchesColor: transparentSpacerOfSize: wrap x x: x:y: y y:)('geometry testing' containsPoint: fullContainsPoint: obtrudesBeyondContainer)('halos and balloon help' addHalo addHalo: addHalo:from: addHandlesTo:box: addMagicHaloFor: addOptionalHandlesTo:box: addSimpleHandlesTo:box: addWorldHandlesTo:box: balloonColor balloonColor: balloonFont balloonFont: balloonHelpAligner balloonHelpDelayTime balloonHelpTextForHandle: boundsForBalloon comeToFrontAndAddHalo defaultBalloonColor defaultBalloonFont defersHaloOnClickTo: deleteBalloon editBalloonHelpContent: editBalloonHelpText halo haloClass haloDelayTime hasHalo hasHalo: isLikelyRecipientForMouseOverHalos mouseDownOnHelpHandle: noHelpString okayToAddDismissHandle okayToAddGrabHandle okayToBrownDragEasily okayToExtractEasily okayToResizeEasily okayToRotateEasily removeHalo setBalloonText: setBalloonText:maxLineLength: setCenteredBalloonText: showBalloon: showBalloon:hand: transferHalo:from: wantsBalloon wantsDirectionHandles wantsDirectionHandles: wantsHalo wantsHaloFor: wantsHaloFromClick wantsHaloHandleWithSelector:inHalo: wantsScriptorHaloHandle)('initialization' basicInitialize defaultBounds defaultColor inATwoWayScrollPane initialize intoWorld: openCenteredInWorld openInHand openInMVC openInWindow openInWindowLabeled: openInWindowLabeled:inWorld: openInWorld openInWorld: outOfWorld: resourceJustLoaded standardPalette)('layout' acceptDroppingMorph:event: adjustLayoutBounds doLayoutIn: fullBounds layoutBounds layoutBounds: layoutChanged layoutInBounds: layoutProportionallyIn: minExtent minHeight minHeight: minWidth minWidth: privateFullBounds submorphBounds)('layout-menu' addCellLayoutMenuItems:hand: addLayoutMenuItems:hand: addTableLayoutMenuItems:hand: changeCellInset: changeClipLayoutCells changeDisableTableLayout changeLayoutInset: changeListDirection: changeMaxCellSize: changeMinCellSize: changeNoLayout changeProportionalLayout changeReverseCells changeRubberBandCells changeTableLayout hasClipLayoutCellsString hasDisableTableLayoutString hasNoLayoutString hasProportionalLayoutString hasReverseCellsString hasRubberBandCellsString hasTableLayoutString layoutMenuPropertyString:from:)('layout-properties' assureLayoutProperties assureTableProperties cellInset cellInset: cellPositioning cellPositioning: cellPositioningString: cellSpacing cellSpacing: cellSpacingString: disableTableLayout disableTableLayout: hResizing hResizing: hResizingString: layoutFrame layoutFrame: layoutInset layoutInset: layoutPolicy layoutPolicy: layoutProperties layoutProperties: listCentering listCentering: listCenteringString: listDirection listDirection: listDirectionString: listSpacing listSpacing: listSpacingString: maxCellSize maxCellSize: minCellSize minCellSize: reverseTableCells reverseTableCells: rubberBandCells rubberBandCells: spaceFillWeight spaceFillWeight: vResizeToFit: vResizing vResizing: vResizingString: wrapCentering wrapCentering: wrapCenteringString: wrapDirection wrapDirection: wrapDirectionString:)('macpal' currentVocabulary flash scriptPerformer)('menu' addBorderStyleMenuItems:hand:)('menus' absorbStateFromRenderer: addAddHandMenuItemsForHalo:hand: addCopyItemsTo: addCustomHaloMenuItems:hand: addCustomMenuItems:hand: addExportMenuItems:hand: addFillStyleMenuItems:hand: addHaloActionsTo: addMiscExtrasTo: addPaintingItemsTo:hand: addPlayerItemsTo: addStackItemsTo: addStandardHaloMenuItemsTo:hand: addTitleForHaloMenu: addToggleItemsToHaloMenu: adhereToEdge adhereToEdge: adjustedCenter adjustedCenter: allMenuWordings changeColor changeDirectionHandles changeDragAndDrop chooseNewGraphic chooseNewGraphicCoexisting: chooseNewGraphicFromHalo collapse defaultArrowheadSize dismissButton doMenuItem: exportAsBMP exportAsGIF exportAsJPEG hasDirectionHandlesString hasDragAndDropEnabledString helpButton inspectInMorphic inspectInMorphic: lockUnlockMorph lockedString makeNascentScript maybeAddCollapseItemTo: menuItemAfter: menuItemBefore: presentHelp printPSToFileNamed: putOnBackground putOnForeground resetForwardDirection resistsRemovalString setArrowheads setRotationCenter setRotationCenterFrom: setToAdhereToEdge: snapToEdgeIfAppropriate stickinessString transferStateToRenderer: uncollapseSketch)('messenger' affiliatedSelector)('meta-actions' addEmbeddingMenuItemsTo:hand: applyStatusToAllSiblings: beThisWorldsModel blueButtonDown: blueButtonUp: bringAllSiblingsToMe: buildHandleMenu: buildMetaMenu: changeColorTarget:selector:originalColor:hand: copyToPasteBuffer: dismissMorph: duplicateMorph: embedInto: grabMorph: handlerForBlueButtonDown: handlerForMetaMenu: inspectAt:event: invokeMetaMenu: invokeMetaMenuAt:event: makeMultipleSiblings: makeNewPlayerInstance: makeSiblings: makeSiblingsLookLikeMe: maybeDuplicateMorph maybeDuplicateMorph: openAButtonPropertySheet openAPropertySheet openATextPropertySheet potentialEmbeddingTargets resizeFromMenu resizeMorph: saveAsPrototype showActions showHiders subclassMorph)('miscellaneous' setExtentFromHalo:)('naming' choosePartName downshiftedNameOfObjectRepresented innocuousName name: nameForFindWindowFeature nameInModel nameOfObjectRepresented setNamePropertyTo: setNameTo: specialNameInModel tryToRenameTo: updateAllScriptingElements)('object fileIn' convertAugust1998:using: convertNovember2000DropShadow:using:)('objects from disk' convertToCurrentVersion:refStream: objectForDataStream: storeDataOn:)('other' removeAllButFirstSubmorph)('other events' menuButtonMouseEnter: menuButtonMouseLeave:)('parts bin' inPartsBin initializeToStandAlone isPartsBin isPartsDonor isPartsDonor: markAsPartsDonor partRepresented residesInPartsBin)('pen' choosePenColor: choosePenSize getPenColor getPenDown getPenSize liftPen lowerPen penColor: penUpWhile: trailMorph)('player' assureExternalName assuredCardPlayer assuredPlayer currentDataValue newPlayerInstance okayToDuplicate shouldRememberCostumes showPlayerMenu variableDocks)('player commands' beep: jumpTo: makeFenceSound playSoundNamed: set:)('player viewer' openViewerForArgument updateLiteralLabel)('printing' clipText colorString: constructorString fullPrintOn: initString morphReport morphReportFor: morphReportFor:on:indent: pagesHandledAutomatically printConstructorOn:indent: printConstructorOn:indent:nodeDict: printOn: printSpecs printSpecs: printStructureOn:indent: reportableSize structureString textToPaste)('rotate scale and flex' addFlexShell addFlexShellIfNecessary keepsTransform newTransformationMorph rotationDegrees)('rounding' cornerStyle: roundedCorners roundedCornersString toggleCornerRounding wantsRoundedCorners)('scripting' asEmptyPermanentScriptor bringTileScriptingElementsUpToDate bringUpToDate categoriesForViewer defaultFloatPrecisionFor: instantiatedUserScriptsDo: isTileLike isTileScriptingElement jettisonScripts makeAllTilesColored makeAllTilesGreen restoreTypeColor scriptEditorFor: selectorsForViewer tearOffTile triggerScript: useUniformTileColor viewAfreshIn:showingScript:at:)('stepping and presenter' arrangeToStartStepping arrangeToStartSteppingIn: isStepping isSteppingSelector: start startStepping startStepping:at:arguments:stepTime: startSteppingIn: startSteppingSelector: step stepAt: stop stopStepping stopSteppingSelector: stopSteppingSelfAndSubmorphs)('structure' activeHand allOwners allOwnersDo: firstOwnerSuchThat: hasOwner: isInWorld morphPreceding: nearestOwnerThat: orOwnerSuchThat: outermostMorphThat: outermostWorldMorph owner ownerThatIsA: ownerThatIsA:orA: pasteUpMorph pasteUpMorphHandlingTabAmongFields primaryHand renderedMorph root rootAt: topPasteUp topRendererOrSelf withAllOwners withAllOwnersDo: world)('submorphs-accessing' allKnownNames allMorphs allMorphsDo: allNonSubmorphMorphs allSubmorphNamesDo: findA: findDeepSubmorphThat:ifAbsent: findDeeplyA: findSubmorphBinary: firstSubmorph hasSubmorphWithProperty: hasSubmorphs indexOfMorphAbove: lastSubmorph morphsAt: morphsAt:behind:unlocked: morphsAt:unlocked: morphsAt:unlocked:do: morphsInFrontOf:overlapping:do: morphsInFrontOverlapping: morphsInFrontOverlapping:do: noteNewOwner: rootMorphsAt: rootMorphsAtGlobal: shuffleSubmorphs submorphAfter submorphBefore submorphCount submorphNamed: submorphNamed:ifNone: submorphOfClass: submorphThat:ifNone: submorphWithProperty: submorphs submorphsBehind:do: submorphsDo: submorphsInFrontOf:do: submorphsReverseDo: submorphsSatisfying:)('submorphs-add/remove' abandon actWhen actWhen: addAllMorphs: addAllMorphs:after: addMorph: addMorph:after: addMorph:asElementNumber: addMorph:behind: addMorph:fullFrame: addMorph:inFrontOf: addMorphBack: addMorphCentered: addMorphFront: addMorphFront:fromWorldPosition: addMorphFrontFromWorldPosition: addMorphNearBack: comeToFront copyWithoutSubmorph: delete deleteSubmorphsWithProperty: dismissViaHalo goBehind privateDelete removeAllMorphs removeAllMorphsIn: removeMorph: removedMorph: replaceSubmorph:by: submorphIndexOf:)('system primitives' creationStamp)('testing' canDrawAtHigherResolution canDrawBorder: completeModificationHash isFlexed isMorph knownName modificationHash renameTo: shouldDropOnMouseUp stepTime wantsSteps)('text-anchor' addTextAnchorMenuItems:hand: changeDocumentAnchor changeInlineAnchor changeParagraphAnchor hasDocumentAnchorString hasInlineAnchorString hasParagraphAnchorString relativeTextAnchorPosition relativeTextAnchorPosition: textAnchorType textAnchorType:)('texture support' isValidWonderlandTexture isValidWonderlandTexture: wonderlandTexture wonderlandTexture:)('thumbnail' demandsThumbnailing morphRepresented permitsThumbnailing readoutForField: representativeNoTallerThan:norWiderThan:thumbnailHeight: updateThumbnailUrl updateThumbnailUrlInBook:)('undo' commandHistory undoMove:redo:owner:bounds:predecessor:)('updating' changed)('user interface' defaultLabelForInspector initialExtent)('viewer' externalName)('visual properties' canHaveFillStyles cornerStyle fillStyle fillStyle: fillWithRamp:oriented: useBitmapFill useDefaultFill useGradientFill useSolidFill)('private' moveWithPenDownBy: moveWithPenDownByRAA: privateAddAllMorphs:atIndex: privateAddMorph:atIndex: privateBounds: privateColor: privateDeleteWithAbsolutelyNoSideEffects privateFullBounds: privateFullMoveBy: privateMoveBy: privateOwner: privateRemove: privateRemoveMorph: privateRemoveMorphWithAbsolutelyNoSideEffects: privateSubmorphs privateSubmorphs:)!EventHandler removeSelector: #handlesGesture:!!EventHandler reorganize!('*genie' gesture:fromMorph: gestureRecipient gestureSelector)('*genie-copying-override' veryDeepInner:)('*genie-initialization-override' onGestureSend:to:)('*genie-testing' hasGestureRecipient)('*genie-testing-override' handlesGestureStart:)('access' allRecipients firstMouseSelector messageList methodRefList mouseDownSelector mouseStillDownRecipient mouseStillDownSelector mouseUpSelector)('copying' veryDeepFixupWith:)('events' click:fromMorph: doubleClick:fromMorph: doubleClickTimeout:fromMorph: keyStroke:fromMorph: mouseDown:fromMorph: mouseEnter:fromMorph: mouseEnterDragging:fromMorph: mouseLeave:fromMorph: mouseLeaveDragging:fromMorph: mouseMove:fromMorph: mouseStillDown:fromMorph: mouseUp:fromMorph: send:to:withEvent:fromMorph: startDrag:fromMorph:)('fixups' fixAlansOldEventHandlers fixReversedValueMessages replaceSendsIn:with:)('initialization' adaptToWorld: forgetDispatchesTo: on:send:to: on:send:to:withValue:)('objects from disk' convertToCurrentVersion:refStream:)('printing' printOn:)('testing' handlesClickOrDrag: handlesKeyboard: handlesMouseDown: handlesMouseMove: handlesMouseOver: handlesMouseOverDragging: handlesMouseStillDown:)!