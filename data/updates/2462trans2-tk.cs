'From Squeak2.9alpha of 16 June 2000 [latest update: #2461] on 19 July 2000 at 2:42:30 pm'!!FreeTranslation class methodsFor: 'as yet unclassified' stamp: 'tk 7/19/2000 08:19'!extract: aMimeDoc	| pageSource str |	"Extract the translated text from the web page"	(aMimeDoc content beginsWith: 'error') ifTrue: [^ aMimeDoc content].	pageSource _ aMimeDoc content isoToSqueak.	"brute force way to pull out the result"	str _ ReadStream on: pageSource.	str match: 'Translation Results by Transparent Language'.	str match: '<p>'.	^ str upToAll: '</p>'! !!FreeTranslation class methodsFor: 'as yet unclassified' stamp: 'tk 7/15/2000 07:33'!translate: aString from: fromLang to: toLang	| inputs |	"Submit the string to the translation server at www.freetranslation.com.  Return the entire web page that freetranslation sends back."	aString size >= 10000 ifTrue: [^ self inform: 'Text selection is too long.'].	inputs _ Dictionary new.	inputs at: 'SrcText' put: (Array with: aString).	inputs at: 'Sequence' put: #('core').	inputs at: 'Mode' put: #('html').	inputs at: 'template' put: #('TextResult2.htm').	inputs at: 'Language' put: (Array with: fromLang, '/', toLang).	^ 'http://ets.freetranslation.com:5081' asUrl postFormArgs: inputs.	! !!FreeTranslation class methodsFor: 'as yet unclassified' stamp: 'tk 7/19/2000 13:49'!translatePanel: buttonPlayer fromTo: normalDirection	| ow fromTM toTM fromLang toLang tt doc answer width |	"Gather up all the info I need from the morphs in the button's owner and do the translation.  Insert the results in a TextMorph.  Use www.freeTranslation.com Refresh the banner ad.	TextMorph with 'from' in the title is starting text.	PopUpChoiceMorph  with 'from' in the title is the starting language.	TextMorph with 'from' in the title is place to put the answer.	PopUpChoiceMorph  with 'from' in the title is the target language.		If normalDirection is false, translate the other direction."	ow _ buttonPlayer costume ownerThatIsA: PasteUpMorph.	ow allMorphs do: [:mm |		(mm isKindOf: TextMorph) ifTrue: [ 			(mm externalName includesSubString: 'from') ifTrue: [				 fromTM _ mm].			(mm externalName includesSubString: 'to') ifTrue: [				 toTM _ mm]].		(mm isKindOf: PopUpChoiceMorph) ifTrue: [ 			(mm externalName includesSubString: 'from') ifTrue: [				 fromLang _ mm contents asString].			(mm owner externalName includesSubString: 'from') ifTrue: [				 fromLang _ mm contents asString].			(mm externalName includesSubString: 'to') ifTrue: [				 toLang _ mm contents asString].			(mm owner externalName includesSubString: 'to') ifTrue: [				 toLang _ mm contents asString]]].	normalDirection ifFalse: ["switch"		tt _ fromTM.  fromTM _ toTM.  toTM _ tt.		tt _ fromLang.  fromLang _ toLang.  toLang _ tt].	Cursor wait showWhile: [		doc _ self translate: fromTM contents asString from: fromLang to: toLang.		answer _ self extract: doc].	"pull out the translated text"		width _ toTM width.	toTM contents: answer wrappedTo: width.	toTM changed.! !!WordNet methodsFor: 'as yet unclassified' stamp: 'tk 7/19/2000 08:36'!definition: theWord	"look this word up in the basic way.  Return nil if there is trouble accessing the web site."	| doc |	word _ theWord.	Cursor wait showWhile: [		doc _ HTTPSocket 			httpGetDocument: 'http://www.cogsci.princeton.edu/cgi-bin/webwn/' 			args: 'stage=1&word=', word].	replyHTML _ (doc isKindOf: MIMEDocument)		ifTrue:			[doc content]		ifFalse:			[nil].	"self parseReply."	^ replyHTML! !!WordNet class methodsFor: 'as yet unclassified' stamp: 'tk 7/19/2000 14:33'!canTranslateFrom	Languages ifNil: [Languages _ #(English Portuguese).		CanTranslateFrom _ #(French German Spanish English Portuguese 			Italian Norwegian)].		"see www.freetranslation.com/"	^ CanTranslateFrom ! !!WordNet class methodsFor: 'as yet unclassified' stamp: 'tk 7/19/2000 14:33'!languagePrefs	| ch ll |	"Set preference of which natural language is primary. Look up definitions in it, and correct spelling in it.  Also, let user set languages to translate from and to."	self CanTranslateFrom.		"sets defaults"	ch _ PopUpMenu withCaption: 'Choose the natural language to use for:'			chooseFrom: 'word definition and spelling verification (', 					(Preferences valueOfFlag: #myLanguage) asString ,')...\',				'language to translate from (',					(Preferences valueOfFlag: #languageTranslateFrom) asString ,')...\',				'language to translate to (',					(Preferences valueOfFlag: #languageTranslateTo) asString ,')...\'.	ch = 1 ifTrue: [		ll _ PopUpMenu withCaption: 'The language for word definitions and spelling verification:'			chooseFrom: Languages.		ll > 0 ifTrue: [			^ Preferences setPreference: #myLanguage toValue: (Languages at: ll) asSymbol]].	ch = 2 ifTrue: [		ll _ PopUpMenu withCaption: 'The language to translate from:'			chooseFrom: CanTranslateFrom.		ll > 0 ifTrue: [			^ Preferences setPreference: #languageTranslateFrom 				toValue: (CanTranslateFrom at: ll) asSymbol]].	ch = 3 ifTrue: [		ll _ PopUpMenu withCaption: 'The language to translate to'			chooseFrom: CanTranslateFrom.		ll > 0 ifTrue: [			^ Preferences setPreference: #languageTranslateTo 				toValue: (CanTranslateFrom at: ll) asSymbol]]."Maybe let the user add another language when he knows ther server can take it.""	ch _ (PopUpMenu labelArray: Languages, {'other...'.			'Choose language to translate from...'})		startUpWithCaption: 'Choose the language of dictionary for word definitions.'.	ch = 0 ifTrue: [^ Preferences valueOfFlag: #myLanguage].	(ch <= Languages size) ifTrue: [ll _ Languages at: ch].	ch = (Languages size + 1) ifTrue: [		ll _ FillInTheBlank request: 'Name of the primary language'].	ll ifNotNil: [^ Preferences setPreference: #myLanguage toValue: ll asSymbol]."! !