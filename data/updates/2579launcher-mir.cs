'From Squeak2.9alpha of 17 July 2000 [latest update: #2574] on 8 September 2000 at 7:28:41 pm'!"Change Set:		launcher.csDate:			6 September 2000Author:			Michael Ruegermir 9/6/00: Fixed two bugs concerning parameter extraction and launcher startup.This AutoStart/Launcher change set provides a small framework for starting Squeak from the command line or a web page. Parameters on the command line or in the embed tag in the web page a parsed and stored in the lauchner's parameter dictionary.Subclasses can access these parameters to determine what to do.The PluginLauchner is an example how to use this framework to start Squeak as a browser plugin. It looks for a parameter 'src' which should point to a file containing a squeak script. You need the http-loader package in order to use this plugin as it is."!Object subclass: #AbstractLauncher	instanceVariableNames: 'parameters '	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support'!!AbstractLauncher commentStamp: '<historical>' prior: 0!The class AutoStart in combination with the Launcher classes provides a mechanism for starting Squeak from the command line or a web page. Parameters on the command line or in the embed tag in the web page a parsed and stored in the lauchner's parameter dictionary.Subclasses can access these parameters to determine what to do.CommandLineLauncherExample provides an example for a command line application. if you start squeak with a command line 'class Integer' it will launch a class browser on class Integer.To enable this executeCommandLineLauncherExample activatebefore you save the image.To disable executeCommandLineLauncherExample deactivateThe PluginLauchner is an example how to use this framework to start Squeak as a browser plugin. It looks for a parameter 'src' which should point to a file containing a squeak script.!Object subclass: #AutoStart	instanceVariableNames: 'parameters '	classVariableNames: 'InstalledLaunchers '	poolDictionaries: ''	category: 'System-Support'!AbstractLauncher subclass: #CommandLineLauncherExample	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Framework-Download'!!CommandLineLauncherExample commentStamp: '<historical>' prior: 0!CommandLineLauncherExample provides an example for a command line application. if you start squeak with a command line 'class Integer' it will launch a class browser on class Integer.To enable this executeCommandLineLauncherExample activatebefore you save the image.To disable executeCommandLineLauncherExample deactivate!AbstractLauncher subclass: #PluginLauncher	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Framework-Download'!!AbstractLauncher methodsFor: 'private' stamp: 'jm 8/20/1999 15:33'!commandLine: aString	"Start up this launcher from within Squeak as if it Squeak been launched the given command line."	| dict tokens cmd arg |	dict _ Dictionary new.	tokens _ ReadStream on: (aString findTokens: ' ').	[cmd _ tokens next.	 arg _ tokens next.	 ((cmd ~~ nil) and: [arg ~~ nil])]		whileTrue: [dict at: cmd put: arg].	self parameters: dict.	self startUp.! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 9/23/1999 13:18'!determineParameterNameFrom: alternateParameterNames	"Determine which of the given alternate parameter names is actually used."	^alternateParameterNames detect: [:each | self includesParameter: each asUppercase] ifNone: [nil] ! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 1/11/2000 16:35'!includesParameter: parName	"Return if the parameter named parName exists."	^self parameters		includesKey: parName asUppercase! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 9/23/1999 12:11'!numericParameterAtOneOf: alternateParameterNames ifAbsent: aBlock	"Return the parameter named using one of the alternate names or an empty string"	| parameterValue |	parameterValue _ self parameterAtOneOf: alternateParameterNames.	parameterValue isEmpty		ifTrue: [^aBlock value].	^[Number readFrom: parameterValue] ifError: [aBlock] ! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 8/4/1999 14:19'!parameterAt: parName	"Return the parameter named parName or an empty string"	^self		parameterAt: parName		ifAbsent: ['']! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 1/11/2000 16:36'!parameterAt: parName ifAbsent: aBlock	"Return the parameter named parName.	Evaluate the block if parameter does not exist."	^self parameters		at: parName asUppercase		ifAbsent: [aBlock value]! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 9/23/1999 12:09'!parameterAtOneOf: alternateParameterNames	| parameterName |	"Return the parameter named using one of the alternate names or an empty string"	parameterName _ self determineParameterNameFrom: alternateParameterNames.	^parameterName isNil		ifTrue: ['']		ifFalse: [self parameterAt: parameterName ifAbsent: ['']]! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 1/11/2000 16:53'!parameters	parameters == nil		ifTrue: [parameters _ self class extractParameters].	^parameters! !!AbstractLauncher methodsFor: 'private' stamp: 'mir 7/29/1999 10:21'!parameters: startupParameters	parameters _ startupParameters! !!AbstractLauncher methodsFor: 'running' stamp: 'mir 7/29/1999 10:22'!startUp! !!AbstractLauncher methodsFor: 'initialization' stamp: 'mir 8/6/1999 18:32'!initialize! !!AbstractLauncher class methodsFor: 'private' stamp: 'mir 8/4/1999 13:57'!autoStarter	^AutoStart! !!AbstractLauncher class methodsFor: 'private' stamp: 'mir 1/11/2000 16:54'!extractParameters	| pName value index globals |	globals := Dictionary new.	index := 3. "Muss bei 3 starten, da 2 documentName ist"	[pName := Smalltalk getSystemAttribute: index.	pName isEmptyOrNil] whileFalse:[		index := index + 1.		value := Smalltalk getSystemAttribute: index.		value ifNil: [value _ '']. 		globals at: pName asUppercase put: value.		index := index + 1].	^globals! !!AbstractLauncher class methodsFor: 'activation' stamp: 'mir 8/6/1999 18:14'!activate	"Register this launcher with the auto start class"	self autoStarter addLauncher: self! !!AbstractLauncher class methodsFor: 'activation' stamp: 'mir 8/4/1999 13:57'!deactivate	"Unregister this launcher with the auto start class"	self autoStarter removeLauncherClass: self! !!AbstractLauncher class methodsFor: 'instance creation' stamp: 'mir 8/6/1999 18:33'!new	^super new initialize! !!AutoStart class methodsFor: 'class initialization' stamp: 'mir 7/28/1999 17:44'!deinstall	"AutoStart deinstall"	Smalltalk removeFromStartUpList: AutoStart.	InstalledLaunchers _ nil! !!AutoStart class methodsFor: 'class initialization' stamp: 'mir 7/28/1999 17:43'!initialize	"AutoStart initialize"	Smalltalk addToStartUpList: AutoStart! !!AutoStart class methodsFor: 'class initialization' stamp: 'mir 1/11/2000 16:54'!startUp	| startupParameters launchers |	startupParameters _ AbstractLauncher extractParameters.	launchers _ self installedLaunchers collect: [:launcher |		launcher new].	launchers do: [:launcher |		launcher parameters: startupParameters].	launchers do: [:launcher |		WorldState addDeferredUIMessage: [launcher startUp]]! !!AutoStart class methodsFor: 'accessing' stamp: 'mir 7/28/1999 17:47'!addLauncher: launcher	self installedLaunchers add: launcher! !!AutoStart class methodsFor: 'accessing' stamp: 'mir 7/28/1999 17:47'!removeLauncher: launcher	self installedLaunchers remove: launcher ifAbsent: []! !!AutoStart class methodsFor: 'accessing' stamp: 'mir 8/6/1999 18:14'!removeLauncherClass: launcherClass"	| launchersToBeRemoved |	launchersToBeRemoved _ self installedLaunchers select: [:launcher |		launcher class == launcherClass].	launchersToBeRemoved do: [:launcher | self removeLauncher: launcher]"	self removeLauncher: launcherClass! !!AutoStart class methodsFor: 'private' stamp: 'mir 7/28/1999 17:43'!installedLaunchers	InstalledLaunchers ifNil: [		InstalledLaunchers _ OrderedCollection new].	^InstalledLaunchers! !!CommandLineLauncherExample methodsFor: 'running' stamp: 'mir 7/26/2000 15:56'!startUp	| className |	className _ self parameterAt: 'class'.	(Smalltalk at: className asSymbol ifAbsent: [Object]) browse! !!PluginLauncher methodsFor: 'running' stamp: 'mir 9/7/2000 16:14'!startUp	| scriptName loader |	StandardFileStream isRunningAsBrowserPlugin		ifFalse: [^self].	scriptName _ self parameterAt: 'src'.	scriptName isEmpty ifTrue:[^self].	CodeLoader defaultBaseURL: (self parameterAt: 'Base').	loader _ PluginCodeLoader new.	loader loadSourceFiles: (Array with: scriptName).	loader installSourceFiles.! !AutoStart initialize!