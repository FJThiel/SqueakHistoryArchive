'From Squeak2.9alpha of 12 June 2000 [latest update: #3242] on 9 January 2001 at 8:36:58 am'!"Change Set:		ScriptorChanges10Date:			9 January, 2001Author:			Dan IngallsAllows starting a new selection by clicking elsewhere in the current selection (ie on a different morph from the one which began the selection).Allows selecting message-parts as well as full expressions.Includes Ted's fix for a node type problem.Includes a ChangeSet feature that offers to increment the current name if it ends with a number and the incremented name doesn't exist."!!ChangeSet class methodsFor: 'defaults' stamp: 'di 12/14/2000 13:06'!defaultName	| namesInUse try digits nm |	namesInUse _ ChangeSorter gatherChangeSets					collect: [:each | each name].	"If current changes name ends with a number, offer an incremented copy"	nm _ Smalltalk changes name.	digits _ nm size - (nm findLast: [:c | c isDigit not]).	(digits > 0 and: [(nm beginsWith: 'Unnamed') not]) ifTrue:		[try _ (nm allButLast: digits) , ((nm last: digits) asInteger + 1) printString.		(namesInUse includes: try) ifFalse: [^ try]].					"... else it's the boring old..."	1 to: 9999 do:		[:i | try _ 'Unnamed' , i printString.		(namesInUse includes: try) ifFalse: [^ try]]! !!MessageNode methodsFor: 'tiles' stamp: 'tk 1/4/2001 12:48'!morphFromKeywords: key arguments: args on: parent indent: ignored	| keywords column row receiverMorph firstArgMorph receiverWidthmessageWidth onlyOne |	receiver ifNotNil: ["i.e. not a cascade"			receiverMorph _ receiver asMorphicSyntaxIn: parent].	keywords _ key keywords.	args size = 0 ifTrue:			[row _ (parent addTextRow: key) layoutInset: 1.			^ row parseNode: selector].	receiverWidth _ receiver				ifNil: [0]				ifNotNil: [receiverMorph fullBounds width].	onlyOne _ args size = 1.	(receiverWidth <= 80 and: [onlyOne])		ifTrue: [row _ (parent addTextRow: keywords first)layoutInset: 1.			row parseNode: selector.			firstArgMorph _ args first asMorphicSyntaxIn: parent.			receiver ifNil: [^ self].			(firstArgMorph fullBounds height > 100					or: [firstArgMorph fullBounds width> 250])				ifTrue: [parent foldMessageOneArg].			^ self].	column _ parent addColumn: #keyword1 on: self.	messageWidth _ 0.	keywords		with: (args copyFrom: 1 to: keywords size)		do: [:kwd :arg |			(row _ column addRow: #keyword2 on: self)borderWidth: 1;				parseNode: (self as: (onlyOne ifTrue:[MessageNode] ifFalse: [MessagePartNode]));				 borderColor: row stdBorderColor.			row addToken: kwd				type: #keyword2				on: (onlyOne ifTrue: [SelectorNode new key:kwd code: nil "fill this in?"]								ifFalse:[KeyWordNode new]).			arg asMorphicSyntaxIn: row.			messageWidth _ messageWidth + row fullBounds width].	receiverMorph ifNotNil:		[receiverWidth + messageWidth < 350 ifTrue: [^ parentunfoldMessage].			((receiverWidth > 200						or: [receiverWidth > 80								and:[column fullBounds height > 20]])					or: [receiverMorph fullBounds width> 30							and: [columnfullBounds height > 100									or:[column fullBounds width > 250]]])				ifTrue: [^ parent foldMessage]]! !!SyntaxMorph methodsFor: 'event handling' stamp: 'di 12/14/2000 13:14'!mouseDown: evt 	| dup rootTile |	evt yellowButtonPressed ifTrue: [^ self showMenu: evt].	(rootTile _ self rootTile) isMethodNode ifTrue:		[self currentSelectionDo:			[:innerMorph :mouseDownLoc :outerMorph |			(outerMorph notNil and: [self == innerMorph])				ifTrue: ["Click on prior selection -- record click point."						self setSelection: {self. evt cursorPoint. outerMorph}]				ifFalse: ["A new selection sequence."						self setSelection: {self. evt cursorPoint. nil}]].		^ self].	"Out in the world -- treat as a unit"	rootTile isPartsDonor 		ifTrue: [dup _ rootTile duplicate.				dup setProperty: #beScript toValue: true]		ifFalse: [dup _ rootTile].	evt hand attachMorph: dup.	^ dup align: dup topLeft with: evt hand position + self cursorBaseOffset.! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 1/9/2001 08:26'!event: evt arrow: arrowMorph upDown: delta	| st aList index now want instVar |	st _ submorphs detect: [:mm | mm isKindOf: StringMorph] ifNone: [^ self].	(self nodeClassIs: LiteralNode) ifTrue: [ "+/- 1"		st contents: (self decompile asNumber + delta) printString.		^ self acceptIfInScriptor.	"maybe set parseNode's key"].	(self nodeClassIs: VariableNode) ifTrue: [ "true/false"		st contents: (self decompile asString = 'true') not printString.		^ self acceptIfInScriptor.	"maybe set parseNode's key"].	(self nodeClassIs: SelectorNode) ifTrue: [		aList _ #(+ - * / // \\ min: max:).		index _ aList indexOf: self decompile asString.		index  > 0 ifTrue: [			self setBalloonText:				(ScriptingSystem helpStringForOperator: (aList atWrap: index + delta)).			st contents: (aList atWrap: index + delta).			^ self acceptIfInScriptor].		aList _ #(= ~= > >= isDivisibleBy: < <=).		index _ aList indexOf: self decompile asString.		index  > 0 ifTrue: [			self setBalloonText:				(ScriptingSystem helpStringForOperator: (aList atWrap: index + delta)).			st contents: (aList atWrap: index + 1).			^ self acceptIfInScriptor].		aList _ #(== ~~).		index _ aList indexOf: self decompile asString.		index  > 0 ifTrue: [			self setBalloonText:				(ScriptingSystem helpStringForOperator: (aList atWrap: index + delta)).			st contents: (aList atWrap: index + delta).			^ self acceptIfInScriptor].		'beep:' = self decompile asString ifTrue: ["replace sound arg"			self changeSound: delta.			^ self acceptIfInScriptor].		].	(self nodeClassIs: SelectorNode) ifTrue: ["kinds of assignment"		((now _ self decompile asString) beginsWith: 'set') ifTrue:			["a setX: 3"			want _ 1+delta.  instVar _ (now allButFirst: 3) allButLast].		(now endsWith: 'IncreaseBy:') ifTrue: ["a xIncreaseBy: 3 a setX: (a getX +3)."			want _ 2+delta.  instVar _ now allButLast: 11].		(now endsWith: 'DecreaseBy:') ifTrue: ["a xDecreaseBy: 3 a setX: (a getX -3)."			want _ 3+delta.  instVar _ now allButLast: 11].		(now endsWith: 'MultiplyBy:') ifTrue: ["a xMultiplyBy: 3 a setX: (a getX *3)."			want _ 4+delta.  instVar _ now allButLast: 11].		want ifNil: [^ self].		instVar _ instVar asLowercase.		want _ #(1 2 3 4) atWrap: want.		want = 1 ifTrue: [st contents: 'set', instVar capitalized, ':'].	"setter method is present"		want = 2 ifTrue: [st contents: instVar, 'IncreaseBy:'].			"notUnderstood will create the method if needed"		want = 3 ifTrue: [st contents: instVar, 'DecreaseBy:'].			"notUnderstood will create the method if needed"		want = 4 ifTrue: [st contents: instVar, 'MultiplyBy:'].			"notUnderstood will create the method if needed"		^ self acceptIfInScriptor].! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 1/9/2001 08:29'!upDownArrows	"Return an array of two up/down arrow buttons.	It replaces the selector or arg with a new one.	I am a number or boolean or a selector (beep:, +,-,*,//,\\, or setX: incX: decX: for any X."	| patch sel any ok |	any _ (self nodeClassIs: LiteralNode) and: [parseNode key isNumber].	any _ any or: [(self nodeClassIs: VariableNode) and:						[(#('true' 'false') includes: self decompile asString)]].	any _ any or: [(self nodeClassIs: SelectorNode) and:				[ok _ #(beep: + - * // \\) includes: (sel _ parseNode key).				ok _ ok or: [(sel beginsWith: 'set') and: [(sel atWrap: 4) isUppercase]].				ok _ ok or: [sel size > 11 and:						[#('IncreaseBy:' 'DecreaseBy:' 'MultiplyBy:') includes: (sel last: 11)]].				ok]].	any _ any or: [(self nodeClassIs: SelectorNode) and:				[ok _ #(= ~= == ~~) includes: (sel _ parseNode key).				ok]].	any ifFalse: [^ nil].	patch _ {(ImageMorph new image: TileMorph upPicture)				on: #mouseDown send: #event:arrow:upDown: to: self withValue: 1.			(ImageMorph new image: TileMorph downPicture)				on: #mouseDown send: #event:arrow:upDown: to: self withValue: -1}.	^ patch! !