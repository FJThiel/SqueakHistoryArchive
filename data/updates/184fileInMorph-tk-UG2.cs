'From Squeak 2.1 of June 30, 1998 on 12 August 1998 at 2:35:30 pm'!!Morph methodsFor: 'object fileIn' stamp: 'tk 8/12/1998 14:34'!convertbosfcepc0: varDict bosfce0: smartRefStrm	"These variables are automatically stored into the new instance ('bounds' 'owner' 'submorphs' 'fullBounds' 'color' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"Be sure to to fill in ('extension' ) and deal with the information in ('eventHandler' 'properties' 'costumee' )""This method moves all property variables as well as eventHandler, and costumee into a morphicExtension."	| propVal |	"Move refs to eventhandler and costumee into extension"	(varDict at: 'eventHandler') == nil ifFalse: [self eventHandler: (varDict at: 'eventHandler')].	(varDict at: 'costumee') == nil ifFalse: [self player: (varDict at: 'costumee')].	(varDict at: 'properties') == nil ifFalse:		[(varDict at: 'properties') keys do:			[:key |  "Move property extensions into extension"			propVal _ (varDict at: 'properties') at: key.			propVal ifNotNil:				[key == #possessive				ifTrue: [propVal == true ifTrue: [self bePossessive]]				ifFalse: [key ifNotNil: [					self assureExtension.					extension convertProperty: key toValue: propVal]]]].			].! !!MorphExtension reorganize!('named access' actorState actorState: balloonText balloonText: balloonTextSelector balloonTextSelector: eventHandler eventHandler: externalName externalName: isPartsDonor isPartsDonor: locked locked: player player: sticky sticky: visible visible:)('other properties' hasProperty: otherProperties removeProperty: setProperty:toValue: valueOfProperty: valueOfProperty:ifAbsent:)('copying' copyPropertiesFrom:dict: updateReferencesUsing:)('object fileIn' convertProperty:toValue:)!!MorphExtension methodsFor: 'object fileIn' stamp: 'tk 8/12/1998 14:31'!convertProperty: propName toValue: aValue	"These special cases move old properties into named fields of the extension"	propName == #locked ifTrue: [^ locked _ aValue].	propName == #visible ifTrue: [^ visible _ aValue].	propName == #sticky ifTrue: [^ sticky _ aValue].	propName == #balloonText ifTrue: [^ balloonText _ aValue].	propName == #balloonTextSelector ifTrue: [^ balloonTextSelector _ aValue].	propName == #actorState ifTrue: [^ actorState _ aValue].	propName == #player ifTrue: [^ player _ aValue].	propName == #name ifTrue: [^ externalName _ aValue].  "*renamed*"	propName == #partsDonor ifTrue: [^ isPartsDonor _ aValue].  "*renamed*"	otherProperties == nil ifTrue: [otherProperties _ IdentityDictionary new].	otherProperties at: propName put: aValue.! !!TileMorph methodsFor: 'object fileIn' stamp: 'tk 8/12/1998 10:17'!convertbosfcepcbbtsloadustlno0: varDict bosfcebbtsloadustlnop0: smartRefStrm	"These variables are automatically stored into the new instance ('type' 'slotName' 'literal' 'operatorOrExpression' 'actualObject' 'downArrow' 'upArrow' 'suffixArrow' 'typeColor' 'lastArrowTick' 'nArrowTicks' 'operatorReadoutString' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"Be sure to to fill in ('possessive' ) and deal with the information in ()"	"Morph's conversion method already deals with this, so no extra code here."! !