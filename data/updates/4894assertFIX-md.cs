'From Squeak3.2alpha of 21 October 2001 [latest update: #4599] on 23 December 2001 at 1:27:59 pm'!"Change Set:		assertFIX-mdDate:			22 December 2001Author:			Marcus Denkerfixes a problem building the LargeIntegers Plugin on MacOS X by renaming assert:to sqAssert:"!!LargeIntegersPlugin methodsFor: 'debugging' stamp: 'md 12/22/2001 23:01'!sqAssert: aBool 	self		debugCode: 			[aBool				ifFalse: 					[self msg: 'Assertion failed!!'.					self cCode: 'exit(1)'						inSmalltalk: 							[interpreterProxy primitiveFail.							self halt]].			^ true]! !!LargeIntegersPlugin methodsFor: 'C core' stamp: 'md 12/23/2001 13:27'!cBytesLshift: shiftCount from: pFrom len: lenFrom to: pTo len: lenTo 	"C indexed!!"	| byteShift bitShift carry rShift mask limit digit lastIx |	self returnTypeC: 'int'.	self var: #pTo declareC: 'unsigned char * pTo'.	self var: #pFrom declareC: 'unsigned char * pFrom'.	self var: #lenFrom declareC: 'int lenFrom'.	self var: #lenTo declareC: 'int lenTo'.	byteShift _ shiftCount // 8.	bitShift _ shiftCount \\ 8.	bitShift = 0 ifTrue: ["Fast version for byte-aligned shifts"		"C indexed!!"		^ self			cBytesReplace: pTo			from: byteShift			to: lenTo - 1			with: pFrom			startingAt: 0].	carry _ 0.	rShift _ bitShift - 8.	mask _ 255 bitShift: 0 - bitShift.	limit _ byteShift - 1.	0 to: limit do: [:i | pTo at: i put: 0].	limit _ lenTo - byteShift - 2.	self sqAssert: limit < lenFrom.	0 to: limit do: 		[:i | 		digit _ pFrom at: i.		pTo at: i + byteShift put: (((digit bitAnd: mask)				bitShift: bitShift)				bitOr: carry).		carry _ digit bitShift: rShift].	lastIx _ limit + 1.	lastIx > (lenFrom - 1)		ifTrue: [digit _ 0]		ifFalse: [digit _ pFrom at: lastIx].	pTo at: lastIx + byteShift put: (((digit bitAnd: mask)			bitShift: bitShift)			bitOr: carry).	carry _ digit bitShift: rShift.	self sqAssert: carry = 0! !!LargeIntegersPlugin methodsFor: 'C core' stamp: 'md 12/23/2001 13:27'!cCoreBytesRshiftCount: count n: n m: m f: f bytes: b from: pFrom len: fromLen to: pTo len: toLen 	| x digit |	self var: #pTo declareC: 'unsigned char * pTo'.	self var: #pFrom declareC: 'unsigned char * pFrom'.	self sqAssert: b < fromLen.	x _ (pFrom at: b)				bitShift: n.	self sqAssert: count - 1 < fromLen.	b + 1 to: count - 1 do: 		[:j | 		digit _ pFrom at: j.		pTo at: j - b - 1 put: (((digit bitAnd: m)				bitShift: f)				bitOr: x).		"Avoid values > 8 bits"		x _ digit bitShift: n].	count = fromLen				ifTrue: [digit _ 0]				ifFalse: [digit _ pFrom at: count].	pTo at: count - b - 1 put: (((digit bitAnd: m)			bitShift: f)			bitOr: x)! !LargeIntegersPlugin removeSelector: #assert:!