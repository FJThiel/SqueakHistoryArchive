'From Squeak2.8alpha of 13 January 2000 [latest update: #2067] on 6 May 2000 at 3:11:12 am'!"Change Set:		buttonRowClip-swDate:			6 May 2000Author:			Scott WallaceFixes the optional morphic button rows in the various tools so that they will not obtrude to the right when the window is minimized.Makes the buttons in the optional button rows be PluggableButtonMorphs, so that they will have more attractive reactions when their containers are resized."!!AlignmentMorph methodsFor: 'private' stamp: 'sw 5/6/2000 03:09'!drawSubmorphsOn: aCanvas	((self hasProperty: #clipToOwnerWidth) and: [owner isWorldOrHandMorph not])		ifFalse:			[super drawSubmorphsOn: aCanvas]		ifTrue:			[aCanvas				clipBy:					(self bounds intersect: owner bounds)				during:					[:clippedCanvas | super drawSubmorphsOn: clippedCanvas]]! !!AlignmentMorph methodsFor: 'private' stamp: 'sw 5/6/2000 02:53'!resizeIfNeeded	"Resize this morph if it is space-filling or shrink-wrap and its owner is not a layout morph."	| newWidth newHeight |	newWidth _ bounds width.	newHeight _ bounds height.	(owner == nil or: [owner isAlignmentMorph not]) ifTrue:		"if spaceFill and not in a LayoutMorph, grow to enclose submorphs"		[hResizing = #spaceFill ifTrue:			[newWidth _ self minWidth max: self bounds width.			owner ifNotNil:				[(self hasProperty: #clipToOwnerWidth) ifTrue:					[newWidth _ newWidth min: (owner right - bounds left)]]].		vResizing = #spaceFill ifTrue:			[newHeight _ self minHeight max: self bounds height]].	"if shrinkWrap, adjust size to just fit around submorphs"	hResizing = #shrinkWrap ifTrue: [newWidth _ self minWidth].	vResizing = #shrinkWrap ifTrue: [newHeight _ self minHeight].	((newWidth ~= bounds width) or: [newHeight ~= bounds height])		ifTrue: ["bounds really changed"				bounds _ bounds origin extent: newWidth@newHeight].! !!Browser methodsFor: 'initialize-release' stamp: 'sw 5/6/2000 02:54'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow setProperty: #clipToOwnerWidth toValue: true.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs  do:			[:pair |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: pair second.				aButton useRoundedCorners;					label: pair first asString;					askBeforeChanging: true;					onColor: Color transparent offColor: Color transparent.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!ChangeList methodsFor: 'menu actions' stamp: 'sw 5/6/2000 02:54'!buttonRowForChangeList	| aRow aButton |	aRow _ AlignmentMorph newRow.	aRow setProperty: #clipToOwnerWidth toValue: true.	aRow addTransparentSpacerOfSize: (5@0).	aRow centering: #center.	self changeListButtonSpecs do:		[:triplet |			aButton _ PluggableButtonMorph				on: self				getState: nil				action: triplet second.			aButton useRoundedCorners;				label: triplet first asString;				askBeforeChanging: true;				onColor: Color transparent offColor: Color transparent.			aRow addMorphBack: aButton.			aRow addTransparentSpacerOfSize: (3 @ 0).			aButton setBalloonText: triplet third.			aRow addMorphBack: aButton.			aRow addTransparentSpacerOfSize: (3 @ 0).			aButton setBalloonText: triplet third.			aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.		^ aRow! !!Debugger methodsFor: 'initialize' stamp: 'sw 5/6/2000 02:54'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow beSticky.	aRow setProperty: #clipToOwnerWidth toValue: true.	aButton _ SimpleButtonMorph new target: self.	aButton color: Color lightRed; borderWidth: 1; borderColor: Color red darker.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs do:		[:pair |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: pair second.				aButton useRoundedCorners;					label: pair first asString;					askBeforeChanging: true;					onColor: Color transparent offColor: Color transparent.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	^ aRow! !!FileList methodsFor: 'initialization' stamp: 'sw 5/6/2000 02:54'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow beSticky.	aRow setProperty: #clipToOwnerWidth toValue: true.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonSpecs do:			[:spec |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: spec second.				aButton useRoundedCorners;					label: spec first asString;					askBeforeChanging: true;					onColor: Color transparent offColor: Color transparent.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0).				aButton setBalloonText: spec fourth.				aRow addTransparentSpacerOfSize: (3 @ 0).				(spec second == #sortBySize)					ifTrue:						[aRow addTransparentSpacerOfSize: (4@0)]].	^ aRow! !!MessageSet methodsFor: 'message list' stamp: 'sw 5/6/2000 03:04'!optionalButtonRow	| aRow |	aRow _ super optionalButtonRow.	aRow centering: #center.	aRow addMorphBack: self diffButton.	^ aRow! !!VersionsBrowser methodsFor: 'init & update' stamp: 'sw 5/6/2000 01:16'!changeListButtonSpecs	^#(		('compare to current'		compareToCurrentVersion		'opens a separate window which shows the text differences between the selected version and the current version')		('revert'		fileInSelections		'reverts the method to the version selected')		('remove from changes'		removeMethodFromChanges		'remove this method from the current change set')		('help'		offerVersionsHelp		'further explanation about use of Versions browsers')		)! !VersionsBrowser removeSelector: #buttonRowForChangeList!"Postscript:"Utilities replaceToolsFlap.ScriptingSystem resetStandardPartsBin.!