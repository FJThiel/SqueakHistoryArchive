'From Squeak2.6 of 11 October 1999 [latest update: #1599] on 9 November 1999 at 10:08:44 am'!"Change Set:		OOPSLAtweaksDate:			4 November 1999Author:			Dan IngallsA few bug fixes and enhancements culled from preparations for the OOPSLA demo...	Fixes a problem with text propagation between linked containers.	Finally allows the SelectorFinder to present its examples with the data as typed.		Changes the window title to 'Method Finder' since that's what it does.		Makes the default extent in morphic be 350x250, as in MVC	Fixes a typo (titel --> title) in choose new window title.	Colors the pan and volume sliders of MIDI score players."!!HandMorph methodsFor: 'world menu' stamp: 'di 11/9/1999 09:56'!openMenu	"Build the open window menu for the world."	| menu |	menu _ (MenuMorph entitled: 'open...') defaultTarget: self.	menu addStayUpItem.	menu add: 'browser' action: #openBrowser.	menu add: 'method finder' action: #openSelectorBrowser.	menu add: 'workspace' action: #openWorkspace.	menu add: 'file list' action: #openFileList.	menu add: 'file...' action: #openFileDirectly.	menu add: 'transcript' action: #openTranscript.	menu addLine.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu addLine.	menu add: 'email reader' action: #openEmail.	menu add: 'web browser' action: #openWebBrowser.	menu add: 'IRC chat' action: #openIRC.	menu addLine.	(Preferences allowMVCprojects and: [Smalltalk includesKey: #StandardSystemView])		ifTrue: [menu add: 'project (mvc)' action: #openMVCProject].	menu add: 'project (morphic)' action: #openMorphicProject.	menu add: 'project (construction)' action: #openConstructionProject.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'di 11/4/1999 13:54'!openSelectorBrowser	SelectorBrowser new morphicWindow openInWorld! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'di 11/8/1999 14:57'!makePianoRoll	"Create a piano roll viewer for this score player."	| pianoRoll hand |	pianoRoll _ PianoRollScoreMorph new on: scorePlayer.	hand _ self world activeHand.	hand ifNil: [self world addMorph: pianoRoll]		ifNotNil: [hand attachMorph: pianoRoll.				hand lastEvent shiftPressed ifTrue:					["Special case for NOBM demo"					pianoRoll contractTime; contractTime; openDragAndDrop]].	pianoRoll startStepping.! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'di 11/8/1999 16:51'!panAndVolControlsFor: trackIndex	| volSlider panSlider c r middleLine pianoRollColor |	pianoRollColor _ (Color wheel: scorePlayer score tracks size) at: trackIndex.	volSlider _ SimpleSliderMorph new		color: color;		extent: 101@2;		sliderColor: pianoRollColor;		target: scorePlayer;		arguments: (Array with: trackIndex);		actionSelector: #volumeForTrack:put:;		minVal: 0.0;		maxVal: 1.0;		adjustToValue: (scorePlayer volumeForTrack: trackIndex).	panSlider _ volSlider fullCopy		actionSelector: #panForTrack:put:;		minVal: 0.0;		maxVal: 1.0;				adjustToValue: (scorePlayer panForTrack: trackIndex).	c _ AlignmentMorph newColumn		color: color;		inset: 0;		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap.	middleLine _ Morph new  "center indicator for pan slider"		color: (Color r: 0.4 g: 0.4 b: 0.4);		extent: 1@(panSlider height - 4);		position: panSlider center x@(panSlider top + 2).	panSlider addMorphBack: middleLine.	r _ self makeRow.	r addMorphBack: (StringMorph contents: '0').	r addMorphBack: volSlider.	r addMorphBack: (StringMorph contents: '10').	c addMorphBack: r.	r _ self makeRow.	r addMorphBack: (StringMorph contents: 'L').	r addMorphBack: panSlider.	r addMorphBack: (StringMorph contents: 'R').	c addMorphBack: r.	^ c! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'di 11/8/1999 17:24'!rateControl	| rateSlider middleLine r |	rateSlider _ SimpleSliderMorph new		color: color;		extent: 180@2;		sliderColor: Color gray;		target: self;		actionSelector: #setLogRate:;		minVal: -1.0;		maxVal: 1.0;		adjustToValue: 0.0.	middleLine _ Morph new  "center indicator for pan slider"		color: (Color r: 0.4 g: 0.4 b: 0.4);		extent: 1@(rateSlider height - 4);		position: rateSlider center x@(rateSlider top + 2).	rateSlider addMorphBack: middleLine.	r _ self makeRow		hResizing: #shrinkWrap;		vResizing: #rigid;		height: 24.	r addMorphBack: (StringMorph contents: 'slow ').	r addMorphBack: rateSlider.	r addMorphBack: (StringMorph contents: ' fast').	^ r! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'di 11/8/1999 17:24'!scrollControl	| r |	scrollSlider _ SimpleSliderMorph new		color: color;		extent: 360@2;		sliderColor: Color gray;		target: scorePlayer;		actionSelector: #positionInScore:;		adjustToValue: scorePlayer positionInScore.	r _ self makeRow		hResizing: #shrinkWrap;		vResizing: #rigid;		height: 24.	r addMorphBack: (StringMorph contents: 'start ').	r addMorphBack: scrollSlider.	r addMorphBack: (StringMorph contents: ' end').	^ r! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'di 11/8/1999 17:24'!volumeControl	| volumeSlider r |	volumeSlider _ SimpleSliderMorph new		color: color;		extent: 80@2;		sliderColor: Color gray;		target: scorePlayer;		actionSelector: #overallVolume:;		adjustToValue: scorePlayer overallVolume.	r _ self makeRow		hResizing: #shrinkWrap;		vResizing: #rigid;		height: 24.	r addMorphBack: (StringMorph contents: 'soft  ').	r addMorphBack: volumeSlider.	r addMorphBack: (StringMorph contents: ' loud').	^ r! !!ScreenController methodsFor: 'nested menus' stamp: 'di 11/9/1999 09:56'!openMenu	^ SelectionMenu labelList:		#(	'keep this menu up'			'browser'			'method finder'			'workspace'			'file list'			'file...'			'transcript'			'simple change sorter'			'dual change sorter'			'project (mvc)'			'project (morphic)'			'project (construction)'			)		lines: #(1 7 9)		selections: #(durableOpenMenuopenBrowser openSelectorBrowser openWorkspace openFileList openFile openTranscript openSimpleChangeSorter openChangeManageropenProject  openMorphicProject  openConstructionProject )"ScreenController  new openMenu startUp"! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'di 11/9/1999 10:07'!initialExtent	^ 350@250! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'di 11/9/1999 10:02'!morphicWindow	"Create a Browser that lets you type part of a selector, shows a list of selectors, shows the classes of the one you chose, and spawns a full browser on it.  Answer the window	SelectorBrowser new open "	| window typeInView selectorListView classListView |	window _ (SystemWindow labelled: 'later') model: self.	window setStripeColorsFrom: self defaultBackgroundColor.	selectorIndex _ classListIndex _ 0.	typeInView _ PluggableTextMorph on: self 		text: #contents accept: #contents:notifying:		readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	typeInView acceptOnCR: true.	window addMorph: typeInView frame: (0@0 corner: 0.5@0.14).	selectorListView _ PluggableListMorph on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #selectorMenu:		keystroke: #messageListKey:from:.	selectorListView menuTitleSelector: #selectorMenuTitle.	window addMorph: selectorListView frame: (0@0.14 corner: 0.5@0.6).	classListView _ PluggableListMorph on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: nil		keystroke: #arrowKey:from:.	classListView menuTitleSelector: #classListSelectorTitle.	window addMorph: classListView frame: (0.5@0 corner: 1@0.6).	window addMorph: ((PluggableTextMorph on: self text: #byExample 				accept: #byExample:				readSelection: #contentsSelection menu: #codePaneMenu:shifted:)					askBeforeDiscardingEdits: false)		frame: (0@0.6 corner: 1@1).	window setLabel: 'Method Finder'.	^ window! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'di 11/4/1999 13:51'!open	"Create a Browser that lets you type part of a selector, shows a list of selectors, shows the classes of the one you chose, and spwns a full browser on it.	SelectorBrowser new open   "	|  selectorListView typeInView topView classListView exampleView |	World ifNotNil: [^ self openAsMorph].	selectorIndex _ classListIndex _ 0.	topView _ (StandardSystemView new) model: self.	topView borderWidth: 1.		"label and minSize taken care of by caller"	typeInView _ PluggableTextView on: self 			text: #contents accept: #contents:notifying:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	typeInView window: (0@0 extent: 50@14);		askBeforeDiscardingEdits: false.	topView addSubView: typeInView.	selectorListView _ PluggableListView on: self		list: #messageList		selected: #messageListIndex		changeSelected: #messageListIndex:		menu: #selectorMenu:		keystroke: #messageListKey:from:.	selectorListView menuTitleSelector: #selectorMenuTitle.	selectorListView window: (0 @ 0 extent: 50 @ 46).	topView addSubView: selectorListView below: typeInView.	classListView _ PluggableListView on: self		list: #classList		selected: #classListIndex		changeSelected: #classListIndex:		menu: nil	"never anything selected"		keystroke: #arrowKey:from:.	classListView menuTitleSelector: #classListSelectorTitle.	classListView window: (0 @ 0 extent: 50 @ 60).	topView addSubView: classListView toRightOf: typeInView.	exampleView _ PluggableTextView on: self 			text: #byExample accept: #byExample:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:.	exampleView window: (0@0 extent: 100@40);		askBeforeDiscardingEdits: false.	topView addSubView: exampleView below: selectorListView.	topView label: 'Method Finder'.	topView minimumSize: 350@250; maximumSize: 350@250.	topView subViews do: [:each | each controller].	topView controller open.! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'di 11/4/1999 13:55'!openAsMorph	"Create a Browser that lets you type part of a selector, shows a list of selectors, shows the classes of the one you chose, and spwns a full browser on it.	SelectorBrowser new open   "	^ self morphicWindow openInWorld! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'di 11/2/1999 02:11'!quickList	"Compute the selectors for the single example of receiver and args, in the very top pane" 	| data array result resultArray newExp dataStrings |	data _ contents asString.	"delete trailing period. This should be fixed in the Parser!!" 	[data last isSeparator] whileTrue: [data _ data allButLast]. 	data last = $. ifTrue: [data _ data allButLast]. 	"Eval"	array _ Compiler evaluate: '{', data, '}'. "#( data1 data2 result )" 	dataStrings _ (Compiler new parse: 'zort ' , data in: Object notifying: nil)				block statements allButLast collect:				[:node | String streamContents:					[:strm | (node isKindOf: MessageNode) ifTrue: [strm nextPut: $(].					node printOn: strm indent: 0.					(node isKindOf: MessageNode) ifTrue: [strm nextPut: $)].]].	array size < 2 ifTrue: [self inform: 'If you are giving an example of receiver, \args, and result, please put periods between the parts.\Otherwise just type one selector fragment' withCRs. ^#()]. 	array _ Array with: array allButLast with: array last. "#( (data1 data2) result )" 	result _ MethodFinder new load: array; findMessage. 	resultArray _ self listFromResult: result. 	resultArray isEmpty ifTrue: [self inform: result].	dataStrings size = (array first size + 1) ifTrue:		[resultArray _ resultArray collect: [:expression |		newExp _ expression.		array first withIndexDo: [:lit :i |			newExp _ newExp copyReplaceAll: 'data', i printString							with: (dataStrings at: i)].		newExp, ' --> ', dataStrings last]]. 	^ resultArray! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'di 11/4/1999 13:12'!selectedMessageName	"Answer the name of the currently selected message."	| example tokens |	selectorIndex = 0 ifTrue: [^nil].	example _ selectorList at: selectorIndex.	tokens _ Scanner new scanTokens: example.	(tokens second includes: $:) ifTrue: [^ example findSelector].	Symbol hasInterned: tokens second ifTrue: [:aSymbol | ^ aSymbol].	^nil! !!SimpleSliderMorph methodsFor: 'accessing' stamp: 'di 11/8/1999 14:45'!sliderColor: sliderColor	slider color: sliderColor! !!SystemWindow methodsFor: 'label' stamp: 'di 11/4/1999 13:24'!relabel	| newLabel |	newLabel _ FillInTheBlank 		request: 'New title for this window'		initialAnswer: labelString.	newLabel isEmpty ifTrue: [^self].	(model windowReqNewLabel: newLabel)		ifTrue: [self setLabel: newLabel]! !!TextMorph methodsFor: 'private' stamp: 'di 10/30/1999 16:38'!updateFromParagraph	"A change has taken place in my paragraph, as a result of editing and I must be updated.  If a line break causes recomposition of the current paragraph, or it the selection has entered a different paragraph, then the current editor will be release, and must be reinstalled with the resulting new paragraph, while retaining any editor state, such as selection, undo state, and current typing emphasis."	| newStyle sel oldLast oldEditor |	paragraph ifNil: [^ self].	wrapFlag ifNil: [wrapFlag _ true].	editor ifNotNil: [oldEditor _ editor.					sel _ editor selectionInterval.					editor storeSelectionInParagraph].	paragraph textStyle = textStyle		ifTrue: [self fit]		ifFalse: ["Broadcast style changes to all morphs"				newStyle _ paragraph textStyle.				(self firstInChain text: text textStyle: newStyle) recomposeChain.				editor ifNotNil: [self installEditorToReplace: editor]].	super layoutChanged.	sel ifNil: [^ self].	"If selection is in top line, then recompose predecessor for possible ripple-back"	predecessor ifNotNil:		[sel first <= (self paragraph lines first last+1) ifTrue:			[oldLast _ predecessor lastCharacterIndex.			predecessor paragraph recomposeFrom: oldLast to: text size delta: 0.			oldLast = predecessor lastCharacterIndex				ifFalse: [predecessor changed. "really only last line"						self predecessorChanged]]].	((predecessor~~nil and: [sel first <= self paragraph firstCharacterIndex])		or: [successor~~nil and: [sel first > (self paragraph lastCharacterIndex+1)]])		ifTrue:		["The selection is no longer inside this paragraph.		Pass focus to the paragraph that should be in control."		self firstInChain withSuccessorsDo:			[:m |  (sel first between: m firstCharacterIndex								and: m lastCharacterIndex+1)					ifTrue: [m installEditorToReplace: editor.							^ self passKeyboardFocusTo: m]].		self error: 'Inconsistency in text editor' "Must be somewhere in the successor chain"].	editor ifNil:		["Reinstate selection after, eg, style change"		self installEditorToReplace: oldEditor]! !