'From Squeak3.1alpha of 5 February 2001 [latest update: #3972] on 4 May 2001 at 12:29:34 pm'!"Change Set:		BetterUpDownCtlsDate:			4 May 2001Author:			Dan IngallsSmooths out the timing of up-down controls on numeric literals in new tile scripts.Also only logs the last change to the sources file to avoid wasted time and space."!!ClassDescription methodsFor: 'compiling' stamp: 'di 5/4/2001 11:34'!compile: text classified: category withStamp: changeStamp notifying: requestor logSource: logSource	| selector priorMethod method methodNode newText |	method _ self		compile: text asString		notifying: requestor		trailer: #(0 0 0 0)		ifFail: [^nil]		elseSetSelectorAndNode: 			[:sel :node | selector _ sel.			priorMethod _ self methodDict at: selector ifAbsent: [nil].			methodNode _ node].	logSource ifTrue:		[newText _ ((requestor == nil or: [requestor isKindOf: SyntaxError]) not						and: [Preferences confirmFirstUseOfStyle])			ifTrue: [text askIfAddStyle: priorMethod req: requestor]			ifFalse: [text].		 method putSource: newText				fromParseNode: methodNode				class: self category: category withStamp: changeStamp 				inFile: 2 priorMethod: priorMethod].	self organization classify: selector under: category.	^selector! !!ClassDescription methodsFor: 'compiling' stamp: 'di 5/4/2001 11:35'!compile: text classified: category withStamp: changeStamp notifying: requestor	^ self compile: text classified: category withStamp: changeStamp notifying: requestor logSource: self acceptsLoggingOfCompilation! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/4/2001 10:52'!offerPopUp	"Put up a halo to allow user to change		Literals (Integer, true),		Selector (beep: sound, +,-,*,//,\\, r:g:b:, setX: incX: decX: for any X,),		Variable (Color),		not AssignmentNode (_ inc dec),	Extend arrows on each literal, variable, and message, (block that is by itself).	Retract arrows on each literal or variable, or message or block that is an argument.	Any literal can be changed by Shift-clicking and typing."	| panel any upDown retract extend colorPatch edge dismiss rr |	(self hasProperty: #myPopup) ifTrue: [^ self].  "already has one"	any _ false.	(upDown _ self upDownArrows) ifNotNil: [any _ true].	(retract _ self retractArrow) ifNotNil: [any _ true].	(extend _ self extendArrow) ifNotNil: [any _ true].	(dismiss _ self dismisser) ifNotNil: [any _ true].	submorphs last class == ColorTileMorph ifFalse: [		(colorPatch _ self colorPatch) ifNotNil: [any _ true]].	any ifFalse: [^ self].	"Transcript cr; print: parseNode class; space; 		print: (self hasProperty: #myPopup); endEntry."	panel _ RectangleMorph new color: Color transparent; borderWidth: 0.	upDown ifNotNil: [		panel addMorphBack: upDown first.		upDown first align: upDown first topLeft with: panel topLeft + (0@2).		panel addMorphBack: upDown second.		upDown second align: upDown second topLeft with: upDown first bottomLeft + (0@1)].	rr _ self right.	colorPatch ifNotNil: [		rr _ rr + colorPatch submorphs first width + 1.		self addMorphBack: colorPatch.	"always in tile"		"colorPatch align: colorPatch topLeft 					with: panel topLeft + (1@1)"].	retract ifNotNil: [		edge _ panel submorphs size = 0 			ifTrue: [panel left] 			ifFalse: [panel submorphs last right].		panel addMorphBack: retract.		retract align: retract topLeft with: (edge+2) @ (panel top + 3)].	extend ifNotNil: [		edge _ panel submorphs size = 0 			ifTrue: [panel left] 			ifFalse: [panel submorphs last right].		panel addMorphBack: extend.		extend align: extend topLeft with: (edge+2) @ (panel top + 5)].	dismiss ifNotNil: [		edge _ panel submorphs size = 0 			ifTrue: [panel left] 			ifFalse: [panel submorphs last right].		panel addMorphBack: dismiss.		dismiss align: dismiss topLeft with: (edge+2) @ (panel top + 1)].	panel align: panel topLeft with: rr @ self top.	panel extent: panel submorphs last bottomRight - panel topLeft.	self setProperty: #myPopup toValue: panel.	(owner listDirection = #topToBottom and: [self listDirection = #leftToRight])		ifTrue: [self addMorphBack: panel]		ifFalse: [owner addMorph: panel after: self]! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/4/2001 11:37'!upDown: delta event: evt arrow: arrowMorph	| st aList index now want instVar |	st _ submorphs detect: [:mm | mm isKindOf: StringMorph] ifNone: [^ self].	(self nodeClassIs: LiteralNode) ifTrue:		[ "+/- 1"		st contents: (self decompile asNumber + delta) printString.		^ self acceptUnlogged].	(self nodeClassIs: VariableNode) ifTrue:		[ "true/false"		st contents: (self decompile asString = 'true') not printString.		^ self acceptSilently.	"maybe set parseNode's key"].	(self nodeClassIs: SelectorNode) ifTrue:		[aList _ #(+ - * / // \\ min: max:).		(index _ aList indexOf: self decompile asString) > 0 ifTrue:			[^ self setSelector: (aList atWrap: index + delta) in: st].		aList _ #(= ~= > >= isDivisibleBy: < <=).		(index _ aList indexOf: self decompile asString) > 0 ifTrue:			[^ self setSelector: (aList atWrap: index + delta) in: st].		aList _ #(== ~~).		(index _ aList indexOf: self decompile asString) > 0 ifTrue:			[^ self setSelector: (aList atWrap: index + delta) in: st].		'beep:' = self decompile asString ifTrue:			["replace sound arg"			self changeSound: delta.			^ self acceptSilently].		].	(self nodeClassIs: SelectorNode) ifTrue:		["kinds of assignment"		((now _ self decompile asString) beginsWith: 'set') ifTrue:			["a setX: 3"			want _ 1+delta.  instVar _ (now allButFirst: 3) allButLast].		(now endsWith: 'IncreaseBy:') ifTrue:			["a xIncreaseBy: 3 a setX: (a getX +3)."			want _ 2+delta.  instVar _ now allButLast: 11].		(now endsWith: 'DecreaseBy:') ifTrue:			["a xDecreaseBy: 3 a setX: (a getX -3)."			want _ 3+delta.  instVar _ now allButLast: 11].		(now endsWith: 'MultiplyBy:') ifTrue:			["a xMultiplyBy: 3 a setX: (a getX *3)."			want _ 4+delta.  instVar _ now allButLast: 11].		want ifNil: [^ self].		instVar _ instVar asLowercase.		want _ #(1 2 3 4) atWrap: want.		want = 1 ifTrue:			["setter method is present"			^ self setSelector: ('set', instVar capitalized, ':') in: st].		want = 2 ifTrue:			["notUnderstood will create the method if needed"			^ self setSelector: instVar, 'IncreaseBy:' in: st].		want = 3 ifTrue:			["notUnderstood will create the method if needed"			^ self setSelector: instVar, 'DecreaseBy:' in: st].		want = 4 ifTrue:			["notUnderstood will create the method if needed"			^ self setSelector: instVar, 'MultiplyBy:' in: st].		].! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/4/2001 11:49'!upDownDone	(self nodeClassIs: LiteralNode) ifTrue:		[self acceptSilently.  "Final compilation logs source"		self removeProperty: #timeOfLastTick;			removeProperty: #currentDelay].! !!SyntaxMorph methodsFor: 'pop ups' stamp: 'di 5/4/2001 12:26'!upDownMore: delta event: evt arrow: arrowMorph	| st delay1 delay2 now timeOfLastTick currentDelay |	(self nodeClassIs: LiteralNode) ifFalse: [^ self].	st _ submorphs detect: [:mm | mm isKindOf: StringMorph] ifNone: [^ self].	delay1 _ 300.  "ms"	delay2 _ 50.  "ms"	now _ Time millisecondClockValue.	timeOfLastTick _ (self valueOfProperty: #timeOfLastTick) ifNil: [now - delay1].	currentDelay _ (self valueOfProperty: #currentDelay) ifNil: [delay1].	now >= (timeOfLastTick + currentDelay) ifTrue:		[self setProperty: #timeOfLastTick toValue: now.		"decrease the delay"		self setProperty: #currentDelay toValue: (currentDelay*8//10 max: delay2).		st contents: (self decompile asNumber + delta) printString.		^ self acceptUnlogged].! !!SyntaxMorph methodsFor: 'menus' stamp: 'di 5/4/2001 12:13'!acceptSilently	"Turn my current state into the text of a method.	Compile it in my class.  Don't rebuild the tiles."	| cls |	self isMethodNode ifFalse: [		self rootTile == self ifTrue: [^ self].  "not in a script"		^ self rootTile acceptSilently  "always accept at the root"].	(self ownerThatIsA: ScriptEditorMorph) ifNil: [^ self].	(cls _ self parsedInClass) ifNil: [^ self].	cls compile: self decompile notifying: nil.! !!SyntaxMorph methodsFor: 'menus' stamp: 'di 5/4/2001 12:14'!acceptUnlogged	"This is an exact copy of acceptSilently, except it does not log to the source file.	Used for all but the last of scrolling number changes."	| cls |	self isMethodNode ifFalse:		[self rootTile == self ifTrue: [^ self].  "not in a script"		^ self rootTile acceptUnlogged  "always accept at the root"].	(self ownerThatIsA: ScriptEditorMorph) ifNil: [^ self].	(cls _ self parsedInClass) ifNil: [^ self].	cls compile: self decompile		classified: ClassOrganizer default		withStamp: nil		notifying: nil		logSource: false.! !