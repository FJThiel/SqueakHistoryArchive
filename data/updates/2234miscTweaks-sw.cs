'From Squeak2.8alpha of 13 January 2000 [latest update: #2220] on 29 May 2000 at 12:42:02 am'!"Change Set:		miscTweaks-swDate:			29 May 2000Author:			Scott WallaceVarious small fixes and improvements...*  When logging the startup, print the full pathname of the image that was started up.*  Make the diff button be vertically centred in the annotation pane of morphic browsers, as it is in message-list browsers.*  Fixes a bug wherein a pasteup morph would generate an error if sent #modelWakeUp when it was not in a window.*  Fixed bug in Utilities.inherentSelectorForGetter:*  Bullet-proof ClassDescription method #renameSilentlyInstVar:to: against being provided with Symbol arguments.*  Provide an expression, 'ParagraphEditor abandonChangeText', that can be quickly evaluated to get out of annoying and intractable find-and-replace mode.*  Add a call to the above to the default common-request-string list.*  Make the default settings of the four standard flaps all call for non pop-out-on-mouseover.*  An improvement to the default label for an inspector on a morph."!!Browser methodsFor: 'initialize-release' stamp: 'sw 5/26/2000 23:57'!optionalButtonRow	| aRow aButton |	aRow _ AlignmentMorph newRow.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow centering: #center.	aRow setProperty: #clipToOwnerWidth toValue: true.	aRow addTransparentSpacerOfSize: (5@0).	self optionalButtonPairs  do:			[:pair |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: pair second.				aButton useRoundedCorners;					label: pair first asString;					onColor: Color transparent offColor: Color transparent.				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	aRow addMorphBack: self diffButton.	^ aRow! !!ClassDescription methodsFor: 'instance variables' stamp: 'sw 5/19/2000 16:39'!renameSilentlyInstVar: old  to: new	| i oldCode newCode parser header body sels oldName newName |	oldName _ old asString.	newName _ new asString.	(i _ instanceVariables indexOf: oldName) = 0 ifTrue:		[self error: oldName , ' is not defined in ', self name].	self allSuperclasses , self withAllSubclasses asOrderedCollection do:		[:cls | (cls instVarNames includes: newName) ifTrue:			[self error: newName , ' is already used in ', cls name]].	instanceVariables replaceFrom: i to: i with: (Array with: newName).	self withAllSubclasses do:		[:cls | sels _ cls selectors.		sels removeAllFoundIn: #(DoIt DoItIn:).		sels do:			[:sel |			oldCode _ cls sourceCodeAt: sel.			"Don't make changes in the method header"			(parser _ cls parserClass new) parseSelector: oldCode.			header _ oldCode copyFrom: 1 to: (parser endOfLastToken min: oldCode size).			body _ header size > oldCode size					ifTrue: ['']					ifFalse: [oldCode copyFrom: header size+1 to: oldCode size].			newCode _ header , (body copyReplaceTokens: oldName with: newName).			newCode ~= oldCode ifTrue:				[cls compile: newCode					classified: (cls organization categoryOfElement: sel)					notifying: nil]].			cls isMeta ifFalse:				[oldCode _ cls comment.				newCode _ oldCode copyReplaceTokens: oldName with: newName.				newCode ~= oldCode ifTrue:					[cls comment: newCode]]]! !!Morph methodsFor: 'e-toy support' stamp: 'sw 5/23/2000 03:42'!containingWindow	^ self ownerThatIsA: SystemWindow! !!Morph methodsFor: 'printing' stamp: 'sw 5/29/2000 00:41'!defaultLabelForInspector	"Answer the default label to be used for an Inspector window on the receiver."	^ super printString truncateTo: 40! !!ParagraphEditor class methodsFor: 'class initialization' stamp: 'sw 5/27/2000 00:03'!abandonChangeText	"Call this to get out of the maddening situation in which the system keeps aggressively trying to do a replacement that you no longer wish to make, every time you make choose a new method in a list."	ChangeText _ FindText	"ParagraphEditor abandonChangeText"! !!PasteUpMorph methodsFor: 'project state' stamp: 'sw 5/23/2000 03:46'!modelWakeUp	| aWindow |	"I am the model of a SystemWindow, that has just been activated"	owner == nil ifTrue: [^ self].  "Not in Morphic world"	(owner isKindOf: TransformMorph) ifTrue: [^ self viewBox: self fullBounds].	(aWindow _ self containingWindow) ifNotNil:		[self viewBox = aWindow panelRect ifFalse:			[self viewBox: aWindow panelRect]]! !!Player class methodsFor: 'slots' stamp: 'sw 5/19/2000 16:37'!renameSilentlyInstVar: oldName to: newName	(instanceVariables includes: oldName asString) ifFalse:		[self error: oldName , ' is not defined in ', self name].	self removeAccessorsFor: oldName.	super renameSilentlyInstVar: oldName to: newName.	self compileAccessorsFor: newName.	slotInfo at: newName asSymbol put: (slotInfo at: oldName).	slotInfo removeKey: oldName! !!Player class methodsFor: 'housekeeping' stamp: 'sw 5/19/2000 16:26'!cleanseSlotInfo	| newInfo |	slotInfo ifNotNil:		[newInfo _ IdentityDictionary new.		slotInfo associationsDo:			[:assoc | newInfo at: assoc key asSymbol put: assoc value].		slotInfo _ newInfo]! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sw 5/23/2000 00:05'!readDocumentFile	"Process system updates. Read a document file, if one was provided. Start application."	| fileName object |	StartupStamp _ '----STARTUP----', Time dateAndTimeNow printString, ' as ', Smalltalk imageName.	self processUpdates.	fileName _ Smalltalk getSystemAttribute: 2.	((fileName ~~ nil) and: [fileName size > 0])		ifTrue: [			(fileName asLowercase beginsWith: 'http://')				ifTrue: [					"fetch remote file"					HTTPSocket httpFileIn: fileName]				ifFalse: [					"read local file"					object _ (FileStream oldFileNamed: fileName) fileInObjectAndCode.					"if launching a .sqo document, send open to the final object"					(fileName endsWith: '.sqo') ifTrue: [object open]]]		ifFalse: [			(Preferences valueOfFlag: #startImagineeringStudio)				ifTrue: [ScriptingSystem openImagineeringStudio]].! !!Utilities class methodsFor: 'miscellaneous' stamp: 'sw 5/19/2000 16:04'!inherentSelectorForGetter: aGetterSelector	"Given a selector of the form #getAbc, return the inherent slotname selector that corresponds, which is to say, getterSelector with the leading 'get' removed and with the next character forced to lower case; this is the inverse of #getterSelectorFor:"	"Utilities inherentSelectorForGetter: #getWidth"	((aGetterSelector size < 4) or: [(aGetterSelector beginsWith: 'get') not])			ifTrue: [ ^ aGetterSelector].	^ ((aGetterSelector at: 4) asLowercase asString, (aGetterSelector copyFrom: 5 to: aGetterSelector size)) asSymbol! !!Utilities class methodsFor: 'common requests' stamp: 'sw 5/26/2000 16:26'!initializeCommonRequestStrings	"Initialize an array of common request strings.  2/1/96 sw"	CommonRequestStrings _ StringHolder new contents: 'Utilities emergencyCollapseUtilities closeAllDebuggersSensor keyboardCursor normal showParagraphEditor abandonChangeText----------------------------------Preferences enable: #cmdDotEnabledForm fromUser bitEditDisplay border: (0@0 extent: 640@480) width: 2----------------------------------Undeclared inspectUndeclared removeUnreferencedKeys; inspectTranscript clearChangeSorter removeEmptyUnnamedChangeSetsUtilities reconstructTextWindowsFromFileNamed: ''TextWindows''.Utilities storeTextWindowContentsToFileNamed: ''TextWindows''.self currentHand attachMorph: (FrameRateMorph new contents: ''FrameRate'').----------------------------------ChangeSorter removeEmptyUnnamedChangeSetsChangeSorter reorderChangeSets.Utilities grabScreenAndSaveOnDisk'"Utilities initializeCommonRequestStrings"! !!Utilities class methodsFor: 'flaps' stamp: 'sw 5/20/2000 00:51'!initializeStandardFlaps	"Utilities initializeStandardFlaps"	FlapTabs _ OrderedCollection new.	FlapTabs add: (self standardLeftFlap setToPopOutOnDragOver: false).	FlapTabs add: self standardBottomFlap.	FlapTabs add: self standardRightFlap.	FlapTabs add: (self menuFlap setToPopOutOnDragOver: false).	FlapTabs do:		[:aFlapTab | 			aFlapTab setToPopOutOnMouseOver: false].	^ FlapTabs! !MessageSet removeSelector: #optionalButtonRow!"Postscript:"Utilities appendToCommonRequests: 'ParagraphEditor abandonChangeText'.!