'From Squeak3.1alpha of 5 February 2001 [latest update: #3769] on 3 March 2001 at 8:37:05 pm'!"Change Set:		nebraskaShadowDate:			3 March 2001Author:			Bob Arningsome of the fixes for text color shadow colors.more to come on translucent shadow colors"!Canvas subclass: #RemoteCanvas	instanceVariableNames: 'innerClipRect outerClipRect transform connection shadowColor '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Remote'!!CanvasCharacterScanner methodsFor: 'private' stamp: 'RAA 3/3/2001 19:42'!setFont	foregroundColor ifNil: [foregroundColor _ Color black].	super setFont.	destY _ lineY + line baseline - font ascent! !!CanvasDecoder methodsFor: 'decoding' stamp: 'RAA 3/3/2001 18:27'!processCommand: command  onForceDo: forceBlock	| verb verbCode |	command isEmpty ifTrue: [ ^self ].	verb _ command first.	verbCode := verb at: 1.	verbCode = CanvasEncoder codeClip ifTrue: [ ^self setClip: command ].	verbCode = CanvasEncoder codeTransform ifTrue: [ ^self setTransform: command ].	verbCode = CanvasEncoder codeText ifTrue: [ ^self drawText: command ].	verbCode = CanvasEncoder codeLine ifTrue: [ ^self drawLine: command ].	verbCode = CanvasEncoder codeRect ifTrue: [ ^self drawRect: command ].	verbCode = CanvasEncoder codeBalloonRect ifTrue: [ ^self drawBalloonRect: command ].	verbCode = CanvasEncoder codeBalloonOval ifTrue: [ ^self drawBalloonOval: command ].	verbCode = CanvasEncoder codeInfiniteFill ifTrue: [ ^self drawInfiniteFill: command ].	verbCode = CanvasEncoder codeOval ifTrue: [ ^self drawOval: command ].	verbCode = CanvasEncoder codeImage ifTrue: [ ^self drawImage: command ].	verbCode = CanvasEncoder codeReleaseCache ifTrue: [ ^self releaseImage: command ].	verbCode = CanvasEncoder codePoly ifTrue: [ ^self drawPoly: command ].	verbCode = CanvasEncoder codeStencil ifTrue: [ ^self drawStencil: command ].	verbCode = CanvasEncoder codeForce ifTrue: [ ^self forceToScreen: command withBlock: forceBlock ].	verbCode = CanvasEncoder codeFont ifTrue: [ ^self addFontToCache: command ].	verbCode = CanvasEncoder codeExtentDepth ifTrue: [ ^self extentDepth: command ].	verbCode = CanvasEncoder codeShadowColor ifTrue: [ ^self shadowColor: command ].self error: 'unknown command: ', command first.! !!CanvasDecoder methodsFor: 'decoding' stamp: 'RAA 3/3/2001 18:29'!shadowColor: command	drawingCanvas shadowColor: (		command second = '0' ifTrue: [nil] ifFalse: [self class decodeColor: command second]	)! !!CanvasEncoder methodsFor: 'drawing' stamp: 'RAA 3/3/2001 18:26'!shadowColor: aFillStyle	self sendCommand: {		String with: CanvasEncoder codeShadowColor.		aFillStyle ifNil: ['0'] ifNotNil: [aFillStyle encodeForRemoteCanvas].	}! !!CanvasEncoder class methodsFor: 'codes' stamp: 'RAA 3/3/2001 18:24'!codeShadowColor	^$s! !!CanvasEncoder class methodsFor: 'as yet unclassified' stamp: 'RAA 3/3/2001 18:25'!nameForCode: aStringOrChar	| ch |	ch _ (aStringOrChar isKindOf: String) ifTrue: [aStringOrChar first] ifFalse: [aStringOrChar].	ch == self codeBalloonOval ifTrue: [^'balloon oval'].	ch == self codeBalloonRect ifTrue: [^'balloon rectangle'].	ch == self codeClip ifTrue: [^'clip'].	ch == self codeExtentDepth ifTrue: [^'codeExtentDepth'].	ch == self codeFont ifTrue: [^'codeFont'].	ch == self codeForce ifTrue: [^'codeForce'].	ch == self codeImage ifTrue: [^'codeImage'].	ch == self codeLine ifTrue: [^'codeLine'].	ch == self codeOval ifTrue: [^'codeOval'].	ch == self codePoly ifTrue: [^'codePoly'].	ch == self codeRect ifTrue: [^'codeRect'].	ch == self codeReleaseCache ifTrue: [^'codeReleaseCache'].	ch == self codeStencil ifTrue: [^'codeStencil'].	ch == self codeText ifTrue: [^'codeText'].	ch == self codeTransform ifTrue: [^'codeTransform'].	ch == self codeInfiniteFill ifTrue: [^'codeInfiniteFill'].	ch == self codeShadowColor ifTrue: [^'shadowColor'].	^'????'! !!RemoteCanvas methodsFor: 'drawing-support' stamp: 'RAA 3/3/2001 19:05'!clipBy: aRectangle during: aBlock	| newCanvas newR |	"Set a clipping rectangle active only during the execution of aBlock."	newR _ transform localBoundsToGlobal: aRectangle.	newCanvas _ RemoteCanvas 		connection: connection 		clipRect: (outerClipRect intersect: newR) 		transform: transform.	newCanvas privateShadowColor: shadowColor.	aBlock value: newCanvas.	connection shadowColor: shadowColor.! !!RemoteCanvas methodsFor: 'drawing-support' stamp: 'RAA 3/3/2001 18:43'!privateShadowColor: x	shadowColor _ x.! !!RemoteCanvas methodsFor: 'drawing-support' stamp: 'RAA 3/3/2001 18:42'!shadowColor: x	connection shadowColor: (shadowColor _ x).! !!RemoteCanvas methodsFor: 'drawing-support' stamp: 'RAA 3/3/2001 18:43'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock smoothing: cellSize	| newCanvas |	self flag: #bob.		"do tranform and clip work together properly?"	newCanvas := RemoteCanvas 		connection: connection 		clipRect: (aClipRect intersect: outerClipRect)		transform: (transform composedWith: aDisplayTransform).	newCanvas privateShadowColor: shadowColor.	aBlock value: newCanvas.	connection shadowColor: shadowColor.! !