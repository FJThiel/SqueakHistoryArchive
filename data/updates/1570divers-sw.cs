'From Squeak2.6 of 11 October 1999 [latest update: #1567] on 23 October 1999 at 11:55:16 pm'!"Change Set:		divers-swDate:			23 October 1999Author:			Scott Wallace(1) Adds a new annotation option for annotation panes: the time stamp of the prior version of the method.(2) If the #optionalMorphicButtons preference is true, places the control buttons for a morphic pre-debug window into the interior of the window, making the title-bar able to accommodate the error message more fully, and presenting the three practical alternatives in a uniform fashion.(3)  Adds a 'full screen' command to the morphic window menu.(4)  Fixes the bugs that made the screen-menu commands to resume drawing and resume ticking be sent to the wrong object, and hence not succeed in affecting the world as intended.(5)  Clears up a glitch relating to  purging the Trash when it is in a closed flap."!!CodeHolder methodsFor: 'as yet unclassified' stamp: 'sw 10/19/1999 22:49'!annotation	"Provide a line of annotation material for a middle pane."	| stamp aMessage sendersCount implementorsCount toShow aCategory separator aString aList versionsCount |	(aMessage _ self selectedMessageName)		ifNil: [^ '------'].	toShow _ ReadWriteStream on: ''.	separator _ ' ¥ '.	self annotationRequests do:		[:aRequest |		(aRequest == #timeStamp) ifTrue:			[stamp _ self timeStamp.			toShow nextPutAll: (stamp size > 0				ifTrue: [stamp, separator]				ifFalse: ['no timeStamp', separator])].		(aRequest == #messageCategory) ifTrue:			[aCategory _ self selectedClassOrMetaClass organization categoryOfElement: self selectedMessageName.			aCategory ifNotNil: "woud be nil for a method no longer present, e.g. in a recent-submissions browser"				[toShow nextPutAll: aCategory, separator]].		(aRequest == #sendersCount) ifTrue:			[sendersCount _ (Smalltalk allCallsOn: aMessage) size.			sendersCount _ sendersCount == 1				ifTrue:					['1 sender']				ifFalse:					[sendersCount printString, ' senders'].			toShow nextPutAll: sendersCount, separator].		(aRequest == #implementorsCount) ifTrue:			[implementorsCount _ (Smalltalk allImplementorsOf: aMessage) size.			implementorsCount _ implementorsCount == 1				ifTrue:					['1 implementor']				ifFalse:					[implementorsCount printString, ' implementors'].			toShow nextPutAll: implementorsCount,  separator].		(aRequest == #priorVersionsCount) ifTrue:			[versionsCount _ VersionsBrowser versionCountForSelector: self selectedMessageName class: self selectedClassOrMetaClass.			toShow nextPutAll: 				((versionsCount > 1					ifTrue:						[versionsCount == 2 ifTrue:							['1 prior version']							ifFalse:								[versionsCount printString, ' prior versions']]					ifFalse:						['no prior versions']), separator)].		(aRequest == #priorTimeStamp) ifTrue:			[stamp _ VersionsBrowser timeStampFor: self selectedMessageName class: self selectedClassOrMetaClass reverseOrdinal: 2.			stamp ifNotNil: [toShow nextPutAll: 'prior time stamp: ', stamp, separator]].		(aRequest == #recentChangeSet) ifTrue:			[aString _ ChangeSorter mostRecentChangeSetWithChangeForClass: self selectedClassOrMetaClass selector: self selectedMessageName.			aString size > 0 ifTrue: [toShow nextPutAll: aString, separator]].		(aRequest == #allChangeSets) ifTrue:			[aList _ ChangeSorter allChangeSetsWithClass: self selectedClassOrMetaClass selector: self selectedMessageName.			aList size > 0				ifTrue:					[aList size = 1						ifTrue:							[toShow nextPutAll: 'only in change set ']						ifFalse:							[toShow nextPutAll: 'in change sets: '].					aList do:						[:aChangeSet | toShow nextPutAll: aChangeSet name, ' ']]				ifFalse:					[toShow nextPutAll: 'in no change set'].			toShow nextPutAll: separator]].			^ toShow contents! !!Debugger methodsFor: 'initialize' stamp: 'sw 10/20/1999 09:14'!buildMorphicNotifierLabelled: label message: messageString	| notifyPane window contentTop extentV |	window _ (PreDebugWindow labelled: label) model: self.	Preferences optionalMorphicButtons		ifTrue:			[contentTop _ 0.2.			window addMorph: (self buttonRowForPreDebugWindow: window)				frame: (0@0 corner: 1 @ contentTop).			extentV _ 156]		ifFalse:			[extentV _ 116.			contentTop _ 0].	notifyPane _ PluggableTextMorph on: self text: nil accept: nil		readSelection: nil menu: #debugProceedMenu:.	notifyPane editString: messageString; askBeforeDiscardingEdits: false.	window addMorph: notifyPane frame: (0@contentTop corner: 1@1).	^ window openInWorldExtent: 350 @ extentV! !!Debugger methodsFor: 'initialize' stamp: 'sw 10/23/1999 23:49'!buttonRowForPreDebugWindow: aDebugWindow	| aRow aButton |	aRow _ AlignmentMorph newRow hResizing: #spaceFill.	aRow beSticky.	aButton _ SimpleButtonMorph new target: aDebugWindow.	aButton color: Color transparent; borderWidth: 1.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	#(('Proceed' proceed blue 'continue execution' )	('Abandon'	abandon black 'close this window')	('Debug'	debug red 'bring up a debugger')) do:			[:quad |				aButton _ aButton fullCopy.				aButton actionSelector: quad second.				aButton label: quad first.				aButton submorphs first color: (Color colorFrom: quad third).				aButton setBalloonText: quad fourth.				aRow addMorphBack: aButton.				aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer].	^ aRow! !!HandMorph methodsFor: 'world menu' stamp: 'sw 10/21/1999 17:33'!debugMenu	"Build the scripting menu for the world."	| menu |	menu _ (MenuMorph entitled: 'debug...') defaultTarget: self.	menu addStayUpItem.	menu add: 'inspect world' target: owner action: #inspect.	menu add: 'explore world' target: owner action: #explore.	menu add: 'inspect model' action: #inspectWorldModel.	"menu add: 'talk to world...' action: #typeInMessageToWorld."	menu add: 'start MessageTally' action: #startMessageTally.	menu addLine.	"(self hasProperty: #errorOnDraw) ifTrue:  Later make this come up only when needed."		menu add: 'start drawing again' target: owner action: #resumeAfterDrawError.		menu add: 'start stepping again' target: owner action: #resumeAfterStepError.	menu addLine.	menu add: 'call #tempCommand' action: #callTempCommand.	menu add: 'define #tempCommand' action: #defineTempCommand.	^ menu! !!Preferences class methodsFor: 'parameters' stamp: 'sw 10/19/1999 22:39'!annotationInfo 	^ #(		(timeStamp			'The time stamp of the last submission of the method.')		(messageCategory	'Which method category the method lies in')		(sendersCount		'A report of how many senders there of the message.')		(implementorsCount	'A report of how many implementors there are of the message.')		(recentChangeSet	'The most recent change set bearing the method.')		(allChangeSets		'A list of all change sets bearing the method.')		(priorVersionsCount	'A report of how many previous versions there are of the method' )		(priorTimeStamp		'The time stamp of the penultimate submission of the method, if any'))! !!SystemWindow methodsFor: 'menu' stamp: 'sw 10/8/1999 22:23'!fullScreen	| possibleBounds |	possibleBounds _ self world bounds.	(Preferences useGlobalFlaps and: [Project current flapsSuppressed not]) ifTrue:		[possibleBounds _ possibleBounds insetBy: 22].	self bounds: possibleBounds! !!SystemWindow methodsFor: 'menu' stamp: 'sw 10/8/1999 22:18'!offerWindowMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu add: 'change title...' action: #relabel.	aMenu addLine.	aMenu add: 'send to back' action: #sendToBack.	aMenu add: 'make next-to-topmost' action: #makeSecondTopmost.	aMenu addLine.	self mustNotClose		ifFalse:			[aMenu add: 'make unclosable' action: #makeUnclosable]		ifTrue:			[aMenu add: 'make closable' action: #makeClosable].	aMenu add: 'full screen' action: #fullScreen.	model ifNotNil:		[model addModelItemsToWindowMenu: aMenu].	aMenu popUpAt: self cursorPoint event: self currentEvent! !!PreDebugWindow methodsFor: 'as yet unclassified' stamp: 'sw 10/19/1999 23:37'!initialize	| aFont proceedLabel debugLabel aWidth |	super initialize.	Preferences optionalMorphicButtons ifFalse:		[(aWidth _ self widthOfFullLabelText) > 280 ifTrue: [^ self].   "No proceed/debug buttons if title too long"		aWidth > 210			ifTrue: "Abbreviated buttons if title pretty long"				[proceedLabel _ 'p'.				debugLabel _ 'd']			ifFalse: "Full buttons if title short enough"				[proceedLabel _ 'proceed'.				debugLabel _ 'debug'].		aFont _ Preferences fontForScriptorButtons.		self addMorph: (proceedButton _ SimpleButtonMorph new borderWidth: 0;				label: proceedLabel font: aFont; color: Color transparent;				actionSelector: #proceed; target: self).		proceedButton setBalloonText: 'continue execution'.		self addMorph: (debugButton _ SimpleButtonMorph new borderWidth: 0;				label: debugLabel font: aFont; color: Color transparent;				actionSelector: #debug; target: self).		debugButton setBalloonText: 'bring up a debugger'.		proceedButton submorphs first color: Color blue.		debugButton submorphs first color: Color red].	self adjustBookControls! !!PreDebugWindow methodsFor: 'as yet unclassified' stamp: 'sw 10/20/1999 09:19'!setLabelWidgetAllowance	^ labelWidgetAllowance _ Preferences optionalMorphicButtons		ifTrue:			[super setLabelWidgetAllowance]		ifFalse:			[180]! !!Utilities class methodsFor: 'scraps' stamp: 'sw 10/21/1999 17:42'!emptyScrapsBook	"Utilities emptyScrapsBook"	| oldScraps |	oldScraps _ ScrapsBook.	ScrapsBook _ nil.	self scrapsBook.  "Creates it afresh"	(oldScraps notNil and: [oldScraps owner notNil])		ifTrue:			[ScrapsBook position: oldScraps position.			oldScraps owner replaceSubmorph: oldScraps by: ScrapsBook.			ScrapsBook changed; layoutChanged]! !!VersionsBrowser class methodsFor: 'as yet unclassified' stamp: 'sw 10/21/1999 17:21'!timeStampFor: aSelector class: aClass reverseOrdinal: anInteger	"Answer the time stamp corresponding to some version of the given method, nil if none.  The reverseOrdinal parameter is interpreted as:  1 = current version; 2 = last-but-one version, etc."		| method aChangeList |	method _ aClass compiledMethodAt: aSelector ifAbsent: [^ nil].	aChangeList _ self new			scanVersionsOf: method class: aClass meta: aClass isMeta			category: nil selector: aSelector.	^ aChangeList ifNil: [nil] ifNotNil:		[aChangeList list size >= anInteger			ifTrue:				[(aChangeList changeList at: anInteger) stamp]			ifFalse:				[nil]]! !