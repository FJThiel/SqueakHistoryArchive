'From Squeak3.1alpha of 28 February 2001 [latest update: #4244] on 12 August 2001 at 6:10:50 pm'!"Change Set:		objectsTool-swDate:			12 August 2001Author:			Scott WallaceIntroduces an 'Objects' tool that provides a graphical alternative to the 'new morph' menu.You can bring up an Objects tool from the World menu, and there is a desktop-keyboard shortcut, cmd-o.If you define a Morph subclass and you want it to appear in Objects,, you must implement (a) and may optionally also implement (b) and/or (c)(a)  Implement #descriptionForPartsBin on the class side.  Look at implementors of #descriptionForPartsBin to find out the pattern.  The description provides a name, category-list, and balloon help for use in the Objects tool.(b)  Optionally reimplement #initializeToStandAlone on the instance side.  If a straight call to #initialize will give the result you want, you need not do this.  Consult implementors of #initializeToStandAlone.(c)  If you wish this class to contribute more things to Objects than just its own 'stand-alone instance', reimplement #supplementaryPartsDescriptions; again, browse implementors of that to see the pattern.Traditionalists who like to use the historic 'new morph' menu can restore it to its classic form by setting the preference 'classicNewMorphMenu' to true" !Object subclass: #DescriptionForPartsBin	instanceVariableNames: 'formalName categoryList documentation globalReceiverSymbol nativitySelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-PartsBin'!!DescriptionForPartsBin commentStamp: 'sw 8/11/2001 23:22' prior: 0!An object description, for use with the ObjectsTool and other parts-bin-like repositories.formalName				The name with which this part categoryList				A list of category symbolsdocumentation			For use in balloon help, etc.globalReceiverSymbol	A symbol representing the global to whom to send the nativitySelector 		The selector to send to the global receiver to obtain a new instance!!PartsWindow commentStamp: 'sw 8/12/2001 01:47' prior: 0!Disused.  Instances may persist in users' images, so this obsolete code is kept around for the time being.  Supplanted by the ObjectsTool.!AlignmentMorph subclass: #ObjectsTool	instanceVariableNames: 'searchString modeSymbol '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-PartsBin'!!Object methodsFor: 'parts bin' stamp: 'sw 8/12/2001 02:31'!descriptionForPartsBin	"If the receiver is a member of a class that would like to be represented in a parts bin, answer the name by which it should be known, and a documentation string to be provided, for example, as balloon help.  When the 'nativitySelector' is sent to the 'globalReceiver', it is expected that some kind of Morph will result.  The parameters used in the implementation below are for documentation purposes only!!"	^ DescriptionForPartsBin		formalName: 'PutFormalNameHere'		categoryList: #(PutACategoryHere MaybePutAnotherCategorHere)		documentation: 'Put the balloon help here'		globalReceiverSymbol: #PutAGlobalHere		nativitySelector: #PutASelectorHere! !!CurrentProjectRefactoring class methodsFor: 'flaps' stamp: 'sw 8/11/2001 23:13'!suppressFlapsString	"Answer a string characterizing whether flaps are suppressed at the moment or not"	^ self currentFlapsSuppressed		ifFalse: ['<yes>show shared tabs (F)']		ifTrue: ['<no>show shared tabs (F)']! !!DescriptionForPartsBin methodsFor: 'initialization' stamp: 'sw 8/2/2001 01:04'!formalName: aName categoryList: aList documentation: aDoc globalReceiverSymbol: aSym nativitySelector: aSel	"Set all of the receiver's instance variables from the parameters provided"	formalName _ aName.	categoryList _ aList.	documentation _ aDoc.	globalReceiverSymbol _ aSym.	nativitySelector  _ aSel! !!DescriptionForPartsBin methodsFor: 'access' stamp: 'sw 8/10/2001 14:38'!categories	"Answer the categoryList of the receiver"	^ categoryList! !!DescriptionForPartsBin methodsFor: 'access' stamp: 'sw 8/10/2001 14:38'!documentation	"Answer the documentation of the receiver"	^ documentation! !!DescriptionForPartsBin methodsFor: 'access' stamp: 'sw 8/10/2001 14:38'!formalName	"Answer the formalName of the receiver"	^ formalName! !!DescriptionForPartsBin methodsFor: 'access' stamp: 'sw 8/10/2001 14:38'!globalReceiverSymbol	"Answer the globalReceiverSymbol of the receiver"	^ globalReceiverSymbol! !!DescriptionForPartsBin methodsFor: 'access' stamp: 'sw 8/10/2001 14:38'!nativitySelector	"Answer the nativitySelector of the receiver"	^ nativitySelector! !!DescriptionForPartsBin methodsFor: 'access' stamp: 'sw 8/10/2001 21:48'!printOn: aStream	aStream nextPutAll: 'a DescriptionForPartsBin, with categoryList=', categoryList asString, ' docmentation=', documentation asString,  ' globalReceiverSymbol=', globalReceiverSymbol asString, ' nativitySelector=', nativitySelector asString ! !!DescriptionForPartsBin class methodsFor: 'instance creation' stamp: 'sw 8/10/2001 14:39'!formalName: aName categoryList: aList documentation: aDoc globalReceiverSymbol: aSym nativitySelector: aSel	"Answer a new instance of the receiver with the given traits"	^ self new formalName: aName categoryList: aList documentation: aDoc globalReceiverSymbol: aSym nativitySelector: aSel! !!DescriptionForPartsBin class methodsFor: 'instance creation' stamp: 'sw 8/10/2001 22:33'!fromQuad: aQuad categoryList: aList	"Answer an instance of DescriptionForPartsBin from the part-defining quad provided"	^ self formalName: aQuad third categoryList: aList documentation: aQuad fourth globalReceiverSymbol: aQuad first nativitySelector: aQuad second! !!Flaps class methodsFor: 'flap mechanics' stamp: 'sw 8/12/2001 16:58'!reinstateDefaultFlaps	"Remove all existing 'standard' global flaps clear the global list, and and add fresh ones.  To be called by doits in updates etc.  This is a radical step, but it does *not* clobber non-standard global flaps or local flaps.  To get the effect of the *former* version of this method, call Flaps freshFlapsStart"	"Flaps reinstateDefaultFlaps"	self globalFlapTabsIfAny do:		[:aFlapTab |			(#('Painting' 'Stack Tools' 'Squeak' 'Menu' 'Widgets' 'Tools' 'Supplies' 'Scripting' 'Objects') includes: aFlapTab flapID) ifTrue:				[self removeFlapTab: aFlapTab keepInList: false]].	self addStandardFlaps.	self disableGlobalFlapWithID: 'Painting'.	self disableGlobalFlapWithID: 'Stack Tools'.	"self disableGlobalFlapWithID: 'Scripting'.	self disableGlobalFlapWithID: 'Objects'."	self currentWorld addGlobalFlaps.	self currentWorld reformulateUpdatingMenus! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 8/12/2001 16:50'!addStandardFlaps	"Initialize the standard default out-of-box set of global flaps.  This method creates them and places them in my class variable #SharedFlapTabs, but does not itself get them displayed."	SharedFlapTabs ifNil: [SharedFlapTabs _ OrderedCollection new].	SharedFlapTabs add: self newSqueakFlap.	SharedFlapTabs add: self newSuppliesFlap.	SharedFlapTabs add: self newToolsFlap.	SharedFlapTabs add: self newWidgetsFlap.	SharedFlapTabs add: self newStackToolsFlap delete.	SharedFlapTabs add: self newPaintingFlap delete.	"SharedFlapTabs add: self newScriptingFlap delete.	SharedFlapTabs add: self newObjectsFlap."	self enableGlobalFlapWithID: 'Squeak'.		self enableGlobalFlapWithID: 'Supplies'.	self enableGlobalFlapWithID: 'Tools'.	self enableGlobalFlapWithID: 'Controls'.	self disableGlobalFlapWithID: 'Stack Tools'.	self disableGlobalFlapWithID: 'Painting'.	"self disableGlobalFlapWithID: 'Scripting'.	self enableGlobalFlapWithID: 'Objects'."	SharedFlapTabs do:		[:aFlapTab | 			aFlapTab setToPopOutOnMouseOver: false].	"The above amends some historic behavior imparted by the initializers of the individual flaps"	^ SharedFlapTabs"Flaps reinstateDefaultFlaps"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 8/12/2001 16:55'!initializeStandardFlaps	"Initialize the standard default out-of-box set of global flaps. This method creates them and places them in my class variable #SharedFlapTabs, but does not itself get them displayed."	SharedFlapTabs _ nil.	self addStandardFlaps! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 8/12/2001 01:36'!newObjectsFlap	"Answer a fully-instantiated flap named 'Objects' to be placed at the top of the screen.  Not currently called; this worked once, but probably not at the moment."	|  aFlapTab anObjectsTool |	anObjectsTool _ ObjectsTool new.	anObjectsTool initializeForFlap.	anObjectsTool showCategories.	aFlapTab _ FlapTab new referent: anObjectsTool beSticky.	aFlapTab setNameTo: 'Objects'.	aFlapTab assumeString: 'Objects' font: Preferences standardFlapFont orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #top; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	anObjectsTool extent: self currentWorld width @ 200.	aFlapTab position: ((Display width - (aFlapTab width + 22)) @ 0).	anObjectsTool beFlap: true.	anObjectsTool color: Color red muchLighter.	anObjectsTool hResizing: #spaceFill.	anObjectsTool clipSubmorphs: true.		^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 8/12/2001 16:57'!quadsDefiningSuppliesFlap	"Answer a list of quads which define the objects to appear in the default Supplies flap"	^  #(	(RectangleMorph 		authoringPrototype		'Rectangle' 		'A rectangle')	(RectangleMorph		roundRectPrototype		'RoundRect'		'A rectangle with rounded corners')	(EllipseMorph			authoringPrototype		'Ellipse'			'An ellipse or circle')	(StarMorph				authoringPrototype		'Star'			'A star')	(CurveMorph			authoringPrototype		'Curve'			'A curve')	(PolygonMorph			authoringPrototype		'Polygon'		'A straight-sided figure with any number of sides')	(TextMorph				authoringPrototype		'Text'			'Text that you can edit into anything you desire.')	(ScriptingSystem		prototypicalHolder 		'Holder'			'A place for storing alternative pictures in an animation, etc.')	(ImageMorph			authoringPrototype		'Picture'		'A non-editable picture of something')	(ScriptableButton		authoringPrototype		'Button'			'A Scriptable button')	(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')	(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')	(BookMorph				authoringPrototype		'Book'			'A multi-paged structure')	(TabbedPalette			authoringPrototype		'TabbedPalette'	'A structure with tabs')	(JoystickMorph			authoringPrototype		'Joystick'		'A joystick-like control')	(ClockMorph				authoringPrototype		'Clock'			'A simple digital clock')	(BookMorph				previousPageButton 		'PreviousPage'	'A button that takes you to the previous page')	(BookMorph				nextPageButton			'NextPage'		'A button that takes you to the next page')		).! !!Morph methodsFor: 'initialization' stamp: 'sw 8/12/2001 02:48'!basicInitialize	"Do basic generic initialization of the instance variables:Set up the receiver, created by a #basicNew and now ready to be initialized, by placing initial values in the instance variables as appropriate"	bounds _ 0@0 corner: 50@40.	owner _ nil.	submorphs _ EmptyArray.	color _ self defaultColor! !!Morph methodsFor: 'initialization' stamp: 'sw 6/26/2001 10:56'!inATwoWayScrollPane	"Answer a two-way scroll pane that allows the user to scroll the receiver in either direction.  It will have permanent scroll bars unless you take some special action."	| widget |	widget _ TwoWayScrollPane new.	widget extent: ((self width min: 300 max: 100) @ (self height min: 150 max: 100));		borderWidth: 0.	widget scroller addMorph: self.	widget setScrollDeltas.	widget color: self color darker darker.	^ widget! !!Morph methodsFor: 'accessing' stamp: 'sw 8/12/2001 17:29'!highlightOnlySubmorph: aMorph	"Distinguish only aMorph with border highlighting (2-pixel wide red); make all my other submorphs have one-pixel-black highlighting.  This is a rather special-purpose and hard-coded highlighting regime, of course.  Later, if someone cared to do it, we could parameterize the widths and colors via properties, or some such."	self submorphs do:		[:m | m == aMorph			ifTrue:				[m borderWidth: 2; borderColor: Color red]			ifFalse:				[m borderWidth: 1; borderColor: Color black]]! !!Morph methodsFor: 'menus' stamp: 'sw 8/10/2001 10:52'!helpButton	"Answer a button whose action would be to put up help concerning the receiver"	| aButton |	aButton _ SimpleButtonMorph new.	aButton		target: self;		color:  Color magenta lighter lighter lighter;		label: '?' font: Preferences standardButtonFont;		actionSelector: #presentHelp;		setBalloonText: 'click here for help'.	^ aButton! !!Morph methodsFor: 'parts bin' stamp: 'sw 8/12/2001 02:07'!initializeToStandAlone	"Set up the receiver, created by a #basicNew and now ready to be initialized, as a fully-formed morph suitable for providing a graphic for a parts bin surrogate, and, when such a parts-bin surrogate is clicked on, for attaching to the hand as a viable stand-alone morph.  Because of historical precedent, #initialize has been expected to handle this burden, though a great number of morphs actually cannot stand alone.  In any case, by default we call the historical #initialize, though unhappily, so that all existing morphs will work no worse than before when using this protocol."	self initialize! !!B3DMorph methodsFor: 'initialize' stamp: 'sw 7/2/2001 16:32'!initializeToStandAlone	self basicInitialize.	geometry _ B3DBox from: (-0.7@-0.7@-0.7) to: (0.7@0.7@0.7).	camera _ B3DCamera new.	camera position: 0@0@1.5.	camera nearDistance: 0.1.	camera farDistance: 5.0.	self extent: 100@100.	texture _ (Form extent: 100@100) asTexture.	angle _ 0.! !!BorderedMorph methodsFor: 'initialization' stamp: 'sw 8/12/2001 02:11'!basicInitialize	"Do basic generic initialization of the instance variables"	super basicInitialize.	borderColor _ Color black.	borderWidth _ 2! !!ChineseCheckers methodsFor: 'parts bin' stamp: 'sw 6/28/2001 11:32'!initializeToStandAlone 	"Default creation is for one person against Squeak."	super initializeToStandAlone.	self extent: 382@413.	self color: (Color r: 0.6 g: 0.4 b: 0.0).	self borderWidth: 2.	animateMoves _ true.	self teams: #(2 5) autoPlay: {false. true}.! !!CipherPanel methodsFor: 'parts bin' stamp: 'sw 6/28/2001 17:58'!initializeToStandAlone 	super initializeToStandAlone.	self encodedQuote: self class sampleString! !!CrosticPanel methodsFor: 'parts bin' stamp: 'sw 6/28/2001 18:13'!initializeToStandAlone	| aStream quoteWithBlanks indexableQuote citation clue numberLine numbers buttonRow quoteWidth |	super initializeToStandAlone.	aStream _ ReadStream on: self class sampleFile.	quoteWithBlanks _ aStream nextLine.	quoteWithBlanks _ quoteWithBlanks asUppercase select: [:c | c isLetter or: [' -' includes: c]].	indexableQuote _ quoteWithBlanks select: [:c | c isLetter].	citation _ aStream nextLine.	aStream nextLine.	clues _ OrderedCollection new.	answers _ OrderedCollection new.	[aStream atEnd] whileFalse:		[clue _ aStream nextLine.		"Transcript cr; show: clue."		clues addLast: clue.		numberLine _ aStream nextLine.		numbers _ Scanner new scanTokens: numberLine.		answers addLast: numbers].	aStream close.	"Consistency check: "	(citation asUppercase select: [:c | c isLetter]) =		(String withAll: (answers collect: [:a | indexableQuote at: a first]))		ifFalse: [self error: 'mal-formed crostic file'].		quotePanel _ CrosticQuotePanel new quote: quoteWithBlanks answers: answers cluesPanel: self.	self color: quotePanel firstSubmorph color;		quote: indexableQuote clues: clues answers: answers quotePanel: quotePanel.	buttonRow _ self buttonRow.	quoteWidth _ (self width + quotePanel firstSubmorph width)					max: buttonRow width.	quotePanel extent: quoteWidth @ 9999.	self addMorph: quotePanel.	self breakColumnAndResizeWithButtons: buttonRow! !!EllipseMorph methodsFor: 'parts bin' stamp: 'sw 6/28/2001 11:32'!initializeToStandAlone	super initializeToStandAlone.	color _ Color yellow.! !!FlasherMorph methodsFor: 'parts bin' stamp: 'sw 6/28/2001 11:32'!initializeToStandAlone	self initialize.	super initializeToStandAlone.	self color: Color red.	self extent: 25@25.	self borderWidth: 2.! !!ImageMorph methodsFor: 'parts bin' stamp: 'sw 6/28/2001 11:32'!initializeToStandAlone	super initializeToStandAlone.	self image: DefaultForm.! !!FishEyeMorph methodsFor: 'parts bin' stamp: 'sw 6/28/2001 11:32'!initializeToStandAlone	super initializeToStandAlone.	"magnification should be always 1"	magnification _ 1.	d _ 1.3.	self extent: 130@130.! !!Morph class methodsFor: 'new-morph participation' stamp: 'sw 8/2/2001 13:59'!addPartsDescriptorQuadsTo: aList if: aBlock	"For each of the standard objects to be put into parts bins based on declarations in this class, add a parts-launching quad to aList, provided that the boolean-valued-block-with-one-argument supplied evaluates to true when provided the DescriptionForPartsBin"	| info more |	(self class includesSelector: #descriptionForPartsBin) ifTrue:		[info _ self descriptionForPartsBin.		(aBlock value: info) ifTrue:			[aList add:				{info globalReceiverSymbol.				info nativitySelector.				info formalName.				info documentation}]].	(self class includesSelector: #supplementaryPartsDescriptions)		ifTrue:			[more _ self supplementaryPartsDescriptions.			(more isKindOf: DescriptionForPartsBin) ifTrue: [more _ Array with: more].				"The above being a mild bit of forgiveness, so that in the usual only-one				case, the user need not return a collection"			more do:				[:aPartsDescription |  (aBlock value: aPartsDescription) ifTrue:					[aList add:						{aPartsDescription globalReceiverSymbol.						aPartsDescription nativitySelector.						aPartsDescription formalName.						aPartsDescription documentation}]]]! !!Morph class methodsFor: 'new-morph participation' stamp: 'sw 8/2/2001 11:56'!initializedInstance	"Answer an instance of the receiver which in some sense is initialized.  In the case of Morphs, this will yield an instance that can be attached to the Hand after having received the same kind of basic initialization that would be obtained from an instance chosen from the 'new morph' menu.   Return nil if the receiver is reluctant for some reason to return such a thing"	^ (self class includesSelector: #descriptionForPartsBin)		ifTrue:			[self newStandAlone]		ifFalse:			[self new initialize]! !!Morph class methodsFor: 'new-morph participation' stamp: 'sw 6/28/2001 11:33'!newStandAlone	"Answer an instance capable of standing by itself as a usable morph."	^ self basicNew initializeToStandAlone! !!Morph class methodsFor: 'new-morph participation' stamp: 'sw 8/2/2001 12:01'!partName: aName categories: aList documentation: aDoc	"Answer a DescriptionForPartsBin which will represent a launch of a new instance of my class via the #newStandAlone protocol sent to my class. Use the category-list and documentation provided"	^ DescriptionForPartsBin new		formalName: aName		categoryList: aList		documentation: aDoc		globalReceiverSymbol: self name		nativitySelector: #newStandAlone! !!Morph class methodsFor: 'parts bin' stamp: 'sw 8/12/2001 14:26'!supplementaryPartsDescriptions	"Answer a list of DescriptionForPartsBin objects that characterize objects that this class wishes to contribute to Stationery bins *other* than by the standard default #newStandAlone protocol"	^ {	DescriptionForPartsBin			formalName: 'Status'			categoryList: #(Scripting)			documentation: 'Buttons to run, stop, or single-step scripts'			globalReceiverSymbol: #ScriptingSystem			nativitySelector: #scriptControlButtons.		DescriptionForPartsBin			formalName: 'Scripting'			categoryList: #(Scripting)			documentation: 'A confined place for drawing and scripting, with its own private stop/step/go buttons.'			globalReceiverSymbol: #ScriptingSystem			nativitySelector: #newScriptingSpace.		DescriptionForPartsBin			formalName: 'Random'			categoryList: #(Scripting)			documentation: 'A tile that will produce a random number in a given range'			globalReceiverSymbol: #RandomNumberTile			nativitySelector: #new.		DescriptionForPartsBin			formalName: 'ButtonDown?'			categoryList: #(Scripting)			documentation: 'Tiles for querying whether the mouse button is down'			globalReceiverSymbol: #ScriptingSystem			nativitySelector: #anyButtonPressedTiles.		DescriptionForPartsBin			formalName: 'ButtonUp?'			categoryList: #(Scripting)			documentation: 'Tiles for querying whether the mouse button is up'			globalReceiverSymbol: #ScriptingSystem			nativitySelector: #noButtonPressedTiles.		DescriptionForPartsBin			formalName: 'NextPage'			categoryList: #(Presentation)			documentation: 'A button which, when clicked, takes the reader to the next page of a book'			globalReceiverSymbol: #BookMorph			nativitySelector: #nextPageButton.		DescriptionForPartsBin			formalName: 'PreviousPage'			categoryList: #(Presentation)			documentation: 'A button which, when clicked, takes the reader to the next page of a book'			globalReceiverSymbol: #BookMorph			nativitySelector: #previousPageButton.},	(Flaps quadsDefiningToolsFlap collect:		[:aQuad | DescriptionForPartsBin fromQuad: aQuad categoryList: #(Tools)])! !!AdvancedB3DSceneMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 11:59'!descriptionForPartsBin	^ self partName: 	'Cube3D'		categories:		#('3-D')		documentation:	'A 3-D rotating cube'! !!B3DMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:03'!descriptionForPartsBin	^ self partName: 	'B3DMorph'		categories:		#('3-D')		documentation:	'A Balloon-3D Morph that steadily rotates'! !!B3DSceneExplorerMorph class methodsFor: 'initialization' stamp: 'sw 8/2/2001 01:18'!descriptionForPartsBin	^ self partName:	'Explore3D'		categories:		#('3-D')		documentation:	'A place where you can explore with a rotating 3-D object'! !!BouncingAtomsMorph class methodsFor: 'other' stamp: 'sw 8/2/2001 01:21'!descriptionForPartsBin	^ self partName:	'BouncingAtoms'		categories:		#('Demo')		documentation:	'The original, intensively-optimized bouncing-atoms simulation by John Maloney'! !!ChineseCheckers class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 01:21'!descriptionForPartsBin	^ self partName:	'ChineseCheckers'		categories:		#('Games')		documentation:	'Halma - the classic board game of Chinese Checkers, written by Dan Ingalls'! !!CipherPanel class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 01:21'!descriptionForPartsBin	^ self partName:	'Cipher'		categories:		#('Games')		documentation:	'The Cipher Panel: A playground for cryptograms, by Dan Ingalls'! !!CrosticPanel class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:46'!descriptionForPartsBin	^ self partName:	'Crostic'		categories:		#('Games')		documentation:	'The Crostic Panel: A classic word diagram game, by Dan Ingalls'! !!EllipseMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 16:20'!descriptionForPartsBin	^ self partName:	'Ellipse'		categories:		#('Graphics')		documentation:	'An elliptical or circular shape'! !!FlasherMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:49'!descriptionForPartsBin	^ self partName:	'Flasher'		categories:		#('Demo')		documentation:	'A morph that exposes himself'! !!GeeMailMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:50'!descriptionForPartsBin	^ self partName:	'GeeMail'		categories:		#('Presentation' 'Text')		documentation:	'A place to assemble content and associated flowing text'! !!ImageMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 16:22'!descriptionForPartsBin	^ self partName:	'Image'		categories:		#('Graphics')		documentation:	'A non-editable picture.  Better to use SketchMorph'! !!MagnifierMorph class methodsFor: 'instance creation' stamp: 'sw 8/2/2001 15:04'!descriptionForPartsBin	^ self partName:	'Magnifier'		categories:		#('Useful')		documentation:	'A magnifying glass'! !!MagnifierMorph class methodsFor: 'instance creation' stamp: 'sw 8/10/2001 22:21'!supplementaryPartsDescriptions	^ {DescriptionForPartsBin		formalName: 'RoundGlass'		categoryList: #(Useful)		documentation: 'A round magnifying glass'		globalReceiverSymbol: #MagnifierMorph		nativitySelector: #newRound}! !!FishEyeMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:47'!descriptionForPartsBin	^ self partName:	'FishEye'		categories:		#('Useful')		documentation:	'An extreme-wide-angle lens'! !!MovingEyeMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:51'!descriptionForPartsBin	^ self partName:	'MovingEye'		categories:		#('Demo')		documentation:	'An eye which follows the cursor'! !!PDAMorph methodsFor: 'parts bin' stamp: 'sw 7/12/2001 22:50'!initializeToStandAlone	super initializeToStandAlone.	self fullBounds  "seemingly necessary to get its icon right in a parts bin"! !!PDAMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:51'!descriptionForPartsBin	^ self partName:	'PDA'		categories:		#('Useful')		documentation:	'A Personal Digital Assistant'! !!PaintInvokingMorph methodsFor: 'as yet unclassified' stamp: 'sw 8/12/2001 17:19'!initializeToStandAlone	super initializeToStandAlone.	self image: (ScriptingSystem formAtKey: 'Painting')! !!PaintInvokingMorph class methodsFor: 'as yet unclassified' stamp: 'sw 8/12/2001 17:18'!descriptionForPartsBin	^ self partName:	'Paint'		categories:		#('Graphics')		documentation:	'Drop this icon into any playfield to start painting a new object in that playfield.'! !!PartsWindow methodsFor: 'as yet unclassified' stamp: 'sw 8/12/2001 17:16'!saveAsCustomPartsBin	self inform: 'this feature is obsolete, as, indeed, is this entire tool'! !!PasteUpMorph methodsFor: 'initialization' stamp: 'sw 8/2/2001 17:50'!initializeToStandAlone	"Answer an instance of the receiver suitable for placing in a parts bin for authors"		self initialize.	self color: Color green muchLighter;  extent: 100 @ 80; borderColor: (Color r: 0.645 g: 0.935 b: 0.161).	self extent: 300 @ 240.	self beSticky! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 8/12/2001 17:47'!activateObjectsTool	"Offer the user a parts bin of morphs -- if one already exists, bring it to the front and flash its border beckoningly; if none exists yet, create a new one and place it in the center of the screen"	| anObjectTool |	submorphs do:		[:aMorph | (aMorph renderedMorph isKindOf: ObjectsTool)			ifTrue:				[aMorph comeToFront.				aMorph flash.				^ self]].	"None found, so create one"	anObjectTool _ ObjectsTool newStandAlone.	self addMorphFront: anObjectTool.	anObjectTool fullBounds.	anObjectTool center: self center	"ActiveWorld activateObjectsTool"! !!PasteUpMorph methodsFor: 'world menu' stamp: 'sw 8/12/2001 17:57'!keystrokeInWorld: evt	"A keystroke was hit when no keyboard focus was in set, so it is sent here to the world instead.  This current implementation is regrettably hard-coded; until someone cleans this up, you may wish to edit this method to suit your personal taste in interpreting cmd-keys issued to the desktop."	|  aChar isCmd |	aChar _ evt keyCharacter.	isCmd _ evt commandKeyPressed and: [Preferences cmdKeysInText].	(isCmd and: [Preferences honorDesktopCmdKeys]) ifTrue:		[(aChar == $o) ifTrue: [^ ActiveWorld activateObjectsTool].		(aChar == $F) ifTrue: [^ CurrentProjectRefactoring currentToggleFlapsSuppressed].		(aChar == $N) ifTrue: [^ Preferences togglePreference: #showProjectNavigator].		(aChar == $r) ifTrue: [^ ActiveWorld restoreMorphicDisplay].		Preferences eToyFriendly			ifTrue:				[(aChar == $W) ifTrue: [^ self putUpWorldMenu: evt]]			ifFalse:				[(aChar == $\) ifTrue: [^ SystemWindow sendTopWindowToBack].				(aChar == $b) ifTrue: [^ Browser openBrowser].				(aChar == $k) ifTrue: [^ Workspace open].				(aChar == $m) ifTrue: [^ TheWorldMenu new adaptToWorld: World; newMorph].				(aChar == $t) ifTrue: [^ self findATranscript: evt].				(aChar == $w) ifTrue: [^ SystemWindow closeTopWindow].				(aChar == $z) ifTrue: [^ self commandHistory undoOrRedoCommand].				(aChar == $C) ifTrue: [^ self findAChangeSorter: evt].				(aChar == $R) ifTrue: [^ self openRecentSubmissionsBrowser: evt].				(aChar == $P) ifTrue: [^ self findAPreferencesPanel: evt].				(aChar == $W) ifTrue: [^ self findAMessageNamesWindow: evt]]]! !!PartsBin methodsFor: 'initialization' stamp: 'sw 8/12/2001 17:43'!listDirection: aListDirection quadList: quadList	"Initialize the receiver to run horizontally or vertically, obtaining its elements from the list of tuples of the form:		(<receiver> <selector> <label> <balloonHelp>)"	| aButton aClass |	self layoutPolicy: TableLayout new.	self listDirection: aListDirection.	self wrapCentering: #topLeft.	self layoutInset: 2.	aListDirection == #leftToRight		ifTrue:			[self vResizing: #rigid.			self hResizing: #spaceFill.			self wrapDirection: #topToBottom]		ifFalse:			[self hResizing: #rigid.			self vResizing: #spaceFill.			self wrapDirection: #leftToRight].	quadList do:		[:tuple |			aClass _ Smalltalk at: tuple first.			aButton _ IconicButton new initializeWithThumbnail: (self class thumbnailForQuad: tuple) withLabel: tuple third andSend: tuple second to: aClass.			(tuple size > 3 and: [tuple fourth isEmptyOrNil not]) ifTrue:				[aButton setBalloonText: tuple fourth]. 			self addMorphBack: aButton]! !!PasteUpMorph class methodsFor: 'scripting' stamp: 'sw 8/2/2001 16:48'!descriptionForPartsBin	^ self partName:	'Playfield'		categories:		#('Presentation')		documentation:	'A place for assembling parts or for staging animations'! !!PasteUpMorph class methodsFor: 'scripting' stamp: 'sw 8/2/2001 16:29'!supplementaryPartsDescriptions	^ {DescriptionForPartsBin		formalName: 'Holder'		categoryList: #(Scripting)		documentation: 'A place for storing alternative pictures in an animation, ec.'		globalReceiverSymbol: #ScriptingSystem		nativitySelector: #prototypicalHolder}! !!PartsBin class methodsFor: 'thumbnail cache' stamp: 'sw 8/12/2001 17:44'!cacheAllThumbnails	"In one monster operation, cache all the thumbnails of parts.  Intended to be called from do-its in update postscripts, for example, or manually."	Cursor wait showWhile:		[Morph withAllSubclasses do: [:aClass |			(aClass class includesSelector: #descriptionForPartsBin) ifTrue:				[self thumbnailForPartsDescription: aClass descriptionForPartsBin].			(aClass class includesSelector: #supplementaryPartsDescriptions) ifTrue:				[aClass supplementaryPartsDescriptions do:					[:aDescription | self thumbnailForPartsDescription: aDescription]]]]"Time millisecondsToRun: [PartsBin initialize. PartsBin cacheAllThumbnails]"! !!PartsBin class methodsFor: 'thumbnail cache' stamp: 'sw 8/10/2001 23:25'!thumbnailForPartsDescription: aPartsDescription	"Answer a thumbnail for the given parts description creating it if necessary.  If it is created afresh, it will also be cached at this time"	| aThumbnail aSymbol |	aSymbol _ aPartsDescription formalName asSymbol.	^ Thumbnails at: aSymbol ifAbsent:		[aThumbnail _ Thumbnail new makeThumbnailFromForm: ((Smalltalk at: aPartsDescription globalReceiverSymbol) perform: aPartsDescription nativitySelector) imageForm.		self cacheThumbnail: aThumbnail forSymbol: aSymbol.		^ aThumbnail]"PartsBin initialize"! !!PartsBin class methodsFor: 'thumbnail cache' stamp: 'sw 8/12/2001 17:46'!thumbnailForQuad: aQuad	"Answer a thumbnail for a morph obtaining as per the quad provided, creating the thumbnail if necessary.  If it is created afresh, it will also be cached at this time"	| aThumbnail aSymbol |	aSymbol _ aQuad third.	^ Thumbnails at: aSymbol ifAbsent:		[aThumbnail _ Thumbnail new makeThumbnailFromForm: ((Smalltalk at: aQuad first) perform: aQuad second) imageForm.		self cacheThumbnail: aThumbnail forSymbol: aSymbol.		^ aThumbnail]"PartsBin initialize"! !!PolygonMorph methodsFor: 'initialization' stamp: 'sw 6/28/2001 11:33'!initializeToStandAlone	super initializeToStandAlone.	vertices _ Array with: 20@20 with: 40@30 with: 20@40.	borderWidth _ 2.	borderColor _ Color magenta.	closed _ true.	smoothCurve _ false.	arrows _ #none.	self computeBounds.! !!BlobMorph methodsFor: 'initialization' stamp: 'sw 8/2/2001 17:17'!initializeToStandAlone	"Override PolygonMorph's version"	self initialize! !!CurveMorph methodsFor: 'initialization' stamp: 'sw 6/28/2001 11:32'!initializeToStandAlone	super initializeToStandAlone.	self beSmoothCurve.! !!LineMorph methodsFor: 'parts bin' stamp: 'sw 8/12/2001 17:26'!initializeToStandAlone	super initializeToStandAlone.	vertices _ Array with: 20@30 with: 120@130.	self borderWidth: 2.	self borderColor: Color brown! !!PolygonMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 16:22'!descriptionForPartsBin	^ self partName:	'Polygon'		categories:		#('Graphics')		documentation:	'A series consisting of connected line segments, which may be open or closed.'! !!BlobMorph class methodsFor: 'initialization' stamp: 'sw 8/2/2001 01:20'!descriptionForPartsBin	^ self partName:	'Blob'		categories:		#('Demo')		documentation:	'A patch of primordial slime'! !!CurveMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 16:20'!descriptionForPartsBin	^ self partName:	'Curve'		categories:		#('Graphics')		documentation:	'A curve, which may be open or closed.'! !!LineMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 16:21'!descriptionForPartsBin	^ self partName:	'Line'		categories:		#('Graphics')		documentation:	'A straight line.'! !!PoohTestMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 18:18'!descriptionForPartsBin	^ self partName:	'Model3d'		categories:		#('3-D')		documentation:	'A place to test the 3-d modelling system'! !!Preferences class methodsFor: 'get/set' stamp: 'sw 8/11/2001 23:14'!navigatorShowingString	"Answer a string for the show-project-navigator menu item"	^ (self showProjectNavigator		ifTrue: ['<yes>']		ifFalse: ['<no>'])		, 'show navigator (N)'! !!RectangleMorph methodsFor: 'initialization' stamp: 'sw 8/12/2001 16:30'!defaultColor	"Answer the color that should be set for the receiver by default"	^ Color blue lighter! !!AlignmentMorph methodsFor: 'initialization' stamp: 'sw 8/12/2001 02:48'!basicInitialize	"Do basic generic initialization of the instance variables"	super basicInitialize.	borderWidth _ 0.	self layoutPolicy: TableLayout new.	self listDirection: #leftToRight.	self wrapCentering: #topLeft.	self hResizing: #spaceFill.	self vResizing: #spaceFill.	self layoutInset: 2.	color _ Color r: 0.8 g: 1.0 b: 0.8.	self rubberBandCells: true.! !!AllScriptsTool methodsFor: 'parts bin' stamp: 'sw 8/12/2001 02:57'!initializeToStandAlone	super initializeToStandAlone.	self layoutPolicy: TableLayout new;		listDirection: #topToBottom;		hResizing: #spaceFill;		extent: 1@1;		vResizing: #spaceFill;		rubberBandCells: true;		yourself.	self initializeFor: self currentWorld presenter! !!BookMorph methodsFor: 'initialization' stamp: 'sw 8/2/2001 16:52'!initializeToStandAlone	self initialize.	self removeEverything; pageSize: 360@228; color: (Color gray: 0.9).	self borderWidth: 1; borderColor: Color black.	self beSticky.	self showPageControls; insertPage.	^ self! !!IconicButton methodsFor: 'initialization' stamp: 'sw 8/12/2001 17:01'!initializeToShow: aMorph withLabel: aLabel andSend: aSelector to: aReceiver 		"Initialize the receiver to show the current appearance of aMorph on its face, giving it the label supplied and arranging for it, when the button goes down on it, to obtain a new morph by sending the specified selector to the specified receiver"	| aThumbnail |	aThumbnail _ Thumbnail new.	aThumbnail makeThumbnailFromForm: aMorph imageForm.	^ self initializeWithThumbnail: aThumbnail withLabel: aLabel andSend: aSelector to: aReceiver 	! !!IconicButton methodsFor: 'initialization' stamp: 'sw 8/12/2001 17:01'!initializeWithThumbnail: aThumbnail withLabel: aLabel andSend: aSelector to: aReceiver 		"Initialize the receiver to show aThumbnail on its face, giving it the label supplied and arranging for it, when the button goes down on it, to obtain a new morph by sending the supplied selector to the supplied receiver"	| labeledItem  |	labeledItem _ AlignmentMorph newColumn beTransparent.	labeledItem borderWidth: 0.	labeledItem addMorph: aThumbnail.	labeledItem addMorphBack: (Morph new extent: (4@4)) beTransparent.	labeledItem addMorphBack: (NameStringInHalo contents: aLabel font: (StrikeFont familyName: 'Atlanta' size: 9)).	self		beTransparent;		labelGraphic: labeledItem imageForm;		borderWidth: 0;		target: aReceiver;		actionSelector: #launchPartVia:;		arguments: {aSelector};		actWhen: #buttonDown! !!ObjectsTool methodsFor: 'initialization' stamp: 'sw 8/12/2001 17:33'!initializeForFlap	"Initialize the receiver to operate in a flap at the top of the screen.  This worked in the past, but is not currently in the released UI and is not likely to work without some fixup."	| aPane aBin |	self borderWidth: 2; borderColor: Color darkGray.	self layoutInset: 0.	self hResizing: #shrinkWrap; vResizing: #rigid.	self listDirection: #topToBottom.	self listCentering: #topLeft.	self cellPositioning: #topLeft.	self wrapCentering: #center.	aPane _ self paneForTabs: self modeTabs.	aPane color: aPane color darker.	aPane listSpacing: #equal.	aPane cellInset: 10 @ 10.	aPane listCentering: #center; height: 38.	aPane wrapDirection: nil.	self addMorphFront: aPane.	self addMorphBack: Morph new.  "Place holder for a tabs or text pane"	aBin _ PartsBin newPartsBinWithOrientation: #leftToRight from: #().	aBin listDirection: #leftToRight.	aBin wrapDirection: #topToBottom.	aBin hResizing: #spaceFill; vResizing: #spaceFill.	aBin extent: (self currentWorld width) @ 250.	aBin color: Color orange muchLighter.	aBin setNameTo: 'Objects'.	aBin dropEnabled: false.	self addMorphBack: aBin! !!ObjectsTool methodsFor: 'initialization' stamp: 'sw 8/11/2001 20:14'!initializeToStandAlone	"Initialize the receiver so that it can live as a stand-alone morph"	| aPane aBin aColor |	self basicInitialize.	self layoutInset: 6. 	self listCentering: #topLeft.	self cellPositioning: #topLeft.	self wrapCentering: #center.	self useRoundedCorners.	self listDirection: #topToBottom.	self hResizing: #shrinkWrap; vResizing: #shrinkWrap.	aPane _ self paneForTabs: self modeTabs.	aPane addMorphFront: self dismissButton.	aPane addMorphBack: self helpButton.	aPane color: (aColor _ aPane color) darker.	aPane listSpacing: #equal.	aPane cellInset: 10 @ 10.	aPane listCentering: #center; height: 38.	aPane wrapDirection: nil.	self addMorphFront: aPane.	self addMorphBack: Morph new.  "Place holder for a tabs or text pane"	aBin _ PartsBin newPartsBinWithOrientation: #leftToRight from: #().	aBin listDirection: #leftToRight.	aBin wrapDirection: #topToBottom.	aBin hResizing: #spaceFill; vResizing: #spaceFill.	aBin extent: (self currentWorld width) @ 250.	aBin color: aColor lighter lighter.	aBin setNameTo: 'parts'.	aBin dropEnabled: false.	self addMorphBack: aBin.	self submorphs last width: 350; hResizing: #rigid.	self color: (Color r: 0.0 g: 0.839 b: 0.226).	self setProperty: #initialWidth toValue: 268.	self setNameTo: 'Objects'.	self showCategories.! !!ObjectsTool methodsFor: 'initialization' stamp: 'sw 8/12/2001 17:41'!tweakAppearanceAfterModeShift	"After the receiver has been put into a given mode, make an initial selection of category, if appropriate, and try to overcome persistent and annoying layout problems associated with initial state.  This method contains a mish-mash of measures, sometimes obviously desparate, some likely overkill, some no longer required.  Pax!!"	| aWidth prevailingWidth |	prevailingWidth _ self width.	self searchPane ifNil:		[self tabsPane submorphs first doButtonAction].	(aWidth _ self valueOfProperty: #initialWidth) ifNotNil:		[submorphs second width: aWidth.		prevailingWidth _ aWidth.		self removeProperty: #initialWidth].	self fullBounds.	self firstSubmorph firstSubmorph firstSubmorph layoutChanged.  "By gum"	self firstSubmorph submorphs do:		[:aButton | 			aButton borderWidth: 0.			(aButton valueOfProperty: #modeSymbol) = modeSymbol				ifTrue:					[aButton firstSubmorph color: Color red]				ifFalse:					[aButton firstSubmorph color: Color black]].	submorphs last height: (200 max: submorphs last height); layoutChanged.	self firstSubmorph firstSubmorph layoutChanged.	submorphs second width: prevailingWidth - 10! !!ObjectsTool methodsFor: 'major modes' stamp: 'sw 8/12/2001 16:30'!modeSymbol	"Answer the modeSymbol"	^ modeSymbol! !!ObjectsTool methodsFor: 'major modes' stamp: 'sw 8/10/2001 14:46'!modeSymbol: aSymbol	"Set the receiver's modeSymbol as indicated"	modeSymbol _ aSymbol! !!ObjectsTool methodsFor: 'major modes' stamp: 'sw 8/12/2001 01:39'!modeTabs	"Answer a list of buttons which, when hit, will trigger the choice of mode of the receiver"	| buttonList aButton tupleList |	tupleList _  #(		('alphabetic'	alphabetic	showAlphabeticTabs		'A separate tab for each letter of the alphabet')		('find'		search		showSearchPane		'Provides a type-in pane allowing you to match')		('categories'		categories	showCategories			'Grouped by category')		"('standard'		standard	showStandardPane		'Standard Squeak tools supplies for building')").					buttonList _ tupleList collect:		[:tuple |			aButton _ SimpleButtonMorph new label: tuple first.			aButton actWhen: #buttonUp.			aButton setProperty: #modeSymbol toValue: tuple second.			aButton target: self; actionSelector: tuple third.			aButton setBalloonText: tuple fourth.			aButton].	^ buttonList"ObjectsTool new modeTabs"! !!ObjectsTool methodsFor: 'tabs' stamp: 'sw 6/30/2001 14:27'!initializeWithTabs: tabList	"Initialize the receiver to have the given tabs"	self replaceSubmorph: submorphs second by: (self paneForTabs: tabList)! !!ObjectsTool methodsFor: 'tabs' stamp: 'sw 7/12/2001 16:56'!paneForTabs: tabList	"Answer a pane bearing tabs for the given list"	| aPane |	aPane _ AlignmentMorph newRow.	aPane listDirection: #leftToRight.	aPane wrapDirection: #topToBottom.	aPane vResizing: #shrinkWrap.	aPane hResizing: #spaceFill.	aPane cellInset: 6.	aPane listCentering: #center.	aPane listSpacing: #equal.	aPane addAllMorphs: tabList.	self prepareInitialAppearanceForTabs: tabList.	^ aPane! !!ObjectsTool methodsFor: 'tabs' stamp: 'sw 8/12/2001 16:34'!prepareInitialAppearanceForTabs: tabList	"Prepare the initial appearance for a list of tabs"	tabList do:		[:t | t color: Color transparent.			t borderWidth: 1; borderColor: Color black]! !!ObjectsTool methodsFor: 'tabs' stamp: 'sw 8/11/2001 23:11'!presentHelp	"Sent when a Help button is hit; provide the user with some form of help for the tool at hand"'The Objects tool allows you to browse through, and obtain copies of, many kinds of objects.  You can obtain an Objects tool by choosing "Objects" from the world menu, or by the shortcut of typing alt-o (cmd-o) any time the cursor is over the desktop.There are three ways to use Objects, corresponding to the three tabs seen at the top:alphabetic - gives you separate tabs for a, b, c, etc.  Click any tab, and you will see the icons of all the objects whose names begin with that lettersearch - gives you a type-in pane for a search string.  Type any letters there, and icons of all the objects whose names match what you have typed will appear in the bottom pane.categories - provides tabs representing categories of related items.  Click on any tab to see the icons of all the objects in the category.When the cursor lingers over the icon of any object, you will get balloon help for the item.When you drag an icon from Objects, it will result in a new copy of it in your hand; the new object will be deposited wherever you next click.'	openInWorkspaceWithTitle: 'About Objects'! !!ObjectsTool methodsFor: 'tabs' stamp: 'sw 6/27/2001 16:49'!tabsPane	"Answer the pane that holds the tabs"	^ submorphs second! !!ObjectsTool methodsFor: 'menu' stamp: 'sw 8/12/2001 16:31'!addAddHandMenuItemsForHalo: aMenu hand: aHand	"Add items to the given halo-menu, given a hand"	super addAddHandMenuItemsForHalo: aMenu hand: aHand.	aMenu addLine.	aMenu add: 'alphabetic' target: self selector: #showAlphabeticTabs.	aMenu add: 'find' target: self selector: #showSearchPane.	aMenu add: 'categories' target: self selector: #showCategories.	aMenu addLine! !!ObjectsTool methodsFor: 'alphabetic' stamp: 'sw 8/12/2001 17:32'!alphabeticTabs	"Answer a list of buttons which, when hit, will trigger the choice of a morphic category"	| buttonList aButton tabLabels |	tabLabels _ (($a to: $z) collect: [:ch | ch asString]) asOrderedCollection.	buttonList _ tabLabels collect:		[:catName |			aButton _ SimpleButtonMorph new label: catName.			aButton actWhen: #buttonDown.			aButton target: self; actionSelector: #showAlphabeticCategory:fromButton:; arguments: {catName. aButton}].	^ buttonList"ObjectsTool new tabsForMorphicCategories"! !!ObjectsTool methodsFor: 'alphabetic' stamp: 'sw 8/12/2001 16:35'!installQuads: quads fromButton: aButton	"Install items in the bottom pane that correspond to the given set of quads, as triggered from the given button"	| aPartsBin sortedQuads |	aPartsBin _ self findDeeplyA: PartsBin.	aPartsBin removeAllMorphs.	sortedQuads _ quads asSortedCollection:		[:a :b | a third < b third].	aPartsBin listDirection: #leftToRight quadList: sortedQuads.	aPartsBin width: self innerBounds width.	aButton ifNotNil: [self tabsPane highlightOnlySubmorph: aButton]! !!ObjectsTool methodsFor: 'alphabetic' stamp: 'sw 8/11/2001 14:00'!showAlphabeticCategory: aString fromButton: aButton	"Blast items beginning with a given letter into my lower pane"	| eligibleClasses quads uc |	submorphs last removeAllMorphs.	uc _ aString asUppercase asCharacter.	eligibleClasses _ Morph withAllSubclasses.	quads _ OrderedCollection new.	eligibleClasses do:		[:aClass |			aClass theNonMetaClass addPartsDescriptorQuadsTo: quads if:				[:info | info formalName asUppercase first  = uc]].	self installQuads: quads fromButton: aButton! !!ObjectsTool methodsFor: 'alphabetic' stamp: 'sw 8/12/2001 16:33'!showAlphabeticTabs	"Switch to the mode of showing alphabetic tabs"	modeSymbol == #alphabetic ifFalse:		[self initializeWithTabs: self alphabeticTabs.		self modeSymbol: #alphabetic.		self tweakAppearanceAfterModeShift]! !!ObjectsTool methodsFor: 'categories' stamp: 'sw 8/12/2001 17:37'!showCategories	"Set the receiver up so that it shows tabs for each of the standard categories"	modeSymbol == #categories ifFalse:		[self initializeWithTabs: self tabsForCategories.		self modeSymbol: #categories.		self tweakAppearanceAfterModeShift]! !!ObjectsTool methodsFor: 'categories' stamp: 'sw 8/12/2001 02:53'!showCategory: aCategoryName fromButton: aButton	"Project items from the given category into my lower pane"	| quads  |	submorphs last removeAllMorphs.	quads _ OrderedCollection new.	Morph withAllSubclasses do:		[:aClass | aClass theNonMetaClass addPartsDescriptorQuadsTo: quads if: [:aDescription | aDescription categories includes: aCategoryName]].	quads _ quads asSortedCollection:		[:q1 :q2 | q1 third <= q2 third].	self installQuads: quads fromButton: aButton! !!ObjectsTool methodsFor: 'categories' stamp: 'sw 8/12/2001 17:39'!tabsForCategories	"Answer a list of buttons which, when hit, will trigger the choice of a category"	| buttonList aButton classes categoryList |	classes _ Morph withAllSubclasses.	categoryList _ Set new.	classes do: [:aClass |		(aClass class includesSelector: #descriptionForPartsBin) ifTrue:			[categoryList addAll: aClass descriptionForPartsBin categories].		(aClass class includesSelector: #supplementaryPartsDescriptions) ifTrue:			[aClass supplementaryPartsDescriptions do:				[:aDescription | categoryList addAll: aDescription categories]]].	categoryList _ categoryList asSortedArray.	buttonList _ categoryList collect:		[:catName |			aButton _ SimpleButtonMorph new label: catName.			aButton actWhen: #buttonDown.			aButton target: self; actionSelector: #showCategory:fromButton:; arguments: {catName. aButton}].	^ buttonList"ObjectsTool new tabsForCategories"! !!ObjectsTool methodsFor: 'search' stamp: 'sw 7/20/2001 15:58'!newSearchPane	"Answer a type-in pane for searches"	| aTextMorph aBox |	aTextMorph _ TextMorph new.	aTextMorph setProperty: #defaultContents toValue: '' asText allBold.	aTextMorph on: #keyStroke send: #searchPaneCharacter: to: self.	aTextMorph setNameTo: 'SearchPane'.	aTextMorph setBalloonText: 'Type here and all entries that match will be shown.'.	aTextMorph extent: ((self innerBounds width - 16) @ 20).	aTextMorph vResizing: #rigid.	aBox _ AlignmentMorph new hResizing: #spaceFill; vResizing: #shrinkWrap.	aBox color: Color white.	aBox addMorphBack: aTextMorph.	^ aBox! !!ObjectsTool methodsFor: 'search' stamp: 'sw 6/27/2001 17:15'!searchPane	"Answer the receiver's search pane, nil if none"	^ self findDeepSubmorphThat: [:m | m knownName = 'SearchPane'] ifAbsent: [nil]! !!ObjectsTool methodsFor: 'search' stamp: 'sw 6/30/2001 14:26'!searchPaneCharacter: evt	"A character represented by the event handed in was typed in the search pane by the user"	^ self showMorphsMatchingSearchString"	| char |  *** The variant below only does a new search if RETURN or ENTER is hit ***	char _ evt keyCharacter.	(char == Character enter or: [char == Character cr]) ifTrue:		[self showMorphsMatchingSearchString]"! !!ObjectsTool methodsFor: 'search' stamp: 'sw 8/12/2001 17:36'!setSearchStringFromSearchPane	"Set the search string by obtaining its contents from the search pane, and doing a certain amount of munging"	searchString _ self searchPane text string asLowercase withBlanksTrimmed.	searchString _ searchString copyWithoutAll: {Character enter. Character cr}! !!ObjectsTool methodsFor: 'search' stamp: 'sw 8/2/2001 11:55'!showMorphsMatchingSearchString	"Project items matching the search string into my lower pane"	| quads |	self setSearchStringFromSearchPane.	submorphs last removeAllMorphs.	quads _ OrderedCollection new.	Morph withAllSubclasses do:		[:aClass |			aClass addPartsDescriptorQuadsTo: quads if:				[:info | info formalName includesSubstring:  searchString caseSensitive: false]].	self installQuads: quads fromButton: nil! !!ObjectsTool methodsFor: 'search' stamp: 'sw 8/12/2001 17:37'!showSearchPane	"Set the receiver up so that it shows the search pane"	modeSymbol == #search ifFalse:		[self replaceSubmorph: submorphs second by: self newSearchPane.		self modeSymbol: #search.		self tweakAppearanceAfterModeShift.		self showMorphsMatchingSearchString]! !!ObjectsTool methodsFor: 'miscellaneous' stamp: 'sw 8/12/2001 17:36'!setExtentFromHalo: anExtent	"The user has dragged the grow box such that the receiver's extent would be anExtent.  Do what's needed"	modeSymbol == #search		ifFalse:			[submorphs second width: anExtent x]		ifTrue:			[submorphs second firstSubmorph width: anExtent x - 6].	submorphs last height: (anExtent y - (submorphs first height + submorphs second height))! !!RectangleMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 16:22'!descriptionForPartsBin	^ self partName:	'Rectangle'		categories:		#('Graphics')		documentation:	'A rectangular shape, with border and fill style'! !!RectangleMorph class methodsFor: 'parts bin' stamp: 'sw 8/10/2001 22:22'!supplementaryPartsDescriptions	^ {DescriptionForPartsBin		formalName: 'RoundRect'		categoryList: #('Graphics')		documentation: 'A rectangle with rounded corners'		globalReceiverSymbol: #RectangleMorph		nativitySelector: #roundRectPrototype}! !!AllScriptsTool class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 01:14'!descriptionForPartsBin	^ self partName: 	'AllScripts'		categories:		#('Scripting')		documentation:	'A tool allowing you to monitor the status of all scripts in your project'! !!BookMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 01:20'!descriptionForPartsBin	^ self partName:	'Book'		categories:		#('Presentation')		documentation:	'Multi-page structures'! !!DoubleClickExample class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:46'!descriptionForPartsBin	^ self partName:	'DoubleClick'		categories:		#('Demo')		documentation:	'An example of how to use double-click in moprhic'! !!FreeCell class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:50'!descriptionForPartsBin	^ self partName:	'FreeCell'		categories:		#('Games')		documentation:	'A unique solitaire card game'! !!GraphMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:50'!descriptionForPartsBin	^ self partName:	'Graph'		categories:		#('Useful')		documentation:	'A graph of numbers, normalized so the full range of values just fits my height.  I support a movable cursor that can be dragged with the mouse.'! !!MPEGMoviePlayerMorph class methodsFor: 'parts bin' stamp: 'sw 8/12/2001 17:27'!descriptionForPartsBin	^ self partName:	'MPEGPlayer'		categories:		#('Multimedia')		documentation:	'A player for MPEG movies '! !!ObjectsTool class methodsFor: 'parts bin' stamp: 'sw 8/11/2001 20:16'!descriptionForPartsBin	^ self partName:	'Objects'		categories:		#('Useful')		documentation:	'A place to obtain many kinds of objects'! !!PianoKeyboardMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 14:52'!descriptionForPartsBin	^ self partName:	'PianoKeyboard'		categories:		#('Multimedia')		documentation:	'A piano keyboard'! !!RecordingControlsMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 18:18'!descriptionForPartsBin	^ self partName:	'SoundRecorder'		categories:		#('Multimedia')		documentation:	'A device for making sound recordings.'! !!RulerMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:52'!descriptionForPartsBin	^ self partName:	'Ruler'		categories:		#('Useful')		documentation:	'A rectangle which continuously reports its size in pixels'! !!SameGame class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:52'!descriptionForPartsBin	^ self partName:	'Same'		categories:		#('Games')		documentation:	'A board game implementedby Tim Olson, based on a game originally written for UNIX by Eiji Fukumoto.'! !!ScriptableButton methodsFor: 'miscellaneous' stamp: 'sw 8/12/2001 14:47'!initializeToStandAlone	super initializeToStandAlone.	self borderWidth: 1;		borderColor: Color black;		useRoundedCorners;		color: Color yellow;		label: 'Press me'! !!ScriptableButton class methodsFor: 'name' stamp: 'sw 8/12/2001 14:49'!descriptionForPartsBin	^ self partName:	'Button'		categories:		#('Scripting')		documentation:	'A button to use with tile scripting; its script will be a method of its containing playfield'! !!SimpleSliderMorph methodsFor: 'parts bin' stamp: 'sw 6/29/2001 12:24'!initializeToStandAlone	| nominalColor |	self initialize.	self beSticky.	self extent: 14@120.	nominalColor _ Color r: 0.452 g: 0.645 b: 0.935.	self color: nominalColor.	self borderColor: Color veryDarkGray.	self sliderColor: nominalColor muchLighter.	self descending: true.	self setScaledValue: 0.3! !!SimpleSliderMorph class methodsFor: 'parts bin' stamp: 'sw 8/12/2001 17:53'!descriptionForPartsBin	^ self partName:	'Slider'		categories:		#('Scripting')		documentation:	'A scriptable control that allows you to choose a numeric value by dragging a knob.'! !!SketchMorph methodsFor: 'parts bin' stamp: 'sw 6/28/2001 11:33'!initializeToStandAlone	super initializeToStandAlone.	self initializeWith: (ScriptingSystem formAtKey: 'Painting') deepCopy! !!JoystickMorph methodsFor: 'initialization' stamp: 'sw 8/12/2001 17:26'!initializeToStandAlone	"Circumvent SketchMorph's implementation here"	self initialize! !!JoystickMorph class methodsFor: 'new morph menu' stamp: 'sw 8/2/2001 16:40'!descriptionForPartsBin	^ self partName: 	'Joystick'		categories:		#('Useful')		documentation:	'A joystick-like control'! !!StackMorph methodsFor: 'initialization' stamp: 'sw 8/2/2001 18:14'!initializeToStandAlone		self initialize.	self pageSize: (480 @ 320); color: (Color gray: 0.7).	self borderWidth: 1; borderColor: Color black.	self currentPage extent: self pageSize.	self showPageControls: self fullControlSpecs.	^ self"StackMorph initializedInstance openInHand"! !!StackMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:52'!descriptionForPartsBin	^ self partName:	'Stack'		categories:		#('Presentation')		documentation:	'A database of any sort -- slide show, rolodex, and any point in between'! !!StarMorph methodsFor: 'initialization' stamp: 'sw 7/2/2001 11:07'!initializeToStandAlone	^ self initialize removeHandles! !!StarMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 16:22'!descriptionForPartsBin	^ self partName:	'Star'		categories:		#('Graphics')		documentation:	'A symmetrical polygon in the shape of a star'! !!StarSqueakMorph methodsFor: 'initialization' stamp: 'sw 7/13/2001 22:22'!initializeToStandAlone	self initialize.	self startRunning! !!StarSqueakSlimeMold class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:53'!descriptionForPartsBin	^ self partName:	'SlimeMold'		categories:		#('StarSqueak')		documentation:	'A slime-mold simulation using StarSqueak'! !!StarSqueakTrees methodsFor: 'initialization' stamp: 'sw 7/13/2001 22:32'!initializeToStandAlone	self initialize.	treeTypeSelector _ #tree2.	self setup.  "Run earlier, but need to run again to get the #tree2 used"	self startRunning! !!StarSqueakTrees class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:53'!descriptionForPartsBin	^ self partName:	'Trees'		categories:		#('StarSqueak')		documentation:	'A tree-growing simulation using StarSqueak'! !!StoryboardBookMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:53'!descriptionForPartsBin	^ self partName:	'Storyboard'		categories:		#('Presentation')		documentation:	'A storyboard authoring tool'! !!String methodsFor: 'user interface' stamp: 'sw 8/10/2001 10:41'!openInWorkspaceWithTitle: aTitle	"Open up a workspace with the receiver as its contents, with the given title"	(Workspace new contents: self) openLabel: aTitle! !!StringMorph methodsFor: 'parts bin' stamp: 'sw 8/12/2001 02:04'!initializeToStandAlone	super initializeToStandAlone.	color _ Color black.	font _ nil.	emphasis _ 0.	hasFocus _ false.	self contents: 'String: Shift-click on me to edit'! !!ClockMorph methodsFor: 'initialization' stamp: 'sw 7/12/2001 17:41'!initializeToStandAlone	super initializeToStandAlone.	showSeconds _ true.	self step! !!FrameRateMorph methodsFor: 'initialization' stamp: 'sw 7/19/2001 13:39'!initializeToStandAlone	"Initialize the receiver as a stand-alone entity"	super initializeToStandAlone.	self color: Color blue.	self step! !!StringMorph class methodsFor: 'parts bin' stamp: 'sw 8/12/2001 17:55'!descriptionForPartsBin	^ self partName:	'String'		categories:		#('Text')		documentation:	'A single line of characters, all in the same font.  Can be edited by shift-clicking on it.'! !!ClockMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 01:22'!descriptionForPartsBin	^ self partName:	'Clock'		categories:		#('Useful')		documentation:	'A digital clock'! !!FrameRateMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:49'!descriptionForPartsBin	^ self partName:	'FrameRate'		categories:		#('Useful')		documentation:	'A readout that allows you to monitor the frame rate of your system'! !!SyntaxMorph methodsFor: 'initialization' stamp: 'sw 6/26/2001 10:58'!inAScrollPane	"Answer a scroll pane in which the receiver is scrollable"	^ self inATwoWayScrollPane! !!TabbedPalette methodsFor: 'initialization' stamp: 'sw 8/12/2001 17:58'!initialize	"Initialize the receiver, which was just created via a call to the class's #basicNew"	super initialize.	pageSize _ self defaultPageSize.	self removeEverything.	color _ Color transparent.	borderWidth _ 0.	tabsMorph _ IndexTabs new.	self addMorph: tabsMorph! !!TabbedPalette class methodsFor: 'parts bin' stamp: 'sw 8/12/2001 13:15'!descriptionForPartsBin	^ DescriptionForPartsBin		formalName: 'TabbedPalette'		categoryList: #('Presentation')		documentation: 'A tabbed palette of books'		globalReceiverSymbol: #TabbedPalette		nativitySelector: #authoringPrototype! !!Tetris class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:53'!descriptionForPartsBin	^ self partName:	'Tetris'		categories:		#('Games')		documentation:	'Tetris, yes Tetris'! !!TextMorph methodsFor: 'accessing' stamp: 'sw 6/27/2001 13:45'!getCharacters	"obtain a string value from the receiver"	^ self text string copy! !!TextMorph methodsFor: 'editing' stamp: 'sw 6/30/2001 14:29'!keyStroke: evt	"Handle a keystroke event."	self handleInteraction: [editor readKeyboard] fromEvent: evt.	self updateFromParagraph.	super keyStroke: evt  "sends to keyStroke event handler, if any"! !!TextMorph methodsFor: 'private' stamp: 'sw 7/18/2001 11:15'!setDefaultContentsIfNil	"Set the default contents"	| toUse |	text ifNil:		[toUse _ self valueOfProperty: #defaultContents.		toUse ifNil: [toUse _'Abcdef' asText allBold].		text _ toUse]! !!TextMorph class methodsFor: 'parts bin' stamp: 'sw 8/12/2001 18:00'!descriptionForPartsBin	^ self partName:	'Text'		categories:		#('Text')		documentation:	'A raw piece of text which you can edit into anything you want'! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 8/12/2001 16:20'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu _ MenuMorph new defaultTarget: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu from: {		{'previous project' . { #myWorld . #goBack } }.		{'jump to project...' . { #myWorld . #jumpToProject } }.		{'save project on file...' . { #myWorld  . #saveOnFile } }.		{'load project from file...' . { self  . #loadProject } }.		nil}.	myWorld addUndoItemsTo: menu.		self fillIn: menu from: {		{'restore display (r)' . { World . #restoreMorphicDisplay } }.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'open...' . { self  . #openWindow } }.			{'windows...' . { self  . #windowsDo } }.			{'changes...' . { self  . #changesDo } }}].	self fillIn: menu from: { 		{'help...' . { self  . #helpDo } }.		{'appearance...' . { self  . #appearanceDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: {			{'do...' . { Utilities . #offerCommonRequests} } }].	self fillIn: menu from: { 		nil.		{'objects (o)' . { #myWorld . #activateObjectsTool } . 'A tool for finding and obtaining many kinds of objects'}.		nil.		{'new morph...' . { self  . #newMorph }}.		{'authoring tools...' . { self  . #scriptingDo } }.		{'playfield options...' . { self  . #playfieldDo } }.		{'flaps...'. { self . #flapsDo } }.		{'projects...' . { self  . #projectDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'print PS to file...' . { self  . #printWorldOnFile } }.			{'debug...' . { self  . #debugDo } }}].	self fillIn: menu from: { 		nil.		{'save' . { self  . #saveSession } }.		{'save as...' . { Smalltalk . #saveAs } }.		{'save and quit' . { self  . #saveAndQuit } }.		{'quit' . { self  . #quitSession } }}.	^ menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 8/12/2001 18:04'!newMorph	"The user requested 'new morph' from the world menu.  Put up a menu that allows many ways of obtaining new morphs.  If the preference #classicNewMorphMenu is true, the full form of yore is used; otherwise, a much shortened form is used."	| menu subMenu catDict shortCat class |	menu _ self menu: 'Add a new morph'.	menu 		add: 'from paste buffer' target: myHand action: #pasteMorph;		add: 'from a file...' target: self action: #readMorphFromAFile.	Preferences classicNewMorphMenu ifTrue:		[menu add: 'from alphabetical list' subMenu: self alphabeticalMorphMenu].	menu add: 'grab patch from screen' target: myWorld action: #grabDrawingFromScreen:;		add: 'make new drawing' target: myWorld action: #newDrawingFromMenu:;		add: 'make link to project...' target: self action: #projectThumbnail.	Preferences classicNewMorphMenu ifTrue:		[menu addLine.		catDict _ Dictionary new.		SystemOrganization categories do:			[:cat |			((cat beginsWith: 'Morphic-')					and: [(#('Morphic-Menus' 'Morphic-Support') includes: cat) not])			ifTrue:				[shortCat _ cat copyFrom: 'Morphic-' size+1 to: cat size.				(SystemOrganization listAtCategoryNamed: cat) do:					[:cName | class _ Smalltalk at: cName.					((class inheritsFrom: Morph)						and: [class includeInNewMorphMenu])						ifTrue:						[(catDict includesKey: shortCat) 						ifTrue: [(catDict at: shortCat) addLast: class]						ifFalse: [catDict at: shortCat put: (OrderedCollection with: class)]]]]].		catDict keys asSortedCollection do:			[:categ |			subMenu _ MenuMorph new.			((catDict at: categ) asSortedCollection: [:c1 :c2 | c1 name < c2 name]) do:				[:cl | subMenu add: cl name						target: self						selector: #newMorphOfClass:event:						argument: cl].			menu add: categ subMenu: subMenu]].	self doPopUp: menu.! !!TheWorldMenu methodsFor: 'construction' stamp: 'sw 8/12/2001 18:08'!scriptingMenu	"Build the authoring-tools menu for the world."	^ self fillIn: (self menu: 'authoring tools...') from: { 		{ 'objects (o)' . { #myWorld . #activateObjectsTool }. 'A searchable source of new objects.'}.		nil.  "----------" 		{ 'view trash contents' . { #myWorld . #openScrapsBook:}. 'The place where all your trashed morphs go.'}. 		{ 'empty trash can' . { Utilities . #emptyScrapsBook}. 'Empty out all the morphs that have accumulated in the trash can.'}.		nil.  "----------"		{ 'new scripting area' . { #myWorld . #detachableScriptingSpace}. 'A window set up for simple scripting.'}.		{ 'summary of scripts' . {#myWorld . #printScriptSummary}. 'Produces a summary of scripted objects in the project, and all of their scripts.'}.		{ 'status of scripts' . {#myWorld . #showStatusOfAllScripts}. 'Lets you view the status of all the scripts belonging to all the scripted objects of the project.'}.		{ 'remove all viewers' . {#myWorld . #removeAllViewers}. 'Remove all the Viewers from this project.'}.		nil.  "----------" 		{ 'unlock locked objects' . { #myWorld . #unlockContents}. 'If any items on the world desktop are currently locked, unlock them.'}.                { 'unhide hidden objects' . { #myWorld . #showHiders}. 'If any items on the world desktop are currently hidden, make them visible.'}.        }! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'sw 8/12/2001 01:30'!windowsMenu        "Build the windows menu for the world."        ^ self fillIn: (self menu: 'windows') from: {                  { 'find window' . { #myWorld . #findWindow: }. 'Presents a list of all windows; if you choose one from the list, it becomes the active window.'}.                { 'find changed browsers...' . { #myWorld . #findDirtyBrowsers: }. 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.                { 'find changed windows...' . { #myWorld . #findDirtyWindows: }. 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.'}.			nil.                { 'find a transcript (t)' . { #myWorld . #findATranscript: }. 'Brings an open Transcript to the front, creating one if necessary, and makes it the active window'}.               { 'find a change sorter (C)' . { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window'}.			{ 'find message names (W)' . { #myWorld . #findAMessageNamesWindow: }. 'Brings an open MessageNames window to the front, creating one if necessary, and makes it the active window'}.			 nil.                { #staggerPolicyString . { self . #toggleWindowPolicy }. 'stagger: new windows positioned so you can see a portion of each one.                tile: new windows positioned so that they do not overlap others, if possible.'}.                nil.                { 'collapse all windows' . { #myWorld . #collapseAll }. 'Reduce all open windows to collapsed forms that only show titles.'}.                { 'expand all windows' . { #myWorld . #expandAll }. 'Expand all collapsed windows back to their expanded forms.'}.                { 'close top window (w)' . { SystemWindow . #closeTopWindow }. 'Close the topmost window if possible.'}.                { 'send top window to back (\)' . { SystemWindow . #sendTopWindowToBack  }. 'Make the topmost window become the backmost one, and activate the window just beneath it.'}.			 { 'move windows onscreen' . { #myWorld . #bringWindowsFullOnscreen }. 'Make all windows fully visible on the screen'}.                nil.                { 'delete unchanged windows' . { #myWorld . #closeUnchangedWindows }. 'Deletes all windows that do not have unsaved text edits.'}.                { 'delete non-windows' . { #myWorld . #deleteNonWindows }. 'Deletes all non-window morphs lying on the world.'}.                { 'delete both of the above' . { self . #cleanUpWorld }. 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.'}.        }! !!TheWorldMenu methodsFor: 'action' stamp: 'sw 8/12/2001 16:36'!createStandardPartsBin	"A dead branch -- only reachable now from pre-existing menus that the user may have kept up"	ObjectsTool newStandAlone openInHand! !!TheWorldMenu methodsFor: 'action' stamp: 'sw 8/12/2001 17:13'!launchCustomPartsBin	"A dead branch -- only reachable now from pre-existing menus that the user may have kept up"	ObjectsTool newStandAlone openInHand! !!TrashCanMorph methodsFor: 'initialization' stamp: 'sw 8/12/2001 18:09'!initializeToStandAlone	"Bypass ImageMorph's intervention"	self initialize! !!TrashCanMorph class methodsFor: 'miscellaneous' stamp: 'sw 8/2/2001 15:07'!descriptionForPartsBin	^ self partName:	'Trash'		categories:		#('Useful')		documentation:	'a tool for discarding objects'! !!WatchMorph class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 12:53'!descriptionForPartsBin	^ self partName:	'Watch'		categories:		#('Useful')		documentation:	'An analog clock face'! !!WaveEditor class methodsFor: 'parts bin' stamp: 'sw 8/2/2001 14:52'!descriptionForPartsBin	^ self partName:	'WaveEditor'		categories:		#('Multimedia')		documentation:	'A workbench for seing and editing wave forms'! !!ClockMorph class reorganize!('parts bin' authoringPrototype descriptionForPartsBin)!FrameRateMorph removeSelector: #descriptionForPartsBin!!FrameRateMorph reorganize!('initialization' initialize initializeToStandAlone)('step' step stepTime)!!ClockMorph reorganize!('initialization' initialize initializeToStandAlone)('step' step stepTime)('menu' addCustomMenuItems:hand:)('seconds' showSeconds: toggleShowingSeconds)!StarMorph removeSelector: #authoringPrototype!!StarMorph reorganize!('initialization' defaultColor initialize initializeToStandAlone)('handles' addHandles dragVertex:event:fromHandle: updateHandles)!StandardScriptingSystem removeSelector: #customPartsBin!StandardScriptingSystem removeSelector: #newStandardPartsBin!StandardScriptingSystem removeSelector: #setCustomPartsBinFrom:!BookMorph removeSelector: #wrappedInPartsWindowWithTitle:!Presenter removeSelector: #classNamesForStandardPartsBin!Presenter removeSelector: #createStandardPartsBin!Presenter removeSelector: #customPagesForPartsBin!Presenter removeSelector: #launchCustomPartsBin!Presenter removeSelector: #newStandardPartsBinTitled:includeControls:!Presenter removeSelector: #standardPartsWindow!!Morph class reorganize!('instance creation' new newBounds: newBounds:color: newSticky)('class initialization' initialize)('misc' morphsUnknownToTheirOwners)('new-morph participation' addPartsDescriptorQuadsTo:if: includeInNewMorphMenu initializedInstance newStandAlone partName:categories:documentation:)('scripting' additionsToViewerCategories additionsToViewerCategory: additionsToViewerCategoryBasic additionsToViewerCategoryColorAndBorder additionsToViewerCategoryGeometry additionsToViewerCategoryMiscellaneous additionsToViewerCategoryMotion additionsToViewerCategoryPenUse additionsToViewerCategoryScripts additionsToViewerCategoryTests authoringPrototype helpContributions)('parts bin' supplementaryPartsDescriptions)!AtomMorph removeSelector: #maxVelocity:!B3DMorph removeSelector: #initializeWithCameraPosition:!Morph removeSelector: #addPartsDescriptorQuadsTo:!Morph removeSelector: #addPartsDescriptorQuadsTo:if:!Morph removeSelector: #newMorphDescriptionWithName:categories:documentation:!Morph removeSelector: #partName:categories:documentation:!Morph removeSelector: #standardDescription:categories:documentation:!!CurrentProjectRefactoring class reorganize!('revectoring to current' currentAddGuard: currentBeIsolated currentBeParentTo: currentBeParentToCurrent currentFlapsSuppressed currentFromMyServerLoad: currentInterruptName: currentIsolationHead currentProjectName currentPropagateChanges currentSpawnNewProcessAndTerminateOld: currentToggleFlapsSuppressed xxxCurrent)('miscellaneous' exitCurrentProject newProcessIfUI: projectWithNameOrCurrent: updateProjectFillsIn:)('flaps' isFlapEnabled: showSharedFlaps suppressFlapsString)!"Postscript:"PartsBin initialize.PartsBin cacheAllThumbnails.PartsBin cacheThumbnail:  (Thumbnail new makeThumbnailFromForm: (Form extent: 24@24 depth: 16 fromArray: #( 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 78340 74083 65537 65537 65537 65537 65537 65537 65537 65537 65537 78340 279065092 627245057 65537 65537 65537 65537 65537 65537 65537 65537 65537 560140450 1254508230 560136193 279065092 839131491 279052289 560144739 65537 65537 65537 65537 69794 279052289 1040464388 1040454818 560145763 627259908 694353921 906244612 65537 65537 65537 65537 839142086 346172771 627256611 759365633 759370914 279063875 65537 1040453794 560144739 65537 65537 69794 839132515 279061827 1038357666 1103364097 757273730 77091 70818 761467042 65537 65537 65537 69794 627249314 761462785 344075523 344069250 344064001 70786 77091 75107 279052289 65537 65537 279060835 279063907 344064001 344064001 70786 65537 70786 757280035 76131 560136193 65537 65537 74083 70818 344069250 70786 65537 65537 344064001 65537 65537 65537 65537 65537 69794 346172707 77059 70754 65537 341972066 65537 65537 65537 65537 65537 65537 74083 279052289 65537 341966849 341966849 753079394 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 750977025 748879873 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 70722 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 70722 339869697 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 748879873 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 746782721 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 746782721 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 746782721 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537 65537) offset: 0@0)) forSymbol: #Trees.PartsBin cacheThumbnail:  (Thumbnail new makeThumbnailFromForm: (Form extent: 24@24 depth: 16 fromArray: #( 65537 65537 65537 65537 65537 65537 68704 484449504 207618049 65537 65537 65537 65537 65537 65537 65537 65537 65537 138422592 1730176800 692063328 138415200 207619104 65537 65537 65537 65537 65537 65537 65537 138422592 1246186055 761271456 415247712 830479584 138412033 65537 65537 65537 65537 65537 65537 69211296 692071776 484447392 761285191 2076197376 346030081 65537 67648 276826176 65537 65537 65537 66592 207622272 207622272 761294688 1592215072 346030081 65537 69213408 1176510720 65537 65537 65537 65537 65537 69208128 484456896 1107305760 207618049 65537 69213408 899685600 65537 65537 65537 65537 65537 65537 69209184 207620160 65537 65537 67648 207620160 65537 66592 69206017 65537 65537 65537 65537 65537 65537 65537 66592 69207072 69208128 207622272 207620160 65537 65537 65537 65537 65537 65537 65537 69208128 138414144 207624384 553657632 553652352 65537 65537 65537 65537 65537 65537 65537 207627552 484446336 484459008 1453340071 761272512 69206017 65537 69206017 65537 65537 65537 65537 276833575 622859424 622880544 485970560 622858368 69207072 138415200 207620160 65537 65537 65537 65537 69209184 207620160 346042752 1038099744 276825120 69209184 553660800 761272512 69206017 65537 65537 65537 65537 65537 69210240 276826176 69206017 69212352 1176532896 1730162016 138412033 65537 65537 65537 65537 65537 65537 65537 65537 138419424 1453342191 2006987136 138412033 65537 65537 65537 65537 65537 65537 65537 65537 138418368 968908512 1245716736 69206017 65537 65537 65537 66592 65537 66592 207621216 138413088 138417312 622866816 622858368 65537 138415200 207619104 66592 207624384 276825120 69209184 692073888 415238208 138417312 830484864 415238208 69208128 484456896 692063328 67648 692069679 761270400 138418368 1245727303 692063328 69209184 553656576 276826176 69209184 761286247 1245713568 67648 553663968 692065440 207622272 553658688 346031136 66592 138415200 138414144 207621216 415246656 553650240 65537 207624384 484449504 346034304 207621216 69206017 65537 65537 68704 346032192 138415200 138412033 65537 69211296 761284128 830477472 138412033 65537 65537 65537 65537 69206017 65537 65537 65537 70816 1107320551 1453332672 69206017 65537 65537 65537 65537 65537 65537 65537 65537 67648 692084448 968888448 65537 65537 65537 65537 65537 65537 65537 65537) offset: 0@0)) forSymbol: #SlimeMold.Preferences addPreference: #classicNewMorphMenu categories:  #(morphic menus) default: false balloonHelp: 'if true, the full classic "New Morph" menu will be put up when "new morph" is requested from the desktop menu; if false, the nested menus are not offered in the "New Morph" menu, so the user will need to use the Objects tool or the various flaps, or else the "sample instance" feature in class-list and message-list menus, to obtain new morphs'.!