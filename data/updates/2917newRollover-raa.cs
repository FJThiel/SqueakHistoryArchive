'From Squeak2.9alpha of 17 July 2000 [latest update: #2965] on 7 November 2000 at 5:19:58 pm'!"Change Set:		newRolloverDate:			7 November 2000Author:			Bob Arning- change morph rollover indicator to use similar implementation to new drop shadows so that the shape can be better mimiced"!!Morph methodsFor: 'drawing' stamp: 'RAA 11/7/2000 15:52'!drawDropShadowOn: aCanvas	aCanvas 		translateBy: self shadowOffset 		during: [ :shadowCanvas |			shadowCanvas shadowColor: self shadowColor.			shadowCanvas roundCornersOf: self during: [ shadowCanvas drawMorph: self ]		].! !!Morph methodsFor: 'drawing' stamp: 'RAA 11/7/2000 17:14'!drawRolloverBorderOn: aCanvas	| colorToUse offsetToUse myShadow newForm f |	colorToUse _ self valueOfProperty: #rolloverColor ifAbsent: [Color blue alpha: 0.5].	offsetToUse _ self valueOfProperty: #rolloverWidth ifAbsent: [10@10].	self hasRolloverBorder: false.	myShadow _ self shadowForm.	self hasRolloverBorder: true.	myShadow offset: 0@0.	f _ ColorForm extent: myShadow extent depth: 1.	myShadow displayOn: f.	f colors: {Color transparent. colorToUse}.	newForm _ Form extent: offsetToUse * 2 + myShadow extent depth: 32.     (WarpBlt current toForm: newForm)		sourceForm: f;		cellSize: 2; 		combinationRule: 3;		copyQuad: f boundingBox innerCorners toRect: newForm boundingBox.	aCanvas 		translateBy: offsetToUse negated		during: [ :shadowCanvas |			shadowCanvas shadowColor: colorToUse.			shadowCanvas paintImage: newForm at: self position.		].! !!Morph methodsFor: 'drawing' stamp: 'RAA 11/7/2000 15:55'!expandFullBoundsForDropShadow	| delta |	delta _ self shadowOffset.	delta x >= 0 		ifTrue:[fullBounds _ fullBounds right: fullBounds right + delta x]		ifFalse:[fullBounds _ fullBounds left: fullBounds left + delta x].	delta y >= 0		ifTrue:[fullBounds _ fullBounds bottom: fullBounds bottom + delta y]		ifFalse:[fullBounds _ fullBounds top: fullBounds top + delta y]! !!Morph methodsFor: 'drawing' stamp: 'RAA 11/7/2000 16:22'!expandFullBoundsForRolloverBorder	| delta |	delta _ self valueOfProperty: #rolloverWidth ifAbsent: [10@10].	fullBounds _ fullBounds expandBy: delta.! !!Morph methodsFor: 'drawing' stamp: 'RAA 11/7/2000 15:56'!fullBounds	fullBounds ifNil: [		fullBounds _ self bounds.		self hasDropShadow ifTrue: [self expandFullBoundsForDropShadow].		self hasRolloverBorder ifTrue: [self expandFullBoundsForRolloverBorder].		submorphs size > 0 ifTrue: [			submorphs do: [:m | (m visible)					ifTrue: [fullBounds _ fullBounds quickMerge: m fullBounds]]].	].	^ fullBounds! !!Morph methodsFor: 'drawing' stamp: 'RAA 11/7/2000 15:53'!fullDrawOn: aCanvas	"Draw the full Morphic structure on the given Canvas"	self visible ifFalse: [^ self].	(self hasProperty: #errorOnDraw) ifTrue:[^self drawErrorOn: aCanvas].	"Note: At some point we should generalize this into some sort of 	multi-canvas so that we can cross-optimize some drawing operations."	"Pass 1: Draw eventual drop-shadow"	self hasDropShadow ifTrue: [self drawDropShadowOn: aCanvas].	self hasRolloverBorder ifTrue: [self drawRolloverBorderOn: aCanvas].	"Pass 2: Draw receiver itself"	aCanvas roundCornersOf: self during:[		aCanvas drawMorph: self.		self drawSubmorphsOn:aCanvas.		self drawDropHighlightOn: aCanvas.		self drawMouseDownHighlightOn: aCanvas].! !!Morph methodsFor: 'debug and other' stamp: 'RAA 11/7/2000 16:17'!addMouseActionIndicatorsWidth: anInteger color: aColor	self deleteAnyMouseActionIndicators.	self changed.	self hasRolloverBorder: true.	self setProperty: #rolloverWidth toValue: anInteger@anInteger.	self setProperty: #rolloverColor toValue: aColor.	fullBounds _ nil.	self changed.! !!Morph methodsFor: 'debug and other' stamp: 'RAA 11/7/2000 16:18'!deleteAnyMouseActionIndicators	(self valueOfProperty: #mouseActionIndicatorMorphs ifAbsent: [#()]) do: [ :each |		each deleteWithSiblings		"one is probably enough, but be safe"	].	self removeProperty: #mouseActionIndicatorMorphs.	self hasRolloverBorder: false.	self removeProperty: #rolloverWidth.	self removeProperty: #rolloverColor.	self changed.! !!Morph methodsFor: 'drop shadows' stamp: 'RAA 11/7/2000 15:53'!hasRolloverBorder	^self valueOfProperty: #hasRolloverBorder ifAbsent:[false]! !!Morph methodsFor: 'drop shadows' stamp: 'RAA 11/7/2000 15:54'!hasRolloverBorder: aBool	aBool		ifTrue:[self setProperty: #hasRolloverBorder toValue: true]		ifFalse:[self removeProperty: #hasRolloverBorder]! !