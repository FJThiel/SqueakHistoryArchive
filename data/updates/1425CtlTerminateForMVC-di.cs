'From Squeak 2.5 of August 6, 1999 on 7 September 1999 at 11:28:22 am'!"Change Set:		CtlTerminateForMVCDate:			7 September 1999Author:			Dan IngallsBrackets a few more keyboard-induced methods with terminateAndInitializeAround:.Also cleans up a number of methods that weren't using this construct."!!Paragraph methodsFor: 'selecting' stamp: 'di 9/7/1999 08:40'!clickAt: clickPoint for: model controller: aController	"Give sensitive text a chance to fire.  Display flash: (100@100 extent: 100@100)."	| startBlock action range box boxes |	action _ false.	startBlock _ self characterBlockAtPoint: clickPoint.	(text attributesAt: startBlock stringIndex) 		do: [:att | att mayActOnClick ifTrue:				[range _ text rangeOf: att startingAt: startBlock stringIndex.				boxes _ self selectionRectsFrom: (self characterBlockForIndex: range first) 							to: (self characterBlockForIndex: range last).				box _ boxes detect: [:each | each containsPoint: clickPoint]							ifNone: [^ action].				Utilities awaitMouseUpIn: box repeating: []					ifSucceed: [aController self terminateAndInitializeAround:								[(att actOnClickFor: model) ifTrue: [action _ true]]].				]].	^ action! !!PluggableButtonController methodsFor: 'button activity' stamp: 'di 9/7/1999 08:44'!yellowButtonActivity	"Invoke the model's menu.  This is option-click, NOT the normal button press."	| menu |	menu _ view getMenu: false.	menu == nil		ifTrue: [sensor waitNoButton]		ifFalse: [self terminateAndInitializeAround: [menu invokeOn: model]].! !!ScrollController methodsFor: 'control defaults' stamp: 'di 9/7/1999 08:46'!pluggableYellowButtonActivity: shiftKeyState	"Invoke the model's menu."	| menu sel |	menu _ view getMenu: shiftKeyState.	menu == nil		ifTrue: [sensor waitNoButton]		ifFalse: [(sel _ menu startUp) ifNil: [^ self].				self terminateAndInitializeAround: [model perform: sel orSendTo: self]].! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'di 9/7/1999 08:41'!fileItIn	"Make a Stream on the text selection and fileIn it.	 1/24/96 sw: moved here from FileController; this function can be useful from any text window that shows stuff in chunk format"	| selection |	selection _ self selection.	self terminateAndInitializeAround:		[(ReadWriteStream on: selection string from: 1 to: selection size) fileIn].! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'di 9/7/1999 08:44'!spawnWorkspace	| toUse |	self selectLine.	toUse _ self selection asString.	toUse size > 0 ifFalse:		[toUse _ paragraph text string.		toUse size > 0 ifFalse: [^ self flash]].	"NB: BrowserCodeController's version does a cancel here"	self terminateAndInitializeAround:		[Utilities openScratchWorkspaceLabeled: 'Untitled' contents: toUse]! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:40'!cancel: characterStream 	"Cancel unsubmitted changes.  Flushes typeahead.  1/12/96 sw	 1/22/96 sw: put in control terminate/init"	sensor keyboard.	self terminateAndInitializeAround: [self cancel].	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:31'!compareToClipboard: characterStream 	"Compare the receiver to the text on the clipboard.  Flushes typeahead.  5/1/96 sw"	sensor keyboard.		self terminateAndInitializeAround: [self compareToClipboard].	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:23'!doIt: characterStream 	"Called when user hits cmd-d.  Select the current line, if relevant, then evaluate and execute.  2/1/96 sw.	2/29/96 sw: don't call selectLine; it's done by doIt now"	sensor keyboard.		self terminateAndInitializeAround: [self doIt].	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:25'!inspectIt: characterStream 	"Inspect the selection -- invoked via cmd-i.  If there is no current selection, use the current line.  1/17/96 sw	 2/29/96 sw: don't call selectLine; it's done by inspectIt now"	sensor keyboard.		"flush character"	self terminateAndInitializeAround: [self inspectIt].	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:25'!printIt: characterStream 	"Print the results of evaluting the selection -- invoked via cmd-p.  If there is no current selection, use the current line.  1/17/96 sw	 2/29/96 sw: don't call selectLine now, since it's called by doIt"	sensor keyboard.		"flush character"	self terminateAndInitializeAround: [self printIt].	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:43'!save: characterStream	"Submit the current text.  Equivalent to 'accept' 1/18/96 sw	 Keeps typeahead."	sensor keyboard.		"flush character"	self closeTypeIn: characterStream.	self terminateAndInitializeAround: [self accept].	^ true! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:43'!spawnIt: characterStream	"Triggered by Cmd-o; spawn a new code window, if it makes sense."	sensor keyboard.	self terminateAndInitializeAround: [self spawn].	^ true! !!ParagraphEditor methodsFor: 'typing support' stamp: 'di 9/7/1999 11:26'!dispatchOnEnterWith: typeAheadStream	"Enter key hit.  Treat is as an 'accept', viz a synonym for cmd-s.  If cmd key is down, treat is as a synonym for print-it. "	sensor keyboard.  "consume enter key"	self terminateAndInitializeAround: [	sensor commandKeyPressed		ifTrue:			[self printIt.]		ifFalse: 			[self closeTypeIn: typeAheadStream.			self accept].	].	^ true! !!ParagraphEditor methodsFor: 'do-its' stamp: 'di 9/7/1999 11:25'!inspectIt	"1/13/96 sw: minor fixup"	| result |	result _ self evaluateSelection.	((result isKindOf: FakeClassPool) or: [result == #failedDoit])			ifTrue: [view flash]			ifFalse: [result inspect].! !!ParagraphEditor methodsFor: 'do-its' stamp: 'di 9/7/1999 08:42'!objectsReferencingIt	"Open a list inspector on all objects that reference the object that results when the current selection is evaluated.  "	| result |	self terminateAndInitializeAround: [	result _ self evaluateSelection.	((result isKindOf: FakeClassPool) or: [result == #failedDoit])		ifTrue: [view flash]		ifFalse: [Smalltalk					browseAllObjectReferencesTo: result					except: #()					ifNone: [:obj | view topView flash]].	]! !!StringHolder methodsFor: 'code pane menu' stamp: 'di 9/7/1999 11:27'!spawn: contentsString	(Workspace new contents: contentsString) openLabel: 'Workspace'! !!StringHolderController methodsFor: 'editing keys' stamp: 'di 9/7/1999 08:47'!dispatchOnEnterWith: typeAheadStream	"Enter key hit.  Treat is as an 'accept', viz a synonym for cmd-s.  If cmd key is down, treat is as a synonym for print-it.  2/7/96 sw.	2/29/96 sw: fixed erratic behavior in the cmd-key-down case -- was not always giving the 'select-line-first' behavior when the selection was empty."	sensor keyboard.  "consume enter key"	sensor commandKeyPressed		ifTrue:			[self printIt.]		ifFalse: 			[self closeTypeIn: typeAheadStream.			self terminateAndInitializeAround: [self accept]].	^ true! !