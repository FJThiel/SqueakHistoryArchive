'From Squeak3.1alpha of 5 February 2001 [latest update: #3618] on 16 February 2001 at 5:18:09 pm'!"Change Set:		suntax2Date:			16 February 2001Author:			Bob ArningAdded a few more controls for tweaking appearance in universal scriptors- one toggles between alans experimental and roughly what existed before- one allows altering the size of various (at this moment - 1) spacing components for tighter or wider look"!AlignmentMorph subclass: #SyntaxMorph	instanceVariableNames: 'parseNode markerMorph '	classVariableNames: 'AllSpecs ContrastFactor SizeScaleFactor '	poolDictionaries: ''	category: 'Morphic-Tile Scriptors'!!MethodNode methodsFor: 'tiles' stamp: 'RAA 2/16/2001 15:44'!asMorphicSyntaxIn: parent		^parent		methodNodeInner: self 		selectorOrFalse: selectorOrFalse 		precedence: precedence 		arguments: arguments 		temporaries: temporaries 		primitive: primitive 		block: block! !!MethodNode methodsFor: 'tiles' stamp: 'RAA 2/16/2001 15:39'!asMorphicSyntaxUsing: aClass		^aClass methodNodeOuter: self		! !!SyntaxMorph methodsFor: 'menus' stamp: 'RAA 2/16/2001 17:08'!finalAppearanceTweaks	SizeScaleFactor ifNil: [SizeScaleFactor _ 1.0]. 	self allMorphsDo: [ :each |		(each respondsTo: #setDeselectedColor) ifTrue: [each setDeselectedColor].		(each hasProperty: #variableInsetSize) ifTrue: [			each layoutInset: 				((each valueOfProperty: #variableInsetSize) * SizeScaleFactor) rounded.		].	].! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/16/2001 17:02'!addTemporaryControls	| row stdSize |		stdSize _ 8@8.	row _ AlignmentMorph newRow		color: Color transparent;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	self addMorph: row.	{		Morph new			extent: stdSize; 			setBalloonText: 'Change the contrast';			on: #mouseUp send: #controlContrast: to: self.		Morph new			extent: stdSize; 			color: Color green;			setBalloonText: 'Change basic spacing';			on: #mouseUp send: #controlSpacing: to: self.		Morph new			extent: stdSize; 			color: Color red;			setBalloonText: 'Change basic style';			on: #mouseUp send: #changeBasicStyle to: self.	} do: [ :each |		row addMorphBack: each.		row addMorphBack: (self transparentSpacerOfSize: stdSize).	].! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/16/2001 16:34'!changeBasicStyle	self removeAllMorphs.	self setProperty: #alansNewStyle toValue: self alansTest1 not.	self methodNodeOuter: parseNode! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/16/2001 17:06'!messageNode: aNode receiver: receiver selector: selector keywords: key arguments: args	| keywords column row receiverMorph firstArgMorph receiverWidthmessageWidth onlyOne nodeWithNilReceiver isAConditional testAndReceiver |	isAConditional _ #(ifTrue: ifFalse: ifTrue:ifFalse: ifFalse:ifTrue:) includes: key.	receiver ifNotNil: ["i.e. not a cascade"		testAndReceiver _ self.		self specialBlockFormatting ifTrue: [			isAConditional ifTrue: [				testAndReceiver _ self addRow: #keyword1 on: nil.				self 					specialColor: (Color r: 1.0 g: 0.935 b: 0.774) 					andBorder: (Color r: 0.581 g: 0.774 b: 0.903).				self useRoundedCorners.				self layoutInset: 6.				self setProperty: #variableInsetSize toValue: 6.				testAndReceiver addNoiseString: 'Test'			].		].		receiverMorph _ receiver asMorphicSyntaxIn: testAndReceiver.		self specialBlockFormatting ifTrue: [			isAConditional ifTrue: [self setConditionalPartStyle: receiverMorph].		].	].	keywords _ key keywords.	args size = 0 ifTrue: [		row _ (self addSingleKeywordRow: key) layoutInset: 1.		^ row parseNode: selector	].	receiverWidth _ receiver				ifNil: [0]				ifNotNil: [receiverMorph fullBounds width].	onlyOne _ args size = 1.	(receiverWidth <= 80 and: [onlyOne]) ifTrue: [		row _ (self addSingleKeywordRow: keywords first) layoutInset: 1.		row parseNode: selector.		firstArgMorph _ args first asMorphicSyntaxIn: self.		receiver ifNil: [^ self].		(firstArgMorph fullBounds height > 100				or: [firstArgMorph fullBounds width > 250])			ifTrue: [self foldMessageOneArg].		^ self	].	nodeWithNilReceiver _ aNode copy receiver: nil.	isAConditional & self specialBlockFormatting ifTrue: [		self listDirection: #topToBottom.	].	column _ self addColumn: #keyword1 on: nodeWithNilReceiver.	messageWidth _ 0.	keywords		with: (args copyFrom: 1 to: keywords size)		do: [:kwd :arg |			isAConditional ifTrue: [				column addMorphBack: (column transparentSpacerOfSize: 3@3).			].			(row _ column addRow: #keyword2 on: nodeWithNilReceiver) borderWidth: 1;				parseNode: (nodeWithNilReceiver as: 						(onlyOne ifTrue: [MessageNode] ifFalse: [MessagePartNode]));				 borderColor: row stdBorderColor.			isAConditional ifTrue: [row addMorphBack: (row transparentSpacerOfSize: 20@6)].			row addToken: kwd				type: #keyword2				on: (onlyOne ifTrue: [SelectorNode new key: kwd code: nil "fill this in?"]								ifFalse: [KeyWordNode new]).			arg asMorphicSyntaxIn: row.			messageWidth _ messageWidth + row fullBounds width].	receiverMorph ifNil: [^self].	self alansTest1 ifTrue: [^self].	receiverWidth + messageWidth < 350 ifTrue: [		isAConditional ifFalse: [self unfoldMessage].		^self	].	((receiverWidth > 200						or: [receiverWidth > 80								and: [column fullBounds height > 20]])					or: [receiverMorph fullBounds width > 30							and: [column fullBounds height > 100									or: [column fullBounds width > 250]]])				ifTrue: [^ self foldMessage]! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/16/2001 15:43'!methodNodeInner: aNode selectorOrFalse: selectorOrFalse precedence: precedence arguments: arguments temporaries: temporaries primitive: primitive block: block	| header tempMorph selNode |	selNode _ selectorOrFalse class == SelectorNode 		ifTrue: [selectorOrFalse] 		ifFalse: [SelectorNode new key: selectorOrFalse code: nil].	header _ self addRow: Color white on: selNode.	precedence = 1		ifTrue: [header addToken: aNode selector type: #keyword1 on: selNode]		ifFalse: [aNode selector keywords with: arguments do:					[:kwd :arg | 					header addToken: kwd type: #keyword2 on: selNode.					(arg asMorphicSyntaxIn: header) color: #blockarg2]].	aNode addCommentToMorph: self.	temporaries size > 0 ifTrue: [		tempMorph _ self addRow: #tempVariable on: (MethodTempsNode new).		temporaries do: [:temp | temp asMorphicSyntaxIn: tempMorph ]				separatedBy: [tempMorph addMorphBack: (tempMorph transparentSpacerOfSize: 4@4)]].	(primitive > 0 and: [(primitive between: 255 and: 519) not]) ifTrue:		["Dont decompile <prim> for, eg, ^ self "		self addTextRow: (String streamContents: [ :strm | aNode printPrimitiveOn: strm])].	block asMorphicSyntaxIn: self.	^ self! !!SyntaxMorph methodsFor: 'node to morph' stamp: 'RAA 2/16/2001 16:59'!methodNodeOuter: aNode	| block |		self borderWidth: 0.	self addTemporaryControls.	aNode asMorphicSyntaxIn: self.	block _ self submorphs last.	block submorphs size = 1 ifTrue: [^ self].	"keep '^ self' if that is the only thing in method"	block submorphs last decompile string = '^  self ' ifTrue: [		block submorphs last delete].	^ self! !!SyntaxMorph methodsFor: 'formatting options' stamp: 'RAA 2/16/2001 16:36'!alansTest1		| root |	root _ self rootTile ifNil: [self].	^root valueOfProperty: #alansNewStyle ifAbsent: [true]! !!SyntaxMorph methodsFor: 'formatting options' stamp: 'RAA 2/16/2001 17:04'!controlSpacing: evt	| handle origin scale startingContrastX |	SizeScaleFactor ifNil: [SizeScaleFactor _ 1.0].	scale _ 200.0.	startingContrastX _ SizeScaleFactor * scale.	origin _ evt hand position.	handle _ HandleMorph new		forEachPointDo: [:newPoint | 			SizeScaleFactor _ (newPoint x - origin x + startingContrastX) / scale min: 1.0 max: 0.0.			self finalAppearanceTweaks.		]		lastPointDo: [:newPoint |			handle deleteBalloon.			self halo doIfNotNil: [:halo | halo addHandles].		].	evt hand attachMorph: handle.	handle setProperty: #helpAtCenter toValue: true.	handle setBalloonText:'Move cursor left or right to change contrast.Click when done.'.	handle startStepping! !!SyntaxMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 2/16/2001 15:37'!methodNodeOuter: aNode	^(self column: #method on: aNode) methodNodeOuter: aNode! !