'From Squeak2.9alpha of 13 June 2000 [latest update: #2915] on 11 November 2000 at 6:14:52 pm'!"Change Set:		213MultiPattern-smaDate:			11 November 2000Author:			Stefan Matthias AustI found an old changeset from Ned Konz suggesting multiple patterns in a file list. I liked that idea and implemented a slightly different approach. Instead of using CR to separate patterns (I still hope someday someone will change the file list to accept patterns on CR) I use ';' which is at least on Windows the way to do this kind of muli-patterns.  You can now use '*.st; *.cs' to browse both source and change sets. I also refactored the sortBlock."!!FileList methodsFor: 'volume list and pattern' stamp: 'sma 11/11/2000 18:06'!listForPattern: pat	"Make the list be those file names which match the pattern."	| sizePad newList |	newList _ (self entriesMatching: pat) asSortedCollection: self sortBlock.	sizePad _ (newList inject: 0 into: [:mx :entry | mx max: (entry at: 5)])					asStringWithCommas size - 1.	newList _ newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList asArray ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	^ newList asArray! !!FileList methodsFor: 'private' stamp: 'sma 11/11/2000 17:00'!entriesMatching: patternString	"Answer a list of directory entries which match the patternString.	The patternString may consist of multiple patterns separated by ';'.	Each pattern can include a '*' or '#' as wildcards - see String>>match:"	| entries patterns |	entries _ directory entries.	patterns _ patternString findTokens: ';'.	(patterns anySatisfy: [:each | each = '*'])		ifTrue: [^ entries].	^ entries select: [:entry | 		entry isDirectory or: [patterns anySatisfy: [:each | each match: entry first]]]! !!FileList methodsFor: 'private' stamp: 'sma 11/11/2000 17:04'!sortBlock	"Answer block to decide what order to display the directory entries."	^ [ :x :y |			(x isDirectory = y isDirectory) 				ifTrue: [  					"sort by user-specified criterion"					sortMode = #name 						ifTrue: [(x name compare: y name) <= 2]						ifFalse: [ sortMode = #date							ifTrue: [ x modificationTime = y modificationTime									ifTrue: [ (x name compare: y name) <= 2 ]									ifFalse: [ x modificationTime > y modificationTime ] ]							ifFalse: [ "size"								x fileSize = y fileSize 									ifTrue: [ (x name compare: y name) <= 2 ]									ifFalse: [ x fileSize > y fileSize ] ] ] ]				ifFalse: [					"directories always precede files"					x isDirectory ] ]! !!FileList2 methodsFor: 'as yet unclassified' stamp: 'sma 11/11/2000 18:10'!listForPattern: pat	"Make the list be those file names which match the pattern."	| sizePad newList |	directory ifNil: [^#()].	newList _ directory entries select: [:entry | fileSelectionBlock value: entry value: pat].	newList _ newList asSortedCollection: self sortBlock.	sizePad _ (newList inject: 0 into: [:mx :entry | mx max: (entry at: 5)])					asStringWithCommas size - 1.	newList _ newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	^ newList asArray! !!PluggableFileList methodsFor: 'file list menu' stamp: 'sma 11/11/2000 18:14'!listForPattern: pat	"Make the list be those file names which match the pattern."	| entries sizePad newList allFiles |	entries _ directory entries select: fileFilterBlock.	sizePad _ (entries inject: 0 into: [:mx :entry | mx max: (entry at: 5)])					asStringWithCommas size - 1.	newList _ (SortedCollection new: 30) sortBlock: self sortBlock.	allFiles _ pat = '*'.	entries do:		[:entry | "<dirflag><name><creationTime><modificationTime><fileSize>"		(allFiles or: [entry isDirectory or: [pat match: entry first]]) ifTrue:			[newList add: entry]].	newList _ newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList asArray ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	newFiles _ OrderedCollection new.	^ newList asArray.! !