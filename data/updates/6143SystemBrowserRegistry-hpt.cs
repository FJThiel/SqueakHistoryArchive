'From Squeak3.8alpha of 8 September 2004 [latest update: #6139] on 17 September 2004 at 2:41:51 pm'!"Change Set:		SystemBrowserRegistry-hptDate:			5 August 2004Author:			Hernan Tylimmd: added  self flag: #yoCharCases to bowsIt.This changesets adds a new AppRegistry, the SystemBrowser registry so it can be used by all the browsers (the squeak browser, the refactoring browser, whisker, omnibrowser, ...).Please note that this changeset only adds the new registry,  register the default squeak browser and change the open menu so it will use the registry instead of a hardcoded 'Browser' class.v2: Changed PateUpMorph>>defaultDesktopCommandKeyTriplets so the <cmd-b> shortcut on the desktop will use the registry. Changed ParagraphEditor>>browseIt so the <cmd>-b shortcut over text-panes will use the registry.Added PackagePaneBrowser to the registryv3:Hooked the #browserShowsPackagePane preference to the setting of the default browser on the SystemRegistry. Changed Preferences>>browseToolClass to return the class set on the SystemBrowser registry"!AppRegistry subclass: #SystemBrowser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Applications'!!SystemBrowser commentStamp: '<historical>' prior: 0!This is the AppRegistry class for class browsing!!Browser class methodsFor: 'instance creation' stamp: 'hpt 8/5/2004 20:11'!fullOnClass: aClass selector: aSelector	"Open a new full browser set to class."	| brow classToUse |	classToUse _ SystemBrowser default.	brow _ classToUse new.	brow setClass: aClass selector: aSelector.	^ classToUse 		openBrowserView: (brow openEditString: nil)		label: brow labelString! !!Browser class methodsFor: 'class initialization' stamp: 'hpt 8/5/2004 19:41'!initialize	"Browser initialize"	RecentClasses := OrderedCollection new.	self 		registerInFlapsRegistry;		registerInAppRegistry	! !!Browser class methodsFor: 'class initialization' stamp: 'hpt 8/5/2004 19:41'!registerInAppRegistry	"Register the receiver in the SystemBrowser AppRegistry"	SystemBrowser register: self.! !!Browser class methodsFor: 'class initialization' stamp: 'hpt 8/5/2004 19:42'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self].	SystemBrowser unregister: self.! !!PackagePaneBrowser class methodsFor: 'class initialization' stamp: 'hpt 8/5/2004 20:12'!initialize	self registerInFlapsRegistry;		registerInAppRegistry.! !!PackagePaneBrowser class methodsFor: 'class initialization' stamp: 'hpt 8/5/2004 20:12'!registerInAppRegistry	"Register the receiver in the SystemBrowser AppRegistry"	SystemBrowser register: self.! !!PackagePaneBrowser class methodsFor: 'class initialization' stamp: 'hpt 8/5/2004 20:12'!unload	"Unload the receiver from global registries"	self environment at: #Flaps ifPresent: [:cl |	cl unregisterQuadsWithReceiver: self].	SystemBrowser unregister: self.! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'md\ 9/17/2004 14:40'!browseIt	"Launch a browser for the current selection, if appropriate"	| aSymbol anEntry brow |	self flag: #yoCharCases.	Preferences alternativeBrowseIt ifTrue: [^ self browseClassFromIt].	self lineSelectAndEmptyCheck: [^ self].	(aSymbol _ self selectedSymbol) isNil ifTrue: [^ view flash].	self terminateAndInitializeAround:		[aSymbol first isUppercase			ifTrue:				[anEntry _ (Smalltalk					at: aSymbol					ifAbsent:						[ self systemNavigation browseAllImplementorsOf: aSymbol.						^ nil]).				anEntry isNil ifTrue: [^ view flash].				(anEntry isKindOf: Class)					ifFalse:	[anEntry _ anEntry class].				brow _ SystemBrowser default new.				brow setClass: anEntry selector: nil.				brow class					openBrowserView: (brow openEditString: nil)					label: 'System Browser']			ifFalse:				[ self systemNavigation browseAllImplementorsOf: aSymbol]]! !!ParagraphEditor methodsFor: 'editing keys' stamp: 'hpt 8/5/2004 20:21'!browseIt: characterStream 	"Triggered by Cmd-B; browse the thing represented by the current selection, if plausible.  1/18/96 sw"	sensor keyboard.		"flush character"	self browseIt.	^ true! !!PasteUpMorph methodsFor: 'world menu' stamp: 'hpt 8/5/2004 20:28'!defaultDesktopCommandKeyTriplets	"Answer a list of triplets of the form		<key> <receiver> <selector>   [+ optional fourth element, a <description> for use in desktop-command-key-help]that will provide the default desktop command key handlers.  If the selector takes an argument, that argument will be the command-key event"	^ {		{ $b.	SystemBrowser.					#defaultOpenBrowser.					'Open a new System Browser'}.		{ $k.	Workspace.						#open.									'Open a new, blank Workspace'}.		{ $m.	self.							#putUpNewMorphMenu.					'Put up the "New Morph" menu'}.		{ $o.	ActiveWorld.					#activateObjectsTool.						'Activate the "Objects Tool"'}.		{ $r.	ActiveWorld.					#restoreMorphicDisplay.					'Redraw the screen'}.				{ $t.		self. 							#findATranscript:.						'Make a System Transcript visible'}.		{ $w.	SystemWindow.					#closeTopWindow.						'Close the topmost window'}.		{ $z.	self.							#undoOrRedoCommand.					'Undo or redo the last undoable command'}.		{ $C.	self.							#findAChangeSorter:.					'Make a Change Sorter visible'}.		{ $F.	CurrentProjectRefactoring.		#currentToggleFlapsSuppressed.			'Toggle the display of flaps'}.		{ $L.	self.							#findAFileList:.							'Make a File List visible'}.		{ $N.    self.							#toggleClassicNavigatorIfAppropriate.	'Show/Hide the classic Navigator, if appropriate'}.		{ $P.	self.							#findAPreferencesPanel:.				'Activate the Preferences tool'}.		{ $R.	self. 							#openRecentSubmissionsBrowser:	.		'Make a Recent Submissions browser visible'}.		{ $W.	self. 							#findAMessageNamesWindow:.			'Make a MessageNames tool visible'}.		{ $Z.	ChangeList. 						#browseRecentLog.			'Browse recently-logged changes'}.		{ $\.	SystemWindow. 					#sendTopWindowToBack.					'Send the top window to the back'}.}! !!Preferences class methodsFor: 'hard-coded prefs' stamp: 'hpt 8/6/2004 23:22'!browseToolClass	"This method is used for returning the appropiate class for the #browserShowsPackagePane preference. Now that preference modifies the registry so here we query directly to the registry"	^ SystemBrowser default.! !!SystemBrowser class methodsFor: 'as yet unclassified' stamp: 'hpt 8/5/2004 20:27'!defaultOpenBrowser	^self default openBrowser! !!SystemBrowser class methodsFor: 'as yet unclassified' stamp: 'hpt 8/6/2004 23:32'!initialize	| pref |	pref _ Preferences preferenceAt: #browserShowsPackagePane.	Preferences		addPreference: #browserShowsPackagePane		categories: pref categoryList		default: pref defaultValue		balloonHelp: pref helpString		projectLocal: pref localToProject		changeInformee: self		changeSelector: #packagePanePreferenceChanged		! !!SystemBrowser class methodsFor: 'as yet unclassified' stamp: 'hpt 8/6/2004 23:44'!packagePanePreferenceChanged	| theOtherOne |	self registeredClasses size = 2		ifTrue: [theOtherOne _ (self registeredClasses copyWithout: PackagePaneBrowser) first]		ifFalse: [theOtherOne _ nil].	(Preferences valueOfFlag: #browserShowsPackagePane ifAbsent: [false])		ifTrue: [self default: PackagePaneBrowser]		ifFalse: [self default: theOtherOne].! !!SystemBrowser class methodsFor: 'as yet unclassified' stamp: 'hpt 8/6/2004 23:32'!unload	| pref |	pref _ Preferences preferenceAt: #browserShowsPackagePane.	Preferences		addPreference: #browserShowsPackagePane		categories: pref categoryList		default: pref defaultValue		balloonHelp: pref helpString		projectLocal: pref localToProject		changeInformee: nil		changeSelector: nil		! !!TheWorldMenu methodsFor: 'commands' stamp: 'hpt 8/5/2004 19:47'!openBrowser	"For opening the default SystemBrowser. To set a new default use the AppRegistry SystemBrowser"	SystemBrowser default openBrowser.! !SystemBrowser initialize!PackagePaneBrowser initialize!Browser initialize!