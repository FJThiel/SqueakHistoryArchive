'From Squeak3.1alpha of 28 February 2001 [latest update: #3976] on 4 May 2001 at 6:02:22 am'!"Change Set:		parameterAtCalls-swDate:			4 May 2001Author:			Scott WallaceFixes bugs in wordnet access that are a hangover from the Preferences junta; calls to #parameterAt:default: were being wrongly formulated in four wordnet-related methods"!!FreeTranslation class methodsFor: 'as yet unclassified' stamp: 'sw 5/4/2001 05:51'!openScamperOn: currentSelection	"Submit the string to the translation server at www.freetranslation.com.  Ask it to translate from (Preferences parameterAt: #languageTranslateFrom) to (Preferences parameterAt: #languageTranslateTo).  Display the results in a Scamper window, reusing the previous one if possible."	| inputs scamperWindow from to | 	currentSelection size >= 10000 ifTrue: [^ self inform: 'Text selection is too long.'].	from _ Preferences parameterAt: #languageTranslateFrom default: ['English'].	to _ Preferences parameterAt: #languageTranslateTo default: ['German'].	from = to ifTrue:			[^ self inform: 'You asked to translate from ', from, ' to ', to, '.\' withCRs,				'Use "choose language" to set these.'].  	inputs _ Dictionary new.	inputs at: 'SrcText' put: (Array with: currentSelection).	inputs at: 'Sequence' put: #('core').	inputs at: 'Mode' put: #('html').	inputs at: 'template' put: #('TextResult2.htm').	inputs at: 'Language' put: (Array with: from, '/', to).	scamperWindow _ Scamper newOrExistingOn: 'http://ets.freetranslation.com'.	scamperWindow model submitFormWithInputs: inputs 		url: 'http://ets.freetranslation.com:5081' asUrl		method: 'post'.	scamperWindow activate.! !!WordNet class methodsFor: 'as yet unclassified' stamp: 'sw 5/4/2001 05:52'!languagePrefs	"Set preference of which natural language is primary. Look up definitions in it, and correct speaLanguageing in it.  Also, let user set languages to translate from and to."	| ch aLanguage |	self canTranslateFrom.		"sets defaults"	ch _ PopUpMenu withCaption: 'Choose the natural language to use for:'			chooseFrom: 'word definition and speaLanguageing verification (', 					(Preferences parameterAt: #myLanguage default: [#English]) asString ,')...\',				'language to translate from (',					(Preferences parameterAt: #languageTranslateFrom default: [#English]) asString ,')...\',				'language to translate to (',					(Preferences parameterAt: #languageTranslateTo default: [#German]) asString ,')...\'.	ch = 1 ifTrue: [		aLanguage _ PopUpMenu withCaption: 'The language for word definitions and speaLanguageing verification:'			chooseFrom: Languages.		aLanguage > 0 ifTrue:			[^ Preferences setParameter: #myLanguage to: (Languages at: aLanguage) asSymbol]].	ch = 2 ifTrue:		[aLanguage _ PopUpMenu withCaption: 'The language to translate from:'			chooseFrom: CanTranslateFrom.		aLanguage > 0 ifTrue:			[^ Preferences setParameter: #languageTranslateFrom to: (CanTranslateFrom at: aLanguage) asSymbol]].	ch = 3 ifTrue:		[aLanguage _ PopUpMenu withCaption: 'The language to translate to'			chooseFrom: CanTranslateFrom.		aLanguage > 0 ifTrue:			[^ Preferences setParameter: #languageTranslateTo to: (CanTranslateFrom at: aLanguage) asSymbol]].	"Maybe let the user add another language if he knows the server can take it.""	ch _ (PopUpMenu labelArray: Languages, {'other...'.			'Choose language to translate from...'})		startUpWithCaption: 'Choose the language of dictionary for word definitions.'.	ch = 0 ifTrue: [^ Preferences setParameter: #myLanguage to: #English].	(ch <= Languages size) ifTrue: [aLanguage _ Languages at: ch].	ch = (Languages size + 1) ifTrue: [		aLanguage _ FiaLanguageInTheBlank request: 'Name of the primary language'].	aLanguage ifNotNil: [^ Preferences setParameter: #myLanguage to: aLanguage asSymbol]."! !!WordNet class methodsFor: 'as yet unclassified' stamp: 'sw 5/4/2001 05:49'!lexiconServer	"Look in Preferences to see what language the user wants, and what class knows about it."	| nl |	nl _ Preferences parameterAt: #myLanguage default: [#English].	nl == #English ifTrue: [^ self].		"English, WordNet server"	nl == #Portuguese ifTrue: [^ PortugueseLexiconServer].	"www.priberam.pt""	nl == #Deutsch ifTrue: [^ DeutschServerClass]. "	"class that knows about a server"	self inform: 'Sorry, no known online dictionary in that language.'.	^ self languagePrefs! !!WordNet class methodsFor: 'as yet unclassified' stamp: 'sw 5/4/2001 06:01'!verify: aWord	"See if this spelling is in the WordNet lexicon.  Return a string of success, no-such-word, or can't reach the server."	| aDef nl |	aDef _ self new.	(aDef definition: aWord) ifNil:		[^ 'Sorry, cannot reach that web site.  Task abandoned.(Make sure you have an internet connection.)'].	nl _ Preferences parameterAt: #myLanguage default: [#English].	(aDef parts) size = 0 		ifTrue: [^ 'Sorry, ', aWord, ' not found. (', nl, ' lexicon)']		ifFalse: [^ aWord, ' is spelled correctly.']! !