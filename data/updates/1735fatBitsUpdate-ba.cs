'From Squeak2.6 of 11 October 1999 [latest update: #1734] on 28 December 1999 at 11:36:00 am'!"Change Set:		FatBitsUpdateDate: 			28 December 1999Author: 		Bob ArningSome extensions to make FatBitsPaint more useful.  For more info, evaluate the following line:StringHolder new textContents: FatBitsPaint comment; openLabel: 'about FatBitsPaint extensions'"!SketchMorph subclass: #ColorPickerMorph	instanceVariableNames: 'selectedColor sourceHand deleteOnMouseUp updateContinuously target selector argument originalColor theSelectorDisplayMorph '	classVariableNames: 'ColorChart DragBox FeedbackBox RevertBox TransparentBox '	poolDictionaries: ''	category: 'Morphic-Widgets'!SketchMorph subclass: #FatBitsPaint	instanceVariableNames: 'formToEdit magnification brush brushSize brushColor lastMouse currentTools currentSelectionMorph selectionAnchor backgroundColor '	classVariableNames: 'FormClipboard '	poolDictionaries: ''	category: 'Morphic-Widgets'!BorderedMorph subclass: #MarqueeMorph	instanceVariableNames: 'colors count '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Kernel'!!ColorPickerMorph methodsFor: 'initialization' stamp: 'RAA 9/25/1999 11:34'!buildChartForm        | chartForm transText |        chartForm _ ColorChart deepCopy asFormOfDepth: Display depth.        Display depth >= 16 ifTrue:                [chartForm fill: ((TransparentBox left + 9)@0 extent: 1@9) fillColor: Color lightGray.                chartForm fill: ((TransparentBox right - 10)@0 extent: 1@9) fillColor: Color lightGray.                transText _ (Form extent: 63@9 depth: 1   "Where there's a will there's a way..."                                        fromArray: #( 0 0 4194306 1024 4194306 1024 15628058 2476592640                                                                        4887714 2485462016 1883804850 2486772764 4756618                                                                        2485462016 4748474 1939416064 0 0)                                        offset: 0@0).                transText displayOn: chartForm at: 62@0.                Display depth = 32 ifTrue:                        ["Set opaque bits for 32-bit display"                        chartForm fill: chartForm boundingBox rule: Form under                                        fillColor: (Color r: 0.0 g: 0.0 b: 0.0 alpha: 1.0)]].        chartForm borderWidth: 1.        self form: chartForm.        self updateSelectorDisplay.! !!ColorPickerMorph methodsFor: 'initialization' stamp: 'RAA 9/25/1999 11:42'!initialize        super initialize.        theSelectorDisplayMorph _ AlignmentMorph newRow                color: Color white;                borderWidth: 1;                borderColor: Color red;                hResizing: #shrinkWrap;                vResizing: #shrinkWrap;                addMorph: (StringMorph contents: 'theSelector').        self addMorph: theSelectorDisplayMorph.        self buildChartForm.        self addMorph: (SimpleButtonMorph new borderWidth: 0;                        label: 'x' font: nil; color: Color transparent;                        actionSelector: #delete; target: self;                        position: 1@0; extent: 10@9).        selectedColor _ Color white.        sourceHand _ nil.        deleteOnMouseUp _ false.        updateContinuously _ true.        selector _ nil.        target _ nil! !!ColorPickerMorph methodsFor: 'initialization' stamp: 'RAA 9/25/1999 11:38'!updateSelectorDisplay        theSelectorDisplayMorph position: self bottomLeft.        theSelectorDisplayMorph firstSubmorph contents: selector asString.! !!ColorPickerMorph methodsFor: 'accessing' stamp: 'RAA 9/25/1999 11:35'!selector: aSymbol        selector _ aSymbol.        self updateSelectorDisplay! !!FatBitsPaint commentStamp: 'RAA 11/12/1999 09:37' prior: 0!Extensions to FatBitsPaintWith the goal of making FatBitsPaint a fairly nifty Form fixer-upper in the Squeak/morphic environment, I have started this set of extensions. It will probably be updated as the mood strikes, so keep an eye out for new versions.First, some basic operating instructions:Get a Form and send it the message #morphEdit. To get started, you can try:        (Form fromUser) morphEditAnd there is the form in all its glory. Control click on the form to get theFatBitsPaint menu and choose the "keep this menu up" item. This will be your main tool/command palette. With it you can:´ Change the magnification´ Change the brush size (in original scale pixels)´ Change the brush color (via a ColorPickerMorph)Now to some of the enhancements:(25 September 1999 2:38:25 pm )´ ColorPickerMorphs now have a label below that indicates their use (you might have more than one open)´ A quirk that could get the brush size out of alignment with the pixel size is fixed.´ A background has been added so that you can see the full extent of the Form and so that you can observe the effect of translucent pixels in the form.´ A menu item has been added to change the background color so that you can simulate the real environment the form will be displayed in.´ The magnification and brush size menus now highlight their current value.´ An inspect option has been added to the menu so that you can do arbitrary things to the form.´ A file out option has been added to write the form to a file.(25 September 1999 10:02:13 pm ) ´ New menu item: Tools allows you to choose between (for now) Paint Brush (all there was before) and Selections. Selections allows you to select rectangular regions of the form where the next menu takes over.´ New menu item: Selections gives you choices:        ´ edit separately - opens a new editor on the selected rectangle. Useful for cropping.        ´ copy - copies the selection rectangle to a clipboard. Can be pasted to this or another FatBitsPaint.        ´ cut - does a copy and clears the selection to transparent.        ´ paste - paints the contents of the clipboard over the current selection. Only the starting point of the selection matters - the extent is controlled by the clipboard.!!FatBitsPaint methodsFor: 'initialization' stamp: 'RAA 9/25/1999 15:54'!editForm: aForm        formToEdit _ aForm.        brushSize _ magnification _ 64 // (aForm height min: aForm width) max: 4.        self revert! !!FatBitsPaint methodsFor: 'initialization' stamp: 'RAA 9/25/1999 22:27'!initialize        super initialize.        self setCurrentToolTo: self toolsForPaintBrush.        formToEdit _ Form extent: 50@40 depth: 8.        formToEdit fill: formToEdit boundingBox fillColor: Color veryVeryLightGray.        brushSize _ magnification _ 4.        color _ Color veryVeryLightGray.        brushColor _ Color red.        backgroundColor _ Color white.        self revert! !!FatBitsPaint methodsFor: 'initialization' stamp: 'RAA 9/25/1999 22:26'!openWith: aForm        self editForm: aForm; openInWorld! !!FatBitsPaint methodsFor: 'initialization' stamp: 'RAA 9/25/1999 21:44'!setCurrentToolTo: aDictionary        currentTools _ aDictionary.        currentSelectionMorph ifNotNil: [currentSelectionMorph delete. currentSelectionMorph _ nil]! !!FatBitsPaint methodsFor: 'initialization' stamp: 'RAA 9/25/1999 15:25'!toolsForPaintBrush        ^Dictionary new                at: #mouseMove: put: #mouseMovePaintBrushMode:;                at: #mouseDown: put: #mouseDownDefault:;                yourself! !!FatBitsPaint methodsFor: 'initialization' stamp: 'RAA 9/25/1999 15:27'!toolsForSelection        ^ Dictionary new                at: #mouseMove: put: #mouseMoveSelectionMode:;                at: #mouseDown: put: #mouseDownSelection:;                yourself! !!FatBitsPaint methodsFor: 'events' stamp: 'RAA 9/25/1999 15:24'!mouseDown: evt        ^ self                perform: (currentTools at: #mouseDown: ifAbsent: [^nil])                with: evt! !!FatBitsPaint methodsFor: 'events' stamp: 'RAA 12/28/1999 11:35'!mouseDownDefault: evt	lastMouse _ nil.	formToEdit depth = 1 ifTrue:		[self brushColor: (originalForm colorAt: (self griddedPoint: evt)) negated]! !!FatBitsPaint methodsFor: 'events' stamp: 'RAA 9/25/1999 15:39'!mouseDownSelection: evt        lastMouse _ nil.        currentSelectionMorph ifNotNil: [currentSelectionMorph delete. currentSelectionMorph _ nil].        selectionAnchor _ self griddedPoint: evt! !!FatBitsPaint methodsFor: 'events' stamp: 'RAA 9/25/1999 15:24'!mouseMove: evt        ^ self                perform: (currentTools at: #mouseMove: ifAbsent: [^nil])                with: evt! !!FatBitsPaint methodsFor: 'events' stamp: 'RAA 9/25/1999 15:20'!mouseMovePaintBrushMode: evt        | p p2 |        p _ self griddedPoint: evt.        lastMouse = p ifTrue: [^ self].        lastMouse ifNil: [lastMouse _ p].  "first point in a stroke"        "draw etch-a-sketch style-first horizontal, then vertical"        p2 _ p x@lastMouse y.        brush drawFrom: lastMouse to: p2.        brush drawFrom: p2 to: p.                                self revealPenStrokes.        lastMouse _ p! !!FatBitsPaint methodsFor: 'events' stamp: 'RAA 9/25/1999 21:59'!toolMenu: evt        | menu |         menu _ MenuMorph new.        menu                addTitle: 'Tools';                addStayUpItem.        {                {'paint brush'. self toolsForPaintBrush}.                {'selections'. self toolsForSelection}        } do: [:each |                menu add: each first                        target: self                        selector: #setCurrentToolTo:                        argumentList: {each second}].        menu toggleStayUp: nil.        menu popUpAt: evt hand position event: evt! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 15:48'!accept        | f |        f _ self unmagnifiedForm.        ((f boundingBox = formToEdit boundingBox) and: [f depth = formToEdit depth])                ifFalse: [^ self error: 'implementation error; form dimensions and depth should match'].        f displayOn: formToEdit.  "modify formToEdit in place"! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 21:17'!addCustomMenuItems: aCustomMenu hand: aHandMorph        super addCustomMenuItems: aCustomMenu hand: aHandMorph.        aCustomMenu                 add: 'background color' action: #setBackgroundColor:;                add: 'pen color' action: #setPenColor:;                add: 'pen size' action: #setPenSize:;                add: 'fill' action: #fill;                add: 'magnification' action: #setMagnification:;                add: 'accept' action: #accept;                add: 'revert' action: #revert;                add: 'inspect' action: #inspectForm;                add: 'file out' action: #fileOut;                add: 'selection...' action: #selectionMenu:;                add: 'tools...' action: #toolMenu:;                yourself! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 22:27'!backgroundColor: aColor        backgroundColor _ aColor.        self changed! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 21:50'!copySelection        | relativeBounds scaledBounds |        currentSelectionMorph ifNil: [^ nil].        relativeBounds _ currentSelectionMorph bounds translateBy: self position negated.        scaledBounds _ relativeBounds scaleBy: 1 / magnification.        FormClipboard _ (self unmagnifiedForm copy: scaledBounds).        ^ relativeBounds! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 16:15'!cutSelection        | relativeBounds |        relativeBounds _ self copySelection ifNil: [^ nil].        originalForm fill: relativeBounds rule: Form over fillColor: Color transparent.        self revealPenStrokes! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 16:19'!editSelection        (self selectionAsForm ifNil: [^ nil]) morphEdit! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 15:48'!fileOut        | fileName result |        result _ StandardFileMenu newFile ifNil: [^ 1 beep].        fileName _ result directory fullNameFor: result name.        Cursor normal showWhile:                [self unmagnifiedForm writeOnFileNamed: fileName]! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 15:49'!inspectForm        self unmagnifiedForm inspect! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 15:49'!magnification: aNumber        | oldPenSize oldForm |        oldPenSize _ brushSize / magnification.        oldForm _ self unmagnifiedForm.        magnification _ aNumber asInteger max: 1.        self form: (oldForm magnify: oldForm boundingBox by: magnification).        brush _ Pen newOnForm: originalForm.        self penSize: oldPenSize.        brush color: brushColor! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 21:39'!mouseMoveSelectionMode: evt        | p |        p _ self griddedPoint: evt.        lastMouse = p ifTrue: [^ self].        currentSelectionMorph ifNil:                [currentSelectionMorph _ MarqueeMorph new                         color: Color transparent;                        borderWidth: 2;                        lock.                self addMorphFront: currentSelectionMorph.                currentSelectionMorph startStepping].        currentSelectionMorph                 bounds: ((Rectangle encompassing: {p. selectionAnchor}) translateBy: self position).        lastMouse _ p! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 21:50'!pasteSelection        | relativeBounds tempForm |        currentSelectionMorph ifNil: [^ nil].        FormClipboard ifNil: [^nil].        relativeBounds _ currentSelectionMorph bounds translateBy: self position negated.        tempForm _ (FormClipboard magnify: FormClipboard boundingBox by: magnification).        self form                copy: (relativeBounds origin extent: tempForm boundingBox extent)                from: 0@0                in: tempForm                rule: Form over.         self revealPenStrokes! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/28/1999 13:03'!revert"since WarpBits may mangle an 8-bit ColorForm, make it 32 first"        self form: ((formToEdit asFormOfDepth: 32)                 magnify: formToEdit boundingBox                 by: magnification                 smoothing: 1).        brush _ Pen newOnForm: originalForm.        brush squareNib: brushSize.        brush color: brushColor! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 16:18'!selectionAsForm        | relativeBounds scaledBounds |        currentSelectionMorph ifNil: [^nil].        relativeBounds _ currentSelectionMorph bounds translateBy: self position negated.        scaledBounds _ relativeBounds scaleBy: 1 / magnification.        ^ self unmagnifiedForm copy: scaledBounds! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 22:00'!selectionMenu: evt        | menu |         (menu _ MenuMorph new)                addTitle: 'Edit';                addStayUpItem.        {                {'edit separately'. #editSelection}.                {'copy'. #copySelection}.                {'cut'. #cutSelection}.                {'paste'. #pasteSelection}        } do: [:each |                menu add: each first                        target: self                        selector: each second                        argumentList: #()].        menu toggleStayUp: nil.        menu popUpAt: evt hand position event: evt! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 22:26'!setBackgroundColor: evt        evt hand                 changeColorTarget: self                 selector: #backgroundColor:                 originalColor: backgroundColor! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 11:07'!setMagnification: evt        | menu |        menu _ MenuMorph new.        ((1 to: 8), #(16 24 32)) do: [:w |                menu add: w printString                        target: self                        selector: #magnification:                        argumentList: (Array with: w).                magnification = w ifTrue: [menu lastSubmorph color: Color red]].        menu popUpAt: evt hand position event: evt! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 11:04'!setPenSize: evt        | menu sizes |         menu _ MenuMorph new.        sizes _ (1 to: 5), (6 to: 12 by: 2), (15 to: 40 by: 5).        sizes do: [:w |                menu add: w printString                        target: self                        selector: #penSize:                        argumentList: (Array with: w).                (brushSize // magnification) = w ifTrue: [menu lastSubmorph color: Color red]].        menu popUpAt: evt hand position event: evt! !!FatBitsPaint methodsFor: 'menu' stamp: 'RAA 9/25/1999 15:48'!unmagnifiedForm        ^ self form shrink: self form boundingBox by: magnification! !!FatBitsPaint methodsFor: 'as yet unclassified' stamp: 'RAA 9/25/1999 21:14'!containsPoint: aPoint        ^ self bounds containsPoint: aPoint     "even if we are transparent"! !!FatBitsPaint methodsFor: 'as yet unclassified' stamp: 'RAA 12/28/1999 11:34'!drawOn: aCanvas	| f |	f _ self rotatedForm.	backgroundColor ifNotNil: [aCanvas fillRectangle: bounds fillStyle: backgroundColor].	aCanvas image: f		at: bounds origin		sourceRect: f boundingBox		rule: ((aCanvas depth = 16 or: [formToEdit depth = 16])				ifTrue:					[Form paint]				ifFalse:					[aCanvas depth = 8 ifTrue: [34] ifFalse: [Form blend]])! !!Form methodsFor: 'scaling, rotation' stamp: 'RAA 9/28/1999 11:20'!magnify: aRectangle by: scale smoothing: cellSize        "Answer a Form created as a scaling of the receiver.        Scale may be a Float, and may be greater or less than 1.0."        | newForm |        newForm _ self blankCopyOf: aRectangle scaledBy: scale.        (WarpBlt toForm: newForm)                sourceForm: self;                colorMap: (self colormapIfNeededForDepth: depth);                cellSize: cellSize;  "installs a new colormap if cellSize > 1"                combinationRule: 3;                copyQuad: aRectangle innerCorners toRect: newForm boundingBox.        ^ newForm"Dynamic test...[Sensor anyButtonPressed] whileFalse:        [(Display magnify: (Sensor cursorPoint extent: 131@81) by: 0.5 smoothing: 2) display]""Scaling test...| f cp | f _ Form fromDisplay: (Rectangle originFromUser: 100@100).Display restoreAfter: [Sensor waitNoButton.[Sensor anyButtonPressed] whileFalse:        [cp _ Sensor cursorPoint.        (f magnify: f boundingBox by: (cp x asFloat@cp y asFloat)/f extent smoothing: 2) display]]"! !!Form methodsFor: 'editing' stamp: 'RAA 9/28/1999 09:11'!morphEdit        ^ FatBitsPaint new openWith: self! !!Form methodsFor: 'Demo' stamp: 'RAA 9/28/1999 11:20'!blankCopyOf: aRectangle scaledBy: scale        ^ self class extent: (aRectangle extent * scale) truncated depth: depth! !!ColorForm methodsFor: 'copying' stamp: 'RAA 9/28/1999 11:22'!blankCopyOf: aRectangle scaledBy: scale        | newForm |        newForm _ self class extent: (aRectangle extent * scale) truncated depth: depth.        colors ifNotNil: [newForm colors: colors copy].        ^ newForm! !!MarqueeMorph methodsFor: 'as yet unclassified' stamp: 'RAA 9/25/1999 21:26'!initialize        super initialize.        colors _ {Color red. Color white. Color blue}.        count _ 0! !!MarqueeMorph methodsFor: 'as yet unclassified' stamp: 'RAA 9/25/1999 21:27'!step        count _ count + 1.        count > colors size ifTrue: [count _ 1].        self borderColor: (colors at: count)! !!MarqueeMorph methodsFor: 'as yet unclassified' stamp: 'RAA 9/25/1999 21:30'!stepTime        "Answer the desired time between steps in milliseconds."        ^ 200! !!MarqueeMorph methodsFor: 'as yet unclassified' stamp: 'RAA 9/25/1999 21:28'!wantsSteps        ^ true! !