'From Squeak2.9alpha of 5 August 2000 [latest update: #3291] on 19 January 2001 at 7:28:12 pm'!"Change Set:		filteredMessageSet-swDate:			19 January 2001Author:			Scott WallaceSupports a couple of simple filters allowing one to refine the contents of a message list.  The items governing this feature will be found on the shifted side of the message-list-pane menu.Hooks are provided, suggestively, for several other simple filters, though the functionality still needs to be proved."!!Browser methodsFor: 'message functions' stamp: 'sw 1/11/2001 07:22'!addExtraShiftedItemsTo: aMenu	"The shifted selector-list menu is being built; some menu items are appropriate only for certain kinds of browsers, and this gives a hook for them to be added as approrpiate.  If any is added here, a line should be added first -- browse reimplementors of this message for examples."! !!Browser methodsFor: 'message functions' stamp: 'sw 1/19/2001 01:27'!shiftedMessageListMenu: aMenu	"Fill aMenu with the items appropriate when the shift key is held down"	aMenu addList: #(		('method pane' 							makeIsolatedCodePane)		"('make a scriptor'						makeScriptor)"		('toggle diffing (d)'						toggleDiffing)		('implementors of sent messages'			browseAllMessages)		-		('spawn sub-protocol'					spawnProtocol)		('spawn full protocol'					spawnFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory)		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'				revertToPreviousVersion)		('remove from current change set'		removeFromCurrentChanges)		('revert & remove from changes'		revertAndForget)		('add to current change set'				adoptMessageInCurrentChangeset)		-		('fetch documentation'					fetchDocPane)		('more...' 								unshiftedYellowButtonActivity)).	^ aMenu! !!MessageSet methodsFor: 'message list' stamp: 'sw 1/19/2001 16:47'!addExtraShiftedItemsTo: aMenu	"The shifted selector-list menu is being built.  Add items specific to MessageSet"	(self isMemberOf: MessageSet)  "subclasses do NOT get these"		ifTrue:			[aMenu addList: #(				-				('remove from this browser'		removeMessageFromBrowser)				('filter message list...'			filterMessageList)				('add to message list...'			augmentMessageList))]! !!MessageSet methodsFor: 'message functions' stamp: 'sw 1/12/2001 00:19'!removeMessageFromBrowser	"Remove the selected message from the browser."	messageListIndex = 0 ifTrue: [^ self].	self deleteFromMessageList: self selection.	self reformulateList.	self adjustWindowTitleAfterFiltering! !!MessageSet methodsFor: 'private' stamp: 'sw 1/11/2001 09:16'!adjustWindowTitleAfterFiltering	"Set the title of the receiver's window, if any, to reflect the just-completed filtering"	| aWindow existingLabel newLabel |	(aWindow _ self containingWindow) ifNil: [^ self].	(existingLabel _ aWindow label) isEmptyOrNil ifTrue: [^ self].	(((existingLabel size < 3) or: [existingLabel last ~~ $]]) or: [(existingLabel at: (existingLabel size - 1)) isDigit not]) ifTrue: [^ self].	existingLabel size to: 1 by: -1 do:		[:anIndex | ((existingLabel at: anIndex) == $[) ifTrue:			[newLabel _ (existingLabel copyFrom: 1 to: anIndex),				'Filtered: ',				messageList size printString,				']'.			^ aWindow setLabel: newLabel]]			! !!MessageSet methodsFor: 'private' stamp: 'sw 1/11/2001 09:18'!setFilteredList: newList	"Establish newList as the new list if appropriate, and adjust the window title accordingly; if the new list is of the same size as the old, warn and do nothing"	newList size == 0		ifTrue:			[^ self inform: 'Nothing would be left in the list if you did that'].	newList size == messageList size		ifTrue:			[^ self inform: 'That leaves the list unchanged'].	self initializeMessageList: newList.	self adjustWindowTitleAfterFiltering! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 16:47'!augmentMessageList	"Allow the user to add to the list of messages."	self notYetImplemented! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/11/2001 09:33'!filterFrom: aBlock	"Filter the receiver's list down to only those items that satisfy aBlock, which takes a class an a selector as its arguments."	| newList |	newList _ messageList select:		[:anElement |			self class parse: anElement toClassAndSelector: aBlock].	self setFilteredList: newList! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 16:41'!filterMessageList	"Allow the user to refine the list of messages."	| aMenu evt |	messageList size <= 1 ifTrue: [^ self inform: 'this is not a propitious filtering situation'].	"would like to get the evt coming in but thwarted by the setInvokingView: circumlocution"	evt _ self currentWorld activeHand lastEvent.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: 'Filter by only showing...'.	aMenu addStayUpItem.	aMenu addList: #(		('messages that send...'					filterToSendersOf)		-		('messages in current change set'		filterToCurrentChangeSet)		('messages not in current change set'	filterToNotCurrentChangeSet)		('messages in any change set'			filterToAnyChangeSet)		-		('messages authored by me'				filterToCurrentAuthor)		('messages not authored by me'			filterToNotCurrentAuthor)		-		('messages only in .changes file'		filterToMessagesInChangesFile)		('messages with prior versions'			filterToMessagesWithPriorVersions)			).	aMenu popUpEvent: evt hand lastEvent in: evt hand world.! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 16:00'!filterToAnyChangeSet	"Filter down only to messages present in ANY change set"	self notYetImplemented! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 16:02'!filterToCurrentAuthor	"Filter down only to messages with my initials as most recent author"	self notYetImplemented! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/11/2001 09:34'!filterToCurrentChangeSet	"Filter the receiver's list down to only those items in the current change set"	self filterFrom:		[:aClass :aSelector |			(aClass notNil and: [aSelector notNil]) and:				[(Smalltalk changes atSelector: aSelector class: aClass) ~~ #none]]! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 16:03'!filterToMessagesInChangesFile	"Filter down only to messages whose source code risides in the Changes file.  This allows one to ignore long-standing methods that live in the .sources file."	self notYetImplemented! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 16:03'!filterToMessagesWithPriorVersions	"Filter down only to messages which have at least one prior version"	self notYetImplemented! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 16:01'!filterToNotCurrentAuthor	"Filter down only to messages not stamped with my initials"	self notYetImplemented! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/12/2001 00:02'!filterToNotCurrentChangeSet	"Filter the receiver's list down to only those items not in the current change set"	self filterFrom:		[:aClass :aSelector |			(aClass notNil and: [aSelector notNil]) and:				[(Smalltalk changes atSelector: aSelector class: aClass) == #none]]! !!MessageSet methodsFor: 'filtering' stamp: 'sw 1/19/2001 15:58'!filterToSendersOf	"Filter the receiver's list down to only those items which send a given selector"	| aFragment inputWithBlanksTrimmed aMethod |	aFragment _ FillInTheBlank request: 'type selector:' initialAnswer: ''.	aFragment  isEmptyOrNil ifTrue: [^ self].	inputWithBlanksTrimmed _ aFragment withBlanksTrimmed.	Symbol hasInterned: inputWithBlanksTrimmed ifTrue:		[:aSymbol | 			self filterFrom:				[:aClass :aSelector |					(aMethod _ aClass compiledMethodAt: aSelector) notNil and:						[aMethod hasLiteralThorough: aSymbol]]]! !MessageSet removeSelector: #augmentMessage!MessageSet removeSelector: #filterMessageListForPane:event:!!MessageSet reorganize!('message list' addExtraShiftedItemsTo: growable: messageList messageListIndex: optionalButtonHeight selectedMessageName)('message functions' deleteFromMessageList: methodCategoryChanged reformulateList removeMessage removeMessageFromBrowser toggleDiffing toggleShowDocumentation)('class list' metaClassIndicated selectedClass selectedClassName selectedClassOrMetaClass selectedMessageCategoryName)('contents' contents selectedMessage updateCodePaneIfNeeded)('private' adjustWindowTitleAfterFiltering autoSelectString autoSelectString: contents:notifying: initializeMessageList: openAsMorphNamed:inWorld: selection setClassAndSelectorIn: setFilteredList:)('filtering' augmentMessageList filterFrom: filterMessageList filterToAnyChangeSet filterToCurrentAuthor filterToCurrentChangeSet filterToMessagesInChangesFile filterToMessagesWithPriorVersions filterToNotCurrentAuthor filterToNotCurrentChangeSet filterToSendersOf)('object fileIn' convertdcscscmscmmemma0:dcsccscmscmmemma0:)!