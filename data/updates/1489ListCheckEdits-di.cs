'From Squeak 2.5 of August 6, 1999 [latest update: #1488] on 27 September 1999 at 1:31:53 pm'!"Change Set:		ListCheckEditsDate:			27 September 1999Author:			Dan IngallsChanges to list selections due to arrow keys and letter keystrokes did not check for pending edits.  This change causes them to do so."!!PluggableListMorph methodsFor: 'model access' stamp: 'di 9/27/1999 13:22'!keyStroke: event 	"Process potential command keys"	| args aChar aLowercaseChar oldSelection aSpecialKey nextSelection nextSelectionList nextSelectionText max howManyItemsShowing |	aChar _ event keyCharacter.	(event anyModifierKeyPressed or: [(self listHandlesBasicKeys) not])		ifTrue: 			[keystrokeActionSelector == nil ifTrue: [^ nil].			(args _ keystrokeActionSelector numArgs) = 1 ifTrue: [^ model perform: keystrokeActionSelector with: aChar].			args = 2 ifTrue: [^ model					perform: keystrokeActionSelector					with: aChar					with: self].			^ self error: 'The keystrokeActionSelector must be a 1- or 2-keyword symbol'].	oldSelection _ self selectionIndex.	nextSelection _ oldSelection.	aSpecialKey _ aChar asciiValue.	max _ self maximumSelection.	aSpecialKey < 32		ifTrue: 			[" one of a number of special keys"			aSpecialKey == 31				ifTrue: 					[" down arrow"					nextSelection _ oldSelection + 1.					nextSelection > max ifTrue: [nextSelection _ 1]].			aSpecialKey == 30				ifTrue: 					[" up arrow"					nextSelection _ oldSelection - 1.					nextSelection < 1 ifTrue: [nextSelection _ max]].			aSpecialKey == 1 ifTrue: [" home"				nextSelection _ 1].			aSpecialKey == 4 ifTrue: [" end"				nextSelection _ max].			howManyItemsShowing _ self numSelectionsInView.			aSpecialKey == 11 ifTrue: [" page up"				nextSelection _ 1 max: oldSelection - howManyItemsShowing].			aSpecialKey == 12 ifTrue: [" page down"				nextSelection _ oldSelection + howManyItemsShowing min: max].			model okToChange ifFalse: [^ self].  "No change if model is locked"			^ self changeModelSelection: nextSelection].	aLowercaseChar _ aChar asLowercase.	nextSelectionList _ list copyFrom: oldSelection + 1 to: max.	nextSelectionList addAll: (list copyFrom: 1 to: oldSelection).	" make sure to get rid of blanks due to the hierarchal nature of some of 	           the collection entries"	nextSelectionText _ nextSelectionList detect: [:a | (a withBlanksTrimmed at: 1) asLowercase == aLowercaseChar]				ifNone: [nextSelectionText _ nil].	nextSelectionText ~~ nil		ifTrue: 			[nextSelection _ list findFirst: [:a | a == nextSelectionText].			model okToChange ifFalse: [^ self].  "No change if model is locked"			^ self changeModelSelection: nextSelection]		ifFalse: [self flash]! !