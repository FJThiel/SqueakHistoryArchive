'From Squeak 2.4c of May 10, 1999 on 17 June 1999 at 10:55:10 pm'!"Change Set:		graphMorphFixes-jhmDate:			17 June 1999Author:			John MaloneyVarious improvements to GraphMorph including:  1. lazy damage reporting to support real-time sound generation  2. better interpolation when wrapping back to the beginning  3. cleanup of obsolete script editor supportAlso includes a more efficient Rectangle>intersects: method."!RectangleMorph subclass: #GraphMorph	instanceVariableNames: 'data dataColor cursor cursorColor cursorColorAtZeroCrossings startIndex minVal maxVal cachedForm lastAcceptedScript lastScriptEditor hasChanged '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!!GraphMorph commentStamp: 'jm 6/17/1999 21:28' prior: 0!I display a graph of numbers, normalized so the full range of values just fits my height. I support a movable cursor that can be dragged with the mouse.Implementation notes: Some operations on me may be done at sound sampling rates (e.g. 11-44 thousand times/second). To allow such high bandwidth application, certain operations that change my appearance do not immediately report a damage rectangle. Instead, a flag is set indicating that my display needs to refreshed and a step method reports the damage rectangle if that flag is set. Also, I cache a bitmap of my graph to allow the cursor to be moved without redrawing the graph.!!GraphMorph methodsFor: 'initialization' stamp: 'jm 6/17/1999 20:09'!initialize	super initialize.	self color: (Color r: 0.8 g: 0.8 b: 0.6).	self extent: 365@80.	self borderWidth: 2.	dataColor _ Color darkGray.	cursor _ 1.0.  "may be fractional"	cursorColor _ Color red.	cursorColorAtZeroCrossings _ Color red.	startIndex _ 1.	hasChanged _ false.	self data:		((0 to: 360 - 1) collect:			[:x | (100.0 * (x degreesToRadians sin)) asInteger]).! !!GraphMorph methodsFor: 'accessing' stamp: 'jm 6/17/1999 21:41'!cursor: aNumber	| truncP |	cursor ~= aNumber ifTrue:  [		cursor _ aNumber.		truncP _ aNumber truncated.		truncP > data size ifTrue: [cursor _ data size].		truncP < 0 ifTrue: [cursor _ 1].		self keepIndexInView: truncP.		hasChanged _ true].! !!GraphMorph methodsFor: 'accessing' stamp: 'jm 6/17/1999 21:43'!cursorWrapped: aNumber	| sz |	cursor ~= aNumber ifTrue: [		cursor _ aNumber.		sz _ data size.		sz = 0			ifTrue: [cursor _ 1]			ifFalse: [				((cursor >= (sz + 1)) or: [cursor < 0]) ifTrue: [					cursor _ cursor - ((cursor // sz) * sz)].				cursor < 1 ifTrue: [cursor _ sz + cursor]].		"assert: 1 <= cursor < data size + 1"		hasChanged _ true].! !!GraphMorph methodsFor: 'accessing' stamp: 'jm 6/16/1999 13:49'!interpolatedValueAtCursor	| sz prev frac next |	data isEmpty ifTrue: [^ 0].	sz _ data size.	cursor < 0 ifTrue: [^ data at: 1].  "just to be safe, though cursor shouldn't be negative"	prev _ cursor truncated.	frac _ cursor - prev.	prev < 1 ifTrue: [prev _ sz].	prev > sz ifTrue: [prev _ 1].	"assert: 1 <= prev <= sz"	frac = 0 ifTrue: [^ data at: prev].  "no interpolation needed"	"interpolate"	next _ prev = sz ifTrue: [1] ifFalse: [prev + 1].	^ ((1.0 - frac) * (data at: prev)) + (frac * (data at: next))! !!GraphMorph methodsFor: 'drawing' stamp: 'jm 6/17/1999 21:36'!drawOn: aCanvas	| c |	cachedForm = nil ifTrue:  [		c _ FormCanvas extent: bounds extent.		self drawDataOn: (c copyOffset: bounds origin negated).		cachedForm _ c form].	aCanvas image: cachedForm at: bounds origin.	self drawCursorOn: aCanvas.! !!GraphMorph methodsFor: 'stepping' stamp: 'jm 6/17/1999 21:32'!step	"Make a deferred damage rectangle if I've changed. This allows applications to call methods that invalidate my display at high-bandwidth without paying the cost of doing the damage reporting on ever call; they can merely set hasChanged to true."	super step.	hasChanged == nil ifTrue: [hasChanged _ false].	hasChanged ifTrue: [		self changed.		hasChanged _ false].! !!GraphMorph methodsFor: 'menu' stamp: 'jm 6/16/1999 13:08'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'open wave editor' action: #openWaveEditor.	aCustomMenu add: 'read file' action: #readDataFromFile.! !!GraphMorph methodsFor: 'menu' stamp: 'jm 6/16/1999 14:57'!openWaveEditor	| scaleFactor scaledData editor |	self data: data.  "make sure maxVal and minVal are current"	scaleFactor _ 32767 // ((minVal abs max: maxVal abs) max: 1).	scaledData _ SoundBuffer newMonoSampleCount: data size.	1 to: scaledData size do: [:i | scaledData at: i put: (scaleFactor * (data at: i)) truncated].	editor _ WaveEditor new		data: scaledData;		samplingRate: 11025;		perceivedFrequency: 220.0.	editor openInWorld.! !!GraphMorph methodsFor: 'menu' stamp: 'jm 6/16/1999 11:24'!readDataFromFile	| fileName |	fileName _ FillInTheBlank		request: 'File name?'		initialAnswer: ''.	fileName isEmpty ifTrue: [^ self].	(StandardFileStream isAFileNamed: fileName) ifFalse: [		^ self inform: 'Sorry, I cannot find that file'].	self data: (SampledSound fromAIFFfileNamed: fileName) samples.! !!GraphMorph methodsFor: 'commands' stamp: 'jm 6/16/1999 11:29'!playOnce	| scale absV scaledData |	data isEmpty ifTrue: [^ self].  "nothing to play"	scale _ 1.	data do: [:v | (absV _ v abs) > scale ifTrue: [scale _ absV]].	scale _ 32767.0 / scale.	scaledData _ SoundBuffer newMonoSampleCount: data size.	1 to: data size do: [:i | scaledData at: i put: (scale * (data at: i)) truncated].	(SampledSound samples: scaledData samplingRate: 11025) play.! !!GraphMorph methodsFor: 'private' stamp: 'jm 6/17/1999 21:36'!drawCursorOn: aCanvas	| ptr x r c |	ptr _ (cursor asInteger max: 1) min: data size.	c _ cursorColor.	((ptr > 1) and: [ptr < data size]) ifTrue: [		(data at: ptr) sign ~= (data at: ptr + 1) sign			ifTrue: [c _ cursorColorAtZeroCrossings]].	r _ self innerBounds.	x _ r left + ptr - startIndex.	((x >= r left) and: [x <= r right]) ifTrue: [		aCanvas fillRectangle: (x@r top corner: x + 1@r bottom) color: c].! !!GraphMorph methodsFor: 'private' stamp: 'jm 6/17/1999 20:10'!flushCachedForm	cachedForm _ nil.	hasChanged _ true.! !!GraphMorph methodsFor: 'object fileIn' stamp: 'jm 6/17/1999 21:56'!convertbosfcebbddcccsmmc0: varDict bosfcebbddcccsmmc0: smartRefStrm	"Initialize the new variable hasChanged."	hasChanged _ false.! !!GraphMorph methodsFor: 'object fileIn' stamp: 'jm 6/17/1999 21:55'!convertbosfcebbddcccsmmc0: varDict bosfcebbddcccsmmch0: smartRefStrm	"Ignore the deleted variables lastAcceptedScript and lastScriptEditor and initialize the new variable hasChanged."	hasChanged _ false.! !!GraphMorph methodsFor: 'object fileIn' stamp: 'jm 6/17/1999 21:56'!convertbosfcebbddcccsmmcll0: varDict bosfcebbddcccsmmc0: smartRefStrm	"Ignore the deleted variables: lastAcceptedScript and lastScriptEditor."! !!GraphMorph methodsFor: 'object fileIn' stamp: 'jm 6/17/1999 22:54'!convertbosfcebbddcccsmmcll0: varDict bosfcebbddcccsmmch0: smartRefStrm	"Initialize new variable hasChanged. Ignore deleted variables lastAcceptedScript"	hasChanged _ false.! !!Player methodsFor: 'scripts-execution' stamp: 'jm 6/16/1999 14:37'!stopProgramatically	"stop running my ticking scripts -- called from running code"	self instantiatedUserScriptsDo:		[:aUserScript | aUserScript stopTicking].	(costume renderedMorph isKindOf: SpeakerMorph)		ifTrue: [costume renderedMorph stopSound].  "turn off buffered speaker sound"! !!Rectangle methodsFor: 'testing' stamp: 'jm 6/17/1999 19:40'!intersects: aRectangle 	"Answer whether aRectangle intersects the receiver anywhere."	"Optimized; old code answered:		(origin max: aRectangle origin) < (corner min: aRectangle corner)"	| rOrigin rCorner |	rOrigin _ aRectangle origin.	rCorner _ aRectangle corner.	rCorner x < origin x		ifTrue: [^ false].	rCorner y < origin y		ifTrue: [^ false].	rOrigin x > corner x		ifTrue: [^ false].	rOrigin y > corner y	ifTrue: [^ false].	^ true! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jm 6/16/1999 10:36'!discardSoundSynthesis	"Discard the sound synthesis facilities, and the methods and classes that use it. This also discards MIDI."	Smalltalk discardMIDI.	Smalltalk removeClassNamed: #EnvelopeLineMorph.	Smalltalk removeClassNamed: #EnvelopeEditorMorph.	Smalltalk removeClassNamed: #PianoKeyboardMorph.	Smalltalk removeClassNamed: #WaveEditor.	Smalltalk removeClassNamed: #SoundSequencerMorph.	Smalltalk removeClassNamed: #SoundMorph.	Smalltalk removeClassNamed: #SoundLoopMorph.	Smalltalk removeClassNamed: #InterimSoundMorph.	Smalltalk removeClassNamed: #RecordingControlsMorph.	Smalltalk removeClassNamed: #PermanentRecordingControlsMorph.	Smalltalk removeClassNamed: #SoundDemoMorph.	Smalltalk at: #GraphMorph ifPresent: [:graphMorph |		#(playOnce readDataFromFile)			do: [:sel | graphMorph removeSelector: sel]].	Smalltalk at: #TrashCanMorph ifPresent: [:trashMorph |		trashMorph class removeSelector: #samplesForDelete.		trashMorph class removeSelector: #samplesForMouseEnter.		trashMorph class removeSelector: #samplesForMouseLeave].	SystemOrganization removeCategoriesMatching: 'Music-Synthesis'.! !!UpdatingStringMorph class methodsFor: 'instance creation' stamp: 'jm 5/31/1999 21:27'!on: targetObject selector: aSymbol	^ self new		target: targetObject;		getSelector: aSymbol! !Morph removeSelector: #canHaveScript!GraphMorph removeSelector: #lastScriptEditor!GraphMorph removeSelector: #drawPointerOn:!GraphMorph removeSelector: #prepareToBeSaved!GraphMorph removeSelector: #acceptScript:for:!GraphMorph removeSelector: #copy!GraphMorph removeSelector: #lastScriptEditor:!GraphMorph removeSelector: #lastAcceptedScript!GraphMorph removeSelector: #initScripts!GraphMorph removeSelector: #play!GraphMorph removeSelector: #hasScript!GraphMorph removeSelector: #lastAcceptedScript:!GraphMorph removeSelector: #stopPlaying!GraphMorph removeSelector: #loadCoffeeCupClink!GraphMorph removeSelector: #processSamples!GraphMorph removeSelector: #copyRecordingIn:!GraphMorph removeSelector: #editScript:!GraphMorph removeSelector: #commandsWithDefaultArgs!GraphMorph removeSelector: #processSamplesSelector!GraphMorph removeSelector: #scriptEditorFor:!GraphMorph removeSelector: #shallowCopy!GraphMorph removeSelector: #registerWaveform!GraphMorph removeSelector: #playBach!Smalltalk removeClassNamed: #ButtonMorph!!GraphMorph reorganize!('initialization' initialize)('accessing' color: cursor cursor: cursorAtEnd cursorColor cursorColor: cursorColorAtZeroCrossing cursorColorAtZeroCrossings: cursorWrapped: data data: dataColor dataColor: interpolatedValueAtCursor lastValue lastValue: startIndex startIndex: valueAtCursor valueAtCursor:)('drawing' drawOn:)('change reporting' layoutChanged)('events' handlesMouseDown: mouseMove:)('stepping' step)('menu' addCustomMenuItems:hand: openWaveEditor readDataFromFile)('commands' appendValue: centerCursor clear loadSineWave loadSound: loadSoundData: playOnce reverse)('script support' addCostumeSpecificCategoriesTo:)('private' drawCursorOn: drawDataOn: flushCachedForm keepIndexInView:)('object fileIn' convertbosfcebbddcccsmmc0:bosfcebbddcccsmmc0: convertbosfcebbddcccsmmc0:bosfcebbddcccsmmch0: convertbosfcebbddcccsmmcll0:bosfcebbddcccsmmc0: convertbosfcebbddcccsmmcll0:bosfcebbddcccsmmch0:)!RectangleMorph subclass: #GraphMorph	instanceVariableNames: 'data dataColor cursor cursorColor cursorColorAtZeroCrossings startIndex minVal maxVal cachedForm hasChanged '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Widgets'!