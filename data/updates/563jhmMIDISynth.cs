'From Squeak 2.3 beta of Nov 25, 1998 on 13 January 1999 at 8:27:32 am'!"Change Set:		jhmMIDISynthDate:			7 January 1999Author:			John MaloneyAdds a control panel (MidiInputMorph) for controlling Squeak-basedsound synthesis from an external MIDI device."!Object subclass: #MIDISynthChannel	instanceVariableNames: 'channel instrument muted masterVolume channelVolume pan pitchBend activeSounds '	classVariableNames: ''	poolDictionaries: ''	category: 'Music-Scores'!AlignmentMorph subclass: #MidiInputMorph	instanceVariableNames: 'midiPortNumber midiSynth instrumentSelector '	classVariableNames: ''	poolDictionaries: ''	category: 'Music-Scores'!!MIDIInputParser methodsFor: 'accessing' stamp: 'jm 1/6/1999 08:25'!midiPort	^ midiPort! !!MIDIInputParser methodsFor: 'accessing' stamp: 'jm 1/6/1999 08:24'!midiPort: aMIDIPort	"Use the given MIDI port."	midiPort _ aMIDIPort.	self clearBuffers.! !!MIDIInputParser methodsFor: 'recording' stamp: 'jm 1/6/1999 08:24'!clearBuffers	"Clear the MIDI record buffers. This should be called at the start of recording or real-time MIDI processing."		received _ received species new: 5000.	rawDataBuffer _ ByteArray new: 1000.	sysExBuffer _ WriteStream on: (ByteArray new: 100).	midiPort ifNotNil: [midiPort ensureOpen; flushInput].	startTime _ Time millisecondClockValue.	state _ #idle.! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 10:50'!closeMIDIPort	midiParser midiPort ifNil: [^ self].	midiParser midiPort close.	midiParser midiPort: nil.! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 08:29'!initialize	midiParser _ MIDIInputParser on: nil.	channels _ (1 to: 16) collect: [:ch | MIDISynthChannel new initialize].! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 08:13'!instrumentForChannel: channelIndex	^ (channels at: channelIndex) instrument! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 08:14'!instrumentForChannel: channelIndex put: aSoundProto	(channels at: channelIndex) instrument: aSoundProto.! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 10:27'!isOn	^ process notNil! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 08:26'!midiPort	^ midiParser midiPort! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 16:32'!midiPort: aMIDIPortOrNil	midiParser midiPort: aMIDIPortOrNil.! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 20:12'!mutedForChannel: channelIndex put: aBoolean	^ (channels at: channelIndex) muted: aBoolean! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 19:45'!panForChannel: channelIndex	^ (channels at: channelIndex) pan! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 19:45'!panForChannel: channelIndex put: newPan	(channels at: channelIndex) pan: newPan.! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 16:36'!setAllChannelMasterVolumes: aNumber	| vol |	vol _ (aNumber asFloat min: 1.0) max: 0.0.	channels do: [:ch | ch masterVolume: vol].! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/13/1999 08:16'!startMIDITracking	midiParser ifNil: [^ self].	midiParser midiPort ifNil: [^ self].	midiParser midiPort ensureOpen.	self stopMIDITracking.	SoundPlayer useShortBuffer.	process _ [self midiTrackingLoop] newProcess.	process priority: Processor userInterruptPriority.	process resume.! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 10:34'!stopMIDITracking	process ifNotNil: [		process terminate.		process _ nil].	SoundPlayer shutDown; initialize.  "revert to normal buffer size"! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 16:40'!volumeForChannel: channelIndex	^  (channels at: channelIndex) masterVolume! !!MIDISynth methodsFor: 'all' stamp: 'jm 1/6/1999 16:40'!volumeForChannel: channelIndex put: newVolume	(channels at: channelIndex) masterVolume: newVolume.! !!MIDISynth class methodsFor: 'instance creation' stamp: 'jm 1/6/1999 08:15'!new	^ super new initialize! !!MIDISynth class methodsFor: 'examples' stamp: 'jm 1/6/1999 16:39'!example	"Here's one way to run the MIDI synth. It will get a nice Morphic UI later. Click the mouse to stop running it. (Mac users note: be sure you have MIDI interface adaptor plugged in, or Squeak will hang waiting for the external clock signal.)."	"MIDISynth example"	| portNum synth |	portNum _ SimpleMIDIPort inputPortNumFromUser.	portNum ifNil: [^ self].	SoundPlayer useShortBuffer.	synth _ MIDISynth new		midiPort: (SimpleMIDIPort openOnPortNumber: portNum).	synth midiParser ignoreCommand: 224.  "filter out pitch bends"	1 to: 16 do: [:i |		(synth channel: i) instrument: 			 (AbstractSound soundNamed: 'oboe1')].	1 to: 16 do: [:ch | synth volumeForChannel: ch put: 0.2].	synth processMIDIUntilMouseDown.	SoundPlayer shutDown; initialize.  "revert to normal buffer size"! !!MIDISynthChannel methodsFor: 'initialization' stamp: 'jm 1/6/1999 20:10'!initialize	instrument _ FMSound default.	muted _ false.	masterVolume _ 0.5.	channelVolume _ 1.0.	pan _ 0.5.	pitchBend _ 0.0.	activeSounds _ OrderedCollection new.! !!MIDISynthChannel methodsFor: 'accessing' stamp: 'jm 1/6/1999 20:10'!muted	^ muted! !!MIDISynthChannel methodsFor: 'accessing' stamp: 'jm 1/6/1999 20:11'!muted: aBoolean	muted _ aBoolean.! !!MIDISynthChannel methodsFor: 'accessing' stamp: 'jm 1/6/1999 19:43'!pan	^ pan! !!MIDISynthChannel methodsFor: 'accessing' stamp: 'jm 1/6/1999 19:43'!pan: aNumber	"Set the left-right pan to the given value (0.0 to 1.0)."	pan _ aNumber asFloat.! !!MIDISynthChannel methodsFor: 'midi dispatching' stamp: 'jm 1/10/1999 08:42'!keyDown: key vel: vel	"Handle a key down event with non-zero velocity."	| pitch snd |	muted ifTrue: [^ self].	pitch _ AbstractSound pitchForMIDIKey: key.	snd _ instrument		soundForPitch: pitch		dur: 10000.0  "sustain a long time, or until turned off"		loudness: masterVolume * channelVolume * (self convertVelocity: vel).	snd _ (MixedSound new add: snd pan: pan) reset.	SoundPlayer resumePlaying: snd quickStart: false.	activeSounds add: (Array with: key with: snd with: pitch).! !!MIDISynthChannel methodsFor: 'midi dispatching' stamp: 'jm 1/11/1999 11:32'!pitchBend: bend	"Handle a pitch-bend change."	self adjustPitch: bend.! !!MidiInputMorph commentStamp: 'jm 1/7/1999 06:34' prior: 0!I am the user interface for a simple software MIDI synthesizer that is driven by external MIDI input. I come with controls for a single MIDI channel (channel 1), but allow channel controls for additional MIDI channels to be added by the user. The volume, pan, and instrument of each channel can be controlled independently.!!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 20:05'!addChannel	"Add a set of controls for another channel. Prompt the user for the channel number."	| menu existingChannels newChannel |	menu _ CustomMenu new.	existingChannels _ Set new.	1 to: 16 do: [:ch | (instrumentSelector at: ch) ifNotNil: [existingChannels add: ch]].	1 to: 16 do: [:ch |		(existingChannels includes: ch) ifFalse: [			menu add: ch printString action: ch]].	newChannel _ menu startUp.	newChannel ifNotNil: [self addChannelControlsFor: newChannel].! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 19:59'!addChannelControlsFor: channelIndex	| r divider col |	r _ self makeRow		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	r addMorphBack: (self channelNumAndMuteButtonFor: channelIndex).	r addMorphBack: (Morph new extent: 10@5; color: color).  "spacer"	r addMorphBack: (self panAndVolControlsFor: channelIndex).	divider _ AlignmentMorph new		extent: 10@1;		borderWidth: 1;		inset: 0;		borderColor: #raised;		color: color;		hResizing: #spaceFill;		vResizing: #rigid.	col _ self lastSubmorph.	col addMorphBack: divider.	col addMorphBack: r.! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 19:58'!atChannel: channelIndex from: aPopUpChoice selectInstrument: selection	| oldSnd name snd instSelector |	oldSnd _ midiSynth instrumentForChannel: channelIndex.	(selection beginsWith: 'edit ') ifTrue: [		name _ selection copyFrom: 6 to: selection size.		aPopUpChoice contentsClipped: name.		(oldSnd isKindOf: FMSound) | (oldSnd isKindOf: LoopedSampledSound) ifTrue: [			EnvelopeEditorMorph openOn: oldSnd title: name].		(oldSnd isKindOf: SampledInstrument) ifTrue: [			EnvelopeEditorMorph openOn: oldSnd allNotes first title: name].		^ self].	snd _ nil.	1 to: instrumentSelector size do: [:i |		((channelIndex ~= i) and:		 [(instSelector _ instrumentSelector at: i) notNil and:		 [selection = instSelector contents]])			ifTrue: [snd _ midiSynth instrumentForChannel: i]].  "use existing instrument prototype"	snd ifNil: [		selection = 'clink'			ifTrue: [				snd _ (SampledSound					samples: SampledSound coffeeCupClink					samplingRate: 11025) copy]			ifFalse: [snd _ (AbstractSound soundNamed: selection) copy]].	midiSynth instrumentForChannel: channelIndex put: snd.	(instrumentSelector at: channelIndex) contentsClipped: selection.! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 08:19'!channelNumAndMuteButtonFor: channelIndex	| muteButton instSelector r |	muteButton _ SimpleSwitchMorph new		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		offColor: color;		color: color;		label: 'Mute';		target: midiSynth;		actionSelector: #mutedForChannel:put:;		arguments: (Array with: channelIndex).	instSelector _ PopUpChoiceMorph new		extent: 95@14;		contentsClipped: 'oboe1';		target: self;		actionSelector: #atChannel:from:selectInstrument:;		getItemsSelector: #instrumentChoicesForChannel:;		getItemsArgs: (Array with: channelIndex).	instSelector arguments:		(Array with: channelIndex with: instSelector).	instrumentSelector at: channelIndex put: instSelector.	r _ self makeRow		hResizing: #rigid;		vResizing: #spaceFill;		extent: 70@10.	r addMorphBack:		(StringMorph			contents: channelIndex printString			font: (TextStyle default fontOfSize: 24)).	channelIndex < 10		ifTrue: [r addMorphBack: (Morph new color: color; extent: 19@8)]  "spacer"		ifFalse: [r addMorphBack: (Morph new color: color; extent: 8@8)].  "spacer"	r addMorphBack: instSelector.	r addMorphBack: (AlignmentMorph newRow color: color).  "spacer"	r addMorphBack: muteButton.	^ r! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/13/1999 07:33'!closeMIDIPort	midiSynth isOn ifTrue: [midiSynth stopMIDITracking].	midiSynth closeMIDIPort.! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 07:55'!disableReverb: aBoolean	aBoolean		ifTrue: [SoundPlayer stopReverb]		ifFalse: [SoundPlayer startReverb].! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 19:51'!initialize	super initialize.	orientation _ #vertical.	centering _ #center.	hResizing _ #spaceFill.	vResizing _ #spaceFill.	inset _ 3.	color _ Color veryLightGray.	self borderWidth: 2.	midiPortNumber _ nil.	midiSynth _ MIDISynth new.	instrumentSelector _ Array new: 16.	self removeAllMorphs.	self addMorphBack: self makeControls.	self addMorphBack:		(AlignmentMorph newColumn color: color; inset: 0).	self addChannelControlsFor: 1.	self extent: 20@20.! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 10:20'!instrumentChoicesForChannel: channelIndex	| names inst |	names _ AbstractSound soundNames asOrderedCollection.	names _ names collect: [:n |		inst _ AbstractSound soundNamed: n.		(inst isKindOf: UnloadedSound)			ifTrue: [n, '(out)']			ifFalse: [n]].	names add: 'clink'.	names add: 'edit ', (instrumentSelector at: channelIndex) contents.	^ names asArray! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/13/1999 07:47'!invokeMenu	"Invoke a menu of additonal commands."	| aMenu |	aMenu _ CustomMenu new.	aMenu add: 'add channel' action: #addChannel.	aMenu add: 'reload instruments' action: #updateInstrumentsFromLibrary.	midiSynth isOn ifFalse: [		aMenu add: 'set MIDI port' action: #setMIDIPort.		midiSynth midiPort			ifNotNil: [aMenu add: 'close MIDI port' action: #closeMIDIPort]].		aMenu invokeOn: self defaultSelection: nil.! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 07:55'!makeControls	| b r reverbSwitch onOffSwitch |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2;		color: color.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; inset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (		b fullCopy			label: '<>';			actWhen: #buttonDown;			actionSelector: #invokeMenu).	onOffSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'On';		actionSelector: #toggleOnOff;		target: self;		setSwitchState: false.	r addMorphBack: onOffSwitch.	reverbSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'Reverb Disable';		actionSelector: #disableReverb:;		target: self;		setSwitchState: SoundPlayer isReverbOn not.	r addMorphBack: reverbSwitch.	^ r! !!MidiInputMorph methodsFor: 'all' stamp: 'di 5/6/1998 21:11'!makeRow	^ AlignmentMorph newRow		color: color;		inset: 0;		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 08:03'!panAndVolControlsFor: channelIndex	| volSlider panSlider c r middleLine |	volSlider _ SimpleSliderMorph new		color: color;		extent: 101@2;		target: midiSynth;		arguments: (Array with: channelIndex);		actionSelector: #volumeForChannel:put:;		minVal: 0.0;		maxVal: 1.0;		adjustToValue: (midiSynth volumeForChannel: channelIndex).	panSlider _ volSlider fullCopy		actionSelector: #panForChannel:put:;		minVal: 0.0;		maxVal: 1.0;				adjustToValue: (midiSynth panForChannel: channelIndex).	c _ AlignmentMorph newColumn		color: color;		inset: 0;		centering: #center;		hResizing: #spaceFill;		vResizing: #shrinkWrap.	middleLine _ Morph new  "center indicator for pan slider"		color: (Color r: 0.4 g: 0.4 b: 0.4);		extent: 1@(panSlider height - 4);		position: panSlider center x@(panSlider top + 2).	panSlider addMorphBack: middleLine.	r _ self makeRow.	r addMorphBack: (StringMorph contents: '0').	r addMorphBack: volSlider.	r addMorphBack: (StringMorph contents: '10').	c addMorphBack: r.	r _ self makeRow.	r addMorphBack: (StringMorph contents: 'L').	r addMorphBack: panSlider.	r addMorphBack: (StringMorph contents: 'R').	c addMorphBack: r.	^ c! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/13/1999 07:59'!setMIDIPort	| portNum |	portNum _ SimpleMIDIPort outputPortNumFromUser.	portNum ifNil: [^ self].	midiPortNumber _ portNum.! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/13/1999 07:23'!toggleOnOff	midiSynth isOn		ifTrue: [			midiSynth stopMIDITracking]		ifFalse: [			midiPortNumber ifNil: [self setMIDIPort].			midiPortNumber ifNil: [midiPortNumber _ 0].			midiSynth midiPort: (SimpleMIDIPort openOnPortNumber: midiPortNumber).			midiSynth startMIDITracking].! !!MidiInputMorph methodsFor: 'all' stamp: 'jm 1/6/1999 08:17'!updateInstrumentsFromLibrary	"The instrument library has been modified. Update my instruments with the new versions from the library. Use a single instrument prototype for all parts with the same name; this allows the envelope editor to edit all the parts by changing a single sound prototype."	| unloadPostfix myInstruments name displaysAsUnloaded isUnloaded |	unloadPostfix _ '(out)'.	myInstruments _ Dictionary new.	1 to: instrumentSelector size do: [:i |		name _ (instrumentSelector at: i) contents.		displaysAsUnloaded _ name endsWith: unloadPostfix.		displaysAsUnloaded ifTrue: [			name _ name copyFrom: 1 to: name size - unloadPostfix size].		(myInstruments includesKey: name) ifFalse: [			myInstruments at: name put:				(name = 'clink'					ifTrue: [						(SampledSound							samples: SampledSound coffeeCupClink							samplingRate: 11025) copy]					ifFalse: [						(AbstractSound							soundNamed: name							ifAbsent: [								(instrumentSelector at: i) contentsClipped: 'default'.								FMSound default]) copy])].		midiSynth instrumentForChannel: i put: (myInstruments at: name).		"update loaded/unloaded status in instrumentSelector if necessary"		isUnloaded _ (myInstruments at: name) isKindOf: UnloadedSound.		(displaysAsUnloaded and: [isUnloaded not])			ifTrue: [(instrumentSelector at: i) contentsClipped: name].		(displaysAsUnloaded not and: [isUnloaded])			ifTrue: [(instrumentSelector at: i) contentsClipped: name, unloadPostfix]].! !!MixedSound methodsFor: 'sound generation' stamp: 'jm 1/10/1999 08:45'!stopGracefully	"End this note with a graceful decay. If the note has envelopes, determine the decay time from its envelopes."	super stopGracefully.	sounds do: [:s | s stopGracefully].! !!SimpleMIDIPort methodsFor: 'open/close' stamp: 'jm 1/13/1999 08:10'!close	"Close this MIDI port."	portNumber ifNotNil: [self primMIDIClosePort: portNumber].	accessSema _ nil.	lastCommandByteOut _ nil.! !!SimpleMIDIPort methodsFor: 'open/close' stamp: 'jm 1/13/1999 08:23'!ensureOpen	"Make sure this MIDI port is open. It is good to call this before starting to use a port in case an intervening image save/restore has caused the underlying hardware port to get closed."	portNumber ifNil: [^ self error: 'Use "openOn:" to open a MIDI port initially'].	self primMIDIClosePort: portNumber.	self primMIDIOpenPort: portNumber readSemaIndex: 0 interfaceClockRate: InterfaceClockRate.	accessSema _ Semaphore forMutualExclusion.	lastCommandByteOut _ Array new: 16 withAll: 0.  "clear running status"! !!SimpleMIDIPort methodsFor: 'open/close' stamp: 'jm 1/13/1999 08:09'!openOnPortNumber: portNum	"Open this MIDI port on the given port number."	self close.	portNumber _ portNum.	accessSema _ Semaphore forMutualExclusion.	self ensureOpen.! !!SimpleMIDIPort class methodsFor: 'utilities' stamp: 'jm 1/13/1999 08:11'!closeAllPorts	"Close all MIDI ports."	"SimpleMIDIPort closeAllPorts"	| lastPortNum |	lastPortNum _ self primPortCount - 1.	0 to: lastPortNum do: [:portNum | self basicNew primMIDIClosePort: portNum].! !MIDISynth removeSelector: #midiPortNumber:!MIDISynth removeSelector: #on:!MIDISynth removeSelector: #masterVolume!MIDISynth removeSelector: #masterVolume:!MidiInputMorph removeSelector: #overallVolume!MidiInputMorph removeSelector: #openMIDIPort!MidiInputMorph removeSelector: #rateControl!MidiInputMorph removeSelector: #trackControlsFor:!MidiInputMorph removeSelector: #channelControlsFor:!MidiInputMorph removeSelector: #volumeControl!MidiInputMorph removeSelector: #scorePlayer!MidiInputMorph removeSelector: #setChannelCount:!MidiInputMorph removeSelector: #onScorePlayer:title:!MidiInputMorph removeSelector: #atTrack:from:selectInstrument:!MidiInputMorph removeSelector: #setLogRate:!MidiInputMorph removeSelector: #openMIDIFile!MidiInputMorph removeSelector: #makeMIDIController:!MidiInputMorph removeSelector: #rewind!MidiInputMorph removeSelector: #trackNumAndMuteButtonFor:!MidiInputMorph removeSelector: #instrumentChoicesForTrack:!MidiInputMorph removeSelector: #makePianoRoll!MidiInputMorph class removeSelector: #newChannelCount:!MidiInputMorph class removeSelector: #onMIDIFileNamed:!MidiInputMorph class removeSelector: #openOn:title:!MidiInputMorph class removeSelector: #new!