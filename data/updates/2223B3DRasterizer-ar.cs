'From Squeak2.8alpha of 16 February 2000 [latest update: #2217] on 28 May 2000 at 1:06:51 pm'!"Change Set:		B3DRasterizer-arDate:			28 May 2000Author:			Andreas RaabA slight rework of the rasterizer hierarchy. Mainly intended to clean up the problem of rendering to a canvas vs. rendering to a surface. Now all 3D operations take place on a surface. Also, the change set makes B3DRenderEngine>>defaultForPlatformOn: aForm return an instance of a render engine rather than a class"!B3DEnginePart subclass: #B3DVertexRasterizer	instanceVariableNames: 'viewport dirtyRect texture textureStack vbBounds target offset clipRect '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon3D-Engine'!B3DVertexRasterizer subclass: #B3DPrimitiveRasterizer	instanceVariableNames: 'canvas state primObjects textures '	classVariableNames: 'B3DNoMoreAET B3DNoMoreAdded B3DNoMoreAttrs B3DNoMoreEdges B3DNoMoreFaces '	poolDictionaries: ''	category: 'Balloon3D-PrimitiveEngine'!!B3DRenderEngine methodsFor: 'private-access' stamp: 'ar 5/26/2000 15:20'!clipRect	"Return the current clipRect"	^rasterizer clipRect! !!B3DRenderEngine methodsFor: 'private-access' stamp: 'ar 5/26/2000 15:20'!clipRect: aRectangle	"Set the current clipRect"	^rasterizer clipRect: aRectangle! !!B3DRenderEngine methodsFor: 'private-access' stamp: 'ar 5/26/2000 15:19'!target	"Return the rendering target"	^rasterizer target! !!B3DRenderEngine methodsFor: 'private-access' stamp: 'ar 5/26/2000 15:19'!target: aForm	"Set the rendering target"	^rasterizer target: aForm! !!B3DRenderEngine methodsFor: 'private-access' stamp: 'ar 5/26/2000 15:18'!viewportOffset	"Return the offset for the viewport"	^rasterizer viewportOffset! !!B3DRenderEngine methodsFor: 'private-access' stamp: 'ar 5/26/2000 15:16'!viewportOffset: aPoint	"Set the offset for the viewport"	^rasterizer viewportOffset: aPoint! !!B3DRenderEngine methodsFor: 'picking' stamp: 'ar 2/27/2000 20:12'!pickingMatrixAt: aPoint extent: extentPoint	"Return a matrix for picking at the given point using the given extent."	^self pickingMatrixFor: self viewport at: aPoint extent: extentPoint! !!B3DRenderEngine methodsFor: 'picking' stamp: 'ar 2/27/2000 20:10'!pickingMatrixFor: vp at: aPoint extent: extentPoint	"Return a matrix for picking at the given point using the given extent."	| m scaleX scaleY ofsX ofsY |	scaleX _ vp width / extentPoint x.	scaleY _ vp height / extentPoint y.	ofsX _ (vp width + (2.0 * (vp origin x - aPoint x))) / extentPoint x.	ofsY _ (vp height + (2.0 * (aPoint y - vp corner y))) / extentPoint y.	m _ B3DMatrix4x4 identity.	m a11: scaleX; a22: scaleY.	m a14: ofsX; a24: ofsY.	^m! !!B3DRenderEngine class methodsFor: 'instance creation' stamp: 'ar 5/26/2000 15:10'!defaultForPlatformOn: aForm	"Return the render engine that is most appropriate for the current host platform."	(B3DHardwareEngine isAvailableFor: aForm) 		ifTrue:[^B3DHardwareEngine newOn: aForm].	(B3DPrimitiveEngine isAvailableFor: aForm) 		ifTrue:[^B3DPrimitiveEngine newOn: aForm].	^B3DRenderEngine newOn: aForm! !!B3DRenderEngine class methodsFor: 'instance creation' stamp: 'ar 5/26/2000 15:49'!newOn: aForm	^(self new) target: aForm; yourself! !!B3DScanner methodsFor: 'span drawing' stamp: 'ar 5/28/2000 12:19'!textureColor: aTexture atS: sValue atT: tValue	"Return the interpolated color of the given texture at s/t"	| w h fragS fragT sIndex tIndex peeker tex00 tex01 tex10 tex11 sFrac tFrac mixed |	w _ aTexture width.	h _ aTexture height.	fragS _ w * sValue.	fragT _ h * tValue.	sIndex _ fragS truncated.	tIndex _ fragT truncated.	peeker _ BitBlt current bitPeekerFromForm: aTexture.	tex00 _ (peeker pixelAt: (sIndex \\ w)@(tIndex \\ h)) asColorOfDepth: aTexture depth.	tex01 _ (peeker pixelAt: (sIndex+1 \\ w)@(tIndex \\ h)) asColorOfDepth: aTexture depth.	tex10 _ (peeker pixelAt: (sIndex \\ w)@(tIndex+1 \\ h)) asColorOfDepth: aTexture depth.	tex11 _ (peeker pixelAt: (sIndex+1 \\ w)@(tIndex+1 \\ h)) asColorOfDepth: aTexture depth.	sFrac _ fragS \\ 1.0.	tFrac _ fragT \\ 1.0.	mixed _ ((1.0 - tFrac) * (((1.0 - sFrac) * tex00 asB3DColor) + (sFrac * tex01 asB3DColor))) +			(tFrac * (((1.0 - sFrac) * tex10 asB3DColor) + (sFrac * tex11 asB3DColor))).	^mixed! !!B3DScene methodsFor: 'displaying' stamp: 'ar 5/28/2000 12:24'!render	| b3d |	b3d _ (B3DRenderEngine defaultForPlatformOn: Display).	b3d viewport: (0@0 extent: 600@600).	clearColor ifNotNil:[b3d clearViewport: clearColor].	b3d clearDepthBuffer.	"b3d addLight: (B3DAmbientLight color: Color white)."	self renderOn: b3d.	b3d finish.	b3d destroy.! !!B3DVertexRasterizer methodsFor: 'initialize' stamp: 'ar 5/26/2000 15:29'!flush	"Flush pending operations."! !!B3DVertexRasterizer methodsFor: 'initialize' stamp: 'ar 5/26/2000 15:12'!target: aForm	"Set the target for rendering operations"	target _ aForm! !!B3DVertexRasterizer methodsFor: 'accessing' stamp: 'ar 5/26/2000 15:18'!clipRect	"Return the current clipping rectangle"	^clipRect! !!B3DVertexRasterizer methodsFor: 'accessing' stamp: 'ar 5/26/2000 15:18'!clipRect: aRectangle	"Install a clipping rectangle if necessary"	clipRect _ aRectangle! !!B3DVertexRasterizer methodsFor: 'accessing' stamp: 'ar 5/26/2000 15:30'!viewport: aRectangle	| r |	r _ aRectangle.	offset ifNotNil:[r _ r translateBy: offset].	viewport _ B3DViewport origin: r origin corner: r corner.	viewport toggleYScale.! !!B3DVertexRasterizer methodsFor: 'accessing' stamp: 'ar 5/26/2000 15:17'!viewportOffset	"Return the viewport offset"	^offset! !!B3DVertexRasterizer methodsFor: 'accessing' stamp: 'ar 5/26/2000 15:17'!viewportOffset: aPoint	"Set the viewport offset"	offset _ aPoint! !!B3DVertexRasterizer methodsFor: 'processing' stamp: 'ar 5/28/2000 02:25'!clearViewport: aColor	"Clear the current viewport using the given color"	target ifNotNil:[		target 			fill: viewport 			rule: Form over 			fillColor: aColor asColor	].! !!B3DNullRasterizer methodsFor: 'processing' stamp: 'ar 5/26/2000 15:34'!clearViewport: aColor	"Do nothing"! !!B3DPrimitiveRasterizer methodsFor: 'initialize' stamp: 'ar 5/26/2000 15:41'!clipRect: aRectangle	super clipRect: aRectangle.	state bitBlt clipRect: aRectangle.! !!B3DPrimitiveRasterizer methodsFor: 'initialize' stamp: 'ar 5/28/2000 12:16'!target: aForm	| bb span sourceForm |	super target: aForm.	target ifNil:[^self].	"Note: span must be Bitmap since software rasterizer expects canonical RGBA for now"	span _ Bitmap new: 2048.	sourceForm _ Form extent: span size@1 depth: 32 bits: span.	bb _ BitBlt current toForm: target.	self class primitiveSetBitBltPlugin: bb getPluginName.	bb sourceForm: sourceForm.	bb isFXBlt ifTrue:[		"Specific setup for FXBlt is necessary"		bb colorMap: (sourceForm colormapIfNeededFor: target).		bb combinationRule: (target depth >= 8 ifTrue:[34] ifFalse:[Form paint]).	] ifFalse:[		bb colorMap: (sourceForm colormapIfNeededForDepth: target depth).		bb combinationRule: (target depth >= 8 ifTrue:[34] ifFalse:[Form paint]).	].	bb destX: 0; destY: 0; sourceX: 0; sourceY: 0; width: 1; height: 1.	state spanBuffer: span.	state bitBlt: bb.! !!B3DPrimitiveRasterizer methodsFor: 'processing' stamp: 'ar 5/26/2000 15:41'!debugDrawVB: vb	| vtx idx1 idx2 idx3 v1 v2 v3 vp myCanvas |	myCanvas _ target getCanvas.	vp _ viewport clone.	vtx _ Array new: vb vertexCount.	vb vertexArray upTo: vb vertexCount doWithIndex:[:v :i|		vtx at: i put: (vp mapVertex4: v rasterPos).	].	1 to: vb indexCount-1 by: 3 do:[:i|		idx1 _ vb indexArray at: i.		idx2 _ vb indexArray at: i+1.		idx3 _ vb indexArray at: i+2.		idx1 = 0 ifFalse:[			v1 _ vtx at: idx1.			v2 _ vtx at: idx2.			v3 _ vtx at: idx3.			myCanvas line: v1 to: v2 width: 1 color: Color black.			myCanvas line: v2 to: v3 width: 1 color: Color black.			myCanvas line: v3 to: v1 width: 1 color: Color black.		].	].! !!B3DSimulRasterizer methodsFor: 'initialize' stamp: 'ar 5/26/2000 15:45'!clipRect: aRectangle	super clipRect: aRectangle.	scanner bitBlt clipRect: aRectangle.! !!B3DSimulRasterizer methodsFor: 'initialize' stamp: 'ar 5/28/2000 12:18'!target: destForm	| bb span sourceForm |	super target: destForm.	span _ Bitmap new: 2048.	sourceForm _ Form extent: span size@1 depth: 32 bits: span.	bb _ BitBlt current toForm: destForm.	bb sourceForm: sourceForm.	bb isFXBlt ifTrue:[		bb colorMap: (sourceForm colormapIfNeededFor: destForm).		bb combinationRule: 34 "Form paint". "Later we'll change this to 34 for alpha blending"	] ifFalse:[		bb colorMap: (sourceForm colormapIfNeededForDepth: destForm depth).		bb combinationRule: 34 "Form paint". "Later we'll change this to 34 for alpha blending"	].	bb destX: 0; destY: 0; sourceX: 0; sourceY: 0; width: 1; height: 1.	scanner spanBuffer: span.	scanner bitBlt: bb.! !!BalloonCanvas methodsFor: 'balloon drawing' stamp: 'ar 5/28/2000 12:23'!render: anObject	| b3d |	b3d _ (B3DRenderEngine defaultForPlatformOn: form).	"Install the viewport offset"	b3d viewportOffset: origin.	"Install the clipping rectangle for the target form"	b3d clipRect: clipRect.	anObject renderOn: b3d.	b3d flush.! !!InterpolatingImageMorph methodsFor: 'drawing' stamp: 'ar 5/28/2000 12:23'!drawImage: aForm on: aCanvas	"Draw the given form onto the canvas using the Balloon 3D engine"	| engine |	engine _ (B3DRenderEngine defaultForPlatformOn: aCanvas form).	engine == nil ifTrue:[^self].	"Setup the engine"	engine viewport: aCanvas form boundingBox.	"Install the material to be used (using a plain white emission color)"	engine material: (B3DMaterial new emission: Color white).	"Install the texture"	engine texture: aForm.	"Draw the mesh"	engine render: (B3DIndexedQuadMesh new plainTextureRect).	"and finish"	engine finish.! !!WonderlandCamera methodsFor: 'rendering' stamp: 'ar 5/28/2000 12:24'!pickAt: aPoint	"Return the top object at the given point or nil"	^self render: (B3DRenderEngine defaultForPlatformOn: nil) pickingAt: aPoint! !!WonderlandCamera methodsFor: 'rendering' stamp: 'ar 5/28/2000 12:24'!pickObjectAndVertexAt: aPoint	"Return an association with the top object and the primitive vertex at the given point or nil"	^self render: (B3DRenderEngine defaultForPlatformOn: nil) 		pickingAt: aPoint		withPrimitiveVertex: true.! !B3DSimulRasterizer removeSelector: #canvas:!B3DSimulRasterizer removeSelector: #clearViewport:!B3DSimulRasterizer removeSelector: #viewport:!B3DPrimitiveRasterizer removeSelector: #canvas:!B3DPrimitiveRasterizer removeSelector: #clearViewport:!B3DPrimitiveRasterizer removeSelector: #viewport:!B3DVertexRasterizer subclass: #B3DPrimitiveRasterizer	instanceVariableNames: 'state primObjects textures '	classVariableNames: 'B3DNoMoreAET B3DNoMoreAdded B3DNoMoreAttrs B3DNoMoreEdges B3DNoMoreFaces '	poolDictionaries: ''	category: 'Balloon3D-PrimitiveEngine'!B3DVertexRasterizer removeSelector: #canvas:!B3DEnginePart subclass: #B3DVertexRasterizer	instanceVariableNames: 'target offset clipRect viewport dirtyRect texture textureStack vbBounds '	classVariableNames: ''	poolDictionaries: ''	category: 'Balloon3D-Engine'!B3DRenderEngine removeSelector: #canvas:!