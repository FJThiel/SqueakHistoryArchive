'From Squeak 2.1 of June 30, 1998 on 20 September 1998 at 11:28:06 am'!"Change Set:		IRC-lsDate:			20 September 1998Author:			Lex Spoonadds user lists and one-on-one chats to IRC"!Model subclass: #IRCChannelInfo	instanceVariableNames: 'connection name topic members subscribers '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!Model subclass: #IRCChannelListBrowser	instanceVariableNames: 'connection channelList channelIndex sortCriterion '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!Model subclass: #IRCChannelObserver	instanceVariableNames: 'connection channel channelName chatText '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!Model subclass: #IRCChannelUsersBrowser	instanceVariableNames: 'channel userList userIndex '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!Model subclass: #IRCConnection	instanceVariableNames: 'socket protocolMessagesToSend sendBuffer recieveBuffer nick userName fullName server port channelList channelListBeingBuilt motd motdBeingBuilt subscribedChannels directMessageSubscribers protocolMessageSubscribers consoleText messagesProcessed '	classVariableNames: 'DefaultFullName DefaultNick DefaultPort DefaultServer DefaultUserName MessageHandlers '	poolDictionaries: ''	category: 'NetTools-IRC'!Model subclass: #IRCDirectMessagesObserver	instanceVariableNames: 'connection chatText talkingTo '	classVariableNames: ''	poolDictionaries: ''	category: 'NetTools-IRC'!!IRCChannelInfo commentStamp: 'ls 9/17/1998 08:54' prior: 0!holds various info on a channel that the user is a member of.!!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 09:17'!addMember: memberName	"note that memberName is on the channel.  memberName should be given in the user's preferred capitalization"	members add: memberName.	self changed: #memberNames.! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 09:18'!addMembers: list	members addAll: list.	self changed: #memberNames.! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 10:07'!changeTopic: aText	"attempt to change the topic"	connection sendMessage: (IRCProtocolMessage		command: 'TOPIC'		arguments: (Array with: self name with: aText asString)).	^true! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 09:44'!connection	"return the IRC connection I am watching"	^connection! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 09:18'!memberNames	"names of the clients subscribing to this channel"	^members! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 09:39'!removeMember: memberName	"note that memberName has left (PART-ed or QUIT-ed) the channel"	members remove: memberName ifAbsent: [ ^self ].	self changed: #memberNames.! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 08:52'!topic	^topic ifNil: ['']! !!IRCChannelInfo methodsFor: 'access' stamp: 'ls 9/17/1998 08:53'!topic: aString	topic _ aString.	self changed: #topic! !!IRCChannelInfo methodsFor: 'interface' stamp: 'ls 9/17/1998 09:21'!openUserList	"open a listing with all the users on this channel"	^IRCChannelUsersBrowser openOnChannel: self! !!IRCChannelListBrowser methodsFor: 'private-initialization' stamp: 'ls 9/17/1998 11:23'!initialize: anIRCConnection	connection _ anIRCConnection.	channelList _ #().	channelIndex _ 0.	sortCriterion _ #name.	anIRCConnection addDependent: self.	self refreshChannelList.! !!IRCChannelListBrowser methodsFor: 'private' stamp: 'ls 9/17/1998 10:45'!refreshChannelList	"update the list of channels"	| sortBlock |	channelList _ connection channelList.	"sort the channels"	sortCriterion = #name ifTrue: [		sortBlock _ [ :a :b | a name asIRCLowercase < b name asIRCLowercase ] ]	ifFalse: [		sortBlock _ [ :a :b |		a numUsers = b numUsers			ifTrue: [ a name asIRCLowercase < b name asIRCLowercase ]			ifFalse: [ a numUsers > b numUsers ] ] ].	channelList _ channelList asSortedCollection: sortBlock.	channelList _ channelList asArray.		channelIndex _ 0.	self changed: #channelDescriptions.	self changed: #channelIndex.! !!IRCChannelListBrowser methodsFor: 'private' stamp: 'ls 9/17/1998 07:00'!update: aSymbol	aSymbol == #channelList ifTrue: [		self refreshChannelList ].! !!IRCChannelListBrowser methodsFor: 'interface' stamp: 'ls 9/17/1998 08:57'!createChannel	|  channelName |	channelName _ FillInTheBlank request: 'channel name'.	channelName isEmpty ifTrue: [ ^self ].	IRCChannelObserver openForChannelNamed: channelName  onConnection: connection! !!IRCChannelListBrowser methodsFor: 'interface' stamp: 'ls 9/17/1998 08:57'!openSelectedChannel	| channelInfo channelName |	channelInfo _ channelList at: channelIndex ifAbsent: [ ^self ].	channelName _ channelInfo name.	IRCChannelObserver openForChannelNamed: channelName  onConnection: connection! !!IRCChannelListBrowser methodsFor: 'access' stamp: 'ls 9/17/1998 06:59'!channelDescriptions	^channelList collect: [ :channel |		channel name, '(', channel numUsers printString, ')    ', channel topic].! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 08:58'!connection: anIRCConnection channelName: aString	connection _ anIRCConnection.	channel _ connection channelInfo: aString.	channel subscribe: self.	chatText _ Text new.! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 10:22'!openMorphicView	"open a view for interacting with this collector"	| win textArea inputArea topicArea usersButton |	win _ SystemWindow new.	win setLabel: channel name.	win model: self.	topicArea _ PluggableTextMorph on: channel  text: #topic  accept: #changeTopic:.	topicArea acceptOnCR: true.	win addMorph: topicArea frame: (0@0 extent: 0.9@0.1).	usersButton _ PluggableButtonMorph on: channel  getState: nil  action: #openUserList.	usersButton label: 'users'.	win addMorph: usersButton frame: (0.9@0 extent: 0.1@0.1).	textArea _ PluggableTextMorph on: self text: #chatText accept: nil readSelection: #chatTextSelection menu: nil.	win addMorph: textArea frame: (0@0.1 extent: 1@0.8).	inputArea _ PluggableTextMorph on: self text: nil accept: #sendMessage:.	inputArea acceptOnCR: true.	win addMorph: inputArea frame: (0@0.9 extent: 1@0.1) .	win openInWorld.! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 08:57'!release	super release.	channel unsubscribe: self! !!IRCChannelObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 08:57'!sendMessage: aText	channel sendMessage: aText asString.	^true! !!IRCChannelObserver class methodsFor: 'instance creation' stamp: 'ls 9/17/1998 08:56'!openForChannelNamed: channelName  onConnection: connection 	^(super new connection: connection  channelName: channelName) openView! !!IRCChannelUsersBrowser commentStamp: 'ls 9/17/1998 09:12' prior: 0!Used for browsing the list of users on a particular channel.!!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:17'!onChannel: aChannel	channel _ aChannel.	userList _ #().	userIndex _ 0.	channel addDependent: self.	self refreshUserList.! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:47'!openAsMorph	| win listView talkToButton |	win _ SystemWindow labelled: 'users in ', channel name.	win model: self.	listView _ PluggableListMorph on: self list: #userList selected: #userIndex  changeSelected: #userIndex:.	win addMorph: listView  frame: (0@0 extent: 1@0.9).	talkToButton _ PluggableButtonMorph on: self getState: nil action: #talkTo.	talkToButton label: 'talk to selected user'.	win addMorph: talkToButton  frame: (0@0.9 extent: 1@0.1).	win openInWorld! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:18'!openView	^self openAsMorph! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:22'!refreshUserList	"update the user list from the channel"	|oldName |	(userIndex > 0) ifTrue: [		oldName _ userList at: userIndex ].	userList _ channel memberNames asSortedCollection asArray.	userIndex _ 0.	oldName ifNotNil: [		"try to select the same user again"		userIndex _ userList indexOf: oldName ].	self changed: #userList.	self changed: #userIndex.! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:42'!selectedUser	"return the name of the selected user, or nil if none"	^userList at: userIndex ifAbsent: [nil ].! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:43'!talkTo	"open a window for talking to the selected user"	| user |	user _ self selectedUser.	user ifNil: [ ^self ].	^IRCDirectMessagesObserver openForConnection: channel connection   talkingTo: user! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:17'!update: aSymbol	aSymbol == #memberNames ifTrue: [ self refreshUserList ].! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:16'!userIndex	"return the index in userList of the user currently selected"	^userIndex! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:25'!userIndex: anInteger	"change which user is selected"	userIndex _ anInteger.	self changed: #userIndex.! !!IRCChannelUsersBrowser methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:16'!userList	"return the current list of user names"	^userList! !!IRCChannelUsersBrowser class methodsFor: 'instance creation' stamp: 'ls 9/17/1998 09:20'!onChannel: channel	^self new onChannel: channel! !!IRCChannelUsersBrowser class methodsFor: 'instance creation' stamp: 'ls 9/17/1998 09:20'!openOnChannel: channel	^(self onChannel: channel) openView! !!IRCConnection commentStamp: 'ls 9/20/1998 11:27' prior: 0!A connection to an IRC server.  This handles spooling messages in and out, and converts between network commands and more convenient data structures.Start up an instance along with an interface with:		IRCConnection new openView!!IRCConnection reorganize!('access' fullName fullName: nick nick: portAsString portAsString: server server: userName userName:)('server info' channelInfo: channelList channelListReport motd)('private' initialize reset step)('private-message handling' processChannelList: processChannelListEnd: processChannelListStart: processJoin: processMessage: processMotd: processMotdEnd: processMotdStart: processNamReply: processNoTopic: processPach: processPart: processPing: processPrivmsg: processTopic:)('menu' consoleMenu: talkTo)('UI' addToConsole: consoleText consoleTextSelection openAsMorph openChannelList openConnectionDialogue openDirectMessagesObserver openMotd openView perform:orSendTo: release sendRawCommand: subscribe:toChannel: subscribeToDirectMessages: subscribeToProtocolMessages: unsubscribe:fromChannel: unsubscribeFromDirectMessages:)('IRC commands' join: leave: privmsgFrom:to:text: quit requestChannelList requestMotd)('network IO' connect disconnect isConnected processIO sendMessage:)('naval mode' ircMessageRecieved: ircProtocolMessage:)!!IRCConnection methodsFor: 'private' stamp: 'ls 9/17/1998 06:51'!initialize	self reset.	server _ DefaultServer.	port _ DefaultPort.	nick _ DefaultNick.	userName _ DefaultUserName.	fullName _ DefaultFullName.	directMessageSubscribers _ IdentitySet new.	protocolMessageSubscribers _ IdentitySet new.	consoleText _ Text new.! !!IRCConnection methodsFor: 'private' stamp: 'ls 9/17/1998 08:44'!reset	"prepare for a new connection"	recieveBuffer _ String new.	protocolMessagesToSend _ OrderedCollection new.	sendBuffer _ nil.	socket _ nil.	channelList _ nil.	channelListBeingBuilt _ nil.	motd _ nil.	motdBeingBuilt _ nil.	messagesProcessed _ 0.	subscribedChannels _ Dictionary new.! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/17/1998 09:33'!processJoin: aMessage	"a user is joining a channel"	| channelName user |	channelName _ aMessage arguments first.	user _ aMessage prefix.	(user includes: $!!) ifTrue: [ user _ user copyFrom: 1 to: (user indexOf: $!!)-1 ].	(self channelInfo: channelName) addMember: user! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/17/1998 08:48'!processMessage: aMessage	| handler |	protocolMessageSubscribers do: [ :subscriber |		subscriber ircProtocolMessage: aMessage ].	handler _ MessageHandlers at: aMessage command ifAbsent: [ nil ].	handler ifNil: [	^self ].	^self perform: handler  with: aMessage! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/17/1998 10:19'!processNamReply: aMessage	"list of names for a channel, probably a channel being joined"	| names lChannelName channelInfo |	names _ aMessage arguments last findTokens: ' '.	names _ names collect: [ :origName |		('+@' includes: origName first) 			ifTrue: [ origName copyFrom: 2 to: origName size ]			ifFalse: [ origName ] ].	lChannelName _ (aMessage arguments at: 3) asIRCLowercase.	channelInfo _ subscribedChannels at: lChannelName ifAbsent: [nil].	channelInfo ifNotNil: [ channelInfo addMembers: names ].! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/17/1998 10:07'!processNoTopic: aMessage	"remove a channel's topic"	(self channelInfo: (aMessage arguments at: 2)) topic: ''! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/17/1998 09:33'!processPach: aMessage	"a user is leaving a channel"	| channelName user |	channelName _ aMessage arguments first.	user _ aMessage prefix.	(user includes: $!!) ifTrue: [ user _ user copyFrom: 1 to: (user indexOf: $!!)-1 ].	(self channelInfo: channelName) removeMember: user! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/15/1998 06:35'!processPart: aMessage! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/15/1998 06:35'!processPing: aMessage	"ping request"	self sendMessage: (IRCProtocolMessage command: 'pong' arguments: aMessage arguments).! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/15/1998 06:35'!processPrivmsg: aMessage	"handle a PRIVMSG or NOTICE message"	| sender recipient text privMessage info |	"put together the message"	sender _ aMessage prefix.	recipient _ aMessage arguments at: 1.	text _ aMessage arguments at: 2.	privMessage _ IRCMessage sender: sender  recipient: recipient  text: text.	"broadcast the message to all subscribers"	info _ subscribedChannels at: recipient asIRCLowercase ifAbsent: [ nil ].	info ifNotNil: [ info subscribers do: [ :sub |		sub ircMessageRecieved: privMessage ] ].	recipient asIRCLowercase = nick asIRCLowercase ifTrue: [		directMessageSubscribers do: [ :sub |			sub ircMessageRecieved: privMessage ] ].! !!IRCConnection methodsFor: 'private-message handling' stamp: 'ls 9/17/1998 10:14'!processTopic: aMessage	"change a channel topic"	| args |	args _ aMessage arguments.	args size < 2 ifTrue: [ "malformed message" ^self ].	(self channelInfo: (args at: (args size-1))) topic: (args at: args size).! !!IRCConnection methodsFor: 'menu' stamp: 'ls 9/17/1998 11:18'!consoleMenu: menu	^menu		labels: 'connect\disconnect\message of the day\channel list\talk to individual\inspect me' withCRs		lines: #(2 4 5)		selections: #(openConnectionDialogue disconnect openMotd openChannelList talkTo inspect)! !!IRCConnection methodsFor: 'menu' stamp: 'ls 9/17/1998 11:17'!talkTo	"talk to some user using 1-to-1 chat messages"	| user |	user _ FillInTheBlank request: 'user to talk to'.	user _ user withBlanksTrimmed.	user isEmpty ifTrue: [ ^self ].	IRCDirectMessagesObserver openForConnection: self  talkingTo: user! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:42'!addToConsole: aText	"add aString to the text being displayed on console."	consoleText _ consoleText, aText.	consoleText size > 2000 ifTrue: [		consoleText _ consoleText copyFrom: (consoleText size - 1000) to: consoleText size ].	self changed: #consoleText.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:41'!consoleText	^consoleText! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:43'!consoleTextSelection	| size |	size _ self consoleText size.	^size+1 to: size! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:55'!openAsMorph	| win consolePane inputPane |	"build views"	win _ SystemWindow labelled: 'IRC'.	win model: self.	consolePane _ PluggableTextMorph on: self text: #consoleText accept: nil readSelection: #consoleTextSelection menu: #consoleMenu:.	win addMorph: consolePane frame: (0@0 extent: 1@0.9).	inputPane _ PluggableTextMorph on: self text: nil accept: #sendRawCommand:.	inputPane acceptOnCR: true.	win addMorph: inputPane  frame: (0@0.9 extent: 1@0.1).	"subscribe to protocol messages and direct messages, so we can display them on console"	self subscribeToDirectMessages: self.	self subscribeToProtocolMessages: self.	win openInWorld! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:58'!openConnectionDialogue	"open a dialogue for making new connections"	| dialogue textEntry connectButton y yDelta descMorph textEntryList |	dialogue _ SystemWindow new.	y _ 0.	yDelta _ 0.8 / 5.	textEntryList _ OrderedCollection new.	#(		'server'		server		'port'		portAsString		'nick'		nick		'username'	userName		'full name'	fullName	) pairsDo: [ :desc :meth |		descMorph _ PluggableButtonMorph on: self getState: nil action: nil.		descMorph label: desc.		dialogue addMorph: descMorph  frame: (0@y extent: 0.3@yDelta).		textEntry _ PluggableTextMorph on: self text: meth accept: (meth, ':') asSymbol.		textEntry extent: 200@20.		textEntry acceptOnCR: true.		dialogue addMorph: textEntry frame: (0.3@y extent: 0.7@yDelta).		textEntryList add: textEntry.		y _ y + yDelta.	].	connectButton _ PluggableButtonMorph on: [			textEntryList do: [ :m | m hasUnacceptedEdits ifTrue:[ m accept ] ].			self connect 		] getState: nil action: #value.	connectButton label: 'connect'.	dialogue addMorph: connectButton frame: (0@0.8 extent: 1@0.2).	dialogue setLabel: 'connect to an IRC server'.	dialogue openInWorld.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:37'!openMotd	"open a view on the MOTD"	| win textView updateButton |	win _ SystemWindow labelled: 'MOTD'.	textView _ PluggableTextMorph on: self text: #motd accept: nil.	win addMorph: textView  frame: (0@0 extent: 1@0.9).	updateButton _ PluggableButtonMorph on: self getState: nil action: #requestMotd.	updateButton label: 'update'.	win addMorph: updateButton  frame: (0@0.9 extent: 1@0.1).	win openInWorld.! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:37'!openView	^self openAsMorph! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/17/1998 06:45'!perform: aSelector  orSendTo: editor	(self respondsTo: aSelector) ifTrue: [		^self perform: aSelector ].	^editor perform: aSelector! !!IRCConnection methodsFor: 'UI' stamp: 'ls 9/15/1998 06:30'!subscribeToProtocolMessages: anObject	"anObject should respond to #ircProtocolMessage:.  It will be sent all incoming messages"	protocolMessageSubscribers add: anObject! !!IRCConnection methodsFor: 'IRC commands' stamp: 'ls 9/12/1998 04:54'!privmsgFrom: from  to: to  text: text	"send a private message.  'to' can be a channel name...."	| msg |	msg _ (IRCProtocolMessage		prefix: from		command: 'privmsg'		arguments: (Array with: to  with: text)).	self processMessage: msg.	"because these aren't sent back by default"	self sendMessage: msg.! !!IRCConnection methodsFor: 'naval mode' stamp: 'ls 9/17/1998 06:49'!ircMessageRecieved: aMessage	| sender newLine |	Smalltalk beep.	sender _ aMessage sender ifNil: [ 'me' ].	(sender includes: $!!) ifTrue: [ sender _ sender copyFrom: 1 to: (sender indexOf: $!!)-1 ].	newLine _ 		(Text string: sender emphasis: (Array with: TextEmphasis bold)), 		': ', aMessage text, String cr.	self addToConsole: newLine.! !!IRCConnection methodsFor: 'naval mode' stamp: 'ls 9/17/1998 06:47'!ircProtocolMessage: msg	"a new message.  log it on the console, unless it's a channel listing"	(msg command ~= IRCConnection RPLList printString	and: [ msg command ~= IRCConnection RPLMotd ]) ifTrue: [		self addToConsole: msg asString ].! !!IRCConnection class methodsFor: 'class initialization' stamp: 'ls 9/17/1998 10:10'!initialize	"IRCConnection initialize"	self initializeMessageHandlers.	DefaultServer _ 'us.chatnet.org'.	DefaultPort _ 6667.	DefaultNick _ 'nick'.	DefaultUserName _ 'username'.	DefaultFullName _ 'J. Doe <jdoe@somewhere>'.! !!IRCConnection class methodsFor: 'class initialization' stamp: 'ls 9/17/1998 10:11'!initializeMessageHandlers	"initilize the table mapping IRC commands to processing methods"	"IRCConnection initializeMessageHandlers"	MessageHandlers _ Dictionary new.	#(		372		processMotd:		377		processMotd:		375		processMotdStart:		376		processMotdEnd:		ping	processPing:		join		processJoin:		part	processPart:		privmsg		processPrivmsg:		notice		processPrivmsg:		321		processChannelListStart:		322		processChannelList:		323		processChannelListEnd:		331		processNoTopic:		332		processTopic:		topic	processTopic:		353		processNamReply:	) pairsDo: [ :command  :method |		MessageHandlers at: command asString put: method ].! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 11:11'!addToChatText: aString	chatText _ chatText, aString.	chatText size > 1000 ifTrue: [		chatText _ chatText copyFrom: (chatText size - 500) to: chatText size ].	self changed: #chatText.! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 11:11'!chatTextSelection	^chatText size+1 to: chatText size! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 11:11'!ircMessageRecieved: aMessage	| sender newLine |	sender _ aMessage sender ifNil: [ 'me' ].	(sender includes: $!!) ifTrue: [ sender _ sender copyFrom: 1 to: (sender indexOf: $!!)-1 ].	talkingTo ifNotNil: [		"only display messages to or from talkingTo"		sender asIRCLowercase = talkingTo asIRCLowercase ifFalse: [^self ] ].	newLine _ 		(Text string: sender emphasis: (Array with: TextEmphasis bold)), 		': ', aMessage text, String cr.	self addToChatText: newLine.! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 11:15'!openMorphicView	"open a view for messages sent here"	| win textArea inputArea |	win _ SystemWindow new.	win setLabel: (talkingTo ifNotNil: [ talkingTo ] ifNil: [ 'private messages' ]).	win model: self.	textArea _ PluggableTextMorph on: self text: #chatText accept: nil readSelection: #chatTextSelection menu: nil.	talkingTo		ifNil: [ win addMorph: textArea frame: (0@0 extent: 1@1) ]		ifNotNil: [			win addMorph: textArea  frame: (0@0 extent: 1@0.9).			inputArea _ PluggableTextMorph on: self text: nil accept: #sendMessage:.			inputArea acceptOnCR: true.			win addMorph: inputArea  frame: (0@0.9 extent: 1@0.1) ].	win openInWorld.! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 11:09'!sendMessage: aString	"send a message to the user we are talking to"	| newLine |	talkingTo ifNil: [ Smalltalk beep.  ^self ].	connection privmsgFrom: nil  to: talkingTo  text: aString.	newLine _ (Text string: 'me' attribute: TextEmphasis bold),		': ', aString, String cr.	self addToChatText: newLine.	^true! !!IRCDirectMessagesObserver methodsFor: 'as yet unclassified' stamp: 'ls 9/17/1998 09:38'!talkingTo: aName	"set who this window is for talking to"	talkingTo _ aName! !!IRCDirectMessagesObserver class methodsFor: 'instance creation' stamp: 'ls 9/17/1998 09:38'!forConnection: aConnection  talkingTo: aName	^(super new initialize: aConnection) talkingTo: aName! !!IRCDirectMessagesObserver class methodsFor: 'instance creation' stamp: 'ls 9/17/1998 09:38'!openForConnection: aConnection  talkingTo: aName	^(self forConnection: aConnection talkingTo: aName) openView! !IRCChannelInfo removeSelector: #initializeName:!IRCChannelObserver removeSelector: #connection:channel:!IRCChannelObserver class removeSelector: #openForChannel:onConnection:!IRCConnection removeSelector: #openInMorphic!IRCConnection removeSelector: #openMorphicView!IRCConnection initialize!Smalltalk removeClassNamed: #IRCChannelFilter!