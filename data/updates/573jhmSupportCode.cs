'From Squeak 2.3 beta of Nov 25, 1998 on 13 January 1999 at 12:29:45 pm'!"Change Set:		jhmSupportCodeDate:			13 January 1999Author:			John MaloneySlight modifications of several of the C support files.New versions of the Mac project files to support shared librariesand CodeWarrior 11. New readme file."!!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 1/13/1999 12:26'!macArchiveBinaryFile	"To create this method use:	  (FileStream oldFileNamed: 'projectArchive.sit') binary contentsOfEntireFile asArray"	^ #(83 73 84 33 0 3 0 0 51 108 114 76 97 117 2 82 0 0 0 22 6 246 13 13 14 83 113 117 101 97 107 54 56 75 46 112 114 111 106 46 112 114 111 106 0 0 0 0 0 0 0 0 0 0 0 0 186 147 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 19 108 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 90 110 178 194 63 160 0 0 41 239 0 0 37 50 0 0 9 121 0 0 9 109 49 79 67 39 0 0 0 0 0 0 137 102 13 192 248 163 151 120 166 108 101 90 71 40 97 231 166 105 225 55 187 204 219 218 173 219 142 29 97 185 41 121 238 122 108 101 94 102 186 217 74 232 111 122 201 9 251 196 83 79 118 226 153 158 215 198 127 236 228 79 56 97 107 101 157 71 110 27 161 100 180 245 60 126 132 237 83 178 9 187 8 239 237 200 62 9 35 156 112 194 8 219 18 74 232 102 69 24 225 132 17 214 119 172 206 88 230 150 220 54 182 237 200 243 206 206 115 63 91 129 175 142 254 166 87 47 217 210 45 45 122 242 149 109 59 230 17 182 201 241 147 240 200 115 114 251 200 126 134 39 27 160 19 8 64 243 1 12 128 3 128 43 143 1 204 193 127 206 20 209 220 162 137 45 178 20 53 196 184 44 169 162 217 34 153 162 161 197 101 77 149 69 57 102 20 212 125 54 41 75 173 139 22 175 244 37 116 109 211 74 30 171 135 66 225 218 96 227 138 10 14 170 175 56 131 190 140 167 95 95 15 172 187 65 5 240 190 132 140 123 100 177 57 38 69 90 69 45 105 198 20 36 72 148 13 139 179 217 162 24 34 254 204 22 89 140 202 27 164 100 204 196 189 209 106 106 9 49 161 43 170 41 235 190 21 245 236 240 224 33 49 34 169 170 102 138 205 200 70 219 44 71 69 109 195 6 155 132 85 167 89 142 72 73 67 22 21 147 232 97 67 120 200 195 221 21 76 8 127 93 121 192 99 161 28 68 58 112 119 161 230 200 226 145 133 203 1 128 69 239 170 166 142 20 134 164 136 184 170 78 92 180 184 85 12 126 60 56 127 190 239 59 103 170 248 105 147 107 111 236 253 103 184 14 46 159 191 101 176 142 15 38 218 200 120 159 221 175 85 242 193 4 14 210 233 94 56 157 230 104 17 84 102 109 105 237 216 1 176 36 77 159 221 193 252 188 144 166 74 17 109 132 105 46 204 3 23 247 40 159 234 219 191 182 24 61 178 39 128 34 224 184 34 254 75 124 91 206 203 224 1 8 28 64 9 76 198 115 37 164 227 173 172 59 103 119 185 197 76 26 60 234 221 133 245 203 161 9 241 181 167 239 133 166 171 94 176 48 0 36 210 228 79 253 248 52 254 127 229 79 249 83 63 57 58 103 45 118 219 3 79 98 229 109 196 181 129 58 81 227 111 191 231 16 52 93 83 5 107 127 187 30 82 199 14 67 234 246 54 127 106 167 139 157 73 109 223 100 49 177 248 137 133 254 118 170 231 111 239 58 6 107 158 190 227 12 23 68 82 159 223 99 183 184 183 231 41 120 222 214 4 241 27 16 122 251 131 101 254 246 111 224 105 155 31 76 93 7 79 226 127 144 207 237 207 67 211 146 227 184 127 136 113 57 200 56 191 4 59 88 167 167 98 85 100 204 169 192 241 229 229 162 208 245 220 157 16 169 57 0 165 235 220 130 247 81 55 226 29 48 253 142 65 214 180 132 159 21 0 120 174 59 4 30 177 8 60 71 94 129 66 62 253 234 122 62 125 106 42 196 22 28 19 186 132 174 63 22 11 93 63 221 7 158 239 47 21 188 223 60 46 220 167 166 232 12 120 158 40 5 229 119 179 184 143 253 6 207 63 119 88 232 58 33 2 239 217 181 224 24 108 2 207 83 251 133 174 159 31 164 222 1 236 114 3 124 101 253 105 75 225 128 117 252 252 198 226 89 184 79 165 31 171 174 65 71 25 116 4 161 235 228 167 133 178 157 204 207 4 175 126 20 255 172 127 12 159 86 60 131 100 74 231 177 254 62 172 85 133 112 7 214 56 136 255 195 248 239 198 255 33 238 4 240 222 242 144 108 234 218 22 89 111 53 196 58 83 82 163 146 30 21 107 148 102 93 210 111 42 15 213 213 136 193 114 100 212 185 215 5 157 194 47 159 221 142 188 92 214 126 30 66 243 240 228 158 63 164 187 75 191 101 97 120 164 115 46 85 43 77 119 95 127 243 80 189 189 87 159 169 183 43 133 103 170 210 221 11 77 214 187 206 71 14 10 165 183 45 99 255 175 94 221 1 220 130 195 233 238 233 159 3 143 82 147 126 162 173 131 246 130 247 208 73 172 249 96 186 39 157 166 58 88 181 20 174 108 216 15 211 31 238 72 247 108 91 159 238 217 78 156 14 160 67 52 157 218 133 200 23 137 23 147 141 75 240 226 223 170 118 3 115 213 169 168 198 114 12 24 152 47 234 146 137 132 166 155 229 183 129 80 182 252 110 198 158 42 118 238 189 10 218 109 13 236 252 187 6 118 254 240 218 247 52 16 126 240 172 6 182 238 97 255 97 13 124 151 58 99 107 96 43 58 232 191 52 128 129 226 25 200 163 148 197 66 214 74 148 191 218 42 235 111 36 20 187 66 56 28 252 75 5 40 190 94 232 220 125 20 255 133 219 128 175 76 255 224 21 150 159 114 97 247 181 192 255 98 30 148 4 194 97 116 178 255 46 178 230 64 34 17 115 6 224 17 10 213 44 205 214 41 64 51 20 87 196 201 25 168 245 111 214 8 133 107 42 29 2 120 52 6 209 205 156 0 250 90 91 87 59 68 240 125 30 245 21 171 235 115 124 205 45 17 84 52 83 48 115 167 221 197 66 231 125 135 201 105 96 94 73 204 189 84 138 197 52 77 21 171 228 88 194 182 19 172 1 116 94 200 63 201 82 11 241 224 125 145 81 190 238 80 163 149 238 135 213 97 241 200 245 69 230 207 119 4 224 145 227 139 140 54 228 31 60 236 182 59 0 244 53 49 66 228 34 15 185 109 180 33 239 46 75 175 45 255 209 107 97 31 143 76 55 38 35 143 176 100 68 164 216 185 198 90 125 77 72 134 83 0 143 200 72 103 179 125 37 67 35 30 121 196 227 109 39 26 231 193 251 206 230 168 129 149 83 43 223 124 65 175 198 168 79 231 97 27 2 70 156 249 180 93 246 13 159 94 29 92 117 62 199 20 82 145 202 76 146 137 106 145 228 255 44 136 229 15 221 208 51 161 97 140 135 209 18 107 206 214 41 8 87 188 211 85 228 97 38 29 2 120 208 202 245 161 74 254 221 215 48 105 49 155 217 29 80 18 57 182 254 205 26 151 18 249 48 15 199 128 68 190 106 105 53 221 205 103 250 17 10 55 102 251 225 244 145 236 223 234 234 165 100 159 225 113 49 217 159 231 49 150 236 207 247 117 44 217 103 121 56 47 36 251 161 126 252 51 217 15 55 246 253 100 159 229 49 150 236 135 104 124 144 236 51 60 156 3 146 125 174 207 144 55 190 237 211 80 1 33 196 143 91 248 76 156 89 26 240 233 87 217 64 140 243 71 34 127 75 248 151 18 249 57 135 117 12 72 228 141 138 186 224 147 98 219 226 69 31 38 114 215 123 137 10 137 142 58 199 120 162 202 240 184 152 132 206 247 99 44 9 101 121 140 59 253 16 143 15 156 62 195 35 199 151 113 197 137 200 3 141 225 124 116 191 236 64 253 60 98 202 136 45 14 220 124 156 83 26 241 208 154 113 152 235 28 143 85 205 155 178 60 242 67 195 227 34 23 28 113 98 40 20 196 249 37 39 128 245 55 103 157 136 221 98 138 127 135 7 58 89 108 36 179 78 33 30 49 201 48 196 160 22 79 40 177 215 187 223 235 28 168 120 121 131 35 64 95 47 59 71 127 166 207 220 13 140 243 200 58 116 86 103 253 206 106 142 200 108 124 229 225 196 35 3 248 205 239 206 126 78 216 164 181 168 113 41 46 127 200 22 25 114 180 225 113 202 210 225 101 145 16 156 95 52 208 183 166 193 4 28 181 102 62 196 102 134 17 180 167 122 105 30 215 118 13 92 5 32 12 42 8 160 7 79 112 147 173 73 117 177 33 52 122 137 49 188 42 3 117 245 214 109 191 239 120 33 142 207 94 94 75 112 245 129 127 158 182 6 207 174 190 14 50 4 215 98 200 239 245 95 28 93 168 194 185 124 89 55 198 34 135 155 77 169 247 43 227 71 24 17 7 79 88 92 75 108 157 44 77 42 49 243 26 69 21 195 186 18 87 76 101 179 236 12 16 36 156 80 214 141 55 26 166 164 179 65 84 231 134 69 51 208 69 164 109 219 22 7 22 121 37 139 21 236 96 55 228 57 1 88 217 18 7 136 142 115 211 216 155 13 206 52 235 97 154 242 207 190 0 65 89 196 202 54 28 94 28 208 159 222 132 88 237 8 144 114 178 194 253 83 10 26 122 113 130 188 12 223 92 24 39 196 187 177 86 152 93 31 88 14 231 240 178 138 230 6 87 45 171 152 43 206 93 22 168 15 224 54 188 34 88 63 215 105 69 2 110 122 113 164 127 157 121 221 70 152 217 243 192 52 74 207 165 220 253 192 39 26 216 45 99 73 66 199 43 69 156 239 175 171 175 157 141 21 183 13 208 209 95 100 87 116 44 109 212 62 6 51 113 235 35 108 249 93 64 87 113 139 9 171 10 3 93 229 30 34 44 113 4 112 30 143 43 33 44 190 21 106 17 99 243 130 215 61 14 120 193 204 173 33 204 115 47 40 136 225 11 3 120 203 240 107 192 215 112 240 101 9 92 21 119 194 173 136 157 34 108 77 10 238 66 119 43 38 204 123 63 236 196 22 44 36 172 236 105 248 50 192 140 34 194 212 239 193 215 17 43 99 92 111 129 125 88 233 110 194 2 109 152 243 192 139 239 37 0 108 62 1 79 33 198 156 189 169 29 142 35 118 132 176 104 53 188 136 108 186 8 43 255 26 252 30 177 163 140 199 61 248 218 9 148 189 64 216 39 62 194 77 1 16 123 8 187 245 33 206 139 24 170 8 5 227 226 80 3 34 214 71 1 44 228 62 5 240 209 111 179 122 143 112 1 128 89 143 19 22 234 225 66 0 179 191 64 88 195 179 28 190 155 48 123 63 19 212 65 122 13 102 14 171 49 35 69 24 247 12 211 68 24 95 19 146 35 166 136 154 52 20 77 45 96 215 255 125 151 193 147 104 64 36 168 69 229 229 178 234 234 31 22 97 199 236 202 30 123 228 169 183 100 47 222 40 233 170 162 110 52 242 42 162 138 169 233 185 149 154 106 22 244 178 173 104 51 117 201 240 4 147 134 169 197 197 149 242 77 91 52 61 106 184 3 145 136 140 87 209 97 201 108 49 242 234 37 125 163 108 186 233 126 36 106 23 204 111 8 226 243 23 178 153 76 76 162 89 82 187 49 133 132 45 83 12 188 197 150 227 205 216 2 87 255 160 41 171 99 179 46 176 70 36 122 27 101 195 125 125 10 86 134 176 216 36 122 54 162 151 24 97 131 196 250 223 148 16 8 194 129 29 86 207 38 232 182 70 151 177 127 170 28 115 227 212 84 31 215 255 3 0 0 13 0 107 153 150 111 57 41 79 238 192 43 111 123 180 158 126 189 39 167 252 189 205 188 214 206 6 105 173 76 107 210 145 227 110 60 91 79 250 248 205 214 240 87 248 175 111 79 152 145 125 140 12 54 235 200 113 194 59 50 218 100 180 37 91 178 201 126 42 179 149 12 184 155 112 50 225 146 253 132 147 77 126 147 125 146 109 71 110 159 132 147 77 56 217 132 167 100 219 147 219 228 55 219 228 246 145 77 129 123 163 252 220 12 32 218 165 230 51 143 227 9 63 178 9 45 186 201 96 147 209 38 195 77 201 198 147 21 248 2 202 65 183 70 12 35 70 8 241 192 239 38 66 182 255 8 126 223 130 94 8 126 243 225 119 136 228 145 157 240 91 231 13 27 9 51 162 90 196 243 139 159 147 207 147 246 161 233 171 45 196 11 8 244 43 196 154 126 136 231 11 42 145 218 30 237 164 169 152 26 160 118 48 188 2 196 16 184 28 143 254 214 149 182 246 134 187 222 3 60 227 226 17 178 107 138 20 61 93 70 60 191 254 58 33 103 166 61 79 149 191 67 118 147 16 212 223 126 31 141 228 209 25 24 30 126 148 63 86 55 158 207 43 37 249 158 72 213 177 107 120 12 115 111 222 190 51 211 228 247 100 21 33 101 175 146 42 242 14 60 90 199 52 194 144 41 5 64 186 166 219 170 25 111 136 56 240 206 119 28 235 64 242 202 228 87 96 10 95 242 133 243 173 80 119 99 127 53 214 149 201 55 236 60 168 75 161 246 66 221 137 239 58 160 62 7 117 1 214 94 172 11 177 94 131 117 73 242 179 191 122 5 234 46 236 31 192 58 63 117 185 230 34 212 123 82 221 171 142 67 253 228 197 177 167 242 161 222 155 154 216 60 8 117 79 234 236 133 63 66 253 38 249 13 176 84 53 195 51 147 26 33 62 107 36 160 197 212 144 169 13 91 11 100 111 91 113 130 103 135 223 127 48 98 55 56 252 174 179 70 192 171 90 173 211 122 100 145 231 246 15 249 93 55 89 243 103 218 175 250 222 214 9 202 143 203 119 5 242 232 242 254 40 206 243 63 254 255 66 254 10 236 173 119 248 47 99 252 183 105 166 26 177 13 243 116 86 226 224 134 11 252 175 92 193 187 163 123 244 239 42 198 123 251 56 152 184 174 196 114 246 118 72 242 30 66 94 86 206 224 255 109 153 95 80 247 107 25 255 221 198 105 203 214 34 167 114 206 46 112 29 221 23 35 63 43 70 248 187 167 192 67 115 104 181 163 243 82 198 115 175 106 143 25 230 109 154 201 189 146 231 251 208 207 5 191 107 39 167 174 210 126 209 228 11 23 174 66 29 78 190 123 126 211 77 222 5 223 117 168 143 59 188 223 141 120 14 239 27 190 251 242 159 118 66 125 215 133 55 191 147 248 88 7 95 242 76 0 139 117 142 222 55 48 29 132 85 83 83 98 173 122 52 216 213 214 21 50 76 251 134 34 90 210 126 183 95 250 222 67 147 169 78 218 247 227 59 161 151 71 240 157 147 139 132 126 132 79 6 241 93 111 218 55 31 198 57 132 143 28 68 60 199 71 203 16 167 28 231 104 77 94 185 252 213 127 251 235 174 37 159 221 137 115 254 87 127 37 92 127 70 66 143 46 238 12 182 75 253 61 136 252 172 199 250 254 201 159 189 251 129 14 29 221 213 163 222 230 245 231 234 173 17 113 28 189 53 224 59 225 111 142 254 132 238 118 32 79 15 96 61 175 195 149 7 244 247 180 231 51 76 69 50 7 192 30 3 244 119 84 211 163 198 216 130 0 63 149 214 223 188 191 9 61 53 99 189 113 242 194 183 104 221 134 56 110 94 16 186 115 116 246 24 206 219 148 124 107 219 55 223 215 217 227 75 185 194 201 143 187 177 191 57 157 51 150 244 149 219 19 5 53 43 242 209 158 232 211 43 94 236 137 210 252 150 91 35 7 99 81 230 223 139 28 63 177 82 7 191 144 147 63 38 23 190 125 43 94 240 251 34 161 27 96 159 227 255 21 214 200 17 205 180 19 74 12 98 192 144 166 171 243 28 247 73 126 29 94 255 195 163 195 223 135 251 200 213 81 221 252 104 169 60 3 7 27 61 153 203 231 243 222 86 172 55 201 156 114 15 246 107 177 118 116 59 159 179 171 177 174 193 122 139 204 23 98 159 33 116 236 236 49 2 164 115 213 239 160 22 60 162 78 171 131 138 61 4 135 0 254 64 176 169 249 64 109 221 46 173 177 57 186 163 1 94 72 254 251 133 78 231 230 168 12 30 229 35 244 37 116 91 27 86 111 78 192 191 195 139 115 84 132 76 99 0 22 195 102 83 243 41 24 40 51 6 57 178 56 71 73 23 189 23 24 80 34 106 102 2 254 29 93 156 99 99 48 220 83 235 111 64 121 4 20 115 94 33 215 238 26 216 20 45 62 119 231 151 124 253 167 95 246 76 244 183 31 235 167 29 192 4 212 242 237 174 35 77 125 49 239 7 28 149 118 96 79 204 102 117 247 202 83 95 248 219 69 68 133 14 92 155 48 212 124 107 164 97 40 39 14 234 253 28 149 165 128 213 45 128 218 221 84 48 12 158 145 195 101 142 205 121 165 157 2 142 234 181 236 168 102 100 97 153 95 11 212 115 196 203 81 11 1 53 166 157 204 192 74 212 194 25 84 83 211 7 239 160 174 65 94 153 113 45 240 122 13 181 168 5 118 244 157 149 37 160 187 78 85 137 170 166 117 11 155 237 35 24 42 235 20 83 212 142 230 53 109 170 117 106 127 98 14 18 62 230 230 12 149 117 74 56 170 183 255 116 92 205 96 2 67 212 251 57 67 180 227 227 168 149 126 67 143 106 182 102 192 230 29 200 50 13 57 1 75 50 28 149 118 74 57 106 113 80 27 87 163 65 35 154 150 4 203 43 28 149 118 214 114 212 194 246 81 85 183 179 20 177 148 196 213 64 59 101 56 235 161 4 56 100 212 84 198 230 128 89 22 226 168 180 83 206 81 215 206 160 246 171 227 246 13 100 169 161 10 84 222 193 240 97 91 139 101 40 146 26 170 68 94 131 234 48 245 213 140 163 208 20 39 212 144 71 170 80 175 244 198 37 167 87 201 208 58 161 33 211 52 210 110 194 212 64 19 39 87 3 237 220 197 115 67 33 72 187 223 31 202 160 210 28 200 189 156 37 194 245 168 188 214 120 60 166 246 43 177 83 115 192 146 161 13 124 214 178 214 104 212 84 45 235 88 143 66 109 101 22 154 102 79 62 43 75 161 213 56 107 159 106 241 187 182 127 205 122 183 240 60 83 137 47 107 104 35 170 188 67 181 108 37 118 211 21 80 67 52 141 115 13 209 206 38 68 13 24 177 140 145 223 152 117 51 242 218 15 103 125 57 79 145 168 91 4 42 152 214 50 106 13 122 67 56 98 106 241 12 173 14 106 45 58 37 164 225 88 78 125 18 117 171 80 131 54 78 215 3 75 106 184 7 245 218 21 49 244 101 189 110 227 73 212 189 123 155 242 30 239 193 252 10 29 216 55 51 84 119 203 159 170 255 218 62 204 175 208 129 93 179 152 117 97 55 157 186 188 231 156 72 189 123 206 193 165 10 67 117 47 91 82 175 180 157 69 84 232 144 251 102 114 222 168 150 113 188 89 47 175 67 111 128 45 8 128 90 75 78 185 3 149 199 133 144 81 30 187 12 224 179 210 206 253 28 181 196 111 12 199 13 61 147 218 36 234 3 136 202 102 237 210 227 137 57 47 146 168 15 114 84 31 75 27 217 136 40 121 173 231 168 5 237 161 144 63 151 203 101 166 108 64 134 0 148 26 243 73 99 252 22 182 156 181 145 163 150 246 26 182 54 160 69 230 114 205 44 234 78 84 57 55 147 172 202 175 231 215 135 56 106 17 228 114 219 52 50 81 84 162 62 140 42 15 170 122 118 111 48 139 250 136 240 33 56 68 50 6 239 48 180 11 25 162 25 165 29 118 7 105 88 169 134 221 34 177 193 30 197 252 36 1 52 81 212 192 143 139 226 184 249 75 3 179 187 12 158 176 105 231 81 228 53 204 54 61 119 18 91 179 200 229 160 188 229 140 242 24 162 134 140 177 219 188 74 47 127 92 184 114 4 2 236 39 179 62 193 211 134 123 255 48 245 203 223 190 136 121 8 58 100 15 71 45 178 70 192 83 6 180 249 205 23 221 225 99 70 129 14 217 203 81 225 54 51 20 83 236 1 195 28 14 199 213 8 181 191 127 226 211 141 63 162 66 7 46 74 102 82 212 237 11 148 212 232 225 20 162 66 7 238 24 68 138 90 184 123 72 213 63 243 172 72 108 207 60 11 215 113 12 213 189 166 187 248 242 27 147 28 149 118 72 171 200 202 12 48 183 5 132 203 53 220 231 65 103 63 102 101 200 67 195 203 89 217 207 81 43 252 125 65 62 238 92 224 147 168 109 200 80 143 49 6 139 165 236 166 231 186 43 183 115 53 184 55 212 169 250 231 3 66 67 207 7 72 128 111 55 75 20 221 210 78 196 21 19 192 62 152 87 110 109 59 196 38 85 251 156 122 34 187 111 144 59 209 78 142 90 160 39 98 89 221 205 206 218 197 81 215 140 42 39 98 154 149 25 86 206 218 205 81 189 81 109 52 71 144 51 235 1 156 117 44 50 164 152 89 92 57 107 15 87 222 141 171 150 235 240 244 214 4 149 7 29 18 68 149 31 128 163 103 53 171 7 153 27 122 57 106 37 142 216 62 30 81 227 52 141 74 217 74 71 57 40 242 171 50 172 246 169 131 32 163 91 219 74 57 107 104 198 243 162 106 192 84 6 135 231 146 185 156 245 208 76 110 88 184 233 78 157 189 244 156 80 195 165 231 224 210 39 173 161 235 41 64 106 40 204 183 236 101 239 109 217 249 45 134 163 87 122 237 55 17 12 250 59 89 167 159 162 250 95 119 175 91 146 87 94 122 205 51 17 12 245 192 245 209 75 175 145 195 20 181 173 197 189 101 73 94 185 164 10 212 75 42 57 194 102 173 118 47 87 32 181 194 45 5 67 133 14 57 202 80 43 221 59 149 228 161 159 180 120 38 44 59 113 146 118 200 49 234 94 254 70 247 42 37 249 135 111 124 31 103 133 14 252 39 6 83 158 251 31 26 169 203 190 98 177 247 242 21 147 39 233 173 84 139 175 152 169 124 168 77 77 103 88 250 255 22 152 189 160 195 223 120 224 223 77 72 94 40 172 14 78 79 207 0 193 27 56 111 134 55 116 46 111 205 171 181 208 223 66 255 243 35 212 99 217 20 192 91 243 195 40 108 151 223 134 43 160 191 135 2 49 139 190 249 63 13 13 14 83 113 117 101 97 107 80 80 67 46 112 114 111 106 103 99 116 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 22 0 0 40 10 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 103 33 178 194 63 158 0 0 42 205 0 0 38 80 0 0 10 81 0 0 9 221 187 147 37 159 0 0 0 0 0 0 241 251 13 192 248 163 175 204 107 101 122 236 54 229 52 55 59 59 101 131 232 151 215 202 221 186 143 37 161 100 31 187 181 179 223 52 211 78 230 201 188 228 177 129 120 106 120 78 207 90 243 249 106 117 118 125 183 22 225 151 103 228 55 147 112 194 201 38 155 69 232 102 155 146 125 118 100 179 35 140 108 221 71 248 229 197 200 38 156 80 178 143 18 74 40 191 24 217 82 178 217 109 182 217 182 163 109 86 103 103 167 121 117 140 48 194 207 205 8 63 241 192 87 93 114 154 229 229 185 165 69 51 143 176 77 152 71 216 38 183 117 179 77 126 147 223 100 63 195 147 13 140 247 128 0 244 50 60 240 1 112 0 144 182 2 32 21 207 168 187 61 202 177 79 221 203 129 242 134 15 110 181 40 199 241 124 171 124 243 109 102 229 53 245 86 24 95 114 119 189 36 174 177 219 173 102 159 223 91 11 60 102 183 217 236 197 214 178 197 57 28 228 199 245 162 199 26 241 249 233 216 177 170 122 26 8 174 23 1 110 169 155 177 200 172 252 110 219 99 249 57 119 233 150 109 222 246 68 70 10 34 147 242 60 74 203 109 102 48 226 169 199 115 76 225 174 183 117 69 175 131 177 66 191 108 51 189 245 233 182 23 59 138 230 198 20 28 73 62 174 248 10 87 21 214 207 5 136 97 220 98 216 23 29 33 75 226 246 70 116 12 6 20 150 2 228 189 194 37 165 226 11 30 116 244 142 73 73 247 168 132 167 241 174 74 75 193 11 62 209 185 70 172 150 206 106 169 198 216 208 123 179 188 190 238 220 251 113 37 235 229 128 84 103 117 139 178 44 201 231 41 204 124 79 169 115 161 3 30 19 69 33 210 132 183 43 57 7 130 71 22 88 179 154 1 145 79 138 24 109 162 211 84 84 98 66 139 48 89 111 179 206 158 109 126 170 55 139 69 45 51 245 18 186 47 227 154 184 88 254 158 83 121 176 244 251 171 184 47 244 167 51 153 33 6 173 76 9 195 138 194 81 16 52 85 189 82 108 217 2 176 72 161 47 164 96 172 206 230 245 136 78 239 0 211 104 72 135 56 238 7 124 176 251 126 58 24 61 213 65 18 128 227 26 249 22 254 104 212 30 48 0 100 182 98 9 140 195 119 147 168 142 63 199 212 57 123 139 78 98 165 193 99 189 199 97 254 12 40 71 124 229 201 173 80 126 203 239 85 12 0 137 148 91 130 191 56 137 231 17 75 208 18 236 218 127 243 74 84 219 0 123 49 243 70 226 138 46 7 92 129 165 241 203 187 161 252 214 60 88 249 70 5 4 15 116 66 240 129 6 75 240 177 56 246 38 120 127 173 202 68 229 103 50 90 26 41 159 165 177 249 0 172 248 249 67 189 92 16 9 62 248 205 144 196 97 205 131 240 114 168 38 136 95 79 161 55 238 156 106 105 124 2 95 135 248 193 132 85 176 23 207 83 124 30 120 25 202 23 29 196 251 119 25 151 14 198 249 40 108 97 74 79 192 172 200 152 243 0 199 103 100 152 132 230 151 54 129 179 160 21 146 87 233 133 169 49 7 17 111 130 137 15 157 98 77 33 188 18 15 96 184 99 55 24 76 9 96 248 201 113 48 242 202 159 43 120 229 196 4 112 207 59 32 52 11 205 111 39 9 205 191 121 6 12 207 103 9 83 190 125 80 248 154 39 72 111 192 176 39 25 92 111 78 231 102 29 195 247 47 117 10 205 191 54 1 111 104 153 119 0 251 1 195 79 159 21 154 255 208 65 218 1 180 232 1 190 90 113 50 212 35 96 30 11 95 157 52 29 239 65 229 185 252 2 116 148 83 142 32 52 191 90 40 76 253 138 145 97 83 252 251 241 100 250 49 60 49 105 50 149 41 189 199 252 207 96 174 60 132 155 48 71 7 158 157 120 182 225 185 27 29 133 55 100 160 185 162 183 150 212 251 124 94 127 32 131 188 205 2 92 237 107 157 144 16 223 1 227 31 79 143 24 208 28 181 42 49 43 87 123 120 46 36 44 59 136 231 222 26 229 77 11 226 179 200 14 33 225 166 57 136 29 199 211 8 19 26 29 152 191 117 38 68 71 35 110 122 39 63 242 59 108 87 241 57 1 110 246 143 90 100 167 223 5 19 179 209 217 110 154 195 92 181 246 8 170 141 250 176 252 99 48 63 233 145 20 169 128 25 71 55 90 30 125 50 128 8 26 1 241 57 242 45 72 72 217 193 101 235 237 136 237 67 126 77 204 50 199 63 126 175 154 31 245 160 252 9 211 124 33 6 73 48 141 220 146 43 6 126 74 134 77 10 248 189 235 36 255 26 217 84 18 16 61 85 162 191 202 84 224 170 244 139 254 245 25 182 146 2 147 53 3 51 189 176 63 14 30 22 14 255 234 126 204 30 167 222 169 56 210 241 229 207 222 82 218 146 191 163 98 248 228 225 90 31 102 75 86 218 22 110 232 203 183 127 78 111 62 157 17 223 228 41 109 31 39 69 241 205 161 14 206 126 162 149 78 161 197 89 1 220 188 78 165 109 226 231 193 224 42 80 246 52 52 209 157 91 154 84 139 57 119 42 237 88 45 152 7 179 218 33 181 244 89 152 184 171 73 105 223 88 161 180 223 31 196 247 173 232 146 229 39 90 16 249 2 241 98 202 199 97 38 58 41 219 157 106 49 36 252 18 116 212 101 133 154 172 2 151 103 141 228 63 211 161 12 103 128 196 118 238 133 61 251 241 52 110 4 62 87 217 119 156 245 79 209 187 247 204 5 254 80 58 76 202 180 219 209 201 254 27 100 205 153 62 159 91 27 128 135 205 86 144 53 148 39 30 141 192 180 184 142 220 145 164 63 159 195 102 47 200 213 8 224 81 102 69 19 212 2 208 181 184 164 184 143 224 135 60 28 57 203 29 81 230 202 26 103 87 87 23 112 237 143 178 135 135 30 97 46 101 121 176 22 253 59 42 91 159 37 186 221 94 175 199 148 39 185 153 185 126 100 1 15 135 54 239 132 150 180 5 176 45 163 147 158 16 15 222 236 188 200 87 111 43 83 187 251 254 234 80 121 68 155 157 179 103 107 2 240 136 50 59 47 10 242 55 30 225 158 226 134 174 190 1 34 87 121 72 13 23 5 185 28 106 189 214 252 167 94 169 53 85 121 12 170 49 14 121 216 69 217 41 186 47 8 171 234 234 19 251 126 117 253 131 135 115 64 217 33 93 169 9 37 30 58 226 241 129 19 141 242 224 205 103 251 168 158 136 42 150 54 92 169 87 249 162 79 235 80 134 76 185 142 249 52 123 255 158 79 47 183 22 13 247 49 70 74 146 59 216 201 84 121 157 245 255 179 32 214 127 248 101 255 96 211 48 194 67 174 113 87 14 229 137 183 231 92 82 21 121 4 234 53 2 120 80 68 155 177 74 254 173 171 157 106 81 237 200 231 47 88 162 221 210 145 163 244 231 115 92 235 200 251 121 104 6 116 228 69 89 249 166 97 61 108 246 178 33 61 180 62 58 251 247 85 189 214 217 15 242 184 218 217 15 243 24 233 236 135 117 29 233 236 135 120 104 47 116 246 125 122 252 179 179 239 23 246 195 206 126 136 199 72 103 223 71 227 122 103 63 200 67 59 160 179 143 54 203 82 245 7 62 141 179 3 179 104 110 32 29 178 102 162 63 183 246 250 116 46 243 105 237 143 142 252 253 194 191 214 145 95 112 88 205 128 142 188 204 229 153 119 187 169 97 193 252 127 117 228 113 127 239 168 144 232 69 231 24 237 168 6 121 92 237 132 134 245 24 233 132 134 120 140 58 125 31 143 235 78 63 200 35 202 60 232 138 99 144 7 26 195 112 235 126 195 129 34 60 220 174 1 91 236 249 243 113 161 210 136 135 183 18 135 185 46 240 40 170 172 29 226 17 107 235 31 23 185 226 136 99 108 54 43 206 47 105 1 196 95 157 117 12 170 197 42 254 18 15 116 50 247 64 207 58 158 120 208 120 166 201 234 173 243 185 220 239 170 31 118 14 172 120 233 46 77 0 93 111 56 71 164 167 31 252 55 48 202 99 200 161 135 234 44 226 172 129 129 50 27 13 29 78 60 50 128 95 123 121 246 51 166 214 91 227 169 19 235 250 231 115 47 5 50 228 232 194 227 148 165 198 75 80 33 104 191 212 64 119 36 210 236 112 119 93 244 32 52 143 75 149 162 162 241 32 32 194 142 208 251 118 16 46 79 65 95 138 69 24 234 223 126 46 184 252 204 116 241 245 32 62 221 224 185 105 107 228 121 38 233 2 136 13 139 143 114 230 73 98 149 228 151 71 90 14 61 68 177 97 107 230 174 120 190 216 51 150 255 110 93 105 249 196 234 213 114 64 244 179 31 140 218 13 65 101 156 0 81 124 200 22 185 240 222 4 10 242 202 110 99 132 54 182 105 65 3 68 113 46 17 117 164 29 12 167 99 156 186 27 163 212 102 247 187 234 100 151 199 68 119 87 192 181 246 47 75 31 52 73 98 23 185 124 168 14 76 165 54 106 127 104 87 8 109 10 137 68 110 102 137 67 237 109 50 190 132 99 250 45 248 4 79 35 155 13 215 58 40 220 119 186 160 190 141 19 228 93 184 115 97 148 16 175 199 92 56 27 31 250 52 95 34 33 205 90 148 157 147 102 74 203 206 116 100 226 213 190 216 234 72 211 90 41 1 125 228 175 1 69 239 110 29 33 165 99 69 34 117 207 201 220 143 129 247 149 178 191 140 147 124 126 252 165 152 2 169 37 142 226 25 152 241 27 61 116 98 51 217 47 58 214 53 221 249 67 160 173 13 184 216 2 96 233 61 64 255 105 18 9 203 223 4 52 19 72 123 11 160 254 163 240 25 188 238 32 108 156 3 170 241 74 91 53 96 218 205 128 92 185 124 194 132 63 194 103 17 67 231 5 184 175 11 104 211 192 243 132 137 127 130 173 172 79 199 168 93 11 95 103 238 134 225 249 24 108 71 140 237 216 48 44 133 239 33 214 64 88 210 147 240 28 98 95 36 108 226 6 216 135 50 225 142 4 252 105 176 29 186 0 38 63 66 152 177 28 94 69 172 153 176 133 79 195 49 92 188 194 52 19 190 79 149 49 21 247 246 0 172 91 194 141 71 108 33 97 159 120 138 75 70 140 70 51 96 117 37 135 11 24 82 38 17 54 89 199 221 129 24 91 25 98 55 115 56 43 152 194 126 195 150 21 114 54 84 151 205 252 165 242 92 57 98 88 105 168 211 235 28 54 28 211 88 211 145 183 149 195 89 154 233 183 19 54 255 183 220 125 184 142 130 205 80 58 102 114 155 112 241 14 219 126 147 222 206 161 142 51 63 201 138 174 131 182 106 164 178 28 147 131 132 241 108 239 130 193 142 93 140 228 12 152 176 110 101 151 215 147 100 19 171 93 78 147 85 244 157 254 117 140 191 126 194 15 213 63 233 227 35 15 66 28 226 217 120 65 119 198 177 52 128 98 245 86 73 159 150 60 113 145 97 20 246 44 148 209 16 26 169 10 167 12 227 101 162 223 227 242 84 203 186 156 42 87 192 235 143 206 245 122 2 241 97 165 114 26 2 126 81 54 88 235 229 128 183 206 180 68 90 191 206 235 175 146 245 153 78 167 132 122 217 197 64 141 172 115 136 254 106 41 160 207 170 119 185 171 66 9 99 75 173 184 98 68 10 212 251 198 210 172 106 72 24 35 97 217 46 25 165 150 234 42 81 130 184 200 32 43 203 19 214 86 29 193 8 11 21 130 187 117 178 230 218 48 217 88 246 95 44 68 140 176 83 196 34 59 43 4 130 112 32 136 229 11 17 212 171 163 209 168 159 71 114 235 113 42 171 155 235 255 1 0 0 13 0 235 117 156 90 142 242 179 65 254 166 87 218 203 7 244 178 137 155 109 22 237 189 214 206 38 94 39 211 107 194 37 91 195 179 245 164 143 223 212 180 240 95 223 38 123 64 35 60 70 6 91 35 199 9 219 100 176 201 109 114 155 252 150 108 201 38 251 169 93 43 217 228 25 57 30 249 45 37 155 60 239 200 38 156 236 35 191 201 38 183 9 39 156 112 178 9 39 251 25 97 183 159 220 62 114 219 35 199 201 109 6 220 139 111 179 139 226 143 114 83 59 143 211 199 19 126 228 233 109 186 201 96 147 209 38 195 77 201 198 147 21 248 2 26 100 183 6 100 57 68 8 177 193 239 30 66 14 188 67 200 65 104 17 47 252 102 194 239 55 73 6 169 33 118 120 171 14 151 51 140 233 221 111 83 0 18 123 175 135 213 198 103 179 51 188 202 117 60 192 226 120 244 11 253 162 139 216 111 87 58 202 94 191 67 219 142 111 255 109 242 1 30 253 229 120 172 127 187 242 145 104 255 143 31 114 187 143 183 61 243 117 46 208 251 254 196 219 103 201 243 246 207 31 28 250 0 207 1 112 167 237 103 191 122 151 220 6 237 73 209 12 41 37 127 132 119 165 204 35 40 49 253 178 165 176 38 42 145 234 192 18 117 252 250 177 110 137 221 154 250 26 176 112 196 94 126 161 1 106 55 246 203 177 206 143 189 169 217 161 206 134 218 1 117 27 190 107 133 250 42 212 251 176 126 12 235 253 88 87 96 157 21 251 194 111 95 131 186 29 251 30 172 203 226 179 101 55 160 174 141 183 101 244 67 253 204 141 241 11 153 80 159 140 79 238 29 132 186 41 126 101 250 207 80 191 69 168 83 183 37 116 38 118 214 201 87 71 93 82 72 244 42 210 136 186 44 246 217 77 39 116 54 245 253 7 147 115 231 61 31 179 78 169 58 234 17 2 13 234 229 112 96 69 231 250 85 125 11 167 202 254 74 251 5 63 220 55 73 245 177 244 206 67 29 45 221 79 32 159 255 233 255 119 242 30 168 183 195 244 247 86 166 127 163 164 136 1 77 86 46 167 44 190 119 85 255 205 43 116 79 250 126 27 211 189 105 2 134 120 88 8 165 199 91 163 161 187 11 117 217 60 67 255 223 27 249 5 125 95 200 244 111 147 47 171 154 20 24 78 79 246 207 37 125 127 10 245 217 52 98 190 219 178 108 217 160 210 46 211 231 5 76 231 14 81 27 151 149 143 101 38 205 134 206 135 112 158 235 250 110 153 154 121 151 246 15 76 189 60 253 46 212 7 99 119 94 56 244 64 119 93 239 74 244 199 186 238 219 16 207 212 189 248 7 175 254 165 6 234 173 211 111 125 63 250 169 15 190 98 163 169 185 210 244 193 78 230 3 159 168 72 66 168 33 28 244 180 54 182 122 101 69 251 208 17 79 39 231 221 105 99 238 29 153 138 183 208 254 25 124 167 251 229 24 190 51 115 145 238 31 125 78 118 224 187 206 228 220 60 138 60 244 57 226 69 60 115 142 230 32 78 46 242 168 139 221 154 253 250 191 231 235 241 181 57 91 131 60 255 235 191 60 238 63 57 26 14 174 236 12 62 99 248 239 41 212 167 8 235 39 166 126 117 231 35 31 154 190 171 66 191 45 250 207 242 219 97 196 49 253 86 141 239 244 249 102 250 79 247 221 227 168 211 147 88 47 250 112 243 1 255 61 107 123 14 220 83 97 250 15 246 24 224 191 94 41 28 148 199 151 13 216 149 244 223 226 124 211 253 228 195 186 116 106 250 187 180 246 35 142 149 23 116 223 153 62 235 70 190 125 177 223 237 255 206 61 159 245 172 229 10 51 63 246 98 127 71 50 103 172 249 107 126 79 116 207 95 146 26 248 100 79 212 176 233 197 158 40 169 111 145 58 218 25 10 178 249 189 162 241 103 55 235 208 23 114 242 167 226 194 119 110 211 11 125 95 33 223 163 227 200 212 183 88 29 237 145 20 45 42 132 32 6 12 73 97 113 81 99 167 161 175 169 235 127 116 52 245 91 221 75 61 18 12 43 159 44 149 41 16 214 122 46 212 125 184 152 247 118 99 189 221 200 41 123 176 255 40 214 166 111 23 115 118 9 214 187 176 222 105 228 11 125 159 161 251 216 220 99 184 72 75 198 31 160 230 235 244 196 94 170 192 211 235 236 138 134 53 105 68 172 118 75 151 82 250 195 118 158 125 38 15 61 143 120 124 238 114 103 181 215 235 92 161 65 206 39 121 160 30 14 143 160 13 173 48 64 184 21 30 121 173 244 94 96 64 8 136 171 100 244 121 144 228 81 24 81 228 1 88 84 43 84 217 80 154 10 189 223 160 31 236 255 24 15 221 47 120 191 144 239 27 141 138 194 112 121 143 167 188 246 100 123 90 143 11 137 78 5 57 0 231 33 135 72 165 163 220 254 19 124 243 182 163 60 179 134 28 33 71 201 49 114 156 156 32 181 14 123 73 61 236 12 79 193 30 169 142 156 38 103 224 46 160 30 50 223 57 152 171 141 164 9 84 109 38 45 164 149 180 145 118 226 38 30 210 65 58 225 218 228 60 164 110 31 241 147 110 210 67 122 73 31 220 76 60 67 46 240 121 73 249 220 227 27 161 124 29 229 25 222 97 58 59 9 121 142 191 207 160 153 31 180 173 7 113 157 37 150 215 98 231 223 168 183 77 170 90 244 18 237 16 59 71 181 156 110 160 102 80 212 198 107 214 188 138 221 186 121 221 54 233 241 186 93 180 67 50 25 215 93 150 139 33 243 255 8 81 161 3 179 30 80 139 42 172 108 48 243 101 251 79 109 147 254 166 62 63 237 144 44 202 181 249 164 195 127 57 34 170 213 115 119 46 247 185 210 249 204 80 89 199 193 81 75 156 114 56 40 105 146 12 219 113 72 76 138 108 48 96 105 131 163 210 78 54 71 205 245 72 19 98 208 35 7 197 5 190 44 83 112 84 218 217 194 81 179 155 198 196 176 150 146 136 37 25 134 202 58 57 200 245 124 20 54 215 65 69 24 95 0 102 121 133 163 210 78 46 71 45 76 160 250 197 9 237 67 100 150 90 24 42 235 228 113 212 45 157 190 110 77 10 45 73 100 120 40 31 117 245 136 35 244 166 98 81 87 150 180 116 55 216 73 1 250 149 222 161 164 253 106 40 84 168 123 72 81 100 37 237 33 154 10 185 27 104 103 43 159 40 217 96 109 191 211 187 132 74 179 26 159 40 44 181 21 161 243 26 34 145 144 232 23 66 195 11 192 134 66 197 156 235 214 134 96 80 17 85 181 207 45 208 177 50 15 77 243 33 231 202 146 98 9 114 237 18 85 57 170 4 22 29 97 112 221 166 207 60 69 136 108 120 168 20 93 222 44 170 154 16 122 48 21 208 67 52 49 115 15 209 206 118 68 117 201 161 160 152 178 158 193 117 7 234 234 135 211 187 244 76 49 80 119 234 168 48 180 54 80 119 225 108 240 5 20 41 178 36 171 137 250 40 78 74 72 81 161 180 251 12 212 221 186 27 164 9 26 164 214 220 176 7 253 218 26 144 195 27 126 221 75 39 74 125 190 117 187 52 243 165 247 111 96 30 130 14 108 214 25 170 181 137 143 87 125 227 44 71 165 29 82 198 81 51 213 209 148 60 20 21 182 82 136 10 29 82 94 15 121 187 173 54 107 36 109 5 154 0 232 46 137 39 0 218 217 199 81 29 170 22 148 228 116 98 163 201 88 71 189 74 30 227 168 217 128 10 81 50 149 54 230 80 247 39 80 21 41 60 184 142 90 129 186 178 188 187 172 235 125 212 3 212 229 45 37 121 224 187 22 81 88 26 150 108 83 206 231 43 237 28 228 168 249 255 68 133 180 252 128 43 221 171 79 122 60 206 22 214 57 132 115 168 81 28 147 150 82 195 124 30 170 196 249 234 85 100 0 85 215 210 198 227 56 189 248 48 89 178 3 187 128 224 92 105 231 9 142 154 231 148 71 34 114 120 41 249 26 168 79 34 42 227 218 26 142 68 23 230 185 129 250 20 71 205 103 137 45 21 179 13 93 171 56 106 86 19 93 79 164 92 110 228 242 106 84 8 64 105 184 185 36 79 60 196 54 184 30 230 168 5 29 178 38 13 72 129 133 108 56 143 90 131 46 231 7 29 41 151 207 237 0 142 112 212 28 216 109 104 138 188 20 231 13 212 163 232 114 143 24 142 166 51 138 129 122 76 159 67 112 112 37 15 174 43 116 28 21 162 57 175 9 246 47 73 88 195 13 39 144 171 143 205 242 245 36 90 203 147 77 142 58 10 126 24 144 22 51 0 221 179 99 178 129 14 220 55 48 84 235 30 98 230 55 239 188 130 217 11 58 228 36 71 133 171 75 111 72 208 6 100 101 196 23 17 3 212 240 31 176 166 187 124 228 10 29 216 35 50 84 235 86 49 246 235 95 62 207 81 105 135 156 74 36 0 117 248 92 202 177 134 27 158 230 92 173 59 185 27 175 190 57 197 185 210 14 169 211 19 54 3 76 167 40 184 73 195 60 4 157 211 152 176 33 1 140 108 36 236 51 28 181 216 217 229 225 116 23 34 142 129 122 150 235 106 221 113 207 56 250 221 232 87 232 192 206 150 161 90 215 209 241 170 235 46 61 43 95 119 193 158 87 231 186 124 11 20 31 235 142 35 42 116 96 55 204 80 173 11 148 120 213 181 23 117 174 215 94 132 125 50 67 181 238 58 232 181 5 162 66 7 118 208 250 28 90 190 254 141 95 185 249 146 142 122 243 37 216 91 39 185 206 57 207 224 234 74 184 60 40 186 20 97 112 100 33 125 25 126 109 78 184 97 249 110 53 254 90 227 21 228 10 29 210 194 115 121 158 16 86 165 139 17 65 1 61 63 154 69 198 190 161 85 223 1 72 95 20 47 166 246 67 70 154 111 227 168 89 225 104 40 53 241 230 185 182 115 212 45 99 194 197 144 164 46 145 53 184 186 57 170 35 40 141 165 5 50 185 122 144 235 120 96 72 80 82 184 6 215 14 156 229 237 48 20 196 148 178 198 230 160 147 163 150 224 72 104 154 8 136 17 154 97 13 3 26 46 247 234 169 87 24 17 187 196 65 48 196 195 61 177 193 245 60 213 213 121 216 186 109 137 253 233 91 126 188 30 128 14 220 86 36 166 242 199 23 144 241 217 186 171 250 6 171 238 42 241 233 219 104 200 202 27 155 57 63 122 200 45 143 195 242 59 229 161 185 212 219 141 92 189 242 184 168 164 19 246 156 27 122 16 21 182 155 66 228 95 10 245 34 170 31 54 88 105 174 6 106 31 69 117 253 60 71 191 219 72 2 179 91 77 62 81 104 167 159 59 207 250 175 144 248 108 126 174 238 188 252 92 184 125 129 75 159 250 252 92 230 215 161 70 49 169 45 253 31 15 76 162 208 129 59 29 238 242 213 187 158 248 236 153 144 109 178 193 235 117 211 14 127 99 131 255 126 33 118 175 79 28 188 123 55 1 4 111 224 232 26 222 80 53 28 101 63 163 125 184 77 46 154 241 186 85 141 2 240 255 105 41 126 131 144 146 163 94 87 72 165 111 254 15 0 0 0 13 13 19 83 113 117 101 97 107 80 114 105 109 115 80 80 67 46 112 114 111 106 0 0 0 0 0 0 0 0 0 0 0 0 75 202 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 19 108 0 0 0 0 0 0 0 0 255 255 255 255 77 77 80 82 67 87 73 69 1 0 172 94 103 33 178 194 62 168 0 0 41 201 0 0 3 236 0 0 9 125 0 0 1 117 209 52 107 183 0 0 0 0 0 0 184 215 13 192 213 101 47 91 153 39 187 189 50 187 205 54 27 224 233 194 6 30 119 176 178 219 177 77 120 116 83 114 60 182 214 218 111 154 156 202 148 211 239 76 222 177 75 60 53 60 167 231 177 117 194 241 215 177 104 189 251 214 34 172 79 201 111 118 100 19 78 120 199 34 219 35 148 60 191 200 102 197 8 63 201 38 123 64 54 35 183 143 48 178 143 109 74 216 126 201 86 114 236 8 219 108 219 81 254 145 227 100 27 217 44 111 191 132 109 99 132 19 30 195 3 95 93 201 105 150 151 231 150 22 205 60 194 246 49 35 108 147 219 186 217 38 191 201 111 178 201 102 120 178 129 241 39 16 128 94 150 7 192 0 96 246 74 128 89 248 183 220 21 213 142 221 114 31 3 237 245 56 204 247 104 199 241 255 102 211 150 5 110 237 85 253 180 44 175 254 174 164 44 173 245 251 189 238 184 18 11 129 128 217 125 62 127 157 183 113 105 5 131 106 123 31 122 172 3 175 159 138 29 171 91 11 33 59 248 60 192 156 200 140 197 110 237 87 219 31 173 174 184 211 182 124 203 246 103 74 167 35 50 185 42 170 117 46 112 131 19 255 14 252 231 44 219 245 39 91 237 111 193 185 198 177 124 11 221 141 219 158 170 107 168 93 152 85 115 116 202 113 45 190 108 245 178 228 66 128 44 206 45 139 127 214 12 89 18 183 47 172 89 24 176 108 5 64 213 43 108 210 108 188 33 128 141 238 113 41 233 108 113 125 11 207 186 180 20 66 118 92 10 172 149 90 229 51 90 234 49 198 184 239 86 215 71 206 222 31 91 191 94 77 200 17 111 88 82 85 89 61 71 97 230 59 74 157 13 27 8 152 200 130 200 86 60 93 206 57 24 2 178 192 154 53 13 136 106 82 196 233 147 2 98 109 189 136 22 33 122 23 120 231 206 117 127 163 47 139 71 47 51 253 96 156 151 179 173 44 87 184 247 100 30 44 253 129 42 238 15 199 169 76 110 200 66 43 211 210 176 166 49 10 130 166 233 71 138 109 219 0 22 107 244 25 10 230 218 124 177 168 20 136 13 50 181 66 49 216 217 247 132 84 207 249 84 112 122 186 131 184 128 9 146 176 89 248 131 229 11 144 15 80 182 27 75 96 44 222 155 76 117 252 25 174 206 153 147 197 197 75 131 97 189 219 129 177 82 104 66 124 213 137 199 161 105 206 175 117 12 0 137 52 121 82 63 63 129 255 163 158 148 39 213 125 104 214 42 84 59 31 14 96 230 141 196 21 93 14 88 141 167 227 177 103 161 105 126 21 172 122 125 13 164 94 216 7 169 251 219 61 169 71 237 252 78 106 83 72 103 162 243 19 157 158 14 202 231 233 248 210 11 240 169 159 125 182 143 11 34 169 7 191 98 72 156 214 60 5 47 27 53 65 252 122 11 189 99 231 52 79 199 51 120 219 224 7 227 87 195 1 252 159 228 115 255 203 208 180 248 37 60 127 147 115 217 203 57 191 6 219 184 210 227 49 43 50 198 106 18 242 75 209 88 208 87 234 147 241 120 76 73 148 82 93 123 128 133 94 221 7 174 188 189 48 238 137 226 76 241 205 211 21 193 172 44 116 100 33 184 150 191 132 255 3 109 218 31 61 136 223 68 86 0 174 9 243 16 59 142 127 39 140 239 104 192 252 187 103 130 213 138 184 248 86 126 228 119 196 175 227 243 18 108 238 143 59 213 128 18 132 137 229 88 213 19 230 113 71 9 29 197 58 64 125 120 254 28 204 79 122 76 202 248 193 140 215 54 122 30 254 122 2 17 44 2 226 115 244 105 112 77 223 193 202 29 126 196 14 34 191 173 188 206 199 61 113 159 158 31 245 160 252 174 194 184 193 96 18 20 146 83 176 58 16 166 150 250 228 132 18 187 91 86 214 170 98 125 66 138 182 72 74 139 88 19 108 86 36 101 125 169 175 190 70 244 150 98 166 231 14 217 97 115 246 145 23 55 97 118 187 126 166 226 40 198 155 63 125 83 219 51 229 107 58 134 87 54 135 226 152 109 138 182 231 227 247 244 231 59 52 175 47 159 205 137 119 170 180 61 31 33 69 241 206 225 189 204 255 198 110 250 103 119 6 214 0 91 180 79 219 51 241 1 200 15 214 104 251 219 183 210 153 221 54 41 132 57 119 106 93 88 45 152 7 179 250 97 246 138 239 194 196 93 91 181 174 141 107 180 174 77 41 188 191 27 29 162 233 141 78 68 62 71 188 184 242 118 204 68 127 202 118 187 94 12 174 95 128 141 58 12 163 193 168 9 70 215 202 202 105 119 30 201 0 5 93 236 185 253 135 240 239 220 8 66 165 118 240 56 239 29 172 207 238 95 8 194 225 98 152 92 230 247 215 220 104 135 200 12 203 226 241 176 57 0 15 159 175 102 201 112 158 60 52 2 113 105 132 220 145 164 63 151 195 231 175 169 52 9 224 209 232 69 19 52 3 208 181 174 190 174 159 224 251 60 26 42 86 54 88 220 205 109 129 238 238 110 96 93 15 243 139 135 63 207 93 202 243 96 8 253 219 82 238 88 34 133 195 177 88 84 172 146 195 220 92 63 80 34 192 225 45 59 161 179 168 4 182 151 238 163 43 196 67 112 7 46 240 117 248 26 245 206 118 160 58 116 30 86 119 96 238 92 83 0 30 22 119 224 130 32 127 227 145 238 41 110 232 26 31 36 114 149 135 220 126 65 144 75 161 215 107 219 127 234 213 217 195 99 72 141 177 200 195 47 169 1 41 124 94 88 93 215 184 212 255 204 243 15 30 129 65 101 135 117 165 38 148 120 216 136 199 123 78 116 133 135 224 62 211 71 245 134 165 78 190 231 114 189 170 23 124 218 134 50 148 169 17 238 211 252 254 59 62 189 210 91 59 210 199 56 41 73 229 80 39 211 18 11 36 255 107 65 188 255 80 84 101 168 105 24 229 161 182 133 155 135 243 228 249 43 46 170 138 60 18 73 147 0 30 20 86 55 86 201 191 117 245 83 45 234 29 249 205 37 183 154 183 116 228 40 253 185 28 215 58 242 1 30 166 1 29 121 237 146 106 113 68 15 159 191 113 88 15 179 143 206 254 93 85 175 117 246 67 60 174 118 246 35 60 70 59 251 17 93 71 59 251 97 30 230 11 157 125 191 30 255 236 236 7 132 125 191 179 31 230 49 218 217 247 211 184 222 217 15 241 48 15 232 236 173 110 85 110 125 207 167 1 58 111 58 129 83 17 197 176 100 38 250 243 238 62 159 174 228 62 109 254 209 145 191 91 248 215 58 242 243 14 107 26 208 145 55 6 163 139 254 95 108 47 185 249 95 29 185 253 239 29 21 18 189 224 28 87 58 170 33 30 87 59 161 17 61 70 59 161 97 30 87 156 190 159 199 117 167 31 226 97 113 15 185 98 14 242 64 99 24 105 221 111 56 80 134 71 56 56 104 139 189 47 31 231 43 141 120 196 154 113 144 233 60 143 218 230 208 48 143 92 223 192 184 200 101 71 204 241 249 188 85 166 0 69 241 215 183 138 28 84 139 87 252 69 30 232 100 225 193 158 117 28 241 160 209 68 209 27 139 196 131 225 183 213 79 59 7 86 188 124 167 41 128 174 55 156 35 211 211 15 189 13 92 225 49 236 208 195 117 150 113 214 196 96 153 93 9 27 78 251 113 64 88 119 105 238 49 43 20 107 139 70 164 200 192 108 234 197 64 134 140 14 2 78 24 154 188 4 21 130 249 75 13 244 68 1 205 205 246 212 69 47 66 179 168 84 41 58 154 7 217 136 240 159 113 191 11 178 47 77 0 95 140 197 24 250 107 63 75 173 60 61 89 123 61 136 79 15 120 118 210 24 121 158 78 90 2 185 105 241 81 206 42 89 106 145 21 117 180 229 112 128 133 15 26 27 249 217 243 189 35 233 111 215 149 153 79 220 113 135 154 144 20 254 192 104 222 16 84 198 46 176 8 134 45 178 244 206 0 10 242 202 140 89 238 225 91 6 76 0 36 55 127 80 156 21 160 142 180 127 224 84 140 49 246 66 40 193 136 26 140 250 21 145 144 96 34 184 238 207 11 15 76 73 98 23 186 60 235 173 131 179 73 42 203 234 27 254 242 162 108 70 80 184 111 117 65 253 219 22 200 187 132 158 173 23 35 33 56 48 23 206 198 27 159 233 75 184 138 188 181 229 21 69 98 81 121 89 67 25 30 253 75 189 13 69 102 43 37 224 48 150 176 24 209 183 87 38 123 122 87 75 1 117 207 83 216 79 64 136 175 224 175 140 147 227 10 62 41 78 135 217 245 13 117 51 48 227 151 123 243 231 150 241 39 58 222 53 221 254 125 160 173 13 121 132 221 118 47 208 59 77 1 97 213 15 1 205 4 210 222 2 72 126 16 62 137 199 29 132 141 109 128 86 60 210 70 9 40 156 5 200 149 85 19 150 253 59 248 52 98 95 36 108 67 55 208 166 129 31 17 38 253 30 30 231 125 58 70 104 29 60 201 221 13 67 249 14 60 133 24 223 106 81 183 25 190 141 88 59 97 5 175 192 15 17 123 132 176 69 79 194 65 124 136 123 154 107 54 13 186 81 86 228 5 80 227 131 223 32 198 185 142 253 37 28 3 152 58 158 176 250 85 84 25 83 113 123 4 192 252 199 216 56 196 248 187 83 227 15 216 20 196 248 140 227 156 71 24 46 96 152 198 53 254 240 87 217 71 17 171 35 108 237 3 12 103 5 167 241 238 33 57 145 249 0 68 190 77 37 172 176 38 196 176 210 0 38 220 194 240 33 92 228 79 181 141 47 50 156 165 41 116 19 182 124 3 219 0 240 127 252 125 58 167 136 61 132 171 41 120 109 21 126 140 161 142 51 74 120 209 237 165 173 26 179 120 142 15 165 8 19 248 222 133 124 63 238 250 145 3 9 17 235 86 13 198 162 147 124 82 107 48 32 122 165 248 169 167 99 124 250 73 95 212 95 210 199 101 46 24 28 242 248 120 65 79 198 49 52 128 226 141 181 200 159 144 163 246 204 48 10 191 102 100 204 55 70 170 210 41 211 120 163 164 68 131 209 86 213 86 209 18 76 196 20 107 101 44 154 200 75 43 85 209 158 80 36 53 223 155 84 19 177 136 120 171 188 254 238 152 210 162 58 202 2 1 25 245 242 75 137 54 213 214 32 41 173 114 194 177 36 25 12 183 24 9 115 87 120 113 197 136 156 72 198 199 208 172 170 33 140 147 176 242 160 138 82 203 145 102 148 192 158 25 100 229 121 210 218 234 35 24 105 161 12 184 71 39 111 165 15 147 141 225 239 98 6 49 194 78 18 203 236 172 200 38 8 7 130 120 62 131 160 67 31 141 70 253 162 114 216 129 83 89 61 92 255 7 0 0 65 109 177 88 4 208 212 91 0 174 148 122 119 43 86 175 94 69 189 85 202 89 129 206 76 18 155 13 39 227 253 135 63 174 102 224 166 3 45 206 156 146 228 188 37 220 174 127 244 27 51 45 11 253 119 51 245 143 222 209 101 91 239 88 252 31 243 254 179 223 254 236 237 179 238 142 125 8 253 217 153 144 189 93 185 114 213 7 149 94 142 101 252 193 188 177 153 188 92 247 189 14 39 111 52 15 121 207 231 52 253 131 211 157 221 36 228 85 113 103 235 43 118 90 60 139 75 197 117 144 69 192 185 16 122 35 172 1 93 1 48 118 249 246 88 111 220 232 137 135 187 195 201 240 22 51 113 76 113 219 95 55 166 102 230 185 4 92 79 255 109 143 140 186 166 90 163 178 184 161 161 178 184 54 188 233 175 13 156 205 255 180 135 94 19 77 154 241 142 80 155 249 95 106 36 114 255 169 135 183 46 148 236 250 231 10 76 244 255 240 211 30 217 246 94 27 122 163 201 112 183 249 159 151 139 87 230 236 38 162 194 103 143 253 175 187 188 245 184 31 248 180 84 34 217 187 201 38 160 251 84 135 217 37 255 245 146 110 253 253 103 154 181 84 93 67 237 74 155 128 203 238 90 123 206 127 221 211 173 191 191 242 166 193 212 119 222 132 59 189 161 95 92 201 137 13 169 246 245 70 70 254 203 63 131 164 154 171 215 13 255 163 64 83 255 101 208 27 154 204 78 245 55 181 133 30 130 237 161 87 231 157 124 239 62 197 11 237 191 85 125 109 34 233 92 241 232 239 214 170 216 55 42 79 102 195 202 72 194 246 8 0 0)! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 1/13/1999 12:09'!macWindowFile	^ '#include <MacHeaders.h>#include <AppleEvents.h>#include <Dialogs.h>#include <Devices.h>#include <Files.h>#include <Fonts.h>#include <Gestalt.h>#include <LowMem.h>#include <Memory.h>#include <Menus.h>#include <OSUtils.h>#include <Power.h>#include <QuickDraw.h>#include <Scrap.h>#include <Strings.h>#include <Timer.h>#include <ToolUtils.h>#include <Windows.h>#include <profiler.h>#include "sq.h"/*** Compilation Options:**	define PLUGIN		to compile code for Netscape Plug-in*	define MAKE_PROFILE	to compile code for profiling****///#define PLUGIN//#define MAKE_PROFILE/*** Enumerations ***/enum { appleID = 1, fileID, editID };enum { quitItem = 1 };/*** Variables -- Imported from Virtual Machine ***/extern int fullScreenFlag;extern int interruptCheckCounter;extern int interruptKeycode;extern int interruptPending;  /* set to true by recordKeystroke if interrupt key is pressed */extern unsigned char *memory;extern int savedWindowSize;   /* set from header when image file is loaded *//*** Variables -- image and path names ***/#define IMAGE_NAME_SIZE 300char imageName[IMAGE_NAME_SIZE + 1];  /* full path to image */#define SHORTIMAGE_NAME_SIZE 100char shortImageName[SHORTIMAGE_NAME_SIZE + 1];  /* just the image file name */#define DOCUMENT_NAME_SIZE 300char documentName[DOCUMENT_NAME_SIZE + 1];  /* full path to document or image file */#define SHORTDOCUMENT_NAME_SIZE 100char shortDocumentName[SHORTDOCUMENT_NAME_SIZE + 1];  /* just the document file name */#define VMPATH_SIZE 300char vmPath[VMPATH_SIZE + 1];  /* full path to interpreter''s directory *//*** Variables -- Mac Related ***/MenuHandle		appleMenu = nil;Handle			clipboardBuffer = nil;MenuHandle		editMenu = nil;int				menuBarHeight = 20;RgnHandle		menuBarRegion = nil;  /* if non-nil, then menu bar has been hidden */MenuHandle		fileMenu = nil;CTabHandle		stColorTable = nil;PixMapHandle	stPixMap = nil;WindowPtr		stWindow = nil;/*** Variables -- Event Recording ***/#define KEYBUF_SIZE 64int keyBuf[KEYBUF_SIZE];	/* circular buffer */int keyBufGet = 0;			/* index of next item of keyBuf to read */int keyBufPut = 0;			/* index of next item of keyBuf to write */int keyBufOverflows = 0;	/* number of characters dropped */int buttonState = 0;		/* mouse button and modifier state when mouse							   button went down or 0 if not pressed */Point savedMousePosition;	/* mouse position when window is inactive */int windowActive = true;	/* true if the Squeak window is the active window *//* This table maps the 5 Macintosh modifier key bits to 4 Squeak modifier   bits. (The Mac shift and caps lock keys are both mapped to the single   Squeak shift bit).		Mac bits: <control><option><caps lock><shift><command>		ST bits:  <command><option><control><shift>*/char modifierMap[32] = {	0,  8, 1,  9, 1,  9, 1,  9, 4, 12, 5, 13, 5, 13, 5, 13,	2, 10, 3, 11, 3, 11, 3, 11, 6, 14, 7, 15, 7, 15, 7, 15};/*** Functions ***/void AdjustMenus(void);void FreeClipboard(void);void FreePixmap(void);char * GetAttributeString(int id);int  HandleEvents(void);void HandleMenu(int mSelect);void HandleMouseDown(EventRecord *theEvent);void InitMacintosh(void);void InstallAppleEventHandlers(void);int  IsImageName(char *name);void MenuBarHide(void);void MenuBarRestore(void);void SetColorEntry(int index, int red, int green, int blue);void SetUpClipboard(void);void SetUpMenus(void);void SetUpPixmap(void);void SetUpWindow(void);void SetWindowTitle(char *title);void StoreFullPathForLocalNameInto(char *shortName, char *fullName, int length);/* event capture */int recordKeystroke(EventRecord *theEvent);int recordModifierButtons(EventRecord *theEvent);int recordMouseDown(EventRecord *theEvent);/*** Apple Event Handlers ***/static pascal OSErr HandleOpenAppEvent(AEDescList *aevt, AEDescList *reply, int refCon);static pascal OSErr HandleOpenDocEvent(AEDescList *aevt, AEDescList *reply, int refCon);static pascal OSErr HandlePrintDocEvent(AEDescList *aevt, AEDescList *reply, int refCon);static pascal OSErr HandleQuitAppEvent(AEDescList *aevt, AEDescList *reply, int refCon);/*** Apple Event Handling ***/void InstallAppleEventHandlers() {	OSErr	err;	long	result;	shortImageName[0] = 0;	err = Gestalt(gestaltAppleEventsAttr, &result);	if (err == noErr) {		AEInstallEventHandler(kCoreEventClass, kAEOpenApplication, NewAEEventHandlerProc(HandleOpenAppEvent),  0, false);		AEInstallEventHandler(kCoreEventClass, kAEOpenDocuments,   NewAEEventHandlerProc(HandleOpenDocEvent),  0, false);		AEInstallEventHandler(kCoreEventClass, kAEPrintDocuments,  NewAEEventHandlerProc(HandlePrintDocEvent), 0, false);		AEInstallEventHandler(kCoreEventClass, kAEQuitApplication, NewAEEventHandlerProc(HandleQuitAppEvent),  0, false);	}}pascal OSErr HandleOpenAppEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	/* User double-clicked application; look for "squeak.image" in same directory */	aevt; reply; refCon;  /* reference args to avoid compiler warnings */	/* record path to VM''s home folder */	dir_PathToWorkingDir(vmPath, VMPATH_SIZE);	/* use default image name in same directory as the VM */	strcpy(shortImageName, "squeak.image");	return noErr;}pascal OSErr HandleOpenDocEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	/* User double-clicked an image file. Record the path to the VM''s directory,	   then set the default directory to the folder containing the image and	   record the image name. Fail if mullitple image files were selected. */	OSErr		err;	AEDesc		fileList = {''NULL'', NULL};	long		numFiles, size;	DescType	type;	AEKeyword	keyword;	FSSpec		fileSpec;	WDPBRec		pb;	reply; refCon;  /* reference args to avoid compiler warnings */	/* record path to VM''s home folder */	dir_PathToWorkingDir(vmPath, VMPATH_SIZE);	/* copy document list */	err = AEGetKeyDesc(aevt, keyDirectObject, typeAEList, &fileList);	if (err) goto done;	/* count list elements */	err = AECountItems( &fileList, &numFiles);	if (err) goto done;	if (numFiles !!= 1) {		error("You may only open one Squeak image or document file at a time.");	}	/* get image name */	err = AEGetNthPtr(&fileList, 1, typeFSS,					  &keyword, &type, (Ptr) &fileSpec, sizeof(fileSpec), &size);	if (err) goto done;	strcpy(shortImageName, p2cstr(fileSpec.name));	if (!!IsImageName(shortImageName)) {		/* record the document name, but run the default image in VM directory */		strcpy(shortDocumentName, shortImageName);		strcpy(shortImageName, "squeak.image");		StoreFullPathForLocalNameInto(shortImageName, imageName, IMAGE_NAME_SIZE);	}	/* make the image or document directory the working directory */	pb.ioNamePtr = NULL;	pb.ioVRefNum = fileSpec.vRefNum;	pb.ioWDDirID = fileSpec.parID;	PBHSetVolSync(&pb);	if (shortDocumentName[0] !!= 0) {		/* record the document''s full name */		StoreFullPathForLocalNameInto(shortDocumentName, documentName, DOCUMENT_NAME_SIZE);	}done:	AEDisposeDesc(&fileList);	return err;}pascal OSErr HandlePrintDocEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	aevt; reply; refCon;  /* reference args to avoid compiler warnings */	return errAEEventNotHandled;}pascal OSErr HandleQuitAppEvent(AEDescList *aevt, AEDescList *reply, int refCon) {	aevt; reply; refCon;  /* reference args to avoid compiler warnings */	return errAEEventNotHandled;}/*** VM Home Directory Path ***/int vmPathSize(void) {	return strlen(vmPath);}int vmPathGetLength(int sqVMPathIndex, int length) {	char *stVMPath = (char *) sqVMPathIndex;	int count, i;	count = strlen(vmPath);	count = (length < count) ? length : count;	/* copy the file name into the Squeak string */	for (i = 0; i < count; i++) {		stVMPath[i] = vmPath[i];	}	return count;}/*** Mac-related Functions ***/void AdjustMenus(void) {	WindowPeek		wp;	int				isDeskAccessory;	wp = (WindowPeek) FrontWindow();	if (wp !!= NULL) {		isDeskAccessory = (wp->windowKind < 0);	} else {		isDeskAccessory = false;	}	if (isDeskAccessory) {		/* Enable items in the Edit menu */		EnableItem(editMenu, 1);		EnableItem(editMenu, 3);		EnableItem(editMenu, 4);		EnableItem(editMenu, 5);		EnableItem(editMenu, 6);	} else {		/* Disable items in the Edit menu */		DisableItem(editMenu, 1);		DisableItem(editMenu, 3);		DisableItem(editMenu, 4);		DisableItem(editMenu, 5);		DisableItem(editMenu, 6);	}}int HandleEvents(void) {	EventRecord		theEvent;	int				ok;	SystemTask();	ok = GetNextEvent(everyEvent, &theEvent);	if (ok) {		switch (theEvent.what) {			case mouseDown:				HandleMouseDown(&theEvent);				return false;			break;			case mouseUp:				recordModifierButtons(&theEvent);				return false;			break;			case keyDown:			case autoKey:				if ((theEvent.modifiers & cmdKey) !!= 0) {					AdjustMenus();					HandleMenu(MenuKey(theEvent.message & charCodeMask));				}				recordModifierButtons(&theEvent);				recordKeystroke(&theEvent);			break;			case updateEvt:				BeginUpdate(stWindow);				fullDisplayUpdate();  /* this makes VM call ioShowDisplay */				EndUpdate(stWindow);			break;			case activateEvt:				if (theEvent.modifiers & activeFlag) {					windowActive = true;				} else {					GetMouse(&savedMousePosition);					windowActive = false;				}				InvalRect(&stWindow->portRect);			break;			case kHighLevelEvent:				AEProcessAppleEvent(&theEvent);			break;		}	}	return ok;}void HandleMenu(int mSelect) {	int			menuID, menuItem;	Str255		name;	GrafPtr		savePort;	menuID = HiWord(mSelect);	menuItem = LoWord(mSelect);	switch (menuID) {		case appleID:			GetPort(&savePort);			GetMenuItemText(appleMenu, menuItem, name);			OpenDeskAcc(name);			SetPort(savePort);		break;		case fileID:			if (menuItem == quitItem) {				ioExit();			}		break;		case editID:			if (!!SystemEdit(menuItem - 1)) {				SysBeep(5);			}		break;	}}void HandleMouseDown(EventRecord *theEvent) {	WindowPtr	theWindow;	Rect		growLimits = { 20, 20, 4000, 4000 };	Rect		dragBounds;	int			windowCode, newSize;	windowCode = FindWindow(theEvent->where, &theWindow);	switch (windowCode) {		case inSysWindow:			SystemClick(theEvent, theWindow);		break;		case inMenuBar:			AdjustMenus();			HandleMenu(MenuSelect(theEvent->where));		break;		case inDrag:			dragBounds = qd.screenBits.bounds;			if (theWindow == stWindow) {				DragWindow(stWindow, theEvent->where, &dragBounds);			}		break;		case inGrow:			if (theWindow == stWindow) {				newSize = GrowWindow(stWindow, theEvent->where, &growLimits);				if (newSize !!= 0) {					SizeWindow(stWindow, LoWord(newSize), HiWord(newSize), true);				}			}		break;		case inContent:			if (theWindow == stWindow) {				if (theWindow !!= FrontWindow()) {					SelectWindow(stWindow);				}				recordMouseDown(theEvent);			}		break;		case inGoAway:			if ((theWindow == stWindow) &&				(TrackGoAway(stWindow, theEvent->where))) {					/* HideWindow(stWindow); noop for now */			}		break;	}}void InitMacintosh(void) {	MaxApplZone();	InitGraf(&qd.thePort);	InitFonts();	FlushEvents(everyEvent, 0);	InitWindows();	InitMenus();	TEInit();	InitDialogs(NULL);	InitCursor();}void MenuBarHide(void) {  /* Remove the menu bar, saving its old state. */  /* Many thanks to John McIntosh for this code!! */	Rect screenRect, mBarRect;	if (menuBarRegion !!= nil) return;  /* saved state, so menu bar is already hidden */	screenRect = (**GetMainDevice()).gdRect;	menuBarHeight = GetMBarHeight();	SetRect(&mBarRect, screenRect.left, screenRect.top, screenRect.right, screenRect.top + menuBarHeight);	menuBarRegion = NewRgn();	if (menuBarRegion !!= nil) {		LMSetMBarHeight(0);		RectRgn(menuBarRegion, &mBarRect);		UnionRgn(LMGetGrayRgn(), menuBarRegion, LMGetGrayRgn());	}}void MenuBarRestore(void) {  /* Restore the menu bar from its saved state. Do nothing if it isn''t hidden. */  /* Many thanks to John McIntosh for this code!! */ 	if (menuBarRegion == nil) return;  /* no saved state, so menu bar is not hidden */	DiffRgn(LMGetGrayRgn(), menuBarRegion, LMGetGrayRgn());	LMSetMBarHeight(menuBarHeight);	DisposeRgn(menuBarRegion);	menuBarRegion = nil;	DrawMenuBar();}void SetUpMenus(void) {	InsertMenu(appleMenu = NewMenu(appleID, "\p\024"), 0);	InsertMenu(fileMenu  = NewMenu(fileID,  "\pFile"), 0);	InsertMenu(editMenu  = NewMenu(editID,  "\pEdit"), 0);	DrawMenuBar();	AppendResMenu(appleMenu, ''DRVR'');	AppendMenu(fileMenu, "\pQuit");	AppendMenu(editMenu, "\pUndo/Z;(-;Cut/X;Copy/C;Paste/V;Clear");}void SetColorEntry(int index, int red, int green, int blue) {	(*stColorTable)->ctTable[index].value = index;	(*stColorTable)->ctTable[index].rgb.red = red;	(*stColorTable)->ctTable[index].rgb.green = green;	(*stColorTable)->ctTable[index].rgb.blue = blue;}void FreePixmap(void) {	if (stPixMap !!= nil) {		DisposePixMap(stPixMap);		stPixMap = nil;	}	if (stColorTable !!= nil) {		DisposeHandle((void *) stColorTable);		stColorTable = nil;	}}void SetUpPixmap(void) {	int i, r, g, b;	stColorTable = (CTabHandle) NewHandle(sizeof(ColorTable) + (256 * sizeof(ColorSpec)));	(*stColorTable)->ctSeed = GetCTSeed();	(*stColorTable)->ctFlags = 0;	(*stColorTable)->ctSize = 255;	/* 1-bit colors (monochrome) */	SetColorEntry(0, 65535, 65535, 65535);	/* white or transparent */	SetColorEntry(1,     0,     0,     0);	/* black */	/* additional colors for 2-bit color */	SetColorEntry(2, 65535, 65535, 65535);	/* opaque white */	SetColorEntry(3, 32768, 32768, 32768);	/* 1/2 gray */	/* additional colors for 4-bit color */	SetColorEntry( 4, 65535,     0,     0);	/* red */	SetColorEntry( 5,     0, 65535,     0);	/* green */	SetColorEntry( 6,     0,     0, 65535);	/* blue */	SetColorEntry( 7,     0, 65535, 65535);	/* cyan */	SetColorEntry( 8, 65535, 65535,     0);	/* yellow */	SetColorEntry( 9, 65535,     0, 65535);	/* magenta */	SetColorEntry(10,  8192,  8192,  8192);	/* 1/8 gray */	SetColorEntry(11, 16384, 16384, 16384);	/* 2/8 gray */	SetColorEntry(12, 24576, 24576, 24576);	/* 3/8 gray */	SetColorEntry(13, 40959, 40959, 40959);	/* 5/8 gray */	SetColorEntry(14, 49151, 49151, 49151);	/* 6/8 gray */	SetColorEntry(15, 57343, 57343, 57343);	/* 7/8 gray */	/* additional colors for 8-bit color */	/* 24 more shades of gray (does not repeat 1/8th increments) */	SetColorEntry(16,  2048,  2048,  2048);	/*  1/32 gray */	SetColorEntry(17,  4096,  4096,  4096);	/*  2/32 gray */	SetColorEntry(18,  6144,  6144,  6144);	/*  3/32 gray */	SetColorEntry(19, 10240, 10240, 10240);	/*  5/32 gray */	SetColorEntry(20, 12288, 12288, 12288);	/*  6/32 gray */	SetColorEntry(21, 14336, 14336, 14336);	/*  7/32 gray */	SetColorEntry(22, 18432, 18432, 18432);	/*  9/32 gray */	SetColorEntry(23, 20480, 20480, 20480);	/* 10/32 gray */	SetColorEntry(24, 22528, 22528, 22528);	/* 11/32 gray */	SetColorEntry(25, 26624, 26624, 26624);	/* 13/32 gray */	SetColorEntry(26, 28672, 28672, 28672);	/* 14/32 gray */	SetColorEntry(27, 30720, 30720, 30720);	/* 15/32 gray */	SetColorEntry(28, 34815, 34815, 34815);	/* 17/32 gray */	SetColorEntry(29, 36863, 36863, 36863);	/* 18/32 gray */	SetColorEntry(30, 38911, 38911, 38911);	/* 19/32 gray */	SetColorEntry(31, 43007, 43007, 43007);	/* 21/32 gray */	SetColorEntry(32, 45055, 45055, 45055);	/* 22/32 gray */	SetColorEntry(33, 47103, 47103, 47103);	/* 23/32 gray */	SetColorEntry(34, 51199, 51199, 51199);	/* 25/32 gray */	SetColorEntry(35, 53247, 53247, 53247);	/* 26/32 gray */	SetColorEntry(36, 55295, 55295, 55295);	/* 27/32 gray */	SetColorEntry(37, 59391, 59391, 59391);	/* 29/32 gray */	SetColorEntry(38, 61439, 61439, 61439);	/* 30/32 gray */	SetColorEntry(39, 63487, 63487, 63487);	/* 31/32 gray */	/* The remainder of color table defines a color cube with six steps	   for each primary color. Note that the corners of this cube repeat	   previous colors, but simplifies the mapping between RGB colors and	   color map indices. This color cube spans indices 40 through 255.	*/	for (r = 0; r < 6; r++) {		for (g = 0; g < 6; g++) {			for (b = 0; b < 6; b++) {				i = 40 + ((36 * r) + (6 * b) + g);				if (i > 255) error("index out of range in color table compuation");				SetColorEntry(i, (r * 65535) / 5, (g * 65535) / 5, (b * 65535) / 5);			}		}	}	stPixMap = NewPixMap();	(*stPixMap)->pixelType = 0; /* chunky */	(*stPixMap)->cmpCount = 1;	(*stPixMap)->pmTable = stColorTable;}void SetUpWindow(void) {	Rect windowBounds = {44, 8, 300, 500};	stWindow = NewCWindow(		0L, &windowBounds,		"\p Welcome to Squeak!!  Reading Squeak image file... ",		true, documentProc, (WindowPtr) -1L, true, 0);}void SetWindowTitle(char *title) {	SetWTitle(stWindow, c2pstr(title));	p2cstr((unsigned char *) title);}/*** Event Recording Functions ***/int recordKeystroke(EventRecord *theEvent) {	int asciiChar, modifierBits, keystate;	/* keystate: low byte is the ascii character; next 4 bits are modifier bits */	asciiChar = theEvent->message & 0xFF;	modifierBits = modifierMap[(theEvent->modifiers >> 8) & 0x1F];	if ((modifierBits & 0x9) == 0x9) {  /* command and shift */		if ((asciiChar >= 97) && (asciiChar <= 122)) {			/* convert ascii code of command-shift-letter to upper case */			asciiChar = asciiChar - 32;		}	}	keystate = (modifierBits << 8) | asciiChar;	if (keystate == interruptKeycode) {		/* Note: interrupt key is "meta"; it not reported as a keystroke */		interruptPending = true;		interruptCheckCounter = 0;	} else {		keyBuf[keyBufPut] = keystate;		keyBufPut = (keyBufPut + 1) % KEYBUF_SIZE;		if (keyBufGet == keyBufPut) {			/* buffer overflow; drop the last character */			keyBufGet = (keyBufGet + 1) % KEYBUF_SIZE;			keyBufOverflows++;		}	}}int recordMouseDown(EventRecord *theEvent) {	int stButtons;	stButtons = 4;		/* red button by default */	if ((theEvent->modifiers & optionKey) !!= 0) {		stButtons = 2;	/* yellow button if option down */	}	if ((theEvent->modifiers & cmdKey) !!= 0) {		stButtons = 1;	/* blue button if command down */	}	/* button state: low three bits are mouse buttons; next 4 bits are modifier bits */	buttonState =		(modifierMap[(theEvent->modifiers >> 8) & 0x1F] << 3) |		(stButtons & 0x7);}int recordModifierButtons(EventRecord *theEvent) {	int stButtons = 0;	if (Button()) {		stButtons = buttonState & 0x7;	} else {		stButtons = 0;	}	/* button state: low three bits are mouse buttons; next 4 bits are modifier bits */	buttonState =		(modifierMap[(theEvent->modifiers >> 8) & 0x1F] << 3) |		(stButtons & 0x7);}/*** I/O Primitives ***/int ioBeep(void) {	SysBeep(1000);}int ioExit(void) {	serialPortClose(0);	serialPortClose(1);	sqNetworkShutdown();	MenuBarRestore();	ExitToShell();}int ioForceDisplayUpdate(void) {	/* do nothing on a Mac */}int ioFormPrint(int bitsAddr, int width, int height, int depth, double hScale, double vScale, int landscapeFlag) {	/* experimental: print a form with the given bitmap, width, height, and depth at	   the given horizontal and vertical scales in the given orientation */	printf("ioFormPrint width %d height %d depth %d hScale %f vScale %f landscapeFlag %d\n",		width, height, depth, hScale, vScale, landscapeFlag);	bitsAddr;	return true;}int ioGetButtonState(void) {	ioProcessEvents();  /* process all pending events */	return buttonState;}int ioGetKeystroke(void) {	int keystate;	ioProcessEvents();  /* process all pending events */	if (keyBufGet == keyBufPut) {		return -1;  /* keystroke buffer is empty */	} else {		keystate = keyBuf[keyBufGet];		keyBufGet = (keyBufGet + 1) % KEYBUF_SIZE;		/* set modifer bits in buttonState to reflect the last keystroke fetched */		buttonState = ((keystate >> 5) & 0xF8) | (buttonState & 0x7);	}	return keystate;}int ioMicroMSecs(void) {	/* millisecond clock based on microsecond timer (about 60 times slower than clock()!!!!) */	/* Note: This function and ioMSecs() both return a time in milliseconds. The difference	   is that ioMicroMSecs() is called only when precise millisecond resolution is essential,	   and thus it can use a more expensive timer than ioMSecs, which is called frequently.	   However, later VM optimizations reduced the frequency of calls to ioMSecs to the point	   where clock performance became less critical, and we also started to want millisecond-	   resolution timers for real time applications such as music. Thus, on the Mac, we''ve	   opted to use the microsecond clock for both ioMSecs() and ioMicroMSecs(). */	UnsignedWide microTicks;	Microseconds(&microTicks);	return (microTicks.lo / 1000) + (microTicks.hi * 4294967);}int ioMSecs(void) {	/* return a time in milliseconds for use in Delays and Time millisecondClockValue */	/* Note: This was once a macro based on clock(); it now uses the microsecond clock for	   greater resolution. See the comment in ioMicroMSecs(). */	UnsignedWide microTicks;	Microseconds(&microTicks);	return (microTicks.lo / 1000) + (microTicks.hi * 4294967);}int ioMousePoint(void) {	Point p;	ioProcessEvents();  /* process all pending events */	if (windowActive) {		GetMouse(&p);	} else {		/* don''t report mouse motion if window is not active */		p = savedMousePosition;	}	return (p.h << 16) | (p.v & 0xFFFF);  /* x is high 16 bits; y is low 16 bits */}int ioPeekKeystroke(void) {	int keystate;	ioProcessEvents();  /* process all pending events */	if (keyBufGet == keyBufPut) {		return -1;  /* keystroke buffer is empty */	} else {		keystate = keyBuf[keyBufGet];		/* set modifer bits in buttonState to reflect the last keystroke peeked at */		buttonState = ((keystate >> 5) & 0xF8) | (buttonState & 0x7);	}	return keystate;}int ioProcessEvents(void) {	/* This is a noop when running as a plugin; the browser handles events. */	int maxPollsPerSec = 30;	static clock_t nextPollTick = 0;#ifndef PLUGIN	if (clock() > nextPollTick) {		/* time to process events!! */		while (HandleEvents()) {			/* process all pending events */		}		/* wait a while before trying again */		nextPollTick = clock() + (CLOCKS_PER_SEC / maxPollsPerSec);	}#endif	return interruptPending;}int ioRelinquishProcessorForMicroseconds(int microSeconds) {	/* This operation is platform dependent. On the Mac, it simply calls	 * ioProcessEvents(), which gives other applications a chance to run.	 */	ioProcessEvents();  /* process all pending events */}int ioScreenSize(void) {	int w = 10, h = 10;	if (stWindow !!= nil) {		w = stWindow->portRect.right - stWindow->portRect.left;		h = stWindow->portRect.bottom - stWindow->portRect.top;	}	return (w << 16) | (h & 0xFFFF);  /* w is high 16 bits; h is low 16 bits */}int ioSeconds(void) {	struct tm timeRec;	time_t time1904, timeNow;	/* start of ANSI epoch is midnight of Jan 1, 1904 */	timeRec.tm_sec   = 0;	timeRec.tm_min   = 0;	timeRec.tm_hour  = 0;	timeRec.tm_mday  = 1;	timeRec.tm_mon   = 0;	timeRec.tm_year  = 4;	timeRec.tm_wday  = 0;	timeRec.tm_yday  = 0;	timeRec.tm_isdst = 0;	time1904 = mktime(&timeRec);	timeNow = time(NULL);	/* Squeak epoch is Jan 1, 1901, 3 non-leap years earlier than ANSI one */	return (timeNow - time1904) + (3 * 365 * 24 * 60 * 60);}int ioSetCursor(int cursorBitsIndex, int offsetX, int offsetY) {	/* Old version; forward to new version. */	ioSetCursorWithMask(cursorBitsIndex, nil, offsetX, offsetY);}int ioSetCursorWithMask(int cursorBitsIndex, int cursorMaskIndex, int offsetX, int offsetY) {	/* Set the 16x16 cursor bitmap. If cursorMaskIndex is nil, then make the mask the same as	   the cursor bitmap. If not, then mask and cursor bits combined determine how cursor is	   displayed:			mask	cursor	effect			 0		  0		transparent (underlying pixel shows through)			 1		  1		opaque black			 1		  0		opaque white			 0		  1		invert the underlying pixel	*/	Cursor macCursor;	int i;	if (cursorMaskIndex == nil) {		for (i = 0; i < 16; i++) {			macCursor.data[i] = (checkedLongAt(cursorBitsIndex + (4 * i)) >> 16) & 0xFFFF;			macCursor.mask[i] = (checkedLongAt(cursorBitsIndex + (4 * i)) >> 16) & 0xFFFF;		}	} else {		for (i = 0; i < 16; i++) {			macCursor.data[i] = (checkedLongAt(cursorBitsIndex + (4 * i)) >> 16) & 0xFFFF;			macCursor.mask[i] = (checkedLongAt(cursorMaskIndex + (4 * i)) >> 16) & 0xFFFF;		}	}	/* Squeak hotspot offsets are negative; Mac''s are positive */	macCursor.hotSpot.h = -offsetX;	macCursor.hotSpot.v = -offsetY;	SetCursor(&macCursor);}int ioSetFullScreen(int fullScreen) {	Rect screen = qd.screenBits.bounds;	int width, height, maxWidth, maxHeight;	int oldWidth, oldHeight;	if (fullScreen) {		MenuBarHide();		oldWidth = stWindow->portRect.right - stWindow->portRect.left;		oldHeight = stWindow->portRect.bottom - stWindow->portRect.top;		width  = screen.right - screen.left;		height = (screen.bottom - screen.top);		if ((oldWidth < width) || (oldHeight < height)) {			/* save old size if it wasn''t already full-screen */ 			savedWindowSize = (oldWidth << 16) + (oldHeight & 0xFFFF);		}		MoveWindow(stWindow, 0, 0, true);		SizeWindow(stWindow, width, height, true);		fullScreenFlag = true;	} else {		MenuBarRestore();		/* get old window size */		width  = (unsigned) savedWindowSize >> 16;		height = savedWindowSize & 0xFFFF;		/* minimum size is 64 x 64 */		width  = (width  > 64) ?  width : 64;		height = (height > 64) ? height : 64;		/* maximum size is screen size inset slightly */		maxWidth  = (screen.right  - screen.left) - 16;		maxHeight = (screen.bottom - screen.top)  - 52;		width  = (width  <= maxWidth)  ?  width : maxWidth;		height = (height <= maxHeight) ? height : maxHeight;		MoveWindow(stWindow, 8, 44, true);		SizeWindow(stWindow, width, height, true);		fullScreenFlag = false;	}}int ioShowDisplay(	int dispBitsIndex, int width, int height, int depth,	int affectedL, int affectedR, int affectedT, int affectedB) {	Rect		dstRect = { 0, 0, 0, 0 };	Rect		srcRect = { 0, 0, 0, 0 };	RgnHandle	maskRect = nil;	if (stWindow == nil) {		return;	}	dstRect.left	= 0;	dstRect.top		= 0;	dstRect.right	= width;	dstRect.bottom	= height;	srcRect.left	= 0;	srcRect.top		= 0;	srcRect.right	= width;	srcRect.bottom	= height;	(*stPixMap)->baseAddr = (void *) dispBitsIndex;	/* Note: top three bits of rowBytes indicate this is a PixMap, not a BitMap */	(*stPixMap)->rowBytes = (((((width * depth) + 31) / 32) * 4) & 0x1FFF) | 0x8000;	(*stPixMap)->bounds = srcRect;	(*stPixMap)->pixelSize = depth;	(*stPixMap)->cmpSize = depth;	/* create a mask region so that only the affected rectangle is copied */	maskRect = NewRgn();	SetRectRgn(maskRect, affectedL, affectedT, affectedR, affectedB);	SetPort(stWindow);	CopyBits((BitMap *) *stPixMap, &stWindow->portBits, &srcRect, &dstRect, srcCopy, maskRect);	DisposeRgn(maskRect);}/*** Image File Naming ***/void StoreFullPathForLocalNameInto(char *shortName, char *fullName, int length) {	int offset, sz, i;	offset = dir_PathToWorkingDir(fullName, length);	/* copy the file name into a null-terminated C string */	sz = strlen(shortName);	for (i = 0; i <= sz; i++) {		/* append shortName to fullName, including terminator */		fullName[i + offset] = shortName[i];	}}int imageNameSize(void) {	return strlen(imageName);}int imageNameGetLength(int sqImageNameIndex, int length) {	char *sqImageName = (char *) sqImageNameIndex;	int count, i;	count = strlen(imageName);	count = (length < count) ? length : count;	/* copy the file name into the Squeak string */	for (i = 0; i < count; i++) {		sqImageName[i] = imageName[i];	}	return count;}int imageNamePutLength(int sqImageNameIndex, int length) {	char *sqImageName = (char *) sqImageNameIndex;	int count, i, ch, j;	int lastColonIndex = -1;	count = (IMAGE_NAME_SIZE < length) ? IMAGE_NAME_SIZE : length;	/* copy the file name into a null-terminated C string */	for (i = 0; i < count; i++) {		ch = imageName[i] = sqImageName[i];		if (ch == '':'') {			lastColonIndex = i;		}	}	imageName[count] = 0;	/* copy short image name into a null-terminated C string */	for (i = lastColonIndex + 1, j = 0; i < count; i++, j++) {		shortImageName[j] = imageName[i];	}	shortImageName[j] = 0;	SetWindowTitle(shortImageName);	return count;}/*** Clipboard Support (text only for now) ***/void SetUpClipboard(void) {	/* allocate clipboard in the system heap to support really big copy/paste */	THz oldZone;	oldZone = GetZone();	SetZone(SystemZone());	clipboardBuffer = NewHandle(0);	SetZone(oldZone);}void FreeClipboard(void) {	if (clipboardBuffer !!= nil) {		DisposeHandle(clipboardBuffer);		clipboardBuffer = nil;	}}int clipboardReadIntoAt(int count, int byteArrayIndex, int startIndex) {	long clipSize, charsToMove;	char *srcPtr, *dstPtr, *end;	clipSize = clipboardSize();	charsToMove = (count < clipSize) ? count : clipSize;	srcPtr = (char *) *clipboardBuffer;	dstPtr = (char *) byteArrayIndex + startIndex;	end = srcPtr + charsToMove;	while (srcPtr < end) {		*dstPtr++ = *srcPtr++;	}	return charsToMove;}int clipboardSize(void) {	long count, offset;	count = GetScrap(clipboardBuffer, ''TEXT'', &offset);	if (count < 0) {		return 0;	} else {		return count;	}}int clipboardWriteFromAt(int count, int byteArrayIndex, int startIndex) {	ZeroScrap();	PutScrap(count, ''TEXT'', (char *) (byteArrayIndex + startIndex));}/*** Profiling ***/int clearProfile(void) {#ifdef MAKE_PROFILE	ProfilerClear();#endif}int dumpProfile(void) {#ifdef MAKE_PROFILE	ProfilerDump("\pProfile.out");#endif}int startProfiling(void) {#ifdef MAKE_PROFILE	ProfilerSetStatus(true);#endif}int stopProfiling(void) {#ifdef MAKE_PROFILE	ProfilerSetStatus(false);#endif}/*** Plugin Support ***/int plugInInit(char *fullImagePath) {	if (memory == nil) {		return;	/* failed to read image */	}	/* check the interpreter''s size assumptions for basic data types */	if (sizeof(int) !!= 4) {		error("This C compiler''s integers are not 32 bits.");	}	if (sizeof(double) !!= 8) {		error("This C compiler''s floats are not 64 bits.");	}	if (sizeof(time_t) !!= 4) {		error("This C compiler''s time_t''s are not 32 bits.");	}	strcpy(imageName, fullImagePath);	dir_PathToWorkingDir(vmPath, VMPATH_SIZE);	SetUpClipboard();	SetUpPixmap();	sqFileInit();	joystickInit();}int plugInShutdown(void) {	snd_Stop();	FreeClipboard();	FreePixmap();	if (memory !!= nil) {		DisposePtr((void *) memory);		memory = nil;	}}/*** System Attributes ***/int IsImageName(char *name) {	char *suffix;	suffix = strrchr(name, ''.'');  /* pointer to last period in name */	if (suffix == NULL) return false;	if (strcmp(suffix, ".ima") == 0) return true;	if (strcmp(suffix, ".image") == 0) return true;	if (strcmp(suffix, ".IMA") == 0) return true;	if (strcmp(suffix, ".IMAGE") == 0) return true;	return false;}char * GetAttributeString(int id) {	/* This is a hook for getting various status strings back from	   the OS. In particular, it allows Squeak to be passed arguments	   such as the name of a file to be processed. Command line options	   are reported this way as well, on platforms that support them.	*/	// id #0 should return the full name of VM; for now it just returns its path	if (id == 0) return vmPath;	// id #1 should return imageName, but returns empty string in this release to	// ease the transition (1.3x images otherwise try to read image as a document)	if (id == 1) return "";  /* will be imageName */	if (id == 2) return documentName;	if (id == 1001) return "Mac OS";	if (id == 1002) return "System 7 or Later";	if (id == 1003) return "PowerPC or 68K";	/* attribute undefined by this platform */	success(false);	return "";}int attributeSize(int id) {	return strlen(GetAttributeString(id));}int getAttributeIntoLength(int id, int byteArrayIndex, int length) {	char *srcPtr, *dstPtr, *end;	int charsToMove;	srcPtr = GetAttributeString(id);	charsToMove = strlen(srcPtr);	if (charsToMove > length) {		charsToMove = length;	}	dstPtr = (char *) byteArrayIndex;	end = srcPtr + charsToMove;	while (srcPtr < end) {		*dstPtr++ = *srcPtr++;	}	return charsToMove;}/*** Image File Operations ***/void sqImageFileClose(sqImageFile f) {	FSClose(f);}sqImageFile sqImageFileOpen(char *fileName, char *mode) {	short int err, err2, fRefNum;	unsigned char *pascalFileName;	pascalFileName = c2pstr(fileName);	err = FSOpen(pascalFileName, 0, &fRefNum);	if ((err !!= 0) && (strchr(mode, ''w'') !!= null)) {		/* creating a new file for "save as" */		err2 = Create(pascalFileName, 0, ''FAST'', ''STim'');		if (err2 == 0) {			err = FSOpen(pascalFileName, 0, &fRefNum);		}	}	p2cstr(pascalFileName);	if (err !!= 0) return null;	if (strchr(mode, ''w'') !!= null) {		/* truncate file if opening in write mode */		err = SetEOF(fRefNum, 0);		if (err !!= 0) {			FSClose(fRefNum);			return null;		}	}	return (sqImageFile) fRefNum;}int sqImageFilePosition(sqImageFile f) {	long int currentPosition = 0;	GetFPos(f, &currentPosition);	return currentPosition;}int sqImageFileRead(void *ptr, int elementSize, int count, sqImageFile f) {	long int byteCount = elementSize * count;	short int err;	err = FSRead(f, &byteCount, ptr);	if (err !!= 0) return 0;	return byteCount / elementSize;}void sqImageFileSeek(sqImageFile f, int pos) {	SetFPos(f, fsFromStart, pos);}int sqImageFileWrite(void *ptr, int elementSize, int count, sqImageFile f) {	long int byteCount = elementSize * count;	short int err;	err = FSWrite(f, &byteCount, ptr);	if (err !!= 0) return 0;	return byteCount / elementSize;}/*** Main ***/#ifndef PLUGINvoid main(void) {	EventRecord theEvent;	sqImageFile f;	int reservedMemory, availableMemory;	InitMacintosh();	SetUpMenus();	SetUpClipboard();	SetUpWindow();	SetUpPixmap();	sqFileInit();	joystickInit();	/* install apple event handlers and wait for open event */	imageName[0] = shortImageName[0] = documentName[0] = vmPath[0] = 0;	InstallAppleEventHandlers();	while (shortImageName[0] == 0) {		GetNextEvent(everyEvent, &theEvent);		if (theEvent.what == kHighLevelEvent) {			AEProcessAppleEvent(&theEvent);		}	}	if (imageName[0] == 0) {		StoreFullPathForLocalNameInto(shortImageName, imageName, IMAGE_NAME_SIZE);	}	/* check the interpreter''s size assumptions for basic data types */	if (sizeof(int) !!= 4) {		error("This C compiler''s integers are not 32 bits.");	}	if (sizeof(double) !!= 8) {		error("This C compiler''s floats are not 64 bits.");	}	if (sizeof(time_t) !!= 4) {		error("This C compiler''s time_t''s are not 32 bits.");	}#ifdef MAKE_PROFILE	ProfilerInit(collectDetailed, bestTimeBase, 1000, 50);	ProfilerSetStatus(false);	ProfilerClear();#endif	/* compute the desired memory allocation */	reservedMemory = 500000;	availableMemory = MaxBlock() - reservedMemory;	/******	  Note: This is platform-specific. On the Mac, the user specifies the desired	    memory partition for each application using the Finder''s Get Info command.	    MaxBlock() returns the amount of memory in the partition minus space for	    the code segment and other resources. On other platforms, the desired heap	    size would be specified in other ways (e.g, via a command line argument).	    The maximum size of the object heap is fixed at at startup. If you run low	    on space, you must save the image and restart with more memory.	  Note: Some memory must be reserved for Mac toolbox calls, sound buffers, etc.	    A 30K reserve is too little. 40K allows Squeal to run but crashes if the	    console is opened. 50K allows the console to be opened (with and w/o the	    profiler). I added another 30K to provide for sound buffers and reliability.	    (Note: Later discovered that sound output failed if SoundManager was not	    preloaded unless there is about 100K reserved. Added 30K to that.)	******/	/* uncomment the following when using the C transcript window for debugging: */	//printf("Move this window, then hit CR\n"); getchar();	/* read the image file and allocate memory for Squeak heap */	f = sqImageFileOpen(imageName, "rb");	if (f == NULL) {		/* give a Mac-specific error message if image file is not found */		printf("Could not open the Squeak image file ''%s''\n\n", imageName);		printf("There are several ways to open a Squeak image file. You can:\n");		printf("  1. Double-click on the desired image file.\n");		printf("  2. Drop the image file icon onto the Squeak application or an alias to it.\n");		printf("  3. Name your image ''squeak.image'' and put it in the same folder as the\n");		printf("     Squeak application, then double-click on the Squeak application.\n\n");		printf("Press the return key to exit.\n");		getchar();		printf("Aborting...\n");		ioExit();	}	readImageFromFileHeapSize(f, availableMemory);	sqImageFileClose(f);	SetWindowTitle(shortImageName);	ioSetFullScreen(fullScreenFlag);	/* run Squeak */	interpret();}#endif'.! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 1/12/1999 22:33'!readmeFile	^ 'Building the Squeak Virtual MachineThe Macintosh virtual machine is built from five header and fourteen source files:	sq.h				-- shared definitions included in all .c files	sqConfig.h			-- platform configuration settings	sqMachDep.h		-- machine dependent macros to support threaded code	sqPlatformSpecific.h -- platform specific macros and definitions	sqVirtualMachine.h	-- support for dynamic primitives	sqFilePrims.c		-- file primitives	sqMacAsyncFilePrims.c -- Mac asynchronous file I/O	sqMacDirectory.c	-- Mac directory enumerations	sqMacExternalPrims.c  -- support for dynamic primitives	sqMacJoystick.c		-- Mac primitives to support Gravis MouseStickII joystick	sqMacNetwork.c		-- Mac networking primitives	sqMacSerialAndMIDIPort.c -- Mac serial and MIDI port primitives	sqMacSound.c		-- Mac audio output primitives	sqMacWindow.c		-- Mac window and event handling; main program	sqMiscPrims.c		-- miscellaneous automatically generated primitives	sqSoundPrims.c		-- automatically generated sound synthesis primitives	sqOldSoundPrims.c	-- old versions of sound primitives for backward compatibility	sqVirtualMachine.c	-- support for dynamic primitives	interp.c				-- automatically generated code for the virtual machineThe platform specific files are sqMacXXX.c, totaling about 2000 lines of code when this document was written. All other code is written to standard ANSI libraries and should port easily to other C environments.The file sqMacMinimal.c can be used a porting guide. This ~1100 line file stubs out all non-essential support functions and, together with sqFilePrims.c, allows one to build a functioning virtual machine that only lacks non-essential I/O functions (including support for file directory enumeration, which is not really essential!!). The small size of this file demonstrates how little code is really needed to get Squeak running on a new platform.Thanks to Ian Piumarta, the C header files are identical across all the major Squeak platforms.The code assumes that C ints and pointers are 4 bytes and double floats are 8 bytes; these assumptions are checked at start up time. Float objects in the image are stored in the IEEE standard byte ordering for double-precision floats on all platforms; macros in sq.h can be defined to swap bytes into and out of the platform native float format if necessary. (To ensure proper word alignment, one typically has to copy a Squeak Float object into a C "double" variable before operating on it; byte swapping can be done while doing this copy for little or no additional cost.)The files interp.c, sqSoundPrims.c, and sqMiscPrims.c are generated automatically, so changes to these files will be lost when they are next generated. It is fine to make ephemeral changes to these file for the purpose of debugging or statistics gathering. To generate the interpreter, see the "translation" category in Interpreter class. To generate sqSoundPrims.c, see the class method "cCodeForSoundPrimitives" in AbstractSound.The current VM was compiled with Metrowerks CodeWarrior 11. Earlier, I used Semantec Think C 6.0, but discovered a few bugs in their libraries having to do with 8-byte versus 4-byte integers. These bugs have probably been fixed by now.This code has also been compiled under the MPW "Mr. C" Macintosh compiler by Hans-Martin Mosner (hmm@heeg.de) with only one minor change: you will need to create an empty "MacHeaders.h" file. You may get some harmless compiler warnings and, for peak performance, the method that patches the dispatch loop must also be changed. Hans-Martin says: "The whole VM seems to be marginally slower than the delivered VM, but it is significantly smaller."The virtual machine uses the following libraries:	Libraries for 68K Project:		dnr.c		InterfaceLib		MathLibCFM68K (4i/8d).Lib		MSL C.CFM68K Far(4i/8d).Lib		MWCFM68KRuntime.Lib		Profiler68kCFM.lib	Libraries for PowerPC Project:		dnr.c		InterfaceLib		MathLib		MSL C.PPC.Lib		MWCRuntime.Lib		profilerPPC.libThe Mac networking code also requires three files from Apple''s MacTCP developer''s kit:	MacTCP.h	AddressXlation.h	dnr.cFor convenience, these files are included.To build a fat binary, build the 68K version first, and make sure that the file "Squeak VM 68K" is included in the PowerPC project. Then build the PowerPC version. CodeWarrior will include the 68K interpreter in the resource fork of the output file, resulting in an interpreter that runs on either 68K or PowerPC Macs. To get an additional speedup, the object code for the bytecode dispatch loop of the PPC version can be patched using the method "patchInterp:" in Interpreter class.Note: In The release, we''ve updated the CodeWarrior project files to release 11 of CodeWarrior. If you have a current version of CodeWarrior, you will should be able to automatically convert these project files to your release. If you have a release of CodeWarrior earlier than release 11 (which is quite old), you will need to either build new project files from scratch, start with the release 8 project files included with Squeak 2.2 and bring them up to date by hand, or update to a newer version of CodeWarrior.Note: In order to support dynamically loaded primitives, we have switched to using Code Fragement Manager model for the 68K VM. This has several ramifications:  1. You now need to use the CFM versions of the library files. The 68K project file has been updated accordingly.  2. You cannot run the 68K VM under the emulator on the PowerPC (Apple doesn''t support CFM apps under the 68K emulator).  3. You need to be sure that version 4.0 or later of "CFM-68K Runtime Enabler" is in the Extensions folder of the system folder on your 68K Mac. *** Warning: Older versions of "CFM-68K Runtime Enabler" had bugs that will probably prevent Squeak from even starting!! ***.  4. You will need to figure out how to make a CFM68K shared library project if you wish to build dynamic primitives that can be run on the 68K. Ideally, one would create a "fat" library containing both 68K and PPC versions of the dynamically loadable primitives. So far, I have not tried doing that. 	-- John Maloney, Jan 12, 1999'.! !!InterpreterSupportCode class methodsFor: 'source files' stamp: 'jm 1/13/1999 10:48'!squeakHeaderFile	^ '#include <math.h>#include <stdio.h>#include <stdlib.h>#include <string.h>#include <time.h>#include "sqConfig.h"#include "sqVirtualMachine.h"#define true 1#define false 0#define null 0  /* using ''null'' because nil is predefined in Think C *//* pluggable primitives macros *//* Note: All pluggable primitives are defined as	EXPORT(int) somePrimitive(void)   If the platform requires special declaration modifiers   the EXPORT macro can be redefined*/#define EXPORT(returnType) returnType/* image save/restore macros *//* Note: The image file save and restore code uses these macros; they   can be redefined in sqPlatformSpecific.h if desired. These default   versions are defined in terms of the ANSI Standard C libraries.*/#define sqImageFile FILE *#define sqImageFileClose(f)                  fclose(f)#define sqImageFileOpen(fileName, mode)      fopen(fileName, mode)#define sqImageFilePosition(f)               ftell(f)#define sqImageFileRead(ptr, sz, count, f)   fread(ptr, sz, count, f)#define sqImageFileSeek(f, pos)              fseek(f, pos, SEEK_SET)#define sqImageFileWrite(ptr, sz, count, f)  fwrite(ptr, sz, count, f)#define sqAllocateMemory(minHeapSize, desiredHeapSize)   malloc(desiredHeapSize)/* platform-dependent float conversion macros *//* Note: Second argument must be a variable name, not an expression!! *//* Note: Floats in image are always in PowerPC word order; change   these macros to swap words if necessary. This costs no extra and   obviates sometimes having to word-swap floats when reading an image.*/#if defined(DOUBLE_WORD_ALIGNMENT) || defined(DOUBLE_WORD_ORDER)# ifdef DOUBLE_WORD_ORDER/* word-based copy with swapping for non-PowerPC order */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 1); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 0);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 1); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 0);# else /*!!DOUBLE_WORD_ORDER*//* word-based copy for machines with alignment restrictions */#   define storeFloatAtfrom(i, floatVarName) \	*((int *) (i) + 0) = *((int *) &(floatVarName) + 0); \	*((int *) (i) + 1) = *((int *) &(floatVarName) + 1);#   define fetchFloatAtinto(i, floatVarName) \	*((int *) &(floatVarName) + 0) = *((int *) (i) + 0); \	*((int *) &(floatVarName) + 1) = *((int *) (i) + 1);# endif /*!!DOUBLE_WORD_ORDER*/#else /*!!(DOUBLE_WORD_ORDER||DOUBLE_WORD_ALIGNMENT)*//* for machines that allow doubles to be on any word boundary */# define storeFloatAtfrom(i, floatVarName) \	*((double *) (i)) = (floatVarName);# define fetchFloatAtinto(i, floatVarName) \	(floatVarName) = *((double *) (i));#endif/* this include file may redefine earlier definitions and macros: */#include "sqPlatformSpecific.h"/* squeak file record; see sqFilePrims.c for details */typedef struct {	FILE	*file;	int		sessionID;	int		writable;	int		fileSize;	int		lastOp;  /* 0 = uncommitted, 1 = read, 2 = write */} SQFile;/* file i/o */int sqFileAtEnd(SQFile *f);int sqFileClose(SQFile *f);int sqFileDeleteNameSize(int sqFileNameIndex, int sqFileNameSize);int sqFileGetPosition(SQFile *f);int sqFileInit(void);int sqFileOpen(SQFile *f, int sqFileNameIndex, int sqFileNameSize, int writeFlag);int sqFileReadIntoAt(SQFile *f, int count, int byteArrayIndex, int startIndex);int sqFileRenameOldSizeNewSize(int oldNameIndex, int oldNameSize, int newNameIndex, int newNameSize);int sqFileSetPosition(SQFile *f, int position);int sqFileSize(SQFile *f);int sqFileValid(SQFile *f);int sqFileWriteFromAt(SQFile *f, int count, int byteArrayIndex, int startIndex);/* directories */int dir_Create(char *pathString, int pathStringLength);int dir_Delimitor(void);int dir_Lookup(char *pathString, int pathStringLength, int index,	/* outputs: */	char *name, int *nameLength, int *creationDate, int *modificationDate,	int *isDirectory, int *sizeIfFile);int dir_PathToWorkingDir(char *pathName, int pathNameMax);int dir_SetMacFileTypeAndCreator(char *filename, int filenameSize, char *fType, char *fCreator);/* interpreter entry points */void error(char *s);int checkedByteAt(int byteAddress);int checkedByteAtput(int byteAddress, int byte);int checkedLongAt(int byteAddress);int checkedLongAtput(int byteAddress, int a32BitInteger);int fullDisplayUpdate(void);int initializeInterpreter(int bytesToShift);int interpret(void);int primitiveFail(void);int signalSemaphoreWithIndex(int index);int success(int);/* display, mouse, keyboard, time i/o */int ioBeep(void);int ioExit(void);int ioForceDisplayUpdate(void);int ioFormPrint(	int bitsAddr, int width, int height, int depth,	double hScale, double vScale, int landscapeFlag);int ioSetFullScreen(int fullScreen);int ioGetButtonState(void);int ioGetKeystroke(void);int ioMicroMSecs(void);int ioMSecs(void);int ioMousePoint(void);int ioPeekKeystroke(void);int ioProcessEvents(void);int ioRelinquishProcessorForMicroseconds(int microSeconds);int ioScreenSize(void);int ioSeconds(void);int ioSetCursor(int cursorBitsIndex, int offsetX, int offsetY);int ioSetCursorWithMask(int cursorBitsIndex, int cursorMaskIndex, int offsetX, int offsetY);int ioShowDisplay(	int dispBitsIndex, int width, int height, int depth,	int affectedL, int affectedR, int affectedT, int affectedB);/* cheap clock with coarse resolution (about 17 msecs on Mac) */# define ioLowResMSecs() ((1000 * clock()) / CLOCKS_PER_SEC)/* optional millisecond clock macro */#ifdef USE_CLOCK_MSECS# define ioMSecs() ((1000 * clock()) / CLOCKS_PER_SEC)#endif/* image file and VM path names */extern char imageName[];int imageNameGetLength(int sqImageNameIndex, int length);int imageNamePutLength(int sqImageNameIndex, int length);int imageNameSize(void);int vmPathSize(void);int vmPathGetLength(int sqVMPathIndex, int length);/* save/restore */int readImageFromFileHeapSize(sqImageFile f, int desiredHeapSize);/* clipboard (cut/copy/paste) */int clipboardSize(void);int clipboardReadIntoAt(int count, int byteArrayIndex, int startIndex);int clipboardWriteFromAt(int count, int byteArrayIndex, int startIndex);/* sound output */int snd_AvailableSpace(void);int snd_InsertSamplesFromLeadTime(int frameCount, int srcBufPtr, int samplesOfLeadTime);int snd_PlaySamplesFromAtLength(int frameCount, int arrayIndex, int startIndex);int snd_PlaySilence(void);int snd_Start(int frameCount, int samplesPerSec, int stereo, int semaIndex);int snd_Stop(void);/* sound input */int snd_SetRecordLevel(int level);int snd_StartRecording(int desiredSamplesPerSec, int stereo, int semaIndex);int snd_StopRecording(void);double snd_GetRecordingSampleRate(void);int snd_RecordSamplesIntoAtLength(int buf, int startSliceIndex, int bufferSizeInBytes);/* joystick support */int joystickInit(void);int joystickRead(int stickIndex);/* netscape plug-in support */int plugInInit(char *imageName);int plugInShutdown(void);int plugInInterpretCycles(int cycleCount);/* interpreter entry points needed by compiled primitives */void * arrayValueOf(int arrayOop);int checkedIntegerValueOf(int intOop);void * fetchArrayofObject(int fieldIndex, int objectPointer);double fetchFloatofObject(int fieldIndex, int objectPointer);int fetchIntegerofObject(int fieldIndex, int objectPointer);double floatValueOf(int floatOop);int pop(int nItems);int pushInteger(int integerValue);int sizeOfSTArrayFromCPrimitive(void *cPtr);int storeIntegerofObjectwithValue(int fieldIndex, int objectPointer, int integerValue);/* sound generation primitives (old, for backward compatibility) */int primWaveTableSoundmixSampleCountintostartingAtpan(void);int primFMSoundmixSampleCountintostartingAtpan(void);int primPluckedSoundmixSampleCountintostartingAtpan(void);int primSampledSoundmixSampleCountintostartingAtpan(void);/* sound generation primitives */int primFMSoundmixSampleCountintostartingAtleftVolrightVol(void);int primLoopedSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);int primPluckedSoundmixSampleCountintostartingAtleftVolrightVol(void);int primReverbSoundapplyReverbTostartingAtcount(void);int primSampledSoundmixSampleCountintostartingAtleftVolrightVol(void);/* squeak socket record; see sqMacNetwork.c for details */typedef struct {	int		sessionID;	int		socketType;  /* 0 = TCP, 1 = UDP */	void	*privateSocketPtr;}  SQSocket, *SocketPtr;/* networking primitives */int		sqNetworkInit(int resolverSemaIndex);void	sqNetworkShutdown(void);void	sqResolverAbort(void);void	sqResolverAddrLookupResult(char *nameForAddress, int nameSize);int		sqResolverAddrLookupResultSize(void);int		sqResolverError(void);int		sqResolverLocalAddress(void);int		sqResolverNameLookupResult(void);void	sqResolverStartAddrLookup(int address);void	sqResolverStartNameLookup(char *hostName, int nameSize);int		sqResolverStatus(void);void	sqSocketAbortConnection(SocketPtr s);void	sqSocketCloseConnection(SocketPtr s);int		sqSocketConnectionStatus(SocketPtr s);void	sqSocketConnectToPort(SocketPtr s, int addr, int port);void	sqSocketCreateNetTypeSocketTypeRecvBytesSendBytesSemaID(			SocketPtr s, int netType, int socketType,			int recvBufSize, int sendBufSize, int semaIndex);void	sqSocketDestroy(SocketPtr s);int		sqSocketError(SocketPtr s);void	sqSocketListenOnPort(SocketPtr s, int port);int		sqSocketLocalAddress(SocketPtr s);int		sqSocketLocalPort(SocketPtr s);int		sqSocketReceiveDataAvailable(SocketPtr s);int		sqSocketReceiveDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketRemoteAddress(SocketPtr s);int		sqSocketRemotePort(SocketPtr s);int		sqSocketSendDataBufCount(SocketPtr s, int buf, int bufSize);int		sqSocketSendDone(SocketPtr s);/* profiling */int clearProfile(void);int dumpProfile(void);int startProfiling(void);int stopProfiling(void);/* system attributes */int attributeSize(int id);int getAttributeIntoLength(int id, int byteArrayIndex, int length);/* miscellaneous primitives */int primBitmapcompresstoByteArray(void);int primBitmapdecompressfromByteArrayat(void);int primSampledSoundconvert8bitSignedFromto16Bit(void);int primStringcomparewithcollated(void);int primStringfindFirstInStringinSetstartingAt(void);int primStringfindSubstringinstartingAtmatchTable(void);int primStringindexOfAsciiinStringstartingAt(void);int primStringtranslatefromtotable(void);/* serial port primitives */int serialPortClose(int portNum);int serialPortOpen(  int portNum, int baudRate, int stopBitsType, int parityType, int dataBits,  int inFlowCtrl, int outFlowCtrl, int xOnChar, int xOffChar);int serialPortReadInto(int portNum, int count, int bufferPtr);int serialPortWriteFrom(int portNum, int count, int bufferPtr);/* MIDI primitives */int sqMIDIGetClock(void);int sqMIDIGetPortCount(void);int sqMIDIGetPortDirectionality(int portNum);int sqMIDIGetPortName(int portNum, int namePtr, int length);int sqMIDIClosePort(int portNum);int sqMIDIOpenPort(int portNum, int readSemaIndex, int interfaceClockRate);int sqMIDIParameter(int whichParameter, int modify, int newValue);int sqMIDIPortReadInto(int portNum, int count, int bufferPtr);int sqMIDIPortWriteFromAt(int portNum, int count, int bufferPtr, int time);/*** Experimental Asynchronous File I/O ***/typedef struct {	int			sessionID;	void		*state;} AsyncFile;int asyncFileClose(AsyncFile *f);int asyncFileOpen(AsyncFile *f, int fileNamePtr, int fileNameSize, int writeFlag, int semaIndex);int asyncFileRecordSize();int asyncFileReadResult(AsyncFile *f, int bufferPtr, int bufferSize);int asyncFileReadStart(AsyncFile *f, int fPosition, int count);int asyncFileWriteResult(AsyncFile *f);int asyncFileWriteStart(AsyncFile *f, int fPosition, int bufferPtr, int bufferSize);/*** pluggable primitive support ***/int ioLoadExternalFunctionOfLengthFromModuleOfLength(  int functionNameIndex, int functionNameLength,  int moduleNameIndex, int moduleNameLength);'.! !