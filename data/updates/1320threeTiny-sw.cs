'From Squeak 2.4c of May 10, 1999 on 13 July 1999 at 6:44:37 pm'!"Change Set:		threeTiny-swDate:			13 July 1999Author:			Scott Wallace(1) Adapted from a fix provided by Leandro Caniglia: Bulletproofs against a bug that could show up when a system window got dragged to the trashcan.(2) Puts life back into project-navigation buttons that became damaged when an inst variable was added to Project in a recent update, making the preexisting Project class object obsolete.(3)  Bulletproofs Controller.viewHasCursor against the case that occasionally arises in which the view is nil."!!Controller methodsFor: 'cursor' stamp: 'sw 7/13/1999 18:42'!viewHasCursor	"Answer whether the cursor point of the receiver's sensor lies within the 	inset display box of the receiver's view (see View|insetDisplayBox). 	Controller|viewHasCursor is normally used in internal methods."	^ view ifNotNil: [view containsPoint: sensor cursorPoint] ifNil: [false]! !!SystemWindow methodsFor: 'resize/collapse' stamp: 'sw 7/13/1999 12:56'!spawnReframeHandle: event	"The mouse has crossed a pane border.  Spawn a reframe handle."	| resizer localPt pt ptName newBounds |	owner ifNil: [^ self  "Spurious mouseLeave due to delete"].	(self isActive not or: [self isCollapsed]) ifTrue:  [^ self].	((self world ifNil: [^ self]) firstSubmorph isKindOf: NewHandleMorph) ifTrue:		[^ self  "Prevent multiple handles"].	paneMorphs do: [:p | ((p fullBounds insetBy: 1) containsPoint: event cursorPoint)			ifTrue: [^ self  "Don't activate resizer if in a scrollbar"]].	pt _ event cursorPoint.	self bounds forPoint: pt closestSideDistLen:		[:side :dist :len |  "Check for window side adjust"		dist <= 2  ifTrue: [ptName _ side]].	ptName ifNil:		["Check for pane border adjust"		^ self spawnPaneFrameHandle: event].	#(topLeft bottomRight bottomLeft topRight) do:		[:corner |  "Check for window corner adjust"		(pt dist: (self bounds perform: corner)) < 20 ifTrue: [ptName _ corner]].	resizer _ NewHandleMorph new		followHand: event hand		forEachPointDo:			[:p | localPt _ self pointFromWorld: p.			newBounds _ self bounds withSideOrCorner: ptName setToPoint: localPt.			Preferences fastDragWindowForMorphic			ifTrue:				["For fast display, only higlight the rectangle during loop"				newBounds _ self bounds newRectFrom:					[:f | f extent > (100@80)						ifTrue: [f withSideOrCorner: ptName									setToPoint: (self pointFromWorld: Sensor cursorPoint)]						ifFalse: [f]].				self bounds: newBounds]			ifFalse:				[newBounds extent > (100@80) ifTrue: [self bounds: newBounds].				(Preferences roundedWindowCorners					and: [#(bottom right bottomRight) includes: ptName])					ifTrue:					["Complete kluge: causes rounded corners to get painted correctly,					in spite of not working with top-down displayWorld."					ptName = #bottom ifFalse:						[self invalidRect: (self bounds topRight - (6@0) extent: 7@7)].					ptName = #right ifFalse:						[self invalidRect: (self bounds bottomLeft - (0@6) extent: 7@7)].					self invalidRect: (self bounds bottomRight - (6@6) extent: 7@7)]]]		lastPointDo:			[:p | ].	event hand world addMorph: resizer.	resizer startStepping! !"Postscript:"SimpleButtonMorph allInstancesDo:	[:aButton | (#(advanceToNextProject returnToPreviousProject) includes: aButton actionSelector)		ifTrue:			[aButton target: Project]].!