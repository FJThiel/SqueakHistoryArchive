'From Squeak2.9alpha of 13 June 2000 [latest update: #2867] on 12 October 2000 at 1:17:16 pm'!"Change Set:		ProjVersions-arDate:			12 October 2000Author:			Andreas RaabMakes project versions be encoded in human readable form, e.g., 	baseName.NNN.extwith NNN being the version number."!!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:25'!assureIntegerVersion	"For converting the project versions"	self currentVersionNumber. "Does it for us"! !!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:06'!bumpVersion: versionNumber	"Make a new version after the previous version number"	versionNumber ifNil:[^0].	^versionNumber + 1! !!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:25'!currentVersionNumber	version ifNil: [^0].	version isInteger ifTrue:[^version].	version _ Base64MimeConverter decodeInteger: version unescapePercents.	^version! !!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:24'!loadFromServer: newerAutomatically	"If a newer version of me is on the server, load it."	| servers pair resp |	self assureIntegerVersion.	self isCurrentProject ifTrue: ["exit, then do the command"		^ self armsLengthCommand: #loadFromServer withDescription: 'Loading'	].	servers _ self tryToFindAServerWithMe ifNil: [^ nil].	pair _ self class mostRecent: self name onServer: servers first.	pair first ifNil: [^ self inform: 'can''t find file on server for ', self name].	self currentVersionNumber > pair second ifTrue: [		^ self inform: 'That server has an older version of the project.'].	version = (Project parseProjectFileName: pair first) second ifTrue: [		resp _ (PopUpMenu labels: 'Reload anyway\Cancel' withCRs) startUpWithCaption: 					'The only changes are the ones you made here.'.		resp ~= 1 ifTrue: [^ nil]	] ifFalse: [		newerAutomatically ifFalse: [			resp _ (PopUpMenu labels: 'Load it\Cancel' withCRs) startUpWithCaption: 						'A newer version exists on the server.'.			resp ~= 1 ifTrue: [^ nil]		].	].	"Find parent project, go there, zap old thumbnail"	parentProject installRemoteNamed: pair first from: servers first named: self name.! !!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:11'!projectExtension	^'pr'! !!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:26'!storeOnServerInnards	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	| servers resp newName local primaryServerDirectory serverVersionPair localDirectory localVersionPair myVersionNumber warning maxNumber gifFileName gifStream f |	self assureIntegerVersion.	"NebraskaDebug at: #savingproject add: {'beginning'}."	"Find out what version"	(servers _ self serverList) isEmpty ifTrue: [		(primaryServerDirectory _ self findAFolderToStoreProjectIn) ifNotNil: [			servers _ Array with: primaryServerDirectory.			urlList _ Array with: primaryServerDirectory realUrl, '/'.		].	] ifFalse: [		primaryServerDirectory _ servers first.	].	localDirectory _ self squeakletDirectory.	serverVersionPair _ self class mostRecent: self name onServer: primaryServerDirectory.	localVersionPair _ self class mostRecent: self name onServer: localDirectory.	maxNumber _ myVersionNumber _ self currentVersionNumber.	ProgressNotification signal: '2:versionsDetected'.	"NebraskaDebug at: #savingproject add: {'versions detected'}."	warning _ ''.	myVersionNumber < serverVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) on the server'.		maxNumber _ maxNumber max: serverVersionPair second.	].	myVersionNumber < localVersionPair second ifTrue: [		warning _ warning,'\There are newer version(s) in the local directory'.		maxNumber _ maxNumber max: localVersionPair second.	].	warning isEmpty ifFalse: [		myVersionNumber = 0 ifTrue: [			warning _ warning,'\THIS PROJECT HAS NEVER BEEN SAVED'		].		warning _ 'WARNING', '\Project: ',self name,warning.		resp _ (PopUpMenu labels: 'Store anyway\Cancel' withCRs) startUpWithCaption: 			(warning, '\Please cancel, rename this project, and see what is there.') withCRs.			resp ~= 1 ifTrue: [^ nil]	].	version _ self bumpVersion: maxNumber.	"write locally - now zipped automatically"	newName _ self versionedFileName.	lastSavedAtSeconds _ Time totalSeconds.	self exportSegmentFileName: newName directory: localDirectory.			"NebraskaDebug at: #savingproject add: {'local save complete'}."	ProgressNotification signal: '4:localSaveComplete'.	"3 is deep in export logic"	primaryServerDirectory ifNotNil: [		local _ localDirectory oldFileNamed: newName.		resp _ primaryServerDirectory putFile: local named: newName retry: false.		local close.		resp == true ifFalse: [			self inform: 'the primary server of this project seems to be down (',								resp printString,')'. 			^ self		].		gifFileName _ self name,'.gif'.		gifStream _ primaryServerDirectory fileNamed: gifFileName.		gifStream dataIsValid.		thumbnail unhibernate.		f _ thumbnail colorReduced.  "minimize depth"		f depth > 8 ifTrue: [			f _ thumbnail asFormOfDepth: 8		].		GIFReadWriter putForm: f onStream: gifStream.		primaryServerDirectory sleep.	"if ftp, close the connection"	].	"NebraskaDebug at: #savingproject add: {'remote save complete'}."	ProgressNotification signal: '9999 save complete'.	"Later, store with same name on secondary servers.  Still can be race conditions.  All machines will go through the server list in the same order."	"2 to: servers size do: [:aServer | aServer putFile: local named: newName]."! !!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:26'!versionFrom: aServerFile	"Store the version of the file I actually came from.  My stored version was recorded before I knew the latest version number on the server!!"	| theName uu serverUrl |	self flag: #bob.		"this may become unnecessary once we get the version before writing"	(aServerFile class == String) 		ifTrue: [uu _ aServerFile asUrl.				theName _ uu path last.				serverUrl _ (uu toText copyUpToLast: $/), '/']		ifFalse: [serverUrl _ aServerFile directoryUrl.				theName _ aServerFile localName].	version _ (Project parseProjectFileName: theName) second.	(serverUrl beginsWith: 'ftp:') ifTrue: ["update our server location"		urlList ifNil: [urlList _ Array new: 1].		urlList size = 0 ifTrue: [urlList _ Array new: 1].		urlList at: 1 put: serverUrl].! !!Project methodsFor: 'file in/out' stamp: 'ar 10/11/2000 15:11'!versionedFileName	"Project current versionedFileName"	| v |	^String streamContents:[:s|		s nextPutAll: self name.		s nextPutAll: FileDirectory dot.		v _ self currentVersionNumber printString.		v size < 3 ifTrue:[v _ '0', v].		v size < 3 ifTrue:[v _ '0', v].		s nextPutAll: v.		s nextPutAll: FileDirectory dot.		s nextPutAll: self projectExtension.	]! !!Project class methodsFor: 'squeaklet on server' stamp: 'ar 10/11/2000 14:58'!fromUrl: urlString	| serverFile pair projName proj num triple |	"Load the project, and make a thumbnail to it in the current project.  Replace the old one if necessary.Project fromUrl: 'http://www.squeak.org/Squeak2.0/2.7segments/Squeak_Easy.pr.gz'."	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	"---no longer seems necessary---		Smalltalk isMorphic ifFalse: [^ self inform: 			'Later, allow jumping from MVC to Morphic Projects.'].	-----"	serverFile _ ServerFile new fullPath: urlString.	triple _ Project parseProjectFileName: serverFile fileName unescapePercents.	projName _ triple first.	(proj _ Project named: projName) ifNotNil: ["it appeared" ^ ProjectEntryNotification signal: proj].	serverFile isTypeHTTP		ifTrue: [num _ triple second.			pair _ Array with: serverFile fileName with: num]		ifFalse: [pair _ self mostRecent: serverFile localName onServer: serverFile].	"Pair first is name exactly as it is on the server"	pair first ifNil: ["If none, open a blank project"		^self openBlankProjectNamed: projName	].	CurrentProject installRemoteNamed: pair first from: serverFile named: projName.! !!Project class methodsFor: 'squeaklet on server' stamp: 'ar 10/11/2000 15:00'!mostRecent: projName onServer: aServerDirectory	| stem list max goodName triple num stem1 stem2 rawList nothingFound unEscName |	"Find the exact fileName of the most recent version of project with the stem name of projName.  Names are of the form 'projName|mm.pr' where mm is a mime-encoded integer version number.	File names may or may not be HTTP escaped, %20 on the server."	self flag: #bob.		"do we want to handle unversioned projects as well?"	nothingFound _ {nil. -1}.	aServerDirectory ifNil: [^nothingFound].	"23 sept 2000 - some old projects have periods in name so be more careful"	unEscName _ projName unescapePercents.	triple _ Project parseProjectFileName: unEscName.	stem _ triple first.	rawList _ aServerDirectory fileNames.	rawList class == String ifTrue: [self inform: 'server is unavailable'. ^nothingFound].	list _ rawList collect: [:nnn | nnn unescapePercents].	max _ -1.  goodName _ nil.	list withIndexDo: [:aName :ind |		(aName beginsWith: stem) ifTrue: [			num _ (Project parseProjectFileName: aName) second.			num > max ifTrue: [max _ num.  goodName _ (rawList at: ind)]]].	max = -1 ifFalse: [^ Array with: goodName with: max].	"try with underbar for spaces on server"	(stem includes: $ ) ifTrue: [		stem1 _ stem copyReplaceAll: ' ' with: '_'.		list withIndexDo: [:aName :ind |			(aName beginsWith: stem1) ifTrue: [				num _ (Project parseProjectFileName: aName) second.				num > max ifTrue: [max _ num.  goodName _ (rawList at: ind)]]]].	max = -1 ifFalse: [^ Array with: goodName with: max].		"try without the marker | "	stem1 _ stem allButLast, '.pr'.	stem2 _ stem1 copyReplaceAll: ' ' with: '_'.	"and with spaces replaced"	list withIndexDo: [:aName :ind |		(aName beginsWith: stem1) | (aName beginsWith: stem2) ifTrue: [			(triple _ aName findTokens: '.') size >= 2 ifTrue: [				max _ 0.  goodName _ (rawList at: ind)]]].	"no other versions"	max = -1 ifFalse: [^ Array with: goodName with: max].	^nothingFound		"no matches"! !!Project class methodsFor: 'squeaklet on server' stamp: 'ar 10/11/2000 15:42'!parseProjectFileName: aString	"It was formerly possible to have periods in projct names and this messed up some parsing methods. Try to handle that more gracefully and allow for a change in scheme at a later time.	ar 10/11/2000: Switch to a different version encoding scheme. The new scheme is		baseName.NNN.ext	where NNN is at least three digits wide and encodes the version in a human readable form.	Examples:		Project parseProjectFileName: 'My Project.007.pr'.		Project parseProjectFileName: 'My.First.Project.042.prj'.		Project parseProjectFileName: 'My Project.123456.p r o j e c t'.	The 'dot' is determined on FileDirectory>>dot to compensate for platforms wishing to use something different from a period. Also allows parsing the former encoding of file using Base64 encoded versions of the form	Project parseProjectFileName: 'aa.bb.cc|AQ.ss'	"	| suffix baseName version versionAndSuffix index tokens |	"answer an array with: 		1 = basic project name		2 = version string		3 = suffix (pr)"	"First check for the old style versions"	index _ aString findLast:[:ch| ch = $|].	index = 0 ifFalse:["Old style version"		baseName _ aString copyFrom: 1 to: index-1.		versionAndSuffix _ aString copyFrom: index+1 to: aString size.		(versionAndSuffix occurrencesOf: $.) = 0 ifTrue: [^ #('no suffix')].		version _ versionAndSuffix copyUpTo: $..		suffix _ versionAndSuffix copyFrom: version size+1 to: versionAndSuffix size.		"Decode Base64 encoded version"		version isEmpty			ifTrue:[version _ 0]			ifFalse:[version _ Base64MimeConverter decodeInteger: version unescapePercents].		^{baseName. version. suffix}].	"New style versions"	tokens _ aString findTokens: FileDirectory dot.	tokens size < 2 "Not even a single dot"		ifTrue:[^{aString. 0. ''}].	tokens size < 3 ifTrue:["Only one dot"		self flag: #arNote. "We could allow project file names of the form 'project.001' (e.g., no project extension) or '.001.pr' (without a base name) but I don't think its a good idea."		^{tokens first. 0. tokens last}].	suffix _ tokens last.	version _ tokens at: tokens size - 1.	(version anySatisfy:[:ch| ch isDigit not]) ifTrue:[		"Non-digit version??? I don't think so..."		baseName _ aString copyFrom: 1 to: aString size - suffix size - 1.		^{baseName. 0. suffix}].	baseName _ aString copyFrom: 1 to: aString size - suffix size - version size - 2.	version _ version asInteger.	^{baseName. version. suffix}! !!Project class methodsFor: 'squeaklet on server' stamp: 'ar 10/11/2000 15:01'!sweep: aServerDirectory	| repository list parts ind entry projectName versions |	"On the server, move all but the three most recent versions of each Squeaklet to a folder called 'older'"	"Project sweep: ((ServerDirectory serverNamed: 'DaniOnJumbo') clone 				directory: '/vol0/people/dani/Squeaklets/2.7')"	"Ensure the 'older' directory"	(aServerDirectory includesKey: 'older') 		ifFalse: [aServerDirectory createDirectory: 'older'].	repository _ aServerDirectory clone directory: aServerDirectory directory, '/older'.	"Collect each name, and decide on versions"	list _ aServerDirectory fileNames.	list class == String ifTrue: [^ self inform: 'server is unavailable'].	list _ list asSortedCollection asOrderedCollection.	parts _ list collect: [:en | Project parseProjectFileName: en].	parts _ parts select: [:en | en third = 'pr'].	ind _ 1.	[entry _ list at: ind.		projectName _ entry first asLowercase.		versions _ OrderedCollection new.  versions add: entry.		[(ind _ ind + 1) > list size 			ifFalse: [(parts at: ind) first asLowercase = projectName 				ifTrue: [versions add: (parts at: ind).  true]				ifFalse: [false]]			ifTrue: [false]] whileTrue.		aServerDirectory moveYoungest: 3 in: versions to: repository.		ind > list size] whileFalse.! !Project removeSelector: #setVersionFromInteger:!