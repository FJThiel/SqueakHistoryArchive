'From Squeak 2.5 of August 6, 1999 [latest update: #1540] on 11 October 1999 at 6:14:54 pm'!"Change Set:		dropIntoPartsBin-swDate:			11 October 1999Author:			Scott WallaceMakes it possible for a parts bin to accept drops without requiring any special unlocking gesture.This is accomplished by making the #isPartsBin and #openToDragNDrop attributes of a pasteup be independent.  The latter is now separately settable in the playfield-options menu, and flip-flopping the former no longer affects the latter.Note that a concomitant of this change is that you can remove any object from an active parts bin by grabbing it via its black handle, and you can, similarly, reposition an object in a parts bin by picking it up with the black handle and dropping it wherever you want it to end up.A fresh danger introduced by this update is that, since you can easily let go of an object you've just dragged from a parts bin while the cursor is still over the parts bin, this now results in adding a duplicate of that object to the parts bin.  In an earlier version, this special case was singled out for special handling because of the annoyance factor, but for the moment, in this version, we'll just let the chips fall where they may, and listen for feedback.Note that existing parts bins are changed via the postscript of this update so that they now become open to dropping."!!Morph methodsFor: 'dropping/grabbing' stamp: 'sw 10/11/1999 13:20'!justDroppedInto: aMorph event: anEvent	"This message is sent to a dropped morph after it has been dropped on--and been accepted by--a drop-sensitive morph"	| aWindow partsBinCase |	(partsBinCase _ aMorph isPartsBin) ifFalse:		[self isPartsDonor: false].	(aWindow _ aMorph ownerThatIsA: SystemWindow) ifNotNil:		[aWindow isActive ifFalse:			[aWindow activate]].	(self isInWorld and: [partsBinCase not]) ifTrue:		[self world startSteppingSubmorphsOf: self]  	"Note an unhappy inefficiency here:  the startStepping... call will often have already been called in the sequence leading up to entry to this method, but unfortunately the isPartsDonor: call often will not have already happened, with the result that the startStepping... call will not have resulted in the startage of the steppage."! !!Morph methodsFor: 'stepping and presenter' stamp: 'sw 10/11/1999 12:59'!stopSteppingSelfAndSubmorphs	self allMorphsDo: [:m | m stopStepping]! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 10/11/1999 13:21'!acceptDroppingMorph: aMorph event: evt	| slotSpecs aValue incomingName nameObtained |	self isWorldMorph		ifTrue:			["Add the given morph to this world and start stepping it if it wants to be."			self addMorphFront: aMorph.			(aMorph fullBounds intersects: (0@0 extent: self viewBox extent)) ifFalse:				[self beep.  aMorph position: self bounds center]]		ifFalse:			[self privateAddMorph: aMorph atIndex: (self insertionIndexFor: aMorph).			self changed.			self layoutChanged].	incomingName _ aMorph knownName.	aMorph submorphsDo: [:m | (m isKindOf: HaloMorph) ifTrue: [m delete]].	self autoLineLayout ifTrue: [self fixLayout].	self isPartsBin		ifTrue:			[aMorph isPartsDonor: true.			aMorph stopSteppingSelfAndSubmorphs.			aMorph suspendEventHandler]		ifFalse:			[self world startSteppingSubmorphsOf: aMorph].	self presenter morph: aMorph droppedIntoPasteUpMorph: self.	slotSpecs _ aMorph slotSpecifications.  "A Fabrik component, for example.  Just a hook at this time"	slotSpecs size > 0 ifTrue:		[self assuredPlayer.		slotSpecs do:			[:tuple |				aValue _ aMorph initialValueFor: tuple first.				nameObtained _ self player addSlotNamedLike: tuple first withValue: aValue.				nameObtained ~= incomingName ifTrue:					[aMorph setNameTo: nameObtained]].		self player updateAllViewers]! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 10/11/1999 12:46'!repelsMorph: aMorph event: ev	(Preferences allowSysWindowEmbedding not and:		[aMorph isKindOf: SystemWindow]) ifTrue: [^ false].	(aMorph isKindOf: Viewer) ifTrue: [^ false].	openToDragNDrop ifFalse: [^ true].	(self wantsDroppedMorph: aMorph event: ev) ifFalse: [^ true].	^ super repelsMorph: aMorph event: ev "consults #repelling flag"! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 10/11/1999 12:45'!wantsDroppedMorph: aMorph event: evt	self visible ifFalse: [^ false].  "will be a call to #hidden again very soon"	self openToDragNDrop ifFalse: [^ false].	(self bounds containsPoint: (self pointFromWorld: evt cursorPoint)) ifFalse: [^ false].	((aMorph isKindOf: SystemWindow) and: [Preferences allowSysWindowEmbedding not])		ifTrue:	[^ false].	((aMorph isKindOf: BookPageSorterMorph) and: [self isWorldMorph not])		ifTrue:	[^ false].	(aMorph isKindOf: Viewer) ifTrue: [^ self isWorldMorph].	^ true! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 10/11/1999 12:15'!isOpenForDragNDropString	^ self openToDragNDrop		ifTrue:			['stop being open to drag & drop']		ifFalse:			['start being open to drag & drop']! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 10/11/1999 12:17'!playfieldOptionsMenu	| aMenu isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'save on file...' action: #saveOnFile.	aMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	(self valueOfProperty: #classAndMethod) ifNotNil:		[aMenu add: 'broadcast as documentation' action: #saveDocPane].	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(isOpenForDragNDropString	toggleOpenToDragNDrop			'whether objects can be dropped into and dragged out of me')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(originAtCenterString	toggleOriginAtCenter			'whether the cartesian origin of the playfield should be at its lower-left corner or at the center of the playfield')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'].	aMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing.	aMenu balloonTextForLastItem:  'governs whether, when an object is touched inside me, a viewer should automatically be launched for it.'.	isWorld ifFalse:		[aMenu add: 'behave like a Holder' action: #becomeLikeAHolder.		aMenu balloonTextForLastItem: 'Set properties to make this object nicely set up to hold frames of a scripted animation.'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	presenter ifNil:		[aMenu add: 'make detachable' action: #makeDetachable.		aMenu balloonTextForLastItem: 'Allow this area to be separately governed by its own controls.'].	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'playfield options...'.	^ aMenu! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 10/11/1999 12:50'!setPartsBinStatusTo: aBoolean	isPartsBin _ aBoolean.	aBoolean ifFalse: [openToDragNDrop _ true].		"but note that we no longer reset openToDragNDrop to false upon making it a parts bin again"	isPartsBin		ifTrue:			[submorphs do:				[:m | m isPartsDonor: true.					m stopStepping.					m suspendEventHandler]]		ifFalse:			[submorphs do:				[:m | m isPartsDonor: false.					m restoreSuspendedEventHandler].			self world ifNotNil: [self world startSteppingSubmorphsOf: self]]! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 10/11/1999 12:19'!toggleOpenToDragNDrop	openToDragNDrop _ self openToDragNDrop not! !!Utilities class methodsFor: 'flaps' stamp: 'sw 10/11/1999 13:17'!newPartsFlapPage	| aPage |	aPage _ PasteUpMorph new borderWidth: 0.	aPage color: Color white; padding: 6.	aPage autoLineLayout: true.	aPage isPartsBin: true.	aPage setProperty: #alwaysShowThumbnail toValue: true.	^ aPage! !"Postscript:"PasteUpMorph allInstancesDo:	[:aMorph | aMorph isPartsBin ifTrue: [aMorph openToDragNDrop: true]].!