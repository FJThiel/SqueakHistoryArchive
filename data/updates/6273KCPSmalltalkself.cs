'From Squeak3.8alpha of ''17 July 2004'' [latest update: #6272] on 29 September 2004 at 6:42:45 pm'!"Change Set:		KCPDate:			29 September 2004Author:			stéphane ducasseremove all the Smalltalk in the class SystemDictionary and replace them by self. Sounds like natural ...."!!SystemDictionary methodsFor: 'class names' stamp: 'sd 9/29/2004 18:39'!classNamed: className 	"className is either a class name or a class name followed by '	class'. Answer the class or metaclass it names"	| meta baseName baseClass |	(className endsWith: ' class')		ifTrue: [meta := true.			baseName := className copyFrom: 1 to: className size - 6]		ifFalse: [meta := false.			baseName := className].	baseClass := self				at: baseName asSymbol				ifAbsent: [^ nil].	meta		ifTrue: [^ baseClass class]		ifFalse: [^ baseClass]! !!SystemDictionary methodsFor: 'dictionary access' stamp: 'sd 9/29/2004 18:40'!environmentForCategory: catName 	"Default response for non-partitioned systems"	^ self! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:09'!condenseChanges	"Move all the changes onto a compacted sources file."	"Smalltalk condenseChanges"	| f oldChanges classCount |	f := FileStream fileNamed: 'ST80.temp'.	f header; timeStamp.	'Condensing Changes File...'		displayProgressAt: Sensor cursorPoint		from: 0		to: self classNames size		during: [:bar | 			classCount := 0.			self				allClassesDo: [:class | 					bar value: (classCount := classCount + 1).					class moveChangesTo: f.					class putClassCommentToCondensedChangesFile: f.					class class moveChangesTo: f]].	SmalltalkImage current lastQuitLogPosition: f position.	f trailer; close.	oldChanges := SourceFiles at: 2.	oldChanges close.	FileDirectory default deleteFileNamed: oldChanges name , '.old';		 rename: oldChanges name toBe: oldChanges name , '.old';		 rename: f name toBe: oldChanges name.	self setMacFileInfoOn: oldChanges name.	SourceFiles		at: 2		put: (StandardFileStream oldFileNamed: oldChanges name)! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:13'!condenseSources	"Move all the changes onto a compacted sources file."	"Smalltalk condenseSources"	| f classCount dir newVersionString |	Utilities fixUpProblemsWithAllCategory.	"The above removes any concrete, spurious '-- all --'	categories, which mess up the process."	dir := FileDirectory default.	newVersionString := FillInTheBlank request: 'Please designate the versionfor the new source code file...' initialAnswer: SmalltalkImage current sourceFileVersionString.	newVersionString		ifNil: [^ self].	newVersionString = SmalltalkImage current sourceFileVersionString		ifTrue: [^ self error: 'The new source file must not be the same as the old.'].	SmalltalkImage current sourceFileVersionString: newVersionString.	"Write all sources with fileIndex 1"	f := FileStream newFileNamed: SmalltalkImage current sourcesName.	f header; timeStamp.	'Condensing Sources File...'		displayProgressAt: Sensor cursorPoint		from: 0		to: self classNames size		during: [:bar | 			classCount := 0.			self				allClassesDo: [:class | 					bar value: (classCount := classCount + 1).					class						fileOutOn: f						moveSource: true						toFile: 1]].	f trailer; close.	"Make a new empty changes file"	SmalltalkImage current closeSourceFiles.	dir rename: SmalltalkImage current changesName toBe: SmalltalkImage current changesName , '.old'.	(FileStream newFileNamed: SmalltalkImage current changesName) header; timeStamp; close.	LastQuitLogPosition := 0.	self setMacFileInfoOn: SmalltalkImage current changesName.	self setMacFileInfoOn: SmalltalkImage current sourcesName.	SmalltalkImage current openSourceFiles.	self inform: 'Source files have been rewritten!!Check that all is well,and then save/quit.'! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:13'!makeExternalRelease	"Smalltalk makeExternalRelease"	(self confirm: SystemVersion current version , 'Is this the correct version designation?If not, choose no, and fix it.')		ifFalse: [^ self].	"Object classPool at: #DependentsFields"	self reclaimDependents.	Preferences enable: #mvcProjectsAllowed.	Preferences enable: #fastDragWindowForMorphic.	Browser initialize.	Undeclared isEmpty		ifFalse: [self halt].	ScriptingSystem deletePrivateGraphics.	#(#Helvetica #Palatino #Courier )		do: [:n | TextConstants				removeKey: n				ifAbsent: []].	(Utilities classPool at: #UpdateUrlLists) copy		do: [:pair | (pair first includesSubstring: 'Disney' caseSensitive: false)				ifTrue: [(Utilities classPool at: #UpdateUrlLists)						remove: pair]].	(ServerDirectory serverNames copyWithoutAll: #('UCSBCreateArchive' 'UIUCArchive' 'UpdatesExtUIUC' 'UpdatesExtWebPage' ))		do: [:sn | ServerDirectory removeServerNamed: sn].	self  garbageCollect.	self obsoleteClasses isEmpty		ifFalse: [self halt].	Symbol rehash.	self halt: 'Ready to condense changes or sources'! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:14'!makeInternalRelease	"Smalltalk makeInternalRelease"	(self confirm: SystemVersion current version , 'Is this the correct version designation?If not, choose no, and fix it.')		ifFalse: [^ self].	(Object classPool at: #DependentsFields) size > 1		ifTrue: [self halt].	Browser initialize.	Undeclared isEmpty		ifFalse: [self halt].	self garbageCollect.	self obsoleteClasses isEmpty		ifFalse: [self halt].	Symbol rehash.	self halt: 'Ready to condense changes'.	self condenseChanges! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:15'!makeSqueaklandRelease	"Smalltalk makeSqueaklandRelease"	self deprecated: 'use ReleaseBuilder instead'.	self makeSqueaklandReleasePhasePrepare; makeSqueaklandReleasePhaseStripping; makeSqueaklandReleasePhaseFinalSettings; makeSqueaklandReleasePhaseCleanup! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:15'!reclaimDependents	"No-opped due to weak dictionary in use"	self garbageCollect! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:15'!reconstructChanges	"Move all the changes and its histories onto another sources	file. "	"Smalltalk reconstructChanges"	| f oldChanges classCount |	f := FileStream fileNamed: 'ST80.temp'.	f header; timeStamp.	'Condensing Changes File...'		displayProgressAt: Sensor cursorPoint		from: 0		to: self classNames size		during: [:bar | 			classCount := 0.			self				allClassesDo: [:class | 					bar value: (classCount := classCount + 1).					class moveChangesWithVersionsTo: f.					class putClassCommentToCondensedChangesFile: f.					class class moveChangesWithVersionsTo: f]].	LastQuitLogPosition := f position.	f trailer; close.	oldChanges := SourceFiles at: 2.	oldChanges close.	FileDirectory default deleteFileNamed: oldChanges name , '.old';		 rename: oldChanges name toBe: oldChanges name , '.old';		 rename: f name toBe: oldChanges name.	self setMacFileInfoOn: oldChanges name.	SourceFiles		at: 2		put: (FileStream oldFileNamed: oldChanges name)! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:15'!reformatChangesToUTF8	"Smalltalk reformatChangesToUTF8"	| f oldChanges classCount |	f := FileStream fileNamed: 'ST80.temp'.	f converter: UTF8TextConverter new.	f header; timeStamp.	'Condensing Changes File...'		displayProgressAt: Sensor cursorPoint		from: 0		to: self classNames size		during: [:bar | 			classCount := 0.			self				allClassesDo: [:class | 					bar value: (classCount := classCount + 1).					class moveChangesTo: f.					class putClassCommentToCondensedChangesFile: f.					class class moveChangesTo: f]].	LastQuitLogPosition := f position.	f trailer; close.	oldChanges := SourceFiles at: 2.	oldChanges close.	FileDirectory default deleteFileNamed: oldChanges name , '.old';		 rename: oldChanges name toBe: oldChanges name , '.old';		 rename: f name toBe: oldChanges name.	self setMacFileInfoOn: oldChanges name.	SourceFiles		at: 2		put: (FileStream oldFileNamed: oldChanges name).	MultiByteFileStream codeConverterClass: UTF8TextConverter.	(SourceFiles at: 2)		converter: UTF8TextConverter new! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:15'!removeAllLineFeeds	"Smalltalk removeAllLineFeeds"	"Scan all methods for source code with lineFeeds.	Replaces all occurrences of <CR><LF> by <CR>, noted by	beep. Halts with a message if any other LFs are found."	| oldCodeString n crlf cr newCodeString oldStamp oldCategory m |	crlf := String with: Character cr with: Character lf.	cr := String with: Character cr.	self forgetDoIts.	'Scanning sources for LineFeeds.This will take a few minutes...'		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: [:bar | 			n := 0.			m := 0.			self systemNavigation				allBehaviorsDo: [:cls | cls selectors						do: [:selector | 							(n := n + 1) \\ 100 = 0								ifTrue: [bar value: n].							oldCodeString := (cls sourceCodeAt: selector) asString.							(oldCodeString indexOf: Character lf startingAt: 1)									> 0								ifTrue: [Beeper beep.									newCodeString := oldCodeString												copyReplaceAll: crlf												with: cr												asTokens: false.									(newCodeString indexOf: Character lf startingAt: 1)											> 0										ifTrue: [(self confirm: cls name , ' '														, (selector contractTo: 30) , 'has an isolated LineFeed (not part of CRLF).Shall I replace it?')												ifFalse: [self halt]].									oldStamp := Utilities												timeStampForMethod: (cls compiledMethodAt: selector).									oldCategory := cls whichCategoryIncludesSelector: selector.									cls										compile: newCodeString										classified: oldCategory										withStamp: oldStamp										notifying: nil.									m := m + 1]]]].	Transcript cr; show: m printString , ' methods stripped of LFs.'! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:15'!removeEmptyMessageCategories	"Smalltalk removeEmptyMessageCategories"	self garbageCollect.	(ClassOrganizer allInstances copyWith: SystemOrganization)		do: [:org | org removeEmptyCategories]! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:16'!testFormatter	"Smalltalk testFormatter"	"Reformats the source for every method in the system, and	then compiles that source and verifies that it generates	identical code. The formatting used will be either classic	monochrome or fancy polychrome, depending on the setting	of the preference #colorWhenPrettyPrinting."	| newCodeString methodNode oldMethod newMethod badOnes n |	badOnes := OrderedCollection new.	self forgetDoIts.	'Formatting all classes...'		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: [:bar | 			n := 0.			self systemNavigation				allBehaviorsDo: [:cls | "Transcript cr; show: cls name."					cls selectors						do: [:selector | 							(n := n + 1) \\ 100 = 0								ifTrue: [bar value: n].							newCodeString := cls compilerClass new										format: (cls sourceCodeAt: selector)										in: cls										notifying: nil										decorated: Preferences colorWhenPrettyPrinting.							methodNode := cls compilerClass new										compile: newCodeString										in: cls										notifying: nil										ifFail: [].							newMethod := methodNode generate: #(0 0 0 0 ).							oldMethod := cls compiledMethodAt: selector.							oldMethod = newMethod								ifFalse: [Transcript cr; show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection name: 'Formatter Discrepancies'! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 9/29/2004 18:16'!testFormatter2	"Smalltalk testFormatter2"	"Reformats the source for every method in the system, and	then verifies that the order of source tokens is unchanged.	The formatting used will be either classic monochrome or	fancy polychrome, depending on the setting of the preference	#colorWhenPrettyPrinting. "	| newCodeString badOnes n oldCodeString oldTokens newTokens |	badOnes := OrderedCollection new.	self forgetDoIts.	'Formatting all classes...'		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: [:bar | 			n := 0.			self systemNavigation				allBehaviorsDo: [:cls | "Transcript cr; show: cls name."					cls selectors						do: [:selector | 							(n := n + 1) \\ 100 = 0								ifTrue: [bar value: n].							oldCodeString := (cls sourceCodeAt: selector) asString.							newCodeString := cls compilerClass new										format: oldCodeString										in: cls										notifying: nil										decorated: Preferences colorWhenPrettyPrinting.							oldTokens := oldCodeString findTokens: Character separators.							newTokens := newCodeString findTokens: Character separators.							oldTokens = newTokens								ifFalse: [Transcript cr; show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection name: 'Formatter Discrepancies'! !!SystemDictionary methodsFor: 'memory space' stamp: 'sd 9/29/2004 18:16'!lowSpaceWatcher	"Wait until the low space semaphore is signalled, then take	appropriate actions."	| free |	self garbageCollectMost <= self lowSpaceThreshold		ifTrue: [self garbageCollect <= self lowSpaceThreshold				ifTrue: ["free space must be above threshold before					starting low space watcher"					^ Beeper beep]].	LowSpaceSemaphore := Semaphore new.	self primLowSpaceSemaphore: LowSpaceSemaphore.	self primSignalAtBytesLeft: self lowSpaceThreshold.	"enable low space interrupts"	LowSpaceSemaphore wait.	"wait for a low space condition..."	self primSignalAtBytesLeft: 0.	"disable low space interrupts"	self primLowSpaceSemaphore: nil.	LowSpaceProcess := nil.	"Note: user now unprotected until the low space watcher is	re-installed "	self memoryHogs isEmpty		ifFalse: [free := self bytesLeft.			self memoryHogs				do: [:hog | hog freeSomeSpace].			self bytesLeft > free				ifTrue: [^ self installLowSpaceWatcher]].	self isMorphic		ifTrue: [CurrentProjectRefactoring currentInterruptName: 'Space is low']		ifFalse: [ScheduledControllers interruptName: 'Space is low']! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'sd 9/29/2004 18:17'!handleUserInterrupt	Preferences cmdDotEnabled		ifTrue: [self isMorphic				ifTrue: [[CurrentProjectRefactoring currentInterruptName: 'User Interrupt'] fork]				ifFalse: [[ScheduledControllers interruptName: 'User Interrupt'] fork]]! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'sd 9/29/2004 18:17'!hasMorphic	"Answer whether the Morphic classes are available in the	system (they may have been stripped, such as by a call to	Smalltalk removeMorphic"	^ (self		at: #Morph		ifAbsent: [])		isKindOf: Class! !!SystemDictionary methodsFor: 'retrieving' stamp: 'sd 9/29/2004 18:17'!poolUsers	"Answer a dictionary of pool name -> classes that refer to it.	Also includes any globally know dictionaries (such as	Smalltalk, Undeclared etc) which although not strictly	accurate is potentially useful information"	"Smalltalk poolUsers"	| poolUsers pool refs |	poolUsers := Dictionary new.	self keys		do: [:k | "yes, using isKindOf: is tacky but for reflective code like			this it is very useful. If you really object you can:-			a) go boil your head.			b) provide a better answer.			your choice."			(((pool := self at: k) isKindOf: Dictionary)					or: [pool isKindOf: SharedPool class])				ifTrue: [refs := self systemNavigation allClasses								select: [:c | c sharedPools identityIncludes: pool]								thenCollect: [:c | c name].					refs						add: (self systemNavigation								allCallsOn: (self associationAt: k)).					poolUsers at: k put: refs]].	^ poolUsers! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:18'!abandonSources	"Smalltalk abandonSources"	"Replaces every method by a copy with the 4-byte source	pointer 	replaced by a string of all arg and temp names, followed by its	length. These names can then be used to inform the	decompiler. See stats below"	"wod 11/3/1998: zap the organization before rather than after	condensing changes."	| oldCodeString argsAndTemps oldMethods newMethods m bTotal bCount |	(self confirm: 'This method will preserve most temp names(up to about 400 characters) while allowingthe sources file to be discarded.-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning source code files, choose Yes.If you have any doubts, you may choose Noto back out with no harm done.')			== true		ifFalse: [^ self inform: 'Okay - no harm done'].	self forgetDoIts.	oldMethods := OrderedCollection new: CompiledMethod instanceCount.	newMethods := OrderedCollection new: CompiledMethod instanceCount.	bTotal := 0.	bCount := 0.	self systemNavigation		allBehaviorsDo: [:b | bTotal := bTotal + 1].	'Saving temp names for better decompilation...'		displayProgressAt: Sensor cursorPoint		from: 0		to: bTotal		during: [:bar | self systemNavigation				allBehaviorsDo: [:cl | 					"for test: (Array with: Arc with: Arc class) do:"					bar value: (bCount := bCount + 1).					cl selectors						do: [:selector | 							m := cl compiledMethodAt: selector.							m fileIndex > 0								ifTrue: [oldCodeString := cl sourceCodeAt: selector.									argsAndTemps := (cl compilerClass new												parse: oldCodeString												in: cl												notifying: nil) tempNames.									oldMethods addLast: m.									newMethods										addLast: (m copyWithTempNames: argsAndTemps)]]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	self systemNavigation		allBehaviorsDo: [:b | b zapOrganization].	self condenseChanges.	Preferences disable: #warnIfNoSourcesFile! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:18'!abandonTempNames	"Replaces every method by a copy with no source pointer or	encoded temp names."	"Smalltalk abandonTempNames"	| continue oldMethods newMethods n m |	continue := self confirm: '-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning all source code, hit Yes.If you have any doubts, hit No,to back out with no harm done.'.	continue		ifFalse: [^ self inform: 'Okay - no harm done'].	self forgetDoIts; garbageCollect.	oldMethods := OrderedCollection new.	newMethods := OrderedCollection new.	n := 0.	'Removing temp names to save space...'		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: [:bar | self systemNavigation				allBehaviorsDo: [:cl | cl selectors						do: [:sel | 							bar value: (n := n + 1).							m := cl compiledMethodAt: sel.							oldMethods addLast: m.							newMethods								addLast: (m copyWithTrailerBytes: #(0 ))]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	SmalltalkImage current closeSourceFiles.	self flag: #shouldUseAEnsureBlockToBeSureThatTheFileIsClosed.	"sd: 17 April 2003"	Preferences disable: #warnIfNoChangesFile.	Preferences disable: #warnIfNoSourcesFile! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:40'!computeImageSegmentation	"Smalltalk computeImageSegmentation"	"Here's how the segmentation works:	For each partition, we collect the classes involved, and also all	messages no longer used in the absence of this partition. We	start by computing a 'Miscellaneous' segment of all the	unused classes in the system as is."	| partitions unusedCandM newClasses expandedCandM |	partitions := Dictionary new.	unusedCandM := self unusedClassesAndMethodsWithout: {{}. {}}.	partitions at: 'Miscellaneous' put: unusedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'VMConstruction-*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'VMConstruction' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'ST80-*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'ST80' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Morphic-Games')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Games' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Morphic-Remote')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Nebraska' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | ((SystemOrganization categoriesMatching: 'Network-*')						copyWithoutAll: #('Network-Kernel' 'Network-Url' 'Network-Protocols' 'Network-ObjectSocket' ))						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := Smalltalk unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Network' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Balloon3D-*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Balloon3D' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'FFI-*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'FFI' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Genie-*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Genie' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Speech-*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Speech' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | #('Morphic-Components' )						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses copyWithoutAll: #(#ComponentLikeModel ).	expandedCandM := Smalltalk unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Components' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | #('Sound-Scores' 'Sound-Interface' )						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses , #(#WaveletCodec #Sonogram #FWT #AIFFFileReader ).	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Sound' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | ((SystemOrganization categoriesMatching: 'Tools-*')						copyWithout: 'Tools-Menus')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses copyWithoutAll: #(#Debugger #Inspector #ContextVariablesInspector #SyntaxError #ChangeSet #ChangeRecord #ClassChangeRecord #ChangeList #VersionsBrowser ).	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Tools' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Balloon-MMFlash*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	newClasses := newClasses , #(#ADPCMCodec ).	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'Flash' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Balloon-TrueType*')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'TrueType' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	newClasses := Array				streamContents: [:s | (SystemOrganization categoriesMatching: 'Graphics-Files')						do: [:cat | (SystemOrganization superclassOrder: cat)								do: [:c | s nextPut: c name]]].	expandedCandM := self unusedClassesAndMethodsWithout: {unusedCandM first asArray , newClasses. unusedCandM second}.	partitions at: 'GraphicFiles' put: {(expandedCandM first copyWithoutAll: unusedCandM first) addAll: newClasses;			 yourself. expandedCandM second copyWithoutAll: unusedCandM second}.	unusedCandM := expandedCandM.	#(#AliceConstants 'Balloon3D' #B3DEngineConstants 'Balloon3D' #WonderlandConstants 'Balloon3D' #FFIConstants 'FFI' #KlattResonatorIndices 'Speech' )		pairsDo: [:poolName :part | (partitions at: part) first add: poolName].	partitions		keysDo: [:k | k = 'Miscellaneous'				ifFalse: [(partitions at: 'Miscellaneous') first removeAllFoundIn: (partitions at: k) first]].	^ partitions! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:40'!discard3D	"Smalltalk discard3D"	"Discard 3D Support."	self discardWonderland.	self		removeKey: #B3DEngineConstants		ifAbsent: [].	self		at: #InterpolatingImageMorph		ifPresent: [:cls | cls removeFromSystem].	SystemOrganization removeCategoriesMatching: 'Graphics-FXBlt'.	SystemOrganization removeCategoriesMatching: 'Graphics-External'.	SystemOrganization removeCategoriesMatching: 'Balloon3D-*'.	SystemOrganization removeCategoriesMatching: 'Graphics-Tools-*'.	Color removeSelector: #asB3DColor.	Form removeSelector: #asTexture.	Morph removeSelector: #asTexture.	Morph removeSelector: #mapPrimitiveVertex:.	Morph removeSelector: #installAsWonderlandTextureOn:.	FileList removeSelector: #open3DSFile.	Point removeSelector: #@.	self		at: #BalloonCanvas		ifPresent: [:cc | cc removeSelector: #render:].	Stream removeSelector: #asVRMLStream.	SketchMorph removeSelector: #drawInterpolatedImage:on:.	SketchMorph removeSelector: #generateInterpolatedForm.	self		at: #B3DEnginePlugin		ifPresent: [:cls | cls				withAllSubclassesDo: [:each | each removeFromSystem]].	DataStream initialize! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:20'!discardFFI	"Discard the complete foreign function interface.	NOTE: Recreates specialObjectsArray to prevent obsolete	references. Has to specially remove external structure	hierarchy before ExternalType"	self		at: #ExternalStructure		ifPresent: [:cls | (ChangeSet superclassOrder: cls withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	SystemOrganization removeCategoriesMatching: 'FFI-*'.	self recreateSpecialObjectsArray.	"Remove obsolete refs"	ByteArray removeSelector: #asExternalPointer.	ByteArray removeSelector: #pointerAt:! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:21'!discardMVC	"After suitable checks, strip out much of MVC from the system"	"Smalltalk discardMVC"	| keepers |	self flag: #bob.	"zapping projects"	self isMorphic		ifFalse: [self inform: 'You must be in a Morphic project to discard MVC.'.			^ self].	"Check that there are no MVC Projects"	(Project allProjects			allSatisfy: [:proj | proj isMorphic])		ifFalse: [(self confirm: 'Would you like a chance to remove yourMVC projects in an orderly manner?')				ifTrue: [^ self].			(self confirm: 'If you wish, I can remove all MVC projects,make this project be the top project, and placeall orphaned sub-projects of MVC parents here.Would you like be to do thisand proceed to discard all MVC classes?')				ifTrue: [self zapMVCprojects]				ifFalse: [^ self]].	self reclaimDependents.	"Remove old Paragraph classes and View classes."	self		at: #Paragraph		ifPresent: [:paraClass | (ChangeSet superclassOrder: paraClass withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	self		at: #View		ifPresent: [:viewClass | (ChangeSet superclassOrder: viewClass withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	"Get rid of ParagraphEditor's ScrollController dependence"	#(#markerDelta #viewDelta #scrollAmount #scrollBar #computeMarkerRegion )		do: [:sel | ParagraphEditor removeSelector: sel].	ParagraphEditor compile: 'updateMarker'.	"Reshape to MouseMenuController"	Compiler		evaluate: (ParagraphEditor definition copyReplaceAll: 'ScrollController' with: 'MouseMenuController').	"Get rid of all Controller classes not needed by	ParagraphEditor and ScreenController"	keepers := TextMorphEditor withAllSuperclasses copyWith: ScreenController.	(ChangeSet superclassOrder: Controller withAllSubclasses asArray)		reverseDo: [:c | (keepers includes: c)				ifFalse: [c removeFromSystem]].	SystemOrganization removeCategoriesMatching: 'ST80-Paths'.	SystemOrganization removeCategoriesMatching: 'ST80-Symbols'.	SystemOrganization removeCategoriesMatching: 'ST80-Pluggable Views'.	self removeClassNamed: 'FormButtonCache'.	self removeClassNamed: 'WindowingTransformation'.	self removeClassNamed: 'ControlManager'.	self removeClassNamed: 'DisplayTextView'.	ScheduledControllers := nil.	Undeclared removeUnreferencedKeys.	SystemOrganization removeEmptyCategories.	Symbol rehash! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:21'!discardMorphic	"Discard Morphic.	Updated for 2.8 TPR"	"Smalltalk discardMorphic"	"Check that we are in an MVC Project and that there are no	Morphic Projects	or WorldMorphViews."	| subs |	Flaps clobberFlapTabList.	self discardFlash.	self discardTrueType.	subs := OrderedCollection new.	Morph		allSubclassesWithLevelDo: [:c :i | subs addFirst: c]		startingLevel: 0.	subs		do: [:c | c removeFromSystem].	self removeClassNamed: #CornerRounder.	self		removeKey: #BalloonEngineConstants		ifAbsent: [].	SystemOrganization removeCategoriesMatching: 'Balloon-*'.	SystemOrganization removeCategoriesMatching: 'Morphic-*'.	SystemOrganization removeSystemCategory: 'Graphics-Transformations'.	SystemOrganization removeSystemCategory: 'ST80-Morphic'.	ScriptingSystem := nil! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:23'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently	used."	"Smalltalk discardOddsAndEnds"	SystemOrganization removeSystemCategory: 'System-Serial Port'.	SystemOrganization removeSystemCategory: 'ST80-Symbols'.	SystemOrganization removeSystemCategory: 'Tools-File Contents Browser'.	SystemOrganization removeSystemCategory: 'System-Compression'.	SystemOrganization removeSystemCategory: 'Tools-Explorer'.	SystemOrganization removeSystemCategory: 'System-Digital Signatures'.	Form removeSelector: #edit.	self		at: #FormView		ifPresent: [:c | c compile: 'defaultControllerClass  ^ NoController' classified: 'controller access'].	self removeClassNamed: #FormEditorView.	self removeClassNamed: #FormEditor.	SystemOrganization removeSystemCategory: 'ST80-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	self removeClassNamed: #FormButtonCache.	self removeClassNamed: #FormMenuController.	self removeClassNamed: #FormMenuView.	self removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	SystemDictionary removeSelector: #viewImageImports.	ScreenController removeSelector: #viewImageImports.	self removeClassNamed: #FormHolderView.	self removeClassNamed: #FormInspectView.	"experimental hand-drawn character recoginizer:"	ParagraphEditor removeSelector: #recognizeCharacters.	ParagraphEditor removeSelector: #recognizer:.	ParagraphEditor removeSelector: #recognizeCharactersWhileMouseIn:.	self removeClassNamed: #CharRecog.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	self removeClassNamed: #ObjectViewer.	self removeClassNamed: #ObjectTracer.	"miscellaneous classes:"	self removeClassNamed: #Array2D.	self removeClassNamed: #DriveACar.	self removeClassNamed: #EventRecorder.	self removeClassNamed: #FindTheLight.	self removeClassNamed: #PluggableTest.	self removeClassNamed: #SystemMonitor.	self removeClassNamed: #DocLibrary.	self removeClassNamed: #ProtocolBrowser.	self removeClassNamed: #ObjectExplorerWrapper.	self removeClassNamed: #HierarchyBrowser.	self removeClassNamed: #LinkedMessageSet.	self removeClassNamed: #ObjectExplorer.	self removeClassNamed: #PackageBrowser.	self removeClassNamed: #AbstractHierarchicalList.	self removeClassNamed: #ChangeList.	self removeClassNamed: #VersionsBrowser.	self removeClassNamed: #ChangeRecord.	self removeClassNamed: #SelectorBrowser.	self removeClassNamed: #HtmlFileStream.	self removeClassNamed: #CrLfFileStream.	self removeClassNamed: #FXGrafPort.	self removeClassNamed: #FXBlt.	self		at: #SampledSound		ifPresent: [:c | c initialize].	#(#Helvetica #Palatino #Courier #ComicBold #ComicPlain )		do: [:k | TextConstants				removeKey: k				ifAbsent: []].	Preferences		setButtonFontTo: (StrikeFont familyName: #NewYork size: 12).	Preferences		setFlapsFontTo: (StrikeFont familyName: #NewYork size: 12).	#(#GZipConstants #ZipConstants #KlattResonatorIndices )		do: [:k | self				removeKey: k				ifAbsent: []]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:23'!discardSUnit	"Smalltalk discardSUnit"	| oc |	oc := OrderedCollection new.	(self		at: #TestCase		ifAbsent: [^ self])		allSubclassesWithLevelDo: [:c :i | oc addFirst: c]		startingLevel: 0.	oc		do: [:c | c removeFromSystem].	SystemOrganization removeCategoriesMatching: 'SUnit-*'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:23'!discardSoundAndSpeech	"NOTE: This leaves 26 references to obsolete classes, one in	SystemDictionary class>>initialize, one in	ImageSegment>>restoreEndianness, one in DataStream	class>>initialize and 23 in Morphic and Flash classes."	SystemOrganization removeCategoriesMatching: 'Sound-*'.	SystemOrganization removeCategoriesMatching: 'Speech-*'.	self removeClassNamed: #KlattSynthesizerPlugin.	self removeSelector: #(#DigitalSignatureAlgorithm #randomBitsFromSoundInput: ).	self removeSelector: #(#Project #beep ).	Preferences setPreference: #soundsEnabled toValue: false! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:23'!discardSoundSynthesis	"Discard the sound synthesis facilities, and the methods and	classes that use it. This also discards MIDI."	self discardMIDI.	self discardSpeech.	SystemOrganization removeCategoriesMatching: 'Sound-Interface'.	self		at: #GraphMorph		ifPresent: [:graphMorph | #(#playOnce #readDataFromFile )				do: [:sel | graphMorph removeSelector: sel]].	self		at: #TrashCanMorph		ifPresent: [:trashMorph | 			trashMorph class removeSelector: #samplesForDelete.			trashMorph class removeSelector: #samplesForMouseEnter.			trashMorph class removeSelector: #samplesForMouseLeave].	SystemOrganization removeCategoriesMatching: 'Sound-Synthesis'.	SystemOrganization removeCategoriesMatching: 'Sound-Scores'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:24'!discardWonderland	"Smalltalk discardWonderland"	"Discard 3D Support."	self		at: #Wonderland		ifPresent: [:cls | cls removeActorPrototypesFromSystem].	self		removeKey: #WonderlandConstants		ifAbsent: [].	self		removeKey: #AliceConstants		ifAbsent: [].	SystemOrganization removeCategoriesMatching: 'Balloon3D-Wonderland*'.	SystemOrganization removeCategoriesMatching: 'Balloon3D-Alice*'.	SystemOrganization removeCategoriesMatching: 'Balloon3D-Pooh*'.	SystemOrganization removeCategoriesMatching: 'Balloon3D-UserObjects'.	self		at: #VRMLWonderlandBuilder		ifPresent: [:cls | cls removeFromSystem]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:24'!lastRemoval	"Smalltalk lastRemoval"	"Some explicit removals - add unwanted methods keeping	other methods."	| oldDicts newDicts |	#(#abandonSources )		do: [:each | self class removeSelector: each].	"Get rid of all unsent methods."	[self removeAllUnSentMessages > 0] whileTrue.	"Shrink method dictionaries."	self garbageCollect.	oldDicts := MethodDictionary allInstances.	newDicts := Array new: oldDicts size.	oldDicts		withIndexDo: [:d :index | newDicts at: index put: d rehashWithoutBecome].	oldDicts elementsExchangeIdentityWith: newDicts.	oldDicts := newDicts := nil.	self		allClassesDo: [:c | c zapOrganization].	SystemOrganization := nil.	ChangeSet current initialize! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:25'!majorShrink	"Undertake a major shrinkage of the image.	This method throws out lots of the system that is not needed	for, eg, operation in a hand-held PC. majorShrink produces a	999k image in Squeak 2.8	Smalltalk majorShrink; abandonSources; lastRemoval"	| oldDicts newDicts |	self isMorphic		ifTrue: [^ self error: 'You can only run majorShrink in MVC'].	Project current isTopProject		ifFalse: [^ self error: 'You can only run majorShrink in the top project'].	(self confirm: 'All sub-projects will be deleted from this image.You should already have made a backup copy,or you must save with a different name after shrinking.Shall we proceed to discard most of the content in this image?')		ifFalse: [^ self inform: 'No changes have been made.'].	"Remove all projects but the current one. - saves 522k"	ProjectView		allInstancesDo: [:pv | pv controller closeAndUnscheduleNoTerminate].	Project current setParent: Project current.	MorphWorldView		allInstancesDo: [:pv | pv topView controller closeAndUnscheduleNoTerminate].	self		at: #Wonderland		ifPresent: [:cls | cls removeActorPrototypesFromSystem].	Player freeUnreferencedSubclasses.	MorphicModel removeUninstantiatedModels.	Utilities classPool at: #ScrapsBook put: nil.	Utilities zapUpdateDownloader.	ProjectHistory currentHistory initialize.	Project rebuildAllProjects.	"Smalltalk discardVMConstruction."	"755k"	self discardSoundSynthesis.	"544k"	self discardOddsAndEnds.	"227k"	self discardNetworking.	"234k"	"Smalltalk discard3D."	"407k"	self discardFFI.	"33k"	self discardMorphic.	"1372k"	Symbol rehash.	"40k"	"Above by itself saves about 4,238k"	"Remove references to a few classes to be deleted, so that they	won't leave obsolete versions around."	ChangeSet class compile: 'defaultName		^ ''Changes'' ' classified: 'initialization'.	ScreenController removeSelector: #openChangeManager.	ScreenController removeSelector: #exitProject.	ScreenController removeSelector: #openProject.	ScreenController removeSelector: #viewImageImports.	"Now delete various other classes.."	SystemOrganization removeSystemCategory: 'Graphics-Files'.	SystemOrganization removeSystemCategory: 'System-Object Storage'.	self removeClassNamed: #ProjectController.	self removeClassNamed: #ProjectView.	"Smalltalk removeClassNamed: #Project."	self removeClassNamed: #Environment.	self removeClassNamed: #Component1.	self removeClassNamed: #FormSetFont.	self removeClassNamed: #FontSet.	self removeClassNamed: #InstructionPrinter.	self removeClassNamed: #ChangeSorter.	self removeClassNamed: #DualChangeSorter.	self removeClassNamed: #EmphasizedMenu.	self removeClassNamed: #MessageTally.	StringHolder class removeSelector: #originalWorkspaceContents.	CompiledMethod removeSelector: #symbolic.	RemoteString removeSelector: #makeNewTextAttVersion.	Utilities class removeSelector: #absorbUpdatesFromServer.	self removeClassNamed: #PenPointRecorder.	self removeClassNamed: #Path.	self removeClassNamed: #Base64MimeConverter.	"Smalltalk removeClassNamed: #EToySystem. Dont bother - its	very small and used for timestamps etc"	self removeClassNamed: #RWBinaryOrTextStream.	self removeClassNamed: #AttributedTextStream.	self removeClassNamed: #WordNet.	self removeClassNamed: #SelectorBrowser.	TextStyle		allSubInstancesDo: [:ts | ts				newFontArray: (ts fontArray						copyFrom: 1						to: (2 min: ts fontArray size))].	ListParagraph initialize.	PopUpMenu initialize.	StandardSystemView initialize.	ChangeSet noChanges.	ChangeSorter classPool		at: #AllChangeSets		put: (OrderedCollection with: ChangeSet current).	SystemDictionary removeSelector: #majorShrink.	[self removeAllUnSentMessages > 0]		whileTrue: [Smalltalk unusedClasses				do: [:c | (Smalltalk at: c) removeFromSystem]].	SystemOrganization removeEmptyCategories.	self		allClassesDo: [:c | c zapOrganization].	self garbageCollect.	'Rehashing method dictionaries . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: MethodDictionary instanceCount		during: [:bar | 			oldDicts := MethodDictionary allInstances.			newDicts := Array new: oldDicts size.			oldDicts				withIndexDo: [:d :index | 					bar value: index.					newDicts at: index put: d rehashWithoutBecome].			oldDicts elementsExchangeIdentityWith: newDicts].	oldDicts := newDicts := nil.	Project rebuildAllProjects.	ChangeSet current initialize.	"seems to take more than one try to gc all the weak refs in	SymbolTable "	3		timesRepeat: [self garbageCollect.			Symbol compactSymbolTable]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:26'!removeNormalCruft	"Remove various graphics, uniclasses, references. Caution: see	comment at bottom of method"	"Smalltalk removeNormalCruft"	ScriptingSystem stripGraphicsForExternalRelease.	ScriptingSystem spaceReclaimed.	References keys		do: [:k | References removeKey: k].	self classNames		do: [:cName | #('Player' 'CardPlayer' 'Component' 'WonderlandActor' 'MorphicModel' 'PlayWithMe' )				do: [:superName | ((cName ~= superName								and: [cName beginsWith: superName])							and: [(cName allButFirst: superName size)									allSatisfy: [:ch | ch isDigit]])						ifTrue: [self removeClassNamed: cName]]].	self		at: #Wonderland		ifPresent: [:cls | cls removeActorPrototypesFromSystem].	ChangeSet current clear	"Caution: if any worlds in the image happen to have uniclass	players associated with them, running this method would	likely compromise their functioning and could cause errors,	especially if the uniclass player of the current world had any	scripts set to ticking. If that happens to you somehow, you will	probably want to find a way to reset the offending world's	player to be an UnscriptedCardPlayer, or perhaps nil"! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:26'!removeSelector: descriptor 	"Safely remove a selector from a class (or metaclass). If the	class or the method doesn't exist anymore, never mind and	answer nil.	This method should be used instead of 'Class removeSelector:	#method' to omit global class references."	| class sel |	class := self				at: descriptor first				ifAbsent: [^ nil].	(descriptor size > 2			and: [descriptor second == #class])		ifTrue: [class := class class.			sel := descriptor third]		ifFalse: [sel := descriptor second].	^ class removeSelector: sel! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:41'!writeImageSegmentsFrom: segmentDictionary withKernel: kernel 	"segmentDictionary is associates segmentName ->	{classNames. methodNames},	and kernel is another set of classNames determined to be	essential. Add a partition, 'Secondary' with everything not in	partitions and not in the kernel.	Then write segments based on this partitioning of classes."	"First, put all classes that are in no other partition, and not in	kernel into a new partition called 'Secondary'. Also remove	any classes in kernel from putative partitions."	| metas secondary dups segDict overlaps classes n symbolHolder |	secondary := self classNames asIdentitySet.	segmentDictionary		keysDo: [:segName | 			secondary removeAllFoundIn: (segmentDictionary at: segName) first.			(segmentDictionary at: segName) first removeAllFoundIn: kernel].	secondary removeAllFoundIn: kernel.	secondary removeAllFoundIn: #(#PseudoContext #TranslatedMethod #Utilities #Preferences #OutOfScopeNotification #FakeClassPool #CurrentProjectRefactoring #BlockCannotReturn #FormSetFont #ExternalSemaphoreTable #NetNameResolver #ScreenController #InterpreterPlugin #Command #WeakSet ).	FileDirectory		allSubclassesDo: [:c | secondary				remove: c name				ifAbsent: []].	segmentDictionary at: 'Secondary' put: {secondary. {}}.	"Now build segDict giving className -> segName, and report	any duplicates."	dups := Dictionary new.	segDict := IdentityDictionary new: 3000.	segmentDictionary		keysDo: [:segName | (segmentDictionary at: segName) first				do: [:className | 					(segDict includesKey: className)						ifTrue: [(dups includesKey: className)								ifFalse: [dups at: className put: Array new].							dups at: className put: (dups at: className)									, {segName}].					segDict at: className put: segName]].	dups size > 0		ifTrue: [dups inspect.			^ self error: 'Duplicate entries'].	"Then for every class in every partition, make sure that neither	it nor any of its superclasses are in any other partition. If they	are, enter them in a dictionary of overlaps.	If the dictionary is not empty, then stop and report it."	overlaps := Dictionary new.	segmentDictionary		keysDo: [:segName | 			classes := (segmentDictionary at: segName) first asArray						collect: [:k | self at: k].			classes				do: [:c | (c isKindOf: Class)						ifTrue: [c withAllSuperclasses								do: [:sc | 									n := segDict												at: sc name												ifAbsent: [segName].									n ~= segName										ifTrue: [n = 'Secondary'												ifTrue: [(segmentDictionary at: 'Secondary') first														remove: sc name														ifAbsent: []]												ifFalse: [overlaps														at: c name														put: (c withAllSuperclasses																collect: [:cc | segDict																		associationAt: cc name																		ifAbsent: [cc name -> 'Kernel']])]]]]]].	overlaps size > 0		ifTrue: [overlaps inspect.			^ self error: 'Superclasses in separate segments'].	"If there are no overlaps, then proceed to write the partitioned	classes."	symbolHolder := Symbol allInstances.	"Hold onto Symbols with strong pointers, 	so they will be in outPointers"	segmentDictionary		keysDo: [:segName | Utilities				informUser: segName				during: [classes := (segmentDictionary at: segName) first asArray								collect: [:k | self at: k].					metas := classes								select: [:c | c isKindOf: Class]								thenCollect: [:c | c class].					(ImageSegment new copyFromRoots: classes , metas sizeHint: 0) extract; writeToFile: segName]].	symbolHolder! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 9/29/2004 18:26'!zapMVCprojects	"Smalltalk zapMVCprojects"	| window |	self flag: #bob.	"zapping projects"	self garbageCollect.	"So allInstances is precise"	Project		allSubInstancesDo: [:proj | proj isTopProject				ifTrue: [proj isMorphic						ifFalse: ["Root project is MVC -- we must become							the root"							CurrentProjectRefactoring currentBeParentToCurrent]]				ifFalse: [proj parent isMorphic						ifFalse: [proj isMorphic								ifTrue: ["Remove Morphic projects from									MVC 									views"									"... and add them back here."									window := (SystemWindow labelled: proj name)												model: proj.									window										addMorph: (ProjectViewMorph on: proj)										frame: (0 @ 0 corner: 1.0 @ 1.0).									window openInWorld.									CurrentProjectRefactoring currentBeParentTo: proj]].					proj isMorphic						ifFalse: ["Remove MVC projects from Morphic							views "							Project deletingProject: proj]]]! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'sd 9/29/2004 18:27'!currentProjectDo: aBlock 	"So that code can work after removal of Projects"	self		at: #Project		ifPresent: [:projClass | aBlock value: projClass current]! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'sd 9/29/2004 18:30'!writeRecentToFile	"Smalltalk writeRecentToFile"	| numChars aDirectory aFileName |	aDirectory := FileDirectory default.	aFileName := Utilities				keyLike: 'squeak-recent.01'				withTrailing: '.log'				satisfying: [:aKey | (aDirectory includesKey: aKey) not].	numChars := ChangeList getRecentLocatorWithPrompt: 'copy logged source as far back as...'.	numChars		ifNotNil: [self writeRecentCharacters: numChars toFileNamed: aFileName]! !!SystemDictionary methodsFor: 'special objects' stamp: 'sd 9/29/2004 18:30'!compactClassesArray	"Smalltalk compactClassesArray"	"Return the array of 31 classes whose instances may be	represented compactly"	^ self specialObjectsArray at: 29! !!SystemDictionary methodsFor: 'special objects' stamp: 'sd 9/29/2004 18:31'!recreateSpecialObjectsArray	"Smalltalk recreateSpecialObjectsArray"	"The Special Objects Array is an array of object pointers used	by the	Squeak virtual machine. Its contents are critical and	unchecked, so don't even think of playing here unless you	know what you are doing."	| newArray |	newArray := Array new: 50.	"Nil false and true get used throughout the interpreter"	newArray at: 1 put: nil.	newArray at: 2 put: false.	newArray at: 3 put: true.	"This association holds the active process (a ProcessScheduler)"	newArray		at: 4		put: (self associationAt: #Processor).	"Numerous classes below used for type checking and	instantiation"	newArray at: 5 put: Bitmap.	newArray at: 6 put: SmallInteger.	newArray at: 7 put: String.	newArray at: 8 put: Array.	newArray at: 9 put: Smalltalk.	newArray at: 10 put: Float.	newArray at: 11 put: MethodContext.	newArray at: 12 put: BlockContext.	newArray at: 13 put: Point.	newArray at: 14 put: LargePositiveInteger.	newArray at: 15 put: Display.	newArray at: 16 put: Message.	newArray at: 17 put: CompiledMethod.	newArray		at: 18		put: (self specialObjectsArray at: 18).	"(low space Semaphore)"	newArray at: 19 put: Semaphore.	newArray at: 20 put: Character.	newArray at: 21 put: #doesNotUnderstand:.	newArray at: 22 put: #cannotReturn:.	newArray at: 23 put: nil.	"*unused*"	"An array of the 32 selectors that are compiled as special	bytecodes, paired alternately with the number of arguments	each takes."	newArray at: 24 put: #(#+ 1 #- 1 #< 1 #> 1 #<= 1 #>= 1 #= 1 #~= 1 #* 1 #/ 1 #\\ 1 #@ 1 #bitShift: 1 #// 1 #bitAnd: 1 #bitOr: 1 #at: 1 #at:put: 2 #size 0 #next 0 #nextPut: 1 #atEnd 0 #== 1 #class 0 #blockCopy: 1 #value 0 #value: 1 #do: 1 #new 0 #new: 1 #x 0 #y 0 ).	"An array of the 255 Characters in ascii order."	newArray		at: 25		put: ((0 to: 255)				collect: [:ascii | Character value: ascii]).	newArray at: 26 put: #mustBeBoolean.	newArray at: 27 put: ByteArray.	newArray at: 28 put: Process.	"An array of up to 31 classes whose instances will have	compact headers"	newArray at: 29 put: self compactClassesArray.	newArray		at: 30		put: (self specialObjectsArray at: 30).	"(delay Semaphore)"	newArray		at: 31		put: (self specialObjectsArray at: 31).	"(user interrupt Semaphore)"	"Prototype instances that can be copied for fast initialization"	newArray		at: 32		put: (Float new: 2).	newArray		at: 33		put: (LargePositiveInteger new: 4).	newArray at: 34 put: Point new.	newArray at: 35 put: #cannotInterpret:.	"Note: This must be fixed once we start using context	prototypes"	newArray		at: 36		put: (self specialObjectsArray at: 36).	"(MethodContext new: CompiledMethod fullFrameSize)."	newArray at: 37 put: nil.	newArray		at: 38		put: (self specialObjectsArray at: 38).	"(BlockContext new: CompiledMethod fullFrameSize)."	newArray at: 39 put: Array new.	"array of objects referred to by external code"	newArray at: 40 put: PseudoContext.	newArray at: 41 put: TranslatedMethod.	"finalization Semaphore"	newArray		at: 42		put: ((self specialObjectsArray at: 42)				ifNil: [Semaphore new]).	newArray at: 43 put: LargeNegativeInteger.	"External objects for callout.	Note: Written so that one can actually completely remove the	FFI."	newArray		at: 44		put: (self				at: #ExternalAddress				ifAbsent: []).	newArray		at: 45		put: (self				at: #ExternalStructure				ifAbsent: []).	newArray		at: 46		put: (self				at: #ExternalData				ifAbsent: []).	newArray		at: 47		put: (self				at: #ExternalFunction				ifAbsent: []).	newArray		at: 48		put: (self				at: #ExternalLibrary				ifAbsent: []).	newArray at: 49 put: #aboutToReturn:through:.	newArray at: 50 put: #run:with:in:.	"Now replace the interpreter's reference in one atomic	operation"	self specialObjectsArray become: newArray! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:29'!endianness	"What endian-ness is the current hardware? The String '1234'	will be stored into a machine word. On BigEndian machines	(the Mac), $1 will be the high byte if the word. On LittleEndian	machines (the PC), $4 will be the high byte."	"Smalltalk endianness"	| bytes word blt |	self deprecated: 'use SmalltalkImage current isLittleEndian instead'.	bytes := ByteArray withAll: #(0 0 0 0 ).	"(1 2 3 4) or (4 3 2 1)"	word := WordArray with: 16909060.	blt := (BitBlt				toForm: (Form new hackBits: bytes))				sourceForm: (Form new hackBits: word).	blt combinationRule: Form over.	"store"	blt sourceY: 0;		 destY: 0;		 height: 1;		 width: 4.	blt sourceX: 0;		 destX: 0.	blt copyBits.	"paste the word into the bytes"	bytes first = 1		ifTrue: [^ #big].	bytes first = 4		ifTrue: [^ #little].	self error: 'Ted is confused'! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:32'!extraVMMemory	"Answer the current setting of the 'extraVMMemory' VM	parameter. See the comment in extraVMMemory: for details."	self deprecated: 'Use SmalltalkImage current extraVMMemory'.	^ self vmParameterAt: 23! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:32'!extraVMMemory: extraBytesToReserve 	"Request that the given amount of extra memory be reserved	for use by the virtual machine to leave extra C heap space	available for things like plugins, network and file buffers, and	so on. This request is stored when the image is saved and	honored when the image is next started up. Answer the	previous value of this parameter."	self deprecated: 'Use SmalltalkImage current extraVMMemory:'.	extraBytesToReserve < 0		ifTrue: [self error: 'VM memory reservation must be non-negative'].	^ self vmParameterAt: 23 put: extraBytesToReserve! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:33'!obsoleteBehaviors	"Smalltalk obsoleteBehaviors inspect"	"Find all obsolete behaviors including meta classes"	| obs |	self deprecated: 'Use SmalltalkNavigation default obsoleteBehaviors'.	obs := OrderedCollection new.	self garbageCollect.	self systemNavigation		allObjectsDo: [:cl | (cl isBehavior					and: [cl isObsolete])				ifTrue: [obs add: cl]].	^ obs asArray! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:33'!obsoleteClasses	"Smalltalk obsoleteClasses inspect"	"NOTE: Also try inspecting comments below"	| obs c |	self deprecated: 'Use SystemNavigation default obsoleteClasses'.	obs := OrderedCollection new.	self garbageCollect.	Metaclass		allInstancesDo: [:m | 			c := m soleInstance.			(c ~~ nil					and: ['AnOb*' match: c name asString])				ifTrue: [obs add: c]].	^ obs asArray"Likely in a ClassDict or Pool...	(Association allInstances select: [:a | (a value isKindOf: Class)	and: ['AnOb*' match: a value name]]) asArra	"	"Obsolete class refs or super pointer in last lit of a method...	| n l found |	Smalltalk browseAllSelect:	[:m | found _ false.	1 to: m numLiterals do:	[:i | (((l _ m literalAt: i) isMemberOf: Association)	and: [(l value isKindOf: Behavior)	and: ['AnOb*' match: l value name]])	ifTrue: [found _ true]].	found	"! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:33'!pointersTo: anObject except: objectsToExclude 	"Find all occurrences in the system of pointers to the argument	anObject. Remove objects in the exclusion list from the	results. "	| results anObj |	self deprecated: 'Use PointerFinder pointersTo: anObject except: objectsToExclude'.	self garbageCollect.	"big collection shouldn't grow, so it's contents array is always	the same"	results := OrderedCollection new: 1000.	"allObjectsDo: is expanded inline to keep spurious	method and block contexts out of the results"	anObj := self someObject.	[0 == anObj]		whileFalse: [anObj isInMemory				ifTrue: [(anObj pointsTo: anObject)						ifTrue: ["exclude the results collector and							contexts in call chain"							(anObj ~~ results collector									and: [anObj ~~ objectsToExclude											and: [anObj ~~ thisContext													and: [anObj ~~ thisContext sender															and: [anObj ~~ thisContext sender sender]]]])								ifTrue: [results add: anObj]]].			anObj := anObj nextObject].	objectsToExclude		do: [:obj | results				removeAllSuchThat: [:el | el == obj]].	^ results asArray! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:34'!recompileAllFrom: firstName 	"Recompile all classes, starting with given name."	self deprecated: 'Use Compiler recompileAllFrom: firstName'.	self forgetDoIts.	self		allClassesDo: [:class | class name >= firstName				ifTrue: [Transcript show: class name;						 cr.					class compileAll]			"Smalltalk recompileAllFrom: 'AAABodyShop'."]! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:34'!saveImageSegments	| haveSegs oldImageSegDir newImageSegDir |	self deprecated: 'Use SmalltalkImage current saveImageSegments'.	haveSegs := false.	self		at: #ImageSegment		ifPresent: [:theClass | (haveSegs := theClass instanceCount ~= 0)				ifTrue: [oldImageSegDir := theClass segmentDirectory]].	haveSegs		ifTrue: [self				at: #ImageSegment				ifPresent: [:theClass | 					newImageSegDir := theClass segmentDirectory.					"create the folder"					oldImageSegDir fileNames						do: [:theName | 							| imageSegmentName | 							"copy all segment files"							imageSegmentName := oldImageSegDir pathName , FileDirectory slash , theName.							newImageSegDir copyFileWithoutOverwriteConfirmationNamed: imageSegmentName toFileNamed: theName]]]! !!SystemDictionary methodsFor: 'deprecated' stamp: 'sd 9/29/2004 18:35'!testDecompiler	"Smalltalk testDecompiler"	"Decompiles the source for every method in the system, and	then compiles that source and verifies that it generates (and	decompiles to) identical code. This currently fails in a number	of places because some different patterns (esp involving	conditionals where the first branch returns) decompile the	same. "	| methodNode oldMethod newMethod badOnes oldCodeString n |	self deprecated: 'Have a look at DecompilerTests'.	badOnes := OrderedCollection new.	self forgetDoIts.	'Decompiling all classes...'		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: [:bar | 			n := 0.			self systemNavigation				allBehaviorsDo: [:cls | "Transcript cr; show: cls name."					cls selectors						do: [:selector | 							(n := n + 1) \\ 100 = 0								ifTrue: [bar value: n].							oldMethod := cls compiledMethodAt: selector.							oldCodeString := (cls decompilerClass new										decompile: selector										in: cls										method: oldMethod) decompileString.							methodNode := cls compilerClass new										compile: oldCodeString										in: cls										notifying: nil										ifFail: [].							newMethod := methodNode generate: #(0 0 0 0 ).							oldCodeString = (cls decompilerClass new										decompile: selector										in: cls										method: newMethod) decompileString								ifFalse: [Transcript cr; show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection name: 'Decompiler Discrepancies'! !!SystemDictionary reorganize!('accessing' organization)('class names' classNamed: classNames flushClassNameCache forgetClass:logged: hasClassNamed: removeClassNamed: renameClass:as: renameClassNamed:as:)('dictionary access' associationAtOrAbove:ifAbsent: associationOrUndeclaredAt: at:put: atOrAbove:ifAbsent: atOrBelow:ifAbsent: environmentForCategory: includesKeyOrAbove: kernelCategories scopeFor:from:envtAndPathIfFound:)('housekeeping' cleanOutUndeclared compressSources condenseChanges condenseSources forgetDoIts makeExternalRelease makeInternalRelease makeSqueaklandRelease reclaimDependents reconstructChanges reformatChangesToUTF8 removeAllLineFeeds removeEmptyMessageCategories testFormatter testFormatter2 verifyChanges)('memory space' bytesLeft bytesLeft: bytesLeftString createStackOverflow garbageCollect garbageCollectMost installLowSpaceWatcher lowSpaceThreshold lowSpaceWatcher lowSpaceWatcherProcess memoryHogs okayToProceedEvenIfSpaceIsLow primBytesLeft primLowSpaceSemaphore: primSignalAtBytesLeft: primitiveGarbageCollect signalLowSpace useUpMemory useUpMemoryWithArrays useUpMemoryWithContexts useUpMemoryWithTinyObjects)('miscellaneous' exitToDebugger handleUserInterrupt hasMorphic logError:inContext:to: m17nVersion nihongoVersion setMacFileInfoOn: verifyMorphicAvailability)('objects from disk' objectForDataStream: storeDataOn:)('printing' printElementsOn:)('retrieving' allClasses allClassesDo: poolUsers)('shrinking' abandonSources abandonTempNames cleanUpUndoCommands computeImageSegmentation discard3D discardDiscards discardFFI discardFlash discardMIDI discardMVC discardMorphic discardNetworking discardOddsAndEnds discardSUnit discardSoundAndSpeech discardSoundSynthesis discardSpeech discardTrueType discardWonderland lastRemoval majorShrink presumedSentMessages removeAllUnSentMessages removeNormalCruft removeSelector: reportClassAndMethodRemovalsFor: unusedClasses unusedClassesAndMethodsWithout: writeImageSegmentsFrom:withKernel: zapAllOtherProjects zapMVCprojects)('snapshot and quit' add:toList:after: addToShutDownList: addToShutDownList:after: addToStartUpList: addToStartUpList:after: isMorphic processShutDownList: processStartUpList: quitPrimitive removeFromShutDownList: removeFromStartUpList: send:toClassesNamedIn:with: setGCParameters shutDown shutDownSound snapshotEmbeddedPrimitive snapshotPrimitive unbindExternalPrimitives)('sources, change log' copyright currentChangeSetString currentProjectDo: externalizeSources forceChangesToDisk internalizeChangeLog internalizeSources recover: writeRecentCharacters:toFileNamed: writeRecentToFile)('special objects' clearExternalObjects compactClassesArray externalObjects hasSpecialSelector:ifTrueSetByte: recreateSpecialObjectsArray registerExternalObject: specialNargsAt: specialObjectsArray specialSelectorAt: specialSelectorSize specialSelectors unregisterExternalObject:)('copying' assureUniClass veryDeepCopyWith: vocabularyDemanded)('deprecated' aboutThisSystem assureStartupStampLogged browseObsoleteMethodReferences changeImageNameTo: changesName clearProfile closeSourceFiles datedVersion dumpProfile endianness extraVMMemory extraVMMemory: fullNameForChangesNamed: fullNameForImageNamed: getFileNameFromUser getSystemAttribute: getVMParameters imageName imageName: imagePath isBigEndian isLittleEndian lastQuitLogPosition lastUpdateString listBuiltinModule: listBuiltinModules listLoadedModule: listLoadedModules logChange: obsoleteBehaviors obsoleteClasses obsoleteMethodReferences openSourceFiles osVersion platformName platformSubtype pointersTo: pointersTo:except: pointersToItem:of: profile: readDocumentFile recompileAllFrom: removeClassFromSystem:logged: saveAs saveAsEmbeddedImage saveAsNewVersion saveChangesInFileNamed: saveImageInFileNamed: saveImageSegments saveSession setPlatformPreferences snapshot:andQuit: snapshot:andQuit:embedded: sourcesName startProfiling stopProfiling swapBytesIn:from:to: systemInformationString testDecompiler timeStamp: unloadModule: version vmParameterAt: vmParameterAt:put: vmPath vmVersion)('ui' inspectGlobals)('*Refactory-RBAddonsReasonable')('image, changes name' primImageName primImageName: primVmPath)!