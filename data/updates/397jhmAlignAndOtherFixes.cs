'From Squeak 2.2 of Sept 23, 1998 on 10 November 1998 at 2:02:29 pm'!"Change Set:		jhmAlignAndOtherFixesDate:			10 November 1998Author:			John MaloneyFixes Alignment morph to keep track of fractional widths sothat, for example, browser buttons don't leave little gaps.Other fixes include:  a. fixes to forkAt: and dateAndTimeFromSeconds: from the list  b. a slightly different space tallying facility (produces a collection     for analysis, rather than printing to a file)  c. set buffer size in MIDISynth example  d. show one-pixel inter-note gaps in PianoRoll  e. facility for removing even the compressed temp     names from an image when every byte counts"!!AlignmentMorph methodsFor: 'private' stamp: 'jm 11/10/1998 13:14'!extraSpacePerMorph	| spaceFillingMorphs spaceNeeded extra |	spaceFillingMorphs _ 0.	spaceNeeded _ 2 * (inset + borderWidth).	orientation = #horizontal ifTrue: [		submorphs do: [:m |			spaceNeeded _ spaceNeeded + (m minWidth max: minCellSize).			(m isAlignmentMorph and: [m hResizing = #spaceFill])				ifTrue: [spaceFillingMorphs _ spaceFillingMorphs + 1]].		extra _ (bounds width - spaceNeeded) max: 0.	] ifFalse: [		submorphs do: [:m |			spaceNeeded _ spaceNeeded + (m minHeight max: minCellSize).			(m isAlignmentMorph and: [m vResizing = #spaceFill])				ifTrue: [spaceFillingMorphs _ spaceFillingMorphs + 1]].		extra _ (bounds height - spaceNeeded) max: 0].	(submorphs size <= 1 or: [spaceFillingMorphs <= 1]) ifTrue: [^ extra].	^ extra asFloat / spaceFillingMorphs! !!AlignmentMorph methodsFor: 'private' stamp: 'jm 11/10/1998 13:33'!fixLayout	| extraPerMorph fractionalExtra fractionAccumulator nextPlace extra space |	extraPerMorph _ self extraSpacePerMorph asFloat.	fractionalExtra _ extraPerMorph fractionPart.	extraPerMorph _ extraPerMorph truncated.	orientation = #horizontal		ifTrue: [nextPlace _ bounds left + inset + borderWidth]		ifFalse: [nextPlace _ bounds top + inset + borderWidth].	fractionAccumulator _ 0.0.	submorphs do: [:m |		fractionAccumulator _ fractionAccumulator + fractionalExtra.		fractionAccumulator > 0.5			ifTrue: [				extra _ extraPerMorph + 1.				fractionAccumulator _ fractionAccumulator - 1.0]			ifFalse: [extra _ extraPerMorph].		space _ self placeAndSize: m at: nextPlace padding: extra.		nextPlace _ nextPlace + space].! !!BlockContext methodsFor: 'scheduling' stamp: 'jm 11/9/1998 10:16'!forkAt: priority 	"Create and schedule a Process running the code in the receiver at the given priority. Answer the newly created process."	| forkedProcess |	forkedProcess _ self newProcess.	forkedProcess priority: priority.	^ forkedProcess resume! !!ClassDescription methodsFor: 'private' stamp: 'jm 11/1/1998 11:47'!spaceUsed	"Answer a rough estimate of number of bytes used by this class and its metaclass. Does not include space used by class variables."	| space method |	space _ 0.	self selectorsDo: [:sel |		space _ space + 16.  "dict and org'n space"		method _ self compiledMethodAt: sel.		space _ space + (method size + 6 "hdr + avg pad").		method literals do: [:lit |			(lit isMemberOf: Array) ifTrue: [space _ space + ((lit size + 1) * 4)].			(lit isMemberOf: Float) ifTrue: [space _ space + 12].			(lit isMemberOf: String) ifTrue: [space _ space + (lit size + 6)].			(lit isMemberOf: LargeNegativeInteger) ifTrue: [space _ space + ((lit size + 1) * 4)].			(lit isMemberOf: LargePositiveInteger) ifTrue: [space _ space + ((lit size + 1) * 4)]]].	(self isMemberOf: Metaclass)		ifTrue: [^ space]		ifFalse: [^ space + self class spaceUsed].! !!MIDISynth class methodsFor: 'examples' stamp: 'jm 11/10/1998 13:42'!example	"Here's one way to run the MIDI synth. It will get a nice Morphic UI later. Click the mouse to stop running it. (Mac users note: be sure you have MIDI interface adaptor plugged in, or Squeak will hang waiting for the external clock signal.)."	"MIDISynth example"	| portNum synth |	portNum _ SimpleMIDIPort inputPortNumFromUser.	portNum ifNil: [^ self].	SoundPlayer useShortBuffer.	synth _ MIDISynth new on:		(SimpleMIDIPort openOnPortNumber: portNum).	synth midiParser ignoreCommand: 224.  "filter out pitch bends"	1 to: 16 do: [:i |		(synth channel: i) instrument: 			 (AbstractSound soundNamed: 'oboe1')].	synth masterVolume: 0.2.	synth processMIDIUntilMouseDown.	SoundPlayer shutDown; initialize.  "revert to normal buffer size"! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'jm 10/20/1998 15:15'!addNotes	| visibleMorphs rightEdge topEdge track trackColor i done n nLeft nTop nRight evt m |	visibleMorphs _ OrderedCollection new: 500.	rightEdge _ self right - borderWidth.	topEdge _ self top + borderWidth + 1.	"Add ambient morphs first (they will be front-most)"		track _ score ambientTrack.		i _ indexInTrack at: indexInTrack size.		done _ i > track size.		[done | (i > track size)] whileFalse: [			evt _ track at: i.			nLeft _ self xForTime: evt time.			nLeft > rightEdge				ifTrue: [done _ true]				ifFalse: [m _ evt morph.						m position: nLeft @ (self bottom - borderWidth - m height).						visibleMorphs add: evt morph].			i _ i + 1].	"Then add note morphs"	1 to: score tracks size do: [:trackIndex |		track _ score tracks at: trackIndex.		trackColor _ colorForTrack at: trackIndex.		i _ indexInTrack at: trackIndex.		done _ i > track size.		[done | (i > track size)] whileFalse: [			n _ track at: i.			(n isNoteEvent and: [n midiKey >= lowestNote]) ifTrue: [				nLeft _ self xForTime: n time.				nLeft > rightEdge					ifTrue: [done _ true]					ifFalse: [						nTop _ (self yForMidiKey: n midiKey) - 1.						nTop > topEdge ifTrue: [							nRight _ nLeft + (n duration * timeScale) truncated - 1.							visibleMorphs add:								("PianoRollNoteMorph"  Morph  "<-- Change comment quotes here**"									newBounds: (nLeft@nTop corner: nRight@(nTop + 3))									color: trackColor)]]].			i _ i + 1]].	self changed.	self removeAllMorphs.	self addAllMorphs: visibleMorphs.! !!SoundPlayer class methodsFor: 'initialization' stamp: 'jm 11/10/1998 13:42'!useShortBuffer	"Experimental support for real-time MIDI input. This only works on platforms whose hardware allows very short buffer sizes. It has been tested on a Macintosh Powerbook G3."	"SoundPlayer useShortBuffer"	self shutDown.	BufferMSecs _ 15.	SoundPlayer		startPlayerProcessBufferSize: (BufferMSecs * SamplingRate) // 1000		rate: SamplingRate		stereo: Stereo.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'jm 11/1/1998 08:31'!abandonTempNames	"Replaces every method by a copy with no source pointer or encoded temp names."	"Smalltalk abandonTempNames"	 | continue oldMethods newMethods n m |	continue _ (self confirm:  '-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning all source code, hit Yes.If you have any doubts, hit No,to back out with no harm done.').	continue ifFalse: [^ self inform: 'Okay - no harm done'].	Smalltalk forgetDoIts; garbageCollect.	oldMethods _ OrderedCollection new.	newMethods _ OrderedCollection new.	n _ 0.	'Removing temp names to save space...'		displayProgressAt: Sensor cursorPoint		from: 0 to: CompiledMethod instanceCount		during: [:bar |			Smalltalk allBehaviorsDo: [:cl |				cl selectors do: [:sel |					bar value: (n _ n + 1).					m _ cl compiledMethodAt: sel.					oldMethods addLast: m.					newMethods addLast: (m copyWithTrailerBytes: #(0))]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	Smalltalk closeSourceFiles.	Preferences disable: #warnIfNoChangesFile.	Preferences disable: #warnIfNoSourcesFile.! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'jm 11/1/1998 11:38'!spaceForInstancesOf: aClass	"Answer the number of bytes consumed by all instances of the given class, including thier object headers."	| instCount isCompact instVarBytes bytesPerElement contentBytes headerBytes total |	instCount _ aClass instanceCount.	instCount = 0 ifTrue: [^ 0].	isCompact _ aClass indexIfCompact > 0.	instVarBytes _ aClass instSize * 4.	aClass isVariable		ifTrue: [			bytesPerElement _ aClass isBytes ifTrue: [1] ifFalse: [4].			total _ 0.			aClass allInstancesDo: [:inst |				contentBytes _ instVarBytes + (inst size * bytesPerElement).				headerBytes _					contentBytes > 255						ifTrue: [12]						ifFalse: [isCompact ifTrue: [4] ifFalse: [8]].				total _ total + headerBytes + contentBytes].			^ total]		ifFalse: [			headerBytes _				instVarBytes > 255					ifTrue: [12]					ifFalse: [isCompact ifTrue: [4] ifFalse: [8]].			^ instCount * (headerBytes + instVarBytes)].! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'jm 11/1/1998 11:45'!spaceTally	"Answer a collection of tuples representing the memory space (in bytes) consumed by the code and instances of each class in the system. The tuples have the form:	<class> <code size> <instance count> <space for instances>Code sizes do not currently report memory consumed by class variables. The arrays used to record these results consume a relatively insignificant amount of space."	"(Smalltalk spaceTally asSortedCollection: [:a :b | a last > b last]) asArray"	| results entry c |	"pre-allocate array of entries for results"	results _ OrderedCollection new: self size.	self do: [:cl |		(cl isKindOf: Class) ifTrue: [			entry _ Array new: 4.			entry at: 1 put: cl.			results add: entry]].	results _ results asArray.	Smalltalk garbageCollect.	1 to: results size do: [:i |		entry _ results at: i.		c _ entry at: 1.		entry at: 2 put: c spaceUsed.		entry at: 3 put: c instanceCount.		entry at: 4 put: (self spaceForInstancesOf: c).		Smalltalk garbageCollectMost].	^ results! !!Time class methodsFor: 'general inquiries' stamp: 'JZH 11/8/1998 13:03'!dateAndTimeFromSeconds: secondCount	^ Array		with: (Date fromSeconds: secondCount)		with: (Time fromSeconds: secondCount \\ 86400)! !SoundPlayer class removeSelector: #useLongBuffer!