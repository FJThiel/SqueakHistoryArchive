'From Squeak2.7alpha of 9 November 1999 [latest update: #1646] on 25 November 1999 at 11:58:17 pm'!WiWPasteUpMorph subclass: #MVCWiWPasteUpMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-WiW'!!MorphWorldView methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 09:19'!updateSubWindowExtent	"If this MorphWorldView represents a single Morphic SystemWindow, then update that window to match the size of the WorldView."	| numMorphs subWindow scrollBarWidth |	numMorphs _ model submorphs size.	"(Allow for the existence of an extra NewHandleMorph (for resizing).)"	(numMorphs = 0 or: [numMorphs > 2]) ifTrue: [^ self].	subWindow _ model submorphs					detect: [:ea | ea respondsTo: #label]					ifNone: [^ self].	superView label = subWindow label ifFalse: [^ self].	(Preferences valueOfFlag: #inboardScrollbars)		ifTrue: [scrollBarWidth _ 0]		ifFalse: [scrollBarWidth _ 14].	subWindow position: model position + (scrollBarWidth@-16).	"adjust for WiW changes"	subWindow extent: model extent - (scrollBarWidth@-16).	subWindow isActive ifFalse: [subWindow activate].! !!MorphWorldView class methodsFor: 'instance creation' stamp: 'RAA 11/25/1999 23:43'!convertToMVCWiWPasteUpMorph"MorphWorldView convertToMVCWiWPasteUpMorph"	| current w newModel topView |	Smalltalk isMorphic ifTrue: [^self inform: 'do this in MVC'].	current _ self allInstances select: [ :each | each model class == PasteUpMorph].	current do: [ :oldWorldView |		w _ MVCWiWPasteUpMorph newWorldForProject: nil.		w 			color: oldWorldView model color;			addAllMorphs: oldWorldView model submorphs.		newModel _ CautiousModel new initialExtent: 300@300.		topView _ self fullColorWhenInactive			ifTrue: [ColorSystemView new]			ifFalse: [StandardSystemView new].		topView			model: newModel;			label: oldWorldView topView label;			borderWidth: 1;			addSubView: (self new initialize model: w);			backgroundColor: w color.		topView controller openNoTerminate.		topView reframeTo: (oldWorldView topView expandedFrame expandBy:				(0@0 extent: (0@topView labelHeight))).		oldWorldView topView controller closeAndUnscheduleNoTerminate.	].	ScheduledControllers restore.	Processor terminateActive.! !!MorphWorldView class methodsFor: 'instance creation' stamp: 'RAA 11/24/1999 18:49'!openWorldWith: aMorph labelled: labelString	| w |	(w _ MVCWiWPasteUpMorph newWorldForProject: nil) addMorph: aMorph.	w startSteppingSubmorphsOf: aMorph.	self openOn: w		label: labelString		extent: w fullBounds extent + 2.! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'RAA 11/25/1999 23:34'!acceptDroppingMorph: aMorph event: evt	| slotSpecs aValue incomingName nameObtained |	self isWorldMorph		ifTrue:			["Add the given morph to this world and start stepping it if it wants to be."			self addMorphFront: aMorph.			(aMorph fullBounds intersects: ("0@0 extent:" self viewBox "extent")) ifFalse:				[self beep.  aMorph position: self bounds center]]		ifFalse:			[self privateAddMorph: aMorph atIndex: (self insertionIndexFor: aMorph).			self changed.			self layoutChanged].	incomingName _ aMorph knownName.	aMorph submorphsDo: [:m | (m isKindOf: HaloMorph) ifTrue: [m delete]].	self autoLineLayout ifTrue: [self fixLayout].	self isPartsBin		ifTrue:			[aMorph isPartsDonor: true.			aMorph stopSteppingSelfAndSubmorphs.			aMorph suspendEventHandler]		ifFalse:			[self world startSteppingSubmorphsOf: aMorph].	self presenter morph: aMorph droppedIntoPasteUpMorph: self.	slotSpecs _ aMorph slotSpecifications.  "A Fabrik component, for example.  Just a hook at this time"	slotSpecs size > 0 ifTrue:		[self assuredPlayer.		slotSpecs do:			[:tuple |				aValue _ aMorph initialValueFor: tuple first.				nameObtained _ self player addSlotNamedLike: tuple first withValue: aValue.				nameObtained ~= incomingName ifTrue:					[aMorph setNameTo: nameObtained]].		self player updateAllViewers]! !!WiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 10:11'!runStepMethods	"self == World ifFalse: [^ self]."		"not sure why this was here, but MVC doesn't like it"	super runStepMethods! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 10:09'!becomeTheActiveWorldWith: evt">>unused, but we may want some of this later	World == self ifTrue: [^ self].	self damageRecorder reset.	hostWindow setStripeColorsFrom: Color green.	World _ self.	self canvas: nil.	self viewBox: hostWindow panelRect.	self installFlaps.	self startSteppingSubmorphsOf: self.	self changed.	pendingEvent _ nil.	self primaryHand handleEvent: (evt setHand: self primaryHand).<<<"! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 23:57'!constrainingBounds	^self bounds 		"translateBy: self position negated"! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 09:12'!invalidRect: damageRect	self damageRecorder ifNotNil:		[self damageRecorder recordInvalidRect: damageRect]! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 09:20'!position: aPoint	"Change the position of this morph and and all of its submorphs."	| delta |	delta _ aPoint - bounds topLeft.	(delta x = 0 and: [delta y = 0]) ifTrue: [^ self].  "Null change"	self changed.	self privateFullMoveBy: delta.	self changed.! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/24/1999 18:59'!resetViewBox	| c |	(c _ self canvas) == nil ifTrue: [^self resetViewBoxForReal].	c form == Display ifFalse: [^self resetViewBoxForReal].	c origin = (0@0) ifFalse: [^self resetViewBoxForReal].	c clipRect extent = (self viewBox "intersect: parentWorld viewBox") extent ifFalse: [^self resetViewBoxForReal].			! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/24/1999 18:56'!resetViewBoxForReal	| newClip |	self viewBox ifNil: [^self].	newClip _ self viewBox "intersect: parentWorld viewBox".	self canvas: (		(FormCanvas on: Display)			copyOffset:  0@0			clipRect: newClip	)! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 10:09'!revertToParentWorldWithEvent: evt">>unused, but we may want some of this later	self damageRecorder reset.	World _ parentWorld.	World assuredCanvas.	World installFlaps.	owner changed.	hostWindow setStripeColorsFrom: Color red.	World restartWorldCycleWithEvent: evt.<<<"! !!MVCWiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/25/1999 10:10'!viewBox: newViewBox	| vb |	self damageRecorder reset.	"since we may have moved, old data no longer valid"	((vb _ self viewBox) == nil or: [vb ~= newViewBox])		ifTrue: [self canvas: nil].	worldState viewBox: newViewBox.	self bounds: newViewBox.		"works better here than simply storing into bounds"	self assuredCanvas.	"Paragraph problem workaround; clear selections to avoid screen droppings:"	self handsDo: [:h | h newKeyboardFocus: nil].	self fullRepaintNeeded.! !