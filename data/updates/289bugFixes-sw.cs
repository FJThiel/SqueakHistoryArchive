'From Squeak 2.2beta of Sept 11, 1998 on 21 September 1998 at 12:32:54 pm'!"Change Set:		bugFixes-swDate:			21 September 1998Author:			Scott WallaceFixes bug in EventHandler printOn: (could drop you into a debugger).Fixes bug in haloMorph doDup:with: -- halo's inner target was not getting set correctly.Fixes bug whereby you could be dropped into a debugger when carrying an animating object with the hand (bug occurred when the heading happened to be zero)." !!EventHandler methodsFor: 'access' stamp: 'sw 9/21/1998 12:07'!printOn: aStream	| aVal |	super printOn: aStream.	#('mouseDownSelector' 'mouseStillDownSelector' 'mouseUpSelector' 'mouseEnterSelector' 'mouseLeaveSelector' 'mouseEnterDraggingSelector' 'mouseLeaveDraggingSelector' 'keyStrokeSelector') do:		[:aName | (aVal _ self instVarNamed: aName) ~~ nil ifTrue:			[aStream nextPutAll: '; ', aName, '=', aVal]]! !!Morph methodsFor: 'structure' stamp: 'sw 9/21/1998 11:45'!ownerThatIsAHandOrA: aClass	"Return the first enclosing morph that is either a HandMorph or a kind of aClass, or nil if none"	| current |	current _ owner.	[current == nil] whileFalse:			[((current isKindOf: aClass) or: [current isHandMorph]) ifTrue: [^ current].			current _ current owner].	^ current! !!Morph methodsFor: 'structure' stamp: 'sw 9/21/1998 11:46'!owningHandOrPasteUpMorph	"Answer the closest containing morph that is a Hand or a PasteUp morph"	^ self ownerThatIsAHandOrA: PasteUpMorph! !!HaloMorph methodsFor: 'private' stamp: 'sw 9/21/1998 12:25'!doDup: evt with: dupHandle	"Ask hand to duplicate my target."	evt hand setArgument: target.	self setTarget: evt hand duplicateMorph.	self removeAllHandlesBut: dupHandle! !!HandMorph methodsFor: 'meta menu' stamp: 'sw 9/21/1998 11:54'!duplicateMorph	| newMorph aName usedNames |	newMorph _ argument veryDeepCopy.	(aName _ argument knownName) ~~ nil ifTrue:		[usedNames _ self world allKnownNames copyWith: aName.		newMorph setNameTo:			(Utilities keyLike: aName satisfying: [:f | (usedNames includes: f) not])].	self grabMorphFromMenu: newMorph.	newMorph player ifNotNil: [newMorph player startRunning].	^ newMorph! !!Player methodsFor: 'costume' stamp: 'sw 9/21/1998 11:50'!costume: aMorph	"Make aMorph be the receiver's current costume"	| itsBounds |	costume == aMorph ifTrue: [^ self].	costume ifNotNil:		[self rememberCostume: costume renderedMorph.		itsBounds _ costume bounds.		costume owningHandOrPasteUpMorph replaceSubmorph: costume topRendererOrSelf by: aMorph.		aMorph position: itsBounds origin.		aMorph actorState: costume actorState.		aMorph setNameTo: costume externalName].	aMorph player: self.	costume _ aMorph.	aMorph arrangeToStartStepping! !!Player methodsFor: 'costume' stamp: 'sw 9/21/1998 11:46'!renderedCostume: aMorph	"Make aMorph be the receiver's rendered costume; if flexing is currently in effect, make the new morph be flexed correspondingly"	| renderedMorph |	renderedMorph _ costume renderedMorph.	renderedMorph == aMorph ifTrue: [^ self].	self rememberCostume: renderedMorph.	costume isFlexMorph		ifTrue:			[costume adjustAfter:				[costume replaceSubmorph: renderedMorph by: aMorph]]		ifFalse:			[costume owningHandOrPasteUpMorph replaceSubmorph: costume topRendererOrSelf by: aMorph.			aMorph player: self.			aMorph actorState: costume actorState.			aMorph setNameTo: costume knownName.			costume _ aMorph]! !