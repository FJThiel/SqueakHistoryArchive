'From Squeak2.9alpha of 13 June 2000 [latest update: #3032] on 20 November 2000 at 7:49:14 pm'!"Change Set:		GameFixes-arDate:			20 November 2000Author:			Andreas RaabFixes for free cell and the same game."!!FreeCellBoard methodsFor: 'layout' stamp: 'ar 11/20/2000 19:08'!cardCell	^PlayingCardDeck new		layout: #pile; 		listDirection: #topToBottom;		enableDragNDrop;		color: Color transparent;		borderColor: (Color gray alpha: 0.5);		borderWidth: 2;		layoutBounds: (0@0 extent: PlayingCardMorph width @ PlayingCardMorph height);		yourself! !!FreeCellBoard methodsFor: 'layout' stamp: 'ar 11/20/2000 18:58'!stacksRow	| row |	row := (AlignmentMorph newRow)		vResizing: #spaceFill;		hResizing: #spaceFill;		wrapCentering: #topLeft;		cellPositioning: #topLeft;		color: Color transparent;		yourself.	self stacks do: [:stack |		row 			addMorphBack: AlignmentMorph newVariableTransparentSpacer;			addMorphBack: stack].	row addMorphBack: AlignmentMorph newVariableTransparentSpacer.	^row! !!PlayingCardDeck methodsFor: 'accessing' stamp: 'ar 11/20/2000 18:43'!layout: aSymbol	" #grid #pile #stagger"	layout _ aSymbol.	layout == #grid 		ifTrue:[self maxCellSize: SmallInteger maxVal].	layout == #pile 		ifTrue:[self maxCellSize: 0].	layout == #stagger 		ifTrue:[self maxCellSize: self staggerOffset].! !!PlayingCardDeck methodsFor: 'dropping/grabbing' stamp: 'ar 11/20/2000 19:00'!acceptDroppingMorph: aMorph event: evt	self addMorph: aMorph.	aMorph hasSubmorphs ifTrue:		["Just dropped a sub-deck of cards"		aMorph submorphs reverseDo: [:m | self addMorphFront: m]].	(target ~~ nil and: [cardDroppedSelector ~~ nil]) ifTrue: [target perform: cardDroppedSelector]! !!PlayingCardDeck methodsFor: 'initialization' stamp: 'ar 11/20/2000 19:11'!initialize	super initialize.	self cellPositioning: #topLeft.	self reverseTableCells: true.	self layout: #grid.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	borderWidth _ 0.	self layoutInset: 0.	stackingPolicy _ #stagger.	stackingOrder _ #ascending.	emptyDropPolicy _ #any.	self newSeed.	^self! !!SameGame methodsFor: 'initialization' stamp: 'ar 11/20/2000 19:48'!initialize	super initialize.	self listDirection: #topToBottom.	self wrapCentering: #center; cellPositioning: #topCenter.	self vResizing: #shrinkWrap.	self hResizing: #shrinkWrap.	self layoutInset: 3.	color _ Color lightGray.	self addMorph: self makeControls.	self addMorph: self board.	helpText _ nil.	self newGame.! !!SameGameBoard methodsFor: 'initialization' stamp: 'ar 11/20/2000 19:44'!initialize	super initialize.	target _ nil.	actionSelector _ #selection.	arguments _ #().	self layoutPolicy: nil.	self hResizing: #rigid.	self vResizing: #rigid.	borderWidth _ 2.	borderColor _ Color black.	rows _ self preferredRows.	columns _ self preferredColumns.	color _ Color gray.	palette _ (Color wheel: self preferredTileTypes + 1) asOrderedCollection.	flashColor _ palette removeLast.	flash _ false.	self extent: self protoTile extent * (columns @ rows).	self resetBoard.! !!SameGameBoard methodsFor: 'geometry' stamp: 'ar 11/20/2000 19:28'!extent: aPoint	"constrain the extent to be a multiple of the protoTile size during resizing"	super extent: (aPoint truncateTo: protoTile extent).	self adjustTiles.! !!SameGameBoard methodsFor: 'private' stamp: 'ar 11/20/2000 19:26'!adjustTiles	"add or remove new protoTile submorphs to fill out my new bounds"	| newSubmorphs requiredSubmorphs count r c |	columns _ self width // protoTile width.	rows _ self height // protoTile height.	requiredSubmorphs _ rows * columns.	newSubmorphs _ OrderedCollection new.	r _ 0.	c _ 0.	self submorphCount > requiredSubmorphs		ifTrue: "resized smaller -- delete rows or columns"			[count _ 0.			submorphs do:				[:m | 				count < requiredSubmorphs					ifTrue:						[m position: self position + (protoTile extent * (c @ r)).						m arguments: (Array with: c @ r).						newSubmorphs add: m]					ifFalse: [m privateOwner: nil].				count _ count + 1.				c _ c + 1.				c >= columns ifTrue: [c _ 0. r _ r + 1]]]		ifFalse: "resized larger -- add rows or columns"			[submorphs do:				[:m |				m position: self position + (self protoTile extent * (c @ r)).				m arguments: (Array with: c @ r).				newSubmorphs add: m.				c _ c + 1.				c >= columns ifTrue: [c _ 0. r _ r + 1]].			1 to: (requiredSubmorphs - self submorphCount) do:				[:m |				newSubmorphs add:					(protoTile copy						position: self position + (self protoTile extent * (c @ r));						actionSelector: #tileClickedAt:newSelection:;						arguments: (Array with: c @ r);						target: self;						privateOwner: self).				c _ c + 1.				c >= columns ifTrue: [c _ 0. r _ r + 1]]].	submorphs _ newSubmorphs asArray.! !SameGameBoard removeSelector: #xxxfixLayout!PlayingCardDeck removeSelector: #fixLayoutPile!PlayingCardDeck removeSelector: #fixLayoutStagger!PlayingCardDeck removeSelector: #xxxfixLayout!PlayingCardDeck removeSelector: #xxxminHeight!