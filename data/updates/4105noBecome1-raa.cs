'From Squeak3.1alpha of 5 February 2001 [latest update: #4104] on 30 May 2001 at 3:26:18 pm'!"Change Set:		noBecome1Date:			30 May 2001Author:			Bob ArningPart 1 of 2 - offer alternate ways to add and remove methods in MethodDictionary that do not involve #become:"!!MethodDictionary methodsFor: 'accessing' stamp: 'raa 5/30/2001 15:04'!at: key putNoBecome: value	"Set the value at key to be value. Answer the resulting MethodDictionary"	| index |	index _ self findElementOrNil: key.	(self basicAt: index) == nil		ifTrue: 			[tally _ tally + 1.			self basicAt: index put: key]		ifFalse:			[(array at: index) flushCache].	array at: index put: value.	^self fullCheckNoBecome! !!MethodDictionary methodsFor: 'removing' stamp: 'raa 5/30/2001 15:19'!removeKeyNoBecome: key	"The interpreter might be using this MethodDict while	this method is running!!  Therefore we perform the removal	in a copy, and then return the copy for subsequent installation"	| copy |	copy _ self copy.	copy removeDangerouslyKey: key ifAbsent: [^ self].	^copy! !!MethodDictionary methodsFor: 'private' stamp: 'raa 5/30/2001 15:03'!fullCheckNoBecome	"Keep array at least 1/4 free for decent hash behavior"	array size - tally < (array size // 4 max: 1)		ifTrue: [^self growNoBecome].	^self! !!MethodDictionary methodsFor: 'private' stamp: 'raa 5/30/2001 15:02'!growNoBecome 	| newSelf key |	newSelf _ self species new: self basicSize.  "This will double the size"	1 to: self basicSize do:		[:i | key _ self basicAt: i.		key == nil ifFalse: [newSelf at: key put: (array at: i)]].	^newSelf! !