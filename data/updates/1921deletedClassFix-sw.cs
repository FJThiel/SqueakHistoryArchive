'From Squeak2.8alpha of 13 January 2000 [latest update: #1919] on 8 March 2000 at 3:34:25 pm'!"Change Set:		deletedClassFix-swDate:			8 March 2000Author:			Scott WallaceFixes a couple of related bugs that can arise when a change set thinks it remembers a change to a method for a class that no longer exists."!!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 3/1/2000 15:47'!checkForUnsentMessages	| nameLine allChangedSelectors augList unsent messageList |	nameLine _ '"', self name, '"'.	allChangedSelectors _ Set new.	(augList _ self changedMessageListAugmented) do:		[:aChange |			MessageSet parse: aChange toClassAndSelector: [:cls :sel | cls ifNotNil: [allChangedSelectors add: sel]]].	unsent _ Smalltalk allUnSentMessagesIn: allChangedSelectors.	unsent size = 0		ifTrue:			[self inform: 'There are no unsent messages in change set', nameLine]		ifFalse:			[messageList _ augList select:				[:aChange |					MessageSet parse: aChange toClassAndSelector:						[:cls :sel | unsent includes: sel]].			Smalltalk browseMessageList: messageList name: 'Unsent messages in ', nameLine]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 3/1/2000 15:48'!browseMethodConflicts	"Check to see if any other change set also holds changes to any methods in the selected change set; if so, open a browser on all such."	| aList aClass aSelector |	aList _ myChangeSet changedMessageListAugmented select:		[:aChange |			MessageSet parse: aChange toClassAndSelector: [:cls :sel | aClass _ cls.  aSelector _ sel].			(ChangeSorter allChangeSetsWithClass: aClass selector: aSelector) size > 1].	aList size == 0 ifTrue: [^ self inform: 'No other change set has changesfor any method in this change set.'].		MessageSet openMessageList: aList name: 'Methods in "', myChangeSet name, '" that are also in other change sets (', aList size printString, ')'	! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 3/1/2000 15:48'!methodConflictsWithOtherSide	"Check to see if the change set on the other side shares any methods with the selected change set; if so, open a browser on all such."	| aList aClass aSelector other |	self checkThatSidesDiffer: [^ self].	other _ (parent other: self) changeSet.	aList _ myChangeSet changedMessageListAugmented select:		[:aChange |			MessageSet parse: aChange toClassAndSelector: [:cls :sel | aClass _ cls.  aSelector _ sel].			aClass notNil and: [(other methodChangesAtClass: aClass name) includesKey: aSelector]].	aList size == 0 ifTrue: [^ self inform: 'There are no methods that appearboth in this change set andin the one on the other side.'].		MessageSet openMessageList: aList name: 'Methods in "', myChangeSet name, '" that are also in ', other name,' (', aList size printString, ')'	! !!ChangeSorter class methodsFor: 'as yet unclassified' stamp: 'sw 2/21/2000 14:36'!allChangeSetsWithClass: class selector: selector	class ifNil: [^ #()].	^ self gatherChangeSets select: 		[:cs | (cs atSelector: selector class: class) ~~ #none]! !