'From Squeak 2.3 of January 14, 1999 on 6 April 1999 at 11:05:34 am'!"Change Set:		wnld-destroyDate:			6 April 1999Author:			Jeff PierceAdd animated destroy to WonderlandActors, and add undo support for undoing destroy and create"!Object subclass: #UndoChangeList	instanceVariableNames: 'changeList '	classVariableNames: ''	poolDictionaries: ''	category: 'Wonderland-Undo'!Object subclass: #UndoParentChange	instanceVariableNames: 'oldParent theActor '	classVariableNames: ''	poolDictionaries: ''	category: 'Wonderland-Undo'!!UndoChangeList commentStamp: 'jsp 4/5/1999 15:17' prior: 0!This class wraps a list of multiple undo actions, and tells them to undo all at the same time.!!UndoChangeList reorganize!('initialization' initialize setChangeList:)('adding changes' add:)('undoing' undoIt)!!UndoChangeList methodsFor: 'initialization' stamp: 'jsp 4/5/1999 15:18'!initialize	"Initialize this method by creating an empty change list."	changeList _ OrderedCollection new.! !!UndoChangeList methodsFor: 'initialization' stamp: 'jsp 4/5/1999 15:20'!setChangeList: aCollection	changeList _ aCollection.! !!UndoChangeList methodsFor: 'adding changes' stamp: 'jsp 4/5/1999 15:19'!add: someUndo	"Add an undoable to the change list"	changeList addLast: someUndo.! !!UndoChangeList methodsFor: 'undoing' stamp: 'jsp 4/5/1999 15:20'!undoIt	"Undo by undoing all the changes in the change list"	changeList do: [:undoable | undoable undoIt ].! !!UndoChangeList class methodsFor: 'instance creation' stamp: 'jsp 4/5/1999 15:18'!new	^ super new initialize.! !!UndoParentChange commentStamp: 'jsp 4/5/1999 15:54' prior: 0!This class implements undo for reparenting operations.!!UndoParentChange methodsFor: 'initialization' stamp: 'jsp 4/5/1999 15:55'!initializeWith: aParent for: anActor	"Initialize the instance variables."	oldParent _ aParent.	theActor _ anActor.! !!UndoParentChange methodsFor: 'undoing' stamp: 'jsp 4/5/1999 15:56'!undoIt	"Undo the parent change"	theActor reparentTo: oldParent.! !!UndoParentChange class methodsFor: 'instance creation' stamp: 'jsp 4/5/1999 15:56'!newFor: anActor from: theParent	"Create and initialize a new instance"	^ super new initializeWith: theParent for: anActor.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/5/1999 16:28'!makeActor	"Creates a new actor without any geometry"	| newActor |	newActor _ (WonderlandActor createFor: self).	"Add an undo item to undo the creation of this object"	myUndoStack push: (UndoAction new: [ newActor removeFromScene.						 					scriptEditor updateActorBrowser. ]).	^ newActor.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/5/1999 16:28'!makeActorFrom: filename	"Creates a new actor using the specification from the given file"	| aFile words line startSubstr index parent name texture meshFile matrix baseActor newActor |	myUndoStack closeStack.	words _ (filename findTokens: #.).	((words last) = 'mdl') ifTrue: [			aFile _ (CrLfFileStream readOnlyFileNamed: filename) ascii.			newActor _ OrderedCollection new.			[(aFile upTo: $() = ''] whileFalse: [					line _ aFile upTo: (Character cr).					"See if we're creating a new object"					(line beginsWith: 'MakeObject') ifTrue: [						words _ line findTokens: #,.						parent _ (words at: 2) withBlanksTrimmed.						name _ (((words at: 3) withBlanksTrimmed) findBetweenSubStrs: '"') at: 1.						"Now pull in the texture to use"						startSubstr _ name , '.SetTexture'.						[(line _ aFile upTo: (Character cr)) beginsWith: startSubstr] whileFalse: [].						texture _ (line findBetweenSubStrs: '"') at: 2.						texture _ (aFile directory pathName), '\', texture.						"Read the composite matrix to use"						startSubstr _ name , '._SetLocalTransformation'.						[(line _ aFile upTo: (Character cr)) beginsWith: startSubstr] whileFalse: [].						matrix _ B3DMatrix4x4 new.						words _ line findBetweenSubStrs: ',()'.						words removeAllSuchThat: [:str | str = ' '].						index _ words size.						4 to: 1 by: -1 do: [:i | 							4 to: 1 by: -1 do: [:j | matrix at: i at: j put: 										((words at: index) withBlanksTrimmed) asNumber.										   		index _ index - 1. ]. ].						1 to: 4 do: [:i | index _ matrix at: i at: 4.									   matrix at: i at: 4 put: (matrix at: 4 at: i).									   matrix at: 4 at: i put: index. ].						matrix a14: (matrix a14 negated).						"Read the mesh file to use"						startSubstr _ 'LoadGeometry'.						[(line _ aFile upTo: (Character cr)) beginsWith: startSubstr] whileFalse: [].						meshFile _ (line findBetweenSubStrs: '"') at: 2.						meshFile _ (aFile directory pathName), '\', meshFile.						"Now put together the name without periods"						words _ name findTokens: '.'.						name _ ''.						words do: [:part | name _ name , part ].						name at: 1 put: ((name at: 1) asLowercase).						words _ parent findTokens: '.'.						parent _ ''.						words do: [:part | parent _ parent , part ].						parent at: 1 put: ((parent at: 1) asLowercase).						"Now create the object"						(parent = 'none') ifTrue: [								baseActor _ WonderlandActor createFor: self.								baseActor setName: name.								baseActor setTexture: texture.								baseActor loadMeshFromFile: meshFile.								baseActor setComposite: matrix.								myNamespace at: name put: baseActor.												]  "end base actor creation"										ifFalse: [								newActor _ WonderlandActor createFor: self.								newActor setName: name.								newActor reparentTo: (baseActor getChildNamed: parent).								newActor becomePart.								newActor setTexture: texture.								newActor loadMeshFromFile: meshFile.								newActor setComposite: matrix.								myNamespace at: name put: newActor.												]. "end new actor with parent"															]. "end MakeObject parsing"											]. "end file parsing"			aFile close.			myUndoStack openStack.			"Add an undo item to undo the creation of this object"			myUndoStack push: (UndoAction new: [ baseActor removeFromScene.													scriptEditor updateActorBrowser.  ] ).			^ baseActor.								]. " end mdl file parsing"! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/5/1999 16:37'!makeCamera	"Add a new camera to the Wonderland"	| newCamera |	newCamera _ WonderlandCamera createFor: self.	newCamera setName: 'Camera'.	cameraList addLast: newCamera.	scriptEditor updateActorBrowser.	"Add an undo action to remove this camera"	myUndoStack push: (UndoAction new: [  cameraList remove: newCamera.											newCamera removeFromScene.											newCamera release.											scriptEditor updateActorBrowser ]).	^ newCamera.! !!WonderlandActor commentStamp: 'jsp 4/5/1999 12:17' prior: 0!The WonderlandActor class provides the basic behaviors for 3D objects.  These behaviors include (but are not limited to):- move- moveTo- turn- turnTo- roll- pointAt- place- resizeFor more details, see the Wonderlands ActiveEssay (coming soon to a theater near you). !!WonderlandActor methodsFor: 'accessing' stamp: 'jsp 4/5/1999 15:12'!getAllChildren	"Return all of this actor's children"	| children |	children _ OrderedCollection new.	myChildren do: [:child | children addLast: child.						children _ children , (child getAllChildren).					].	^ children.	! !!WonderlandActor methodsFor: 'accessing' stamp: 'jsp 4/5/1999 15:10'!getAllParts	"Return all of this actor's parts"	| parts |	parts _ OrderedCollection new.	myChildren do: [:child | (child isPart) ifTrue: [						parts addLast: child.						parts _ parts , (child getAllParts).												].					].	^ parts.	! !!WonderlandActor methodsFor: 'primitive behaviors' stamp: 'jsp 4/5/1999 14:33'!destroy	"Destroy the object over 1 second"	self destroy: 1.0.! !!WonderlandActor methodsFor: 'primitive behaviors' stamp: 'jsp 4/5/1999 15:59'!destroy: aDuration	"Implements the animated destroy of an actor.  This takes all the actors parts and spins them off in an arbitrary direction"	| anim allAnims undoActions childList partsList |	[ WonderlandVerifier VerifyDuration: aDuration ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser:				'Squeak could not determine the duration to use for destroying ' , myName , ' because ', msg.			^ nil ].	"The parameter checks out, so start the setup"	undoActions _ OrderedCollection new.	allAnims _ OrderedCollection new.	childList _ self getAllChildren.	partsList _ self getAllParts.	partsList addFirst: self.	"Do it for the top level object"	"We need to do this for every part"	childList do: [:child |		(child isPart)			ifTrue: [				"Make sure our POV gets reset on undo"				undoActions addFirst: (UndoPOVChange for: child from: (child getPointOfView)).								"Reparent parts"				undoActions addFirst: (UndoParentChange newFor: child from: (child getParent)).				child reparentTo: (myWonderland getScene).				"Create the animation for moving toward a random endpoint"				anim _ child moveTo: { (-2 to: 2) atRandom. (-2 to: 2) atRandom.							(-2 to: 2) atRandom} duration: aDuration style: abruptly.				anim stop.				anim setUndoable: false.				allAnims addLast: anim.				"Create the animation for spinning this object"				child turnToRightNow: { (0 to: 360) atRandom. (0 to: 360) atRandom.							(0 to: 360) atRandom} undoable: false.				anim _ child turn: left turns: aDuration speed: 1.				anim stop.				anim setUndoable: false.				allAnims addLast: anim.					]			ifFalse: [				"Make the non-part children point to this actor's parent"				undoActions addLast: (UndoParentChange newFor: child from: (child getParent)).				child reparentTo: (self getParent).					].					].	"Add an undo action to put the objects back in the scene"		undoActions addFirst: (UndoAction new:				[ partsList do: [:part | (myWonderland getScene) addChild: part ]]).	"Add the undo list to the stack"	(myWonderland getUndoStack) push: (UndoChangeList new setChangeList: undoActions).	"Create the animation to remove the parts from the scene and update the actor browser"	anim _ self do: [ partsList do: [:part | part removeFromScene ].					 myWonderland getEditor updateActorBrowser ].	"Now start our parallel animation"	anim _ myWonderland doInOrder: { myWonderland doTogether: allAnims. anim }.	anim setUndoable: false.! !!WonderlandActor methodsFor: 'private' stamp: 'jsp 4/5/1999 14:55'!removeFromScene	"Remove this actor from the scene."	"Break ties with the current parent"	myParent removeChild: self.! !