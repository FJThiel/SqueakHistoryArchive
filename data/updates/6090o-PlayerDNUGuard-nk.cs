'From Squeakland 3.8.5976 of 18 August 2004 [latest update: #242] on 21 August 2004 at 2:54:11 pm'!!Morph methodsFor: 'scripting' stamp: 'nk 8/21/2004 12:17'!triggerScript: aSymbol	"Have my player perform the script of the given name, which is guaranteed to exist."	^self assuredPlayer triggerScript: aSymbol! !!Player methodsFor: 'scripts-standard' stamp: 'nk 8/21/2004 12:15'!performScriptIfCan: scriptNameString 	"If I understand the given script name, perform it now"	^Symbol		hasInterned: scriptNameString		ifTrue: [:sym | (self class includesSelector: sym)				ifTrue: [self triggerScript: sym]]! !!Player methodsFor: 'scripts-standard' stamp: 'nk 8/21/2004 12:39'!tellAllSiblings: aMessageSelector	"Send the given message selector to all my sibling instances, but not to myself"	Symbol hasInterned: aMessageSelector		ifTrue: [ :sel |	self belongsToUniClass		ifTrue: [self class allSubInstancesDo:				[:anInstance | anInstance ~~ self ifTrue: [ anInstance triggerScript: sel ]]]		ifFalse:			[(sel ~~ #emptyScript) ifTrue:				[ScriptingSystem reportToUser: ('Cannot "tell" ', aMessageSelector, ' to ', self externalName) ]]]! !!Player methodsFor: 'scripts-standard' stamp: 'nk 8/21/2004 12:42'!tellSelfAndAllSiblings: aMessageSelector	"Send the given message selector to all my sibling instances, including myself"	Symbol hasInterned: aMessageSelector		ifTrue: [ :sel |	self belongsToUniClass		ifTrue: [self class allSubInstancesDo:				[:anInstance | anInstance triggerScript: sel ]]		ifFalse:			[(sel ~~ #emptyScript) ifTrue:				[ScriptingSystem reportToUser: ('Cannot "tell" ', aMessageSelector, ' to ', self externalName) ]]]! !!Player methodsFor: '*customevents-custom events' stamp: 'nk 8/21/2004 12:51'!triggerScript: aSymbol 	"Perform the script of the given name,	which is guaranteed to exist.	However, it's possible that the script may still result in a DNU,	which will be swallowed and reported to the Transcript."	^ [self perform: aSymbol]		on: MessageNotUnderstood		do: [:ex | 			ScriptingSystem				reportToUser: (String						streamContents: [:s | s nextPutAll: self externalName;								 nextPutAll: ': exception in script ';								 print: aSymbol;								 nextPutAll: ' : ';								 print: ex]).			ex return: self			"ex pass"]! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'nk 8/21/2004 12:16'!tryMe	"Evaluate the given script on behalf of the scripted object"	scriptName numArgs = 0		ifTrue:			[self playerScripted performScriptIfCan: scriptName ]! !!ScriptInstantiation methodsFor: 'running' stamp: 'nk 8/21/2004 12:08'!runIfClosing	| result |	(result _ status == #closing) ifTrue:		[player triggerScript: selector].	^ result! !!ScriptInstantiation methodsFor: 'running' stamp: 'nk 8/21/2004 12:08'!runIfOpening	| result |	(result _ status == #opening) ifTrue:		[player triggerScript: selector].	^ result! !!ScriptInstantiation methodsFor: 'running' stamp: 'nk 8/21/2004 12:07'!runIfTicking: nowTick 	| ticks rate |	status == #ticking ifFalse: [^self].	rate := self tickingRate.	ticks := (lastTick isNil or: [nowTick < lastTick]) 				ifTrue: 					[lastTick := nowTick.					1]				ifFalse: [((nowTick - lastTick) * rate / 1000) asInteger].	ticks <= 0 ifTrue: [^self].	"Scripts which have been out of the world and then return can have a huge number of ticks accumulated. A better fix would be to reset <lastTick> when a script leaves/enters the world. Also, if the system is falling behind, this attempt to catch up can result in falling further behind, leading to sluggish behavior and termination of ticking status. Whether the user really wants this catch up behavior needs to be determined (often she will not, I suspect) and better ways of doing it need to be found"	ticks := 1.	1 to: ticks * self frequency do: [:i | player triggerScript: selector].	lastTick := nowTick.	ticks > 10 		ifTrue: 			["check if we're lagging behind"			ticks <= ((Time millisecondClockValue - lastTick) * rate / 1000) asInteger 				ifTrue: 					["e.g., time to run script is higher than number of ticks"					self status: #paused.					self updateAllStatusMorphs]]! !!ScriptInstantiation methodsFor: 'status control' stamp: 'nk 8/21/2004 12:08'!fireOnce	"Run this script once"	player triggerScript: selector! !!ScriptableButton methodsFor: 'button' stamp: 'nk 8/21/2004 12:17'!doButtonAction	"The user has pressed the button.  Dispatch to the actual user script, if any."	scriptSelector ifNil: [^ super doButtonAction].	self pasteUpMorph performScriptIfCan: scriptSelector! !!UnscriptedPlayer methodsFor: 'error handling' stamp: 'nk 8/21/2004 11:44'!doesNotUnderstand: aMessage	"I do not attempt the special setters that Player does.	I merely ignore not-understood messages."	^nil! !