'From Squeak2.9alpha of 12 June 2000 [latest update: #2477] on 12 August 2000 at 10:11:55 pm'!"Change Set:		PostscriptTweaks4Date:			12 August 2000Author:			Dan Ingalls1.  Replaces all uses of gsave/grestore by the balanced method preserveStateDuring: [].2.  Saves a second pass in PostscriptCanvas>>drawPostscriptContext: by saving contents in a temp.3.  Fixes a stack imbalance in the display of ovals.Known remaining problems:1.  The fill of the topmost rectangle (print world or print a rectange to eps) fills outside the border, not inside.  All other rects seem OK.2.  stencil:at: doesn't seem to work.  If you want a test case try printing a ChineseCheckers board *before* the attached change to drawOn:.3.  Rectangle borders don't quite meet their fills properly.4.  Rounded corners don't display as rounded.5.  DropShadows don't appear with their proper color.6.  TextOnCurve does not work at all."!!ChineseCheckers methodsFor: 'display' stamp: 'di 8/10/2000 09:40'!drawOn: aCanvas 	| row1 row2 offset dotExtent |	super drawOn: aCanvas.   "Draw square board"	"Only draw rows in the clipping region"	dotExtent _ (self width//25) asPoint.	offset _ self pieceSize - dotExtent + 1 // 2.  "Offset of smaller dots rel to larger"	row1 _ (self boardLocAt: aCanvas clipRect topLeft) x max: 1.	row2 _ (self boardLocAt: aCanvas clipRect bottomRight) x min: board size.	row1 to: row2 do:		[:row | (board at: row) doWithIndex:			[:cell :i | cell ifNotNil:				[aCanvas fillOval: ((self cellPointAt: (row@i)) + offset extent: dotExtent)					color: (colors at: cell+1)]]]! !!Form methodsFor: 'postscript generation' stamp: 'di 8/12/2000 10:43'!printPostscript: aStream operator: operator	aStream	preserveStateDuring:		[:inner |		inner rectclip: (0 @ 0 extent: (width) @ (height)).		self setColorspaceOn: inner.		inner print:'[ '; cr;			print: '/ImageType 1'; cr;			print: '/ImageMatrix [1 0 0 1 0 0]'; cr;			print: '/MultipleDataSources false'; cr;			print: '/DataSource level1 { { currentfile '; write: self bytesPerRow;print: ' string readhexstring pop }} bind { currentfile /ASCIIHexDecode filter } ifelse'; cr;			print: '/Width '; write:self paddedWidth; cr;			print: '/Height '; write:self height; cr;			print: '/Decode '; print:self decodeArray;  cr;			print: '/BitsPerComponent '; write: self bitsPerComponent; cr;			print: 'makeDict '; print: operator; cr.		self depth <= 8 ifTrue: [self storeHexBitsOn: inner].		self depth = 16 ifTrue: [self store15To24HexBitsOn: inner].		self depth = 32 ifTrue: [self store32To24HexBitsOn: inner].		inner print: $>; cr.		inner cr].	aStream cr.! !!PostscriptCanvas methodsFor: 'misc canvas' stamp: 'di 8/12/2000 10:24'!preserveStateDuring: aBlock	| retval |	target preserveStateDuring:		[:innerTarget |		gstateStack addLast: currentFont.		gstateStack addLast: currentColor.		retval _ aBlock value: self.		currentColor _ gstateStack removeLast.		currentFont _ gstateStack removeLast].	^ retval! !!PostscriptCanvas methodsFor: 'drawing-general' stamp: 'di 8/12/2000 09:46'!fullDraw: aMorph	self comment: 'level: ' with: morphLevel.	morphLevel _ morphLevel+1.	self preserveStateDuring:		[:inner | inner setupGStateForMorph: aMorph.		aMorph fullDrawPostscriptOn: inner].	morphLevel _ morphLevel-1.	self comment: 'end morph: ' with: aMorph.	self comment: 'level: ' with: morphLevel.	! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'di 8/12/2000 09:42'!drawPostscriptContext: subCanvas	| contents |	(contents _ subCanvas contents) ifNil: [^ self].	^ target comment: ' sub-canvas start';		preserveStateDuring: [:inner | inner print: contents];		comment: ' sub-canvas stop'.	! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'di 8/12/2000 09:43'!fill: fillColor	fillColor isSolidFill		ifTrue: [self paint: fillColor asColor operation: #fill]		ifFalse: [self preserveStateDuring: [:inner | inner clip; drawGradient: fillColor]]! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'di 8/12/2000 09:44'!fill: fillColor andStroke: strokeColor	self preserveStateDuring: [:inner | inner fill: fillColor];		stroke: strokeColor.! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'di 8/12/2000 10:09'!stroke: strokeColor	strokeColor ifNil: [^ self].	strokeColor isSolidFill		ifTrue: [self paint: strokeColor asColor operation: #stroke]		ifFalse: [self preserveStateDuring: [:inner | inner strokepath; fill: strokeColor]]! !!PostscriptCanvas methodsFor: 'drawing support' stamp: 'di 8/12/2000 10:11'!transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock smoothing: cellSize	| retval |	self comment: 'drawing clipped ' with: aClipRect.	self comment: 'drawing transformed ' with: aDisplayTransform.     self preserveStateDuring:		[:inner | 		aClipRect ifNotNil: [inner rect: aClipRect; clip].		inner transformBy: aDisplayTransform.		retval _ aBlock value: inner].		self comment: 'end of drawing clipped ' with: aClipRect.	^ retval! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'di 8/12/2000 19:45'!fillOval: r color: c borderWidth: borderWidth borderColor: borderColor 	self preserveStateDuring:		[:inner |		inner oval: r;		setLinewidth: borderWidth;		fill: c andStroke: borderColor].			! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'di 8/12/2000 10:06'!image: aForm at: aPoint sourceRect: sourceRect rule: rule 	self preserveStateDuring:		[:inner | inner translate: aPoint + self origin.		target write: aForm]! !!PostscriptCanvas methodsFor: 'drawing' stamp: 'di 8/12/2000 10:07'!paragraph: para bounds: bounds color: c 	self comment:'paragraph with bounds: ' with:bounds.	self preserveStateDuring:		[:inner |		para displayOn: inner			using: (PostscriptCharacterScanner					scannerWithCanvas: self paragraph: para bounds: bounds)			at: bounds topLeft]! !!PostscriptDummyWarp methodsFor: 'dummy' stamp: 'di 8/12/2000 10:01'!preserveStateDuring: aBlock	^ canvas preserveStateDuring:		"Note block arg must be self so various things get overridden properly"		[:inner | aBlock value: self]! !!PostscriptDummyWarp methodsFor: 'dummy' stamp: 'di 8/12/2000 10:13'!warpBits	canvas preserveStateDuring:		[:inner | 		transform ifNotNil: [inner transformBy: transform].		inner drawPostscriptContext:subCanvas].! !!PostscriptEncoder methodsFor: 'Postscript generation' stamp: 'di 8/12/2000 19:45'!oval: aPoint	self print: 'matrix currentmatrix'; cr;		write: (aPoint extent // 2); space;		write: aPoint topLeft;		print: ' newpath translate scale 1 1 1 0 360 arc setmatrix'; cr! !!PostscriptEncoder methodsFor: 'Postscript generation' stamp: 'di 8/12/2000 10:22'!preserveStateDuring: aBlock	"Note that this method supplies self, and encoder, to the block"	| retval |	self print: 'gsave'; cr.	retval _ aBlock value: self.	self print: 'grestore'; cr.	^ retval! !PostscriptEncoder removeSelector: #grestore!PostscriptEncoder removeSelector: #gsave!PostscriptDummyWarp removeSelector: #grestore!PostscriptDummyWarp removeSelector: #gsave!PostscriptCanvas removeSelector: #grestore!PostscriptCanvas removeSelector: #gsave!