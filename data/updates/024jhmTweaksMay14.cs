'From Squeak 2.0 BETA of May 8, 1998 on 14 May 1998 at 11:55:37 am'!"Change Set:		jhmTweaksMay14Date:			14 May 1998Author:			John MaloneyMisc. small fixes from:  Georg Gollmann  Tim Olson  Andreas RaabRemoved obsolete class ServerSocket (use ConnectionQueue instead)Minor tweaks to WorldMorph>color: and borderColor: for efficiency"!!BorderedMorph methodsFor: 'accessing' stamp: 'jm 5/14/1998 11:07'!borderColor: colorOrSymbolOrNil	borderColor = colorOrSymbolOrNil ifFalse: [		borderColor _ colorOrSymbolOrNil.		self changed].! !!Float methodsFor: 'mathematical functions' stamp: 'jm 5/14/1998 11:04'!raisedTo: aNumber	"Answer the receiver raised to aNumber."	0.0 = aNumber ifTrue: [^ 1.0].  "special case for 0.0 raisedTo: 0.0"	^ (self ln * aNumber asFloat) exp! !!SoundPlayer class methodsFor: 'private' stamp: 'jm 5/14/1998 09:37'!startPlayingImmediately: aSound	"Private!! Start playing the given sound as soon as possible by mixing it into the sound output buffers of the underlying sound driver."	| dontInsertSamples totalSamples buf n leftover src rest |	dontInsertSamples _ false.  "temporary, until insert samples primitive is ported"	dontInsertSamples ifTrue: [		ActiveSounds add: aSound.		^ self].	"first, fill a double-size buffer with samples"	"Note: The code below assumes that totalSamples contains two	 buffers worth of samples, and the insertSamples primitive is	 expected to consume at least one buffer's worth of these	 samples. The remaining samples are guaranteed to fit into	 a single buffer."	totalSamples _ Buffer stereoSampleCount * 2.  "two buffer's worth"	buf _ SoundBuffer newStereoSampleCount: totalSamples.	aSound playSampleCount: totalSamples into: buf startingAt: 1.	ReverbState == nil ifFalse: [		ReverbState applyReverbTo: buf startingAt: 1 count: totalSamples].	PlayerSemaphore critical: [		"insert as many samples as possible into the sound driver's buffers"		n _ self primSoundInsertSamples: totalSamples			from: buf			samplesOfLeadTime: 1024.		leftover _ totalSamples - n.		"copy the remainder of buf into Buffer"		"Note: the following loop iterates over 16-bit words, not two-word stereo slices"		"assert: 0 < leftover <= Buffer stereoSampleCount"		src _ 2 * n.		1 to: 2 * leftover do:			[:dst | Buffer at: dst put: (buf at: (src _ src + 1))].		"generate enough additional samples to finish filling Buffer"		rest _ Buffer stereoSampleCount - leftover.		aSound playSampleCount: rest into: Buffer startingAt: leftover + 1.		ReverbState == nil ifFalse: [			ReverbState applyReverbTo: Buffer startingAt: leftover + 1 count: rest].		"record the fact that this sound has already been played into Buffer so that we don't process it again this time around"		SoundJustStarted _ aSound.		ActiveSounds add: aSound].! !!String methodsFor: 'comparing' stamp: 'go 2/11/98 14:59'!crc16	"Compute a 16 bit cyclic redundancy check."	| crc |	crc := 0.	self do: [:c |		crc := (crc bitShift: -8) bitXor: (		 #(	16r0000	16rC0C1	16rC181	16r0140	16rC301	16r03C0	16r0280	16rC241			16rC601	16r06C0	16r0780	16rC741	16r0500	16rC5C1	16rC481	16r0440			16rCC01	16r0CC0	16r0D80	16rCD41	16r0F00	16rCFC1	16rCE81	16r0E40			16r0A00	16rCAC1	16rCB81	16r0B40	16rC901	16r09C0	16r0880	16rC841			16rD801	16r18C0	16r1980	16rD941	16r1B00	16rDBC1	16rDA81	16r1A40			16r1E00	16rDEC1	16rDF81	16r1F40	16rDD01	16r1DC0	16r1C80	16rDC41			16r1400	16rD4C1	16rD581	16r1540	16rD701	16r17C0	16r1680	16rD641			16rD201	16r12C0	16r1380	16rD341	16r1100	16rD1C1	16rD081	16r1040			16rF001	16r30C0	16r3180	16rF141	16r3300	16rF3C1	16rF281	16r3240			16r3600	16rF6C1	16rF781	16r3740	16rF501	16r35C0	16r3480	16rF441			16r3C00	16rFCC1	16rFD81	16r3D40	16rFF01	16r3FC0	16r3E80	16rFE41			16rFA01	16r3AC0	16r3B80	16rFB41	16r3900	16rF9C1	16rF881	16r3840			16r2800	16rE8C1	16rE981	16r2940	16rEB01	16r2BC0	16r2A80	16rEA41			16rEE01	16r2EC0	16r2F80	16rEF41	16r2D00	16rEDC1	16rEC81	16r2C40			16rE401	16r24C0	16r2580	16rE541	16r2700	16rE7C1	16rE681	16r2640			16r2200	16rE2C1	16rE381	16r2340	16rE101	16r21C0	16r2080	16rE041			16rA001	16r60C0	16r6180	16rA141	16r6300	16rA3C1	16rA281	16r6240			16r6600	16rA6C1	16rA781	16r6740	16rA501	16r65C0	16r6480	16rA441			16r6C00	16rACC1	16rAD81	16r6D40	16rAF01	16r6FC0	16r6E80	16rAE41			16rAA01	16r6AC0	16r6B80	16rAB41	16r6900	16rA9C1	16rA881	16r6840			16r7800	16rB8C1	16rB981	16r7940	16rBB01	16r7BC0	16r7A80	16rBA41			16rBE01	16r7EC0	16r7F80	16rBF41	16r7D00	16rBDC1	16rBC81	16r7C40			16rB401	16r74C0	16r7580	16rB541	16r7700	16rB7C1	16rB681	16r7640			16r7200	16rB2C1	16rB381	16r7340	16rB101	16r71C0	16r7080	16rB041			16r5000	16r90C1	16r9181	16r5140	16r9301	16r53C0	16r5280	16r9241			16r9601	16r56C0	16r5780	16r9741	16r5500	16r95C1	16r9481	16r5440			16r9C01	16r5CC0	16r5D80	16r9D41	16r5F00	16r9FC1	16r9E81	16r5E40			16r5A00	16r9AC1	16r9B81	16r5B40	16r9901	16r59C0	16r5880	16r9841			16r8801	16r48C0	16r4980	16r8941	16r4B00	16r8BC1	16r8A81	16r4A40			16r4E00	16r8EC1	16r8F81	16r4F40	16r8D01	16r4DC0	16r4C80	16r8C41			16r4400	16r84C1	16r8581	16r4540	16r8701	16r47C0	16r4680	16r8641			16r8201	16r42C0	16r4380	16r8341	16r4100	16r81C1	16r8081	16r4040)			 at: ((crc bitXor: c asciiValue) bitAnd: 16rFF) + 1) ].	^crc! !!String methodsFor: 'converting' stamp: 'jm 5/14/1998 10:40'!asString	"Answer this string."	^ self! !!String methodsFor: 'converting' stamp: 'jm 5/14/1998 10:26'!withBlanksTrimmed	"Return a copy of the receiver from which leading and trailing blanks have been trimmed."	| first |	first _ self findFirst: [:c | c isSeparator not].	first = 0 ifTrue: [^ ''].  "no non-separator character"	^ self		copyFrom: first		to: (self findLast: [:c | c isSeparator not])	" ' abc  d   ' withBlanksTrimmed"! !!WorldMorph methodsFor: 'accessing' stamp: 'jm 5/13/1998 20:19'!color: aColor	"Set the background color of this world."	color = aColor ifFalse: [		color _ aColor.		self fullRepaintNeeded.		"Propagate to view"		self changed: #newColor].! !PolygonMorph removeSelector: #borderColor:!Smalltalk removeClassNamed: #PasswordPublic!Smalltalk removeClassNamed: #ServerSocket!