'From Squeak2.6 of 11 October 1999 [latest update: #1700] on 9 December 1999 at 3:04:14 pm'!!FileList methodsFor: 'file list menu' stamp: 'tk 12/9/1999 14:34'!openProjectFromFile	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world" 	| aFileStream morphOrList window proj |	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	World ifNil: [^ self inform: 'Later, allow jumping from MVC to Morphic Projects.'].	aFileStream _ directory oldFileNamed: self fullName.	morphOrList _ aFileStream fileInObjectAndCode.	(morphOrList isKindOf: ImageSegment) ifTrue: [		proj _ morphOrList arrayOfRoots detect: [:mm | mm class == Project] 					ifNone: [nil].		"rename the project if it conflicts?"		proj ifNotNil: [			window _ (SystemWindow labelled: proj name) model: proj.			window				addMorph: (ProjectViewMorph on: proj)				frame: (0@0 corner: 1.0@1.0).			^ window openInWorld]].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList _ morphOrList contentsMorph].	(morphOrList isKindOf: PasteUpMorph) ifFalse: [		^ self inform: 'This is not a PasteUpMorph or exported Project.'].	(window _ ProjectViewMorph newMorphicProjectOn: morphOrList) openInWorld.	window model enter! !!ImageSegment methodsFor: 'access' stamp: 'tk 12/8/1999 21:12'!arrayOfRoots: array	arrayOfRoots _ array! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'tk 12/8/1999 19:52'!comeFullyUpOnReload: smartRefStream	"fix up the objects in the segment that changed size.  An object in the segment is the wrong size for the modern version of the class.  Construct a fake class that is the old size.  Replace the modern class with the old one in outPointers.  Load the segment.  Traverse the instances, making new instances by copying fields, and running conversion messages.  Keep the new instances.  Bulk forward become the old to the new.  Let go of the fake objects and classes.	After the install (below), arrayOfRoots is filled in.  Globalize new classes.  Caller may want to do some special install on certain objects in arrayOfRoots.	May want to write the segment out to disk in its new form."	| mapFakeClassesToReal fakes goods bads perfect |	mapFakeClassesToReal _ smartRefStream reshapedClassesIn: outPointers.		"Dictionary of just the ones that change shape.  Substitute them in outPointers."	arrayOfRoots _ self loadSegmentFrom: segment outPointers: outPointers.		"Can't use install.  Not ready for rehashSets"	mapFakeClassesToReal isEmpty ifFalse: [		fakes _ mapFakeClassesToReal keys.		goods _ OrderedCollection new.		bads _ OrderedCollection new.		fakes do: [:aFakeClass | 			aFakeClass allInstancesDo: [:misShapen | 				perfect _ smartRefStream convert: misShapen 							to: (mapFakeClassesToReal at: aFakeClass).				(bads includes: misShapen) ifFalse: [					bads add: misShapen.					goods add: perfect]]].		bads size > 0 ifTrue: [			bads asArray elementsForwardIdentityTo: goods asArray]].	self rehashSets.	"Classes in this segment."	arrayOfRoots do: [:aRoot | 		(aRoot isKindOf: Project) ifTrue: [			Project allInstancesDo: [:pp | pp ~~ aRoot ifTrue: [				pp name = aRoot name ifTrue: [					aRoot projectChangeSet name: ChangeSet defaultName]]]].		aRoot class class == Metaclass ifTrue: [			self declare: aRoot]].	mapFakeClassesToReal isEmpty ifFalse: [		fakes do: [:aFake | aFake removeFromSystemUnlogged].		SystemOrganization removeEmptyCategories].	"^ self"! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'tk 12/8/1999 20:09'!declare: classThatIsARoot	| existing |	"The class just arrived in this segment.  How fit it into the Smalltalk dictionary?  If it had an association, that was installed with associationDeclareAt:."	classThatIsARoot superclass name == #Player 		ifTrue: [classThatIsARoot category: 'Morphic-UserObjects']		ifFalse: [classThatIsARoot category: 'Morphic-Imported'].	classThatIsARoot superclass addSubclass: classThatIsARoot.	(Smalltalk includesKey: classThatIsARoot name) ifFalse: [		"Class entry in Smalltalk not referred to in Segment, install anyway."		^ Smalltalk at: classThatIsARoot name put: classThatIsARoot].	existing _ Smalltalk at: classThatIsARoot name.	existing xxxClass == ImageSegmentRootStub ifTrue: [		"We are that segment!!  Must ask it carefully!!"		^ Smalltalk at: classThatIsARoot name put: classThatIsARoot].	existing == false | (existing == nil) ifTrue: [		"association is in outPointers, just installed"		^ Smalltalk at: classThatIsARoot name put: classThatIsARoot].	"Conflict with existing global or copy of the class"	(existing isKindOf: Class) ifTrue: [		classThatIsARoot isSystemDefined not ifTrue: [			"UniClass.  give it a new name"			classThatIsARoot setName: Player chooseUniqueClassName.			^ Smalltalk at: classThatIsARoot name put: classThatIsARoot].		"Take the incoming one"		self inform: 'Using newly arrived version of ', classThatIsARoot name.		classThatIsARoot superclass removeSubclass: classThatIsARoot.	"just in case"		(Smalltalk at: classThatIsARoot name) becomeForward: classThatIsARoot.		^ classThatIsARoot superclass addSubclass: classThatIsARoot].	self error: 'Name already in use by a non-class: ', classThatIsARoot name.! !!ImageSegment methodsFor: 'instance remapping' stamp: 'tk 12/9/1999 08:13'!ifOutPointer: anObject thenAllObjectsDo: aBlock	| withSymbols segSize |	"If I point out to anObject, bring me in, Submit all my objects to the block.  Write me out again."	(state = #onFile or: [state = #onFileWithSymbols]) ifFalse: [^ self].	withSymbols _ state = #onFileWithSymbols.	(outPointers includes: anObject) ifFalse: [^ self].	Cursor read showWhile: [		state = #onFile ifTrue: [self readFromFile.			endMarker _ 'End' clone]].	"for enumeration of objects"	segSize _ segment size.	self install.	self allObjectsDo: [:obj | aBlock value: obj].	"do the work"	self copyFromRoots: arrayOfRoots sizeHint: segSize.	self extract.	withSymbols 		ifTrue: [self writeToFileWithSymbols]		ifFalse: [self writeToFile].! !!Project methodsFor: 'release' stamp: 'tk 12/9/1999 15:04'!okToChange	| ok hasSubProjects itsName is |	hasSubProjects _ world isMorph		ifTrue: [(world submorphs select:						[:m | (m isKindOf: SystemWindow)								and: [m model isKindOf: Project]]) size > 0]		ifFalse: [(world controllerWhoseModelSatisfies:						[:m | m isKindOf: Project]) notNil].	hasSubProjects ifTrue:		[PopUpMenu notify: 'The project ', self name printString, 'contains sub-projects.  You must remove theseexplicitly before removing their parent.'.		^ false].	ok _ world isMorph not and: [world scheduledControllers size <= 1].	ok ifFalse: [self isMorphic ifTrue: [		self parent == Project current 			ifTrue: [ok _ (self confirm:'Really delete the project', self name printString, 'and all its windows?')]			ifFalse: [^ true]]].	"view from elsewhere.  just delete it."	ok ifFalse: [^ false].	"about to delete this project; clear previous links to it from other Projects:"	ImageSegment allSubInstancesDo: [:seg |		seg ifOutPointer: self thenAllObjectsDo: [:obj |			(obj isKindOf: ProjectViewMorph) ifTrue: [				obj deletingProject: self.  obj abandon].			obj class == Project ifTrue: [obj deletingProject: self]]].	Project allProjects do: [:p | p deletingProject: self].	"ones that are in"	ProjectViewMorph allSubInstancesDo: [:p | 		p deletingProject: self.		p project == self ifTrue: [p abandon]].	world isMorph  "special release for wonderlands"		ifTrue: [world submorphs do:						[:m | (m isKindOf: WonderlandCameraMorph)								and: [m getWonderland release]]].	"Remove Player classes and metaclasses owned by project"	is _ ImageSegment new arrayOfRoots: (Array with: self).	(is rootsIncludingPlayers copyWithout: self) do: [:playerCls | 		playerCls isMeta ifFalse: [			playerCls removeFromSystemUnlogged]].	(changeSet isEmpty and: [(changeSet projectsBelongedTo copyWithout: self) isEmpty])		ifTrue:			[itsName _ changeSet name.			ChangeSorter removeChangeSet: changeSet.			Transcript cr; show: 'project change set ', itsName, ' deleted.'].	^ true! !!ProjectViewMorph methodsFor: 'as yet unclassified' stamp: 'tk 12/9/1999 08:03'!abandon	"Home ViewMorph of project is going away."	project _ nil.	super abandon.! !PasteUpMorph removeSelector: #abandon!