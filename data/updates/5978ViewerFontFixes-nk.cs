'From Squeak3.7beta of ''1 April 2004'' [latest update: #5972] on 19 July 2004 at 3:39:20 pm'!"Change Set:		ViewerFontFixes-nkDate:			12 July 2004Author:			Ned Konzv2: fixed a typo in the postscript (md).Two small changes for the EToy viewers:- fix the 2-pixel offset in the left edge of the name tiles- change the category button font to the Preferences standardButtonFont.Contains a postscript that tries to change the look back to something close to the old look."!!CategoryViewer methodsFor: 'entries' stamp: 'nk 7/12/2004 22:55'!phraseForVariableFrom: aMethodInterface	"Return a structure consisting of tiles and controls and a readout representing a 'variable' belonging to the player, complete with an appropriate readout when indicated.  Functions in both universalTiles mode and classic mode.  Slightly misnamed in that this path is used for any methodInterface that indicates an interesting resultType."	| anArrow slotName getterButton cover inner aRow doc setter tryer universal hotTileForSelf spacer buttonFont |	aRow _ ViewerLine newRow		color: self color;		beSticky;		elementSymbol: (slotName _ aMethodInterface selector);		wrapCentering: #center;		cellPositioning: #leftCenter.	(universal _ scriptedPlayer isUniversalTiles) ifFalse:		[buttonFont _ Preferences standardEToysFont.			aRow addMorphBack: (Morph new color: self color;					 extent: (((buttonFont widthOfString: '!!') + 8) @ (buttonFont height + 6));					 yourself)].  "spacer"	aRow addMorphBack: (self infoButtonFor: slotName).	aRow addMorphBack: (Morph new color: self color; extent: 0@10).  " spacer"	universal		ifTrue:			[inner _ scriptedPlayer universalTilesForGetterOf: aMethodInterface.			cover _ Morph new color: Color transparent.			cover extent: inner fullBounds extent.			(getterButton _ cover copy) addMorph: cover; addMorphBack: inner.			cover on: #mouseDown send: #makeUniversalTilesGetter:event:from: 					to: self withValue: aMethodInterface.			aRow addMorphFront:  (tryer _ ScriptingSystem tryButtonFor: inner).			tryer color: tryer color lighter lighter]		ifFalse:			[hotTileForSelf _ self tileForSelf bePossessive.			hotTileForSelf  on: #mouseDown send: #makeGetter:event:from:				to: self				withValue: (Array with: aMethodInterface selector with: aMethodInterface resultType).			aRow addMorphBack: hotTileForSelf.			aRow addMorphBack: (spacer _ Morph new color: self color; extent: 2@10).			spacer on: #mouseEnter send: #addGetterFeedback to: aRow.			spacer on: #mouseLeave send: #removeHighlightFeedback to: aRow.			spacer on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow.			spacer  on: #mouseDown send: #makeGetter:event:from:				to: self				withValue: (Array with: aMethodInterface selector with: aMethodInterface resultType).			hotTileForSelf on: #mouseEnter send: #addGetterFeedback to: aRow.			hotTileForSelf on: #mouseLeave send: #removeHighlightFeedback to: aRow.			hotTileForSelf on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow.			getterButton _ self getterButtonFor: aMethodInterface selector type: aMethodInterface resultType].	aRow addMorphBack: getterButton.	getterButton on: #mouseEnter send: #addGetterFeedback to: aRow.	getterButton on: #mouseLeave send: #removeHighlightFeedback to: aRow.	getterButton on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow.	(doc _ aMethodInterface documentationOrNil) ifNotNil:		[getterButton setBalloonText: doc translated].	universal ifFalse:		[(slotName == #seesColor:) ifTrue:			[self addIsOverColorDetailTo: aRow.			^ aRow].		(slotName == #touchesA:) ifTrue:			[self addTouchesADetailTo: aRow.			^ aRow].		(slotName == #overlaps:) ifTrue:			[self addOverlapsDetailTo: aRow.			^ aRow]].	aRow addMorphBack: (AlignmentMorph new beTransparent).  "flexible spacer"	(setter _ aMethodInterface companionSetterSelector) ifNotNil:		[aRow addMorphBack: (Morph new color: self color; extent: 2@10).  " spacer"		anArrow _ universal 			ifTrue: [self arrowSetterButton: #newMakeSetterFromInterface:evt:from:  						args: aMethodInterface]			ifFalse: [self arrowSetterButton: #makeSetter:from:forPart:						args: (Array with: slotName with: aMethodInterface resultType)].		anArrow beTransparent.		universal ifFalse:			[anArrow on: #mouseEnter send: #addSetterFeedback to: aRow.			anArrow on: #mouseLeave send: #removeHighlightFeedback to: aRow.			anArrow on: #mouseLeaveDragging send: #removeHighlightFeedback to: aRow].		aRow addMorphBack: anArrow].	(#(color:sees: playerSeeingColor copy touchesA: overlaps:) includes: slotName) ifFalse: 		[(universal and: [slotName == #seesColor:]) ifFalse:			[aMethodInterface wantsReadoutInViewer ifTrue: 				[aRow addMorphBack: (self readoutFor: slotName type: aMethodInterface resultType readOnly: setter isNil getSelector: aMethodInterface selector putSelector: setter)]]].	anArrow ifNotNil: [anArrow step].	^ aRow! !!CategoryViewer methodsFor: 'header pane' stamp: 'nk 7/12/2004 23:15'!addNamePaneTo: header 	"Add the namePane, which may be a popup or a type-in 	depending on the type of CategoryViewer"	| aButton |	namePane := RectangleMorph newSticky color: Color brown veryMuchLighter.	namePane borderWidth: 0.	aButton := (StringButtonMorph				contents: '-----'				font: Preferences standardButtonFont)				color: Color black.	aButton target: self;		 arguments: Array new;		 actionSelector: #chooseCategory.	aButton actWhen: #buttonDown.	namePane addMorph: aButton.	aButton position: namePane position.	namePane align: namePane topLeft with: bounds topLeft + (50 @ 0).	namePane setBalloonText: 'category (click here to choose a different one)' translated.	header addMorphBack: namePane.	(namePane isKindOf: RectangleMorph)		ifTrue: [namePane addDropShadow.			namePane shadowColor: Color gray]! !"Postscript:Restore classic EToy look, as close as possible in a stock image."(TextStyle named: #ComicSansMS) ifNotNilDo: [ :ts |Preferences setEToysFontTo: (ts fontOfSize: 18) ].(TextStyle named: #Accuny) ifNotNilDo: [ :ts |Preferences setButtonFontTo: (ts fontOfSize: 12) ].!