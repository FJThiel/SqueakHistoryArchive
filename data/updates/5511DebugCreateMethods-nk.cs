'From Squeak3.7alpha of ''11 September 2003'' [latest update: #5423] on 8 October 2003 at 10:55:52 am'!"Change Set:		DebugCreateMethods-nkDate:			12 February 2003Author:			Ned KonzThis little change set adds a 'Create' button to debuggers that pop up on MNU's. This button writes a stub method containing a halt, then proceeds the debugger (which will stop at the halt). You can then edit the source of the method.Also adds an 'implement in...' submenu to the debugger's call stack's contextual menu (only for #doesNotUnderstand: messages)."!!Object methodsFor: 'error handling' stamp: 'AFi 2/8/2003 22:52'!shouldBeImplemented	"Announce that this message should be implemented"	self error: 'This message should be implemented'! !!CustomMenu methodsFor: 'compatibility' stamp: 'ads 2/20/2003 08:59'!add: aString subMenu: aMenu target: target selector: aSymbol argumentList: argList	"Create a sub-menu with the given label. This isn't really a sub-menu the way Morphic does it; it'll just pop up another menu."	self		add: aString		target: aMenu		selector: #invokeOn:		argumentList: argList asArray.! !!Debugger methodsFor: 'initialize' stamp: 'nk 2/12/2003 22:56'!buttonRowForPreDebugWindow: aDebugWindow	| aRow aButton quads |	aRow _ AlignmentMorph newRow hResizing: #spaceFill.	aRow beSticky.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	quads _ OrderedCollection withAll: self preDebugButtonQuads.	(self interruptedContext selector == #doesNotUnderstand:) ifTrue: [		quads add: { 'Create'. #createMethod. #magenta. 'create the missing method' }	].	quads do:			[:quad |				aButton _ SimpleButtonMorph new target: aDebugWindow.				aButton color: Color transparent; borderWidth: 1.				aButton actionSelector: quad second.				aButton label: quad first.				aButton submorphs first color: (Color colorFrom: quad third).				aButton setBalloonText: quad fourth.				Preferences alternativeWindowLook 					ifTrue:[aButton borderWidth: 2; borderColor: #raised].				aRow addMorphBack: aButton.				aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer].	^ aRow! !!Debugger methodsFor: 'context stack menu' stamp: 'ads 2/17/2003 10:15'!contextStackMenu: aMenu shifted: shifted	"Set up the menu appropriately for the context-stack-list, either shifted or unshifted as per the parameter provided"	^ shifted ifFalse: 		[self selectedContext selector = #doesNotUnderstand: ifTrue:			[aMenu 				add: 'implement in...' 				subMenu: (self populateImplementInMenu: (Smalltalk isMorphic ifTrue: [MenuMorph new defaultTarget: self] ifFalse: [CustomMenu new]))				target: nil 				selector: nil 				argumentList: #(nil)].		aMenu labels: 'fullStack (f)restart (r)proceed (p)step (t)step through (T)send (e)where (w)peel to first like thissenders of... (n)implementors of... (m)inheritance (i)versions (v)inst var refs...inst var defs...class var refs...class variablesclass refs (N)browse full (b)file out mail out bug reportmore...'		lines: #(8 12 14 17 20)		selections: #(fullStack restart proceed doStep stepIntoBlock send where peelToFirstbrowseSendersOfMessages browseMessages methodHierarchy browseVersionsbrowseInstVarRefs browseInstVarDefsbrowseClassVarRefs browseClassVariables browseClassRefsbrowseMethodFull fileOutMessage mailOutBugReportshiftedYellowButtonActivity)]	ifTrue: [aMenu labels: 'browse class hierarchybrowse classbrowse method (O)implementors of sent messageschange sets with this methodinspect instancesinspect subinstancesrevert to previous versionremove from current change setrevert & remove from changesmore...' 	lines: #(5 7 10)	selections: #(classHierarchy browseClass 		openSingleMessageBrowser browseAllMessages findMethodInChangeSets 		inspectInstances inspectSubInstances		revertToPreviousVersion 		removeFromCurrentChanges revertAndForget		unshiftedYellowButtonActivity)]! !!Debugger methodsFor: 'context stack menu' stamp: 'ads 7/21/2003 16:00'!implement: aMessage inClass: aClass	aClass compile: aMessage createStubMethod.	self selectedContext privRefreshWith: (aClass lookupSelector: aMessage selector).	self resetContext: self selectedContext.	self contextStackIndex: 1 oldContextWas: nil! !!Debugger methodsFor: 'context stack menu' stamp: 'ads 2/20/2003 08:46'!populateImplementInMenu: aMenu	| msg |	msg _ self selectedContext at: 1.	self selectedContext receiver class withAllSuperclasses do:		[:each |		aMenu add: each name target: self selector: #implement:inClass: argumentList: (Array with: msg with: each)].	^ aMenu! !!Debugger methodsFor: 'private' stamp: 'ads 2/15/2003 13:34'!askForSuperclassOf: aClass toImplement: aSelector ifCancel: cancelBlock	| classes chosenClassIndex |	classes _ aClass withAllSuperclasses.	chosenClassIndex _ PopUpMenu		withCaption: 'Define #', aSelector, ' in which class?'		chooseFrom: (classes collect: [:c | c name]).	chosenClassIndex = 0 ifTrue: [^ cancelBlock value].	^ classes at: chosenClassIndex! !!Debugger methodsFor: 'private' stamp: 'ads 7/21/2003 17:30'!createMethod	"Should only be called when this Debugger was created in response to a	MessageNotUnderstood exception. Create a stub for the method that was	missing and proceed into it."		| msg chosenClass |	msg _ contextStackTop tempAt: 1.	chosenClass _ self		askForSuperclassOf: contextStackTop receiver class		toImplement: msg selector		ifCancel: [^self].	self implement: msg inClass: chosenClass.	self proceed.! !!Message methodsFor: 'stub creation' stamp: 'ads 7/21/2003 17:33'!createStubMethod	| argNames aOrAn argName arg argClassName |	argNames _ Set new.	^ String streamContents: [ :s |		self selector keywords doWithIndex: [ :key :i |			s nextPutAll: key.			((key last = $:) or: [self selector isInfix]) ifTrue: [				arg _ self arguments at: i.				argClassName _ (arg isKindOf: Class) ifTrue: ['Class'] ifFalse: [arg class name].				aOrAn _ argClassName first isVowel ifTrue: ['an'] ifFalse: ['a'].				argName _ aOrAn, argClassName.				[argNames includes: argName] whileTrue: [argName _ argName, i asString].				argNames add: argName.				s nextPutAll: ' '; nextPutAll: argName; space			].		].		s cr; tab.		s nextPutAll: 'self shouldBeImplemented'	]! !!PreDebugWindow methodsFor: 'as yet unclassified' stamp: 'nk 2/12/2003 23:00'!createMethod	model createMethod! !!Message reorganize!('accessing' argument argument: arguments lookupClass selector sends:)('printing' printOn: storeOn:)('private' setSelector:arguments:)('sending' sentTo:)('stub creation' createStubMethod)!