'From Squeak2.6 of 11 October 1999 [latest update: #1650] on 26 November 1999 at 3:49:08 pm'!"Change Set:		turkeyTweaks-swDate:			26 November 1999Author:			Scott WallaceThree unrelated tweaks:(1)  When in a browser you submit a class definition which results in the addition of a new system category, you no longer fall into a debugger when the category-list is updated.(2) A fix (well, a workaround really) enabling scripted objects to work even if they have drop shadows.(3)  Convert the FormDictionary to be an IdentityDictionary, whose keys are symbols rather than strings.  (primarily an economy measure.)"!!Browser methodsFor: 'class list' stamp: 'sw 11/24/1999 14:48'!selectedClassName	| aClassList |	"Answer the name of the current class. Answer nil if no selection exists."	(classListIndex = 0 or: [classListIndex > (aClassList _ self classList) size]) ifTrue: [^ nil].	^ aClassList at: classListIndex! !!DropShadowMorph methodsFor: 'geometry' stamp: 'sw 11/24/1999 15:07'!player	| renderee |	"Distasteful hack, done because DropShadowMorph doesn't typically assume control of the player the way other renderers do."	^ (renderee _ self renderedMorph) == self		ifFalse:			[renderee player ifNil: [super player]]		ifTrue:			[super player]! !!StandardScriptingSystem methodsFor: 'form dictionary' stamp: 'sw 10/6/1999 20:56'!convertAllKeysToSymbols	| newDict |	"ScriptingSystem convertAllKeysToSymbols"	newDict _ IdentityDictionary new.	FormDictionary associationsDo:		[:assoc |			newDict at: assoc key asSymbol put: assoc value].	FormDictionary _ newDict"(FormDictionary keys asArray collect: [:k | k class name]) asBag sortedElements"! !!StandardScriptingSystem methodsFor: 'form dictionary' stamp: 'sw 11/26/1999 15:45'!deletePrivateGraphics	"ScriptingSystem deletePrivateGraphics"	self deletePrivateGraphics:			#(#BadgeMiniPic #BadgePic #Broom #CedarPic #CollagePic #CoverMain #CoverSpiral #CoverTexture #Fred #ImagiPic #KayaPic #StudioPic)		afterStoringToFileNamed: 'disGraphics'! !!StandardScriptingSystem methodsFor: 'form dictionary' stamp: 'sw 11/26/1999 15:42'!deletePrivateGraphics: nameList afterStoringToFileNamed: aFileName	"This method is used to strip private graphics from the FormDictionary and store them on a file of the given name"	|  replacement toRemove aReferenceStream keySymbol |	toRemove _ Dictionary new.	replacement _ FormDictionary formAtKey: #Gets.	nameList do:		[:aKey |			keySymbol _ aKey asSymbol.			(toRemove at: keySymbol put: (self formAtKey: keySymbol)).			FormDictionary at: keySymbol put: replacement].	aReferenceStream _ ReferenceStream fileNamed: aFileName.	aReferenceStream nextPut: toRemove.	aReferenceStream close! !!StandardScriptingSystem methodsFor: 'form dictionary' stamp: 'sw 10/6/1999 20:57'!formAtKey: aKey	"ScriptingSystem saveForm: (TileMorph downPicture) atKey: 'downArrow'"	^ FormDictionary at: aKey asSymbol ifAbsent: [nil]! !!StandardScriptingSystem methodsFor: 'form dictionary' stamp: 'sw 11/26/1999 15:37'!mergeGraphicsFrom: aDictionary	"aDictionary is assumed to hold associations of the form <formName> -> <form>.   Merge the graphics held by that dictionary into the internal FormDictionary, overlaying any existing entries with the ones found in aDictionary"	aDictionary associationsDo:		[:assoc | self saveForm: assoc value atKey: assoc key]		"works ok even if keys in aDictionary are strings rather than symbols"! !!StandardScriptingSystem methodsFor: 'form dictionary' stamp: 'sw 11/26/1999 15:43'!patchInNewStandardPlayerForm	"ScriptingSystem patchInNewStandardPlayerForm"	FormDictionary at: #standardPlayer put:		(Form extent: 3@3	depth: 16 fromArray: #( 17969 0 1177634353 1177616384 17969 0) offset: 0@0)! !!StandardScriptingSystem methodsFor: 'form dictionary' stamp: 'sw 10/6/1999 20:57'!saveForm: aForm atKey: aKey	FormDictionary at: aKey asSymbol put: aForm! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 11/26/1999 15:44'!stripGraphicsForExternalRelease	"ScriptingSystem stripGraphicsForExternalRelease"	|  replacement |	replacement _ FormDictionary at: #Gets.	#('BadgeMiniPic' 'BadgePic' 'Broom' 'CedarPic' 'CollagePic' 'CoverMain' 'CoverSpiral' 'CoverTexture' 'Fred' 'ImagiPic' 'KayaPic' 'StudioPic')		do:			[:aKey | FormDictionary at: aKey asSymbol put: replacement]! !"Postscript:"ScriptingSystem convertAllKeysToSymbols. !