'From Squeak3.2alpha of 2 October 2001 [latest update: #4514] on 14 November 2001 at 12:36:19 am'!"Change Set:		allScripts-swDate:			13 November 2001Author:			Scott WallaceAdopts a suggestion by Michael Rueger that the 'all-scripts tool' have an open and closed form, the closed form being basically the same as the classic script-status controls, thus allowing a single tool to serve both purposes.Makes the basic operation of the tool be more efficient by only rebuilding its contents when truly necessary.Also, if there are multiple stop/step/go buttons in the same project, their appearances are now kept in synch.Makes an all-scripts tool inside an isolated Presenter show the scripts only for that Presenter.  This will be perceived for example in a ScriptingSpace if you drop an All Scripts tool into it.Includes a certain amount of cleanup of the antiquated Presenter class."!AlignmentMorph subclass: #AllScriptsTool	instanceVariableNames: 'presenter showingOnlyActiveScripts showingAllInstances showingOnlyTopControls '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!!AllScriptsTool commentStamp: '<historical>' prior: 0!A tool for controlling and viewing all scripts in a project.  The tool has an open and a closed form.  In the closed form, stop-step-go buttons are available, plus a control for opening the tool up.  In the open form, it has a second row of controls that govern which scripts should be shown, followed by the individual script items.!Object subclass: #Presenter	instanceVariableNames: 'associatedMorph stopButton stepButton goButton standardPlayer standardPlayfield standardPalette playerList '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!!Presenter commentStamp: '<historical>' prior: 0!Optionally associated with a PasteUpMorph, provides a local scope for the running of scripts.Once more valuable, may be again, but at present occupies primarily a historical niche.Maintains a playerList cache.Holds, optionally three 'standard items' -- standardPlayer standardPlayfield standardPalette -- originally providing idiomatic support of ongoing squeak-team internal work, but now extended to more general applicability.   !AlignmentMorph subclass: #ScriptStatusLine	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!!AllScriptsTool methodsFor: 'initialization' stamp: 'sw 11/14/2001 00:31'!addSecondLineOfControls	"Add the second line of controls"	| aRow outerButton aButton worldToUse |	aRow _ AlignmentMorph newRow listCentering: #center; color: Color transparent.	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleWhetherShowingOnlyActiveScripts;		getSelector: #showingOnlyActiveScripts.	outerButton addTransparentSpacerOfSize: (4@0).	outerButton addMorphBack: (StringMorph contents: 'tickers only') lock.	outerButton setBalloonText: 'If checked, then only scripts that are paused or ticking will be shown'.	aRow addMorphBack: outerButton.	aRow addTransparentSpacerOfSize: 20@0.	aRow addMorphBack: self helpButton.	aRow addTransparentSpacerOfSize: 20@0.	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleWhetherShowingAllInstances;		getSelector: #showingAllInstances.	outerButton addTransparentSpacerOfSize: (4@0).	outerButton addMorphBack: (StringMorph contents: 'all instances') lock.	outerButton setBalloonText: 'If checked, then entries for all instances will be shown, but if not checked, scripts for only one representative of each different kind of object will be shown.  Consult the help available by clicking on the purple ? for more information.'.	aRow addMorphBack: outerButton.	self addMorphBack: aRow.	worldToUse _ self isInWorld ifTrue: [self world] ifFalse: [ActiveWorld].	worldToUse presenter reinvigorateAllScriptsTool: self.	self layoutChanged.! !!AllScriptsTool methodsFor: 'initialization' stamp: 'sw 11/13/2001 19:42'!dismissButton	"Answer a button whose action would be to dismiss the receiver"	| aButton |	aButton _ super dismissButton.	aButton setBalloonText: 'Click here to remove this tool from the screen; you can get another one any time you want from the Widgets flap'.	^ aButton! !!AllScriptsTool methodsFor: 'initialization' stamp: 'sw 11/13/2001 19:43'!initializeFor: ignored	"Initialize the receiver as a tool which shows, and allows the user to change the status of, all the instantiations of all the user-written scripts in the scope of the containing pasteup's presenter"	| aRow |	showingOnlyActiveScripts _ true.	showingAllInstances _ true.	showingOnlyTopControls _ true.	self color: Color brown muchLighter muchLighter; wrapCentering: #center; cellPositioning: #topCenter; vResizing: #shrinkWrap; hResizing: #shrinkWrap.	self useRoundedCorners.	self borderWidth: 4; borderColor: Color brown darker.	aRow _ AlignmentMorph newRow.	aRow listCentering: #justified; color: Color transparent.	aRow addMorphFront: self dismissButton.	aRow addMorphBack: ScriptingSystem scriptControlButtons.	aRow addMorphBack: self openUpButton.	self addMorphFront: aRow.! !!AllScriptsTool methodsFor: 'initialization' stamp: 'sw 11/13/2001 16:51'!presentHelp	"Sent when a Help button is hit; provide the user with some form of help for the tool at hand"	| aString |	aString _ 'This tool allows you to see all the scripts for all the objects in this project.Sometimes you are only interested in those scripts that are ticking, or that are *ready* to tick when you hit the GO button (which are said to be "paused.")Check "tickers only" if you only want to see such scripts -- i.e., scripts that are either paused or ticking.If "tickers only" is *not* checked, then all scripts will be shown, whatever their status.The other checkbox, labeled "all instances", only comes into play if you have created "multiple sibling instances" (good grief) of the same object, which share the same scripts; if you have such things, it is often convenient to see the scripts of just *one* such sibling, because it will take up less space and require less mindshare -- and note that you can control a script for an object *and* all its siblings from the menu of that one that you see, via menu items such as "propagate status to siblings".If "all instances" is checked, scripts for all sibling instances will be shown, whereas if "all instances" is *not* checked, only one of each group of siblings will be selected to have its scripts shown.But how do you get "multiple sibling instances" of the same object?  There are several ways:(1)  Use the "make a sibling instance" or the "make multiple siblings..." menu item in the halo menu of a scripted object(2)  Use the "copy" tile in a script.(3)  Request "give me a copy now" from the menu associated with the "copy" item in a ViewerIf you have on your screen multiple sibling instances of the same object, then you may or may want to see them all in the All Scripts tool, and that is what the "all instances" checkbox governs.Set "all instances" if you want a separate entry for each instance, asopposed to a single representative of that kind of object.Note that if you obtain a copy of an object by using the green halo handle, it will *not* be a sibling instance of the original.  It will in many ways seem to be, because it will start out its life having the same scripts as the original.  But it will then lead an independent life, so that changes to scripts of the original will not be reflected in it, and vice-versa.This is an important distinction, and an unavoidable one because people sometimes want the deep sharing of sibling instances and sometimes they clearly do not.  But the truly understandable description of these concepts and distinctions certainly lies *ahead* of us!!'.	(StringHolder new contents: aString)		openLabel: 'About the All Scripts tool'! !!AllScriptsTool methodsFor: 'toggles' stamp: 'sw 11/13/2001 18:35'!openUpButton	"Answer a button whose action would be to open up the receiver or snap it back closed"	| aButton |	aButton _ SimpleButtonMorph new.	aButton		target: self topRendererOrSelf;		color: (Color r: 0.452 g: 0.839 b: 0.935);		label: '¼' font: Preferences standardButtonFont;		actionSelector: #toggleWhetherShowingOnlyTopControls;		setBalloonText: 'open or close the lower portion that shows individual scripts'.	^ aButton! !!AllScriptsTool methodsFor: 'toggles' stamp: 'sw 11/13/2001 19:43'!showingOnlyTopControls	"Answer whether the receiver is currently showing only the top controls" 	^ showingOnlyTopControls ifNil: [showingOnlyTopControls _ true]! !!AllScriptsTool methodsFor: 'toggles' stamp: 'sw 11/14/2001 00:32'!toggleWhetherShowingAllInstances	"Toggle whether the receiver is showing all instances or only one exemplar per uniclass"	showingAllInstances _ showingAllInstances not.	self presenter reinvigorateAllScriptsTool: self! !!AllScriptsTool methodsFor: 'toggles' stamp: 'sw 11/14/2001 00:32'!toggleWhetherShowingOnlyActiveScripts	"Toggle whether the receiver is showing only active scripts"	showingOnlyActiveScripts _ showingOnlyActiveScripts not.	self presenter reinvigorateAllScriptsTool: self! !!AllScriptsTool methodsFor: 'toggles' stamp: 'sw 11/14/2001 00:32'!toggleWhetherShowingOnlyTopControls	"Toggle whether the receiver is showing only the stop/step/go line or the full whammy"	| aCenter |	showingOnlyTopControls _ self showingOnlyTopControls not.	aCenter _ self center x.	self showingOnlyTopControls		ifTrue:			[self removeAllButFirstSubmorph]		ifFalse:			[self addSecondLineOfControls.			self presenter reinvigorateAllScriptsTool: self].	WorldState addDeferredUIMessage:		[self center: (aCenter @ self center y)]	! !!AllScriptsTool methodsFor: 'stepping' stamp: 'sw 11/14/2001 00:31'!step	"If the list of scripts to show has changed, refresh my contents"	self showingOnlyTopControls ifFalse:		[self presenter reinvigorateAllScriptsTool: self].! !!AllScriptsTool class methodsFor: 'parts bin' stamp: 'sw 11/13/2001 19:44'!defaultNameStemForInstances	"Answer the default name stem for new instances of this class"	^ 'All Scripts'! !!AllScriptsTool class methodsFor: 'parts bin' stamp: 'sw 11/13/2001 18:31'!descriptionForPartsBin	"Answer a description for use in parts bins"	^ self partName: 	'All Scripts'		categories:		#('Scripting')		documentation:	'A tool allowing you to monitor and change the status of all scripts in your project'! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 11/13/2001 19:45'!quadsDefiningWidgetsFlap	"Answer a structure defining the default Widgets flap"	^ #(	(TrashCanMorph			new						'Trash'				'A tool for discarding objects')	(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you see and control all the running scripts in your project')	(PaintInvokingMorph	new						'Paint'				'Drop this into an area to start making a fresh painting there')	(GeeMailMorph			new						'Gee-Mail'			'A place to present annotated content')	(RecordingControlsMorph	authoringPrototype		'Sound'				'A device for making sound recordings.')	(MPEGMoviePlayerMorph	authoringPrototype		'Movie Player'		'A Player for MPEG movies')	(FrameRateMorph		authoringPrototype			'Frame Rate'		'An indicator of how fast your system is running')	(MagnifierMorph		newRound					'Magnifier'			'A magnifying glass')	(ScriptingSystem		newScriptingSpace			'Scripting'			'A confined place for drawing and scripting, with its own private stop/step/go buttons.')	(ScriptingSystem		holderWithAlphabet			'Alphabet'			'A source for single-letter objects')	(BouncingAtomsMorph	new						'Bouncing Atoms'	'Atoms, mate')	(ObjectsTool				newStandAlone				'Morph Catalog'		'A tool that lets you browse the catalog of morphs')	)! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:17'!allGoButtons	"Answer a list of all script-controlling Go buttons within my scope"	^ associatedMorph allMorphs select:		[:aMorph | (aMorph isKindOf: ThreePhaseButtonMorph) and:			[aMorph actionSelector == #goUp:with:]]	"ActiveWorld presenter allGoButtons"! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:19'!allStepButtons	"Answer a list of all the script-controlling Step buttons within my scope"	^ associatedMorph allMorphs select:		[:aMorph | (aMorph isKindOf: ThreePhaseButtonMorph) and:			[aMorph actionSelector == #stepStillDown:with:]]	"ActiveWorld presenter allStepButtons"! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:18'!allStopButtons	"Answer a list of all script-controlling Stop buttons within my scope"	^ associatedMorph allMorphs select:		[:aMorph | (aMorph isKindOf: ThreePhaseButtonMorph) and:			[aMorph actionSelector == #stopUp:with:]]	"ActiveWorld presenter allStopButtons"! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:08'!goButtonState: newState	"Get all go buttons in my scope to show the correct state"	self allGoButtons do:		[:aButton | aButton state: newState]! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 18:43'!startRunningScripts	"Start running scripts; get stop-step-go buttons to show the right thing"	self stopButtonState: #off.	self stepButtonState: #off.	self goButtonState: #on.	associatedMorph startRunningAll.	"associatedMorph borderColor: Preferences borderColorWhenRunning."	ThumbnailMorph recursionReset.  "needs to be done once in a while (<- tk note from 1997)"! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 18:43'!startRunningScriptsFrom: ignored	"Start running all scripts.  Get all script-control buttons to show the right thing."	self startRunningScripts! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:10'!stepButtonState: newState	"Get all step buttons in my scope to show the correct state"	self allStepButtons do:		[:aButton | aButton state: newState]! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:06'!stepStillDown: dummy with: theButton	"The step button is still down; get temporary button feedback right and step all and then get all button feedback right again"	self stepButtonState: #pressed.	self stopButtonState: #off.	associatedMorph stepAll.	associatedMorph world displayWorld.	self stepButtonState: #off.	self stopButtonState: #on! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:06'!stepUp: evt with: aMorph	"The step button came up; get things right"	self stepButtonState: #off! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 14:08'!stopButtonState: newState	"Get all stop buttons in my scope to show the correct state"	self allStopButtons do:		[:aButton | aButton state: newState]! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 18:42'!stopRunningScripts	"Put all ticking scripts within my scope into paused mode.  Get any scripting-control buttons to show the correct state"	self stopButtonState: #on.	self stepButtonState: #off.	self goButtonState: #off.	associatedMorph stopRunningAll.	"associatedMorph borderColor: Preferences borderColorWhenStopped"! !!Presenter methodsFor: 'stop-step-go buttons' stamp: 'sw 11/13/2001 18:42'!stopRunningScriptsFrom: ignored	"Stop running scripts; get all script-control buttons to reflect this"	self stopRunningScripts! !!Presenter methodsFor: 'playerList' stamp: 'sw 11/14/2001 00:31'!reinvigorateAllScriptsTool: anAllScriptsTool 	"Rebuild the contents of an All Scripts tool"	| showingOnlyActiveScripts candidateList firstTwo oldList allExtantPlayers newList morphList |	showingOnlyActiveScripts _ anAllScriptsTool showingOnlyActiveScripts.	self flushPlayerListCache.	"needed? Probably to pick up on programmatical script-status control only"	firstTwo _ {anAllScriptsTool submorphs first.  anAllScriptsTool submorphs second}.	oldList _ (anAllScriptsTool submorphs copyFrom: 3 to: anAllScriptsTool submorphs size) collect:		[:aRow |			(aRow findA: UpdatingSimpleButtonMorph) target].	allExtantPlayers _ self allExtantPlayers.	anAllScriptsTool showingAllInstances "take all instances of all classes"		ifTrue:			[candidateList _ allExtantPlayers]  		ifFalse:  "include only one exemplar per uniclass.  Try to get one that has some qualifying scripts"			[candidateList _ Set new.			allExtantPlayers do:				[:aPlayer |					(candidateList detect: [:plyr | plyr isMemberOf:  aPlayer class] ifNone: [nil]) ifNil:						[aPlayer instantiatedUserScriptsDo: [:aScriptInstantiation |							(showingOnlyActiveScripts not or: [aScriptInstantiation pausedOrTicking]) 								ifTrue:									[candidateList add: aPlayer]]]]].	newList _ OrderedCollection new.	candidateList do:		[:aPlayer | aPlayer instantiatedUserScriptsDo:			[:aScriptInstantiation |				(showingOnlyActiveScripts not or: [aScriptInstantiation pausedOrTicking]) ifTrue:					[newList add: aScriptInstantiation]]].	oldList asSet = newList asSet		ifFalse:			[anAllScriptsTool removeAllMorphs; addAllMorphs: firstTwo.			morphList _ newList collect:				[:aScriptInstantiation |  aScriptInstantiation statusControlRowIn: anAllScriptsTool].			anAllScriptsTool addAllMorphs: morphList.			newList do:				[:aScriptInstantiation | aScriptInstantiation updateAllStatusMorphs]]! !!ScriptInstantiation methodsFor: 'running' stamp: 'sw 11/13/2001 10:33'!pausedOrTicking	"Answer true if the receiver is either in paused or ticking status, false otherwise"	^ #(paused ticking) includes: status! !!ScriptInstantiation methodsFor: 'misc' stamp: 'sw 11/12/2001 19:39'!assignStatusToAllSiblings	"Let all sibling instances of my player have the same status that I do"	(player class allInstances copyWithout: player) do:		[:aPlayer |			(aPlayer scriptInstantiationForSelector: selector) status: status;				updateAllStatusMorphs]! !!ScriptInstantiation methodsFor: 'misc' stamp: 'sw 11/14/2001 00:32'!assignStatusToAllSiblingsIn: aStatusViewer	"Let all sibling instances of my player have the same status that I do"	self assignStatusToAllSiblings.	self updateAllStatusMorphs.	aStatusViewer presenter reinvigorateAllScriptsTool: aStatusViewer ! !!ScriptInstantiation methodsFor: 'misc' stamp: 'sw 11/13/2001 18:28'!offerMenuIn: aStatusViewer	"Put up a menu."	| aMenu |	ActiveHand showTemporaryCursor: nil.	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: player knownName, ' ', selector.	aMenu addStayUpItem.	(player class instanceCount > 1) ifTrue:		[aMenu add: 'propagate status to siblings' selector: #assignStatusToAllSiblingsIn: argument: aStatusViewer.		aMenu balloonTextForLastItem: 'Make the status of this script in all of my sibling instances be the same as the status you see here'].	aMenu add: 'reveal this object' target: player selector: #revealPlayerIn: argument: ActiveWorld.	aMenu balloonTextForLastItem: 'Make certain this object is visible on the screen; flash its image for a little while, and give it the halo.'.	aMenu add: 'open this script''s Scriptor' target: player selector: #grabScriptorForSelector:in: argumentList: {selector. aStatusViewer world}.	aMenu balloonTextForLastItem: 'Open up the Scriptor for this script'.	aMenu add: 'open this object''s Viewer' target: player selector: #beViewed.	aMenu balloonTextForLastItem: 'Open up a Viewer for this object'.	aMenu addLine.	aMenu add: 'more...' target: self selector: #offerShiftedMenuIn: argument: aStatusViewer.	aMenu balloonTextForLastItem: 'The "more..." branch offers you menu items that are less frequently used.'.	aMenu popUpInWorld: ActiveWorld! !!ScriptInstantiation methodsFor: 'misc' stamp: 'sw 11/13/2001 18:45'!statusControlRowIn: aStatusViewer	"Answer an object that reports my status and lets the user change it"	| aRow aMorph buttonWithPlayerName |	aRow _ ScriptStatusLine newRow beTransparent.	buttonWithPlayerName _ UpdatingSimpleButtonMorph new.	buttonWithPlayerName		on: #mouseEnter send: #menuButtonMouseEnter: to: buttonWithPlayerName;		 on: #mouseLeave send: #menuButtonMouseLeave: to: buttonWithPlayerName.	buttonWithPlayerName target: self; wordingSelector: #playersExternalName; actionSelector: #offerMenuIn:; arguments: {aStatusViewer}; beTransparent; actWhen: #buttonDown.	buttonWithPlayerName setBalloonText: 'This is the name of the player to which this script belongs; if you click here, you will get a menu of interesting options pertaining to this player and script'.	buttonWithPlayerName borderWidth: 1; borderColor: Color blue.	aRow addMorphBack: buttonWithPlayerName.	aRow addTransparentSpacerOfSize: 10@0.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	aMorph _ UpdatingStringMorph on: self selector: #selector.	aMorph color: Color brown lighter; useStringFormat.	aMorph setBalloonText: 'This is the name of the script to which this entry pertains.'.	aRow addMorphBack: aMorph.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	aRow addTransparentSpacerOfSize: 10@0.	aRow addMorphBack: self statusControlMorph.	aRow submorphsDo: [:m | m wantsSteps ifTrue: [m step]].	^ aRow! !!ScriptInstantiation methodsFor: 'status control' stamp: 'sw 11/13/2001 14:21'!status: newStatus	"Set the receiver's status as indicated"	| stati actualMorph |	actualMorph _ player costume renderedMorph.	stati _ ScriptingSystem standardEventStati.	(stati includes: status) ifTrue:		[actualMorph on: status send: nil to: nil.  			"remove old link in event handler"		status == #mouseStillDown ifTrue:			[actualMorph on: #mouseDown send: nil to: nil]].	(stati includes: newStatus) ifTrue:		[actualMorph on: newStatus send: selector to: player.  "establish new link in evt handler"		newStatus == #mouseStillDown ifTrue:			[actualMorph on: #mouseDown send: selector to: player]].	status _ newStatus.	self pausedOrTicking ifTrue: [lastTick _ nil].	self flag: #arNote.  "this from fall 2000"	self flag: #workaround. "Code below was in #chooseTriggerFrom: which did not reflect status changes from other places (e.g., the stepping/pause buttons). It is not clear why this is necessary though - theoretically, any morph should step when it has a player but alas!! something is broken and I have no idea why and where.""14 feb 2001 - bob - I reinstated this after alan noticed that a newly drawn car would not go until you picked it up and dropped it. The reason is that unscripted players have #wantSteps ^false. If a morph enters the world with an unscripted player and then acquires a scripted player, that would be a good time to change, but this will work too"	status == #ticking ifTrue:		[player costume isStepping ifFalse: [player costume arrangeToStartStepping]]! !!ScriptInstantiation methodsFor: 'status control' stamp: 'sw 11/13/2001 10:35'!updateStatusMorph: statusControlMorph	"the status control may need to reflect an externally-induced change in status"	|  statusSymbol colorSelector statusReadoutButton |	statusControlMorph ifNil: [^ self].	statusSymbol _ self status.	self pausedOrTicking		ifTrue:			[statusControlMorph assurePauseTickControlsShow]		ifFalse:			[statusControlMorph maybeRemovePauseTickControls].	statusReadoutButton _ statusControlMorph submorphs last.	colorSelector _ ScriptingSystem statusColorSymbolFor: statusSymbol.	statusReadoutButton color: (Color perform: colorSelector) muchLighter.	statusReadoutButton label: statusSymbol asString font: Preferences standardButtonFont! !!ScriptStatusLine methodsFor: 'event handling' stamp: 'sw 11/13/2001 17:45'!wantsKeyboardFocusFor: aSubmorph	"No thanks"	^ false! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 11/13/2001 14:41'!newScriptingSpace2	"Answer a complete scripting space"	| aTemplate  aPlayfield aControl |		(aTemplate _ PasteUpMorph new)		setNameTo: 'etoy';		extent: 638 @ 470;		color: Color white;		impartPrivatePresenter;		setProperty: #automaticPhraseExpansion toValue: true;		beSticky.	aTemplate useRoundedCorners; borderWidth: 2. 	aControl _  ScriptingSystem scriptControlButtons setToAdhereToEdge: #bottomLeft.	aControl beSticky; borderWidth: 0; beTransparent.	aTemplate addMorphBack: aControl.	aTemplate presenter addTrashCan.	aTemplate addMorph: (aPlayfield _ PasteUpMorph new).	aPlayfield		setNameTo: 'playfield';		useRoundedCorners;		setToAdhereToEdge: #topLeft;		extent: 340@300;		position: aTemplate topRight - (400@0);		beSticky;		automaticViewing: true;		wantsMouseOverHalos: true.	aTemplate presenter standardPlayfield: aPlayfield.		^ aTemplate! !Presenter removeSelector: #addStopStepGoButtons!Presenter removeSelector: #addStopStepGoButtonsTo:!Presenter removeSelector: #goButton!Presenter removeSelector: #updateContentsFor:!Object subclass: #Presenter	instanceVariableNames: 'associatedMorph standardPlayer standardPlayfield standardPalette playerList '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!AlignmentMorph subclass: #AllScriptsTool	instanceVariableNames: 'showingOnlyActiveScripts showingAllInstances showingOnlyTopControls '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!"Postscript:"Preferences okToReinitializeFlaps ifTrue:	[Flaps replaceWidgetsFlap].!