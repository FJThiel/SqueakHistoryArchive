'From Squeak3.7beta of ''1 April 2004'' [latest update: #5905] on 29 April 2004 at 11:22:40 am'!"Change Set:		FileListFileOpenFix-nk (v2)Date:				29 April 2004Author:			Ned KonzFixes the FileList so it doesn't open files unless you choose an action requiring a file to be opened.v2 makes it possible for the services to be used from the ArchiveViewer (using the companion ServicesInArchiveViewer-nk changset).(Removed StringHolder>>browserVersions from this changeset, it caused bugs when browsing versions because 'self class isPseudoSelector: ...' may not be the MessageSet class, which is the only implementor of isPseudoSelector:. -dew)"!!AnimatedImageMorph class methodsFor: 'fileIn/Out' stamp: 'nk 4/29/2004 10:35'!serviceOpenGIFInWindow	"Answer a service for opening a gif graphic in a window"	^ (SimpleServiceEntry 		provider: self 		label: 'open graphic in a window'		selector: #openGIFInWindow:		description: 'open a GIF graphic file in a window'		buttonLabel: 'open')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!CustomMenu methodsFor: 'compatibility' stamp: 'nk 2/15/2004 16:19'!addService: aService for: serviceUser	"Append a menu item with the given service. If the item is selected, it will perform the given service."	aService addServiceFor: serviceUser toMenu: self.! !!CustomMenu methodsFor: 'compatibility' stamp: 'nk 2/15/2004 16:02'!addServices2: services for: served extraLines: linesArray	services withIndexDo: [:service :i |		service addServiceFor: served toMenu: self.		(linesArray includes: i)  ifTrue: [self addLine] ]! !!MenuMorph methodsFor: 'accessing' stamp: 'nk 2/15/2004 16:20'!lastItem	^ submorphs reverse detect: [ :m | m isKindOf: MenuItemMorph ]! !!MenuMorph methodsFor: 'construction' stamp: 'nk 2/15/2004 16:19'!addService: aService for: serviceUser	"Append a menu item with the given service. If the item is selected, it will perform the given service."	aService addServiceFor: serviceUser toMenu: self.! !!MenuMorph methodsFor: 'construction' stamp: 'nk 2/15/2004 16:11'!addServices2: services for: served extraLines: linesArray	services withIndexDo: [:service :i |		service addServiceFor: served toMenu: self.		self lastItem setBalloonText: service description.		(linesArray includes: i)  ifTrue: [self addLine] ]! !!SimpleServiceEntry methodsFor: 'performing service' stamp: 'nk 2/15/2004 16:04'!buttonToTriggerIn: aFileList	"Answer a button that will trigger the receiver service in a file list"	| aButton |	aButton _  PluggableButtonMorph					on: self					getState: nil					action: #performServiceFor:.	aButton 		arguments: { aFileList }.	aButton		color: Color transparent;		hResizing: #spaceFill;		vResizing: #spaceFill;		useRoundedCorners;		label: self buttonLabel;		askBeforeChanging: true;		onColor: Color transparent offColor: Color transparent.		aButton setBalloonText: self description.		Preferences alternativeWindowLook			ifTrue:				[aButton borderWidth: 2; borderColor: #raised].	^ aButton! !!SimpleServiceEntry methodsFor: 'performing service' stamp: 'nk 2/15/2004 16:15'!performServiceFor: anObject	"carry out the service I provide"	^selector numArgs = 0		ifTrue: [provider perform: selector]		ifFalse: [provider perform: selector with: (self getArgumentsFrom: anObject) ]! !!SimpleServiceEntry methodsFor: 'services menu' stamp: 'nk 2/15/2004 16:16'!addServiceFor: served toMenu: aMenu	aMenu add: self label 		target: self 		selector: self requestSelector 		argument: served.	self useLineAfter ifTrue: [ aMenu addLine ].! !!Stream methodsFor: 'accessing' stamp: 'nk 4/29/2004 10:38'!localName	^'a stream'! !!Stream methodsFor: 'accessing' stamp: 'nk 4/29/2004 10:40'!openReadOnly	^self! !!Stream methodsFor: 'accessing' stamp: 'nk 4/29/2004 10:41'!readOnly	^self! !!ChangeList class methodsFor: 'fileIn/Out' stamp: 'nk 4/29/2004 10:35'!serviceBrowseChangeFile	"Answer a service for opening a changelist browser on a file"	^ (SimpleServiceEntry 		provider: self 		label: 'changelist browser'		selector: #browseStream:		description: 'open a changelist tool on this file'		buttonLabel: 'changes')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'nk 4/29/2004 10:35'!serviceBrowseCode	"Answer the service of opening a file-contents browser"	^ (SimpleServiceEntry		provider: self 		label: 'code-file browser'		selector: #browseStream:		description: 'open a "file-contents browser" on this file, allowing you to view and selectively load its code'		buttonLabel: 'code')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!FileContentsBrowser class methodsFor: 'instance creation' stamp: 'nk 4/29/2004 10:35'!serviceBrowseCompressedCode	"Answer a service for opening a changelist browser on a file"	^ (SimpleServiceEntry 		provider: self 		label: 'code-file browser'		selector: #browseCompressedCodeStream:		description: 'open a "file-contents browser" on this file, allowing you to view and selectively load its code'		buttonLabel: 'code')		argumentGetter: [ :fileList | fileList readOnlyStream ]! !!FileList methodsFor: 'file list' stamp: 'nk 4/29/2004 10:34'!readOnlyStream	"Answer a read-only stream on the selected file. For the various stream-reading services."	^self directory ifNotNilDo: [ :dir | dir readOnlyFileNamed: self fileName ]! !!FileList methodsFor: 'file list menu' stamp: 'nk 2/15/2004 16:06'!fullFileListMenu: aMenu shifted: aBoolean	"Fill the menu with all possible items for the file list pane, regardless of selection."	| lastProvider |	aMenu title: 'all possible file operations'.	Smalltalk isMorphic ifTrue: [aMenu addStayUpItemSpecial].	lastProvider _ nil.	(self itemsForFile: 'a.*') do: [ :svc |		(lastProvider notNil and: [svc provider ~~ lastProvider])			ifTrue: [ aMenu addLine ].		svc addServiceFor: self toMenu: aMenu.		Smalltalk isMorphic ifTrue: [aMenu submorphs last setBalloonText: svc description].		lastProvider _ svc provider.		svc addDependent: self.	].	^aMenu! !!FileList2 methodsFor: 'user interface' stamp: 'nk 2/15/2004 16:07'!blueButtonForService: aService textColor: textColor inWindow: window	| block |	block _ [ aService performServiceFor: self ] copy fixTemps.	^(window fancyText: aService buttonLabel capitalized ofSize: 15 color: textColor)		setProperty: #buttonText toValue: aService buttonLabel capitalized;		hResizing: #rigid;		extent: 100@20;		layoutInset: 4;		borderWidth: 0;		useRoundedCorners;		setBalloonText: aService label;		on: #mouseUp send: #value to: block ! !FileList removeSelector: #blockToGetArgArrayFrom:!