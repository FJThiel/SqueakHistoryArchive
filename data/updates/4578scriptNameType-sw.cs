'From Squeak3.2alpha of 3 October 2001 [latest update: #4576] on 3 December 2001 at 9:52:25 pm'!"Change Set:		scriptNameType-swDate:			3 December 2001Author:			Scott WallaceAdds a 'ScriptName' data type, to hold script names, and substitutes this for String-type in certain commands in the etoy system, all in the 'scripting' category.There are two UIs provided for changing the values on these ScriptName tiles -- you can use the up/down arrows to cycle among the choices, or you can click right on the script-name to get a popup of all known script names, from which you can choose any one directly.Also fixes a bug in update 4535 that had blocked out access to the 'scripting' category in viewers."!SymbolListType subclass: #ScriptNameType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Protocols-Type Vocabularies'!!ScriptNameType commentStamp: 'sw 12/3/2001 21:44' prior: 0!ScriptNameType is a data type representing selectors of user-written scripts.  The choices offered as values for data of this type are all the symbols that are implemented as names of user-written scripts in the current project.!!Morph class methodsFor: 'scripting' stamp: 'sw 12/3/2001 19:37'!additionsToViewerCategories	"Answer a list of (<categoryName> <list of category specs>) pairs that characterize the phrases this kind of morph wishes to add to various Viewer categories."	^ {		self additionsToViewerCategoryBasic.		self additionsToViewerCategoryScripts.		self additionsToViewerCategoryColorAndBorder.		self additionsToViewerCategoryGeometry.		self additionsToViewerCategoryMiscellaneous.		self additionsToViewerCategoryMotion.		self additionsToViewerCategoryPenUse.		self additionsToViewerCategoryLayout.		self additionsToViewerCategoryDragAndDrop.		self additionsToViewerCategoryScripting.		self additionsToViewerCategoryTests.	}! !!Morph class methodsFor: 'scripting' stamp: 'sw 12/3/2001 19:22'!additionsToViewerCategoryScripting	"Answer viewer additions for the 'scripting' category"	^#(		scripting 		(			(command startScript: 'start the given script ticking' ScriptName)			(command pauseScript: 'make the given script be "paused"' ScriptName)			(command stopScript: 'make the given script be "normal"' ScriptName)			(command startAll: 'start the given script ticking in the object and all of its siblings.' ScriptName)			(command pauseAll: 'make the given script be "paused" in the object and all of its siblings' ScriptName)			(command stopAll: 'make the given script be "normal" in the object and all of its siblings' ScriptName)			(command doScript: 'run the given script once, on the next tick' ScriptName)			(command tellAllSiblings: 'send a message to all siblings' ScriptName)		)	)! !!Presenter methodsFor: 'playerList' stamp: 'sw 12/3/2001 19:11'!allKnownScriptSelectors	"Answer a list of all the selectors implemented by any user-scripted objected within the scope of the receiver"	| aSet allUniclasses |	aSet _ Set with: #script1.	allUniclasses _ (self presenter allPlayersWithUniclasses collect:		[:aPlayer | aPlayer class]) asSet.	allUniclasses do:		[:aUniclass | aSet addAll: aUniclass namedTileScriptSelectors].	^ aSet asSortedArray"ActiveWorld presenter allKnownScriptSelectors"! !!SymbolListTile methodsFor: 'mouse handling' stamp: 'sw 12/3/2001 21:30'!handlesMouseDown: evt	"Answer whether the receiver handles mouse-down"	^ true! !!SymbolListTile methodsFor: 'mouse handling' stamp: 'sw 12/3/2001 20:45'!mouseDownPriority	"Higher-priority than parts donor, so that the tile can offer a popup even when it is in a larger structure, such as a PhraseTileMorph, that itself behaves as a parts donor"	^ 75! !!SymbolListType methodsFor: 'tiles' stamp: 'sw 12/3/2001 19:14'!choices	"answer the list of choices to offer as variant values"	^ symbols copy! !!SymbolListType methodsFor: 'tiles' stamp: 'sw 12/3/2001 19:15'!defaultArgumentTile	"Answer a tile to represent the type"	| aTile choices |	aTile _ SymbolListTile new choices: (choices _ self choices) dataType: self vocabularyName.	aTile addArrows.	aTile setLiteral: choices first.	^ aTile! !!SymbolListType methodsFor: 'tiles' stamp: 'sw 12/3/2001 21:00'!newReadoutTile	"Answer a tile that can serve as a readout for data of this type"	^ SymbolListTile new choices: self choices dataType: self vocabularyName! !!SymbolListType methodsFor: 'initial value' stamp: 'sw 12/3/2001 19:27'!initialValueForASlotFor: aPlayer	"Answer the value to give initially to a newly created slot of the given type in the given player"	^ self choices first! !!ScriptNameType methodsFor: 'initialization' stamp: 'sw 12/3/2001 21:30'!initialize	"Initialize the ScriptNameType vocabulary"	super initialize.	self vocabularyName: #ScriptName! !!ScriptNameType methodsFor: 'queries' stamp: 'sw 12/3/2001 19:12'!choices	"Answer an alphabetized list of known script selectors in the current project"	^ ActiveWorld presenter allKnownScriptSelectors! !!ScriptNameType methodsFor: 'tile' stamp: 'sw 12/3/2001 19:04'!newReadoutTile	"Answer a tile that can serve as a readout for data of this type"	^ SymbolListTile new choices: self choices dataType: self vocabularyName! !!Vocabulary class methodsFor: 'class initialization' stamp: 'sw 12/3/2001 19:01'!initializeStandardVocabularies	"Initialize a few standard vocabularies and place them in the AllStandardVocabularies list."	AllStandardVocabularies _ nil.	self allStandardVocabularies.	self addEToyVocabulary.	self addEToyVectorVocabulary.	self addStandardVocabulary: self newPublicVocabulary.	self addStandardVocabulary: FullVocabulary new.	self addStandardVocabulary: self newQuadVocabulary.	self addStandardVocabulary: ColorType new.	self addStandardVocabulary: BooleanType new.	self addStandardVocabulary: GraphicType new.	self addStandardVocabulary: PlayerType new.	self addStandardVocabulary: SoundType new.	self addStandardVocabulary: StringType new.	self addStandardVocabulary: MenuType new.	self addStandardVocabulary: UnknownType new.	self addStandardVocabulary: ScriptNameType new.	self addStandardVocabulary: (SymbolListType new symbols: #(simple raised inset complexFramed complexRaised complexInset complexAltFramed complexAltRaised complexAltInset); vocabularyName: #BorderStyle; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(leftToRight rightToLeft topToBottom bottomToTop); vocabularyName: #ListDirection; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(topLeft bottomRight center justified); vocabularyName: #ListCentering; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(buttonDown whilePressed buttonUp); vocabularyName: #ButtonPhase; yourself).	self addStandardVocabulary: (SymbolListType new symbols: #(rigid spaceFill shrinkWrap); vocabularyName: #Resizing; yourself).	self addStandardVocabulary: self newSystemVocabulary.  "A custom vocabulary for Smalltalk -- still under development)"	self numberVocabulary.  		"creates and adds it"	self wonderlandVocabulary.  	"creates and adds it"	self vocabularyForClass: Time.   "creates and adds it"	"Vocabulary initialize"! !"Postscript:"Vocabulary initialize.!