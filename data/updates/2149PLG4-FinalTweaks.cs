'From Squeak2.8alpha of 6 February 2000 [latest update: #2121] on 15 May 2000 at 11:42:50 pm'!"Change Set:		PLG4-FinalTweaksDate:			15 May 2000Author:			Andreas RaabA (sort of final) round of tweaks for pluginisation. With the changes, I've been able to compile a working VM with *everything* builtin. No extra files."!InterpreterPlugin subclass: #B3DEnginePlugin	instanceVariableNames: 'loadBBFn copyBitsFn '	classVariableNames: ''	poolDictionaries: 'B3DEngineConstants '	category: 'VMConstruction-Plugins'!!B3DEnginePlugin methodsFor: 'initialize-release' stamp: 'ar 5/15/2000 23:30'!initialiseModule	self export: true.	loadBBFn _ interpreterProxy ioLoadFunction: 'loadBitBltFrom' From: 'BitBltPlugin'.	copyBitsFn _ interpreterProxy ioLoadFunction: 'copyBitsFromtoat' From: 'BitBltPlugin'.	^(loadBBFn ~= 0 and:[copyBitsFn ~= 0])! !!B3DEnginePlugin class methodsFor: 'translation' stamp: 'ar 5/15/2000 22:57'!translate: fileName doInlining: inlineFlag locally: localFlag	"Time millisecondsToRun: [		FloatArrayPlugin translate: 'SqFloatArray.c' doInlining: true.		Smalltalk beep]"	| cg fullName fd |	fullName _ self baseDirectoryName.	fd _ FileDirectory on: fullName.	localFlag ifFalse:[		(fd directoryExists: self moduleName) 			ifFalse:[fd createDirectory: self moduleName].		fd _ fd on: (fd fullNameFor: self moduleName)].	fullName _ fd fullNameFor: fileName.	self initialize.	self headerFile ifNotNil:[		(CrLfFileStream newFileNamed: (fd fullNameFor: self moduleName,'.h'))			nextPutAll: self headerFile;			close].	cg _ self codeGeneratorClass new initialize.	localFlag ifTrue:[cg pluginPrefix: self moduleName].	"Add an extra declaration for module name"	cg var: #moduleName declareC:'const char *moduleName = "', self moduleName,'"'.	{InterpreterPlugin. B3DEnginePlugin. B3DTransformerPlugin. B3DVertexBufferPlugin. B3DShaderPlugin. B3DClipperPlugin. B3DPickerPlugin. B3DRasterizerPlugin} do: 		[:theClass | 		theClass initialize.		cg addClass: theClass.		theClass declareCVarsIn: cg].	cg storeCodeOnFile: fullName doInlining: inlineFlag.	B3DRasterizerPlugin writeSupportCode: true.	^cg! !!B3DRasterizerPlugin methodsFor: 'primitive support' stamp: 'ar 5/15/2000 23:33'!loadRasterizerState: stackIndex	"Load the rasterizer state from the given stack index."	| stateOop obj objPtr objLen |	self var: #objPtr declareC:'void *objPtr'.	stateOop _ interpreterProxy stackObjectValue: stackIndex.	interpreterProxy failed ifTrue:[^false].	((interpreterProxy isPointers: stateOop) and:[(interpreterProxy slotSizeOf: stateOop) >= 10])		ifFalse:[^false].	obj _ interpreterProxy fetchPointer: 0 ofObject: stateOop.	((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])		ifTrue:[^false].	objPtr _ interpreterProxy firstIndexableField: obj.	self cCode:'state.faceAlloc = objPtr'.	obj _ interpreterProxy fetchPointer: 1 ofObject: stateOop.	((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])		ifTrue:[^false].	objPtr _ interpreterProxy firstIndexableField: obj.	self cCode:'state.edgeAlloc = objPtr'.	obj _ interpreterProxy fetchPointer: 2 ofObject: stateOop.	((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])		ifTrue:[^false].	objPtr _ interpreterProxy firstIndexableField: obj.	self cCode:'state.attrAlloc = objPtr'.	obj _ interpreterProxy fetchPointer: 3 ofObject: stateOop.	((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])		ifTrue:[^false].	objPtr _ interpreterProxy firstIndexableField: obj.	self cCode:'state.aet = objPtr'.	obj _ interpreterProxy fetchPointer: 4 ofObject: stateOop.	((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])		ifTrue:[^false].	objPtr _ interpreterProxy firstIndexableField: obj.	self cCode:'state.addedEdges = objPtr'.	obj _ interpreterProxy fetchPointer: 5 ofObject: stateOop.	((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])		ifTrue:[^false].	objPtr _ interpreterProxy firstIndexableField: obj.	self cCode:'state.fillList = objPtr'.	obj _ interpreterProxy fetchPointer: 6 ofObject: stateOop.	obj == interpreterProxy nilObject ifTrue:[		self cCode:'state.nObjects = 0'.		self cCode:'state.objects = NULL'.	] ifFalse:[		((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])			ifTrue:[^false].		objLen _ interpreterProxy slotSizeOf: obj.		objPtr _ interpreterProxy firstIndexableField: obj.		self cCode:'state.objects = (B3DPrimitiveObject **)objPtr'.		self cCode:'state.nObjects = objLen'.	].	obj _ interpreterProxy fetchPointer: 7 ofObject: stateOop.	obj == interpreterProxy nilObject ifTrue:[		self cCode:'state.nTextures = 0'.		self cCode:'state.textures = NULL'.	] ifFalse:[		((interpreterProxy isIntegerObject: obj) or:[(interpreterProxy isWords: obj) not])			ifTrue:[^false].		objLen _ interpreterProxy byteSizeOf: obj.		objPtr _ interpreterProxy firstIndexableField: obj.		self cCode:'state.textures = (B3DTexture *)objPtr'.		self cCode:'state.nTextures = objLen / sizeof(B3DTexture)'.	].	obj _ interpreterProxy fetchPointer: 8 ofObject: stateOop.	obj == interpreterProxy nilObject ifTrue:[		self cCode:'state.spanSize = 0'.		self cCode:'state.spanBuffer = NULL'.	] ifFalse:[		(interpreterProxy fetchClassOf: obj) == (interpreterProxy classBitmap)			ifFalse:[^false].		objLen _ interpreterProxy slotSizeOf: obj.		objPtr _ interpreterProxy firstIndexableField: obj.		self cCode:'state.spanBuffer = (unsigned int *)objPtr'.		self cCode:'state.spanSize = objLen'.	].	obj _ interpreterProxy fetchPointer: 9 ofObject: stateOop.	obj == interpreterProxy nilObject ifTrue:[		self cCode:'state.spanDrawer = NULL'.	] ifFalse:[		(self cCode: '((int (*) (int))loadBBFn)(obj)') ifFalse:[^false].		self cCode:'state.spanDrawer = (b3dDrawBufferFunction) copyBitsFn'.	].	^interpreterProxy failed not! !!B3DRasterizerPlugin class methodsFor: 'translation' stamp: 'ar 5/15/2000 23:12'!declareCVarsIn: cg	cg addHeaderFile:'"b3d.h"'.	cg var: #viewport type: #'B3DPrimitiveViewport'.	cg var: #state type: #'B3DRasterizerState'! !!B3DRasterizerPlugin class methodsFor: 'translation' stamp: 'ar 5/15/2000 23:10'!writeSupportCode: inlineFlag	"B3DRasterizerPlugin writeSupportCode: true"	"B3DRasterizerPlugin writeSupportCode: false"	"Translate all the C support files for the Balloon 3D rasterizer plugin."	| src fs |	#(		(b3dTypesH 'b3dTypes.h')		(b3dAllocH 'b3dAlloc.h')		(b3dHeaderH 'b3d.h')		(b3dInitC 'b3dInit.c')		(b3dAllocC 'b3dAlloc.c')		(b3dRemapC 'b3dRemap.c')		(b3dDrawC 'b3dDraw.c')		(b3dMainC 'b3dMain.c')	) do:[:spec|		src _ self perform: (spec at: 1).		src _ self translateSupportCode: src inlining: inlineFlag.		fs _ CrLfFileStream newFileNamed: (spec at: 2).		fs nextPutAll: src.		fs close.	].! !!B3DShaderPlugin class methodsFor: 'translation' stamp: 'ar 5/15/2000 23:13'!declareCVarsIn: cg	cg var: #litVertex type: #'float*'.	cg var: #primLight type: #'float*'.	cg var: #primMaterial type: #'float*'.	cg var: #l2vDirection declareC: 'double l2vDirection[3]'.	cg var: #l2vSpecDir declareC: 'double l2vSpecDir[3]'.	cg var: #vtxInColor declareC: 'double vtxInColor[4]'.	cg var: #vtxOutColor declareC: 'double vtxOutColor[4]'.	cg var: #l2vDistance type: #'double'.	cg var: #lightScale type: #'double'! !!DSAPlugin class methodsFor: 'plugin translation' stamp: 'ar 5/15/2000 22:51'!moduleName	"Time millisecondsToRun: [		DSAPlugin translateDoInlining: true]"	^ 'DSAPrims' "Yes - it needs to be named this way or else we'll not find it"! !!SoundCodecPlugin class methodsFor: 'accessing' stamp: 'ar 5/15/2000 23:41'!moduleName	"Time millisecondsToRun: [		SoundCodecPlugin translateDoInlining: true]"	^ 'SoundCodecPrims' "Needs to be the name used for module specification..."! !