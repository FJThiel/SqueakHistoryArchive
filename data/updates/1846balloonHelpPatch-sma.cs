'From Squeak2.8alpha of 13 January 2000 [latest update: #1844] on 7 February 2000 at 1:41:33 am'!"Change Set:		balloonHelpPatch-smaDate:			23 December 1999Author:			Stefan Matthias Aust (sma@3plus4.de)Refactored balloon support:  The balloon morph now really finds its best location - this never worked before I think.  Stepping now works even with no target morph.  Furthermore, you can now remove an existing help text again and customize the help text color for your own morphs."!!Morph methodsFor: 'accessing' stamp: 'sma 12/23/1999 13:13'!balloonText	"Answer balloon help text or nil, if no help is available.	NB: subclasses may override such that they programatically construct	the text, for economy's sake, such as model phrases in a Viewer"	| text |	extension == nil ifTrue: [^ nil].	(text _ extension balloonText) ifNotNil: [^ text].	(text _ extension balloonTextSelector)		ifNotNil: [^ (ScriptingSystem helpStringFor: text)			withNoLineLongerThan: Preferences maxBalloonHelpLineLength].	^ nil! !!Morph methodsFor: 'halos and balloon help' stamp: 'sma 12/23/1999 14:11'!balloonColor	^ Display depth <= 2		ifTrue: [Color white]		ifFalse: [Color r: 1.0 g: 1.0 b: 0.6]! !!Morph methodsFor: 'halos and balloon help' stamp: 'sma 12/23/1999 13:24'!editBalloonHelpText	"Modify the receiver's balloon help text."	self editBalloonHelpContent: self balloonText! !!Morph methodsFor: 'halos and balloon help' stamp: 'sma 12/23/1999 13:29'!mouseDownOnHelpHandle: anEvent	"The mouse went down in the show-balloon handle"		| str |	anEvent shiftPressed ifTrue: [^ self editBalloonHelpText].	str _ self balloonText.	str ifNil: [str _ self noHelpString].	self showBalloon: str! !!Morph methodsFor: 'halos and balloon help' stamp: 'sma 12/23/1999 13:32'!setBalloonText: stringOrText	"Set receiver's balloon help text. Pass nil to remove the help."	self setBalloonText: stringOrText maxLineLength: Preferences maxBalloonHelpLineLength! !!Morph methodsFor: 'halos and balloon help' stamp: 'sma 12/23/1999 13:34'!setBalloonText: stringOrText maxLineLength: aLength	"Set receiver's balloon help text. Pass nil to remove the help."	(extension isNil and: [stringOrText isNil]) ifTrue: [^ self].	self assureExtension balloonText: (stringOrText		ifNil: [nil]		ifNotNil: [stringOrText withNoLineLongerThan: aLength])! !!Morph methodsFor: 'halos and balloon help' stamp: 'sma 12/23/1999 20:07'!showBalloon: msgString	"Pop up a balloon containing the given string,	first removing any existing BalloonMorphs in the world."	| w balloon worldBounds |	(w _ self world) ifNil: [^ self].	w submorphsDo: [:m | (m isKindOf: BalloonMorph) ifTrue: [m delete]].	balloon _ BalloonMorph string: msgString for: self.	balloon lock.	w addMorphFront: balloon.	"So that if the translation below makes it overlap the receiver, it won't	interfere with the rootMorphsAt: logic and hence cause flashing.  Without	this, flashing happens, believe me!!"	((worldBounds _ w bounds) containsRect: balloon bounds) ifFalse:		[balloon bounds: (balloon bounds translatedToBeWithin: worldBounds)].	self setProperty: #balloon toValue: balloon! !!Morph methodsFor: 'halos and balloon help' stamp: 'sma 12/23/1999 13:24'!wantsBalloon	"Answer true if receiver wants to show a balloon help text is a few moments." 	^ self balloonText notNil! !!BalloonMorph reorganize!('initialization' initialize)('stepping' step stepTime)('private' adjustedCenter setTarget:)!!BalloonMorph methodsFor: 'initialization' stamp: 'sma 12/23/1999 14:09'!initialize	super initialize.	color _ Color paleYellow.	borderColor _ Color black.	borderWidth _ 1! !!BalloonMorph methodsFor: 'stepping' stamp: 'sma 12/23/1999 14:05'!step	"Move with target."	target ifNotNil: [self position: target position + offsetFromTarget].! !!BalloonMorph methodsFor: 'private' stamp: 'sma 12/23/1999 14:06'!setTarget: aMorph	(target _ aMorph) ifNotNil: [offsetFromTarget _ self position - target position]! !!BalloonMorph class reorganize!('instance creation' string:for: string:for:corner:)('private' getBestLocation:for:corner: getTextMorph: getVertices:)('utility' balloonFont chooseBalloonFont setBalloonFontTo:)!!BalloonMorph class methodsFor: 'instance creation' stamp: 'sma 12/23/1999 20:05'!string: str for: morph	^ self string: str for: morph corner: #bottomLeft! !!BalloonMorph class methodsFor: 'instance creation' stamp: 'sma 12/23/1999 20:04'!string: str for: morph corner: cornerName	"Make up and return a balloon for morph.  Find the quadrant that	clips the text the least, using cornerName as a tie-breaker.  tk 9/12/97"	| tm vertices |	tm _ self getTextMorph: str.	vertices _ self getVertices: tm bounds.	vertices _ self getBestLocation: vertices for: morph corner: cornerName.	^ self new		color: morph balloonColor;		setVertices: vertices;		addMorph: tm;		setTarget: morph! !!BalloonMorph class methodsFor: 'private' stamp: 'sma 12/23/1999 20:02'!getBestLocation: vertices for: morph corner: cornerName	"Try four rel locations of the balloon for greatest unclipped area"	| rect maxArea verts rectCorner morphPoint mbc a mp dir bestVerts |	rect _ vertices first rect: (vertices at: 5).	maxArea _ 0.	verts _ vertices.	1 to: 4 do: [:i |		dir _ #(vertical horizontal) atWrap: i.		verts _ verts collect: [:p | p flipBy: dir centerAt: rect center].		rectCorner _ #(bottomLeft bottomRight topRight topLeft) at: i.		morphPoint _ #(topCenter topCenter bottomCenter bottomCenter) at: i.		a _ ((rect			align: (rect perform: rectCorner)			with: (mbc _ morph boundsInWorld perform: morphPoint))				intersect: (0@0 extent: morph world viewBox extent)) area.		(a > maxArea or: [a = rect area and: [rectCorner = cornerName]]) ifTrue:			[maxArea _ a.			bestVerts _ verts.			mp _ mbc]].	^ bestVerts collect: [:p | p + (mp - bestVerts first)] "Inlined align:with:"! !!BalloonMorph class methodsFor: 'private' stamp: 'sma 12/23/1999 15:35'!getTextMorph: aStringOrMorph	"Construct text morph."	| m text |	aStringOrMorph isMorph		ifTrue: [m _ aStringOrMorph]		ifFalse:			[BalloonFont				ifNil: [text _ aStringOrMorph]				ifNotNil: [text _ Text					string: aStringOrMorph					attribute: (TextFontReference toFont: BalloonFont)].			m _ (TextMorph new contents: text) centered].	m setToAdhereToEdge: #center.	^ m! !!BalloonMorph class methodsFor: 'private' stamp: 'sma 12/23/1999 15:34'!getVertices: bounds	"Construct vertices for a balloon up and to left of anchor"	| corners |	corners _ bounds corners atAll: #(1 4 3 2).	^ (Array		with: corners first + (0 - bounds width // 3 @ 0)		with: corners first + (0 - bounds width // 6 @ (bounds height // 2))) , corners! !