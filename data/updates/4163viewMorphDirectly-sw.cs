'From Squeak3.1alpha of 28 February 2001 [latest update: #4161] on 20 June 2001 at 4:11:29 pm'!"Change Set:		viewMorphDirectly-swDate:			20 June 2001Author:			Scott WallaceAdds a command in the menu of the viewer that is looking at a morph/player to view the morph itself directly, i.e. without the mediation of the player."!!MessageSend methodsFor: 'tiles' stamp: 'sw 6/20/2001 14:17'!stringFor: anObject	"Return a string suitable for compiling.  Literal or reference from global ref dictionary.  self is always named via the ref dictionary."	| generic aName |	anObject isLiteral ifTrue: [^ anObject printString].	anObject class == Color ifTrue: [^ anObject printString].	anObject class superclass == Boolean ifTrue: [^ anObject printString].	anObject class == BlockContext ifTrue: [^ '[''do nothing'']'].	"default block"		"Real blocks need to construct tiles in a different way"	anObject class isMeta ifTrue: ["a class" ^ anObject name].	generic _ anObject knownName.	"may be nil or 'Ellipse' "	aName _ anObject uniqueNameForReference.	generic ifNil:		[(anObject respondsTo: #renameTo:) 			ifTrue: [anObject renameTo: aName]			ifFalse: [aName _ anObject storeString]].	"for Fraction, LargeInt, etc"	^ aName! !!Player methodsFor: 'misc' stamp: 'sw 6/20/2001 12:53'!offerAlternateViewerMenuFor: aViewer event: evt	"Put up an alternate Viewer menu on behalf of the receiver."	| aMenu aWorld  |	aWorld _ aViewer world.	aMenu _ MenuMorph new defaultTarget: self.	costumes ifNotNil:		[(costumes size > 1 or: [costumes size == 1 and: [costumes first ~~ costume renderedMorph]])			ifTrue:				[aMenu add: 'forget other costumes' target: self selector: #forgetOtherCostumes]].	aMenu add: 'expunge empty scripts' target: self action: #expungeEmptyScripts.	aMenu addLine.	aMenu add: 'choose vocabulary...' target: aViewer action: #chooseVocabulary.	aMenu balloonTextForLastItem: 'Choose a different vocabulary for this Viewer.'.	aMenu add: 'open standard lexicon' target: aViewer action: #openLexicon.	aMenu balloonTextForLastItem: 'open a window that shows the code for this object in traditional programmer format'.	aMenu add: 'open lexicon with search pane' target: aViewer action: #openSearchingProtocolBrowser.	aMenu balloonTextForLastItem: 'open a lexicon that has a type-in pane for search (not recommended!!)'.	aMenu addLine.	aMenu add: 'inspect morph' target: costume selector: #inspect.	aMenu add: 'inspect player' target: self selector: #inspect.	self belongsToUniClass ifTrue:		[aMenu add: 'browse class' target: self action: #browsePlayerClass.		aMenu add: 'inspect class' target: self class action: #inspect].	aMenu add: 'inspect this Viewer' target: aViewer selector: #inspect.	aMenu add: 'inspect this Vocabulary' target: aViewer currentVocabulary selector: #inspect.	aMenu addLine.	aMenu add: 'relaunch this Viewer' target: aViewer action: #relaunchViewer.	aMenu add: 'view morph directly' target: aViewer action: #viewMorphDirectly.	aMenu balloonTextForLastItem: 'opens a Viewer directly on the rendered morph.'.	aMenu popUpEvent: evt in: aWorld! !!Player methodsFor: 'misc' stamp: 'sw 6/20/2001 12:44'!offerViewerMenuFor: aViewer event: evt	"Put up the Viewer menu on behalf of the receiver.  If the shift key is held down, put up the alternate menu."	| aMenu aWorld  |	(evt notNil and: [evt shiftPressed]) ifTrue:		[^ self offerAlternateViewerMenuFor: aViewer event: evt].	aWorld _ aViewer world.	aMenu _ MenuMorph new defaultTarget: self.	aMenu add: 'add a new instance variable' target: self action: #addInstanceVariable.	aMenu balloonTextForLastItem: 'Add a new instance variable to this object and all of its siblings.  You will be asked to supply a name for it.'.	aMenu add: 'add a new script' target: aViewer action: #newPermanentScript.	aMenu balloonTextForLastItem: 'Add a new script that will work for this object and all of its siblings'.	aMenu addLine.	aMenu add: 'grab me' target: self selector: #grabPlayerIn: argument: aWorld.	aMenu balloonTextForLastItem: 'This will actually pick up the object this Viewer is looking at, and hand it to you.  Click the (left) button to drop it'.	aMenu add: 'reveal me' target: self selector: #revealPlayerIn: argument: aWorld.	aMenu balloonTextForLastItem: 'If you have misplaced the object that this Viewer is looking at, use this item to (try to) make it visible'.	aMenu addLine.	aMenu add: 'tile representing me' action: #tearOffTileForSelf.	aMenu addLine.	aMenu add: 'more...' target: self selector: #offerAlternateViewerMenuFor:event: argumentList: {aViewer. evt}.	aMenu popUpEvent: evt in: aWorld! !!Presenter methodsFor: 'viewer' stamp: 'sw 6/20/2001 12:37'!viewObject: anObject	"Open up and return a viewer on the given object.  If the object is a Morph, open a viewer on its associated Player"	anObject isMorph		ifTrue:			[self viewMorph: anObject]  "historic morph/player implementation"		ifFalse:			[self viewObjectDirectly: anObject]! !!Presenter methodsFor: 'viewer' stamp: 'sw 6/20/2001 13:12'!viewObjectDirectly: anObject	"Open up and return a viewer on the given object"	|  aViewer aRect aPoint nominalHeight aFlapTab flapLoc |	associatedMorph addMorph: (aViewer _ self nascentPartsViewerFor: anObject).	flapLoc _ associatedMorph "world".	Preferences viewersInFlaps ifTrue:		[aViewer setProperty: #noInteriorThumbnail toValue: true.		aViewer initializeFor: anObject barHeight: 0.		aViewer enforceTileColorPolicy.		flapLoc hideViewerFlapsOtherThanFor: anObject.		aFlapTab _ flapLoc viewerFlapTabFor: anObject.		aFlapTab referent submorphs do: 			[:m | (m isKindOf: Viewer) ifTrue: [m delete]].		aFlapTab referent addMorph: aViewer beSticky.		aViewer visible: true.		aFlapTab applyThickness: aViewer width + 25.		aFlapTab spanWorld.		aFlapTab showFlap. 		aViewer position: aFlapTab referent position.		flapLoc startSteppingSubmorphsOf: aFlapTab.		flapLoc startSteppingSubmorphsOf: aViewer.		^ aFlapTab].		"Caution: the branch below is historical and has not been used for a long time, though if you set the #viewersInFlaps preference to false you'd hit it.  Not at all recently maintained."	aViewer initializeFor: anObject barHeight: 6.	aViewer enforceTileColorPolicy.	Preferences automaticViewerPlacement ifTrue:		[aPoint _ anObject bounds right @ 			(anObject center y - ((nominalHeight _ aViewer initialHeightToAllow) // 2)).		aRect _ (aPoint extent: (aViewer width @ nominalHeight)) translatedToBeWithin: flapLoc bounds.		aViewer position: aRect topLeft.		aViewer visible: true.		flapLoc startSteppingSubmorphsOf: aViewer.		"it's already in the world, somewhat coincidentally"		^ aViewer].	anObject primaryHand attachMorph: (aViewer visible: true).	^aViewer! !!StandardViewer methodsFor: 'user interface' stamp: 'sw 6/20/2001 12:47'!viewMorphDirectly	"Launch a new viewer to replace the receiver."	self delete.	self presenter viewObjectDirectly: scriptedPlayer costume renderedMorph! !!ViewerFlapTab methodsFor: 'transition' stamp: 'sw 6/20/2001 13:59'!unhibernate	"recreate my viewer"	| wasShowing viewer |	referent ifNotNil: [(referent findA: Viewer) ifNotNil: [^ self]].	wasShowing _ flapShowing.	"guard against not-quite-player-players"	((scriptedPlayer respondsTo: #costume) and:[scriptedPlayer costume isMorph])		ifTrue:	[viewer _ self presenter viewMorph: scriptedPlayer costume]		ifFalse:	[viewer _ self presenter viewObjectDirectly: scriptedPlayer].	wasShowing ifFalse: [self hideFlap].	^ viewer! !