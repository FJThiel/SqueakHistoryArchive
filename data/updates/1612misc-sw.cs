'From Squeak2.6 of 11 October 1999 [latest update: #1610] on 16 November 1999 at 10:45:30 pm'!"Change Set:		misc-swDate:			17 November 1999Author:			Scott Wallace1.  Makes the path-related commands work on flexed morphs (seemingly it never had!!)2.  In Morphic, the proceed/abandon/debug buttons are now always shown whenever a walkback (predebug) window is put up, independent of the setting of the #optionalMorphicButtons preference.3.  Fixes a bug regarding the prompting surrounding first-style-use when submitting a method while color pretty printing is in effect.4.  If in a text pane a global variable is selected, the 'browse it' command will now open up a browser on the class of that variable's current value.5.  StringHolder.codePaneMenu:shifted simplified."!!Morph methodsFor: 'menus' stamp: 'sw 11/10/1999 16:53'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	| unlockables |	aMenu addLine.	aMenu add: 'copy to paste buffer' action: #copyToPasteBuffer.	aMenu add: 'copy Postscript' action: #clipPostscript.	aMenu add: 'print PS to file...' target: self selector: #printPSToFile.	self player ifNotNil:		[aMenu add: 'make another instance of me' action: #makeNewPlayerInstance].	aMenu addLine.	aMenu add: 'change costume...' action: #chooseNewCostumeForArgument.	"Add the fill style items"	self addFillStyleMenuItems: aMenu hand: aHandMorph.	aHandMorph potentialEmbeddingTargets size > 1 ifTrue:		[aMenu add: 'embed...' action: #placeArgumentIn].	self isLocked		ifFalse:			[aMenu add: 'lock' action: #lockMorph]		ifTrue:			[aMenu add: 'unlock' action: #unlockMorph].  "probably not possible -- wouldn't get halo"	unlockables _ self submorphs select:		[:m | m isLocked].	unlockables size == 1 ifTrue:		[aMenu add: 'unlock "', unlockables first externalName, '"' action: #unlockContents].	unlockables size > 1 ifTrue:		[aMenu add: 'unlock all contents' action: #unlockContents.		aMenu add: 'unlock...' action: #unlockOneSubpart].	aMenu addLine.	aMenu defaultTarget: self topRendererOrSelf.	aMenu add: 'draw new path' action: #definePath.	(self hasProperty: #pathPoints) ifTrue:		[aMenu add: 'follow path' action: #followPath.		aMenu add: 'delete path' action: #deletePath].	aMenu defaultTarget: aHandMorph.	(owner == nil or: [self == owner submorphs last]) ifFalse:		[aMenu add: 'send to back' action: #goBehind]! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'sw 11/12/1999 10:58'!browseIt	"Launch a browser for the current selection, if appropriate"	| aSymbol anEntry brow |	self lineSelectAndEmptyCheck: [^ self].	(aSymbol _ self selectedSymbol) isNil ifTrue: [^ view flash].	self terminateAndInitializeAround:		[aSymbol first isUppercase			ifTrue:				[anEntry _ (Smalltalk at: aSymbol ifAbsent: [nil]).				anEntry isNil ifTrue: [^ view flash].				(anEntry isKindOf: Class)					ifFalse:	[anEntry _ anEntry class].				brow _ Browser new.				brow setClass: anEntry selector: nil.				Browser openBrowserView: (brow openEditString: nil)					label: 'System Browser']			ifFalse:				[Smalltalk browseAllImplementorsOf: aSymbol]]! !!PreDebugWindow methodsFor: 'as yet unclassified' stamp: 'sw 11/16/1999 22:39'!initialize	| aFont proceedLabel debugLabel aWidth |	super initialize.	true "Preferences optionalMorphicButtons" ifFalse:		[(aWidth _ self widthOfFullLabelText) > 280 ifTrue: [^ self].   "No proceed/debug buttons if title too long"		aWidth > 210			ifTrue: "Abbreviated buttons if title pretty long"				[proceedLabel _ 'p'.				debugLabel _ 'd']			ifFalse: "Full buttons if title short enough"				[proceedLabel _ 'proceed'.				debugLabel _ 'debug'].		aFont _ Preferences fontForScriptorButtons.		self addMorph: (proceedButton _ SimpleButtonMorph new borderWidth: 0;				label: proceedLabel font: aFont; color: Color transparent;				actionSelector: #proceed; target: self).		proceedButton setBalloonText: 'continue execution'.		self addMorph: (debugButton _ SimpleButtonMorph new borderWidth: 0;				label: debugLabel font: aFont; color: Color transparent;				actionSelector: #debug; target: self).		debugButton setBalloonText: 'bring up a debugger'.		proceedButton submorphs first color: Color blue.		debugButton submorphs first color: Color red].	self adjustBookControls! !!StringHolder methodsFor: 'code pane menu' stamp: 'sw 11/8/1999 17:56'!codePaneMenu: aMenu shifted: shifted	"Note that unless we override perform:orSendTo:, PluggableTextController will respond to all menu items in a text pane"	| donorMenu |	donorMenu _ shifted		ifTrue:			[ParagraphEditor shiftedYellowButtonMenu]		ifFalse:			[ParagraphEditor yellowButtonMenu].	^ aMenu labels: donorMenu labelString lines: donorMenu lineArray selections: donorMenu selections! !!Debugger methodsFor: 'initialize' stamp: 'sw 11/16/1999 22:38'!buildMorphicNotifierLabelled: label message: messageString	| notifyPane window contentTop extentV |	window _ (PreDebugWindow labelled: label) model: self.	"Preferences optionalMorphicButtons" true		ifTrue:			[contentTop _ 0.2.			window addMorph: (self buttonRowForPreDebugWindow: window)				frame: (0@0 corner: 1 @ contentTop).			extentV _ 156]		ifFalse:			[extentV _ 116.			contentTop _ 0].	notifyPane _ PluggableTextMorph on: self text: nil accept: nil		readSelection: nil menu: #debugProceedMenu:.	notifyPane editString: messageString; askBeforeDiscardingEdits: false.	window addMorph: notifyPane frame: (0@contentTop corner: 1@1).	^ window openInWorldExtent: 350 @ extentV! !!Text methodsFor: 'attributes' stamp: 'sw 11/16/1999 22:33'!couldDeriveFromPrettyPrinting	"Return true if the receiver has any TextAttributes that are functional rather than simply appearance-related"	runs values do:		[:emphArray | emphArray do:			[:emph | emph couldDeriveFromPrettyPrinting ifFalse: [^ false]]].	^ true! !