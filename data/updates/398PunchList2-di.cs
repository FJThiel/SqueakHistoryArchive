'From Squeak 2.2 of Sept 23, 1998 on 10 November 1998 at 2:54:50 pm'!"Change Set:		PunchList2-di.stDate:			10 November 1998Author:			Dan IngallsThis changeSet provides a new class, PluggableListMorphOfMany designed solely to provide the multiple selection capability required for squeak's ChangeLists.  No warantees."!PluggableListMorph subclass: #PluggableListMorphOfMany	instanceVariableNames: 'dragOnOrOff '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!ChangeList class methodsFor: 'instance creation' stamp: 'di 11/10/1998 13:34'!openAsMorph: aChangeList name: labelString multiSelect: multiSelect	"Open a morphic view for the messageSet, whose label is labelString.	The listView may be either single or multiple selection type"	| window |	window _ (SystemWindow labelled: labelString) model: aChangeList.	window addMorph: ((multiSelect ifTrue: [PluggableListMorphOfMany]									ifFalse: [PluggableListMorph])		on: aChangeList list: #list		selected: #listIndex changeSelected: #toggleListIndex:		menu: #changeListMenu: keystroke: #messageListKey:from:)		frame: (0@0 corner: 1@0.3).	window addMorph: (AcceptableCleanTextMorph on: aChangeList 			text: #contents accept: #contents:			readSelection: #contentsSelection menu: #codePaneMenu:shifted:)		frame: (0@0.3 corner: 1@1).	^ window openInWorld! !!PluggableListMorph methodsFor: 'events' stamp: 'di 11/10/1998 13:59'!mouseDown: event onItem: aMorph	event yellowButtonPressed ifTrue: [^ self yellowButtonActivity: event shiftPressed].	model okToChange ifFalse: [^ self].  "No change if model is locked"	"If hit old highlight, then deselect it"	aMorph == selectedMorph		ifTrue: [autoDeselect ifTrue: [self setSelectedMorph: nil]]		ifFalse: [self setSelectedMorph: aMorph].! !!PluggableListMorphOfMany reorganize!('all' drawOn: list: mouseDown:onItem: mouseEnterDragging:onItem: mouseUp:onItem: update:)!!PluggableListMorphOfMany methodsFor: 'all' stamp: 'di 11/10/1998 13:39'!drawOn: aCanvas	| onMorph |	super drawOn: aCanvas.	1 to: list size do:  "NOTE: should be optimized to only visible morphs"		[:index |		(model listSelectionAt: index) ifTrue:			[onMorph _ scroller submorphs at: index.			aCanvas fillRectangle:				(((scroller transformFrom: self) invertBoundsRect: onMorph bounds)						intersect: scroller bounds)				color: color darker]]! !!PluggableListMorphOfMany methodsFor: 'all' stamp: 'di 11/10/1998 14:46'!list: listOfStrings	scroller removeAllMorphs.	list _ listOfStrings ifNil: [Array new].	list isEmpty ifTrue: [^ self selectedMorph: nil].	super list: listOfStrings.	"At this point first morph is sensitized, and all morphs share same handler."	scroller firstSubmorph on: #mouseEnterDragging						send: #mouseEnterDragging:onItem:						to: self.	scroller firstSubmorph on: #mouseUp						send: #mouseUp:onItem:						to: self.	"This should add this behavior to the shared event handler thus affecting all items"! !!PluggableListMorphOfMany methodsFor: 'all' stamp: 'di 11/10/1998 14:50'!mouseDown: event onItem: aMorph	| index |	event yellowButtonPressed ifTrue: [^ self yellowButtonActivity: event shiftPressed].	model okToChange ifFalse: [^ self].  "No change if model is locked"	"Set meaning for subsequent dragging of selection"	index _ scroller submorphs indexOf: aMorph.	index = 0 ifTrue: [^ self  "minimize chance of selecting with a pane broder drag"].	dragOnOrOff _ (model listSelectionAt: index) not.	"If hit old highlight, then deselect it"	aMorph == selectedMorph		ifTrue: [autoDeselect ifTrue: [self setSelectedMorph: nil]]		ifFalse: [self setSelectedMorph: aMorph].	"If hit a selection, then set drag off, else drag on"	model listSelectionAt: index put: dragOnOrOff.	aMorph changed! !!PluggableListMorphOfMany methodsFor: 'all' stamp: 'di 11/10/1998 14:48'!mouseEnterDragging: event onItem: aMorph	| index |	dragOnOrOff ifNil: [^ self "spurious drag did not start with mouseDown"].	event yellowButtonPressed ifTrue: [^ self yellowButtonActivity: event shiftPressed].	model okToChange ifFalse: [^ self].  "No change if model is locked"	index _ scroller submorphs indexOf: aMorph.	"Extend the selection with the current state of dragOnOrOff"	model listSelectionAt: index put: dragOnOrOff.	aMorph changed! !!PluggableListMorphOfMany methodsFor: 'all' stamp: 'di 11/10/1998 14:47'!mouseUp: event onItem: aMorph	dragOnOrOff _ nil.  "So improperly started drags will have not effect"! !!PluggableListMorphOfMany methodsFor: 'all' stamp: 'di 11/10/1998 14:44'!update: aSymbol 	aSymbol == #allSelections ifTrue:		[self selectionIndex: self getCurrentSelectionIndex.		^ self changed].	^ super update: aSymbol! !