'From Squeak 2.5 of August 6, 1999 on 16 September 1999 at 10:32:55 pm'!"Change Set:		floatPrecision-swDate:			16 September 1999Author:			Scott WallaceMakes readout tiles for #cursorWrapped slot of GraphMorphs by default show two decimal place of precision.Adds the ability for a user-defined numeric slot to specify its float precision.Cleans up many methods in this territory."!Object subclass: #SlotInformation	instanceVariableNames: 'type documentation floatPrecision '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Scripting'!!Player methodsFor: 'slots-kernel' stamp: 'sw 9/8/1999 18:36'!floatPrecisionForSlot: aSlotName	((self elementTypeFor: aSlotName) == #userSlot)		ifTrue:			[^ (self slotInfoAt: aSlotName) floatPrecision].	^ (#(cursorWrapped) includes: aSlotName)		ifTrue:			[0.01]		ifFalse:			[1]! !!Player methodsFor: 'slots-kernel' stamp: 'sw 9/8/1999 22:23'!tilePhrasesSpecsForCategory: aCategory	"Return an array of slot and script names and info for use in a viewer on the receiver.  These can be of two flavors - script and slot.		(slot		heading		number				readWrite	getHeading		setHeading:)		(script		command 	wearCostumeOf: 	player)"	| aList nameString categoryString |	categoryString _ aCategory asString.	(categoryString = 'instance variables') ifTrue:		[^ self slotNames collect: [:aName |		nameString _ aName asString capitalized.		Array			with:	#slot			with: 	aName asSymbol					"name"			with: 	(self typeForSlot: aName asSymbol)	"type"			with:	#readWrite							"r/w"			with:	('get', nameString) asSymbol		"get selector"			with:	('set', nameString, ':') asSymbol]].	"set selector"	(categoryString = 'scripts') ifTrue:		[^ self tileScriptCommands].	self hasCostumeThatIsAWorld ifTrue: [^ self worldTilePhrasesSpecsForCategory: aCategory].	aList _ ScriptingSystem categoryElementsFor: categoryString.	aList ifNil: [self error: 'oops, missing category info for ', categoryString].	aList _ self usablePhraseSpecsIn: aList.	^ aList collect: [:aPair | self phraseSpecFor: aPair]! !!Player methodsFor: 'slots-user' stamp: 'sw 9/8/1999 18:38'!addInstanceVariable	| itsName initialValue typeChosen suggestedNames usedNames initialAnswer setterSelector |	suggestedNames _ #('cargo' 'speed' 'weight' 'mzee' 'friml' 'verp' 'znak').	usedNames _ self class instVarNames.	initialAnswer _ suggestedNames detect: [:aName |  (usedNames includes: aName) not] ifNone:		[Utilities keyLike: 'var1'  satisfying: [:aKey | (usedNames includes: aKey) not]].	itsName _ FillInTheBlank request: 'name for new inst var: ' initialAnswer: initialAnswer. 	itsName size == 0 ifTrue: [^ self].	(Utilities isLegalInstVarName: itsName) ifFalse: [^ self inform: 'sorry, illegal name, try again.'].	itsName _ itsName asSymbol.	(self class allInstVarNames includes: itsName) ifTrue: [^ self inform: 'that name is already used.'].		self assureUniClass.	typeChosen _ self initialTypeForSlotNamed: itsName.	self slotInfo at: itsName put: (SlotInformation new initialize type: typeChosen).	initialValue _ self initialValueForSlotOfType: typeChosen.	self addInstanceVarNamed: itsName withValue: initialValue.	self class compileAccessorsFor: itsName.	setterSelector _ Utilities setterSelectorFor: itsName.	(self class allSubInstances copyWithout: self) do:		[:anInstance | anInstance perform: setterSelector with: initialValue].	self updateAllViewersAndForceToShow: 'instance variables'! !!Player methodsFor: 'slots-user' stamp: 'sw 9/8/1999 18:38'!addSlotNamedLike: suggestedName withValue: aValue	| otherNames numericSuffix nameToUse  stem itsInfo |	stem _ suggestedName first asLowercase asString , suggestedName allButFirst.	stem _ stem stemAndNumericSuffix first.	nameToUse _ stem.	otherNames _ self class allInstVarNames.	numericSuffix _ 1.	[otherNames includes: nameToUse]		whileTrue: [numericSuffix _ numericSuffix + 1. (nameToUse _ stem, numericSuffix printString)].	self class addInstVarName: nameToUse.	self instVarAt: self class instSize put: aValue.  "Assumes added as last field"	self class compileAccessorsFor: nameToUse.	itsInfo _ SlotInformation new initialize type: aValue basicType.	self slotInfo at: nameToUse asSymbol put: itsInfo.	^ nameToUse! !!Player methodsFor: 'slots-user' stamp: 'sw 9/8/1999 22:29'!setPrecisionFor: slotName	| aList aMenu reply precision val |	aList _ #('0' '1' '2' '3' '4' '5').	aMenu _ SelectionMenu labels: aList selections: aList.	reply _ aMenu startUpWithCaption: 'How many decimal places?'.	reply ifNotNil:		[(self slotInfoAt: slotName) floatPrecision:			(precision _ #(1 0.1 0.01 0.001 0.0001 0.00001 0.000001) at: (aList indexOf: reply)).		self class allInstancesDo:   "allSubInstancesDo:"			[:anInst |				precision ~= 1 ifTrue:					[((val _ anInst instVarNamed: slotName asString) isKindOf: Integer)						ifTrue:							[anInst instVarNamed: slotName asString put: val asFloat]].				anInst updateAllViewers]]! !!Player methodsFor: 'slots-user' stamp: 'sw 9/8/1999 18:37'!slotInfoAt: slotName	| info |	info _ self slotInfo at: slotName ifAbsent: [nil].	info ifNil:		[self slotInfo at: slotName put: (info _ SlotInformation new initialize)].	(info isKindOf: Symbol) "bkward compat"		ifTrue:			[self slotInfo at: slotName put: (info _ SlotInformation new type: info)].	^ info! !!Player methodsFor: 'slots-user' stamp: 'sw 9/8/1999 17:01'!tearOffFancyWatcherFor: aSlotName	| aWatcher aTile getSel aLine aColor aTower precision |	aColor _ Color r: 0.903 g: 0.903 b: 1.0.	aLine _ AlignmentMorph newRow vResizing: #shrinkWrap; color: aColor.	aLine borderWidth: 1; borderColor: aColor darker.	aLine addMorphBack: (self tileReferringToSelf borderWidth: 0; typeColor: aColor; color: aColor; bePossessive).	aLine addTransparentSpacerOfSize: (4@0).	aTower _ AlignmentMorph newColumn color: aColor.	aTower addTransparentSpacerOfSize: (0 @ 1).	aTower addMorphBack: (StringMorph contents: aSlotName, ' = ' font: ScriptingSystem fontForTiles).	aLine addMorphBack: aTower.	aTile _ NumericReadoutTile new typeColor: aColor.	aWatcher _ UpdatingStringMorph new target: self.	(precision _ self floatPrecisionForSlot: aSlotName) ~= 1 ifTrue:		[aWatcher floatPrecision: precision].	aWatcher growable: true;		getSelector: (getSel _ ScriptingSystem getterSelectorFor: aSlotName);		putSelector: (ScriptingSystem setterSelectorFor: aSlotName).	aTile addMorphBack: aWatcher.	aTile addArrows.	aTile setLiteralTo: (self perform: getSel) width: 30.	aLine addMorphBack: aTile.	aWatcher step; fitContents.	self currentHand attachMorph: aLine! !!Player methodsFor: 'slots-user' stamp: 'sw 9/8/1999 17:00'!tearOffWatcherFor: aSlotName	| aWatcher precision |	aWatcher _ UpdatingStringMorph new target: self.	((self typeForSlot: aSlotName) = #number)		ifFalse:			[aWatcher useStringFormat]		ifTrue:			[precision _ self floatPrecisionForSlot: aSlotName.			precision ~= 1 ifTrue: [aWatcher floatPrecision: precision]].	aWatcher growable: true;		getSelector: (ScriptingSystem getterSelectorFor: aSlotName);		putSelector: (ScriptingSystem setterSelectorFor: aSlotName);		setNameTo: aSlotName.	aWatcher step.	aWatcher fitContents.	self currentHand attachMorph: aWatcher! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 9/8/1999 21:52'!slotInfoButtonHitFor: aSlotName inViewer: aViewer	"The user made a gesture asking for info/menu relating"	| aMenu slotSym aType |	slotSym _ aSlotName asSymbol.	aType _ self typeForSlot: aSlotName asSymbol.	aMenu _ MenuMorph new defaultTarget: self.	aMenu add: 'simple watcher' selector: #tearOffWatcherFor: argument: slotSym.	aType == #number "later others" ifTrue:		[aMenu add: 'fancier watcher' selector: #tearOffFancyWatcherFor: argument: slotSym].	(self slotInfo includesKey: slotSym)		ifTrue:  "User slot"			[aMenu add: 'change data type' selector: #chooseSlotTypeFor: argument: slotSym.			aType == #number ifTrue:				[aMenu add: 'decimal places...' selector: #setPrecisionFor: argument: slotSym].			aMenu add: 'remove "', aSlotName, '"' selector: #removeSlotNamed: argument: slotSym.			aMenu add: 'rename  "', aSlotName, '"' selector: #renameSlot: argument: slotSym].	aMenu items size == 0 ifTrue:		[aMenu add: 'ok' action: nil].	aMenu addTitle: (aSlotName asString, ' (', aType, ')').	aMenu popUpAt:  aViewer primaryHand position forHand: aViewer primaryHand! !!SlotInformation methodsFor: 'as yet unclassified' stamp: 'sw 9/8/1999 22:24'!floatPrecision	^ floatPrecision ifNil: [floatPrecision _ 1]! !!SlotInformation methodsFor: 'as yet unclassified' stamp: 'sw 9/8/1999 18:31'!floatPrecision: prec	floatPrecision _ prec! !!SlotInformation methodsFor: 'as yet unclassified' stamp: 'sw 9/8/1999 18:37'!initialize	documentation _ 'as yet undocumented'.	type _ #number.	floatPrecision _ 0.1.! !!SlotInformation methodsFor: 'as yet unclassified' stamp: 'sw 9/8/1999 22:11'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' precision: ', floatPrecision asString, ' ; type = ', type asString! !!SlotInformation methodsFor: 'object fileIn' stamp: 'sw 9/8/1999 18:42'!converttd0: varDict tdf0: smartRefStrm	floatPrecision _ nil.! !!StringMorph methodsFor: 'editing' stamp: 'sw 9/8/1999 17:04'!acceptValue: aValue	| val |	self contents: (val _ aValue asString).	^ val! !!TileMorph methodsFor: 'private' stamp: 'sw 9/8/1999 18:18'!updateLiteralLabel	|  desiredW leader myLabel |	(myLabel _ self labelMorph) ifNil: [^ self].	myLabel acceptValue:		(type == #literal			ifTrue:				[literal] 			ifFalse: [operatorReadoutString 				ifNil:		[ScriptingSystem wordingForOperator: operatorOrExpression]				ifNotNil:  	[operatorReadoutString]]).	leader _ (upArrow ifNil: [0] ifNotNil: [UpArrowAllowance]) + 4.	desiredW _ leader + myLabel width.	suffixArrow ifNotNil: [desiredW _ desiredW + SuffixArrowAllowance].	self extent: (desiredW max: self minimumWidth) @ self class defaultH.	myLabel position: (self left + (leader + 0)) @ (bounds top + 3); fullBounds.	suffixArrow ifNotNil: [suffixArrow align: suffixArrow topRight with:				bounds topRight + (-2 @ (self height // 2)) - (0 @ (suffixArrow height // 2))].	self changed! !Player removeSelector: #slotInfoButtonHitFor:!Player removeSelector: #infoFor:!