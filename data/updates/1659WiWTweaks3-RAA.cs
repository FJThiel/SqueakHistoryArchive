'From Squeak2.6 of 11 October 1999 [latest update: #1658] on 27 November 1999 at 1:27:25 pm'!"Change Set:		WiWTweaks3Date:			27 November 1999Author:			Bob ArningA number of 'last inch' changes to support Windows in Windows...1. If the user (in an inner world) changes the display depth or otherwise causes Display to get a new bitmap, the outer world will need to know about this to avoid leaving parts unrefreshed.2. The ColorPickerMorph used to change the desktop color sometimes worked and sometimes didn't, depending on world position.3. If the inner world is active and you click in the outer world, you didn't always get a world menu. PasteUpMorph>>restartWorldCycleWithEvent: should now deal with this.4. If you followed Marcus Denker's report, you had an inactive inner world trying to run it's own #displayWorld and sometimes this would generate a walkback (like the hand was not yet initialized)."!Form subclass: #DisplayScreen	instanceVariableNames: 'clippingBox '	classVariableNames: 'DisplayChangeSignature ScreenSave '	poolDictionaries: ''	category: 'Graphics-Display Objects'!PasteUpMorph subclass: #WiWPasteUpMorph	instanceVariableNames: 'parentWorld hostWindow pendingEvent displayChangeSignatureOnEntry '	classVariableNames: 'Debug '	poolDictionaries: ''	category: 'Morphic-WiW'!!ColorPickerMorph methodsFor: 'private' stamp: 'RAA 11/27/1999 15:29'!pickColorAt: aPoint 	"RAA 27 Nov 99 - aPoint is global, so no need to add viewbox topleft"	| worldBox globalP c alpha localPt |	localPt _ aPoint - self topLeft.	(FeedbackBox containsPoint: localPt) ifTrue: [^ self].	(RevertBox containsPoint: localPt)		ifTrue: [^ self updateColor: originalColor feedbackColor: originalColor].	"pick up color, either inside or outside this world"	worldBox _ self world viewBox.	globalP _ aPoint 		"+ worldBox topLeft".	"get point in screen coordinates"	(worldBox containsPoint: globalP)		ifTrue: [c _ self world colorAt: aPoint belowMorph: Morph new]		ifFalse: [c _ Display colorAt: globalP].	"check for transparent color and update using appropriate feedback color "	(TransparentBox containsPoint: localPt)		ifTrue: [Display depth >= 16				ifTrue: 					[alpha _ (aPoint x - bounds left - TransparentBox left - 10) asFloat /							(TransparentBox width - 20)							min: 1.0 max: 0.0.					"(alpha roundTo: 0.01) printString , '   ' displayAt: 0@0." " -- debug"					self updateColor: (selectedColor alpha: alpha)						feedbackColor: (selectedColor alpha: alpha)]				ifFalse: [self updateColor: Color transparent feedbackColor: Color white]]		ifFalse: [self updateColor: ((selectedColor isColor and: [selectedColor isTranslucentColor])					ifTrue: [c alpha: selectedColor alpha]					ifFalse: [c])				feedbackColor: c]! !!DisplayScreen methodsFor: 'other' stamp: 'RAA 11/27/1999 15:48'!displayChangeSignature	^DisplayChangeSignature! !!DisplayScreen methodsFor: 'private' stamp: 'RAA 11/27/1999 15:48'!setExtent: aPoint depth: bitsPerPixel  "DisplayScreen startUp"	"This method is critical.  If the setExtent fails, there will be no	proper display on which to show the error condition..."	"ar 5/1/1999: ... and that is exactly why we check for the available display depths first."	"RAA 27 Nov 99 - if depth and extent are the same and acceptable, why go through this.	also - record when we change so worlds can tell if it is time to repaint"	(depth == bitsPerPixel and: [aPoint = self extent and: 					[self supportsDisplayDepth: bitsPerPixel]]) ifFalse: [		bits _ nil.  "Free up old bitmap in case space is low"		DisplayChangeSignature _ (DisplayChangeSignature ifNil: [0]) + 1.		(self supportsDisplayDepth: bitsPerPixel)			ifTrue:[super setExtent: aPoint depth: bitsPerPixel]			ifFalse:["Search for a suitable depth"					super setExtent: aPoint depth: self findAnyDisplayDepth].	].	clippingBox _ super boundingBox! !!PasteUpMorph methodsFor: 'WiW support' stamp: 'RAA 11/27/1999 15:41'!restartWorldCycleWithEvent: evt	"RAA 27 Nov 99 - redispatch that click picked up from our inner world"	evt ifNotNil: [		self primaryHand handleEvent: (evt setHand: self primaryHand).	].	Project current spawnNewProcessAndTerminateOld: true! !!WiWPasteUpMorph methodsFor: 'activation' stamp: 'RAA 11/27/1999 15:48'!becomeTheActiveWorldWith: evt	| outerWorld |	World == self ifTrue: [^ self].	self damageRecorder reset.	"since we may have moved, old data no longer valid"	hostWindow setStripeColorsFrom: Color green.	self canvas: nil.	"safer to start from scratch"	displayChangeSignatureOnEntry _ Display displayChangeSignature.	"Messy stuff to clear flaps from outer world"	Utilities globalFlapTabs do: [:f | f changed].	outerWorld _ World.	World _ self.		self installFlaps.	World _ outerWorld.		outerWorld displayWorld.	World _ self.	self viewBox: hostWindow panelRect.	self startSteppingSubmorphsOf: self.	self changed.	pendingEvent _ nil.	evt ifNotNil: [self primaryHand handleEvent: (evt setHand: self primaryHand)].! !!WiWPasteUpMorph methodsFor: 'activation' stamp: 'RAA 11/27/1999 15:49'!revertToParentWorldWithEvent: evt	"RAA 27 Nov 99 - if the display changed while we were in charge, parent may need to redraw"	self damageRecorder reset.	"Terminate local display"	World _ parentWorld.	World assuredCanvas.	World installFlaps.	hostWindow setStripeColorsFrom: Color red.	(displayChangeSignatureOnEntry = Display displayChangeSignature) ifFalse: [		World fullRepaintNeeded; displayWorld	].	evt ifNotNil: [World restartWorldCycleWithEvent: evt].! !!WiWPasteUpMorph methodsFor: 'drawing' stamp: 'RAA 11/27/1999 15:31'!restoreDisplay	"RAA 27 Nov 99 - we do not change our size just because the Display changed"	self == World ifTrue:  "Else we're a morphic world-window in an mvc worldState and the restoreDisplay was, unusually, issued from the world's menu rather than from the mvc screen menu"		[DisplayScreen startUp.		self handsDo: [:h | h endDisplaySuppression].		self restoreFlapsDisplay].	self fullRepaintNeeded! !!WiWPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 11/27/1999 15:30'!displayWorld	"RAA 27 Nov 99 - if we are not active, then the parent should do the drawing"	World == self ifTrue: [^super displayWorld].	parentWorld ifNotNil: [^parentWorld displayWorld].	^super displayWorld		"in case MVC needs it"! !