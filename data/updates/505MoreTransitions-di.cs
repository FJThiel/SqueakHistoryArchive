'From Squeak 2.3 beta of Nov 25, 1998 on 22 December 1998 at 10:11:10 pm'!"Change Set:		barnDoorDate:			22 December 1998Author:			Dan IngallsAdds a french door effect with vertical and horizontal opening.Also a few performance tweaks and two minor bug fixes."!!TransitionMorph methodsFor: 'initialization' stamp: 'di 12/22/1998 21:55'!initiateReplacement	| n |	startForm _ effect = #dissolve		ifTrue: [(startMorph imageForm: 16 forRectangle: bounds) offset: 0@0]		ifFalse: [(startMorph imageFormForRectangle: bounds) offset: 0@0].	endForm _ (endMorph imageFormForRectangle: bounds) offset: 0@0.	nSteps == nil ifTrue:		[self nSteps: 15 stepTime: 16.		(#(zoom pageForward pageBack) includes: effect) ifTrue:			[n _ 20 * 100000 // self bounds area min: 20 max: 4.			self nSteps: n stepTime: 30].		(#dissolve = effect) ifTrue:			[n _ 20 * 50000 // self bounds area min: 20 max: 4.			self nSteps: n stepTime: 30]].	startBlock value.  "with forms in place there should b no further delay."	self arrangeToStartStepping! !!TransitionMorph methodsFor: 'drawing' stamp: 'di 12/22/1998 21:53'!drawDissolveOn: aCanvas	"startForm and endFrom are both fixed, but the dissolve ration changes."	startForm copyBits: endForm at: 0@0 translucent: stepNumber asFloat / (nSteps*2).	aCanvas image: startForm at: self position rule: Form over.! !!TransitionMorph methodsFor: 'drawing' stamp: 'di 12/22/1998 20:55'!drawFrenchDoorOn: aCanvas	"startForm and endFrom are both fixed, but a border expands out from a vertical (or H) slit, revealing endForm.	It's like opening a pair of doors."	| box innerForm outerForm boxExtent h w |	h _ self height. w _ self width.	direction = #in ifTrue: [innerForm _ endForm.  outerForm _ startForm.							boxExtent _ self stepFrom: 0@h to: self extent].	direction = #out ifTrue: [innerForm _ startForm.  outerForm _ endForm.							boxExtent _ self stepFrom: self extent to: 0@h].	direction = #inH ifTrue: [innerForm _ endForm.  outerForm _ startForm.							boxExtent _ self stepFrom: w@0 to: self extent].	direction = #outH ifTrue: [innerForm _ startForm.  outerForm _ endForm.							boxExtent _ self stepFrom: self extent to: w@0].			aCanvas image: outerForm at: self position rule: Form over.	box _ Rectangle center: self center extent: boxExtent.	aCanvas image: innerForm at: box topLeft sourceRect: (box translateBy: self position negated) rule: Form over.	((box expandBy: 1) areasOutside: box) do:		[:r | aCanvas fillRectangle: r color: Color black].! !!TransitionMorph methodsFor: 'drawing' stamp: 'di 12/22/1998 20:58'!drawOn: aCanvas	"During the transition process, the reveal and obscure areas will be invalidated,	so we should be drawing on a canvas that clips to only the changing region."	(stepNumber between: 1 and: nSteps) ifFalse: [^ self].	effect = #slideOver ifTrue: [^ self drawSlideOverOn: aCanvas].	effect = #slideBoth ifTrue: [^ self drawSlideBothOn: aCanvas].	effect = #slideAway ifTrue: [^ self drawSlideAwayOn: aCanvas].	effect = #slideBorder ifTrue: [^ self drawSlideBorderOn: aCanvas].	effect = #pageForward ifTrue: [^ self drawPageForwardOn: aCanvas].	effect = #pageBack ifTrue: [^ self drawPageBackOn: aCanvas].	effect = #frenchDoor ifTrue: [^ self drawFrenchDoorOn: aCanvas].	effect = #zoomFrame ifTrue: [^ self drawZoomFrameOn: aCanvas].	effect = #zoom ifTrue: [^ self drawZoomOn: aCanvas].	effect = #dissolve ifTrue: [^ self drawDissolveOn: aCanvas].! !!TransitionMorph methodsFor: 'drawing' stamp: 'di 12/22/1998 20:57'!drawZoomFrameOn: aCanvas	"startForm and endFrom are both fixed, but a square border expands out from the center (or back), revealing endForm.	It's like passing through a portal."	| box innerForm outerForm boxExtent |	direction = #in		ifTrue: [innerForm _ endForm.  outerForm _ startForm.				boxExtent _ self stepFrom: 0@0 to: self extent]		ifFalse: [innerForm _ startForm.  outerForm _ endForm.				boxExtent _ self stepFrom: self extent to: 0@0].			aCanvas image: outerForm at: self position rule: Form over.	box _ Rectangle center: self center extent: boxExtent.	aCanvas image: innerForm at: box topLeft sourceRect: (box translateBy: self position negated) rule: Form over.	((box expandBy: 1) areasOutside: box) do:		[:r | aCanvas fillRectangle: r color: Color black].! !!TransitionMorph methodsFor: 'change reporting' stamp: 'di 12/22/1998 20:59'!changed	"The default (super) method is, generally much slower than need be, since many transitions only change part of the screen on any given step of the animation.  The purpose of this method is to effect some of those savings."	| loc box boxPrev h w |	(stepNumber between: 1 and: nSteps) ifFalse: [^ super changed].	effect = #slideBoth ifTrue: [^ super changed].	effect = #slideOver ifTrue:		[loc _ self stepFrom: self position - (self extent * direction) to: self position.		^ self invalidRect: (((loc extent: self extent) expandBy: 1) intersect: bounds)].	effect = #slideAway ifTrue:		[loc _ self prevStepFrom: self position to: self position + (self extent * direction).		^ self invalidRect: (((loc extent: self extent) expandBy: 1) intersect: bounds)].	effect = #slideBorder ifTrue:		[box _ endForm boundingBox translateBy:				(self stepFrom: self topLeft - (self extent * direction) to: self topLeft).		boxPrev _ endForm boundingBox translateBy:				(self prevStepFrom: self topLeft - (self extent * direction) to: self topLeft).		^ self invalidate: (box expandBy: 1) areasOutside: boxPrev].	effect = #pageForward ifTrue:		[loc _ self prevStepFrom: 0@0 to: self extent * direction.		^ self invalidRect: (((bounds translateBy: loc) expandBy: 1) intersect: bounds)].	effect = #pageBack ifTrue:		[loc _ self stepFrom: self extent * direction negated to: 0@0.		^ self invalidRect: (((bounds translateBy: loc) expandBy: 1) intersect: bounds)].	effect = #frenchDoor ifTrue:		[h _ self height. w _ self width.		direction = #in ifTrue:			[box _ Rectangle center: self center							extent: (self stepFrom: 0@h to: self extent).			boxPrev _ Rectangle center: self center							extent: (self prevStepFrom: 0@h to: self extent).			^ self invalidate: (box expandBy: 1) areasOutside: boxPrev].		direction = #out ifTrue:			[box _ Rectangle center: self center							extent: (self stepFrom: self extent to: 0@h).			boxPrev _ Rectangle center: self center							extent: (self prevStepFrom: self extent to: 0@h).			^ self invalidate: (boxPrev expandBy: 1) areasOutside: box].		direction = #inH ifTrue:			[box _ Rectangle center: self center							extent: (self stepFrom: w@0 to: self extent).			boxPrev _ Rectangle center: self center							extent: (self prevStepFrom: w@0 to: self extent).			^ self invalidate: (box expandBy: 1) areasOutside: boxPrev].		direction = #outH ifTrue:			[box _ Rectangle center: self center							extent: (self stepFrom: self extent to: w@0).			boxPrev _ Rectangle center: self center							extent: (self prevStepFrom: self extent to: w@0).			^ self invalidate: (boxPrev expandBy: 1) areasOutside: box]].	effect = #zoomFrame ifTrue:		[direction = #in ifTrue:			[box _ Rectangle center: self center							extent: (self stepFrom: 0@0 to: self extent).			boxPrev _ Rectangle center: self center							extent: (self prevStepFrom: 0@0 to: self extent).			^ self invalidate: (box expandBy: 1) areasOutside: boxPrev].		direction = #out ifTrue:			[box _ Rectangle center: self center							extent: (self stepFrom: self extent to: 0@0).			boxPrev _ Rectangle center: self center							extent: (self prevStepFrom: self extent to: 0@0).			^ self invalidate: (boxPrev expandBy: 1) areasOutside: box]].	effect = #zoom ifTrue:		[box _ Rectangle center: self center extent:			(direction = #in				ifTrue: [self stepFrom: 0@0 to: self extent]				ifFalse: [self prevStepFrom: self extent to: 0@0]).		^ self invalidRect: ((box expandBy: 1) intersect: bounds)].	^ super changed! !!TransitionMorph methodsFor: 'change reporting' stamp: 'di 12/22/1998 20:10'!invalidate: box1 areasOutside: box2	((box1 intersect: bounds) areasOutside: (box2 intersect: bounds))		do: [:r | self invalidRect: r]! !!TransitionMorph methodsFor: 'private' stamp: 'di 12/22/1998 21:01'!effect: effectSymbol direction: dirSymbol	| i |	effect _ effectSymbol.	"Default directions"	(#(zoom zoomFrame frenchDoor) includes: effectSymbol)		ifTrue: [(#(in out inH outH) includes: dirSymbol)					ifTrue: [direction _ dirSymbol]					ifFalse: [direction _ #in]]		ifFalse: [i _ #(right downRight down downLeft left upLeft up upRight)						indexOf: dirSymbol ifAbsent: [5].				direction _ (0@0) eightNeighbors at: i].! !!TransitionMorph class methodsFor: 'available effects' stamp: 'di 12/22/1998 20:58'!allEffects	^ #(none		slideOver slideBoth slideAway slideBorder		pageForward pageBack 		frenchDoor		zoomFrame zoom		dissolve)! !!TransitionMorph class methodsFor: 'available effects' stamp: 'di 12/22/1998 20:59'!directionsForEffect: eff	 "All these arrays are ordered so inverse is atWrap: size//2."	(#(slideOver slideBoth slideAway slideBorder) includes: eff)		ifTrue: [^ #(right downRight down downLeft left upLeft up upRight)].	(#(pageForward pageBack) includes: eff)		ifTrue: [^ #(right down left up)].	(#(frenchDoor) includes: eff)		ifTrue: [^ #(in inH out outH)].	(#(zoomFrame zoom) includes: eff)		ifTrue: [^ #(in out)].	^ Array new! !