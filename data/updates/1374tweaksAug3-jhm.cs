'From Squeak 2.4c of May 10, 1999 on 3 August 1999 at 12:55:43 pm'!"Change Set:		tweaksAug3-jhmDate:			3 August 1999Author:			John MaloneyVarious tiny tweaks:  a. implement hash for ByteArray  b. make Class>obsolete delete refs to pool Dictionarys  c. delete empty class dictionaries  d. make ColorForm hibernate remove color map cache  e. adds Andreas's orderedDither to Form  f. a Celeste tweak from Lex  g. remove a few unused methods"!!ByteArray commentStamp: 'jm 7/25/1999 12:27' prior: 0!I represent an ArrayedCollection whose elements are integers between 0 and 255.!!ByteArray reorganize!('accessing' byteAt: byteAt:put:)('platform independent access' longAt:bigEndian: longAt:put:bigEndian: shortAt:bigEndian: shortAt:put:bigEndian: unsignedLongAt:bigEndian: unsignedLongAt:put:bigEndian: unsignedShortAt:bigEndian: unsignedShortAt:put:bigEndian:)('converting' asByteArray asString)('private' defaultElement replaceFrom:to:with:startingAt:)('comparing' hash)!!ByteArray methodsFor: 'comparing' stamp: 'jm 8/3/1999 09:33'!hash	"Make sure that equal (=) ByteArrays hash equally."	self size = 0 ifTrue: [^ 2001].	^ ((self at: 1) bitShift: 8) + (self at: self size)! !!Class methodsFor: 'initialize-release' stamp: 'jm 8/3/1999 13:04'!obsolete	"Change the receiver and all of its subclasses to an obsolete class."	self == Object 		ifTrue:[^self error:'Object is NOT obsolete'].	self subclassesDo:[:sub| sub obsolete].	name _ 'AnObsolete' , name.	classPool _ nil.	sharedPools _ nil.	self class obsolete.	super obsolete.! !!Class methodsFor: 'class variables' stamp: 'jm 7/24/1999 12:58'!removeClassVarName: aString 	"Remove the class variable whose name is the argument, aString, from 	the names defined in the receiver, a class. Create an error notification if 	aString is not a class variable or if it is still being used in the code of 	the class."	| aSymbol |	aSymbol _ aString asSymbol.	(classPool includesKey: aSymbol)		ifFalse: [^self error: aString, ' is not a class variable'].	self withAllSubclasses do:[:subclass |		(Array with: subclass with: subclass class) do:[:classOrMeta |			(classOrMeta whichSelectorsReferTo: (classPool associationAt: aSymbol))				isEmpty ifFalse: [					(self confirm: (aString,' is still used in code of class ', classOrMeta name,						'.\Is it okay to move it to Undeclared?') withCRs)						ifTrue:[^Undeclared declare: aSymbol from: classPool]						ifFalse:[^self]]]].	classPool removeKey: aSymbol.	classPool isEmpty ifTrue: [classPool _ nil].! !!Form methodsFor: 'image manipulation' stamp: 'ar 7/23/1999 17:04'!orderedDither32To16	"Do an ordered dithering for converting from 32 to 16 bit depth."	| ditherMatrix ii out inBits outBits index pv dmv r di dmi dmo g b pvOut outIndex |	self depth = 32 ifFalse:[^self error:'Must be 32bit for this'].	ditherMatrix _ #(	0	8	2	10						12	4	14	6						3	11	1	9						15	7	13	5).	ii _ (0 to: 31) collect:[:i| i].	out _ Form extent: self extent depth: 16.	inBits _ self bits.	outBits _ out bits.	index _ outIndex _ 0.	pvOut _ 0.	0 to: self height-1 do:[:y|		0 to: self width-1 do:[:x|			pv _ inBits at: (index _ index + 1).			dmv _ ditherMatrix at: (y bitAnd: 3) * 4 + (x bitAnd: 3) + 1.			r _ pv bitAnd: 255.	di _ r * 496 bitShift: -8.			dmi _ di bitAnd: 15.	dmo _ di bitShift: -4.			r _ dmv < dmi ifTrue:[ii at: 2+dmo] ifFalse:[ii at: 1+dmo].			g _ (pv bitShift: -8) bitAnd: 255.	di _ g * 496 bitShift: -8.			dmi _ di bitAnd: 15.	dmo _ di bitShift: -4.			g _ dmv < dmi ifTrue:[ii at: 2+dmo] ifFalse:[ii at: 1+dmo].			b _ (pv bitShift: -16) bitAnd: 255.	di _ b * 496 bitShift: -8.			dmi _ di bitAnd: 15.	dmo _ di bitShift: -4.			b _ dmv < dmi ifTrue:[ii at: 2+dmo] ifFalse:[ii at: 1+dmo].			pvOut _ (pvOut bitShift: 16) + 						(b bitShift: 10) + (g bitShift: 5) + r.			(x bitAnd: 1) = 1 ifTrue:[				outBits at: (outIndex _ outIndex+1) put: pvOut.				pvOut _ 0].		].		(self width bitAnd: 1) = 1 ifTrue:[			outBits at: (outIndex _ outIndex+1) put: (pvOut bitShift: -16).			pvOut _ 0].	].	^out! !!ColorForm methodsFor: 'fileIn/Out' stamp: 'jm 7/23/1999 20:42'!hibernate	"Make myself take up less space. See comment in Form>hibernate."	super hibernate.	self clearColormapCache.! !!WordArray commentStamp: 'jm 7/25/1999 12:37' prior: 0!WordArrays store 32-bit unsigned Integer values.!!MailMessage methodsFor: 'initialize-release' stamp: 'ls 8/6/1999 13:43'!from: aString 	"Parse the given string to initialize myself. The given string will become 	my text."	| parseStream isMime contentType bodyText contentTransferEncoding |	time _ 0.	from _ to _ cc _ subject _ ''.	text _ self removeTrailingSeparators: aString.	parseStream _ ReadStream on: text.	isMime _ false.	contentType _ 'text/plain'.	contentTransferEncoding _ nil.	self fieldsFrom: parseStream do: 		[:fName :fValue | 		fName = 'date' ifTrue: [time _ self timeFrom: fValue].		fName = 'from' ifTrue: [from _ fValue].		fName = 'to'			ifTrue: [to isEmpty					ifTrue: [to _ fValue]					ifFalse: [to _ to , ', ' , fValue]].		fName = 'cc'			ifTrue: [cc isEmpty					ifTrue: [cc _ fValue]					ifFalse: [cc _ cc , ', ' , fValue]].		fName = 'subject' ifTrue: [subject _ fValue].		fName = 'mime-version' ifTrue: [isMime _ true].		fName = 'content-type' ifTrue: [contentType _ fValue copyUpTo: $;].		fName = 'content-transfer-encoding' ifTrue: [contentTransferEncoding _ fValue asLowercase]].	bodyText _ parseStream upToEnd.	contentTransferEncoding = 'base64'		ifTrue: 			[bodyText _ Base64MimeConverter mimeDecodeToChars: (ReadStream on: bodyText).			bodyText _ bodyText contents].	contentTransferEncoding = 'quoted-printable' ifTrue: [ bodyText _ bodyText decodeQuotedPrintable ].	isMime		ifTrue: [body _ MIMEDocument contentType: contentType content: bodyText]		ifFalse: [body _ MIMEDocument contentType: 'text/plain' content: bodyText]! !Object removeSelector: #at:add:!ByteArray removeSelector: #wordAt:!ByteArray removeSelector: #doubleWordAt:put:!ByteArray removeSelector: #wordAt:put:!ByteArray removeSelector: #doubleWordAt:!