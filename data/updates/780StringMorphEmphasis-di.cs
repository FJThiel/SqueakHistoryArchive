'From Squeak 2.3 of January 14, 1999 on 2 April 1999 at 11:52:09 pm'!"Change Set:		StringMorphEmphasisDate:			2 April 1999Author:			Dan IngallsRemoves the style ComicAll, leaving ComicPlain and ComicBold.Adds a new style, NewYork, essentially equal to TextStyle default	and removes sizes from those font names.Adds a field, emphasis, to StringMorph so that emphasized StringMorphs	do not hold on to synthetically emphasized font copies.Updates extant instances of StringMorph, thus freeing old synthetic fonts.Merges all uses of Palatino to the same fonts."!Morph subclass: #StringMorph	instanceVariableNames: 'font emphasis contents hasFocus '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!!ColorSeerTile methodsFor: 'as yet unclassified' stamp: 'di 4/1/1999 17:16'!initialize	| m1 m2 desiredW |	super initialize.	self removeAllMorphs.	"get rid of the parts of a regular Color tile"	type _ #operator.	operatorOrExpression _ #color:sees:.	m1 _ StringMorph contents: 'color    sees' font: ScriptingSystem fontForTiles.	m2 _ Morph new extent: 12@8; color: (Color r: 0.8 g: 0 b: 0).	desiredW _ m1 width + 6.	self extent: (desiredW max: self class defaultW) @ self class defaultH.	m1 position: (bounds center x - (m1 width // 2)) @ (bounds top + 5).	m2 position: (bounds center x - (m2 width // 2) + 3) @ (bounds top + 8).	self addMorph: m1; addMorphFront: m2.	colorSwatch _ m2.	! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'di 4/2/1999 17:07'!changeStyle	"Let user change styles for the current text pane  	 Moved from experimentalCommand to its own method  "	| aList reply style |	aList _ StrikeFont familyNames.	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ~~ nil ifTrue:		[(style _ TextStyle named: reply) ifNil: [self beep. ^ true].		paragraph textStyle: style copy.		paragraph composeAll.		self recomputeSelection.		self mvcRedisplay].	^ true! !!PluggableListMorph methodsFor: 'initialization' stamp: 'di 4/2/1999 23:49'!list: listOfStrings 	| morphList handler h loc index |	scroller removeAllMorphs.	list _ listOfStrings ifNil: [Array new].	list isEmpty ifTrue: [self setScrollDeltas.  ^ self selectedMorph: nil].	"NOTE: we will want a quick StringMorph init message, possibly even		combined with event install and positioning"	font ifNil: [font _ TextStyle default fontAt: 1].	morphList _ list collect:		[:item | item isText			ifTrue: [StringMorph contents: item font: font emphasis: (item emphasisAt: 1)]			ifFalse: [StringMorph contents: item font: font]].	"Sensitize first morph and copy handler to all the rest"	morphList first on: #mouseDown send: #mouseDown:onItem: to: self.	handler _ morphList first eventHandler.	morphList do: [:m | m eventHandler: handler].	"Lay items out vertically and install them in the scroller"	h _ morphList first height "self listItemHeight".	loc _ 0@0.	morphList do: [:m | m bounds: (loc extent: 9999@h).  loc _ loc + (0@h)].	scroller addAllMorphs: morphList.	index _ self getCurrentSelectionIndex.	self selectedMorph: ((index = 0 or: [index > morphList size]) ifTrue: [nil] ifFalse: [morphList at: index]).	self setScrollDeltas.	scrollBar setValue: 0.0.! !!StrikeFont class methodsFor: 'instance creation' stamp: 'di 4/2/1999 21:44'!familyName: aName size: aSize	^ ((TextStyle named: aName asSymbol) ifNil: [TextStyle default])		fontOfSize: aSize! !!StrikeFont class methodsFor: 'instance creation' stamp: 'di 4/2/1999 16:51'!familyNames	^ (TextConstants select: [:thang | thang isKindOf: TextStyle])			keys asOrderedCollection! !!StringHolder methodsFor: 'message list menu' stamp: 'di 4/2/1999 15:54'!timeStamp 	|  selector  aMethod |	(selector _ self selectedMessageName) ifNotNil:		[aMethod _ self selectedClassOrMetaClass compiledMethodAt: selector ifAbsent: [nil].		aMethod ifNotNil: [^ Utilities timeStampForMethod: aMethod]].	^ String new! !!StringMorph methodsFor: 'initialization' stamp: 'di 4/1/1999 17:14'!initWithContents: aString font: aFont emphasis: emphasisCode	super initialize.	color _ Color black.	font _ aFont.	emphasis _ emphasisCode.	hasFocus _ false.	self contents: aString.! !!StringMorph methodsFor: 'initialization' stamp: 'di 4/1/1999 17:12'!initialize	super initialize.	color _ Color black.	font _ nil.	emphasis _ 0.	hasFocus _ false.	self contents: 'StringMorph'.! !!StringMorph methodsFor: 'initialization' stamp: 'di 4/2/1999 23:07'!updateToSeparateEmphasis: baseFonts"	| baseFonts |	baseFonts _ StrikeFont allInstances select: [:f | f emphasis = 0].	StringMorph allInstancesDo: [:m | m updateToSeparateEmphasis: baseFonts]."	emphasis ifNil:		[(font ~~ nil and: [font emphasis > 0]) ifTrue:			[baseFonts do:				[:f | (f height = font height					and: [font name beginsWith: f name])					ifTrue: [emphasis _ font emphasis.							font _ f.							^ self]]].		emphasis _ 0]! !!StringMorph methodsFor: 'accessing' stamp: 'di 4/2/1999 16:22'!fitContents	| scanner |	scanner _ QuickPrint newOn: Display box: Display boundingBox font: self fontToUse.	self extent: (scanner stringWidth: contents) @ (scanner lineHeight).	self changed! !!StringMorph methodsFor: 'accessing' stamp: 'di 4/2/1999 16:12'!font: aFont	^ self font: aFont emphasis: 0! !!StringMorph methodsFor: 'accessing' stamp: 'di 4/2/1999 16:11'!font: aFont emphasis: emphasisCode	font _ aFont.	emphasis _ emphasisCode.	self fitContents."in inspector say,	 self font: (TextStyle default fontAt: 2) emphasis: 1"! !!StringMorph methodsFor: 'accessing' stamp: 'di 4/2/1999 17:35'!fontToUse	| fontToUse |	fontToUse _ font == nil		ifTrue: [TextStyle default fontAt: 1]		ifFalse: [font].	(emphasis == nil or: [emphasis = 0])		ifTrue: [^ fontToUse]		ifFalse: [^ fontToUse emphasized: emphasis]! !!StringMorph methodsFor: 'drawing' stamp: 'di 4/2/1999 16:21'!drawOn: aCanvas	hasFocus ifTrue: [aCanvas fillRectangle: self bounds color: Color yellow].	aCanvas text: contents bounds: bounds font: self fontToUse color: color.! !!MenuItemMorph methodsFor: 'initialization' stamp: 'di 4/2/1999 16:23'!initialize	super initialize.	bounds _ 0@0 extent: 10@10.	color _ Color black.	contents _ ''.	hasFocus _ false.	isEnabled _ true.	subMenu _ nil.	isSelected _ false.	target _ nil.	selector _ nil.	arguments _ nil.! !!MenuItemMorph methodsFor: 'layout' stamp: 'di 4/2/1999 16:24'!layoutInWidth: w height: h	| scanner |	scanner _ QuickPrint newOn: Display box: Display boundingBox font: self fontToUse.	self extent: ((scanner stringWidth: contents) @ (scanner lineHeight) max: w@h).! !!MenuItemMorph methodsFor: 'layout' stamp: 'di 4/2/1999 16:24'!minWidth	| scanner |	scanner _ QuickPrint newOn: Display box: Display boundingBox font: self fontToUse.	^ (scanner stringWidth: contents) + (subMenu == nil ifTrue: [0] ifFalse: [10])! !!StringMorph class methodsFor: 'instance creation' stamp: 'di 4/1/1999 17:15'!contents: aString font: aFont	^ self basicNew initWithContents: aString font: aFont emphasis: 0! !!StringMorph class methodsFor: 'instance creation' stamp: 'di 4/1/1999 17:15'!contents: aString font: aFont emphasis: emphasisCode	^ self basicNew initWithContents: aString font: aFont emphasis: emphasisCode! !!SystemDictionary methodsFor: 'shrinking' stamp: 'di 4/2/1999 21:40'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently used."	"Smalltalk discardOddsAndEnds"	SystemOrganization removeCategoriesMatching: 'System-Serial Port'.	"old Form editor:"	SystemOrganization removeSystemCategory: 'Graphics-Symbols'.	Form removeSelector: #edit.	Smalltalk at: #FormView ifPresent:		[:c | c compile: 'defaultControllerClass  ^ NoController'			classified: 'controller access'].	Smalltalk removeClassNamed: #FormEditorView.	Smalltalk removeClassNamed: #FormEditor.	SystemOrganization removeSystemCategory: 'Graphics-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	Smalltalk removeClassNamed: #FormButtonCache.	Smalltalk removeClassNamed: #FormMenuController.	Smalltalk removeClassNamed: #FormMenuView.	Smalltalk removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	SystemDictionary removeSelector: #viewImageImports.	ScreenController removeSelector: #viewImageImports.	Smalltalk removeClassNamed: #FormHolderView.	Smalltalk removeClassNamed: #FormInspectView.	"curve fitting:"	Smalltalk at: #FormEditor ifPresent: [:c | c removeSelector: #curve].	Smalltalk removeClassNamed: #CurveFitter.	Smalltalk removeClassNamed: #LinearFit.	Smalltalk removeClassNamed: #Spline.	"experimental hand-drawn character recoginizer:"	ParagraphEditor removeSelector: #recognizeCharacters.	ParagraphEditor removeSelector: #recognizer:.	ParagraphEditor removeSelector: #recognizeCharactersWhileMouseIn:.	Smalltalk removeClassNamed: #CharRecog.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	Smalltalk removeClassNamed: #ObjectViewer.	Smalltalk removeClassNamed: #ObjectTracer.	"HTML formatted fileout support:"	StandardFileStream removeSelector: #asHtml.	Smalltalk removeClassNamed: #HtmlFileStream.	"miscellaneous classes:"	Smalltalk removeClassNamed: #Array2D.	Smalltalk removeClassNamed: #DriveACar.	Smalltalk removeClassNamed: #EventRecorder.	Smalltalk removeClassNamed: #FindTheLight.	Smalltalk removeClassNamed: #PluggableTest.	Smalltalk removeClassNamed: #SystemMonitor.	Smalltalk at: #SampledSound ifPresent: [:c |		(Smalltalk confirm: 'Remove all sounds from the SampledSound library?')		ifTrue: [c initialize]].	#(Helvetica Palatino Courier) do:		[:k | TextConstants removeKey: k ifAbsent: []].	(TextConstants at: #ComicBold) newFontArray:		((TextConstants at: #ComicBold) fontArray copyFrom: 1 to: 5).! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'di 4/2/1999 21:39'!makeExternalRelease		"Smalltalk makeExternalRelease"	(self confirm: self version , 'Is this the correct version designation?If not, choose no, and fix it.') ifFalse: [^ self].	(Object classPool at: #DependentsFields) size > 1 ifTrue: [self halt].	Browser initialize.	Undeclared isEmpty ifFalse: [self halt].	Smalltalk garbageCollect.	Smalltalk obsoleteClasses isEmpty ifFalse: [self halt].	Display newDepth: 8.	Project allInstancesDo: [:p | p displayDepth: 8].	Utilities removeDisney.	ScriptingSystem prepareForExternalReleaseNamed: 'Squeak2.2beta'.	StandardScriptingSystem removeSelector: #serverUrls.	EToySystem class removeSelector: #serverUrls.	ServerDirectory removeServerNamed: 'UpdatesAtDOL'.	ServerDirectory removeServerNamed: 'UpdatesAtWebPage'.	#(Helvetica Palatino Courier) do:		[:k | TextConstants removeKey: k ifAbsent: []].	(TextConstants at: #ComicBold) newFontArray:		((TextConstants at: #ComicBold) fontArray copyFrom: 1 to: 5).	SystemDictionary removeSelector: #makeExternalRelease.	Symbol rehash.	self halt: 'Ready to condense sources'.	Smalltalk condenseSources! !!SystemWindow methodsFor: 'initialization' stamp: 'di 4/2/1999 16:27'!initialize	| aFont |	super initialize.	isCollapsed _ false.	activeOnlyOnTop _ true.	paneMorphs _ Array new.	paneRects _ Array new.	borderColor _ #raised.	borderWidth _ 1.	color _ Color black.	aFont _ Preferences fontForScriptorButtons.	stripes _ Array with: (RectangleMorph newBounds: bounds)  "see extent:"				with: (RectangleMorph newBounds: bounds).	self addMorph: (stripes first borderWidth: 1).	self addMorph: (stripes second borderWidth: 2).	self addMorph: (label _ StringMorph new contents: labelString;			font: (TextStyle default fontAt: 2) emphasis: 1).	self addMorph: (closeBox _ SimpleButtonMorph new borderWidth: 0;			label: 'X' font: aFont; color: Color transparent;			actionSelector: #delete; target: self; extent: 16@16).	self addMorph: (collapseBox _ SimpleButtonMorph new borderWidth: 0;			label: 'O' font: aFont; color: Color transparent;			actionSelector: #collapseOrExpand; target: self; extent: 16@16).	Preferences noviceMode ifTrue:		[closeBox setBalloonText: 'close window'.		collapseBox 	setBalloonText: 'collapse/expand window'].	self on: #mouseEnter send: #spawnReframeHandle: to: self.	self on: #mouseLeave send: #spawnReframeHandle: to: self.	label on: #mouseDown send: #relabel to: self.	self extent: 300@200! !StrikeFont class removeSelector: #update!StringMorph removeSelector: #initWithContents:font:!"Postscript:First, add a Style called NewYork to TextConstants, and remove ComicAll.Then run StrikeFont update to remove the sizes from the names.Convert all extant StringMorphs to store their emphasis separately.Finally convert all Palatino styles to use the one in TextConstants."	| baseFonts |TextConstants at: #NewYork put: (TextStyle fontArray: TextStyle default fontArray).TextConstants removeKey: #ComicAll ifAbsent: [].(StrikeFont includesSelector: #update) ifTrue: [StrikeFont update].  "Strips sizes off NewYorks"baseFonts _ StrikeFont allInstances select: [:f | f emphasis = 0].StringMorph allInstancesDo: [:m | m updateToSeparateEmphasis: baseFonts].(StrikeFont allInstances select: [:f | 'Palatino##' match: (f familySizeFace first)])do:	[:f | StrikeFont allInstancesDo:		[:g | ((g familySizeFace first) = 'Palatino' and: [f height = g height])			ifTrue: [f becomeForward: g]]].StrikeFont class removeSelector: #update.StringMorph removeSelector: #updateToSeparateEmphasis:.!