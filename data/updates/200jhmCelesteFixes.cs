'From Squeak 2.1 of June 30, 1998 on 20 August 1998 at 1:15:39 pm'!!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 09:24'!categoriesKeystroke: aCharacter	aCharacter asciiValue = 30 ifTrue: [self previousCategory].	aCharacter asciiValue = 31 ifTrue: [self nextCategory].! !!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 10:25'!categoryList	"Answer a list of categories for the categories pane."	^ mailDB allCategories! !!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 10:50'!categoryMenu: aMenu	"Answer the menu for the categories pane."	((currentCategory notNil) and:	 [(currentCategory ~= '.all.') &	  (currentCategory ~= '.unclassified.')])		ifTrue: [^ aMenu			labels: 'save\close\fetch mail\fetch news\add category\rename category\remove category\export category\empty trash\compact\toggle headers\set user name\set cc: list\set in/outbox folder' withCRs			lines: #(2 4 8 10 11)			selections: #(save saveAndClose fetchMail fetchNews addCategory renameCategory removeCategory exportCategory emptyTrash compact toggleSuppressHeaders setUserName setCCList setInOutFolder)]		ifFalse: [^ aMenu			labels: 'save\close\fetch mail\fetch news\add category\empty trash\compact\toggle headers\set user name\set cc: list\set in/outbox folder' withCRs			lines: #(2 4 5 7 8)			selections: #(save saveAndClose fetchMail fetchNews addCategory emptyTrash compact toggleSuppressHeaders setUserName setCCList setInOutFolder)].! !!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 13:05'!nextCategory	"Select the next category."	| catList i |	catList _ self categoryList.	(currentCategory isNil) ifTrue: [currentCategory _ catList last].	i _ catList indexOf: currentCategory.	i < catList size		ifTrue: [self setCategory: (catList at: i + 1)]		ifFalse: [self setCategory: (catList at: 1)].	self changed: #category.! !!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 13:06'!previousCategory	"Select the next category."	| catList i |	catList _ self categoryList.	(currentCategory isNil) ifTrue: [currentCategory _ catList last].	i _ catList indexOf: currentCategory.	i > 1		ifTrue: [self setCategory: (catList at: i - 1)]		ifFalse: [self setCategory: (catList at: catList size)].	self changed: #category.! !!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 12:36'!saveAndClose	| topView |	self close.	topView _ self topView.	topView ifNotNil: [		topView isMorph			ifTrue: [topView delete]			ifFalse: [topView controller close]].! !!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 09:29'!setCategory: newCategory	"Change the currently selected category. We must also compute the table of contents and message list for the new category."	currentCategory _ newCategory.	(newCategory isNil)		ifTrue:			[currentMessages _ currentTOC _ currentMsgID _ nil]		ifFalse:			[currentMessages _ self filteredMessagesIn: newCategory.			 currentTOC _ OrderedCollection new: currentMessages size.			 1 to: currentMessages size do:				[: i |				 currentTOC add:					(i printString, ' ',					 (mailDB getTOCstring: (currentMessages at: i)))].			 currentTOC _ currentTOC asArray.			 (currentMessages includes: currentMsgID) ifFalse:				[currentMsgID _ nil]].	self changed: #tocEntryList.! !!Celeste methodsFor: 'categories pane' stamp: 'jm 8/20/1998 10:35'!toggleSuppressHeaders	SuppressWorthlessHeaderFields _ SuppressWorthlessHeaderFields not.	self changed: #messageText.! !!Celeste methodsFor: 'table of contents pane' stamp: 'jm 8/20/1998 08:14'!getCategoryNameIfNone: aBlock	"Prompt the user for a category name, remembering it for the next time."	| catList categoryName |	catList _ self categoryList.	catList remove: '.all.' ifAbsent: [].	catList remove: '.trash.' ifAbsent: [].	catList remove: '.unclassified.' ifAbsent: [].	catList add: '<new category>'.	((lastCategoryList ~= catList) or: [lastCategoryMenu = nil])		ifTrue: [lastCategoryMenu _ CustomMenu selections: catList].	categoryName _ lastCategoryMenu startUp.	categoryName = nil ifTrue: [^aBlock value].	categoryName = '<new category>' ifTrue: [		categoryName _ FillInTheBlank			request: 'New category name?'			initialAnswer: ''.		(categoryName isEmpty) ifTrue: [^aBlock value].		lastCategoryMenu _ nil.		mailDB addCategory: categoryName.		self changed: #categoryList.	].	lastCategoryList _ catList.	^lastCategory _ categoryName! !!Celeste methodsFor: 'table of contents pane' stamp: 'jm 8/20/1998 13:10'!nextMessage	"Select the next message."	| index |	(currentCategory isNil | currentMsgID isNil) ifTrue: [^ self].	index _ currentMessages indexOf: currentMsgID.	index < currentMessages size		ifTrue: [self setTOCEntry: (currentTOC at: index + 1)]		ifFalse: [self setTOCEntry: (currentTOC at: 1)].	self changed: #tocEntry.! !!Celeste methodsFor: 'table of contents pane' stamp: 'jm 8/20/1998 08:14'!otherCategories	"Prompt the user with a menu of all other categories in which the currently selected message appears. If the user chooses a category from this menu, go to that category."	| otherCategories choice |	otherCategories _		(mailDB categoriesThatInclude: currentMsgID) asOrderedCollection.	otherCategories remove: currentCategory ifAbsent: [].	(otherCategories isEmpty) ifTrue: [^self].	choice _ (CustomMenu selections: otherCategories) startUp.	choice = nil ifFalse: [self setCategory: choice].! !!Celeste methodsFor: 'table of contents pane' stamp: 'jm 8/20/1998 13:13'!previousMessage	"Select the previous message."	| index |	(currentCategory isNil | currentMsgID isNil) ifTrue: [^ self].	index _ currentMessages indexOf: currentMsgID.	index > 1		ifTrue: [self setTOCEntry: (currentTOC  at: index - 1)]		ifFalse: [self setTOCEntry: (currentTOC  at: currentMessages size)].	self changed: #tocEntry.! !!Celeste methodsFor: 'table of contents pane' stamp: 'jm 8/20/1998 10:35'!setTOCEntry: newTOCentry	"Change the currently selected message. This is done by finding the message ID corresponding to the selected table of contents entry."	| i |	(newTOCentry isNil | currentTOC isNil)		ifTrue: [currentMsgID _ nil]		ifFalse:			[i _ currentTOC indexOf: newTOCentry ifAbsent: [nil].			 (i isNil)				ifTrue: [currentMsgID _ nil]				ifFalse: [currentMsgID _ currentMessages at: i]].	self changed: #messageText.  "update the message pane"! !!Celeste methodsFor: 'table of contents pane' stamp: 'jm 8/20/1998 10:49'!tocMenu: aMenu	"Answer the menu for the table of contents pane."	currentCategory ifNil: [^ nil].	currentMsgID		ifNil: [			^ aMenu				labels: 'compose\file all\move all\remove all\delete all\search' withCRs				lines: #(1 5)				selections: #(compose fileAll moveAll removeAll deleteAll search)]		ifNotNil: [			^ aMenu				labels: 'delete\compose\reply\forward\file again\move again\file\move\remove\file all\move all\remove all\delete all\other categories\search' withCRs				lines: #(1 4 6 9 13 14)				selections: #(deleteMessage compose reply forward fileAgain moveAgain fileMessage moveMessage removeMessage fileAll moveAll removeAll deleteAll otherCategories search)].! !!Celeste methodsFor: 'filtering' stamp: 'jm 8/20/1998 08:14'!customFilterOn	"Select or define and activate a custom filter."	| filterList filterName filterExpr |	filterList _ CustomFilters keys asOrderedCollection.	filterList addLast: '<define new filter...>'.	filterList addLast: '<edit exising filter...>'.	filterList addLast: '<delete a filter...>'.	filterName _ (CustomMenu selections: filterList)			startUpWithCaption: 'Select a filter:'.	filterName = nil ifTrue: [^self].	filterName = '<delete a filter...>' ifTrue: [^ self deleteFilter].	filterName = '<edit exising filter...>'		ifTrue: [filterExpr _ self editFilter]		ifFalse: [			filterName = '<define new filter...>'				ifTrue: [filterExpr _ self defineFilter]				ifFalse: [filterExpr _ CustomFilters at: filterName]].	filterExpr isEmpty ifTrue: [^self].	customFilterBlock _ Compiler evaluate: '[ :m | ', filterExpr, ']'.	self updateTOC.! !!Celeste methodsFor: 'filtering' stamp: 'jm 8/20/1998 08:14'!deleteFilter	| filterList filterName |	CustomFilters isEmpty ifTrue: [^''].	filterList _ CustomFilters keys asOrderedCollection.	filterName _ (CustomMenu selections: filterList)		startUpWithCaption: 'Filter to delete?'.	filterName = nil ifTrue: [^''].	CustomFilters removeKey: filterName ifAbsent: [].! !!Celeste methodsFor: 'filtering' stamp: 'jm 8/20/1998 08:14'!editFilter	| filterList filterName |	CustomFilters isEmpty ifTrue: [^''].	filterList _ CustomFilters keys asOrderedCollection.	filterName _ (CustomMenu selections: filterList)		startUpWithCaption: 'Filter to edit?'.	filterName = nil ifTrue: [^''].	^self editFilterNamed: filterName filterExpr: (CustomFilters at: filterName)! !!Celeste methodsFor: 'filtering' stamp: 'jm 8/20/1998 12:46'!fromFilterOn	"Show only those messages from the same person as the currently selected message. The user is given a chance to edit the pattern string used to match 'From:' fields."	fromFilter _		(currentMsgID isNil)			ifTrue: ['']			ifFalse: [(mailDB getTOCentry: currentMsgID) from].	fromFilter _ FillInTheBlank		request: '''From:'' filter pattern?'		initialAnswer: fromFilter.	fromFilter _ self removeTrailingSeparators: fromFilter.	self updateTOC.! !!Celeste methodsFor: 'filtering' stamp: 'jm 8/20/1998 12:46'!removeTrailingSeparators: aString	"Answer a new string that is aString with all trailing white space characters removed."	| i |	i _ aString size.	[(i > 0) and: [(aString at: i) isSeparator]] whileTrue: [i _ i - 1].	(i > 1)		ifTrue: [^ aString copyFrom: 1 to: i]		ifFalse: [^ ''].! !!Celeste methodsFor: 'filtering' stamp: 'jm 8/20/1998 12:46'!subjectFilterOn	"Show only those messages whose subject matches the currently selected message. The user is given a chance to edit the pattern string used to match 'Subject:' fields."	subjectFilter _		(currentMsgID isNil)			ifTrue: ['']			ifFalse: [(mailDB getTOCentry: currentMsgID) subject].	subjectFilter _ FillInTheBlank		request: '''Subject:'' filter pattern?'		initialAnswer: subjectFilter.	subjectFilter _ self removeTrailingSeparators: subjectFilter.	self updateTOC.! !!Celeste methodsFor: 'message text pane' stamp: 'jm 8/20/1998 11:59'!format	messageTextView		editString: self formatedMessageText;		hasUnacceptedEdits: true.! !!Celeste methodsFor: 'message text pane' stamp: 'jm 8/20/1998 11:25'!formatedMessageText	"Answer a string that is my formatted mail message."	(currentMsgID isNil)		ifTrue: [^'']		ifFalse: [^(mailDB getMessage: currentMsgID) formattedText].! !!Celeste methodsFor: 'message text pane' stamp: 'jm 8/20/1998 08:14'!messageMenu	"Answer the menu for the message text pane."	(currentMsgID notNil)		ifTrue: [^CustomMenu			labels: 'again\undo\copy\cut\paste\format\accept\cancelcompose\reply\forward' withCRs			lines: #(2 5 6 8)			selections: #(again undo copySelection cut paste format accept cancelcompose reply forward)]		ifFalse: [^SelectionMenu			labels: 'again\undo\copy\cut\paste\compose' withCRs			lines: #(2 5)			selections: #(again undo copySelection cut paste compose)].! !!Celeste methodsFor: 'message text pane' stamp: 'jm 8/20/1998 11:28'!messageMenu: aMenu shifted: shifted	"Use the standard text menu."	^ StringHolder basicNew codePaneMenu: aMenu shifted: shifted! !!Celeste methodsFor: 'message text pane' stamp: 'jm 8/20/1998 11:26'!messageText	(currentMsgID isNil) ifTrue: [^''].	(SuppressWorthlessHeaderFields and: [FormatWhenFetching not])		ifTrue: [^ self formatedMessageText]		ifFalse: [^ mailDB getText: currentMsgID].! !!Celeste methodsFor: 'message text pane' stamp: 'jm 8/20/1998 12:05'!messageText: aStringOrText	currentCategory isNil | currentMsgID isNil ifTrue: [^ self].	mailDB newText: aStringOrText asString for: currentMsgID.	self updateTOC.  "in case the message header was changed"	messageTextView hasUnacceptedEdits: false.	self changed: #messageText.	^ true! !!Celeste methodsFor: 'other' stamp: 'jm 8/20/1998 08:14'!okToChange	"This message is sent when changing the selection in either the message cateory or message list panes. Eventually, this should ask the user if it is okay to throw away and unaccepted edits of the current message. For now, it always gives permission."	currentCategory isNil | currentMsgID isNil ifTrue: [		"no message selected; discard edits in message pane silently"		messageTextView hasUnacceptedEdits: false.		^ true].	messageTextView hasUnacceptedEdits ifFalse: [^ true].	(CustomMenu confirm: 'Discard changes to currently selected message?')		ifTrue: [messageTextView hasUnacceptedEdits: false. ^ true]		ifFalse: [^ false].! !!Celeste methodsFor: 'other' stamp: 'jm 8/20/1998 11:08'!perform: selector orSendTo: otherTarget	"Celeste handles all menu commands."	selector = #format ifTrue: [^ self perform: selector].	((#(yellowButtonActivity shiftedYellowButtonActivity) includes: selector) or:		[(PluggableTextController yellowButtonMessages includes: selector) or:		[PluggableTextController shiftedYellowButtonMessages includes: selector]])			ifTrue: [otherTarget perform: selector]			ifFalse: [self perform: selector].! !!Celeste class methodsFor: 'instance creation'!buildButtonsFor: model	"Answer a collection of handy buttons for the Celeste user interface."	| buttonViewClass buttons b |	Smalltalk isMorphic		ifTrue: [buttonViewClass _ PluggableButtonMorph]		ifFalse: [buttonViewClass _ PluggableButtonView].	buttons _ OrderedCollection new.	b _ buttonViewClass on:		(Switch new			onAction: [model subjectFilterOn];			offAction: [model subjectFilterOff]).	b	label: ('Subj. F.' asParagraph centered);		borderWidth: 1.	buttons add: b.	b _ buttonViewClass on:		(Switch new			onAction: [model fromFilterOn];			offAction: [model fromFilterOff]).	b	label: ('From F.' asParagraph centered);		borderWidth: 1.	buttons add: b.	b _ buttonViewClass on:		(Switch new			onAction: [model customFilterOn];			offAction: [model customFilterOff]).	b	label: ('Custom F.' asParagraph centered);		borderWidth: 1.	buttons add: b.	b _ buttonViewClass new		model: (Button new onAction: [model reply]);		action: #turnOn;		label: ('Reply' asParagraph centered);		borderWidth: 1.	buttons add: b.	b _ buttonViewClass new		model: (Button new onAction: [model forward]);		action: #turnOn;		label: ('Forward' asParagraph centered);		borderWidth: 1.	buttons add: b.	b _ buttonViewClass new		model: (Button new onAction: [model deleteMessage]);		action: #turnOn;		label: ('Delete' asParagraph centered);		borderWidth: 1.	buttons add: b.	^ buttons! !!Celeste class methodsFor: 'instance creation' stamp: 'jm 8/20/1998 11:52'!buildViewsFor: model	"Answer a collection of window panes for the Celeste user interface."	| listViewClass textViewClass views v |	Smalltalk isMorphic		ifTrue: [			listViewClass _ PluggableListMorphByItem.			textViewClass _ PluggableTextMorph]		ifFalse: [			listViewClass _ PluggableListViewByItem.			textViewClass _ PluggableTextView].	views _ OrderedCollection new.	v _ listViewClass		on: model		list: #categoryList		selected: #category		changeSelected: #setCategory:		menu: #categoryMenu:		keystroke: #categoriesKeystroke:.	views add: v.	v _ listViewClass		on: model		list: #tocEntryList		selected: #tocEntry		changeSelected: #setTOCEntry:		menu: #tocMenu:		keystroke: #tocKeystroke:.	views add: v.	v _ textViewClass new		on: model		text: #messageText		accept: #messageText:		readSelection: nil		menu: #messageMenu:shifted:.	v borderWidth: 1.	model messageTextView: v.	views add: v.	^ views! !!Celeste class methodsFor: 'instance creation' stamp: 'jm 8/20/1998 12:42'!openOnDatabase: aMailDB	"Open a MailReader on the given mail database."	| model views buttons topWindow |	model _ self new openOnDatabase: aMailDB.	views _ self buildViewsFor: model.	buttons _ self buildButtonsFor: model.	Smalltalk isMorphic		ifTrue: [			topWindow _ (SystemWindow labelled: 'Celeste') model: model.			topWindow addMorph: (buttons at: 1) frame: (0.0@0.0 extent: 0.16@0.05).			topWindow addMorph: (buttons at: 2) frame: (0.16@0.0 extent: 0.17@0.05).			topWindow addMorph: (buttons at: 3) frame: (0.33@0.0 extent: 0.17@0.05).			topWindow addMorph: (buttons at: 4) frame: (0.50@0.0 extent: 0.16@0.05).			topWindow addMorph: (buttons at: 5) frame: (0.66@0.0 extent: 0.17@0.05).			topWindow addMorph: (buttons at: 6) frame: (0.83@0.0 extent: 0.17@0.05).			topWindow addMorph: (views at: 1) frame: (0.0@0.05 extent: 0.4@0.25).			topWindow addMorph: (views at: 2) frame: (0.4@0.05 extent: 0.6@0.25).			topWindow addMorph: (views at: 3) frame: (0.0@0.30 extent: 1.0@0.70).			buttons do: [:b | b onColor: Color lightGray offColor: Color white].			topWindow openInWorld]		ifFalse: [			topWindow _ StandardSystemView new				model: model;				label: 'Celeste';				minimumSize: 400@250.			(views at: 1) window: (0@0 extent: 40@25).			(views at: 2) window: (0@0 extent: 60@25).			(views at: 3) window: (0@0 extent: 100@70).			(buttons at: 1) window: (0@0 extent: 17@5).			(buttons at: 2) window: (0@0 extent: 17@5).			(buttons at: 3) window: (0@0 extent: 16@5).			(buttons at: 4) window: (0@0 extent: 17@5).			(buttons at: 5) window: (0@0 extent: 17@5).			(buttons at: 6) window: (0@0 extent: 16@5).			topWindow				addSubView: (buttons at: 1);				addSubView: (buttons at: 2) toRightOf: (buttons at: 1);				addSubView: (buttons at: 3) toRightOf: (buttons at: 2);				addSubView: (buttons at: 4) toRightOf: (buttons at: 3);				addSubView: (buttons at: 5) toRightOf: (buttons at: 4);				addSubView: (buttons at: 6) toRightOf: (buttons at: 5);				addSubView: (views at: 1) below: (buttons at: 1);				addSubView: (views at: 2) toRightOf: (views at: 1);				addSubView: (views at: 3) below: (views at: 1).			topWindow controller open].! !!Celeste class methodsFor: 'sending' stamp: 'jm 8/20/1998 11:48'!addMVCMailSenderButtons: topView textView: mailTextView	"Add some handy buttons to the mail sender window."	| sendButton sendAndKeepButton doneButton |	sendButton _		PluggableButtonView new			model: (Button new onAction:					[mailTextView controller accept.					 mailTextView controller controlTerminate.					 Celeste postMessage: mailTextView model contents]);			action: #turnOn;			label: ('Send' asParagraph centered);			window: (0@0 extent: 34@10);			borderWidth: 1.	sendAndKeepButton _		PluggableButtonView new			model: (Button new onAction:					[mailTextView controller accept.					 mailTextView controller controlTerminate.					 Celeste postMessage: mailTextView model contents.					 Celeste addMessageToInbox: mailTextView model contents]);			action: #turnOn;			label: ('Send&Keep' asParagraph centered);			window: (0@0 extent: 33@10);			borderWidth: 1.	doneButton _		PluggableButtonView new			model: (Button new onAction: [topView controller close]);			action: #turnOn;			label: ('Done' asParagraph centered);			window: (0@0 extent: 33@10);			borderWidth: 1.	topView		addSubView: sendButton above: topView firstSubView;		addSubView: sendAndKeepButton toRightOf: sendButton;		addSubView: doneButton toRightOf: sendAndKeepButton.! !!Celeste class methodsFor: 'sending' stamp: 'jm 8/20/1998 12:16'!openMailSenderOn: aStringOrText	"Open an instance of me for editing with the given initial message text."	| model messageTextView topView |	Smalltalk isMorphic ifTrue: [Smalltalk beep. ^ self].  "not yet Morphic-ized"	model _ StringHolder new contents: aStringOrText.	messageTextView _ PluggableTextView on: model 		text: #contents		accept: nil		readSelection: #contentsSelection		menu: #codePaneMenu:shifted:.	messageTextView		window: (0@0 extent: 100@90);		borderWidth: 1.	topView _ StandardSystemView new.	topView		model: model;		label: 'Mister Postman';		minimumSize: 300@200;		addSubView: messageTextView.	self addMVCMailSenderButtons: topView textView: messageTextView.	topView controller open.! !!CustomMenu methodsFor: 'construction' stamp: 'jm 8/20/1998 08:34'!labels: aString font: aFont lines: anArrayOrNil	"This method allows the receiver to accept old-style SelectionMenu creation messages. It should be used only for backward compatibility during the MVC-to-Morphic transition. New code should be written using the other menu construction protocol such as addList:."	| labelList linesArray |	labelList _ (aString findTokens: String cr) asArray.	anArrayOrNil		ifNil: [linesArray _ #()]		ifNotNil: [linesArray _ anArrayOrNil].	1 to: labelList size do: [:i |		self add: (labelList at: i) action: (labelList at: i).		(linesArray includes: i) ifTrue: [self addLine]].	font ifNotNil: [font _ aFont].! !!CustomMenu methodsFor: 'private' stamp: 'jm 8/20/1998 08:30'!build	"Turn myself into an invokable ActionMenu."	| stream |	stream _ WriteStream on: (String new).	labels do: [: label | stream nextPutAll: label; cr].	(labels isEmpty) ifFalse: [stream skip: -1].  "remove final cr"	super labels: stream contents		font: (TextStyle default fontAt: 1)		lines: dividers.! !!MorphicModel methodsFor: 'initialization' stamp: 'jm 8/20/1998 09:08'!model: anObject	"Set my model and make me me a dependent of the given object."	model ifNotNil: [model removeDependent: self].	anObject ifNotNil: [anObject addDependent: self].	model _ anObject.! !!PluggableButtonMorph methodsFor: 'accessing'!action: aSymbol 	"Set actionSelector to be the action defined by aSymbol."	actionSelector _ aSymbol.! !!PluggableButtonMorph class methodsFor: 'instance creation'!on: anObject	^ self on: anObject getState: #isOn action: #switch! !!PluggableListMorphByItem methodsFor: 'as yet unclassified' stamp: 'jm 8/20/1998 09:44'!changeModelSelection: anInteger	"Change the model's selected item to be the one at the given index."	| item |	setIndexSelector ifNotNil: [		item _ (anInteger = 0 ifTrue: [nil] ifFalse: [itemList at: anInteger]).		model perform: setIndexSelector with: item].	self update: getIndexSelector.! !!PluggableTextMorph methodsFor: 'pane events' stamp: 'jm 8/20/1998 08:39'!mouseLeave: event	textMorph ifNotNil: [selectionInterval _ textMorph editor selectionInterval].	super mouseLeave: event.	event hand newKeyboardFocus: nil.! !!PluggableTextView methodsFor: 'model access' stamp: 'jm 8/20/1998 11:55'!model: aLockedModel 	"Refer to the comment in View|model:." 	self model: aLockedModel controller: controller.	self editString: self getText.! !Celeste removeSelector: #contents!Celeste removeSelector: #formatedMessage!Celeste removeSelector: #codePaneMenu:shifted:!Celeste removeSelector: #contents:!Celeste removeSelector: #message:!Celeste removeSelector: #messageMenu:!Celeste class removeSelector: #addSenderButtons:textView:!Celeste class removeSelector: #OLDopenMailSenderOn:!Celeste class removeSelector: #OLDopenOnDatabase:!Celeste class removeSelector: #buildMVCMailSenderButtonsTextView:topView:!Celeste class removeSelector: #addButtons:model:!Smalltalk removeClassNamed: #MailTextController!