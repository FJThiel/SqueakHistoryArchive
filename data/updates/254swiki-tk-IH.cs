'From Squeak 2.2beta of Sept 11, 1998 on 13 September 1998 at 9:01:38 pm'!AuthorizedSwikiAction subclass: #AuthorizedWriteSwiki	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PluggableWebServer'!!AuthorizedSwikiAction methodsFor: 'URL processing' stamp: 'tk 9/13/1998 20:45'!processSpecial: request	"Let SwikiAction process this with no authorization check."	^(super process: request).! !!AuthorizedWriteSwiki commentStamp: 'tk 9/13/1998 19:29' prior: 0!Allows anyone to read the pages of this Swiki, but only authorized users can edit or change pages.  Can have multiple users, each with a different password.  Each can modify the whole Swiki area.To restart an existing Authorized Swiki:	AuthorizedWriteSwiki new restore: 'SWSecure'.The front page URL is:  http://serverMachine:80/SWSecure.1To make a completely new one:	| a s |	a := Authorizer new.	a realm: 'SwikiArea'.	a mapName: 'viki' password: 'hard2guess' to: 'viki'.	AuthorizedWriteSwiki setUp: 'SWSecure'.	s := AuthorizedWriteSwiki new restore: 'SWSecure'.	s authorizer: a.!!AuthorizedWriteSwiki methodsFor: 'as yet unclassified' stamp: 'tk 9/13/1998 20:59'!process: request	"Only demand authorization of name and password when requesting the edit page, requesting the append page, receiving an edit, or receiving an append."	| command coreRef |	request fields ifNotNil: ["Are there input fields?"		coreRef _ request message size < 2			ifTrue: ['1']			ifFalse: [request message at: 2].		coreRef = 'searchresult' ifFalse: ["Must be text for an edit!!"			self checkAuthorization: request]].	request message size > 2 ifTrue:			["SearchResult, All, Versions, or Edit"			command _ request message at: 3.			command = 'edit' ifTrue:					[self checkAuthorization: request].			command = 'insert' ifTrue:					[self checkAuthorization: request]].	^(super processSpecial: request).		"all the way up to SwikiAction"! !!PWS class methodsFor: 'Initializing' stamp: 'tk 9/13/1998 18:36'!checkVersion	"This is Squeak 2.2.  Make sure that the Server:swiki folder is the version for 2.2."	| fName |	fName _ ServerAction serverDirectory, 'swiki', (ServerAction pathSeparator), 				'page.html'.	(FileDirectory new fileExists: fName) ifFalse: [self inform: 'The path to the Server folder is wrong.Please modify the following method ...'. 	Browser openMessageBrowserForClass: ServerAction class 		selector: #serverDirectory editString: nil.	^ false].	fName _ ServerAction serverDirectory, 'swiki', (ServerAction pathSeparator), 				'render.html'.	(FileDirectory new fileExists: fName) ifFalse: [self inform: 'Initialization failed.  ''swiki'' folder is out of date.Get one from:http://guzdial.cc.gatech.edu/st/Swiki-GuzPWS2.tar orhttp://guzdial.cc.gatech.edu/st/Swiki-GuzPWS2.sea'. ^ false].	^ true! !!PWS class methodsFor: 'Initializing' stamp: 'tk 9/13/1998 18:03'!howToStart	"To set up your new Swiki, you need a copy of the 'Server' folderfound at:http://www.cc.gatech.edu/fac/mark.guzdial/squeak/pws/Put the 'Server' folder into the folder that your image is in.Modify this method to be a path to your Server folder, select it, andchoose fileItIn:!!ServerAction class methodsFor: 'System Services' stamp: 'tk 1/19/98 12:52'!!serverDirectory	^ 'Hard Disk:Squeak1.31:Server:'!! !!Then do:	PWS initializeAll.To enable a new Swiki called OurOwnArea.Make a folder named OurOwnArea in the Server folder.  Then do:	SwikiAction setUp: 'OurOwnArea'.	(its main URL is http://thisMachine:80/OurOwnArea.1)<<<<There has been a major change between Squeak 2.1 and 2.2.  If you are reloading an existing Swiki for the first time in Squeak 2.2, Do this instead of the normal reload.	SwikiAction new restore: 'myswiki'.		'<- New line for each additional Swiki area'.	SwikiAction new restore: 'myswiki'.		'Case DOES matter in the name of Swiki here.'.	(PWS actions select: [ :action | action isKindOf: SwikiAction ])		do: [ :action | action fixAllLineEndings ].	PWS serveOnPort: 80 loggingTo: 'log.txt'.(This to converts LineFeeds to CarriageReturns in all of your swiki data files.  Only do this the first time!!)>>>>>Suppose you already have a Swiki called 'myswiki'.To start up:	SwikiAction new restore: 'myswiki'.		'<- New line for each additional Swiki area'.	SwikiAction new restore: 'myswiki'.		'Case DOES matter in the name of Swiki here.'.	PWS serveOnPort: 80 loggingTo: 'log.txt'.To stop the server:	PWS stopServer.-----------------------To purge a particular file of all except the latest version:	((PWS actions at: 'myswiki' asLowercase) urlmap atID: '3') condenseChanges.To roll the entire wiki back to a previous time:	""This does not erase data, it just copies the older page to the end""	(PWS actions at: 'myswiki' asLowercase) rollBack: '1/28/98' asDate			at: '1:30 am' asTime.The look of a served page is controlled by a template.  Templates live inthe 'swiki' folder in the 'Server' folder.  Beware that templates arecached by HTMLformatter.  If you change a template, you will not see theeffect until you reload the Swiki.To set up a Swiki with a password (same for all users), seeAuthorizedSwikiAction comment.To enable a privledged user to execute code remotely (on a workspace page):	(PWS actions at: 'authorized') mapName: 'JSmith' password:'hard2guess' to: 'JSmith'.	(URL is http://thisMachine:80/authorized.workspace.html)To backup the user data to the disk, do nothing.  All info is alreadyinside the page files on the disk.To enable a new Swiki that evaluates Squeak code submitted by the user.Make a folder named SqkEval in the Server folder.  Then do:	ActiveSwikiAction setUp: 'SqkEval'.	(this is dangerous, because there are still ways a user could crashyour server)To convert a Swiki with LineFeed line endings to CarriageReturn lineendings, execute these lines:          (PWS actions select: [ :action | action isKindOf: SwikiAction ])		do: [ :action | action fixAllLineENdings ]To convert from an old pre-Squeak1.3 Swiki to the new page format:	(In the old image, do a backup:)		| mine | mine _ PWS actions at: 'myswiki'.		mine saveTo: mine path,'backup28JanA'.	(Quit.  Start the new image which has this version of the Swiki code)	(Do not start the server!!!!!!)		PWS initializeAll.		SwikiAction restore: 'myswiki' from:			(ServerAction serverDirectory), 'myswiki:backup28JanA'.		(PWS actions at: 'myswiki' asLowercase) convert.	(do these steps for each Swiki you have)	(now, start the server)	PWS serveOnPort: 80 loggingTo: 'log.txt'."!]style[(10 712 46 2904)f1b,f1,f3,f1! !!PWS class methodsFor: 'Initializing' stamp: 'tk 9/13/1998 18:20'!initializeAll	| anAuthorizer |	(self checkVersion) ifFalse: [^ false].	anAuthorizer _ Authorizer new.	anAuthorizer realm: 'AuthorizedSpace'."	anAuthorizer mapName: 'JSmith' password: 'hard2guess' to: 'JSmith'.  "		"No default account!!  See howToStart to enable remote code execution."	self link: 'authorized' to: (AuthorizedServerAction new authorizer: anAuthorizer).	self link: 'chat' to: ChatPage new.	self link: 'default' to: ServerAction new.	self link: 'embedded' to: EmbeddedServerAction new.	self link: 'smtlk' to: CodeServer new.	self link: 'chunk' to: CodeServer new.	Comment setUpExample.	self link: 'comment' to: (SinglePlugServerAction new 			processBlock: [:request | Comment process: request]).! !