'From Squeak3.1alpha of 5 February 2001 [latest update: #3659] on 19 February 2001 at 6:18:28 pm'!"Change Set:		moreAppearanceDate:			19 February 2001Author:			Bob Arninga little more work on the properties panel, now available through the magenta (recolor) halo"!!Morph methodsFor: 'accessing' stamp: 'RAA 2/19/2001 17:37'!sticky: aBoolean	extension sticky: aBoolean! !!Morph methodsFor: 'accessing' stamp: 'RAA 2/19/2001 17:38'!toggleLocked		self lock: self isLocked not! !!Morph methodsFor: 'rounding' stamp: 'RAA 2/19/2001 17:28'!cornerStyle	^self wantsRoundedCorners ifTrue: [#rounded] ifFalse: [#square]! !!Morph methodsFor: 'rounding' stamp: 'RAA 2/19/2001 17:27'!cornerStyle: aSymbol	aSymbol == #square		ifTrue: [self removeProperty: #roundedCorners]		ifFalse: [self setProperty: #roundedCorners toValue: true].	self changed! !!Morph methodsFor: 'meta-actions' stamp: 'RAA 2/19/2001 16:52'!openAPropertySheet	ObjectPropertiesMorph basicNew		targetMorph: self;		initialize;		openNearTarget! !!HaloMorph methodsFor: 'private' stamp: 'RAA 2/19/2001 18:16'!doRecolor: evt with: aHandle	"Change the color of the target, if appropriate"	evt hand obtainHalo: self.	(aHandle containsPoint: evt cursorPoint)		ifFalse:  "only do it if mouse still in handle on mouse up"			[self delete.			target addHalo: evt]		ifTrue:			["innerTarget changeColor."			innerTarget openAPropertySheet.			self showingDirectionHandles ifTrue: [self addHandles]]	! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 18:02'!buildFakeSlider: nameString selector: aSymbol help: helpString	| col |	col _ self inAColumn: {		self lockedString: nameString.	}.	col 		color: color muchLighter;		hResizing: #shrinkWrap;		setBalloonText: helpString;		on: #mouseMove send: #mouseAdjust:in: to: self;		on: #mouseDown send: #mouseAdjust:in: to: self;		setProperty: #changeSelector toValue: aSymbol.	^col! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 18:02'!inARow: anArray named: aString	^(self inARow: anArray) setNamePropertyTo: aString! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 17:15'!initialize	super initialize.	targetMorph ifNil: [targetMorph _ RectangleMorph new openInWorld].	self borderWidth: 4.	self layoutInset: 4.	self hResizing: #shrinkWrap.	self vResizing: #shrinkWrap.	self color:  (Color r: 0.548 g: 0.839 b: 0.452).	self borderColor: self color darker.	self rebuild.! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 17:58'!mouseAdjust: evt in: aMorph	targetMorph 		perform: (aMorph valueOfProperty: #changeSelector)		with: ((evt cursorPoint x - aMorph left - 4) // 3 max: 0)! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 17:10'!openNearTarget	| w wb tb leftOverlap rightOverlap topOverlap bottomOverlap best |	w _ targetMorph world ifNil: [World].	wb _ w bounds.	self fullBounds.	tb _ targetMorph boundsInWorld.	leftOverlap _ self width - (tb left - wb left).	rightOverlap _ self width - (wb right - tb right).	topOverlap _ self height - (tb top - wb top).	bottomOverlap _ self height - (wb bottom - tb bottom).	best _ nil.	{		{leftOverlap. #topRight:. #topLeft}.		{rightOverlap. #topLeft:. #topRight}.		{topOverlap. #bottomLeft:. #topLeft}.		{bottomOverlap. #topLeft:. #bottomLeft}.	} do: [ :tuple |		(best isNil or: [tuple first < best first]) ifTrue: [best _ tuple].	].	self perform: best second with: (tb perform: best third).	self top: (self top max: wb top).	self bottom: (self bottom min: wb bottom).	self left: (self left max: wb left).	self right: (self right min: wb right).	self openInWorld: w.! !!ObjectPropertiesMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/19/2001 18:00'!rebuild	self removeAllMorphs.	self addARow: {		self lockedString: 'Properties for ',targetMorph name.	}.	self addARow: {		self inAColumn: {			self inARow: {				self					directToggleButtonFor: targetMorph 					getter: #hasDropShadow setter: #toggleDropShadow					help: 'Turn drop shadows on or off'.				self lockedString: ' Drop shadow'.			}.			self inARow: {				self					directToggleButtonFor: targetMorph 					getter: #wantsRoundedCorners setter: #toggleCornerRounding					help: 'Turn rounded corners on or off'.				self lockedString: ' Rounded corners'.			}.			self inARow: {				self					directToggleButtonFor: targetMorph 					getter: #isSticky setter: #toggleStickiness					help: 'Turn stickiness on or off'.				self lockedString: ' Sticky'.			}.			self inARow: {				self					directToggleButtonFor: targetMorph 					getter: #isLocked setter: #toggleLocked					help: 'Turn lock on or off'.				self lockedString: ' Lock'.			}.			self inARow: {				self					buildFakeSlider: 'Border width' 					selector: #borderWidth:					help: 'Drag in here to cahnge the border width'			}.		}.		self 			buttonNamed: 'Solid' action: #makeTargetSolidFill color: color lighter 			help: 'use a solid fill'.		self 			buttonNamed: 'Gradient' action: #makeTargetGradientFill color: color lighter 			help: 'use a gradient fill'.	}.	self addARow: {		self inAColumn: {			self colorPickerFor: targetMorph getter: #color setter: #color:.			self lockedString: 'Color'.		} named: #pickerForColor.		self inAColumn: {			self colorPickerFor: targetMorph getter: #borderColor setter: #borderColor:.			self lockedString: 'Border Color'.		} named: #pickerForBorderColor.	}.	self addARow: {		self inAColumn: {			self colorPickerFor: targetMorph getter: #shadowColor setter: #shadowColor:.			self lockedString: 'Shadow Color'.		} named: #pickerForShadowColor.	}.	self addARow: {		self inAColumn: {			self colorPickerFor: self getter: #tgt1stGradientColor setter: #tgt1stGradientColor:.			self lockedString: '1st gradient color'.		} named: #pickerFor1stGradientColor.		self inAColumn: {			self colorPickerFor: self getter: #tgt2ndGradientColor setter: #tgt2ndGradientColor:.			self lockedString: '2nd gradient color'.		} named: #pickerFor2ndGradientColor.	}.	self addARow: {		self 			buttonNamed: 'Accept' action: #doAccept color: color lighter 			help: 'keep changes made and close panel'.		self 			buttonNamed: 'Cancel' action: #doCancel color: color lighter 			help: 'cancel changes made and close panel'.	}.	revertSteps _ Dictionary new.	revertSteps at: #fillStyle: put: targetMorph fillStyle.	revertSteps at: #hasDropShadow: put: targetMorph hasDropShadow.	revertSteps at: #shadowColor: put: targetMorph shadowColor.	(targetMorph respondsTo: #borderColor:) ifTrue: [		revertSteps at: #borderColor: put: targetMorph borderColor.	].	revertSteps at: #borderWidth: put: targetMorph borderWidth.	revertSteps at: #cornerStyle: put: targetMorph cornerStyle.	revertSteps at: #cornerStyle: put: targetMorph cornerStyle.	revertSteps at: #sticky: put: targetMorph isSticky.	revertSteps at: #lock: put: targetMorph isLocked. 	"menu add: 'shadow offset...' target: self selector: #setShadowOffset:."! !ObjectPropertiesMorph removeSelector: #xxx!