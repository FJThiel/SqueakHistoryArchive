'From Squeak2.8alpha of 12 January 2000 [latest update: #1899] on 7 March 2000 at 10:16:12 am'!"Change Set:		GameTweaksDate:			5 March 2000Author:			Dan IngallsA couple of simple tweaks:Removes a number of classes from 'open new morph' choices.Flashes elapsed time rather than card count when a game has been won.Tallies FreeCell wins and losses after replays are considered.Closing the statistics window no longer prevents re-opening it.  This used only to work if you used the OK button."!Object subclass: #FreeCellStatistics	instanceVariableNames: 'sessionWins sessionLosses totalWins totalLosses streakWins streakLosses winsWithReplay lossesWithReplay lastGameWon lastGameLost currentCount currentType window statsMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Games'!!FreeCell methodsFor: 'actions' stamp: 'di 3/5/2000 15:30'!cardMovedHome	cardsRemainingDisplay value: (cardsRemainingDisplay value - 1).	autoMoveRecursionCount _ autoMoveRecursionCount - 1 max: 0.	cardsRemainingDisplay value = 0 		ifTrue: [self gameWon]		ifFalse: [autoMoveRecursionCount = 0 ifTrue: [elapsedTimeDisplay continue]].! !!FreeCell methodsFor: 'actions' stamp: 'di 3/5/2000 16:20'!gameLost	state _ #lost.	elapsedTimeDisplay stop.	cardsRemainingDisplay highlighted: true; flash: true.	Statistics gameLost: self currentGame! !!FreeCell methodsFor: 'actions' stamp: 'di 3/5/2000 16:20'!gameWon	state _ #won.	elapsedTimeDisplay stop; highlighted: true; flash: true.	Statistics gameWon: self currentGame! !!FreeCell methodsFor: 'actions' stamp: 'di 1/16/2000 10:35'!newGame	Collection initialize.	self newGameNumber: nil.	state _ #newGame! !!FreeCell methodsFor: 'actions' stamp: 'di 3/5/2000 16:21'!newGameNumber: aSeedOrNil 	cardsRemainingDisplay value ~~ 0 ifTrue: [self gameLost].	cardsRemainingDisplay flash: false; highlighted: false; value: 52.	elapsedTimeDisplay flash: false; highlighted: false.	"board handles nil case"	self board pickGame: aSeedOrNil.	elapsedTimeDisplay reset; start.	gameNumberDisplay value: self currentGame! !!FreeCell methodsFor: 'actions' stamp: 'di 3/5/2000 15:35'!quit	cardsRemainingDisplay value ~~ 0 ifTrue: [self gameLost].	self owner == self world		ifTrue: [self delete]		ifFalse: [self owner delete].	Statistics close! !!FreeCellBoard class methodsFor: 'as yet unclassified' stamp: 'di 1/16/2000 10:39'!includeInNewMorphMenu	^false! !!FreeCellStatistics methodsFor: 'printing' stamp: 'di 3/5/2000 15:22'!printOn: aStream	self printSessionOn: aStream.	aStream cr.	self printTotalOn: aStream.	aStream cr.	self printReplaysOn: aStream.	aStream cr.	self printStreaksOn: aStream.! !!FreeCellStatistics methodsFor: 'printing' stamp: 'di 3/5/2000 15:38'!printReplaysOn: aStream 	| total |	aStream nextPutAll: 'With replays: ';	 tab.	self print: winsWithReplay type: #wins on: aStream.	aStream nextPutAll: ', '.	self print: lossesWithReplay type: #losses on: aStream.	total _ winsWithReplay + lossesWithReplay.	total ~~ 0 ifTrue: [aStream nextPutAll: ', ';		 print: (winsWithReplay / total * 100) asInteger;		 nextPut: $%]! !!FreeCellStatistics methodsFor: 'actions' stamp: 'di 3/5/2000 14:30'!gameLost: gameNumber	"Don't count multiple losses of the same game"	gameNumber = lastGameLost ifTrue: [^ self].	lastGameLost _ gameNumber.	sessionLosses _ sessionLosses + 1.	totalLosses _ totalLosses + 1.	lossesWithReplay _ lossesWithReplay + 1.	currentType = #losses		ifTrue: [currentCount _ currentCount + 1]		ifFalse: 			[currentCount _ 1.			currentType _ #losses].	self updateStreak.	self changed! !!FreeCellStatistics methodsFor: 'actions' stamp: 'di 3/5/2000 16:48'!gameWon: gameNumber	sessionWins _ sessionWins + 1.	totalWins _ totalWins + 1.	gameNumber = lastGameWon ifFalse:		[gameNumber = lastGameLost ifTrue:			["Finally won a game by replaying"			lossesWithReplay _ lossesWithReplay - 1].		winsWithReplay _ winsWithReplay + 1].	lastGameWon _ gameNumber.	currentType = #wins		ifTrue: [currentCount _ currentCount + 1]		ifFalse: [currentCount _ 1.				currentType _ #wins].	self updateStreak.	self changed! !!FreeCellStatistics methodsFor: 'actions' stamp: 'di 3/5/2000 14:30'!reset	sessionWins 		_ 0.	sessionLosses 	_ 0.	totalWins 		_ 0.	totalLosses 		_ 0.	streakWins		_ 0.	streakLosses 	_ 0. 	winsWithReplay _ 0.	lossesWithReplay _ 0.	lastGameWon	_ 0.	lastGameLost 	_ 0.	currentCount 	_ 0.	currentType		_ nil.	self changed.		! !!FreeCellStatistics methodsFor: 'actions' stamp: 'di 3/5/2000 15:25'!resetReplayStats  "FreeCellStatistics resetReplayStats"	"Used only for updating old instances" 	winsWithReplay _ 0.	lossesWithReplay _ 0.	lastGameWon	_ 0.	lastGameLost 	_ 0.! !!FreeCellStatistics methodsFor: 'user interface' stamp: 'di 3/5/2000 15:41'!display	| panel |	(window notNil and: [window owner notNil]) ifTrue: [window activate. ^nil].	panel _ AlignmentMorph newColumn.	panel		centering: #center;		hResizing: #rigid;		vResizing: #rigid;		extent: 250@150;		color: self color;		addMorphBack: self makeStatistics;		addMorphBack: self makeControls.	window _ panel openInWindowLabeled: 'FreeCell Statistics'.! !!FreeCellStatistics class methodsFor: 'instance creation' stamp: 'di 1/16/2000 10:39'!includeInNewMorphMenu	^false! !!LedDigitMorph methodsFor: 'drawing' stamp: 'di 1/23/2000 12:30'!drawOn: aCanvas	| foregroundColor backgroundColor thickness hThickness vThickness hOffset vOffset |	foregroundColor _ highlighted ifTrue: [Color white] ifFalse: [color].	backgroundColor _ color darker darker darker.	hThickness _ self height * 0.1.	vThickness _ self width * 0.1.	thickness _ hThickness min: vThickness.	vOffset _ ((hThickness - thickness) // 2) max: 0.	hOffset _ ((vThickness - thickness) // 2) max: 0.	aCanvas fillRectangle: self bounds color: backgroundColor.	HSegmentOrigins with: (HSegments at: digit+1) do:		[:o :isLit |		aCanvas			fillRectangle: (Rectangle				origin: (self position + (0@vOffset) + (o * self extent)) rounded				extent: ((self width * 0.6) @ thickness) rounded)			color: (isLit ifTrue: [foregroundColor] ifFalse: [backgroundColor])].	VSegmentOrigins with: (VSegments at: digit+1) do:		[:o :isLit |		aCanvas			fillRectangle: (Rectangle				origin: (self position + (hOffset@0) + (o * self extent)) rounded				extent: (thickness @ (self height * 0.25)) rounded)			color: (isLit ifTrue: [foregroundColor] ifFalse: [backgroundColor])].! !!LedDigitMorph class methodsFor: 'initialization' stamp: 'di 1/16/2000 10:39'!includeInNewMorphMenu	^false! !!LedMorph class methodsFor: 'as yet unclassified' stamp: 'di 1/16/2000 10:39'!includeInNewMorphMenu	^false! !!LedTimerMorph class methodsFor: 'as yet unclassified' stamp: 'di 1/16/2000 10:39'!includeInNewMorphMenu	^false! !!PlayingCard class methodsFor: 'all' stamp: 'di 1/16/2000 10:38'!includeInNewMorphMenu	^false! !!PlayingCardDeck class methodsFor: 'instance creation' stamp: 'di 1/16/2000 10:38'!includeInNewMorphMenu	^false! !!PlayingCardMorph class methodsFor: 'initialize-release' stamp: 'di 1/16/2000 10:40'!includeInNewMorphMenu	^false! !!SameGameBoard class methodsFor: 'as yet unclassified' stamp: 'di 1/16/2000 10:37'!includeInNewMorphMenu	^false! !!SameGameTile class methodsFor: 'as yet unclassified' stamp: 'di 1/16/2000 10:37'!includeInNewMorphMenu	^false! !!Tetris methodsFor: 'initialization' stamp: 'di 1/19/2000 22:53'!showScoreDisplay	^self rowForButtons		hResizing: #rigid;		addMorph: (			self 				wrapPanel: (					(scoreDisplay _ LedMorph new) digits: 5; extent: (4*10@15)				) 				label: 'Score:'		)! !FreeCellStatistics removeSelector: #gameWon!FreeCellStatistics removeSelector: #gameLost!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."FreeCellStatistics allInstancesDo: [:fcs | fcs resetReplayStats].FreeCellStatistics removeSelector: #resetReplayStats!