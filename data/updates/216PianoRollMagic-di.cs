'From Squeak 2.1 of June 30, 1998 on 7 September 1998 at 10:21:50 pm'!"Change Set:		PianoRollMagicDate:			7 September 1998Author:			Dan IngallsThis changeSet supports the ability to display images (as opposed to just rectangles) in the piano roll without slowing down display speed significantly.What it actually DOES as a demo, is to display ellipses whose diameter is proportional to the note durations.  I know this is silly, but it puts in place all the mechanism needed for someone to come along and define proper note shapes for the variaous durations.  My code also handles the ability to add color to each note, without having to store a whole separate set of note forms for each color.You can change back and forth between the old rectangles and these colored bubbles by editing the method...	PianoRollScoreMorph>>addNoteswhere it says...	'<-- Change comment quotes here**'This file as supplied leaves the old rectangle display.  Make the above edit to see the demo."!ImageMorph subclass: #PianoRollNoteMorph	instanceVariableNames: ''	classVariableNames: 'NoteColorIndex NoteForms '	poolDictionaries: ''	category: 'Music-Scores'!!ColorForm methodsFor: 'color manipulation' stamp: 'di 8/28/1998 15:48'!indexOfColor: aColor	"Return the index of aColor in my color array"	self ensureColorArrayExists.	^ colors indexOf: aColor ifAbsent: [0]! !!ColorForm methodsFor: 'color manipulation' stamp: 'di 8/28/1998 15:49'!replaceColorAtIndex: index with: newColor	"Replace a color map entry with newColor."	self ensureColorArrayExists.	colors at: index put: newColor.	cachedColormap == nil ifFalse:		[cachedColormap at: index put: (newColor pixelValueForDepth: cachedDepth)]! !!Morph methodsFor: 'drawing' stamp: 'di 7/8/1998 12:43'!imageForm: depth forRectangle: rect	| canvas |	canvas _ FormCanvas extent: rect extent depth: depth.	self fullDrawOn: (canvas copyOffset: rect topLeft negated).	^ canvas form offset: rect topLeft! !!Morph methodsFor: 'drawing' stamp: 'di 7/8/1998 12:42'!imageFormDepth: depth	^ self imageForm: depth forRectangle: self fullBounds! !!PianoRollNoteMorph commentStamp: 'di 9/7/1998 22:21' prior: 0!PianoRollNoteMorphs, as their name implies, are used to display musical notes on a piano roll.  The design is centered around speed of display, compact representation through sharing, and the ability to display in any color without having to make new note forms.The note shapes are stored as ColorForms, which are then displayed in paint mode (0 is transparent) using the individual note color in the color map.Each note carries an offset which can be used to display complex note shapes so that the center of the note ellipse appears in the proper location.!!PianoRollNoteMorph methodsFor: 'as yet unclassified' stamp: 'di 8/28/1998 15:51'!drawOn: aCanvas	image replaceColorAtIndex: NoteColorIndex with: color.	super drawOn: aCanvas! !!PianoRollNoteMorph methodsFor: 'as yet unclassified' stamp: 'di 8/31/1998 11:31'!newBounds: boundRect color: fillColor image: noteForm	"This message incorporates all necessary initialization for enhanced performance"	bounds _ boundRect.	owner _ nil.	submorphs _ EmptyArray.	color _ fillColor.	image _ noteForm! !!PianoRollNoteMorph class reorganize!('class initialization' initialize)('instance creation' newBounds:color:)!!PianoRollNoteMorph class methodsFor: 'class initialization' stamp: 'di 8/29/1998 06:07'!initialize  "PianoRollNoteMorph initialize"	| j1 dot j2 noteColor |	NoteForms _ Array new: 200.	NoteColorIndex _ 250.	noteColor _ Color indexedColors at: NoteColorIndex.	j1 _ 1.	6 to: 28 do: 		[:i | dot _ ((EllipseMorph newBounds: (0@0 extent: i@i) color: noteColor)					imageFormDepth: 8) as8BitColorForm.		j2 _ i*i//4.		j1 to: j2 do: [:j | NoteForms at: j put: dot].		j1 _ j2+1].	j1 to: NoteForms size do: [:j | NoteForms at: j put: dot].! !!PianoRollNoteMorph class methodsFor: 'instance creation' stamp: 'di 8/31/1998 11:32'!newBounds: boundsRect color: trackColor	"boundsRect is the rectangle for old-style piano roll notes."	| noteForm locPoint |	noteForm _ NoteForms atPin: boundsRect width.	locPoint _ boundsRect topLeft + (0@(1 - (noteForm height//2))).	^ self basicNew		newBounds: (locPoint extent: noteForm extent)		color: trackColor		image: noteForm! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'di 9/7/1998 22:13'!addNotes	| visibleMorphs rightEdge topEdge track trackColor i done n nLeft nTop nRight evt m |	visibleMorphs _ OrderedCollection new: 500.	rightEdge _ self right - borderWidth.	topEdge _ self top + borderWidth + 1.	"Add ambient morphs first (they will be front-most)"		track _ score ambientTrack.		i _ indexInTrack at: indexInTrack size.		done _ i > track size.		[done | (i > track size)] whileFalse: [			evt _ track at: i.			nLeft _ self xForTime: evt time.			nLeft > rightEdge				ifTrue: [done _ true]				ifFalse: [m _ evt morph.						m position: nLeft @ (self bottom - borderWidth - m height).						visibleMorphs add: evt morph].			i _ i + 1].	"Then add note morphs"	1 to: score tracks size do: [:trackIndex |		track _ score tracks at: trackIndex.		trackColor _ colorForTrack at: trackIndex.		i _ indexInTrack at: trackIndex.		done _ i > track size.		[done | (i > track size)] whileFalse: [			n _ track at: i.			(n isNoteEvent and: [n midiKey >= lowestNote]) ifTrue: [				nLeft _ self xForTime: n time.				nLeft > rightEdge					ifTrue: [done _ true]					ifFalse: [						nTop _ (self yForMidiKey: n midiKey) - 1.						nTop > topEdge ifTrue: [							nRight _ nLeft + (n duration * timeScale) truncated.							visibleMorphs add:								("PianoRollNoteMorph"  Morph  "<-- Change comment quotes here**"									newBounds: (nLeft@nTop corner: nRight@(nTop + 3))									color: trackColor)]]].			i _ i + 1]].	self changed.	self removeAllMorphs.	self addAllMorphs: visibleMorphs.! !!PianoRollScoreMorph methodsFor: 'all' stamp: 'di 8/29/1998 06:11'!step	| t fudge |	score ifNil: [^ self].	t _ scorePlayer ticksSinceStart.	t = lastUpdateTick ifFalse: [		fudge _ 60.  "pixels of 'fudge factor' to adjust for display update delay"		self goToTime: t - (((self width // 2) - borderWidth + fudge) asFloat / timeScale) truncated.		self addNotes.		lastUpdateTick _ t].! !ColorForm removeSelector: #replaceColorNumber:with:!PianoRollNoteMorph initialize!PianoRollNoteMorph class removeSelector: #location:duration:color:!