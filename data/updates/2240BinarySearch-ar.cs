'From Squeak2.8alpha of 16 February 2000 [latest update: #2237] on 3 June 2000 at 4:26:59 pm'!"Change Set:		BinarySearch-arDate:			3 June 2000Author:			Andreas RaabImplements a few binary search methods in SequenceableCollection so that you can quickly find an element given that there's some before hand knowledge about ordering."!!SequenceableCollection methodsFor: 'enumerating' stamp: 'ar 6/3/2000 15:53'!findBinary: aBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If no matching element is found, raise an error.	Examples:		#(1 3 5 7 11 15 23) findBinary:[:arg| 11 - arg]	"	^self findBinary: aBlock ifNone: [self errorNotFound: aBlock]! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'ar 6/3/2000 15:52'!findBinary: aBlock ifNone: exceptionBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If no matching element is found, evaluate exceptionBlock."	| index low high test item |	low _ 1.	high _ self size.	[index _ high + low // 2.	low > high] whileFalse:[		test _ aBlock value: (item _ self at: index).		test = 0 			ifTrue:[^item]			ifFalse:[test > 0				ifTrue: [low _ index + 1]				ifFalse: [high _ index - 1]]].	^exceptionBlock value! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'ar 6/3/2000 15:54'!findBinaryIndex: aBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If no matching element is found, raise an error.	Examples:		#(1 3 5 7 11 15 23) findBinaryIndex:[:arg| 11 - arg]	"	^self findBinaryIndex: aBlock ifNone: [self errorNotFound: aBlock]! !!SequenceableCollection methodsFor: 'enumerating' stamp: 'ar 6/3/2000 15:54'!findBinaryIndex: aBlock ifNone: exceptionBlock	"Search for an element in the receiver using binary search.	The argument aBlock is a one-element block returning		0 	- if the element is the one searched for		<0	- if the search should continue in the first half		>0	- if the search should continue in the second half	If no matching element is found, evaluate exceptionBlock."	| index low high test |	low _ 1.	high _ self size.	[index _ high + low // 2.	low > high] whileFalse:[		test _ aBlock value: (self at: index).		test = 0 			ifTrue:[^index]			ifFalse:[test > 0				ifTrue: [low _ index + 1]				ifFalse: [high _ index - 1]]].	^exceptionBlock value! !