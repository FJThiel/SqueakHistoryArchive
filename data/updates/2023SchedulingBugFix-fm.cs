'From Squeak2.8alpha of 4 February 2000 [latest update: #2005] on 22 April 2000 at 7:30:43 pm'!"Change Set:		1041SchedulingBugFix-fmDate:			9 April 2000Author:			Florin MateocWARNING: I didn't test this as much as probably needed --smaIf you try (after saving your image)""[1 halt] fork"", first of all the notifier view will be hidden behind the active window. Then if you select 'resume' Squeak hangs. The first problem is that the scheduling code does not expect a controller (in this case the notifier) to be started from a non-UI thread, actually you get interesting results even if you say ""[1 inspect] fork"".The second problem is that the debugger code does not expect to have been started from a non-UI thread (with interruptedController being nil)."!!ControlManager methodsFor: 'scheduling' stamp: 'sma 4/22/2000 19:09'!scheduleActiveNoTerminate: aController 	"Make aController be the active controller. Presumably the process that 	requested the new active controller wants to keep control to do more 	activites before the new controller can take control. Therefore, do not 	terminate the currently active process."	| oldUIProcess |	oldUIProcess := activeControllerProcess.	self schedulePassive: aController.	self scheduled: aController from: oldUIProcess.	Processor activeProcess == oldUIProcess ifFalse: [oldUIProcess terminate]! !!Debugger methodsFor: 'private' stamp: 'sma 4/22/2000 19:12'!resumeProcess: aTopView	Smalltalk isMorphic ifFalse: [aTopView erase].	savedCursor ifNotNil: [Sensor currentCursor: savedCursor].	isolationHead ifNotNil:		[failedProject enterForEmergencyRecovery.		isolationHead invoke. isolationHead _ nil].	interruptedProcess suspendedContext method			== (Process compiledMethodAt: #terminate)		ifFalse:		[contextStackIndex > 1			ifTrue: [interruptedProcess popTo: self selectedContext]			ifFalse: [interruptedProcess install: self selectedContext].		Smalltalk isMorphic			ifTrue: [Project current resumeProcess: interruptedProcess]			ifFalse:				[interruptedController ifNil:					[[interruptedProcess resume] fork.					aTopView controller closeAndUnscheduleNoErase.					Smalltalk installLowSpaceWatcher.  "restart low space handler"					ScheduledControllers searchForActiveController].				ScheduledControllers					activeControllerNoTerminate: interruptedController					andProcess: interruptedProcess]].	"if old process was terminated, just terminate current one"	interruptedProcess _ nil. "Before delete, so release doesn't terminate it"	Smalltalk isMorphic		ifTrue: [aTopView delete. World displayWorld]		ifFalse: [aTopView controller closeAndUnscheduleNoErase].	Smalltalk installLowSpaceWatcher.  "restart low space handler"	Processor terminateActive! !