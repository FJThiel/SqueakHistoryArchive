'From Squeak 2.3 of January 14, 1999 on 2 April 1999 at 11:44:11 am'!"Change Set:		FloatArrayFixes-arDate:			2 April 1999Author:			Andreas RaabFixes possible crashes if the argument to the primitives is a SmallInteger."!!FloatArrayPlugin methodsFor: 'access primitives' stamp: 'ar 4/2/1999 11:42'!primitiveFloatArrayEqual	| rcvr arg rcvrPtr argPtr length |	self export: true.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	self var: #argPtr declareC:'float *argPtr'.	arg _ interpreterProxy stackObjectValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: arg).	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	interpreterProxy pop: 2.	length _ interpreterProxy stSizeOf: arg.	length = (interpreterProxy stSizeOf: rcvr) ifFalse:[^interpreterProxy pushBool: false].	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	argPtr _ self cCoerce: (interpreterProxy firstIndexableField: arg) to: 'float *'.	0 to: length-1 do:[:i|		(rcvrPtr at: i) = (argPtr at: i) ifFalse:[^interpreterProxy pushBool: false].	].	^interpreterProxy pushBool: true! !!FloatArrayPlugin methodsFor: 'access primitives' stamp: 'ar 4/2/1999 11:42'!primitiveFloatArrayHash	| rcvr rcvrPtr length result |	self export: true.	self var: #rcvrPtr declareC:'int *rcvrPtr'.	rcvr _ interpreterProxy stackObjectValue: 0.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: rcvr.	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'int *'.	result _ 0.	0 to: length-1 do:[:i|		result _ result + (rcvrPtr at: i).		rcvrPtr _ rcvrPtr + 4.	].	interpreterProxy pop: 1.	^interpreterProxy pushInteger: (result bitAnd: 16r1FFFFFFF)! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:41'!primitiveFloatArrayAddFloatArray	"Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver."	| rcvr arg rcvrPtr argPtr length |	self export: true.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	self var: #argPtr declareC:'float *argPtr'.	arg _ interpreterProxy stackObjectValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: arg).	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: arg.	interpreterProxy success: (length = (interpreterProxy stSizeOf: rcvr)).	interpreterProxy failed ifTrue:[^nil].	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	argPtr _ self cCoerce: (interpreterProxy firstIndexableField: arg) to: 'float *'.	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) + (argPtr at: i).	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:41'!primitiveFloatArrayAddScalar	"Primitive. Add the argument, a scalar value to the receiver, a FloatArray"	| rcvr rcvrPtr value length |	self export: true.	self var: #value declareC:'double value'.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	value _ interpreterProxy stackFloatValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: rcvr.	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) + value.	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:41'!primitiveFloatArrayDivFloatArray	"Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver."	| rcvr arg rcvrPtr argPtr length |	self export: true.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	self var: #argPtr declareC:'float *argPtr'.	arg _ interpreterProxy stackObjectValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: arg).	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: arg.	interpreterProxy success: (length = (interpreterProxy stSizeOf: rcvr)).	interpreterProxy failed ifTrue:[^nil].	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	argPtr _ self cCoerce: (interpreterProxy firstIndexableField: arg) to: 'float *'.	"Check if any of the argument's values is zero"	0 to: length-1 do:[:i|		(interpreterProxy longAt: (argPtr + i)) = 0 ifTrue:[^interpreterProxy primitiveFail]].	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) / (argPtr at: i).	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:41'!primitiveFloatArrayDivScalar	"Primitive. Add the argument, a scalar value to the receiver, a FloatArray"	| rcvr rcvrPtr value inverse length |	self export: true.	self var: #value declareC:'double value'.	self var: #inverse declareC:'double inverse'.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	value _ interpreterProxy stackFloatValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	value = 0.0 ifTrue:[^interpreterProxy primitiveFail].	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: rcvr.	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	inverse _ 1.0 / value.	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) * inverse.	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:41'!primitiveFloatArrayMulFloatArray	"Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver."	| rcvr arg rcvrPtr argPtr length |	self export: true.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	self var: #argPtr declareC:'float *argPtr'.	arg _ interpreterProxy stackObjectValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: arg).	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: arg.	interpreterProxy success: (length = (interpreterProxy stSizeOf: rcvr)).	interpreterProxy failed ifTrue:[^nil].	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	argPtr _ self cCoerce: (interpreterProxy firstIndexableField: arg) to: 'float *'.	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) * (argPtr at: i).	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:41'!primitiveFloatArrayMulScalar	"Primitive. Add the argument, a scalar value to the receiver, a FloatArray"	| rcvr rcvrPtr value length |	self export: true.	self var: #value declareC:'double value'.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	value _ interpreterProxy stackFloatValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: rcvr.	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) * value.	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:41'!primitiveFloatArraySubFloatArray	"Primitive. Add the receiver and the argument, both FloatArrays and store the result into the receiver."	| rcvr arg rcvrPtr argPtr length |	self export: true.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	self var: #argPtr declareC:'float *argPtr'.	arg _ interpreterProxy stackObjectValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: arg).	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: arg.	interpreterProxy success: (length = (interpreterProxy stSizeOf: rcvr)).	interpreterProxy failed ifTrue:[^nil].	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	argPtr _ self cCoerce: (interpreterProxy firstIndexableField: arg) to: 'float *'.	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) - (argPtr at: i).	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !!FloatArrayPlugin methodsFor: 'arithmetic primitives' stamp: 'ar 4/2/1999 11:42'!primitiveFloatArraySubScalar	"Primitive. Add the argument, a scalar value to the receiver, a FloatArray"	| rcvr rcvrPtr value length |	self export: true.	self var: #value declareC:'double value'.	self var: #rcvrPtr declareC:'float *rcvrPtr'.	value _ interpreterProxy stackFloatValue: 0.	rcvr _ interpreterProxy stackObjectValue: 1.	interpreterProxy failed ifTrue:[^nil].	interpreterProxy success: (interpreterProxy isWords: rcvr).	interpreterProxy failed ifTrue:[^nil].	length _ interpreterProxy stSizeOf: rcvr.	rcvrPtr _ self cCoerce: (interpreterProxy firstIndexableField: rcvr) to: 'float *'.	0 to: length-1 do:[:i|		rcvrPtr at: i put: (rcvrPtr at: i) - value.	].	interpreterProxy pop: 1. "Leave rcvr on stack"! !