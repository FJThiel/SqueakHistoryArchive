'From Squeak 2.3 beta of Nov 25, 1998 on 17 December 1998 at 11:19:58 am'!!Morph methodsFor: 'e-toy support' stamp: 'tk 12/17/1998 11:16'!allMorphsAndBookPagesInto: aSet	"Return a set of all submorphs.  Don't forget the hidden ones like BookMorph pages that are not showing.  Consider only objects that are in memory (see allNonSubmorphMorphs)." 	submorphs do: [:m | m allMorphsAndBookPagesInto: aSet].	self allNonSubmorphMorphs do: [:m | 			(aSet includes: m) ifFalse: ["Stop infinite recursion"				m allMorphsAndBookPagesInto: aSet]].	aSet add: self.	^ aSet	! !!BookMorph methodsFor: 'accessing' stamp: 'tk 12/17/1998 11:19'!allNonSubmorphMorphs	"Return a collection containing all morphs in this morph which are not currently in the submorph containment hierarchy.  Especially the non-showing pages in BookMorphs.    (As needed, make a variant of this that brings in all pages that are not in memory.)"	| coll |	coll _ OrderedCollection new.	pages do: [:pg |		pg isInMemory ifTrue: [			pg == currentPage ifFalse: [coll add: pg]]].	^ coll! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/17/1998 10:37'!saveAsNumberedURLs	"Write out all pages in this book that are not showing, onto a server.  The local disk could be the server.  For any page that does not have a SqueakPage and a url already, name that page file by its page number.  Any pages that are already totally out will stay that way."	| stem list |stem _ self getStemUrl.	"user must approve"stem size = 0 ifTrue: [^ self].pages doWithIndex: [:aPage :ind | 	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		aPage saveOnURL: stem,(ind printString),'.sp'.		self presenter ifNotNil: [self presenter flushPlayerListCache].		]].list _ pages collect: [:aPage |	 aPage sqkPage prePurge].	"knows not to purge the current page"list _ (list select: [:each | each notNil]) asArray."do bulk become:"(list collect: [:each | each contentsMorph])	elementsExchangeIdentityWith:		(list collect: [:spg | MorphObjectOut new xxxSetUrl: spg url page: spg]).self saveIndexOnURL.self presenter ifNotNil: [self presenter flushPlayerListCache].! !!BookMorph methodsFor: 'menu' stamp: 'tk 12/17/1998 10:36'!savePagesOnURL	"Write out all pages in this book onto a server.  For any page that does not have a SqueakPage and a url already, ask the user for one.  Give the option of naming all page files by page number.  Any pages that are not in memory will stay that way.  The local disk could be the server."	| response list |	(self valueOfProperty: #keepTogether) ifNotNil: [		self inform: 'This book is marked ''keep in one file''. Several pages use a common Player.Save the owner of the book instead.'.		^ self].	response _ (PopUpMenu labels: 'Use page numbers\Type in file names\Save in a new place (using page numbers)\Save in a new place (typing names)' withCRs)			startUpWithCaption: 'Each page will be a file on the server.  \Do you want to page numbers be the names of the files? \or name each one yourself?' withCRs.	response = 1 ifTrue: [self saveAsNumberedURLs. ^ self].	response = 3 ifTrue: [self forgetURLs; saveAsNumberedURLs. ^ self].	response = 4 ifTrue: [self forgetURLs].	response = 0 ifTrue: [^ self].pages do: [:aPage |	"does write the current page too"	aPage isInMemory ifTrue: ["not out now"		aPage saveOnURLbasic.		self presenter ifNotNil: [self presenter flushPlayerListCache].		]].	"ask user if no url"list _ pages collect: [:aPage |	 aPage sqkPage prePurge].	"knows not to purge the current page"list _ (list select: [:each | each notNil]) asArray."do bulk become:"(list collect: [:each | each contentsMorph])	elementsExchangeIdentityWith:		(list collect: [:spg | MorphObjectOut new xxxSetUrl: spg url page: spg]).self saveIndexOnURL.self presenter ifNotNil: [self presenter flushPlayerListCache].! !!PasteUpMorph methodsFor: 'misc' stamp: 'tk 12/17/1998 10:39'!stopRunningAll	"Stop running all scripted morphs.  Triggered by user hitting STOP button"	self presenter allExtantPlayers do: [:aPlayer |		aPlayer stopRunning.		aPlayer costume goHome].	self world updateStatusForAllScriptEditors! !!Presenter methodsFor: 'playerList' stamp: 'tk 12/17/1998 10:19'!allExtantPlayers	"Inefficient and ultimately unacceptable, but for the current round of demos it will help keep things from stalling just because they're on hidden book pages.  Produces a list of all Player objects associated with any Morph in the tree beneath the receiver's associatedMorph.  Call #flushPlayerListCache to force recomputation."	playerList ifNotNil:		[^ playerList].	^ playerList _ ((associatedMorph allMorphsAndBookPagesInto: Set new) select: 		[:m | m player ~~ nil] thenCollect: [:m | m player]) asArray! !Morph removeSelector: #allMorphsIncludingBookPages!