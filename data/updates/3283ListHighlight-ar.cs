'From Squeak2.9alpha of 13 June 2000 [latest update: #3346] on 31 January 2001 at 9:11:58 pm'!"Change Set:		ListHighlight-arDate:			31 January 2001Author:			Andreas RaabThe change set allows (subclasses of) Browser to highlight items in the lists shown."!!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:57'!buildMorphicClassList	| myClassList |	myClassList _ PluggableListMorph on: self list: #classList			selected: #classListIndex changeSelected: #classListIndex:			menu: #classListMenu:shifted: keystroke: #classListKey:from:.	myClassList enableDragNDrop: Preferences browseWithDragNDrop.	myClassList highlightSelector: #highlightClassList:with:.	^myClassList! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:58'!buildMorphicMessageCatList	| myMessageCatList |	myMessageCatList _ PluggableMessageCategoryListMorph on: self list: #messageCategoryList			selected: #messageCategoryListIndex changeSelected: #messageCategoryListIndex:			menu: #messageCategoryMenu: 			keystroke: #arrowKey:from: getRawListSelector: #rawMessageCategoryList.	myMessageCatList enableDragNDrop: Preferences browseWithDragNDrop.	myMessageCatList highlightSelector: #highlightMessageCategoryList:with:.	^myMessageCatList! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:58'!buildMorphicMessageList	| aListMorph |	aListMorph _ PluggableListMorph on: self list: #messageList			selected: #messageListIndex changeSelected: #messageListIndex:			menu: #messageListMenu:shifted:			keystroke: #messageListKey:from:.	aListMorph enableDragNDrop: Preferences browseWithDragNDrop.	aListMorph menuTitleSelector: #messageListSelectorTitle.	aListMorph highlightSelector: #highlightMessageList:with:.	^aListMorph! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:58'!buildMorphicSystemCatList	| dragNDropFlag myCatList |	dragNDropFlag _ Preferences browseWithDragNDrop.	myCatList _ PluggableListMorph on: self list: #systemCategoryList			selected: #systemCategoryListIndex changeSelected: #systemCategoryListIndex:			menu: #systemCategoryMenu: keystroke: #systemCatListKey:from:.	myCatList enableDragNDrop: dragNDropFlag.	myCatList highlightSelector: #highlightSystemCategoryList:with:.	^myCatList! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:56'!highlightClassList: list with: morphList! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:56'!highlightMessageCategoryList: list with: morphList! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:56'!highlightMessageList: list with: morphList! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:56'!highlightSystemCategoryList: list with: morphList! !!Browser methodsFor: 'initialize-release' stamp: 'ar 1/31/2001 20:55'!openAsMorphEditing: editString	"Create a pluggable version of all the morphs for a Browser in Morphic"	| window hSepFrac |	hSepFrac _ 0.4.	window _ (SystemWindow labelled: 'later') model: self.	window 		addMorph: self buildMorphicSystemCatList		frame: (0@0 corner: 0.25@hSepFrac).	self 		addClassAndSwitchesTo: window 		at: (0.25@0 corner: 0.5@hSepFrac)		plus: 0.	window 		addMorph: self buildMorphicMessageCatList		frame: (0.5@0 extent: 0.25@hSepFrac).	window addMorph: self buildMorphicMessageList		frame: (0.75@0 extent: 0.25@hSepFrac).	self 		addLowerPanesTo: window 		at: (0@hSepFrac corner: 1@1) 		with: editString.	window setUpdatablePanesFrom: #(systemCategoryList classList messageCategoryList messageList).	^ window! !!PluggableListMorph methodsFor: 'initialization' stamp: 'ar 1/31/2001 19:22'!list: listOfStrings 	| morphList h loc index |	scroller removeAllMorphs.	list _ listOfStrings ifNil: [Array new].	list isEmpty ifTrue: [self setScrollDeltas.  ^ self selectedMorph: nil].	"NOTE: we will want a quick StringMorph init message, possibly even		combined with event install and positioning"	font ifNil: [font _ Preferences standardListFont].	morphList _ list collect:		[:item | item isText			ifTrue: [StringMorph contents: item font: font emphasis: (item emphasisAt: 1)]			ifFalse: [StringMorph contents: item font: font]].	self highlightSelector ifNotNil:[		model perform: self highlightSelector with: list with: morphList.	].	"Lay items out vertically and install them in the scroller"	h _ morphList first height "self listItemHeight".	loc _ 0@0.	morphList do: [:m | m bounds: (loc extent: 9999@h).  loc _ loc + (0@h)].	scroller addAllMorphs: morphList.	self installEventHandlerOn: morphList.	index _ self getCurrentSelectionIndex.	self selectedMorph: ((index = 0 or: [index > morphList size]) ifTrue: [nil] ifFalse: [morphList at: index]).	self setScrollDeltas.	scrollBar setValue: 0.0! !!PluggableListMorph methodsFor: 'accessing' stamp: 'ar 1/31/2001 19:21'!highlightSelector	^self valueOfProperty: #highlightSelector! !!PluggableListMorph methodsFor: 'accessing' stamp: 'ar 1/31/2001 19:38'!highlightSelector: aSelector	self setProperty: #highlightSelector toValue: aSelector.	self list: self getList.! !!StringMorph methodsFor: 'accessing' stamp: 'ar 1/31/2001 19:33'!font	"who came up with #fontToUse rather than font?!!"	^self fontToUse! !!PluggableListMorph reorganize!('initialization' autoDeselect: doubleClickSelector: font font: getListSelector: initForKeystrokes installModelIn: keystrokeActionSelector: list: listItemHeight on:list:selected:changeSelected:menu:keystroke:)('accessing' highlightSelector highlightSelector:)('drawing' drawOn: highlightSelection unhighlightSelection)('events' doubleClick:onItem: handlesBasicKeys handlesKeyboard: keyStroke: mouseDown: mouseDown:onItem: mouseEnter: mouseEnterDragging:onItem: mouseLeave: mouseLeaveDragging:onItem: mouseUp: mouseUp:onItem: wantsKeyboardFocusFor: worldMorphsDo:)('selection' getListSelector maximumSelection minimumSelection numSelectionsInView selectedMorph: selection selection: selectionIndex: setGetListSelector: setSelectedMorph:)('model access' basicKeyPressed: changeModelSelection: getCurrentSelectionIndex getList modifierKeyPressed: specialKeyPressed:)('updating' update: verifyContents)('object fileIn')('geometry' scrollDeltaHeight)('drag and drop' acceptDroppingMorph:event: enableDragNDrop: installEventHandlerOn: potentialDropMorph potentialDropMorph: resetPotentialDropMorph startDrag:onItem: wantsDroppedMorph:event:)!