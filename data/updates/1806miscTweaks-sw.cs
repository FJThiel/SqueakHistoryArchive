'From Squeak2.7 of 5 January 2000 [latest update: #1799] on 28 January 2000 at 10:14:22 am'!"Change Set:		miscTweaks-swDate:			29 January 2000Author:			Scott Wallace1.	Assures that #modelWakeUp is sent to the top morphic window's model after a snapshot-and-continue (formerly, it was only dispatched when actually resuming from a saved image.).2.	Bulletproof in Morph.referencePlayfield against possible nil parent.3.	Even if auto-viewing is in effect for a particular playfield, don't do it for objects that don't want it.4.	With this change, the disabling of world-side autoviewing, done in update 1797, is rescinded.5.	The thumbnail-drawing code is modified to avoid recursion problems relating to flap tabs and thumbnailing of worlds.6.	The default name for a playfield functioning as a world is now 'world' rather than Playfield; this is useful in viewers, halos, and inspectors open on a world."!!Morph methodsFor: 'e-toy support' stamp: 'sw 1/10/2000 16:49'!referencePlayfield	| former |	owner ifNotNil: [owner isPlayfieldLike ifTrue: [^ owner]].	((owner isKindOf: HandMorph) and: [(former _ owner formerOwner) ~~ nil])		ifTrue:			[^ former isPlayfieldLike 				ifTrue:					[former]				ifFalse:					[former referencePlayfield]].	self isInWorld ifFalse: [^ nil].	^ self world submorphNamed: 'playfield'! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sw 1/25/2000 13:38'!snapshot: save andQuit: quit	"Mark the changes file and close all files. If save is true, save the current state of this Smalltalk in the image file. If quit is true, then exit to the outer shell. The latter part of this method runs when resuming a previously saved image. The resume logic checks for a document file to process when starting up."	| resuming msg sourceLink |	save & (SourceFiles at: 2) notNil ifTrue:		[msg _  (quit			ifTrue: ['----QUIT----']			ifFalse: ['----SNAPSHOT----'])			, Date dateAndTimeNow printString.		sourceLink _ ' priorSource: ' , LastQuitLogPosition printString.		self assureStartupStampLogged.		LastQuitLogPosition _ (SourceFiles at: 2) setToEnd; position.		self logChange: msg , sourceLink.		Transcript cr; show: msg].	self processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming _ self snapshotPrimitive.  "<-- PC frozen here on image file"				resuming ifFalse:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming _ false].	quit & resuming not ifTrue: [self quitPrimitive].	Cursor normal show.	self setGCParameters.	resuming ifTrue: [self clearExternalObjects].	self processStartUpList: resuming.	resuming ifTrue:		[self readDocumentFile].	Smalltalk isMorphic ifTrue: [SystemWindow wakeUpTopWindowUponStartup].	^ resuming! !!Morph methodsFor: 'naming' stamp: 'sw 1/25/2000 13:24'!defaultNameStemForInstances	"Answer a basis for names of default instances of the receiver.  The default is to let the class specify, but certain instances will want to override.  (PasteUpMorphs serving as Worlds come to mind"	^ self class defaultNameStemForInstances! !!Morph methodsFor: 'naming' stamp: 'sw 1/25/2000 13:29'!innocuousName	"Choose an innocuous name for the receiver -- one that does not end in the word Morph"	| className allKnownNames |	className _ self defaultNameStemForInstances.	(className size > 5 and: [className endsWith: 'Morph'])		ifTrue: [className _ className copyFrom: 1 to: className size - 5].	className _ className asString.	allKnownNames _ self world ifNil: [OrderedCollection new] ifNotNil: [self world allKnownNames].	^ Utilities keyLike: className asString satisfying:		[:aName | (allKnownNames includes: aName) not]! !!FlapTab methodsFor: 'access' stamp: 'sw 1/25/2000 11:07'!isCandidateForAutomaticViewing	^ false! !!HandMorph methodsFor: 'event handling' stamp: 'sw 1/25/2000 11:09'!newMouseFocus: aMorphOrNil	| itsOwner |	((mouseDownMorph isKindOf: MenuItemMorph)		and: [(aMorphOrNil isKindOf: MenuItemMorph) not])		ifTrue: [(mouseDownMorph owner isKindOf: MenuMorph)				ifTrue: ["Crock: If a menu is proffered with the mouse up						and the user clicks down outside it (as is normal in MVC),						then the menu goes away and nothing else happens."						mouseDownMorph owner deleteIfPopUp.						^ nil]].	aMorphOrNil ifNotNil: 		[((itsOwner _ aMorphOrNil topRendererOrSelf owner) notNil and:			[itsOwner automaticViewing]) ifTrue:				[aMorphOrNil isCandidateForAutomaticViewing ifTrue:					[aMorphOrNil openViewerForArgument]]].	mouseDownMorph _ aMorphOrNil.	self updateMouseDownTransform.! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'di 11/18/1999 09:17'!playfieldOptionsMenu	| aMenu isWorld |	isWorld _ self isWorldMorph.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	aMenu add: 'save on file...' action: #saveOnFile.	aMenu add: 'save as SqueakPage at url...' action: #saveOnURL.	aMenu add: 'update all from resources' action: #updateAllFromResources.	(self valueOfProperty: #classAndMethod) ifNotNil:		[aMenu add: 'broadcast as documentation' action: #saveDocPane].	aMenu add: 'round up strays' action: #roundUpStrays.	aMenu balloonTextForLastItem:  'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen.'.	aMenu addLine.	#(	(autoLineLayoutString	toggleAutoLineLayout			'whether submorphs should automatically be laid out in lines')		(indicateCursorString	toggleIndicateCursor			'whether the "current" submorph should be indicated with a dark black border')		(isPartsBinString		toggleIsPartsBin			'whether dragging an object from the interior should produce a COPY of the object')		(isOpenForDragNDropString	toggleOpenToDragNDrop			'whether objects can be dropped into and dragged out of me')		(mouseOverHalosString	toggleMouseOverHalos			'whether objects should put up halos when the mouse is over them')		(autoExpansionString	toggleAutomaticPhraseExpansion			'whether tile phrases, dropped on me, should automatically sprout Scriptors around them')		(originAtCenterString	toggleOriginAtCenter			'whether the cartesian origin of the playfield should be at its lower-left corner or at the center of the playfield')		(showThumbnailString	toggleAlwaysShowThumbnail			'whether large objects should be represented by thumbnail miniatures of themselves')) do:			[:triplet |				(isWorld and: [#(toggleAutoLineLayout toggleIndicateCursor toggleIsPartsBin toggleAlwaysShowThumbnail) includes: triplet second]) ifFalse:					[aMenu addUpdating: triplet first action: triplet second.					aMenu balloonTextForLastItem: triplet third]]. 	isWorld ifFalse:		[aMenu add: 'set thumbnail height...' action: #setThumbnailHeight.		aMenu balloonTextForLastItem: 'if currently showing thumbnails governs the standard height for them'].	aMenu addUpdating: #autoViewingString action: #toggleAutomaticViewing.	aMenu balloonTextForLastItem:  'governs whether, when an object is touched inside me, a viewer should automatically be launched for it.'.	isWorld ifFalse:		[aMenu add: 'behave like a Holder' action: #becomeLikeAHolder.		aMenu balloonTextForLastItem: 'Set properties to make this object nicely set up to hold frames of a scripted animation.'].	self backgroundSketch ifNotNil:		[aMenu add: 'delete background painting' action: #deleteBackgroundPainting.		aMenu balloonTextForLastItem: 'delete the graphic that forms the background for this me.'].	presenter ifNil:		[aMenu add: 'make detachable' action: #makeDetachable.		aMenu balloonTextForLastItem: 'Allow this area to be separately governed by its own controls.'].	aMenu addLine.	aMenu add: 'use standard texture' action: #setStandardTexture.	aMenu balloonTextForLastItem: 'use a pale yellow-and-blue background texture here.'.	aMenu add: 'make graph paper...' action: #makeGraphPaper.	aMenu balloonTextForLastItem: 'Design your own graph paper and use it as the background texture here.'.	aMenu addTitle: 'playfield options...'.	^ aMenu! !!PasteUpMorph methodsFor: 'scripting' stamp: 'sw 1/25/2000 13:07'!isCandidateForAutomaticViewing	"A viewer on a world is a dangerous thing to get casually!!"	^ self isWorldMorph not! !!PasteUpMorph methodsFor: 'stack/card' stamp: 'sw 1/25/2000 13:34'!defaultNameStemForInstances	"Answer a basis for names of default instances of the receiver"	^ self isWorldMorph		ifFalse:			[super defaultNameStemForInstances]		ifTrue:			['world']! !!ThumbnailMorph methodsFor: 'as yet unclassified' stamp: 'sw 1/25/2000 13:18'!drawOn: aCanvas	"Draw a small view of a morph in another place. Guard against infinite recursion if that morph has a thumbnail of itself inside."	| actualViewee viewedMorphBox myBox scale c shrunkForm aWorld |	super drawOn: aCanvas.	((((actualViewee _ self actualViewee) ~~ nil and: [(aWorld _ actualViewee world) ~~ nil])			and: [aWorld ~~ actualViewee or: [lastFormShown == nil]]) and: [RecursionDepth + 1 < RecursionMax])		ifTrue:			[RecursionDepth _ RecursionDepth + 1.			viewedMorphBox _ actualViewee fullBounds.			myBox _ self innerBounds.			scale _ myBox width / (viewedMorphBox width max: viewedMorphBox		height).			c _ FormCanvas extent: viewedMorphBox extent depth: aCanvas depth.			c translateBy: viewedMorphBox topLeft negated 				"recursion happens here"				during:[:tempCanvas| actualViewee fullDrawOn: tempCanvas].			shrunkForm _ c form magnify: c form boundingBox by: scale smoothing: 1.			lastFormShown _ shrunkForm.			RecursionDepth _ RecursionDepth - 1]		ifFalse:  "This branch used if we've recurred, or if the thumbnail views a World that's already been rendered once, or if the referent is not in a world at the moment"			[lastFormShown ifNotNil: [shrunkForm _ lastFormShown]].	shrunkForm ifNotNil:		[aCanvas image: shrunkForm at: self center - shrunkForm boundingBoxcenter]	"sw 12/20/1999 13:35 special-case code for SketchMorph commented out, since it seems to have done more harm than good: 			((actualViewee isKindOf: SketchMorph) and: [false])				ifTrue:					[diag _ actualViewee form extent  asInteger.					viewedMorphBox _						(actualViewee bounds center - (diag // 2)) extent: diag@diag]				ifFalse:					[viewedMorphBox _ actualViewee fullBounds]."! !"Postscript:"Utilities replaceMenuFlap.ThumbnailMorph recursionReset.!