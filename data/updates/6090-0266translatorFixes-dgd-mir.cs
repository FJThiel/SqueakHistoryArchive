'From Squeakland 3.8.5976 of 19 August 2004 [latest update: #243] on 25 August 2004 at 12:03:59 pm'!"Change Set:		translatorFixes-dgd-mirDate:			25 August 2004Author:			Diego Gomez Deck, Michael RuegerFixes some problems with detecting and loading translations"!Object subclass: #NaturalLanguageTranslator	instanceVariableNames: 'id generics contexts '	classVariableNames: 'AllKnownPhrases CachedTranslations ExternalTranslations '	poolDictionaries: ''	category: 'System-Localization'!!AbstractString methodsFor: 'translating' stamp: 'dgd 8/24/2004 19:42'!translated	"answer the receiver translated to the default language"	^ NaturalLanguageTranslator current  translate: self! !!AbstractString methodsFor: 'translating' stamp: 'dgd 8/24/2004 19:38'!translatedTo: localeID 	"answer the receiver translated to the given locale id"	^ localeID translator translate: self! !!LocaleID methodsFor: 'accessing' stamp: 'dgd 8/24/2004 19:37'!translator	^ NaturalLanguageTranslator localeID: self ! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'dgd 8/24/2004 20:20'!availableLanguageLocaleIDs	"Return the locale ids for the currently available languages.  	Meaning those which either internally or externally have  	translations available."	"NaturalLanguageTranslator availableLanguageLocaleIDs"	^ CachedTranslations values collect:[:each | each localeID]! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'dgd 8/24/2004 19:39'!current	^ LocaleID current translator! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'dgd 8/24/2004 19:18'!localeID: localeID 	^ self cachedTranslations		at: localeID		ifAbsentPut: [self new localeID: localeID]! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'dgd 8/24/2004 20:23'!startUp: resuming 	| defaultID |	resuming		ifFalse: [^ self].""	defaultID := LocaleID isoLanguage: 'en'.	self cachedTranslations		at: defaultID		ifAbsent: [self localeID: defaultID].	""	self loadAvailableExternalLocales! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/25/2004 11:44'!directoryForLanguage: isoLanguage country: isoCountry create: createDir	"Try to locate the <prefs>/locale/<language>{/<country>} folder.	If createDir is set, create the path down to country or language, depending on wether it's specified..	Return the directory for country or language depending on specification.	If neither exists, nil"	"NaturalLanguageTranslator directoryForLanguage: 'es' country: nil create: true"	"NaturalLanguageTranslator directoryForLanguage: 'de' country: 'DE' create: true"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: 'US' create: false"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: nil create: true"	"If this fails, there is nothing we can do about it here"	| localeDir  countryDir languageDir |	localeDir := self localeDirCreate: createDir.	localeDir ifNil: [^nil].	localeDir exists ifFalse: [^nil].	isoCountry ifNil: [		languageDir := localeDir directoryNamed: isoLanguage.		createDir			ifTrue: [languageDir assureExistence].		^languageDir exists			ifTrue: [languageDir]			ifFalse: [nil]].	countryDir := languageDir directoryNamed: isoCountry.	createDir		ifTrue: [countryDir assureExistence].	^countryDir exists		ifTrue: [countryDir]		ifFalse: [nil]! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/25/2004 11:57'!loadAvailableExternalLocales	"private - register locales IDs based on the content of the <prefs>/locale/ directory"	| localeDir |	localeDir := self localeDirCreate: false.	localeDir ifNil: [^ #()].	localeDir directoryNames		do: [:langDirName | 			| langDir | 			langDir := localeDir directoryNamed: langDirName.			(langDir fileNamesMatching: '*.' , self translationSuffix)				ifNotEmpty: [self loadTranslatorForIsoLanguage: langDirName isoCountry: nil].			langDir directoryNames				do: [:countryDirName | 					| countryDir | 					countryDir := langDirName directoryNamed: countryDirName.					(countryDir fileNamesMatching: '*.' , self translationSuffix)						ifNotEmpty: [self loadTranslatorForIsoLanguage: langDirName isoCountry: countryDirName]			]		].! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/25/2004 11:59'!loadTranslatorForIsoLanguage: isoLanguage isoCountry: isoCountry 	"private - load the translations from <prefs>/locale/ directory  	the procedure is to assure the existence of a translator for the  	given language/country and then load the external translations for this translator"	| translator |	translator := self localeID: (LocaleID isoLanguage: isoLanguage isoCountry: isoCountry).	self loadExternalTranslationsFor: translator! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/25/2004 12:03'!localeDirCreate: createDir	"Try to locate the <prefs>/locale/ folder.	If createDir is set, try to create the path.	If it doesn't exist, return nil"	"If this fails, there is nothing we can do about it here"	| prefDir  localeDir |	(createDir not			and: [ExternalSettings preferenceDirectory isNil])		ifTrue: [^ nil].	prefDir := ExternalSettings assuredPreferenceDirectory.	prefDir exists		ifFalse: [^nil].	localeDir := prefDir directoryNamed: 'locale'.	createDir		ifTrue: [localeDir assureExistence].	^localeDir exists		ifTrue: [localeDir]		ifFalse: [nil]! !NaturalLanguageTranslator class removeSelector: #createAndLoadLocaleID:!NaturalLanguageTranslator class removeSelector: #initAvailableExternalLocales!NaturalLanguageTranslator class removeSelector: #startUp!Object subclass: #NaturalLanguageTranslator	instanceVariableNames: 'id generics contexts'	classVariableNames: 'AllKnownPhrases CachedTranslations'	poolDictionaries: ''	category: 'System-Localization'!Locale removeSelector: #translator!