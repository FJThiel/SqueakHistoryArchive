'From Squeak3.1alpha of 28 February 2001 [latest update: #3868] on 20 March 2001 at 10:47:33 pm'!"Change Set:		copyUpCopyDown-swDate:			20 March 2001Author:			Scott WallaceAdds the capablity for any method to be copied up or copied down the hierarchy by menu request from a browser.  Look in the shifted side of a browser's message-list menu for 'copy up or copy down...'The existing source code is placed in a newly-spawned category browser for the requested class, preserving the method-category.  Of course, the code, when you try to submit it, might not compile successfully in the new class if it is a superclass, because the new class may lack the necessary instance variables, etc.  So you need to know what you're doing, but since the result of this command is a spawned browser with content not yet accepted, you will find your self in the right context to deal with any issues that arise. Also, of course, in the new browser you always have the option of NOT accepting."!!CodeHolder methodsFor: 'commands' stamp: 'sw 3/20/2001 15:33'!copyUpOrCopyDown	"Used to copy down code from a superclass to a subclass or vice-versa in one easy step, if you know what you're doing.  Prompt the user for which class to copy down or copy up to, then spawn a fresh browser for that class, with the existing code planted in it, and with the existing method category also established."	| aClass aSelector allClasses implementors aMenu aColor |	Smalltalk isMorphic ifFalse: [^ self inform: 'Sorry, for the moment you have to be inMorphic to use this feature.'].	((aClass _ self selectedClassOrMetaClass) isNil or: [(aSelector _ self selectedMessageName) == nil]) 		ifTrue:	[^ self beep].	allClasses _ Utilities hierarchyOfClassesSurrounding: aClass.	implementors _ Utilities hierarchyOfImplementorsOf: aSelector forClass: aClass.	aMenu _ MenuMorph new defaultTarget: self.	aMenu title: aClass name, '.', aSelector, 'Choose where to insert a copy of this method(blue = current, black = available, red = other implementors'.	allClasses do:		[:cl |			aColor _ cl == aClass				ifTrue:	[#blue]				ifFalse:					[(implementors includes: cl)						ifTrue:	[#red]						ifFalse:	[#black]].			(aColor == #red)				ifFalse:					[aMenu add: cl name selector: #spawnToClass: argument: cl]				ifTrue:					[aMenu add: cl name selector: #spawnToCollidingClass: argument: cl].			aMenu lastItem color: (Color colorFrom: aColor)].	aMenu popUpInWorld! !!CodeHolder methodsFor: 'commands' stamp: 'sw 3/20/2001 15:10'!spawnToClass: aClass	"Used to copy down code from a superclass to a subclass in one easy step, if you know what you're doing.  Spawns a new message-category browser for the indicated class, populating it with the source code seen in the current tool."	| aCategory newBrowser org |		(aCategory _ self categoryOfCurrentMethod)		ifNil:			[self buildClassBrowserEditString: self contents]		ifNotNil:			[((org _ aClass organization) categories includes: aCategory)				ifFalse:	[org addCategory: aCategory].			newBrowser _ Browser new setClass: aClass selector: nil.			newBrowser selectMessageCategoryNamed: aCategory.			Browser openBrowserView: (newBrowser openMessageCatEditString: self contents)		label: 'category "', aCategory, '" in ', 				newBrowser selectedClassOrMetaClassName]! !!CodeHolder methodsFor: 'commands' stamp: 'sw 3/20/2001 15:11'!spawnToCollidingClass: aClass	"Potentially used to copy down code from a superclass to a subclass in one easy step, in the case where the given class already has its own version of code, which would consequently be clobbered if the spawned code were accepted."	self inform: 'That would be destructive ofsome pre-existing code already in thatclass for this selector.  For the moment,we will not let you do this to yourself.'! !!Browser methodsFor: 'message functions' stamp: 'sw 3/20/2001 14:41'!shiftedMessageListMenu: aMenu	"Fill aMenu with the items appropriate when the shift key is held down"	aMenu addList: #(		('method pane' 							makeIsolatedCodePane)		"('make a scriptor'						makeScriptor)"		('toggle diffing (D)'						toggleDiffing)		('implementors of sent messages'			browseAllMessages)		-		('spawn sub-protocol'					spawnProtocol)		('spawn full protocol'					spawnFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory)		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'				revertToPreviousVersion)		('remove from current change set'		removeFromCurrentChanges)		('revert & remove from changes'		revertAndForget)		('add to current change set'				adoptMessageInCurrentChangeset)		('copy up or copy down...'				copyUpOrCopyDown)		-		('fetch documentation'					fetchDocPane)		('more...' 								unshiftedYellowButtonActivity)).	^ aMenu! !!Utilities class methodsFor: 'summer97 additions' stamp: 'sw 3/20/2001 14:04'!hierarchyOfClassesSurrounding: aClass	"Answer a list of classes in the hierarchy both above and below the given class "	| list aClassNonMeta isMeta theClassOrMeta |	aClass ifNil: [^ OrderedCollection new].	aClass ifNil: [^ self].	aClassNonMeta _ aClass theNonMetaClass.	isMeta _ aClassNonMeta ~~ aClass.	list _ OrderedCollection new.	aClass allSuperclasses reverseDo:		[:cl | list addLast: cl].	aClassNonMeta allSubclassesWithLevelDo:		[:cl :level |		theClassOrMeta _ isMeta ifTrue: [cl class] ifFalse: [cl].		list addLast: theClassOrMeta]	 	startingLevel: 0.	^ list"Utilities hierarchyOfClassesSurrounding: StringHolder "! !!Utilities class methodsFor: 'summer97 additions' stamp: 'sw 3/20/2001 14:06'!hierarchyOfImplementorsOf: aSelector forClass: aClass	"Answer a list of classes in the hierarchy both above and below the given class which implement the given selector."	^ (self hierarchyOfClassesSurrounding: aClass) select:		[:cl | cl includesSelector: aSelector]"Utilities hierarchyOfImplementorsOf: #contents forClass: StringHolder"! !