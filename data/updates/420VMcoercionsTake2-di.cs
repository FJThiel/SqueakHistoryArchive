'From Squeak 2.2 of Sept 23, 1998 on 16 November 1998 at 8:57:52 pm'!"Change Set:		VMcoercionsDate:			8 November 1998Author:			Dan IngallsThis changeSet introduces internal Integer/Float conversions for common arithmetic operations and comparisons.  In particular, if a Float and SmallInteger are combined with any of #(+ - * / > >= = <= <), the integer will be converted to a float and the result returned without ever causing a primitive failure and thus without triggering any of the external type coercion code.In the process these methods have been refactored so that they are smaller, and so that, except for a couple of utility routines, InterpreterSimulator can inherit code for all these methods, rather than having to override them as before.NOTE:  None of this has yet been proagated to DynamicInterpreter or DynamicInterpreterSimulator."!Object subclass: #ObjectMemory	instanceVariableNames: 'memory youngStart endOfMemory memoryLimit nilObj falseObj trueObj specialObjectsOop rootTable rootTableCount child field parentField freeBlock lastHash freeLargeContexts freeSmallContexts allocationCount lowSpaceThreshold signalLowSpace compStart compEnd fwdTableNext fwdTableLast remapBuffer remapBufferCount interruptCheckCounter checkAssertions allocationsBetweenGCs tenuringThreshold statFullGCs statFullGCMSecs statIncrGCs statIncrGCMSecs statTenures statRootTableOverflows displayBits '	classVariableNames: 'AllButHashBits AllButMarkBit AllButMarkBitAndTypeMask AllButRootBit AllButTypeMask BaseHeaderSize CharacterTable ClassArray ClassBitmap ClassBlockContext ClassByteArray ClassCharacter ClassCompiledMethod ClassFloat ClassInteger ClassLargePositiveInteger ClassMessage ClassMethodContext ClassPoint ClassProcess ClassPseudoContext ClassSemaphore ClassString ClassTranslatedMethod CompactClasses ConstMinusOne ConstOne ConstTwo ConstZero Done ExternalObjectsArray FalseObject FloatProto FreeSizeMask GCTopMarker HashBits HashBitsOffset HeaderTypeClass HeaderTypeFree HeaderTypeGC HeaderTypeShort HeaderTypeSizeAndClass LargeContextSize MarkBit MinimumForwardTableBytes NilContext NilObject RemapBufferSize RootBit RootTableSize SchedulerAssociation SelectorCannotReturn SelectorDoesNotUnderstand SelectorMustBeBoolean SmallBlockContext SmallContextSize SmallMethodContext SpecialSelectors StackStart StartField StartObj TheDisplay TheFinalizationSemaphore TheInputSemaphore TheInterruptSemaphore TheLowSpaceSemaphore TheTimerSemaphore TrueObject TypeMask Upward '	poolDictionaries: ''	category: 'Squeak-Interpreter'!!Interpreter methodsFor: 'utilities' stamp: 'jm 11/16/1998 17:27'!loadFloatOrIntFrom: floatOrInt	"If floatOrInt is an integer, then convert it to a C double float and return it.	If it is a Float, then load its value and return it.	Otherwise fail -- ie return with successFlag set to false."	self returnTypeC: 'double'.	(self isIntegerObject: floatOrInt) ifTrue:		[^ self cCode: '((double) (floatOrInt >> 1))'].	self assertClassOf: floatOrInt is: (self splObj: ClassFloat).	successFlag ifTrue:		[^ self floatValueOf: floatOrInt].! !!Interpreter methodsFor: 'common selector sends' stamp: 'di 11/16/1998 20:49'!bytecodePrimAdd	| rcvr arg result |	rcvr _ self internalStackValue: 1.	arg _ self internalStackValue: 0.	(self areIntegers: rcvr and: arg)		ifTrue: [result _ (self integerValueOf: rcvr) + (self integerValueOf: arg).				(self isIntegerValue: result) ifTrue:					[self longAt: (localSP _ localSP - 4)							put: (self integerObjectOf: result).					^ nil "success"].				self externalizeIPandSP.				successFlag _ false]		ifFalse: [self externalizeIPandSP.				self primitiveFloatAdd].	successFlag		ifFalse: [successFlag _ true.				self primitiveAdd].	self internalizeIPandSP.! !!Interpreter methodsFor: 'common selector sends' stamp: 'di 11/16/1998 20:51'!bytecodePrimDivide	| rcvr arg result |	rcvr _ self internalStackValue: 1.	arg _ self internalStackValue: 0.	(self areIntegers: rcvr and: arg)		ifTrue: [rcvr _ self integerValueOf: rcvr.				arg _ self integerValueOf: arg.				((arg ~= 0) and: [(rcvr \\ arg) = 0]) ifTrue:					[result _ rcvr // arg.  "generates C / operation"					(self isIntegerValue: result) ifTrue:						[self longAt: (localSP _ localSP - 4)								put: (self integerObjectOf: result).						^ nil "success"]].				self externalizeIPandSP.				successFlag _ false]		ifFalse: [self externalizeIPandSP.				successFlag _ true.				self primitiveFloatDivide].	successFlag		ifFalse: [successFlag _ true.				self primitiveDivide].	self internalizeIPandSP.! !!Interpreter methodsFor: 'common selector sends' stamp: 'di 11/16/1998 20:52'!bytecodePrimMultiply	| rcvr arg result |	rcvr _ self internalStackValue: 1.	arg _ self internalStackValue: 0.	(self areIntegers: rcvr and: arg)		ifTrue: [rcvr _ self integerValueOf: rcvr.				arg _ self integerValueOf: arg.				result _ rcvr * arg.				((arg = 0 or: [(result // arg) = rcvr])					and: [self isIntegerValue: result]) ifTrue:					[self longAt: (localSP _ localSP - 4)							put: (self integerObjectOf: result).					^ nil "success"].				self externalizeIPandSP.				successFlag _ false]		ifFalse: [self externalizeIPandSP.				successFlag _ true.				self primitiveFloatMultiply].	successFlag		ifFalse: [successFlag _ true.				self primitiveMultiply].	self internalizeIPandSP.! !!Interpreter methodsFor: 'common selector sends' stamp: 'di 11/16/1998 20:52'!bytecodePrimSubtract	| rcvr arg result |	rcvr _ self internalStackValue: 1.	arg _ self internalStackValue: 0.	(self areIntegers: rcvr and: arg)		ifTrue: [result _ (self integerValueOf: rcvr) - (self integerValueOf: arg).				(self isIntegerValue: result) ifTrue:					[self longAt: (localSP _ localSP - 4)							put: (self integerObjectOf: result).					^ nil "success"].				self externalizeIPandSP.				successFlag _ false]		ifFalse: [self externalizeIPandSP.				successFlag _ true.				self primitiveFloatSubtract].	successFlag		ifFalse: [successFlag _ true.				self primitiveSubtract].	self internalizeIPandSP.! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/16/1998 20:55'!primitiveFloatAdd	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self push: (self floatObjectOf: rcvr + arg)].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/16/1998 20:56'!primitiveFloatDivide	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self success: arg ~= 0.0.		successFlag ifTrue: [			self pop: 2.			self push: (self floatObjectOf: rcvr // arg)  "generates C / operation"]].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:09'!primitiveFloatEqual	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self pushBool: rcvr = arg].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:10'!primitiveFloatGreaterOrEqual	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self pushBool: rcvr >= arg].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:10'!primitiveFloatGreaterThan	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self pushBool: rcvr > arg].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:11'!primitiveFloatLessOrEqual	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self pushBool: rcvr <= arg].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:11'!primitiveFloatLessThan	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self pushBool: rcvr < arg].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/16/1998 20:56'!primitiveFloatMultiply	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self push: (self floatObjectOf: rcvr * arg)].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:12'!primitiveFloatNotEqual	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self pushBool: rcvr ~= arg].! !!Interpreter methodsFor: 'float primitives' stamp: 'di 11/16/1998 20:56'!primitiveFloatSubtract	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self pop: 2.		self push: (self floatObjectOf: rcvr - arg)].! !!Interpreter methodsFor: 'plugin support' stamp: 'di 11/16/1998 20:55'!floatObjectOf: aFloat	| resultOop |	self var: #aFloat declareC: 'double aFloat'.	resultOop _ self clone: (self splObj: FloatProto).	self storeFloatAt: resultOop + BaseHeaderSize from: aFloat.	^ resultOop.! !!InterpreterSimulator methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:46'!floatValueOf: objectPointer	| float len long0 long1 |	(self isIntegerObject: objectPointer)		ifTrue: [^ (self integerValueOf: objectPointer) asFloat].	(self fetchClassOf: objectPointer) = (self splObj: ClassFloat)		ifFalse: [self success: false.  ^0.0].	len _ self fetchWordLengthOf: objectPointer.	len = 2		ifFalse: [self success: false.  ^0.0].	"Make up a Float from the bits"	long0 _ self fetchWord: 0 ofObject: objectPointer.	long1 _ self fetchWord: 1 ofObject: objectPointer.	float _ Float new: 2.  "No conversion needed for Squeak"	float at: 1 put: long0.	float at: 2 put: long1.	^ float! !!InterpreterSimulator methodsFor: 'float primitives' stamp: 'di 11/8/1998 10:47'!loadFloatOrIntFrom: floatOrInt	"If floatOrInt is an integer, then convert it to a C double float and return it.	If it is a Float, then load its value and return it.	Otherwise fail -- ie return with successFlag set to false."	(self isIntegerObject: floatOrInt) ifTrue: [^ (self integerValueOf: floatOrInt) asFloat].	self assertClassOf: floatOrInt is: (self splObj: ClassFloat).	successFlag ifTrue: [^ self floatValueOf: floatOrInt]! !!InterpreterSimulator methodsFor: 'float primitives' stamp: 'di 11/16/1998 20:56'!primitiveFloatDivide	"NOTE: This method had to be overridden due to the use of // in super"	| rcvr rcvrOop arg argOop |	self var: #rcvr declareC: 'double rcvr'.	self var: #arg declareC: 'double arg'.	rcvrOop _ self stackValue: 1.	argOop _ self stackTop.	rcvr _ self loadFloatOrIntFrom: rcvrOop.	arg _ self loadFloatOrIntFrom: argOop.	successFlag ifTrue: [		self success: arg ~= 0.0.		successFlag ifTrue: [			self pop: 2.			self push: (self floatObjectOf: rcvr / arg)  " / overrides // "]].! !!InterpreterSimulator methodsFor: 'other primitives' stamp: 'di 11/8/1998 13:04'!primStringindexOfAsciiinStringstartingAt	^ self primitiveFail! !!ObjectMemory class methodsFor: 'initialization' stamp: 'jm 11/16/1998 18:36'!initializeSpecialObjectIndices	"Initialize indices into specialObjects array."	NilObject _ 0.	FalseObject _ 1.	TrueObject _ 2.	SchedulerAssociation _ 3.	ClassBitmap _ 4.	ClassInteger _ 5.	ClassString _ 6.	ClassArray _ 7.	"SmalltalkDictionary _ 8."  "Do not delete!!"	ClassFloat _ 9.	ClassMethodContext _ 10.	ClassBlockContext _ 11.	ClassPoint _ 12.	ClassLargePositiveInteger _ 13.	TheDisplay _ 14.	ClassMessage _ 15.	ClassCompiledMethod _ 16.	TheLowSpaceSemaphore _ 17.	ClassSemaphore _ 18.	ClassCharacter _ 19.	SelectorDoesNotUnderstand _ 20.	SelectorCannotReturn _ 21.	TheInputSemaphore _ 22.	SpecialSelectors _ 23.	CharacterTable _ 24.	SelectorMustBeBoolean _ 25.	ClassByteArray _ 26.	ClassProcess _ 27.	CompactClasses _ 28.	TheTimerSemaphore _ 29.	TheInterruptSemaphore _ 30.	FloatProto _ 31.	SmallMethodContext _ 34.	SmallBlockContext _ 36.	ExternalObjectsArray _ 38.	ClassPseudoContext _ 39.	ClassTranslatedMethod _ 40.	TheFinalizationSemaphore _ 41.! !Interpreter removeSelector: #makeFloatWithValue:!Interpreter removeSelector: #assertFloat:and:!InterpreterSimulator removeSelector: #primitiveFloatAdd!InterpreterSimulator removeSelector: #primitiveFloatLessThan!InterpreterSimulator removeSelector: #primitiveFloatGreaterOrEqual!InterpreterSimulator removeSelector: #primitiveFloatNotEqual!InterpreterSimulator removeSelector: #primitiveFloatLessOrEqual!InterpreterSimulator removeSelector: #primitiveFloatSubtract!InterpreterSimulator removeSelector: #cloneOf:withFloatValue:!InterpreterSimulator removeSelector: #primitiveFloatMultiply!InterpreterSimulator removeSelector: #primitiveFloatEqual!InterpreterSimulator removeSelector: #primitiveFloatGreaterThan!