'From Squeak2.8alpha of 4 February 2000 [latest update: #1873] on 26 February 2000 at 10:36:57 pm'!"Change Set:		16ClassComments-dwhDate:			26 February 2000Author:			Dwight Hughs and Gšran HultgreenAdded method categories to the PenRecorder --sma"!!ProtoObject commentStamp: 'sma 2/26/2000 18:45' prior: 0!ProtoObject establishes minimal behavior required of any object in Squeak, even objects that should balk at normal object behavior.  Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message.  Current examples are ObjectOut and ImageSegmentRootStub, and one could argue that ObjectTracer should also inherit from this class.ProtoObject has no instance variables, nor should any be added.!!Object commentStamp: 'sma 2/26/2000 18:46' prior: 0!Object is the root class for almost all of the other classes in the class hierarchy. It provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.Object has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.Class Variables:	DependentsFields		an IdentityDictionary Finally, because Object is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages.!!Boolean commentStamp: 'sma 2/26/2000 18:44' prior: 0!Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False.Boolean redefines #new so no instances of Boolean can be created. It also redefines several messages in the 'copying' protocol to ensure that only one instance of each of its subclasses True (the global true, logical assertion) and False (the global false, logical negation) ever exist in the system.!!ClassBuilder commentStamp: 'sma 2/26/2000 22:36' prior: 0!Responsible for creating a new class or changing the format of an existing class (from a class definition in a browser or a fileIn). This includes validating the definition, computing the format of instances, creating or modifying the accompanying Metaclass, setting up the class and metaclass objects themselves, registering the class as a global, recompiling methods, modifying affected subclasses, mutating existing instances to the new format, and more.!!False commentStamp: 'sma 2/26/2000 18:45' prior: 0!False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect.!!PenPointRecorder commentStamp: 'sma 2/26/2000 19:05' prior: 0!This class is a special kind of Pen that instead of actually drawing lines records the destination points for those lines. These points can later be accessed through my accessing method #points.This can be useful when determining the boundaries of a drawing session.Example:| pen |pen _ PenPointRecorder new.pen up; goto: 100@100; down; goto: 120@120.Transcript cr;	show: 'Bounding box for drawing: ';	show: (Rectangle encompassing: pen points)Implementation note: Shouldn't we override #drawFrom:to:withFirstPoint: instead, and what about #drawLoopX:Y:? Aren't we missing those calls?!!PenPointRecorder reorganize!('accessing' points)('line drawing' drawFrom:to:)!!PenPointRecorder methodsFor: 'line drawing' stamp: 'sma 2/26/2000 19:03'!drawFrom: p1 to: p2.	"Overridden to skip drawing but track bounds of the region traversed."	points ifNil: [points _ OrderedCollection with: p1].	points addLast: p2! !!True commentStamp: 'sma 2/26/2000 18:45' prior: 0!True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect.!