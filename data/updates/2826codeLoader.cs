'From Squeak2.9alpha of 13 June 2000 [latest update: #2872] on 13 October 2000 at 4:02:08 pm'!"Change Set:		loaderDate:			13 October 2000Author:			Michael RuegerAdds compression of code segments and changes the default extension for compressed segments to 'sqz'. This is a workaround for a problem with IE5, which 'intelligently' makes assumptions about 'gz' files.Also fixes minor update problems with the progress morph when used from a launcher."!!CodeLoader methodsFor: 'loading' stamp: 'mir 10/13/2000 12:24'!loadSegments: anArray	"Load all the source files in the given array."	| loader request reqName |	loader _ HTTPLoader default.	segments _ anArray collect:[:name |		reqName _ (FileDirectory extensionFor: name) isEmpty			ifTrue: [FileDirectory fileName: name extension: ImageSegment compressedFileExtension]			ifFalse: [name].		request _ self createRequestFor: reqName in: loader.		name->request].! !!CodeLoader class methodsFor: 'utilities' stamp: 'mir 10/11/2000 19:12'!exportCodeSegment: exportName classes: aClassList keepSource: keepSources	"Code for writing out a specific category of classes as an external image segment.  Perhaps this should be a method."	| is oldMethods newMethods m oldCodeString argsAndTemps classList symbolHolder fileName |	keepSources		ifTrue: [			self confirm: 'We are going to abandon sources.Quit without saving after this has run.' orCancel: [^self]].	classList _ aClassList asArray.	"Strong pointers to symbols"	symbolHolder := Symbol allInstances.	oldMethods _ OrderedCollection new: classList size * 150.	newMethods _ OrderedCollection new: classList size * 150.	keepSources		ifTrue: [			classList do: [:cl |				cl selectors do:					[:selector |					m _ cl compiledMethodAt: selector.					m fileIndex > 0 ifTrue:						[oldCodeString _ cl sourceCodeAt: selector.						argsAndTemps _ (cl compilerClass new							parse: oldCodeString in: cl notifying: nil) tempNames.						oldMethods addLast: m.						newMethods addLast: (m copyWithTempNames: argsAndTemps)]]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	oldMethods _ newMethods _ m _ oldCodeString _ argsAndTemps _ nil.	Smalltalk garbageCollect.	is _ ImageSegment new copyFromRootsForExport: classList.	"Classes and MetaClasses"	fileName _ FileDirectory fileName: exportName extension: ImageSegment fileExtension.	is writeForExport: fileName.	self compressFileNamed: fileName! !!CodeLoader class methodsFor: 'utilities' stamp: 'mir 10/12/2000 17:39'!loadCode: codeSegmentName from: baseURL ifClassNotLoaded: testClass	CodeLoader defaultBaseURL: baseURL.	(Smalltalk includesKey: testClass)		ifFalse: [CodeLoader loadCodeSegment: codeSegmentName].! !!CodeLoader class methodsFor: 'utilities' stamp: 'mir 10/11/2000 19:14'!loadCodeSegment: segmentName	| loader |	loader _ PluginCodeLoader new.	loader loadSegments: (Array with: segmentName). 	loader installSegments.! !!FileDirectory class methodsFor: 'name utilities' stamp: 'mir 10/11/2000 17:38'!fileName: fileName extension: fileExtension	| extension |	extension _ FileDirectory dot , fileExtension.	^(fileName endsWith: extension)		ifTrue: [fileName]		ifFalse: [fileName , extension].! !!ImageSegment methodsFor: 'read/write segment' stamp: 'mir 10/11/2000 19:08'!writeForExport: shortName	"Write the segment on the disk with all info needed to reconstruct it in a new image.  For export.  Out pointers are encoded as normal objects on the disk."	| fileStream temp |	state = #activeCopy ifFalse: [self error: 'wrong state'].	temp _ endMarker.	endMarker _ nil.	fileStream _ FileStream newFileNamed: (FileDirectory fileName: shortName extension: self class fileExtension).	fileStream fileOutClass: nil andObject: self.		"remember extra structures.  Note class names."	endMarker _ temp.! !!CodeLoader class methodsFor: 'utilities' stamp: 'mir 10/13/2000 13:27'!compressFileNamed: aFileName in: aDirectory	"Compress the currently selected file"	| zipped buffer unzipped zipFileName |	unzipped _ aDirectory readOnlyFileNamed: (aDirectory fullNameFor: aFileName).	unzipped binary.	zipFileName _ aFileName copyUpToLast: $. .	zipped _ aDirectory newFileNamed: (zipFileName, FileDirectory dot, ImageSegment compressedFileExtension).	zipped binary.	zipped _ GZipWriteStream on: zipped.	buffer _ ByteArray new: 50000.	'Compressing ', zipFileName displayProgressAt: Sensor cursorPoint		from: 0 to: unzipped size		during:[:bar|			[unzipped atEnd] whileFalse:[				bar value: unzipped position.				zipped nextPutAll: (unzipped nextInto: buffer)].			zipped close.			unzipped close].! !!ImageSegment class methodsFor: 'accessing' stamp: 'mir 10/11/2000 17:33'!compressedFileExtension	^'sqz'! !!ImageSegment class methodsFor: 'accessing' stamp: 'mir 10/11/2000 17:32'!fileExtension	^'extSeg'! !!PluginLauncher methodsFor: 'running'!startUp	| scriptName loader |	World install.	StandardFileStream isRunningAsBrowserPlugin		ifFalse: [^self].	scriptName _ self parameterAt: 'src'.	scriptName isEmpty ifTrue:[^self].	CodeLoader defaultBaseURL: (self parameterAt: 'Base').	loader _ PluginCodeLoader new.	loader loadSourceFiles: (Array with: scriptName).	loader installSourceFiles.! !!ProgressMorph methodsFor: 'accessing'!done: amountDone	self progress value contents: ((amountDone min: 1.0) max: 0.0).	self currentWorld displayWorld! !!ProgressMorph methodsFor: 'accessing'!label: aString	self labelMorph contents: aString.	self currentWorld displayWorld! !!ProgressMorph methodsFor: 'accessing'!subLabel: aString	self subLabelMorph contents: aString.	self currentWorld displayWorld! !CodeLoader class removeSelector: #fileExtension!