'From Squeak3.1alpha of 4 February 2001 [latest update: #3615] on 16 February 2001 at 12:05:33 pm'!"Change Set:		NixFullCopy-tkDate:			16 February 2001Author:			Ted KaehlerRemoves #fullCopy from the system.  	When a button is being copied repeatedly to make a button row, it is OK just to use Morph>>copy.  It has been strengthened.	Other callers now use veryDeepCopy.	To create a sibling instance of a Player, a new method has been added: Object>>veryDeepCopyWithSiblingOf:.  	Duplicating scripts without duplicating players works using a normal veryDeepCopy."!!Object methodsFor: 'copying' stamp: 'tk 2/16/2001 10:07'!veryDeepCopyWithSiblingOf: oldObject	"Do a complete tree copy using a dictionary.  Substitute a clone of oldObject (a Player) for it.  Normally, a Player or non systemDefined object would have a new class.  We do not want one this time.  An object in the tree twice is only copied once.  All references to the object in the copy of the tree will point to the new copy."	| copier new refs newDep newModel newObject |	copier _ DeepCopier new initialize: self initialDeepCopierSize.	newObject _ oldObject clone.		"Don't redefine clone for Players"	copier references at: oldObject put: newObject.	new _ self veryDeepCopyWith: copier.	newObject veryDeepPvtSibling: copier.	copier mapUniClasses.	copier references associationsDo: [:assoc | 		assoc value veryDeepFixupWith: copier].	"Fix dependents"	refs _ copier references.	DependentsFields associationsDo: [:pair |		pair value do: [:dep | 			(newDep _ refs at: dep ifAbsent: [nil]) ifNotNil: [				newModel _ refs at: pair key ifAbsent: [pair key].				newModel addDependent: newDep]]].	^ new! !!Object methodsFor: 'copying' stamp: 'tk 2/16/2001 10:06'!veryDeepPvtSibling: deepCopier	"Copy the instance variables of a new sibling of a Player.  Private method."	| index sub subAss sup has mine |	"Ask each superclass if it wants to share (weak copy) any inst vars"	self veryDeepInner: deepCopier.		"does super a lot"	"other superclasses want all inst vars deep copied"	sup _ self class.  index _ self class instSize.	[has _ sup compiledMethodAt: #veryDeepInner: ifAbsent: [nil].	mine _ sup instVarNames.	has ifNotNil: [index _ index - mine size]		ifNil: [1 to: mine size do: [:xx |				sub _ self instVarAt: index.				(subAss _ deepCopier references associationAt: sub ifAbsent: [nil])						"use association, not value, so nil is an exceptional value"					ifNil: [self instVarAt: index put: 								(sub veryDeepCopyWith: deepCopier)]					ifNotNil: [self instVarAt: index put: subAss value].				index _ index - 1]].	(sup _ sup superclass) == nil] whileFalse.	self rehash. 	"force Sets and Dictionaries to rehash"! !!Debugger methodsFor: 'initialize' stamp: 'tk 2/14/2001 14:11'!buttonRowForPreDebugWindow: aDebugWindow	| aRow aButton bb |	aRow _ AlignmentMorph newRow hResizing: #spaceFill.	aRow beSticky.	bb _ SimpleButtonMorph new target: aDebugWindow.	bb color: Color transparent; borderWidth: 1.	aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer.	self preDebugButtonQuads do:			[:quad |				aButton _ bb copy.				aButton actionSelector: quad second.				aButton label: quad first.				aButton submorphs first color: (Color colorFrom: quad third).				aButton setBalloonText: quad fourth.				aRow addMorphBack: aButton.				aRow addMorphBack: AlignmentMorph newVariableTransparentSpacer].	^ aRow! !!FlashMorphReader methodsFor: 'defining text' stamp: 'tk 2/15/2001 16:34'!recordNextChar: glyphIndex advanceWidth: advance	| shape transform |	(activeFont includesKey: glyphIndex) ifTrue:[		shape _ (activeFont at: glyphIndex) veryDeepCopy reset.		"Must include the textMorph's transform here - it might be animated"		transform _  ((MatrixTransform2x3 withOffset: textOffset) 							setScale: (textHeight@textHeight) / 1024.0).		transform _ transform composedWithGlobal: textMorph transform.		shape transform: transform.		shape color: textMorph color.		textMorph addMorphBack: shape.].	textOffset _ textOffset + (advance@0).! !!FlashMorphReader methodsFor: 'private' stamp: 'tk 2/15/2001 16:33'!newMorphFromShape: objectIndex	"Return a new character morph from the given object index.	If the character morph at objectIndex is already used, then create and return a full copy of it"	| prototype |	prototype _ self oldMorphFromShape: objectIndex.	prototype isNil ifTrue:[^nil].	^(prototype owner notNil) 		ifTrue:[prototype veryDeepCopy]		ifFalse:[prototype].! !!FlashMorphReader methodsFor: 'defining buttons' stamp: 'tk 2/16/2001 11:30'!recordButton: buttonId character: characterId state: state layer: layer matrix: matrix colorTransform: cxForm	| button children shape |	button _ buttons at: buttonId ifAbsent:[^self error: 'button missing'].	button id: buttonId.	shape _ self oldMorphFromShape: characterId.	shape isNil ifTrue:[^nil].	children _ shape submorphs collect:[:m| m veryDeepCopy].	shape _ FlashMorph withAll: children.	shape lockChildren.	shape depth: layer.	shape transform: matrix.	shape colorTransform: cxForm.	(state anyMask: 1) ifTrue:[		button defaultLook: shape.	].	(state anyMask: 2) ifTrue:[		button overLook: shape.	].	(state anyMask: 4) ifTrue:[		button pressLook: shape.	].	(state anyMask: 8) ifTrue:[		button sensitiveLook: shape.	].	button lockChildren.! !!MethodFinder methodsFor: 'initialize' stamp: 'tk 2/14/2001 14:35'!noteDangerous	"Remember the methods with really bad side effects."	Dangerous _ Set new."Object accessing, testing, copying, dependent access, macpal, flagging"	#(addInstanceVarNamed:withValue: haltIfNil copyAddedStateFrom: veryDeepCopy veryDeepCopyWith: veryDeepFixupWith: veryDeepInner: addDependent: evaluate:wheneverChangeIn: codeStrippedOut: playSoundNamed: isThisEverCalled isThisEverCalled: logEntry logExecution logExit)		do: [:sel | Dangerous add: sel]."Object error handling"	#(cannotInterpret: caseError confirm: confirm:orCancel: doesNotUnderstand: error: halt halt: notify: notify:at: primitiveFailed shouldNotImplement subclassResponsibility tryToDefineVariableAccess:)		do: [:sel | Dangerous add: sel]."Object user interface"	#(basicInspect beep inform: inspect inspectWithLabel: notYetImplemented inspectElement )		do: [:sel | Dangerous add: sel]."Object system primitives"	#(become: becomeForward: instVarAt:put: instVarNamed:put: nextInstance nextObject rootStubInImageSegment: someObject tryPrimitive:withArgs:)		do: [:sel | Dangerous add: sel]."Object private"	#(errorImproperStore errorNonIntegerIndex errorNotIndexable errorSubscriptBounds: mustBeBoolean primitiveError: species storeAt:inTempFrame:)		do: [:sel | Dangerous add: sel]."Object, translation support"	#(cCode: cCode:inSmalltalk: cCoerce:to: export: inline: returnTypeC: sharedCodeNamed:inCase: var:declareC:)		do: [:sel | Dangerous add: sel]."Object, objects from disk, finalization.  And UndefinedObject"	#(comeFullyUpOnReload: objectForDataStream: readDataFrom:size: rehash saveOnFile storeDataOn: actAsExecutor executor finalize retryWithGC:until:   suspend)		do: [:sel | Dangerous add: sel]."No Restrictions:   Boolean, False, True, ""Morph"	#()		do: [:sel | Dangerous add: sel]."Behavior"	#(obsolete confirmRemovalOf: copyOfMethodDictionary literalScannedAs:notifying: storeLiteral:on: addSubclass: removeSubclass: superclass: "creating method dictionary" addSelector:withMethod: compile: compile:notifying: compileAll compileAllFrom: compress decompile: defaultSelectorForMethod: methodDictionary: recompile:from: recompileChanges removeSelector: compressedSourceCodeAt: selectorAtMethod:setClass: allInstances allSubInstances inspectAllInstances inspectSubInstances thoroughWhichSelectorsReferTo:special:byte: "enumerating" allInstancesDo: allSubInstancesDo: allSubclassesDo: allSuperclassesDo: selectSubclasses: selectSuperclasses: subclassesDo: withAllSubclassesDo:"user interface" allCallsOn: browse browseAllAccessesTo: browseAllCallsOn: browseAllStoresInto: "too slow->" crossReference removeUninstantiatedSubclassesSilently "too slow->" unreferencedInstanceVariables"private" becomeCompact becomeUncompact flushCache format:variable:words:pointers: format:variable:words:pointers:weak: printSubclassesOn:level: removeSelectorSimply:)		do: [:sel | Dangerous add: sel]."Others "	#("no tangible result" do: associationsDo:  "private" adaptToCollection:andSend: adaptToNumber:andSend: adaptToPoint:andSend: adaptToString:andSend: instVarAt:put: asDigitsToPower:do: combinations:atATimeDo: doWithIndex: pairsDo: permutationsDo: reverseDo: reverseWith:do: with:do: withIndexDo: asDigitsAt:in:do: combinationsAt:in:after:do: errorOutOfBounds permutationsStartingAt:do: fromUser)		do: [:sel | Dangerous add: sel].	#(    fileOutPrototype addSpareFields makeFileOutFile )		do: [:sel | Dangerous add: sel].	#(recompile:from: recompileAllFrom: recompileChanges asPrototypeWithFields: asPrototype addInstanceVarNamed:withValue: addInstanceVariable addClassVarName: removeClassVarName: findOrAddClassVarName: tryToDefineVariableAccess: instanceVariableNames: )		do: [:sel | Dangerous add: sel]. ! !!Morph methodsFor: 'copying' stamp: 'tk 2/15/2001 17:03'!copy	^ self clone		privateOwner: nil;		privateSubmorphs: EmptyArray;		privateBounds: (bounds origin corner: bounds corner)  "deep-copy bounds"! !!Morph methodsFor: 'copying' stamp: 'tk 2/14/2001 12:47'!deepCopy	self error: 'Please use veryDeepCopy'.! !!Morph methodsFor: 'copying' stamp: 'tk 2/16/2001 11:22'!usableSiblingInstance	"Return another similar morph whose Player is of the same class as mine"	|  aName usedNames newPlayer newMorph topRenderer |	(topRenderer _ self topRendererOrSelf) == self ifFalse: [		^ topRenderer usableSiblingInstance].	self player assureUniClass.	newMorph _ self veryDeepCopyWithSiblingOf: self player.	newPlayer _ newMorph player.	newPlayer resetCostumeList.	(aName _ self knownName) == nil ifTrue:		[self player ~~ nil ifTrue: [aName _ newMorph innocuousName]].			"Force a difference here"	aName ~~ nil ifTrue:		[usedNames _ (self world ifNil: [OrderedCollection new] ifNotNil: [			self world allKnownNames]) copyWith: aName.		newMorph setNameTo: (Utilities keyLike: aName satisfying: [:f | 			(usedNames includes: f) not])].	newMorph privateOwner: nil.	(newMorph renderedMorph eventHandler ~~ nil) ifTrue:		[newPlayer assureEventHandlerRepresentsStatus].	self currentWorld addMorphBack: newMorph.	self presenter flushPlayerListCache.	^ newMorph! !!BookPageSorterMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 13:00'!addControls	| b r aButton str |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow color: Color transparent; borderWidth: 0; layoutInset: 0.	r wrapCentering: #center; cellPositioning: #topCenter; hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (self wrapperFor: (b copy label: 'Okay';	actionSelector: #acceptSort)).	r addMorphBack: (self wrapperFor: (b copy label: 'Cancel';	actionSelector: #delete)).	r addTransparentSpacerOfSize: 8 @ 0.	r addMorphBack: (self wrapperFor: (aButton _ UpdatingThreePhaseButtonMorph checkBox)).	aButton		target: self;		actionSelector: #togglePartsBinStatus;		arguments: #();		getSelector: #getPartsBinStatus.	str _ StringMorph contents: 'Parts bin'.	r addMorphBack: (self wrapperFor: str lock).	self addMorphFront: r.! !!BookPageSorterMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 13:38'!closeButtonOnly	"Replace my default control panel with one that has only a close button."	| b r |	self firstSubmorph delete.  "remove old control panel"	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r wrapCentering: #topLeft.	r addMorphBack: (b label: 'Close'; actionSelector: #delete).	self addMorphFront: r.! !!BooklikeMorph methodsFor: 'page controls' stamp: 'tk 2/14/2001 13:38'!makePageControlsFrom: controlSpecs	"From the controlSpecs, create a set of page control and return them -- this method does *not* add the controls to the receiver."	| c aButton col row b lastGuy |	c _ (color saturation > 0.1) ifTrue: [color slightlyLighter] ifFalse: [color slightlyDarker].	aButton _ SimpleButtonMorph new target: self; borderWidth: 1; borderColor: Color veryLightGray; color: c.	col _ AlignmentMorph newColumn.	col color: c; borderWidth: 0; layoutInset: 0.	col hResizing: #spaceFill; vResizing: #shrinkWrap; extent: 5@5.	row _ AlignmentMorph newRow.	row color: c; borderWidth: 0; layoutInset: 0.	row hResizing: #spaceFill; vResizing: #shrinkWrap; extent: 5@5.	controlSpecs do: [:spec |		spec == #spacer			ifTrue:				[row addTransparentSpacerOfSize: (10 @ 0)]			ifFalse:				[spec == #variableSpacer					ifTrue:						[row addMorphBack: AlignmentMorph newVariableTransparentSpacer]					ifFalse:						[b _ aButton copy						label: spec first;						actionSelector: spec second;						borderWidth: 0;	 					setBalloonText: spec third.						row addMorphBack: b.						(((lastGuy _ spec last asLowercase) includesSubString: 'menu') or:								[lastGuy includesSubString: 'designations'])							ifTrue: [b actWhen: #buttonDown]]]].  "pop up menu on mouseDown"		col addMorphBack: row.	^ col! !!BookMorph methodsFor: 'other' stamp: 'tk 2/14/2001 12:57'!makeMinimalControlsWithColor: aColor title: aString	| aButton aColumn aRow but |	aButton _ SimpleButtonMorph new target: self; borderColor: Color black; 				color: aColor; borderWidth: 0.	aColumn _ AlignmentMorph newColumn.	aColumn color: aButton color; borderWidth: 0; layoutInset: 0.	aColumn hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	aRow _ AlignmentMorph newRow.	aRow color: aButton color; borderWidth: 0; layoutInset: 0.	aRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	aRow addTransparentSpacerOfSize: 40@0.	aRow addMorphBack: (but _ aButton copy label: ' < ' ; actionSelector: #previousPage).		"copy is OK, since we just made it and it can't own any Players"	but setBalloonText: 'Go to previous page'.	aRow addTransparentSpacerOfSize: 82@0.	aRow addMorphBack: (StringMorph contents: aString) lock.	aRow addTransparentSpacerOfSize: 82@0.	aRow addMorphBack: (but _ aButton copy label: ' > ' ; actionSelector: #nextPage).	but setBalloonText: 'Go to next page'.	aRow addTransparentSpacerOfSize: 40@0.	aColumn addMorphBack: aRow.	aColumn setNameTo: 'Page Controls'.		^ aColumn! !!CipherPanel methodsFor: 'menu' stamp: 'tk 2/15/2001 16:57'!buttonRow	| row aButton bb |	row _ AlignmentMorph newRow		color: self color;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	bb _ SimpleButtonMorph new target: self.	bb color: Color transparent; borderWidth: 1; borderColor: Color black.	#('show help' 'show hints' 'clear typing' 'enter a new cipher' 'quote from Squeak')		with: 	#(showHelpWindow showHintsWindow clearTyping enterANewCipher squeakCipher)		do: [:label :selector |			aButton _ bb copy.			aButton actionSelector: selector.			aButton label: label.			row addMorphBack: aButton.			row addTransparentSpacerOfSize: (3 @ 0)].	^ row! !!CompoundTileMorph methodsFor: 'miscellaneous' stamp: 'tk 2/15/2001 16:36'!tileRows	"Answer a list of tile rows, in this case just one though it's compound"	^ Array with: (Array with: self veryDeepCopy)! !!CrosticPanel methodsFor: 'menu' stamp: 'tk 2/14/2001 14:10'!buttonRow	| row aButton bb |	row _ AlignmentMorph newRow		color: self color;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	bb _ SimpleButtonMorph new target: self.	bb color: Color transparent; borderWidth: 1; borderColor: Color black.	#('show help' 'show errors' 'show hints' 'clear' 'open...')		with: 	#(showHelpWindow showErrors showHintsWindow clearTyping openFile)		do: [:label :selector |			aButton _ bb copy.			aButton actionSelector: selector.			aButton label: label.			row addMorphBack: aButton.			row addTransparentSpacerOfSize: (3 @ 0)].	^ row! !!EnvelopeEditorMorph methodsFor: 'construction' stamp: 'tk 2/14/2001 13:41'!addHandlesIn: frame	| handle |	handle := PolygonMorph		vertices: (Array with: 0@0 with: 8@0 with: 4@8)		color: Color orange borderWidth: 1 borderColor: Color black.	handle addMorph: ((RectangleMorph			newBounds: ((self handleOffset: handle)-(2@0) extent: 1@(graphArea height-2))			color: Color orange) borderWidth: 0).	limitHandles _ Array with: handle with: handle veryDeepCopy with: handle veryDeepCopy.	1 to: limitHandles size do:		[:i | handle _ limitHandles at: i.		handle on: #mouseDown				send: #limitHandleMoveEvent:from:index:				to: self withValue: i.		handle on: #mouseMove				send: #limitHandleMoveEvent:from:index:				to: self withValue: i.		self addMorph: handle.		handle position: ((self xFromMs: 			(envelope points at: (limits at: i)) x) @ 				(graphArea top)) - (self handleOffset: handle)]! !!FlashPlayerMorph methodsFor: 'initialize' stamp: 'tk 2/14/2001 13:53'!makeControls	| b r loopSwitch |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2.	r _ AlignmentMorph newRow.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (b copy label: 'Rewind';		actionSelector: #rewind).	r addMorphBack: (b copy label: 'Play';			actionSelector: #startPlaying).	r addMorphBack: (b copy label: 'Pause';			actionSelector: #stopPlaying).	r addMorphBack: (b copy label: 'Next';			actionSelector: #stepForward).	r addMorphBack: (b copy label: 'Prev';			actionSelector: #stepBackward).	loopSwitch _ SimpleSwitchMorph new		borderWidth: 2;		label: 'Loop';		actionSelector: #loopFrames:;		target: self;		setSwitchState: self loopFrames.	r addMorphBack: loopSwitch.	loopSwitch _ SimpleSwitchMorph new		borderWidth: 2;		label: 'Defer';		actionSelector: #toggleDeferred;		target: self;		setSwitchState: self deferred.	r addMorphBack: loopSwitch.	r addMorphBack: (b copy label: 'Fastest'; 	actionSelector: #drawFastest).	r addMorphBack: (b copy label: 'Medium';	actionSelector: #drawMedium).	r addMorphBack: (b copy label: 'Nicest';		actionSelector: #drawNicest).	r addMorphBack: (b copy label: '+10';		actionSelector: #jump10).	b target: self.	^ self world activeHand attachMorph: r! !!FlashSorterMorph methodsFor: 'initialization' stamp: 'tk 2/14/2001 13:53'!makeControls	| b r |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2.	r _ AlignmentMorph newRow.	r hResizing: #spaceFill; vResizing: #spaceFill; layoutInset: 2.	r addMorphBack: (b copy label: 'Make movie';		actionSelector: #makeMovie).	^r! !!GraphicalMenu methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:02'!initializeFor: aTarget withForms: formList coexist: aBoolean	" World primaryHand attachMorph: (GraphicalMenu new initializeFor: nil 		withForms: Form allInstances coexist: true) "	| buttons b anIndex buttonCage imageWrapper |	target _ aTarget.	coexistWithOriginal _ aBoolean.	color _ Color white.	borderColor _ Color blue darker.	borderWidth _ 1.	formChoices _ formList.	currentIndex _ 1.	self hResizing: #shrinkWrap; vResizing: #shrinkWrap.	b _ SimpleButtonMorph new target: self; borderColor: Color black.	buttons _ AlignmentMorph newRow.	buttons borderWidth: 0; layoutInset: 0.	buttons hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	buttons wrapCentering: #topLeft.	buttonCage _ AlignmentMorph newColumn.	buttonCage hResizing: #shrinkWrap; vResizing: #spaceFill.	buttonCage addTransparentSpacerOfSize: (0 @ 10).	buttons addMorphBack: (b copy label: 'Prev';		actionSelector: #downArrowHit; actWhen: #whilePressed).	buttons addTransparentSpacerOfSize: (9@0).	buttons addMorphBack: (b copy label: 'Next';			actionSelector: #upArrowHit; actWhen: #whilePressed).	buttons addTransparentSpacerOfSize: (5@0).	buttons submorphs last color: Color white.	buttonCage addMorphBack: buttons.	buttonCage addTransparentSpacerOfSize: (0 @ 12).	buttons _ AlignmentMorph newRow.	buttons addMorphBack: (b copy label: 'OK';	actionSelector: #okay).	buttons addTransparentSpacerOfSize: (5@0).	buttons addMorphBack: (b copy label: 'Cancel';	actionSelector: #cancel).	buttonCage addMorphBack: buttons.	buttonCage addTransparentSpacerOfSize: (0 @ 10).	self addMorphFront: buttonCage.	imageWrapper _ Morph new color: Color transparent; extent: 102 @ 82.	imageWrapper addMorphBack: (formDisplayMorph _ ImageMorph new extent: 100 @ 100).	self addMorphBack: imageWrapper.	target ifNotNil: [(anIndex _ formList indexOf: target form ifAbsent: [nil]) ifNotNil:		[currentIndex _ anIndex]].	self updateThumbnail! !!GraphicalDictionaryMenu methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:00'!initializeFor: aTarget fromDictionary: aDictionary	|  imageWrapper anIndex aButton controlsWrapper asm |	self listDirection: #topToBottom.	self addMorphBack: (controlsWrapper _ AlignmentMorph newRow).	self baseDictionary: aDictionary.	target _ aTarget.	coexistWithOriginal _ true.	color _ Color white.	borderColor _ Color blue darker.	borderWidth _ 1.	self hResizing: #shrinkWrap; vResizing: #shrinkWrap.	controlsWrapper borderWidth: 0; layoutInset: 0; hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	controlsWrapper wrapCentering: #topLeft; color: Color white; vResizing: #spaceFill.	controlsWrapper addTransparentSpacerOfSize: (18@0).	controlsWrapper addMorphBack: (IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'Menu'); color: Color transparent; 			actWhen: #buttonDown;			actionSelector: #showMenu; target: self;			setBalloonText: 'menu').	controlsWrapper  addTransparentSpacerOfSize: (14@0).	aButton _ SimpleButtonMorph new target: self; borderColor: Color black.	controlsWrapper addMorphBack: (aButton copy		label: 'Prev';		actionSelector: #downArrowHit;		actWhen: #whilePressed;		setBalloonText: 'show previous picture';		yourself).	controlsWrapper addTransparentSpacerOfSize: (15@0).	controlsWrapper addMorphBack: (aButton copy label: 'Next';			actionSelector: #upArrowHit; actWhen: #whilePressed; 		setBalloonText: 'show next pictutre').	self addMorphBack: controlsWrapper.	self addTransparentSpacerOfSize: (0 @ 12).	self addMorphBack:  (asm _ UpdatingStringMorph new contents: ' '; target: self; putSelector: #renameGraphicTo:; getSelector: #truncatedNameOfGraphic; useStringFormat).	asm setBalloonText: 'The name of the current graphic'. 	self addTransparentSpacerOfSize: (0 @ 12).	self addMorphBack: (AlignmentMorph newRow height: 4; borderWidth: 0; color: Color black).	imageWrapper _ Morph new color: Color transparent; extent: 190 @ 82.	imageWrapper addMorphBack: (formDisplayMorph _ ImageMorph new extent: 100 @ 100).	self addMorphBack: imageWrapper.	target ifNotNil: [(anIndex _ formChoices indexOf: target form ifAbsent: [nil]) ifNotNil:		[currentIndex _ anIndex]].	self updateThumbnail! !!KeyboardMorphForInput methodsFor: 'initialization' stamp: 'tk 2/14/2001 14:02'!addRecordingControls	| button switch playRow durRow articRow modRow |	button _ SimpleButtonMorph new target: self;		borderColor: #raised; borderWidth: 2; color: color.	switch _ SimpleSwitchMorph new target: self;		offColor: color; onColor: (Color r: 1.0 g: 0.6 b: 0.6); borderWidth: 2;		setSwitchState: false.	"Add chord, rest and delete buttons"	playRow _ AlignmentMorph newRow.	playRow color: color; borderWidth: 0; layoutInset: 0.	playRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	playRow addMorphBack: (switch copy label: 'chord'; actionSelector: #buildChord:).	playRow addMorphBack: (button copy label: '          rest          '; actionSelector: #emitRest).	playRow addMorphBack: (button copy label: 'del'; actionSelector: #deleteNotes).	self addMorph: playRow.	playRow align: playRow bounds topCenter			with: self bounds bottomCenter.	"Add note duration buttons"	durRow _ AlignmentMorph newRow.	durRow color: color; borderWidth: 0; layoutInset: 0.	durRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	durRow addMorphBack: (switch copy label: 'whole';				actionSelector: #duration:onOff:; arguments: #(1)).	durRow addMorphBack: (switch copy label: 'half';				actionSelector: #duration:onOff:; arguments: #(2)).	durRow addMorphBack: (switch copy label: 'quarter';				actionSelector: #duration:onOff:; arguments: #(4)).	durRow addMorphBack: (switch copy label: 'eighth';				actionSelector: #duration:onOff:; arguments: #(8)).	durRow addMorphBack: (switch copy label: 'sixteenth';				actionSelector: #duration:onOff:; arguments: #(16)).	self addMorph: durRow.	durRow align: durRow bounds topCenter			with: playRow bounds bottomCenter.	"Add note duration modifier buttons"	modRow _ AlignmentMorph newRow.	modRow color: color; borderWidth: 0; layoutInset: 0.	modRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	modRow addMorphBack: (switch copy label: 'dotted';				actionSelector: #durMod:onOff:; arguments: #(dotted)).	modRow addMorphBack: (switch copy label: 'normal';				actionSelector: #durMod:onOff:; arguments: #(normal)).	modRow addMorphBack: (switch copy label: 'triplets';				actionSelector: #durMod:onOff:; arguments: #(triplets)).	modRow addMorphBack: (switch copy label: 'quints';				actionSelector: #durMod:onOff:; arguments: #(quints)).	self addMorph: modRow.	modRow align: modRow bounds topCenter			with: durRow bounds bottomCenter.	"Add articulation buttons"	articRow _ AlignmentMorph newRow.	articRow color: color; borderWidth: 0; layoutInset: 0.	articRow hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	articRow addMorphBack: (switch copy label: 'legato';				actionSelector: #articulation:onOff:; arguments: #(legato)).	articRow addMorphBack: (switch copy label: 'normal';				actionSelector: #articulation:onOff:; arguments: #(normal)).	articRow addMorphBack: (switch copy label: 'staccato';				actionSelector: #articulation:onOff:; arguments: #(staccato)).	self addMorph: articRow.	articRow align: articRow bounds topCenter			with: modRow bounds bottomCenter.	self bounds: (self fullBounds expandBy: (0@0 extent: 0@borderWidth))! !!MidiInputMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:04'!makeControls	| b r reverbSwitch onOffSwitch |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2;		color: color.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (		b copy			label: '<>';			actWhen: #buttonDown;			actionSelector: #invokeMenu).	onOffSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'On';		actionSelector: #toggleOnOff;		target: self;		setSwitchState: false.	r addMorphBack: onOffSwitch.	reverbSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'Reverb Disable';		actionSelector: #disableReverb:;		target: self;		setSwitchState: SoundPlayer isReverbOn not.	r addMorphBack: reverbSwitch.	^ r! !!MidiInputMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:04'!panAndVolControlsFor: channelIndex	| volSlider panSlider c r middleLine |	volSlider _ SimpleSliderMorph new		color: color;		extent: 101@2;		target: midiSynth;		arguments: (Array with: channelIndex);		actionSelector: #volumeForChannel:put:;		minVal: 0.0;		maxVal: 1.0;		adjustToValue: (midiSynth volumeForChannel: channelIndex).	panSlider _ volSlider copy		actionSelector: #panForChannel:put:;		minVal: 0.0;		maxVal: 1.0;				adjustToValue: (midiSynth panForChannel: channelIndex).	c _ AlignmentMorph newColumn		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap.	middleLine _ Morph new  "center indicator for pan slider"		color: (Color r: 0.4 g: 0.4 b: 0.4);		extent: 1@(panSlider height - 4);		position: panSlider center x@(panSlider top + 2).	panSlider addMorphBack: middleLine.	r _ self makeRow.	r addMorphBack: (StringMorph contents: '0').	r addMorphBack: volSlider.	r addMorphBack: (StringMorph contents: '10').	c addMorphBack: r.	r _ self makeRow.	r addMorphBack: (StringMorph contents: 'L').	r addMorphBack: panSlider.	r addMorphBack: (StringMorph contents: 'R').	c addMorphBack: r.	^ c! !!PaintBoxMorph class methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:05'!new	| pb button dualUse formCanvas rect |	pb _ Prototype veryDeepCopy.		"Assume that the PaintBox does not contain any scripted Players!!"	pb stampHolder normalize.	"Get the stamps to show"	"Get my own copies of the brushes so I can modify them"	#(brush1: brush2: brush3: brush4: brush5: brush6:) do: [:sel |		button _ pb submorphNamed: sel.		button offImage: button offImage deepCopy.		dualUse _ button onImage == button pressedImage.	"sometimes shared"		button onImage: button onImage deepCopy.		dualUse			ifTrue: [button pressedImage: button onImage]			ifFalse: [button pressedImage: button pressedImage deepCopy].		"force color maps for later mapping"		button offImage.		button onImage.		button pressedImage.		formCanvas _ button onImage getCanvas.		formCanvas _ formCanvas			copyOrigin: 0@0			clipRect: (rect _ 0@0 extent: button onImage extent).		(#(brush1: brush3:) includes: sel) ifTrue: [			rect _ rect origin corner: rect corner - (2@2)].		(#brush2: == sel) ifTrue: [			rect _ rect origin corner: rect corner - (2@4)].		formCanvas frameAndFillRectangle: rect fillColor: Color transparent			borderWidth: 2 borderColor: (Color r: 0.599 g: 0.8 b: 1.0).		].	pb showColor.	pb fixUpRecentColors.	^ pb! !!PhraseTileMorph methodsFor: 'mouse' stamp: 'tk 2/15/2001 16:55'!mouseDown: evt 	"Pretend we picked up the tile and then put it down for a trial  	positioning."	"The essence of ScriptEditor mouseEnter:"	| ed ss guyToTake dup |	self isPartsDonor ifTrue:[		dup _ self duplicate.		evt hand attachMorph: dup.		dup position: evt position.		^self].	submorphs isEmpty		ifTrue: [^ self].	(ed _ self enclosingEditor) ifNil: [^evt hand grabMorph: self].	guyToTake _ self.	owner class == TilePadMorph		ifTrue: ["picking me out of another phrase"			(ss _ submorphs first) class == TilePadMorph				ifTrue: [ss _ ss submorphs first].			guyToTake _  ss veryDeepCopy].	evt hand grabMorph: guyToTake.	ed startStepping.	ed mouseEnterDragging: evt.	ed setProperty: #justPickedUpPhrase toValue: true.! !!PhraseTileMorph methodsFor: 'miscellaneous' stamp: 'tk 2/14/2001 14:07'!sproutNewScriptor	"The receiver, operating as a naked phrase tile, wishes to get iself placed in a nascent script"	| newScriptor |	self actualObject assureUniClass.	newScriptor _ self actualObject newScriptorAround:		((self ownerThatIsA: Viewer orA: ScriptEditorMorph)			ifNotNil:				[self veryDeepCopy]			ifNil:				[self]).	self currentHand attachMorph: newScriptor! !!PhraseTileMorph methodsFor: 'miscellaneous' stamp: 'tk 2/15/2001 16:37'!tileRows	"Answer a list of tile rows -- in this case exactly one row -- representing the receiver.  The fullCopy is deeply problematical here in the presence of the formerOwner property, so it the latter is temporarily set aside"	^ Array with: (Array with: self veryDeepCopy)! !!Preferences class methodsFor: 'parameters' stamp: 'tk 2/14/2001 14:14'!editAnnotations	"Preferences editAnnotations"	| aPanel ins outs current aMorph aWindow aButton info pair |	Smalltalk isMorphic		ifFalse:			[^ self inform: 'Sorry, you must be in a morphicproject to use this feature.'].	aPanel _ AlignmentMorph newRow extent: 300 @ 100.	ins _ AlignmentMorph newColumn extent: 150 @ 100.	ins color: Color green muchLighter.	outs _ ins copy.	ins enableDrop: true; beSticky.	"after the copy so not share extension"	outs enableDrop: true; beSticky.	outs color: Color red muchLighter.	aPanel addMorph: outs; addMorphFront: ins.	outs position: (ins position + (200 @ 0)).	current _ self defaultAnnotationRequests.	info _ self annotationInfo.	current do:		[:sym | pair _ info detect: [:aPair | aPair first == sym].		aMorph _ StringMorph new contents: pair first.		aMorph setBalloonText: pair last.		aMorph enableDrag: true.		aMorph			on: #startDrag			send: #startDrag:with:			to: aMorph.		ins addMorphBack: aMorph].	info do:		[:aPair | 			(current includes: aPair first) 				ifFalse:					[aMorph _ StringMorph new contents: aPair first.					aMorph setBalloonText: aPair last.					aMorph enableDrag: true.					aMorph						on: #startDrag						send: #startDrag:with:						to: aMorph.					outs addMorph: aMorph]].	aPanel layoutChanged.	aWindow _ SystemWindowWithButton new setLabel: 'Annotations'.	aButton _ SimpleButtonMorph new target: Preferences;		actionSelector: #acceptAnnotationsFrom:; arguments: (Array with: aWindow); label: 'apply'; borderWidth: 0; borderColor: Color transparent; color: Color transparent.	aButton submorphs first color: Color blue.	aButton setBalloonText: 'After moving all the annotations you want to the left (green) side, and all the ones you do NOT want to the right (pink) side, hit this "apply" button to have your choices take effect.'.	aWindow buttonInTitle: aButton; adjustExtraButton.	self currentWorld addMorphCentered: (aPanel wrappedInWindow: aWindow).	aWindow activateAndForceLabelToShow! !!Preferences class methodsFor: 'window colors' stamp: 'tk 2/14/2001 14:31'!windowSpecificationPanel	"Preferences windowSpecificationPanel"	| aPanel buttonRow aButton aRow aSwatch aColor aWindow aMiniWorld |	aPanel _ AlignmentMorph newColumn hResizing: #shrinkWrap; vResizing: #shrinkWrap;		layoutInset: 0.	aPanel addMorph: (buttonRow _ AlignmentMorph newRow color: (aColor _ Color tan lighter)).		buttonRow addTransparentSpacerOfSize: 2@0.	buttonRow addMorphBack: (SimpleButtonMorph new label: '?'; target: self; actionSelector: #windowColorHelp; setBalloonText: 'Click for an explanation of this panel'; color: Color veryVeryLightGray; yourself).	buttonRow addTransparentSpacerOfSize: 8@0.	#(	('Bright' 	installBrightWindowColors	yellow					'Use standard bright colors for all windows.')		('Pastel'		installPastelWindowColors	paleMagenta					'Use standard pastel colors for all windows.')		('White'	installUniformWindowColors		white					'Use white backgrounds for all standard windows.')) do:		[:quad |			aButton _ (SimpleButtonMorph new target: self)				label: quad first;				actionSelector: quad second;				color: (Color colorFrom: quad third);				setBalloonText: quad fourth;				yourself.			buttonRow addMorphBack: aButton.			buttonRow addTransparentSpacerOfSize: 10@0].	self windowColorClasses do:		[:aClassName | 			aRow _ AlignmentMorph newRow color: aColor.			aSwatch _ ColorSwatch new				target: self;				getSelector: #windowColorFor:;				putSelector: #setWindowColorFor:to:;				argument: aClassName;				extent: (40 @ 20);				yourself.			aRow addMorphFront: aSwatch.			aRow addTransparentSpacerOfSize: (12 @ 1).			aRow addMorphBack: (StringMorph contents: aClassName font: TextStyle defaultFont).			aPanel addMorphBack: aRow].	 Smalltalk isMorphic                ifTrue:                        [buttonRow _ buttonRow copy removeAllMorphs.					buttonRow addTransparentSpacerOfSize: 25@0.					aButton _ SimpleButtonMorph new target: self.					aButton color: Color tan muchLighter.					aButton label: 'Update Tools Flap'; 						target: Utilities; actionSelector: #replaceToolsFlap.					buttonRow addMorphBack: aButton.					aButton setBalloonText: 'Press here to place tools which use the above window-color choices  into the Tools flap.'.					aPanel addMorphBack: buttonRow.					aWindow _ aPanel wrappedInWindowWithTitle: 'Window Colors'.					self currentWorld addMorphCentered: aWindow.					aWindow activateAndForceLabelToShow ]                ifFalse:                        [(aMiniWorld _ MVCWiWPasteUpMorph newWorldForProject: nil)						addMorph: aPanel.                           aMiniWorld startSteppingSubmorphsOf: aPanel.                        MorphWorldView openOn: aMiniWorld                                label: 'Window Colors'                                extent: aMiniWorld fullBounds extent]! !!ProjectSorterMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/15/2001 16:54'!addControls	| b r partsBinButton newButton |	b _ SimpleButtonMorph new 		target: self;		color: self myColor darker;		borderColor: Color black.	newButton _ ImageMorph new image: (World project makeThumbnail scaledToSize: 24@18).	newButton on: #mouseDown send: #insertNewProject: to: self.	newButton setBalloonText: 'Make a new Project'.	(partsBinButton _ UpdatingThreePhaseButtonMorph checkBox)		target: self;		actionSelector: #togglePartsBinStatus;		arguments: #();		getSelector: #getPartsBinStatus.	r _ AlignmentMorph newRow		color: Color transparent;		borderWidth: 0;		layoutInset: 0;		wrapCentering: #center;		cellPositioning: #topCenter;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		extent: 5@5;		addMorphBack: (self wrapperFor: (b copy label: 'Okay';	actionSelector: #acceptSort));		addMorphBack: (self wrapperFor: (b copy label: 'Cancel';	actionSelector: #delete));		addMorphBack: (self wrapperFor: (newButton));		addTransparentSpacerOfSize: 8 @ 0;		addMorphBack: (self wrapperFor: partsBinButton);		addMorphBack: (self wrapperFor: (StringMorph contents: 'Parts bin') lock).	self addMorphFront: r.! !!ScorePlayerMorph methodsFor: 'initialization' stamp: 'tk 2/14/2001 14:16'!onScorePlayer: aScorePlayer title: scoreName	| divider col r |	scorePlayer _ aScorePlayer.	scorePlayer ifNotNil:		[scorePlayer  reset.		instrumentSelector _ Array new: scorePlayer score tracks size].	divider _ AlignmentMorph new		extent: 10@1;		borderWidth: 1;		layoutInset: 0;		borderColor: #raised;		color: color;		hResizing: #spaceFill;		vResizing: #rigid.	self removeAllMorphs.	self addMorphBack: self makeControls.	scorePlayer ifNil: [^ self].	r _ self makeRow		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	r addMorphBack: self rateControl;		addMorphBack: (Morph newBounds: (0@0 extent: 20@0) color: Color transparent);		addMorphBack: self volumeControl.	self addMorphBack: r.	self addMorphBack: self scrollControl.	col _ AlignmentMorph newColumn color: color; layoutInset: 0.	self addMorphBack: col.	1 to: scorePlayer trackCount do: [:trackIndex |		col addMorphBack: divider veryDeepCopy.		col addMorphBack: (self trackControlsFor: trackIndex)].	LastMIDIPort ifNotNil: [		"use the most recently set MIDI port"		scorePlayer openMIDIPort: LastMIDIPort].! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'tk 2/14/2001 14:15'!makeControls	| b r reverbSwitch repeatSwitch |	b _ SimpleButtonMorph new		target: self;		borderColor: #raised;		borderWidth: 2;		color: color.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (b copy label: '<>'; actWhen: #buttonDown;														actionSelector: #invokeMenu).	r addMorphBack: (b copy label: 'Piano Roll';		actionSelector: #makePianoRoll).	r addMorphBack: (b copy label: 'Rewind';		actionSelector: #rewind).	b target: scorePlayer.	r addMorphBack: (b copy label: 'Play';			actionSelector: #resumePlaying).	r addMorphBack: (b copy label: 'Pause';			actionSelector: #pause).	reverbSwitch _ SimpleSwitchMorph new		offColor: color;		onColor: (Color r: 1.0 g: 0.6 b: 0.6);		borderWidth: 2;		label: 'Reverb Disable';		actionSelector: #disableReverb:;		target: scorePlayer;		setSwitchState: SoundPlayer isReverbOn not.	r addMorphBack: reverbSwitch.	scorePlayer ifNotNil:		[repeatSwitch _ SimpleSwitchMorph new			offColor: color;			onColor: (Color r: 1.0 g: 0.6 b: 0.6);			borderWidth: 2;			label: 'Repeat';			actionSelector: #repeat:;			target: scorePlayer;			setSwitchState: scorePlayer repeat.		r addMorphBack: repeatSwitch].	b target: self.	^ r! !!ScorePlayerMorph methodsFor: 'layout' stamp: 'tk 2/14/2001 14:16'!panAndVolControlsFor: trackIndex	| volSlider panSlider c r middleLine pianoRollColor |	pianoRollColor _ (Color wheel: scorePlayer score tracks size) at: trackIndex.	volSlider _ SimpleSliderMorph new		color: color;		sliderColor: pianoRollColor;		extent: 101@2;		target: scorePlayer;		arguments: (Array with: trackIndex);		actionSelector: #volumeForTrack:put:;		minVal: 0.0;		maxVal: 1.0;		adjustToValue: (scorePlayer volumeForTrack: trackIndex).	panSlider _ volSlider copy		actionSelector: #panForTrack:put:;		minVal: 0.0;		maxVal: 1.0;				adjustToValue: (scorePlayer panForTrack: trackIndex).	c _ AlignmentMorph newColumn		color: color;		layoutInset: 0;		wrapCentering: #center; cellPositioning: #topCenter;		hResizing: #spaceFill;		vResizing: #shrinkWrap.	middleLine _ Morph new  "center indicator for pan slider"		color: (Color r: 0.4 g: 0.4 b: 0.4);		extent: 1@(panSlider height - 4);		position: panSlider center x@(panSlider top + 2).	panSlider addMorphBack: middleLine.	r _ self makeRow.	r addMorphBack: (StringMorph contents: '0').	r addMorphBack: volSlider.	r addMorphBack: (StringMorph contents: '10').	c addMorphBack: r.	r _ self makeRow.	r addMorphBack: (StringMorph contents: 'L').	r addMorphBack: panSlider.	r addMorphBack: (StringMorph contents: 'R').	c addMorphBack: r.	^ c! !!SorterTokenMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:17'!forMorph: aMorph	| it |	morphRepresented _ aMorph.	aMorph submorphs size > 0 ifTrue:		[self addMorphBack: (it _ aMorph submorphs first veryDeepCopy).		it position: self position + (1@1).		it lock].	self fitContents! !!SoundDemoMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:18'!makeControls	| b r |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r addMorphBack: (b copy label: 'V1';			actionSelector: #playV1).	r addMorphBack: (b copy label: 'V2';			actionSelector: #playV2).	r addMorphBack: (b copy label: 'V3';			actionSelector: #playV3).	r addMorphBack: (b copy label: 'All';			actionSelector: #playAll).	r addMorphBack: (b copy label: 'Stop';		actionSelector: #stopSound).	^ r! !!SoundSequencerMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:18'!makeControlPanel	| b |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	controlPanel _ AlignmentMorph newRow.	controlPanel color: b color; borderWidth: 0; layoutInset: 0.	controlPanel hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	controlPanel addMorphBack: (b copy label: 'reset';	actionSelector: #reset).	controlPanel addMorphBack: (b copy label: 'stop';		actionSelector: #stop).	controlPanel addMorphBack: (b copy label: 'play';	actionSelector: #play).! !!StandardScriptingSystem methodsFor: 'parts bin' stamp: 'tk 2/14/2001 14:18'!newStandardPartsBin	"StandardPartsBin _ nil.  self currentWorld presenter createStandardPartsBin"	StandardPartsBin ifNil:		[BookMorph turnOffSoundWhile:			[StandardPartsBin _ Presenter new newStandardPartsBinTitled: 'objects' 									includeControls: false]].	^ StandardPartsBin veryDeepCopy! !!TabSorterMorph methodsFor: 'as yet unclassified' stamp: 'tk 2/14/2001 14:18'!addControls	| b r |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r wrapCentering: #topLeft.	r addMorphBack: (b copy label: 'Okay';	actionSelector: #acceptSort).	r addMorphBack: (b copy label: 'Cancel';	actionSelector: #cancelSort).	self addMorphFront: r.! !!UniclassScript methodsFor: 'versions' stamp: 'tk 2/16/2001 11:29'!saveScriptVersion: timeStamp	"Save the tile script version by appending a pair of the form		<time stamp>     <morph list>to my list of former scripting tiles.  The morph-list will get copied back into the Scriptor following restoration."	(currentScriptEditor notNil and: [currentScriptEditor showingMethodPane not]) ifTrue:		[formerScriptingTiles ifNil: [formerScriptingTiles _ OrderedCollection new].		formerScriptingTiles add:			(Array with: timeStamp				with: (currentScriptEditor submorphs allButFirst collect: [:m | 						m veryDeepCopy])).		formerScriptingTiles size > 100 ifTrue: [			^ self error: 'apparent runaway versions, proceed at your own risk.']].! !!UserScript methodsFor: 'versions' stamp: 'tk 2/16/2001 11:29'!saveScriptVersion: timeStampCurrentlyIgnored	self isTextuallyCoded ifFalse:		[formerScriptEditors == nil ifTrue: [formerScriptEditors _ OrderedCollection new].		currentScriptEditor ifNotNil: [formerScriptEditors add: currentScriptEditor veryDeepCopy].		formerScriptEditors size > 100 ifTrue: [^ self error: 'apparent runaway versions']]! !!Utilities class methodsFor: 'flaps' stamp: 'tk 2/14/2001 14:22'!addProjectNavigationButtonsTo: aMorph	"Add prev, next, and go-to buttons at the top of aMorph"	| aButton aFont bb |	bb _ SimpleButtonMorph new target: Project.	bb actionSelector: #returnToPreviousProject.	aFont _ StrikeFont familyName: #ComicBold size: 24.	aButton _ bb copy.	aButton label: '<' font: aFont; borderWidth: 0.	aButton firstSubmorph color: Color red lighter.	aButton beTransparent.	aButton position: 30 @ 12.	aButton setBalloonText: 'previous project'.	aMorph addMorph: aButton.	aButton _ bb copy.	aButton actionSelector: #advanceToNextProject.	aButton label: '>' font: aFont; borderWidth: 0.	aButton firstSubmorph color: Color red lighter.	aButton position: 150 @ 14.	aButton setBalloonText: 'next project'.	aMorph addMorph: aButton.	aButton _ bb copy actWhen: #buttonDown.	aButton actionSelector: #jumpToProject; target: Project.	aButton label: 'Go...' font: (StrikeFont familyName: #ComicBold size: 19); borderWidth: 0.	aButton position: 78 @ 16.	aButton firstSubmorph color: Color red lighter.	aButton setBalloonText: 'go directly to a project'.	aMorph addMorph: aButton! !!Utilities class methodsFor: 'flaps' stamp: 'tk 2/14/2001 14:28'!standardLeftFlap	| aFlap aFlapTab aButton aClock buttonColor anOffset bb |	aFlap _ PasteUpMorph newSticky borderWidth: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab assumeString: 'Squeak' font: Preferences standardFlapFont orientation: #vertical color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #left; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab position: (0 @ ((Display height - aFlapTab height) // 2)).	aFlap beFlap: true.	aFlap color: (Color brown muchLighter lighter "alpha: 0.3").	aFlap extent: 200 @ self currentWorld height.	self addProjectNavigationButtonsTo: aFlap.	anOffset _ 16.	buttonColor _ Color green muchLighter.	bb _ SimpleButtonMorph new target: Smalltalk.	bb color: buttonColor.	aButton _ bb copy.	aButton actionSelector: #saveSession.	aButton setBalloonText: 'Make a complete snapshot of the current state of the image onto disk.'.	aButton label: 'snapshot'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #fileOutChanges.	aButton label: 'file out changes'.	aButton setBalloonText: 'File out the current change set to disk.'.	aFlap addMorph: aButton.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #browseRecentSubmissions.	aButton setBalloonText: 'Open a message-list browser showing the 20 most-recently-submitted methods.'.	aButton label: 'recent submissions'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aClock _ ClockMorph newSticky.	aClock color: Color red.	aClock showSeconds: false.	aClock font: (TextStyle default fontAt: 3).	aClock step.	aClock setBalloonText: 'The time of day.  If you prefer to see seconds, check out my menu.'.	aFlap addCenteredAtBottom: aClock offset: anOffset.	aButton _ bb copy target: Preferences.	aButton actionSelector: #openPreferencesInspector.	aButton setBalloonText: 'Open a window allowing me to view and change various Preferences.'.	aButton label: 'preferences...'.	aButton color: Color cyan muchLighter.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #updateFromServer.	aButton label: 'load code updates'.	aButton color: Color cyan muchLighter.	aButton setBalloonText: 'Check the Squeak server for any new code updates, and load any that are found.'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	self addSystemStatusLinesTo: aFlap.	aButton _ TrashCanMorph newSticky.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton startStepping.	^ aFlapTab! !!WaveEditor methodsFor: 'initialization' stamp: 'tk 2/14/2001 14:29'!addControls	| slider b r m |	b _ SimpleButtonMorph new target: self; borderColor: Color black.	r _ AlignmentMorph newRow.	r color: b color; borderWidth: 0; layoutInset: 0.	r hResizing: #shrinkWrap; vResizing: #shrinkWrap; extent: 5@5.	r wrapCentering: #topLeft.	r addMorphBack: (b copy label: 'X';					actionSelector: #delete).	r addMorphBack: (b copy label: '<>'; actWhen: #buttonDown;															actionSelector: #invokeMenu).	r addMorphBack: (b copy label: 'Play';				actionSelector: #play).	r addMorphBack: (b copy label: 'Play Before';		actionSelector: #playBeforeCursor).	r addMorphBack: (b copy label: 'Play After';			actionSelector: #playAfterCursor).	r addMorphBack: (b copy label: 'Play Loop';			actionSelector: #playLoop).	r addMorphBack: (b copy label: 'Test';				actionSelector: #playTestNote).	r addMorphBack: (b copy label: 'Save';				actionSelector: #saveInstrument).	r addMorphBack: (b copy label: 'Set Loop End';		actionSelector: #setLoopEnd).	r addMorphBack: (b copy label: 'One Cycle';			actionSelector: #setOneCycle).	r addMorphBack: (b copy label: 'Set Loop Start';		actionSelector: #setLoopStart).	self addMorphBack: r.	r _ AlignmentMorph newRow.	r color: self color; borderWidth: 0; layoutInset: 0.	r hResizing: #spaceFill; vResizing: #rigid; extent: 5@20; wrapCentering: #center; cellPositioning: #leftCenter.	m _ StringMorph new contents: 'Index: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: graph; getSelector: #cursor; putSelector: #cursor:;		growable: false; width: 71; step.	r addMorphBack: m.	m _ StringMorph new contents: 'Value: '.	r addMorphBack: m.	m _ UpdatingStringMorph new		target: graph; getSelector: #valueAtCursor; putSelector: #valueAtCursor:;		growable: false; width: 50; step.	r addMorphBack: m.	slider _ SimpleSliderMorph new		color: color;		extent: 200@2;		target: self;		actionSelector: #scrollTime:.	r addMorphBack: slider.	m _ Morph new color: r color; extent: 10@5.  "spacer"	r addMorphBack: m.	m _ UpdatingStringMorph new		target: graph; getSelector: #startIndex; putSelector: #startIndex:;		width: 40; step.	r addMorphBack: m.	self addMorphBack: r.! !UndefinedObject removeSelector: #copyRecordingIn:!TileMorph removeSelector: #copyRecordingIn:!TextMorph removeSelector: #copyRecordingIn:!ScrollPane removeSelector: #fullCopy!PolygonMorph removeSelector: #copyRecordingIn:!PaintBoxMorph removeSelector: #copyRecordingIn:!MorphExtension removeSelector: #copyPropertiesFrom:dict:!BookMorph removeSelector: #copyRecordingIn:!Morph removeSelector: #copyPropertiesFrom:dict:!Morph removeSelector: #copyRecordingIn:!Morph removeSelector: #copyWithoutSubmorphs!Morph removeSelector: #fullCopy!Morph removeSelector: #fullCopyWithoutFormerOwner!Morph removeSelector: #veryDeepCopyWithoutPlayer!