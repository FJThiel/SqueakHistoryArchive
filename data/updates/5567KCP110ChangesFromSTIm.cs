'From Squeak3.7alpha of ''11 September 2003'' [latest update: #5548] on 16 November 2003 at 2:33:52 pm'!"Change Set:		KCP-0110-ChangesFromSystDicToSTImDate:			16 November 2003Author:			stephane ducassemove changes management methods from SystemDictionary to SmalltalkImage.Method moved in SmalltalkImageand deprecated in SystemDictionary"!Object subclass: #SmalltalkImage	instanceVariableNames: ''	classVariableNames: 'LastImageName LastStats SourceFileVersionString LastQuitLogPosition StartupStamp '	poolDictionaries: ''	category: 'System-Support'!!ChangeList class methodsFor: 'public access' stamp: 'sd 11/16/2003 14:10'!browseRecentLog	"ChangeList browseRecentLog"	"Prompt with a menu of how far back to go to browse the current image's changes log file"	^ self		browseRecentLogOn: (SourceFiles at: 2)		startingFrom: SmalltalkImage current lastQuitLogPosition! !!ChangeList class methodsFor: 'public access' stamp: 'sd 11/16/2003 14:11'!getRecentLocatorWithPrompt: aPrompt	"Prompt with a menu of how far back to go.  Return nil if user backs out.  Otherwise return the number of characters back from the end of the .changes file the user wishes to include"	 "ChangeList getRecentPosition"	| end changesFile banners positions pos chunk i |	changesFile _ (SourceFiles at: 2) readOnlyCopy.	banners _ OrderedCollection new.	positions _ OrderedCollection new.	end _ changesFile size.	pos _ SmalltalkImage current lastQuitLogPosition.	[pos = 0 or: [banners size > 20]] whileFalse:		[changesFile position: pos.		chunk _ changesFile nextChunk.		i _ chunk indexOfSubCollection: 'priorSource: ' startingAt: 1.		i > 0 ifTrue: [positions addLast: pos.					banners addLast: (chunk copyFrom: 5 to: i-2).					pos _ Number readFrom: (chunk copyFrom: i+13 to: chunk size)]			ifFalse: [pos _ 0]].	changesFile close.	pos _ (SelectionMenu labelList: banners selections: positions)				startUpWithCaption: aPrompt.	pos == nil ifTrue: [^ nil].	^ end - pos! !!FileDirectory class methodsFor: 'name utilities' stamp: 'sd 11/16/2003 12:02'!startUp	"Establish the platform-specific FileDirectory subclass. Do any platform-specific startup."	self setDefaultDirectoryFrom: SmalltalkImage current imageName.	Preferences startInUntrustedDirectory 		ifTrue:[	self setDefaultDirectory: SecurityManager default untrustedUserDirectory.				"Make sure we have a place to go to"				DefaultDirectory assureExistence].	SmalltalkImage current openSourceFiles.! !!FileDirectory class methodsFor: 'system start up' stamp: 'sd 11/16/2003 13:13'!shutDown	SmalltalkImage current closeSourceFiles.! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sd 11/16/2003 14:13'!newSqueakFlap	"Answer a new default 'Squeak' flap for the left edge of the screen"	| aFlap aFlapTab aButton aClock buttonColor anOffset bb aFont |	aFlap _ PasteUpMorph newSticky borderWidth: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab setName: 'Squeak' translated edge: #left color: Color brown lighter lighter.	aFlapTab position: (0 @ ((Display height - aFlapTab height) // 2)).	aFlapTab setBalloonText: aFlapTab balloonTextForFlapsMenu.	aFlap cellInset: 14@14.	aFlap beFlap: true.	aFlap color: (Color brown muchLighter lighter "alpha: 0.3").	aFlap extent: 150 @ self currentWorld height.	aFlap layoutPolicy: TableLayout new.	aFlap wrapCentering: #topLeft.	aFlap layoutInset: 2.	aFlap listDirection: #topToBottom.	aFlap wrapDirection: #leftToRight.	"self addProjectNavigationButtonsTo: aFlap."	anOffset _ 16.	aClock _ ClockMorph newSticky.	aClock color: Color red.	aClock showSeconds: false.	aClock font: (TextStyle default fontAt: 3).	aClock step.	aClock setBalloonText: 'The time of day.  If you prefer to see seconds, check out my menu.' translated.	aFlap addCenteredAtBottom: aClock offset: anOffset.	buttonColor _  Color cyan muchLighter.	bb _ SimpleButtonMorph new target: SmalltalkImage current.	bb color: buttonColor.	aButton _ bb copy.	aButton actionSelector: #saveSession.	aButton setBalloonText: 'Make a complete snapshot of the current state of the image onto disk.' translated.	aButton label: 'save' translated font: (aFont _ ScriptingSystem fontForTiles).	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #updateFromServer.	aButton label: 'load code updates' translated font: aFont.	aButton color: buttonColor.	aButton setBalloonText: 'Check the Squeak server for any new code updates, and load any that are found.' translated.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ SimpleButtonMorph new target: Smalltalk; actionSelector: #aboutThisSystem;		label: 'about this system' translated font: aFont.	aButton color: buttonColor.	aButton setBalloonText: 'click here to find out version information' translated.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aFlap addCenteredAtBottom: (Preferences themeChoiceButtonOfColor: buttonColor font: aFont) offset: anOffset.	aButton _ TrashCanMorph newSticky.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton startStepping.	^ aFlapTab"Flaps replaceGlobalFlapwithID: 'Squeak' translated "! !!ImageSegment class methodsFor: 'fileIn/Out' stamp: 'sd 11/16/2003 14:17'!startUp	| choice |	"Minimal thing to assure that a .segs folder is present"(Preferences valueOfFlag: #projectsSentToDisk) ifTrue: [	(FileDirectory default includesKey: (FileDirectory localNameFor: self folder)) 		ifFalse: [			choice _ (PopUpMenu labels: 'Create folder\Quit without saving' withCRs)				startUpWithCaption: 					'The folder with segments for this image is missing.\' withCRs,					self folder, '\If you have moved or renamed the image file,\' withCRs,					'please Quit and rename the segments folder in the same way'.			choice = 1 ifTrue: [FileDirectory default createDirectory: self folder].			choice = 2 ifTrue: [SmalltalkImage current snapshot: false andQuit: true]]]	! !!Preferences class methodsFor: 'personalization' stamp: 'sd 11/16/2003 13:17'!disableProgrammerFacilities	"Warning: do not call this lightly!!  It disables all access to menus, debuggers, halos.  There is no guaranteed return from this, which is to say, you cannot necessarily reenable these things once they are disabled -- you can only use whatever the UI of the current project affords, and you cannot even snapshot -- you can only quit.      You can completely reverse the work of this method by calling the dual Preferences method enableProgrammerFacilities, provided you have left yourself leeway to bring about a call to that method.	To set up a system that will come up in such a state, you have to request the snapshot in the same breath as you disable the programmer facilities.  To do this, put the following line into the 'do' menu and then evaluate it from that 'do' menu:         Preferences disableProgrammerFacilities.You will be prompted for a new image name under which to save the resulting image."	Beeper beep.	(self confirm: 'CAUTION!!!!This is a drastic step!!Do you really want to do this?')		ifFalse:			[self beep.  ^ self inform: 'whew!!'].	self disable: #cmdDotEnabled.       "No user-interrupt-into-debugger"	self compileHardCodedPref: #cmdGesturesEnabled enable: false.  "No halos, etc."	self compileHardCodedPref: #cmdKeysInText enable: false.    "No user commands invokable via cmd-key combos in text editor"	self enable: #noviceMode.           "No control-menu"	self disable: #warnIfNoSourcesFile.	self disable: #warnIfNoChangesFile.	SmalltalkImage current saveAs! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'sd 11/16/2003 14:17'!quitSqueak	(self confirm: 'REALLY quit Squeak?' translated)		ifFalse: [^ self].	SmalltalkImage current snapshot: false andQuit: true! !!ScreenController methodsFor: 'menu messages' stamp: 'sd 11/16/2003 14:17'!quit	SmalltalkImage current		snapshot:			(self confirm: 'Save changes before quitting?' translated				orCancel: [^ self])		andQuit: true! !!ScreenController methodsFor: 'menu messages' stamp: 'sd 11/16/2003 13:17'!saveAs	^ SmalltalkImage current saveAs! !!ScreenController methodsFor: 'menu messages' stamp: 'sd 11/16/2003 14:17'!snapshot	SmalltalkImage current snapshot: true andQuit: false! !!ScreenController methodsFor: 'menu messages' stamp: 'sd 11/16/2003 14:17'!snapshotAndQuit	"Snapshot and quit without bother the user further.  2/4/96 sw"	SmalltalkImage current		snapshot: true		andQuit: true! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 13:12'!closeSourceFiles	"Shut down the source files if appropriate.  1/29/96 sw: changed so that the closing and nilification only take place if the entry was a FileStream, thus allowing stringified sources to remain in the saved image file"	1 to: 2 do: [:i |		((SourceFiles at: i) isKindOf: FileStream)			ifTrue:				[(SourceFiles at: i) close.				SourceFiles at: i put: nil]]! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 14:02'!lastQuitLogPosition	^ LastQuitLogPosition! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 14:03'!lastQuitLogPosition: aNumber	"should be only use to ensure the transition from SystemDictionary to SmalltalkImage, then  	be removed"			LastQuitLogPosition := aNumber! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 12:00'!openSourceFiles	self imageName = LastImageName ifFalse:		["Reset the author initials to blank when the image gets moved"		LastImageName _ self imageName.		Utilities setAuthorInitials: ''].	FileDirectory		openSources: self sourcesName		andChanges: self changesName		forImage: LastImageName.	StandardSourceFileArray install! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 14:10'!saveAs	"Put up the 'saveAs' prompt, obtain a name, and save the image  under that new name."	| newName |	newName _ self getFileNameFromUser.	newName isNil ifTrue: [^ self].	(SourceFiles at: 2) ifNotNil:		[self saveChangesInFileNamed: (self fullNameForChangesNamed: newName)].	self saveImageInFileNamed: (self fullNameForImageNamed: newName)! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 13:22'!saveAsEmbeddedImage	"Save the current state of the system as an embedded image"	| dir newName newImageName newImageSegDir oldImageSegDir haveSegs |	dir _ FileDirectory default.	newName _ FillInTheBlank		request: 'Select existing VM file'		initialAnswer: (FileDirectory localNameFor: '').	newName = '' ifTrue: [^ Smalltalk].	newName _ FileDirectory baseNameFor: newName asFileName.	newImageName _ newName.	(dir includesKey: newImageName) ifFalse:		[^ self inform: 'Unable to find name ', newName, ' Please choose another name.'].	haveSegs _ false.	Smalltalk at: #ImageSegment ifPresent: [:theClass | 		(haveSegs _ theClass instanceCount ~= 0) ifTrue:			[oldImageSegDir _ theClass segmentDirectory]].	Smalltalk logChange: '----SAVEAS (EMBEDDED) ', newName, '----', Date dateAndTimeNow printString.	self imageName: (dir fullNameFor: newImageName).	LastImageName _ self imageName.	self closeSourceFiles.	haveSegs ifTrue:		[Smalltalk at: #ImageSegment ifPresent: [:theClass |			newImageSegDir _ theClass segmentDirectory.	"create the folder"			oldImageSegDir fileNames do: [:theName | "copy all segment files"				newImageSegDir 					copyFileNamed: oldImageSegDir pathName, FileDirectory slash, theName 					toFileNamed: theName]]].	Smalltalk snapshot: true andQuit: true embedded: true! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 13:26'!saveAsNewVersion	"Save the image/changes using the next available version number."	"SmalltalkImage current saveAsNewVersion"		| newName changesName aName anIndex |	aName := FileDirectory baseNameFor: (FileDirectory default localNameFor: self imageName).	anIndex := aName lastIndexOf: FileDirectory dot asCharacter ifAbsent: [nil].	(anIndex notNil and: [(aName copyFrom: anIndex + 1 to: aName size) isAllDigits])		ifTrue:			[aName := aName copyFrom: 1 to: anIndex - 1].	newName := FileDirectory default nextNameFor: aName extension: FileDirectory imageSuffix.	changesName := self fullNameForChangesNamed: newName.	"Check to see if there is a .changes file that would cause a problem if we saved a new .image file with the new version number"	(FileDirectory default includesKey: changesName)		ifTrue:			[^ self inform:'There is already .changes file of the desired name,', newName, 'curiously already present, even though there isno corresponding .image file.   Please remedymanually and then repeat your request.'].	(SourceFiles at: 2) ifNotNil:		[self saveChangesInFileNamed: (self fullNameForChangesNamed: newName)].	self saveImageInFileNamed: (self fullNameForImageNamed: newName)! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 13:08'!saveChangesInFileNamed: aString	FileDirectory default 		copyFileWithoutOverwriteConfirmationNamed: SmalltalkImage current changesName 		toFileNamed: aString.	Smalltalk setMacFileInfoOn: aString.! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 14:17'!saveImageInFileNamed: aString	self		changeImageNameTo: (FileDirectory default fullNameFor: aString).	self closeSourceFiles.	self openSourceFiles.  "so SNAPSHOT appears in new changes file"	self  saveImageSegments.	self snapshot: true andQuit: false.! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'sd 11/16/2003 13:29'!saveImageSegments	| haveSegs oldImageSegDir newImageSegDir |	haveSegs _ false.	Smalltalk at: #ImageSegment ifPresent: [:theClass | 		(haveSegs _ theClass instanceCount ~= 0) ifTrue: [			oldImageSegDir _ theClass segmentDirectory]].	haveSegs ifTrue: [		Smalltalk at: #ImageSegment ifPresent: [:theClass |			newImageSegDir _ theClass segmentDirectory.	"create the folder"			oldImageSegDir fileNames do: [:theName | "copy all segment files"				| imageSegmentName |				imageSegmentName _ oldImageSegDir pathName, FileDirectory slash, theName.				newImageSegDir 					copyFileWithoutOverwriteConfirmationNamed: imageSegmentName					toFileNamed: theName]]].! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 14:10'!getFileNameFromUser	| newName |	newName := FillInTheBlank		request: 'New File Name?' translated		initialAnswer: (FileDirectory localNameFor: self imageName).	newName = '' ifTrue: [^nil].	((FileDirectory default includesKey: (self fullNameForImageNamed: newName)) or:	 [FileDirectory default includesKey: (self fullNameForChangesNamed: newName)]) ifTrue: [		(self confirm: ('{1} already exists. Overwrite?' translated format: {newName})) ifFalse: [^nil]].	^newName! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 14:08'!readDocumentFile	"No longer used. Everything is now done in ProjectLauncher."	"I do not understand the above comment because this method is still called 		by other methods in the class SystemDictionary so I moved it here- sd - 16 Nov 03"		StartupStamp _ '----STARTUP----', Time dateAndTimeNow printString, ' as ', self imageName.! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 14:12'!saveSession	self snapshot: true andQuit: false! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 14:20'!shutDown	^ self closeSourceFiles! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 14:12'!snapshot: save andQuit: quit	^self snapshot: save andQuit: quit embedded: false! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 14:08'!snapshot: save andQuit: quit embedded: embeddedFlag	"Mark the changes file and close all files. If save is true, save the current state of this Smalltalk in the image file. If quit is true, then exit to the outer shell. The latter part of this method runs when resuming a previously saved image. The resume logic checks for a document file to process when starting up."	| resuming msg |	Object flushDependents.	Object flushEvents.	(SourceFiles at: 2) ifNotNil:[		msg _ String streamContents: [ :s |			s nextPutAll: '----';			nextPutAll: (save ifTrue: [ quit ifTrue: [ 'QUIT' ] ifFalse: [ 'SNAPSHOT' ] ]							ifFalse: [quit ifTrue: [ 'QUIT/NOSAVE' ] ifFalse: [ 'NOP' ]]);			nextPutAll: '----';			print: Date dateAndTimeNow; space;			nextPutAll: (FileDirectory default localNameFor: self imageName);			nextPutAll: ' priorSource: ';			print: LastQuitLogPosition ].		Smalltalk assureStartupStampLogged.		save ifTrue: [ LastQuitLogPosition _ (SourceFiles at: 2) setToEnd; position ].		Smalltalk logChange: msg.		Transcript cr; show: msg	].	Smalltalk processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming _ embeddedFlag 					ifTrue: [self snapshotEmbeddedPrimitive] 					ifFalse: [self snapshotPrimitive].  "<-- PC frozen here on image file"				resuming == false "guard against failure" ifTrue:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming _ false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	Smalltalk setGCParameters.	resuming == true ifTrue: [Smalltalk clearExternalObjects].	Smalltalk processStartUpList: resuming == true.	resuming == true ifTrue:[		self setPlatformPreferences.		self readDocumentFile].	Smalltalk isMorphic ifTrue: [SystemWindow wakeUpTopWindowUponStartup].	"Now it's time to raise an error"	resuming == nil ifTrue: [self error:'Failed to write image file (disk full?)'].	^ resuming! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 13:58'!snapshotEmbeddedPrimitive	<primitive: 247>	^nil "indicates error writing embedded image file"! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 13:59'!snapshotPrimitive	"Primitive. Write the current state of the object memory on a file in the	same format as the Smalltalk-80 release. The file can later be resumed,	returning you to this exact state. Return normally after writing the file.	Essential. See Object documentation whatIsAPrimitive."	<primitive: 97>	^nil "indicates error writing image file"! !!SmalltalkImage methodsFor: 'image, changes names' stamp: 'sd 11/16/2003 11:58'!changeImageNameTo: aString		self imageName: aString.	LastImageName := self imageName! !!SmalltalkImage methodsFor: 'image, changes names' stamp: 'sd 11/16/2003 11:58'!changesName	"Answer the local name for the changes file corresponding to the image file name."	"Smalltalk changesName"	| imName |	imName := FileDirectory baseNameFor:		(FileDirectory localNameFor: self imageName).	^ imName, FileDirectory dot, 'changes'! !!SmalltalkImage methodsFor: 'image, changes names' stamp: 'sd 11/16/2003 11:58'!fullNameForChangesNamed: aName	| newName |	newName := FileDirectory baseNameFor: aName asFileName.	^newName , FileDirectory dot, FileDirectory changeSuffix.! !!SmalltalkImage methodsFor: 'image, changes names' stamp: 'sd 11/16/2003 11:58'!fullNameForImageNamed: aName	| newName |	newName := FileDirectory baseNameFor: aName asFileName.	^newName , FileDirectory dot, FileDirectory imageSuffix.! !!SmalltalkImage methodsFor: 'image, changes names' stamp: 'sd 11/16/2003 13:57'!imagePath	"Answer the path for the directory containing the image file."	"SmalltalkImage current imagePath"	^ FileDirectory dirPathFor: self imageName! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'sd 11/16/2003 13:13'!condenseSources		"Move all the changes onto a compacted sources file."	"Smalltalk condenseSources"	| f classCount dir newVersionString |	Utilities fixUpProblemsWithAllCategory.	"The above removes any concrete, spurious '-- all --' categories, which mess up the process."	dir _ FileDirectory default.	newVersionString _ FillInTheBlank request: 'Please designate the versionfor the new source code file...' initialAnswer: SourceFileVersionString.	newVersionString ifNil: [^ self].	newVersionString = SourceFileVersionString ifTrue:		[^ self error: 'The new source file must not be the same as the old.'].	SourceFileVersionString _ newVersionString.	"Write all sources with fileIndex 1"	f _ FileStream newFileNamed: SmalltalkImage current sourcesName.	f header; timeStamp.'Condensing Sources File...'	displayProgressAt: Sensor cursorPoint	from: 0 to: Smalltalk classNames size	during:		[:bar | classCount _ 0.		Smalltalk allClassesDo:			[:class | bar value: (classCount _ classCount + 1).			class fileOutOn: f moveSource: true toFile: 1]].	f trailer; close.	"Make a new empty changes file"	SmalltalkImage current closeSourceFiles.	dir rename: SmalltalkImage current changesName		toBe: SmalltalkImage current changesName , '.old'.	(FileStream newFileNamed: SmalltalkImage current changesName)		header; timeStamp; close.	LastQuitLogPosition _ 0.	self setMacFileInfoOn: SmalltalkImage current changesName.	self setMacFileInfoOn: SmalltalkImage current sourcesName.	SmalltalkImage current openSourceFiles.	self inform: 'Source files have been rewritten!!Check that all is well,and then save/quit.'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'sd 11/16/2003 13:13'!abandonTempNames	"Replaces every method by a copy with no source pointer or encoded temp names."	"Smalltalk abandonTempNames"	 | continue oldMethods newMethods n m |	continue _ (self confirm:  '-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning all source code, hit Yes.If you have any doubts, hit No,to back out with no harm done.').	continue ifFalse: [^ self inform: 'Okay - no harm done'].	Smalltalk forgetDoIts; garbageCollect.	oldMethods _ OrderedCollection new.	newMethods _ OrderedCollection new.	n _ 0.	'Removing temp names to save space...'		displayProgressAt: Sensor cursorPoint		from: 0 to: CompiledMethod instanceCount		during: [:bar |			self systemNavigation allBehaviorsDo: [:cl |				cl selectors do: [:sel |					bar value: (n _ n + 1).					m _ cl compiledMethodAt: sel.					oldMethods addLast: m.					newMethods addLast: (m copyWithTrailerBytes: #(0))]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	SmalltalkImage current closeSourceFiles.	self flag: #shouldUseAEnsureBlockToBeSureThatTheFileIsClosed. "sd: 17 April 2003"	Preferences disable: #warnIfNoChangesFile.	Preferences disable: #warnIfNoSourcesFile.! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sd 11/16/2003 13:14'!shutDown	^ SmalltalkImage current closeSourceFiles! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:23'!changeImageNameTo: aString	self deprecated: 'Use SmalltalkImage current changeImageNameTo: aString'.	SmalltalkImage current imageName: aString.	LastImageName _ SmalltalkImage current imageName! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:26'!changesName	"Answer the local name for the changes file corresponding to the image file name."	"Smalltalk changesName"	| imName |	self deprecated: 'Use SmalltalkImage current changesName'.	imName _ FileDirectory baseNameFor:		(FileDirectory localNameFor: SmalltalkImage current imageName).	^ imName, FileDirectory dot, 'changes'! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:26'!closeSourceFiles	"Shut down the source files if appropriate.  1/29/96 sw: changed so that the closing and nilification only take place if the entry was a FileStream, thus allowing stringified sources to remain in the saved image file"	self deprecated: 'Use SmalltalkImage current closeSourceFiles'.	1 to: 2 do: [:i |		((SourceFiles at: i) isKindOf: FileStream)			ifTrue:				[(SourceFiles at: i) close.				SourceFiles at: i put: nil]]! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:26'!fullNameForChangesNamed: aName	| newName |	self deprecated: 'Use SmalltalkImage current fullNameForChangesNamed: aName'.	newName _ FileDirectory baseNameFor: aName asFileName.	^newName , FileDirectory dot, FileDirectory changeSuffix.! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:26'!fullNameForImageNamed: aName	| newName |	self deprecated: 'Use SmalltalkImage current fullNameForImageNamed: aName'.	newName _ FileDirectory baseNameFor: aName asFileName.	^newName , FileDirectory dot, FileDirectory imageSuffix.! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:26'!getFileNameFromUser	| newName |	self deprecated: 'Use SmalltalkImage current getFileNameFromUser'.	newName _ FillInTheBlank		request: 'New File Name?' translated		initialAnswer: (FileDirectory localNameFor: SmalltalkImage current imageName).	newName = '' ifTrue: [^nil].	((FileDirectory default includesKey: (SmalltalkImage current fullNameForImageNamed: newName)) or:	 [FileDirectory default includesKey: (SmalltalkImage current fullNameForChangesNamed: newName)]) ifTrue: [		(self confirm: ('{1} already exists. Overwrite?' translated format: {newName})) ifFalse: [^nil]].	^newName! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!imagePath	"Answer the path for the directory containing the image file."	"Smalltalk imagePath"	self deprecated: 'Use SmalltalkImage current imagePath'.	^ FileDirectory dirPathFor: SmalltalkImage current imageName! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!lastQuitLogPosition	self deprecated: 'Use SmalltalkImage current lastQuitLogPosition'.	^ LastQuitLogPosition! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!openSourceFiles		self deprecated: 'Use SmalltalkImage current lastQuitLogPosition'.		SmalltalkImage current imageName = LastImageName ifFalse:		["Reset the author initials to blank when the image gets moved"		LastImageName _ SmalltalkImage current imageName.		Utilities setAuthorInitials: ''].	FileDirectory		openSources: SmalltalkImage current sourcesName		andChanges: SmalltalkImage current changesName		forImage: LastImageName.	StandardSourceFileArray install! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!readDocumentFile	"No longer used. Everything is now done in ProjectLauncher."		self deprecated: 'Use SmalltalkImage current readDocumentFile'.	StartupStamp _ '----STARTUP----', Time dateAndTimeNow printString, ' as ', SmalltalkImage current imageName.! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!saveAs	"Put up the 'saveAs' prompt, obtain a name, and save the image  under that new name."	| newName |	self deprecated: 'Use SmalltalkImage current saveAs'.	newName _ SmalltalkImage current getFileNameFromUser.	newName isNil ifTrue: [^ self].	(SourceFiles at: 2) ifNotNil:		[SmalltalkImage current saveChangesInFileNamed: (SmalltalkImage current fullNameForChangesNamed: newName)].	SmalltalkImage current saveImageInFileNamed: (SmalltalkImage current fullNameForImageNamed: newName)! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!saveAsEmbeddedImage	"Save the current state of the system as an embedded image"	| dir newName newImageName newImageSegDir oldImageSegDir haveSegs |	self deprecated: 'Use SmalltalkImage current saveAsEmbeddedImage'.	dir _ FileDirectory default.	newName _ FillInTheBlank		request: 'Select existing VM file'		initialAnswer: (FileDirectory localNameFor: '').	newName = '' ifTrue: [^ self].	newName _ FileDirectory baseNameFor: newName asFileName.	newImageName _ newName.	(dir includesKey: newImageName) ifFalse:		[^ self inform: 'Unable to find name ', newName, ' Please choose another name.'].	haveSegs _ false.	Smalltalk at: #ImageSegment ifPresent: [:theClass | 		(haveSegs _ theClass instanceCount ~= 0) ifTrue:			[oldImageSegDir _ theClass segmentDirectory]].	self logChange: '----SAVEAS (EMBEDDED) ', newName, '----', Date dateAndTimeNow printString.	SmalltalkImage current imageName: (dir fullNameFor: newImageName).	LastImageName _ SmalltalkImage current imageName.	SmalltalkImage current closeSourceFiles.	haveSegs ifTrue:		[Smalltalk at: #ImageSegment ifPresent: [:theClass |			newImageSegDir _ theClass segmentDirectory.	"create the folder"			oldImageSegDir fileNames do: [:theName | "copy all segment files"				newImageSegDir 					copyFileNamed: oldImageSegDir pathName, FileDirectory slash, theName 					toFileNamed: theName]]].	self snapshot: true andQuit: true embedded: true! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!saveAsNewVersion	"Save the image/changes using the next available version number."	"Smalltalk saveAsNewVersion"	| newName changesName aName anIndex |	self deprecated: 'Use SmalltalkImage current saveAsNewVersion'.	aName _ FileDirectory baseNameFor: (FileDirectory default localNameFor: SmalltalkImage current imageName).	anIndex _ aName lastIndexOf: FileDirectory dot asCharacter ifAbsent: [nil].	(anIndex notNil and: [(aName copyFrom: anIndex + 1 to: aName size) isAllDigits])		ifTrue:			[aName _ aName copyFrom: 1 to: anIndex - 1].	newName _ FileDirectory default nextNameFor: aName extension: FileDirectory imageSuffix.	changesName _ SmalltalkImage current fullNameForChangesNamed: newName.	"Check to see if there is a .changes file that would cause a problem if we saved a new .image file with the new version number"	(FileDirectory default includesKey: changesName)		ifTrue:			[^ self inform:'There is already .changes file of the desired name,', newName, 'curiously already present, even though there isno corresponding .image file.   Please remedymanually and then repeat your request.'].	(SourceFiles at: 2) ifNotNil:		[SmalltalkImage current saveChangesInFileNamed: (SmalltalkImage current fullNameForChangesNamed: newName)].	SmalltalkImage current saveImageInFileNamed: (SmalltalkImage current fullNameForImageNamed: newName)! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!saveChangesInFileNamed: aString		self deprecated: 'Use SmalltalkImage current saveChangesInFileNamed: aString'.	FileDirectory default 		copyFileWithoutOverwriteConfirmationNamed: SmalltalkImage current changesName 		toFileNamed: aString.	self	setMacFileInfoOn: aString.! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!saveImageInFileNamed: aString	self deprecated: 'Use SmalltalkImage current saveImageInFileNamed: aString'.	SmalltalkImage current 		changeImageNameTo: (FileDirectory default fullNameFor: aString).	SmalltalkImage current	closeSourceFiles.	SmalltalkImage current openSourceFiles.  "so SNAPSHOT appears in new changes file"	SmalltalkImage current 		saveImageSegments.	SmalltalkImage current snapshot: true andQuit: false.! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!saveImageSegments	| haveSegs oldImageSegDir newImageSegDir |	self deprecated: 'Use SmalltalkImage current saveImageSegments'.	haveSegs _ false.	Smalltalk at: #ImageSegment ifPresent: [:theClass | 		(haveSegs _ theClass instanceCount ~= 0) ifTrue: [			oldImageSegDir _ theClass segmentDirectory]].	haveSegs ifTrue: [		Smalltalk at: #ImageSegment ifPresent: [:theClass |			newImageSegDir _ theClass segmentDirectory.	"create the folder"			oldImageSegDir fileNames do: [:theName | "copy all segment files"				| imageSegmentName |				imageSegmentName _ oldImageSegDir pathName, FileDirectory slash, theName.				newImageSegDir 					copyFileWithoutOverwriteConfirmationNamed: imageSegmentName					toFileNamed: theName]]].! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!saveSession	self deprecated: 'Use SmalltalkImage current saveSession'.	SmalltalkImage current snapshot: true andQuit: false! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:27'!snapshot: save andQuit: quit	self deprecated: 'Use SmalltalkImage current snapshot: save andQuit: quit'.	^self snapshot: save andQuit: quit embedded: false! !!SystemDictionary methodsFor: 'toDeprecate' stamp: 'sd 11/16/2003 14:28'!snapshot: save andQuit: quit embedded: embeddedFlag	"Mark the changes file and close all files. If save is true, save the current state of this Smalltalk in the image file. If quit is true, then exit to the outer shell. The latter part of this method runs when resuming a previously saved image. The resume logic checks for a document file to process when starting up."	| resuming msg |	self deprecated: 'Use SmalltalkImage current snapshot: save andQuit: quit embedded: embeddedFlag'.	Object flushDependents.	Object flushEvents.	(SourceFiles at: 2) ifNotNil:[		msg _ String streamContents: [ :s |			s nextPutAll: '----';			nextPutAll: (save ifTrue: [ quit ifTrue: [ 'QUIT' ] ifFalse: [ 'SNAPSHOT' ] ]							ifFalse: [quit ifTrue: [ 'QUIT/NOSAVE' ] ifFalse: [ 'NOP' ]]);			nextPutAll: '----';			print: Date dateAndTimeNow; space;			nextPutAll: (FileDirectory default localNameFor: SmalltalkImage current imageName);			nextPutAll: ' priorSource: ';			print: LastQuitLogPosition ].		self assureStartupStampLogged.		save ifTrue: [ LastQuitLogPosition _ (SourceFiles at: 2) setToEnd; position ].		self logChange: msg.		Transcript cr; show: msg	].	self processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming _ embeddedFlag 					ifTrue: [self snapshotEmbeddedPrimitive] 					ifFalse: [self snapshotPrimitive].  "<-- PC frozen here on image file"				resuming == false "guard against failure" ifTrue:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming _ false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	self setGCParameters.	resuming == true ifTrue: [self clearExternalObjects].	self processStartUpList: resuming == true.	resuming == true ifTrue:[		SmalltalkImage current setPlatformPreferences.		SmalltalkImage current readDocumentFile].	Smalltalk isMorphic ifTrue: [SystemWindow wakeUpTopWindowUponStartup].	"Now it's time to raise an error"	resuming == nil ifTrue: [self error:'Failed to write image file (disk full?)'].	^ resuming! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'sd 11/16/2003 12:55'!externalizeSources   	"Write the sources and changes streams onto external files." 	"Smalltalk externalizeSources"	"the logic of this method is complex because it uses changesName and self changesName	may be this is normal - sd"		| sourcesName changesName aFile |	sourcesName _ SmalltalkImage current sourcesName.	(FileDirectory default fileExists: sourcesName)		ifTrue: [^ self inform:'Sorry, you must first move or remove thefile named ', sourcesName].	changesName _ SmalltalkImage current changesName.	(FileDirectory default fileExists: changesName)		ifTrue: [^ self inform:'Sorry, you must first move or remove thefile named ', changesName].	aFile _  FileStream newFileNamed: sourcesName.	aFile nextPutAll: SourceFiles first originalContents.	aFile close.	self setMacFileInfoOn: sourcesName.	SourceFiles at: 1 put: (FileStream readOnlyFileNamed: sourcesName).	aFile _ FileStream newFileNamed: SmalltalkImage current changesName.	aFile nextPutAll: SourceFiles last contents.	aFile close.	"On Mac, set the file type and creator (noop on other platforms)"	FileDirectory default		setMacFileNamed: SmalltalkImage current changesName		type: 'STch'		creator: 'FAST'.	SourceFiles at: 2 put: (FileStream oldFileNamed: changesName).	self inform: 'Sources successfully externalized'.! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'sd 11/16/2003 12:55'!internalizeChangeLog    		"Smalltalk internalizeChangeLog"	"Bring the changes file into a memory-resident filestream, for faster access and freedom from external file system.  1/31/96 sw"	| reply aName aFile |	reply _ self confirm:  'CAUTION -- do not undertake this lightly!!If you have backed up your system andare prepared to face the consequences ofthe requested internalization of sources,hit Yes.  If you have any doubts, hit Noto back out with no harm done.'.	(reply ==  true) ifFalse:		[^ self inform: 'Okay - abandoned'].	aName _ SmalltalkImage current changesName.	(aFile _ SourceFiles last) == nil ifTrue:		[(FileDirectory default fileExists: aName)			ifFalse: [^ self halt: 'Cannot locate ', aName, ' so cannot proceed.'].		aFile _ FileStream readOnlyFileNamed: aName].	SourceFiles at: 2 put: (ReadWriteStream with: aFile contentsOfEntireFile).	self inform: 'Okay, changes file internalized'! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'sd 11/16/2003 12:55'!internalizeSources    		"Smalltalk internalizeSources"	"Bring the sources and changes files into memory-resident filestreams, for faster access and freedom from file-system interface.  1/29/96 sw"	| reply aName aFile |	reply _ self confirm:  'CAUTION -- do not undertake this lightly!!If you have backed up your system andare prepared to face the consequences ofthe requested internalization of sources,hit Yes.  If you have any doubts, hit Noto back out with no harm done.'.	(reply ==  true) ifFalse:		[^ self inform: 'Okay - abandoned'].	aName _ SmalltalkImage current sourcesName.	(aFile _ SourceFiles first) == nil ifTrue:		[(FileDirectory default fileExists: aName)			ifFalse: [^ self halt: 'Cannot locate ', aName, ' so cannot proceed.'].		aFile _ FileStream readOnlyFileNamed: aName].	SourceFiles at: 1 put: (ReadWriteStream with: aFile contentsOfEntireFile).	aName _ SmalltalkImage current changesName.	(aFile _ SourceFiles last) == nil ifTrue:		[(FileDirectory default fileExists: aName)			ifFalse: [^ self halt: 'Cannot locate ', aName, ' so cannot proceed.'].		aFile _ FileStream readOnlyFileNamed: aName].	SourceFiles at: 2 put: (ReadWriteStream with: aFile contentsOfEntireFile).	self inform: 'Okay, sources internalized'! !!SystemVersion class methodsFor: 'updating' stamp: 'sd 11/16/2003 14:18'!checkAndApplyUpdates: availableUpdate	"SystemVersion checkAndApplyUpdates: nil"	^(availableUpdate isNil		or: [availableUpdate > SystemVersion current highestUpdate])		ifTrue: [			(self confirm: 'There are updates available. Do you want to install them now?')				ifFalse: [^false].			Utilities				readServerUpdatesThrough: availableUpdate				saveLocally: false				updateImage: true.			SmalltalkImage current snapshot: true andQuit: false.			true]		ifFalse: [false]! !!TheWorldMenu methodsFor: 'commands' stamp: 'sd 11/16/2003 14:18'!quitSession	SmalltalkImage current		snapshot: (self confirm: 'Save changes before quitting?' translated orCancel: [^ self])		andQuit: true! !!TheWorldMenu methodsFor: 'commands' stamp: 'sd 11/16/2003 14:18'!saveAndQuit	SmalltalkImage current snapshot: true andQuit: true! !!TheWorldMenu methodsFor: 'construction' stamp: 'sd 11/16/2003 14:15'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu _ MenuMorph new defaultTarget: self.	menu commandKeyHandler: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu from: {		{'previous project' . { #myWorld . #goBack }. 'return to the most-recently-visited project'}.		{'jump to project...' . { #myWorld . #jumpToProject }. 'put up a list of all projects, letting me choose one to go to' }.		{'save project on file...' . { #myWorld  . #saveOnFile }. 'save this project on a file' }.		{'load project from file...' . { self  . #loadProject }. 'load a project from a file' }.		nil}.	myWorld addUndoItemsTo: menu.		self fillIn: menu from: {		{'restore display (r)' . { World . #restoreMorphicDisplay }. 'repaint the screen -- useful for removing unwanted display artifacts, lingering cursors, etc.' }.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'open...' . { self  . #openWindow } }.			{'windows...' . { self  . #windowsDo } }.			{'changes...' . { self  . #changesDo } }}].	self fillIn: menu from: { 		{'help...' . { self  . #helpDo }.  'puts up a menu of useful items for updating the system, determining what version you are running, and much else'}.		{'appearance...' . { self  . #appearanceDo }. 'put up a menu offering many controls over appearance.' }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: {			{'do...' . { Utilities . #offerCommonRequests} . 'put up an editible list of convenient expressions, and evaluate the one selected.' }}].	self fillIn: menu from: { 		nil.		{'objects (o)' . { #myWorld . #activateObjectsTool } . 'A tool for finding and obtaining many kinds of objects'}.		{'new morph...' . { self  . #newMorph }. 'Offers a variety of ways to create new objects'}.		nil.		{'authoring tools...' . { self  . #scriptingDo } . 'A menu of choices useful for authoring'}.		{'playfield options...' . { self  . #playfieldDo } . 'A menu of options pertaining to this object as viewed as a playfield' }.		{'flaps...'. { self . #flapsDo } . 'A menu relating to use of flaps.  For best results, use "keep this menu up"' }.		{'projects...' . { self  . #projectDo }. 'A menu of commands relating to use of projects' }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'print PS to file...' . { self  . #printWorldOnFile } . 'write the world into a postscript file'}.			{'debug...' . { self  . #debugDo } . 'a menu of debugging items' }}].	self fillIn: menu from: { 		nil.		{'save' . { SmalltalkImage current  . #saveSession } . 'save the current version of the image on disk' }.		{'save as...' . { SmalltalkImage current . #saveAs }. 'save the current version of the image on disk under a new name.'}.		{'save as new version' . { SmalltalkImage current . #saveAsNewVersion }. 'give the current image a new version-stamped name and save it under that name on disk.' }.		{'save and quit' . { self  . #saveAndQuit } . 'save the current image on disk, and quit out of Squeak.'}.		{'quit' . { self  . #quitSession } . 'quit out of Squeak.' }}.	^ menu! !!UnhandledError methodsFor: 'priv handling' stamp: 'sd 11/16/2003 14:18'!runtimeDefaultAction	"Dump the stack trace to a log file, then exit the program (image)."	| file |	file := FileStream newFileNamed: ('error', Utilities dateTimeSuffix, FileDirectory dot, 'log') asFileName.	Smalltalk timeStamp: file.	(thisContext sender stackOfSize: 20) do: [:ctx | file cr. ctx printOn: file].	file close.	SmalltalkImage current snapshot: false andQuit: true! !TheWorldMenu removeSelector: #saveSession!Object subclass: #SmalltalkImage	instanceVariableNames: ''	classVariableNames: 'LastImageName LastQuitLogPosition LastStats SourceFileVersionString StartupStamp '	poolDictionaries: ''	category: 'System-Support'!"Postscript:To pass the LastQuitLogPosition from Smalltalk to SmalltalkImage"SmalltalkImage current lastQuitLogPosition: Smalltalk lastQuitLogPosition!