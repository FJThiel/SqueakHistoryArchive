'From Squeak3.1alpha of 28 February 2001 [latest update: #4193] on 12 July 2001 at 10:02:18 pm'!"Change Set:		transposeFlap-swDate:			12 July 2001Author:			Scott WallaceAllows horizontally-oriented flaps to be changed to vertically-oriented, and vice-versa.  Reworks the default Squeak flap to be compatible with this scheme.Also contains the start of a definition of a new 'Scripting' flap, chock full of items specifically useful for people writing tile scripts, but this work is still underway and hence not threaded in, though one could preview it by evaluating 'Flaps addScriptingFlap'.Also improves the implementation of Flaps.reinstateDefaultFlaps, so that it no longer clobbers non-standard global flaps, nor does it clobber any existing local flaps -- it only has the effect of removing earlier versions of the standard global flaps and establishing new ones.This update also fixes a flaw in an earlier redefinition of the Squeak flap, which was reported on the Squeak mailing list by Joern Eyrich."!PasteUpMorph subclass: #PartsBin	instanceVariableNames: ''	classVariableNames: 'Thumbnails '	poolDictionaries: ''	category: 'Morphic-PartsBin'!!FlapTab methodsFor: 'edge' stamp: 'sw 7/3/2001 18:47'!setEdge: anEdge	"Set the edge as indicated, if possible"	| changedOrientation |	changedOrientation _ nil.	self orientation == #vertical			ifTrue:				[(#(top bottom) includes: anEdge) ifTrue:					[changedOrientation _ #horizontal]]			ifFalse:				[(#(top bottom) includes: anEdge) ifFalse:					[changedOrientation _ #vertical]].	self edgeToAdhereTo: anEdge.	changedOrientation ifNotNil:		[self transposeParts].	referent isInWorld ifTrue: [self positionReferent].	self adjustPositionVisAVisFlap! !!FlapTab methodsFor: 'positioning' stamp: 'sw 7/3/2001 18:46'!transposeParts	"The receiver's orientation has just been changed from vertical to horizontal or vice-versa."	| aString longString correction |	self orientation == #vertical		ifTrue:	"changed from horizontal"			[referent listDirection: #topToBottom.			referent width: referent height.			referent height: self currentWorld height.			correction _ 0]		ifFalse:			[referent listDirection: #leftToRight.			referent height: referent width.			referent width: self currentWorld width.			correction _ 1].	self isCurrentlyTextual ifTrue:		[longString _ self firstSubmorph contents.		aString _ String streamContents:			[:aStream |				1 to: ((longString size + correction) // 2) do:							[:i | aStream nextPut: (longString at: (2 * i - correction))]].		self assumeString: aString font: Preferences standardFlapFont orientation: self orientation color: self color].	self spanWorld.	self showFlap.! !!FlapTab methodsFor: 'miscellaneous' stamp: 'sw 7/3/2001 06:13'!balloonTextForFlapsMenu	"Answer the balloon text to show on a menu item in the flaps menu that governs the visibility of the receiver in the current project"	| id |	id _ self flapID.	#(	('Squeak'		'A flap with various generally-useful controls for updating the system, navigating among projects, etc.')	('Tools'			'A quick way to get browsers, change sorters, file lists, etc.')	('Widgets'		'A variety of controls and media tools')	('Supplies' 		'A source for many basic types of objects')	('Stack Tools' 	'Tools for building stacks.  Caution!!  Powerful but young and sharply underdocumented')	('Scripting'		'Tools useful when doing tile scripting'.)	('Painting'		'A flap housing the paint palette.  Click on the closed tab to make make a new painting')) do:		[:pair | id = pair first ifTrue: [^ pair second]].	^ self balloonText! !!Flaps class methodsFor: 'flap mechanics' stamp: 'sw 7/12/2001 22:01'!freshFlapsStart	"To be called manually only, as a drastic measure.  Delete all flap artifacts and establish fresh default global flaps	Flaps freshFlapsStart	"	self currentWorld deleteAllFlapArtifacts.	self clobberFlapTabList.	self addStandardFlaps! !!Flaps class methodsFor: 'flap mechanics' stamp: 'sw 7/12/2001 21:59'!reinstateDefaultFlaps	"Remove all existing 'standard' global flaps clear the global list, and and add fresh ones.  To be called by doits in updates etc.  This is a radical step, but it does *not* clobber non-standard global flaps or local flaps.  To get the effect of the *former* version of this method, call Flaps freshFlapsStart"	"Flaps reinstateDefaultFlaps"	self globalFlapTabsIfAny do:		[:aFlapTab |			(#('Painting' 'Stack Tools' 'Squeak' 'Menu' 'Widgets' 'Tools' 'Supplies' 'Scripting' 'Treasury') includes: aFlapTab flapID) ifTrue:				[self removeFlapTab: aFlapTab keepInList: false]].	self addStandardFlaps.	self disableGlobalFlapWithID: 'Painting'.	self disableGlobalFlapWithID: 'Stack Tools'.	self disableGlobalFlapWithID: 'Scripting'.	self disableGlobalFlapWithID: 'Treasury'.	self currentWorld addGlobalFlaps.	self currentWorld reformulateUpdatingMenus! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 17:59'!addScriptingFlap	"Preliminary.  Add a scripting flap, not in the standard set, to the list of global flaps.  'Flaps addScriptingFlap'"	self addGlobalFlap: self newScriptingFlap.	ActiveWorld addGlobalFlaps! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 21:39'!addStandardFlaps	"Initialize the standard default out-of-box set of global flaps.  This method creates them and places them in my class variable #SharedFlapTabs, but does not itself get them displayed."	SharedFlapTabs ifNil: [SharedFlapTabs _ OrderedCollection new].	SharedFlapTabs add: self newSqueakFlap.	SharedFlapTabs add: self newSuppliesFlap.	SharedFlapTabs add: self newToolsFlap.	SharedFlapTabs add: self newWidgetsFlap.	SharedFlapTabs add: self newStackToolsFlap delete.	SharedFlapTabs add: self newPaintingFlap delete.	"SharedFlapTabs add: self newScriptingFlap delete.	SharedFlapTabs add: self newTreasuryFlap."	self enableGlobalFlapWithID: 'Squeak'.		self enableGlobalFlapWithID: 'Supplies'.	self enableGlobalFlapWithID: 'Tools'.	self enableGlobalFlapWithID: 'Controls'.	self disableGlobalFlapWithID: 'Stack Tools'.	self disableGlobalFlapWithID: 'Painting'.	self disableGlobalFlapWithID: 'Scripting'.	self enableGlobalFlapWithID: 'Treasury'.	SharedFlapTabs do:		[:aFlapTab | 			aFlapTab setToPopOutOnMouseOver: false].	"The above amends some historic behavior imparted by the initializers of the individual flaps"	^ SharedFlapTabs"Flaps reinstateDefaultFlaps"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 11:00'!initializeStandardFlaps	"Initialize the standard default out-of-box set of global flaps. This method creates them and places them in my class variable #SharedFlapTabs, but does not itself get them displayed."	SharedFlapTabs _ OrderedCollection new.	SharedFlapTabs add: self newSqueakFlap.	SharedFlapTabs add: self newSuppliesFlap.	SharedFlapTabs add: self newToolsFlap.	SharedFlapTabs add: self newWidgetsFlap.	SharedFlapTabs add: self newStackToolsFlap delete.	SharedFlapTabs add: self newPaintingFlap delete.	"SharedFlapTabs add: self newScriptingFlap delete.	SharedFlapTabs add: self newTreasuryFlap."	self enableGlobalFlapWithID: 'Squeak'.		self enableGlobalFlapWithID: 'Supplies'.	self enableGlobalFlapWithID: 'Tools'.	self enableGlobalFlapWithID: 'Controls'.	self disableGlobalFlapWithID: 'Stack Tools'.	self disableGlobalFlapWithID: 'Painting'.	self disableGlobalFlapWithID: 'Scripting'.	self enableGlobalFlapWithID: 'Treasury'.	SharedFlapTabs do:		[:aFlapTab | 			aFlapTab setToPopOutOnMouseOver: false].	"The above amends some historic behavior imparted by the initializers of the individual flaps"	^ SharedFlapTabs"Flaps reinstateDefaultFlaps"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/4/2001 00:25'!newScriptingFlap	"Add a flap with scriptors' tools in it"	| aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #topToBottom from: self quadsDeiningScriptingFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Scripting'.	aFlapTab assumeString: 'Scripting' font: Preferences standardFlapFont orientation: #vertical color: (Color r: 0.548 g: 1.0 b: 0.935).  "Color fromUser"	aFlapTab edgeToAdhereTo: #left; inboard: false.  	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aFlapTab position: (0 @ 80).	aStrip beFlap: true.	aStrip extent: 120 @ self currentWorld height.	aStrip color: (aFlapTab color lighter lighter alpha: 0.85).	aStrip vResizing: #spaceFill.	^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/4/2001 12:11'!newSqueakFlap	"Answer a new default 'Squeak' flap for the left edge of the screen"	| aFlap aFlapTab aButton aClock buttonColor anOffset bb |	aFlap _ PasteUpMorph newSticky borderWidth: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab setNameTo: 'Squeak'.	aFlapTab assumeString: 'Squeak' font: Preferences standardFlapFont orientation: #vertical color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #left; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlap cellInset: 14@14.	aFlapTab position: (0 @ ((Display height - aFlapTab height) // 2)).	aFlap beFlap: true.	aFlap color: (Color brown muchLighter lighter "alpha: 0.3").	aFlap extent: 150 @ self currentWorld height.	aFlap listDirection: #topToBottom.	aFlap layoutPolicy: TableLayout new.	aFlap wrapCentering: #topLeft.	aFlap layoutInset: 2.	aFlap hResizing: #spaceFill.	aFlap vResizing: #rigid.	self addProjectNavigationButtonsTo: aFlap.	anOffset _ 16.	buttonColor _ Color green muchLighter.	bb _ SimpleButtonMorph new target: Smalltalk.	bb color: buttonColor.	aButton _ bb copy.	aButton actionSelector: #saveSession.	aButton setBalloonText: 'Make a complete snapshot of the current state of the image onto disk.'.	aButton label: 'snapshot'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #fileOutChanges.	aButton label: 'file out changes'.	aButton setBalloonText: 'File out the current change set to disk.'.	aFlap addMorph: aButton.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #openRecentSubmissionsBrowser.	aButton setBalloonText: 'Open a message-list browser showing the most-recently-submitted methods.'.	aButton label: 'recent submissions'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aClock _ ClockMorph newSticky.	aClock color: Color red.	aClock showSeconds: false.	aClock font: (TextStyle default fontAt: 3).	aClock step.	aClock setBalloonText: 'The time of day.  If you prefer to see seconds, check out my menu.'.	aFlap addCenteredAtBottom: aClock offset: anOffset.	aButton _ bb copy target: Preferences.	aButton actionSelector: #openPreferencesInspector.	aButton setBalloonText: 'Open a window allowing me to view and change various Preferences.'.	aButton label: 'preferences...'.	aButton color: Color cyan muchLighter.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton _ bb copy target: Utilities.	aButton actionSelector: #updateFromServer.	aButton label: 'load code updates'.	aButton color: Color cyan muchLighter.	aButton setBalloonText: 'Check the Squeak server for any new code updates, and load any that are found.'.	aFlap addCenteredAtBottom: aButton offset: anOffset.	self addSystemStatusLinesTo: aFlap.	aButton _ TrashCanMorph newSticky.	aFlap addCenteredAtBottom: aButton offset: anOffset.	aButton startStepping.	^ aFlapTab"Flaps reinstateDefaultFlaps"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/4/2001 00:23'!newStackToolsFlap	"Add a flap with stack tools in it"	| aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #leftToRight from:	 self quadsDefiningStackToolsFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab assumeString: 'Stack Tools' font: Preferences standardFlapFont orientation: #horizontal color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: self currentWorld width @ 78.	aFlapTab position: ((Display width - (aFlapTab width + 22)) @ (self currentWorld height - aFlapTab height)).	aStrip beFlap: true.	aStrip hResizing: #spaceFill.	aStrip autoLineLayout: true.	aFlapTab position: ((Display width - (aFlapTab width + 226)) @ (self currentWorld height - aFlapTab height)).	aStrip color: (Color red muchLighter "alpha: 0.2").	aStrip extent: self currentWorld width @ 70.	^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/3/2001 23:57'!newSuppliesFlap	"Answer a fully-instantiated flap named 'Supplies' to be placed at the bottom of the screen"	|  aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #leftToRight from:	 self quadsDefiningSuppliesFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Supplies'.	aFlapTab assumeString: 'Supplies' font: Preferences standardFlapFont orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: self currentWorld width @ 78.	aFlapTab position: ((Display width - (aFlapTab width + 22)) @ (self currentWorld height - aFlapTab height)).	aStrip beFlap: true.	aStrip color: Color red muchLighter.	aStrip hResizing: #spaceFill.	aStrip autoLineLayout: true.		^ aFlapTab! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/4/2001 00:28'!newToolsFlap	"Answer a newly-created flap which adheres to the right edge of the screen and which holds prototypes of standard tools."	|  aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #topToBottom from: self quadsDefiningToolsFlap. 	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Tools'.	aFlapTab assumeString: 'Tools' font: Preferences standardFlapFont orientation: #vertical color: Color orange lighter.	aFlapTab edgeToAdhereTo: #right; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: (90 @ self currentWorld height).	aFlapTab position: (self currentWorld width - aFlapTab width) @ ((Display height - aFlapTab height) // 2).	aStrip beFlap: true.	aStrip color: (Color orange muchLighter alpha: 0.8).	aStrip vResizing: #spaceFill.		^ aFlapTab	"Flaps replaceToolsFlap"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/4/2001 00:21'!newWidgetsFlap	"Answer a newly-created flap which adheres to the bottom edge of the screen and which holds prototypes of standard widgets. "	|  aFlapTab aStrip |	aStrip _ PartsBin newPartsBinWithOrientation: #leftToRight from:	 self quadsDefiningWidgetsFlap.	aFlapTab _ FlapTab new referent: aStrip beSticky.	aFlapTab setNameTo: 'Widgets'.	aFlapTab assumeString: 'Widgets' font: Preferences standardFlapFont orientation: #horizontal color: Color blue lighter lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: false.	aStrip extent: self currentWorld width @ 78.	aFlapTab position: ((Display width - (aFlapTab width + 122)) @ (self currentWorld height - aFlapTab height)).	aStrip beFlap: true.	aStrip color: (Color blue muchLighter alpha: 0.8).	aStrip hResizing: #spaceFill.	aStrip autoLineLayout: true.		^ aFlapTab	"Flaps replaceWidgetsFlap"! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 18:11'!quadsDefiningStackToolsFlap	"Answer a structure defining the items on the default system Stack Tools flap"	^ #(	(StackMorph 			authoringPrototype		'Stack' 			'A multi-card data base'	)	(TextMorph				exampleBackgroundLabel	'Background Label' 'A piece of text that will occur on every card of the background')	(TextMorph				exampleBackgroundField		'Background Field'	'A  data field which will have a different value on every card of the background')	(TextFieldMorph			exampleBackgroundField		'Scrolling Field'	'A scrolling data field which will have a different value on every card of the background')	(SketchMorph			exampleBackgroundSketch	'Background picture' 'A graphic that will have a different value on every card of the background.')	(ScriptableButton		authoringPrototype		'Scriptable Button'	'A button whose script will be a method of the background Player')	(StackMorph			previousCardButton 		'Previous Card' 		'A button that takes the user to the previous card in the stack')	(StackMorph			nextCardButton			'Next Card'		'A button that takes the user to the next card in the stack'))! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 18:10'!quadsDefiningSuppliesFlap	"Answer a compact structure which defines the elements of the default Supplies flap"	^  #(	(RectangleMorph 		authoringPrototype		'Rectangle' 		'A rectangle'	)	(RectangleMorph		roundRectPrototype		'RoundRect'		'A rectangle with rounded corners')	(EllipseMorph			authoringPrototype		'Ellipse'			'An ellipse or circle')	(StarMorph				authoringPrototype		'Star'			'A star')	(CurveMorph			authoringPrototype		'Curve'			'A curve')	(PolygonMorph			authoringPrototype		'Polygon'		'A straight-sided figure with any number of sides')	(TextMorph				authoringPrototype		'Text'			'Text that you can edit into anything you desire.')	(ScriptingSystem		prototypicalHolder 		'Holder'			'A place for storing alternative pictures in an animation, etc.')	(ImageMorph			authoringPrototype		'Picture'		'A non-editable picture of something')	(ScriptableButton		authoringPrototype		'Button'			'A Scriptable button')	(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')	(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')	(BookMorph				authoringPrototype		'Book'			'A multi-paged structure')	(TabbedPalette			authoringPrototype		'Tabs'			'A structure with tabs')	(JoystickMorph			authoringPrototype		'Joystick'		'A joystick-like control')	(ClockMorph				authoringPrototype		'Clock'			'A simple digital clock')	(BookMorph				previousPageButton 		'Previous'		'A button that takes you to the previous page')	(BookMorph				nextPageButton			'Next'			'A button that takes you to the next page')		).! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 18:12'!quadsDefiningToolsFlap	"Answer a structure defining the default Tools flap"	^ #(	(Browser 				prototypicalToolWindow		'Browser'			'A Browser is a tool that allows you to view all the code of all the classes in the system')	(Transcript				openAsMorph				'Transcript'			'A Transcript is a window usable for logging and debugging; browse references to #Transcript for examples of how to write to it.')	(Workspace				prototypicalToolWindow		'Workspace'			'A Work is a simple window for editing text.  You can later save the contents to a file if you desire.')	(FileList					prototypicalToolWindow		'File List'			'A File List is a tool for browsing folders and files on disks and on ftp types.')	(DualChangeSorter		prototypicalToolWindow		'Change Sorter'		'Shows two change sets side by side')	(SelectorBrowser			prototypicalToolWindow		'Method Finder'		'A Method Finder is a tool for finding methods by name')	(Preferences			preferencesControlPanel	'Preferences'			'Allows you to control numerous options')	(Utilities				recentSubmissionsWindow	'Recent'				'A message browser that tracks the most recently-submitted methods')	(ProcessBrowser			prototypicalToolWindow		'Processes'			'A Process Browser shows you all the running processes')	(Preferences			annotationEditingWindow	'Annotations'		'Allows you to specify the annotations to be shown in the annotation panes of browsers, etc.')	(Scamper				newOpenableMorph				'Scamper'			'A web browser')	(Celeste					newOpenableMorph				'Celeste'				'Celeste -- an EMail reader')	(PackagePaneBrowser	prototypicalToolWindow		'Packages'			'Package Browser:  like a System Browser, except that if has extra level of categorization in the top-left pane, such that class-categories are further organized into groups called "packages"')	(ChangeSorter			prototypicalToolWindow		'Change Set'			'A tool that allows you to view and manipulate all the code changes in a single change set'))! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 18:12'!quadsDefiningWidgetsFlap	"Answer a structure defining the default Widgets flap"	^ #(	(TrashCanMorph			new						'Trash'				'A tool for discarding objects')		(ScriptingSystem 		scriptControlButtons 			'Status'				'Buttons to run, stop, or single-step scripts')	(PaintInvokingMorph	new						'Paint'				'Drop this into an area to start making a fresh painting there')	(GeeMailMorph			new						'Gee-Mail'			'A place to present annotated content')	(RecordingControlsMorph authoringPrototype			'Sound'				'A device for making sound recordings.')	(MPEGMoviePlayerMorph	authoringPrototype			'Movie Player'		'A Player for MPEG movies')	(FrameRateMorph		authoringPrototype			'Frame Rate'		'An indicator of how fast your system is running')	(MagnifierMorph		newRound					'Magnifier'			'A magnifying glass')	(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you control all the running scripts in your world')	(ScriptingSystem		newScriptingSpace			'Scripting'			'A confined place for drawing and scripting, with its own private stop/step/go buttons.')	(BouncingAtomsMorph	new						'Bouncing Atoms'	'Atoms, mate'))! !!Flaps class methodsFor: 'predefined flaps' stamp: 'sw 7/12/2001 18:11'!quadsDeiningScriptingFlap	"Answer a structure defining the default items in the Scripting flap"	^ #(	(TrashCanMorph			new						'Trash'				'A tool for discarding objects')		(ScriptingSystem 		scriptControlButtons 			'Status'				'Buttons to run, stop, or single-step scripts')	(AllScriptsTool			allScriptsToolForActiveWorld	'All Scripts' 		'A tool that lets you control all the running scripts in your world')	(ScriptingSystem		newScriptingSpace			'Scripting'			'A confined place for drawing and scripting, with its own private stop/step/go buttons.')	(PaintInvokingMorph	new						'Paint'				'Drop this into an area to start making a fresh painting there')	(ScriptableButton		authoringPrototype		'Button'			'A Scriptable button')	(ScriptingSystem		prototypicalHolder 		'Holder'			'A place for storing alternative pictures in an animation, etc.')	(RandomNumberTile		new		'Random'		'A tile that will produce a random number in a given range')	(ScriptingSystem		anyButtonPressedTiles	'ButtonDown?'	'Tiles for querying whether the mouse button is down')	(ScriptingSystem		noButtonPressedTiles		'ButtonUp?'		'Tiles for querying whether the mouse button is up')	(SimpleSliderMorph		authoringPrototype		'Slider'			'A slider for showing and setting numeric values.')	(JoystickMorph			authoringPrototype		'Joystick'		'A joystick-like control')	(TextFieldMorph			exampleBackgroundField		'Scrolling Field'	'A scrolling data field which will have a different value on every card of the background')	(PasteUpMorph			authoringPrototype		'Playfield'		'A place for assembling parts or for staging animations')	(StackMorph 			authoringPrototype		'Stack' 			'A multi-card data base'	)	(TextMorph				exampleBackgroundLabel	'Background Label' 'A piece of text that will occur on every card of the background')	(TextMorph				exampleBackgroundField		'Background Field'	'A  data field which will have a different value on every card of the background')		) ! !!Flaps class methodsFor: 'construction support' stamp: 'sw 7/4/2001 12:14'!addProjectNavigationButtonsTo: aContainer	"Add prev, next, and go-to buttons at the top of aContainer.  This is used to create the buttons at the top of the Squeak flap"	| aButton aFont aMorph |	aMorph _ AlignmentMorph newRow.	aMorph cellInset: 8@8.	aMorph vResizing: #shrinkWrap; hResizing: #shrinkWrap; beTransparent.	aFont _ StrikeFont familyName: #ComicBold size: 24.	aButton _ SimpleButtonMorph new target: Project.	aButton actionSelector: #returnToPreviousProject.	aButton beTransparent.	aButton label: '<' font: aFont; borderWidth: 0.	aButton firstSubmorph color: Color red lighter.	aButton setBalloonText: 'previous project'.	aMorph addMorphBack: aButton.	aButton _ SimpleButtonMorph new target: Project.	aButton actWhen: #buttonDown.	aButton actionSelector: #jumpToProject.	aButton beTransparent.	aButton label: 'Go...' font: (StrikeFont familyName: #ComicBold size: 19); borderWidth: 0.	aButton firstSubmorph color: Color red lighter.	aButton setBalloonText: 'go directly to a project'.	aMorph addMorphBack: aButton.	aButton _ SimpleButtonMorph new target: Project.	aButton actionSelector: #advanceToNextProject.	aButton beTransparent.	aButton label: '>' font: aFont; borderWidth: 0.	aButton firstSubmorph color: Color red lighter.	aButton setBalloonText: 'next project'.	aMorph addMorphBack: aButton.	aContainer addMorphFront: aMorph! !!PartsBin methodsFor: 'initialization' stamp: 'sw 7/12/2001 18:58'!listDirection: aListDirection quadList: quadList	"Initialize the receiver to run horizontally or vertically, obtaining its elements from the list of tuples of the form:		(<receiver> <selector> <label> <balloonHelp>)"	| prototype aButton aClass |	self layoutPolicy: TableLayout new.	self listDirection: aListDirection.	self wrapCentering: #topLeft.	self layoutInset: 2.	aListDirection == #leftToRight		ifTrue:			[self vResizing: #rigid.			self hResizing: #spaceFill.			self wrapDirection: #topToBottom]		ifFalse:			[self hResizing: #rigid.			self vResizing: #spaceFill.			self wrapDirection: #leftToRight].	quadList do:		[:tuple |			aClass _ Smalltalk at: tuple first.			(tuple second == #newStandAlone)				ifFalse:					[prototype _ aClass perform: tuple second.					aButton _ IconicButton new initializeToShow: prototype withLabel: tuple third andSend: tuple second to: (Smalltalk at: tuple first)]				ifTrue:					[aButton _ IconicButton new initializeWithThumbnail: (self class thumbnailForInstanceOf: aClass) withLabel: tuple third andSend: tuple second to: aClass].			(tuple size > 3 and: [tuple fourth isEmptyOrNil not]) ifTrue:				[aButton setBalloonText: tuple fourth]. 			self addMorphBack: aButton]! !!PartsBin class methodsFor: 'class initialization' stamp: 'sw 7/12/2001 19:07'!initialize	"Initialize the PartsBin class, by starting it out with an empty Thumbnails dictionary"	Thumbnails _ Dictionary new	"PartsBin initialize"! !!PartsBin class methodsFor: 'thumbnail cache' stamp: 'sw 7/12/2001 19:06'!cacheThumbnail: aThumbnail forSymbol: aSymbol	"Cache the thumbnail provided as the graphic representing a parts-bin denizen whose name is the given symbol"	Thumbnails at: aSymbol put: aThumbnail! !!PartsBin class methodsFor: 'thumbnail cache' stamp: 'sw 7/12/2001 18:56'!clearThumbnailCache	"Clear the cache of thumbnails:		PartsBin clearThumbnailCache"	Thumbnails _ Dictionary new! !!PartsBin class methodsFor: 'thumbnail cache' stamp: 'sw 7/12/2001 19:06'!thumbnailForInstanceOf: aMorphClass	"Answer a thumbnail for a stand-alone instance of the given class, creating it if necessary.  If it is created afresh, it will also be cached at this time"	| aThumbnail |	^ Thumbnails at: aMorphClass name ifAbsent:		[aThumbnail _ Thumbnail new makeThumbnailFromForm: aMorphClass newStandAlone imageForm.		self cacheThumbnail: aThumbnail forSymbol: aMorphClass name.		^ aThumbnail]"PartsBin initialize"! !!Project methodsFor: 'project parameters' stamp: 'sw 7/3/2001 06:15'!assureFlapIntegrity	"Make certain that the items on the disabled-global-flap list are actually global flaps, and if not, get rid of them.  Also, old (and damaging) parameters that held references to actual disabled flaps are cleansed"	| disabledFlapIDs currentGlobalIDs oldList |	Smalltalk isMorphic ifTrue:		[disabledFlapIDs _ self parameterAt: #disabledGlobalFlapIDs ifAbsent: [Set new].		currentGlobalIDs _ Flaps globalFlapTabsIfAny collect: [:f | f flapID].		oldList _ Project current projectParameterAt: #disabledGlobalFlaps ifAbsent: [nil].		oldList ifNotNil:			[disabledFlapIDs _ oldList collect: [:aFlap | aFlap flapID].			disabledFlapIDs addAll: #('Scripting' 'Stack Tools' 'Painting')].		disabledFlapIDs _ disabledFlapIDs select: [:anID | currentGlobalIDs includes: anID].		self projectParameterAt: #disabledGlobalFlapIDs put: disabledFlapIDs asSet].	projectParameters ifNotNil:		[projectParameters removeKey: #disabledGlobalFlaps ifAbsent: []].! !!RandomNumberTile methodsFor: 'initialization' stamp: 'sw 7/12/2001 17:54'!initialize	"Initialize the receiver fully, including adding all its relevant submorphs"	| m1 m2 |	super initialize.	self vResizing: #shrinkWrap.	self typeColor: (ScriptingSystem colorForType: #number).	self addArrows.	m1 _ StringMorph contents: 'random' font: ScriptingSystem fontForTiles.	self addMorph: m1.	m2 _ UpdatingStringMorph contents: '180' font: ScriptingSystem fontForTiles.	m2 target: self; getSelector: #literal; putSelector: #literal:.	m2 position: m1 topRight.	self addMorphBack: m2.	literal _ 180.	self updateLiteralLabel.	self makeAllTilesGreen! !!StandardScriptingSystem methodsFor: 'parts bin' stamp: 'sw 7/12/2001 18:13'!anyButtonPressedTiles	"Answer tiles representing the query 'is any button pressed?'"	^ self tilesForQuery: '(Sensor anyButtonPressed)' label: 'button down?'! !!StandardScriptingSystem methodsFor: 'parts bin' stamp: 'sw 7/12/2001 18:12'!noButtonPressedTiles	"Answer tiles representing the query 'is no button pressed?'"	^ self tilesForQuery: '(Sensor noButtonPressed)' label: 'button up?'! !!StandardScriptingSystem methodsFor: 'parts bin' stamp: 'sw 7/3/2001 08:01'!tilesForQuery: expressionString label: aLabel	"Answer scripting tiles that represent the query,"	| aPhrase aTile |	aPhrase _ SystemQueryPhrase new.	aTile _ BooleanTile new.	aTile setExpression: expressionString  label: aLabel.	aPhrase addMorph: aTile.	^ aPhrase! !!Utilities class methodsFor: 'recent method submissions' stamp: 'sw 7/4/2001 12:07'!openRecentSubmissionsBrowser	"Open up a browser on the most recent methods submitted in the image; reuse any existing one found in the world."	self currentWorld openRecentSubmissionsBrowser: nil! !StandardScriptingSystem removeSelector: #tilesForQuery:label:documentation:!RandomNumberTile class removeSelector: #authoringPrototype!PartsBin initialize!!PartsBin class reorganize!('class initialization' initialize)('instance creation' newPartsBinWithOrientation:from:)('thumbnail cache' cacheThumbnail:forSymbol: clearThumbnailCache thumbnailForInstanceOf:)!"Postscript:"Preferences okToReinitializeFlaps ifTrue: [Flaps reinstateDefaultFlaps].!