SelectionMenu subclass: #StandardFileMenu	instanceVariableNames: 'canTypeFileName '	classVariableNames: ''	poolDictionaries: ''	category: 'Interface-FileList'!!StandardFileMenu commentStamp: 'acg 4/15/1999 22:22' prior: 0!I represent a SelectionMenu which operates like a modal dialog for selecting files, somewhat similar to the StandardFile dialogs in MacOS and Java Swing.Try for example, the following:	StandardFileMenu oldFile inspect	StandardFileMenu oldFileStream inspect	StandardFileMenu newFile inspect	StandardFileMenu newFileStream inspect!!StandardFileMenu methodsFor: 'menu building' stamp: 'acg 4/15/1999 01:26'!directoryNamesString: aDirectory"Answer a string concatenating the directory name strings in aDirectory, each string followed by a '[...]' indicator, and followed by a cr."	^String streamContents:		[:s | 			aDirectory directoryNames do: 				[:dn |					s nextPutAll: dn withBlanksTrimmed.					s nextPutAll: ' [...]'; cr]]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'acg 4/15/1999 01:26'!fileNamesString: aDirectory"Answer a string concatenating the file name strings in aDirectory, each string followed by a cr."	^String streamContents:		[:s | 			aDirectory fileNames do: 				[:fn |					s nextPutAll: fn withBlanksTrimmed; cr]]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'acg 4/15/1999 22:29'!makeFileMenuFor: aDirectory"Initialize an instance of me to operate on aDirectory"	| theMenu |	Cursor wait showWhile: 		[self 			labels: 	(self menuLabelsString: aDirectory)			font: 	(MenuStyle fontAt: 1) 			lines: 	(self menuLinesArray: aDirectory).		theMenu _ self selections: (self menuSelectionsArray: aDirectory)].	^theMenu! !!StandardFileMenu methodsFor: 'menu building' stamp: 'acg 4/15/1999 21:57'!menuLabelsString: aDirectory"Answer a menu labels object corresponding to aDirectory"	^ String streamContents: 		[:s | 			canTypeFileName ifTrue: 				[s nextPutAll: 'Enter File Name...'; cr].			s nextPutAll: (self pathPartsString: aDirectory).			s nextPutAll: (self directoryNamesString: aDirectory).			s nextPutAll: (self fileNamesString: aDirectory).			s skip: -1]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'acg 4/15/1999 21:59'!menuLinesArray: aDirectory"Answer a menu lines object corresponding to aDirectory"	| typeCount |	typeCount _ canTypeFileName 		ifTrue: [1] 		ifFalse: [0].	^Array streamContents: [:s |		canTypeFileName ifTrue: [s nextPut: 1].		s nextPut: aDirectory pathParts size + typeCount + 1.		s nextPut: aDirectory pathParts size + 					aDirectory directoryNames size +						typeCount + 1]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'acg 4/15/1999 22:01'!menuSelectionsArray: aDirectory"Answer a menu selections object corresponding to aDirectory.  The object is an array corresponding to each item, each element itself constituting a two-element array, the first element of which contains a selector to operate on and the second element of which contains the parameters for that selector."	|dirSize|	dirSize _ aDirectory pathParts size.	^Array streamContents: [:s |		canTypeFileName ifTrue:			[s nextPut: (StandardFileMenuResult				directory: aDirectory				name: nil)].		s nextPut: (StandardFileMenuResult			directory: (FileDirectory root)			name: '').		aDirectory pathParts doWithIndex: 			[:d :i |				s nextPut: (StandardFileMenuResult					directory: (self 						advance: dirSize - i						containingDirectoriesFrom: aDirectory)					name: '')].		aDirectory directoryNames do: 			[:dn | 				s nextPut: (StandardFileMenuResult					directory: (FileDirectory on: (aDirectory fullNameFor: dn))					name: '')].		aDirectory fileNames do: 			[:fn | 				s nextPut: (StandardFileMenuResult					directory: aDirectory					name: fn)]]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'acg 4/15/1999 21:03'!pathPartsString: aDirectory"Answer a string concatenating the path parts strings in aDirectory, each string followed by a cr."	^String streamContents:		[:s | 			s nextPutAll: '[]'; cr.			aDirectory pathParts asArray doWithIndex: 				[:part :i |					s next: i put: $ .					s nextPutAll: part withBlanksTrimmed; cr]]! !!StandardFileMenu methodsFor: 'basic control sequences' stamp: 'acg 4/15/1999 21:52'!confirmExistingFiles: aResult	|choice|	(aResult directory fileExists: aResult name) ifFalse: [^aResult].		choice _ (PopUpMenu		labels:'overwrite that filechoose another namecancel')		startUpWithCaption: aResult name, 'already exists.'.	choice = 1 ifTrue: [		aResult directory 			deleteFileNamed: aResult name			ifAbsent: 				[^self startUpWithCaption: 'Can''t delete ', aResult name, 'Select another file'].		^aResult].	choice = 2 ifTrue: [^self startUpWithCaption: 'Select Another File'].	^nil ! !!StandardFileMenu methodsFor: 'basic control sequences' stamp: 'acg 4/15/1999 22:32'!getTypedFileName: aResult	| name |	name _ FillInTheBlank 		request: 'Enter a new file name' 		initialAnswer: ''.	name = '' ifTrue: [^self startUpWithCaption: 'Select a File:'].	name _ aResult directory fullNameFor: name.	^ StandardFileMenuResult			directory: (FileDirectory forFileName: name)			name: (FileDirectory localNameFor: name)! !!StandardFileMenu methodsFor: 'basic control sequences' stamp: 'acg 4/15/1999 22:33'!startUpWithCaption: aString at: location	|result|	result _ super startUpWithCaption: aString at: location.	result ifNil: [^nil].	result isDirectory ifTrue:		[self makeFileMenuFor: result directory.		^self startUpWithCaption: aString at: location].	result isCommand ifTrue: 		[result _ self getTypedFileName: result.		result ifNil: [^nil]].	canTypeFileName ifTrue: [^self confirmExistingFiles: result].	^result	! !!StandardFileMenu methodsFor: 'private' stamp: 'acg 4/15/1999 00:32'!advance: anInteger containingDirectoriesFrom: aDirectory	| theDirectory |	theDirectory _ aDirectory.	1 to: anInteger do: [:i | theDirectory _ theDirectory containingDirectory].	^theDirectory! !!StandardFileMenu methodsFor: 'private' stamp: 'acg 4/15/1999 20:50'!computeLabelParagraph	"Answer a Paragraph containing this menu's labels, one per line and centered."	^ Paragraph withText: labelString asText style: (MenuStyle leftFlush)! !!StandardFileMenu methodsFor: 'private' stamp: 'acg 4/15/1999 22:03'!newFileFrom: aDirectory	canTypeFileName _ true.	^self makeFileMenuFor: aDirectory! !!StandardFileMenu methodsFor: 'private' stamp: 'acg 4/15/1999 22:03'!oldFileFrom: aDirectory	canTypeFileName _ false.	^self makeFileMenuFor: aDirectory! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StandardFileMenu class	instanceVariableNames: ''!!StandardFileMenu class methodsFor: 'instance creation' stamp: 'acg 4/15/1999 22:06'!newFileMenu: aDirectory	^super new newFileFrom: aDirectory! !!StandardFileMenu class methodsFor: 'instance creation' stamp: 'acg 4/15/1999 00:41'!oldFileMenu: aDirectory	^super new oldFileFrom: aDirectory! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/15/1999 22:07'!newFile	^StandardFileMenu newFileFrom: (FileDirectory default)! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/15/1999 22:07'!newFileFrom: aDirectory	^(self newFileMenu: aDirectory)		startUpWithCaption: 'Select a File:'! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/15/1999 22:18'!newFileStream	^self newFileStreamFrom: (FileDirectory default)! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/15/1999 22:18'!newFileStreamFrom: aDirectory	| sfmResult fileStream |	sfmResult _ StandardFileMenu newFileFrom: aDirectory.	sfmResult ifNil: [^nil].	fileStream _ sfmResult directory newFileNamed: sfmResult name.	[fileStream isNil] whileTrue:		[sfmResult _ StandardFileMenu newFileFrom: aDirectory.		sfmResult ifNil: [^nil].		fileStream _ sfmResult directory newFileNamed: sfmResult name].	^fileStream! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/14/1999 23:36'!oldFile	^StandardFileMenu oldFileFrom: (FileDirectory default)! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/15/1999 00:50'!oldFileFrom: aDirectory	^(self oldFileMenu: aDirectory)		startUpWithCaption: 'Select a File:'! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/15/1999 22:17'!oldFileStream	^self oldFileStreamFrom: (FileDirectory default)! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'acg 4/15/1999 22:17'!oldFileStreamFrom: aDirectory	| sfmResult fileStream |	sfmResult _ StandardFileMenu oldFileFrom: aDirectory.	sfmResult ifNil: [^nil].	fileStream _ sfmResult directory oldFileNamed: sfmResult name.	[fileStream isNil] whileTrue:		[sfmResult _ StandardFileMenu oldFileFrom: aDirectory.		sfmResult ifNil: [^nil].		fileStream _ sfmResult directory oldFileNamed: sfmResult name].	^fileStream! !Object subclass: #StandardFileMenuResult	instanceVariableNames: 'directory name '	classVariableNames: ''	poolDictionaries: ''	category: 'Interface-FileList'!!StandardFileMenuResult methodsFor: 'accessing' stamp: 'acg 4/15/1999 08:43'!directory	^directory! !!StandardFileMenuResult methodsFor: 'accessing' stamp: 'acg 4/15/1999 08:43'!directory: aDirectory	^directory _ aDirectory! !!StandardFileMenuResult methodsFor: 'accessing' stamp: 'acg 4/15/1999 08:43'!name	^name! !!StandardFileMenuResult methodsFor: 'accessing' stamp: 'acg 4/15/1999 08:43'!name: aString	^name _ aString! !!StandardFileMenuResult methodsFor: 'testing' stamp: 'acg 4/15/1999 09:05'!isCommand	^name isNil! !!StandardFileMenuResult methodsFor: 'testing' stamp: 'acg 4/15/1999 20:57'!isDirectory	^name = ''! !!StandardFileMenuResult methodsFor: 'private' stamp: 'acg 4/15/1999 08:42'!directory: aDirectory name: aString	directory _ aDirectory.	name _ aString.	^self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StandardFileMenuResult class	instanceVariableNames: ''!!StandardFileMenuResult class methodsFor: 'instance creation' stamp: 'acg 4/15/1999 08:42'!directory: aDirectory name: aString	^super new directory: aDirectory name: aString! !