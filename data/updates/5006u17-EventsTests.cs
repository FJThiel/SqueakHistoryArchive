'From Squeak3.1alpha of 7 March 2001 [latest update: #4347] on 2 October 2001 at 7:37:08 am'!"Change Set:		Tests-EventManagerDate:			19 February 2001Author:			Andres ValloudPublihed to 3.3a as 4757EventsTests.cs.Tests for Events, avec some fixes"!TestCase subclass: #EventManagerTestCase	instanceVariableNames: 'eventSource eventListener succeeded '	classVariableNames: ''	module: #(Squeak Language Core Tests)!TestCase subclass: #EventTestCase	instanceVariableNames: 'eventSource eventListener succeeded '	classVariableNames: ''	module: #(Squeak Language Core Tests)!!EventManagerTestCase methodsFor: 'running' stamp: 'JWS 9/7/2000 17:19'!setUp	super setUp.	eventSource := EventManager new.	eventListener := Bag new.	succeeded := false! !!EventManagerTestCase methodsFor: 'running' stamp: 'jws 11/28/2000 16:25'!tearDown	eventSource releaseActionMap.	eventSource := nil.	eventListener := nil.	super tearDown.! !!EventManagerTestCase methodsFor: 'running-broadcast query' stamp: 'JWS 9/7/2000 17:21'!testMultipleValueSuppliers	eventSource		when: #needsValue		send: #getFalse		to: self.	eventSource		when: #needsValue		send: #getTrue		to: self.	succeeded := eventSource triggerEvent: #needsValue.	self should: [succeeded]! !!EventManagerTestCase methodsFor: 'running-broadcast query' stamp: 'JWS 9/7/2000 17:21'!testMultipleValueSuppliersEventHasArguments	eventSource		when: #needsValue:		send: #getFalse:		to: self.	eventSource		when: #needsValue:		send: #getTrue:		to: self.	succeeded := eventSource triggerEvent: #needsValue: with: 'kolme'.	self should: [succeeded]! !!EventManagerTestCase methodsFor: 'running-broadcast query' stamp: 'JWS 9/7/2000 17:22'!testNoValueSupplier	succeeded := eventSource 		triggerEvent: #needsValue		ifNotHandled: [true].	self should: [succeeded]! !!EventManagerTestCase methodsFor: 'running-broadcast query' stamp: 'JWS 9/7/2000 17:22'!testNoValueSupplierHasArguments	succeeded := eventSource 		triggerEvent: #needsValue:		with: 'nelja'		ifNotHandled: [true].	self should: [succeeded]! !!EventManagerTestCase methodsFor: 'running-broadcast query' stamp: 'jws 11/28/2000 15:52'!testSingleValueSupplier	eventSource		when: #needsValue		send: #getTrue		to: self.	succeeded := eventSource triggerEvent: #needsValue.	self should: [succeeded]! !!EventManagerTestCase methodsFor: 'running-copying' stamp: 'SqR 11/12/2000 19:38'!testCopy	"Ensure that the actionMap is zapped when	you make a copy of anEventManager"	eventSource when: #blah send: #yourself to: eventListener.	self assert: eventSource actionMap keys isEmpty not.	self assert: eventSource copy actionMap keys isEmpty! !!EventManagerTestCase methodsFor: 'running-dependent action' stamp: 'jws 9/7/2000 16:39'!testNoArgumentEvent	eventSource when: #anEvent send: #heardEvent to: self.	eventSource triggerEvent: #anEvent.	self should: [succeeded]! !!EventManagerTestCase methodsFor: 'running-dependent action' stamp: 'JWS 9/7/2000 17:20'!testOneArgumentEvent	eventSource when: #anEvent: send: #add: to: eventListener.	eventSource triggerEvent: #anEvent: with: 9.	self should: [eventListener includes: 9]! !!EventManagerTestCase methodsFor: 'running-dependent action' stamp: 'JWS 9/7/2000 17:20'!testTwoArgumentEvent	eventSource when: #anEvent:info: send: #addArg1:addArg2: to: self.	eventSource triggerEvent: #anEvent:info: withArguments: #( 9 42 ).	self should: [(eventListener includes: 9) and: [eventListener includes: 42]]! !!EventManagerTestCase methodsFor: 'running-dependent action supplied arguments' stamp: 'JWS 9/7/2000 17:20'!testNoArgumentEventDependentSuppliedArgument	eventSource when: #anEvent send: #add: to: eventListener with: 'boundValue'.	eventSource triggerEvent: #anEvent.	self should: [eventListener includes: 'boundValue']! !!EventManagerTestCase methodsFor: 'running-dependent action supplied arguments' stamp: 'JWS 9/7/2000 17:21'!testNoArgumentEventDependentSuppliedArguments	eventSource 		when: #anEvent 		send: #addArg1:addArg2: 		to: self 		withArguments: #('hello' 'world').	eventSource triggerEvent: #anEvent.	self should: [(eventListener includes: 'hello') and: [eventListener includes: 'world']]! !!EventManagerTestCase methodsFor: 'running-dependent value' stamp: 'JWS 9/7/2000 17:21'!testReturnValueWithManyListeners	| value newListener |	newListener := 'busybody'.	eventSource		when: #needsValue		send: #yourself		to: eventListener.	eventSource		when: #needsValue		send: #yourself		to: newListener.	value := eventSource triggerEvent: #needsValue.	self should: [value == newListener]! !!EventManagerTestCase methodsFor: 'running-dependent value' stamp: 'JWS 9/7/2000 17:21'!testReturnValueWithNoListeners	| value |	value := eventSource triggerEvent: #needsValue.	self should: [value == nil]! !!EventManagerTestCase methodsFor: 'running-dependent value' stamp: 'JWS 9/7/2000 17:21'!testReturnValueWithOneListener	| value |	eventSource		when: #needsValue		send: #yourself		to: eventListener.	value := eventSource triggerEvent: #needsValue.	self should: [value == eventListener]! !!EventManagerTestCase methodsFor: 'running-remove actions' stamp: 'SqR 2/19/2001 14:01'!testRemoveActionsForEvent	eventSource		when: #anEvent send: #size to: eventListener;		when: #anEvent send: #getTrue to: self;		when: #anEvent: send: #fizzbin to: self.	eventSource removeActionsForEvent: #anEvent.	self shouldnt: [eventSource hasActionForEvent: #anEvent]! !!EventManagerTestCase methodsFor: 'running-remove actions' stamp: 'SqR 2/19/2001 14:01'!testRemoveActionsTwiceForEvent	eventSource		when: #anEvent send: #size to: eventListener;		when: #anEvent send: #getTrue to: self;		when: #anEvent: send: #fizzbin to: self.	eventSource removeActionsForEvent: #anEvent.	self assert: (eventSource hasActionForEvent: #anEvent) not.	eventSource removeActionsForEvent: #anEvent.	self assert: (eventSource hasActionForEvent: #anEvent) not.! !!EventManagerTestCase methodsFor: 'running-remove actions' stamp: 'SqR 2/19/2001 14:10'!testRemoveActionsWithReceiver	| action |	eventSource		when: #anEvent send: #size to: eventListener;		when: #anEvent send: #getTrue to: self;		when: #anEvent: send: #fizzbin to: self.	eventSource removeActionsWithReceiver: self.	action := eventSource actionForEvent: #anEvent.	self assert: (action respondsTo: #receiver).	self assert: ((action receiver == self) not)! !!EventManagerTestCase methodsFor: 'private' stamp: 'jws 9/7/2000 16:37'!addArg1: arg1addArg2: arg2	eventListener		add: arg1;		add: arg2! !!EventManagerTestCase methodsFor: 'private' stamp: 'JWS 9/7/2000 17:19'!getFalse	^false! !!EventManagerTestCase methodsFor: 'private' stamp: 'JWS 9/7/2000 17:19'!getFalse: anArg	^false! !!EventManagerTestCase methodsFor: 'private' stamp: 'JWS 9/7/2000 17:19'!getTrue	^true! !!EventManagerTestCase methodsFor: 'private' stamp: 'JWS 9/7/2000 17:19'!getTrue: anArg	^true! !!EventManagerTestCase methodsFor: 'private' stamp: 'JWS 9/7/2000 17:20'!heardEvent	succeeded := true! !!EventTestCase methodsFor: 'running' stamp: 'jws 9/7/2000 16:37'!setUp	super setUp.	eventSource := Object new.	eventListener := Bag new.	succeeded := false! !!EventTestCase methodsFor: 'running' stamp: 'jws 11/28/2000 16:25'!tearDown	eventSource releaseActionMap.	eventSource := nil.	eventListener := nil.	super tearDown.! !!EventTestCase methodsFor: 'running-broadcast query' stamp: 'jws 9/7/2000 16:41'!testMultipleValueSuppliers	eventSource		when: #needsValue		send: #getFalse		to: self.	eventSource		when: #needsValue		send: #getTrue		to: self.	succeeded := eventSource triggerEvent: #needsValue.	self should: [succeeded]! !!EventTestCase methodsFor: 'running-broadcast query' stamp: 'jws 9/7/2000 16:41'!testMultipleValueSuppliersEventHasArguments	eventSource		when: #needsValue:		send: #getFalse:		to: self.	eventSource		when: #needsValue:		send: #getTrue:		to: self.	succeeded := eventSource triggerEvent: #needsValue: with: 'kolme'.	self should: [succeeded]! !!EventTestCase methodsFor: 'running-broadcast query' stamp: 'jws 9/7/2000 16:41'!testNoValueSupplier	succeeded := eventSource 		triggerEvent: #needsValue		ifNotHandled: [true].	self should: [succeeded]! !!EventTestCase methodsFor: 'running-broadcast query' stamp: 'jws 9/7/2000 16:41'!testNoValueSupplierHasArguments	succeeded := eventSource 		triggerEvent: #needsValue:		with: 'nelja'		ifNotHandled: [true].	self should: [succeeded]! !!EventTestCase methodsFor: 'running-broadcast query' stamp: 'jws 9/7/2000 16:42'!testSingleValueSupplier	eventSource		when: #needsValue		send: #getTrue		to: self.	succeeded := eventSource triggerEvent: #needsValue.	self should: [succeeded]! !!EventTestCase methodsFor: 'running-dependent action' stamp: 'jws 9/7/2000 16:39'!testNoArgumentEvent	eventSource when: #anEvent send: #heardEvent to: self.	eventSource triggerEvent: #anEvent.	self should: [succeeded]! !!EventTestCase methodsFor: 'running-dependent action' stamp: 'jws 9/7/2000 16:39'!testOneArgumentEvent	eventSource when: #anEvent: send: #add: to: eventListener.	eventSource triggerEvent: #anEvent: with: 9.	self should: [eventListener includes: 9]! !!EventTestCase methodsFor: 'running-dependent action' stamp: 'jws 9/7/2000 16:39'!testTwoArgumentEvent	eventSource when: #anEvent:info: send: #addArg1:addArg2: to: self.	eventSource triggerEvent: #anEvent:info: withArguments: #( 9 42 ).	self should: [(eventListener includes: 9) and: [eventListener includes: 42]]! !!EventTestCase methodsFor: 'running-dependent action supplied arguments' stamp: 'jws 9/7/2000 16:39'!testNoArgumentEventDependentSuppliedArgument	eventSource when: #anEvent send: #add: to: eventListener with: 'boundValue'.	eventSource triggerEvent: #anEvent.	self should: [eventListener includes: 'boundValue']! !!EventTestCase methodsFor: 'running-dependent action supplied arguments' stamp: 'jws 9/7/2000 16:40'!testNoArgumentEventDependentSuppliedArguments	eventSource 		when: #anEvent 		send: #addArg1:addArg2: 		to: self 		withArguments: #('hello' 'world').	eventSource triggerEvent: #anEvent.	self should: [(eventListener includes: 'hello') and: [eventListener includes: 'world']]! !!EventTestCase methodsFor: 'running-dependent value' stamp: 'jws 9/7/2000 16:40'!testReturnValueWithManyListeners	| value newListener |	newListener := 'busybody'.	eventSource		when: #needsValue		send: #yourself		to: eventListener.	eventSource		when: #needsValue		send: #yourself		to: newListener.	value := eventSource triggerEvent: #needsValue.	self should: [value == newListener]! !!EventTestCase methodsFor: 'running-dependent value' stamp: 'jws 9/7/2000 16:40'!testReturnValueWithNoListeners	| value |	value := eventSource triggerEvent: #needsValue.	self should: [value == nil]! !!EventTestCase methodsFor: 'running-dependent value' stamp: 'jws 9/7/2000 16:40'!testReturnValueWithOneListener	| value |	eventSource		when: #needsValue		send: #yourself		to: eventListener.	value := eventSource triggerEvent: #needsValue.	self should: [value == eventListener]! !!EventTestCase methodsFor: 'running-remove actions' stamp: 'SqR 2/19/2001 14:04'!testRemoveActionsForEvent	eventSource		when: #anEvent send: #size to: eventListener;		when: #anEvent send: #getTrue to: self;		when: #anEvent: send: #fizzbin to: self.	eventSource removeActionsForEvent: #anEvent.	self shouldnt: [eventSource hasActionForEvent: #anEvent]! !!EventTestCase methodsFor: 'running-remove actions' stamp: 'SqR 2/19/2001 14:05'!testRemoveActionsTwiceForEvent	eventSource		when: #anEvent send: #size to: eventListener;		when: #anEvent send: #getTrue to: self;		when: #anEvent: send: #fizzbin to: self.	eventSource removeActionsForEvent: #anEvent.	self assert: (eventSource hasActionForEvent: #anEvent) not.	eventSource removeActionsForEvent: #anEvent.	self assert: (eventSource hasActionForEvent: #anEvent) not.! !!EventTestCase methodsFor: 'running-remove actions' stamp: 'SqR 2/19/2001 14:05'!testRemoveActionsWithReceiver	| action |	eventSource		when: #anEvent send: #size to: eventListener;		when: #anEvent send: #getTrue to: self;		when: #anEvent: send: #fizzbin to: self.	eventSource removeActionsWithReceiver: self.	action := eventSource actionForEvent: #anEvent.	self assert: (action respondsTo: #receiver).	self assert: ((action receiver == self) not)! !!EventTestCase methodsFor: 'private' stamp: 'jws 9/7/2000 16:37'!addArg1: arg1addArg2: arg2	eventListener		add: arg1;		add: arg2! !!EventTestCase methodsFor: 'private' stamp: 'jws 9/7/2000 16:37'!getFalse	^false! !!EventTestCase methodsFor: 'private' stamp: 'jws 9/7/2000 16:37'!getFalse: anArg	^false! !!EventTestCase methodsFor: 'private' stamp: 'jws 9/7/2000 16:38'!getTrue	^true! !!EventTestCase methodsFor: 'private' stamp: 'jws 9/7/2000 16:38'!getTrue: anArg	^true! !!EventTestCase methodsFor: 'private' stamp: 'jws 9/7/2000 16:38'!heardEvent	succeeded := true! !!EventTestCase reorganize!('running' setUp tearDown)('running-broadcast query' testMultipleValueSuppliers testMultipleValueSuppliersEventHasArguments testNoValueSupplier testNoValueSupplierHasArguments testSingleValueSupplier)('running-dependent action' testNoArgumentEvent testOneArgumentEvent testTwoArgumentEvent)('running-dependent action supplied arguments' testNoArgumentEventDependentSuppliedArgument testNoArgumentEventDependentSuppliedArguments)('running-dependent value' testReturnValueWithManyListeners testReturnValueWithNoListeners testReturnValueWithOneListener)('running-remove actions' testRemoveActionsForEvent testRemoveActionsTwiceForEvent testRemoveActionsWithReceiver)('private' addArg1:addArg2: getFalse getFalse: getTrue getTrue: heardEvent)!!EventManagerTestCase reorganize!('running' setUp tearDown)('running-broadcast query' testMultipleValueSuppliers testMultipleValueSuppliersEventHasArguments testNoValueSupplier testNoValueSupplierHasArguments testSingleValueSupplier)('running-copying' testCopy)('running-dependent action' testNoArgumentEvent testOneArgumentEvent testTwoArgumentEvent)('running-dependent action supplied arguments' testNoArgumentEventDependentSuppliedArgument testNoArgumentEventDependentSuppliedArguments)('running-dependent value' testReturnValueWithManyListeners testReturnValueWithNoListeners testReturnValueWithOneListener)('running-remove actions' testRemoveActionsForEvent testRemoveActionsTwiceForEvent testRemoveActionsWithReceiver)('private' addArg1:addArg2: getFalse getFalse: getTrue getTrue: heardEvent)!