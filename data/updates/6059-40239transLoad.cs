'From Squeak3.8alpha of ''17 July 2004'' [latest update: #5976] on 12 August 2004 at 8:15:50 pm'!"Change Set:		transLoadDate:			12 August 2004Author:			Michael RuegerRemoves the self changed; calls (moved to the language editor where they belong and added a mechanism for detecting existing external translations."!Object subclass: #NaturalLanguageTranslator	instanceVariableNames: 'id generics contexts '	classVariableNames: 'AllKnownPhrases CachedTranslations Current ExternalTranslations '	poolDictionaries: ''	category: 'System-Localization'!!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'mir 8/11/2004 13:47'!availableLanguageLocaleIDs	"Return the locale ids for the currently available languages.	Meaning those which either internally or externally have translations available."	"NaturalLanguageTranslator availableLanguageLocaleIDs"	^ExternalTranslations ifNil: [ExternalTranslations := self initAvailableExternalLocales]! !!NaturalLanguageTranslator class methodsFor: 'accessing' stamp: 'mir 8/11/2004 11:33'!localeID: id	^self cachedTranslations at: id ifAbsentPut: [self createAndLoadLocaleID: id]! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'mir 8/11/2004 13:38'!initialize	"NaturalLanguageTranslator initialize"	FileList registerFileReader: self.	Smalltalk addToStartUpList: NaturalLanguageTranslator after: FileDirectory.! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'mir 8/11/2004 13:39'!startUp	ExternalTranslations := nil! !!NaturalLanguageTranslator class methodsFor: 'file-services' stamp: 'mir 8/11/2004 10:52'!fileReaderServicesForFile: fullName suffix: suffix 	"Answer the file services associated with given file"	^ (suffix = self translationSuffix) | (suffix = '*')		ifTrue: [{self serviceMergeLanguageTranslations}]		ifFalse: [#()]! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/11/2004 11:35'!createAndLoadLocaleID: localeID	| translator |	translator := self new localeID: localeID.	self loadExternalTranslationsFor: translator.	^translator! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/11/2004 11:59'!directoryForLanguage: isoLanguage country: isoCountry create: createDir	"Try to locate the <prefs>/locale/<language>{/<country>} folder.	If createDir is set, create the path down to country or language, depending on wether it's specified..	Return the directory for country or language depending on specification.	If neither exists, nil"	"NaturalLanguageTranslator directoryForLanguage: 'de' country: nil readOnly: true"	"NaturalLanguageTranslator directoryForLanguage: 'de' country: 'DE' readOnly: true"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: 'US' readOnly: false"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: nil readOnly: true"	"If this fails, there is nothing we can do about it here"	| localeDir  countryDir languageDir |	localeDir := self localeDirCreate: createDir.	localeDir exists		ifFalse: [^nil].	isoCountry ifNil: [		languageDir := localeDir directoryNamed: isoLanguage.		createDir			ifTrue: [languageDir assureExistence].		^languageDir exists			ifTrue: [languageDir]			ifFalse: [nil]].	countryDir := languageDir directoryNamed: isoCountry.	createDir		ifTrue: [countryDir assureExistence].	^countryDir exists		ifTrue: [countryDir]		ifFalse: [nil]! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/11/2004 10:44'!directoryForLocaleID: localeID create: createDir	"Try to locate the <prefs>/locale/<language>{/<country>} folder.	If createDir is set, create the path down to country or language, depending on locale.	Return the directory for country or language depending on locale.	If neither exists, nil"	"NaturalLanguageTranslator directoryForLanguage: 'de' country: nil readOnly: true"	"NaturalLanguageTranslator directoryForLanguage: 'de' country: 'DE' readOnly: true"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: 'US' readOnly: false"	"NaturalLanguageTranslator directoryForLanguage: 'en' country: nil readOnly: true"	^self directoryForLanguage: localeID isoLanguage country: localeID isoCountry create: createDir! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/11/2004 13:36'!initAvailableExternalLocales	| localeDir locales |	locales := OrderedCollection new.	locales add: (LocaleID isoLanguage: 'en').	localeDir := self localeDirCreate: false.	localeDir		ifNil: [^locales].	localeDir directoryNames do: [:langDirName |		((localeDir directoryNamed: langDirName) fileNamesMatching: '*.' , self translationSuffix)			ifNotEmpty: [locales add: (LocaleID isoLanguage: langDirName)]].	^locales! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/11/2004 11:35'!loadExternalTranslationsFor: translator	"Try to load translations from external external files.	The files are located in the <prefs>/locale/<language>{/<country>} folder.	There can be more than one file for each location, so applications can install their own partial translation tables. All files in the specific folder are loaded."	| translationDir |	translationDir := self directoryForLocaleID: translator localeID create: false.	(translationDir fileNamesMatching: '*.' , self translationSuffix)		do: [:fileName | translator loadFromFileNamed: (translationDir fullNameFor: fileName)]! !!NaturalLanguageTranslator class methodsFor: 'private loading' stamp: 'mir 8/11/2004 11:57'!localeDirCreate: createDir	"Try to locate the <prefs>/locale/ folder.	If createDir is set, try to create the path.	If it doesn't exist, return nil"	"If this fails, there is nothing we can do about it here"	| prefDir  localeDir |	prefDir := ExternalSettings assuredPreferenceDirectory.	prefDir exists		ifFalse: [^nil].	localeDir := prefDir directoryNamed: 'locale'.	createDir		ifTrue: [localeDir assureExistence].	^localeDir exists		ifTrue: [localeDir]		ifFalse: [nil]! !!NaturalLanguageTranslator class methodsFor: 'private' stamp: 'mir 8/11/2004 10:52'!translationSuffix	^'translation'! !NaturalLanguageTranslator class removeSelector: #createTranslationFor:!NaturalLanguageTranslator class removeSelector: #directoryForLanguage:country:readOnly:!NaturalLanguageTranslator initialize!NaturalLanguageTranslator class removeSelector: #loadCachedTranslationFor:!NaturalLanguageTranslator class removeSelector: #loadExternalTranslationFor:!NaturalLanguageTranslator class removeSelector: #loadTranslationFor:!Object subclass: #NaturalLanguageTranslator	instanceVariableNames: 'id generics contexts'	classVariableNames: 'AllKnownPhrases CachedTranslations Current ExternalTranslations'	poolDictionaries: ''	category: 'System-Localization'!