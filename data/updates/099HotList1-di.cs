'From Squeak 2.0 of May 22, 1998 on 13 June 1998 at 12:44:33 pm'!"Change Set:		HotList1Date:			13 June 1998Author:			Dan IngallsFixes bug so Project windows again update their label with corres changeSet.Changes ChangeSorter changeSetList so it shows most recent first.Changes changes log menu so it shows most recent first.Adds menu item for opening a single change sorter.Makes windows able to be dragged on first click if in title bar.Reorganizes Project jumpTo so it presents a came-from list, the parent, then all projects.Makes Project enter menu come up centered on first item.Fixes problem with textured backgrounds in project link creation."!!ChangeList class methodsFor: 'public access' stamp: 'di 6/12/1998 16:33'!browseRecentLog    "ChangeList browseRecentLog"	"Prompt with a menu of how far back to go"	| end changesFile banners positions pos chunk i |	changesFile _ (SourceFiles at: 2) readOnlyCopy.	banners _ OrderedCollection new.	positions _ OrderedCollection new.	end _ changesFile size.	pos _ Smalltalk lastQuitLogPosition.	[pos = 0 or: [banners size > 20]] whileFalse:		[changesFile position: pos.		chunk _ changesFile nextChunk.		i _ chunk indexOfSubCollection: 'priorSource: ' startingAt: 1.		i > 0 ifTrue: [positions addLast: pos.					banners addLast: (chunk copyFrom: 5 to: i-2).					pos _ Number readFrom: (chunk copyFrom: i+13 to: chunk size)]			ifFalse: [pos _ 0]].	changesFile close.	pos _ (SelectionMenu labelList: banners selections: positions)				startUpWithCaption: 'Browse as far back as...'.	pos == nil ifTrue: [^ self].	self browseRecent: end-pos! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'di 6/12/1998 16:29'!changeSetList	ChangeSet instanceCount > AllChangeSets size ifTrue: [self class gatherChangeSets].	^ AllChangeSets reversed collect: [:each | each name]! !!HandMorph methodsFor: 'meta menu' stamp: 'di 6/13/1998 11:04'!buildWorldMenu	"Build the meta menu for the world."	| menu subMenu |	menu _ MenuMorph new defaultTarget: self.	menu addStayUpItem.	menu add: 'go back' target: owner action: #goBack.	menu add: 'jump to...'		subMenu: (Project buildJumpToMenu: (MenuMorph new defaultTarget: Project)).	menu addLine.	menu add: 'paste morph' action: #pasteMorph.	menu add: 'new morph...' action: #newMorph.	World ifNotNil: [		subMenu _ MenuMorph new defaultTarget: self.		subMenu add: 'workspace' action: #openWorkspace.		subMenu add: 'browser' action: #openBrowser.		subMenu add: 'recent changes' action: #openRecentChanges.		subMenu add: 'change sorter' selector: #openChangeSorter: argument: 1.		subMenu add: 'dual sorter' selector: #openChangeSorter: argument: 2.		subMenu add: 'changes log' action: #openChangesLog.		subMenu add: 'file list' action: #openFileList.		subMenu add: 'transcript' action: #openTranscript.		subMenu add: 'project (mvc)' action: #openMVCProject.		subMenu add: 'project (morphic)' action: #openMorphicProject.		subMenu add: 'project link...' action: #projectThumbnail.		subMenu addLine.		subMenu add: 'collapse all' action: #collapseAll.		subMenu add: 'expand all' action: #expandAll.		subMenu add: 'find window' action: #findWindow.		menu add: 'windows...' subMenu: subMenu].	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'grab drawing from screen' action: #grabDrawingFromScreen.	subMenu add: 'read drawing from file' action: #importImageFromDisk.	subMenu add: 'make new drawing' target: self presenter associatedMorph action: #makeNewDrawingWithin.	menu add: 'graphics...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'add slot to model' action: #newVariable.	subMenu add: 'write init method for model' action: #writeInitMethodForModel.	subMenu add: 'grab model for this world' action: #grabModel.	menu add: 'model...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'set display depth...' action: #setDisplayDepth.	subMenu add: 'change background color' action: #changeBackgroundColor.	subMenu add: 'use texture background' target: self world action: #setStandardTexture.	subMenu add: 'unlock contents' action: #unlockWorldContents.	subMenu add: 'unhide hidden objects' action: #showHiders.	subMenu add: 'round up stray objects' action: #roundUpStrayObjects.	gridOn		ifTrue: [subMenu add: 'turn gridding off' action: #setGridding]		ifFalse: [subMenu add: 'turn gridding on' action: #setGridding].	menu add: 'options...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'update code from server' action: #updateFromServer.	subMenu addLine.	subMenu add: 'local host address' action: #reportLocalAddress.	subMenu add: 'connect remote user' action: #connectRemoteUser.	subMenu add: 'disconnect remote user' action: #disconnectRemoteUser.	subMenu add: 'disconnect all remote users' action: #disconnectAllRemoteUsers.	menu add: 'remote...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'read drawing from file' action: #importImageFromDisk.	subMenu add: 'save world in file' action: #saveWorldInFile.	subMenu add: 'read morph(s) from file' action: #readMorphFile.	menu add: 'file...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self world.	subMenu add: 'add stop, step, & go buttons' target: self world presenter action: #addStopStepGoButtons.	subMenu add: 'add scripting knobs' target: self presenter action: #addStandardControls.	subMenu add: 'remove scripting knobs' target: self world action: #removeScriptingControls.	subMenu addLine.	subMenu add: 'parts bin' target: self presenter action: #createStandardPartsBin.	subMenu add: 'control panel' target: self presenter action: #createControlPanel.	menu add: 'scripting...' subMenu: subMenu.	menu add: 'do...' target: Utilities action: #offerCommonRequests.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'inspect world' action: #inspectWorld.	subMenu add: 'inspect model' action: #inspectWorldModel.	subMenu add: 'clear palette area' action: #clearPaletteArea.	subMenu add: 'flush viewer cache' action: #flushViewerCache.	subMenu add: 'full screen' action: #fullScreen.	subMenu add: 'start MessageTally' action: #startMessageTally.	subMenu add: 'call #tempCommand' action: #callTempCommand.	subMenu add: 'show space left' action: #showSpaceLeft.	menu add: 'debug...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'save' action: #saveSession.	subMenu add: 'save as...' action: #saveAs.	subMenu add: 'save and quit' action: #saveAndQuit.	subMenu add: 'quit...' action: #quitSession.	menu add: 'save / quit...' subMenu: subMenu.	^ menu! !!HandMorph methodsFor: 'meta menu' stamp: 'di 6/12/1998 15:29'!openChangeSorter: oneOrTwo	oneOrTwo = 1		ifTrue: [ChangeSorter new open]		ifFalse: [DualChangeSorter new open]! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'di 6/13/1998 12:06'!invokeAt: aPoint in: aWorld	"Add this menu to the given world centered at the given point. Wait for the user to make a selection and answer it. The selection value returned is an integer in keeping with PopUpMenu, if the menu is converted from an MVC-style menu."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	| h firstItemIndex yOffset |	h _ aWorld activeHand.	h ifNil: [h _ aWorld hands first].	firstItemIndex _ self submorphs findFirst: [:m | m isKindOf: MenuItemMorph].	firstItemIndex = 0		ifTrue: [yOffset _ 10]		ifFalse: [yOffset _ (self submorphs at: firstItemIndex) top - self top + 10].	self popUpAt: aPoint - (0@yOffset) forHand: h.	done _ false.	[self isInWorld & done not] whileTrue: [aWorld doOneCycle].	self delete.	^ selectedItem! !!Project methodsFor: 'initialization' stamp: 'di 6/12/1998 15:58'!windowReqNewLabel: newLabel	newLabel isEmpty ifTrue: [^ false].	newLabel = changeSet name ifTrue: [^ true].	(ChangeSorter changeSetNamed: newLabel) == nil		ifFalse: [self inform: 'Sorry that name is already used'.				^ false].	changeSet name: newLabel.	^ true! !!Project class methodsFor: 'utilities' stamp: 'di 6/13/1998 11:29'!addItem: item toMenu: menu selection: action	(menu isKindOf: MenuMorph)		ifTrue: [menu add: item selector: #jumpToSelection: argument: action]		ifFalse: [menu add: item action: action]! !!Project class methodsFor: 'utilities' stamp: 'di 6/13/1998 11:28'!buildJumpToMenu: menu	"Present a list of potential projects."	"Time millisecondsToRun: [Project jumpToMenu]"	| prev |	"First a FIFO list"	(prev _ CurrentProject previousProject) ifNotNil:		[1 to: 5 do:			[:i | 			prev ifNotNil: 				[self addItem: prev name , ' (back ' , i printString , ')'					toMenu: menu selection: '%back' , i printString.				prev _ prev previousProject]].		menu addLine].	"Then the parent"	CurrentProject isTopProject ifFalse: [		self addItem: CurrentProject parent name , ' (parent)' toMenu: menu selection: #parent.		menu addLine].	"Finally all the projects"	Project allNames do: [:n | self addItem: n toMenu: menu selection: n].	^ menu! !!Project class methodsFor: 'utilities' stamp: 'di 6/13/1998 11:24'!jumpToProject		"Project jumpToProject"	"Present a list of potential projects and enter the one selected."	self jumpToSelection: (self buildJumpToMenu: CustomMenu new) startUp! !!Project class methodsFor: 'utilities' stamp: 'di 6/13/1998 11:03'!jumpToSelection: selection	"Enter the project corresponding to this menu selection."	"Project jumpToProject"	| nBack prev |	selection ifNil: [^ self].	(selection beginsWith: '%back') ifTrue:		[nBack _ (selection copyFrom: 6 to: selection size) asNumber.		prev _ CurrentProject previousProject.		1 to: nBack-1 do:			[:i | prev ifNotNil: [prev _ prev previousProject]].		prev ifNotNil: [prev enter: true]].	selection = #parent ifTrue: [CurrentProject parent enter: false. ^ self].	(Project named: selection) enter: false! !!ProjectViewMorph methodsFor: 'all' stamp: 'di 6/13/1998 12:36'!extent: aPoint	"Set my image form to the given extent."	| newExtent scaleP scale |	((bounds extent = aPoint) and:	 [image depth = Display depth]) ifFalse: [		lastProjectThumbnail			ifNil: [newExtent _ aPoint]			ifNotNil: [				scaleP _ aPoint / lastProjectThumbnail extent.				scale _ scaleP "scaleP x asFloat max: scaleP y asFloat".				newExtent _ (lastProjectThumbnail extent * scale) rounded].		self image: (Form extent: newExtent depth: Display depth).		lastProjectThumbnail _ nil].! !!ProjectViewMorph methodsFor: 'all' stamp: 'di 6/13/1998 11:46'!mouseDown: evt	"Quick hack: use old-fashioned menu."	| menu selection |	menu _ CustomMenu new		add: 'enter' action: #enter;		add: 'jump to project...' action: #jumpToProject.	selection _ (menu build preSelect: #enter) startUpCenteredWithCaption: nil.	selection = #enter ifTrue: [^ self enter].	selection = #jumpToProject ifTrue: [Project jumpToProject. ^ self].! !!SystemWindow methodsFor: 'top window' stamp: 'di 6/12/1998 16:49'!handlesMouseDown: evt	"If I am not the topWindow, then my mouseDown action dominates"	self == TopWindow ifFalse:		["If I'm not on top..."		(self panelRect containsPoint: evt cursorPoint) ifFalse:			["If I've been clicked in my title bar..."			self activate.	"bring me to the top"			^ false			"and let me be picked up"].		^ self activeOnlyOnTop].	^ false! !HandMorph removeSelector: #openChangeSorter!Project class removeSelector: #jumpToMenu!Project class removeSelector: #addItem:toMenu:action:!ProjectViewMorph removeSelector: #updateImage!