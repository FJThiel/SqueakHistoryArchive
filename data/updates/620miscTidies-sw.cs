'From Squeak 2.3 of January 14, 1999 on 28 January 1999 at 5:52:54 pm'!"Change Set:		miscTidies-swDate:			28 January 1999Author:			Scott WallaceA potpourri of cleanups, including:*	Allows the hitting of the 'toss' button on a PaintBox to remove the paintbox itself if not currently painting, rather than putting up a puzzling 'you are not currently painting' message.  This provides a convenient way of dismissing the paintbox.*	Made Player.wearCostumeOfClass: work even when the morph is flexed.*	Readouts for string-valued tiles now can be growable.*	ParagraphEditor evaluateSelection can now work with any kind of model that responds to #doItReceiver, rather than just with models that inherit from class Model.*	Several improvements to wording in menus.*	Bulletproof against errors when referring to halo for a morph not in world."!!HandMorph methodsFor: 'world menu commands' stamp: 'sw 1/4/1999 14:45'!deleteNonWindows	(SelectionMenu confirm:'Do you really want to discard all objectsthat are not in windows?')		ifFalse: [^ self].	self world submorphs do:		[:m | (m isKindOf: SystemWindow) ifFalse: [m delete]]! !!MenuMorph methodsFor: 'menu' stamp: 'sw 12/3/1998 16:06'!toggleStayUp: evt	"Toggle my 'stayUp' flag and adjust the menu item to reflect its new state."	stayUp _ stayUp not.	self items do: [:item |		item selector = #toggleStayUp: ifTrue:			[stayUp				ifTrue: [item contents: 'dismiss this menu']				ifFalse: [item contents: 'keep this menu up']]].	stayUp ifFalse: [self delete].! !!PaintBoxMorph methodsFor: 'actions' stamp: 'sw 1/6/1999 09:06'!toss: cancelButton with: cancelSelector	"Reject the painting.  Showing noPalette is done by the block submitted to the SketchEditorMorph"	| aSketchEditor |	owner ifNil: ["it happens"  ^ self].	(aSketchEditor _ self world findA: SketchEditorMorph) 		ifNotNil: [aSketchEditor cancel]		ifNil:			[self delete].	cancelButton state: #off.! !!ParagraphEditor methodsFor: 'do-its' stamp: 'sw 12/24/1998 12:42'!evaluateSelection	"Treat the current selection as an expression; evaluate it and return the result"	| result rcvr ctxt |	self lineSelectAndEmptyCheck: [^ ''].	(model respondsTo: #doItReceiver) 		ifTrue: [FakeClassPool adopt: model selectedClass.  "Include model pool vars if any"				rcvr _ model doItReceiver.				ctxt _ model doItContext]		ifFalse: [rcvr _ ctxt _ nil].	result _ rcvr class evaluatorClass new evaluate: self selectionAsStream				in: ctxt to: rcvr notifying: self				ifFail: [FakeClassPool adopt: nil.						^ #failedDoit].	FakeClassPool adopt: nil.	Smalltalk logChange: self selection string.	^ result! !!Player methodsFor: 'costume' stamp: 'sw 12/3/1998 10:05'!wearCostumeOfClass: aClass	"Assume that the costume in the library has player = nil"	| newCostume |	(costume renderedMorph isKindOf: aClass) ifTrue: [^ self].	costumes ifNotNil:		[costumes do:			[:aCostume | (aCostume class  == aClass)				ifTrue:					[^ self renderedCostume: aCostume]]].	newCostume _ aClass new.	self renderedCostume: newCostume! !!SketchEditorMorph methodsFor: 'start & finish' stamp: 'sw 12/3/1998 15:36'!cancelOutOfPainting	self delete.	dimForm ifNotNil: [dimForm delete].	emptyPicBlock ifNotNil: [emptyPicBlock value].	"note no args to block!!"	hostView ifNotNil: [hostView changed].	^ nil! !!SketchEditorMorph methodsFor: 'start & finish' stamp: 'sw 12/3/1998 15:35'!deliverPainting: result	"Done painting.  May come from resume, or from original call.  Execute user's post painting instructions in the block.  Always use this standard one.  4/21/97 tk"	| newBox newForm |	action == #areaFill: ifTrue: [palette setCurrentBrush: palette brush3a].	palette ifNotNil: "nil happens" [palette setAction: #paint:].	"Get out of odd modes"	"rot _ palette getRotations."	"rotate with heading, or turn to and fro"	"palette setRotation: #normal."	result == #cancel ifTrue: [^ self cancelOutOfPainting].	"for Morphic"	"hostView rotationStyle: rot."		"rotate with heading, or turn to and fro"	newBox _ paintingForm innerPixelRectFor: 0 orNot: true.	registrationPoint ifNotNil:		[registrationPoint _ registrationPoint - newBox origin]. "relative to newForm origin"	newForm _ 	Form extent: newBox extent depth: paintingForm depth.	newForm copyBits: newBox from: paintingForm at: 0@0 		clippingBox: newForm boundingBox rule: Form over fillColor: nil.	newForm isAllWhite ifTrue: [		(self valueOfProperty: #background) == true 			ifFalse: [^ self cancelOutOfPainting]].	self delete.	"so won't find me again"	dimForm delete.	newPicBlock value: newForm value: (newBox copy translateBy: bounds origin).! !