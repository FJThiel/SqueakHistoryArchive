'From Squeak 2.1 of June 30, 1998 on 19 July 1998'!"Change Set:		paintBoxPosition-swDate:			19 July 1998Author:			Scott WallaceA variety of improvements, mostly centered around the invocation of painting, both under script control and via the 'paint-invoking morph'.*  Positions painting palette relative to the topright corner of the corresponding detachable pasteup.*  Clears palette before initiating painting.*  Does a better job of repositioning objects which are designated as 'adhering to an edge' after page turns and tab choices*  Makes it possible to get a Paint-Invoking morph from the new morph menu and put it into a pasteup, whereupon, when the latter is made into a parts bin, it acquires its paint-invoking behavior."!!Morph methodsFor: 'menu' stamp: 'sw 7/15/1998 21:16'!adhereToEdge: edgeSymbol	(owner == nil or: [owner isHandMorph]) ifTrue: [^ self].	self perform: (edgeSymbol, ':') asSymbol withArguments: (Array with: (owner bounds perform: edgeSymbol))! !!Morph methodsFor: 'change reporting' stamp: 'sw 7/8/1998 13:21'!ownerChanged	"The receiver's owner, some kind of a pasteup, has changed its layout."	self snapToEdgeIfAppropriate! !!Morph methodsFor: 'jun98 additions' stamp: 'sw 7/15/1998 21:05'!snapToEdgeIfAppropriate	| edgeSymbol oldBounds aWorld |	(edgeSymbol _ self valueOfProperty: #edgeToAdhereTo) ifNotNil:		[oldBounds _ bounds.		self adhereToEdge: edgeSymbol.		bounds ~= oldBounds ifTrue: [(aWorld _ self world) viewBox ifNotNil:			[aWorld displayWorld]]]! !!BookMorph methodsFor: 'navigation' stamp: 'sw 7/15/1998 21:07'!goToPage: pageNumber	| pageIndex  oldOrigin aWorld oldRect oldPageNumber ascending newPage |	pages isEmpty ifTrue: [^ self].	pageIndex _ pageNumber asInteger.	pageNumber < 1 ifTrue: [pageIndex _ pages size].	pageNumber > pages size ifTrue: [pageIndex _ 1].	newPage _ pages at: pageIndex.	oldPageNumber _ pages indexOf: currentPage ifAbsent: [nil].	ascending _ ((oldPageNumber == nil) or: [newPage == currentPage])			ifTrue:				[nil]			ifFalse:				[oldPageNumber < pageIndex].	(aWorld _ self world) ifNotNil:		[self primaryHand newKeyboardFocus: nil].	currentPage ifNotNil:		[(oldRect _ currentPage screenRectangle) ifNotNil:			[oldOrigin _ oldRect origin].		self currentPlayerDo: [:aPlayer | aPlayer runAllClosingScripts].		currentPage releaseCachedState; delete].	currentPage _ pages at: pageIndex.	self addMorphBack: currentPage.	self snapToEdgeIfAppropriate.	aWorld ifNotNil:		[self world startSteppingSubmorphsOf: currentPage.		self showPageTurningFeedbackFromOrigin: oldOrigin ascending: ascending].	self currentPlayerDo:		[:aPlayer | aPlayer runAllOpeningScripts].	(aWorld _ self world) ifNotNil: ["Nil at init time, for example" aWorld displayWorld]! !!HandMorph methodsFor: 'from EToyHand' stamp: 'sw 7/8/1998 12:57'!makeNewDrawingInBounds: rect pasteUpMorph: aPasteUpMorph	| w newSketch newPlayer sketchEditor p aPaintBox |	w _ aPasteUpMorph world.	w stopRunningAll; abandonAllHalos.	newSketch _ self drawingClass new costumee: (newPlayer _ Player newUserInstance).	newPlayer costume: newSketch.	newSketch form: (Form extent: rect extent depth: w assuredCanvas depth).	newSketch bounds: rect.	sketchEditor _ SketchEditorMorph new.	w addMorphFront: sketchEditor.	sketchEditor initializeFor: newSketch inBounds: rect pasteUpMorph: aPasteUpMorph.	sketchEditor		afterNewPicDo: [:aForm :aRect |			newSketch form: aForm.			newSketch position: aRect origin.			newSketch forwardDirection: sketchEditor forwardDirection.			newSketch rotationDegrees: sketchEditor forwardDirection.			newSketch rotationStyle: sketchEditor rotationStyle.			aPasteUpMorph addMorphFront: newSketch.			w startSteppingSubmorphsOf: newSketch.			self presenter drawingJustCompleted: newSketch]		 ifNoBits:			[(aPaintBox _ self world paintBox) ifNotNil:				[aPaintBox delete].			p _ aPasteUpMorph standardPalette.			p ifNotNil: [p showNoPalette]]! !!PaintInvokingMorph methodsFor: 'all' stamp: 'sw 7/16/1998 00:02'!initialize	super initialize.	self image: (ScriptingSystem formAtKey: 'Painting')! !!PaintInvokingMorph methodsFor: 'all' stamp: 'sw 7/15/1998 21:25'!justDroppedInto: aPasteUpMorph event: anEvent	"This message is sent to a dropped morph after it has been dropped on--and been accepted by--a drop-sensitive morph"	(self hasProperty: #partsDonor) ifFalse: [^ self].	aPasteUpMorph isPlayfieldLike ifFalse: [self beep.  ^ self].	self delete.	anEvent hand makeNewDrawingInBounds: (aPasteUpMorph paintingBoundsAround: anEvent cursorPoint) pasteUpMorph: aPasteUpMorph! !!PaintInvokingMorph class methodsFor: 'all' stamp: 'sw 7/15/1998 21:24'!authoringPrototype	^ self new image: (ScriptingSystem formAtKey: 'Painting'); markAsPartsDonor; yourself! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 7/15/1998 19:44'!standardPaletteIsAlready: aPalette	^ standardPalette == aPalette! !!Presenter methodsFor: 'misc' stamp: 'sw 7/8/1998 13:04'!drawingJustCompleted: aSketchMorph	| pal aPaintBox |	(aPaintBox _ associatedMorph world paintBox) ifNotNil:		[aPaintBox delete].	(aSketchMorph pasteUpMorph hasProperty: #automaticViewing)		ifTrue:			[(pal _ aSketchMorph standardPalette) ifNotNil:				[pal viewMorph: aSketchMorph]]! !!SketchEditorMorph methodsFor: 'initialization' stamp: 'sw 7/8/1998 13:35'!initializeFor: aSketchMorph inBounds: boundsToUse pasteUpMorph: aPasteUpMorph	| w aPaintBox aPal  aPosition |	(w _ aPasteUpMorph world) addMorphFront: self.	aPaintBox _ w paintBox.	(aPal _ aPasteUpMorph standardPalette)		ifNotNil:			[aPal showNoPalette.			aPosition _ aPal topRight + (aPaintBox width negated @ 0 "aPal tabsMorph height")]		ifNil:			[aPosition _ aPaintBox position].	hostView _ aSketchMorph.  "may be ownerless"	self bounds: boundsToUse.	canvasRectangle _ bounds translateBy: w viewBox origin.	aPaintBox position: aPosition.	palette _  aPaintBox.	palette position: aPosition.	w addMorphFront: aPaintBox.  "bring to front"	paintingForm _ Form extent: bounds extent depth: w assuredCanvas depth.	self dimTheWindow.	aSketchMorph ifNotNil:		[aSketchMorph form			displayOn: paintingForm			at: (hostView boundsInWorld origin - bounds origin)			clippingBox: (0@0 extent: paintingForm extent)			rule: Form over			fillColor: nil.  "assume they are the same depth"		rotationCenter _ aSketchMorph rotationCenter]! !!SketchMorph methodsFor: 'menu' stamp: 'sw 7/8/1998 12:57'!editDrawingIn: aPasteUpMorph forBackground: forBackground	| w oldRotation oldFwdDir bnds sketchEditor |	w _ aPasteUpMorph world.	w stopRunningAll; abandonAllHalos.	w displayWorld.	oldRotation _ rotationDegrees.	oldFwdDir _ self forwardDirection.	self rotationDegrees: 0.	forBackground		ifTrue: [bnds _ aPasteUpMorph boundsInWorld]		ifFalse: [			bnds _ self boundsInWorld.			bnds _ (aPasteUpMorph paintingBoundsAround: bnds center) merge: bnds].	sketchEditor _ SketchEditorMorph new.	forBackground ifTrue: [sketchEditor setProperty: #background toValue: true].	w addMorphFront: sketchEditor.	sketchEditor initializeFor: self inBounds: bnds pasteUpMorph: aPasteUpMorph.	self rotationDegrees: oldRotation.  "restore old rotation so that cancel leaves it right"	sketchEditor		afterNewPicDo: [:aForm :aRect |			self form: aForm.			self topRendererOrSelf position: aRect origin.			self forwardDirection: sketchEditor forwardDirection.			self rotationDegrees: oldRotation + (sketchEditor forwardDirection - oldFwdDir).			self rotationStyle: sketchEditor rotationStyle.			aPasteUpMorph playfield ifNotNil: "Show the right viewer"				[self presenter drawingJustCompleted: self].			forBackground ifTrue: [self goBehind]]  "shouldn't be necessary"		ifNoBits: ["If no bits drawn.  Must keep old pic.  Can't have no picture"			aPasteUpMorph standardPalette ifNotNil:				[aPasteUpMorph standardPalette viewMorph: self]]! !!TabbedPalette methodsFor: 'palette menu' stamp: 'sw 7/15/1998 19:45'!showPaletteMenu	| aMenu evt |	evt _ self primaryHand lastEvent.	aMenu _ MenuMorph new defaultTarget: self.	self currentPalette ifNotNil:		[aMenu add:  'clear' action: #showNoPalette.		aMenu addLine].	aMenu add:  'sort tabs' action: #sortTabs:.	aMenu add:  'choose new colors for tabs' action: #recolorTabs.	(self presenter standardPaletteIsAlready: self) ifFalse:		[aMenu add:  'make me the Standard palette' action: #becomeStandardPalette].	aMenu addLine.	self hasViewerTab ifFalse:	[aMenu add:  'add "view" tab' action: #addViewerTab].	self hasScrapsTab ifFalse:	[aMenu add:  'add "scraps" tab' action: #addScrapsTab].	aMenu add: 'add a tab for me to script' action: #addScriptableTab.	aMenu addTitle: 'Palette'.	aMenu popUpAt: self cursorPoint event: evt! !!TabbedPalette methodsFor: 'misc menu items' stamp: 'sw 7/8/1998 13:22'!showNoPalette	| aMenuTab |	currentPage ifNotNil: [currentPage delete].	currentPage _ nil.	(aMenuTab _ tabsMorph submorphWithProperty: #tabsMenu) ifNotNil:		[tabsMorph highlightTab: aMenuTab].	self snapToEdgeIfAppropriate! !!TabbedPalette methodsFor: 'user-interface' stamp: 'sw 7/8/1998 13:27'!selectTab: aTab	| currentPalette |	self currentPalette ifNotNil: [self currentPalette currentPlayerDo:		[:aPlayer | aPlayer runAllClosingScripts]].	tabsMorph selectTab: aTab.	self goToPageMorph: aTab morphToInstall.	(currentPalette _ self currentPalette) ifNotNil:		[currentPalette layoutChanged.		currentPalette currentPlayerDo: [:aPlayer | aPlayer runAllOpeningScripts]].	self snapToEdgeIfAppropriate! !!WorldMorph methodsFor: 'initialization' stamp: 'sw 7/15/1998 21:17'!configureForConstruction	self presenter addTrashCan; standardPlayer.	self addMorph: (self presenter newStandardPartsBin position: 10@10).	self addMorph: (self presenter controlPanel setToAdhereToEdge: #bottomLeft)! !!WorldMorph methodsFor: 'object fileIn' stamp: 'sw 7/15/1998 19:39'!convertbosfcepcbbfgccpmcpbttloiairfidcuwhavcdslp0: varDict bosfcepcbbfgccpmcpbttloiairfidcuwhavcdslpl0: smartRefStrm	"These variables are automatically stored into the new instance ('hands' 'activeHand' 'viewBox' 'canvas' 'damageRecorder' 'stepList' 'lastStepTime' 'playerList' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"Be sure to to fill in ('lastCycleTime' ) and deal with the information in ()"! !!WorldMorph class methodsFor: 'all' stamp: 'sw 7/15/1998 21:10'!openWithStandardPartsBinShowing	"WorldMorph openWithStandardPartsBinShowing"	| aWorld anExtent aPanel |	anExtent _  700 @ 500.	aWorld _ self new setProperty: #initialExtent toValue: anExtent.	aWorld extent: anExtent.	aWorld presenter addTrashCan.	aPanel _ aWorld presenter controlPanel.	aWorld addMorph: aPanel.	aPanel adhereToEdge: #bottomLeft.	aWorld addMorph: ((aWorld presenter newStandardPartsBin) position: 10@10).	MorphWorldView openOn: aWorld label: 'Construction' extent: anExtent! !Presenter removeSelector: #addStandardControls!Presenter removeSelector: #addLowerLeftButtonsTo:!Presenter removeSelector: #addLeftHandButtons!SketchEditorMorph removeSelector: #initializeFor:inBounds:ofWorld:!