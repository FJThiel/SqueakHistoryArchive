'From Squeak3.6beta of ''4 July 2003'' [latest update: #5331] on 7 July 2003 at 11:40:50 am'!"Change Set:		InheritanceDecoratedButton-nkDate:			7 July 2003Author:			Ned KonzThis change set adds to the decorateBrowserButtons behavior.Previously, if the method you are browsing has a definition in the superclass but didn't call it, the button would appear uncolored.This changes that by defining two new colors that indicate when a method has a superclass definition but doesn't call it.Also, it speeds up the color determination by not calling #allImplementorsOf:.v2: Per Scott Wallace's suggestion, adds new color explanations to balloon text."!!CodeHolder methodsFor: 'controls' stamp: 'nk 7/6/2003 08:29'!decorateForInheritance	"Check to see if the currently-viewed method has a super send or an override, and if so, change screen feedback, unless the #decorateBrowserButtons says not to."	| aColor aButton flags |	(aButton _ self inheritanceButton) ifNil: [^ self].	((currentCompiledMethod isKindOf: CompiledMethod) and: [Preferences decorateBrowserButtons])		ifFalse: [^aButton offColor: Color transparent].	"This table duplicates the old logic, but adds two new colors for the cases where there is a superclass definition, but this method doesn't call it."	flags _ 0.	self isThisAnOverride ifTrue: [ flags _ flags bitOr: 4 ].	currentCompiledMethod sendsToSuper ifTrue: [ flags _ flags bitOr: 2 ].	self isThereAnOverride ifTrue: [ flags _ flags bitOr: 1 ].	aColor _ {		Color transparent.		Color tan lighter.		Color green muchLighter.		Color blue muchLighter.		Color red muchLighter.	"has super but doesn't call it"		(Color r: 0.94 g: 0.823 b: 0.673).	"has sub; has super but doesn't call it"		Color green muchLighter.		Color blue muchLighter.	} at: flags + 1.	aButton offColor: aColor! !!CodeHolder methodsFor: 'controls' stamp: 'nk 7/7/2003 11:39'!optionalButtonPairs	"Answer a tuple (formerly pairs) defining buttons, in the format:			button label			selector to send			help message"	| aList |	aList _ #(	('browse'			browseMethodFull			'view this method in a browser')	('senders' 			browseSendersOfMessages	'browse senders of...')	('implementors'		browseMessages				'browse implementors of...')	('versions'			browseVersions				'browse versions')), 	(Preferences decorateBrowserButtons		ifTrue:			[{#('inheritance'		methodHierarchy 'browse method inheritancegreen: sends to supertan: has override(s)mauve: both of the abovepink: is an override but doesn''t call superpinkish tan: has override(s), also is an override but doesn''t call super' )}]		ifFalse:			[{#('inheritance'		methodHierarchy			'browse method inheritance')}]),	#(	('hierarchy'		classHierarchy				'browse class hierarchy')	('inst vars'			browseInstVarRefs			'inst var refs...')	('class vars'			browseClassVarRefs			'class var refs...')).	^ aList! !!CodeHolder methodsFor: 'misc' stamp: 'nk 7/6/2003 07:49'!isThereAnOverride	"Answer whether any subclass of my selected class implements my 	selected selector"	| aName aClass |	aName _ self selectedMessageName				ifNil: [^ false].	aClass _ self selectedClassOrMetaClass.	aClass allSubclassesDo: [ :cls | (cls includesSelector: aName) ifTrue: [ ^true ]].	^ false! !!CodeHolder methodsFor: 'misc' stamp: 'nk 7/6/2003 07:52'!isThisAnOverride	"Answer whether any superclass of my selected class implements my selected selector"	| aName aClass |	aName _ self selectedMessageName				ifNil: [^ false].	aClass _ self selectedClassOrMetaClass.	aClass allSuperclassesDo: [ :cls | (cls includesSelector: aName) ifTrue: [ ^true ]].	^ false! !