'From Squeak2.8alpha of 13 January 2000 [latest update: #1851] on 14 February 2000 at 10:23:59 pm'!"Change Set:		StdFileMenuPattern-tkNFDate:			14 February 2000Author:			Ted KaehlerAdds patterns to Andrew Greenberg's Standard File Menus.  Just as in the pattern pane of a file list, if you specify '*.cs', you will see only the files ending in 'cs' in the menu.  A separate optional message, pattern:, sets the pattern.Project loading logic and tests are removed from FileList and put into ProjectViewMorph."!SelectionMenu subclass: #StandardFileMenu	instanceVariableNames: 'canTypeFileName pattern '	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-FileList'!!FileList methodsFor: 'file list menu' stamp: 'tk 2/14/2000 22:23'!itemsForFileEnding: suffix	| labels lines selectors |	labels _ OrderedCollection new.	lines _ OrderedCollection new.	selectors _ OrderedCollection new.	(suffix = 'bmp') | (suffix = 'gif') | (suffix = 'jpg') | (suffix = 'form') | (suffix = '*') ifTrue:		[labels addAll: #('open image in a window' 'read image into ImageImports'						 'open image as background').		selectors addAll: #(openImageInWindow importImage openAsBackground)].	(suffix = 'morph') | (suffix = 'morphs') | (suffix = 'sp') | (suffix = '*') ifTrue:		[labels add: 'load as morph'.		selectors add: #openMorphFromFile.		labels add: 'load as project'.		selectors add: #openProjectFromFile].	(suffix = 'extseg') | (suffix = 'project') ifTrue:		[labels add: 'load as project'.		selectors add: #openProjectFromFile].	(suffix = 'bo') | (suffix = '*') ifTrue:[		labels add: 'load as book'.		selectors add: #openBookFromFile].	(suffix = 'mid') | (suffix = '*') ifTrue:		[labels add: 'play midi file'.		selectors add: #playMidiFile].	(suffix = 'movie') | (suffix = '*') ifTrue:		[labels add: 'open as movie'.		selectors add: #openAsMovie].	(suffix = 'st') | (suffix = 'cs') | (suffix = '*') ifTrue:		[suffix = '*' ifTrue: [lines add: labels size].		labels addAll: #('fileIn' 'file into new change set' 'browse changes' 'browse code' 'remove line feeds' 'broadcast as update').		lines add: labels size - 1.		selectors addAll: #(fileInSelection fileIntoNewChangeSet browseChanges browseFile removeLinefeeds putUpdate)].	(suffix = 'swf') | (suffix = '*') ifTrue:[		labels add:'open as Flash'.		selectors add: #openAsFlash].	(suffix = 'ttf') | (suffix = '*') ifTrue:[		labels add: 'open true type font'.		selectors add: #openAsTTF].	(suffix = 'gz') | (suffix = '*') ifTrue:[		labels addAll: #('view decompressed' 'decompress to file').		selectors addAll: #(viewGZipContents saveGZipContents)].	(suffix = '3ds') | (suffix = '*') ifTrue:[		labels add: 'Open 3DS file'.		selectors add: #open3DSFile].	(suffix = 'tape') | (suffix = '*') ifTrue:		[labels add: 'open for playback'.		selectors add: #openTapeFromFile].	(suffix = 'wrl') | (suffix = '*') ifTrue:		[labels add: 'open in Wonderland'.		selectors add: #openVRMLFile].	(suffix = '*') ifTrue:		[labels addAll: #('generate HTML').		lines add: labels size - 1.		selectors addAll: #(renderFile)].	^ Array with: labels with: lines with: selectors! !!FileList methodsFor: 'file list menu' stamp: 'tk 2/14/2000 16:24'!openProjectFromFile	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world." 	| preStream |	Smalltalk verifyMorphicAvailability ifFalse: [^ self].	World ifNil: [^ self inform: 			'Later, allow jumping from MVC to Morphic Projects.'].	preStream _ directory oldFileNamed: self fullName.	ProjectViewMorph openFromFile: preStream.! !!ProjectViewMorph class methodsFor: 'project window creation' stamp: 'tk 2/14/2000 16:23'!openFromFile: preStream	"Reconstitute a Morph from the selected file, presumed to be represent a Morph saved via the SmartRefStream mechanism, and open it in an appropriate Morphic world." 	| aFileStream morphOrList window proj |	(preStream fullName asLowercase endsWith: '.gz')		ifTrue: [aFileStream _ (RWBinaryOrTextStream with:					(GZipReadStream on: preStream) upToEnd) reset.				preStream close.]		ifFalse: [aFileStream _ preStream].	morphOrList _ aFileStream fileInObjectAndCode.	(morphOrList isKindOf: ImageSegment) ifTrue: [		proj _ morphOrList arrayOfRoots detect: [:mm | mm class == Project] 					ifNone: [nil].		"rename the project if it conflicts?"		proj ifNotNil: [			window _ (SystemWindow labelled: proj name) model: proj.			window				addMorph: (self on: proj)				frame: (0@0 corner: 1.0@1.0).			window openInWorld.			proj enter]].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList _ morphOrList contentsMorph].	(morphOrList isKindOf: PasteUpMorph) ifFalse: [		^ self inform: 'This is not a PasteUpMorph or exported Project.'].	(window _ self newMorphicProjectOn: morphOrList) openInWorld.	window model enter! !!StandardFileMenu methodsFor: 'menu building' stamp: 'tk 2/14/2000 14:58'!directoryNamesString: aDirectory"Answer a string concatenating the directory name strings in aDirectory, each string followed by a '[...]' indicator, and followed by a cr."	^String streamContents:		[:s | 			aDirectory directoryNames do: 				[:dn |					(pattern match: dn) ifTrue: [						s nextPutAll: dn withBlanksTrimmed.						s nextPutAll: ' [...]'; cr]]]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'tk 2/14/2000 14:58'!fileNamesString: aDirectory"Answer a string concatenating the file name strings in aDirectory, each string followed by a cr."	^String streamContents:		[:s | 			aDirectory fileNames do: 				[:fn |					(pattern match: fn) ifTrue: [						s nextPutAll: fn withBlanksTrimmed; cr]]]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'tk 2/14/2000 14:25'!makeFileMenuFor: aDirectory"Initialize an instance of me to operate on aDirectory"	| theMenu |	pattern ifNil: [pattern _ '*'].	Cursor wait showWhile: 		[self 			labels: 	(self menuLabelsString: aDirectory)			font: 	(MenuStyle fontAt: 1) 			lines: 	(self menuLinesArray: aDirectory).		theMenu _ self selections: (self menuSelectionsArray: aDirectory)].	^theMenu! !!StandardFileMenu methodsFor: 'menu building' stamp: 'tk 2/14/2000 15:01'!menuLinesArray: aDirectory"Answer a menu lines object corresponding to aDirectory"	| typeCount nameCnt |	typeCount _ canTypeFileName 		ifTrue: [1] 		ifFalse: [0].	nameCnt _ aDirectory directoryNames count: [:dn | pattern match: dn].	^Array streamContents: [:s |		canTypeFileName ifTrue: [s nextPut: 1].		s nextPut: aDirectory pathParts size + typeCount + 1.		s nextPut: aDirectory pathParts size + 					nameCnt + typeCount + 1]! !!StandardFileMenu methodsFor: 'menu building' stamp: 'tk 2/14/2000 15:02'!menuSelectionsArray: aDirectory"Answer a menu selections object corresponding to aDirectory.  The object is an array corresponding to each item, each element itself constituting a two-element array, the first element of which contains a selector to operate on and the second element of which contains the parameters for that selector."	|dirSize|	dirSize _ aDirectory pathParts size.	^Array streamContents: [:s |		canTypeFileName ifTrue:			[s nextPut: (StandardFileMenuResult				directory: aDirectory				name: nil)].		s nextPut: (StandardFileMenuResult			directory: (FileDirectory root)			name: '').		aDirectory pathParts doWithIndex: 			[:d :i |				s nextPut: (StandardFileMenuResult					directory: (self 						advance: dirSize - i						containingDirectoriesFrom: aDirectory)					name: '')].		aDirectory directoryNames do: 			[:dn | 				(pattern match: dn) ifTrue: [					s nextPut: (StandardFileMenuResult						directory: (FileDirectory on: (aDirectory fullNameFor: dn))						name: '')]].		aDirectory fileNames do: 			[:fn | 				(pattern match: fn) ifTrue: [					s nextPut: (StandardFileMenuResult						directory: aDirectory						name: fn)]]]! !!StandardFileMenu methodsFor: 'private' stamp: 'tk 2/14/2000 14:24'!pattern: patString	" * for all files, or '*.cs' for changeSets, etc.  Just like fileLists"	pattern _ patString! !!StandardFileMenu methodsFor: 'object fileIn' stamp: 'tk 2/14/2000 15:03'!convertlflffmssc0: varDict lflffmsscp0: smartRefStrm	"These variables are automatically stored into the new instance ('canTypeFileName' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: ('pattern' )  If a non-nil value is needed, please assign it."! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'tk 2/14/2000 14:28'!newFile	^self newFileFrom: (FileDirectory default)! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'tk 2/14/2000 14:28'!newFileStreamFrom: aDirectory	| sfmResult fileStream |	sfmResult _ self newFileFrom: aDirectory.	sfmResult ifNil: [^nil].	fileStream _ sfmResult directory newFileNamed: sfmResult name.	[fileStream isNil] whileTrue:		[sfmResult _ self newFileFrom: aDirectory.		sfmResult ifNil: [^nil].		fileStream _ sfmResult directory newFileNamed: sfmResult name].	^fileStream! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'tk 2/14/2000 14:28'!oldFile	^self oldFileFrom: (FileDirectory default)! !!StandardFileMenu class methodsFor: 'standard file operations' stamp: 'tk 2/14/2000 14:27'!oldFileStreamFrom: aDirectory	| sfmResult fileStream |	sfmResult _ self oldFileFrom: aDirectory.	sfmResult ifNil: [^nil].	fileStream _ sfmResult directory oldFileNamed: sfmResult name.	[fileStream isNil] whileTrue:		[sfmResult _ self oldFileFrom: aDirectory.		sfmResult ifNil: [^nil].		fileStream _ sfmResult directory oldFileNamed: sfmResult name].	^fileStream! !