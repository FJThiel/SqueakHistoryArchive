'From Squeak 2.5 of August 6, 1999 on 2 September 1999 at 4:20:20 pm'!"Change Set:		strmCntsDozen-swDate:			2 September 1999Author:			Scott WallaceConverts a dozen methods over to using #streamContents:, as suggested by Dan."!!Object methodsFor: 'printing' stamp: 'sw 9/2/1999 15:18'!longPrintString	"Answer a String whose characters are a description of the receiver."	^ String streamContents: [:aStream | self longPrintOn: aStream]! !!CompoundTileMorph methodsFor: 'code generation' stamp: 'sw 9/2/1999 15:22'!codeString	^ String streamContents: [:aStream | self storeCodeOn: aStream indent: 1]! !!HandMorph methodsFor: 'world menu' stamp: 'sw 9/2/1999 15:32'!worldMenuHelp	| aList aMenu cnts explanation |	"self currentWorld primaryHand worldMenuHelp"	aList _ OrderedCollection new.	#(helpMenu changesMenu openMenu debugMenu  scriptingMenu windowsMenu playfieldMenu appearanceMenu) 		with:	#('help' 'changes' 'open' 'debug'  'authoring tools' 'windows & flaps' 'playfield options' 'appearance')do:		[:sel :title | aMenu _ self perform: sel.			aMenu items do:				[:it | (((cnts _ it contents) = 'keep this menu up') or: [cnts size = 0])					ifFalse: [aList add: (cnts, ' - ', title)]]].	aList _ aList asSortedCollection: [:a :b | a asLowercase < b asLowercase].	explanation _ String streamContents: [:aStream | aList do:		[:anItem | aStream nextPutAll: anItem; cr]].	(StringHolder new contents: explanation)		openLabel: 'Where in the world menu is...'! !!PhraseTileMorph methodsFor: 'code generation' stamp: 'sw 9/2/1999 15:33'!codeString	^ String streamContents: [:aStream | self storeCodeOn: aStream indent: 1]! !!ScriptEditorMorph methodsFor: 'other' stamp: 'sw 9/2/1999 15:16'!codeString	^ String streamContents: [:aStream | self storeCodeOn: aStream indent: 1]! !!ScriptEditorMorph methodsFor: 'other' stamp: 'sw 9/2/1999 15:15'!methodString	^ String streamContents:		[:aStream |			aStream nextPutAll: scriptName; cr; cr; tab.			aStream nextPutAll: self codeString]! !!SequenceableCollection methodsFor: 'copying' stamp: 'sw 9/2/1999 15:13'!copyWithout: oldElement 	"Answer a copy of the receiver in which all occurrences of oldElement have been left out."	^ self species streamContents:		[:aStream | self do: [:each | oldElement = each ifFalse: [aStream nextPut: each]]]"'fred the bear' copyWithout: $e#(2 3 4 5 5) copyWithout: 5"! !!SequenceableCollection methodsFor: 'copying' stamp: 'sw 9/2/1999 15:10'!copyWithoutAll: aList	"Answer a copy of the receiver in which all occurrences of all elements in aList have been removed."	^ self species streamContents: [:aStream |		self do: [:each | (aList includes: each) ifFalse: [aStream nextPut: each]]]"'asbecdrfegt' copyWithoutAll: 'abdfg'"! !!TileMorph methodsFor: 'code generation' stamp: 'sw 9/2/1999 15:01'!codeString	^ String streamContents: [:aStream | self storeCodeOn: aStream indent: 1]! !!Time methodsFor: 'printing' stamp: 'sw 9/2/1999 15:35'!print24	"Return an 8-digit string representing the receiver.  Format is 'hh:mm:ss', with leading zeros if needed"	^ String streamContents:		[:aStream |			hours < 10 ifTrue: [aStream nextPutAll: '0'].			hours printOn: aStream.			aStream nextPutAll: (minutes < 10 ifTrue: [':0'] ifFalse: [':']).			minutes printOn: aStream.			aStream nextPutAll: (seconds < 10 ifTrue: [':0'] ifFalse: [':']).			seconds printOn: aStream]"Time now print24" ! !!Utilities class methodsFor: 'summer97 additions' stamp: 'sw 9/2/1999 15:36'!fontSizeSummary	"Utilities fontSizeSummary"	| aString aList |	aList _ Utilities knownTextStyles.	aString _ String streamContents:		[:aStream |			aList do: [:aStyleName |				aStream nextPutAll:					aStyleName, '  ',					(Utilities fontSizesFor: aStyleName) asArray storeString.				aStream cr]].	(StringHolder new contents: aString)		openLabel: 'Font styles and sizes'! !!WordNet class methodsFor: 'as yet unclassified' stamp: 'sw 9/2/1999 15:38'!definitionsFor: aWord	| aDef parts item |	aDef _ self new.	(aDef definition: aWord) ifNil:		[self inform: 'Sorry, cannot reach the WordNetweb site; task abandoned.'.		^ nil].	parts _ aDef parts.	parts size = 0 ifTrue:		[self inform: 'Sorry, ', aWord, ' not found.'.		^ nil].	^ String streamContents:		[:defStream |			defStream nextPutAll: aWord; cr.			parts do:				[:aPart |					defStream cr.					1 to: (aDef sensesFor: aPart) do:						[:senseNumber |							defStream nextPutAll: aPart.							item _ aDef def: senseNumber for: aPart.							defStream nextPutAll: (' (', senseNumber printString, ') ', (item copyFrom: 2 to: item size - 1)).							defStream cr]]]"WordNet definitionsFor: 'balloon'"! !