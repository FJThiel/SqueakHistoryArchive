'From Squeak3.7 of ''4 September 2004'' [latest update: #5988] on 28 September 2004 at 5:04:04 pm'!"Change Set:		FormRotatefix-tprDate:			28 September 2004Author:			tim@sumeru.stanford.eduWhilst testing the upcoming multiple host OS windows code I found a couple of bugs/infelicities in Form.a) rotating a subclass of Form insisted on returning a Form.b) you couldn't rotate and magnify by a Point.So I fixed it up a bit. Now you can  do things like Display rotateBy: 34 magnify: 0.3@2 smoothing:2 .The magnify code already works with Points so I just fixed the comments.Cool 3D psychadelic effects are now so much easier @-)"!!Form methodsFor: 'scaling, rotation' stamp: 'tpr 9/28/2004 17:00'!magnify: aRectangle by: scale smoothing: cellSize        "Answer a Form created as a scaling of the receiver.        Scale may be a Float or even a Point, and may be greater or less than 1.0."        | newForm |        newForm _ self blankCopyOf: aRectangle scaledBy: scale.        (WarpBlt current toForm: newForm)                sourceForm: self;                colorMap: (self colormapIfNeededFor: newForm);                cellSize: cellSize;  "installs a new colormap if cellSize > 1"                combinationRule: 3;                copyQuad: aRectangle innerCorners toRect: newForm boundingBox.        ^ newForm"Dynamic test...[Sensor anyButtonPressed] whileFalse:        [(Display magnify: (Sensor cursorPoint extent: 131@81) by: 0.5 smoothing: 2) display]""Scaling test...| f cp | f _ Form fromDisplay: (Rectangle originFromUser: 100@100).Display restoreAfter: [Sensor waitNoButton.[Sensor anyButtonPressed] whileFalse:        [cp _ Sensor cursorPoint.        (f magnify: f boundingBox by: (cp x asFloat@cp y asFloat)/f extent smoothing: 2) display]]"! !!Form methodsFor: 'scaling, rotation' stamp: 'tpr 9/28/2004 17:00'!magnifyBy: scale 	"Answer a Form created as a scaling of the receiver.	Scale may be a Float or even a Point, and may be greater or less than 1.0."	^ self magnify: self boundingBox by: scale			smoothing: (scale < 1 ifTrue: [2] ifFalse: [1])! !!Form methodsFor: 'scaling, rotation' stamp: 'tpr 9/28/2004 16:54'!rotateBy: deg magnify: scale smoothing: cellSize	"Rotate the receiver by the indicated number of degrees and magnify. scale can be a Point to make for interesting 3D effects "	"rot is the destination form, big enough for any angle."	| side rot warp r1 pts p bigSide |	side _ 1 + self extent r asInteger.	bigSide _ (side asPoint * scale) rounded.	rot _ self class extent: bigSide depth: self depth.	warp _ (WarpBlt current toForm: rot)		sourceForm: self;		colorMap: (self colormapIfNeededFor: rot);		cellSize: cellSize;  "installs a new colormap if cellSize > 1"		combinationRule: Form paint.	r1 _ (0@0 extent: side@side) align: (side@side)//2 with: self boundingBox center.	"Rotate the corners of the source rectangle." 	pts _ r1 innerCorners collect:		[:pt | p _ pt - r1 center.		(r1 center x asFloat + (p x asFloat*deg degreeCos) + (p y asFloat*deg degreeSin)) @		(r1 center y asFloat - (p x asFloat*deg degreeSin) + (p y asFloat*deg degreeCos))].	warp copyQuad: pts toRect: rot boundingBox.	^ rot" | a f |  f _ Form fromDisplay: (0@0 extent: 200@200).  a _ 0.[Sensor anyButtonPressed] whileFalse:	[((Form fromDisplay: (Sensor cursorPoint extent: 130@66))		rotateBy: (a _ a+5) magnify: 0.75@2 smoothing: 2) display].f display"! !!Form methodsFor: 'scaling, rotation' stamp: 'tpr 9/28/2004 16:55'!rotateBy: deg smoothing: cellSize	"Rotate the receiver by the indicated number of degrees."	^self rotateBy: deg magnify: 1 smoothing: cellSize" | a f |  f _ Form fromDisplay: (0@0 extent: 200@200).  a _ 0.[Sensor anyButtonPressed] whileFalse:	[((Form fromDisplay: (Sensor cursorPoint extent: 130@66))		rotateBy: (a _ a+5) smoothing: 2) display].f display"! !