'From Squeak2.9alpha of 17 July 2000 [latest update: #2798] on 3 October 2000 at 2:03:43 pm'!"Change Set:		geeBooksDate:			3 October 2000Author:			Bob Arning- add red menu command to make a book morph from a GeeMail. Currently the book is read-only, but, hopefully, live editing will not be too far away"!BookMorph subclass: #GeeBookMorph	instanceVariableNames: 'geeMail '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-GeeMail'!PasteUpMorph subclass: #GeeBookPageMorph	instanceVariableNames: 'geeMail geeMailRectangle '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-GeeMail'!!AlansTextPlusMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 13:58'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'make a book of me' action: #convertToBook.! !!AlansTextPlusMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:03'!convertToBook	GeeBookMorph new 		geeMail: thePasteUp;		rebuildPages;		openInWorld! !!GeeBookMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 11:48'!geeMail: aGeeMail	geeMail _ aGeeMail.! !!GeeBookMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:13'!geePageRectangles	| pageBounds allPageRects |	pageBounds _ geeMail topLeft 			extent: geeMail width @ (geeMail height min: Display height - 50).	allPageRects _ OrderedCollection new.	[pageBounds top <= geeMail bottom] whileTrue: [		allPageRects add: pageBounds.		pageBounds _ pageBounds translateBy: 0 @ pageBounds height.	].	^allPageRects! !!GeeBookMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:15'!initialize	newPagePrototype _ GeeBookPageMorph new extent: Display extent // 3.	super initialize.	color _ (Color r: 0.909 g: 0.819 b: 0.09).! !!GeeBookMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:44'!rebuildPages	pages _ self geePageRectangles collect: [ :each |		GeeBookPageMorph new 			disableDragNDrop;			geeMail: geeMail geeMailRectangle: each.	].	currentPage delete.	currentPage _ nil.	pages isEmpty ifTrue: [^ self insertPage].	self goToPage: 1.! !!GeeBookPageMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:40'!fullDrawOn: aCanvas	aCanvas 		translateTo: self topLeft + aCanvas origin - geeMailRectangle origin 		clippingTo: (bounds translateBy: aCanvas origin) 		during: [ :c |			geeMail disablePageBreaksWhile: [geeMail fullDrawOn: c].		].! !!GeeBookPageMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 11:57'!geeMail: aGeeMail geeMailRectangle: aRectangle	geeMail _ aGeeMail.	geeMailRectangle _ aRectangle.	self extent: aRectangle extent.! !!GeeBookPageMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 13:25'!handlesMouseDown: evt	"| localPt |	localPt _ (self transformFrom: self world) globalPointToLocal: evt cursorPoint.	submorphs do: [ :each | (each fullBounds containsPoint: localPt) ifTrue: [^false]]."	^ true! !!GeeBookPageMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 13:51'!mouseDown: evt	"Handle a mouse down event."		"{evt. self recipientForMouseDown: evt. self} explore."! !!GeeBookPageMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 13:51'!recipientForMouseDown: evt	| p coreSample |	p _ evt cursorPoint.	coreSample _ geeMail unlockedMorphsAtGlobal: p.	coreSample do: [:subM | (subM trumpsMouseDown: evt) ifTrue: [^ subM]].	coreSample reverseDo: [:subM | (subM preemptsMouseDown: evt) ifTrue: [^ subM]].	coreSample do: [:subM | (subM handlesMouseDown: evt) ifTrue: [^ subM]].	coreSample size = 0 ifTrue: [^ geeMail].	^ coreSample first! !!TextPlusPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:21'!acceptDroppingMorph: aMorph event: evt	(aMorph isKindOf: NewHandleMorph) ifTrue: [^self].	(aMorph isKindOf: GeeBookMorph) ifTrue: [^self].	"avoid looping"	self addMorph: aMorph.	aMorph allMorphsDo: [ :each | theTextMorph removeAlansAnchorFor: each].	theTextMorph linkNewlyDroppedMorph: aMorph! !!TextPlusPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:18'!disablePageBreaksWhile: aBlock	| save result |	save _ showPageBreaks.	showPageBreaks _ false.	result _ aBlock value.	showPageBreaks _ save.	^result! !!TextPlusPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:19'!fullDrawForPrintingOn: aCanvas	self disablePageBreaksWhile: [self fullDrawOn: aCanvas].! !!TextPlusPasteUpMorph methodsFor: 'as yet unclassified' stamp: 'RAA 10/3/2000 12:56'!wantsDroppedMorph: aMorph event: evt	"Return true if the receiver wishes to accept the given morph, which is being dropped by a hand in response to the given event. The default implementation returns false.NOTE: the event is assumed to be in global (world) coordinates."	(aMorph isKindOf: NewHandleMorph) ifTrue: [^false].	(aMorph isKindOf: GeeBookMorph) ifTrue: [^false].	"avoid looping"	^super wantsDroppedMorph: aMorph event: evt! !