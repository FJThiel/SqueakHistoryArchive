'From Squeak2.9alpha of 16 June 2000 [latest update: #3343] on 31 January 2001 at 12:58:33 pm'!AlignmentMorph subclass: #ScriptEditorMorph	instanceVariableNames: 'scriptName firstTileRow timeStamp playerScripted handWithTile showingMethodPane '	classVariableNames: 'WritingUniversalTiles '	poolDictionaries: ''	category: 'Morphic-Scripting'!!ScriptEditorMorph commentStamp: 'tk 1/31/2001 09:47' prior: 0!Presents an EToy script to the user on the screen.  Has in it:a Morph with the controls for the script.a Morph with the tiles.  Either PhraseMorphs and TileMorphs, 	or a TwoWayScroller with SyntaxMorphs in it.WritingUniversalTiles -- only vlaid while a project is being written out.  		True if using UniversalTiles in that project.!!FlapTab methodsFor: 'show & hide' stamp: 'tk 1/31/2001 12:27'!hideFlap	| aWorld |	aWorld _ self world ifNil: [self currentWorld].	referent privateDelete.	aWorld removeAccommodationForFlap: self.	flapShowing _ false.	self isInWorld ifFalse: [aWorld addMorphFront: self].	self adjustPositionAfterHidingFlap.	aWorld haloMorphs do:		[:m | m target isInWorld ifFalse: [m delete]]! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'tk 1/31/2001 12:46'!comeFullyUpOnReload: smartRefStream	"fix up the objects in the segment that changed size.  An object in the segment is the wrong size for the modern version of the class.  Construct a fake class that is the old size.  Replace the modern class with the old one in outPointers.  Load the segment.  Traverse the instances, making new instances by copying fields, and running conversion messages.  Keep the new instances.  Bulk forward become the old to the new.  Let go of the fake objects and classes.	After the install (below), arrayOfRoots is filled in.  Globalize new classes.  Caller may want to do some special install on certain objects in arrayOfRoots. 	May want to write the segment out to disk in its new form."	| mapFakeClassesToReal ccFixups receiverClasses |	self flag: #bobconv.		RecentlyRenamedClasses _ nil.		"in case old data hanging around"	mapFakeClassesToReal _ smartRefStream reshapedClassesIn: outPointers.		"Dictionary of just the ones that change shape.  Substitute them in outPointers."	ccFixups _ self remapCompactClasses: mapFakeClassesToReal 				refStrm: smartRefStream.	ccFixups ifFalse: [^ self error: 'A class in the file is not compatible'].	endMarker _ segment nextObject. 	"for enumeration of objects"	endMarker == 0 ifTrue: [endMarker _ 'End' clone].	arrayOfRoots _ self loadSegmentFrom: segment outPointers: outPointers.		"Can't use install.  Not ready for rehashSets"	mapFakeClassesToReal isEmpty ifFalse: [		self reshapeClasses: mapFakeClassesToReal refStream: smartRefStream	].	receiverClasses _ self restoreEndianness.		"rehash sets"	smartRefStream checkFatalReshape: receiverClasses.	"Classes in this segment."	arrayOfRoots do: [:importedObject | 		importedObject class class == Metaclass ifTrue: [self declare: importedObject]].	arrayOfRoots do: [:importedObject | 		(importedObject isKindOf: Project) ifTrue: [			importedObject ensureChangeSetNameUnique.			Project addingProject: importedObject.			importedObject restoreReferences.			ScriptEditorMorph writingUniversalTiles: 				(importedObject world valueOfProperty: #universalTiles)]].		arrayOfRoots do: [:importedObject | 		(importedObject respondsTo: #unhibernate) ifTrue: [			importedObject unhibernate].	"ScriptEditors and ViewerFlapTabs"		].	mapFakeClassesToReal isEmpty ifFalse: [		mapFakeClassesToReal keys do: [:aFake | 			aFake indexIfCompact > 0 ifTrue: [aFake becomeUncompact].			aFake removeFromSystemUnlogged].		SystemOrganization removeEmptyCategories].	"^ self"! !!MethodNode methodsFor: 'tiles' stamp: 'tk 1/30/2001 15:00'!asMorphicSyntaxUsing: aClass		| morph |	(morph _ aClass 		column: #method 		on: self)		borderWidth: 0.	self asMorphicSyntaxIn: morph.	block _ morph submorphs last.	block submorphs last decompile string = '^  self ' ifTrue: [		block submorphs last delete].	^ morph! !!Player methodsFor: 'scripts-kernel' stamp: 'tk 1/31/2001 12:43'!isUniversalTiles	| ww |	"Return true if I (my world) uses universal tiles.  This message can be called in places where the current World is not known, such as when writing out a project."	^ (ww _ costume world)	 "new tiles?"		ifNil: [ScriptEditorMorph writingUniversalTiles == true				"only valid during a project write"]		ifNotNil: [ww valueOfProperty: #universalTiles ifAbsent: [false]]! !!CardPlayer methodsFor: 'card data' stamp: 'tk 1/30/2001 23:42'!privateMorphs	^ privateMorphs! !!Project methodsFor: 'file in/out' stamp: 'tk 1/31/2001 10:00'!exportSegmentWithCatagories: catList classes: classList fileName: aFileName directory: aDirectory	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."| is str ans revertSeg roots holder |"world == World ifTrue: [^ false]."	"self inform: 'Can''t send the current world out'."world isMorph ifFalse: [	self projectParameters at: #isMVC put: true.	^ false].	"Only Morphic projects for now"world ifNil: [^ false].  world presenter ifNil: [^ false].Utilities emptyScrapsBook.world currentHand pasteBuffer: nil.	  "don't write the paste buffer."world currentHand mouseOverHandler initialize.	  "forget about any references here"	"Display checkCurrentHandForObjectToPaste."Command initialize.world clearCommandHistory.world fullReleaseCachedState; releaseViewers. world cleanseStepList.world localFlapTabs size = world flapTabs size ifFalse: [	self error: 'Still holding onto Global flaps'].world releaseSqueakPages.ScriptEditorMorph writingUniversalTiles: (world valueOfProperty: #universalTiles).holder _ Project allProjects.	"force them in to outPointers, where DiskProxys are made""Just export me, not my previous version"revertSeg _ self projectParameters at: #revertToMe ifAbsent: [nil].self projectParameters removeKey: #revertToMe ifAbsent: [].roots _ OrderedCollection new.roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.roots add: world activeHand; addAll: classList; addAll: (classList collect: [:cls | cls class]).roots _ roots reject: [ :x | x isNil].	"early saves may not have active hand or thumbnail"catList do: [:sysCat | 	(SystemOrganization listAtCategoryNamed: sysCat asSymbol) do: [:symb |		roots add: (Smalltalk at: symb); add: (Smalltalk at: symb) class]].is _ ImageSegment new copySmartRootsExport: roots asArray.	"old way was (is _ ImageSegment new copyFromRootsForExport: roots asArray)"is state = #tooBig ifTrue: [^ false].str _ ''."considered legal to save a project that has never been entered"(is outPointers includes: world) ifTrue: [	str _ str, '\Project''s own world is not in the segment.' withCRs].str isEmpty ifFalse: [	ans _ (PopUpMenu labels: 'Do not write fileWrite file anywayDebug') startUpWithCaption: str.	ans = 1 ifTrue: [		revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].		^ false].	ans = 3 ifTrue: [self halt: 'Segment not written']].is writeForExportWithSources: aFileName inDirectory: aDirectory.revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].holder.world flapTabs do: [:ft | 		(ft respondsTo: #unhibernate) ifTrue: [ft unhibernate]].is arrayOfRoots do: [:obj |	obj class == ScriptEditorMorph ifTrue: [obj unhibernate]].^ true! !!Project methodsFor: 'file in/out' stamp: 'tk 1/31/2001 10:01'!exportSegmentWithChangeSet: aChangeSetOrNil fileName: aFileName directory: aDirectory	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."	| is str ans revertSeg roots holder |	"An experimental version to fileout a changeSet first so that a project can contain its own classes"world isMorph ifFalse: [	self projectParameters at: #isMVC put: true.	^ false].	"Only Morphic projects for now"world ifNil: [^ false].  world presenter ifNil: [^ false].Utilities emptyScrapsBook.world currentHand pasteBuffer: nil.	  "don't write the paste buffer."world currentHand mouseOverHandler initialize.	  "forget about any references here"	"Display checkCurrentHandForObjectToPaste."Command initialize.world clearCommandHistory.world fullReleaseCachedState; releaseViewers. world cleanseStepList.world localFlapTabs size = world flapTabs size ifFalse: [	self error: 'Still holding onto Global flaps'].world releaseSqueakPages.ScriptEditorMorph writingUniversalTiles: (world valueOfProperty: #universalTiles).holder _ Project allProjects.	"force them in to outPointers, where DiskProxys are made""Just export me, not my previous version"revertSeg _ self projectParameters at: #revertToMe ifAbsent: [nil].self projectParameters removeKey: #revertToMe ifAbsent: [].roots _ OrderedCollection new.roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.roots add: world activeHand.	"; addAll: classList; addAll: (classList collect: [:cls | cls class])"roots _ roots reject: [ :x | x isNil].	"early saves may not have active hand or thumbnail"is _ ImageSegment new copySmartRootsExport: roots asArray.	"old way was (is _ ImageSegment new copyFromRootsForExport: roots asArray)"is state = #tooBig ifTrue: [^ false].str _ ''."considered legal to save a project that has never been entered"(is outPointers includes: world) ifTrue: [	str _ str, '\Project''s own world is not in the segment.' withCRs].str isEmpty ifFalse: [	ans _ (PopUpMenu labels: 'Do not write fileWrite file anywayDebug') startUpWithCaption: str.	ans = 1 ifTrue: [		revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].		^ false].	ans = 3 ifTrue: [self halt: 'Segment not written']].is writeForExportWithSources: aFileName inDirectory: aDirectory changeSet: aChangeSetOrNil.revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].holder.world flapTabs do: [:ft | 		(ft respondsTo: #unhibernate) ifTrue: [ft unhibernate]].is arrayOfRoots do: [:obj |	obj class == ScriptEditorMorph ifTrue: [obj unhibernate]].^ true! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'tk 1/31/2001 10:06'!showSourceInScriptor	"Remove tile panes, if any, and show textual source instead"	| aCodePane |	self isTextuallyCoded ifFalse: [self becomeTextuallyCoded].		"Mostly to fix up grandfathered ScriptEditors"	self submorphs allButFirst do: [:m | m delete].	aCodePane _ MethodHolder 		isolatedCodePaneForClass: playerScripted class 		selector: scriptName.	aCodePane		hResizing: #spaceFill;		vResizing: #spaceFill;		minHeight: 100.	self 		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	self addMorphBack: aCodePane.	self fullBounds.	self 		listDirection: #topToBottom;		hResizing: #rigid;		vResizing: #rigid;		rubberBandCells: true;		minWidth: self width.	showingMethodPane _ true.	(playerScripted isUniversalTiles) ifTrue: [self useNewTilesNow].			"grab aCodePane, get model, and remove it" 	self currentWorld startSteppingSubmorphsOf: self! !!ScriptEditorMorph methodsFor: 'other' stamp: 'tk 1/30/2001 23:27'!hibernate	| ww |	"Delete the tiles.  If I have new universal tiles."	(ww _ self world) 		ifNil: [playerScripted isUniversalTiles ifFalse: [^ self]]		ifNotNil: [			(ww valueOfProperty: #universalTiles ifAbsent: [false]) ifFalse: [^ self]].	submorphs size > 1 ifTrue: [submorphs second delete].! !!ScriptEditorMorph methodsFor: 'other' stamp: 'tk 1/30/2001 23:21'!releaseCachedState	super releaseCachedState.	self hibernate.! !!ScriptEditorMorph methodsFor: 'other' stamp: 'tk 1/30/2001 23:32'!unhibernate	| ww |	"Recreate my tiles from my method.  If I have new universal tiles."	(ww _ self world) 		ifNil: [playerScripted isUniversalTiles ifFalse: [^ self]]		ifNotNil: [			(ww valueOfProperty: #universalTiles ifAbsent: [false]) ifFalse: [^ self]].	self showSourceInScriptor. ! !!ScriptEditorMorph class methodsFor: 'instance creation' stamp: 'tk 1/31/2001 09:48'!writingUniversalTiles	"Only valid during the write of a Project."	^ WritingUniversalTiles! !!ScriptEditorMorph class methodsFor: 'instance creation' stamp: 'tk 1/31/2001 09:48'!writingUniversalTiles: boolean	WritingUniversalTiles _ boolean! !!StackMorph methodsFor: 'submorphs-accessing' stamp: 'tk 1/30/2001 23:44'!allNonSubmorphMorphs	"Return a collection containing all morphs in this morph which are not currently in the submorph containment hierarchy.  Especially the non-showing pages in BookMorphs."	| coll |	coll _ OrderedCollection new.	cards do: [:cd | 		cd privateMorphs ifNotNil: [coll addAll: cd privateMorphs]].	^ coll! !!SyntaxMorph methodsFor: 'initialization' stamp: 'tk 1/19/2001 13:29'!sample: arg1"a comment"| temp1 |temp1 _ 5.temp1 yourself.temp1 min: arg1.! !!SyntaxMorph methodsFor: 'printing' stamp: 'tk 1/30/2001 13:45'!printOn: strm indent: level	| lev nodeClass parens cnt |	"Tree walk and produce text of the code.  #ST80.  Just do it in one big ugly method."	lev _ level.	(nodeClass _ parseNode class) == BlockNode ifTrue: [		owner isSyntaxMorph ifTrue: [			owner isMethodNode ifFalse: [strm nextPut: $[.  lev _ lev+1]]].				"normal block has []"	nodeClass == VariableNode ifTrue: ["nil out any old association"		parseNode key class == Association ifTrue: [			parseNode name: (parseNode name) key: nil code: (parseNode code)]].	(nodeClass == MessageNode or: [nodeClass == CascadeNode]) ifTrue: [		parseNode receiver ifNotNil: [parens _ true.  strm nextPut: $( ]].	"has a receiver"	nodeClass == MethodTempsNode ifTrue: [strm nextPut: $|; space].	cnt _ 0.	submorphs do: [:sub |		sub isSyntaxMorph ifTrue: [cnt _ cnt + 1.			(nodeClass == CascadeNode "and: [sub isCascadePart]") ifTrue:				[cnt > 2 ifTrue: [strm nextPutAll: '; ']].			nodeClass == BlockArgsNode ifTrue: [strm nextPut: $:].			sub printOn: strm indent: lev.	"<<<<### install the subnode"			(nodeClass == BlockNode) & (sub parseNode class == BlockArgsNode) not	&				(sub parseNode class == ReturnNode) not					ifTrue: [strm nextPut: $.].			(nodeClass == BlockNode) & (sub parseNode class == BlockArgsNode) not				ifTrue: [strm crtab: lev]				ifFalse: [self isMethodNode ifTrue: [strm crtab: lev] ifFalse: [strm space]].			].		(sub isKindOf: StringMorph) ifTrue: [strm nextPutAll: sub contents].		"return indent for ifTrue: ifFalse:"].	parens == true ifTrue: [strm nextPut: $) ].	"has a receiver"	nodeClass  == BlockNode ifTrue: [		owner isSyntaxMorph ifTrue: [			owner isMethodNode ifFalse: [strm nextPut: $] ]]].				"normal block has []"	nodeClass == BlockArgsNode ifTrue: [strm nextPut: $|; crtab: lev].	nodeClass == MethodTempsNode ifTrue: [strm nextPut: $|; crtab: lev].	nodeClass == MethodNode ifTrue: [		strm contents last "ugh!!" == $. ifTrue: [strm skip: -1]].	"erase last period"! !!SyntaxMorph methodsFor: 'menus' stamp: 'tk 1/30/2001 12:10'!accept	"Turn my current state into the text of a method.  Compile it in my class."	| cls sc |	self isMethodNode ifFalse: [		self rootTile == self ifTrue: [^ self].  "not in a script"		^ self rootTile accept  "always accept at the root"].	(cls _ self parsedInClass) ifNil: [^ self].	cls compile: self decompile notifying: nil.	(sc _ self firstOwnerSuchThat: [:mm | mm class == ScriptEditorMorph]) 		ifNotNil: [sc hibernate; unhibernate].	"rebuild the tiles"! !!VariableNode methodsFor: 'accessing' stamp: 'tk 1/30/2001 13:45'!name	^ name! !!VariableNode methodsFor: 'testing' stamp: 'tk 1/30/2001 14:04'!isSelfPseudoVariable	"Answer if this ParseNode represents the 'self' pseudo-variable."	^ (key = 'self') | (name = '{{self}}')! !!VariableNode methodsFor: 'tiles' stamp: 'tk 1/30/2001 14:19'!asMorphicSyntaxIn: parent	^ parent addToken: name			type: #variable 			on: self clone	"don't hand out the prototype!! See VariableNode>>initialize"! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'tk 1/31/2001 10:09'!hibernate	| ut |	"drop my viewer to save space when writing to the disk."	ut _ self world valueOfProperty: #universalTiles ifAbsent: [false].	referent submorphs do: 		[:m | (m isKindOf: Viewer) ifTrue: [ut ifTrue: [m delete]]].! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'tk 1/31/2001 12:28'!unhibernate	| wasShowing viewer |	"recreate my viewer"	referent ifNotNil: [		(referent findA: Viewer) ifNotNil: [^self].	].	wasShowing _ flapShowing.	viewer _ self presenter viewMorph: scriptedPlayer costume.	wasShowing ifFalse: [self hideFlap].	^ viewer! !