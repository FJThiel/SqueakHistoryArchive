'From Squeak2.9alpha of 17 July 2000 [latest update: #3134] on 6 December 2000 at 2:02:02 pm'!"Change Set:		zoomAsMovieDate:			6 December 2000Author:			Bob ArningAdds ability to run StoryboardBookMorph from a PianoRollScoreMorph/ScorePlayerMorph combo. here is what works:- get a StoryboardBookMorph and install whatever images desired- get a ScorePlayerMorph- click the Piano Roll button on the SPM- enable drag and drop on the PRSM- drag yellow position/scale data from SBBM and drop into PRSM for each desired point in the animation sequence- hit Play on the SPM"!AlignmentMorph subclass: #ZASMCameraMarkMorph	instanceVariableNames: 'startTimeInPianoRoll '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Demo'!!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 12:12'!addMorphsTo: morphList pianoRoll: pianoRoll eventTime: t betweenTime: leftTime and: rightTime	| startX |	startTimeInPianoRoll > rightTime ifTrue: [^ self].  	startTimeInPianoRoll < leftTime ifTrue: [^ self].	startX _ pianoRoll xForTime: startTimeInPianoRoll.	morphList add: 		(self align: self bottomLeft			with: startX @ self bottom).! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:46'!cameraController	^(self valueOfProperty: #cameraController)! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:51'!encounteredAtTime: ticks inScorePlayer: scorePlayer atIndex: index inEventTrack: track secsPerTick: secsPerTick	| nextAmbient m nextDurationInMs program now finalMark |	self setCameraValues.	nextAmbient _ nil.	index to: track size do: [ :i |		(nextAmbient isNil and: [((m _ track at: i) morph) isKindOf: self class]) ifTrue: [			nextAmbient _ m.		].	].	nextAmbient ifNotNil: [		nextDurationInMs _ (nextAmbient time - ticks * secsPerTick * 1000) rounded.		finalMark _ nextAmbient morph.		now _ Time millisecondClockValue.		program _ Dictionary new.		program			at: #startTime put: now;			at: #endTime put: now + nextDurationInMs;			at: #startPoint put: (self valueOfProperty: #cameraPoint);			at: #endPoint put: (finalMark valueOfProperty: #cameraPoint);			at: #startZoom put: (self valueOfProperty: #cameraScale);			at: #endZoom put: (finalMark valueOfProperty: #cameraScale).		self cameraController setProgrammedMoves: {program}.	].! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:46'!justDroppedInto: newOwner event: anEvent	| holder |	(newOwner isKindOf: PianoRollScoreMorph) ifTrue: [		^self justDroppedIntoPianoRoll: newOwner event: anEvent	].	newOwner isWorldMorph ifTrue: [		holder _ ZASMScriptMorph new.		holder 			position: self position;			setProperty: #cameraController toValue: self cameraController.		self world addMorph: holder.		holder addMorph: self.		holder startStepping.	].	super justDroppedInto: newOwner event: anEvent! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 14:01'!justDroppedIntoPianoRoll: newOwner event: evt		| pianoRoll |	pianoRoll _ newOwner.	startTimeInPianoRoll _ pianoRoll timeForX: self left.	"self endTime > newOwner scorePlayer durationInTicks ifTrue:		[newOwner scorePlayer updateDuration]"! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 09:47'!pauseFrom: scorePlayer	"Ignored"! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:51'!resetFrom: scorePlayer	self cameraController setProgrammedMoves: nil.! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 09:37'!resumeFrom: scorePlayer	"Ignored"! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:46'!setCameraValues	| camera |	camera _ self cameraController.	"ick... since one may fail to fully take due to constraints, retry"	2 timesRepeat: [		camera cameraPoint: (self valueOfProperty: #cameraPoint).		camera cameraScale: (self valueOfProperty: #cameraScale).	].! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:46'!veryDeepCopyWith: deepCopier	| camera |	"Keep the same camera???"	(camera _ self cameraController) ifNotNil: [		(deepCopier references includesKey: camera) ifFalse: [			"not recorded, outside our tree, use same camera"			deepCopier references at: camera put: camera]].	^ super veryDeepCopyWith: deepCopier! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 11:43'!cameraScale: aNumber	target ifNil: [^self].	target changeScaleTo: aNumber! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:50'!doProgrammedMoves	| thisMove startPoint endPoint startZoom endZoom newScale newPoint fractionLeft |	programmedMoves isEmptyOrNil ifTrue: [^programmedMoves _ nil].	thisMove _ programmedMoves first.	fractionLeft _ self fractionLeftInMove: thisMove.	fractionLeft ifNil: [^programmedMoves _ programmedMoves allButFirst].	startPoint _ thisMove at: #startPoint ifAbsentPut: [self cameraPoint].	endPoint _ thisMove at: #endPoint ifAbsentPut: [self cameraPoint].	startZoom _ thisMove at: #startZoom ifAbsentPut: [self cameraScale].	endZoom _ thisMove at: #endZoom ifAbsentPut: [self cameraScale].	newScale _ endZoom - (endZoom - startZoom * fractionLeft).	newPoint _ (endPoint - (endPoint - startPoint * fractionLeft)) rounded.	target changeScaleTo: newScale.	target cameraPoint: newPoint.	fractionLeft <= 0 ifTrue: [^programmedMoves _ programmedMoves allButFirst].! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 13:08'!fractionLeftInMove: thisMove	| steps stepsRemaining fractionLeft endTime startTime |	(thisMove includesKey: #steps) ifTrue: [		steps _ thisMove at: #steps ifAbsentPut: [1].		stepsRemaining _ thisMove at: #stepsRemaining ifAbsentPut: [steps].		stepsRemaining < 1 ifTrue: [^nil].		stepsRemaining _ stepsRemaining - 1.		fractionLeft _ stepsRemaining / steps. 		thisMove at: #stepsRemaining put: stepsRemaining.	] ifFalse: [		endTime _ thisMove at: #endTime ifAbsent: [^nil].		startTime _ thisMove at: #startTime ifAbsent: [^nil].		fractionLeft _ (endTime - Time millisecondClockValue) / (endTime - startTime).	].	^fractionLeft max: 0! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/6/2000 12:52'!setProgrammedMoves: aCollection	programmedMoves _ aCollection! !