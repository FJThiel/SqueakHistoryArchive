'From Squeak 2.3 of January 14, 1999 on 10 February 1999 at 10:34:01 pm'!"Change Set:		SimulatorFailFixDate:			10 February 1999Author:			Dan IngallsThis changeSet replaces all uses of the special symbol #simulatorFail by a unique object local to the Context stepping simulator.  This prevents accidental encounters with that symbol (as when interning another symbol that begins with 's') from being erroneously interpreted as failures."!InstructionStream subclass: #ContextPart	instanceVariableNames: 'stackp '	classVariableNames: 'PrimitiveFailToken '	poolDictionaries: ''	category: 'Kernel-Methods'!!Object methodsFor: 'system primitives' stamp: 'di 2/10/1999 22:16'!tryPrimitive: primIndex withArgs: argumentArray	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."	<primitive: 118>	^ ContextPart primitiveFailToken! !!ContextPart methodsFor: 'controlling' stamp: 'di 2/10/1999 22:26'!send: selector to: rcvr with: args super: superFlag 	"Simulate the action of sending a message with selector, selector, and 	arguments, args, to receiver. The argument, superFlag, tells whether the 	receiver of the message was specified with 'super' in the source method."	| class meth val |	class _ superFlag			ifTrue: [(self method literalAt: self method numLiterals) value superclass]			ifFalse: [rcvr class].	meth _ class lookupSelector: selector.	meth == nil		ifTrue: [^ self send: #doesNotUnderstand:					to: rcvr					with: (Array with: (Message selector: selector arguments: args))					super: superFlag]		ifFalse: [val _ self tryPrimitiveFor: meth						receiver: rcvr						args: args.				val == PrimitiveFailToken ifFalse: [^ val].				(selector == #doesNotUnderstand: and: [class == Object]) ifTrue:					[^ self error: 'Simulated message ' , (args at: 1) selector									, ' not understood'].				^ self activateMethod: meth					withArgs: args					receiver: rcvr					class: class]! !!ContextPart methodsFor: 'private' stamp: 'di 2/10/1999 22:25'!doPrimitive: primitiveIndex receiver: receiver args: arguments 	"Simulate a primitive method whose index is primitiveIndex.  The	simulated receiver and arguments are given as arguments to this message."	| value |	<primitive: 19> "Simulation guard"	"If successful, push result and return resuming context,		else ^ PrimitiveFailToken"	(primitiveIndex = 19) ifTrue:[		Debugger 			openContext: self			label:'Code simulation error'			contents: self shortStack].	(primitiveIndex = 80 and: [receiver isKindOf: ContextPart])		ifTrue: [^self push: (BlockContext new						home: receiver home						startpc: pc + 2						nargs: (arguments at: 1))].	(primitiveIndex = 81 and: [receiver isMemberOf: BlockContext])		ifTrue: [^receiver pushArgs: arguments from: self].	primitiveIndex = 83 "afr 9/11/1998 19:50"		ifTrue: [^ self send: arguments first to: receiver					with: arguments allButFirst					super: false].	primitiveIndex = 84 "afr 9/11/1998 19:50"		ifTrue: [^ self send: arguments first to: receiver					with: (arguments at: 2)					super: false].	arguments size > 6 ifTrue: [^ PrimitiveFailToken].	value _ receiver tryPrimitive: primitiveIndex withArgs: arguments.	value == PrimitiveFailToken		ifTrue: [^ PrimitiveFailToken]		ifFalse: [^ self push: value]! !!ContextPart methodsFor: 'private' stamp: 'di 2/10/1999 22:22'!tryPrimitiveFor: method receiver: receiver args: arguments 	"If this method has a primitive index, then run the primitive and return its result.	Otherwise (and also if the primitive fails) return PrimitiveFailToken,	as an indication that the method should be activated and run as bytecodes."	| primIndex |	(primIndex _ method primitive) = 0 ifTrue: [^ PrimitiveFailToken].	^ self doPrimitive: primIndex receiver: receiver args: arguments! !!ContextPart class methodsFor: 'simulation' stamp: 'di 2/10/1999 22:15'!initialize	"A unique object to be returned when a primitive fails during simulation"	PrimitiveFailToken _ Object new  ! !!ContextPart class methodsFor: 'simulation' stamp: 'di 2/10/1999 22:15'!primitiveFailToken	^ PrimitiveFailToken! !ContextPart initialize!