'From Squeak2.9alpha of 5 August 2000 [latest update: #3160] on 11 December 2000 at 7:37:41 am'!"Change Set:		various-swDate:			11 December 2000Author:			Scott Wallace* Fixes up two menus that got broken when MVCMenuMorph got dramatially changed a while back:  the script menu in a Viewer and the parts menu in a PartsWindow (though I also note that the latter is quite broken otherwise by the changed layout work.)* Adds cmd-c as a shortcut for copy-all-to-other-side in the the Change Sorter (when cursor is over the change-set-list pane).* Fixes things such that the prototypical BookMorph and TabbedPalettes are not saved full size in the Supplies Bin!!  (This bug crept in sometime recently as part of a seeming change to BookMorphs such that their bounds are not their fullBounds.  So the change here is that the logic for deciding whether to thumbnail or not now uses the fullBounds rather than the simple bounds.)* Fixes the comment in ChangeSet.checkForAlienAuthorship"!!ChangeSet methodsFor: 'fileIn/Out' stamp: 'sw 11/22/2000 05:44'!checkForAlienAuthorship	"Check to see if there are any methods in the receiver that have author initials other than that of the current author, and open a browser on all found"	| aList |	(aList _ self methodsWithInitialsOtherThan: Utilities authorInitials) size > 0		ifFalse:			[^ self inform: 'All methods in "', self name, '"have authoring stamps which start with "', Utilities authorInitials, '"']		ifTrue:			[Smalltalk browseMessageList: aList name: 'methods in "', self name, '" showe authoring stamps do not start with "', Utilities authorInitials, '"']! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 12/1/2000 13:45'!changeSetListKey: aChar from: view	"Respond to a Command key.  I am a model with a listView that has a list of changeSets."	aChar == $b ifTrue: [^ self browseChangeSet].	aChar == $f ifTrue: [^ self findCngSet].	aChar == $m ifTrue: [^ self newCurrent].	aChar == $n ifTrue: [^ self newSet].	aChar == $o ifTrue: [^ self fileOut].	aChar == $r ifTrue: [^ self rename].	aChar == $x ifTrue: [^ self remove].	aChar == $p ifTrue: [^ self addPreamble].	aChar == $c ifTrue: [^ self copyAllToOther].	^ self arrowKey: aChar from: view! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'sw 12/1/2000 13:44'!changeSetMenu: aMenu shifted: isShifted 	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"	aMenu title: 'Change Set:' , myChangeSet name.	isShifted ifTrue: [^ self shiftedChangeSetMenu: aMenu].	aMenu add: 'make changes go to me (m)' action: #newCurrent.	aMenu addLine.	aMenu add: 'new change set... (n)' action: #newSet.	aMenu add: 'find...(f)' action: #findCngSet.	aMenu add: 'show...' action: #chooseCngSet.	aMenu add: 'rename change set (r)' action: #rename.	aMenu addLine.	aMenu add: 'file out (o)' action: #fileOut.	aMenu add: 'mail to list' action: #mailOut.	aMenu add: 'browse methods (b)' action: #browseChangeSet.	aMenu addLine.	parent		ifNotNil: 			[aMenu add: 'copy all to other side (c)' action: #copyAllToOther.			aMenu add: 'submerge into other side' action: #submergeIntoOtherSide.			aMenu add: 'subtract other side' action: #subtractOtherSide.			aMenu addLine].	myChangeSet hasPreamble		ifTrue: 			[aMenu add: 'edit preamble (p)' action: #addPreamble.			aMenu add: 'remove preamble' action: #removePreamble]		ifFalse: [aMenu add: 'add preamble (p)' action: #addPreamble].	myChangeSet hasPostscript		ifTrue: 			[aMenu add: 'edit postscript...' action: #editPostscript.			aMenu add: 'remove postscript' action: #removePostscript]		ifFalse: [aMenu add: 'add postscript...' action: #editPostscript].	aMenu addLine.	aMenu add: 'destroy change set (x)' action: #remove.	aMenu addLine.	aMenu add: 'more...' action: #shiftedYellowButtonActivity.	^ aMenu! !!Morph methodsFor: 'thumbnail' stamp: 'sw 12/6/2000 21:28'!representativeNoTallerThan: maxHeight norWiderThan: maxWidth thumbnailHeight: thumbnailHeight	"Return a morph representing the receiver but which is no taller than aHeight.  If the receiver is already small enough, just return it, else return a MorphThumbnail companioned to the receiver, enforcing the maxWidth.  If the receiver personally *demands* thumbnailing, do it even if there is no size-related reason to do it."	self demandsThumbnailing ifFalse:		[self permitsThumbnailing ifFalse: [^ self].		(self fullBounds height <= maxHeight and: [self fullBounds width <= maxWidth]) ifTrue: [^ self]].	^ MorphThumbnail new extent: maxWidth @ (thumbnailHeight min: self fullBounds height); morphRepresented: self! !!PartsWindow methodsFor: 'as yet unclassified' stamp: 'sw 12/11/2000 07:33'!invokePartsWindowMenu	"Put up a menu offering parts-bin controls"	| aMenu sel |	aMenu _ MVCMenuMorph new.	aMenu defaultTarget: aMenu.	openForEditing		ifTrue:			[aMenu add: 'resume being a parts bin' selector: #selectMVCItem: argument:	#toggleStatus]		ifFalse:			[aMenu add: 'open for editing' selector: #selectMVCItem: argument:#toggleStatus].	aMenu add: 'sort pages'	selector: #selectMVCItem: argument: #sortPages.	aMenu add: 'save as Custom Parts Bin' selector: #selectMVCItem: argument: #saveAsCustomPartsBin.	sel _ aMenu invokeAt: self primaryHand position in: self world.	sel ifNotNil: [self perform: sel].! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 11/22/2000 10:38'!infoFor: anElement inViewer: aViewer	"The user made a gesture asking for info/menu relating"	| aMenu selector reply elementType |	elementType _ self elementTypeFor: anElement.	((elementType = #systemSlot) | (elementType == #userSlot))		ifTrue:	[^ self slotInfoButtonHitFor: anElement inViewer: aViewer].		self flag: #deferred.  "Use a traditional MenuMorph, and reinstate the pacify thing"	aMenu _ MVCMenuMorph new.	aMenu defaultTarget: aMenu.	(elementType == #userScript)		ifTrue: 			[aMenu add: 'destroy "', anElement, '"' selector: #selectMVCItem: argument: #removeScript.			aMenu add: 'rename  "', anElement, '"' selector: #selectMVCItem: argument:  #renameScript.			aMenu add: 'textual scripting pane'  selector: #selectMVCItem: argument: #makeIsolatedCodePaneFor.			"aMenu add: 'pacify "', anElement, '"' action: #pacifyScript"].	aMenu items size == 0 ifTrue:		[aMenu add: 'ok' action: nil].	aMenu addTitle: anElement asString, ' (', elementType, ')'.	selector _ anElement asSymbol.	reply _  aMenu invokeAt: aViewer primaryHand position in: aViewer world.	reply == nil ifTrue: [^ self].	reply == #removeScript ifTrue: [^ self removeScript: selector fromWorld: aViewer world].	reply == #renameScript ifTrue: [^ self renameScript:  selector].	reply == #makeIsolatedCodePaneFor ifTrue: 		[MethodHolder makeIsolatedCodePaneForClass: self class selector: selector].	reply == #pacifyScript ifTrue: [^ self pacifyScript: selector]! !