'From Squeak2.9alpha of 12 June 2000 [latest update: #2596] on 10 September 2000 at 10:18:52 pm'!"Change Set:		CurveCleanupDate:			9 September 2000Author:			Dan IngallsLocalizes the Polygon state associated with curves in a single variable, 'curveState'.  Also undoes an earlier change so that Curves will be instances of class Curve.  Removes obsolete instance variables."!BorderedMorph subclass: #PolygonMorph	instanceVariableNames: 'vertices closed filledForm arrows arrowForms smoothCurve borderDashSpec coeffs ptAfterFirst ptBeforeLast handles borderForm curveState '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!PolygonMorph subclass: #CurveMorph	instanceVariableNames: 'coefficients ntfPoint ntlPoint '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!!PolygonMorph methodsFor: 'smoothing' stamp: 'di 9/9/2000 13:24'!coefficients	"Compute an array for the coefficients.  This is copied from Flegal's old	code in the Spline class."	| length extras verts coefficients |	curveState ifNotNil: [^ curveState at: 1].	verts _ closed ifTrue: [vertices copyWith: vertices first]				ifFalse: [vertices].	length _ verts size.	extras _ 0.	coefficients _ Array new: 8.	1 to: 8 do: [:i | coefficients at: i put: (Array new: length + extras)].	1 to: 5 by: 4 do: 		[:k | 		1 to: length do:			[:i | (coefficients at: k)					at: i put: (k = 1						ifTrue: [(verts at: i) x asFloat]						ifFalse: [(verts at: i) y asFloat])].			1 to: extras do: [:i | (coefficients at: k)					at: length + i put: ((coefficients at: k)						at: i + 1)].			self derivs: (coefficients at: k)				first: (coefficients at: k + 1)				second: (coefficients at: k + 2)				third: (coefficients at: k + 3)].	extras > 0 		ifTrue: [1 to: 8 do: 					[:i | 					coefficients at: i put: ((coefficients at: i)											copyFrom: 2 to: length + 1)]].	curveState _ {coefficients. nil. nil}.	self computeNextToEndPoints.	^ coefficients! !!PolygonMorph methodsFor: 'smoothing' stamp: 'di 9/9/2000 13:23'!computeNextToEndPoints	| pointAfterFirst pointBeforeLast |	pointAfterFirst _ nil.	self lineSegmentsDo:		[:p1 :p2 | pointAfterFirst == nil ifTrue: [pointAfterFirst _ p2 asIntegerPoint].		pointBeforeLast _ p1 asIntegerPoint].	curveState at: 2 put: pointAfterFirst.	curveState at: 3 put: pointBeforeLast.! !!PolygonMorph methodsFor: 'smoothing' stamp: 'di 9/9/2000 13:25'!nextToFirstPoint  "For arrow direction"	smoothCurve		ifTrue: [curveState ifNil: [self coefficients].				^ curveState at: 2]		ifFalse: [^ vertices at: 2]! !!PolygonMorph methodsFor: 'smoothing' stamp: 'di 9/9/2000 13:24'!nextToLastPoint  "For arrow direction"	smoothCurve		ifTrue: [curveState ifNil: [self coefficients].				^ curveState at: 3]		ifFalse: [^ vertices at: vertices size - 1]! !!PolygonMorph methodsFor: 'private' stamp: 'di 9/9/2000 13:07'!curveBounds	| curveBounds pointAfterFirst pointBeforeLast |	smoothCurve ifFalse: [^ (Rectangle encompassing: vertices) expandBy: borderWidth+1//2].	"Compute the bounds from actual curve traversal, with leeway for borderWidth.	Also note the next-to-first and next-to-last points for arrow directions."	curveState _ nil.  "Force recomputation"	curveBounds _ vertices first corner: vertices last.	pointAfterFirst _ nil.	self lineSegmentsDo:		[:p1 :p2 | pointAfterFirst == nil ifTrue: [pointAfterFirst _ p2 asIntegerPoint].		curveBounds _ curveBounds encompass: p2 asIntegerPoint.		pointBeforeLast _ p1 asIntegerPoint].	curveState at: 2 put: pointAfterFirst.	curveState at: 3 put: pointBeforeLast.	^ curveBounds expandBy: borderWidth+1//2! !!PolygonMorph methodsFor: 'private' stamp: 'di 9/9/2000 13:07'!privateMoveBy: delta 	super privateMoveBy: delta.	vertices _ vertices collect: [:p | p + delta].	self arrowForms do: [:f | f offset: f offset + delta].	curveState _ nil.  "Force recomputation"! !!PolygonMorph methodsFor: 'private' stamp: 'di 9/9/2000 13:07'!releaseCachedState	super releaseCachedState.	filledForm _ nil.	arrowForms _ nil.	borderForm _ nil.	curveState _ nil.! !!PolygonMorph methodsFor: 'object fileIn' stamp: 'di 9/10/2000 22:14'!convertbosfcebbvcfaascpphb0: varDict bosfcebbvcfaascbhb0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor' 'vertices' 'closed' 'filledForm' 'arrows' 'arrowForms' 'smoothCurve' 'handles' 'borderForm').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('curveState' 'borderDashSpec')  If a non-nil value is needed, please assign it."	"These are going away #('coeffs' 'ptAfterFirst' 'ptBeforeLast').  Possibly store their info in another variable?"! !!PolygonMorph methodsFor: 'object fileIn' stamp: 'di 9/10/2000 22:12'!convertbosfcebbvcfqaahb0: varDict bosfcebbvcfaascbhb0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor' 'vertices' 'closed' 'filledForm' 'arrows' 'arrowForms' 'handles' 'borderForm').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('smoothCurve' 'curveState' 'borderDashSpec')  If a non-nil value is needed, please assign it."	"These are going away #('quickFill').  Possibly store their info in another variable?"	smoothCurve _ false.! !!CurveMorph methodsFor: 'initialization' stamp: 'di 9/10/2000 14:28'!initialize	super initialize.	self beSmoothCurve.! !!CurveMorph methodsFor: 'object fileIn' stamp: 'di 9/10/2000 22:14'!convertbosfcebbvcfaascpphbcnn0: varDict bosfcebbvcfaascbhb0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor' 'vertices' 'closed' 'filledForm' 'arrows' 'arrowForms' 'smoothCurve' 'handles' 'borderForm').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('curveState' 'borderDashSpec')  If a non-nil value is needed, please assign it."	"These are going away #('coeffs' 'ptAfterFirst' 'ptBeforeLast' 'coefficients' 'ntfPoint' 'ntlPoint').  Possibly store their info in another variable?"! !!CurveMorph methodsFor: 'object fileIn' stamp: 'di 9/10/2000 22:12'!convertbosfcebbvcfqaahbcnn0: varDict bosfcebbvcfaascbhb0: smartRefStrm	"These variables are automatically stored into the new instance #('bounds' 'owner' 'submorphs' 'fullBounds' 'color' 'extension' 'borderWidth' 'borderColor' 'vertices' 'closed' 'filledForm' 'arrows' 'arrowForms' 'handles' 'borderForm').	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"New variables: #('smoothCurve' 'curveState' 'borderDashSpec')  If a non-nil value is needed, please assign it."	"These are going away #('quickFill' 'coefficients' 'ntfPoint' 'ntlPoint').  Possibly store their info in another variable?"	smoothCurve _ true.! !CurveMorph class removeSelector: #new!CurveMorph class removeSelector: #vertices:color:borderWidth:borderColor:!PolygonMorph subclass: #CurveMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!!CurveMorph reorganize!('initialization' initialize)('object fileIn' convertbosfcebbvcfaascpphbcnn0:bosfcebbvcfaascbhb0: convertbosfcebbvcfqaahbcnn0:bosfcebbvcfaascbhb0: convertbosfcebbvcfqaahbcnn0:bosfcebbvcfaascpphbcnn0:)!BorderedMorph subclass: #PolygonMorph	instanceVariableNames: 'vertices closed filledForm arrows arrowForms smoothCurve curveState borderDashSpec handles borderForm '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Basic'!"Postscript:Force all Curves to recreate their state in the new format."PolygonMorph allSubInstancesDo: [:m | m releaseCachedState].!