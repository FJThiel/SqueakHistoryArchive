'From Squeak3.2alpha of 17 December 2001 [latest update: #4643] on 6 January 2002 at 1:48:29 am'!"Change Set:		StringMorphFontDate:			6 January 2002Author:			Andreas RaabAllow for changing the font of StringMorphs and their emphasis. The CS also adds StrikeFont>>fromUser and the ability to invoke Morphic menus modal without having to resort to MVCMenuMorphs etc."!!MenuMorph methodsFor: 'modal control' stamp: 'ar 1/5/2002 21:40'!invokeModal	"Invoke this menu and don't return until the user has chosen a value.	See example below on how to use modal menu morphs."	^self invokeModalAt: ActiveHand position in: ActiveWorld allowKeyboard: Preferences menuKeyboardControl.	"Example:	| menu sub entry |	menu _ MenuMorph new.	1 to: 3 do:[:i|		entry _ 'Line', i printString.		sub _ MenuMorph new.		menu add: entry subMenu: sub.		#('Item A' 'Item B' 'Item C')  do:[:subEntry|			sub add: subEntry target: menu 				selector: #modalSelection: argument: {entry. subEntry}]].	menu invokeModal."! !!MenuMorph methodsFor: 'modal control' stamp: 'ar 1/5/2002 21:33'!invokeModalAt: aPoint in: aWorld allowKeyboard: aBoolean	"Invoke this menu and don't return until the user has chosen a value.	See senders of this method for finding out how to use modal menu morphs."	| w |	self popUpAt: aPoint forHand: aWorld primaryHand in: aWorld allowKeyboard: aBoolean.	self isModalInvokationDone: false.	w _ aWorld outermostWorldMorph. "containing hand"	[self isInWorld & self isModalInvokationDone not] whileTrue: [w doOneSubCycle].	self delete.	^ self modalSelection! !!MenuMorph methodsFor: 'modal control' stamp: 'ar 1/5/2002 21:33'!isModalInvokationDone	^self valueOfProperty: #isModalInvokationDone ifAbsent:[false]! !!MenuMorph methodsFor: 'modal control' stamp: 'ar 1/5/2002 21:34'!isModalInvokationDone: aBool	self setProperty: #isModalInvokationDone toValue: aBool! !!MenuMorph methodsFor: 'modal control' stamp: 'ar 1/5/2002 21:34'!modalSelection	^self valueOfProperty: #modalSelection ifAbsent:[nil]! !!MenuMorph methodsFor: 'modal control' stamp: 'ar 1/5/2002 21:34'!modalSelection: anObject	self setProperty: #modalSelection toValue: anObject.	self isModalInvokationDone: true! !!StrikeFont class methodsFor: 'instance creation' stamp: 'ar 1/5/2002 21:41'!fromUser	"StrikeFont fromUser"	^self fromUser: TextStyle defaultFont! !!StrikeFont class methodsFor: 'instance creation' stamp: 'ar 1/5/2002 21:43'!fromUser: priorFont	"Present a menu of available fonts, and if one is chosen, return it."	| fontList fontMenu style active ptMenu label spec font |	fontList _ StrikeFont familyNames remove: 'DefaultTextStyle' ifAbsent: []; asOrderedCollection.	fontMenu _ MenuMorph new defaultTarget: self.	fontList do:[:fontName|		style _ TextStyle named: fontName.		active _ priorFont familyName sameAs: fontName.		ptMenu _ MenuMorph new defaultTarget: self.		style pointSizes do:[:pt|			(active and:[pt = priorFont pointSize]) 				ifTrue:[label _ '<on>'] 				ifFalse:[label _ '<off>'].			label _ label, pt printString, ' pt'.			ptMenu add: label 				target: fontMenu				selector: #modalSelection:				argument: {fontName. pt}.		].		active ifTrue:[label _ '<on>'] ifFalse:[label _ '<off>'].		label _ label, fontName.		fontMenu add: label subMenu: ptMenu.	].	spec _ fontMenu invokeModal.	spec ifNil:[^nil].	style _ TextStyle named: spec first.	style ifNil:[^self].	font _ style fonts detect:[:any| any pointSize = spec last] ifNone:[nil].	^font! !!StringMorph methodsFor: 'menu' stamp: 'ar 1/5/2002 21:22'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'change font' action: #changeFont.	aCustomMenu add: 'change emphasis' action: #changeEmphasis.! !!StringMorph methodsFor: 'menu' stamp: 'ar 1/5/2002 21:48'!changeEmphasis	| reply aList |	aList _ #(plain bold italic narrow underlined struckOut).	reply _ (SelectionMenu labelList: aList selections: aList) startUp.	reply ifNotNil:[		self emphasis: (TextEmphasis perform: reply) emphasisCode.	].! !!StringMorph methodsFor: 'menu' stamp: 'ar 1/5/2002 21:45'!changeFont	| newFont |	newFont _ StrikeFont fromUser: self fontToUse.	newFont ifNotNil:[self font: newFont].! !!TextMorphEditor methodsFor: 'attributes' stamp: 'ar 1/6/2002 01:36'!changeTextFont	"Present a menu of available fonts, and if one is chosen, apply it to the current selection."	| curFont newFont attr |	curFont _ (paragraph text fontAt: startBlock stringIndex withStyle: paragraph textStyle).	newFont _ StrikeFont fromUser: curFont.	newFont ifNil:[^self].	attr _ TextFontReference toFont: newFont.	paragraph text addAttribute: attr from: startBlock stringIndex to: (stopBlock stringIndex-1 min: paragraph text size).	paragraph composeAll.	self recomputeInterval.	morph changed.! !TextMorphEditor removeSelector: #fontSelectionNamed:pointSize:!!MenuMorph reorganize!('accessing' allWordings allWordingsNotInSubMenu: commandKeyHandler commandKeyHandler: defaultTarget hasSubMenu: itemWithWording: items lastItem lastSelection popUpOwner popUpOwner: rootMenu stayUp stayUp: titleGuesstimate)('construction' add:action: add:selector:argument: add:subMenu: add:subMenu:target:selector:argumentList: add:target:action: add:target:selector: add:target:selector:argument: add:target:selector:argumentList: addLine addList: addStayUpItem addStayUpItemSpecial addTitle: addTitle:updatingSelector:updateTarget: addUpdating:action: addUpdating:enablement:action: addUpdating:enablementSelector:target:selector:argumentList: addUpdating:target:action: addUpdating:target:selector:argumentList: addWithLabel:enablement:action: addWithLabel:enablementSelector:target:selector:argumentList: balloonTextForLastItem: defaultTarget: labels:lines:selections: title:)('control' activeSubmenu: deleteIfPopUp: isCandidateForAutomaticViewing popUpAdjacentTo:forHand:from: popUpAt:forHand:in: popUpAt:forHand:in:allowKeyboard: popUpEvent:in: popUpForHand:in: popUpInWorld popUpInWorld: popUpNoKeyboard selectItem:event: wantsToBeDroppedInto:)('modal control' invokeModal invokeModalAt:in:allowKeyboard: isModalInvokationDone isModalInvokationDone: modalSelection modalSelection:)('copying' veryDeepFixupWith: veryDeepInner:)('initialization' delete initialize setDefaultParameters setTitleParametersFor:)('layout')('menu' addCustomMenuItems:hand: addItem addTitle detachSubMenu: setInvokingView: setTarget: toggleStayUp: toggleStayUpIgnore:evt:)('private' invokeMetaMenu: morphicLayerNumber positionAt:relativeTo:inWorld: selectedItem)('events' activate: handleFocusEvent: handlesMouseDown: mouseDown: mouseUp:)('dropping/grabbing' justDroppedInto:event: undoGrabCommand)('keyboard control' displayFiltered: handlesKeyboard: keyStroke: keyboardFocusChange: moveSelectionDown:event:)('drawing' drawOn:)!