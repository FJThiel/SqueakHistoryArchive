'From Squeak2.7 of 5 January 2000 [latest update: #1788] on 15 January 2000 at 12:31:23 pm'!"Change Set:		imgSeg-tkMVDate:			15 January 2000Author:			Ted KaehlerSearch outPointers for methods and contexts.  Put them into the roots.  Nil out any remaining outpointers that are contexts."!!ImageSegment methodsFor: 'read/write segment' stamp: 'tk 1/15/2000 12:30'!copyFromRootsForExport: rootArray 	"Add to roots:  Any methods pointed to from the outside by blocks."	| newRoots list segSize |	arrayOfRoots _ rootArray.	Smalltalk forgetDoIts.  	(newRoots _ self rootsIncludingPlayers) ifNotNil: [		arrayOfRoots _ newRoots].		"world, presenter, and all Player classes"	"Creation of the segment happens here"	Smalltalk garbageCollect.	"get contexts with Players"	self copyFromRoots: arrayOfRoots sizeHint: 0.	segSize _ segment size *3 // 2.	[(newRoots _ self rootsIncludingBlockMethods) == nil] whileFalse: [		arrayOfRoots _ newRoots.		self copyFromRoots: arrayOfRoots sizeHint: segSize].	"with methods pointed at from outside"	[(newRoots _ self rootsIncludingBlocks) == nil] whileFalse: [		arrayOfRoots _ newRoots.		self copyFromRoots: arrayOfRoots sizeHint: segSize].	"with methods, blocks from outPointers"	list _ self compactClassesArray.	outPointers _ outPointers, (list select: [:cls | cls ~~ nil]),		(Array with: 1717 with: list).	"Zap sender of a homeContext. Can't send live stacks out."	1 to: outPointers size do: [:ii | 		(outPointers at: ii) class == BlockContext ifTrue: [outPointers at: ii put: nil].		(outPointers at: ii) class == MethodContext ifTrue: [outPointers at: ii put: nil]].! !!ImageSegment methodsFor: 'read/write segment' stamp: 'tk 1/15/2000 09:50'!rootsIncludingBlocks	"For export segments only.  Return a new roots array with more objects.  (Caller should store into rootArray.)  Collect Blocks and external methods pointed to by them.  Put them into the roots list.  Then ask for the segment again."	| extras have |	extras _ OrderedCollection new.	outPointers do: [:anOut | 		anOut class == CompiledMethod ifTrue: [extras add: anOut].		(anOut class == BlockContext) ifTrue: [extras add: anOut].		(anOut class == MethodContext) ifTrue: [extras add: anOut].		anOut _ nil].	"don't hang onto it"	extras isEmpty ifTrue: [^ nil].	"no change"	[have _ extras size.	 extras copy do: [:anOut |		(anOut class == BlockContext) ifTrue: [			anOut home ifNotNil: [extras add: anOut home]].		(anOut class == MethodContext) ifTrue: [			anOut method ifNotNil: [extras add: anOut method]]].	 have = extras size] whileFalse.	^ arrayOfRoots, extras! !