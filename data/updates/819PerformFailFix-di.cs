'From Squeak 2.3 of January 14, 1999 on 12 April 1999 at 12:25:08 pm'!"Change Set:		PerformFailFixDate:			11 April 1999Author:			Dan IngallsFixes a bug reported by Michal Starke.  The failure case of mismatched argument count was not being properly reported and, in some cases could cause a crash.Also now properly recovers from erroneous smallInteger arguments.Also fixed stack imbalance in case of recovering from perform that invokes doesNotUnderstand:."!!Interpreter methodsFor: 'control primitives' stamp: 'di 4/12/1999 11:38'!primitivePerform	| performSelector newReceiver selectorIndex lookupClass performMethod |	performSelector _ messageSelector.	performMethod _ newMethod.	messageSelector _ self stackValue: argumentCount - 1.	newReceiver _ self stackValue: argumentCount.	"NOTE: the following lookup may fail and be converted to #doesNotUnderstand:,		so we must adjust argumentCount and slide args now, so that would work."	"Slide arguments down over selector"	argumentCount _ argumentCount - 1.	selectorIndex _ self stackPointerIndex - argumentCount.	self transfer: argumentCount		fromIndex: selectorIndex + 1		ofObject: activeContext		toIndex: selectorIndex		ofObject: activeContext.	self pop: 1.	lookupClass _ self fetchClassOf: newReceiver.	self findNewMethodInClass: lookupClass.	self success: ((self argumentCountOf: newMethod) = argumentCount).	successFlag		ifTrue: [self executeNewMethod.  "Recursive xeq affects successFlag"				successFlag _ true]		ifFalse: ["Slide the args back up (sigh) and re-insert the selector."				1 to: argumentCount do:					[:i |					self storePointer: argumentCount-i+1+selectorIndex ofObject: activeContext						withValue:						(self fetchPointer: argumentCount-i+selectorIndex ofObject: activeContext)].				self unPop: 1.				self storePointer: selectorIndex ofObject: activeContext withValue: messageSelector.				argumentCount _ argumentCount + 1.				newMethod _ performMethod.				messageSelector _ performSelector]! !!Interpreter methodsFor: 'control primitives' stamp: 'di 4/12/1999 10:50'!primitivePerformAt: lookupClass	"Common routine used by perform:withArgs: and perform:withArgs:inSuperclass:"	"NOTE:  The case of doesNotUnderstand: is not a failure to perform.	The only failures are arg types and consistency of argumentCount."	| performSelector argumentArray arraySize index cntxSize performMethod performArgCount |	argumentArray _ self popStack.	self assertClassOf: argumentArray is: (self splObj: ClassArray).	successFlag ifTrue:		["Check for enough space to push all args"		arraySize _ self fetchWordLengthOf: argumentArray.		cntxSize _ self fetchWordLengthOf: activeContext.		self success: (self stackPointerIndex + arraySize) < cntxSize].	successFlag ifFalse: [^ self unPop: 1].	performSelector _ messageSelector.	performMethod _ newMethod.	performArgCount _ argumentCount.	messageSelector _ self popStack.	"Copy the arguments to the stack, and execute"	index _ 1.	[index <= arraySize]		whileTrue:		[self push: (self fetchPointer: index - 1 ofObject: argumentArray).		index _ index + 1].	argumentCount _ arraySize.	self findNewMethodInClass: lookupClass.	self success: (self argumentCountOf: newMethod) = argumentCount.	successFlag		ifTrue: [self executeNewMethod.  "Recursive xeq affects successFlag"				successFlag _ true]		ifFalse: ["Restore the state and fail"				self pop: argumentCount.				self push: messageSelector.				self push: argumentArray.				messageSelector _ performSelector.				newMethod _ performMethod.				argumentCount _ performArgCount]! !!Interpreter methodsFor: 'control primitives' stamp: 'di 4/12/1999 10:57'!primitivePerformInSuperclass	| lookupClass rcvr currentClass |	lookupClass _ self stackTop.	rcvr _ self stackValue: argumentCount.	currentClass _ self fetchClassOf: rcvr.	[currentClass ~= lookupClass]		whileTrue:		[currentClass _ self superclassOf: currentClass.		currentClass = nilObj ifTrue: [^ self primitiveFail]].	self popStack.	self primitivePerformAt: lookupClass.	successFlag ifFalse:		[self push: lookupClass]! !!Interpreter methodsFor: 'control primitives' stamp: 'di 4/12/1999 10:55'!primitivePerformWithArgs	| lookupClass rcvr |	rcvr _ self stackValue: argumentCount.	lookupClass _ self fetchClassOf: rcvr.	self primitivePerformAt: lookupClass.! !