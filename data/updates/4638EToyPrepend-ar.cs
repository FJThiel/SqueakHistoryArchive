'From Squeak3.2alpha of 17 December 2001 [latest update: #4634] on 28 December 2001 at 1:26:07 am'!"Change Set:		EToyPrepend-arDate:			27 December 2001Author:			Andreas RaabAdds a #prepend: operation for eToys - useful if you need to add a morph to a playfield which ought to be *in front* of all other morphs."!!EToyVocabulary methodsFor: 'language translations' stamp: 'ar 12/27/2001 00:04'!addGermanVocabulary	"Add a German etoy vocabulary"	self translateMethodInterfaceWordings: #((append:					'hänge an'				'Fügt ein Objekt in diesen Behälter ein')(prepend:					'hänge davor'				'Fügt ein Objekt in diesen Behälter ein')(beep:						'mache Geräusch'  				'Macht das angegebene Geräusch')(bounce:					'pralle ab'					'Läßt das Objekt vom Rand seines Behälters abprallen und spielt das angegebene Geräusch, wenn es außerhalb ist')(cameraPoint 				'Kamerapunkt'				'Der Kamerapunkt des Objektes') (clear 						'lösche Graph'						'Löscht den momentanen Graphen')(clearOwnersPenTrails		'lösche Stiftspuren im Eigner'	'Löscht alle Stiftspuren im Eigner')(clearTurtleTrails 			'lösche Stiftspuren' 		'Löscht all Stiftspuren im Objekt')(color:sees: 					'Farbe sieht'			'Überprüft, ob die angebene Farbe des Objektes die Testfarbe sehen kann')(deleteCard 					'lösche Karte'				'Löscht diese Karte aus dem Stapel')(doMenuItem: 				'führe Menüpunkt aus'	'Führt den angebenen Menüpunkt aus')(emptyScript 				'leeres Skript'				'Ein leeres Skript')(fire						'feuer'						'Führt alle zugehörigen Aktionen dieses Schalters aus')(firstPage 					'gehe zur ersten Seite'		'Geht zur ersten Seite')(followPath					'folge Pfad'					'Folge dem definierten Pfad')(forward: 					'gehe vorwärts um'		'Bewegt das Objekt vorwärts in seiner momentanen Richtung')(goToFirstCardInBackground	'gehe zur ersten Karte im Hintergund'	'Geht zur ersten Karte im momentanen Hintergrund')(goToFirstCardOfStack		'gehe zur ersten Karte im Stapel'	'Geht zur ersten Karte im Stapel')(goToLastCardInBackground	'gehe zur letzten Karte im Hintergund'	'Geht zur letzten Karte im momentanen Hintergrund')(goToLastCardOfStack		'gehe zur letzten Karte im Stapel'		'Geht zur letzten Karte im Stapel')(goToNextCardInStack		'gehe zur nächsten Karte im Stapel'		'Geht zur nächsten Karte im momentanen Hintergrund')(goToPreviousCardInStack	'gehe zur vorherigen Karte im Stapel'	'Geht zur vorherigen Karte im momentanen Hintergrund')(goToRightOf:				'plaziere rechts von'		'Setzt das Objekt rechts neben ein anderes')(goto:						'gehe zur Seite'		'Geht zur angegebenen Seite')(hide					'verstecke Dich'					'Versteckt das Objekt')(initiatePainting			'beginne neue Zeichnung'		'Beginnt eine neue Zeichnung')(insertCard				'erzeuge Karte'				'Erzeugt eine neue Karte und fügt sie ein.')(lastPage				'gehe zur letzten Seite'			'Geht zur letzten Seite')(liftAllPens				'nimm alle Stifte hoch'			'Nimmt alle Stifte hoch, die sich im Inneren befinden')(loadSineWave			'lade Sinuswelle'			'Lädt eine Sinuswelle als momentanen Graph')(loadSound:				'lade Geräusch'					'Lädt das angegebene Geräusch als momentanen Graph')(lowerAllPens			'setze alle Stifte ab'			'Setzt alle Stifte ab, die sich im Inneren befinden')(makeNewDrawingIn:	'beginne neue Zeichnung in'	'Beginnt eine neue Zeichnung im angegebenen Objekt')(moveToward:			'gehe in Richtung '				'Bewegt das Objekt in Richtung eines anderen Objektes')(nextPage				'gehe zur nächsten Seite'		'Geht zur nächsten Seite')(pauseScript:			'stoppe Skript'					'Hält ein Skript an')(play					'spiele Gerausch ab'				'Spielt den momentanen Graphen als Geräusch ab')(previousPage			'gehe zur vorherigen Seite'	'Geht zur vorherigen Seite')(removeAll				'entferne alles'				'Entfernt und löscht alle Elemente')(reverse				'umdrehen'						'Dreht den Inhalt des Graphen um')(roundUpStrays			'hole zurück'					'Holt alle Objekte zurück, falls sie sich irgendwo verstecken')(seesColor:				'sieht die Farbe'					'Überprüft, ob das Objekt die angegebene Farbe sieht')(show					'zeige Dich'						'Zeigt das Objekt')(shuffleContents			'mische Inhalt'					'Mischt alle Objekte zufällig')(stampAndErase			'stanze und lösche Dich'		'Fügt das Abbild des Objektes den Stiftspurent hinzu und löscht es anschließend.')(startScript:				'starte Skript'					'Beginnt die wiederholte Ausführung eines Skriptes')(stopScript:				'stoppe Script'				'Beendet die wiederholte Ausführung eines Skriptes')(tellAllSiblings:			'sage den Geschwistern'		'Sendet eine Nachricht zu allen Geschwistern des Objektes')(touchesA:				'berührt'					'Überprüft, ob ein Objekt des angegebenen Typs berührt wird')(turn:					'drehe Dich um'				'Ändert die Richtung des Objektes um den angegebenen Winkel')(unhideHiddenObjects	'zeige versteckte Objekte' 		'Zeigt alle versteckten Objekte an')(wearCostumeOf: 		'trage Kostüm von'				'Trägt das Kostüm eines anderen Objektes')(wrap					'wickel Dich rum'				'Wickelt das Objekt um den Rand seines Behälters')(getActWhen 			'Ausführungsstatus'	'Bestimmt, wann das Skript ausgeführt wird')(getAllButFirstCharacter	'Alle Buchstaben außer dem Ersten' 'Enthält alle Buchstaben außer dem Ersten')(getAmount				'Betrag'					'Der Betrag der Abweichung vom Zentrum')(getAngle				'Winkel'					'Der Winkel der Abweichung vom Zentrum')(getBorderColor			'Randfarbe'		'Die Farbe des Randes')(getBorderWidth			'Randbreite'		'Die Breite des Randes')(getBottom 				'untere Kante'					'Die untere Kante des Objektes')(getBrightnessUnder		'Helligkeit darunter'			'Die Helligkeit unter dem Zentrum des Objektes')(getCharacters			'Buchstaben'					'Die Buchstaben des Inhalts')(getColor				'Farbe' 					'Die Farbe des Objektes')(getColorUnder 			'Farbe darunter'			'Die Farbe unter dem Zentrum des Objektes')(getConePosition			'Membranposition'			'Die Position der Membran des Lautsprechers')(getCursor				'Zeiger'					'Der momentane Zeigerindex')(getDescending			'Absteigend'				'Bestimmt, ob der kleinste Wert zuerst gezeigt werden soll')(getDistance				'Distanz'				'Die Distanz zum Ursprung des Behälters')(getFirstCharacter		'Erster Buchstabe'		'Der erste Buchstabe des Inhalts')(getFirstElement			'Erstes Element'			'Das erste Element des Inhalts')(getFogColor				'Nebelfarbe'				'Die Farbe des Nebels')(getFogDensity			'Nebeldichte'			'Die Dichte des Nebels')(getFogRangeEnd		'Nebelanfang'			'Die Anfangsdistanz des Nebels')(getFogRangeStart		'Nebelende'				'Die Enddistanz des Nebels')(getFogType				'Nebeltyp'				'Der Typ des Nebels')(getGraphic				'Bild'					'Das Bild des Objektes')(getGraphicAtCursor		'Bild am Zeiger'			'Das Bild des Objektes am Zeiger')(getHeading				'Richtung'				'Die Richtung in die das Objekt weist')(getHeight				'Höhe'					'Die Höhe des Objektes')(getHolder				'Behälter'				'Der Behälter dieses Objekt')(getIndexInOwner		'Eignerindex' 			'Der Index des Objektes in seinem Eigner')"@@@: Folgendes sollte vermutlich die Hand und nicht die Maus referenzieren :@@@"(getIsUnderMouse		'ist Maus darüber'		'Überprüft, ob die Maus über dem Objekt ist')"@@@: Sollte vielleicht 'Griff' heissen, aber ich mag Knubbel :-) :@@@"(getKnobColor			'Knubbelfarbe'			'Die Farbe des Knubbels')(getLabel				'Beschriftung'			'Die Beschriftung des Objektes')(getLastValue			'letzter Wert'			'Der letzte Eingabewert')(getLeft					'linke Kante'			'Die linke Kante des Objektes')(getLeftRight			'links-rechts'			'Die horizontale Abweichung vom Zentrum')(getLuminanceUnder	'Leuchtkraft darunter'	'Die Leuchtkraft unter dem Objekt')(getMaxVal				'Maximalwert'			'Der maximale Wert des Reglers')(getMinVal				'Minimalwert'			'Der minimale Wert des Reglers')(getMouseX				'Maus X-Position'		'Die X Koordinate der Mausposition')(getMouseY				'Maus Y-Position'		'Die Y Koordinate der Mausposition')(getNewClone			'kopiere Dich'			'Erzeugt eine Kopie des Objektes')(getNumberAtCursor		'Zahl am Zeiger'			'Die Zahl am Zeiger')(getNumericValue		'Reglerwert'				'Der momentane Wert des Reglers')(getObtrudes				'ragt hinaus'			'Überprüft, ob das Objekt aus seinem Eigner herausragt')(getPenColor				'Stiftfarbe'				'Die Farbe des Stiftes')(getPenDown			'Stift unten'				'Der Status des Stiftes')(getPenSize				'Stiftgröße'			'Der Durchmesser des Stiftes')(getRight				'rechte Kante'			'Die rechte Kante des Objektes')(getRoundedCorners		'runde Ecken'			'Bestimmt, ob Ecken abgerundet werden')(getSampleAtCursor		'Stichprobe'				'Eine Stichprobe des Wertes an der momentanen Zeigerposition')(getSaturationUnder		'Sättigung darunter'	'Die Sättigung der Farbe unter dem Objekt')(getScaleFactor			'Skalierungsfaktor'		'Der Skalierungsfaktor des Objektes')(getTheta				'Theta'					'Der ''Zentrums-Ursprungs-Rechts'' Winkel (huh?)')(getTop					'obere Kante'			'Die obere Kante des Objekts')(getTruncate			'Abrunden'				'Bestimmt, ob nur ganze Zahlen benutzt werden')(getUpDown				'hoch-runter'			'Die vertikale Abweichung vom Zentrum')(getValueAtCursor		'Objekt am Zeiger'		'Das Objekt an der momentanen Zeigerposition')(getViewingByIcon 		'Symboldarstellung'		'Bestimmt, ob Objekte symbolisch oder normal dargestellt werden')(getX					'x'						'Die X Koordinate des Objektes')(getY					'y'						'Die Y Koordinate des Objektes')(getWidth				'Breite'					'Die Breite des Objektes')) language: #Deutsch.	self translateCategories: #((basic					Einfach					'Standardsicht')(#'book navigation'		#'Buchnavigation'		'Navigation in Büchern')(button					Schalter					'Das Objekt als Schalter')(collections				Behälter				'Das Objekt als Behälter')(fog					Nebel					'3D Nebel Eigenschaften')(geometry				Geometrie				'Zur Geometrie des Objektes')(#'color & border'		#'Farbe & Rand'			'Zum Thema Farben und Ränder')(graphics				Graphik					'Graphische Eigenschaften')(#'instance variables'	Variablen				'Variablen des Objektes')(joystick				Joystick					'Das Objekt als Joystick')(miscellaneous			Verschiedenes			'Alles was woanders nicht hinpaßt')(motion					Bewegung				'Bewegungseigenschaften')(paintbox				Malpalette				'Die Zeichenpalette')(#'pen trails'			Stiftspuren				'Alles zum Thema Spuren hinterlassen')(#'pen use'				Stifte					'Verwendung von Stiften')(playfield				Spielfeld				'ja ich weiß auch nicht...')(sampling				Messen					'Messungen von Werten')(scripts					Skripte					'Alle Deine Skripte')(slider					Regler					'Das Objekt als Regler')(speaker				Lautsprecher			'Das Objekt als Lautsprecher')(#'stack navigation'		Stapelnavigation		'Navigation in Stapeln')(storyboard				Storyboard				'Später mal...')(tests					Tests					'Verschiedene Tests')(text					Text						'Das Objekt als Text')(viewing				Betrachtung				'Wie man''s so sieht')(vector					Vektor					'Das Objekt als Vektor') ) language: #Deutsch! !!EToyVocabulary methodsFor: 'language translations' stamp: 'ar 12/27/2001 00:04'!templateForLanguageTranslation	"Edit this method such that the second element of each triplet has the translated wording and the third element has the translated help-message; give the edited method a name of the form #addLangVocabulary, and be sure to change the language name in the three places that it occurs, as #YourLanguage, below.A complete translation consists, as in #addKiswahiliVocabulary, of calls to three methods, namely:	translateMethodInterfaceWordings:language: 	translateCategories:language:	addToTranslationTableFrom:language: After editing this method into the one that holds your language translations, the next step is to edit #assureTranslationsAvailableFor: so that it calls the method you just created when appropriate.   Consult #addKiswahiliVocabulary and its sender for a complete example to emulate."	self translateMethodInterfaceWordings: #((append: 'append' 'Add the object to my content')(prepend: 'prepend' 'Add the object to my content')(beep: 'make sound' 'Make the specified sound')(bounce: 'bounce' 'bounce off the edge if hit')(cameraPoint #cameraPoint 'the camera point')(clear 'clear' 'Clear the graph of current contents')(clearOwnersPenTrails 'clear all pen trails' 'clear all pen trails in my containing playfield')(clearTurtleTrails 'clear pen trails' 'Clear all the pen trails in the interior.')(color:sees: 'color  sees' 'whether the given color sees the given color')(deleteCard 'deleteCard' 'Delete the current card')(doMenuItem: 'do menu item' 'do the menu item')(doScript: 'do' 'run the given script once, on the next tick')(emptyScript 'emptyScript' 'an empty script')(fire 'fire' 'trigger any and all of this object''s button actions')(firstPage 'firstPage' 'go to first page')(followPath 'followPath' 'follow the yellow brick road')(forward: 'forward by' 'Moves the object forward in the direction it is heading')(getActWhen #actWhen 'When the script should fire')(getAllButFirstCharacter #allButFirst 'All my characters except the first one')(getAmount #amount 'The amount of displacement')(getAngle #angle 'The angular displacement')(getBorderColor #borderColor 'The color of the object''s border')(getBorderWidth #borderWidth 'The width of the object''s border')(getBottom #bottom 'The bottom edge')(getBrightnessUnder #brightnessUnder 'The brightness under the center of the object')(getCharacters #characters 'The characters in my contents')(getColor #color 'The color of the object')(getColorUnder #colorUnder 'The color under the center of the object')(getConePosition #conePosition 'the position of the speaker cone')(getCursor #cursor 'The current cursor location, wrapped back to the beginning if appropriate')(getDescending #descending 'Tells whether the smallest value is at the top/left (descending = false) or at the bottom/right (descending = true)')(getDistance #distance 'The length of the vector connecting the origin to the object''s position')(getFirstCharacter #firstCharacter 'The first character in my contents')(getFirstElement #firstElement 'The first object in my contents')(getFogColor #fogColor 'The color of fog being applied')(getFogDensity #fogDensity 'The density of fog being applied')(getFogRangeEnd #fogRangeEnd 'The range start of fog being applied')(getFogRangeStart #fogRangeStart 'The range start of fog being applied')(getFogType #fogType 'The type of fog being applied')(getGraphic #graphic 'The picture currently being worn')(getGraphicAtCursor #graphicAtCursor 'the graphic worn by the object at the cursor')(getHeading #heading 'Which direction the object is facing.  0 is straight up')(getHeight #height 'The height')(getHolder #holder 'the object''s container')(getIndexInOwner #elementNumber 'my index in my container')(getIsUnderMouse #isUnderMouse 'whether the object is under the current mouse position')(getKnobColor #knobColor 'The color of the slider')(getLabel #label 'The wording on the button')(getLastValue #lastValue 'The last value obtained')(getLeft #left 'The left edge')(getLeftRight #leftRight 'The horizontal displacement')(getLuminanceUnder #luminanceUnder 'The luminance under the center of the object')(getMaxVal #maxVal 'The number represented when the knob is at the right or bottom of the slider; the largest value returned by the slider.')(getMinVal #minVal 'The number represented when the knob is at the left or top of the slider; the smallest value returned by the slider.')(getMouseX #mouseX 'The x coordinate of the mouse pointer')(getMouseY #mouseY 'The y coordinate of the mouse pointer')(getNewClone #copy 'returns a copy of this object')(getNumberAtCursor #numberAtCursor 'the number at the cursor')(getNumericValue #numericValue 'A number representing the current position of the knob.')(getObtrudes #obtrudes 'whether the object sticks out over its container''s edge')(getPenColor #penColor 'the color of ink used by the pen')(getPenDown #penDown 'whether the pen is currently down')(getPenSize #penSize 'the width of the pen')(getRight #right 'The right edge')(getRoundedCorners #roundedCorners 'Whether corners should be rounded')(getSampleAtCursor #sampleAtCursor 'The sample value at the current cursor location')(getSaturationUnder #saturationUnder 'The saturation under the center of the object')(getScaleFactor #scaleFactor 'The factor by which the object is magnified')(getTheta #theta 'The angle between the positive x-axis and the vector connecting the origin to the object''s position')(getTop #top 'The top edge')(getTruncate #truncate 'If true, only whole numbers are used as values; if false, fractional values are allowed.')(getUpDown #upDown 'The vertical displacement')(getValueAtCursor #playerAtCursor 'the object currently at the cursor')(getViewingByIcon #viewingNormally 'whether contents are viewed normally')(getWidth #width 'The width')(getX #x 'The x coordinate')(getY #y 'The y coordinate')(goToFirstCardInBackground 'goToFirstCardInBackground' 'Go to the first card of the current background')(goToFirstCardOfStack 'goToFirstCardOfStack' 'Go to the first card of the entire stack')(goToLastCardInBackground 'goToLastCardInBackground' 'Go to the last card of the current background')(goToLastCardOfStack 'goToLastCardOfStack' 'Go to the last card of the entire stack')(goToNextCardInStack 'goToNextCardInStack' 'Go to the next card')(goToPreviousCardInStack 'goToPreviousCardInStack' 'Go to the previous card')(goToRightOf: 'align after' 'place this object to the right of another')(goto: 'goto:' 'go to the given page')(hide 'hide' 'make the object invisible')(initiatePainting 'initiatePainting' 'Initiate painting of a new object in the standard playfield.')(insertCard 'insertCard' 'Create a new card')(lastPage 'lastPage' 'go to last page')(liftAllPens 'lift all pens' 'Lift the pens on all the objects in my interior.')(loadSineWave 'loadSineWave' 'Load a sine wave as the current graph')(loadSound: 'loadSound:' 'Load the specified sound into the current graph')(lowerAllPens 'lower all pens' 'Lower the pens on all the objects in my interior.')(makeNewDrawingIn: 'start painting in' 'make a new drawing in the specified playfield')(moveToward: 'move toward' 'move toward the given object')(nextPage 'nextPage' 'go to next page')(pauseAll: 'pause all' 'make the given script be "paused" in the object and all of its siblings')(pauseScript: 'pause script' 'make the given script be "paused"')(play 'play' 'Play the current graph as a sound')(previousPage 'previousPage' 'go to previous page')(removeAll 'removeAll' 'Remove all elements from the playfield')(reverse 'reverse' 'Reverse the graph')(roundUpStrays 'roundUpStrays' 'Bring all out-of-container subparts back into view.')(seesColor: #isOverColor 'whether any part of the object is over the given color')(show 'show' 'make the object visible')(shuffleContents 'shuffleContents' 'Shuffle the contents of the playfield')(stampAndErase 'stampAndErase' 'add my image to the pen trails and go away')(startAll: 'start All' 'start the given script ticking in the object and all of its siblings.')(startScript: 'start script' 'start the given script ticking')(stopAll: 'stop all' 'make the given script be "normal" in the object and all of its siblings')(stopScript: 'stop script' 'make the given script be "normal"')(tellAllSiblings: 'tell all siblings' 'send a message to all siblings')(touchesA: #touchesA 'whether I touch something that looks like...')(turn: 'turn by' 'Change the heading of the object by the specified amount')(unhideHiddenObjects 'unhideHiddenObjects' 'Unhide all hidden objects.')(wearCostumeOf: 'look like' 'wear the costume of...')(wrap 'wrap' 'wrap off the edge if appropriate')) language: #YourLanguage.	self translateCategories: #((basic					'basic'					'a few important things')(#'book navigation'		'book navigation'		'relating to book, stacks, etc')(button					'button'					'for thinking of this object as a push-button control')(collections				'collections'				'for thinking of this object as a collection')(fog					'fog'					'3D fog')(geometry				'geometry' 				'measurements and coordinates')(#'color & border'		'color & border'			'matters concerning the colors and borders of objects')(graphics				'graphics'				'for thinking of this object as a picture')(#'instance variables'	'instance variables'		'instance variables added by this object')(joystick				'joystick	'				'the object as a Joystick')(miscellaneous			'miscellaneous' 			'various commands')(scripting				'scripting'				'commands to start and stop scripts, etc.')(motion					'motion' 				'matters relating to moving and turning')(paintbox				'paintbox'				'the painting palette')(#'pen trails'			'pen trails'				'relating to trails put down by pens')(#'pen use'				'pen use' 				'use of an object''s "pen"')(playfield				'playfield'				'the object as a container for other visible objects')(sampling				'sampling'				'sampling')(scripts					'scripts'					'methods added by this object')(slider					'slider'					'functions useful to sliders')(speaker				'speaker'				'the object as an audio Speaker')(#'stack navigation'		'stack navigation'		'navigation within a stck')(storyboard				'storyboard'				'storyboard')(tests					'tests'					'yes/no tests, to use in "Test" panes of scripts')(text					'text'					'The object as text')(viewing				'viewing'				'matters relating to viewing')(vector					'vector'					'The object as a vector') ) language: #YourLanguage.	self addToTranslationTableFrom: #((:						'_'						'assign value')(Incr:					'increase by'			'increase value by')(Decr:					'decrease by'			'decrease value by')(Mult:					'multiply by'			'multiply value by')) language: #YourLanguage! !!Morph class methodsFor: 'scripting' stamp: 'ar 12/27/2001 00:04'!helpContributions	"Answer a list of pairs of the form (<symbol> <help message> ) to contribute to the system help dictionary"	"NB: Many of the items here are not needed any more since they're specified as part of command definitions now.  Someone needs to take the time to go through the list and remove items no longer needed.  But who's got that kind of time?"	^ #(		(acceptScript:for:			'submit the contents of the given script editor as the code defining the given selector')		(actorState			'return the ActorState object for the receiver, creating it if necessary')		(addInstanceVariable			'start the interaction for adding a new instance variable to the receiver')		(addPlayerMenuItemsTo:hand:			'add player-specific menu items to the given menu, on behalf of the given hand.  At present, these are only commands relating to the turtle')		(addYesNoToHand			'Press here to tear off a  TEST/YES/NO unit which you can drop into your script')		(allScriptEditors			'answer a list off the extant ScriptEditors for the receiver')		(amount			'The amount of displacement')		(angle				'The angular displacement')		(anonymousScriptEditorFor:			'answer a new ScriptEditor object to serve as the place for scripting an anonymous (unnamed, unsaved) script for the receiver')		(append:			'add an object to this container')		(prepend:			'add an object to this container')		(assignDecrGetter:setter:amt:			'evaluate the decrement variant of assignment')		(assignGetter:setter:amt:			'evaluate the vanilla variant of assignment')		(assignIncrGetter:setter:amt:			'evalute the increment version of assignment')		(assignMultGetter:setter:amt:			'evaluate the multiplicative version of assignment')		(assureEventHandlerRepresentsStatus			'make certain that the event handler associated with my current costume is set up to conform to my current script-status')		(assureExternalName			'If I do not currently have an external name assigned, get one now')		(assureUniClass			'make certain that I am a member a uniclass (i.e. a unique subclass); if I am not, create one now and become me into an instance of it')		(availableCostumeNames			'answer a list of strings representing the names of all costumes currently available for me')		(availableCostumesForArrows			'answer a list of actual, instantiated costumes for me, which can be cycled through as the user hits a next-costume or previous-costume button in a viewer')		(beep:			'make the specified sound')		(borderColor			'The color of the object''s border')		(borderWidth			'The width of the object''s border')		(bottom			'My bottom edge, measured downward from the top edge of the world')		(bounce:			'If object strayed beyond the boundaries of its container, make it reflect back into it, making the specified noise while doing so.')		(bounce			'If object strayed beyond the boundaries of its container, make it reflect back into it')		(chooseTrigger'When this script should run."normal" means "only when called"')		(clearTurtleTrails			'Clear all the pen trails in the interior.')		(clearOwnersPenTrails			'Clear all the pen trails in my container.')		(color				'The object''s interior color')		(colorSees			'Whether a given color in the object is over another given color')		(colorUnder			'The color under the center of the object')		(copy			'Return a new object that is very much like this one')		(cursor				'The index of the chosen element')		(deleteCard			'Delete the current card.')		(dismiss			'Click here to dismiss me')		(doMenuItem:			'Do a menu item, the same way as if it were chosen manually')		(doScript:			'Perform the given script once, on the next tick.')		(elementNumber			'My element number as seen by my owner')		(fire			'Run any and all button-firing scripts of this object')		(firstPage			'Go to first page of book')		(followPath				'Retrace the path the object has memorized, if any.')		(forward:			'Moves the object forward in the direction it is heading') 		(goto:			'Go to the specfied book page')		(goToNextCardInStack			'Go to the next card')		(goToPreviousCardInStack			'Go to the previous card.')		(goToRightOf:			'Align the object just to the right of any specified object.')		(heading			'Which direction the object is facing.  0 is straight up') 		(height				'The distance between the top and bottom edges of the object')		(hide			'Make the object so that it does not display and cannot handle input')		(initiatePainting				'Initiate painting of a new object in the standard playfield.')		(initiatePaintingIn:			'Initiate painting of a new object in the given place.')		(isOverColor			'Whether any part of this object is directly over the specified color')		(isUnderMouse			'Whether any part of this object is beneath the current mouse-cursor position')		(lastPage			'Go to the last page of the book.')		(left			'My left edge, measured from the left edge of the World')		(leftRight			'The horizontal displacement')		(liftAllPens			'Lift the pens on all the objects in my interior.')		(lowerAllPens			'Lower the pens on all the objects in my interior.')		(mouseX			'The x coordinate of the mouse pointer')		(mouseY			'The y coordinate of the mouse pointer')		(moveToward:			'Move in the direction of another object.')		(insertCard			'Create a new card.')		(nextPage			'Go to next page.')		(numberAtCursor			'The number held by the object at the chosen element')		(objectNameInHalo			'Object''s name -- To change: click here, edit, hit ENTER')		(obtrudes			'Whether any part of the object sticks out beyond its container''s borders')		(offerScriptorMenu			'The Scriptee.Press here to get a menu')		(pauseScript:			'Make a running script become paused.')		(penDown			'Whether the object''s pen is down (true) or up (false)')		(penColor			'The color of the object''s pen')		(penSize				'The size of the object''s pen')		(clearPenTrails			'Clear all pen trails in the current playfield')		(playerSeeingColorPhrase			'The player who "sees" a given color')		(previousPage			'Go to previous page')		(show			'If object was hidden, make it show itself again.')		(startScript:			'Make a script start running.')		(stopScript:			'Make a script stop running.')		(top			'My top edge, measured downward from the top edge of the world')		(right			'My right edge, measured from the left edge of the world')		(roundUpStrays			'Bring all out-of-container subparts back into view.')		(scaleFactor			'The amount by which the object is scaled')		(stopScript:			'make the specified script stop running')		(tellAllSiblings:			'send a message to all of my sibling instances')		(try			'Run this command once.')		(tryMe			'Click here to run this script once; hold button down to run repeatedly')		(turn:							'Change the heading of the object by the specified amount')		(unhideHiddenObjects			'Unhide all hidden objects.')		(upDown			'The vertical displacement')		(userScript			'This is a script defined by you.')		(userSlot			'This is an instance variable defined by you.  Click here to change its type')		(valueAtCursor			'The chosen element')		(wearCostumeOf:			'Wear the same kind of costume as the other object')		(width				'The distance between the left and right edges of the object')		(wrap			'If object has strayed beond the boundaries of its container, make it reappear from the opposite edge.')		(x			'The x coordinate, measured from the left of the container')		(y			'The y-coordinate, measured upward from the bottom of the container')		)! !!PasteUpMorph class methodsFor: 'scripting' stamp: 'ar 12/27/2001 00:05'!additionsToViewerCategories	"Answer a list of (<categoryName> <list of category specs>) pairs that characterize the phrases this kind of morph wishes to add to various Viewer categories."	^ # ((playfield ((command initiatePainting 'Initiate painting of a new object in the standard playfield.')(slot mouseX 'The x coordinate of the mouse pointer' Number readWrite Player getMouseX  unused unused)(slot mouseY 'The y coordinate of the mouse pointer' Number readWrite Player getMouseY  unused unused)(command roundUpStrays 'Bring all out-of-container subparts back into view.')(slot numberAtCursor 'the Number at the cursor' Number readWrite Player getNumberAtCursor Player setNumberAtCursor: )(slot playerAtCursor 'the object currently at the cursor' Player readWrite Player getValueAtCursor  unused unused)(slot graphicAtCursor 'the graphic worn by the object at the cursor' Graphic readOnly Player getGraphicAtCursor  unused unused)(command unhideHiddenObjects 'Unhide all hidden objects.')))(collections ((slot cursor 'The index of the chosen element' Number readWrite Player getCursor Player setCursorWrapped:)(slot playerAtCursor 'the object currently at the cursor' Player readWrite Player getValueAtCursor  unused unused)(slot firstElement  'The first object in my contents' Player  readWrite Player getFirstElement  Player  setFirstElement:)(slot NumberAtCursor 'the number at the cursor' Number readWrite Player getNumberAtCursor Player setNumberAtCursor: )(slot graphicAtCursor 'the graphic worn by the object at the cursor' Graphic readOnly Player getGraphicAtCursor  unused unused)(command removeAll 'Remove all elements from the playfield')(command shuffleContents 'Shuffle the contents of the playfield')(command append: 'Add the object to my content' Player)(command prepend: 'Add the object to my content' Player)))(#'stack navigation' ((command goToNextCardInStack 'Go to the next card')(command goToPreviousCardInStack  'Go to the previous card')(command goToFirstCardInBackground 'Go to the first card of the current background')(command goToFirstCardOfStack 'Go to the first card of the entire stack')(command goToLastCardInBackground 'Go to the last card of the current background')(command goToLastCardOfStack 'Go to the last card of the entire stack')(command deleteCard 'Delete the current card')(command insertCard 'Create a new card')))(viewing ((slot viewingNormally 'whether contents are viewed normally' Boolean readWrite Player getViewingByIcon Player setViewingByIcon: )))(#'pen trails' ((command liftAllPens 'Lift the pens on all the objects in my interior.')(command lowerAllPens  'Lower the pens on all the objects in my interior.')(command arrowheadsOnAllPens  'Put arrowheads on the ends of strokes of pens on all objects.')(command noArrowheadsOnAllPens  'Stop putting arrowheads on the ends of strokes of pens on all objects.')(command clearTurtleTrails 'Clear all the pen trails in the interior.'))))! !!Player methodsFor: 'slots-kernel' stamp: 'ar 12/27/2001 00:05'!usableMethodInterfacesIn: methodInterfaceList	"Filter the list given by methodInterfaceList, to remove items inappropriate to the receiver"	self hasCostumeThatIsAWorld ifTrue:		[^ methodInterfaceList select: [:anInterface |			#(append: prepend: beep: clearTurtleTrails doScript: getColor "color" getCursor "cursor" deleteCard doMenuItem emptyScript firstPage goToFirstCardInBackground goToFirstCardOfStack goToLastCardInBackground goToLastCardOfStack goToNextCardInStack goToPreviousCardInStack initiatePainting insertCard  liftAllPens lowerAllPens arrowheadsOnAllPens noArrowheadsOnAllPens getMouseX getMouseY "mouseX mouseY" pauseScript: reverse roundUpStrays shuffleContents startScript: stopScript: unhideHiddenObjects getValueAtCursor "valueAtCursor"startAll: pauseAll: stopAll:  viewAllMessengers clobberAllMessengers openAllScriptsTool handScriptControlButtons viewAllReferencedObjects jumpToProject:)includes: anInterface selector]].	self hasAnyBorderedCostumes ifTrue: [^ methodInterfaceList].	^ self hasOnlySketchCostumes		ifTrue:			[methodInterfaceList select: [:anInterface | (#(getColor getSecondColor getBorderColor getBorderWidth getBorderStyle  getRoundedCorners getUseGradientFill getRadialGradientFill ) includes: anInterface selector) not]]		ifFalse:			[methodInterfaceList select: [:anInterface | (#(getBorderColor getBorderWidth) includes: anInterface selector) not]]! !!Player methodsFor: 'scripts-standard' stamp: 'ar 12/27/2001 00:03'!prepend: aPlayer	"Add aPlayer to the list of objects logically 'within' me.  This is visually represented by its morph becoming my costume's first submorph.   Also allow text to be prepended."	| aCostume |	(aPlayer == nil or: [aPlayer == self]) ifTrue: [^ self].	(aPlayer class == Text or: [aPlayer class == String]) ifTrue: [		self costume class == TextFieldMorph 			ifTrue: [^ self costume prepend: aPlayer]			ifFalse: [^ self]].	(aCostume _ self costume topRendererOrSelf) addMorphFront:  aPlayer costume.	aPlayer costume goHome.  "assure it's in view"	(aCostume isKindOf: PasteUpMorph) ifTrue:		[self setCursor: (aCostume submorphs indexOf: aPlayer costume)]! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'ar 12/27/2001 00:05'!wordingForOperator: aString	"Answer the wording to be seen by the user for the given operator symbol/string"	| toTest |	"StandardScriptingSystem initialize"	toTest _ aString asString.	#(	(append:				'append')		(prepend:				'prepend')		(beep:					'make sound')		(bounce:				'bounce')		(clearTurtleTrails		'clear pen trails')		(clearOwnersPenTrails	'clear all pen trails')		(colorSees				'color  sees')		(color:sees:				'color sees')		(doMenuItem:			'do menu item')		(doScript:				'do')		(forward:				'forward by')		(moveToward:			'move toward')		(goToRightOf:			'align after')		(isDivisibleBy:			'is divisible by')		(liftAllPens				'lift all pens')		(lowerAllPens			'lower all pens')		(arrowheadsOnAllPens	'arrowheads on all pens')		(noArrowheadsOnAllPens	'no arrowheads on pens')		(pauseAll:				'pause all')		(pauseScript:			'pause script')		(max:					'max')		(min:					'min')		(seesColor:				'is over color')		(makeNewDrawingIn:	'start painting in')		(startAll:				'start all')		(startScript:				'start script')		(stopProgramatically	'stop')		(stopAll:					'stop all')		(stopScript:				'stop script')		(tellAllSiblings:			'tell all')		(turn:					'turn by')		(wearCostumeOf:		'look like'))	do:		[:pair | toTest = pair first ifTrue: [^ pair second]].	^ toTest! !!Text methodsFor: 'accessing' stamp: 'ar 12/27/2001 00:03'!prepend: stringOrText	self replaceFrom: 1 to: 0 with: stringOrText! !!TextFieldMorph methodsFor: 'just like textMorph' stamp: 'tk 9/6/2000 11:03'!append: stringOrText	"add to my text"	| tm |	(tm _ self findA: TextMorph) ifNil: [^ nil].	tm contents append: stringOrText.	tm releaseParagraph; paragraph.	! !!TextFieldMorph methodsFor: 'just like textMorph' stamp: 'ar 12/27/2001 00:03'!prepend: stringOrText	"add to my text"	| tm |	(tm _ self findA: TextMorph) ifNil: [^ nil].	tm contents prepend: stringOrText.	tm releaseParagraph; paragraph.	! !