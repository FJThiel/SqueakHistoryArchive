'From Squeak 2.3 beta of Nov 25, 1998 on 23 December 1998 at 11:05:26 am'!"Change Set:		FasterWipesNMoreDate:			23 December 1998Author:			Dan IngallsMakes transitions faster by dropping the morphic intercycle delay during effects.Also fixes and problem that caused pages to appear with an offset after a book had been moved and before the pages had been shown again for the first time."!!BookMorph methodsFor: 'navigation' stamp: 'di 12/23/1998 10:59'!goToPage: pageNumber transitionSpec: transitionSpec	| pageIndex  aWorld oldPageNumber ascending newPage tSpec |	pages isEmpty ifTrue: [^ self].	pageIndex _ pageNumber asInteger.	pageNumber < 1 ifTrue: [pageIndex _ pages size].	pageNumber > pages size ifTrue: [pageIndex _ 1].	newPage _ pages at: pageIndex.	tSpec _ transitionSpec ifNil:  "If transition not specified by requestor..."		[newPage valueOfProperty: #transitionSpec  " ... then consult new page"			ifAbsent: [self transitionSpecFor: self  " ... otherwise this is the default"]].	oldPageNumber _ pages indexOf: currentPage ifAbsent: [nil].	ascending _ ((oldPageNumber == nil) or: [newPage == currentPage])			ifTrue: [nil]			ifFalse: [oldPageNumber < pageIndex].	(aWorld _ self world) ifNotNil:		[self primaryHand newKeyboardFocus: nil].	self currentPage ~~ nil		ifTrue:		[(((pages at: pageIndex) owner isKindOf: TransitionMorph)			and: [(pages at: pageIndex) isInWorld])			ifTrue: [^ self  "In the process of a prior pageTurn"].		self currentPlayerDo: [:aPlayer | aPlayer runAllClosingScripts].		ascending ifNotNil:			["Show appropriate page transition and start new page when done"			currentPage stopStepping.			(pages at: pageIndex) position: currentPage position.			^ (TransitionMorph					effect: tSpec second					direction: tSpec third					inverse: ascending not)				showTransitionFrom: currentPage				to: (pages at: pageIndex)				in: self				whenStart: [self playPageFlipSound: tSpec first]				whenDone:					[currentPage delete; fullReleaseCachedState.					self addMorphBack: (currentPage _ pages at: pageIndex).					self snapToEdgeIfAppropriate.					aWorld ifNotNil: [self world startSteppingSubmorphsOf: currentPage].					self currentPlayerDo: [:aPlayer | aPlayer runAllOpeningScripts].					(aWorld _ self world) ifNotNil: ["WHY??" aWorld displayWorld]]].		"No transition, but at least decommission current page"		currentPage delete; fullReleaseCachedState].	self addMorphBack: (currentPage _ pages at: pageIndex).	self snapToEdgeIfAppropriate.	aWorld ifNotNil: [self world startSteppingSubmorphsOf: currentPage].	self currentPlayerDo: [:aPlayer | aPlayer runAllOpeningScripts].	(aWorld _ self world) ifNotNil: ["WHY??" aWorld displayWorld].! !!TransitionMorph methodsFor: 'initialization' stamp: 'di 12/23/1998 10:57'!initiateReplacement	| n |	startForm _ effect = #dissolve		ifTrue: [(startMorph imageForm: 16 forRectangle: bounds) offset: 0@0]		ifFalse: [(startMorph imageFormForRectangle: bounds) offset: 0@0].	endForm _ (endMorph imageFormForRectangle: bounds) offset: 0@0.	nSteps == nil ifTrue:		[self nSteps: 30 stepTime: 10.		(#(zoom pageForward pageBack) includes: effect) ifTrue:			[n _ 20 * 100000 // self bounds area min: 20 max: 4.			self nSteps: n stepTime: 10].		(#dissolve = effect) ifTrue:			[n _ 20 * 50000 // self bounds area min: 20 max: 4.			self nSteps: n stepTime: 10]].	startBlock value.  "with forms in place there should b no further delay."	self arrangeToStartStepping.	[stepNumber <= nSteps] whileTrue:		[self world interCyclePause: 10; doOneCycleNow].! !!WorldMorph methodsFor: 'interaction loop' stamp: 'di 12/23/1998 10:54'!doOneCycle	self interCyclePause: MinCycleLapse.	self doOneCycleNow.! !!WorldMorph methodsFor: 'interaction loop' stamp: 'di 12/23/1998 09:58'!interCyclePause: milliSecs	"delay enough that the next interaction cycle won't happen too soon after the original; thus, if all the system is doing is polling for interaction, the overall CPU usage of Squeak will be low"	| currentTime wait |	lastCycleTime ifNotNil: [ 		currentTime _ Time millisecondClockValue.		wait _ lastCycleTime + milliSecs - currentTime.		wait > 0 ifTrue: [ 			wait < milliSecs  "big waits happen after a snapshot"				ifTrue: [ (Delay forMilliseconds: wait) wait ]. ]. ].! !WorldMorph removeSelector: #interCyclePause!