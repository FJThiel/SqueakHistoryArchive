'From Squeak3.1alpha of 28 February 2001 [latest update: #3797] on 6 March 2001 at 11:52:43 am'!"Change Set:		tilesInBrowsers-swDate:			6 March 2001Author:			Scott WallaceLets you see 'universal tiles' instead of textual source in *any* code pane of any browser or message-list.   Thus, you can browse the entire system using tiles, if you care to.There are two ways to request tiles:(1)  Set the Preference 'tilesToggleInBrowsers' to true.  Then you will start seeing a 'tiles' checkbox in the button panes of browsers.  Hit this checkbox at any time to switch the browser back and forth between text and tiles.(2)  The window menu of a browser now has an item allowing you to toggle between text and tiles, for those who do not use button panes.The tile representations in browsers at the moment are for display only -- you cannot edit the tile code yet."!TwoWayScrollPane subclass: #PluggableTileScriptorMorph	instanceVariableNames: 'syntaxMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Tile Scriptors'!!CodeHolder methodsFor: 'controls' stamp: 'sw 3/6/2001 11:29'!addSourceTogglesTo: aPane	"If appropriate Preferences are set, add toggles to the given pane that control whether or not diffs are shown, whether source or comment is shown, and whether text or tiles is shown"	Preferences deployDiffToggles ifTrue: [aPane addMorphBack: self diffButton].	Preferences sourceCommentToggleInBrowsers ifTrue: [aPane addMorphBack: self sourceOrInfoButton].	Preferences tilesToggleInBrowsers ifTrue: [aPane addMorphBack: self tilesToggleButton].! !!CodeHolder methodsFor: 'tiles' stamp: 'sw 3/6/2001 10:04'!addModelItemsToWindowMenu: aMenu	"Add model-related item to the window menu"	super addModelItemsToWindowMenu: aMenu. 	Smalltalk isMorphic ifTrue:		[aMenu addLine.		aMenu add:  'toggle use of tiles' target: self action: #toggleShowingTiles]! !!CodeHolder methodsFor: 'tiles' stamp: 'sw 3/6/2001 11:51'!installTextualCodingPane	"Install text into the code pane"	| aWindow codePane aPane boundsToUse |	(aWindow _ self containingWindow) ifNil: [self error: 'where''s that window?'].	codePane _ aWindow findDeepSubmorphThat:   		[:m | ((m isKindOf: PluggableTextMorph) and: [m getTextSelector == #contents]) or:			[m isKindOf: PluggableTileScriptorMorph]] ifAbsent: [self error: 'no code pane'].	aPane _ self buildMorphicCodePaneWith: nil.	boundsToUse _ (codePane bounds origin- (1@1)) corner: (codePane owner bounds corner " (1@1").	aWindow replacePane: codePane with: aPane.	aPane vResizing: #spaceFill; hResizing: #spaceFill; borderWidth: 0.	aPane bounds: boundsToUse.	self contentsChanged! !!CodeHolder methodsFor: 'tiles' stamp: 'sw 3/6/2001 11:30'!installTilesForSelection	"Install universal tiles into the code pane."	| source aSelector aClass tree syn tileScriptor aWindow codePane |	(aWindow _ self containingWindow) ifNil: [self error: 'hamna dirisha'].	tileScriptor _  (aSelector _ self selectedMessageName)		ifNil:			[PluggableTileScriptorMorph new]		ifNotNil:			[aClass _ self selectedClassOrMetaClass classThatUnderstands:  aSelector.			source _ aClass sourceCodeAt: aSelector.    			tree _ Compiler new 				parse: source 				in: aClass 				notifying: nil.			(syn _ tree asMorphicSyntaxUsing: SyntaxMorph)				parsedInClass: aClass.			syn inAPluggableScrollPane].	codePane _ aWindow findDeepSubmorphThat:   		[:m | ((m isKindOf: PluggableTextMorph) and: [m getTextSelector == #contents]) or:			[m isKindOf: PluggableTileScriptorMorph]] ifAbsent: [self error: 'no code pane'].	tileScriptor color: aWindow paneColorToUse;		setProperty: #hideUnneededScrollbars toValue: true;		setProperty: #maxAutoFitSize toValue: codePane owner extent.	aWindow replacePane: codePane with: tileScriptor.	tileScriptor owner clipSubmorphs: true.	tileScriptor extent: codePane extent.! !!CodeHolder methodsFor: 'tiles' stamp: 'sw 3/6/2001 11:19'!showTiles: aBoolean	"Set the showingTiles as indicated.  The fact that there are initially no senders of this reflects that fact that initially this trait is only directly settable through the UI; later surely there will be senders, such as if one wanted to set a system up so that all newly-opened browsers showed tiles rather than text."	aBoolean		ifTrue:			[contentsSymbol _ #tiles]		ifFalse:			[contentsSymbol _ #source].	contents _ nil.	self changed: contents! !!CodeHolder methodsFor: 'tiles' stamp: 'sw 2/3/2001 00:10'!showingTiles	"Answer whether the receiver is currently showing tiles"	^ contentsSymbol == #tiles! !!CodeHolder methodsFor: 'tiles' stamp: 'sw 2/12/2001 13:44'!tilesToggleButton	"Return a checkbox that lets the user decide whether tiles or textual source should show in the code pane"	|  outerButton aButton |	outerButton _ AlignmentMorph newRow.	outerButton wrapCentering: #center; cellPositioning: #leftCenter.	outerButton color:  Color transparent.	outerButton hResizing: #shrinkWrap; vResizing: #shrinkWrap.	outerButton addMorph: (aButton _ UpdatingThreePhaseButtonMorph checkBox).	aButton		target: self;		actionSelector: #toggleShowingTiles;		getSelector: #showingTiles.	outerButton addMorphBack: (StringMorph contents: 'tiles') lock.	outerButton setBalloonText: 'If checked, then tiles are shown in the code pane, otherwise textual source is shown'.	^ outerButton! !!CodeHolder methodsFor: 'tiles' stamp: 'sw 2/14/2001 15:27'!toggleShowingTiles	"Toggle whether tiles should be shown in the code pane"	self okToChange ifTrue:		[self showingTiles			ifTrue:				[contentsSymbol _ #source.				self setContentsToForceRefetch.				self installTextualCodingPane.				self contentsChanged]			ifFalse:				[contentsSymbol _ #tiles.				self installTilesForSelection.				self changed: #tiles]]! !!Browser methodsFor: 'initialize-release' stamp: 'sw 3/6/2001 10:06'!optionalButtonRow	"Answer a row of control buttons"	| aRow aButton aLabel |	aRow _ AlignmentMorph newRow.	aRow setNameTo: 'buttonPane'.	aRow beSticky.	aRow hResizing: #spaceFill.	aRow wrapCentering: #center; cellPositioning: #leftCenter.	aRow clipSubmorphs: true.	self optionalButtonPairs  do:			[:tuple |				aButton _ PluggableButtonMorph					on: self					getState: nil					action: tuple second.				aButton 					useRoundedCorners;					hResizing: #spaceFill;					vResizing: #spaceFill;					onColor: Color transparent offColor: Color transparent.				aLabel _ Preferences abbreviatedBrowserButtons 					ifTrue: [self abbreviatedWordingFor: tuple second]					ifFalse: [nil].				aButton label: (aLabel ifNil: [tuple first asString]).				tuple size > 2 ifTrue: [aButton setBalloonText: tuple third].				aRow addMorphBack: aButton.				aRow addTransparentSpacerOfSize: (3 @ 0)].	self addSourceTogglesTo: aRow.	^ aRow! !!MorphicModel methodsFor: 'initialization' stamp: 'sw 3/6/2001 11:22'!releaseCachedState	"Release cached state of the receiver"	(model ~~ self and: [model respondsTo: #releaseCachedState]) ifTrue:		[model releaseCachedState].	super releaseCachedState! !!PluggableTileScriptorMorph methodsFor: 'initialization' stamp: 'sw 3/6/2001 11:31'!extent: newExtent	"Set the receiver's extent as indicated, and make the corresponding change in the syntax morph"	super extent: (newExtent max: 36@16).	syntaxMorph ifNotNil:		[syntaxMorph extent: (self innerBounds width - 6) @ self height].	self setScrollDeltas! !!PluggableTileScriptorMorph methodsFor: 'updating' stamp: 'sw 3/6/2001 11:31'!update: aSymbol	"Update the receiver in the manner suggested by aSymbol"	aSymbol == #flash ifTrue: [^ self flash].	(aSymbol == #contents or: [aSymbol == #tiles])		ifTrue:			[^ self containingWindow model selectedMessageName				ifNil:					[self removeAllMorphs]				ifNotNil:					[self containingWindow model installTilesForSelection]]! !!PluggableTileScriptorMorph methodsFor: 'pane events' stamp: 'sw 3/6/2001 11:16'!keyStroke: evt	"A keystroke was hit while the receiver had keyboard focus.  Pass the keystroke on to my syntaxMorph, and also, if I have an event handler, pass it on to that handler"	syntaxMorph keyStroke: evt.	super keyStroke: evt! !!SyntaxMorph methodsFor: 'initialization' stamp: 'sw 3/6/2001 11:26'!inAPluggableScrollPane	"Answer a PluggableTileScriptorMorph that holds the receiver"	| widget |	widget _ PluggableTileScriptorMorph new.	widget extent: 10@10; borderWidth: 0.	widget scroller addMorph: self.	widget setScrollDeltas.	widget hResizing: #spaceFill; vResizing: #spaceFill.	^ widget! !!SystemWindow methodsFor: 'panes' stamp: 'sw 3/6/2001 11:31'!replacePane: oldPane with: newPane	"Make newPane exactly occupy the position and extent of oldPane"	| aLayoutFrame hadDep |	hadDep _ model dependents includes: oldPane.	oldPane owner replaceSubmorph: oldPane by: newPane.	newPane		position: oldPane position;		extent: oldPane extent.	aLayoutFrame _ oldPane layoutFrame.	paneMorphs _ paneMorphs collect:		[:each |		each == oldPane ifTrue: [newPane] ifFalse: [each]].	aLayoutFrame ifNotNil: [newPane layoutFrame: aLayoutFrame].	oldPane color = self paneColor ifTrue: [newPane color: self paneColor].		hadDep ifTrue: [model removeDependent: oldPane. model addDependent: newPane].	self changed! !PluggableTextMorph removeSelector: #releaseCachedState!!CodeHolder reorganize!('annotation' addOptionalAnnotationsTo:at:plus: addPriorVersionsCountForSelector:ofClass:to: annotation annotationForSelector:ofClass: annotationPaneMenu:shifted: annotationRequests annotationSeparator defaultAnnotationPaneHeight defaultButtonPaneHeight)('categories' categoryOfCurrentMethod changeCategory methodCategoryChanged selectedMessageCategoryName)('contents' commentContents contents contentsChanged contentsSymbol contentsSymbol: setContentsToForceRefetch)('commands' adoptMessageInCurrentChangeset browseImplementors browseSenders makeSampleInstance removeClass showUnreferencedInstVars spawn: spawnFullProtocol spawnHierarchy spawnProtocol)('construction' addLowerPanesTo:at:with: buildClassBrowserEditString: buildMorphicCodePaneWith:)('controls' addOptionalButtonsTo:at:plus: addSourceTogglesTo: buttonWithSelector: decorateButtons decorateForInheritance inheritanceButton)('diffs' diffButton diffFromPriorSourceFor: showDiffs showDiffs: toggleDiff toggleDiffing)('misc' isThereAnOverride modelWakeUpIn: okayToAccept priorSourceOrNil releaseCachedState sampleInstanceOfSelectedClass setClassAndSelectorIn: suggestCategoryToSpawnedBrowser:)('self-updating' didCodeChangeElsewhere stepIn: updateCodePaneIfNeeded updateListsAndCodeIn: wantsStepsIn:)('source vs documentation' showComment showDocumentation: showingDocumentation showingSource sourceOrInfoButton toggleShowDocumentation)('tiles' addModelItemsToWindowMenu: installTextualCodingPane installTilesForSelection showTiles: showingTiles tilesToggleButton toggleShowingTiles)!"Postscript:"Preferences addPreference: #tilesToggleInBrowsers category: #scripting default:  false balloonHelp:  'if true, then a "tiles" checkbox will occur in the button pane of browsers (morphic only) allowing you to see scripting tiles in the code pane instead of textual source'.Preferences addPreference: #deployDiffToggles category: #browsing default: false balloonHelp: 'if true, then a "diffs" checkbox will occur in the button pane of browsers, allowing you to view the contents as diffed from the prior version of the same method'.!