'From Squeak 2.1 of June 30, 1998 on 5 August 1998 at 8:34:10 pm'!"Change Set:		miscFixes-swDate:			5 August 1998Author:			Scott WallaceVarious fixups to greet the new month:* There are several do-it's invoked at the end of the update; for a very big image this will take quite a while -- don't despair -- and at the end of it some good cleansing will have taken place, including:     *  The fence, help, and sound controls in the control tab of           projects using the mark-1 template are fixed up so that they talk           to the right objects.     *  Damaged scripts that had brought about the stem problem are fixed up.     *  Damaged morphs whose owner-pointers had erroneously *not* been nilled-           out when they were dropped into a show-only-thumbnails paste-up           are repaired, so that the reveal original feature will work           as intended.  (The bug that had caused this damage is also fixed.)     *  The do-it that fixes up grandfathered WorldMorphs that were not propertly expanding            into naked scripts, sent separately to Alan in early July, is included.*  Stop-step-go buttons can again be added to the outermost level of the World  (scripting... submenu of the world's screen menu); these govern all morphs in the world.  (If you use these outermost buttons and also have stop-step-go buttons within a 'detachable scripting space', I believe all the right things happen *except* that the highlighting states of the buttons may not always be in synch.)*  The last (?!!) weird display artifact relating to text in a Parts Bin is finally removed.*  Classes HolderMorph (supplanted by PasteUpMorph) and TabbedPaletteComplex (supplanted by TabbedPalette) are deleted from the system.*  The workaround for the 'stem bug', sent separately as a fileout to Alan last week, is included.  I have still not determined what causes the bad structure here.*  When you drop an object into a PasteUp that is set to 'show thumbnails', the old (oversize) halo now is removed.*  In HandMorph.dropMorphsEvent:, if the morph dropped is different from the morph being carried by the hand, the owner of the latter is now set to nil -- fixes a long-standing bug.* Progress in attacking the sometimes-I-get-a-big-blue-green-rect-when-I-initiate-Painting bug.*  Adds protocol making it possible for some of the World 'open...' items to result in opening the desired object directly in the same world even if it's in an mvc project; having done that, allows the full 'open new...' menu to show in the morphic world menu even when the world is in an mvc project, though some of the resulting windows will still open up in mvc."!PasteUpMorph subclass: #WorldMorph	instanceVariableNames: 'hands activeHand viewBox canvas damageRecorder stepList lastStepTime lastCycleTime balloonHelpEnabled '	classVariableNames: 'DisableDeferredUpdates MinCycleLapse '	poolDictionaries: ''	category: 'Morphic-Kernel'!!Morph class methodsFor: 'misc' stamp: 'sw 8/4/1998 16:51'!morphsUnknownToTheirOwners	"Return a list of all morphs (other than HandMorphs) whose owners do not contain them in their submorph lists"	"Morph morphsUnknownToTheirOwners"	| problemMorphs itsOwner |	problemMorphs _ OrderedCollection new.	self allSubInstances do:		[:m | (m isHandMorph not and: [((itsOwner _ m owner) ~~ nil and: [(itsOwner submorphs includes: m) not])])			ifTrue:				[problemMorphs add: m]].	^ problemMorphs! !!Morph class methodsFor: 'misc' stamp: 'sw 8/4/1998 17:31'!repairMorphsUnknownToTheirOwners	"Morph repairMorphsUnknownToTheirOwners"	| aList |	(aList _ self morphsUnknownToTheirOwners) do:		[:m | m privateOwner: nil].	^ aList size printString, ' morph(s) repaired'! !!PasteUpMorph methodsFor: 'layout' stamp: 'sw 8/3/1998 13:43'!laySubpartsOutInOneRow	| aPosition |	aPosition _ 0 @ padding.	submorphs do:	[:aMorph |		aMorph position: (aPosition + (padding @ 0)).		aPosition _ aMorph topRight]! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 8/5/1998 18:26'!toggleIsPartsBin	"Not entirely happy with the openToDragNDrop not being directly manipulable etc, but still living with it for now."	isPartsBin _ self isPartsBin not.	openToDragNDrop _ isPartsBin not.	isPartsBin		ifTrue:			[submorphs do:				[:m | m setProperty: #partsDonor toValue: true.					m suspendEventHandler]]		ifFalse:			[submorphs do:				[:m | m removeProperty: #partsDonor.					m restoreSuspendedEventHandler]]! !!Player class methodsFor: 'user-scripted subclasses' stamp: 'sw 8/2/1998 22:52'!tileScriptNames	scripts ifNil: [^ OrderedCollection new].	"The following is an emergency workaround for damaged script dictionaries occurring in Alan's demo image 8/2/98; no selector should be nil but somehow some is, so here we filter such damaging things out"	^ scripts collect: [:aScript | aScript selector] thenSelect: [:n | n ~~ nil]! !!Player class methodsFor: 'other' stamp: 'sw 8/4/1998 17:25'!cleansePlayersWithDamagedScripts	"Track down all Players with damaged scripts and repair their script dictionaries.  Report how many were fixed."	"Player cleansePlayersWithDamagedScripts"	| aList |	aList _ self class allSubInstances select:		[:c | c scripts ~~ nil and: [c scripts includesKey: nil]].	aList do:		[:c | c scripts removeKey: nil].	^ aList size printString, ' uniclasses fixed up'! !!Player class methodsFor: 'other' stamp: 'sw 8/4/1998 17:06'!playersWithDamagedScripts	"Return a list of all players whose scripts dictionaries contain entries with nil selectors"	"Player playersWithDamagedScripts"	^ self allSubInstances select:		[:p | p class scripts ~~ nil and: [p class scripts includesKey: nil]]! !!Player class methodsFor: 'scripts' stamp: 'sw 8/5/1998 20:22'!anonymousUserScriptFor: aSelector player: aPlayer	|  entry |	self flag: #hottest. " aSelector ifNil: [self halt: 'Bingo!!  Bad script entry created!!']."	scripts ifNil: [scripts _ IdentityDictionary new].	self flag: #deferred.  "That anonymous script will of course contain refs to aPlayer who may well not be the class's prototype.  So if it is then saved, there's a problem"	entry _ UserScript new initializeAnonymousScriptFor: aPlayer.	scripts at: aSelector put: entry.	^ entry! !!Player class methodsFor: 'scripts' stamp: 'sw 8/5/1998 20:22'!userScriptForPlayer: aPlayer selector: aSelector	|  entry |	self flag: #hottest.  "aSelector ifNil: [self halt: 'Bingo!!  Bad script entry created!!']."	scripts ifNil: [scripts _ IdentityDictionary new].	entry _ scripts at: aSelector ifAbsent: [nil].	entry ifNil:		[entry _ UserScript new player: aPlayer selector: aSelector.		scripts at: aSelector put: entry].	^ entry! !!Presenter methodsFor: 'object fileIn' stamp: 'sw 8/5/1998 18:51'!convertassgbmsfcvsssspbb0: varDict assgmsfcvsssspbb0: smartRefStrm	"These variables are automatically stored into the new instance ('associatedMorph' 'stopButton' 'stepButton' 'goButton' 'mouseOverHalosEnabled' 'soundsEnabled' 'fenceEnabled' 'coloredTilesEnabled' 'viewerCache' 'standardPlayer' 'standardPlayfield' 'standardPalette' 'standardHolder' 'playerList' 'borderColorWhenRunning' 'borderColorWhenStopped' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"Be sure to to fill in () and deal with the information in ('balloonHelpEnabled' )"! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 8/5/1998 18:40'!browseChangedMessages	Smalltalk browseChangedMessages! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 8/5/1998 17:22'!openMenu	"ScreenController initialize"	OpenMenu == nil ifTrue:		[OpenMenu _ SelectionMenu labelList:		#(	'browser'			'workspace'			'file list'			'transcript'			'simple change sorter'			'dual change sorter'			'project (mvc)'			'project (morphic)'			'project (construction)'			'morphic window'			'morphic construction window'			'durable open menu'			)		lines: #(6 9 11)		selections: #(openBrowser openWorkspace openFileList openTranscript  openSimpleChangeSorter openChangeManager openProject  openMorphicProject  openConstructionProject  openMorphicWorld openMorphicConstructionWorld durableOpenMenu)].	^ OpenMenu"ScreenController  new openMenu startUp"! !!ScreenController methodsFor: 'nested menus' stamp: 'sw 8/5/1998 17:15'!projectScreenMenu	"Answer the project screen menu."	ProjectScreenMenu == nil ifTrue:		[ProjectScreenMenu _ SelectionMenu labelList:		#(	'previous project'			' jump to project...'			'restore display'			'open new...'			'changes...'			'window...'			'help...'			'do...'			'save'			'save as...'			'save and quit'			'quit...'			'keep this menu up')		lines: #(2 3 8 12)		selections: #(returnToPreviousProject jumpToProject restoreDisplay presentOpenMenu presentChangesMenu presentWindowMenu presentHelpMenu commonRequests  snapshot saveAs snapshotAndQuit quit durableScreenMenu)].	^ ProjectScreenMenu"ScreenController new projectScreenMenu startUp"! !!ScreenController class methodsFor: 'class initialization' stamp: 'sw 8/5/1998 19:04'!initialize	"Initialize the screen menus.  Call this method to reset everything back to nil, so that the various menu retrieval methods will duly reinitialize them.  Include this method in a change set if you have made changes to any of the screen menus, so that the resulting file in will invoke it and your new menus will get installed in the user's system."	"ScreenController initialize"	ChangesMenu _ TopScreenMenu _ OpenMenu _ WindowMenu _ ProjectScreenMenu _ nil.! !!SketchEditorMorph methodsFor: 'initialization' stamp: 'sw 8/5/1998 20:12'!initializeFor: aSketchMorph inBounds: boundsToUse pasteUpMorph: aPasteUpMorph	| w aPaintBox aPal  aPosition |	(w _ aPasteUpMorph world) addMorphFront: self.	aPaintBox _ w paintBox.	(aPal _ aPasteUpMorph standardPalette)		ifNotNil:			[aPal showNoPalette.			aPosition _ aPal topRight + (aPaintBox width negated @ 0 "aPal tabsMorph height")]		ifNil:			[aPosition _ aPaintBox position].	hostView _ aSketchMorph.  "may be ownerless"	self bounds: boundsToUse.	canvasRectangle _ bounds translateBy: w viewBox origin.	aPaintBox position: aPosition.	palette _  aPaintBox.	w addMorphFront: aPaintBox.  "bring to front"	palette position: aPosition.	paintingForm _ Form extent: bounds extent depth: w assuredCanvas depth.	self dimTheWindow.	self addRotationScaleHandles.	aSketchMorph ifNotNil:		[aSketchMorph rotationDegrees: 0.		aSketchMorph form			displayOn: paintingForm			at: (hostView boundsInWorld origin - bounds origin)			clippingBox: (0@0 extent: paintingForm extent)			rule: Form over			fillColor: nil.  "assume they are the same depth"		rotationCenter _ aSketchMorph rotationCenter]! !!SketchEditorMorph methodsFor: 'start & finish' stamp: 'sw 8/5/1998 20:13'!cancelOutOfPainting	self delete.	dimForm ifNotNil: [dimForm delete].	emptyPicBlock value.	"note no args to block!!"	hostView changed.	^ nil	"Tell them we cancelled"! !!StandardScriptingSystem methodsFor: 'utilities' stamp: 'sw 8/5/1998 18:09'!wordingForOperator: aString	| toTest |	toTest _ aString asString.	#(	(forward:				'forward by')		(turn:					'turn by')		(beep:					'make sound')		(bounce:				'bounce')		(stopProgramatically	'stop')		(stopScript				'stop script')		(wearCostumeOf:		'look like')		(moveToward:			'move toward')		(goToRightOf:			'align after')		(stopScript:				'stop script')		(startScript:				'start script')		(pauseScript:			'pause script')		(max:					'max')		(min:					'min')		(liftAllPens				'lift all pens')		(lowerAllPens			'lower all pens')		(clearTurtleTrails		'clear pen trails')		(=						'=?'))	do:		[:pair | toTest = pair first ifTrue: [^ pair second]].	^ toTest! !!StringHolder methodsFor: 'initialize-release' stamp: 'sw 8/4/1998 18:21'!openAsMorphLabel: labelString  inWorld: aWorld	"Workspace new openAsMorphLabel: 'Workspace'"	| window |	window _ (SystemWindow labelled: labelString) model: self.	window addMorph: (PluggableTextMorph on: self text: #contents accept: #acceptContents:			readSelection: nil menu: #codePaneMenu:shifted:)		frame: (0@0 corner: 1@1).	window openInWorld: aWorld! !!SystemDictionary methodsFor: 'browsing' stamp: 'sw 8/5/1998 18:41'!browseChangedMessages	"Create and schedule a message browser on each method that has been 	changed."	SystemChanges isEmpty ifTrue: [^ self inform: 'There are no changed messagesin the current change set.'].	ChangedMessageSet openFor: SystemChanges! !!TextMorph class methodsFor: 'as yet unclassified' stamp: 'sw 8/3/1998 17:16'!authoringPrototype	| t |	t _ super authoringPrototype."Strangeness here in order to avoid two offset copies of the default contents when operating in an mvc project before cursor enters the morphic window"	t paragraph.	^ t! !!ToggleButtonMorph class methodsFor: 'as yet unclassified' stamp: 'sw 8/5/1998 07:33'!fixTargetPresenters	"ToggleButtonMorph fixTargetPresenters"	"Repair faulty instances from the first 'etoy-template' experiment, such that the instances refer to the local presenter rather than to a phantom and irrelevant world"	self allInstancesDo:		[:m | (m target isKindOf: Presenter) ifTrue:			[m target: m presenter]]! !!WorldMorph methodsFor: 'initialization' stamp: 'sw 8/3/1998 14:12'!configureForConstruction	| aPanel |	self presenter addTrashCan; standardPlayer.	self addMorph: (presenter newStandardPartsBin position: 10@10).	aPanel _ presenter controlPanel.	self addMorph: aPanel.	self positionControlPanel: aPanel! !!WorldMorph methodsFor: 'initialization' stamp: 'sw 8/3/1998 14:12'!positionControlPanel: aPanel	| referencePos |	referencePos _ bounds width > 200		ifTrue:		[bounds bottomRight]		ifFalse:		[Display boundingBox bottomRight].	aPanel position:  (referencePos - ((70 + aPanel width) @ (aPanel height + 4)))! !!WorldMorph methodsFor: 'object fileIn' stamp: 'sw 8/5/1998 18:56'!convertbosfcepcbbfgccpmcpbttloiairfidcuwhavcdslpl0: varDict bosfcepcbbfgccpmcpbttloiairfidcuwhavcdslplb0: smartRefStrm	"These variables are automatically stored into the new instance ('hands' 'activeHand' 'viewBox' 'canvas' 'damageRecorder' 'stepList' 'lastStepTime' 'playerList' 'lastCycleTime' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"Be sure to to fill in ('balloonHelpEnabled' ) and deal with the information in ()"	balloonHelpEnabled _ true! !!WorldMorph methodsFor: 'object fileIn' stamp: 'sw 8/5/1998 20:33'!convertbosfcepcbbfgccpmcpbttloiairfidcuwhavcdslplb0: varDict bosfcepcbbfgccpmcpbttloiairfidcuwhavcdsllb0: smartRefStrm	"These variables are automatically stored into the new instance ('hands' 'activeHand' 'viewBox' 'canvas' 'damageRecorder' 'stepList' 'lastStepTime' 'lastCycleTime' 'balloonHelpEnabled' ).	This method is for additional changes. Use statements like (foo _ varDict at: 'foo')."	"Be sure to to fill in () and deal with the information in ('playerList' )"	balloonHelpEnabled _ true! !!WorldMorph class methodsFor: 'all' stamp: 'sw 8/3/1998 14:12'!openWithStandardPartsBinShowing	"WorldMorph openWithStandardPartsBinShowing"	| aWorld anExtent aPanel |	anExtent _  700 @ 500.	aWorld _ self new setProperty: #initialExtent toValue: anExtent.	aWorld extent: anExtent.	aWorld presenter addTrashCan.	aPanel _ aWorld presenter controlPanel.	aWorld addMorph: aPanel.	aWorld positionControlPanel: aPanel.	aWorld addMorph: ((aWorld presenter newStandardPartsBin) position: 10@10).	MorphWorldView openOn: aWorld label: 'Construction' extent: anExtent! !ScreenController initialize!TilePadMorph removeSelector: #inPartsBin!"Postscript:  A few fixups to existing damaged state in the host image:Fix up grandfathered WorldMorphs possibly lingering in the image from the days when WorldMorphs did not rely on the automaticPhraseExpansion property.Repair morphs whose owners do not know about them; remove bad entries from scripts dictionaries of players.Cleanse players whose scripts dictionaries contain entries with nil selectors.Fix up toggle buttons from control panels that were pointing to bogus presenters"WorldMorph allInstances do:     [:m | m setProperty: #automaticPhraseExpansion toValue: true]."Morph repairMorphsUnknownToTheirOwners."Player cleansePlayersWithDamagedScripts.ToggleButtonMorph fixTargetPresenters.!