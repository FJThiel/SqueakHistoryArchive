'From Squeak2.9alpha of 13 June 2000 [latest update: #3185] on 19 December 2000 at 7:02:48 pm'!"Change Set:		CompactViewerFlapsDate:			19 December 2000Author:			Andreas RaabEnable 'compact' viewer flaps, e.g., flaps that don't span the entire world but rather fit tightly around the viewer. The option can be set per viewer flap (from the tabs red halo menu) while the default appearance is covered in the preference #compactViewerFlaps."!!PasteUpMorph methodsFor: 'misc' stamp: 'ar 12/19/2000 18:58'!viewerFlapTabFor: anObject	"Open up a Viewer on aMorph in its own flap, creating it if necessary"	| bottomMost aPlayer aFlapTab |	bottomMost _ self top.	aPlayer _ anObject isMorph ifTrue: [anObject assuredPlayer] ifFalse: [anObject objectRepresented].	self flapTabs do:		[:aTab | (aTab isKindOf: ViewerFlapTab)			ifTrue:				[bottomMost _ aTab bottom max: bottomMost.				aTab scriptedPlayer == aPlayer					ifTrue:						[^ aTab]]].	"Not found; make a new one"	aFlapTab _ (Utilities newFlapTitled: anObject nameForViewer onEdge: #right inPasteUp: self)		as: ViewerFlapTab.	aFlapTab initializeFor: aPlayer topAt: bottomMost + 2.	aFlapTab referent color: (Color green muchLighter alpha: 0.5).	aFlapTab referent borderWidth: 0.	aFlapTab referent setProperty: #automaticPhraseExpansion toValue: true.	Preferences compactViewerFlaps 		ifTrue:[aFlapTab makeFlapCompact: true].	self addMorphFront: aFlapTab.	aFlapTab adaptToWorld: self.	^ aFlapTab! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'ar 12/19/2000 18:55'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	aMenu add: 'flap color...' target: self action: #changeFlapColor.! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'ar 12/19/2000 18:57'!addCustomMenuItems: aMenu hand: aHandMorph	aMenu addLine.	aMenu addUpdating: #compactFlapString target: self action: #changeCompactFlap.	aMenu addLine.	aMenu addUpdating: #dragoverString action: #toggleDragOverBehavior.	aMenu addUpdating: #mouseoverString action: #toggleMouseOverBehavior.	aMenu addUpdating: #edgeString action: #setEdgeToAdhereTo.	aMenu addLine.	aMenu add: 'destroy this flap' action: #destroyFlap.! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'ar 12/19/2000 18:58'!changeCompactFlap	self makeFlapCompact: self isFlapCompact not.! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'ar 12/19/2000 18:56'!compactFlapString	^self isFlapCompact		ifTrue:['<on>compact flap']		ifFalse:['<off>compact flap']! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'ar 12/19/2000 18:54'!isFlapCompact	"Return true if the referent of the receiver represents a 'compact' flap"	referent layoutPolicy ifNil:[^false].	referent layoutPolicy isTableLayout ifFalse:[^false].	referent vResizing == #shrinkWrap ifFalse:[^false].	^true! !!ViewerFlapTab methodsFor: 'as yet unclassified' stamp: 'ar 12/19/2000 18:55'!makeFlapCompact: aBool	"Return true if the referent of the receiver represents a 'compact' flap"	aBool ifTrue:[		referent			layoutPolicy: TableLayout new;			vResizing: #shrinkWrap;			useRoundedCorners.	] ifFalse:[		referent			layoutPolicy: nil;			vResizing: #rigid;			useSquareCorners.	].! !"Postscript:Add a new preferences for compact viewer flaps"Preferences addPreference: #compactViewerFlaps category: #scripting default: false balloonHelp: 'Determines whether a viewer flap should fit tightly around the viewer'.!