'From Squeak 2.1 of June 30, 1998 on 31 August 1998 at 3:52:53 pm'!!DeepCopier methodsFor: 'like fullCopy' stamp: 'tk 8/31/1998 15:47'!checkVariables	"Check that no indexed of inst vars have changed in certain classes.  If you get an error in this method, you MUST go the the method being checked (veryDeepCopyWith:) and update its code.  And then update the test here.""All classes that implements veryDeepCopyWith: for the purpose of not doing a veryDeepCopy on some inst var, must have a check here."	| str str2 |	str _ '|veryDeepCopyWith: is out of date.'.	Object instSize = 0 ifFalse: [self error: 'Many implementers of veryDeepCopyWith: are out of date'].	Morph superclass == Object ifFalse: [self error: 'Morph', str].	(Morph instVarNames copyFrom: 1 to: 6) = #('bounds' 'owner' 'submorphs' 			'fullBounds' 'color' 'extension') 		ifFalse: [self halt: 'Morph', str].	"added ones are OK"	str2 _ 'Player|copyUniClass and DeepCopier|mapUniClasses are out of date'.	Behavior instVarNames = #('superclass' 'methodDict' 'format' 'subclasses' )		ifFalse: [self error: str2].	ClassDescription instVarNames = #('instanceVariables' 'organization' )		ifFalse: [self error: str2].	Class instVarNames = #('name' 'classPool' 'sharedPools' )		ifFalse: [self error: str2].	Model superclass == Object ifFalse: [self error: str2].	Player superclass == Model ifFalse: [self error: str2].	Model class instVarNames = #() ifFalse: [self error: str2].	Player class instVarNames = #('scripts' 'slotInfo')		ifFalse: [self error: str2].! !!DeepCopier methodsFor: 'like fullCopy' stamp: 'tk 8/31/1998 15:52'!mapUniClasses	"For new Uniclasses, map their class vars to the new objects.  And their additional class instance vars.  (scripts slotInfo) and cross references like (player321).""Uniclasses use class vars to hold onto siblings who are referred to in code"| pp |pp _ Object class instSize + 1.uniClasses do: [:playersClass | "values = new ones"	playersClass classPool associationsDo: [:assoc |		assoc value: (assoc value veryDeepCopyWith: self)].	playersClass scripts: (playersClass privateScripts veryDeepCopyWith: self).	"pp+0"	"(pp+1) slotInfo was deepCopied in copyUniClass and that's all it needs"	pp+2 to: playersClass class instSize do: [:ii | 		playersClass instVarAt: ii put: 			((playersClass instVarAt: ii) veryDeepCopyWith: self)].	].! !!Morph methodsFor: 'copying' stamp: 'tk 8/31/1998 15:19'!veryDeepCopyWith: deepCopier	"Copy me and the entire tree of objects I point to.  An object in the tree twice is copied once, and both references point to him.  deepCopier holds a dictionary of objects we have seen.  Do not copy the owner field.  That must be filled in by the owner, if he is within the tree being copied."	| class index sub subAss new absent uc |	new _ deepCopier references at: self ifAbsent: [absent _ true].	absent ifNil: [^ new].	"already done"	class _ self class.	new _ self clone.	class isSystemDefined ifFalse: ["May occur in the future"		uc _ deepCopier uniClasses at: class ifAbsent: [nil].		uc ifNil: [deepCopier uniClasses at: class put: (uc _ self copyUniClass)].		new _ uc new].	deepCopier references at: self put: new.	"remember"	"Morph subclasses do not have variable numbers of fields (like Array does)"	new privateBounds: bounds clone.	"Points are shared with original"		"indexes used here are checked by checkVariables"	(subAss _ deepCopier references associationAt: owner ifAbsent: [nil])		ifNil: [new privateOwner: nil]	"weak reference to owner"		ifNotNil: [new privateOwner: subAss value].	new privateSubmorphs: (submorphs veryDeepCopyWith: deepCopier).	new privateFullBounds: fullBounds.	"fullBounds is shared with original!!"	new privateColor: (color veryDeepCopyWith: deepCopier).		"color, if simple, will return self. may be complex"	new instVarAt: 6 put: (extension veryDeepCopyWith: deepCopier).		"extension is treated like any generic inst var"	index _ class instSize.	[index > 6] whileTrue: 		[sub _ self instVarAt: index.		new instVarAt: index put: (sub veryDeepCopyWith: deepCopier).		index _ index - 1].	new submorphsDo: [:morph | morph privateOwner: new].  "strengthen weak pointers"	^ new! !!Morph methodsFor: 'private' stamp: 'tk 8/30/1998 09:58'!privateFullBounds: boundsRect	"Private!! Computed automatically."	fullBounds _ boundsRect.! !!Player methodsFor: 'clone' stamp: 'tk 8/31/1998 15:46'!copyUniClass	"my class is a subclass of Player.  Return another class just like my class.  Share the costume list."	| newCls |	newCls _ self class officialClass 		newUniqueClassInstVars: self class instanceVariablesString 		classInstVars: self class class instanceVariablesString.	newCls copyMethodDictionaryFrom: self class.	newCls class copyMethodDictionaryFrom: self class class.	newCls scripts: self class privateScripts.	"duplicate this in mapUniClasses"	newCls slotInfo: self class privateSlotInfo deepCopy.	newCls copyAddedStateFrom: self class.  "All class inst vars for inter Player refs"	^ newCls! !!Player class methodsFor: 'slots' stamp: 'tk 8/31/1998 15:45'!privateSlotInfo	"for copying"	^ slotInfo! !!Player class methodsFor: 'slots' stamp: 'tk 8/31/1998 15:44'!slotInfo: aDict	"for copying"	slotInfo _ aDict! !!Player class methodsFor: 'scripts' stamp: 'tk 8/31/1998 15:42'!privateScripts	"for copying"	^ scripts! !!Player class methodsFor: 'scripts' stamp: 'tk 8/31/1998 15:41'!scripts: aDict	"for copying"	scripts _ aDict! !