'From Squeak2.8alpha of 4 February 2000 [latest update: #1873] on 3 March 2000 at 1:11:29 pm'!"Change Set:		24Dependents-smaDate:			29 February 2000Author:			Stefan Matthias AustRefactored dependency framework."!!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 20:24'!addDependent: anObject	"Make the given object one of the receiver's dependents."	| dependents |	dependents _ self dependents.	(dependents includes: anObject) ifFalse:		[self myDependents: (dependents copyWith: anObject)].	^ anObject! !!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 19:53'!breakDependents	"Remove all of the receiver's dependents."	self myDependents: nil! !!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 19:26'!canDiscardEdits	"Answer true if none of the views on this model has unaccepted edits that matter."	self dependents		do: [:each | each canDiscardEdits ifFalse: [^ false]]		without: self.	^ true! !!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 19:58'!dependents	"Answer a collection of objects that are 'dependent' on the receiver;	 that is, all objects that should be notified if the receiver changes."	^ self myDependents ifNil: [#()]! !!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 19:59'!hasUnacceptedEdits	"Answer true if any of the views on this object has unaccepted edits."	self dependents		do: [:each | each hasUnacceptedEdits ifTrue: [^ true]]		without: self.	^ false! !!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 19:55'!myDependents	"Private. Answer a list of all the receiver's dependents."	^ DependentsFields at: self ifAbsent: []! !!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 19:52'!myDependents: aCollectionOrNil	"Private. Set (or remove) the receiver's dependents list."	aCollectionOrNil		ifNil: [DependentsFields removeKey: self ifAbsent: []]		ifNotNil: [DependentsFields at: self put: aCollectionOrNil]! !!Object methodsFor: 'dependents access' stamp: 'sma 2/29/2000 20:23'!removeDependent: anObject	"Remove the given object as one of the receiver's dependents."	| dependents |	dependents _ self dependents reject: [:each | each == anObject].	self myDependents: (dependents isEmpty ifFalse: [dependents]).	^ anObject! !!Object methodsFor: 'updating' stamp: 'sma 2/29/2000 20:05'!update: aParameter 	"Receive a change notice from an object of whom the receiver is a 	dependent. The default behavior is to do nothing; a subclass might want 	to change itself in some way."	^ self! !!Model methodsFor: 'dependents' stamp: 'sma 2/29/2000 19:26'!canDiscardEdits	"Answer true if none of the views on this model has unaccepted edits that matter."	dependents ifNil: [^ true].	^ super canDiscardEdits! !!Model methodsFor: 'dependents' stamp: 'sma 2/29/2000 19:54'!myDependents	^ dependents! !!Model methodsFor: 'dependents' stamp: 'sma 2/29/2000 19:54'!myDependents: aCollectionOrNil	dependents _ aCollectionOrNil! !!Object class methodsFor: 'private' stamp: 'sma 2/29/2000 20:12'!initializeDependentsFields	DependentsFields _ IdentityDictionary new	"Object initializeDependentsFields"! !Model removeSelector: #addDependent:!Model removeSelector: #dependents!Model removeSelector: #removeDependent:!Model removeSelector: #breakDependents!