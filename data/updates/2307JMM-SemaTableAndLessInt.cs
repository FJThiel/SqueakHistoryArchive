'From Squeak2.8alpha of 19 January 2000 [latest update: #2242] on 7 June 2000 at 8:07:17 pm'!"Change Set:		JMM-ExtSemaBuffersAndLessIntDate:			7 June 2000Author:			johnmci@smalltalkconsulting.comWhen I was building a high performance tcp/ip test server I found a number of problems with the external interrupt interface. The first problem is the table at 25 elements is too small, I had test cases that triggered upto 216 interrupts. The second issue was the signalSemaphoreWithIndex: method consolidated semaphores, so two calls on the same semaphore might become one call. This isn't how the Semaphore logic work in the Squeak Class. The third and more difficult problem to solve is that the code used to populate the table and reading from the table is not thread safe. As Squeak is reading from the table then setting the counter to zero you can be busy placing elements in the table via interrupt driven routines. The more complicated fix is to use a OS thread safe queue. The less complicated solution is to use a dual buffered array. This fix uses the dual buffered array. Two arrays of 500 are created and alternate usage based on who is read and who is writting. This should limit problems with interrupt driven code attempting to place items in a array that is being itterated over. In this solution signalExternalSemaphores iternates over the array that isn't active, the signalSemaphoreWithIndex: routine places items in the active array without fear of stomping on the signalExternalSemaphores logic. Note of course you can still exceed the 500 element fixed limit and loose interrupts, but of course you could compile a new VM with a larger limit.I also discovered various race conditions on the access to the externalSemaphore table. This new class uses class side methods to restrict access using a mutex semaphore. It seemed cleaner to deligate the reponsibility here versus adding more code and another class variable to SystemDictionary Note that in Smalltalk recreateSpecialObjectsArray we still directly play with the table.Lastly on the faster machines of today I found that checkForInterrupts was being called well over a thousand times per second. If there is no interrupt activity or other extraordinary events then a simple counter is used to dicate how often the call should be made. Problem is machines are so fast now that the original 1000 counter start value is too small. This change attempts to use feedback to dictate the number of calls to about 200 per second (perhaps too high?) As time progresses it attempts to make the counter start number float to a optimistic value. Clock overFlows, long delays etc should not drastically affect the algoritmn, we still limit the lower end to 1000. On a PowerBook 500Mhz the value floated between 5200 and 10500, and gave me a 2% improvement in bytescodes per second.Note that interruptChecksEveryNms is the target delay between calls, this value is in milliseconds, to use a different value you must then build a new VM.Beware if your implementation's millisecond clock doesn't record in resolutions of at least 5 milliseond increments. If for example your clock will only give you 1/60 of a second accuracy this change set will cause problems. in this case change interruptChecksEveryNms to 0 to keep the historical behavior when you are building your VM"!Object subclass: #ExternalSemaphoreTable	instanceVariableNames: ''	classVariableNames: 'ProtectTable '	poolDictionaries: ''	category: 'System-Support'!!ExternalSemaphoreTable commentStamp: '<historical>' prior: 0!By John M McIntosh johnmci@smalltalkconsulting.comThis class was written to mange the external semaphore table. When I was writing a Socket test server I discovered various race conditions on the access to the externalSemaphore table. This new class uses class side methods to restrict access using a mutex semaphore. It seemed cleaner to deligate the reponsibility here versus adding more code and another class variable to SystemDictionary Note that in Smalltalk recreateSpecialObjectsArray we still directly play with the table.!ObjectMemory subclass: #Interpreter	instanceVariableNames: 'activeContext theHomeContext method receiver instructionPointer stackPointer localIP localSP localHomeContext messageSelector argumentCount newMethod currentBytecode successFlag primitiveIndex methodCache atCache lkupClass reclaimableContextCount nextPollTick nextWakeupTick lastTick interruptKeycode interruptPending semaphoresToSignal semaphoresToSignalCount savedWindowSize fullScreenFlag deferDisplayUpdates pendingFinalizationSignals compilerInitialized compilerHooks extraVMMemory interpreterVersion obsoleteIndexedPrimitiveTable obsoleteNamedPrimitiveTable interpreterProxy showSurfaceFn semaphoresToSignalA semaphoresToSignalB semaphoresUseBufferA semaphoresToSignalCountA semaphoresToSignalCountB interruptChecksEveryNms interruptCheckCounterFeedBackReset '	classVariableNames: 'ActiveProcessIndex AtCacheEntries AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BlockArgumentCountIndex BytecodeTable CacheProbeMax CallerIndex CharacterValueIndex CompilerHooksSize CrossedX DirBadPath DirEntryFound DirNoMoreEntries EndOfRun ExcessSignalsIndex FirstLinkIndex GenerateBrowserPlugin HeaderIndex HomeIndex InitialIPIndex InstanceSpecificationIndex InstructionPointerIndex LastLinkIndex LiteralStart MaxPrimitiveIndex MessageArgumentsIndex MessageDictionaryIndex MessageLookupClassIndex MessageSelectorIndex MethodArrayIndex MethodCacheClass MethodCacheEntries MethodCacheEntrySize MethodCacheMask MethodCacheMethod MethodCachePrim MethodCacheSelector MethodCacheSize MethodIndex MyListIndex NextLinkIndex PrimitiveExternalCallIndex PrimitiveTable PriorityIndex ProcessListsIndex ReceiverIndex SelectorStart SemaphoresToSignalSize SenderIndex StackPointerIndex StreamArrayIndex StreamIndexIndex StreamReadLimitIndex StreamWriteLimitIndex SuperclassIndex SuspendedContextIndex TempFrameStart ValueIndex XIndex YIndex '	poolDictionaries: ''	category: 'VMConstruction-Interpreter'!!ExternalSemaphoreTable class methodsFor: 'accessing' stamp: 'JMM 6/6/2000 20:36'!clearExternalObjects	"Clear the array of objects that have been registered for use in non-Smalltalk code."	ProtectTable critical: [Smalltalk specialObjectsArray at: 39 put: Array new].! !!ExternalSemaphoreTable class methodsFor: 'accessing' stamp: 'JMM 6/6/2000 21:01'!externalObjects	^ProtectTable critical: [Smalltalk specialObjectsArray at: 39].! !!ExternalSemaphoreTable class methodsFor: 'accessing' stamp: 'JMM 6/6/2000 20:44'!registerExternalObject: anObject	^ ProtectTable critical: [self safelyRegisterExternalObject: anObject]! !!ExternalSemaphoreTable class methodsFor: 'accessing' stamp: 'JMM 6/6/2000 20:57'!safelyRegisterExternalObject: anObject	"Register the given object in the external objects array and return its index. If it is already there, just return its index."	| objects firstEmptyIndex obj sz newObjects |	objects _ Smalltalk specialObjectsArray at: 39.	"find the first empty slot"	firstEmptyIndex _ 0.	1 to: objects size do: [:i |		obj _ objects at: i.		obj == anObject ifTrue: [^ i].  "object already there, just return its index"		(obj == nil and: [firstEmptyIndex = 0]) ifTrue: [firstEmptyIndex _ i]].	"if no empty slots, expand the array"	firstEmptyIndex = 0 ifTrue: [		sz _ objects size.		newObjects _ objects species new: sz + 20.  "grow linearly"		newObjects replaceFrom: 1 to: sz with: objects startingAt: 1.		firstEmptyIndex _ sz + 1.		Smalltalk specialObjectsArray at: 39 put: newObjects.		objects _ newObjects].	objects at: firstEmptyIndex put: anObject.	^ firstEmptyIndex! !!ExternalSemaphoreTable class methodsFor: 'accessing' stamp: 'JMM 6/6/2000 20:59'!safelyUnregisterExternalObject: anObject	"Unregister the given object in the external objects array. Do nothing if it isn't registered.	JMM change to return if we clear the element, since it should only appear once in the array"	| objects |	anObject ifNil: [^ self].	objects _ Smalltalk specialObjectsArray at: 39.	1 to: objects size do: [:i |		(objects at: i) == anObject ifTrue: 		[objects at: i put: nil.		^self]].! !!ExternalSemaphoreTable class methodsFor: 'accessing' stamp: 'JMM 6/6/2000 20:45'!unregisterExternalObject: anObject	ProtectTable critical: [self safelyUnregisterExternalObject: anObject]! !!ExternalSemaphoreTable class methodsFor: 'initialize' stamp: 'JMM 6/6/2000 20:32'!initialize	ProtectTable _ Semaphore forMutualExclusion! !!Interpreter methodsFor: 'initialization' stamp: 'JMM 6/7/2000 12:32'!initializeInterpreter: bytesToShift	"Initialize Interpreter state before starting execution of a new image."	interpreterProxy _ self sqGetInterpreterProxy.	self initializeObjectMemory: bytesToShift.	self initCompilerHooks.	self flushExternalPrimitives.	activeContext	_ nilObj.	theHomeContext	_ nilObj.	method			_ nilObj.	receiver		_ nilObj.	messageSelector	_ nilObj.	newMethod		_ nilObj.	self flushMethodCache.	self loadInitialContext.	interruptCheckCounter _ 0.	interruptCheckCounterFeedBackReset _ 1000.	interruptChecksEveryNms _ 5.	nextPollTick _ 0.	nextWakeupTick _ 0.	lastTick _ 0.	interruptKeycode _ 2094.  "cmd-."	interruptPending _ false.	semaphoresUseBufferA _ true.	semaphoresToSignalCountA _ 0.	semaphoresToSignalCountB _ 0.	deferDisplayUpdates _ false.	pendingFinalizationSignals _ 0.! !!Interpreter methodsFor: 'processes' stamp: 'JMM 6/7/2000 12:32'!checkForInterrupts	"Check for possible interrupts and handle one if necessary."	| sema now |	self inline: false.	"Mask so same wrap as primitiveMillisecondClock"	now _ self ioMSecs bitAnd: 16r1FFFFFFF. 	now < lastTick ifTrue: [		"millisecond clock wrapped"		nextPollTick _ now + (nextPollTick - lastTick).		nextWakeupTick ~= 0			ifTrue: [nextWakeupTick _ now + (nextWakeupTick - lastTick)]].	(now - lastTick) < interruptChecksEveryNms ifTrue: "wrapping is not a concern"	    [interruptCheckCounterFeedBackReset _ interruptCheckCounterFeedBackReset + 10]	ifFalse: 		[interruptCheckCounterFeedBackReset <= 1000 			ifTrue: [interruptCheckCounterFeedBackReset _ 1000]			ifFalse: [interruptCheckCounterFeedBackReset _ interruptCheckCounterFeedBackReset - 12]].	interruptCheckCounter _ interruptCheckCounterFeedBackReset.  "reset the interrupt check counter"	lastTick _ now.  "used to detect millisecond clock wrapping"	signalLowSpace ifTrue: [		signalLowSpace _ false.  "reset flag"		sema _ (self splObj: TheLowSpaceSemaphore).		sema = nilObj ifFalse: [self synchronousSignal: sema]].	now >= nextPollTick ifTrue: [		self ioProcessEvents.  "sets interruptPending if interrupt key pressed"		nextPollTick _ now + 500].  "msecs to wait before next call to ioProcessEvents"	interruptPending ifTrue: [		interruptPending _ false.  "reset interrupt flag"		sema _ (self splObj: TheInterruptSemaphore).		sema = nilObj ifFalse: [self synchronousSignal: sema]].	((nextWakeupTick ~= 0) and: [now >= nextWakeupTick]) ifTrue: [		nextWakeupTick _ 0.  "reset timer interrupt"		sema _ (self splObj: TheTimerSemaphore).		sema = nilObj ifFalse: [self synchronousSignal: sema]].	"signal any pending finalizations"	pendingFinalizationSignals > 0 ifTrue:[		sema _ self splObj: TheFinalizationSemaphore.		(self fetchClassOf: sema) = (self splObj: ClassSemaphore) 			ifTrue:[self synchronousSignal: sema].		pendingFinalizationSignals _ 0.	].	"signal all semaphores in semaphoresToSignal" 	(semaphoresToSignalCountA > 0 or: [semaphoresToSignalCountB > 0])		ifTrue: [self signalExternalSemaphores].! !!Interpreter methodsFor: 'processes' stamp: 'JMM 6/6/2000 00:17'!signalExternalSemaphores	"Signal all requested semaphores"	| xArray xSize index sema |	semaphoresUseBufferA _ semaphoresUseBufferA not.	xArray _ self splObj: ExternalObjectsArray.	xSize _ self stSizeOf: xArray.	semaphoresUseBufferA ifTrue: ["use opposite buffer during read"		1 to: semaphoresToSignalCountB do: [:i |			index _ semaphoresToSignalB at: i.			(index <= xSize) ifTrue:[				sema _ self fetchPointer: index - 1 ofObject: xArray.					"Note: semaphore indices are 1-based"				(self fetchClassOf: sema) = (self splObj: ClassSemaphore)					ifTrue: [self synchronousSignal: sema]]].		semaphoresToSignalCountB _ 0]	ifFalse: [		1 to: semaphoresToSignalCountA do: [:i |			index _ semaphoresToSignalA at: i.			(index <= xSize) ifTrue:[				sema _ self fetchPointer: index - 1 ofObject: xArray.					"Note: semaphore indices are 1-based"				(self fetchClassOf: sema) = (self splObj: ClassSemaphore)					ifTrue: [self synchronousSignal: sema]]].		semaphoresToSignalCountA _ 0]! !!Interpreter methodsFor: 'processes' stamp: 'JMM 6/6/2000 00:41'!signalSemaphoreWithIndex: index	"Record the given semaphore index in the double buffer semaphores array to be signaled at the next convenient moment. Set the interruptCheckCounter to zero to force a real interrupt check as soon as possible."	index <= 0 ifTrue: [^ nil].  "bad index; ignore it"	semaphoresUseBufferA ifTrue: 		[semaphoresToSignalCountA < SemaphoresToSignalSize ifTrue: [			semaphoresToSignalCountA _ semaphoresToSignalCountA + 1.			semaphoresToSignalA at: semaphoresToSignalCountA put: index]]	ifFalse:		[semaphoresToSignalCountB < SemaphoresToSignalSize ifTrue: [			semaphoresToSignalCountB _ semaphoresToSignalCountB + 1.			semaphoresToSignalB at: semaphoresToSignalCountB put: index]].	interruptCheckCounter _ 0.! !!Interpreter class methodsFor: 'initialization' stamp: 'JMM 6/7/2000 11:46'!initialize	"Interpreter initialize"	super initialize.  "initialize ObjectMemory constants"	self initializeAssociationIndex.	self initializeBytecodeTable.	self initializeCaches.	self initializeCharacterIndex.	self initializeClassIndices.	self initializeCompilerHooks.	self initializeContextIndices.	self initializeDirectoryLookupResultCodes.	self initializeMessageIndices.	self initializeMethodIndices.	self initializePointIndices.	self initializePrimitiveTable.	self initializeSchedulerIndices.	self initializeSmallIntegers.	self initializeStreamIndices.	SemaphoresToSignalSize _ 500.	PrimitiveExternalCallIndex _ 117. "Primitive index for #primitiveExternalCall"	GenerateBrowserPlugin _ false.! !!Interpreter class methodsFor: 'translation' stamp: 'JMM 6/7/2000 11:47'!declareCVarsIn: aCCodeGenerator	aCCodeGenerator 		var: #interpreterProxy 		type: #'struct VirtualMachine*'.	aCCodeGenerator		var: #methodCache		declareC: 'int methodCache[', (MethodCacheSize + 1) printString, ']'.	aCCodeGenerator		var: #atCache		declareC: 'int atCache[', (AtCacheTotalSize + 1) printString, ']'.	aCCodeGenerator var: #localIP type: #'char*'.	aCCodeGenerator var: #localSP type: #'char*'.	aCCodeGenerator var: 'semaphoresToSignalA'		declareC: 'int semaphoresToSignalA[', (SemaphoresToSignalSize + 1) printString, ']'.	aCCodeGenerator var: 'semaphoresToSignalB'		declareC: 'int semaphoresToSignalB[', (SemaphoresToSignalSize + 1) printString, ']'.	aCCodeGenerator		var: #compilerHooks		declareC: 'int (*compilerHooks[', (CompilerHooksSize + 1) printString, '])()'.	aCCodeGenerator		var: #interpreterVersion		declareC: 'const char *interpreterVersion = "', Smalltalk version, ' [', Smalltalk lastUpdateString,']"'.	aCCodeGenerator		var: #obsoleteIndexedPrimitiveTable		declareC: 'char* obsoleteIndexedPrimitiveTable[][3] = ', self obsoleteIndexedPrimitiveTableString.	aCCodeGenerator		var: #obsoleteNamedPrimitiveTable		declareC: 'const char* obsoleteNamedPrimitiveTable[][3] = ', self obsoleteNamedPrimitiveTableString.! !!InterpreterProxy methodsFor: 'other' stamp: 'JMM 6/6/2000 21:00'!signalSemaphoreWithIndex: semaIndex	((Smalltalk externalObjects) at: semaIndex) signal! !!InterpreterSimulator methodsFor: 'initialization' stamp: 'JMM 6/7/2000 11:51'!initialize	"Initialize the InterpreterSimulator when running the interpreter inside	Smalltalk. The primary responsibility of this method is to allocate	Smalltalk Arrays for variables that will be declared as statically-allocated	global arrays in the translated code."	"initialize class variables"	ObjectMemory initialize.	Interpreter initialize.	methodCache _ Array new: MethodCacheSize.	atCache _ Array new: AtCacheTotalSize.	rootTable _ Array new: RootTableSize.	remapBuffer _ Array new: RemapBufferSize.	semaphoresUseBufferA _ true.	semaphoresToSignalA _ Array new: SemaphoresToSignalSize.	semaphoresToSignalB _ Array new: SemaphoresToSignalSize.	obsoleteNamedPrimitiveTable _ 		CArrayAccessor on: self class obsoleteNamedPrimitiveTable.	obsoleteIndexedPrimitiveTable _ CArrayAccessor on: 		(self class obsoleteIndexedPrimitiveTable collect:[:spec| 			CArrayAccessor on:				(spec ifNil:[Array new: 3] 					  ifNotNil:[Array with: spec first with: spec second with: nil])]).	pluginList _ #().	mappedPluginEntries _ #().	"initialize InterpreterSimulator variables used for debugging"	byteCount _ 0.	sendCount _ 0.	traceOn _ true.	myBitBlt _ BitBltSimulator new setInterpreter: self.	displayForm _ nil.  "displayForm is created in response to primitiveBeDisplay"	filesOpen _ OrderedCollection new.! !!SystemDictionary methodsFor: 'special objects' stamp: 'JMM 6/6/2000 20:36'!clearExternalObjects	"Clear the array of objects that have been registered for use in non-Smalltalk code."	"Smalltalk clearExternalObjects"	ExternalSemaphoreTable clearExternalObjects! !!SystemDictionary methodsFor: 'special objects' stamp: 'JMM 6/6/2000 21:01'!externalObjects	"Return an array of objects that have been registered for use in non-Smalltalk code. Smalltalk objects should be referrenced by external code only via indirection through this array, thus allowing the objects to move during compaction. This array can be cleared when the VM re-starts, since variables in external code do not survive snapshots. Note that external code should not attempt to access a Smalltalk object, even via this mechanism, while garbage collection is in progress."	"Smalltalk externalObjects"	^ ExternalSemaphoreTable externalObjects! !!SystemDictionary methodsFor: 'special objects' stamp: 'JMM 6/6/2000 20:39'!registerExternalObject: anObject	"Register the given object in the external objects array and return its index. If it is already there, just return its index."	^ExternalSemaphoreTable registerExternalObject: anObject! !!SystemDictionary methodsFor: 'special objects' stamp: 'JMM 6/6/2000 20:40'!unregisterExternalObject: anObject	"Unregister the given object in the external objects array. Do nothing if it isn't registered."	ExternalSemaphoreTable unregisterExternalObject: anObject! !Interpreter initialize!ObjectMemory subclass: #Interpreter	instanceVariableNames: 'activeContext theHomeContext method receiver instructionPointer stackPointer localIP localSP localHomeContext messageSelector argumentCount newMethod currentBytecode successFlag primitiveIndex methodCache atCache lkupClass reclaimableContextCount nextPollTick nextWakeupTick lastTick interruptKeycode interruptPending semaphoresToSignalA semaphoresUseBufferA semaphoresToSignalCountA semaphoresToSignalB semaphoresToSignalCountB savedWindowSize fullScreenFlag deferDisplayUpdates pendingFinalizationSignals compilerInitialized compilerHooks extraVMMemory interpreterVersion obsoleteIndexedPrimitiveTable obsoleteNamedPrimitiveTable interpreterProxy showSurfaceFn interruptCheckCounterFeedBackReset interruptChecksEveryNms '	classVariableNames: 'ActiveProcessIndex AtCacheEntries AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BlockArgumentCountIndex BytecodeTable CacheProbeMax CallerIndex CharacterValueIndex CompilerHooksSize CrossedX DirBadPath DirEntryFound DirNoMoreEntries EndOfRun ExcessSignalsIndex FirstLinkIndex GenerateBrowserPlugin HeaderIndex HomeIndex InitialIPIndex InstanceSpecificationIndex InstructionPointerIndex LastLinkIndex LiteralStart MaxPrimitiveIndex MessageArgumentsIndex MessageDictionaryIndex MessageLookupClassIndex MessageSelectorIndex MethodArrayIndex MethodCacheClass MethodCacheEntries MethodCacheEntrySize MethodCacheMask MethodCacheMethod MethodCachePrim MethodCacheSelector MethodCacheSize MethodIndex MyListIndex NextLinkIndex PrimitiveExternalCallIndex PrimitiveTable PriorityIndex ProcessListsIndex ReceiverIndex SelectorStart SemaphoresToSignalSize SenderIndex StackPointerIndex StreamArrayIndex StreamIndexIndex StreamReadLimitIndex StreamWriteLimitIndex SuperclassIndex SuspendedContextIndex TempFrameStart ValueIndex XIndex YIndex '	poolDictionaries: ''	category: 'VMConstruction-Interpreter'!ExternalSemaphoreTable initialize!