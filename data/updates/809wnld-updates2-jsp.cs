'From Squeak 2.3 of January 14, 1999 on 9 April 1999 at 3:01:11 pm'!"Change Set:		wnld-updates-jspDate:			9 April 1999Author:			Jeff PierceUpdates and tweaks to Wonderlands."!!AbsoluteAnimation methodsFor: 'copying' stamp: 'jsp 4/9/1999 14:22'!reversed	"Creates a reversed version of an animation"	| anim |	anim _ AbsoluteAnimation new.	anim object: animatedObject		update: updateFunction		getStartState: getStartStateFunction		getEndState: getEndStateFunction		style: styleFunction		duration: duration		undoable: true		inWonderland: myWonderland.	anim stop.	(direction = Forward) ifTrue: [ anim reverseDirection ].	^ anim.! !!ParallelAnimation methodsFor: 'copying' stamp: 'jsp 4/9/1999 14:21'!reversed	"Creates a reversed version of an animation"	| anim copyOfChildren copyOfChild i |	anim _ ParallelAnimation new.	i _ 1.	copyOfChildren _ OrderedCollection new.	children do: [:child | copyOfChild _ child copy.						 copyOfChild setLoopCount: (childLoopCounts at: i).						 copyOfChildren addLast: copyOfChild.						 i _ i + 1 ].	anim children: copyOfChildren		undoable: true		inWonderland: myWonderland.	(direction = Reverse) ifTrue: [ anim setDirection: Reverse ].	anim reverseDirection.	anim stop.	^ anim.! !!RelativeAnimation methodsFor: 'copying' stamp: 'jsp 4/9/1999 14:21'!reversed	"Creates a reversed version of an animation"	| anim |	anim _ RelativeAnimation new.	anim object: animatedObject		update: updateFunction		getStartState: getStartStateFunction		getEndState: getEndStateFunction		getReverseState: getReverseStateFunction 		style: styleFunction		duration: duration		undoable: true		inWonderland: myWonderland.	anim stop.	(direction = Forward) ifTrue: [ anim reverseDirection ].	^ anim.! !!SequentialAnimation methodsFor: 'copying' stamp: 'jsp 4/9/1999 14:21'!reversed	"Creates a reversed version of an animation"	| anim copyOfChildren copyOfChild i |	anim _ SequentialAnimation new.	i _ 1.	copyOfChildren _ OrderedCollection new.	children do: [:child | copyOfChild _ child copy.						 copyOfChild setLoopCount: (childLoopCounts at: i).						 copyOfChildren addLast: copyOfChild.						 i _ i + 1 ].	anim children: copyOfChildren		undoable: true		inWonderland: myWonderland.	(direction = Reverse) ifTrue: [ anim setDirection: Reverse ].	anim reverseDirection.	anim stop.	^ anim.! !!Wonderland methodsFor: 'creating' stamp: 'jsp 4/9/1999 14:12'!makeCamera	"Add a new camera to the Wonderland"	| newCamera name |	newCamera _ WonderlandCamera createFor: self.	name _ self uniqueNameFrom: 'camera'.	newCamera setName: name.	myNamespace at: name put: newCamera.	cameraList addLast: newCamera.	scriptEditor updateActorBrowser.	"Add an undo action to remove this camera"	myUndoStack push: (UndoAction new: [  cameraList remove: newCamera.											newCamera removeFromScene.											myNamespace removeKey: name ifAbsent: [].											cameraList remove: newCamera.											newCamera release.											scriptEditor updateActorBrowser ]).	^ newCamera.! !!WonderlandActor methodsFor: 'accessing' stamp: 'jsp 4/9/1999 14:06'!angularDistanceTo: aRotationVector	"Returns the angular distance in degrees between the actor's current orientation and an (x, y, z) rotation vector"	| m sum angles vector1 vector2 |	"Check our arguments to make sure they're valid"	[ WonderlandVerifier VerifyTarget: aRotationVector ]		ifError: [ :msg :rcvr |			myWonderland reportErrorToUser: 'Squeak can only calculate the distance from ' , myName , ' to an actor or 3D point.'.			^ nil ].	"Our arguments check out, so determine the distance"	m _ B3DMatrix4x4 identity.	m rotation: (self getRotationVector).	m _ m composeWith: (B3DMatrix4x4 identity translation: (B3DVector3 x:0 y:0 z:1)).	vector1 _ m translation.	m setIdentity.	(aRotationVector isKindOf: WonderlandActor)		ifTrue: [				angles _ aRotationVector getAngles: myParent.				m rotation: (B3DVector3 x: (angles at: 1) y: (angles at: 2) z: (angles at: 3)).				]		ifFalse: [				m rotation: (B3DVector3 x: (aRotationVector at: 1) y: (aRotationVector at: 2)										z: (aRotationVector at: 3)).				].	m _ m composeWith: (B3DMatrix4x4 identity translation: (B3DVector3 x:0 y:0 z:1)).	vector2 _ m translation.	sum _ ((vector1 x) * (vector2 x)) + ((vector1 y) * (vector2 y)) + ((vector1 z) * (vector2 z)).	^ ((sum / ((vector1 length) * (vector2 length))) arcCos) radiansToDegrees.! !!WonderlandActor methodsFor: 'primitive behaviors' stamp: 'jsp 4/9/1999 14:09'!turnTo: aVector speed: aSpeed 	"Turns the object to the specified orientation in its parent's coordinate system at aSpeed turns per second."	^ self turnTo: aVector duration: (((self angularDistanceTo: aVector) / (aSpeed * 360)) abs)			style: abruptly.! !!WonderlandActor methodsFor: 'primitive behaviors' stamp: 'jsp 4/9/1999 14:09'!turnTo: aVector speed: aSpeed asSeenBy: reference	"Turns the object to the specified orientation in the reference's coordinate system at aSpeed turns per second."	^ self turnTo: aVector duration: (((self angularDistanceTo: aVector) / (aSpeed * 360)) abs)				asSeenBy: reference style: abruptly.! !!WonderlandActor methodsFor: 'private' stamp: 'jsp 4/9/1999 14:35'!reparentTo: anObject	"Make this actor a child of the specified object."	| newComposite classList parentClass |	classList _ myWonderland getActorClassList.	"First break ties with the current parent"	myParent removeChild: self.	parentClass _ myParent class.	(parentClass == WonderlandScene)		ifTrue: [				myWonderland getNamespace removeKey: myName ifAbsent: [].				]		ifFalse: [				classList remove: parentClass.				parentClass removeSelector: (myName asSymbol).				parentClass removeInstVarName: myName.				classList addLast: (myParent class).				].	"Figure out the new composite transformation matrix"	newComposite _ anObject getMatrixToRoot.	newComposite _ newComposite composeWith: (self getMatrixFromRoot).		"Now build ties with the new parent"	anObject addChild: self.	myParent _ anObject.	parentClass _ myParent class.	(parentClass == WonderlandScene)		ifTrue: [				(myWonderland getNamespace at: myName ifAbsent: [ nil ])					ifNotNil: [ myName _ myWonderland uniqueNameFrom: myName ].				(myWonderland getNamespace at: myName put: self).				]		ifFalse: [				myName _ parentClass uniqueNameFrom: myName.						classList remove: parentClass.				myParent addInstanceVarNamed: myName withValue: self.				(myParent class) compile: (myName , '											^ ' , myName, '.').				classList addLast: (myParent class).				].	composite _ newComposite.	"Now update the actor browser"	myWonderland getEditor updateActorBrowser.! !