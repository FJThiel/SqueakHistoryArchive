'From Squeak2.9alpha of 13 June 2000 [latest update: #2863] on 11 October 2000 at 6:37:39 pm'!"Change Set:		DnDProps-arDate:			11 October 2000Author:			Andreas RaabThe change removes the old #dragNDropEnabled property which was a leftover from several hundred change sets ago..."!!Morph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:18'!dragEnabled: aBool	^self enableDrag: aBool! !!Morph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:20'!dragNDropEnabled	"Note: This method is only useful for dragEnabled == dropEnabled at all times"	self separateDragAndDrop.	^self dragEnabled and:[self dropEnabled]! !!Morph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:18'!dropEnabled: aBool	^self enableDrop: aBool! !!Morph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:21'!enableDragNDrop: aBoolean	"Set both properties at once"	self separateDragAndDrop.	self enableDrag: aBoolean.	self enableDrop: aBoolean.! !!Morph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:24'!separateDragAndDrop	"Conversion only. Separate the old #dragNDropEnabled into #dragEnabled and #dropEnabled and remove the old property."	| dnd |	(self hasProperty: #dragNDropEnabled) ifFalse:[^self].	dnd _ (self valueOfProperty: #dragNDropEnabled) == true.	self dragEnabled: dnd.	self dropEnabled: dnd.	self removeProperty: #dragNDropEnabled.! !!Morph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:24'!wantsDroppedMorph: aMorph event: evt	"Return true if the receiver wishes to accept the given morph, which is being dropped by a hand in response to the given event. Note that for a successful drop operation both parties need to agree. The symmetric check is done automatically via aMorph wantsToBeDroppedInto: self."	^self dropEnabled! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:22'!repelsMorph: aMorph event: ev	(aMorph wantsToBeDroppedInto: self) ifFalse: [^ false].	self dropEnabled ifFalse: [^ true].	(self wantsDroppedMorph: aMorph event: ev) ifFalse: [^ true].	^ super repelsMorph: aMorph event: ev "consults #repelling flag"! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'ar 10/11/2000 18:22'!wantsDroppedMorph: aMorph event: evt	self isWorldMorph ifTrue:[^true]. "always"	self visible ifFalse: [^ false].  "will be a call to #hidden again very soon"	self dropEnabled ifFalse: [^ false].	^ true! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'ar 10/11/2000 18:22'!wantsHaloFor: aSubMorph	"Answer whether the receiver wishes for a mouse-over halo to be produced for aSubMorph"	^ wantsMouseOverHalos == true and:		 [self visible and:			[isPartsBin ~~ true and:				[self dropEnabled and:					[self isWorldMorph not or: [aSubMorph renderedMorph isLikelyRecipientForMouseOverHalos]]]]]	"The odd logic at the end of the above says...		*  If we're an interior playfield, then if we're set up for mouseover halos, show em.		*  If we're a World that's set up for mouseover halos, only show 'em if the putative				recipient is a SketchMorph.	This (old) logic was put in to suit a particular need in early e-toy days and seems rather strange now!!"! !!PianoRollScoreMorph methodsFor: 'menu' stamp: 'ar 10/11/2000 18:22'!addCustomMenuItems: aCustomMenu hand: aHandMorph	super addCustomMenuItems: aCustomMenu hand: aHandMorph.	aCustomMenu add: 'expand time' action: #expandTime.	aCustomMenu add: 'contract time' action: #contractTime.	(self dragNDropEnabled)		ifTrue: [aCustomMenu add: 'close drag and drop' action: #disableDragNDrop]		ifFalse: [aCustomMenu add: 'open drag and drop' action: #enableDragNDrop].! !PasteUpMorph removeSelector: #allowSubmorphExtraction!Morph removeSelector: #allowSubmorphExtraction!