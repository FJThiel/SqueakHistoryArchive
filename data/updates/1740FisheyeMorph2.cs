'From Squeak2.6 of 11 October 1999 [latest update: #1723] on 17 December 1999 at 1:59:26 pm'!"Change Set:		FisheyeMorphDate:			17 December 1999Author:			Yoshiki OshimaFishEyeMorph is a subclass of MagnifierMorph that displays a distorted view with greater magnification at the center, and lesser magnification at the edges.Includes a minor positioning tweak to MagnifierMorph by DI."!MagnifierMorph subclass: #FishEyeMorph	instanceVariableNames: 'gridNum form d clipRects toRects quads savedExtent '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Demo'!!MagnifierMorph methodsFor: 'magnifying' stamp: 'di 12/17/1999 13:42'!sourceRectFrom: aPoint	^ (aPoint extent: srcExtent) translateBy: (srcExtent // -2) + 1.! !!FishEyeMorph methodsFor: 'private' stamp: 'yo 12/17/1999 11:15'!gridSizeFor: aPoint	"returns appropriate size for specified argument"	| g |	g _ aPoint x min: aPoint y.	g <= 256 ifTrue: [^8].	^16.! !!FishEyeMorph methodsFor: 'private' stamp: 'yo 12/17/1999 13:08'!initializeForm	savedExtent _ srcExtent.	form _ Form extent: srcExtent depth: Display depth.	self calculateTransform.! !!FishEyeMorph methodsFor: 'private' stamp: 'di 12/17/1999 13:51'!magnifiedForm	| warp srcRect exclusion fromForm |	(form isNil or: [savedExtent ~= srcExtent]) ifTrue: [		self initializeForm ].	lastPos _ self sourcePoint.	srcRect _ self sourceRectFrom: lastPos.	((srcRect intersects: self bounds) and: [ RecursionLock == nil ])		ifTrue: [RecursionLock _ self.				self isRound					ifTrue: [exclusion _ owner]					ifFalse: [exclusion _ self].				fromForm _ self world patchAt: srcRect without: exclusion andNothingAbove: false.				RecursionLock _ nil]		ifFalse: ["cheaper method if the source is not occluded"				fromForm _ Display copy: (srcRect translateBy: self world viewBox origin)].	warp _  (WarpBlt toForm: form)		sourceForm: fromForm;		colorMap: nil;		cellSize: 2;		combinationRule: Form over.	1 to: gridNum y do: [:j |		1 to: gridNum x do: [:i |			warp				clipRect: ((clipRects at: j) at: i);				copyQuad: ((quads at: j) at: i)					toRect: ((toRects at: j) at: i).		].	].	^form! !!FishEyeMorph methodsFor: 'initialization' stamp: 'yo 12/17/1999 12:00'!calculateTransform	| stepX stepY rect tx ty arrayX arrayY |	(gridNum x = 0 or: [gridNum y = 0]) ifTrue: [^self].	stepX _ srcExtent x // gridNum x.	stepY _ srcExtent y // gridNum y.	arrayX _ (1 to: gridNum y + 1) collect: [:j | FloatArray new: gridNum x + 1].	arrayY _ (1 to: gridNum y + 1) collect: [:j |  FloatArray new: gridNum x + 1].	0 to: gridNum y do: [:j |		0 to: gridNum x do: [:i |			(arrayX at: (j + 1)) at: (i + 1) put: i*stepX.			(arrayY at: (j + 1)) at: (i + 1) put: j*stepY.		].	].	0 to: gridNum y do: [:j |		self transformX: (arrayX at: (j+1)).		self transformY: (arrayY at: (j+1)).	].	0 to: gridNum y do: [:j |		arrayX at: (j+1) put: ((1 to: gridNum x +1) collect: [:i | ((arrayX at: (j+1)) at: i) asInteger]).		arrayY at: (j+1) put: ((1 to: gridNum x +1) collect: [:i | ((arrayY at: (j+1)) at: i) asInteger]).	].	clipRects _ (1 to: gridNum y) collect: [:j | Array new: gridNum x].	toRects _ (1 to: gridNum y) collect: [:j |  Array new: gridNum x].	quads _ (1 to: gridNum y) collect: [:j |  Array new: gridNum x].	0 to: gridNum y - 1 do: [:j |		0 to: gridNum x- 1 do: [:i |			rect _ (((arrayX at: (j+1)) at: (i+1))@((arrayY at: (j+1)) at: (i+1)))						corner: ((arrayX at: (j+2)) at: (i+2))@((arrayY at: (j+2)) at: (i+2)).			(clipRects at: j+1) at: i+1 put: rect.			rect width >= stepX ifTrue: [rect _ rect expandBy: (1@0)].			rect height >= stepY ifTrue: [rect _ rect expandBy: (0@1)].			(toRects at: j+1) at: i+1 put: rect.			tx _ (i)*stepX.			ty _ (j)*stepY.			(quads at: j+1) at: i+1						put: {(tx)@(ty). (tx)@(ty+stepY). (tx+stepX)@(ty+stepY). (tx+stepX)@(ty)}.		].	].! !!FishEyeMorph methodsFor: 'initialization' stamp: 'yo 12/17/1999 10:15'!g: aFloatArray max: max focus: focus	| dNormX array |	dNormX _ aFloatArray - focus.		array _ dNormX / max.	array *= d.	array += 1.0.	array _ 1.0 / array.	dNormX *= (d+1.0).	array *= dNormX.	^array += focus.! !!FishEyeMorph methodsFor: 'initialization' stamp: 'yo 12/17/1999 12:41'!initialize	super initialize.	"magnification should be always 1"	magnification _ 1.	d _ 1.3.	self extent: 130@130.! !!FishEyeMorph methodsFor: 'initialization' stamp: 'yo 12/17/1999 12:32'!transformX: aFloatArray	| focus gridNum2 subArray dMaxX |	focus _ srcExtent x asFloat / 2.	gridNum2 _ (aFloatArray findFirst: [:x | x > focus]) - 1.	dMaxX _ 0.0 - focus.	subArray _ self g: (aFloatArray copyFrom: 1 to: gridNum2) max: dMaxX focus: focus.	aFloatArray replaceFrom: 1 to: gridNum2 with: subArray startingAt: 1.	dMaxX _ focus.    " = (size - focus)".	subArray _ self g: (aFloatArray copyFrom: gridNum2 + 1 to: gridNum x + 1)		max: dMaxX focus: focus.	aFloatArray replaceFrom: gridNum2 + 1 to: gridNum x + 1 with: subArray startingAt: 1.! !!FishEyeMorph methodsFor: 'initialization' stamp: 'yo 12/17/1999 11:42'!transformY: aFloatArray	| focus subArray dMaxY |	focus _ srcExtent y asFloat / 2.	(aFloatArray at: 1) <= focus ifTrue: [		dMaxY _ 0.0 - focus.	] ifFalse: [		dMaxY _ focus.    " = (size - focus)".	].			subArray _ self g: (aFloatArray copyFrom: 1 to: gridNum x + 1) max: dMaxY focus: focus.	aFloatArray replaceFrom: 1 to: gridNum x + 1 with: subArray startingAt: 1.! !!FishEyeMorph methodsFor: 'menus' stamp: 'yo 12/17/1999 12:32'!chooseMagnification	self inform: 'Magnification is fixed, sorry.'! !!FishEyeMorph methodsFor: 'events' stamp: 'yo 12/17/1999 12:03'!chooseMagnification: evt! !!FishEyeMorph methodsFor: 'geometry' stamp: 'yo 12/17/1999 12:27'!extent: aPoint	"Round to a number divisible by grid.  Note that the superclass has its own implementation."	| g gridSize |	gridSize _ self gridSizeFor: aPoint.	"self halt."	g _ (aPoint - (2 * borderWidth)) // gridSize.	srcExtent _ g * gridSize.	gridNum _ g.	^super extent: self defaultExtent! !