'From Squeak 2.4c of May 10, 1999 on 16 July 1999 at 5:18:22 pm'!"Change Set:		emptyScripts-swDate:			16 July 1999Author:			Scott WallaceOffers some recourse against the proliferation of empty scripts caused by the awkward drag & drop action of tile scripting.  Three avenues of improvement are supplied:(1)  When the drop of a tile phrase results in the establishment of a new scriptor, the opportunity is taken to delete all now-empty and never-named tile scripts belonging to the object.  This deals with the primary offending cases.(2)  When you dismiss an empty unnamed scriptor, it is also automatically removed from the player and its viewers.(3)  There is a new command in the viewer menu allowing you proactively to expunge all the empty scripts of the player."!!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'sw 7/16/1999 16:49'!morphToDropFrom: aMorph	| itsSelector aScriptor adjustment anEditor actualObject aUserScript ownersChoice aNail representee |	owner ifNotNil:		[(ownersChoice _ owner substituteForMorph: aMorph beingDroppedOn: self)			ifNotNil:	[^ ownersChoice]].	self alwaysShowThumbnail ifTrue:		[aNail _ aMorph representativeNoTallerThan: self maxHeightToAvoidThumbnailing norWiderThan: self maximumThumbnailWidth thumbnailHeight: self heightForThumbnails.		aNail == aMorph ifFalse:			[aNail position: (self primaryHand position - ((self primaryHand targetOffset - self primaryHand formerPosition) * (aNail extent / aMorph extent)) rounded)].		^ aNail].	((aMorph isKindOf: MorphThumbnail) and: [(representee _ aMorph morphRepresented) owner == nil])		ifTrue:			[representee position: (self primaryHand position - ((self primaryHand targetOffset - self primaryHand formerPosition) * (representee extent / aMorph extent)) rounded).			^ representee].	self expandPhrasesToScripts ifFalse: [^ aMorph].	(aMorph hasProperty: #newAnonymousScript) ifTrue: [^ self emptyAnonymousScriptorFrom: aMorph].	(aMorph hasProperty: #newPermanentScript) ifTrue: [^ self emptyPermanentScriptorFrom: aMorph].	(aMorph isKindOf: PhraseTileMorph) ifFalse: [^ aMorph].	aMorph isCommand ifFalse: [^ aMorph].	(actualObject _ aMorph actualObject) ifNil: [^ aMorph].	actualObject assureUniClass.	itsSelector _ aMorph userScriptSelector.	aScriptor _ (itsSelector ~~ nil and: [itsSelector size > 0])		ifTrue:			[actualObject isFlagshipForClass				ifFalse:					["We can set the status for our instantiation of this script, but cannot allow script editing"					anEditor _ actualObject scriptEvaluatorFor: itsSelector phrase: aMorph.					adjustment _ 50 @ 40.					anEditor]				ifTrue:					["old note: ambiguous case: if there's a script editor on the world, drop down a button, else drop down the script editor"					aUserScript _ actualObject class userScriptForPlayer: actualObject selector: itsSelector.					aUserScript isTextuallyCoded						ifTrue: [^ self scriptorForTextualScript: itsSelector ofPlayer: actualObject].					((anEditor _ actualObject scriptEditorFor: itsSelector) isInWorld and:							[anEditor owner == self])						ifFalse:							[adjustment _ 50 @ 30.							anEditor]						ifTrue:							[adjustment _ 60 @ 20.							actualObject permanentScriptEditorFor: aMorph]]]		ifFalse:   "It's a system-defined selector; construct an anonymous scriptor around it"			[adjustment _ 60 @ 20.			actualObject permanentScriptEditorFor: aMorph].	aScriptor position: (self primaryHand position - adjustment).	(aScriptor isMemberOf: ScriptEditorMorph) ifTrue:		[aScriptor playerScripted expungeEmptyUnRenamedScripts].	^ aScriptor! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 7/16/1999 17:09'!expungeEmptyScripts	"Track down and destroy -- and destroy screen artifacts relating to -- all scripts belonging to the receiver that have no lines of code in them"	| any |	any _ false.	self class namedTileScriptSelectors do:		[:aSel |			(self isEmptyTileScript: aSel)				ifTrue:					[any _ true.					self removeScriptWithoutUpdatingViewers: aSel]].	any ifTrue: [self updateAllViewersAndForceToShow: 'scripts']			! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 7/16/1999 17:08'!expungeEmptyUnRenamedScripts	"Track down and destroy -- and destroy screen artifacts relating to -- all scripts belonging to the receiver that have not been named and that have no lines of code in them"	| any |	any _ false.	self class namedTileScriptSelectors do:		[:aSel |			(self isExpendableScript: aSel)				ifTrue:					[any _ true.					self removeScriptWithoutUpdatingViewers: aSel]].	any ifTrue:		[self updateAllViewersAndForceToShow: 'scripts']			! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 7/16/1999 16:55'!isEmptyTileScript: aScriptName	| aUserScript |	aUserScript _ self class userScriptForPlayer: self selector: aScriptName.	aUserScript isTextuallyCoded ifTrue:		[^ false].	^ aUserScript instantiatedScriptEditor isEmpty! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 7/16/1999 16:59'!isExpendableScript: aScriptName	^ (self isEmptyTileScript: aScriptName) and:		[aScriptName beginsWith: 'script']! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 7/16/1999 17:07'!removeScript: aSymbol	self removeScriptWithoutUpdatingViewers: aSymbol.	self updateAllViewersAndForceToShow: 'scripts'! !!Player methodsFor: 'scripts-kernel' stamp: 'sw 7/16/1999 17:06'!removeScriptWithoutUpdatingViewers: aSymbol	self pacifyScript: aSymbol.	self class removeScriptNamed: aSymbol.	(self scriptorsForSelector: aSymbol inWorld: costume world) do:		[:s | s privateDelete].! !!Player methodsFor: 'misc' stamp: 'sw 7/16/1999 16:53'!thumbnailMenuEvt: anEvent forMorph: aMorph	"The mouse went down in the thumbnail of a Viewer for the receiver"	| aMenu aWorld aViewer |	aWorld _ aMorph world.	aViewer _ aMorph ownerThatIsA: Viewer.	aMenu _ MenuMorph new defaultTarget: self.	aMenu add: 'set new costume...' action: #newCostume.	costumes ifNotNil:		[(costumes size > 1 or: [costumes size == 1 and: [costumes first ~~ costume]])			ifTrue:				[aMenu add: 'forget other costumes' target: self selector: #forgetOtherCostumes]].	aMenu addLine.	aMenu add: 'add a new instance variable' target: self action: #addInstanceVariable.	"aMenu add: 'add an empty new script' target: aViewer action: #newEmptyScript."	aMenu add: 'add a new script' target: aViewer action: #newPermanentScript.	aMenu add: 'expunge empty scripts' target: self action: #expungeEmptyScripts.	aMenu addLine.	aMenu add: 'tile representing me' action: #tearOffTileForSelf.	aMenu add: 'reveal me' target: self selector: #revealPlayerIn: argument: aWorld.	aMenu add: 'grab me' target: self selector: #grabPlayerIn: argument: aWorld.	aMenu popUpAt: aWorld primaryHand position event: aWorld primaryHand lastEvent.	aMenu addLine.	aMenu add: 'inspect morph' target: costume selector: #inspect.	aMenu add: 'inspect player' target: self selector: #inspect.	self belongsToUniClass ifTrue:		[aMenu add: 'browse class' target: self action: #browsePlayerClass.		aMenu add: 'inspect class' target: self class action: #inspect]."	aMenu add: 'switch costume...' target: self selector: #chooseCostumeIn: argument: aWorld.""	aMenu add: 'get info...' action: #getInfo.  "! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'sw 7/16/1999 16:43'!dismiss	| aMenu reply |	owner ifNil: [^ self].	scriptName ifNil: [^ self delete].  "ad hoc fixup for bkwrd compat"	self isAnonymous		ifTrue:			[((submorphs size > 3) or: [self scriptInstantiation status ~~ #normal]) ifTrue:				[aMenu _ SelectionMenu selections: #('yes, name it' 'no, discard it' 'cancel').				reply _ aMenu startUpWithCaption: 'Do you want to give thisscript a name and save it? '.				(reply isEmptyOrNil or: [reply = 'cancel']) ifTrue: [^ self].				(reply = 'yes, name it') ifTrue: [^ self renameScript]].		self actuallyDestroyScript].	(playerScripted isExpendableScript: scriptName) ifTrue: [playerScripted removeScript: scriptName].	self delete! !!ScriptEditorMorph methodsFor: 'other' stamp: 'sw 7/16/1999 16:35'!isEmpty	^ submorphs size < firstTileRow! !