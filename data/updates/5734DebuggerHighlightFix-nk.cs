'From Squeak3.7alpha of 11 September 2003 [latest update: #5707] on 20 February 2004 at 5:07:14 pm'!"Change Set:		DebuggerHighlightFix-nkDate:			20 February 2004Author:			Ned KonzThis fixes the misalignment between the displayed text in the Debugger and the highlighted PC range, when you have the browseWithPrettyPrint Preference enabled."!!CompiledMethod methodsFor: 'decompiling' stamp: 'nk 2/20/2004 15:59'!methodNodeFormattedAndDecorated: decorate	"Return the parse tree that represents self"	^ self methodNodeFormattedDecompileClass: nil selector: nil decorate: decorate! !!CompiledMethod methodsFor: 'decompiling' stamp: 'nk 2/20/2004 15:58'!methodNodeFormattedDecompileClass: aClass selector: selector  decorate: decorated	"Return the parse tree that represents self, using pretty-printed source text if possible."	| source sClass node |	source := self getSourceFromFile.	sClass _ aClass ifNil: [self sourceClass].	source ifNil: [ ^self decompileClass: sClass selector: selector].	source _ sClass compilerClass new						format: source						in: sClass						notifying: nil						decorated: decorated.	node _ sClass parserClass new				parse: source				class: sClass.	node sourceText: source.	^node! !!ContextPart methodsFor: 'accessing' stamp: 'nk 2/20/2004 16:50'!methodNodeFormattedAndDecorated: decorate	"Answer a method node made from pretty-printed (and colorized, if decorate is true) source text."	| selector methodClass |	selector _ self receiver class		selectorAtMethod: self method		setClass: [:mclass | methodClass _ mclass].	^ self method methodNodeFormattedDecompileClass: methodClass selector: selector decorate: decorate! !!Debugger methodsFor: 'accessing' stamp: 'nk 2/20/2004 16:00'!contents: aText notifying: aController 	"The retrieved information has changed and its source must now be  	updated. In this case, the retrieved information is the method of the  	selected context."	| selector classOfMethod category h ctxt |	contextStackIndex = 0		ifTrue: [^ false].	self selectedContext isExecutingBlock		ifTrue: [h := self selectedContext finalBlockHome.			h				ifNil: [self inform: 'Method not found for block, can''t edit'.					^ false].			(self confirm: 'I will have to revert to the method fromwhich this block originated.  Is that OK?')				ifTrue: [self resetContext: h]				ifFalse: [^ false]].	classOfMethod := self selectedClass.	category := self selectedMessageCategoryName.	selector := self selectedClass parserClass new parseSelector: aText.	selector == self selectedMessageName		ifFalse: [self inform: 'can''t change selector'.			^ false].	selector := classOfMethod				compile: aText				classified: category				notifying: aController.	selector		ifNil: [^ false].	"compile cancelled"	contents := aText.	ctxt := self selectedContext.	interruptedProcess popTo: ctxt;				restartTopWith: (classOfMethod compiledMethodAt: selector);		 stepToSendOrReturn.	contextVariablesInspector object: nil.	theMethodNode := Preferences browseWithPrettyPrint						ifTrue: [ ctxt methodNodeFormattedAndDecorated: Preferences colorWhenPrettyPrinting ]						ifFalse: [ ctxt methodNode].	sourceMap := theMethodNode sourceMap.	tempNames := theMethodNode tempNames.	self resetContext: ctxt.	^ true! !!Debugger methodsFor: 'context stack (message list)' stamp: 'nk 2/20/2004 15:55'!selectedMessage	"Answer the source code of the currently selected context."	contents := theMethodNode sourceText.	^ contents := contents asText makeSelectorBold! !!Debugger methodsFor: 'code pane' stamp: 'nk 2/20/2004 15:35'!pcRange	"Answer the indices in the source code for the method corresponding to 	the selected context's program counter value."	| i pc end |	(selectingPC and: [contextStackIndex ~= 0])		ifFalse: [^1 to: 0].	sourceMap ifNil:		[sourceMap _ theMethodNode sourceMap.		tempNames _ theMethodNode tempNames.		self selectedContext method cacheTempNames: tempNames].	(sourceMap size = 0 or: [ self selectedContext isDead ]) ifTrue: [^1 to: 0].	Smalltalk at: #RBProgramNode ifPresent:[:nodeClass|		(theMethodNode isKindOf: nodeClass) ifTrue: [			pc _ contextStackIndex = 1				ifTrue: [self selectedContext pc]				ifFalse: [self selectedContext previousPc].			i _ sourceMap findLast:[:pcRange | pcRange key <= pc].			i = 0 ifTrue:[^ 1 to: 0].			^ (sourceMap at: i) value		].	].	pc_ self selectedContext pc -		(("externalInterrupt" true and: [contextStackIndex=1])			ifTrue: [1]			ifFalse: [2]).	i _ sourceMap indexForInserting: (Association key: pc value: nil).	i < 1 ifTrue: [^1 to: 0].	i > sourceMap size		ifTrue:			[end _ sourceMap inject: 0 into:				[:prev :this | prev max: this value last].			^ end+1 to: end].	^(sourceMap at: i) value! !!Debugger methodsFor: 'private' stamp: 'nk 2/20/2004 16:51'!contextStackIndex: anInteger oldContextWas: oldContext 	"Change the context stack index to anInteger, perhaps in response to user selection."	| newMethod |	contextStackIndex := anInteger.	anInteger = 0		ifTrue: [currentCompiledMethod := theMethodNode := tempNames := sourceMap := contents := nil.			self changed: #contextStackIndex.			self decorateButtons.			self contentsChanged.			contextVariablesInspector object: nil.			receiverInspector object: self receiver.			^ self].	(newMethod := oldContext == nil					or: [oldContext method ~~ (currentCompiledMethod := self selectedContext method)])		ifTrue: [tempNames := sourceMap := nil.			theMethodNode := Preferences browseWithPrettyPrint				ifTrue: [ 	self selectedContext methodNodeFormattedAndDecorated: Preferences colorWhenPrettyPrinting ]				ifFalse: [	self selectedContext methodNode ].			contents := self selectedMessage.			self contentsChanged.			self pcRange			"will compute tempNamesunless noFrills"].	self changed: #contextStackIndex.	self decorateButtons.	tempNames == nil		ifTrue: [tempNames := self selectedClassOrMetaClass parserClass new parseArgsAndTemps: contents notifying: nil].	contextVariablesInspector object: self selectedContext.	receiverInspector object: self receiver.	newMethod		ifFalse: [self changed: #contentsSelection]! !