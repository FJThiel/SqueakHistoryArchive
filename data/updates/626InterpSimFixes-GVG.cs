'From Squeak 2.3 of January 14, 1999 on 1 February 1999 at 9:22:35 pm'!"Change Set:		InterpSimFIxes-GVGDate:			1 February 1999Author:			Greg GrittonSupport for half-word indexing in InterpreterSimulator and InterpreterSimulatorLSB."!!InterpreterSimulator methodsFor: 'memory access' stamp: 'GVG 1/27/199920:41'!halfWordAt: byteAddress    "Return the half-word at byteAddress which must be even."	| lowBits |	lowBits _ byteAddress bitAnd: 2.	^((self longAt: byteAddress - lowBits)		bitShift: (lowBits - 2) * 8)		bitAnd: 16rFFFF! !!InterpreterSimulator methodsFor: 'memory access' stamp: 'GVG 1/27/199920:43'!halfWordAt: byteAddress put: halfWord	| longWord shift lowBits |	lowBits _ byteAddress bitAnd: 2.	longWord _ self longAt: byteAddress - lowBits.	shift _ (2 - lowBits) * 8.	longWord _ longWord - (longWord bitAnd: (16rFFFF bitShift: shift)) +(halfWord bitShift: shift).	self longAt: byteAddress put: longWord! !!InterpreterSimulator methodsFor: 'memory access' stamp: 'GVG 1/27/199920:47'!primitiveShortAt	"Treat the receiver, which can be indexible by either bytes or words, asan array of signed 16-bit values. Return the contents of the given index.Note that the index specifies the i-th 16-bit entry, not the i-th byte orword."	| index rcvr sz addr value |	index _ self stackIntegerValue: 0.	rcvr _ self stackValue: 1.	self success: ((self isIntegerObject: rcvr) not and: [self isWordsOrBytes:rcvr]).	successFlag ifFalse: [ ^ nil ].	sz _ ((self sizeBitsOf: rcvr) - BaseHeaderSize) // 2.  "number of 16-bitfields"	self success: ((index >= 1) and: [index <= sz]).	successFlag ifTrue: [		addr _ rcvr + BaseHeaderSize + (2 * (index - 1)).		value _ self halfWordAt: addr.		self pop: 2.  "pop rcvr, index"		self pushInteger: value.  "push element value"	].! !!InterpreterSimulatorLSB methodsFor: 'memory access' stamp: 'GVG 1/27/199920:43'!halfWordAt: byteAddress	| lowBits |	lowBits _ byteAddress bitAnd: 2.	^((self longAt: byteAddress - lowBits)		bitShift: (0 - lowBits) * 8)		bitAnd: 16rFFFF! !!InterpreterSimulatorLSB methodsFor: 'memory access' stamp: 'GVG 1/27/199921:30'!halfWordAt: byteAddress put: halfWord	| longWord shift lowBits |	lowBits _ byteAddress bitAnd: 2.	longWord _ self longAt: byteAddress - lowBits.	shift _ lowBits * 8.	longWord _ longWord - (longWord bitAnd: (16rFFFF bitShift: shift)) +(halfWord bitShift: shift).	self longAt: byteAddress - lowBits put: longWord! !