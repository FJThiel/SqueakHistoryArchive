Object subclass: #FormInput	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!FormInput commentStamp: 'ls 9/8/1998 21:39' prior: 0!an input instance for a form.  A form takes its input from a collection of FormInputs; each FormInput has a name and can retrieve a textual value.  WHen a form is submitted, these name-value associations are gathered together and passed to an HTTP server.!!FormInput methodsFor: 'testing' stamp: 'ls 8/11/1998 20:43'!isRadioButtonSetInput	^false! !!FormInput methodsFor: 'input handling' stamp: 'ls 8/11/1998 20:11'!active	"whether this input is currently providing an input"	^true! !!FormInput methodsFor: 'input handling' stamp: 'ls 8/5/1998 06:20'!name	"name associated with this input"	^self subclassResponsibility! !!FormInput methodsFor: 'input handling' stamp: 'ls 8/5/1998 06:20'!reset	"reset to a default value"	! !!FormInput methodsFor: 'input handling' stamp: 'ls 8/5/1998 06:20'!value	"value associated with this input"	^self subclassResponsibility! !Model subclass: #FormInputSet	instanceVariableNames: 'inputs browser form '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!FormInputSet commentStamp: 'ls 9/8/1998 21:39' prior: 0!Holds the inputs for an instance of an HTML Form.  It has a link to the browser it will be displayed in, and it has a link to each of the input PluggableTextMorph's that it input will read from.inputs - maps HtmlInput's into the text morphs which will input their value.!!FormInputSet methodsFor: 'private-initialization' stamp: 'ls 8/5/1998 03:57'!form: f  browser: b	inputs _ OrderedCollection new.	form _ f.	browser _ b.! !!FormInputSet methodsFor: 'adding inputs' stamp: 'ls 8/5/1998 03:57'!addInput: anInput	inputs add: anInput! !!FormInputSet methodsFor: 'adding inputs' stamp: 'ls 8/11/1998 03:30'!inputs	"return a list of the list of inputs"	^inputs! !!FormInputSet methodsFor: 'action' stamp: 'ls 8/5/1998 03:58'!reset	"reset all inputs to their default value"	inputs do: [ :input | input reset ]! !!FormInputSet methodsFor: 'action' stamp: 'ls 8/11/1998 20:11'!submit	"collect inputs and instruct the browser to do a submission"	| inputValues |	inputValues _ Dictionary new.	inputs do: [ :input |		input active ifTrue: [			(inputValues includesKey: input name) ifFalse: [				inputValues at: input name  put: (OrderedCollection new: 1) ].			(inputValues at: input name)  add: input value ] ].	browser submitFormWithInputs: inputValues  url: form url method: form method.	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FormInputSet class	instanceVariableNames: ''!!FormInputSet class methodsFor: 'instance creation' stamp: 'ls 7/16/1998 22:01'!forForm: form  andBrowser: browser	"create a FormData for the given form and browser"	^super new form: form  browser: browser! !FormInput subclass: #HiddenInput	instanceVariableNames: 'name value '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!HiddenInput commentStamp: 'ls 9/8/1998 21:39' prior: 0!a "hidden" input.  It never actually appear on a formatted page, and the user can't change the input value.!!HiddenInput methodsFor: 'private-initialization' stamp: 'ls 8/5/1998 06:37'!name: name0  value: value0	name _ name0.		value _ value0.! !!HiddenInput methodsFor: 'input handling' stamp: 'ls 8/5/1998 06:37'!name	^name! !!HiddenInput methodsFor: 'input handling' stamp: 'ls 8/5/1998 06:37'!value	^value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HiddenInput class	instanceVariableNames: ''!!HiddenInput class methodsFor: 'instance creation' stamp: 'ls 8/5/1998 06:38'!name: name0  value: value	^self new name: name0  value: value! !FormInput subclass: #RadioButtonInput	instanceVariableNames: 'inputSet state value '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!RadioButtonInput methodsFor: 'access' stamp: 'ls 8/11/1998 19:52'!valueIfPressed	^value! !!RadioButtonInput methodsFor: 'private-initialization' stamp: 'ls 8/11/1998 20:46'!inputSet: anInputSet  value: aString	inputSet _ anInputSet.	value _ aString.	state _ false.! !!RadioButtonInput methodsFor: 'button state' stamp: 'ls 8/11/1998 19:51'!pressed	^state! !!RadioButtonInput methodsFor: 'button state' stamp: 'ls 8/11/1998 19:51'!pressed: aBoolean	state _ aBoolean.	self changed: #pressed.	^true! !!RadioButtonInput methodsFor: 'button state' stamp: 'ls 8/11/1998 20:28'!toggle	"my button has been clicked on!!"	self pressed: self pressed not.	inputSet  buttonToggled: self.	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RadioButtonInput class	instanceVariableNames: ''!!RadioButtonInput class methodsFor: 'instance creation' stamp: 'ls 8/11/1998 20:47'!inputSet: anInputSet  value: aString	^self new inputSet: anInputSet  value: aString! !FormInput subclass: #RadioButtonSetInput	instanceVariableNames: 'name buttons defaultButton '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!RadioButtonSetInput methodsFor: 'private-initialization' stamp: 'ls 8/11/1998 20:25'!name: aString	name _ aString.	buttons _ OrderedCollection new.! !!RadioButtonSetInput methodsFor: 'testing' stamp: 'ls 8/11/1998 20:43'!isRadioButtonSetInput	^true! !!RadioButtonSetInput methodsFor: 'access' stamp: 'ls 8/11/1998 20:48'!addInput: buttonInput	buttons add: buttonInput! !!RadioButtonSetInput methodsFor: 'access' stamp: 'ls 8/11/1998 20:30'!defaultButton: aButton	"set which button to toggle on after a reset"	defaultButton _ aButton! !!RadioButtonSetInput methodsFor: 'access' stamp: 'ls 8/11/1998 20:24'!name	^name! !!RadioButtonSetInput methodsFor: 'input handling' stamp: 'ls 8/11/1998 20:31'!active	"we are active if and only if one of our buttons is pressed"	buttons do: [ :b |		b pressed ifTrue: [ ^true ] ].	^false! !!RadioButtonSetInput methodsFor: 'input handling' stamp: 'ls 8/11/1998 20:27'!buttonToggled: aButton	"a button was toggled; turn all other buttons off"	buttons do: [ :b |		b == aButton ifFalse: [			b pressed: false  ] ].! !!RadioButtonSetInput methodsFor: 'input handling' stamp: 'ls 8/11/1998 20:30'!reset	buttons do: [ :b |		b pressed: (b == defaultButton) ].! !!RadioButtonSetInput methodsFor: 'input handling' stamp: 'ls 8/11/1998 20:31'!value	buttons do: [ :b |		b pressed ifTrue: [ ^b valueIfPressed ] ].	self error: 'asked for value when inactive!!'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RadioButtonSetInput class	instanceVariableNames: ''!!RadioButtonSetInput class methodsFor: 'instance creation' stamp: 'ls 8/11/1998 20:29'!name: aString	^self new name: aString! !FormInput subclass: #SelectionInput	instanceVariableNames: 'name defaultValue listMorph values '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!SelectionInput commentStamp: 'ls 9/8/1998 21:39' prior: 0!allows a user to select from a number of options!!SelectionInput methodsFor: 'handling input' stamp: 'ls 8/11/1998 21:38'!active	^listMorph getCurrentSelectionIndex > 0! !!SelectionInput methodsFor: 'handling input' stamp: 'ls 8/5/1998 07:15'!name	^name! !!SelectionInput methodsFor: 'handling input' stamp: 'ls 8/5/1998 07:16'!reset	listMorph selection: defaultValue! !!SelectionInput methodsFor: 'handling input' stamp: 'ls 8/11/1998 21:39'!value	^values at: listMorph getCurrentSelectionIndex! !!SelectionInput methodsFor: 'private-initialization' stamp: 'ls 8/5/1998 07:55'!name: name0  defaultValue: defaultValue0  list: list0 values: values0	name _ name0.	defaultValue _ defaultValue0.	listMorph _ list0.	values _ values0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SelectionInput class	instanceVariableNames: ''!!SelectionInput class methodsFor: 'instance creation' stamp: 'ls 8/5/1998 07:55'!name: name0  defaultValue: defaultValue  list: list  values: values	^self new name: name0  defaultValue: defaultValue  list: list  values: values! !FormInput subclass: #TextInput	instanceVariableNames: 'name defaultValue textMorph '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!TextInput commentStamp: 'ls 9/8/1998 21:39' prior: 0!a textual input; it takes text input straight from the user via a PluggableText!!TextInput methodsFor: 'private-initialization' stamp: 'ls 8/5/1998 04:01'!name: name0  defaultValue: defaultValue0  textMorph: textMorph0	name _ name0.	defaultValue _ defaultValue0.	textMorph _ textMorph0.! !!TextInput methodsFor: 'input handling' stamp: 'ls 8/5/1998 06:34'!name	^name! !!TextInput methodsFor: 'input handling' stamp: 'ls 8/5/1998 09:02'!reset	textMorph setText: defaultValue! !!TextInput methodsFor: 'input handling' stamp: 'ls 8/6/1998 09:31'!value	textMorph hasUnacceptedEdits ifTrue: [ textMorph accept ].	^textMorph getText withInternetLineEndings! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TextInput class	instanceVariableNames: ''!!TextInput class methodsFor: 'instance creation' stamp: 'ls 8/5/1998 06:23'!name: name0  defaultValue: defaultValue  textMorph: textMorph	^self new name: name0  defaultValue: defaultValue  textMorph: textMorph	! !FormInput subclass: #ToggleButtonInput	instanceVariableNames: 'button name checkedByDefault '	classVariableNames: ''	poolDictionaries: ''	category: 'HTML-Forms'!!ToggleButtonInput commentStamp: 'ls 9/8/1998 21:39' prior: 0!an input from a toggle button!