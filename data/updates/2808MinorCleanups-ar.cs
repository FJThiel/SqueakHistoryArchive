'From Squeak2.9alpha of 13 June 2000 [latest update: #2852] on 10 October 2000 at 7:18:23 pm'!"Change Set:		MinorCleanups-arDate:			10 October 2000Author:			Andreas RaabSome minor cleanups after fixing several issues. Mainly removes several #arNotes which are no longer of interest. Also moves #click:/#drag: distinction out of the generic pop up code for halos and puts it specifically into the places where we are interested in drag gestures (which is #blueButtonDown:)."!!Morph methodsFor: 'halos and balloon help' stamp: 'ar 10/10/2000 19:03'!addHalo: evt	| halo prospectiveHaloClass |	prospectiveHaloClass _ Smalltalk at: self haloClass ifAbsent: [HaloMorph].	halo _ prospectiveHaloClass new bounds: self worldBoundsForHalo.	halo popUpFor: self event: evt.	^halo! !!Morph methodsFor: 'events-processing' stamp: 'ar 10/10/2000 19:11'!handleMouseDown: anEvent	"System level event handling."	anEvent wasHandled ifTrue:[^self]. "not interested"	anEvent hand removePendingBalloonFor: self.	anEvent hand removePendingHaloFor: self.	anEvent wasHandled: true.	anEvent controlKeyPressed ifTrue:[^self invokeMetaMenu: anEvent].	"Make me modal during mouse transitions"	anEvent hand newMouseFocus: self event: anEvent.	anEvent blueButtonChanged ifTrue:[^self blueButtonDown: anEvent].	self mouseDown: anEvent.	anEvent hand removeHaloFromClick: anEvent on: self.! !!Morph methodsFor: 'events-processing' stamp: 'ar 10/10/2000 19:11'!mouseDownPriority	"Return the default mouse down priority for the receiver"	(self isPartsDonor or:[self isPartsBin])		ifTrue:[^50]		ifFalse:[^0].	self flag: #workAround.	"The above is a workaround for the complete confusion between parts donors and parts bins. Morphs residing in a parts bin may or may not have the parts donor property set; if they have they may or may not actually handle events. To work around this, parts bins get an equal priority to parts donors so that when a morph in the parts bin does have the property set but does not handle the event we still get a copy from picking it up through the parts bin. Argh. This just *cries* for a cleanup."! !!Morph methodsFor: 'meta-actions' stamp: 'ar 10/10/2000 19:16'!blueButtonDown: anEvent	"Special gestures (cmd-mouse on the Macintosh; Alt-mouse on Windows and Unix) allow a mouse-sensitive morph to be moved or bring up a halo for the morph."	| h tfm |	h _ self addHalo: anEvent.	"Initiate drag transition if requested"	tfm _ (self transformedFrom: nil) inverseTransformation.	anEvent hand 		waitForClicksOrDrag: h		event: (anEvent transformedBy: tfm)		selectors: { nil. nil. #dragTarget:. }		threshold: 5.	"Pass focus explicitly here"	anEvent hand newMouseFocus: h.! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/10/2000 19:06'!blueButtonDown: event	"Transfer the halo to the next likely recipient"	target ifNil:[^self delete].	positionOffset _ event position - target position.	"wait for drags or transfer"	event hand 		waitForClicksOrDrag: self 		event: event		selectors: { #transferHalo:. nil. #dragTarget:. }		threshold: 5.! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/10/2000 19:06'!dragTarget: event	"Begin dragging the target"	| thePoint |	thePoint _ (target transformedFrom: self) globalPointToLocal: event position.	target setConstrainedPositionFrom: thePoint.	event hand newMouseFocus: self.! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/10/2000 19:08'!popUpFor: aMorph event: evt	"This message is sent by morphs that explicitly request the halo on a button click. Note: anEvent is in aMorphs coordinate frame."	| hand anEvent |	self flag: #workAround. "We should really have some event/hand here..."	evt isNil		ifTrue:[	hand _ aMorph world activeHand.				hand ifNil:[hand _ aMorph world primaryHand].				anEvent _ hand lastEvent transformedBy: (aMorph transformedFrom: nil)]		 ifFalse:[hand _ evt hand.				anEvent _ evt].	self target: aMorph.	hand halo: self.	hand world addMorphFront: self.	positionOffset _ anEvent position - aMorph position.	self startStepping.! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/10/2000 18:58'!popUpFor: aMorph hand: aHand	"Programatically pop up a halo for a given hand."	self target: aMorph.	aHand halo: self.	aHand world addMorphFront: self.	positionOffset _ aHand position - aMorph position.	self startStepping.! !!HaloMorph methodsFor: 'events' stamp: 'ar 10/10/2000 19:09'!transferHalo: event	"Transfer the halo to the next likely recipient"	target ifNil:[^self delete].	target transferHalo: (event transformedBy: (target transformedFrom: self)) from: target.! !!MenuMorph methodsFor: 'dropping/grabbing' stamp: 'ar 10/10/2000 19:11'!justDroppedInto: aMorph event: evt	| halo |	super justDroppedInto: aMorph event: evt.	halo _ evt hand halo.	(halo notNil and:[halo target hasOwner: self]) ifTrue:[		"Grabbed single menu item"		self addHalo: evt.	].! !!MVCMenuMorph methodsFor: 'invoking' stamp: 'ar 10/10/2000 19:10'!invokeAt: aPoint in: aWorld	"Add this menu to the given world centered at the given point. Wait for the user to make a selection and answer it. The selection value returned is an integer in keeping with PopUpMenu, if the menu is converted from an MVC-style menu."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop." 	self flag: #bob.		"is <aPoint> global or local?"	self popUpAt: aPoint forHand: aWorld primaryHand in: aWorld.	done _ false.	[self isInWorld & done not] whileTrue: [aWorld doOneSubCycle].	self delete.	^ mvcSelection! !HaloMorph removeSelector: #popUpFor:event:waitForDrags:!HaloMorph removeSelector: #startDragTarget:!