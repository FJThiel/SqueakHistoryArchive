'From Squeak2.9alpha of 17 July 2000 [latest update: #3179] on 16 December 2000 at 5:55:11 pm'!"Change Set:		fixStoriesDate:			16 December 2000Author:			Bob Arning- make page transitions between camera marks in paino roll a property of the camera mark. Use the red menu on the *ending* mark to set the transition- shift click on camera mark to go directly to that mark"!!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 15:54'!addAddHandMenuItemsForHalo: aMenu hand: aHandMorph	"Add halo menu items to be handled by the invoking hand. The halo menu is invoked by clicking on the menu-handle of the receiver's halo."	aMenu add: 'Go to this mark' action: #gotoMark.	aMenu add: 'Set transition' action: #setTransition:.	aMenu addLine.	^super addAddHandMenuItemsForHalo: aMenu hand: aHandMorph! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 15:40'!encounteredAtTime: ticks inScorePlayer: scorePlayer atIndex: index inEventTrack: track secsPerTick: secsPerTick	| nextAmbient m nextDurationInMs program now finalMark thisPage nextPage |	self gotoMark.	nextAmbient _ nil.	index to: track size do: [ :i |		(nextAmbient isNil and: [((m _ track at: i) morph) isKindOf: self class]) ifTrue: [			nextAmbient _ m.		].	].	nextAmbient ifNil: [^self].	nextDurationInMs _ (nextAmbient time - ticks * secsPerTick * 1000) rounded.	finalMark _ nextAmbient morph.	thisPage _ self valueOfProperty: #bookPage.	nextPage _ finalMark valueOfProperty: #bookPage.	(thisPage = nextPage or: [thisPage isNil | nextPage isNil]) ifFalse: [^finalMark gotoMark].	now _ Time millisecondClockValue.	program _ Dictionary new.	program		at: #startTime put: now;		at: #endTime put: now + nextDurationInMs;		at: #startPoint put: (self valueOfProperty: #cameraPoint);		at: #endPoint put: (finalMark valueOfProperty: #cameraPoint);		at: #startZoom put: (self valueOfProperty: #cameraScale);		at: #endZoom put: (finalMark valueOfProperty: #cameraScale).	self cameraController setProgrammedMoves: {program}.! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 15:56'!gotoMark	self cameraController 		turnToPage: (self valueOfProperty: #bookPage)		position: (self valueOfProperty: #cameraPoint) 		scale: (self valueOfProperty: #cameraScale)		transition: (self valueOfProperty: #transitionSpec).	self setCameraValues.! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 16:02'!handlesMouseDown: evt	^evt shiftPressed! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 15:53'!menuPageVisualFor: target event: evt	| tSpec menu subMenu directionChoices |	tSpec _ self 		valueOfProperty: #transitionSpec		ifAbsent: [			(self valueOfProperty: #bookPage) 				valueOfProperty: #transitionSpec				ifAbsent: [{ 'silence' . #none. #none}]		].	menu _ (MenuMorph entitled: 'Choose an effect(it is now ' , tSpec second , ')') defaultTarget: self.	TransitionMorph allEffects do: [:effect |		directionChoices _ TransitionMorph directionsForEffect: effect.		directionChoices isEmpty		ifTrue: [menu add: effect target: self					selector: #setProperty:toValue:					argumentList: (Array with: #transitionSpec									with: (Array with: tSpec first with: effect with: #none))]		ifFalse: [subMenu _ MenuMorph new.				directionChoices do:					[:dir |					subMenu add: dir target: self						selector: #setProperty:toValue:						argumentList: (Array with: #transitionSpec									with: (Array with: tSpec first with: effect with: dir))].				menu add: effect subMenu: subMenu]].	menu popUpEvent: evt in: self world! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 16:02'!mouseUp: evt	^self gotoMark! !!ZASMCameraMarkMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 15:54'!setTransition: evt	| tSpec menu subMenu directionChoices |	tSpec _ self 		valueOfProperty: #transitionSpec		ifAbsent: [			(self valueOfProperty: #bookPage) 				valueOfProperty: #transitionSpec				ifAbsent: [{ 'silence' . #none. #none}]		].	menu _ (MenuMorph entitled: 'Choose an effect(it is now ' , tSpec second , ')') defaultTarget: self.	TransitionMorph allEffects do: [:effect |		directionChoices _ TransitionMorph directionsForEffect: effect.		directionChoices isEmpty		ifTrue: [menu add: effect target: self					selector: #setProperty:toValue:					argumentList: (Array with: #transitionSpec									with: (Array with: tSpec first with: effect with: #none))]		ifFalse: [subMenu _ MenuMorph new.				directionChoices do:					[:dir |					subMenu add: dir target: self						selector: #setProperty:toValue:						argumentList: (Array with: #transitionSpec									with: (Array with: tSpec first with: effect with: dir))].				menu add: effect subMenu: subMenu]].	menu popUpEvent: evt in: self world! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 17:53'!target: x	target _ x.! !!ZoomAndScrollControllerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 17:53'!turnToPage: page position: aPoint scale: aNumber transition: aSpec 	| myBook |	target == page ifTrue: [^false].	page ifNil: [^false].	myBook _ (self ownerThatIsA: StoryboardBookMorph) ifNil: [^ false].	2 timesRepeat: [		page			cameraPoint: aPoint;			changeScaleTo: aNumber	].	BookMorph turnOffSoundWhile: [		myBook 			goToPageMorph: page 			transitionSpec: aSpec.	].	^true! !!ZoomAndScrollMorph methodsFor: 'as yet unclassified' stamp: 'RAA 12/16/2000 17:51'!changeScaleTo: aNumber	| transform innerPasteup min1 min2 newScale oldPoint |	transform _ self myTransformMorph.	"oldScale _ transform scale."	innerPasteup _ transform firstSubmorph.	min1 _ transform width / innerPasteup width asFloat.	min2 _ transform height / innerPasteup height asFloat.	newScale _ (aNumber max: min1) max: min2.	oldPoint _ self cameraPoint.	transform scale: newScale.	self cameraPoint: oldPoint.	"scaleR _ newScale / oldScale.	half _ transform extent // 2.	half _ 0@0.	self changeOffsetBy: scaleR * (transform offset + half) - half - transform offset.""==Alan's preferred factorspan = 0.0425531914893617zoom = 0.099290780141844==="! !!ZoomAndScrollMorph methodsFor: 'scripting' stamp: 'RAA 12/16/2000 17:51'!scale: aValue	self myTransformMorph scale: aValue.! !ZoomAndScrollControllerMorph removeSelector: #turnToPage:position:scale:!StoryboardBookMorph removeSelector: #goToPageMorph:transitionSpec:!StoryboardBookMorph removeSelector: #goToPageMorph:transitionSpec:adjustingEnd:!StoryboardBookMorph removeSelector: #goToPageMorph:transitionSpec:endAdjustBlock:!