'From Squeak 2.3 beta of Nov 25, 1998 on 13 January 1999 at 4:19:28 pm'!"Change Set:		version-tkIPDate:			13 January 1999Author:			Ted KaehlerDeclare a new version of Squeak on several sets of update servers.  Adds #SqueakX.X to the end of the updates.list file.  Keep choosing groups of servers until you have done all you want.  This method is called by hand.Includes Mark Wai's fix to SmartRefStream|restoreClassInstVars.Bill Dargel's fix:CrLfFileStream >> peek & upTo:	Override superclass to work properly when CrLf is translated to Cr."!!CrLfFileStream methodsFor: 'access' stamp: 'wod 6/18/1998 13:52'!peek	"Answer what would be returned if the message next were sent to the receiver. If the receiver is at the end, answer nil.  "	| next pos |	self atEnd ifTrue: [^ nil].	pos _ self position.	next _ self next.	self position: pos.	^ next! !!CrLfFileStream methodsFor: 'access' stamp: 'wod 11/5/1998 14:15'!upTo: aCharacter	| newStream char |	newStream _ WriteStream on: (String new: 100).	[(char _ self next) isNil or: [char == aCharacter]]		whileFalse: [newStream nextPut: char].	^ newStream contents! !!ServerDirectory methodsFor: 'updates' stamp: 'tk 1/13/1999 12:37'!updateInstallVersion: newVersion	"For each server group, ask whether we want to put the new version marker (#Squeak2.3) at the end of the file.  Current version of Squeak must be the old one when this is done.	ServerDirectory new updateInstallVersion: 'Squeak2.3'      "	| myServers updateStrm names choice |[names _ ServerDirectory groupNames asSortedArray.choice _ (SelectionMenu labelList: names selections: names) startUp.choice == nil] whileFalse: [	myServers _ (ServerDirectory groupNamed: choice) checkServers.	myServers size = 0 ifTrue: [self inform: 'checkServers failed on one of those'].	updateStrm _ myServers first getFileNamed: 'updates.list'.	Utilities position: updateStrm 	"checks for current OLD version"			atVersion: (Smalltalk at: #EToySystem) version.			"append name to updates"	updateStrm setToEnd.	(updateStrm skip: -1; next) == Character cr ifFalse: [		updateStrm nextPut: Character cr].	updateStrm nextPutAll: '#', newVersion; nextPut: Character cr.	myServers do: [:aServer |		updateStrm reset.		aServer putFile: updateStrm named: 'updates.list' retry: true.		Transcript cr; show: 'Update.list written on server ', aServer moniker].			]! !!SmartRefStream methodsFor: 'read write' stamp: 'tk 1/13/1999 16:02'!restoreClassInstVars	"Install the values of the class instance variables of UniClasses (i.e. scripts slotInfo).  classInstVars is ((#Player25 scripts slotInfo) ...).  Thank you Mark Wai for the bug fix."	| normal aName newName newCls trans rList |	self moreObjects ifFalse: [^ self]. 	"are no UniClasses with class inst vars" 	classInstVars _ super next.	"Array of arrays"	normal _ Object class instSize.	"might give trouble if Player class superclass changes size"	(structures at: #Player ifAbsent: [#()]) = #(0 'dependents' 'costume') ifTrue: [		trans _ 1].	"now (0 costume costumes).  Do the conversion of Player class 			inst vars in Update 509."	classInstVars do: [:list |		aName _ (list at: 1) asSymbol.		rList _ list.		newName _ renamed at: aName ifAbsent: [aName].		newCls _ Smalltalk at: newName 				ifAbsent: [self error: 'UniClass definition missing'].		(trans == 1 and: [newCls inheritsFrom: Player]) ifTrue: [			"remove costumeDictionary from Player class inst vars"			rList _ rList asOrderedCollection.			rList removeAt: 4].	"costumeDictionary's value"		newCls class instSize = (normal+(rList size)-1) ifFalse: [			self error: 'UniClass superclass class has changed size'].			"Need to install a conversion method mechanism"		2 to: rList size do: [:ii |			newCls instVarAt: normal+ii-1 put: (rList at: ii)]].! !