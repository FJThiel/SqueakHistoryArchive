'From Squeak 2.3 of January 14, 1999 on 25 February 1999 at 4:44:46 pm'!"Change Set:		flaps-swDate:			25 February 1999Author:			Scott WallaceFlaps package for Morphic.Preference 'useFlaps' governs whether they should appear or not; if set to true, the same flaps will appear in every Morphic project, providing handy access to tools, parts, controls, etc.Flaps can * reside on any edge (left,right,top,bottom)* be inboard or outboard.* slide the world's submorphs over or not.Once you have flaps showing, hit the 'about flaps' button in the left flap to obtain more info about them."!BorderedMorph subclass: #ReferenceMorph	instanceVariableNames: 'referent actWhen oldColor isHighlighted '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Palettes'!ReferenceMorph subclass: #FlapTab	instanceVariableNames: 'flapShowing edgeToAdhereTo slidesOtherObjects popOutOnDragOver popOutOnMouseOver inboard dragged '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Palettes'!Object subclass: #Utilities	instanceVariableNames: ''	classVariableNames: 'AuthorInitials CommonRequestStrings FlapTabs RecentSubmissions UpdateUrlLists '	poolDictionaries: ''	category: 'System-Support'!!EventHandler methodsFor: 'initialization' stamp: 'sw 2/17/1999 18:45'!adaptToWorld: aWorld	"If any of my recipients refer to a world or a hand, make them now refer to the corresponding items in the new world"	| currentValue newValue |	#(mouseDownRecipient mouseStillDownRecipient mouseUpRecipient  mouseEnterRecipient  mouseLeaveRecipient  mouseEnterDraggingRecipient  mouseLeaveDraggingRecipient  keyStrokeRecipient valueParameter) do:		[:aName |			(currentValue _ self instVarNamed: aName asString) ifNotNil:				[(currentValue isKindOf: WorldMorph) ifTrue:						[newValue _ aWorld].				(currentValue isKindOf: HandMorph) ifTrue:						[newValue _ aWorld primaryHand].				(currentValue isKindOf: Presenter) ifTrue:						[newValue _ aWorld presenter].			(newValue notNil and: [newValue ~~ currentValue])				ifTrue:					[self instVarNamed: aName asString put: newValue]]]! !!Morph methodsFor: 'accessing' stamp: 'sw 2/11/1999 00:33'!highlightColor		| val |	^ (val _ self valueOfProperty: #highlightColor)		ifNotNil:			[val]		ifNil:			[owner ifNil: [self color] ifNotNil: [owner highlightColor]]! !!Morph methodsFor: 'accessing' stamp: 'sw 2/11/1999 00:33'!regularColor		| val |	^ (val _ self valueOfProperty: #regularColor)		ifNotNil:			[val]		ifNil:			[owner ifNil: [self color] ifNotNil: [owner regularColor]]! !!Morph methodsFor: 'structure' stamp: 'sw 2/16/1999 14:30'!presenter	| aWorld |	^ owner ifNotNil: [owner presenter] ifNil: [(aWorld _ self currentWorld) ifNotNil: [aWorld presenter]]! !!Morph methodsFor: 'geometry' stamp: 'sw 2/18/1999 00:00'!shiftSubmorphsBy: delta	self shiftSubmorphsOtherThan: (self currentWorld submorphs select: [:m | (m hasProperty: #flap) or: [m isKindOf: FlapTab]]) by: delta! !!Morph methodsFor: 'geometry' stamp: 'sw 2/16/1999 22:05'!shiftSubmorphsOtherThan: listNotToShift by: delta	| rejectList |	rejectList _ listNotToShift ifNil: [OrderedCollection new].	(submorphs copyWithoutAll: rejectList) do:		[:m | m position: (m position + delta)]! !!Morph methodsFor: 'menus' stamp: 'sw 2/16/1999 14:32'!inspectInMorphic	self currentHand attachMorph: ((Inspector openAsMorphOn: self) extent: 300@200)! !!Morph methodsFor: 'e-toy support' stamp: 'sw 2/9/1999 17:43'!adaptToWorld: aWorld	"The receiver finds itself operating in a possibly-different new world.  If any of the receiver's parts are world-dependent (such as a target of a SimpleButtonMorph, etc.), then have them adapt accordingly"	submorphs do: [:m | m adaptToWorld: aWorld].	self eventHandler ifNotNil:		[self eventHandler adaptToWorld: aWorld]! !!HandMorph methodsFor: 'world menu' stamp: 'sw 2/15/1999 12:25'!changesMenu	"Build the changes menu for the world."	| menu |	menu _ (MenuMorph entitled: 'Change management') defaultTarget: self.	menu addStayUpItem.	menu add: 'file out changes' target: Utilities action: #fileOutChanges.	menu balloonTextForLastItem: 'Write the current change set out to a file whose name reflects the change set name and the current date & time.'.	menu add: 'create new change set...' target: ChangeSorter action: #newChangeSet.	menu balloonTextForLastItem: 'Create a new change set and make it the current one.'.	menu add: 'browse changed methods' action: #browseChangedMessages.	menu balloonTextForLastItem: 'Open a message-list browser showing all methods in the current change set'.	menu add: 'check for slips' target: Smalltalk changes action: #lookForSlips.	menu balloonTextForLastItem: 'Check the current change set for halts, references to the Transcript, etc., and if any such thing is found, open up a message-list browser detailing all possible slips.'.	menu addLine.	menu add: 'simple change sorter' selector: #openChangeSorter: argument: 1.	menu balloonTextForLastItem: 'Open a change sorter that allows you to view one change set at a time.'.	menu add: 'dual change sorter' selector: #openChangeSorter: argument: 2.	menu balloonTextForLastItem: 'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'.	menu addLine.	menu add: 'browse recent submissions' action: #openRecentChanges.	menu balloonTextForLastItem: 'Open a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'.	menu add: 'recent change log' action: #openChangesLog.	menu balloonTextForLastItem: 'Open a change-list browser on the latter part of the changes log.'.	menu addLine.	menu add: 'save world as morph file' action: #saveWorldInFile.	menu balloonTextForLastItem: 'Save a file that, when reloaded, reconstitutes the current World.'.	^ menu! !!HandMorph methodsFor: 'world menu' stamp: 'sw 2/22/1999 16:02'!windowsMenu	"Build the windows menu for the world."	| menu |	menu _ (MenuMorph entitled: 'Window management') defaultTarget: self.	menu addStayUpItem.	menu add: 'find window' action: #findWindow.	menu add: 'find changed browsers...' action: #findDirtyBrowsers.	menu add: 'find changed windows...' action: #findDirtyWindows.	menu addLine.	menu add: 'collapse all windows' action: #collapseAll.	menu add: 'expand all windows' action: #expandAll.	menu addLine.	menu add: 'delete unchanged windows' action: #closeUnchangedWindows.	menu add: 'delete non-windows' action: #deleteNonWindows.	menu add: 'delete unchanged & non-windows' action: #cleanUpWorld.	menu addLine.	menu add: ((Preferences valueOfFlag: #reverseWindowStagger)							ifTrue: ['tile windows']							ifFalse: ['stagger windows'])		target: ScreenController new action: #changeWindowPolicy.	menu add: 'flaps...' action: #offerFlapsMenu.	^ menu! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 2/22/1999 16:47'!cleanUpWorld	(SelectionMenu confirm:'Are you SURE?')		ifFalse: [^ self].	self world allNonFlapRelatedSubmorphs do:		[:m | m delete].	(SystemWindow windowsIn: self world satisfying: [:w | w model canDiscardEdits])		do: [:w | w delete]! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 2/22/1999 16:47'!deleteNonWindows	(SelectionMenu confirm:'Do you really want to discard all objectsthat are not in windows?')		ifFalse: [^ self].	self world allNonFlapRelatedSubmorphs do:		[:m | m delete]! !!HandMorph methodsFor: 'world menu commands' stamp: 'sw 2/22/1999 16:16'!offerFlapsMenu	| aMenu reply showing |	showing _ Preferences valueOfFlag: #useFlaps.	aMenu _ MVCMenuMorph entitled: 'flaps'.	aMenu add: 'new flap...'  action: #addFlap.	aMenu add:  (showing							ifTrue: ['stop showing flaps']							ifFalse: ['start showing flaps'])		 action: #toggleWhetherToShowFlaps.	showing ifTrue:		[aMenu add: 'bring flaps to front' action: #bringFlapsToFront].	reply _ aMenu invokeAt: self position in: self currentWorld.	reply ifNotNil: [Utilities perform: reply]	! !!MenuItemMorph methodsFor: 'accessing' stamp: 'sw 2/17/1999 18:43'!adaptToWorld: aWorld	super adaptToWorld: aWorld.	(target isKindOf: WorldMorph) ifTrue: [self target: aWorld].	(target isKindOf: HandMorph) ifTrue: [self target: aWorld primaryHand].	(target isKindOf: Presenter) ifTrue: [self target: aWorld presenter]! !!Number methodsFor: 'converting' stamp: 'sw 2/16/1999 18:15'!asNumber	^ self! !!PasteUpMorph methodsFor: 'misc' stamp: 'sw 2/16/1999 22:32'!innocuousName	^ (self hasProperty: #flap)		ifTrue:			['flap']		ifFalse:			[super innocuousName]! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 2/15/1999 20:37'!accommodateFlap: aFlapTab	"Shift submorphs over, if appropriate"	| offset |	aFlapTab slidesOtherObjects ifTrue:		[offset _ self offsetForAccommodating: aFlapTab referent extent onEdge: aFlapTab edgeToAdhereTo.		self shiftSubmorphsBy: offset]! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 2/17/1999 18:39'!addFlaps	"Normally, like all the flap stuff, intended for use only in a World -- but the code for flaps generally put into PasteUpMorph for possible more general use in future	Utilities clobberFlapTabList.	Utilities initializeStandardFlaps.	self currentWorld deleteAllFlapArtifacts.	self currentWorld addFlaps."	| flapList |	Preferences useFlaps ifFalse: [^ self].		flapList _ Utilities flapTabs.	flapList do:		[:aFlapTab |			(aFlapTab world == self) ifFalse:				[self addMorphFront: aFlapTab.				aFlapTab adaptToWorld: self].			aFlapTab flapShowing ifTrue: [aFlapTab showFlap]]! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 2/11/1999 15:25'!bringFlapTabsToFront	self submorphs do:		[:m | (m isKindOf: FlapTab) ifTrue: [self addMorphFront: m]]! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 2/15/1999 20:36'!deleteAllFlapArtifacts	"self currentWorld deleteAllFlapArtifacts"	self submorphs do:		[:m | (m hasProperty: #flap) ifTrue: [m delete].			(m isKindOf: FlapTab) ifTrue: [ m delete]]! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 2/11/1999 10:53'!offsetForAccommodating: anExtent onEdge: edgeSymbol	"Answer a delta to be applied to my submorphs in order tfor anExtent to be slid inboard on the indicated edge"	edgeSymbol == #left ifTrue: [^ anExtent x @ 0].	edgeSymbol == #right ifTrue: [^ anExtent x negated @ 0].	edgeSymbol == #top ifTrue: [^ 0 @ anExtent y].	edgeSymbol == #bottom ifTrue: [^ 0 @ anExtent y negated].! !!PasteUpMorph methodsFor: 'flaps' stamp: 'sw 2/15/1999 20:36'!removeAccommodationForFlap: aFlapTab	"Shift submorphs over, if appropriate"	| offset |	aFlapTab slidesOtherObjects ifTrue:		[offset _ self offsetForAccommodating: aFlapTab referent extent onEdge: aFlapTab edgeToAdhereTo.		self shiftSubmorphsBy: offset negated]! !!Preferences class methodsFor: 'preferences dictionary' stamp: 'sw 2/15/1999 11:35'!noteThatFlag: prefSymbol justChangedTo: aBoolean	"Provides a hook so that a user's toggling of a preference might precipitate some immediate action"	((prefSymbol == #useFlaps) and: [Smalltalk isMorphic]) ifTrue:		[aBoolean			ifTrue:				[self currentWorld addFlaps]			ifFalse:				[self currentWorld deleteAllFlapArtifacts]]! !!Presenter methodsFor: 'palette & parts bin' stamp: 'sw 2/15/1999 13:18'!pageOfSampleWindowsOfExtent: aPoint	| aPage aWindow pu |	aPage _ self newPageForStandardPartsBin.	aPage extent: aPoint.	aWindow _ Browser new openAsMorphEditing: nil.	aWindow setLabel: 'System Browser'.	aPage addMorphBack: aWindow.	aWindow _ Workspace new embeddedInMorphicWindowLabeled: 'Workspace'.	aPage addMorphBack: aWindow.	aPage addMorphBack: FileList openAsMorph.	aWindow _ SelectorBrowser new morphicWindow.	aWindow setLabel: 'Selector Browser'.	aPage addMorphBack: aWindow.	aPage addMorphBack: ((pu _ PasteUpMorph newSticky borderInset) embeddedInMorphicWindowLabeled: 'assembly').	pu color: (Color r: 0.839 g: 1.0 b: 0.935).	aPage  replaceTallSubmorphsByThumbnails.	aPage fixLayout.	^ aPage! !!ReferenceMorph commentStamp: '<historical>' prior: 0!Serves as a reference to any arbitrary morph; used, for example, as the tab in a tabbed palette  The wrapper intercepts mouse events and fields them, passing them on to their referent morph.!!ReferenceMorph methodsFor: 'misc' stamp: 'sw 2/11/1999 14:11'!fitContents	submorphs size == 1 ifTrue:		[self extent: submorphs first extent + (2 * self borderWidth).		submorphs first position: self position + self borderWidth]! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 12/2/1998 17:21'!highlight	| str |	isHighlighted _ true.	submorphs size > 0		ifTrue:			[((str _ submorphs first) isKindOf: StringMorph)				ifTrue:					[str color: self highlightColor]				ifFalse:					[self borderWidth: 1; borderColor: self highlightColor]]! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 12/21/1998 14:14'!initialize	super initialize.	isHighlighted _ false.	borderWidth _ 0.	self color: Color transparent.	referent _ nil.	actWhen _ #buttonUp! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 12/2/1998 12:38'!isHighlighted	^ isHighlighted == true! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 11/24/1998 17:39'!isInTabSorter	"Answer whether the receiver is currently inside a tab sorter"	^ (owner ~~ nil) and: [owner isKindOf: TabSorterMorph]! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 12/1/1998 13:20'!layoutChanged	self fitContents.	super layoutChanged! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 12/21/1998 15:50'!morphToInstall: aMorph	"Create a new tab consisting of a string holding the morph's name"	| aLabel nameToUse |	aLabel _ StringMorph new contents: (nameToUse _ aMorph externalName).	self addMorph: aLabel.	aLabel lock.	self referent: aMorph.	self setNameTo: nameToUse.	self fitContents.! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 12/2/1998 17:49'!setNameTo: aString	super setNameTo: aString.	(submorphs size > 0 and: [submorphs first isKindOf: StringMorph])		ifTrue:			[submorphs first contents: aString]! !!ReferenceMorph methodsFor: 'misc' stamp: 'sw 12/7/1998 14:38'!unHighlight	| str |	isHighlighted _ false.	self borderWidth: 0.	submorphs size > 0		ifTrue:			[((str _ submorphs first) isKindOf: StringMorph)				ifTrue:					[str color: self regularColor]]! !!ReferenceMorph methodsFor: 'menu' stamp: 'sw 2/15/1999 10:55'!addCustomMenuItems: aCustomMenu hand: aHandMorph	| first |	(((first _ submorphs first) isKindOf: StringMorph) or: [first isKindOf: TextMorph])		ifTrue:			[aCustomMenu add: 'change tab wording...' action: #changeTabText.			aCustomMenu add: 'use graphical tab' action: #useGraphicalTab]		ifFalse:			[aCustomMenu add: 'use textual tab' action: #useTextualTab.			aCustomMenu add: 'change tab graphic' action: #changeTabGraphic]! !!ReferenceMorph methodsFor: 'menu' stamp: 'sw 12/16/1998 14:02'!changeTabGraphic	submorphs first chooseNewGraphicCoexisting: true! !!ReferenceMorph methodsFor: 'menu' stamp: 'sw 12/21/1998 13:21'!changeTabText	| reply |	reply _ FillInTheBlankMorph request: 'new wording for this tab:' initialAnswer: submorphs first contents centerAt: Sensor cursorPoint inWorld: self world.	reply size > 0 ifTrue:		[submorphs first contents: reply]! !!ReferenceMorph methodsFor: 'menu' stamp: 'sw 12/7/1998 15:40'!useGraphicalTab	| aGraphic |	aGraphic _ SketchMorph new form: (ScriptingSystem formAtKey: 'squeakyMouse').	self replaceSubmorph: submorphs first by: aGraphic.	aGraphic position: self position.	aGraphic lock.	self fitContents.	self layoutChanged.	(owner isKindOf: IndexTabs) ifTrue:		[owner laySubpartsOutInOneRow.		isHighlighted ifTrue: [self highlight]].! !!ReferenceMorph methodsFor: 'menu' stamp: 'sw 12/7/1998 15:40'!useTextualTab	| aLabel |	aLabel _ StringMorph  new contents: self externalName.	self replaceSubmorph: submorphs first by: aLabel.	aLabel position: self position.	aLabel highlightColor: self highlightColor; regularColor: self regularColor.	aLabel lock.	self fitContents.	self layoutChanged.	(owner isKindOf: IndexTabs) ifTrue:		[self borderWidth: 0.		owner laySubpartsOutInOneRow.		isHighlighted ifTrue:			[self highlight]]! !!ReferenceMorph methodsFor: 'accessing' stamp: 'sw 11/30/1998 12:47'!morphToInstall	^ referent! !!ReferenceMorph methodsFor: 'accessing' stamp: 'sw 12/3/1998 10:06'!referent	^ referent! !!ReferenceMorph methodsFor: 'accessing' stamp: 'de 11/30/1998 09:58'!referent: m	referent _ m! !!ReferenceMorph methodsFor: 'events' stamp: 'sw 12/21/1998 14:13'!doButtonAction	self tabSelected! !!ReferenceMorph methodsFor: 'events' stamp: 'sw 11/30/1998 12:46'!handlesMouseDown: evt	^ true! !!ReferenceMorph methodsFor: 'events' stamp: 'sw 11/30/1998 12:47'!mouseDown: evt	oldColor _ color.	actWhen == #buttonDown		ifTrue: [self doButtonAction]! !!ReferenceMorph methodsFor: 'events' stamp: 'sw 10/23/1998 15:57'!mouseMove: evt	actWhen == #buttonDown ifTrue: [^ self].	(self containsPoint: evt cursorPoint)		ifTrue:			[self color: (oldColor mixed: 1/2 with: Color white).			actWhen == #whilePressed ifTrue: [self doButtonAction]]		ifFalse: [self color: oldColor].! !!ReferenceMorph methodsFor: 'events' stamp: 'sw 12/3/1998 14:10'!mouseUp: evt	self color: oldColor.	(actWhen == #buttonUp and: [self containsPoint: evt cursorPoint])		ifTrue: [self doButtonAction].	super mouseUp: evt "send to evt handler if any"! !!ReferenceMorph methodsFor: 'events' stamp: 'sw 1/6/1999 07:45'!tabSelected	"Called when the receiver is hit.  First, bulletproof against someone having taken the structure apart.  My own action basically requires that my grand-owner be a TabbedPalette.  Note that the 'opening' script concept has been left behind here."	| gramps |	(owner isKindOf: IndexTabs) ifFalse: [^ self beep].	((gramps _ owner owner) isKindOf: TabbedPalette)  ifTrue:		[gramps selectTab: self]! !!FlapTab commentStamp: 'sw 2/11/1999 00:04' prior: 0!The tab associated with a flap.  The actual FlapTab is a morph which either resides directly on the World (if the flap is hidden or if the user chooses to have the tab be outboard) or as a submorph of the flap, if the flap is showing and tab-inboard is set.!!FlapTab reorganize!('all' addCustomMenuItems:hand: adjustPositionAfterHidingFlap adjustPositionVisAVisFlap applyThickness: arrangeToPopOutOnDragOver: arrangeToPopOutOnMouseOver: assumeString:font:orientation:color: changeTabText destroyFlap edgeToAdhereTo edgeToAdhereTo: flapShowing hideFlap hideFlapUnlessBearingHalo hideFlapUnlessOverReferent inboard: initialize isCurrentlyTextual maybeHideFlapOnMouseLeave maybeHideFlapOnMouseLeaveDragging mouseMove: mouseUp: offerFlapMenu offsetForInsertion popOutOnDragOver: popOutOnMouseOver: positionObject: positionReferent setEdge: setEdgeToAdhereTo setThickness setToPopOutOnDragOver: setToPopOutOnMouseOver: showFlap slidesOtherObjects spanWorld stickOntoReferent tabSelected thickness toggleDragOverBehavior toggleInboardness toggleMouseOverBehavior togglePartsBinMode toggleSlideBehavior useStringTab:)!!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 10:58'!addCustomMenuItems: aCustomMenu hand: aHandMorph	aCustomMenu add: 'flap...' target: self action: #offerFlapMenu! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 17:58'!adjustPositionAfterHidingFlap	self positionObject: self! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 18:13'!adjustPositionVisAVisFlap	| sideToAlignTo opposite |	opposite _ Utilities oppositeSideTo: edgeToAdhereTo.	sideToAlignTo _ inboard		ifTrue:	[opposite]		ifFalse:	[edgeToAdhereTo].	self perform: (Utilities simpleSetterFor: sideToAlignTo) with: (referent perform: opposite)! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 15:33'!applyThickness: newThickness	(#(left right) includes: edgeToAdhereTo)			ifTrue:				[referent width: newThickness asNumber]			ifFalse:				[referent height: newThickness asNumber].	self positionReferent. 	self adjustPositionVisAVisFlap! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 22:59'!arrangeToPopOutOnDragOver: aBoolean	aBoolean		ifTrue:			[self on: #mouseEnterDragging send: #showFlap to: self.			referent on: #mouseLeaveDragging send: #maybeHideFlapOnMouseLeaveDragging to: self.			self on: #mouseLeaveDragging send: #maybeHideFlapOnMouseLeaveDragging to: self]		ifFalse:			[self on: #mouseEnterDragging send: nil to: nil.			referent on: #mouseLeaveDragging send: nil to: nil.			self on: #mouseLeaveDragging send: nil to: nil]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 23:31'!arrangeToPopOutOnMouseOver: aBoolean	aBoolean		ifTrue:			[self on: #mouseEnter send: #showFlap to: self.			referent on: #mouseLeave send: #hideFlapUnlessBearingHalo to: self.			self on: #mouseLeave send: #maybeHideFlapOnMouseLeave to: self]		ifFalse:			[self on: #mouseEnter send: nil to: nil.			self on: #mouseLeave send: #nil to: nil.			referent on: #mouseLeave send: nil to: nil]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/22/1999 17:04'!assumeString: aString font: aFont orientation: anOrientation color: aColor	| aTextMorph workString |	(anOrientation == #vertical) 		ifTrue:			[workString _ ''.			aString do:				[:ch | workString _ workString copyWith: ch.					workString _ workString copyWith: Character cr].			workString _ workString copyFrom: 1 to: workString size - 1]		ifFalse:			[workString _ aString].	aTextMorph _ (TextMorph new beAllFont: aFont) width: 10; contents: workString; yourself.	self removeAllMorphs.	self addMorph: aTextMorph centered.	aTextMorph lock.	self borderWidth: 4; borderColor: #raised.	self fitContents.	aColor ifNotNil: [self color: aColor].	aTextMorph position: self position! !!FlapTab methodsFor: 'all' stamp: 'sw 2/22/1999 17:06'!changeTabText	| reply |	reply _ FillInTheBlankMorph request: 'new wording for this tab:' initialAnswer: (submorphs first contents copyWithout: Character cr)centerAt: Sensor cursorPoint inWorld: self world.	reply size > 0 ifFalse: [^ self].	self useStringTab: reply.	submorphs first delete.	self assumeString: reply font: ScriptingSystem fontForScriptorButtons orientation: (Utilities orientationForEdge: edgeToAdhereTo) color: nil! !!FlapTab methodsFor: 'all' stamp: 'sw 2/22/1999 16:40'!destroyFlap	| reply |	reply _ self confirm: 'Caution -- this would permanentlyremove this flap, so it would no longer beavailable in this or any other project.Do you really want to this?' orCancel: [^ self].	reply ifTrue: [Utilities removeFlapTab: self]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 00:41'!edgeToAdhereTo	^ edgeToAdhereTo! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 00:32'!edgeToAdhereTo: e	edgeToAdhereTo _ e! !!FlapTab methodsFor: 'all' stamp: 'sw 2/9/1999 14:44'!flapShowing	^ flapShowing == true! !!FlapTab methodsFor: 'all' stamp: 'sw 2/25/1999 13:36'!hideFlap	| aWorld |	aWorld _ self currentWorld.	referent privateDelete.	aWorld removeAccommodationForFlap: self.	flapShowing _ false.	self isInWorld ifFalse: [aWorld addMorphFront: self].	self adjustPositionAfterHidingFlap.	aWorld haloMorphs do:		[:m | m target isInWorld ifFalse: [m delete]]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 22:48'!hideFlapUnlessBearingHalo	self hasHalo ifFalse: [self hideFlap]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 14:38'!hideFlapUnlessOverReferent	| aWorld |	(referent isInWorld and: [referent bounds containsPoint: Sensor cursorPoint])		ifFalse:			[aWorld _ self world.			self referent delete.			aWorld removeAccommodationForFlap: self.			flapShowing _ false.			self isInWorld ifFalse: [aWorld addMorphFront: self].			self adjustPositionAfterHidingFlap]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 12:57'!inboard: aBoolean	inboard _ aBoolean! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 23:44'!initialize	super initialize.	edgeToAdhereTo _ #left.	flapShowing _ false.	slidesOtherObjects _ false.	popOutOnDragOver _ false.	popOutOnMouseOver _ false.	inboard _ false.	dragged _ false! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 11:14'!isCurrentlyTextual	| first |	^ ((first _ submorphs first) isKindOf: StringMorph) or: [first isKindOf: TextMorph]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 23:42'!maybeHideFlapOnMouseLeave	self hasHalo ifTrue: [^ self].	referent isInWorld ifFalse: [^ self].	self hideFlapUnlessOverReferent! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 23:42'!maybeHideFlapOnMouseLeaveDragging	| aWorld |	self hasHalo ifTrue: [^ self].	referent isInWorld ifFalse: [^ self].	(dragged or: [referent bounds containsPoint: Sensor cursorPoint])		ifTrue:	[^ self].	aWorld _ self world.	referent privateDelete.  "could make me worldless if I'm inboard"	aWorld removeAccommodationForFlap: self.	flapShowing _ false.	self isInWorld ifFalse: [aWorld addMorphFront: self].	self adjustPositionAfterHidingFlap! !!FlapTab methodsFor: 'all' stamp: 'sw 2/22/1999 15:56'!mouseMove: evt	| aPosition newReferentThickness adjustedPosition |	((self containsPoint: (aPosition _ evt cursorPoint)) and: [dragged not])		ifTrue:			[self color: (oldColor mixed: 1/2 with: Color white).			actWhen == #whilePressed ifTrue: [self doButtonAction]]		ifFalse:			[flapShowing ifFalse:				[self flag: #deferred.  "Later use this UI to reposition flap in ortho direction"				^ self].			adjustedPosition _ aPosition - evt hand targetOffset.			(edgeToAdhereTo == #bottom)				ifTrue:					[newReferentThickness _ inboard						ifTrue:							[self world height - adjustedPosition y]						ifFalse:							[self world height - adjustedPosition y - self height]].			(edgeToAdhereTo == #left)					ifTrue:						[newReferentThickness _							inboard								ifTrue:									[adjustedPosition x + self width]								ifFalse:									[adjustedPosition x]].			(edgeToAdhereTo == #right)					ifTrue:						[newReferentThickness _							inboard								ifTrue:									[self world width - adjustedPosition x]								ifFalse:									[self world width - adjustedPosition x - self width]].			(edgeToAdhereTo == #top)					ifTrue:						[newReferentThickness _							inboard								ifTrue:									[adjustedPosition y]								ifFalse:									[adjustedPosition y + self height]].					(#(left right) includes: edgeToAdhereTo)				ifFalse:					[self left: adjustedPosition x]				ifTrue:					[self top: adjustedPosition y].			self applyThickness: newReferentThickness.			dragged _ true]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 23:38'!mouseUp: evt	super mouseUp: evt.	dragged _ false! !!FlapTab methodsFor: 'all' stamp: 'sw 2/25/1999 16:37'!offerFlapMenu	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: 'Flap...'.	(referent isKindOf: PasteUpMorph) ifTrue: 		[aMenu add: 			(referent isPartsBin				ifTrue:	['suspend parts-bin behavior']				ifFalse:	['behave like a parts bin'])			 action: #togglePartsBinMode].	self isCurrentlyTextual		ifTrue:			[aMenu add: 'change tab wording...' action: #changeTabText.			aMenu add: 'use graphical tab' action: #useGraphicalTab]		ifFalse:			[aMenu add: 'use textual tab' action: #useTextualTab.			aMenu add: 'change tab graphic' action: #changeTabGraphic].	aMenu addLine.	aMenu add: ('toggle dragover (currently ', popOutOnDragOver printString, ')') action: #toggleDragOverBehavior.	aMenu add: ('toggle mouseover (currently ', popOutOnMouseOver printString, ')') action: #toggleMouseOverBehavior.	aMenu add: ('toggle slide (currently ', slidesOtherObjects printString, ')') action: #toggleSlideBehavior.	aMenu add: ('toggle inboardness (currently ', inboard printString, ')') action: #toggleInboardness.	"aMenu add: ('thickness... (currently ', self thickness printString, ')') action: #setThickness."	aMenu add: ('which edge... (currently ', edgeToAdhereTo, ')') action: #setEdgeToAdhereTo.	aMenu addLine.	aMenu add: 'destroy this flap' action: #destroyFlap.	aMenu popUpAt: Sensor cursorPoint event: self currentEvent! !!FlapTab methodsFor: 'all' stamp: 'sw 2/9/1999 22:25'!offsetForInsertion	"Answer a point to be added to the coordinates of all existing morphs if the receiver is inserted in its standard position"	edgeToAdhereTo == #left ifTrue:		[^ referent width @ 0].	edgeToAdhereTo == #right ifTrue:		[^ referent width negated @ 0].	edgeToAdhereTo == #top ifTrue:		[^ 0 @ referent height].	edgeToAdhereTo == #bottom ifTrue:		[^ 0 @ referent height negated].	self error: 'unknown edge'! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 13:52'!popOutOnDragOver: aBoolean	"Caution: just sets the flag, doesn't adjust event handlers"	popOutOnDragOver _  aBoolean! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 14:04'!popOutOnMouseOver: aBoolean	"Caution: just sets the flag, doesn't adjust event handlers"	popOutOnMouseOver _  aBoolean! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 17:58'!positionObject: anObject	"anObject could be myself or my referent"	| container |	container _ self currentWorld.	"Could consider container _ referent pasteUpMorph, to allow flaps on things other than the world, but for the moment, let's skip it!!"	(edgeToAdhereTo == #left) ifTrue:		[^ anObject left: container left].	(edgeToAdhereTo == #right) ifTrue:		[^ anObject right: container right].	(edgeToAdhereTo == #top) ifTrue:		[^ anObject top: container top].	(edgeToAdhereTo == #bottom) ifTrue:		[^ anObject bottom: container bottom]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 17:58'!positionReferent	self positionObject: referent! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 18:16'!setEdge: anEdge	| newOrientation |	self isCurrentlyTextual ifTrue:		[(#(left right) includes: edgeToAdhereTo)			ifTrue:				[(#(top bottom) includes: anEdge) ifTrue:					[newOrientation _ #horizontal]]			ifFalse:				[(#(top bottom) includes: anEdge) ifFalse:					[newOrientation _ #vertical]].		newOrientation ifNotNil:			[self assumeString: submorphs first contents font: ScriptingSystem fontForScriptorButtons orientation: newOrientation color: self color]].	self edgeToAdhereTo: anEdge.	referent isInWorld ifTrue: [self positionReferent] .	self adjustPositionVisAVisFlap! !!FlapTab methodsFor: 'all' stamp: 'sw 2/16/1999 17:53'!setEdgeToAdhereTo	| aMenu |	aMenu _ MenuMorph new defaultTarget: self.	#(left top right bottom) do:		[:sym | aMenu add: sym asString target: self selector:  #setEdge: argument: sym].	aMenu popUpAt: Sensor cursorPoint event: self currentEvent! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 15:33'!setThickness	| newThickness |	newThickness _ FillInTheBlank request: 'New thickness:' initialAnswer: self thickness printString.	newThickness size > 0 ifTrue:		[self applyThickness: newThickness]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/25/1999 14:53'!setToPopOutOnDragOver: aBoolean	self arrangeToPopOutOnDragOver:  (popOutOnDragOver _ aBoolean)! !!FlapTab methodsFor: 'all' stamp: 'sw 2/25/1999 14:52'!setToPopOutOnMouseOver: aBoolean	self arrangeToPopOutOnMouseOver:  (popOutOnMouseOver _ aBoolean)! !!FlapTab methodsFor: 'all' stamp: 'sw 2/17/1999 18:37'!showFlap	| aWorld |	aWorld _ self world.	inboard ifTrue:		[self stickOntoReferent].  "makes referent my owner, and positions me accordingly"	referent world == aWorld		ifFalse:			[aWorld accommodateFlap: self.  "Make room if needed"			aWorld addMorphFront: referent.			aWorld startSteppingSubmorphsOf: referent.			self positionReferent.			referent adaptToWorld: aWorld].	inboard  ifFalse:		[self adjustPositionVisAVisFlap].	flapShowing _ true.		aWorld bringFlapTabsToFront! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 10:55'!slidesOtherObjects	^ slidesOtherObjects! !!FlapTab methodsFor: 'all' stamp: 'sw 2/17/1999 01:10'!spanWorld	| aPoint |	aPoint _ self currentWorld extent.	(#(left right) includes: edgeToAdhereTo)		ifTrue:			[referent height: aPoint y]		ifFalse:			[referent width: aPoint x] ! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 14:46'!stickOntoReferent	"Place the receiver directly onto the referent -- for use when the referent is being shown as a flap"	| newPosition |	referent addMorph: self.	edgeToAdhereTo == #left		ifTrue:			[newPosition _ (referent width - self width) @ self top].	edgeToAdhereTo == #right		ifTrue:			[newPosition _ (referent left @ self top)].	edgeToAdhereTo == #top		ifTrue:			[newPosition _ self left @ (referent height - self height)].	edgeToAdhereTo == #bottom		ifTrue:			[newPosition _ self left @ referent top].	self position: newPosition! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 15:52'!tabSelected	dragged == true ifTrue:		[^ dragged _ false].	self flapShowing		ifTrue:			[self hideFlap]		ifFalse:			[self showFlap]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 13:42'!thickness	^ (#(left right) includes: edgeToAdhereTo)		ifTrue:			[referent width]		ifFalse:			[referent height]! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 14:10'!toggleDragOverBehavior	self arrangeToPopOutOnDragOver:  (popOutOnDragOver _ popOutOnDragOver not)! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 14:18'!toggleInboardness	self hideFlap.	inboard _ inboard not.	self showFlap! !!FlapTab methodsFor: 'all' stamp: 'sw 2/15/1999 14:07'!toggleMouseOverBehavior	self arrangeToPopOutOnMouseOver:  (popOutOnMouseOver _ popOutOnMouseOver not)! !!FlapTab methodsFor: 'all' stamp: 'sw 2/25/1999 13:17'!togglePartsBinMode	referent setPartsBinStatusTo: referent isPartsBin not! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 12:21'!toggleSlideBehavior	slidesOtherObjects _ slidesOtherObjects not! !!FlapTab methodsFor: 'all' stamp: 'sw 2/11/1999 00:29'!useStringTab: aString	| aLabel |	aLabel _ StringMorph  new contents: aString asString.	self addMorph: aLabel.	aLabel position: self position.	aLabel highlightColor: self highlightColor; regularColor: self regularColor.	aLabel lock.	self fitContents.	self layoutChanged! !!ReferenceMorph class methodsFor: 'all' stamp: 'sw 11/30/1998 12:44'!defaultNameStemForInstances	^ 'ref'! !!ReferenceMorph class methodsFor: 'all' stamp: 'sw 11/30/1998 14:12'!forMorph: aMorph	"Create a new tab consisting of a string holding the morph's name"	^ self new morphToInstall: aMorph! !!FlapTab class methodsFor: 'as yet unclassified' stamp: 'sw 2/11/1999 14:39'!defaultNameStemForInstances	^ 'flap tab'! !!ScreenController methodsFor: 'menu messages' stamp: 'sw 2/15/1999 12:25'!fileOutChanges	Utilities fileOutChanges! !!SimpleButtonMorph methodsFor: 'initialization' stamp: 'sw 2/17/1999 18:46'!adaptToWorld: aWorld	super adaptToWorld: aWorld.	(target isKindOf: WorldMorph) ifTrue: [self target: aWorld].	(target isKindOf: HandMorph) ifTrue: [self target: aWorld primaryHand].	(target isKindOf: Presenter) ifTrue: [self target: aWorld presenter]! !!StringButtonMorph methodsFor: 'initialization' stamp: 'sw 2/17/1999 18:46'!adaptToWorld: aWorld	super adaptToWorld: aWorld.	(target isKindOf: WorldMorph) ifTrue: [self target: aWorld].	(target isKindOf: HandMorph) ifTrue: [self target: aWorld primaryHand].	(target isKindOf: Presenter) ifTrue: [self target: aWorld presenter]! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'sw 2/8/1999 12:37'!saveSession	self snapshot: true andQuit: false! !!ThreePhaseButtonMorph methodsFor: 'all' stamp: 'sw 2/17/1999 18:46'!adaptToWorld: aWorld	super adaptToWorld: aWorld.	(target isKindOf: WorldMorph) ifTrue: [self target: aWorld].	(target isKindOf: HandMorph) ifTrue: [self target: aWorld primaryHand].	(target isKindOf: Presenter) ifTrue: [self target: aWorld presenter]! !!Utilities class methodsFor: 'miscellaneous' stamp: 'sw 2/15/1999 17:30'!addSampleWindowsTo: aPage	"Add windows representing a browser, a workspace, etc., to aPage"	|  aWindow pu |	aWindow _ Browser new openAsMorphEditing: nil.	aWindow setLabel: 'System Browser'.	aPage addMorphBack: aWindow.	aWindow _ Workspace new embeddedInMorphicWindowLabeled: 'Workspace'.	aPage addMorphBack: aWindow.	aPage addMorphBack: FileList openAsMorph.	aWindow _ SelectorBrowser new morphicWindow.	aWindow setLabel: 'Selector Browser'.	aPage addMorphBack: aWindow.	aPage addMorphBack: ((pu _ PasteUpMorph newSticky borderInset) embeddedInMorphicWindowLabeled: 'assembly').	pu color: (Color r: 0.839 g: 1.0 b: 0.935)! !!Utilities class methodsFor: 'miscellaneous' stamp: 'sw 2/16/1999 18:07'!simpleSetterFor: aSymbol	"Utilities simpleSetterFor: #right"	^ (aSymbol, ':') asSymbol! !!Utilities class methodsFor: 'fileout' stamp: 'sw 2/15/1999 12:24'!fileOutChanges	"File out the current change set to a file whose name is a function of the current date and time."	Smalltalk changes fileOut.	Transcript cr; show: 'Changes filed out ', Date dateAndTimeNow printString! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/22/1999 16:31'!addFlap	| aMenu reply aFlapTab |	aMenu _ MVCMenuMorph entitled: 'flaps'.	#(left right top bottom) do:		[:sym | aMenu add: sym action: sym].	reply _ aMenu invokeAt: self currentHand position in: self currentWorld.	reply ifNotNil:		[aFlapTab _ self newFlapTitled: 'Fuhlapp' onEdge: reply.		self flapTabs add: aFlapTab.	self currentWorld addFlaps]	! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/22/1999 16:18'!bringFlapsToFront	self currentWorld bringFlapTabsToFront! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/16/1999 18:29'!clobberFlapTabList	"Utilities clobberFlapTabList"	FlapTabs _ nil! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/25/1999 14:42'!explainFlaps	"Open a window giving flap  help."	"Utilities explainFlaps"	| aString |	aString _ 'Set the Preference "useFlaps" to true to use flaps, false to avoid them.  You can also change this setting from the "flaps" branch of the "windows" menu.Flaps, when showing, will be available in every morphic project.Each flap may be set up to appear on mouseover, dragover, both, or neither, and each tab can be positioned either within the showing flap ("inboard") or outside of it.  See the menu items described below for more about these and other options.You can always open a closed flap by clicking on its tab, You can always close an open flap by clicking on its tab.Drag the tab of an open flap to reposition the tab and to resize the flap itself.  Repositioning starts when you drag the cursor out of the original tab area.If flaps or their tabs seem wrongly positioned or lost, try issuing a restoreDisplay from the Morphic screen menu.The red-halo menu on a flap gives you access to the "flap..." submenu which allows you to change its properties:		inboard		Governs whether the tab on an open flaps is placed within the flap.	dragover	If true, the flap opens on dragover and closes again on drag-leave.	mouseover	If true, the flap opens on mouseover and closes again on mouse-leave. 	slide		If true, when a flap opens, it slides the other objects on the screen over.	edge		Governs which edge (left, right, top, bottom) the flaps adheres to.	change tab wording		Lets you, well, change the tab''s wording.	use graphical tab		Makes the tab graphical.	change tab graphic...	Lets you change the graphic for a graphical tab.	destroy this flap		Permanently deletes the flap.	suspend parts bin behavior	Temporarily open a parts-bin flap to editing	behave like a parts bin		Make the flap again serve as a parts binTo define a new flap, look under "flaps..." in the "windows... menu.To reinstate the default system flaps, evaluate "Utilities reinstateDefaultFlaps"  (caveat -- this will first remove all existing flaps, including any that you may have manually added or edited.)If flaps that you wish to use appear to be buried behind other objects on your screen, choose "bring flaps to front" from the flaps... branch of the windows... menu.To add, delete, or edit things on a given flap, it is often wise first to suspend the flap''s mouse-over and drag-over sensitivity, so it won''t keep disappearing on you while you''re trying to work with it.'.	  	(StringHolder new contents: aString)		openLabel: 'Flaps in Morphic'	! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/16/1999 18:30'!flapTabs	FlapTabs ifNil: [self initializeStandardFlaps].	^ FlapTabs! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/23/1999 10:39'!initializeStandardFlaps	"Utilities initializeStandardFlaps"	FlapTabs _ OrderedCollection new.	FlapTabs add: self standardLeftFlap.	FlapTabs add: self standardBottomFlap.	FlapTabs add: self standardRightFlap.	FlapTabs add: self menuFlap.	^ FlapTabs! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/25/1999 15:51'!menuFlap	| aFlap aFlapTab m |	aFlap _ PasteUpMorph newSticky color: Color transparent; extent: self currentWorld width @ 260; borderWidth: 0.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab color: Color brown lighter.	aFlapTab assumeString: 'Menu' font: ScriptingSystem fontForScriptorButtons orientation: #horizontal color: Color blue muchLighter.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab edgeToAdhereTo: #top; inboard: false.	aFlapTab position: (200 @ 0).	aFlap setProperty: #flap toValue: true.	aFlap color: (Color blue muchLighter alpha: 0.6).	aFlap extent: self currentWorld width @ 260.	aFlap addTransparentSpacerOfSize: (14@0).	#(openMenu helpMenu windowsMenu scriptingMenu changesMenu debugMenu) do:		[:aMenuSymbol |			aFlap addMorphBack: ((m _ self currentHand perform: aMenuSymbol) beSticky; stayUp: true).			m submorphs second delete].	aFlap laySubpartsOutInOneRow.	^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/22/1999 16:28'!newFlapTitled: aString onEdge: anEdge	| aFlap aFlapTab  orientation |	aFlap _ PasteUpMorph newSticky.	aFlapTab _ FlapTab new referent: aFlap.	orientation _ (#(left right) includes: anEdge)		ifTrue:	[#vertical]		ifFalse:	[#horizontal].	aFlapTab assumeString: aString font: (ScriptingSystem fontForScriptorButtons) orientation: orientation color: Color veryLightGray.	aFlapTab edgeToAdhereTo: anEdge; inboard: false.	anEdge == #left ifTrue:		[aFlapTab position: (0 @ 0).		aFlap extent: (200 @ self currentWorld height)].	anEdge == #right ifTrue:		[aFlapTab position: ((self currentWorld width - aFlapTab width) @ 0).		aFlap extent: (200 @ self currentWorld height)].	anEdge == #top ifTrue:		[aFlapTab position: (50 @ 0).		aFlap extent: (self currentWorld width @ 200)].	anEdge == #bottom ifTrue:		[aFlapTab position: (50 @ (self currentWorld height - aFlap height)).		aFlap extent: (self currentWorld width @ 200)].	aFlap setProperty: #flap toValue: true.	aFlap color: (Color veryLightGray muchLighter).	^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/22/1999 17:02'!orientationForEdge: anEdge	^ (#(left right) includes: anEdge)		ifTrue:	[#vertical]		ifFalse:	[#horizontal]! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/23/1999 10:48'!reinstateDefaultFlaps	"Utilities reinstateDefaultFlaps"	self currentWorld deleteAllFlapArtifacts.	self clobberFlapTabList.	self initializeStandardFlaps.	self currentWorld addFlaps.! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/22/1999 16:38'!removeFlapTab: aFlapTab	(FlapTabs ~~ nil and: [FlapTabs includes: aFlapTab])		ifTrue:			[FlapTabs remove: aFlapTab.			aFlapTab referent delete.			aFlapTab delete]! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/25/1999 15:11'!standardBottomFlap	|  aFlapTab aPage |	aPage _ Presenter new newPageForStandardPartsBin.	aFlapTab _ FlapTab new referent: aPage beSticky.	aFlapTab color: Color red lighter.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab assumeString: 'Supplies' font: ScriptingSystem fontForScriptorButtons orientation: #horizontal color: Color red lighter.	aFlapTab edgeToAdhereTo: #bottom; inboard: false.	aPage extent: self currentWorld width @ 100.	#(PaintInvokingMorph RectangleMorph EllipseMorph StarMorph  CurveMorph PolygonMorph TextMorph ImageMorph		PasteUpMorph   StringMorph TabbedPalette BookMorph) do:		[:sym | aPage addMorphBack: (Smalltalk at: sym) authoringPrototype].	aPage addMorphBack: Morph new previousPageButton markAsPartsDonor.	aPage addMorphBack: Morph new nextPageButton markAsPartsDonor.	aPage addMorphBack: ScriptingSystem scriptControlButtons.	aPage addMorphBack: TrashCanMorph new.	aPage replaceTallSubmorphsByThumbnails.	aPage fixLayout.	aFlapTab position: (200 @ (self currentWorld height - aFlapTab height)).	aPage setProperty: #flap toValue: true.	aPage color: (Color red muchLighter "alpha: 0.2").	aPage extent: self currentWorld width @ 100.		^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/25/1999 16:13'!standardLeftFlap	| aFlap aFlapTab aButton aString aClock buttonColor aFont |	aFlap _ PasteUpMorph newSticky.	aFlapTab _ FlapTab new referent: aFlap.	aFlapTab assumeString: 'Squeak' font: (ScriptingSystem fontForScriptorButtons) orientation: #vertical color: Color brown lighter lighter.	aFlapTab edgeToAdhereTo: #left; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aFlapTab position: (0 @ 60).	aFlap setProperty: #flap toValue: true.	aFlap color: (Color brown muchLighter lighter "alpha: 0.3").	aFlap extent: 200 @ self currentWorld height.	aButton _ SimpleButtonMorph new target: Project.	aButton actionSelector: #returnToPreviousProject.	aFont _ StrikeFont familyName: #ComicBold size: 24.	aButton label: '<' font: aFont; borderWidth: 0.	aButton firstSubmorph color: Color red lighter.	aButton beTransparent.	aButton position: 30 @ 12.	aButton setBalloonText: 'previous project'.	aFlap addMorph: aButton.	aButton _ aButton fullCopy.	aButton actionSelector: #advanceToNextProject.	aButton label: '>' font: aFont; borderWidth: 0.	aButton firstSubmorph color: Color red lighter.	aButton position: 150 @ 14.	aButton setBalloonText: 'next project'.	aFlap addMorph: aButton.	aButton _ aButton fullCopy actWhen: #buttonDown.	aButton actionSelector: #jumpToProject; target: self currentHand.	aButton label: 'Go...' font: (StrikeFont familyName: #ComicBold size: 19); borderWidth: 0.	aButton position: 78 @ 16.	aButton firstSubmorph color: Color red lighter.	aButton setBalloonText: 'go directly to a project'.	aFlap addMorph: aButton.	buttonColor _ Color green muchLighter.	aButton _ SimpleButtonMorph new target: Smalltalk.	aButton color: buttonColor.	aButton actionSelector: #saveSession.	aButton setBalloonText: 'Make a complete snapshot of the current state of the image onto disk.'.	aButton label: 'snapshot'.	aButton position: 70 @ 60.	aFlap addMorph: aButton.	aButton _ aButton fullCopy target: Utilities.	aButton actionSelector: #fileOutChanges.	aButton label: 'file out changes'.	aButton setBalloonText: 'File out the current change set to disk.'.	aButton position: 50 @ 100.	aFlap addMorph: aButton.	aButton _ aButton fullCopy target: Utilities.	aButton actionSelector: #browseRecentSubmissions.	aButton setBalloonText: 'Open a message-list browser showing the 20 most-recently-submitted methods.'.	aButton label: 'recent submissions'.	aButton position: 45 @ 140.	aFlap addMorph: aButton.	aClock _ ClockMorph newSticky position: (60 @ 170).	aClock color: Color red.	aClock showSeconds: false.	aClock font: (TextStyle default fontAt: 3).	aClock setBalloonText: 'The time of day.  If you prefer to see seconds, check out my menu.'.	aFlap addMorph: aClock.	aButton _ aButton fullCopy target: Preferences.	aButton actionSelector: #openPreferencesInspector.	aButton setBalloonText: 'Open a window allowing me to view and change various Preferences.'.	aButton label: 'preferences...'.	aButton position: 57 @ 204; color: Color cyan muchLighter.	aFlap addMorph: aButton.	aButton _ aButton fullCopy target: Utilities.	aButton actionSelector: #updateFromServer.	aButton label: 'load code updates'.	aButton setBalloonText: 'Check the Squeak server for any new code updates, and load any that are found.'.	aButton position: 48 @ 244.	aFlap addMorph: aButton.	aString _ UpdatingStringMorph new target: Smalltalk.	aString useStringFormat; color: Color blue; stepFrequency: 3000; getSelector: #version.	aString setBalloonText: 'Indicates the official Squeak release code of the current image.'.	aString position: 6 @ 280.	aFlap addMorph: aString.	aString _ aString fullCopy getSelector: #lastUpdateString.	aString setBalloonText: 'Indicates the update number of the last official updated present in the image.'.	aString top: 300.	aFlap addMorph: aString.	aString _ aString fullCopy getSelector: #currentChangeSetString.	aString setBalloonText: 'Indicates the name of the current change set.'.	aString top: 320.	aFlap addMorph: aString.	aButton _ SimpleButtonMorph new target: self.	aButton actionSelector: #explainFlaps; color: buttonColor.	aButton label: 'About flaps...'.	aButton position: (60 @ 360).	aButton setBalloonText: 'Click here to get a window of information about flaps.'.	aFlap addMorph: aButton.	aButton _ aButton fullCopy target: Preferences; actionSelector: #editAnnotations;		label: 'Annotations...'; position: (60 @ 400).	aButton setBalloonText: 'Click here to get a little window that will allow you to specify which types of annotations, in which order, you wish to see in the annotation pane of method-list browsrs.'.	aFlap addMorph: aButton.	^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/25/1999 15:11'!standardRightFlap	|  aFlapTab aPage |	aPage _ Presenter new newPageForStandardPartsBin.	aFlapTab _ FlapTab new referent: aPage beSticky.	aFlapTab color: Color red lighter.	aFlapTab assumeString: 'Tools' font: ScriptingSystem fontForScriptorButtons orientation: #vertical color: Color orange lighter.	aFlapTab edgeToAdhereTo: #right; inboard: false.	aFlapTab setToPopOutOnDragOver: true.	aFlapTab setToPopOutOnMouseOver: true.	aPage extent: (90 @ self currentWorld height).	self addSampleWindowsTo: aPage.	aPage addMorphBack: ScriptingSystem newScriptingSpace.	aPage addMorphBack: RecordingControlsMorph authoringPrototype.	aPage replaceTallSubmorphsByThumbnails.	aPage fixLayout.	aFlapTab position: ((self currentWorld width - aFlapTab width) @ 60).	aPage setProperty: #flap toValue: true.	aPage color: (Color brown muchLighter alpha: 0.5).	aPage extent: (90 @ self currentWorld height).		^ aFlapTab! !!Utilities class methodsFor: 'flaps' stamp: 'sw 2/22/1999 16:06'!toggleWhetherToShowFlaps	Preferences setPreference: #useFlaps toValue: Preferences useFlaps not! !!WorldMorph methodsFor: 'initialization' stamp: 'sw 2/25/1999 16:08'!restoreDisplay	| wasShowing displayExtent |	(displayExtent _ Display extent) = DisplayScreen actualScreenSize 		ifFalse:[	DisplayScreen startUp].	(self extent ~= displayExtent) ifTrue:		[self extent: Display extent].  "in case resolution changed"	Preferences useFlaps ifTrue:		[Utilities flapTabs do:			[:aFlapTab |				(wasShowing _ aFlapTab flapShowing) ifTrue:					[aFlapTab hideFlap].				aFlapTab spanWorld.				aFlapTab positionObject: aFlapTab.				wasShowing ifTrue:					[aFlapTab showFlap]].		self bringFlapTabsToFront].			self fullRepaintNeeded.! !!WorldMorph methodsFor: 'install / exit' stamp: 'sw 2/8/1999 12:12'!install	self viewBox: Display boundingBox.	hands do: [:h | h initForEvents].	self addFlaps.	SystemWindow noteTopWindowIn: self.	self displayWorld.! !!WorldMorph methodsFor: 'submorphs-accessing' stamp: 'sw 2/22/1999 16:49'!allNonFlapRelatedSubmorphs	"Answer all non-window submorphs that are not flap-related"	^ submorphs select:		[:m | (m isKindOf: SystemWindow) not and: [((m hasProperty: #flap) or: [m isKindOf: FlapTab]) not]]! !PasteUpMorph removeSelector: #removeFlapTab:fromEdge:!PasteUpMorph removeSelector: #removeFlap:fromEdge:!PasteUpMorph removeSelector: #flaps!PasteUpMorph removeSelector: #accommodateFlap:onEdge:!PasteUpMorph removeSelector: #accommodateFlapTab:onEdge:!Presenter removeSelector: #addSampleWindowsTo:!Presenter removeSelector: #pageOfSampleWindows!FlapTab removeSelector: #adjustPosition!FlapTab removeSelector: #showTab!FlapTab removeSelector: #toggleDragoverBehavior!FlapTab removeSelector: #hideTab!FlapTab removeSelector: #popUpOnDragOver:!FlapTab removeSelector: #assumeString:font:!Utilities class removeSelector: #flabTabs!Utilities class removeSelector: #standardSecondBottomFlap!WorldMorph removeSelector: #addFlap!WorldMorph removeSelector: #useFlaps!"Postscript:"Preferences initializeHelpMessages.Preferences disable: #useFlaps.!