'From Squeak3.1alpha of 28 February 2001 [latest update: #3814] on 9 March 2001 at 12:21:53 pm'!"Change Set:		ResizeScript-tkDate:			8 March 2001Author:			Ted KaehlerPreserve the size of a ScriptEditor and its TwoWayScrollPane through a hibernate and unhibernate cycle."!!Player methodsFor: 'scripts-kernel' stamp: 'tk 3/8/2001 16:29'!newScriptorAround: aPhrase	"Sprout a scriptor around aPhrase, thus making a new script.  aPhrase may either be a PhraseTileMorph (classic tiles 1997-2001) or a SyntaxMorph (2001 onward)"	| aScriptEditor aUniclassScript tw blk |	aUniclassScript _ self class permanentUserScriptFor: self unusedScriptName player: self.	aScriptEditor _ aUniclassScript instantiatedScriptEditorForPlayer: self.	Preferences universalTiles ifTrue: [		aScriptEditor install.		aScriptEditor insertUniversalTiles.  "Gets an empty SyntaxMorph for a MethodNode"		tw _ aScriptEditor findA: TwoWayScrollPane.		aPhrase ifNotNil:			[blk _ tw scroller firstSubmorph "MethodNode" lastSubmorph "BlockNode".			blk addMorphFront: aPhrase.			aPhrase accept.		].		SyntaxMorph setSize: nil andMakeResizable: aScriptEditor.	] ifFalse: [		aPhrase 				ifNotNil: [aScriptEditor phrase: aPhrase]	"does an install"				ifNil: [aScriptEditor install]	].	self class allSubInstancesDo: [:anInst | anInst scriptInstantiationForSelector: aUniclassScript selector].		"The above assures the presence of a ScriptInstantiation for the new selector in all siblings"	self updateAllViewersAndForceToShow: #scripts.	^ aScriptEditor! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'tk 3/9/2001 10:31'!buttonRowForEditor	"Answer a row of buttons that comprise the header at the top of the Scriptor"	| aRow aString buttonFont aStatusMorph aButton aColumn |	buttonFont _ Preferences standardButtonFont.	aRow _ AlignmentMorph newRow color: Color transparent; layoutInset: 0.	aRow hResizing: #shrinkWrap.	aRow vResizing: #shrinkWrap.	aRow addMorphFront:		(SimpleButtonMorph new			label: '!!' font: (StrikeFont familyName: #ComicBold size: 16);			target: self;			color: Color yellow;			borderWidth: 0;			actWhen: #whilePressed;			actionSelector: #tryMe;			balloonTextSelector: #tryMe).	aRow addTransparentSpacerOfSize: 6@10.	self addDismissButtonTo: aRow.	aRow addTransparentSpacerOfSize: 6@1.	aColumn _ AlignmentMorph newColumn beTransparent.	aColumn addTransparentSpacerOfSize: 0@4.	aButton _ UpdatingThreePhaseButtonMorph checkBox.	aButton		target: self;		actionSelector: #toggleWhetherShowingTiles;		getSelector: #showingMethodPane.	aButton setBalloonText: 'toggle between showing tiles and showing textual code'.	aColumn addMorphBack: aButton.	aRow addMorphBack: aColumn.	aRow addTransparentSpacerOfSize: 6@10.	aString _ playerScripted externalName.	aRow addMorphBack:		(aButton _ SimpleButtonMorph new useSquareCorners label: aString font: buttonFont; target: self; setNameTo: 'title').	aButton actWhen: #buttonDown; actionSelector: #offerScriptorMenu.	aButton borderColor: (Color fromRgbTriplet: #(0.065 0.258 1.0)).	aButton color: ScriptingSystem uniformTileInteriorColor.	aButton balloonTextSelector: #offerScriptorMenu.	aRow addTransparentSpacerOfSize: 4@1.	aButton _ (Preferences universalTiles ifTrue: [SyntaxUpdatingStringMorph] 					ifFalse: [UpdatingStringMorph]) new.	aButton useStringFormat;		target:  self;		getSelector: #scriptTitle;		setNameTo: 'script name';		font: ScriptingSystem fontForNameEditingInScriptor;		putSelector: #setScriptNameTo:;		setProperty: #okToTextEdit toValue: true;		step;		yourself.	aRow  addMorphBack: aButton.	aButton setBalloonText: 'Click here to edit the name of the script.'.		aRow addMorphBack: (aStatusMorph _ self scriptInstantiation statusControlMorph).	aRow addTransparentSpacerOfSize: 6@1.	aRow addMorphBack:		(IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'AddTest'); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addYesNoToHand;			shedSelvedge;			balloonTextSelector: #addYesNoToHand).	aRow addTransparentSpacerOfSize: 12@10.	self addDestroyButtonTo: aRow.	self scriptInstantiation updateStatusMorph: aStatusMorph.	^ aRow! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'tk 3/9/2001 10:42'!scriptTitle	^ Preferences universalTiles 		ifTrue: [SyntaxMorph new substituteKeywordFor: scriptName] 				"spaces instead of capitals, no colons"				"Don't use property #syntacticallyCorrectContents.  				  scriptName here holds the truth"		ifFalse: [scriptName].! !!ScriptEditorMorph methodsFor: 'other' stamp: 'tk 3/8/2001 16:08'!hibernate	| ex |	"Possibly delete the tiles, but only if using universal tiles."	Preferences universalTiles ifTrue:		[ex _ self extent.		submorphs size > 1 ifTrue: [submorphs second delete].		self extent: ex]	"what a hack!!"! !!ScriptEditorMorph methodsFor: 'other' stamp: 'tk 3/9/2001 11:17'!insertUniversalTilesForClass: aClass selector: aSelector	"Add a submorph which holds the universal-tiles script for the given class and selector"	|  source tree syn widget header oldExtent |	source _ aClass sourceCodeAt: aSelector.    	tree _ Compiler new 		parse: source 		in: aClass 		notifying: nil.	(syn _ tree asMorphicSyntaxUsing: SyntaxMorph)		parsedInClass: aClass.	aSelector numArgs = 0 ifTrue: [		"remove method header line"		(header _ syn findA: SelectorNode) ifNotNil: [header delete]].	syn removeReturnNode.		"if ^ self at end, remove it"	widget _ syn inAScrollPane.	widget color: Color transparent;		setProperty: #hideUnneededScrollbars toValue: true;		setProperty: #maxAutoFitSize toValue: 300@200.	oldExtent _ self extent.	self addMorphBack: widget.	widget extent: (self width - 10 @ 150).	SyntaxMorph setSize: oldExtent andMakeResizable: self.	syn finalAppearanceTweaks.! !!String methodsFor: 'comparing' stamp: 'tk 3/8/2001 16:49'!howManyMatch: string 	"Count the number of characters that match up in self and aString."	| count shorterLength |		count  _  0 .	shorterLength  _  ((self size ) min: (string size ) ) .	(1 to: shorterLength  do: [:index |		 (((self at: index ) = (string at: index )  ) ifTrue: [count  _  (count + 1 ) .			]   ).		]   ).	^  count 		! !!SyntaxMorph methodsFor: 'dropping/grabbing' stamp: 'tk 3/8/2001 16:36'!morphToDropInPasteUp: aPasteUp	"If property #beScript is true, create a scriptor around me."	| actualObject itsSelector aScriptor adjustment handy tw blk |	(self valueOfProperty: #beScript ifAbsent: [false]) ifFalse: [^ self].	self removeProperty: #beScript.	(actualObject _ self actualObject) ifNil: [^ self].	actualObject assureUniClass.	itsSelector _ self userScriptSelector.	aScriptor _ itsSelector isEmptyOrNil		ifFalse:			[adjustment _ 0@0.			actualObject scriptEditorFor: itsSelector]		ifTrue:			[adjustment _ 60 @ 20.			actualObject newScriptorAround: self].	aScriptor ifNil: [^self].	handy _ aPasteUp primaryHand.	aScriptor position: handy position - adjustment.	aPasteUp addMorphFront: aScriptor.	"do this early so can find World"	aScriptor showingMethodPane ifFalse: [		(tw _ aScriptor findA: TwoWayScrollPane) ifNil:			[itsSelector ifNil: ["blank script"				tw _ aScriptor findA: TwoWayScrollPane.				blk _ tw scroller firstSubmorph "MethodNode" lastSubmorph "BlockNode".				blk addMorphFront: self]].		SyntaxMorph setSize: nil andMakeResizable: aScriptor.	].	^ aScriptor! !!SyntaxMorph methodsFor: 'layout' stamp: 'tk 3/9/2001 11:17'!removeReturnNode	| blk |	"If last line is ^ self, remove it.  I am a methodNode"	blk _ submorphs last.	blk submorphs last decompile string = '^self ' ifTrue: [		blk submorphs last delete].! !!SyntaxMorph methodsFor: 'menus' stamp: 'tk 3/8/2001 16:09'!accept	"Turn my current state into the text of a method.  Compile it in my class."	| cls sc |	self isMethodNode ifFalse: [		self rootTile == self ifTrue: [^ self].  "not in a script"		^ self rootTile accept  "always accept at the root"].	(cls _ self parsedInClass) ifNil: [^ self].	cls compile: self decompile notifying: nil.	(sc _ self firstOwnerSuchThat: [:mm | mm class == ScriptEditorMorph]) 		ifNotNil: [sc hibernate; unhibernate].	"rebuild the tiles"! !!SyntaxMorph class methodsFor: 'as yet unclassified' stamp: 'tk 3/9/2001 12:15'!setSize: oldExtent andMakeResizable: outerMorph	| tw |	(tw _ outerMorph findA: TwoWayScrollPane) ifNil: [^self].	tw 		hResizing: #spaceFill;		vResizing: #spaceFill;		color: Color transparent;		setProperty: #hideUnneededScrollbars toValue: true;		setProperty: #maxAutoFitSize toValue: 300@200.	outerMorph 		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		cellPositioning: #topLeft.	outerMorph fullBounds.	tw 		hResizing: #spaceFill;		vResizing: #spaceFill;		removeProperty: #maxAutoFitSize;		resizeScrollBar.	oldExtent ifNil: [outerMorph minWidth: outerMorph width; 						minHeight: 100]			ifNotNil: [outerMorph minWidth: oldExtent x; width: oldExtent x;						minHeight: oldExtent y; height: oldExtent y].					"Oh, no, now can't be resized it any smaller!!!!!!"	outerMorph 		hResizing: #rigid;		vResizing: #rigid.	tw width: outerMorph width - 10.	"Why need to reset this?"	tw bottom: outerMorph bottom - 10.	"Why need to reset this?"! !!SyntaxMorph class methodsFor: 'as yet unclassified' stamp: 'tk 3/8/2001 16:29'!testClass: aClass andMethod: aSelector	| tree source syn widget outer |	source _ (aClass compiledMethodAt: aSelector) getSourceFromFile.	tree _ Compiler new 		parse: source 		in: aClass 		notifying: nil.	(syn _ tree asMorphicSyntaxUsing: SyntaxMorph)		parsedInClass: aClass.	widget _ syn inAScrollPane.	widget color: Color transparent;		setProperty: #hideUnneededScrollbars toValue: true;		setProperty: #maxAutoFitSize toValue: 300@200.	(outer _ AlignmentMorph newRow) 		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		borderWidth: 4;		color: (Color r: 0.935 g: 0.935 b: 0.935);		borderColor: Color gray;		useRoundedCorners;		addMorphBack: widget.	syn finalAppearanceTweaks.	SyntaxMorph setSize: nil andMakeResizable: outer.	outer openInWorld! !SyntaxMorph class removeSelector: #setSizeAndMakeResizable:!!SyntaxMorph reorganize!('initialization' aJunkMethod:event: inAPluggableScrollPane inAScrollPane openInWindow returnNode:expression: sample:)('accessing' actualObject cleanUpString: color: externalName getCurrentValue immediatelyBelowTheMethodNode isLeafTile parseNode parseNode: parsedInClass parsedInClass: rename: userScriptSelector userScriptSelector:)('node types' findA: isBlockNode isCascadePart isMethodNode isNoun isSyntaxMorph nodeClassIs: rootTile)('event handling' cursorBaseOffset handlesKeyboard: handlesMouseDown: handlesMouseOver: handlesMouseOverDragging: keyStroke: mouseDown: mouseEnter: mouseEnterDragging: mouseLeave: mouseLeaveDragging: mouseMove: mouseUp: step stepTime wantsSteps)('dropping/grabbing' acceptDroppingMorph:event: cleanupAfterItDroppedOnMe justDroppedInto:event: morphToDropInPasteUp: structureMatchWith: wantsDroppedMorph:event:)('drawing' drawOn: lookOpaque lookTranslucent)('highlighting' borderColor: dropColor grabColor highlightForDrop: highlightForGrab: stdBorderColor unhighlight unhighlightOwner)('selection' currentSelectionDo: deselect isSelectable scaleColorByUserPref: select setDeselectedColor setSelection: wantsKeyboardFocusFor:)('insertion drop zones' hideCaret removeDropZones trackDropZones)('layout' addBlockArg: addNoiseString: addNoiseString:emphasis: addRow:on: addSingleKeywordRow: addString:special: addTempVar: addTextRow: addToBlock:event: addUnaryRow:style: foldMessage foldMessageOneArg removeReturnNode try unfoldMessage)('printing' getHeader: printBlockArgsNodeOn:indent: printBlockNodeOn:indent: printCascadeNodeOn:indent: printMessageNodeOn:indent: printMethodNodeOn:indent: printMethodTempsNodeOn:indent: printOn: printOn:indent: printSimpleStringMorph:on: printStatementsOn:indent: printVariableNodeOn:indent: structure submorphsDoIfSyntax:ifString: submorphsDoIfSyntax:ifString:otherwise:)('pop ups' changeSound: colorPatch deletePopup event:arrow:upDown: extend extendArrow offerPopUp retract retractArrow upDownArrows)('menus' accept acceptIfInScriptor acceptIgnoring: acceptSilently addColumn:on: addMorphBack: addToken:type:on: addTokenSpecialCase:type:on: decompile finalAppearanceTweaks getMenuBlock showCode showMenu:)('debugging' balloonText debugger debugger: hostContext update:)('tests' changed test testForNode:andDo: toDo)('type checking' allSpecs argTypeFor: okToBeReplacedBy: receiverOrArgType receiverOrArgTypeAbove receiverTypeFor: resultType resultTypeFor: selector)('node to morph' addTemporaries: addTemporaryControls alanBinaryPostRcvr:key:args: alanKeywordMessage:isAConditional:key:args: alanKwdCollect:isAConditional:key:args: alanKwdIfDo:isAConditional:key:args: alanKwdRepeatForDoing:isAConditional:key:args: alanKwdSetter:isAConditional:key:args: alansMessageNode:receiver:selector:keywords:arguments: assignmentNode:variable:value: blockNode:arguments:statements: blockNodeCollect:arguments:statements: cascadeNode:receiver:messages: changeBasicStyle messageNode:receiver:selector:keywords:arguments: messageOneArg:receiver:selector:args: methodNodeInner:selectorOrFalse:precedence:arguments:temporaries:primitive:block: methodNodeOuter: vanillaMessageNode:receiver:selector:arguments:)('formatting options' alansTest1 controlContrast2: controlContrast: controlSpacing2: controlSpacing: lookClassic noiseWordsAdded specialBlockFormatting usingClassicTiles)('alans styles' aSimpleStringMorphWith: alansCurrentFontPreference alansTemplateStyleFor: anUpdatingStringMorphWith:special: colorForBinaries colorForKeywords:and: colorForUnaries constructSelfVariant:and: darkerColor fontToUseForSpecialWord: lighterColor noiseBeforeBlockArg noiseStringMorph: noiseWordBeforeVariableNode:string: setConditionalPartStyle setSpecialOuterTestFormat setSpecialTempDeclarationFormat1 setSpecialTempDeclarationFormat2 shouldBeBrokenIntoWords: specialColor:andBorder: standardCellPositioning standardInset substituteKeywordFor: tokenVerticalSeparator tokenVerticalSeparatorBlueBar tokenVerticalSeparatorGray translateFromWordySelfVariant: translateToWordySelfVariant:)!