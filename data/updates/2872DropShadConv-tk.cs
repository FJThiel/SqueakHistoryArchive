'From Squeak2.9alpha of 16 June 2000 [latest update: #2919] on 30 October 2000 at 8:15:48 pm'!"Change Set:		DropShadConv-tkDate:			30 October 2000Author:			Ted KaehlerAllows DropShadowMorphs in projects written before 2.9(update 2919) to be read in properly.  They are converted to the new idea of being a property of a morph.  The morph tree is sewn together where the DropShadowMorph would have been.Improved assistance in writing conversion methods when instances must be converted to a different class."!!SmartRefStream methodsFor: 'class changed shape' stamp: 'tk 10/30/2000 20:14'!writeClassRenameMethod: sel was: oldName fromInstVars: oldList	"The class coming is unknown.  Ask the user for the existing class it maps to.  If got one, write a method, and restart the obj fileIn.  If none, write a dummy method and get the user to complete it later.  "| tell choice  newName answ code oldVer newList newVer instSel |tell _ 'Reading an instance of ', oldName, '.Which modern class should it translate to?'.answ _ (PopUpMenu labels: 'Let me type the name nowLet me think about itLet me find a conversion file on the disk') startUpWithCaption: tell. answ = 1 ifTrue: [	tell _ 'Name of the modern class that ', oldName, 's should it translate to:'.	choice _ FillInTheBlank request: tell.		"class name"	(choice size = 0) 		ifTrue: [answ _ 'conversion method needed']		ifFalse: [newName _ choice.			answ _ Smalltalk at: newName asSymbol 				ifAbsent: ['conversion method needed'].			answ class == String ifFalse: [renamed at: oldName asSymbol put: answ name]]].(answ = 3) | (answ = 0) ifTrue: [self close.		^ 'conversion method needed'].answ = 2 ifTrue: [answ _ 'conversion method needed'].answ = 'conversion method needed' ifTrue: [		self close.  		newName _ 'PutNewClassHere'].answ class == String ifFalse: [	oldVer _ self versionSymbol: (structures at: oldName).	newList _ (Array with: answ classVersion), (answ allInstVarNames).	newVer _ self versionSymbol: newList.	instSel _ 'convert',oldVer,':',newVer, ':'. 	].code _ WriteStream on: (String new: 500).code nextPutAll: sel; cr.answ class == String ifFalse: [	code cr; tab; nextPutAll: 'reshaped at: #', oldName, ' put: #', instSel, '.'.	code cr; tab; tab; nextPutAll: '"Be sure to define that conversion method in class ', answ name, '"'].code cr; tab; nextPutAll: '^ ', newName.	"Return new class"self class compile: code contents classified: 'conversion'.newName = 'PutNewClassHere' ifTrue: [	PopUpMenu notify: 'Please complete the following method and then read-in the object file again.'.	Smalltalk browseAllImplementorsOf: sel asSymbol]. 	"The class version number only needs to change under one specific circumstance.  That is when the first letters of the instance variables have stayed the same, but their meaning has changed.  A conversion method is needed, but this system does not know it.  	If this is true for class Foo, define classVersion in Foo class.  	Beware of previous object fileouts already written after the change in meaning, but before bumping the version number.  They have the old (wrong) version number, say 2.  If this is true, your method must be able to test the data and successfully read files that say version 2 but are really 3."	^ answ! !!SmartRefStream methodsFor: 'conversion' stamp: 'tk 10/30/2000 18:52'!convertbosfces0: varDict btbrocfbsissrrspoc0: smartRefStrm	| rend |	"Work hard to eliminate the DropShadow."	(varDict at: 'submorphs') size > 0 ifTrue: [		rend _ (varDict at: 'submorphs') first renderedMorph.	"a text?"		rend setProperty: #hasDropShadow toValue: true.		rend setProperty: #shadowColor toValue: (varDict at: 'color').		rend setProperty: #shadowOffset toValue: (varDict at: 'shadowOffset').		"ds owner ifNotNil: [ds owner addAllMorphs: ds submorphs].   ^rend does this"		rend privateOwner: (varDict at: 'owner').		(varDict at: 'extension') ifNotNil: [			(varDict at: 'extension') actorState ifNotNil: [				rend actorState: (varDict at: 'extension') actorState].			(varDict at: 'extension') externalName ifNotNil: [				rend setNameTo: (varDict at: 'extension') externalName].			(varDict at: 'extension') player ifNotNil: [				rend player: (varDict at: 'extension') player.				(varDict at: 'extension') player rawCostume: rend]].		^ rend].	(rend _ Morph new) color: Color transparent.	^ rend! !!SmartRefStream methodsFor: 'conversion' stamp: 'tk 10/30/2000 18:53'!dropShadowMorphbosfces0	reshaped at: #DropShadowMorph put: #convertbosfces0:btbrocfbsissrrspoc0:.	^ SmartRefStream ! !