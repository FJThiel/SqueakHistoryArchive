'From Squeak2.9alpha of 17 August 2000 [latest update: #2504] on 18 August 2000 at 10:30:51 pm'!"Change Set:		LowSpaceQADate:			18 August 2000Author:			Dan IngallsReverts the change to lowSpaceWatcher in update 2022.  This had caused low space due to large array allocations to fail because it caused repeated recursive retries, since the logic always thought there was enough space to try again.Also a couple of simplifications along the way.I plan to follow this with another update that restores the spaceHogs benefits without the current problems."!!Behavior methodsFor: 'instance creation' stamp: 'di 8/18/2000 22:10'!basicNew: sizeRequested 	"Primitive. Answer an instance of this class with the number	of indexable variables specified by the argument, sizeRequested.	Fail if this class is not indexable or if the argument is not a	positive Integer, or if there is not enough memory available. 	Essential. See Object documentation whatIsAPrimitive."	<primitive: 71>	self isVariable ifFalse:		[self error: self printString, ' cannot have variable sized instances'].	(sizeRequested isInteger and: [sizeRequested >= 0]) ifTrue:		["arg okay; space must be low."		Smalltalk signalLowSpace.		^ self basicNew: sizeRequested  "retry if user proceeds"].	self primitiveFailed! !!Behavior methodsFor: 'instance creation' stamp: 'di 8/18/2000 20:27'!new	"Answer a new instance of the receiver (which is a class) with no indexable variables. Fail if the class is indexable."	<primitive: 70>  "This method runs primitively if successful"	^ self basicNew  "Exceptional conditions will be handled in basicNew"! !!Behavior methodsFor: 'instance creation' stamp: 'di 8/18/2000 20:32'!new: sizeRequested 	"Answer an instance of this class with the number of indexable	variables specified by the argument, sizeRequested."	<primitive: 71>  "This method runs primitively if successful"	^ self basicNew: sizeRequested  "Exceptional conditions will be handled in basicNew:"! !!SystemDictionary methodsFor: 'memory space' stamp: 'di 8/18/2000 16:49'!lowSpaceThreshold 	"Return the low space threshold. When the amount of free memory (after garbage collection) falls below this limit, the system is in serious danger of completely exhausting memory and crashing. This limit should be made high enough to allow the user open a debugger to diagnose a problem or to save the image."	thisContext isPseudoContext		ifTrue: [^ 400000  "Enough for JIT compiler"]		ifFalse: [^ 200000  "Enough for interpreter"]! !!SystemDictionary methodsFor: 'memory space' stamp: 'di 8/18/2000 21:50'!lowSpaceWatcher	"Wait until the low space semaphore is signalled, then take appropriate actions."	self garbageCollectMost <= self lowSpaceThreshold ifTrue: [		self garbageCollect <= self lowSpaceThreshold ifTrue: [			"free space must be above threshold before starting low space watcher"			^ self beep]].	LowSpaceSemaphore _ Semaphore new.	self primLowSpaceSemaphore: LowSpaceSemaphore.	self primSignalAtBytesLeft: self lowSpaceThreshold.  "enable low space interrupts"	LowSpaceSemaphore wait.  "wait for a low space condition..."	self primSignalAtBytesLeft: 0.  "disable low space interrupts"	self primLowSpaceSemaphore: nil.	LowSpaceProcess _ nil.	"Note: user now unprotected until the low space watcher is re-installed"	Smalltalk isMorphic			ifTrue: [CurrentProjectRefactoring currentInterruptName: 'Space is low']			ifFalse: [ScheduledControllers interruptName: 'Space is low']! !!SystemDictionary methodsFor: 'memory space' stamp: 'di 8/18/2000 21:15'!useUpMemoryWithArrays 	"For testing the low space handler..."	"Smalltalk installLowSpaceWatcher; useUpMemoryWithArrays"	| b |  "First use up most of memory."	b _ String new: self bytesLeft - self lowSpaceThreshold - 100000.	b _ b.  "Avoid unused value warning"	(1 to: 10000) collect: [:i | Array new: 10000]! !!SystemDictionary methodsFor: 'memory space' stamp: 'di 8/18/2000 16:49'!useUpMemoryWithContexts 	"For testing the low space handler..."	"Smalltalk installLowSpaceWatcher; useUpMemoryWithContexts"	self useUpMemoryWithContexts! !!SystemDictionary methodsFor: 'memory space' stamp: 'di 8/18/2000 16:50'!useUpMemoryWithTinyObjects 	"For testing the low space handler..."	"Smalltalk installLowSpaceWatcher; useUpMemoryWithTinyObjects"	| b |  "First use up most of memory."	b _ String new: self bytesLeft - self lowSpaceThreshold - 100000.	b _ b.  "Avoid unused value warning"	(1 to: 10000) collect: [:i | BitBlt new]! !