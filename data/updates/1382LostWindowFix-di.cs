'From Squeak 2.5 of August 6, 1999 on 10 August 1999 at 12:00:43 pm'!"Change Set:		LostWindowFixDate:			10 August 1999Author:			Dan IngallsCauses windows to relocate themselves if they ever come to be invisible, as, for instance, because of the screen rectangle getting smaller."!!PasteUpMorph methodsFor: 'world state' stamp: 'di 8/10/1999 09:30'!fullRepaintNeeded	self damageRecorder doFullRepaint.	SystemWindow windowsIn: self		satisfying: [:w | w makeMeVisible. false].! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 8/10/1999 11:57'!initialFrameFor: aView	"Find a plausible initial screen area for the supplied view.  See called method."	^ self initialFrameFor: aView initialExtent: aView initialExtent! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 8/10/1999 11:55'!initialFrameFor: aView initialExtent: initialExtent	"Find a plausible initial screen area for the supplied view, which should be a StandardSystemView, taking into account the 'reverseWindowStagger' Preference, the size needed, and other windows currently on the screen."	| allOrigins screenRight screenBottom putativeOrigin putativeFrame allowedArea staggerOrigin otherFrames |	Preferences reverseWindowStagger ifTrue:		[^ self strictlyStaggeredInitialFrameFor: aView initialExtent: initialExtent].	allowedArea _ Display usableArea.	screenRight _ allowedArea right.	screenBottom _ allowedArea bottom.	otherFrames _ Smalltalk isMorphic		ifTrue: [(SystemWindow windowsIn: World satisfying: [:w | w isCollapsed not])					collect: [:w | w bounds]]		ifFalse: [ScheduledControllers scheduledWindowControllers				select: [:aController | aController view ~~ nil]				thenCollect: [:aController | aController view isCollapsed								ifTrue: [aController view expandedFrame]								ifFalse: [aController view displayBox]]].	allOrigins _ otherFrames collect: [:f | f origin].	self standardPositions do:  "First see if one of the standard positions is free"		[:aPosition | (allOrigins includes: aPosition)			ifFalse:				[^ (aPosition extent: initialExtent) squishedWithin: allowedArea]].	staggerOrigin _ self standardPositions first.  "Fallback: try offsetting from top left"	putativeOrigin _ staggerOrigin.	[putativeOrigin _ putativeOrigin + StaggerOffset.	putativeFrame _ putativeOrigin extent: initialExtent.	(putativeFrame bottom < screenBottom) and:					[putativeFrame right < screenRight]]				whileTrue:					[(allOrigins includes: putativeOrigin)						ifFalse:							[^ (putativeOrigin extent: initialExtent) squishedWithin: allowedArea]].	^ (self scrollBarSetback @ self screenTopSetback extent: initialExtent) squishedWithin: allowedArea! !!RealEstateAgent class methodsFor: 'as yet unclassified' stamp: 'di 8/10/1999 11:55'!strictlyStaggeredInitialFrameFor: aStandardSystemView initialExtent: initialExtent	"This method implements a staggered window placement policy that I like.	Basically it provides for up to 4 windows, staggered from each of the 4 corners.	The windows are staggered so that there will always be a corner visible.	"	| allowedArea grid initialFrame otherFrames cornerSel corner delta putativeCorner free maxLevel |	allowedArea _ self scrollBarSetback @ self screenTopSetback					corner: Display usableArea bottomRight.	"Number to be staggered at each corner (less on small screens)"	maxLevel _ allowedArea area > 300000 ifTrue: [3] ifFalse: [2].	"Amount by which to stagger (less on small screens)"	grid _ allowedArea area > 500000 ifTrue: [40] ifFalse: [20].	initialFrame _ 0@0 extent: ((initialExtent							"min: (allowedArea extent - (grid*(maxLevel+1*2) + (grid//2))))							min: 600@400")).	otherFrames _ Smalltalk isMorphic		ifTrue: [(SystemWindow windowsIn: World satisfying: [:w | w isCollapsed not])					collect: [:w | w bounds]]		ifFalse: [ScheduledControllers scheduledWindowControllers				select: [:aController | aController view ~~ nil]				thenCollect: [:aController | aController view isCollapsed								ifTrue: [aController view expandedFrame]								ifFalse: [aController view displayBox]]].	0 to: maxLevel do:		[:level | 		1 to: 4 do:			[:ci | cornerSel _ #(topLeft topRight bottomRight bottomLeft) at: ci.			corner _ allowedArea perform: cornerSel.			"The extra grid//2 in delta helps to keep title tabs distinct"			delta _ (maxLevel-level*grid+(grid//2)) @ (level*grid).			1 to: ci-1 do: [:i | delta _ delta rotateBy: #right centerAt: 0@0]. "slow way"			putativeCorner _ corner + delta.			free _ true.			otherFrames do:				[:w |				free _ free & ((w perform: cornerSel) ~= putativeCorner)].			free ifTrue:				[^ (initialFrame align: (initialFrame perform: cornerSel)								with: putativeCorner)						 squishedWithin: allowedArea]]].	"If all else fails..."	^ (self scrollBarSetback @ self screenTopSetback extent: initialFrame extent)		squishedWithin: allowedArea! !!StandardSystemView methodsFor: 'displaying' stamp: 'di 8/10/1999 08:36'!displayDeEmphasized 	"Display this view with emphasis off.	If windowBits is not nil, then simply BLT if possible,		but force full display for top window so color is preserved."	self makeMeVisible.	(bitsValid and: [controller ~~ ScheduledControllers activeController])		ifTrue: [self lock.				windowBits displayAt: self windowOrigin]		ifFalse: [super display.				CacheBits ifTrue: [self cacheBitsAsIs]]! !!StandardSystemView methodsFor: 'displaying' stamp: 'di 8/10/1999 08:38'!makeMeVisible	| newLoc portRect |	((Display boundingBox insetBy: (0@0 corner: self labelHeight asPoint))		containsPoint: self displayBox topLeft) ifTrue: [^ self "OK -- my top left is visible"].	"window not on screen (probably due to reframe) -- move it now"	newLoc _ self isCollapsed		ifTrue: [RealEstateAgent assignCollapsePointFor: self]		ifFalse: [(RealEstateAgent initialFrameFor: self) topLeft].	portRect _ newLoc + self labelOffset				extent: self windowBox extent - self labelOffset.	self resizeTo: portRect.	self setLabelRegion.! !!SystemWindow methodsFor: 'drawing' stamp: 'di 8/10/1999 11:58'!makeMeVisible	((self world viewBox insetBy: (0@0 corner: self labelHeight asPoint))		containsPoint: self position) ifTrue: [^ self "OK -- at least my top left is visible"].	"window not on screen (probably due to reframe) -- move it now"	self isCollapsed		ifTrue: [self position: (RealEstateAgent assignCollapsePointFor: self)]		ifFalse: [self position: (RealEstateAgent initialFrameFor: self initialExtent: self extent) topLeft].! !