'From Squeak 2.0 of May 22, 1998 on 11 June 1998 at 2:31:56 pm'!"Change Set:		mouseOverHalosDate:			11 June 1998Author:			Scott WallaceAllows a PasteUpMorph to have the property that a mouseover one of its submorphs should bring up a halo around that submorph automatically."!GradientFillMorph subclass: #PasteUpMorph	instanceVariableNames: 'presenter model cursor padding backgroundMorph turtleTrailsForm turtlePen lastTurtlePositions openToDragNDrop isPartsBin autoLineLayout indicateCursor resizeToFit fileName isStackLike dataInstances currentDataInstance userFrameRectangle wantsMouseOverHalos removeMe'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Kernel'!!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/8/1998 11:41'!addCustomMenuItems: menu hand: aHandMorph	| subMenu prefix |	super addCustomMenuItems: menu hand: aHandMorph.	self isStackLike		ifTrue:			[subMenu _ MenuMorph new defaultTarget: self.			subMenu add: 'new card' action: #newCard.			subMenu add: 'delete this card' action: #deleteCard.			subMenu add: 'go to next card' action: #goToNextCard.			subMenu add: 'go to previous card' action: #goToPreviousCard.			menu add: 'card & stack...' subMenu: subMenu]		ifFalse:			[menu add: 'become a stack' action: #becomeStack].		subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'clear pen trails' action: #clearTurtleTrails.	subMenu add: 'all pens up' action: #liftAllPens.	subMenu add: 'all pens down' action: #lowerAllPens.	menu add: 'pens trails within...' subMenu: subMenu.	subMenu _ MenuMorph new defaultTarget: self.	subMenu add: 'save on file...' action: #saveOnFile.	subMenu add: 'navigate to...' action: #navigateTo.	#(	(autoLineLayout			'auto layout'			toggleAutoLineLayout)		(resizeToFit				'resize-to-fit'			toggleResizeToFit)		(indicateCursor			'showing cursor'		toggleIndicateCursor)		(isPartsBin				'being a parts bin'		toggleIsPartsBin)		(wantsMouseOverHalos	'mouse-over halos'		toggleMouseOverHalos))	do:		[:triplet |			prefix _ (self perform: triplet first) ifTrue: ['stop '] ifFalse: ['start '].			subMenu add:  (prefix, triplet second) action: triplet third].	(self resizeToFit & self indicateCursor & self autoLineLayout) ifFalse:		[subMenu add: 'behave like a Holder' action: #behaveLikeHolder].	self backgroundSketch ifNotNil: [subMenu add: 'delete background painting' action: #deleteBackgroundPainting].	menu add: 'playfield options...' subMenu: subMenu.	menu addLine! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'sw 6/5/1998 18:13'!wantsHaloFor: aSubMorph	^ (isPartsBin ~~ true and: [openToDragNDrop ~~ false]) and:		[self wantsMouseOverHalos]! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/8/1998 10:58'!toggleMouseOverHalos	wantsMouseOverHalos _ self wantsMouseOverHalos not! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/5/1998 18:13'!wantsMouseOverHalos	^ wantsMouseOverHalos == true! !!PasteUpMorph methodsFor: 'options' stamp: 'sw 6/5/1998 18:13'!wantsMouseOverHalos: aBoolean	wantsMouseOverHalos _ aBoolean! !!Presenter methodsFor: 'toggle-state flags' stamp: 'sw 6/8/1998 11:06'!mouseOverHalosEnabled	^ mouseOverHalosEnabled == true! !!Presenter methodsFor: 'misc' stamp: 'sw 6/8/1998 11:06'!initializeToggles 	balloonHelpEnabled _ true.	mouseOverHalosEnabled _ true.	soundsEnabled _ true.	fenceEnabled _ true.	coloredTilesEnabled _ false! !!EToyPlayer methodsFor: 'initialization' stamp: 'sw 6/5/1998 18:15'!initializeFor: anEToyHolder inWorld: aWorld	"Prepare the receiver to present the given EToy in the given world."	"Note: Any existing morphs are removed from the given world first."	| m leftEdge rightEdge sizeWanted ok |	associatedMorph _ aWorld.	aWorld removeAllMorphs.	self standardHolder: anEToyHolder.	aWorld presenter: self.		aWorld addEToy: anEToyHolder.	self initializeToggles.	aWorld addMorph: anEToyHolder scaffoldingBook beSticky.	leftEdge _ anEToyHolder scaffoldingBook right - 1.	rightEdge _ aWorld width - 185.	m _ anEToyHolder playfield.	m wantsMouseOverHalos: true.	sizeWanted _ m valueOfProperty: #worldSize.	ok _ sizeWanted ifNil: [false] ifNotNil:		[(aWorld extent x >= sizeWanted x) & (aWorld extent y >= sizeWanted y)].	ok ifFalse: ["size not remembered"		m extent: (rightEdge - leftEdge)@(aWorld height//2).		m color: self initialPlayfieldColor].	aWorld addMorphBack: (m position: leftEdge@0).	aWorld startSteppingSubmorphsOf: m.	m _ anEToyHolder eToyPalette.	m ifNil: [m _ EToyPalette new].	anEToyHolder eToyPalette: m.	standardPalette _ m.	aWorld addMorph: (m beSticky position: anEToyHolder playfield right-1 @0).	m initializeInWorld: aWorld.  "So palettes can get at world"	m showNoPalette.	self harmonizeTilesWithColorSetting.	self addControlsFor: anEToyHolder inWorld:  aWorld.	anEToyHolder notInPlayfield 		ifNil: [self addExtrasFor: anEToyHolder 					inWorld: aWorld]  "differs from orig 118tk here"		ifNotNil: [anEToyHolder notInPlayfield reverseDo: [:each | aWorld addMorph: each]].	anEToyHolder scaffoldingBook selectTabNamed: 'Toy'.	EToyParameters kidsMode ifTrue:		[anEToyHolder scaffoldingBook configureForKids].	self startRunningScripts! !EToyWorld removeSelector: #mouseOverHalosEnabled!